

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Apr 07 17:22:49 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.40
   116                           ; Generated 01/12/2016 GMT
   117                           ; 
   118                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4620 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataBANK1
   151  005466                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for UI@F3239
   155  005466  4D                 	db	77
   156  005467  4D                 	db	77
   157  005468  4D                 	db	77
   158  005469  00                 	db	0
   159                           
   160                           ;initializer for printRTC@F3229
   161  00546A  4D                 	db	77
   162  00546B  4D                 	db	77
   163  00546C  4D                 	db	77
   164  00546D  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FACC                     __pmediumconst:
   168                           	opt stack 0
   169  00FACC  00                 	db	0
   170  00FACD                     _keys:
   171                           	opt stack 0
   172  00FACD  31                 	db	49
   173  00FACE  32                 	db	50
   174  00FACF  33                 	db	51
   175  00FAD0  41                 	db	65
   176  00FAD1  34                 	db	52
   177  00FAD2  35                 	db	53
   178  00FAD3  36                 	db	54
   179  00FAD4  42                 	db	66
   180  00FAD5  37                 	db	55
   181  00FAD6  38                 	db	56
   182  00FAD7  39                 	db	57
   183  00FAD8  43                 	db	67
   184  00FAD9  2A                 	db	42
   185  00FADA  30                 	db	48
   186  00FADB  23                 	db	35
   187  00FADC  44                 	db	68
   188  00FADD  00                 	db	0
   189  00FADE                     __end_of_keys:
   190                           	opt stack 0
   191  00FADE                     _dpowers:
   192                           	opt stack 0
   193  00FADE  0001               	dw	1
   194  00FAE0  000A               	dw	10
   195  00FAE2  0064               	dw	100
   196  00FAE4  03E8               	dw	1000
   197  00FAE6  2710               	dw	10000
   198  00FAE8                     __end_of_dpowers:
   199                           	opt stack 0
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADRESH	set	4036
   205  0000                     _ADRESL	set	4035
   206  0000                     _CMCONbits	set	4020
   207  0000                     _CVRCON	set	4021
   208  0000                     _EEADR	set	4009
   209  0000                     _EEADRH	set	4010
   210  0000                     _EECON1bits	set	4006
   211  0000                     _EECON2	set	4007
   212  0000                     _EEDATA	set	4008
   213  0000                     _INTCONbits	set	4082
   214  0000                     _LATA	set	3977
   215  0000                     _LATAbits	set	3977
   216  0000                     _LATB	set	3978
   217  0000                     _LATBbits	set	3978
   218  0000                     _LATC	set	3979
   219  0000                     _LATCbits	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATDbits	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _OSCCON	set	4051
   224  0000                     _OSCTUNEbits	set	3995
   225  0000                     _PIR2bits	set	4001
   226  0000                     _PORTAbits	set	3968
   227  0000                     _PORTB	set	3969
   228  0000                     _PORTBbits	set	3969
   229  0000                     _PR2	set	4043
   230  0000                     _SSPADD	set	4040
   231  0000                     _SSPBUF	set	4041
   232  0000                     _SSPCON1	set	4038
   233  0000                     _SSPCON2	set	4037
   234  0000                     _SSPSTAT	set	4039
   235  0000                     _T0CON	set	4053
   236  0000                     _T1CON	set	4045
   237  0000                     _T2CON	set	4042
   238  0000                     _T3CON	set	4017
   239  0000                     _TMR0H	set	4055
   240  0000                     _TMR0L	set	4054
   241  0000                     _TMR1H	set	4047
   242  0000                     _TMR1L	set	4046
   243  0000                     _TMR3H	set	4019
   244  0000                     _TMR3L	set	4018
   245  0000                     _TRISA	set	3986
   246  0000                     _TRISB	set	3987
   247  0000                     _TRISC	set	3988
   248  0000                     _TRISD	set	3989
   249  0000                     _TRISE	set	3990
   250  0000                     _ACKDT	set	32301
   251  0000                     _ACKEN	set	32300
   252  0000                     _ADIE	set	31982
   253  0000                     _INT1IE	set	32643
   254  0000                     _INT1IF	set	32640
   255  0000                     _PEIE	set	32662
   256  0000                     _PEN	set	32298
   257  0000                     _RCEN	set	32299
   258  0000                     _RSEN	set	32297
   259  0000                     _SEN	set	32296
   260  0000                     _TMR0IE	set	32661
   261  0000                     _TMR0IF	set	32658
   262  0000                     _TMR0ON	set	32431
   263  0000                     _TMR1IE	set	31976
   264  0000                     _TMR1IF	set	31984
   265  0000                     _TMR1ON	set	32360
   266  0000                     _TMR2IE	set	31977
   267  0000                     _TMR2IF	set	31985
   268  0000                     _TMR2ON	set	32338
   269  0000                     _TMR3IE	set	32001
   270  0000                     _TMR3IF	set	32009
   271  0000                     _TMR3ON	set	32136
   272  0000                     _TRISC3	set	31907
   273  0000                     _TRISC4	set	31908
   274  0000                     _nRBPU	set	32655
   275  00FAE8                     STR_21:
   276  00FAE8  25                 	db	37
   277  00FAE9  30                 	db	48	;'0'
   278  00FAEA  32                 	db	50	;'2'
   279  00FAEB  64                 	db	100	;'d'
   280  00FAEC  25                 	db	37
   281  00FAED  73                 	db	115	;'s'
   282  00FAEE  20                 	db	32
   283  00FAEF  7C                 	db	124
   284  00FAF0  20                 	db	32
   285  00FAF1  25                 	db	37
   286  00FAF2  30                 	db	48	;'0'
   287  00FAF3  32                 	db	50	;'2'
   288  00FAF4  64                 	db	100	;'d'
   289  00FAF5  3A                 	db	58	;':'
   290  00FAF6  25                 	db	37
   291  00FAF7  30                 	db	48	;'0'
   292  00FAF8  32                 	db	50	;'2'
   293  00FAF9  64                 	db	100	;'d'
   294  00FAFA  3A                 	db	58	;':'
   295  00FAFB  25                 	db	37
   296  00FAFC  30                 	db	48	;'0'
   297  00FAFD  32                 	db	50	;'2'
   298  00FAFE  64                 	db	100	;'d'
   299  00FAFF  00                 	db	0
   300  00FB00                     STR_66:
   301  00FB00  28                 	db	40
   302  00FB01  64                 	db	100	;'d'
   303  00FB02  61                 	db	97	;'a'
   304  00FB03  74                 	db	116	;'t'
   305  00FB04  61                 	db	97	;'a'
   306  00FB05  3A                 	db	58	;':'
   307  00FB06  20                 	db	32
   308  00FB07  25                 	db	37
   309  00FB08  75                 	db	117	;'u'
   310  00FB09  2C                 	db	44
   311  00FB0A  20                 	db	32
   312  00FB0B  61                 	db	97	;'a'
   313  00FB0C  64                 	db	100	;'d'
   314  00FB0D  64                 	db	100	;'d'
   315  00FB0E  72                 	db	114	;'r'
   316  00FB0F  3A                 	db	58	;':'
   317  00FB10  20                 	db	32
   318  00FB11  25                 	db	37
   319  00FB12  75                 	db	117	;'u'
   320  00FB13  29                 	db	41
   321  00FB14  00                 	db	0
   322  00FB15                     STR_111:
   323  00FB15  44                 	db	68	;'D'
   324  00FB16  20                 	db	32
   325  00FB17  57                 	db	87	;'W'
   326  00FB18  49                 	db	73	;'I'
   327  00FB19  4C                 	db	76	;'L'
   328  00FB1A  4C                 	db	76	;'L'
   329  00FB1B  20                 	db	32
   330  00FB1C  52                 	db	82	;'R'
   331  00FB1D  45                 	db	69	;'E'
   332  00FB1E  54                 	db	84	;'T'
   333  00FB1F  55                 	db	85	;'U'
   334  00FB20  52                 	db	82	;'R'
   335  00FB21  4E                 	db	78	;'N'
   336  00FB22  20                 	db	32
   337  00FB23  20                 	db	32
   338  00FB24  20                 	db	32
   339  00FB25  20                 	db	32
   340  00FB26  00                 	db	0
   341  00FB27                     STR_121:
   342  00FB27  4F                 	db	79	;'O'
   343  00FB28  54                 	db	84	;'T'
   344  00FB29  48                 	db	72	;'H'
   345  00FB2A  45                 	db	69	;'E'
   346  00FB2B  52                 	db	82	;'R'
   347  00FB2C  20                 	db	32
   348  00FB2D  53                 	db	83	;'S'
   349  00FB2E  45                 	db	69	;'E'
   350  00FB2F  54                 	db	84	;'T'
   351  00FB30  53                 	db	83	;'S'
   352  00FB31  20                 	db	32
   353  00FB32  52                 	db	82	;'R'
   354  00FB33  41                 	db	65	;'A'
   355  00FB34  35                 	db	53	;'5'
   356  00FB35  20                 	db	32
   357  00FB36  20                 	db	32
   358  00FB37  20                 	db	32
   359  00FB38  00                 	db	0
   360  00FB39                     STR_120:
   361  00FB39  53                 	db	83	;'S'
   362  00FB3A  3A                 	db	58	;':'
   363  00FB3B  20                 	db	32
   364  00FB3C  44                 	db	68	;'D'
   365  00FB3D  20                 	db	32
   366  00FB3E  57                 	db	87	;'W'
   367  00FB3F  49                 	db	73	;'I'
   368  00FB40  4C                 	db	76	;'L'
   369  00FB41  4C                 	db	76	;'L'
   370  00FB42  20                 	db	32
   371  00FB43  52                 	db	82	;'R'
   372  00FB44  45                 	db	69	;'E'
   373  00FB45  54                 	db	84	;'T'
   374  00FB46  55                 	db	85	;'U'
   375  00FB47  52                 	db	82	;'R'
   376  00FB48  4E                 	db	78	;'N'
   377  00FB49  20                 	db	32
   378  00FB4A  00                 	db	0
   379  00FB4B                     STR_123:
   380  00FB4B  4F                 	db	79	;'O'
   381  00FB4C  54                 	db	84	;'T'
   382  00FB4D  48                 	db	72	;'H'
   383  00FB4E  45                 	db	69	;'E'
   384  00FB4F  52                 	db	82	;'R'
   385  00FB50  3A                 	db	58	;':'
   386  00FB51  20                 	db	32
   387  00FB52  43                 	db	67	;'C'
   388  00FB53  41                 	db	65	;'A'
   389  00FB54  4D                 	db	77	;'M'
   390  00FB55  20                 	db	32
   391  00FB56  54                 	db	84	;'T'
   392  00FB57  4F                 	db	79	;'O'
   393  00FB58  47                 	db	71	;'G'
   394  00FB59  47                 	db	71	;'G'
   395  00FB5A  4C                 	db	76	;'L'
   396  00FB5B  45                 	db	69	;'E'
   397  00FB5C  00                 	db	0
   398  00FB5D                     STR_122:
   399  00FB5D  44                 	db	68	;'D'
   400  00FB5E  3A                 	db	58	;':'
   401  00FB5F  20                 	db	32
   402  00FB60  52                 	db	82	;'R'
   403  00FB61  45                 	db	69	;'E'
   404  00FB62  54                 	db	84	;'T'
   405  00FB63  7C                 	db	124
   406  00FB64  32                 	db	50	;'2'
   407  00FB65  3A                 	db	58	;':'
   408  00FB66  20                 	db	32
   409  00FB67  43                 	db	67	;'C'
   410  00FB68  4F                 	db	79	;'O'
   411  00FB69  4E                 	db	78	;'N'
   412  00FB6A  44                 	db	68	;'D'
   413  00FB6B  20                 	db	32
   414  00FB6C  25                 	db	37
   415  00FB6D  64                 	db	100	;'d'
   416  00FB6E  00                 	db	0
   417  00FB6F                     STR_3:
   418  00FB6F  2D                 	db	45
   419  00FB70  2D                 	db	45
   420  00FB71  20                 	db	32
   421  00FB72  4C                 	db	76	;'L'
   422  00FB73  4F                 	db	79	;'O'
   423  00FB74  47                 	db	71	;'G'
   424  00FB75  20                 	db	32
   425  00FB76  25                 	db	37
   426  00FB77  32                 	db	50	;'2'
   427  00FB78  64                 	db	100	;'d'
   428  00FB79  20                 	db	32
   429  00FB7A  48                 	db	72	;'H'
   430  00FB7B  45                 	db	69	;'E'
   431  00FB7C  52                 	db	82	;'R'
   432  00FB7D  45                 	db	69	;'E'
   433  00FB7E  2D                 	db	45
   434  00FB7F  2D                 	db	45
   435  00FB80  00                 	db	0
   436  00FB81                     STR_1:
   437  00FB81  52                 	db	82	;'R'
   438  00FB82  45                 	db	69	;'E'
   439  00FB83  53                 	db	83	;'S'
   440  00FB84  55                 	db	85	;'U'
   441  00FB85  4C                 	db	76	;'L'
   442  00FB86  54                 	db	84	;'T'
   443  00FB87  53                 	db	83	;'S'
   444  00FB88  20                 	db	32
   445  00FB89  49                 	db	73	;'I'
   446  00FB8A  4E                 	db	78	;'N'
   447  00FB8B  20                 	db	32
   448  00FB8C  4C                 	db	76	;'L'
   449  00FB8D  4F                 	db	79	;'O'
   450  00FB8E  47                 	db	71	;'G'
   451  00FB8F  20                 	db	32
   452  00FB90  25                 	db	37
   453  00FB91  64                 	db	100	;'d'
   454  00FB92  00                 	db	0
   455  00FB93                     STR_102:
   456  00FB93  4D                 	db	77	;'M'
   457  00FB94  49                 	db	73	;'I'
   458  00FB95  44                 	db	68	;'D'
   459  00FB96  20                 	db	32
   460  00FB97  2D                 	db	45
   461  00FB98  2D                 	db	45
   462  00FB99  20                 	db	32
   463  00FB9A  32                 	db	50	;'2'
   464  00FB9B  73                 	db	115	;'s'
   465  00FB9C  20                 	db	32
   466  00FB9D  20                 	db	32
   467  00FB9E  20                 	db	32
   468  00FB9F  20                 	db	32
   469  00FBA0  20                 	db	32
   470  00FBA1  20                 	db	32
   471  00FBA2  20                 	db	32
   472  00FBA3  00                 	db	0
   473  00FBA4                     STR_105:
   474  00FBA4  44                 	db	68	;'D'
   475  00FBA5  52                 	db	82	;'R'
   476  00FBA6  4F                 	db	79	;'O'
   477  00FBA7  50                 	db	80	;'P'
   478  00FBA8  20                 	db	32
   479  00FBA9  2D                 	db	45
   480  00FBAA  2D                 	db	45
   481  00FBAB  20                 	db	32
   482  00FBAC  32                 	db	50	;'2'
   483  00FBAD  73                 	db	115	;'s'
   484  00FBAE  20                 	db	32
   485  00FBAF  20                 	db	32
   486  00FBB0  20                 	db	32
   487  00FBB1  20                 	db	32
   488  00FBB2  20                 	db	32
   489  00FBB3  20                 	db	32
   490  00FBB4  00                 	db	0
   491  00FBB5                     STR_99:
   492  00FBB5  4C                 	db	76	;'L'
   493  00FBB6  45                 	db	69	;'E'
   494  00FBB7  46                 	db	70	;'F'
   495  00FBB8  54                 	db	84	;'T'
   496  00FBB9  20                 	db	32
   497  00FBBA  2D                 	db	45
   498  00FBBB  2D                 	db	45
   499  00FBBC  20                 	db	32
   500  00FBBD  32                 	db	50	;'2'
   501  00FBBE  73                 	db	115	;'s'
   502  00FBBF  20                 	db	32
   503  00FBC0  20                 	db	32
   504  00FBC1  20                 	db	32
   505  00FBC2  20                 	db	32
   506  00FBC3  20                 	db	32
   507  00FBC4  20                 	db	32
   508  00FBC5  00                 	db	0
   509  00FBC6                     STR_104:
   510  00FBC6  4C                 	db	76	;'L'
   511  00FBC7  45                 	db	69	;'E'
   512  00FBC8  56                 	db	86	;'V'
   513  00FBC9  45                 	db	69	;'E'
   514  00FBCA  4C                 	db	76	;'L'
   515  00FBCB  20                 	db	32
   516  00FBCC  2D                 	db	45
   517  00FBCD  2D                 	db	45
   518  00FBCE  20                 	db	32
   519  00FBCF  32                 	db	50	;'2'
   520  00FBD0  73                 	db	115	;'s'
   521  00FBD1  20                 	db	32
   522  00FBD2  20                 	db	32
   523  00FBD3  20                 	db	32
   524  00FBD4  20                 	db	32
   525  00FBD5  20                 	db	32
   526  00FBD6  00                 	db	0
   527  00FBD7                     STR_98:
   528  00FBD7  52                 	db	82	;'R'
   529  00FBD8  49                 	db	73	;'I'
   530  00FBD9  47                 	db	71	;'G'
   531  00FBDA  48                 	db	72	;'H'
   532  00FBDB  54                 	db	84	;'T'
   533  00FBDC  20                 	db	32
   534  00FBDD  2D                 	db	45
   535  00FBDE  2D                 	db	45
   536  00FBDF  20                 	db	32
   537  00FBE0  32                 	db	50	;'2'
   538  00FBE1  73                 	db	115	;'s'
   539  00FBE2  20                 	db	32
   540  00FBE3  20                 	db	32
   541  00FBE4  20                 	db	32
   542  00FBE5  20                 	db	32
   543  00FBE6  20                 	db	32
   544  00FBE7  00                 	db	0
   545  00FBE8                     STR_97:
   546  00FBE8  4D                 	db	77	;'M'
   547  00FBE9  49                 	db	73	;'I'
   548  00FBEA  44                 	db	68	;'D'
   549  00FBEB  44                 	db	68	;'D'
   550  00FBEC  4C                 	db	76	;'L'
   551  00FBED  45                 	db	69	;'E'
   552  00FBEE  20                 	db	32
   553  00FBEF  2D                 	db	45
   554  00FBF0  2D                 	db	45
   555  00FBF1  20                 	db	32
   556  00FBF2  32                 	db	50	;'2'
   557  00FBF3  73                 	db	115	;'s'
   558  00FBF4  20                 	db	32
   559  00FBF5  20                 	db	32
   560  00FBF6  20                 	db	32
   561  00FBF7  20                 	db	32
   562  00FBF8  00                 	db	0
   563  00FBF9                     STR_112:
   564  00FBF9  4F                 	db	79	;'O'
   565  00FBFA  54                 	db	84	;'T'
   566  00FBFB  48                 	db	72	;'H'
   567  00FBFC  45                 	db	69	;'E'
   568  00FBFD  52                 	db	82	;'R'
   569  00FBFE  20                 	db	32
   570  00FBFF  53                 	db	83	;'S'
   571  00FC00  45                 	db	69	;'E'
   572  00FC01  54                 	db	84	;'T'
   573  00FC02  53                 	db	83	;'S'
   574  00FC03  20                 	db	32
   575  00FC04  44                 	db	68	;'D'
   576  00FC05  43                 	db	67	;'C'
   577  00FC06  20                 	db	32
   578  00FC07  20                 	db	32
   579  00FC08  20                 	db	32
   580  00FC09  00                 	db	0
   581  00FC0A                     STR_118:
   582  00FC0A  44                 	db	68	;'D'
   583  00FC0B  20                 	db	32
   584  00FC0C  57                 	db	87	;'W'
   585  00FC0D  49                 	db	73	;'I'
   586  00FC0E  4C                 	db	76	;'L'
   587  00FC0F  4C                 	db	76	;'L'
   588  00FC10  20                 	db	32
   589  00FC11  52                 	db	82	;'R'
   590  00FC12  45                 	db	69	;'E'
   591  00FC13  54                 	db	84	;'T'
   592  00FC14  55                 	db	85	;'U'
   593  00FC15  52                 	db	82	;'R'
   594  00FC16  4E                 	db	78	;'N'
   595  00FC17  20                 	db	32
   596  00FC18  20                 	db	32
   597  00FC19  20                 	db	32
   598  00FC1A  00                 	db	0
   599  00FC1B                     STR_100:
   600  00FC1B  4D                 	db	77	;'M'
   601  00FC1C  49                 	db	73	;'I'
   602  00FC1D  44                 	db	68	;'D'
   603  00FC1E  2D                 	db	45
   604  00FC1F  4C                 	db	76	;'L'
   605  00FC20  45                 	db	69	;'E'
   606  00FC21  46                 	db	70	;'F'
   607  00FC22  54                 	db	84	;'T'
   608  00FC23  20                 	db	32
   609  00FC24  2D                 	db	45
   610  00FC25  2D                 	db	45
   611  00FC26  20                 	db	32
   612  00FC27  32                 	db	50	;'2'
   613  00FC28  73                 	db	115	;'s'
   614  00FC29  20                 	db	32
   615  00FC2A  20                 	db	32
   616  00FC2B  00                 	db	0
   617  00FC2C                     STR_101:
   618  00FC2C  4D                 	db	77	;'M'
   619  00FC2D  49                 	db	73	;'I'
   620  00FC2E  44                 	db	68	;'D'
   621  00FC2F  2D                 	db	45
   622  00FC30  52                 	db	82	;'R'
   623  00FC31  49                 	db	73	;'I'
   624  00FC32  47                 	db	71	;'G'
   625  00FC33  48                 	db	72	;'H'
   626  00FC34  54                 	db	84	;'T'
   627  00FC35  20                 	db	32
   628  00FC36  2D                 	db	45
   629  00FC37  2D                 	db	45
   630  00FC38  20                 	db	32
   631  00FC39  32                 	db	50	;'2'
   632  00FC3A  73                 	db	115	;'s'
   633  00FC3B  20                 	db	32
   634  00FC3C  00                 	db	0
   635  00FC3D  45                 	db	69	;'E'
   636  00FC3E  4C                 	db	76	;'L'
   637  00FC3F  53                 	db	83	;'S'
   638  00FC40  45                 	db	69	;'E'
   639  00FC41  20                 	db	32
   640  00FC42  54                 	db	84	;'T'
   641  00FC43  4F                 	db	79	;'O'
   642  00FC44  47                 	db	71	;'G'
   643  00FC45  47                 	db	71	;'G'
   644  00FC46  4C                 	db	76	;'L'
   645  00FC47  45                 	db	69	;'E'
   646  00FC48  53                 	db	83	;'S'
   647  00FC49  20                 	db	32
   648  00FC4A  52                 	db	82	;'R'
   649  00FC4B  41                 	db	65	;'A'
   650  00FC4C  35                 	db	53	;'5'
   651  00FC4D  00                 	db	0
   652  00FC4E                     STR_72:
   653  00FC4E  41                 	db	65	;'A'
   654  00FC4F  4C                 	db	76	;'L'
   655  00FC50  47                 	db	71	;'G'
   656  00FC51  31                 	db	49	;'1'
   657  00FC52  3A                 	db	58	;':'
   658  00FC53  20                 	db	32
   659  00FC54  39                 	db	57	;'9'
   660  00FC55  20                 	db	32
   661  00FC56  50                 	db	80	;'P'
   662  00FC57  4F                 	db	79	;'O'
   663  00FC58  50                 	db	80	;'P'
   664  00FC59  4E                 	db	78	;'N'
   665  00FC5A  4F                 	db	79	;'O'
   666  00FC5B  54                 	db	84	;'T'
   667  00FC5C  41                 	db	65	;'A'
   668  00FC5D  42                 	db	66	;'B'
   669  00FC5E  00                 	db	0
   670  00FC5F                     STR_92:
   671  00FC5F  54                 	db	84	;'T'
   672  00FC60  53                 	db	83	;'S'
   673  00FC61  54                 	db	84	;'T'
   674  00FC62  3A                 	db	58	;':'
   675  00FC63  20                 	db	32
   676  00FC64  43                 	db	67	;'C'
   677  00FC65  4F                 	db	79	;'O'
   678  00FC66  4E                 	db	78	;'N'
   679  00FC67  44                 	db	68	;'D'
   680  00FC68  20                 	db	32
   681  00FC69  53                 	db	83	;'S'
   682  00FC6A  4F                 	db	79	;'O'
   683  00FC6B  4C                 	db	76	;'L'
   684  00FC6C  4E                 	db	78	;'N'
   685  00FC6D  27                 	db	39
   686  00FC6E  44                 	db	68	;'D'
   687  00FC6F  00                 	db	0
   688  00FC70                     STR_94:
   689  00FC70  54                 	db	84	;'T'
   690  00FC71  53                 	db	83	;'S'
   691  00FC72  54                 	db	84	;'T'
   692  00FC73  3A                 	db	58	;':'
   693  00FC74  20                 	db	32
   694  00FC75  50                 	db	80	;'P'
   695  00FC76  55                 	db	85	;'U'
   696  00FC77  53                 	db	83	;'S'
   697  00FC78  48                 	db	72	;'H'
   698  00FC79  20                 	db	32
   699  00FC7A  53                 	db	83	;'S'
   700  00FC7B  4F                 	db	79	;'O'
   701  00FC7C  4C                 	db	76	;'L'
   702  00FC7D  4E                 	db	78	;'N'
   703  00FC7E  27                 	db	39
   704  00FC7F  44                 	db	68	;'D'
   705  00FC80  00                 	db	0
   706  00FC81                     STR_68:
   707  00FC81  32                 	db	50	;'2'
   708  00FC82  2E                 	db	46
   709  00FC83  53                 	db	83	;'S'
   710  00FC84  4E                 	db	78	;'N'
   711  00FC85  52                 	db	82	;'R'
   712  00FC86  7C                 	db	124
   713  00FC87  34                 	db	52	;'4'
   714  00FC88  2E                 	db	46
   715  00FC89  48                 	db	72	;'H'
   716  00FC8A  49                 	db	73	;'I'
   717  00FC8B  7C                 	db	124
   718  00FC8C  35                 	db	53	;'5'
   719  00FC8D  2E                 	db	46
   720  00FC8E  4D                 	db	77	;'M'
   721  00FC8F  45                 	db	69	;'E'
   722  00FC90  44                 	db	68	;'D'
   723  00FC91  00                 	db	0
   724  00FC92                     STR_69:
   725  00FC92  42                 	db	66	;'B'
   726  00FC93  2E                 	db	46
   727  00FC94  50                 	db	80	;'P'
   728  00FC95  53                 	db	83	;'S'
   729  00FC96  48                 	db	72	;'H'
   730  00FC97  7C                 	db	124
   731  00FC98  38                 	db	56	;'8'
   732  00FC99  2E                 	db	46
   733  00FC9A  53                 	db	83	;'S'
   734  00FC9B  56                 	db	86	;'V'
   735  00FC9C  7C                 	db	124
   736  00FC9D  39                 	db	57	;'9'
   737  00FC9E  2E                 	db	46
   738  00FC9F  42                 	db	66	;'B'
   739  00FCA0  4C                 	db	76	;'L'
   740  00FCA1  4B                 	db	75	;'K'
   741  00FCA2  00                 	db	0
   742  00FCA3                     STR_127:
   743  00FCA3  45                 	db	69	;'E'
   744  00FCA4  4C                 	db	76	;'L'
   745  00FCA5  53                 	db	83	;'S'
   746  00FCA6  45                 	db	69	;'E'
   747  00FCA7  20                 	db	32
   748  00FCA8  54                 	db	84	;'T'
   749  00FCA9  4F                 	db	79	;'O'
   750  00FCAA  47                 	db	71	;'G'
   751  00FCAB  47                 	db	71	;'G'
   752  00FCAC  4C                 	db	76	;'L'
   753  00FCAD  45                 	db	69	;'E'
   754  00FCAE  53                 	db	83	;'S'
   755  00FCAF  20                 	db	32
   756  00FCB0  41                 	db	65	;'A'
   757  00FCB1  52                 	db	82	;'R'
   758  00FCB2  4D                 	db	77	;'M'
   759  00FCB3  00                 	db	0
   760  00FCB4                     STR_110:
   761  00FCB4  54                 	db	84	;'T'
   762  00FCB5  53                 	db	83	;'S'
   763  00FCB6  54                 	db	84	;'T'
   764  00FCB7  3A                 	db	58	;':'
   765  00FCB8  20                 	db	32
   766  00FCB9  42                 	db	66	;'B'
   767  00FCBA  4F                 	db	79	;'O'
   768  00FCBB  54                 	db	84	;'T'
   769  00FCBC  48                 	db	72	;'H'
   770  00FCBD  20                 	db	32
   771  00FCBE  53                 	db	83	;'S'
   772  00FCBF  45                 	db	69	;'E'
   773  00FCC0  52                 	db	82	;'R'
   774  00FCC1  56                 	db	86	;'V'
   775  00FCC2  4F                 	db	79	;'O'
   776  00FCC3  53                 	db	83	;'S'
   777  00FCC4  00                 	db	0
   778  00FCC5                     STR_41:
   779  00FCC5  4C                 	db	76	;'L'
   780  00FCC6  4F                 	db	79	;'O'
   781  00FCC7  47                 	db	71	;'G'
   782  00FCC8  20                 	db	32
   783  00FCC9  31                 	db	49	;'1'
   784  00FCCA  20                 	db	32
   785  00FCCB  20                 	db	32
   786  00FCCC  20                 	db	32
   787  00FCCD  20                 	db	32
   788  00FCCE  20                 	db	32
   789  00FCCF  20                 	db	32
   790  00FCD0  20                 	db	32
   791  00FCD1  20                 	db	32
   792  00FCD2  20                 	db	32
   793  00FCD3  20                 	db	32
   794  00FCD4  20                 	db	32
   795  00FCD5  00                 	db	0
   796  00FCD6                     STR_40:
   797  00FCD6  4C                 	db	76	;'L'
   798  00FCD7  4F                 	db	79	;'O'
   799  00FCD8  47                 	db	71	;'G'
   800  00FCD9  20                 	db	32
   801  00FCDA  32                 	db	50	;'2'
   802  00FCDB  20                 	db	32
   803  00FCDC  20                 	db	32
   804  00FCDD  20                 	db	32
   805  00FCDE  20                 	db	32
   806  00FCDF  20                 	db	32
   807  00FCE0  20                 	db	32
   808  00FCE1  20                 	db	32
   809  00FCE2  20                 	db	32
   810  00FCE3  20                 	db	32
   811  00FCE4  20                 	db	32
   812  00FCE5  20                 	db	32
   813  00FCE6  00                 	db	0
   814  00FCE7                     STR_44:
   815  00FCE7  4C                 	db	76	;'L'
   816  00FCE8  4F                 	db	79	;'O'
   817  00FCE9  47                 	db	71	;'G'
   818  00FCEA  20                 	db	32
   819  00FCEB  33                 	db	51	;'3'
   820  00FCEC  20                 	db	32
   821  00FCED  20                 	db	32
   822  00FCEE  20                 	db	32
   823  00FCEF  20                 	db	32
   824  00FCF0  20                 	db	32
   825  00FCF1  20                 	db	32
   826  00FCF2  20                 	db	32
   827  00FCF3  20                 	db	32
   828  00FCF4  20                 	db	32
   829  00FCF5  20                 	db	32
   830  00FCF6  20                 	db	32
   831  00FCF7  00                 	db	0
   832  00FCF8                     STR_48:
   833  00FCF8  4C                 	db	76	;'L'
   834  00FCF9  4F                 	db	79	;'O'
   835  00FCFA  47                 	db	71	;'G'
   836  00FCFB  20                 	db	32
   837  00FCFC  34                 	db	52	;'4'
   838  00FCFD  20                 	db	32
   839  00FCFE  20                 	db	32
   840  00FCFF  20                 	db	32
   841  00FD00  20                 	db	32
   842  00FD01  20                 	db	32
   843  00FD02  20                 	db	32
   844  00FD03  20                 	db	32
   845  00FD04  20                 	db	32
   846  00FD05  20                 	db	32
   847  00FD06  20                 	db	32
   848  00FD07  20                 	db	32
   849  00FD08  00                 	db	0
   850  00FD09                     STR_36:
   851  00FD09  33                 	db	51	;'3'
   852  00FD0A  2E                 	db	46
   853  00FD0B  20                 	db	32
   854  00FD0C  4C                 	db	76	;'L'
   855  00FD0D  4F                 	db	79	;'O'
   856  00FD0E  47                 	db	71	;'G'
   857  00FD0F  53                 	db	83	;'S'
   858  00FD10  20                 	db	32
   859  00FD11  20                 	db	32
   860  00FD12  20                 	db	32
   861  00FD13  20                 	db	32
   862  00FD14  20                 	db	32
   863  00FD15  20                 	db	32
   864  00FD16  20                 	db	32
   865  00FD17  20                 	db	32
   866  00FD18  20                 	db	32
   867  00FD19  00                 	db	0
   868  00FD1A                     STR_32:
   869  00FD1A  32                 	db	50	;'2'
   870  00FD1B  2E                 	db	46
   871  00FD1C  20                 	db	32
   872  00FD1D  53                 	db	83	;'S'
   873  00FD1E  4F                 	db	79	;'O'
   874  00FD1F  52                 	db	82	;'R'
   875  00FD20  54                 	db	84	;'T'
   876  00FD21  20                 	db	32
   877  00FD22  20                 	db	32
   878  00FD23  20                 	db	32
   879  00FD24  20                 	db	32
   880  00FD25  20                 	db	32
   881  00FD26  20                 	db	32
   882  00FD27  20                 	db	32
   883  00FD28  20                 	db	32
   884  00FD29  20                 	db	32
   885  00FD2A  00                 	db	0
   886  00FD2B                     STR_33:
   887  00FD2B  31                 	db	49	;'1'
   888  00FD2C  2E                 	db	46
   889  00FD2D  20                 	db	32
   890  00FD2E  44                 	db	68	;'D'
   891  00FD2F  41                 	db	65	;'A'
   892  00FD30  54                 	db	84	;'T'
   893  00FD31  45                 	db	69	;'E'
   894  00FD32  2F                 	db	47
   895  00FD33  54                 	db	84	;'T'
   896  00FD34  49                 	db	73	;'I'
   897  00FD35  4D                 	db	77	;'M'
   898  00FD36  45                 	db	69	;'E'
   899  00FD37  20                 	db	32
   900  00FD38  20                 	db	32
   901  00FD39  20                 	db	32
   902  00FD3A  20                 	db	32
   903  00FD3B  00                 	db	0
   904  00FD3C                     STR_24:
   905  00FD3C  20                 	db	32
   906  00FD3D  2D                 	db	45
   907  00FD3E  2D                 	db	45
   908  00FD3F  20                 	db	32
   909  00FD40  50                 	db	80	;'P'
   910  00FD41  4F                 	db	79	;'O'
   911  00FD42  50                 	db	80	;'P'
   912  00FD43  20                 	db	32
   913  00FD44  20                 	db	32
   914  00FD45  43                 	db	67	;'C'
   915  00FD46  41                 	db	65	;'A'
   916  00FD47  4E                 	db	78	;'N'
   917  00FD48  20                 	db	32
   918  00FD49  2D                 	db	45
   919  00FD4A  2D                 	db	45
   920  00FD4B  20                 	db	32
   921  00FD4C  00                 	db	0
   922  00FD4D                     STR_26:
   923  00FD4D  20                 	db	32
   924  00FD4E  2D                 	db	45
   925  00FD4F  2D                 	db	45
   926  00FD50  20                 	db	32
   927  00FD51  53                 	db	83	;'S'
   928  00FD52  4F                 	db	79	;'O'
   929  00FD53  55                 	db	85	;'U'
   930  00FD54  50                 	db	80	;'P'
   931  00FD55  20                 	db	32
   932  00FD56  43                 	db	67	;'C'
   933  00FD57  41                 	db	65	;'A'
   934  00FD58  4E                 	db	78	;'N'
   935  00FD59  20                 	db	32
   936  00FD5A  2D                 	db	45
   937  00FD5B  2D                 	db	45
   938  00FD5C  20                 	db	32
   939  00FD5D  00                 	db	0
   940  00FD5E                     STR_28:
   941  00FD5E  2D                 	db	45
   942  00FD5F  2D                 	db	45
   943  00FD60  20                 	db	32
   944  00FD61  54                 	db	84	;'T'
   945  00FD62  4F                 	db	79	;'O'
   946  00FD63  54                 	db	84	;'T'
   947  00FD64  41                 	db	65	;'A'
   948  00FD65  4C                 	db	76	;'L'
   949  00FD66  20                 	db	32
   950  00FD67  43                 	db	67	;'C'
   951  00FD68  41                 	db	65	;'A'
   952  00FD69  4E                 	db	78	;'N'
   953  00FD6A  53                 	db	83	;'S'
   954  00FD6B  20                 	db	32
   955  00FD6C  2D                 	db	45
   956  00FD6D  2D                 	db	45
   957  00FD6E  00                 	db	0
   958  00FD6F                     STR_39:
   959  00FD6F  4C                 	db	76	;'L'
   960  00FD70  4F                 	db	79	;'O'
   961  00FD71  47                 	db	71	;'G'
   962  00FD72  20                 	db	32
   963  00FD73  31                 	db	49	;'1'
   964  00FD74  20                 	db	32
   965  00FD75  20                 	db	32
   966  00FD76  20                 	db	32
   967  00FD77  20                 	db	32
   968  00FD78  20                 	db	32
   969  00FD79  20                 	db	32
   970  00FD7A  20                 	db	32
   971  00FD7B  20                 	db	32
   972  00FD7C  20                 	db	32
   973  00FD7D  20                 	db	32
   974  00FD7E  3C                 	db	60	;'<'
   975  00FD7F  00                 	db	0
   976  00FD80                     STR_42:
   977  00FD80  4C                 	db	76	;'L'
   978  00FD81  4F                 	db	79	;'O'
   979  00FD82  47                 	db	71	;'G'
   980  00FD83  20                 	db	32
   981  00FD84  32                 	db	50	;'2'
   982  00FD85  20                 	db	32
   983  00FD86  20                 	db	32
   984  00FD87  20                 	db	32
   985  00FD88  20                 	db	32
   986  00FD89  20                 	db	32
   987  00FD8A  20                 	db	32
   988  00FD8B  20                 	db	32
   989  00FD8C  20                 	db	32
   990  00FD8D  20                 	db	32
   991  00FD8E  20                 	db	32
   992  00FD8F  3C                 	db	60	;'<'
   993  00FD90  00                 	db	0
   994  00FD91                     STR_46:
   995  00FD91  4C                 	db	76	;'L'
   996  00FD92  4F                 	db	79	;'O'
   997  00FD93  47                 	db	71	;'G'
   998  00FD94  20                 	db	32
   999  00FD95  33                 	db	51	;'3'
  1000  00FD96  20                 	db	32
  1001  00FD97  20                 	db	32
  1002  00FD98  20                 	db	32
  1003  00FD99  20                 	db	32
  1004  00FD9A  20                 	db	32
  1005  00FD9B  20                 	db	32
  1006  00FD9C  20                 	db	32
  1007  00FD9D  20                 	db	32
  1008  00FD9E  20                 	db	32
  1009  00FD9F  20                 	db	32
  1010  00FDA0  3C                 	db	60	;'<'
  1011  00FDA1  00                 	db	0
  1012  00FDA2                     STR_50:
  1013  00FDA2  4C                 	db	76	;'L'
  1014  00FDA3  4F                 	db	79	;'O'
  1015  00FDA4  47                 	db	71	;'G'
  1016  00FDA5  20                 	db	32
  1017  00FDA6  34                 	db	52	;'4'
  1018  00FDA7  20                 	db	32
  1019  00FDA8  20                 	db	32
  1020  00FDA9  20                 	db	32
  1021  00FDAA  20                 	db	32
  1022  00FDAB  20                 	db	32
  1023  00FDAC  20                 	db	32
  1024  00FDAD  20                 	db	32
  1025  00FDAE  20                 	db	32
  1026  00FDAF  20                 	db	32
  1027  00FDB0  20                 	db	32
  1028  00FDB1  3C                 	db	60	;'<'
  1029  00FDB2  00                 	db	0
  1030  00FDB3                     STR_38:
  1031  00FDB3  33                 	db	51	;'3'
  1032  00FDB4  2E                 	db	46
  1033  00FDB5  20                 	db	32
  1034  00FDB6  4C                 	db	76	;'L'
  1035  00FDB7  4F                 	db	79	;'O'
  1036  00FDB8  47                 	db	71	;'G'
  1037  00FDB9  53                 	db	83	;'S'
  1038  00FDBA  20                 	db	32
  1039  00FDBB  20                 	db	32
  1040  00FDBC  20                 	db	32
  1041  00FDBD  20                 	db	32
  1042  00FDBE  20                 	db	32
  1043  00FDBF  20                 	db	32
  1044  00FDC0  20                 	db	32
  1045  00FDC1  20                 	db	32
  1046  00FDC2  3C                 	db	60	;'<'
  1047  00FDC3  00                 	db	0
  1048  00FDC4                     STR_34:
  1049  00FDC4  32                 	db	50	;'2'
  1050  00FDC5  2E                 	db	46
  1051  00FDC6  20                 	db	32
  1052  00FDC7  53                 	db	83	;'S'
  1053  00FDC8  4F                 	db	79	;'O'
  1054  00FDC9  52                 	db	82	;'R'
  1055  00FDCA  54                 	db	84	;'T'
  1056  00FDCB  20                 	db	32
  1057  00FDCC  20                 	db	32
  1058  00FDCD  20                 	db	32
  1059  00FDCE  20                 	db	32
  1060  00FDCF  20                 	db	32
  1061  00FDD0  20                 	db	32
  1062  00FDD1  20                 	db	32
  1063  00FDD2  20                 	db	32
  1064  00FDD3  3C                 	db	60	;'<'
  1065  00FDD4  00                 	db	0
  1066  00FDD5                     STR_31:
  1067  00FDD5  31                 	db	49	;'1'
  1068  00FDD6  2E                 	db	46
  1069  00FDD7  20                 	db	32
  1070  00FDD8  44                 	db	68	;'D'
  1071  00FDD9  41                 	db	65	;'A'
  1072  00FDDA  54                 	db	84	;'T'
  1073  00FDDB  45                 	db	69	;'E'
  1074  00FDDC  2F                 	db	47
  1075  00FDDD  54                 	db	84	;'T'
  1076  00FDDE  49                 	db	73	;'I'
  1077  00FDDF  4D                 	db	77	;'M'
  1078  00FDE0  45                 	db	69	;'E'
  1079  00FDE1  20                 	db	32
  1080  00FDE2  20                 	db	32
  1081  00FDE3  20                 	db	32
  1082  00FDE4  3C                 	db	60	;'<'
  1083  00FDE5  00                 	db	0
  1084  00FDE6                     STR_6:
  1085  00FDE6  50                 	db	80	;'P'
  1086  00FDE7  41                 	db	65	;'A'
  1087  00FDE8  55                 	db	85	;'U'
  1088  00FDE9  53                 	db	83	;'S'
  1089  00FDEA  45                 	db	69	;'E'
  1090  00FDEB  20                 	db	32
  1091  00FDEC  3C                 	db	60	;'<'
  1092  00FDED  20                 	db	32
  1093  00FDEE  7C                 	db	124
  1094  00FDEF  20                 	db	32
  1095  00FDF0  42                 	db	66	;'B'
  1096  00FDF1  41                 	db	65	;'A'
  1097  00FDF2  43                 	db	67	;'C'
  1098  00FDF3  4B                 	db	75	;'K'
  1099  00FDF4  20                 	db	32
  1100  00FDF5  3E                 	db	62	;'>'
  1101  00FDF6  00                 	db	0
  1102  00FDF7                     STR_30:
  1103  00FDF7  50                 	db	80	;'P'
  1104  00FDF8  55                 	db	85	;'U'
  1105  00FDF9  53                 	db	83	;'S'
  1106  00FDFA  48                 	db	72	;'H'
  1107  00FDFB  20                 	db	32
  1108  00FDFC  54                 	db	84	;'T'
  1109  00FDFD  4F                 	db	79	;'O'
  1110  00FDFE  20                 	db	32
  1111  00FDFF  43                 	db	67	;'C'
  1112  00FE00  4F                 	db	79	;'O'
  1113  00FE01  4E                 	db	78	;'N'
  1114  00FE02  54                 	db	84	;'T'
  1115  00FE03  49                 	db	73	;'I'
  1116  00FE04  4E                 	db	78	;'N'
  1117  00FE05  55                 	db	85	;'U'
  1118  00FE06  45                 	db	69	;'E'
  1119  00FE07  00                 	db	0
  1120  00FE08                     STR_27:
  1121  00FE08  4E                 	db	78	;'N'
  1122  00FE09  4C                 	db	76	;'L'
  1123  00FE0A  41                 	db	65	;'A'
  1124  00FE0B  42                 	db	66	;'B'
  1125  00FE0C  3A                 	db	58	;':'
  1126  00FE0D  20                 	db	32
  1127  00FE0E  25                 	db	37
  1128  00FE0F  64                 	db	100	;'d'
  1129  00FE10  7C                 	db	124
  1130  00FE11  4C                 	db	76	;'L'
  1131  00FE12  41                 	db	65	;'A'
  1132  00FE13  42                 	db	66	;'B'
  1133  00FE14  3A                 	db	58	;':'
  1134  00FE15  20                 	db	32
  1135  00FE16  25                 	db	37
  1136  00FE17  64                 	db	100	;'d'
  1137  00FE18  00                 	db	0
  1138  00FE19                     STR_25:
  1139  00FE19  4E                 	db	78	;'N'
  1140  00FE1A  54                 	db	84	;'T'
  1141  00FE1B  41                 	db	65	;'A'
  1142  00FE1C  42                 	db	66	;'B'
  1143  00FE1D  3A                 	db	58	;':'
  1144  00FE1E  20                 	db	32
  1145  00FE1F  25                 	db	37
  1146  00FE20  64                 	db	100	;'d'
  1147  00FE21  7C                 	db	124
  1148  00FE22  54                 	db	84	;'T'
  1149  00FE23  41                 	db	65	;'A'
  1150  00FE24  42                 	db	66	;'B'
  1151  00FE25  3A                 	db	58	;':'
  1152  00FE26  20                 	db	32
  1153  00FE27  25                 	db	37
  1154  00FE28  64                 	db	100	;'d'
  1155  00FE29  00                 	db	0
  1156  00FE2A                     STR_83:
  1157  00FE2A  4D                 	db	77	;'M'
  1158  00FE2B  41                 	db	65	;'A'
  1159  00FE2C  47                 	db	71	;'G'
  1160  00FE2D  5F                 	db	95	;'_'
  1161  00FE2E  73                 	db	115	;'s'
  1162  00FE2F  69                 	db	105	;'i'
  1163  00FE30  67                 	db	103	;'g'
  1164  00FE31  6E                 	db	110	;'n'
  1165  00FE32  61                 	db	97	;'a'
  1166  00FE33  6C                 	db	108	;'l'
  1167  00FE34  3A                 	db	58	;':'
  1168  00FE35  20                 	db	32
  1169  00FE36  25                 	db	37
  1170  00FE37  64                 	db	100	;'d'
  1171  00FE38  20                 	db	32
  1172  00FE39  00                 	db	0
  1173  00FE3A                     STR_103:
  1174  00FE3A  54                 	db	84	;'T'
  1175  00FE3B  53                 	db	83	;'S'
  1176  00FE3C  54                 	db	84	;'T'
  1177  00FE3D  3A                 	db	58	;':'
  1178  00FE3E  20                 	db	32
  1179  00FE3F  54                 	db	84	;'T'
  1180  00FE40  49                 	db	73	;'I'
  1181  00FE41  4C                 	db	76	;'L'
  1182  00FE42  54                 	db	84	;'T'
  1183  00FE43  20                 	db	32
  1184  00FE44  53                 	db	83	;'S'
  1185  00FE45  45                 	db	69	;'E'
  1186  00FE46  52                 	db	82	;'R'
  1187  00FE47  56                 	db	86	;'V'
  1188  00FE48  4F                 	db	79	;'O'
  1189  00FE49  00                 	db	0
  1190  00FE4A                     STR_4:
  1191  00FE4A  44                 	db	68	;'D'
  1192  00FE4B  49                 	db	73	;'I'
  1193  00FE4C  44                 	db	68	;'D'
  1194  00FE4D  4E                 	db	78	;'N'
  1195  00FE4E  27                 	db	39
  1196  00FE4F  54                 	db	84	;'T'
  1197  00FE50  20                 	db	32
  1198  00FE51  43                 	db	67	;'C'
  1199  00FE52  4F                 	db	79	;'O'
  1200  00FE53  4D                 	db	77	;'M'
  1201  00FE54  50                 	db	80	;'P'
  1202  00FE55  4C                 	db	76	;'L'
  1203  00FE56  45                 	db	69	;'E'
  1204  00FE57  54                 	db	84	;'T'
  1205  00FE58  45                 	db	69	;'E'
  1206  00FE59  00                 	db	0
  1207  00FE5A                     STR_80:
  1208  00FE5A  49                 	db	73	;'I'
  1209  00FE5B  52                 	db	82	;'R'
  1210  00FE5C  5F                 	db	95	;'_'
  1211  00FE5D  73                 	db	115	;'s'
  1212  00FE5E  69                 	db	105	;'i'
  1213  00FE5F  67                 	db	103	;'g'
  1214  00FE60  6E                 	db	110	;'n'
  1215  00FE61  61                 	db	97	;'a'
  1216  00FE62  6C                 	db	108	;'l'
  1217  00FE63  3A                 	db	58	;':'
  1218  00FE64  20                 	db	32
  1219  00FE65  25                 	db	37
  1220  00FE66  64                 	db	100	;'d'
  1221  00FE67  20                 	db	32
  1222  00FE68  00                 	db	0
  1223  00FE69                     STR_109:
  1224  00FE69  43                 	db	67	;'C'
  1225  00FE6A  41                 	db	65	;'A'
  1226  00FE6B  4D                 	db	77	;'M'
  1227  00FE6C  20                 	db	32
  1228  00FE6D  44                 	db	68	;'D'
  1229  00FE6E  57                 	db	87	;'W'
  1230  00FE6F  4E                 	db	78	;'N'
  1231  00FE70  20                 	db	32
  1232  00FE71  7C                 	db	124
  1233  00FE72  52                 	db	82	;'R'
  1234  00FE73  43                 	db	67	;'C'
  1235  00FE74  30                 	db	48	;'0'
  1236  00FE75  3D                 	db	61	;'='
  1237  00FE76  30                 	db	48	;'0'
  1238  00FE77  00                 	db	0
  1239  00FE78                     STR_108:
  1240  00FE78  43                 	db	67	;'C'
  1241  00FE79  41                 	db	65	;'A'
  1242  00FE7A  4D                 	db	77	;'M'
  1243  00FE7B  20                 	db	32
  1244  00FE7C  55                 	db	85	;'U'
  1245  00FE7D  50                 	db	80	;'P'
  1246  00FE7E  20                 	db	32
  1247  00FE7F  20                 	db	32
  1248  00FE80  7C                 	db	124
  1249  00FE81  52                 	db	82	;'R'
  1250  00FE82  43                 	db	67	;'C'
  1251  00FE83  30                 	db	48	;'0'
  1252  00FE84  3D                 	db	61	;'='
  1253  00FE85  31                 	db	49	;'1'
  1254  00FE86  00                 	db	0
  1255  00FE87                     STR_82:
  1256  00FE87  54                 	db	84	;'T'
  1257  00FE88  53                 	db	83	;'S'
  1258  00FE89  54                 	db	84	;'T'
  1259  00FE8A  3A                 	db	58	;':'
  1260  00FE8B  20                 	db	32
  1261  00FE8C  4D                 	db	77	;'M'
  1262  00FE8D  41                 	db	65	;'A'
  1263  00FE8E  47                 	db	71	;'G'
  1264  00FE8F  4E                 	db	78	;'N'
  1265  00FE90  45                 	db	69	;'E'
  1266  00FE91  54                 	db	84	;'T'
  1267  00FE92  49                 	db	73	;'I'
  1268  00FE93  53                 	db	83	;'S'
  1269  00FE94  4D                 	db	77	;'M'
  1270  00FE95  00                 	db	0
  1271  00FE96                     STR_107:
  1272  00FE96  54                 	db	84	;'T'
  1273  00FE97  53                 	db	83	;'S'
  1274  00FE98  54                 	db	84	;'T'
  1275  00FE99  3A                 	db	58	;':'
  1276  00FE9A  20                 	db	32
  1277  00FE9B  43                 	db	67	;'C'
  1278  00FE9C  41                 	db	65	;'A'
  1279  00FE9D  4D                 	db	77	;'M'
  1280  00FE9E  20                 	db	32
  1281  00FE9F  53                 	db	83	;'S'
  1282  00FEA0  45                 	db	69	;'E'
  1283  00FEA1  52                 	db	82	;'R'
  1284  00FEA2  56                 	db	86	;'V'
  1285  00FEA3  4F                 	db	79	;'O'
  1286  00FEA4  00                 	db	0
  1287  00FEA5                     STR_96:
  1288  00FEA5  54                 	db	84	;'T'
  1289  00FEA6  53                 	db	83	;'S'
  1290  00FEA7  54                 	db	84	;'T'
  1291  00FEA8  3A                 	db	58	;':'
  1292  00FEA9  20                 	db	32
  1293  00FEAA  50                 	db	80	;'P'
  1294  00FEAB  41                 	db	65	;'A'
  1295  00FEAC  4E                 	db	78	;'N'
  1296  00FEAD  20                 	db	32
  1297  00FEAE  53                 	db	83	;'S'
  1298  00FEAF  45                 	db	69	;'E'
  1299  00FEB0  52                 	db	82	;'R'
  1300  00FEB1  56                 	db	86	;'V'
  1301  00FEB2  4F                 	db	79	;'O'
  1302  00FEB3  00                 	db	0
  1303  00FEB4                     STR_75:
  1304  00FEB4  41                 	db	65	;'A'
  1305  00FEB5  4C                 	db	76	;'L'
  1306  00FEB6  47                 	db	71	;'G'
  1307  00FEB7  34                 	db	52	;'4'
  1308  00FEB8  3A                 	db	58	;':'
  1309  00FEB9  20                 	db	32
  1310  00FEBA  41                 	db	65	;'A'
  1311  00FEBB  4C                 	db	76	;'L'
  1312  00FEBC  4C                 	db	76	;'L'
  1313  00FEBD  20                 	db	32
  1314  00FEBE  43                 	db	67	;'C'
  1315  00FEBF  41                 	db	65	;'A'
  1316  00FEC0  4E                 	db	78	;'N'
  1317  00FEC1  53                 	db	83	;'S'
  1318  00FEC2  00                 	db	0
  1319  00FEC3                     STR_90:
  1320  00FEC3  54                 	db	84	;'T'
  1321  00FEC4  53                 	db	83	;'S'
  1322  00FEC5  54                 	db	84	;'T'
  1323  00FEC6  3A                 	db	58	;':'
  1324  00FEC7  20                 	db	32
  1325  00FEC8  44                 	db	68	;'D'
  1326  00FEC9  43                 	db	67	;'C'
  1327  00FECA  20                 	db	32
  1328  00FECB  4D                 	db	77	;'M'
  1329  00FECC  4F                 	db	79	;'O'
  1330  00FECD  54                 	db	84	;'T'
  1331  00FECE  4F                 	db	79	;'O'
  1332  00FECF  52                 	db	82	;'R'
  1333  00FED0  53                 	db	83	;'S'
  1334  00FED1  00                 	db	0
  1335  00FED2                     STR_70:
  1336  00FED2  41                 	db	65	;'A'
  1337  00FED3  4C                 	db	76	;'L'
  1338  00FED4  47                 	db	71	;'G'
  1339  00FED5  4F                 	db	79	;'O'
  1340  00FED6  52                 	db	82	;'R'
  1341  00FED7  49                 	db	73	;'I'
  1342  00FED8  54                 	db	84	;'T'
  1343  00FED9  48                 	db	72	;'H'
  1344  00FEDA  4D                 	db	77	;'M'
  1345  00FEDB  20                 	db	32
  1346  00FEDC  54                 	db	84	;'T'
  1347  00FEDD  45                 	db	69	;'E'
  1348  00FEDE  53                 	db	83	;'S'
  1349  00FEDF  54                 	db	84	;'T'
  1350  00FEE0  00                 	db	0
  1351  00FEE1                     STR_91:
  1352  00FEE1  50                 	db	80	;'P'
  1353  00FEE2  49                 	db	73	;'I'
  1354  00FEE3  4E                 	db	78	;'N'
  1355  00FEE4  20                 	db	32
  1356  00FEE5  52                 	db	82	;'R'
  1357  00FEE6  41                 	db	65	;'A'
  1358  00FEE7  35                 	db	53	;'5'
  1359  00FEE8  20                 	db	32
  1360  00FEE9  48                 	db	72	;'H'
  1361  00FEEA  49                 	db	73	;'I'
  1362  00FEEB  47                 	db	71	;'G'
  1363  00FEEC  48                 	db	72	;'H'
  1364  00FEED  2E                 	db	46
  1365  00FEEE  00                 	db	0
  1366  00FEEF                     STR_73:
  1367  00FEEF  41                 	db	65	;'A'
  1368  00FEF0  4C                 	db	76	;'L'
  1369  00FEF1  47                 	db	71	;'G'
  1370  00FEF2  32                 	db	50	;'2'
  1371  00FEF3  3A                 	db	58	;':'
  1372  00FEF4  20                 	db	32
  1373  00FEF5  31                 	db	49	;'1'
  1374  00FEF6  32                 	db	50	;'2'
  1375  00FEF7  20                 	db	32
  1376  00FEF8  43                 	db	67	;'C'
  1377  00FEF9  41                 	db	65	;'A'
  1378  00FEFA  4E                 	db	78	;'N'
  1379  00FEFB  53                 	db	83	;'S'
  1380  00FEFC  00                 	db	0
  1381  00FEFD                     STR_76:
  1382  00FEFD  41                 	db	65	;'A'
  1383  00FEFE  4C                 	db	76	;'L'
  1384  00FEFF  47                 	db	71	;'G'
  1385  00FF00  35                 	db	53	;'5'
  1386  00FF01  3A                 	db	58	;':'
  1387  00FF02  20                 	db	32
  1388  00FF03  4E                 	db	78	;'N'
  1389  00FF04  4F                 	db	79	;'O'
  1390  00FF05  20                 	db	32
  1391  00FF06  43                 	db	67	;'C'
  1392  00FF07  41                 	db	65	;'A'
  1393  00FF08  4E                 	db	78	;'N'
  1394  00FF09  53                 	db	83	;'S'
  1395  00FF0A  00                 	db	0
  1396  00FF0B                     STR_71:
  1397  00FF0B  50                 	db	80	;'P'
  1398  00FF0C  55                 	db	85	;'U'
  1399  00FF0D  53                 	db	83	;'S'
  1400  00FF0E  48                 	db	72	;'H'
  1401  00FF0F  20                 	db	32
  1402  00FF10  54                 	db	84	;'T'
  1403  00FF11  4F                 	db	79	;'O'
  1404  00FF12  20                 	db	32
  1405  00FF13  53                 	db	83	;'S'
  1406  00FF14  54                 	db	84	;'T'
  1407  00FF15  41                 	db	65	;'A'
  1408  00FF16  52                 	db	82	;'R'
  1409  00FF17  54                 	db	84	;'T'
  1410  00FF18  00                 	db	0
  1411  00FF19                     STR_23:
  1412  00FF19  25                 	db	37
  1413  00FF1A  64                 	db	100	;'d'
  1414  00FF1B  20                 	db	32
  1415  00FF1C  4D                 	db	77	;'M'
  1416  00FF1D  49                 	db	73	;'I'
  1417  00FF1E  4E                 	db	78	;'N'
  1418  00FF1F  20                 	db	32
  1419  00FF20  25                 	db	37
  1420  00FF21  64                 	db	100	;'d'
  1421  00FF22  20                 	db	32
  1422  00FF23  53                 	db	83	;'S'
  1423  00FF24  45                 	db	69	;'E'
  1424  00FF25  43                 	db	67	;'C'
  1425  00FF26  00                 	db	0
  1426  00FF27                     STR_2:
  1427  00FF27  54                 	db	84	;'T'
  1428  00FF28  49                 	db	73	;'I'
  1429  00FF29  4D                 	db	77	;'M'
  1430  00FF2A  45                 	db	69	;'E'
  1431  00FF2B  3A                 	db	58	;':'
  1432  00FF2C  20                 	db	32
  1433  00FF2D  25                 	db	37
  1434  00FF2E  64                 	db	100	;'d'
  1435  00FF2F  3A                 	db	58	;':'
  1436  00FF30  25                 	db	37
  1437  00FF31  30                 	db	48	;'0'
  1438  00FF32  32                 	db	50	;'2'
  1439  00FF33  64                 	db	100	;'d'
  1440  00FF34  00                 	db	0
  1441  00FF35                     STR_79:
  1442  00FF35  54                 	db	84	;'T'
  1443  00FF36  53                 	db	83	;'S'
  1444  00FF37  54                 	db	84	;'T'
  1445  00FF38  3A                 	db	58	;':'
  1446  00FF39  20                 	db	32
  1447  00FF3A  49                 	db	73	;'I'
  1448  00FF3B  52                 	db	82	;'R'
  1449  00FF3C  20                 	db	32
  1450  00FF3D  53                 	db	83	;'S'
  1451  00FF3E  4E                 	db	78	;'N'
  1452  00FF3F  53                 	db	83	;'S'
  1453  00FF40  52                 	db	82	;'R'
  1454  00FF41  00                 	db	0
  1455  00FF42                     STR_65:
  1456  00FF42  54                 	db	84	;'T'
  1457  00FF43  49                 	db	73	;'I'
  1458  00FF44  4D                 	db	77	;'M'
  1459  00FF45  45                 	db	69	;'E'
  1460  00FF46  20                 	db	32
  1461  00FF47  25                 	db	37
  1462  00FF48  64                 	db	100	;'d'
  1463  00FF49  3A                 	db	58	;':'
  1464  00FF4A  25                 	db	37
  1465  00FF4B  30                 	db	48	;'0'
  1466  00FF4C  32                 	db	50	;'2'
  1467  00FF4D  64                 	db	100	;'d'
  1468  00FF4E  00                 	db	0
  1469  00FF4F                     STR_74:
  1470  00FF4F  41                 	db	65	;'A'
  1471  00FF50  4C                 	db	76	;'L'
  1472  00FF51  47                 	db	71	;'G'
  1473  00FF52  33                 	db	51	;'3'
  1474  00FF53  3A                 	db	58	;':'
  1475  00FF54  20                 	db	32
  1476  00FF55  31                 	db	49	;'1'
  1477  00FF56  20                 	db	32
  1478  00FF57  43                 	db	67	;'C'
  1479  00FF58  41                 	db	65	;'A'
  1480  00FF59  4E                 	db	78	;'N'
  1481  00FF5A  00                 	db	0
  1482  00FF5B                     STR_93:
  1483  00FF5B  50                 	db	80	;'P'
  1484  00FF5C  49                 	db	73	;'I'
  1485  00FF5D  4E                 	db	78	;'N'
  1486  00FF5E  20                 	db	32
  1487  00FF5F  52                 	db	82	;'R'
  1488  00FF60  41                 	db	65	;'A'
  1489  00FF61  33                 	db	51	;'3'
  1490  00FF62  2E                 	db	46
  1491  00FF63  2E                 	db	46
  1492  00FF64  2E                 	db	46
  1493  00FF65  00                 	db	0
  1494  00FF66                     STR_95:
  1495  00FF66  50                 	db	80	;'P'
  1496  00FF67  49                 	db	73	;'I'
  1497  00FF68  4E                 	db	78	;'N'
  1498  00FF69  20                 	db	32
  1499  00FF6A  52                 	db	82	;'R'
  1500  00FF6B  41                 	db	65	;'A'
  1501  00FF6C  34                 	db	52	;'4'
  1502  00FF6D  2E                 	db	46
  1503  00FF6E  2E                 	db	46
  1504  00FF6F  2E                 	db	46
  1505  00FF70  00                 	db	0
  1506  00FF71                     STR_113:
  1507  00FF71  50                 	db	80	;'P'
  1508  00FF72  55                 	db	85	;'U'
  1509  00FF73  53                 	db	83	;'S'
  1510  00FF74  48                 	db	72	;'H'
  1511  00FF75  45                 	db	69	;'E'
  1512  00FF76  52                 	db	82	;'R'
  1513  00FF77  20                 	db	32
  1514  00FF78  54                 	db	84	;'T'
  1515  00FF79  53                 	db	83	;'S'
  1516  00FF7A  54                 	db	84	;'T'
  1517  00FF7B  00                 	db	0
  1518  00FF7C                     STR_64:
  1519  00FF7C  53                 	db	83	;'S'
  1520  00FF7D  4F                 	db	79	;'O'
  1521  00FF7E  52                 	db	82	;'R'
  1522  00FF7F  54                 	db	84	;'T'
  1523  00FF80  49                 	db	73	;'I'
  1524  00FF81  4E                 	db	78	;'N'
  1525  00FF82  47                 	db	71	;'G'
  1526  00FF83  2E                 	db	46
  1527  00FF84  2E                 	db	46
  1528  00FF85  2E                 	db	46
  1529  00FF86  00                 	db	0
  1530  00FF87                     STR_84:
  1531  00FF87  54                 	db	84	;'T'
  1532  00FF88  53                 	db	83	;'S'
  1533  00FF89  54                 	db	84	;'T'
  1534  00FF8A  3A                 	db	58	;':'
  1535  00FF8B  20                 	db	32
  1536  00FF8C  43                 	db	67	;'C'
  1537  00FF8D  4F                 	db	79	;'O'
  1538  00FF8E  4E                 	db	78	;'N'
  1539  00FF8F  44                 	db	68	;'D'
  1540  00FF90  00                 	db	0
  1541  00FF91                     STR_88:
  1542  00FF91  41                 	db	65	;'A'
  1543  00FF92  43                 	db	67	;'C'
  1544  00FF93  54                 	db	84	;'T'
  1545  00FF94  55                 	db	85	;'U'
  1546  00FF95  41                 	db	65	;'A'
  1547  00FF96  54                 	db	84	;'T'
  1548  00FF97  4F                 	db	79	;'O'
  1549  00FF98  52                 	db	82	;'R'
  1550  00FF99  53                 	db	83	;'S'
  1551  00FF9A  00                 	db	0
  1552  00FF9B                     STR_22:
  1553  00FF9B  44                 	db	68	;'D'
  1554  00FF9C  55                 	db	85	;'U'
  1555  00FF9D  52                 	db	82	;'R'
  1556  00FF9E  41                 	db	65	;'A'
  1557  00FF9F  54                 	db	84	;'T'
  1558  00FFA0  49                 	db	73	;'I'
  1559  00FFA1  4F                 	db	79	;'O'
  1560  00FFA2  4E                 	db	78	;'N'
  1561  00FFA3  3A                 	db	58	;':'
  1562  00FFA4  00                 	db	0
  1563  00FFA5                     STR_86:
  1564  00FFA5  43                 	db	67	;'C'
  1565  00FFA6  4F                 	db	79	;'O'
  1566  00FFA7  4E                 	db	78	;'N'
  1567  00FFA8  44                 	db	68	;'D'
  1568  00FFA9  3A                 	db	58	;':'
  1569  00FFAA  20                 	db	32
  1570  00FFAB  25                 	db	37
  1571  00FFAC  64                 	db	100	;'d'
  1572  00FFAD  00                 	db	0
  1573  00FFAE                     STR_77:
  1574  00FFAE  53                 	db	83	;'S'
  1575  00FFAF  45                 	db	69	;'E'
  1576  00FFB0  4E                 	db	78	;'N'
  1577  00FFB1  53                 	db	83	;'S'
  1578  00FFB2  4F                 	db	79	;'O'
  1579  00FFB3  52                 	db	82	;'R'
  1580  00FFB4  53                 	db	83	;'S'
  1581  00FFB5  00                 	db	0
  1582  00FFB6                     STR_128:
  1583  00FFB6  28                 	db	40
  1584  00FFB7  6E                 	db	110	;'n'
  1585  00FFB8  75                 	db	117	;'u'
  1586  00FFB9  6C                 	db	108	;'l'
  1587  00FFBA  6C                 	db	108	;'l'
  1588  00FFBB  29                 	db	41
  1589  00FFBC  00                 	db	0
  1590  00FFBD                     STR_67:
  1591  00FFBD  46                 	db	70	;'F'
  1592  00FFBE  41                 	db	65	;'A'
  1593  00FFBF  49                 	db	73	;'I'
  1594  00FFC0  4C                 	db	76	;'L'
  1595  00FFC1  45                 	db	69	;'E'
  1596  00FFC2  44                 	db	68	;'D'
  1597  00FFC3  00                 	db	0
  1598  00FFC4                     STR_7:
  1599  00FFC4  53                 	db	83	;'S'
  1600  00FFC5  54                 	db	84	;'T'
  1601  00FFC6  41                 	db	65	;'A'
  1602  00FFC7  52                 	db	82	;'R'
  1603  00FFC8  54                 	db	84	;'T'
  1604  00FFC9  3A                 	db	58	;':'
  1605  00FFCA  00                 	db	0
  1606  00FFCB                     STR_9:
  1607  00FFCB  46                 	db	70	;'F'
  1608  00FFCC  45                 	db	69	;'E'
  1609  00FFCD  42                 	db	66	;'B'
  1610  00FFCE  00                 	db	0
  1611  00FFCF                     STR_19:
  1612  00FFCF  44                 	db	68	;'D'
  1613  00FFD0  45                 	db	69	;'E'
  1614  00FFD1  43                 	db	67	;'C'
  1615  00FFD2  00                 	db	0
  1616  00FFD3                     STR_15:
  1617  00FFD3  41                 	db	65	;'A'
  1618  00FFD4  55                 	db	85	;'U'
  1619  00FFD5  47                 	db	71	;'G'
  1620  00FFD6  00                 	db	0
  1621  00FFD7                     STR_14:
  1622  00FFD7  4A                 	db	74	;'J'
  1623  00FFD8  55                 	db	85	;'U'
  1624  00FFD9  4C                 	db	76	;'L'
  1625  00FFDA  00                 	db	0
  1626  00FFDB                     STR_8:
  1627  00FFDB  4A                 	db	74	;'J'
  1628  00FFDC  41                 	db	65	;'A'
  1629  00FFDD  4E                 	db	78	;'N'
  1630  00FFDE  00                 	db	0
  1631  00FFDF                     STR_13:
  1632  00FFDF  4A                 	db	74	;'J'
  1633  00FFE0  55                 	db	85	;'U'
  1634  00FFE1  4E                 	db	78	;'N'
  1635  00FFE2  00                 	db	0
  1636  00FFE3                     STR_16:
  1637  00FFE3  53                 	db	83	;'S'
  1638  00FFE4  45                 	db	69	;'E'
  1639  00FFE5  50                 	db	80	;'P'
  1640  00FFE6  00                 	db	0
  1641  00FFE7                     STR_10:
  1642  00FFE7  4D                 	db	77	;'M'
  1643  00FFE8  41                 	db	65	;'A'
  1644  00FFE9  52                 	db	82	;'R'
  1645  00FFEA  00                 	db	0
  1646  00FFEB                     STR_11:
  1647  00FFEB  41                 	db	65	;'A'
  1648  00FFEC  50                 	db	80	;'P'
  1649  00FFED  52                 	db	82	;'R'
  1650  00FFEE  00                 	db	0
  1651  00FFEF                     STR_20:
  1652  00FFEF  45                 	db	69	;'E'
  1653  00FFF0  52                 	db	82	;'R'
  1654  00FFF1  52                 	db	82	;'R'
  1655  00FFF2  00                 	db	0
  1656  00FFF3                     STR_17:
  1657  00FFF3  4F                 	db	79	;'O'
  1658  00FFF4  43                 	db	67	;'C'
  1659  00FFF5  54                 	db	84	;'T'
  1660  00FFF6  00                 	db	0
  1661  00FFF7                     STR_18:
  1662  00FFF7  4E                 	db	78	;'N'
  1663  00FFF8  4F                 	db	79	;'O'
  1664  00FFF9  56                 	db	86	;'V'
  1665  00FFFA  00                 	db	0
  1666  00FFFB                     STR_12:
  1667  00FFFB  4D                 	db	77	;'M'
  1668  00FFFC  41                 	db	65	;'A'
  1669  00FFFD  59                 	db	89	;'Y'
  1670  00FFFE  00                 	db	0
  1671  0000                     
  1672                           ; #config settings
  1673  00FFFF  00                 	db	0	; dummy byte at the end
  1674  0000                     
  1675                           	psect	cinit
  1676  004D02                     __pcinit:
  1677                           	opt stack 0
  1678  004D02                     start_initialization:
  1679                           	opt stack 0
  1680  004D02                     __initialization:
  1681                           	opt stack 0
  1682                           
  1683                           ; Initialize objects allocated to BANK1 (8 bytes)
  1684                           ; load TBLPTR registers with __pidataBANK1
  1685  004D02  0E66               	movlw	low __pidataBANK1
  1686  004D04  6EF6               	movwf	tblptrl,c
  1687  004D06  0E54               	movlw	high __pidataBANK1
  1688  004D08  6EF7               	movwf	tblptrh,c
  1689  004D0A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1690  004D0C  6EF8               	movwf	tblptru,c
  1691  004D0E  EE01  F047         	lfsr	0,__pdataBANK1
  1692  004D12  EE10 F008          	lfsr	1,8
  1693  004D16                     copy_data0:
  1694  004D16  0009               	tblrd		*+
  1695  004D18  CFF5 FFEE          	movff	tablat,postinc0
  1696  004D1C  50E5               	movf	postdec1,w,c
  1697  004D1E  50E1               	movf	fsr1l,w,c
  1698  004D20  E1FA               	bnz	copy_data0
  1699                           
  1700                           ; Clear objects allocated to BANK1 (71 bytes)
  1701  004D22  EE01  F000         	lfsr	0,__pbssBANK1
  1702  004D26  0E47               	movlw	71
  1703  004D28                     clear_0:
  1704  004D28  6AEE               	clrf	postinc0,c
  1705  004D2A  06E8               	decf	wreg,f,c
  1706  004D2C  E1FD               	bnz	clear_0
  1707                           
  1708                           ; Clear objects allocated to BANK0 (38 bytes)
  1709  004D2E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1710  004D32  0E26               	movlw	38
  1711  004D34                     clear_1:
  1712  004D34  6AEE               	clrf	postinc0,c
  1713  004D36  06E8               	decf	wreg,f,c
  1714  004D38  E1FD               	bnz	clear_1
  1715                           
  1716                           ; Clear objects allocated to COMRAM (35 bytes)
  1717  004D3A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1718  004D3E  0E23               	movlw	35
  1719  004D40                     clear_2:
  1720  004D40  6AEE               	clrf	postinc0,c
  1721  004D42  06E8               	decf	wreg,f,c
  1722  004D44  E1FD               	bnz	clear_2
  1723  004D46                     end_of_initialization:
  1724                           	opt stack 0
  1725  004D46                     __end_of__initialization:
  1726                           	opt stack 0
  1727  004D46  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1728  004D48  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1729  004D4A  0100               	movlb	0
  1730  004D4C  EFEE  F020         	goto	_main	;jump to C main() function
  1731                           tblptru	equ	0xFF8
  1732                           tblptrh	equ	0xFF7
  1733                           tblptrl	equ	0xFF6
  1734                           tablat	equ	0xFF5
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           postdec1	equ	0xFE5
  1738                           fsr1l	equ	0xFE1
  1739                           
  1740                           	psect	bssCOMRAM
  1741  00005B                     __pbssCOMRAM:
  1742                           	opt stack 0
  1743  00005B                     _back:
  1744                           	opt stack 0
  1745  00005B                     	ds	2
  1746  00005D                     _down:
  1747                           	opt stack 0
  1748  00005D                     	ds	2
  1749  00005F                     _enter:
  1750                           	opt stack 0
  1751  00005F                     	ds	2
  1752  000061                     _f_arm_position:
  1753                           	opt stack 0
  1754  000061                     	ds	2
  1755  000063                     _f_panning_to_bin:
  1756                           	opt stack 0
  1757  000063                     	ds	2
  1758  000065                     _log_count_pop_no_tab:
  1759                           	opt stack 0
  1760  000065                     	ds	2
  1761  000067                     _log_count_pop_w_tab:
  1762                           	opt stack 0
  1763  000067                     	ds	2
  1764  000069                     _most_recent_sort_time:
  1765                           	opt stack 0
  1766  000069                     	ds	2
  1767  00006B                     _pan_servo_state:
  1768                           	opt stack 0
  1769  00006B                     	ds	2
  1770  00006D                     _servo_timer_counter:
  1771                           	opt stack 0
  1772  00006D                     	ds	2
  1773  00006F                     _servo_timer_target:
  1774                           	opt stack 0
  1775  00006F                     	ds	2
  1776  000071                     _tilt_servo_state:
  1777                           	opt stack 0
  1778  000071                     	ds	2
  1779  000073                     _timer2_counter:
  1780                           	opt stack 0
  1781  000073                     	ds	2
  1782  000075                     _up:
  1783                           	opt stack 0
  1784  000075                     	ds	2
  1785  000077                     _was_low_1:
  1786                           	opt stack 0
  1787  000077                     	ds	2
  1788  000079                     _was_low_2:
  1789                           	opt stack 0
  1790  000079                     	ds	2
  1791  00007B                     _was_low_3:
  1792                           	opt stack 0
  1793  00007B                     	ds	2
  1794  00007D                     _input:
  1795                           	opt stack 0
  1796  00007D                     	ds	1
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1l	equ	0xFE1
  1805                           
  1806                           	psect	bssBANK0
  1807  0000DA                     __pbssBANK0:
  1808                           	opt stack 0
  1809  0000DA                     _servoTimes:
  1810                           	opt stack 0
  1811  0000DA                     	ds	8
  1812  0000E2                     _sensor_outputs:
  1813                           	opt stack 0
  1814  0000E2                     	ds	4
  1815  0000E6                     _IR_signal:
  1816                           	opt stack 0
  1817  0000E6                     	ds	2
  1818  0000E8                     _MAG_signal:
  1819                           	opt stack 0
  1820  0000E8                     	ds	2
  1821  0000EA                     _RTCflag:
  1822                           	opt stack 0
  1823  0000EA                     	ds	2
  1824  0000EC                     _cur_state:
  1825                           	opt stack 0
  1826  0000EC                     	ds	2
  1827  0000EE                     _f_lastCan:
  1828                           	opt stack 0
  1829  0000EE                     	ds	2
  1830  0000F0                     _f_loadingNewCan:
  1831                           	opt stack 0
  1832  0000F0                     	ds	2
  1833  0000F2                     _log:
  1834                           	opt stack 0
  1835  0000F2                     	ds	2
  1836  0000F4                     _log_completion:
  1837                           	opt stack 0
  1838  0000F4                     	ds	2
  1839  0000F6                     _log_total_time:
  1840                           	opt stack 0
  1841  0000F6                     	ds	2
  1842  0000F8                     _logstate:
  1843                           	opt stack 0
  1844  0000F8                     	ds	2
  1845  0000FA                     _total_time:
  1846                           	opt stack 0
  1847  0000FA                     	ds	2
  1848  0000FC                     _machine_state:
  1849                           	opt stack 0
  1850  0000FC                     	ds	1
  1851  0000FD                     _sel:
  1852                           	opt stack 0
  1853  0000FD                     	ds	1
  1854  0000FE                     _count_total:
  1855                           	opt stack 0
  1856  0000FE                     	ds	2
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           
  1866                           	psect	bssBANK1
  1867  000100                     __pbssBANK1:
  1868                           	opt stack 0
  1869  000100                     _log_startTime:
  1870                           	opt stack 0
  1871  000100                     	ds	14
  1872  00010E                     _startTime:
  1873                           	opt stack 0
  1874  00010E                     	ds	14
  1875  00011C                     _time:
  1876                           	opt stack 0
  1877  00011C                     	ds	7
  1878  000123                     _count_can_no_lab:
  1879                           	opt stack 0
  1880  000123                     	ds	2
  1881  000125                     _count_can_w_lab:
  1882                           	opt stack 0
  1883  000125                     	ds	2
  1884  000127                     _count_pop_no_tab:
  1885                           	opt stack 0
  1886  000127                     	ds	2
  1887  000129                     _count_pop_w_tab:
  1888                           	opt stack 0
  1889  000129                     	ds	2
  1890  00012B                     _cur_can:
  1891                           	opt stack 0
  1892  00012B                     	ds	2
  1893  00012D                     _debug:
  1894                           	opt stack 0
  1895  00012D                     	ds	2
  1896  00012F                     _f_ID_receive:
  1897                           	opt stack 0
  1898  00012F                     	ds	2
  1899  000131                     _f_can_coming_to_ID:
  1900                           	opt stack 0
  1901  000131                     	ds	2
  1902  000133                     _f_can_coming_to_distribution:
  1903                           	opt stack 0
  1904  000133                     	ds	2
  1905  000135                     _f_can_distributed:
  1906                           	opt stack 0
  1907  000135                     	ds	2
  1908  000137                     _f_most_recent_sort_time:
  1909                           	opt stack 0
  1910  000137                     	ds	2
  1911  000139                     _first:
  1912                           	opt stack 0
  1913  000139                     	ds	2
  1914  00013B                     _firstboot:
  1915                           	opt stack 0
  1916  00013B                     	ds	2
  1917  00013D                     _i:
  1918                           	opt stack 0
  1919  00013D                     	ds	2
  1920  00013F                     _log_count_can_no_lab:
  1921                           	opt stack 0
  1922  00013F                     	ds	2
  1923  000141                     _log_count_can_w_lab:
  1924                           	opt stack 0
  1925  000141                     	ds	2
  1926  000143                     _log_count_total:
  1927                           	opt stack 0
  1928  000143                     	ds	2
  1929  000145                     _var:
  1930                           	opt stack 0
  1931  000145                     	ds	2
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1l	equ	0xFE1
  1940                           
  1941                           	psect	dataBANK1
  1942  000147                     __pdataBANK1:
  1943                           	opt stack 0
  1944  000147                     UI@F3239:
  1945                           	opt stack 0
  1946  000147                     	ds	4
  1947  00014B                     printRTC@F3229:
  1948                           	opt stack 0
  1949  00014B                     	ds	4
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           
  1959                           	psect	cstackBANK0
  1960  000080                     __pcstackBANK0:
  1961                           	opt stack 0
  1962  000080                     ??_delay_ms:
  1963  000080                     ??_isdigit:
  1964  000080                     ??_readADC:
  1965  000080                     ??_I2C_Master_Wait:
  1966  000080                     ?___wmul:
  1967                           	opt stack 0
  1968  000080                     ?___awmod:
  1969                           	opt stack 0
  1970  000080                     ?___lwdiv:
  1971                           	opt stack 0
  1972  000080                     ?___lldiv:
  1973                           	opt stack 0
  1974  000080                     lcdNibble@temp:
  1975                           	opt stack 0
  1976  000080                     initTime@m:
  1977                           	opt stack 0
  1978  000080                     updateServoPosition@time_us:
  1979                           	opt stack 0
  1980  000080                     EEPROM_read@address:
  1981                           	opt stack 0
  1982  000080                     ___wmul@multiplier:
  1983                           	opt stack 0
  1984  000080                     ___awmod@dividend:
  1985                           	opt stack 0
  1986  000080                     ___lwdiv@dividend:
  1987                           	opt stack 0
  1988  000080                     strcpy@to:
  1989                           	opt stack 0
  1990  000080                     ___lldiv@dividend:
  1991                           	opt stack 0
  1992                           
  1993                           ; 4 bytes @ 0x0
  1994  000080                     	ds	1
  1995  000081                     readADC@channel:
  1996                           	opt stack 0
  1997  000081                     I2C_Master_Read@a:
  1998                           	opt stack 0
  1999  000081                     lcdNibble@data:
  2000                           	opt stack 0
  2001  000081                     initTime@h:
  2002                           	opt stack 0
  2003  000081                     delay_ms@milliseconds:
  2004                           	opt stack 0
  2005  000081                     _isdigit$2044:
  2006                           	opt stack 0
  2007  000081                     I2C_Master_Write@d:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x1
  2011  000081                     	ds	1
  2012  000082                     ??_ID:
  2013  000082                     ??_readIR:
  2014  000082                     ??_readMAG:
  2015  000082                     I2C_Master_Read@temp:
  2016                           	opt stack 0
  2017  000082                     lcdInst@data:
  2018                           	opt stack 0
  2019  000082                     putch@data:
  2020                           	opt stack 0
  2021  000082                     initTime@w:
  2022                           	opt stack 0
  2023  000082                     isdigit@c:
  2024                           	opt stack 0
  2025  000082                     updateServoPosition@timer:
  2026                           	opt stack 0
  2027  000082                     ___wmul@multiplicand:
  2028                           	opt stack 0
  2029  000082                     ___awmod@divisor:
  2030                           	opt stack 0
  2031  000082                     ___lwdiv@divisor:
  2032                           	opt stack 0
  2033  000082                     strcpy@from:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x2
  2037  000082                     	ds	1
  2038  000083                     ??_initLCD:
  2039  000083                     initTime@DD:
  2040                           	opt stack 0
  2041  000083                     getRTC@i:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x3
  2045  000083                     	ds	1
  2046  000084                     ??_updateServoPosition:
  2047  000084                     initTime@MM:
  2048                           	opt stack 0
  2049  000084                     ___awmod@counter:
  2050                           	opt stack 0
  2051  000084                     readIR@res:
  2052                           	opt stack 0
  2053  000084                     readMAG@res:
  2054                           	opt stack 0
  2055  000084                     ID@i:
  2056                           	opt stack 0
  2057  000084                     ___wmul@product:
  2058                           	opt stack 0
  2059  000084                     ___lwdiv@quotient:
  2060                           	opt stack 0
  2061  000084                     strcpy@cp:
  2062                           	opt stack 0
  2063  000084                     ___lldiv@divisor:
  2064                           	opt stack 0
  2065                           
  2066                           ; 4 bytes @ 0x4
  2067  000084                     	ds	1
  2068  000085                     ??_initSortTimer:
  2069  000085                     initTime@YY:
  2070                           	opt stack 0
  2071  000085                     ___awmod@sign:
  2072                           	opt stack 0
  2073                           
  2074                           ; 1 bytes @ 0x5
  2075  000085                     	ds	1
  2076  000086                     ??_getIR:
  2077  000086                     ??_getMAG:
  2078  000086                     ?___awdiv:
  2079                           	opt stack 0
  2080  000086                     initTime@s:
  2081                           	opt stack 0
  2082  000086                     ___lwdiv@counter:
  2083                           	opt stack 0
  2084  000086                     ID@i_1179:
  2085                           	opt stack 0
  2086  000086                     updateServoPosition@my_time:
  2087                           	opt stack 0
  2088  000086                     ___awdiv@dividend:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x6
  2092  000086                     	ds	1
  2093  000087                     ?___lwmod:
  2094                           	opt stack 0
  2095  000087                     getIR@i:
  2096                           	opt stack 0
  2097  000087                     ___lwmod@dividend:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x7
  2101  000087                     	ds	1
  2102  000088                     ??_Distribution:
  2103  000088                     ??_initServos:
  2104  000088                     ID@i_1180:
  2105                           	opt stack 0
  2106  000088                     initSortTimer@i:
  2107                           	opt stack 0
  2108  000088                     ___awdiv@divisor:
  2109                           	opt stack 0
  2110  000088                     ___lldiv@quotient:
  2111                           	opt stack 0
  2112                           
  2113                           ; 4 bytes @ 0x8
  2114  000088                     	ds	1
  2115  000089                     ___lwmod@divisor:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x9
  2119  000089                     	ds	1
  2120  00008A                     ___awdiv@counter:
  2121                           	opt stack 0
  2122                           
  2123                           ; 1 bytes @ 0xA
  2124  00008A                     	ds	1
  2125  00008B                     ___awdiv@sign:
  2126                           	opt stack 0
  2127  00008B                     ___lwmod@counter:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0xB
  2131  00008B                     	ds	1
  2132  00008C                     ___lldiv@counter:
  2133                           	opt stack 0
  2134  00008C                     ___awdiv@quotient:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0xC
  2138  00008C                     	ds	1
  2139  00008D                     I2C_Master_Init@c:
  2140                           	opt stack 0
  2141                           
  2142                           ; 4 bytes @ 0xD
  2143  00008D                     	ds	1
  2144  00008E                     ?_printf:
  2145                           	opt stack 0
  2146  00008E                     printf@f:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0xE
  2150  00008E                     	ds	3
  2151  000091                     ??_I2C_Master_Init:
  2152                           
  2153                           ; 1 bytes @ 0x11
  2154  000091                     	ds	4
  2155  000095                     ??_loadRTC:
  2156                           
  2157                           ; 1 bytes @ 0x15
  2158  000095                     	ds	1
  2159  000096                     loadRTC@i:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x16
  2163  000096                     	ds	4
  2164  00009A                     ??_printf:
  2165                           
  2166                           ; 1 bytes @ 0x1A
  2167  00009A                     	ds	4
  2168  00009E                     printf@prec:
  2169                           	opt stack 0
  2170                           
  2171                           ; 1 bytes @ 0x1E
  2172  00009E                     	ds	1
  2173  00009F                     printf@cp:
  2174                           	opt stack 0
  2175                           
  2176                           ; 2 bytes @ 0x1F
  2177  00009F                     	ds	2
  2178  0000A1                     printf@ap:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x21
  2182  0000A1                     	ds	2
  2183  0000A3                     printf@len:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x23
  2187  0000A3                     	ds	2
  2188  0000A5                     printf@val:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x25
  2192  0000A5                     	ds	2
  2193  0000A7                     printf@flag:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x27
  2197  0000A7                     	ds	1
  2198  0000A8                     printf@c:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x28
  2202  0000A8                     	ds	1
  2203  0000A9                     printf@width:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x29
  2207  0000A9                     	ds	2
  2208  0000AB                     ??_printRTC:
  2209  0000AB                     ??_algorithmTest:
  2210  0000AB                     ??_sensorTest:
  2211  0000AB                     ??_actuatorTest:
  2212  0000AB                     ??_arm:
  2213  0000AB                     ??_PortTestDC:
  2214  0000AB                     ??_SpeedTest:
  2215  0000AB                     ??_PusherTest:
  2216  0000AB                     ??_BothServos:
  2217  0000AB                     ??_BlockerTest:
  2218  0000AB                     EEPROM_write@address:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0x2B
  2222  0000AB                     	ds	1
  2223  0000AC                     BlockerTest@i:
  2224                           	opt stack 0
  2225  0000AC                     arm@on:
  2226                           	opt stack 0
  2227                           
  2228                           ; 2 bytes @ 0x2C
  2229  0000AC                     	ds	1
  2230  0000AD                     EEPROM_write@data:
  2231                           	opt stack 0
  2232  0000AD                     actuatorTest@i_1720:
  2233                           	opt stack 0
  2234  0000AD                     sensorTest@res:
  2235                           	opt stack 0
  2236  0000AD                     PusherTest@res:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x2D
  2240  0000AD                     	ds	1
  2241  0000AE                     ??_EEPROM_write:
  2242  0000AE                     actuatorTest@i_1727:
  2243                           	opt stack 0
  2244  0000AE                     BlockerTest@cam_flag:
  2245                           	opt stack 0
  2246  0000AE                     printRTC@INT_time:
  2247                           	opt stack 0
  2248                           
  2249                           ; 14 bytes @ 0x2E
  2250  0000AE                     	ds	1
  2251  0000AF                     EEPROM_write@i:
  2252                           	opt stack 0
  2253  0000AF                     actuatorTest@i_1728:
  2254                           	opt stack 0
  2255  0000AF                     PusherTest@res_1771:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x2F
  2259  0000AF                     	ds	1
  2260  0000B0                     EEPROM_write@i_1433:
  2261                           	opt stack 0
  2262  0000B0                     actuatorTest@i_1730:
  2263                           	opt stack 0
  2264  0000B0                     BlockerTest@cond_flag:
  2265                           	opt stack 0
  2266                           
  2267                           ; 2 bytes @ 0x30
  2268  0000B0                     	ds	1
  2269  0000B1                     ??_Loading:
  2270  0000B1                     logRun@num:
  2271                           	opt stack 0
  2272  0000B1                     actuatorTest@i_1731:
  2273                           	opt stack 0
  2274  0000B1                     PusherTest@i:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x31
  2278  0000B1                     	ds	1
  2279  0000B2                     logRun@byte1:
  2280                           	opt stack 0
  2281  0000B2                     actuatorTest@i_1733:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x32
  2285  0000B2                     	ds	1
  2286  0000B3                     logRun@byte2:
  2287                           	opt stack 0
  2288  0000B3                     actuatorTest@i_1734:
  2289                           	opt stack 0
  2290  0000B3                     Loading@addr:
  2291                           	opt stack 0
  2292  0000B3                     PusherTest@i_1775:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x33
  2296  0000B3                     	ds	1
  2297  0000B4                     logRun@byte3:
  2298                           	opt stack 0
  2299  0000B4                     actuatorTest@i_1736:
  2300                           	opt stack 0
  2301                           
  2302                           ; 1 bytes @ 0x34
  2303  0000B4                     	ds	1
  2304  0000B5                     Loading@byte1:
  2305                           	opt stack 0
  2306  0000B5                     logRun@byte_i:
  2307                           	opt stack 0
  2308  0000B5                     actuatorTest@i_1737:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x35
  2312  0000B5                     	ds	1
  2313  0000B6                     logRun@byte11:
  2314                           	opt stack 0
  2315  0000B6                     actuatorTest@i_1739:
  2316                           	opt stack 0
  2317  0000B6                     Loading@i_1154:
  2318                           	opt stack 0
  2319                           
  2320                           ; 2 bytes @ 0x36
  2321  0000B6                     	ds	1
  2322  0000B7                     actuatorTest@i_1740:
  2323                           	opt stack 0
  2324  0000B7                     logRun@i:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x37
  2328  0000B7                     	ds	1
  2329  0000B8                     actuatorTest@i_1742:
  2330                           	opt stack 0
  2331  0000B8                     Loading@i_1163:
  2332                           	opt stack 0
  2333                           
  2334                           ; 2 bytes @ 0x38
  2335  0000B8                     	ds	1
  2336  0000B9                     actuatorTest@i_1743:
  2337                           	opt stack 0
  2338  0000B9                     logRun@addr:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x39
  2342  0000B9                     	ds	1
  2343  0000BA                     actuatorTest@i_1746:
  2344                           	opt stack 0
  2345  0000BA                     Loading@i_1165:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x3A
  2349  0000BA                     	ds	1
  2350  0000BB                     actuatorTest@i_1747:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x3B
  2354  0000BB                     	ds	1
  2355  0000BC                     actuatorTest@i_1749:
  2356                           	opt stack 0
  2357  0000BC                     printRTC@RTC_month:
  2358                           	opt stack 0
  2359  0000BC                     Loading@i_1166:
  2360                           	opt stack 0
  2361                           
  2362                           ; 2 bytes @ 0x3C
  2363  0000BC                     	ds	1
  2364  0000BD                     actuatorTest@i_1750:
  2365                           	opt stack 0
  2366                           
  2367                           ; 1 bytes @ 0x3D
  2368  0000BD                     	ds	1
  2369  0000BE                     actuatorTest@i_1752:
  2370                           	opt stack 0
  2371  0000BE                     Loading@i_1168:
  2372                           	opt stack 0
  2373  0000BE                     printRTC@month:
  2374                           	opt stack 0
  2375                           
  2376                           ; 4 bytes @ 0x3E
  2377  0000BE                     	ds	1
  2378  0000BF                     actuatorTest@i_1753:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x3F
  2382  0000BF                     	ds	1
  2383  0000C0                     actuatorTest@i_1756:
  2384                           	opt stack 0
  2385  0000C0                     Loading@j:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x40
  2389  0000C0                     	ds	1
  2390  0000C1                     actuatorTest@i_1757:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x41
  2394  0000C1                     	ds	1
  2395  0000C2                     actuatorTest@i_1759:
  2396                           	opt stack 0
  2397  0000C2                     printRTC@i:
  2398                           	opt stack 0
  2399  0000C2                     Loading@i:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x42
  2403  0000C2                     	ds	1
  2404  0000C3                     actuatorTest@i_1760:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x43
  2408  0000C3                     	ds	1
  2409  0000C4                     ??_UI:
  2410  0000C4                     actuatorTest@i:
  2411                           	opt stack 0
  2412                           
  2413                           ; 2 bytes @ 0x44
  2414  0000C4                     	ds	2
  2415  0000C6                     ??_Test:
  2416  0000C6                     _UI$2402:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x46
  2420  0000C6                     	ds	2
  2421  0000C8                     UI@i:
  2422                           	opt stack 0
  2423                           
  2424                           ; 1 bytes @ 0x48
  2425  0000C8                     	ds	1
  2426  0000C9                     UI@i_409:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x49
  2430  0000C9                     	ds	1
  2431  0000CA                     UI@i_412:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0x4A
  2435  0000CA                     	ds	1
  2436  0000CB                     UI@i_413:
  2437                           	opt stack 0
  2438                           
  2439                           ; 1 bytes @ 0x4B
  2440  0000CB                     	ds	1
  2441  0000CC                     UI@i_431:
  2442                           	opt stack 0
  2443                           
  2444                           ; 1 bytes @ 0x4C
  2445  0000CC                     	ds	1
  2446  0000CD                     UI@i_432:
  2447                           	opt stack 0
  2448                           
  2449                           ; 1 bytes @ 0x4D
  2450  0000CD                     	ds	1
  2451  0000CE                     UI@i_435:
  2452                           	opt stack 0
  2453                           
  2454                           ; 1 bytes @ 0x4E
  2455  0000CE                     	ds	1
  2456  0000CF                     UI@i_436:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0x4F
  2460  0000CF                     	ds	1
  2461  0000D0                     UI@i_439:
  2462                           	opt stack 0
  2463                           
  2464                           ; 1 bytes @ 0x50
  2465  0000D0                     	ds	1
  2466  0000D1                     UI@i_440:
  2467                           	opt stack 0
  2468                           
  2469                           ; 1 bytes @ 0x51
  2470  0000D1                     	ds	1
  2471  0000D2                     UI@i_443:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x52
  2475  0000D2                     	ds	1
  2476  0000D3                     UI@i_444:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x53
  2480  0000D3                     	ds	1
  2481  0000D4                     UI@i_447:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x54
  2485  0000D4                     	ds	1
  2486  0000D5                     UI@i_448:
  2487                           	opt stack 0
  2488                           
  2489                           ; 1 bytes @ 0x55
  2490  0000D5                     	ds	1
  2491  0000D6                     UI@month:
  2492                           	opt stack 0
  2493                           
  2494                           ; 4 bytes @ 0x56
  2495  0000D6                     	ds	4
  2496  0000DA                     tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           postinc0	equ	0xFEE
  2501                           wreg	equ	0xFE8
  2502                           postdec1	equ	0xFE5
  2503                           fsr1l	equ	0xFE1
  2504                           
  2505                           ; 1 bytes @ 0x5A
  2506                           
  2507                           	psect	cstackCOMRAM
  2508  000001                     __pcstackCOMRAM:
  2509                           	opt stack 0
  2510  000001                     ??i2_I2C_Master_Wait:
  2511  000001                     ??i2_delay_ms:
  2512  000001                     ??i2_isdigit:
  2513  000001                     ?i2___wmul:
  2514                           	opt stack 0
  2515  000001                     ?i2___lwmod:
  2516                           	opt stack 0
  2517  000001                     i2lcdNibble@temp:
  2518                           	opt stack 0
  2519  000001                     i2updateServoPosition@time_us:
  2520                           	opt stack 0
  2521  000001                     i2EEPROM_read@address:
  2522                           	opt stack 0
  2523  000001                     i2___wmul@multiplier:
  2524                           	opt stack 0
  2525  000001                     i2___lwmod@dividend:
  2526                           	opt stack 0
  2527  000001                     i2strcpy@to:
  2528                           	opt stack 0
  2529                           
  2530                           ; 2 bytes @ 0x0
  2531  000001                     	ds	1
  2532  000002                     i2I2C_Master_Read@a:
  2533                           	opt stack 0
  2534  000002                     i2lcdNibble@data:
  2535                           	opt stack 0
  2536  000002                     i2delay_ms@milliseconds:
  2537                           	opt stack 0
  2538  000002                     i2_isdigit$2044:
  2539                           	opt stack 0
  2540  000002                     i2I2C_Master_Write@d:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x1
  2544  000002                     	ds	1
  2545  000003                     i2I2C_Master_Read@temp:
  2546                           	opt stack 0
  2547  000003                     i2lcdInst@data:
  2548                           	opt stack 0
  2549  000003                     i2putch@data:
  2550                           	opt stack 0
  2551  000003                     i2isdigit@c:
  2552                           	opt stack 0
  2553  000003                     i2updateServoPosition@timer:
  2554                           	opt stack 0
  2555  000003                     i2___wmul@multiplicand:
  2556                           	opt stack 0
  2557  000003                     i2___lwmod@divisor:
  2558                           	opt stack 0
  2559  000003                     i2strcpy@from:
  2560                           	opt stack 0
  2561                           
  2562                           ; 2 bytes @ 0x2
  2563  000003                     	ds	1
  2564  000004                     i2getRTC@i:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x3
  2568  000004                     	ds	1
  2569  000005                     ??i2_updateServoPosition:
  2570  000005                     i2___lwmod@counter:
  2571                           	opt stack 0
  2572  000005                     i2___wmul@product:
  2573                           	opt stack 0
  2574  000005                     i2strcpy@cp:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x4
  2578  000005                     	ds	1
  2579  000006                     ?i2___lwdiv:
  2580                           	opt stack 0
  2581  000006                     i2___lwdiv@dividend:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x5
  2585  000006                     	ds	1
  2586  000007                     retrieveLog@logNum:
  2587                           	opt stack 0
  2588  000007                     i2updateServoPosition@my_time:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x6
  2592  000007                     	ds	1
  2593  000008                     i2___lwdiv@divisor:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x7
  2597  000008                     	ds	1
  2598  000009                     ??_retrieveLog:
  2599  000009                     ??_updateServoStates:
  2600                           
  2601                           ; 1 bytes @ 0x8
  2602  000009                     	ds	1
  2603  00000A                     i2___lwdiv@quotient:
  2604                           	opt stack 0
  2605                           
  2606                           ; 2 bytes @ 0x9
  2607  00000A                     	ds	1
  2608  00000B                     retrieveLog@byte1:
  2609                           	opt stack 0
  2610                           
  2611                           ; 1 bytes @ 0xA
  2612  00000B                     	ds	1
  2613  00000C                     retrieveLog@byte2:
  2614                           	opt stack 0
  2615  00000C                     i2___lwdiv@counter:
  2616                           	opt stack 0
  2617                           
  2618                           ; 1 bytes @ 0xB
  2619  00000C                     	ds	1
  2620  00000D                     ?i2_printf:
  2621                           	opt stack 0
  2622  00000D                     retrieveLog@byte3:
  2623                           	opt stack 0
  2624  00000D                     i2printf@f:
  2625                           	opt stack 0
  2626                           
  2627                           ; 2 bytes @ 0xC
  2628  00000D                     	ds	1
  2629  00000E                     retrieveLog@i:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0xD
  2633  00000E                     	ds	2
  2634  000010                     retrieveLog@addr:
  2635                           	opt stack 0
  2636                           
  2637                           ; 2 bytes @ 0xF
  2638  000010                     	ds	2
  2639  000012                     dispLogs@myLog:
  2640                           	opt stack 0
  2641                           
  2642                           ; 2 bytes @ 0x11
  2643  000012                     	ds	2
  2644  000014                     
  2645                           ; 1 bytes @ 0x13
  2646  000014                     	ds	5
  2647  000019                     ??i2_printf:
  2648                           
  2649                           ; 1 bytes @ 0x18
  2650  000019                     	ds	4
  2651  00001D                     i2printf@prec:
  2652                           	opt stack 0
  2653                           
  2654                           ; 1 bytes @ 0x1C
  2655  00001D                     	ds	1
  2656  00001E                     i2printf@cp:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x1D
  2660  00001E                     	ds	2
  2661  000020                     i2printf@ap:
  2662                           	opt stack 0
  2663                           
  2664                           ; 2 bytes @ 0x1F
  2665  000020                     	ds	2
  2666  000022                     i2printf@len:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0x21
  2670  000022                     	ds	2
  2671  000024                     i2printf@val:
  2672                           	opt stack 0
  2673                           
  2674                           ; 2 bytes @ 0x23
  2675  000024                     	ds	2
  2676  000026                     i2printf@flag:
  2677                           	opt stack 0
  2678                           
  2679                           ; 1 bytes @ 0x25
  2680  000026                     	ds	1
  2681  000027                     i2printf@c:
  2682                           	opt stack 0
  2683                           
  2684                           ; 1 bytes @ 0x26
  2685  000027                     	ds	1
  2686  000028                     i2printf@width:
  2687                           	opt stack 0
  2688                           
  2689                           ; 2 bytes @ 0x27
  2690  000028                     	ds	2
  2691  00002A                     ??_printSortTimer:
  2692  00002A                     ??i2_printRTC:
  2693  00002A                     ?_inputHandler:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x29
  2697  00002A                     	ds	2
  2698  00002C                     ??_inputHandler:
  2699                           
  2700                           ; 1 bytes @ 0x2B
  2701  00002C                     	ds	1
  2702  00002D                     printSortTimer@curTime:
  2703                           	opt stack 0
  2704  00002D                     i2printRTC@INT_time:
  2705                           	opt stack 0
  2706                           
  2707                           ; 14 bytes @ 0x2C
  2708  00002D                     	ds	14
  2709  00003B                     printSortTimer@start_sec:
  2710                           	opt stack 0
  2711  00003B                     i2printRTC@RTC_month:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x3A
  2715  00003B                     	ds	2
  2716  00003D                     printSortTimer@cur_sec:
  2717                           	opt stack 0
  2718  00003D                     i2printRTC@month:
  2719                           	opt stack 0
  2720                           
  2721                           ; 4 bytes @ 0x3C
  2722  00003D                     	ds	2
  2723  00003F                     printSortTimer@min:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x3E
  2727  00003F                     	ds	2
  2728  000041                     printSortTimer@sec:
  2729                           	opt stack 0
  2730  000041                     i2printRTC@i:
  2731                           	opt stack 0
  2732                           
  2733                           ; 2 bytes @ 0x40
  2734  000041                     	ds	2
  2735  000043                     ??_updateMenu:
  2736  000043                     _printSortTimer$2534:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0x42
  2740  000043                     	ds	2
  2741  000045                     printSortTimer@timeDiff:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x44
  2745  000045                     	ds	2
  2746  000047                     printSortTimer@i_1192:
  2747                           	opt stack 0
  2748                           
  2749                           ; 2 bytes @ 0x46
  2750  000047                     	ds	2
  2751  000049                     printSortTimer@i:
  2752                           	opt stack 0
  2753                           
  2754                           ; 2 bytes @ 0x48
  2755  000049                     	ds	2
  2756  00004B                     ??_handler:
  2757                           
  2758                           ; 1 bytes @ 0x4A
  2759  00004B                     	ds	16
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           postinc0	equ	0xFEE
  2765                           wreg	equ	0xFE8
  2766                           postdec1	equ	0xFE5
  2767                           fsr1l	equ	0xFE1
  2768                           
  2769 ;;
  2770 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2771 ;;
  2772 ;; *************** function _main *****************
  2773 ;; Defined at:
  2774 ;;		line 19 in file "main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;		None
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;Total ram usage:        0 bytes
  2793 ;; Hardware stack levels required when called:   13
  2794 ;; This function calls:
  2795 ;;		_I2C_Master_Init
  2796 ;;		_Test
  2797 ;;		_UI
  2798 ;;		_initLCD
  2799 ;;		_initTime
  2800 ;;		_initUI
  2801 ;;		_logRun
  2802 ;;		_machineConfig
  2803 ;;		_sort
  2804 ;;		_stopSignals
  2805 ;; This function is called by:
  2806 ;;		Startup code after reset
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text0
  2811  0041DC                     __ptext0:
  2812                           	opt stack 0
  2813  0041DC                     _main:
  2814                           	opt stack 18
  2815                           
  2816                           ;main.c: 20: machineConfig();
  2817                           
  2818                           ;incstack = 0
  2819  0041DC  EC6C  F025         	call	_machineConfig	;wreg free
  2820                           
  2821                           ;main.c: 21: initLCD();
  2822  0041E0  ECF4  F026         	call	_initLCD	;wreg free
  2823                           
  2824                           ;main.c: 24: RTCflag = 0;
  2825  0041E4  0E00               	movlw	0
  2826  0041E6  0100               	movlb	0	; () banked
  2827  0041E8  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2828  0041EA  0E00               	movlw	0
  2829  0041EC  6FEA               	movwf	_RTCflag& (0+255),b
  2830                           
  2831                           ;main.c: 25: if(RTCflag){
  2832  0041EE  0100               	movlb	0	; () banked
  2833  0041F0  51EA               	movf	_RTCflag& (0+255),w,b
  2834  0041F2  0100               	movlb	0	; () banked
  2835  0041F4  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2836  0041F6  B4D8               	btfsc	status,2,c
  2837  0041F8  D016               	goto	l9479
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;main.c: 26: initTime(0x42, 0x36, 0x13, 0x06, 0x07, 0x04, 0x17);
  2841  0041FA  0E36               	movlw	54
  2842  0041FC  0100               	movlb	0	; () banked
  2843  0041FE  6F80               	movwf	initTime@m& (0+255),b
  2844  004200  0E13               	movlw	19
  2845  004202  0100               	movlb	0	; () banked
  2846  004204  6F81               	movwf	initTime@h& (0+255),b
  2847  004206  0E06               	movlw	6
  2848  004208  0100               	movlb	0	; () banked
  2849  00420A  6F82               	movwf	initTime@w& (0+255),b
  2850  00420C  0E07               	movlw	7
  2851  00420E  0100               	movlb	0	; () banked
  2852  004210  6F83               	movwf	initTime@DD& (0+255),b
  2853  004212  0E04               	movlw	4
  2854  004214  0100               	movlb	0	; () banked
  2855  004216  6F84               	movwf	initTime@MM& (0+255),b
  2856  004218  0E17               	movlw	23
  2857  00421A  0100               	movlb	0	; () banked
  2858  00421C  6F85               	movwf	initTime@YY& (0+255),b
  2859  00421E  0E42               	movlw	66
  2860  004220  ECA8  F029         	call	_initTime
  2861                           
  2862                           ;main.c: 27: }
  2863  004224  D00B               	goto	l9481
  2864  004226                     l9479:
  2865                           
  2866                           ;main.c: 28: else{
  2867                           ;main.c: 29: I2C_Master_Init(10000);
  2868  004226  0E10               	movlw	16
  2869  004228  0100               	movlb	0	; () banked
  2870  00422A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2871  00422C  0E27               	movlw	39
  2872  00422E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2873  004230  0E00               	movlw	0
  2874  004232  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2875  004234  0E00               	movlw	0
  2876  004236  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2877  004238  ECCF  F025         	call	_I2C_Master_Init	;wreg free
  2878  00423C                     l9481:
  2879                           
  2880                           ;main.c: 30: }
  2881                           ;main.c: 32: initUI();
  2882  00423C  ECD8  F027         	call	_initUI	;wreg free
  2883                           
  2884                           ;main.c: 33: first = 1;
  2885  004240  0E00               	movlw	0
  2886  004242  0101               	movlb	1	; () banked
  2887  004244  6F3A               	movwf	(_first+1)& (0+255),b
  2888  004246  0E01               	movlw	1
  2889  004248  6F39               	movwf	_first& (0+255),b
  2890                           
  2891                           ; BSR set to: 1
  2892                           ;main.c: 44: switch(machine_state){
  2893                           
  2894                           ;main.c: 43: while(1){
  2895  00424A  D018               	goto	l9503
  2896  00424C                     l9485:
  2897                           
  2898                           ;main.c: 46: UI();
  2899  00424C  EC09  F000         	call	_UI	;wreg free
  2900                           
  2901                           ;main.c: 47: break;
  2902  004250  D015               	goto	l9503
  2903  004252                     l9487:
  2904                           
  2905                           ;main.c: 49: sort();
  2906  004252  EC97  F029         	call	_sort	;wreg free
  2907                           
  2908                           ;main.c: 50: break;
  2909  004256  D012               	goto	l9503
  2910  004258                     l9489:
  2911                           
  2912                           ;main.c: 52: stopSignals();
  2913  004258  ECD6  F029         	call	_stopSignals	;wreg free
  2914                           
  2915                           ;main.c: 53: logRun();
  2916  00425C  EC65  F01D         	call	_logRun	;wreg free
  2917                           
  2918                           ;main.c: 54: first = 1;
  2919  004260  0E00               	movlw	0
  2920  004262  0101               	movlb	1	; () banked
  2921  004264  6F3A               	movwf	(_first+1)& (0+255),b
  2922  004266  0E01               	movlw	1
  2923  004268  6F39               	movwf	_first& (0+255),b
  2924                           
  2925                           ; BSR set to: 1
  2926                           ;main.c: 55: UI();
  2927  00426A  EC09  F000         	call	_UI	;wreg free
  2928                           
  2929                           ;main.c: 56: break;
  2930  00426E  D006               	goto	l9503
  2931  004270                     l9497:
  2932                           
  2933                           ;main.c: 58: Test();
  2934  004270  EC98  F01E         	call	_Test	;wreg free
  2935                           
  2936                           ;main.c: 59: break;
  2937  004274  D003               	goto	l9503
  2938  004276                     l9499:
  2939                           
  2940                           ;main.c: 61: stopSignals();
  2941  004276  ECD6  F029         	call	_stopSignals	;wreg free
  2942  00427A                     l497:
  2943  00427A  D7FF               	goto	l497
  2944  00427C                     l9503:
  2945  00427C  0100               	movlb	0	; () banked
  2946  00427E  51FC               	movf	_machine_state& (0+255),w,b
  2947                           
  2948                           ; Switch size 1, requested type "space"
  2949                           ; Number of cases is 5, Range of values is 0 to 4
  2950                           ; switch strategies available:
  2951                           ; Name         Instructions Cycles
  2952                           ; simple_byte           16     9 (average)
  2953                           ;	Chosen strategy is simple_byte
  2954  004280  0A00               	xorlw	0	; case 0
  2955  004282  B4D8               	btfsc	status,2,c
  2956  004284  D7E3               	goto	l9485
  2957  004286  0A01               	xorlw	1	; case 1
  2958  004288  B4D8               	btfsc	status,2,c
  2959  00428A  D7E3               	goto	l9487
  2960  00428C  0A03               	xorlw	3	; case 2
  2961  00428E  B4D8               	btfsc	status,2,c
  2962  004290  D7E3               	goto	l9489
  2963  004292  0A01               	xorlw	1	; case 3
  2964  004294  B4D8               	btfsc	status,2,c
  2965  004296  D7EC               	goto	l9497
  2966  004298  0A07               	xorlw	7	; case 4
  2967  00429A  B4D8               	btfsc	status,2,c
  2968  00429C  D7EC               	goto	l9499
  2969                           
  2970                           ; BSR set to: 0
  2971                           
  2972                           ; BSR set to: 0
  2973  00429E  D7EE               	goto	l9503
  2974  0042A0                     __end_of_main:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           postdec1	equ	0xFE5
  2983                           fsr1l	equ	0xFE1
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _stopSignals *****************
  2987 ;; Defined at:
  2988 ;;		line 70 in file "main.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;		None
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;		None
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, status,2
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;Total ram usage:        0 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    7
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_main
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text1
  3017  0053AC                     __ptext1:
  3018                           	opt stack 0
  3019  0053AC                     _stopSignals:
  3020                           	opt stack 23
  3021                           
  3022                           ;main.c: 71: LATA = 0x00;
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;incstack = 0
  3026  0053AC  0E00               	movlw	0
  3027  0053AE  6E89               	movwf	3977,c	;volatile
  3028                           
  3029                           ;main.c: 72: LATB = 0x00;
  3030  0053B0  0E00               	movlw	0
  3031  0053B2  6E8A               	movwf	3978,c	;volatile
  3032                           
  3033                           ;main.c: 73: LATC = 0x00;
  3034  0053B4  0E00               	movlw	0
  3035  0053B6  6E8B               	movwf	3979,c	;volatile
  3036                           
  3037                           ;main.c: 74: LATD = 0x00;
  3038  0053B8  0E00               	movlw	0
  3039  0053BA  6E8C               	movwf	3980,c	;volatile
  3040                           
  3041                           ;main.c: 75: LATE = 0x00;
  3042  0053BC  0E00               	movlw	0
  3043  0053BE  6E8D               	movwf	3981,c	;volatile
  3044                           
  3045                           ;main.c: 76: TMR1ON = 0;
  3046  0053C0  90CD               	bcf	4045,0,c	;volatile
  3047                           
  3048                           ;main.c: 77: TMR3ON = 0;
  3049  0053C2  90B1               	bcf	4017,0,c	;volatile
  3050  0053C4  0012               	return		;funcret
  3051  0053C6                     __end_of_stopSignals:
  3052                           	opt stack 0
  3053                           tblptru	equ	0xFF8
  3054                           tblptrh	equ	0xFF7
  3055                           tblptrl	equ	0xFF6
  3056                           tablat	equ	0xFF5
  3057                           postinc0	equ	0xFEE
  3058                           wreg	equ	0xFE8
  3059                           postdec1	equ	0xFE5
  3060                           fsr1l	equ	0xFE1
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function _sort *****************
  3064 ;; Defined at:
  3065 ;;		line 66 in file "sort.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;Total ram usage:        0 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:   12
  3086 ;; This function calls:
  3087 ;;		_Distribution
  3088 ;;		_ID
  3089 ;;		_Loading
  3090 ;; This function is called by:
  3091 ;;		_main
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text2
  3096  00532E                     __ptext2:
  3097                           	opt stack 0
  3098  00532E                     _sort:
  3099                           	opt stack 18
  3100                           
  3101                           ;sort.c: 67: if(machine_state == Sorting_state){
  3102                           
  3103                           ;incstack = 0
  3104  00532E  0100               	movlb	0	; () banked
  3105  005330  05FC               	decf	_machine_state& (0+255),w,b
  3106  005332  B4D8               	btfsc	status,2,c
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;sort.c: 68: Loading();
  3110  005334  ECC9  F008         	call	_Loading	;wreg free
  3111                           
  3112                           ;sort.c: 69: }
  3113                           ;sort.c: 70: if(machine_state == Sorting_state){
  3114  005338  0100               	movlb	0	; () banked
  3115  00533A  05FC               	decf	_machine_state& (0+255),w,b
  3116  00533C  B4D8               	btfsc	status,2,c
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;sort.c: 71: ID();
  3120  00533E  EC48  F016         	call	_ID	;wreg free
  3121                           
  3122                           ;sort.c: 72: }
  3123                           ;sort.c: 73: if(machine_state == Sorting_state){
  3124  005342  0100               	movlb	0	; () banked
  3125  005344  05FC               	decf	_machine_state& (0+255),w,b
  3126  005346  A4D8               	btfss	status,2,c
  3127  005348  0012               	return	
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;sort.c: 74: Distribution();
  3131  00534A  EC12  F020         	call	_Distribution	;wreg free
  3132  00534E  0012               	return	
  3133  005350                     __end_of_sort:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           postinc0	equ	0xFEE
  3140                           wreg	equ	0xFE8
  3141                           postdec1	equ	0xFE5
  3142                           fsr1l	equ	0xFE1
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _Loading *****************
  3146 ;; Defined at:
  3147 ;;		line 78 in file "sort.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;		None
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  i               2   62[BANK0 ] int 
  3152 ;;  i               2   60[BANK0 ] int 
  3153 ;;  i               2   58[BANK0 ] int 
  3154 ;;  i               2   56[BANK0 ] int 
  3155 ;;  i               2   54[BANK0 ] int 
  3156 ;;  j               2   64[BANK0 ] int 
  3157 ;;  i               2   66[BANK0 ] int 
  3158 ;;  addr            2   51[BANK0 ] unsigned short 
  3159 ;;  byte1           1   53[BANK0 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  1    wreg      void 
  3162 ;; Registers used:
  3163 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;Total ram usage:       19 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:   11
  3176 ;; This function calls:
  3177 ;;		_EEPROM_read
  3178 ;;		_EEPROM_write
  3179 ;;		_delay_ms
  3180 ;;		_getIR
  3181 ;;		_getMAG
  3182 ;;		_initGlobalVars
  3183 ;;		_initServos
  3184 ;;		_initSortTimer
  3185 ;;		_lcdInst
  3186 ;;		_readIR
  3187 ;; This function is called by:
  3188 ;;		_sort
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text3
  3193  001192                     __ptext3:
  3194                           	opt stack 0
  3195  001192                     _Loading:
  3196                           	opt stack 18
  3197                           
  3198                           ;sort.c: 79: if(first){
  3199                           
  3200                           ;incstack = 0
  3201  001192  0101               	movlb	1	; () banked
  3202  001194  5139               	movf	_first& (0+255),w,b
  3203  001196  0101               	movlb	1	; () banked
  3204  001198  113A               	iorwf	(_first+1)& (0+255),w,b
  3205  00119A  B4D8               	btfsc	status,2,c
  3206  00119C  D066               	goto	l7317
  3207                           
  3208                           ; BSR set to: 1
  3209                           ;sort.c: 80: initGlobalVars();
  3210  00119E  ECAF  F021         	call	_initGlobalVars	;wreg free
  3211                           
  3212                           ;sort.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3213  0011A2  0E01               	movlw	1
  3214  0011A4  EC15  F02A         	call	_lcdInst
  3215  0011A8  0E68               	movlw	104
  3216  0011AA  0100               	movlb	0	; () banked
  3217  0011AC  6FB1               	movwf	??_Loading& (0+255),b
  3218  0011AE  0EE4               	movlw	228
  3219  0011B0                     u8877:
  3220  0011B0  2EE8               	decfsz	wreg,f,c
  3221  0011B2  D7FE               	bra	u8877
  3222  0011B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3223  0011B6  D7FC               	bra	u8877
  3224  0011B8  F000               	nop	
  3225                           
  3226                           ;sort.c: 82: initSortTimer();
  3227  0011BA  EC6B  F022         	call	_initSortTimer	;wreg free
  3228                           
  3229                           ;sort.c: 83: LATCbits.LATC5 = 1;
  3230  0011BE  8A8B               	bsf	3979,5,c	;volatile
  3231                           
  3232                           ;sort.c: 88: sel = EEPROM_read(0);
  3233  0011C0  0E00               	movlw	0
  3234  0011C2  0100               	movlb	0	; () banked
  3235  0011C4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3236  0011C6  0E00               	movlw	0
  3237  0011C8  6F80               	movwf	EEPROM_read@address& (0+255),b
  3238  0011CA  ECE3  F029         	call	_EEPROM_read	;wreg free
  3239  0011CE  0100               	movlb	0	; () banked
  3240  0011D0  6FFD               	movwf	_sel& (0+255),b
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;sort.c: 89: unsigned short addr = 1 + 11 * sel;
  3244  0011D2  0100               	movlb	0	; () banked
  3245  0011D4  51FD               	movf	_sel& (0+255),w,b
  3246  0011D6  0D0B               	mullw	11
  3247  0011D8  0E01               	movlw	1
  3248  0011DA  24F3               	addwf	prodl,w,c
  3249  0011DC  0100               	movlb	0	; () banked
  3250  0011DE  6FB3               	movwf	Loading@addr& (0+255),b
  3251  0011E0  0E00               	movlw	0
  3252  0011E2  20F4               	addwfc	prodh,w,c
  3253  0011E4  0100               	movlb	0	; () banked
  3254  0011E6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;sort.c: 90: unsigned char byte1 = 0b01111111;
  3258  0011E8  0E7F               	movlw	127
  3259  0011EA  0100               	movlb	0	; () banked
  3260  0011EC  6FB5               	movwf	Loading@byte1& (0+255),b
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;sort.c: 91: EEPROM_write(addr, byte1);
  3264  0011EE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3265  0011F2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3266  0011F6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3267  0011FA  EC9E  F01F         	call	_EEPROM_write	;wreg free
  3268                           
  3269                           ;sort.c: 94: LATBbits.LATB2 = 0;
  3270  0011FE  948A               	bcf	3978,2,c	;volatile
  3271                           
  3272                           ;sort.c: 96: for(int i=0; i<46; i++){
  3273  001200  0E00               	movlw	0
  3274  001202  0100               	movlb	0	; () banked
  3275  001204  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3276  001206  0E00               	movlw	0
  3277  001208  6FC2               	movwf	Loading@i& (0+255),b
  3278                           
  3279                           ; BSR set to: 0
  3280  00120A  0100               	movlb	0	; () banked
  3281  00120C  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3282  00120E  D008               	goto	l7307
  3283  001210  0100               	movlb	0	; () banked
  3284  001212  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3285  001214  E126               	bnz	l770
  3286  001216  0E2E               	movlw	46
  3287  001218  0100               	movlb	0	; () banked
  3288  00121A  5DC2               	subwf	Loading@i& (0+255),w,b
  3289  00121C  B0D8               	btfsc	status,0,c
  3290  00121E  D021               	goto	l770
  3291  001220                     l7307:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;sort.c: 97: LATBbits.LATB2 = !LATBbits.LATB2;
  3295  001220  B48A               	btfsc	3978,2,c	;volatile
  3296  001222  D004               	goto	u5750
  3297  001224  0100               	movlb	0	; () banked
  3298  001226  6BB1               	clrf	??_Loading& (0+255),b
  3299  001228  2BB1               	incf	??_Loading& (0+255),f,b
  3300  00122A  D002               	goto	u5768
  3301  00122C                     u5750:
  3302  00122C  0100               	movlb	0	; () banked
  3303  00122E  6BB1               	clrf	??_Loading& (0+255),b
  3304  001230                     u5768:
  3305  001230  0100               	movlb	0	; () banked
  3306  001232  47B1               	rlncf	??_Loading& (0+255),f,b
  3307  001234  47B1               	rlncf	??_Loading& (0+255),f,b
  3308  001236  508A               	movf	3978,w,c	;volatile
  3309  001238  0100               	movlb	0	; () banked
  3310  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3311  00123C  0BFB               	andlw	-5
  3312  00123E  19B1               	xorwf	??_Loading& (0+255),w,b
  3313  001240  6E8A               	movwf	3978,c	;volatile
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;sort.c: 98: delay_ms(45-i);
  3317  001242  0100               	movlb	0	; () banked
  3318  001244  51C2               	movf	Loading@i& (0+255),w,b
  3319  001246  0800               	sublw	0
  3320  001248  0F2D               	addlw	45
  3321  00124A  EC37  F029         	call	_delay_ms
  3322  00124E  0100               	movlb	0	; () banked
  3323  001250  4BC2               	infsnz	Loading@i& (0+255),f,b
  3324  001252  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3325                           
  3326                           ; BSR set to: 0
  3327  001254  0100               	movlb	0	; () banked
  3328  001256  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3329  001258  D7E3               	goto	l7307
  3330  00125A  0100               	movlb	0	; () banked
  3331  00125C  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3332  00125E  E101               	bnz	u5770
  3333  001260  D7DA               	goto	L1
  3334  001262                     u5770:
  3335  001262                     l770:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;sort.c: 99: }
  3339                           ;sort.c: 100: LATBbits.LATB2 = 1;
  3340  001262  848A               	bsf	3978,2,c	;volatile
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;sort.c: 103: initServos();
  3344  001264  EC39  F025         	call	_initServos	;wreg free
  3345                           
  3346                           ;sort.c: 104: }
  3347  001268  0012               	return	
  3348  00126A                     l7317:
  3349                           
  3350                           ;sort.c: 105: else{
  3351                           ;sort.c: 108: if(!f_loadingNewCan){
  3352  00126A  0100               	movlb	0	; () banked
  3353  00126C  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3354  00126E  0100               	movlb	0	; () banked
  3355  001270  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3356  001272  A4D8               	btfss	status,2,c
  3357  001274  D018               	goto	l7333
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;sort.c: 110: getIR();
  3361  001276  EC5B  F024         	call	_getIR	;wreg free
  3362                           
  3363                           ;sort.c: 112: if(!f_loadingNewCan){
  3364  00127A  0100               	movlb	0	; () banked
  3365  00127C  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3366  00127E  0100               	movlb	0	; () banked
  3367  001280  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3368  001282  B4D8               	btfsc	status,2,c
  3369  001284  0012               	return	
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;sort.c: 116: else{
  3373                           ;sort.c: 117: count_total++;
  3374                           
  3375                           ; BSR set to: 0
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;sort.c: 114: }
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;sort.c: 113: return;
  3382  001286  0100               	movlb	0	; () banked
  3383  001288  4BFE               	infsnz	_count_total& (0+255),f,b
  3384  00128A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;sort.c: 118: if(count_total == 12){
  3388  00128C  0E0C               	movlw	12
  3389  00128E  0100               	movlb	0	; () banked
  3390  001290  19FE               	xorwf	_count_total& (0+255),w,b
  3391  001292  0100               	movlb	0	; () banked
  3392  001294  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3393  001296  A4D8               	btfss	status,2,c
  3394  001298  0012               	return	
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;sort.c: 119: f_lastCan = 1;
  3398  00129A  0E00               	movlw	0
  3399  00129C  0100               	movlb	0	; () banked
  3400  00129E  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  3401  0012A0  0E01               	movlw	1
  3402  0012A2  6FEE               	movwf	_f_lastCan& (0+255),b
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;sort.c: 120: }
  3406                           ;sort.c: 121: }
  3407                           ;sort.c: 122: }
  3408                           
  3409                           ; BSR set to: 0
  3410  0012A4  0012               	return	
  3411  0012A6                     l7333:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;sort.c: 125: else if(f_ID_receive){
  3415  0012A6  0101               	movlb	1	; () banked
  3416  0012A8  512F               	movf	_f_ID_receive& (0+255),w,b
  3417  0012AA  0101               	movlb	1	; () banked
  3418  0012AC  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3419  0012AE  B4D8               	btfsc	status,2,c
  3420  0012B0  0012               	return	
  3421                           
  3422                           ; BSR set to: 1
  3423                           ;sort.c: 126: f_most_recent_sort_time = 1;
  3424  0012B2  0E00               	movlw	0
  3425  0012B4  0101               	movlb	1	; () banked
  3426  0012B6  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3427  0012B8  0E01               	movlw	1
  3428  0012BA  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3429                           
  3430                           ;sort.c: 127: f_loadingNewCan = 0;
  3431  0012BC  0E00               	movlw	0
  3432  0012BE  0100               	movlb	0	; () banked
  3433  0012C0  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3434  0012C2  0E00               	movlw	0
  3435  0012C4  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3439  0012C6  0E1F               	movlw	31
  3440  0012C8  0100               	movlb	0	; () banked
  3441  0012CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3442  0012CC  0E71               	movlw	113
  3443  0012CE  0100               	movlb	0	; () banked
  3444  0012D0  6FB1               	movwf	??_Loading& (0+255),b
  3445  0012D2  0E1E               	movlw	30
  3446  0012D4                     u8887:
  3447  0012D4  2EE8               	decfsz	wreg,f,c
  3448  0012D6  D7FE               	bra	u8887
  3449  0012D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3450  0012DA  D7FC               	bra	u8887
  3451  0012DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3452  0012DE  D7FA               	bra	u8887
  3453  0012E0  F000               	nop	
  3454                           
  3455                           ;sort.c: 129: LATBbits.LATB2 = 0;
  3456  0012E2  948A               	bcf	3978,2,c	;volatile
  3457                           
  3458                           ;sort.c: 133: getMAG();
  3459  0012E4  ECA6  F027         	call	_getMAG	;wreg free
  3460                           
  3461                           ;sort.c: 134: sensor_outputs[0] = MAG_signal;
  3462  0012E8  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3463  0012EC  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3464                           
  3465                           ;sort.c: 136: if(sensor_outputs[0]){
  3466  0012F0  0100               	movlb	0	; () banked
  3467  0012F2  51E2               	movf	_sensor_outputs& (0+255),w,b
  3468  0012F4  0100               	movlb	0	; () banked
  3469  0012F6  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3470  0012F8  B4D8               	btfsc	status,2,c
  3471  0012FA  D01D               	goto	l7359
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;sort.c: 137: for(int i = 0; i<2500; i++){
  3475  0012FC  0E00               	movlw	0
  3476  0012FE  0100               	movlb	0	; () banked
  3477  001300  6FB7               	movwf	(Loading@i_1154+1)& (0+255),b
  3478  001302  0E00               	movlw	0
  3479  001304  6FB6               	movwf	Loading@i_1154& (0+255),b
  3480  001306                     l7349:
  3481                           
  3482                           ; BSR set to: 0
  3483  001306  0100               	movlb	0	; () banked
  3484  001308  BFB7               	btfsc	(Loading@i_1154+1)& (0+255),7,b
  3485  00130A  D008               	goto	l780
  3486  00130C  0EC4               	movlw	196
  3487  00130E  0100               	movlb	0	; () banked
  3488  001310  5DB6               	subwf	Loading@i_1154& (0+255),w,b
  3489  001312  0E09               	movlw	9
  3490  001314  0100               	movlb	0	; () banked
  3491  001316  59B7               	subwfb	(Loading@i_1154+1)& (0+255),w,b
  3492  001318  B0D8               	btfsc	status,0,c
  3493  00131A  D02A               	goto	l7371
  3494  00131C                     l780:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;sort.c: 138: LATAbits.LATA4 = 1;
  3498  00131C  8889               	bsf	3977,4,c	;volatile
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;sort.c: 139: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3502  00131E  0EC8               	movlw	200
  3503  001320                     u8897:
  3504  001320  2EE8               	decfsz	wreg,f,c
  3505  001322  D7FE               	bra	u8897
  3506                           
  3507                           ;sort.c: 140: LATAbits.LATA4 = 0;
  3508  001324  9889               	bcf	3977,4,c	;volatile
  3509                           
  3510                           ;sort.c: 141: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3511  001326  0E42               	movlw	66
  3512  001328                     u8907:
  3513  001328  2EE8               	decfsz	wreg,f,c
  3514  00132A  D7FE               	bra	u8907
  3515  00132C  D000               	nop2	
  3516  00132E  0100               	movlb	0	; () banked
  3517  001330  4BB6               	infsnz	Loading@i_1154& (0+255),f,b
  3518  001332  2BB7               	incf	(Loading@i_1154+1)& (0+255),f,b
  3519  001334  D7E8               	goto	l7349
  3520  001336                     l7359:
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;sort.c: 144: else{
  3524                           ;sort.c: 145: for(int i = 0; i<2500; i++){
  3525  001336  0E00               	movlw	0
  3526  001338  0100               	movlb	0	; () banked
  3527  00133A  6FB9               	movwf	(Loading@i_1163+1)& (0+255),b
  3528  00133C  0E00               	movlw	0
  3529  00133E  6FB8               	movwf	Loading@i_1163& (0+255),b
  3530  001340                     l7361:
  3531                           
  3532                           ; BSR set to: 0
  3533  001340  0100               	movlb	0	; () banked
  3534  001342  BFB9               	btfsc	(Loading@i_1163+1)& (0+255),7,b
  3535  001344  D008               	goto	l783
  3536  001346  0EC4               	movlw	196
  3537  001348  0100               	movlb	0	; () banked
  3538  00134A  5DB8               	subwf	Loading@i_1163& (0+255),w,b
  3539  00134C  0E09               	movlw	9
  3540  00134E  0100               	movlb	0	; () banked
  3541  001350  59B9               	subwfb	(Loading@i_1163+1)& (0+255),w,b
  3542  001352  B0D8               	btfsc	status,0,c
  3543  001354  D00D               	goto	l7371
  3544  001356                     l783:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;sort.c: 146: LATAbits.LATA4 = 1;
  3548  001356  8889               	bsf	3977,4,c	;volatile
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;sort.c: 147: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3552  001358  0E9A               	movlw	154
  3553  00135A                     u8917:
  3554  00135A  2EE8               	decfsz	wreg,f,c
  3555  00135C  D7FE               	bra	u8917
  3556  00135E  D000               	nop2	
  3557                           
  3558                           ;sort.c: 148: LATAbits.LATA4 = 0;
  3559  001360  9889               	bcf	3977,4,c	;volatile
  3560                           
  3561                           ;sort.c: 149: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3562  001362  0E70               	movlw	112
  3563  001364                     u8927:
  3564  001364  2EE8               	decfsz	wreg,f,c
  3565  001366  D7FE               	bra	u8927
  3566  001368  0100               	movlb	0	; () banked
  3567  00136A  4BB8               	infsnz	Loading@i_1163& (0+255),f,b
  3568  00136C  2BB9               	incf	(Loading@i_1163+1)& (0+255),f,b
  3569  00136E  D7E8               	goto	l7361
  3570  001370                     l7371:
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;sort.c: 150: }
  3574                           ;sort.c: 151: }
  3575                           ;sort.c: 153: _delay((unsigned long)((350)*(32000000/4000.0)));
  3576  001370  0E0F               	movlw	15
  3577  001372  0100               	movlb	0	; () banked
  3578  001374  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3579  001376  0E35               	movlw	53
  3580  001378  0100               	movlb	0	; () banked
  3581  00137A  6FB1               	movwf	??_Loading& (0+255),b
  3582  00137C  0E51               	movlw	81
  3583  00137E                     u8937:
  3584  00137E  2EE8               	decfsz	wreg,f,c
  3585  001380  D7FE               	bra	u8937
  3586  001382  2FB1               	decfsz	??_Loading& (0+255),f,b
  3587  001384  D7FC               	bra	u8937
  3588  001386  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3589  001388  D7FA               	bra	u8937
  3590                           
  3591                           ;sort.c: 155: readIR();
  3592  00138A  ECA8  F026         	call	_readIR	;wreg free
  3593                           
  3594                           ;sort.c: 156: if(IR_signal==1){
  3595  00138E  0100               	movlb	0	; () banked
  3596  001390  05E6               	decf	_IR_signal& (0+255),w,b
  3597  001392  0100               	movlb	0	; () banked
  3598  001394  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3599  001396  A4D8               	btfss	status,2,c
  3600  001398  D148               	goto	l7489
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;sort.c: 157: _delay((unsigned long)((100)*(32000000/4000.0)));
  3604  00139A  0E05               	movlw	5
  3605  00139C  0100               	movlb	0	; () banked
  3606  00139E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3607  0013A0  0E0F               	movlw	15
  3608  0013A2  0100               	movlb	0	; () banked
  3609  0013A4  6FB1               	movwf	??_Loading& (0+255),b
  3610  0013A6  0EF1               	movlw	241
  3611  0013A8                     u8947:
  3612  0013A8  2EE8               	decfsz	wreg,f,c
  3613  0013AA  D7FE               	bra	u8947
  3614  0013AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3615  0013AE  D7FC               	bra	u8947
  3616  0013B0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3617  0013B2  D7FA               	bra	u8947
  3618                           
  3619                           ;sort.c: 158: readIR();
  3620  0013B4  ECA8  F026         	call	_readIR	;wreg free
  3621                           
  3622                           ;sort.c: 159: if(IR_signal==1){
  3623  0013B8  0100               	movlb	0	; () banked
  3624  0013BA  05E6               	decf	_IR_signal& (0+255),w,b
  3625  0013BC  0100               	movlb	0	; () banked
  3626  0013BE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3627  0013C0  A4D8               	btfss	status,2,c
  3628  0013C2  D040               	goto	l7409
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;sort.c: 160: if(sensor_outputs[0]){
  3632  0013C4  0100               	movlb	0	; () banked
  3633  0013C6  51E2               	movf	_sensor_outputs& (0+255),w,b
  3634  0013C8  0100               	movlb	0	; () banked
  3635  0013CA  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3636  0013CC  B4D8               	btfsc	status,2,c
  3637  0013CE  D01D               	goto	l7397
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;sort.c: 161: for(int i = 0; i<2500; i++){
  3641  0013D0  0E00               	movlw	0
  3642  0013D2  0100               	movlb	0	; () banked
  3643  0013D4  6FBB               	movwf	(Loading@i_1165+1)& (0+255),b
  3644  0013D6  0E00               	movlw	0
  3645  0013D8  6FBA               	movwf	Loading@i_1165& (0+255),b
  3646  0013DA                     l7387:
  3647                           
  3648                           ; BSR set to: 0
  3649  0013DA  0100               	movlb	0	; () banked
  3650  0013DC  BFBB               	btfsc	(Loading@i_1165+1)& (0+255),7,b
  3651  0013DE  D008               	goto	l788
  3652  0013E0  0EC4               	movlw	196
  3653  0013E2  0100               	movlb	0	; () banked
  3654  0013E4  5DBA               	subwf	Loading@i_1165& (0+255),w,b
  3655  0013E6  0E09               	movlw	9
  3656  0013E8  0100               	movlb	0	; () banked
  3657  0013EA  59BB               	subwfb	(Loading@i_1165+1)& (0+255),w,b
  3658  0013EC  B0D8               	btfsc	status,0,c
  3659  0013EE  D02A               	goto	l7409
  3660  0013F0                     l788:
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;sort.c: 162: LATAbits.LATA4 = 1;
  3664  0013F0  8889               	bsf	3977,4,c	;volatile
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;sort.c: 163: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3668  0013F2  0EC8               	movlw	200
  3669  0013F4                     u8957:
  3670  0013F4  2EE8               	decfsz	wreg,f,c
  3671  0013F6  D7FE               	bra	u8957
  3672                           
  3673                           ;sort.c: 164: LATAbits.LATA4 = 0;
  3674  0013F8  9889               	bcf	3977,4,c	;volatile
  3675                           
  3676                           ;sort.c: 165: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3677  0013FA  0E42               	movlw	66
  3678  0013FC                     u8967:
  3679  0013FC  2EE8               	decfsz	wreg,f,c
  3680  0013FE  D7FE               	bra	u8967
  3681  001400  D000               	nop2	
  3682  001402  0100               	movlb	0	; () banked
  3683  001404  4BBA               	infsnz	Loading@i_1165& (0+255),f,b
  3684  001406  2BBB               	incf	(Loading@i_1165+1)& (0+255),f,b
  3685  001408  D7E8               	goto	l7387
  3686  00140A                     l7397:
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;sort.c: 168: else{
  3690                           ;sort.c: 169: for(int i = 0; i<2500; i++){
  3691  00140A  0E00               	movlw	0
  3692  00140C  0100               	movlb	0	; () banked
  3693  00140E  6FBD               	movwf	(Loading@i_1166+1)& (0+255),b
  3694  001410  0E00               	movlw	0
  3695  001412  6FBC               	movwf	Loading@i_1166& (0+255),b
  3696  001414                     l7399:
  3697                           
  3698                           ; BSR set to: 0
  3699  001414  0100               	movlb	0	; () banked
  3700  001416  BFBD               	btfsc	(Loading@i_1166+1)& (0+255),7,b
  3701  001418  D008               	goto	l791
  3702  00141A  0EC4               	movlw	196
  3703  00141C  0100               	movlb	0	; () banked
  3704  00141E  5DBC               	subwf	Loading@i_1166& (0+255),w,b
  3705  001420  0E09               	movlw	9
  3706  001422  0100               	movlb	0	; () banked
  3707  001424  59BD               	subwfb	(Loading@i_1166+1)& (0+255),w,b
  3708  001426  B0D8               	btfsc	status,0,c
  3709  001428  D00D               	goto	l7409
  3710  00142A                     l791:
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;sort.c: 170: LATAbits.LATA4 = 1;
  3714  00142A  8889               	bsf	3977,4,c	;volatile
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;sort.c: 171: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3718  00142C  0E9A               	movlw	154
  3719  00142E                     u8977:
  3720  00142E  2EE8               	decfsz	wreg,f,c
  3721  001430  D7FE               	bra	u8977
  3722  001432  D000               	nop2	
  3723                           
  3724                           ;sort.c: 172: LATAbits.LATA4 = 0;
  3725  001434  9889               	bcf	3977,4,c	;volatile
  3726                           
  3727                           ;sort.c: 173: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3728  001436  0E70               	movlw	112
  3729  001438                     u8987:
  3730  001438  2EE8               	decfsz	wreg,f,c
  3731  00143A  D7FE               	bra	u8987
  3732  00143C  0100               	movlb	0	; () banked
  3733  00143E  4BBC               	infsnz	Loading@i_1166& (0+255),f,b
  3734  001440  2BBD               	incf	(Loading@i_1166+1)& (0+255),f,b
  3735  001442  D7E8               	goto	l7399
  3736  001444                     l7409:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;sort.c: 174: }
  3740                           ;sort.c: 175: }
  3741                           ;sort.c: 176: }
  3742                           ;sort.c: 178: _delay((unsigned long)((350)*(32000000/4000.0)));
  3743  001444  0E0F               	movlw	15
  3744  001446  0100               	movlb	0	; () banked
  3745  001448  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3746  00144A  0E35               	movlw	53
  3747  00144C  0100               	movlb	0	; () banked
  3748  00144E  6FB1               	movwf	??_Loading& (0+255),b
  3749  001450  0E51               	movlw	81
  3750  001452                     u8997:
  3751  001452  2EE8               	decfsz	wreg,f,c
  3752  001454  D7FE               	bra	u8997
  3753  001456  2FB1               	decfsz	??_Loading& (0+255),f,b
  3754  001458  D7FC               	bra	u8997
  3755  00145A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3756  00145C  D7FA               	bra	u8997
  3757                           
  3758                           ;sort.c: 180: int j = 1;
  3759  00145E  0E00               	movlw	0
  3760  001460  0100               	movlb	0	; () banked
  3761  001462  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3762  001464  0E01               	movlw	1
  3763  001466  6FC0               	movwf	Loading@j& (0+255),b
  3764                           
  3765                           ;sort.c: 181: while(IR_signal == 1){
  3766  001468  D0D9               	goto	l7487
  3767  00146A                     l7413:
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;sort.c: 182: readIR();
  3771  00146A  ECA8  F026         	call	_readIR	;wreg free
  3772                           
  3773                           ;sort.c: 183: if(j == 10){
  3774  00146E  0E0A               	movlw	10
  3775  001470  0100               	movlb	0	; () banked
  3776  001472  19C0               	xorwf	Loading@j& (0+255),w,b
  3777  001474  0100               	movlb	0	; () banked
  3778  001476  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3779  001478  A4D8               	btfss	status,2,c
  3780  00147A  D016               	goto	l7421
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;sort.c: 184: LATBbits.LATB2 = !LATBbits.LATB2;
  3784  00147C  B48A               	btfsc	3978,2,c	;volatile
  3785  00147E  D004               	goto	u5950
  3786  001480  0100               	movlb	0	; () banked
  3787  001482  6BB1               	clrf	??_Loading& (0+255),b
  3788  001484  2BB1               	incf	??_Loading& (0+255),f,b
  3789  001486  D002               	goto	u5968
  3790  001488                     u5950:
  3791  001488  0100               	movlb	0	; () banked
  3792  00148A  6BB1               	clrf	??_Loading& (0+255),b
  3793  00148C                     u5968:
  3794  00148C  0100               	movlb	0	; () banked
  3795  00148E  47B1               	rlncf	??_Loading& (0+255),f,b
  3796  001490  47B1               	rlncf	??_Loading& (0+255),f,b
  3797  001492  508A               	movf	3978,w,c	;volatile
  3798  001494  0100               	movlb	0	; () banked
  3799  001496  19B1               	xorwf	??_Loading& (0+255),w,b
  3800  001498  0BFB               	andlw	-5
  3801  00149A  19B1               	xorwf	??_Loading& (0+255),w,b
  3802  00149C  6E8A               	movwf	3978,c	;volatile
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;sort.c: 185: j = 0;
  3806  00149E  0E00               	movlw	0
  3807  0014A0  0100               	movlb	0	; () banked
  3808  0014A2  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3809  0014A4  0E00               	movlw	0
  3810  0014A6  6FC0               	movwf	Loading@j& (0+255),b
  3811  0014A8                     l7421:
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;sort.c: 186: }
  3815                           ;sort.c: 187: if(IR_signal==1){
  3816  0014A8  0100               	movlb	0	; () banked
  3817  0014AA  05E6               	decf	_IR_signal& (0+255),w,b
  3818  0014AC  0100               	movlb	0	; () banked
  3819  0014AE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3820  0014B0  A4D8               	btfss	status,2,c
  3821  0014B2  D098               	goto	l7475
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;sort.c: 188: _delay((unsigned long)((350)*(32000000/4000.0)));
  3825  0014B4  0E0F               	movlw	15
  3826  0014B6  0100               	movlb	0	; () banked
  3827  0014B8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3828  0014BA  0E35               	movlw	53
  3829  0014BC  0100               	movlb	0	; () banked
  3830  0014BE  6FB1               	movwf	??_Loading& (0+255),b
  3831  0014C0  0E51               	movlw	81
  3832  0014C2                     u9007:
  3833  0014C2  2EE8               	decfsz	wreg,f,c
  3834  0014C4  D7FE               	bra	u9007
  3835  0014C6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3836  0014C8  D7FC               	bra	u9007
  3837  0014CA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3838  0014CC  D7FA               	bra	u9007
  3839                           
  3840                           ;sort.c: 189: readIR();
  3841  0014CE  ECA8  F026         	call	_readIR	;wreg free
  3842                           
  3843                           ;sort.c: 190: if(IR_signal==1){
  3844  0014D2  0100               	movlb	0	; () banked
  3845  0014D4  05E6               	decf	_IR_signal& (0+255),w,b
  3846  0014D6  0100               	movlb	0	; () banked
  3847  0014D8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3848  0014DA  A4D8               	btfss	status,2,c
  3849  0014DC  D07F               	goto	l797
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;sort.c: 191: if(sensor_outputs[0]){
  3853  0014DE  0100               	movlb	0	; () banked
  3854  0014E0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3855  0014E2  0100               	movlb	0	; () banked
  3856  0014E4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3857  0014E6  B4D8               	btfsc	status,2,c
  3858  0014E8  D011               	goto	l7437
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;sort.c: 192: LATAbits.LATA4 = 1;
  3862  0014EA  8889               	bsf	3977,4,c	;volatile
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;sort.c: 193: _delay((unsigned long)((250)*(32000000/4000.0)));
  3866  0014EC  0E0B               	movlw	11
  3867  0014EE  0100               	movlb	0	; () banked
  3868  0014F0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3869  0014F2  0E26               	movlw	38
  3870  0014F4  0100               	movlb	0	; () banked
  3871  0014F6  6FB1               	movwf	??_Loading& (0+255),b
  3872  0014F8  0E5D               	movlw	93
  3873  0014FA                     u9017:
  3874  0014FA  2EE8               	decfsz	wreg,f,c
  3875  0014FC  D7FE               	bra	u9017
  3876  0014FE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3877  001500  D7FC               	bra	u9017
  3878  001502  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3879  001504  D7FA               	bra	u9017
  3880  001506  D000               	nop2	
  3881                           
  3882                           ;sort.c: 194: LATAbits.LATA4 = 0;
  3883  001508  9889               	bcf	3977,4,c	;volatile
  3884                           
  3885                           ;sort.c: 195: }
  3886  00150A  D068               	goto	l797
  3887  00150C                     l7437:
  3888                           
  3889                           ;sort.c: 196: else{
  3890                           ;sort.c: 197: for(int i = 0; i<2500; i++){
  3891  00150C  0E00               	movlw	0
  3892  00150E  0100               	movlb	0	; () banked
  3893  001510  6FBF               	movwf	(Loading@i_1168+1)& (0+255),b
  3894  001512  0E00               	movlw	0
  3895  001514  6FBE               	movwf	Loading@i_1168& (0+255),b
  3896  001516                     l7439:
  3897                           
  3898                           ; BSR set to: 0
  3899  001516  0100               	movlb	0	; () banked
  3900  001518  BFBF               	btfsc	(Loading@i_1168+1)& (0+255),7,b
  3901  00151A  D041               	goto	l7467
  3902  00151C  0EC4               	movlw	196
  3903  00151E  0100               	movlb	0	; () banked
  3904  001520  5DBE               	subwf	Loading@i_1168& (0+255),w,b
  3905  001522  0E09               	movlw	9
  3906  001524  0100               	movlb	0	; () banked
  3907  001526  59BF               	subwfb	(Loading@i_1168+1)& (0+255),w,b
  3908  001528  B0D8               	btfsc	status,0,c
  3909  00152A  D058               	goto	l797
  3910  00152C  D038               	goto	l7467
  3911  00152E                     l803:
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;sort.c: 200: LATAbits.LATA4 = 1;
  3915  00152E  8889               	bsf	3977,4,c	;volatile
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;sort.c: 201: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3919  001530  0EC8               	movlw	200
  3920  001532                     u9027:
  3921  001532  2EE8               	decfsz	wreg,f,c
  3922  001534  D7FE               	bra	u9027
  3923                           
  3924                           ;sort.c: 202: LATAbits.LATA4 = 0;
  3925  001536  9889               	bcf	3977,4,c	;volatile
  3926                           
  3927                           ;sort.c: 203: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3928  001538  0E42               	movlw	66
  3929  00153A                     u9037:
  3930  00153A  2EE8               	decfsz	wreg,f,c
  3931  00153C  D7FE               	bra	u9037
  3932  00153E  D01C               	goto	L2
  3933  001540                     l805:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;sort.c: 206: LATAbits.LATA4 = 1;
  3937  001540  8889               	bsf	3977,4,c	;volatile
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;sort.c: 207: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3941  001542  0ED5               	movlw	213
  3942  001544                     u9047:
  3943  001544  2EE8               	decfsz	wreg,f,c
  3944  001546  D7FE               	bra	u9047
  3945  001548  F000               	nop	
  3946                           
  3947                           ;sort.c: 208: LATAbits.LATA4 = 0;
  3948  00154A  9889               	bcf	3977,4,c	;volatile
  3949                           
  3950                           ;sort.c: 209: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3951  00154C  0E35               	movlw	53
  3952  00154E                     u9057:
  3953  00154E  2EE8               	decfsz	wreg,f,c
  3954  001550  D7FE               	bra	u9057
  3955  001552  D01D               	goto	L3
  3956  001554                     l806:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;sort.c: 212: LATAbits.LATA4 = 1;
  3960  001554  8889               	bsf	3977,4,c	;volatile
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;sort.c: 213: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3964  001556  0EE2               	movlw	226
  3965  001558                     u9067:
  3966  001558  2EE8               	decfsz	wreg,f,c
  3967  00155A  D7FE               	bra	u9067
  3968  00155C  D000               	nop2	
  3969                           
  3970                           ;sort.c: 214: LATAbits.LATA4 = 0;
  3971  00155E  9889               	bcf	3977,4,c	;volatile
  3972                           
  3973                           ;sort.c: 215: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3974  001560  0E28               	movlw	40
  3975  001562                     u9077:
  3976  001562  2EE8               	decfsz	wreg,f,c
  3977  001564  D7FE               	bra	u9077
  3978                           
  3979                           ;sort.c: 216: break;
  3980  001566  D036               	goto	l7469
  3981  001568                     l807:
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;sort.c: 218: LATAbits.LATA4 = 1;
  3985  001568  8889               	bsf	3977,4,c	;volatile
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;sort.c: 219: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3989  00156A  0EF0               	movlw	240
  3990  00156C                     u9087:
  3991  00156C  2EE8               	decfsz	wreg,f,c
  3992  00156E  D7FE               	bra	u9087
  3993                           
  3994                           ;sort.c: 220: LATAbits.LATA4 = 0;
  3995  001570  9889               	bcf	3977,4,c	;volatile
  3996                           
  3997                           ;sort.c: 221: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3998  001572  0E1A               	movlw	26
  3999  001574                     u9097:
  4000  001574  2EE8               	decfsz	wreg,f,c
  4001  001576  D7FE               	bra	u9097
  4002  001578                     L2:
  4003  001578  D000               	nop2	
  4004                           
  4005                           ;sort.c: 222: break;
  4006  00157A  D02C               	goto	l7469
  4007  00157C                     l808:
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;sort.c: 224: LATAbits.LATA4 = 1;
  4011  00157C  8889               	bsf	3977,4,c	;volatile
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;sort.c: 225: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4015  00157E  0EFD               	movlw	253
  4016  001580                     u9107:
  4017  001580  2EE8               	decfsz	wreg,f,c
  4018  001582  D7FE               	bra	u9107
  4019  001584  F000               	nop	
  4020                           
  4021                           ;sort.c: 226: LATAbits.LATA4 = 0;
  4022  001586  9889               	bcf	3977,4,c	;volatile
  4023                           
  4024                           ;sort.c: 227: _delay((unsigned long)((5)*(32000000/4000000.0)));
  4025  001588  0E0D               	movlw	13
  4026  00158A                     u9117:
  4027  00158A  2EE8               	decfsz	wreg,f,c
  4028  00158C  D7FE               	bra	u9117
  4029  00158E                     L3:
  4030  00158E  F000               	nop	
  4031                           
  4032                           ;sort.c: 228: break;
  4033  001590  D021               	goto	l7469
  4034  001592                     l809:
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;sort.c: 230: LATAbits.LATA4 = 1;
  4038  001592  8889               	bsf	3977,4,c	;volatile
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;sort.c: 231: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4042  001594  0EA0               	movlw	160
  4043  001596                     u9127:
  4044  001596  D000               	nop2	
  4045  001598  2EE8               	decfsz	wreg,f,c
  4046  00159A  D7FD               	bra	u9127
  4047                           
  4048                           ;sort.c: 233: }
  4049                           
  4050                           ;sort.c: 232: break;
  4051  00159C  D01B               	goto	l7469
  4052  00159E                     l7467:
  4053  00159E  C0C0  F0B1         	movff	Loading@j,??_Loading
  4054  0015A2  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4055                           
  4056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4057                           ; Switch size 1, requested type "space"
  4058                           ; Number of cases is 1, Range of values is 0 to 0
  4059                           ; switch strategies available:
  4060                           ; Name         Instructions Cycles
  4061                           ; simple_byte            4     3 (average)
  4062                           ;	Chosen strategy is simple_byte
  4063  0015A6  0100               	movlb	0	; () banked
  4064  0015A8  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4065  0015AA  0A00               	xorlw	0	; case 0
  4066  0015AC  A4D8               	btfss	status,2,c
  4067  0015AE  D7F1               	goto	l809
  4068                           
  4069                           ; BSR set to: 0
  4070                           ; Switch size 1, requested type "space"
  4071                           ; Number of cases is 5, Range of values is 1 to 5
  4072                           ; switch strategies available:
  4073                           ; Name         Instructions Cycles
  4074                           ; simple_byte           16     9 (average)
  4075                           ;	Chosen strategy is simple_byte
  4076  0015B0  0100               	movlb	0	; () banked
  4077  0015B2  51B1               	movf	??_Loading& (0+255),w,b
  4078  0015B4  0A01               	xorlw	1	; case 1
  4079  0015B6  B4D8               	btfsc	status,2,c
  4080  0015B8  D7BA               	goto	l803
  4081  0015BA  0A03               	xorlw	3	; case 2
  4082  0015BC  B4D8               	btfsc	status,2,c
  4083  0015BE  D7C0               	goto	l805
  4084  0015C0  0A01               	xorlw	1	; case 3
  4085  0015C2  B4D8               	btfsc	status,2,c
  4086  0015C4  D7C7               	goto	l806
  4087  0015C6  0A07               	xorlw	7	; case 4
  4088  0015C8  B4D8               	btfsc	status,2,c
  4089  0015CA  D7CE               	goto	l807
  4090  0015CC  0A01               	xorlw	1	; case 5
  4091  0015CE  B4D8               	btfsc	status,2,c
  4092  0015D0  D7D5               	goto	l808
  4093  0015D2  D7DF               	goto	l809
  4094  0015D4                     l7469:
  4095  0015D4  0100               	movlb	0	; () banked
  4096  0015D6  4BBE               	infsnz	Loading@i_1168& (0+255),f,b
  4097  0015D8  2BBF               	incf	(Loading@i_1168+1)& (0+255),f,b
  4098  0015DA  D79D               	goto	l7439
  4099  0015DC                     l797:
  4100                           
  4101                           ;sort.c: 234: }
  4102                           ;sort.c: 235: }
  4103                           ;sort.c: 236: }
  4104                           ;sort.c: 237: LATAbits.LATA4 = 0;
  4105  0015DC  9889               	bcf	3977,4,c	;volatile
  4106                           
  4107                           ;sort.c: 238: j++;
  4108  0015DE  0100               	movlb	0	; () banked
  4109  0015E0  4BC0               	infsnz	Loading@j& (0+255),f,b
  4110  0015E2  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4111  0015E4                     l7475:
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;sort.c: 239: }
  4115                           ;sort.c: 241: if(!IR_signal){
  4116  0015E4  0100               	movlb	0	; () banked
  4117  0015E6  51E6               	movf	_IR_signal& (0+255),w,b
  4118  0015E8  0100               	movlb	0	; () banked
  4119  0015EA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4120  0015EC  A4D8               	btfss	status,2,c
  4121  0015EE  D016               	goto	l7487
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;sort.c: 242: _delay((unsigned long)((500)*(32000000/4000.0)));
  4125  0015F0  0E15               	movlw	21
  4126  0015F2  0100               	movlb	0	; () banked
  4127  0015F4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4128  0015F6  0E4B               	movlw	75
  4129  0015F8  0100               	movlb	0	; () banked
  4130  0015FA  6FB1               	movwf	??_Loading& (0+255),b
  4131  0015FC  0EBE               	movlw	190
  4132  0015FE                     u9137:
  4133  0015FE  2EE8               	decfsz	wreg,f,c
  4134  001600  D7FE               	bra	u9137
  4135  001602  2FB1               	decfsz	??_Loading& (0+255),f,b
  4136  001604  D7FC               	bra	u9137
  4137  001606  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4138  001608  D7FA               	bra	u9137
  4139  00160A  F000               	nop	
  4140                           
  4141                           ;sort.c: 243: readIR();
  4142  00160C  ECA8  F026         	call	_readIR	;wreg free
  4143                           
  4144                           ;sort.c: 244: if(IR_signal==1){
  4145  001610  0100               	movlb	0	; () banked
  4146  001612  05E6               	decf	_IR_signal& (0+255),w,b
  4147  001614  0100               	movlb	0	; () banked
  4148  001616  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4149  001618  A4D8               	btfss	status,2,c
  4150  00161A  D006               	goto	l813
  4151  00161C                     l7487:
  4152                           
  4153                           ; BSR set to: 0
  4154  00161C  0100               	movlb	0	; () banked
  4155  00161E  05E6               	decf	_IR_signal& (0+255),w,b
  4156  001620  0100               	movlb	0	; () banked
  4157  001622  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4158  001624  B4D8               	btfsc	status,2,c
  4159  001626  D721               	goto	l7413
  4160  001628                     l813:
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;sort.c: 249: }
  4164                           ;sort.c: 250: }
  4165                           ;sort.c: 251: }
  4166                           ;sort.c: 252: LATBbits.LATB2 = 0;
  4167  001628  948A               	bcf	3978,2,c	;volatile
  4168  00162A                     l7489:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;sort.c: 253: }
  4172                           ;sort.c: 254: f_can_coming_to_ID = 1;
  4173  00162A  0E00               	movlw	0
  4174  00162C  0101               	movlb	1	; () banked
  4175  00162E  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4176  001630  0E01               	movlw	1
  4177  001632  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4178                           
  4179                           ; BSR set to: 1
  4180                           
  4181                           ; BSR set to: 1
  4182  001634  0012               	return	
  4183  001636                     __end_of_Loading:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           postdec1	equ	0xFE5
  4194                           fsr1l	equ	0xFE1
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _initSortTimer *****************
  4198 ;; Defined at:
  4199 ;;		line 413 in file "sort.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;  i               2    8[BANK0 ] int 
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;Total ram usage:        5 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:   10
  4220 ;; This function calls:
  4221 ;;		_getRTC
  4222 ;; This function is called by:
  4223 ;;		_Loading
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text4
  4228  0044D6                     __ptext4:
  4229                           	opt stack 0
  4230  0044D6                     _initSortTimer:
  4231                           	opt stack 18
  4232                           
  4233                           ;sort.c: 415: getRTC();
  4234                           
  4235                           ;incstack = 0
  4236  0044D6  EC57  F023         	call	_getRTC	;wreg free
  4237                           
  4238                           ;sort.c: 416: for(int i = 0; i < 7; i++){
  4239  0044DA  0E00               	movlw	0
  4240  0044DC  0100               	movlb	0	; () banked
  4241  0044DE  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4242  0044E0  0E00               	movlw	0
  4243  0044E2  6F88               	movwf	initSortTimer@i& (0+255),b
  4244  0044E4                     l6885:
  4245                           
  4246                           ; BSR set to: 0
  4247  0044E4  0100               	movlb	0	; () banked
  4248  0044E6  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4249  0044E8  D008               	goto	l6889
  4250  0044EA  0100               	movlb	0	; () banked
  4251  0044EC  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4252  0044EE  E140               	bnz	l6895
  4253  0044F0  0E07               	movlw	7
  4254  0044F2  0100               	movlb	0	; () banked
  4255  0044F4  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4256  0044F6  B0D8               	btfsc	status,0,c
  4257  0044F8  D03B               	goto	l6895
  4258  0044FA                     l6889:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;sort.c: 417: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4262  0044FA  0E1C               	movlw	low _time
  4263  0044FC  0100               	movlb	0	; () banked
  4264  0044FE  2588               	addwf	initSortTimer@i& (0+255),w,b
  4265  004500  6ED9               	movwf	fsr2l,c
  4266  004502  0E01               	movlw	high _time
  4267  004504  0100               	movlb	0	; () banked
  4268  004506  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4269  004508  6EDA               	movwf	fsr2h,c
  4270  00450A  50DF               	movf	indf2,w,c
  4271  00450C  0100               	movlb	0	; () banked
  4272  00450E  6F85               	movwf	??_initSortTimer& (0+255),b
  4273  004510  0100               	movlb	0	; () banked
  4274  004512  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4275  004514  0E0F               	movlw	15
  4276  004516  1785               	andwf	??_initSortTimer& (0+255),f,b
  4277  004518  0E0F               	movlw	15
  4278  00451A  0100               	movlb	0	; () banked
  4279  00451C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4280  00451E  0100               	movlb	0	; () banked
  4281  004520  5185               	movf	??_initSortTimer& (0+255),w,b
  4282  004522  0D0A               	mullw	10
  4283  004524  0E1C               	movlw	low _time
  4284  004526  0100               	movlb	0	; () banked
  4285  004528  2588               	addwf	initSortTimer@i& (0+255),w,b
  4286  00452A  6ED9               	movwf	fsr2l,c
  4287  00452C  0E01               	movlw	high _time
  4288  00452E  0100               	movlb	0	; () banked
  4289  004530  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4290  004532  6EDA               	movwf	fsr2h,c
  4291  004534  50DF               	movf	indf2,w,c
  4292  004536  0B0F               	andlw	15
  4293  004538  0100               	movlb	0	; () banked
  4294  00453A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4295  00453C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4296  00453E  50F3               	movf	prodl,w,c
  4297  004540  0100               	movlb	0	; () banked
  4298  004542  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4299  004544  50F4               	movf	prodh,w,c
  4300  004546  0100               	movlb	0	; () banked
  4301  004548  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4302  00454A  90D8               	bcf	status,0,c
  4303  00454C  0100               	movlb	0	; () banked
  4304  00454E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4305  004550  6ED9               	movwf	fsr2l,c
  4306  004552  0100               	movlb	0	; () banked
  4307  004554  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4308  004556  6EDA               	movwf	fsr2h,c
  4309  004558  0E0E               	movlw	low _startTime
  4310  00455A  26D9               	addwf	fsr2l,f,c
  4311  00455C  0E01               	movlw	high _startTime
  4312  00455E  22DA               	addwfc	fsr2h,f,c
  4313  004560  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4314  004564  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4315                           
  4316                           ; BSR set to: 0
  4317  004568  0100               	movlb	0	; () banked
  4318  00456A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4319  00456C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4320  00456E  D7BA               	goto	l6885
  4321  004570                     l6895:
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;sort.c: 418: }
  4325                           ;sort.c: 420: T0CON = 0b00010111;
  4326  004570  0E17               	movlw	23
  4327  004572  6ED5               	movwf	4053,c	;volatile
  4328                           
  4329                           ;sort.c: 429: TMR0H = 0b10000101;
  4330  004574  0E85               	movlw	133
  4331  004576  6ED7               	movwf	4055,c	;volatile
  4332                           
  4333                           ;sort.c: 430: TMR0L = 0b11101110;
  4334  004578  0EEE               	movlw	238
  4335  00457A  6ED6               	movwf	4054,c	;volatile
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;sort.c: 431: TMR0ON = 1;
  4339  00457C  8ED5               	bsf	4053,7,c	;volatile
  4340                           
  4341                           ; BSR set to: 0
  4342  00457E  0012               	return		;funcret
  4343  004580                     __end_of_initSortTimer:
  4344                           	opt stack 0
  4345                           tblptru	equ	0xFF8
  4346                           tblptrh	equ	0xFF7
  4347                           tblptrl	equ	0xFF6
  4348                           tablat	equ	0xFF5
  4349                           prodh	equ	0xFF4
  4350                           prodl	equ	0xFF3
  4351                           postinc0	equ	0xFEE
  4352                           wreg	equ	0xFE8
  4353                           postdec1	equ	0xFE5
  4354                           fsr1l	equ	0xFE1
  4355                           indf2	equ	0xFDF
  4356                           postinc2	equ	0xFDE
  4357                           postdec2	equ	0xFDD
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function _initGlobalVars *****************
  4363 ;; Defined at:
  4364 ;;		line 381 in file "sort.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;		None
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;		None
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;Total ram usage:        0 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    7
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_Loading
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text5
  4393  00435E                     __ptext5:
  4394                           	opt stack 0
  4395  00435E                     _initGlobalVars:
  4396                           	opt stack 21
  4397                           
  4398                           ;sort.c: 383: first = 0;
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;incstack = 0
  4402  00435E  0E00               	movlw	0
  4403  004360  0101               	movlb	1	; () banked
  4404  004362  6F3A               	movwf	(_first+1)& (0+255),b
  4405  004364  0E00               	movlw	0
  4406  004366  6F39               	movwf	_first& (0+255),b
  4407                           
  4408                           ;sort.c: 386: f_loadingNewCan = 0;
  4409  004368  0E00               	movlw	0
  4410  00436A  0100               	movlb	0	; () banked
  4411  00436C  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4412  00436E  0E00               	movlw	0
  4413  004370  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4414                           
  4415                           ;sort.c: 387: f_lastCan = 0;
  4416  004372  0E00               	movlw	0
  4417  004374  0100               	movlb	0	; () banked
  4418  004376  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  4419  004378  0E00               	movlw	0
  4420  00437A  6FEE               	movwf	_f_lastCan& (0+255),b
  4421                           
  4422                           ;sort.c: 388: f_ID_receive = 1;
  4423  00437C  0E00               	movlw	0
  4424  00437E  0101               	movlb	1	; () banked
  4425  004380  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4426  004382  0E01               	movlw	1
  4427  004384  6F2F               	movwf	_f_ID_receive& (0+255),b
  4428                           
  4429                           ;sort.c: 389: f_can_coming_to_ID = 0;
  4430  004386  0E00               	movlw	0
  4431  004388  0101               	movlb	1	; () banked
  4432  00438A  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4433  00438C  0E00               	movlw	0
  4434  00438E  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4435                           
  4436                           ;sort.c: 390: f_can_coming_to_distribution = 0;
  4437  004390  0E00               	movlw	0
  4438  004392  0101               	movlb	1	; () banked
  4439  004394  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4440  004396  0E00               	movlw	0
  4441  004398  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4442                           
  4443                           ;sort.c: 391: f_can_distributed = 1;
  4444  00439A  0E00               	movlw	0
  4445  00439C  0101               	movlb	1	; () banked
  4446  00439E  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4447  0043A0  0E01               	movlw	1
  4448  0043A2  6F35               	movwf	_f_can_distributed& (0+255),b
  4449                           
  4450                           ;sort.c: 392: f_most_recent_sort_time = 0;
  4451  0043A4  0E00               	movlw	0
  4452  0043A6  0101               	movlb	1	; () banked
  4453  0043A8  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4454  0043AA  0E00               	movlw	0
  4455  0043AC  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4456                           
  4457                           ;sort.c: 395: count_total = 0;
  4458  0043AE  0E00               	movlw	0
  4459  0043B0  0100               	movlb	0	; () banked
  4460  0043B2  6FFF               	movwf	(_count_total+1)& (0+255),b
  4461  0043B4  0E00               	movlw	0
  4462  0043B6  6FFE               	movwf	_count_total& (0+255),b
  4463                           
  4464                           ;sort.c: 396: count_pop_no_tab = 0;
  4465  0043B8  0E00               	movlw	0
  4466  0043BA  0101               	movlb	1	; () banked
  4467  0043BC  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4468  0043BE  0E00               	movlw	0
  4469  0043C0  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4470                           
  4471                           ;sort.c: 397: count_pop_w_tab = 0;
  4472  0043C2  0E00               	movlw	0
  4473  0043C4  0101               	movlb	1	; () banked
  4474  0043C6  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4475  0043C8  0E00               	movlw	0
  4476  0043CA  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4477                           
  4478                           ;sort.c: 398: count_can_w_lab = 0;
  4479  0043CC  0E00               	movlw	0
  4480  0043CE  0101               	movlb	1	; () banked
  4481  0043D0  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4482  0043D2  0E00               	movlw	0
  4483  0043D4  6F25               	movwf	_count_can_w_lab& (0+255),b
  4484                           
  4485                           ;sort.c: 399: count_can_no_lab = 0;
  4486  0043D6  0E00               	movlw	0
  4487  0043D8  0101               	movlb	1	; () banked
  4488  0043DA  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4489  0043DC  0E00               	movlw	0
  4490  0043DE  6F23               	movwf	_count_can_no_lab& (0+255),b
  4491                           
  4492                           ;sort.c: 402: most_recent_sort_time = 999;
  4493  0043E0  0E03               	movlw	3
  4494  0043E2  6E6A               	movwf	_most_recent_sort_time+1,c
  4495  0043E4  0EE7               	movlw	231
  4496  0043E6  6E69               	movwf	_most_recent_sort_time,c
  4497                           
  4498                           ;sort.c: 405: servo_timer_counter = 0;
  4499  0043E8  0E00               	movlw	0
  4500  0043EA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4501  0043EC  0E00               	movlw	0
  4502  0043EE  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4503                           
  4504                           ;sort.c: 406: servo_timer_target = 9999;
  4505  0043F0  0E27               	movlw	39
  4506  0043F2  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4507  0043F4  0E0F               	movlw	15
  4508  0043F6  6E6F               	movwf	_servo_timer_target,c	;volatile
  4509                           
  4510                           ;sort.c: 407: timer2_counter = 0;
  4511  0043F8  0E00               	movlw	0
  4512  0043FA  6E74               	movwf	_timer2_counter+1,c	;volatile
  4513  0043FC  0E00               	movlw	0
  4514  0043FE  6E73               	movwf	_timer2_counter,c	;volatile
  4515                           
  4516                           ;sort.c: 408: f_arm_position = 2;
  4517  004400  0E00               	movlw	0
  4518  004402  6E62               	movwf	_f_arm_position+1,c	;volatile
  4519  004404  0E02               	movlw	2
  4520  004406  6E61               	movwf	_f_arm_position,c	;volatile
  4521                           
  4522                           ; BSR set to: 1
  4523                           ;sort.c: 409: pan_servo_state = -1;
  4524  004408  686B               	setf	_pan_servo_state,c	;volatile
  4525  00440A  686C               	setf	_pan_servo_state+1,c	;volatile
  4526                           
  4527                           ; BSR set to: 1
  4528                           ;sort.c: 410: tilt_servo_state = -1;
  4529  00440C  6871               	setf	_tilt_servo_state,c	;volatile
  4530  00440E  6872               	setf	_tilt_servo_state+1,c	;volatile
  4531                           
  4532                           ;sort.c: 411: f_panning_to_bin = 0;
  4533  004410  0E00               	movlw	0
  4534  004412  6E64               	movwf	_f_panning_to_bin+1,c	;volatile
  4535  004414  0E00               	movlw	0
  4536  004416  6E63               	movwf	_f_panning_to_bin,c	;volatile
  4537                           
  4538                           ; BSR set to: 1
  4539  004418  0012               	return		;funcret
  4540  00441A                     __end_of_initGlobalVars:
  4541                           	opt stack 0
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           prodh	equ	0xFF4
  4547                           prodl	equ	0xFF3
  4548                           postinc0	equ	0xFEE
  4549                           wreg	equ	0xFE8
  4550                           postdec1	equ	0xFE5
  4551                           fsr1l	equ	0xFE1
  4552                           indf2	equ	0xFDF
  4553                           postinc2	equ	0xFDE
  4554                           postdec2	equ	0xFDD
  4555                           fsr2h	equ	0xFDA
  4556                           fsr2l	equ	0xFD9
  4557                           status	equ	0xFD8
  4558                           
  4559 ;; *************** function _getMAG *****************
  4560 ;; Defined at:
  4561 ;;		line 507 in file "sort.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      void 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2, status,0, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;Total ram usage:        2 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    9
  4582 ;; This function calls:
  4583 ;;		_readMAG
  4584 ;; This function is called by:
  4585 ;;		_Loading
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           	psect	text6
  4590  004F4C                     __ptext6:
  4591                           	opt stack 0
  4592  004F4C                     _getMAG:
  4593                           	opt stack 19
  4594                           
  4595                           ;sort.c: 508: readMAG();
  4596                           
  4597                           ; BSR set to: 1
  4598                           ;incstack = 0
  4599  004F4C  ECCE  F026         	call	_readMAG	;wreg free
  4600                           
  4601                           ;sort.c: 510: if(MAG_signal==1){
  4602  004F50  0100               	movlb	0	; () banked
  4603  004F52  05E8               	decf	_MAG_signal& (0+255),w,b
  4604  004F54  0100               	movlb	0	; () banked
  4605  004F56  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4606  004F58  A4D8               	btfss	status,2,c
  4607  004F5A  0012               	return	
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;sort.c: 511: _delay((unsigned long)((500)*(32000000/4000.0)));
  4611  004F5C  0E15               	movlw	21
  4612  004F5E  0100               	movlb	0	; () banked
  4613  004F60  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4614  004F62  0E4B               	movlw	75
  4615  004F64  0100               	movlb	0	; () banked
  4616  004F66  6F86               	movwf	??_getMAG& (0+255),b
  4617  004F68  0EBE               	movlw	190
  4618  004F6A                     u9147:
  4619  004F6A  2EE8               	decfsz	wreg,f,c
  4620  004F6C  D7FE               	bra	u9147
  4621  004F6E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4622  004F70  D7FC               	bra	u9147
  4623  004F72  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4624  004F74  D7FA               	bra	u9147
  4625  004F76  F000               	nop	
  4626                           
  4627                           ;sort.c: 512: readMAG();
  4628  004F78  ECCE  F026         	call	_readMAG	;wreg free
  4629  004F7C  0012               	return	
  4630  004F7E                     __end_of_getMAG:
  4631                           	opt stack 0
  4632                           tblptru	equ	0xFF8
  4633                           tblptrh	equ	0xFF7
  4634                           tblptrl	equ	0xFF6
  4635                           tablat	equ	0xFF5
  4636                           prodh	equ	0xFF4
  4637                           prodl	equ	0xFF3
  4638                           postinc0	equ	0xFEE
  4639                           wreg	equ	0xFE8
  4640                           postdec1	equ	0xFE5
  4641                           fsr1l	equ	0xFE1
  4642                           indf2	equ	0xFDF
  4643                           postinc2	equ	0xFDE
  4644                           postdec2	equ	0xFDD
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649 ;; *************** function _getIR *****************
  4650 ;; Defined at:
  4651 ;;		line 491 in file "sort.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  i               2    7[BANK0 ] int 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      void 
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;Total ram usage:        3 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    9
  4672 ;; This function calls:
  4673 ;;		_readIR
  4674 ;; This function is called by:
  4675 ;;		_Loading
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text7
  4680  0048B6                     __ptext7:
  4681                           	opt stack 0
  4682  0048B6                     _getIR:
  4683                           	opt stack 19
  4684                           
  4685                           ;sort.c: 492: readIR();
  4686                           
  4687                           ;incstack = 0
  4688  0048B6  ECA8  F026         	call	_readIR	;wreg free
  4689                           
  4690                           ;sort.c: 493: for(int i = 0; i < 150; i++){
  4691  0048BA  0E00               	movlw	0
  4692  0048BC  0100               	movlb	0	; () banked
  4693  0048BE  6F88               	movwf	(getIR@i+1)& (0+255),b
  4694  0048C0  0E00               	movlw	0
  4695  0048C2  6F87               	movwf	getIR@i& (0+255),b
  4696  0048C4                     l6983:
  4697                           
  4698                           ; BSR set to: 0
  4699  0048C4  0100               	movlb	0	; () banked
  4700  0048C6  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4701  0048C8  D008               	goto	l6987
  4702  0048CA  0100               	movlb	0	; () banked
  4703  0048CC  5188               	movf	(getIR@i+1)& (0+255),w,b
  4704  0048CE  E11A               	bnz	l6999
  4705  0048D0  0E96               	movlw	150
  4706  0048D2  0100               	movlb	0	; () banked
  4707  0048D4  5D87               	subwf	getIR@i& (0+255),w,b
  4708  0048D6  B0D8               	btfsc	status,0,c
  4709  0048D8  D015               	goto	l6999
  4710  0048DA                     l6987:
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;sort.c: 494: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4714  0048DA  0E06               	movlw	6
  4715  0048DC  0100               	movlb	0	; () banked
  4716  0048DE  6F86               	movwf	??_getIR& (0+255),b
  4717  0048E0  0E30               	movlw	48
  4718  0048E2                     u9157:
  4719  0048E2  2EE8               	decfsz	wreg,f,c
  4720  0048E4  D7FE               	bra	u9157
  4721  0048E6  2F86               	decfsz	??_getIR& (0+255),f,b
  4722  0048E8  D7FC               	bra	u9157
  4723  0048EA  F000               	nop	
  4724                           
  4725                           ;sort.c: 495: readIR();
  4726  0048EC  ECA8  F026         	call	_readIR	;wreg free
  4727                           
  4728                           ;sort.c: 496: if(!IR_signal){
  4729  0048F0  0100               	movlb	0	; () banked
  4730  0048F2  51E6               	movf	_IR_signal& (0+255),w,b
  4731  0048F4  0100               	movlb	0	; () banked
  4732  0048F6  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4733  0048F8  B4D8               	btfsc	status,2,c
  4734  0048FA  D004               	goto	l6999
  4735                           
  4736                           ; BSR set to: 0
  4737                           
  4738                           ; BSR set to: 0
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;sort.c: 497: break;
  4742  0048FC  0100               	movlb	0	; () banked
  4743  0048FE  4B87               	infsnz	getIR@i& (0+255),f,b
  4744  004900  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4745  004902  D7E0               	goto	l6983
  4746  004904                     l6999:
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;sort.c: 498: }
  4750                           ;sort.c: 499: }
  4751                           ;sort.c: 500: if(IR_signal==1){
  4752  004904  0100               	movlb	0	; () banked
  4753  004906  05E6               	decf	_IR_signal& (0+255),w,b
  4754  004908  0100               	movlb	0	; () banked
  4755  00490A  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4756  00490C  A4D8               	btfss	status,2,c
  4757  00490E  D006               	goto	l7003
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;sort.c: 501: f_loadingNewCan = 1;
  4761  004910  0E00               	movlw	0
  4762  004912  0100               	movlb	0	; () banked
  4763  004914  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4764  004916  0E01               	movlw	1
  4765  004918  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4766                           
  4767                           ;sort.c: 502: }
  4768  00491A  0012               	return	
  4769  00491C                     l7003:
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;sort.c: 503: else{
  4773                           ;sort.c: 504: f_loadingNewCan = 0;
  4774  00491C  0E00               	movlw	0
  4775  00491E  0100               	movlb	0	; () banked
  4776  004920  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4777  004922  0E00               	movlw	0
  4778  004924  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4779  004926  0012               	return	
  4780  004928                     __end_of_getIR:
  4781                           	opt stack 0
  4782                           tblptru	equ	0xFF8
  4783                           tblptrh	equ	0xFF7
  4784                           tblptrl	equ	0xFF6
  4785                           tablat	equ	0xFF5
  4786                           prodh	equ	0xFF4
  4787                           prodl	equ	0xFF3
  4788                           postinc0	equ	0xFEE
  4789                           wreg	equ	0xFE8
  4790                           postdec1	equ	0xFE5
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function _readIR *****************
  4800 ;; Defined at:
  4801 ;;		line 23 in file "ADCFunctionality.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  res             2    4[BANK0 ] int 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, status,2, status,0, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;Total ram usage:        4 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    8
  4822 ;; This function calls:
  4823 ;;		_readADC
  4824 ;; This function is called by:
  4825 ;;		_Loading
  4826 ;;		_getIR
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text8
  4831  004D50                     __ptext8:
  4832                           	opt stack 0
  4833  004D50                     _readIR:
  4834                           	opt stack 20
  4835                           
  4836                           ;ADCFunctionality.c: 24: readADC(0);
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;incstack = 0
  4840  004D50  0E00               	movlw	0
  4841  004D52  EC0C  F029         	call	_readADC
  4842                           
  4843                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4844  004D56  50C3               	movf	4035,w,c	;volatile
  4845  004D58  CFC4 F082          	movff	4036,??_readIR	;volatile
  4846  004D5C  0100               	movlb	0	; () banked
  4847  004D5E  6B83               	clrf	(??_readIR+1)& (0+255),b
  4848  004D60  C082  F083         	movff	??_readIR,??_readIR+1
  4849  004D64  0100               	movlb	0	; () banked
  4850  004D66  6B82               	clrf	??_readIR& (0+255),b
  4851  004D68  0100               	movlb	0	; () banked
  4852  004D6A  1182               	iorwf	??_readIR& (0+255),w,b
  4853  004D6C  0100               	movlb	0	; () banked
  4854  004D6E  6F84               	movwf	readIR@res& (0+255),b
  4855  004D70  0100               	movlb	0	; () banked
  4856  004D72  5183               	movf	(??_readIR+1)& (0+255),w,b
  4857  004D74  0100               	movlb	0	; () banked
  4858  004D76  6F85               	movwf	(readIR@res+1)& (0+255),b
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4862  004D78  0100               	movlb	0	; () banked
  4863  004D7A  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4864  004D7C  D00A               	goto	u4690
  4865  004D7E  0E21               	movlw	33
  4866  004D80  0100               	movlb	0	; () banked
  4867  004D82  5D84               	subwf	readIR@res& (0+255),w,b
  4868  004D84  0E03               	movlw	3
  4869  004D86  0100               	movlb	0	; () banked
  4870  004D88  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4871  004D8A  A0D8               	btfss	status,0,c
  4872  004D8C  D002               	goto	u4690
  4873  004D8E  0E01               	movlw	1
  4874  004D90  D001               	goto	u4700
  4875  004D92                     u4690:
  4876  004D92  0E00               	movlw	0
  4877  004D94                     u4700:
  4878  004D94  0100               	movlb	0	; () banked
  4879  004D96  6FE6               	movwf	_IR_signal& (0+255),b
  4880  004D98  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4881                           
  4882                           ; BSR set to: 0
  4883  004D9A  0012               	return		;funcret
  4884  004D9C                     __end_of_readIR:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           postinc0	equ	0xFEE
  4893                           wreg	equ	0xFE8
  4894                           postdec1	equ	0xFE5
  4895                           fsr1l	equ	0xFE1
  4896                           indf2	equ	0xFDF
  4897                           postinc2	equ	0xFDE
  4898                           postdec2	equ	0xFDD
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903 ;; *************** function _ID *****************
  4904 ;; Defined at:
  4905 ;;		line 258 in file "sort.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;		None
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;  i               2    8[BANK0 ] int 
  4910 ;;  i               2    6[BANK0 ] int 
  4911 ;;  i               2    4[BANK0 ] int 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  1    wreg      void 
  4914 ;; Registers used:
  4915 ;;		wreg, status,2, status,0, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;Total ram usage:        8 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    8
  4928 ;; This function calls:
  4929 ;;		_delay_ms
  4930 ;; This function is called by:
  4931 ;;		_sort
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text9
  4936  002C90                     __ptext9:
  4937                           	opt stack 0
  4938  002C90                     _ID:
  4939                           	opt stack 21
  4940                           
  4941                           ;sort.c: 259: if(f_can_coming_to_ID){
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;incstack = 0
  4945  002C90  0101               	movlb	1	; () banked
  4946  002C92  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4947  002C94  0101               	movlb	1	; () banked
  4948  002C96  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4949  002C98  B4D8               	btfsc	status,2,c
  4950  002C9A  0012               	return	
  4951                           
  4952                           ; BSR set to: 1
  4953                           ;sort.c: 261: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4954  002C9C  0E29               	movlw	41
  4955  002C9E  0100               	movlb	0	; () banked
  4956  002CA0  6F83               	movwf	(??_ID+1)& (0+255),b
  4957  002CA2  0E96               	movlw	150
  4958  002CA4  0100               	movlb	0	; () banked
  4959  002CA6  6F82               	movwf	??_ID& (0+255),b
  4960  002CA8  0E7F               	movlw	127
  4961  002CAA                     u9167:
  4962  002CAA  2EE8               	decfsz	wreg,f,c
  4963  002CAC  D7FE               	bra	u9167
  4964  002CAE  2F82               	decfsz	??_ID& (0+255),f,b
  4965  002CB0  D7FC               	bra	u9167
  4966  002CB2  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4967  002CB4  D7FA               	bra	u9167
  4968                           
  4969                           ;sort.c: 263: LATAbits.LATA3 = 1;
  4970  002CB6  8689               	bsf	3977,3,c	;volatile
  4971                           
  4972                           ;sort.c: 264: _delay((unsigned long)((600)*(32000000/4000.0)));
  4973  002CB8  0E19               	movlw	25
  4974  002CBA  0100               	movlb	0	; () banked
  4975  002CBC  6F83               	movwf	(??_ID+1)& (0+255),b
  4976  002CBE  0E5A               	movlw	90
  4977  002CC0  0100               	movlb	0	; () banked
  4978  002CC2  6F82               	movwf	??_ID& (0+255),b
  4979  002CC4  0EB1               	movlw	177
  4980  002CC6                     u9177:
  4981  002CC6  2EE8               	decfsz	wreg,f,c
  4982  002CC8  D7FE               	bra	u9177
  4983  002CCA  2F82               	decfsz	??_ID& (0+255),f,b
  4984  002CCC  D7FC               	bra	u9177
  4985  002CCE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4986  002CD0  D7FA               	bra	u9177
  4987  002CD2  D000               	nop2	
  4988                           
  4989                           ;sort.c: 265: sensor_outputs[1] = PORTAbits.RA2;
  4990  002CD4  A480               	btfss	3968,2,c	;volatile
  4991  002CD6  D004               	goto	u6060
  4992  002CD8  0100               	movlb	0	; () banked
  4993  002CDA  6B82               	clrf	??_ID& (0+255),b
  4994  002CDC  2B82               	incf	??_ID& (0+255),f,b
  4995  002CDE  D002               	goto	u6068
  4996  002CE0                     u6060:
  4997  002CE0  0100               	movlb	0	; () banked
  4998  002CE2  6B82               	clrf	??_ID& (0+255),b
  4999  002CE4                     u6068:
  5000  002CE4  0100               	movlb	0	; () banked
  5001  002CE6  5182               	movf	??_ID& (0+255),w,b
  5002  002CE8  0100               	movlb	0	; () banked
  5003  002CEA  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5004  002CEC  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;sort.c: 266: LATAbits.LATA3 = 0;
  5008  002CEE  9689               	bcf	3977,3,c	;volatile
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;sort.c: 268: _delay((unsigned long)((200)*(32000000/4000.0)));
  5012  002CF0  0E09               	movlw	9
  5013  002CF2  0100               	movlb	0	; () banked
  5014  002CF4  6F83               	movwf	(??_ID+1)& (0+255),b
  5015  002CF6  0E1E               	movlw	30
  5016  002CF8  0100               	movlb	0	; () banked
  5017  002CFA  6F82               	movwf	??_ID& (0+255),b
  5018  002CFC  0EE4               	movlw	228
  5019  002CFE                     u9187:
  5020  002CFE  2EE8               	decfsz	wreg,f,c
  5021  002D00  D7FE               	bra	u9187
  5022  002D02  2F82               	decfsz	??_ID& (0+255),f,b
  5023  002D04  D7FC               	bra	u9187
  5024  002D06  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5025  002D08  D7FA               	bra	u9187
  5026  002D0A  F000               	nop	
  5027                           
  5028                           ;sort.c: 269: LATAbits.LATA3 = 1;
  5029  002D0C  8689               	bsf	3977,3,c	;volatile
  5030                           
  5031                           ;sort.c: 270: _delay((unsigned long)((600)*(32000000/4000.0)));
  5032  002D0E  0E19               	movlw	25
  5033  002D10  0100               	movlb	0	; () banked
  5034  002D12  6F83               	movwf	(??_ID+1)& (0+255),b
  5035  002D14  0E5A               	movlw	90
  5036  002D16  0100               	movlb	0	; () banked
  5037  002D18  6F82               	movwf	??_ID& (0+255),b
  5038  002D1A  0EB1               	movlw	177
  5039  002D1C                     u9197:
  5040  002D1C  2EE8               	decfsz	wreg,f,c
  5041  002D1E  D7FE               	bra	u9197
  5042  002D20  2F82               	decfsz	??_ID& (0+255),f,b
  5043  002D22  D7FC               	bra	u9197
  5044  002D24  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5045  002D26  D7FA               	bra	u9197
  5046  002D28  D000               	nop2	
  5047                           
  5048                           ;sort.c: 271: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  5049  002D2A  A480               	btfss	3968,2,c	;volatile
  5050  002D2C  D004               	goto	u6070
  5051  002D2E  0100               	movlb	0	; () banked
  5052  002D30  6B82               	clrf	??_ID& (0+255),b
  5053  002D32  2B82               	incf	??_ID& (0+255),f,b
  5054  002D34  D002               	goto	u6078
  5055  002D36                     u6070:
  5056  002D36  0100               	movlb	0	; () banked
  5057  002D38  6B82               	clrf	??_ID& (0+255),b
  5058  002D3A                     u6078:
  5059  002D3A  0100               	movlb	0	; () banked
  5060  002D3C  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5061  002D3E  0100               	movlb	0	; () banked
  5062  002D40  1182               	iorwf	??_ID& (0+255),w,b
  5063  002D42  0100               	movlb	0	; () banked
  5064  002D44  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5065  002D46  0100               	movlb	0	; () banked
  5066  002D48  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5067  002D4A  0100               	movlb	0	; () banked
  5068  002D4C  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;sort.c: 279: if(!sensor_outputs[0]){
  5072  002D4E  0100               	movlb	0	; () banked
  5073  002D50  51E2               	movf	_sensor_outputs& (0+255),w,b
  5074  002D52  0100               	movlb	0	; () banked
  5075  002D54  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5076  002D56  A4D8               	btfss	status,2,c
  5077  002D58  D016               	goto	l7527
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;sort.c: 280: if(!sensor_outputs[1]){
  5081  002D5A  0100               	movlb	0	; () banked
  5082  002D5C  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5083  002D5E  0100               	movlb	0	; () banked
  5084  002D60  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5085  002D62  A4D8               	btfss	status,2,c
  5086  002D64  D008               	goto	l7523
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;sort.c: 281: count_pop_no_tab++;
  5090  002D66  0101               	movlb	1	; () banked
  5091  002D68  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5092  002D6A  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5093                           
  5094                           ; BSR set to: 1
  5095                           ;sort.c: 282: cur_can = 0;
  5096  002D6C  0E00               	movlw	0
  5097  002D6E  0101               	movlb	1	; () banked
  5098  002D70  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5099  002D72  0E00               	movlw	0
  5100  002D74  D007               	goto	L4
  5101  002D76                     l7523:
  5102                           
  5103                           ;sort.c: 284: else{
  5104                           ;sort.c: 285: count_pop_w_tab++;
  5105  002D76  0101               	movlb	1	; () banked
  5106  002D78  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5107  002D7A  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5108                           
  5109                           ; BSR set to: 1
  5110                           ;sort.c: 286: cur_can = 1;
  5111  002D7C  0E00               	movlw	0
  5112  002D7E  0101               	movlb	1	; () banked
  5113  002D80  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5114  002D82  0E01               	movlw	1
  5115  002D84                     L4:
  5116  002D84  6F2B               	movwf	_cur_can& (0+255),b
  5117  002D86                     l7527:
  5118                           
  5119                           ;sort.c: 287: }
  5120                           ;sort.c: 288: }
  5121                           ;sort.c: 289: if(sensor_outputs[0]){
  5122  002D86  0100               	movlb	0	; () banked
  5123  002D88  51E2               	movf	_sensor_outputs& (0+255),w,b
  5124  002D8A  0100               	movlb	0	; () banked
  5125  002D8C  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5126  002D8E  B4D8               	btfsc	status,2,c
  5127  002D90  D016               	goto	l7539
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;sort.c: 290: if(!sensor_outputs[1]){
  5131  002D92  0100               	movlb	0	; () banked
  5132  002D94  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5133  002D96  0100               	movlb	0	; () banked
  5134  002D98  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5135  002D9A  A4D8               	btfss	status,2,c
  5136  002D9C  D008               	goto	l7535
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;sort.c: 291: count_can_w_lab++;
  5140  002D9E  0101               	movlb	1	; () banked
  5141  002DA0  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5142  002DA2  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5143                           
  5144                           ; BSR set to: 1
  5145                           ;sort.c: 292: cur_can = 2;
  5146  002DA4  0E00               	movlw	0
  5147  002DA6  0101               	movlb	1	; () banked
  5148  002DA8  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5149  002DAA  0E02               	movlw	2
  5150  002DAC  D007               	goto	L5
  5151  002DAE                     l7535:
  5152                           
  5153                           ;sort.c: 294: else{
  5154                           ;sort.c: 295: count_can_no_lab++;
  5155  002DAE  0101               	movlb	1	; () banked
  5156  002DB0  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5157  002DB2  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5158                           
  5159                           ; BSR set to: 1
  5160                           ;sort.c: 296: cur_can = 3;
  5161  002DB4  0E00               	movlw	0
  5162  002DB6  0101               	movlb	1	; () banked
  5163  002DB8  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5164  002DBA  0E03               	movlw	3
  5165  002DBC                     L5:
  5166  002DBC  6F2B               	movwf	_cur_can& (0+255),b
  5167  002DBE                     l7539:
  5168                           
  5169                           ;sort.c: 297: }
  5170                           ;sort.c: 298: }
  5171                           ;sort.c: 299: LATAbits.LATA3 = 0;
  5172  002DBE  9689               	bcf	3977,3,c	;volatile
  5173  002DC0                     l7541:
  5174  002DC0  0101               	movlb	1	; () banked
  5175  002DC2  5135               	movf	_f_can_distributed& (0+255),w,b
  5176  002DC4  0101               	movlb	1	; () banked
  5177  002DC6  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5178  002DC8  B4D8               	btfsc	status,2,c
  5179  002DCA  D7FA               	goto	l7541
  5180                           
  5181                           ; BSR set to: 1
  5182                           ;sort.c: 303: if(sensor_outputs[0]){
  5183                           
  5184                           ; BSR set to: 1
  5185  002DCC  0100               	movlb	0	; () banked
  5186  002DCE  51E2               	movf	_sensor_outputs& (0+255),w,b
  5187  002DD0  0100               	movlb	0	; () banked
  5188  002DD2  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5189  002DD4  B4D8               	btfsc	status,2,c
  5190  002DD6  D020               	goto	l7559
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;sort.c: 305: LATAbits.LATA3 = 1;
  5194  002DD8  8689               	bsf	3977,3,c	;volatile
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;sort.c: 308: for(int i=0;i<10000;i++)
  5198  002DDA  0E00               	movlw	0
  5199  002DDC  0100               	movlb	0	; () banked
  5200  002DDE  6F85               	movwf	(ID@i+1)& (0+255),b
  5201  002DE0  0E00               	movlw	0
  5202  002DE2  6F84               	movwf	ID@i& (0+255),b
  5203  002DE4                     l7549:
  5204                           
  5205                           ; BSR set to: 0
  5206  002DE4  0100               	movlb	0	; () banked
  5207  002DE6  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5208  002DE8  D008               	goto	l827
  5209  002DEA  0E10               	movlw	16
  5210  002DEC  0100               	movlb	0	; () banked
  5211  002DEE  5D84               	subwf	ID@i& (0+255),w,b
  5212  002DF0  0E27               	movlw	39
  5213  002DF2  0100               	movlb	0	; () banked
  5214  002DF4  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5215  002DF6  B0D8               	btfsc	status,0,c
  5216  002DF8  D00D               	goto	l828
  5217  002DFA                     l827:
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;sort.c: 309: {
  5221                           ;sort.c: 310: LATCbits.LATC0 = 1;
  5222  002DFA  808B               	bsf	3979,0,c	;volatile
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;sort.c: 311: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5226  002DFC  0E1A               	movlw	26
  5227  002DFE                     u9207:
  5228  002DFE  2EE8               	decfsz	wreg,f,c
  5229  002E00  D7FE               	bra	u9207
  5230  002E02  D000               	nop2	
  5231                           
  5232                           ;sort.c: 312: LATCbits.LATC0 = 0;
  5233  002E04  908B               	bcf	3979,0,c	;volatile
  5234                           
  5235                           ;sort.c: 313: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5236  002E06  0EF0               	movlw	240
  5237  002E08                     u9217:
  5238  002E08  2EE8               	decfsz	wreg,f,c
  5239  002E0A  D7FE               	bra	u9217
  5240  002E0C  0100               	movlb	0	; () banked
  5241  002E0E  4B84               	infsnz	ID@i& (0+255),f,b
  5242  002E10  2B85               	incf	(ID@i+1)& (0+255),f,b
  5243  002E12  D7E8               	goto	l7549
  5244  002E14                     l828:
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;sort.c: 314: }
  5248                           ;sort.c: 316: LATAbits.LATA3 = 0;
  5249  002E14  9689               	bcf	3977,3,c	;volatile
  5250                           
  5251                           ;sort.c: 319: }
  5252  002E16  D01D               	goto	l829
  5253  002E18                     l7559:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;sort.c: 320: else{
  5257                           ;sort.c: 322: for(int i=0;i<10000;i++)
  5258  002E18  0E00               	movlw	0
  5259  002E1A  0100               	movlb	0	; () banked
  5260  002E1C  6F87               	movwf	(ID@i_1179+1)& (0+255),b
  5261  002E1E  0E00               	movlw	0
  5262  002E20  6F86               	movwf	ID@i_1179& (0+255),b
  5263  002E22                     l7561:
  5264                           
  5265                           ; BSR set to: 0
  5266  002E22  0100               	movlb	0	; () banked
  5267  002E24  BF87               	btfsc	(ID@i_1179+1)& (0+255),7,b
  5268  002E26  D008               	goto	l830
  5269  002E28  0E10               	movlw	16
  5270  002E2A  0100               	movlb	0	; () banked
  5271  002E2C  5D86               	subwf	ID@i_1179& (0+255),w,b
  5272  002E2E  0E27               	movlw	39
  5273  002E30  0100               	movlb	0	; () banked
  5274  002E32  5987               	subwfb	(ID@i_1179+1)& (0+255),w,b
  5275  002E34  B0D8               	btfsc	status,0,c
  5276  002E36  D00D               	goto	l829
  5277  002E38                     l830:
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;sort.c: 323: {
  5281                           ;sort.c: 324: LATCbits.LATC0 = 1;
  5282  002E38  808B               	bsf	3979,0,c	;volatile
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;sort.c: 325: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5286  002E3A  0E1A               	movlw	26
  5287  002E3C                     u9227:
  5288  002E3C  2EE8               	decfsz	wreg,f,c
  5289  002E3E  D7FE               	bra	u9227
  5290  002E40  D000               	nop2	
  5291                           
  5292                           ;sort.c: 326: LATCbits.LATC0 = 0;
  5293  002E42  908B               	bcf	3979,0,c	;volatile
  5294                           
  5295                           ;sort.c: 327: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5296  002E44  0EF0               	movlw	240
  5297  002E46                     u9237:
  5298  002E46  2EE8               	decfsz	wreg,f,c
  5299  002E48  D7FE               	bra	u9237
  5300  002E4A  0100               	movlb	0	; () banked
  5301  002E4C  4B86               	infsnz	ID@i_1179& (0+255),f,b
  5302  002E4E  2B87               	incf	(ID@i_1179+1)& (0+255),f,b
  5303  002E50  D7E8               	goto	l7561
  5304  002E52                     l829:
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;sort.c: 328: }
  5308                           ;sort.c: 329: }
  5309                           ;sort.c: 331: LATCbits.LATC0 = 0;
  5310  002E52  908B               	bcf	3979,0,c	;volatile
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;sort.c: 333: f_can_coming_to_distribution = 1;
  5314  002E54  0E00               	movlw	0
  5315  002E56  0101               	movlb	1	; () banked
  5316  002E58  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5317  002E5A  0E01               	movlw	1
  5318  002E5C  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5319                           
  5320                           ; BSR set to: 1
  5321                           ;sort.c: 334: _delay((unsigned long)((750)*(32000000/4000.0)));
  5322  002E5E  0E1F               	movlw	31
  5323  002E60  0100               	movlb	0	; () banked
  5324  002E62  6F83               	movwf	(??_ID+1)& (0+255),b
  5325  002E64  0E71               	movlw	113
  5326  002E66  0100               	movlb	0	; () banked
  5327  002E68  6F82               	movwf	??_ID& (0+255),b
  5328  002E6A  0E1E               	movlw	30
  5329  002E6C                     u9247:
  5330  002E6C  2EE8               	decfsz	wreg,f,c
  5331  002E6E  D7FE               	bra	u9247
  5332  002E70  2F82               	decfsz	??_ID& (0+255),f,b
  5333  002E72  D7FC               	bra	u9247
  5334  002E74  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5335  002E76  D7FA               	bra	u9247
  5336  002E78  F000               	nop	
  5337                           
  5338                           ;sort.c: 335: LATCbits.LATC0 = 1;
  5339  002E7A  808B               	bsf	3979,0,c	;volatile
  5340                           
  5341                           ;sort.c: 338: if(!f_lastCan){
  5342  002E7C  0100               	movlb	0	; () banked
  5343  002E7E  51EE               	movf	_f_lastCan& (0+255),w,b
  5344  002E80  0100               	movlb	0	; () banked
  5345  002E82  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5346  002E84  A4D8               	btfss	status,2,c
  5347  002E86  D032               	goto	l7593
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;sort.c: 339: for(int i=0; i<46; i++){
  5351  002E88  0E00               	movlw	0
  5352  002E8A  0100               	movlb	0	; () banked
  5353  002E8C  6F89               	movwf	(ID@i_1180+1)& (0+255),b
  5354  002E8E  0E00               	movlw	0
  5355  002E90  6F88               	movwf	ID@i_1180& (0+255),b
  5356                           
  5357                           ; BSR set to: 0
  5358  002E92  0100               	movlb	0	; () banked
  5359  002E94  BF89               	btfsc	(ID@i_1180+1)& (0+255),7,b
  5360  002E96  D008               	goto	l7585
  5361  002E98  0100               	movlb	0	; () banked
  5362  002E9A  5189               	movf	(ID@i_1180+1)& (0+255),w,b
  5363  002E9C  E126               	bnz	l834
  5364  002E9E  0E2E               	movlw	46
  5365  002EA0  0100               	movlb	0	; () banked
  5366  002EA2  5D88               	subwf	ID@i_1180& (0+255),w,b
  5367  002EA4  B0D8               	btfsc	status,0,c
  5368  002EA6  D021               	goto	l834
  5369  002EA8                     l7585:
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;sort.c: 340: LATBbits.LATB2 = !LATBbits.LATB2;
  5373  002EA8  B48A               	btfsc	3978,2,c	;volatile
  5374  002EAA  D004               	goto	u6200
  5375  002EAC  0100               	movlb	0	; () banked
  5376  002EAE  6B82               	clrf	??_ID& (0+255),b
  5377  002EB0  2B82               	incf	??_ID& (0+255),f,b
  5378  002EB2  D002               	goto	u6218
  5379  002EB4                     u6200:
  5380  002EB4  0100               	movlb	0	; () banked
  5381  002EB6  6B82               	clrf	??_ID& (0+255),b
  5382  002EB8                     u6218:
  5383  002EB8  0100               	movlb	0	; () banked
  5384  002EBA  4782               	rlncf	??_ID& (0+255),f,b
  5385  002EBC  4782               	rlncf	??_ID& (0+255),f,b
  5386  002EBE  508A               	movf	3978,w,c	;volatile
  5387  002EC0  0100               	movlb	0	; () banked
  5388  002EC2  1982               	xorwf	??_ID& (0+255),w,b
  5389  002EC4  0BFB               	andlw	-5
  5390  002EC6  1982               	xorwf	??_ID& (0+255),w,b
  5391  002EC8  6E8A               	movwf	3978,c	;volatile
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;sort.c: 341: delay_ms(45-i);
  5395  002ECA  0100               	movlb	0	; () banked
  5396  002ECC  5188               	movf	ID@i_1180& (0+255),w,b
  5397  002ECE  0800               	sublw	0
  5398  002ED0  0F2D               	addlw	45
  5399  002ED2  EC37  F029         	call	_delay_ms
  5400  002ED6  0100               	movlb	0	; () banked
  5401  002ED8  4B88               	infsnz	ID@i_1180& (0+255),f,b
  5402  002EDA  2B89               	incf	(ID@i_1180+1)& (0+255),f,b
  5403                           
  5404                           ; BSR set to: 0
  5405  002EDC  0100               	movlb	0	; () banked
  5406  002EDE  BF89               	btfsc	(ID@i_1180+1)& (0+255),7,b
  5407  002EE0  D7E3               	goto	l7585
  5408  002EE2  0100               	movlb	0	; () banked
  5409  002EE4  5189               	movf	(ID@i_1180+1)& (0+255),w,b
  5410  002EE6  E101               	bnz	u6220
  5411  002EE8  D7DA               	goto	L6
  5412  002EEA                     u6220:
  5413  002EEA                     l834:
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;sort.c: 342: }
  5417                           ;sort.c: 343: LATBbits.LATB2 = 1;
  5418  002EEA  848A               	bsf	3978,2,c	;volatile
  5419  002EEC                     l7593:
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;sort.c: 344: }
  5423                           ;sort.c: 346: f_can_coming_to_ID = 0;
  5424  002EEC  0E00               	movlw	0
  5425  002EEE  0101               	movlb	1	; () banked
  5426  002EF0  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5427  002EF2  0E00               	movlw	0
  5428  002EF4  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5429  002EF6  0012               	return	
  5430  002EF8                     __end_of_ID:
  5431                           	opt stack 0
  5432                           tblptru	equ	0xFF8
  5433                           tblptrh	equ	0xFF7
  5434                           tblptrl	equ	0xFF6
  5435                           tablat	equ	0xFF5
  5436                           prodh	equ	0xFF4
  5437                           prodl	equ	0xFF3
  5438                           postinc0	equ	0xFEE
  5439                           wreg	equ	0xFE8
  5440                           postdec1	equ	0xFE5
  5441                           fsr1l	equ	0xFE1
  5442                           indf2	equ	0xFDF
  5443                           postinc2	equ	0xFDE
  5444                           postdec2	equ	0xFDD
  5445                           fsr2h	equ	0xFDA
  5446                           fsr2l	equ	0xFD9
  5447                           status	equ	0xFD8
  5448                           
  5449 ;; *************** function _delay_ms *****************
  5450 ;; Defined at:
  5451 ;;		line 601 in file "sort.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  milliseconds    1    wreg     unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;                  1    wreg      void 
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;Total ram usage:        2 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    7
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_Loading
  5476 ;;		_ID
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text10
  5481  00526E                     __ptext10:
  5482                           	opt stack 0
  5483  00526E                     _delay_ms:
  5484                           	opt stack 21
  5485                           
  5486                           ; BSR set to: 1
  5487                           ;incstack = 0
  5488                           ;delay_ms@milliseconds stored from wreg
  5489  00526E  0100               	movlb	0	; () banked
  5490  005270  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5491                           
  5492                           ;sort.c: 602: while(milliseconds > 0)
  5493  005272  D00B               	goto	l6957
  5494  005274                     l6953:
  5495                           
  5496                           ;sort.c: 603: {
  5497                           ;sort.c: 604: milliseconds--;
  5498  005274  0100               	movlb	0	; () banked
  5499  005276  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;sort.c: 605: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5503  005278  0E0B               	movlw	11
  5504  00527A  0100               	movlb	0	; () banked
  5505  00527C  6F80               	movwf	??_delay_ms& (0+255),b
  5506  00527E  0E47               	movlw	71
  5507  005280                     u9257:
  5508  005280  2EE8               	decfsz	wreg,f,c
  5509  005282  D7FE               	bra	u9257
  5510  005284  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5511  005286  D7FC               	bra	u9257
  5512  005288  D000               	nop2	
  5513  00528A                     l6957:
  5514  00528A  0100               	movlb	0	; () banked
  5515  00528C  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5516  00528E  0100               	movlb	0	; () banked
  5517  005290  B4D8               	btfsc	status,2,c
  5518  005292  0012               	return	
  5519  005294  D7EF               	goto	l6953
  5520  005296                     __end_of_delay_ms:
  5521                           	opt stack 0
  5522                           tblptru	equ	0xFF8
  5523                           tblptrh	equ	0xFF7
  5524                           tblptrl	equ	0xFF6
  5525                           tablat	equ	0xFF5
  5526                           prodh	equ	0xFF4
  5527                           prodl	equ	0xFF3
  5528                           postinc0	equ	0xFEE
  5529                           wreg	equ	0xFE8
  5530                           postdec1	equ	0xFE5
  5531                           fsr1l	equ	0xFE1
  5532                           indf2	equ	0xFDF
  5533                           postinc2	equ	0xFDE
  5534                           postdec2	equ	0xFDD
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function _Distribution *****************
  5540 ;; Defined at:
  5541 ;;		line 349 in file "sort.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;		None
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;Total ram usage:        2 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:    8
  5562 ;; This function calls:
  5563 ;;		_updateServoPosition
  5564 ;; This function is called by:
  5565 ;;		_sort
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text11
  5570  004024                     __ptext11:
  5571                           	opt stack 0
  5572  004024                     _Distribution:
  5573                           	opt stack 21
  5574                           
  5575                           ;sort.c: 350: if(f_can_coming_to_distribution){
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;incstack = 0
  5579  004024  0101               	movlb	1	; () banked
  5580  004026  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5581  004028  0101               	movlb	1	; () banked
  5582  00402A  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5583  00402C  B4D8               	btfsc	status,2,c
  5584  00402E  0012               	return	
  5585                           
  5586                           ; BSR set to: 1
  5587                           ;sort.c: 351: f_can_distributed = 0;
  5588  004030  0E00               	movlw	0
  5589  004032  0101               	movlb	1	; () banked
  5590  004034  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5591  004036  0E00               	movlw	0
  5592  004038  6F35               	movwf	_f_can_distributed& (0+255),b
  5593                           
  5594                           ;sort.c: 358: switch(cur_can){
  5595  00403A  D034               	goto	l7609
  5596  00403C                     l7599:
  5597                           
  5598                           ;sort.c: 360: updateServoPosition(500, 1);
  5599  00403C  0E01               	movlw	1
  5600  00403E  0100               	movlb	0	; () banked
  5601  004040  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5602  004042  0EF4               	movlw	244
  5603  004044  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5604  004046  0E00               	movlw	0
  5605  004048  0100               	movlb	0	; () banked
  5606  00404A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5607  00404C  0E01               	movlw	1
  5608  00404E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5609  004050  EC9A  F023         	call	_updateServoPosition	;wreg free
  5610                           
  5611                           ;sort.c: 361: break;
  5612  004054  D03E               	goto	l7611
  5613  004056                     l7601:
  5614                           
  5615                           ;sort.c: 363: updateServoPosition(850, 1);
  5616  004056  0E03               	movlw	3
  5617  004058  0100               	movlb	0	; () banked
  5618  00405A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5619  00405C  0E52               	movlw	82
  5620  00405E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5621  004060  0E00               	movlw	0
  5622  004062  0100               	movlb	0	; () banked
  5623  004064  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5624  004066  0E01               	movlw	1
  5625  004068  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5626  00406A  EC9A  F023         	call	_updateServoPosition	;wreg free
  5627                           
  5628                           ;sort.c: 364: break;
  5629  00406E  D031               	goto	l7611
  5630  004070                     l7603:
  5631                           
  5632                           ;sort.c: 366: updateServoPosition(1670, 1);
  5633  004070  0E06               	movlw	6
  5634  004072  0100               	movlb	0	; () banked
  5635  004074  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5636  004076  0E86               	movlw	134
  5637  004078  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5638  00407A  0E00               	movlw	0
  5639  00407C  0100               	movlb	0	; () banked
  5640  00407E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5641  004080  0E01               	movlw	1
  5642  004082  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5643  004084  EC9A  F023         	call	_updateServoPosition	;wreg free
  5644                           
  5645                           ;sort.c: 367: break;
  5646  004088  D024               	goto	l7611
  5647  00408A                     l7605:
  5648                           
  5649                           ;sort.c: 369: updateServoPosition(2400, 1);
  5650  00408A  0E09               	movlw	9
  5651  00408C  0100               	movlb	0	; () banked
  5652  00408E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5653  004090  0E60               	movlw	96
  5654  004092  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5655  004094  0E00               	movlw	0
  5656  004096  0100               	movlb	0	; () banked
  5657  004098  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5658  00409A  0E01               	movlw	1
  5659  00409C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5660  00409E  EC9A  F023         	call	_updateServoPosition	;wreg free
  5661                           
  5662                           ;sort.c: 373: }
  5663                           
  5664                           ;sort.c: 372: break;
  5665                           
  5666                           ;sort.c: 371: default:
  5667                           
  5668                           ;sort.c: 370: break;
  5669  0040A2  D017               	goto	l7611
  5670  0040A4                     l7609:
  5671  0040A4  C12B  F088         	movff	_cur_can,??_Distribution
  5672  0040A8  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5673                           
  5674                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5675                           ; Switch size 1, requested type "space"
  5676                           ; Number of cases is 1, Range of values is 0 to 0
  5677                           ; switch strategies available:
  5678                           ; Name         Instructions Cycles
  5679                           ; simple_byte            4     3 (average)
  5680                           ;	Chosen strategy is simple_byte
  5681  0040AC  0100               	movlb	0	; () banked
  5682  0040AE  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5683  0040B0  0A00               	xorlw	0	; case 0
  5684  0040B2  A4D8               	btfss	status,2,c
  5685  0040B4  D00E               	goto	l7611
  5686                           
  5687                           ; BSR set to: 0
  5688                           ; Switch size 1, requested type "space"
  5689                           ; Number of cases is 4, Range of values is 0 to 3
  5690                           ; switch strategies available:
  5691                           ; Name         Instructions Cycles
  5692                           ; simple_byte           13     7 (average)
  5693                           ;	Chosen strategy is simple_byte
  5694  0040B6  0100               	movlb	0	; () banked
  5695  0040B8  5188               	movf	??_Distribution& (0+255),w,b
  5696  0040BA  0A00               	xorlw	0	; case 0
  5697  0040BC  B4D8               	btfsc	status,2,c
  5698  0040BE  D7BE               	goto	l7599
  5699  0040C0  0A01               	xorlw	1	; case 1
  5700  0040C2  B4D8               	btfsc	status,2,c
  5701  0040C4  D7C8               	goto	l7601
  5702  0040C6  0A03               	xorlw	3	; case 2
  5703  0040C8  B4D8               	btfsc	status,2,c
  5704  0040CA  D7D2               	goto	l7603
  5705  0040CC  0A01               	xorlw	1	; case 3
  5706  0040CE  B4D8               	btfsc	status,2,c
  5707  0040D0  D7DC               	goto	l7605
  5708  0040D2                     l7611:
  5709                           
  5710                           ;sort.c: 374: updateServoPosition(1050, 3);
  5711  0040D2  0E04               	movlw	4
  5712  0040D4  0100               	movlb	0	; () banked
  5713  0040D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5714  0040D8  0E1A               	movlw	26
  5715  0040DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5716  0040DC  0E00               	movlw	0
  5717  0040DE  0100               	movlb	0	; () banked
  5718  0040E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5719  0040E2  0E03               	movlw	3
  5720  0040E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5721  0040E6  EC9A  F023         	call	_updateServoPosition	;wreg free
  5722                           
  5723                           ;sort.c: 375: servo_timer_target = 750;
  5724  0040EA  0E02               	movlw	2
  5725  0040EC  6E70               	movwf	_servo_timer_target+1,c	;volatile
  5726  0040EE  0EEE               	movlw	238
  5727  0040F0  6E6F               	movwf	_servo_timer_target,c	;volatile
  5728                           
  5729                           ;sort.c: 376: f_panning_to_bin = 1;
  5730  0040F2  0E00               	movlw	0
  5731  0040F4  6E64               	movwf	_f_panning_to_bin+1,c	;volatile
  5732  0040F6  0E01               	movlw	1
  5733  0040F8  6E63               	movwf	_f_panning_to_bin,c	;volatile
  5734                           
  5735                           ;sort.c: 377: f_can_coming_to_distribution = 0;
  5736  0040FA  0E00               	movlw	0
  5737  0040FC  0101               	movlb	1	; () banked
  5738  0040FE  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5739  004100  0E00               	movlw	0
  5740  004102  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5741  004104  0012               	return	
  5742  004106                     __end_of_Distribution:
  5743                           	opt stack 0
  5744                           tblptru	equ	0xFF8
  5745                           tblptrh	equ	0xFF7
  5746                           tblptrl	equ	0xFF6
  5747                           tablat	equ	0xFF5
  5748                           prodh	equ	0xFF4
  5749                           prodl	equ	0xFF3
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           postdec1	equ	0xFE5
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _machineConfig *****************
  5762 ;; Defined at:
  5763 ;;		line 15 in file "MachineConfig.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;Total ram usage:        0 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    7
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_main
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text12
  5792  004AD8                     __ptext12:
  5793                           	opt stack 0
  5794  004AD8                     _machineConfig:
  5795                           	opt stack 23
  5796                           
  5797                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5798                           
  5799                           ; BSR set to: 1
  5800                           ;incstack = 0
  5801  004AD8  0EF0               	movlw	240
  5802  004ADA  6ED3               	movwf	4051,c	;volatile
  5803                           
  5804                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5805  004ADC  8C9B               	bsf	3995,6,c	;volatile
  5806                           
  5807                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5808  004ADE  0E07               	movlw	7
  5809  004AE0  6E92               	movwf	3986,c	;volatile
  5810                           
  5811                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5812  004AE2  0EF2               	movlw	242
  5813  004AE4  6E93               	movwf	3987,c	;volatile
  5814                           
  5815                           ;MachineConfig.c: 27: TRISC = 0x00;
  5816  004AE6  0E00               	movlw	0
  5817  004AE8  6E94               	movwf	3988,c	;volatile
  5818                           
  5819                           ;MachineConfig.c: 31: TRISD = 0x00;
  5820  004AEA  0E00               	movlw	0
  5821  004AEC  6E95               	movwf	3989,c	;volatile
  5822                           
  5823                           ;MachineConfig.c: 34: TRISE = 0x00;
  5824  004AEE  0E00               	movlw	0
  5825  004AF0  6E96               	movwf	3990,c	;volatile
  5826                           
  5827                           ;MachineConfig.c: 37: LATA = 0x00;
  5828  004AF2  0E00               	movlw	0
  5829  004AF4  6E89               	movwf	3977,c	;volatile
  5830                           
  5831                           ;MachineConfig.c: 38: LATB = 0x00;
  5832  004AF6  0E00               	movlw	0
  5833  004AF8  6E8A               	movwf	3978,c	;volatile
  5834                           
  5835                           ;MachineConfig.c: 39: LATC = 0x00;
  5836  004AFA  0E00               	movlw	0
  5837  004AFC  6E8B               	movwf	3979,c	;volatile
  5838                           
  5839                           ;MachineConfig.c: 40: LATD = 0x00;
  5840  004AFE  0E00               	movlw	0
  5841  004B00  6E8C               	movwf	3980,c	;volatile
  5842                           
  5843                           ;MachineConfig.c: 41: LATE = 0x00;
  5844  004B02  0E00               	movlw	0
  5845  004B04  6E8D               	movwf	3981,c	;volatile
  5846                           
  5847                           ;MachineConfig.c: 43: nRBPU = 0;
  5848  004B06  9EF1               	bcf	intcon2,7,c	;volatile
  5849                           
  5850                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5851  004B08  0E00               	movlw	0
  5852  004B0A  6EC2               	movwf	4034,c	;volatile
  5853                           
  5854                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5855  004B0C  0E0D               	movlw	13
  5856  004B0E  6EC1               	movwf	4033,c	;volatile
  5857                           
  5858                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5859  004B10  0E00               	movlw	0
  5860  004B12  6EB5               	movwf	4021,c	;volatile
  5861                           
  5862                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5863  004B14  96B4               	bcf	4020,3,c	;volatile
  5864                           
  5865                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5866  004B16  0EB1               	movlw	177
  5867  004B18  6EC0               	movwf	4032,c	;volatile
  5868                           
  5869                           ;MachineConfig.c: 55: INT1IE = 1;
  5870  004B1A  86F0               	bsf	intcon3,3,c	;volatile
  5871                           
  5872                           ;MachineConfig.c: 57: TMR0IE = 1;
  5873  004B1C  8AF2               	bsf	intcon,5,c	;volatile
  5874                           
  5875                           ;MachineConfig.c: 58: TMR1IE = 1;
  5876  004B1E  809D               	bsf	3997,0,c	;volatile
  5877                           
  5878                           ;MachineConfig.c: 59: TMR2IE = 1;
  5879  004B20  829D               	bsf	3997,1,c	;volatile
  5880                           
  5881                           ;MachineConfig.c: 60: TMR3IE = 1;
  5882  004B22  82A0               	bsf	4000,1,c	;volatile
  5883                           
  5884                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  5885  004B24  0EB0               	movlw	176
  5886  004B26  6ECD               	movwf	4045,c	;volatile
  5887                           
  5888                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  5889  004B28  0E7B               	movlw	123
  5890  004B2A  6ECA               	movwf	4042,c	;volatile
  5891                           
  5892                           ;MachineConfig.c: 64: PR2 = 0x22;
  5893  004B2C  0E22               	movlw	34
  5894  004B2E  6ECB               	movwf	4043,c	;volatile
  5895                           
  5896                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  5897  004B30  0EB0               	movlw	176
  5898  004B32  6EB1               	movwf	4017,c	;volatile
  5899                           
  5900                           ;MachineConfig.c: 66: PEIE = 1;
  5901  004B34  8CF2               	bsf	intcon,6,c	;volatile
  5902                           
  5903                           ;MachineConfig.c: 67: ADIE = 0;
  5904  004B36  9C9D               	bcf	3997,6,c	;volatile
  5905                           
  5906                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  5907  004B38  9EF2               	bcf	intcon,7,c	;volatile
  5908  004B3A  0012               	return		;funcret
  5909  004B3C                     __end_of_machineConfig:
  5910                           	opt stack 0
  5911                           tblptru	equ	0xFF8
  5912                           tblptrh	equ	0xFF7
  5913                           tblptrl	equ	0xFF6
  5914                           tablat	equ	0xFF5
  5915                           prodh	equ	0xFF4
  5916                           prodl	equ	0xFF3
  5917                           intcon	equ	0xFF2
  5918                           intcon2	equ	0xFF1
  5919                           intcon3	equ	0xFF0
  5920                           postinc0	equ	0xFEE
  5921                           wreg	equ	0xFE8
  5922                           postdec1	equ	0xFE5
  5923                           fsr1l	equ	0xFE1
  5924                           indf2	equ	0xFDF
  5925                           postinc2	equ	0xFDE
  5926                           postdec2	equ	0xFDD
  5927                           fsr2h	equ	0xFDA
  5928                           fsr2l	equ	0xFD9
  5929                           status	equ	0xFD8
  5930                           
  5931 ;; *************** function _logRun *****************
  5932 ;; Defined at:
  5933 ;;		line 84 in file "EEPROM.c"
  5934 ;; Parameters:    Size  Location     Type
  5935 ;;		None
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5938 ;;  i               2   55[BANK0 ] int 
  5939 ;;  num             1   49[BANK0 ] unsigned char 
  5940 ;;  addr            2   57[BANK0 ] unsigned short 
  5941 ;;  byte11          1   54[BANK0 ] unsigned char 
  5942 ;;  byte3           1   52[BANK0 ] unsigned char 
  5943 ;;  byte2           1   51[BANK0 ] unsigned char 
  5944 ;;  byte1           1   50[BANK0 ] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;Total ram usage:       10 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:   11
  5961 ;; This function calls:
  5962 ;;		_EEPROM_read
  5963 ;;		_EEPROM_write
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text13
  5970  003ACA                     __ptext13:
  5971                           	opt stack 0
  5972  003ACA                     _logRun:
  5973                           	opt stack 19
  5974                           
  5975                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5976                           
  5977                           ;incstack = 0
  5978  003ACA  0E00               	movlw	0
  5979  003ACC  0100               	movlb	0	; () banked
  5980  003ACE  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5981  003AD0  0E00               	movlw	0
  5982  003AD2  6F80               	movwf	EEPROM_read@address& (0+255),b
  5983  003AD4  ECE3  F029         	call	_EEPROM_read	;wreg free
  5984  003AD8  0100               	movlb	0	; () banked
  5985  003ADA  6FFD               	movwf	_sel& (0+255),b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5989  003ADC  0100               	movlb	0	; () banked
  5990  003ADE  51FD               	movf	_sel& (0+255),w,b
  5991  003AE0  0D0B               	mullw	11
  5992  003AE2  0E01               	movlw	1
  5993  003AE4  24F3               	addwf	prodl,w,c
  5994  003AE6  0100               	movlb	0	; () banked
  5995  003AE8  6FB9               	movwf	logRun@addr& (0+255),b
  5996  003AEA  0E00               	movlw	0
  5997  003AEC  20F4               	addwfc	prodh,w,c
  5998  003AEE  0100               	movlb	0	; () banked
  5999  003AF0  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;EEPROM.c: 101: if (sel < 3){
  6003  003AF2  0E03               	movlw	3
  6004  003AF4  0100               	movlb	0	; () banked
  6005  003AF6  61FD               	cpfslt	_sel& (0+255),b
  6006  003AF8  D00E               	goto	l9223
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;EEPROM.c: 102: unsigned char num = sel+1;
  6010  003AFA  0100               	movlb	0	; () banked
  6011  003AFC  29FD               	incf	_sel& (0+255),w,b
  6012  003AFE  0100               	movlb	0	; () banked
  6013  003B00  6FB1               	movwf	logRun@num& (0+255),b
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;EEPROM.c: 103: EEPROM_write(0, num);
  6017  003B02  0E00               	movlw	0
  6018  003B04  0100               	movlb	0	; () banked
  6019  003B06  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6020  003B08  0E00               	movlw	0
  6021  003B0A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6022  003B0C  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  6023  003B10  EC9E  F01F         	call	_EEPROM_write	;wreg free
  6024                           
  6025                           ;EEPROM.c: 104: }
  6026  003B14  D00A               	goto	l9225
  6027  003B16                     l9223:
  6028                           
  6029                           ;EEPROM.c: 105: else{
  6030                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6031  003B16  0E00               	movlw	0
  6032  003B18  0100               	movlb	0	; () banked
  6033  003B1A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6034  003B1C  0E00               	movlw	0
  6035  003B1E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6036  003B20  0E00               	movlw	0
  6037  003B22  0100               	movlb	0	; () banked
  6038  003B24  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6039  003B26  EC9E  F01F         	call	_EEPROM_write	;wreg free
  6040  003B2A                     l9225:
  6041                           
  6042                           ;EEPROM.c: 107: }
  6043                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6044  003B2A  0100               	movlb	0	; () banked
  6045  003B2C  51FE               	movf	_count_total& (0+255),w,b
  6046  003B2E  0980               	iorlw	128
  6047  003B30  0100               	movlb	0	; () banked
  6048  003B32  6FB2               	movwf	logRun@byte1& (0+255),b
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6052  003B34  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6053  003B38  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6054  003B3C  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6055  003B40  EC9E  F01F         	call	_EEPROM_write	;wreg free
  6056                           
  6057                           ;EEPROM.c: 112: addr++;
  6058  003B44  0100               	movlb	0	; () banked
  6059  003B46  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6060  003B48  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6064  003B4A  0101               	movlb	1	; () banked
  6065  003B4C  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6066  003B4E  0BF0               	andlw	240
  6067  003B50  0101               	movlb	1	; () banked
  6068  003B52  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6069  003B54  0100               	movlb	0	; () banked
  6070  003B56  6FB3               	movwf	logRun@byte2& (0+255),b
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6074  003B58  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6075  003B5C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6076  003B60  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6077  003B64  EC9E  F01F         	call	_EEPROM_write	;wreg free
  6078                           
  6079                           ;EEPROM.c: 117: addr++;
  6080  003B68  0100               	movlb	0	; () banked
  6081  003B6A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6082  003B6C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6086  003B6E  0101               	movlb	1	; () banked
  6087  003B70  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6088  003B72  0BF0               	andlw	240
  6089  003B74  0101               	movlb	1	; () banked
  6090  003B76  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6091  003B78  0100               	movlb	0	; () banked
  6092  003B7A  6FB4               	movwf	logRun@byte3& (0+255),b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6096  003B7C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6097  003B80  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6098  003B84  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6099  003B88  EC9E  F01F         	call	_EEPROM_write	;wreg free
  6100                           
  6101                           ;EEPROM.c: 120: addr++;
  6102  003B8C  0100               	movlb	0	; () banked
  6103  003B8E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6104  003B90  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6108  003B92  0E00               	movlw	0
  6109  003B94  0100               	movlb	0	; () banked
  6110  003B96  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6111  003B98  0E00               	movlw	0
  6112  003B9A  6FB7               	movwf	logRun@i& (0+255),b
  6113                           
  6114                           ; BSR set to: 0
  6115  003B9C  0100               	movlb	0	; () banked
  6116  003B9E  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6117  003BA0  D008               	goto	l9249
  6118  003BA2  0100               	movlb	0	; () banked
  6119  003BA4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6120  003BA6  E128               	bnz	l1094
  6121  003BA8  0E07               	movlw	7
  6122  003BAA  0100               	movlb	0	; () banked
  6123  003BAC  5DB7               	subwf	logRun@i& (0+255),w,b
  6124  003BAE  B0D8               	btfsc	status,0,c
  6125  003BB0  D023               	goto	l1094
  6126  003BB2                     l9249:
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6130  003BB2  90D8               	bcf	status,0,c
  6131  003BB4  0100               	movlb	0	; () banked
  6132  003BB6  35B7               	rlcf	logRun@i& (0+255),w,b
  6133  003BB8  6ED9               	movwf	fsr2l,c
  6134  003BBA  0100               	movlb	0	; () banked
  6135  003BBC  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6136  003BBE  6EDA               	movwf	fsr2h,c
  6137  003BC0  0E0E               	movlw	low _startTime
  6138  003BC2  26D9               	addwf	fsr2l,f,c
  6139  003BC4  0E01               	movlw	high _startTime
  6140  003BC6  22DA               	addwfc	fsr2h,f,c
  6141  003BC8  50DF               	movf	indf2,w,c
  6142  003BCA  0100               	movlb	0	; () banked
  6143  003BCC  6FB5               	movwf	logRun@byte_i& (0+255),b
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6147  003BCE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6148  003BD2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6149  003BD6  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6150  003BDA  EC9E  F01F         	call	_EEPROM_write	;wreg free
  6151                           
  6152                           ;EEPROM.c: 126: addr++;
  6153  003BDE  0100               	movlb	0	; () banked
  6154  003BE0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6155  003BE2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6156                           
  6157                           ; BSR set to: 0
  6158  003BE4  0100               	movlb	0	; () banked
  6159  003BE6  4BB7               	infsnz	logRun@i& (0+255),f,b
  6160  003BE8  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6161                           
  6162                           ; BSR set to: 0
  6163  003BEA  0100               	movlb	0	; () banked
  6164  003BEC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6165  003BEE  D7E1               	goto	l9249
  6166  003BF0  0100               	movlb	0	; () banked
  6167  003BF2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6168  003BF4  E101               	bnz	u8490
  6169  003BF6  D7D8               	goto	L7
  6170  003BF8                     u8490:
  6171  003BF8                     l1094:
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;EEPROM.c: 127: }
  6175                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6176  003BF8  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6180  003BFC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6181  003C00  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6182  003C04  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6183  003C08  EC9E  F01F         	call	_EEPROM_write	;wreg free
  6184  003C0C  0012               	return		;funcret
  6185  003C0E                     __end_of_logRun:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           intcon2	equ	0xFF1
  6195                           intcon3	equ	0xFF0
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           fsr1l	equ	0xFE1
  6200                           indf2	equ	0xFDF
  6201                           postinc2	equ	0xFDE
  6202                           postdec2	equ	0xFDD
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function _EEPROM_write *****************
  6208 ;; Defined at:
  6209 ;;		line 32 in file "EEPROM.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  address         2   43[BANK0 ] unsigned short 
  6212 ;;  data            1   45[BANK0 ] unsigned char 
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;  i               1   48[BANK0 ] unsigned char 
  6215 ;;  i               1   47[BANK0 ] unsigned char 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  1    wreg      void 
  6218 ;; Registers used:
  6219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6225 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;Total ram usage:        6 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:   10
  6232 ;; This function calls:
  6233 ;;		_EEPROM_read
  6234 ;;		_lcdInst
  6235 ;;		_printf
  6236 ;; This function is called by:
  6237 ;;		_Loading
  6238 ;;		_logRun
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text14
  6243  003F3C                     __ptext14:
  6244                           	opt stack 0
  6245  003F3C                     _EEPROM_write:
  6246                           	opt stack 18
  6247                           
  6248                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6249                           
  6250                           ;incstack = 0
  6251  003F3C  84A6               	bsf	4006,2,c	;volatile
  6252                           
  6253                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6254  003F3E  0100               	movlb	0	; () banked
  6255  003F40  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6256  003F42  6EAA               	movwf	4010,c	;volatile
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6260  003F44  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;EEPROM.c: 39: EEDATA = data;
  6264  003F48  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6268  003F4C  9EA6               	bcf	4006,7,c	;volatile
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6272  003F4E  9CA6               	bcf	4006,6,c	;volatile
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6276  003F50  9EF2               	bcf	intcon,7,c	;volatile
  6277                           
  6278                           ;EEPROM.c: 45: EECON2 = 0x55;
  6279  003F52  0E55               	movlw	85
  6280  003F54  6EA7               	movwf	4007,c	;volatile
  6281                           
  6282                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6283  003F56  0EAA               	movlw	170
  6284  003F58  6EA7               	movwf	4007,c	;volatile
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6288  003F5A  82A6               	bsf	4006,1,c	;volatile
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6292  003F5C  8EF2               	bsf	intcon,7,c	;volatile
  6293  003F5E                     l1072:
  6294  003F5E  A8A1               	btfss	4001,4,c	;volatile
  6295  003F60  D7FE               	goto	l1072
  6296                           
  6297                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6298  003F62  98A1               	bcf	4001,4,c	;volatile
  6299                           
  6300                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6301  003F64  94A6               	bcf	4006,2,c	;volatile
  6302                           
  6303                           ;EEPROM.c: 57: if(debug){
  6304  003F66  0101               	movlb	1	; () banked
  6305  003F68  512D               	movf	_debug& (0+255),w,b
  6306  003F6A  0101               	movlb	1	; () banked
  6307  003F6C  112E               	iorwf	(_debug+1)& (0+255),w,b
  6308  003F6E  B4D8               	btfsc	status,2,c
  6309  003F70  0012               	return	
  6310                           
  6311                           ; BSR set to: 1
  6312                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6313  003F72  0E01               	movlw	1
  6314  003F74  EC15  F02A         	call	_lcdInst
  6315  003F78  0E68               	movlw	104
  6316  003F7A  0100               	movlb	0	; () banked
  6317  003F7C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6318  003F7E  0EE4               	movlw	228
  6319  003F80                     u9267:
  6320  003F80  2EE8               	decfsz	wreg,f,c
  6321  003F82  D7FE               	bra	u9267
  6322  003F84  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6323  003F86  D7FC               	bra	u9267
  6324  003F88  F000               	nop	
  6325                           
  6326                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6327  003F8A  0E80               	movlw	128
  6328  003F8C  EC15  F02A         	call	_lcdInst
  6329                           
  6330                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6331  003F90  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6332  003F94  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6333  003F98  ECE3  F029         	call	_EEPROM_read	;wreg free
  6334  003F9C  0100               	movlb	0	; () banked
  6335  003F9E  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6336  003FA0  A4D8               	btfss	status,2,c
  6337  003FA2  D024               	goto	l6939
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6341  003FA4  0E00               	movlw	low STR_66
  6342  003FA6  0100               	movlb	0	; () banked
  6343  003FA8  6F8E               	movwf	printf@f& (0+255),b
  6344  003FAA  0EFB               	movlw	high STR_66
  6345  003FAC  0100               	movlb	0	; () banked
  6346  003FAE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6347  003FB0  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6348  003FB4  0100               	movlb	0	; () banked
  6349  003FB6  6B91               	clrf	(?_printf+3)& (0+255),b
  6350  003FB8  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6351  003FBC  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6352  003FC0  EC1B  F00B         	call	_printf	;wreg free
  6353                           
  6354                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6355  003FC4  0E00               	movlw	0
  6356  003FC6  0100               	movlb	0	; () banked
  6357  003FC8  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6358  003FCA                     l6931:
  6359                           
  6360                           ; BSR set to: 0
  6361  003FCA  0E63               	movlw	99
  6362  003FCC  0100               	movlb	0	; () banked
  6363  003FCE  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6364  003FD0  D001               	goto	l6935
  6365  003FD2  0012               	return	
  6366  003FD4                     l6935:
  6367                           
  6368                           ; BSR set to: 0
  6369  003FD4  0E68               	movlw	104
  6370  003FD6  0100               	movlb	0	; () banked
  6371  003FD8  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6372  003FDA  0EE4               	movlw	228
  6373  003FDC                     u9277:
  6374  003FDC  2EE8               	decfsz	wreg,f,c
  6375  003FDE  D7FE               	bra	u9277
  6376  003FE0  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6377  003FE2  D7FC               	bra	u9277
  6378  003FE4  F000               	nop	
  6379  003FE6  0100               	movlb	0	; () banked
  6380  003FE8  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6381  003FEA  D7EF               	goto	l6931
  6382  003FEC                     l6939:
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6386  003FEC  0EBD               	movlw	low STR_67
  6387  003FEE  0100               	movlb	0	; () banked
  6388  003FF0  6F8E               	movwf	printf@f& (0+255),b
  6389  003FF2  0EFF               	movlw	high STR_67
  6390  003FF4  0100               	movlb	0	; () banked
  6391  003FF6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6392  003FF8  EC1B  F00B         	call	_printf	;wreg free
  6393  003FFC  0E00               	movlw	0
  6394  003FFE  0100               	movlb	0	; () banked
  6395  004000  6FB0               	movwf	EEPROM_write@i_1433& (0+255),b
  6396  004002                     l6943:
  6397                           
  6398                           ; BSR set to: 0
  6399  004002  0E63               	movlw	99
  6400  004004  0100               	movlb	0	; () banked
  6401  004006  65B0               	cpfsgt	EEPROM_write@i_1433& (0+255),b
  6402  004008  D001               	goto	l6947
  6403  00400A  0012               	return	
  6404  00400C                     l6947:
  6405                           
  6406                           ; BSR set to: 0
  6407  00400C  0E68               	movlw	104
  6408  00400E  0100               	movlb	0	; () banked
  6409  004010  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6410  004012  0EE4               	movlw	228
  6411  004014                     u9287:
  6412  004014  2EE8               	decfsz	wreg,f,c
  6413  004016  D7FE               	bra	u9287
  6414  004018  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6415  00401A  D7FC               	bra	u9287
  6416  00401C  F000               	nop	
  6417  00401E  0100               	movlb	0	; () banked
  6418  004020  2BB0               	incf	EEPROM_write@i_1433& (0+255),f,b
  6419  004022  D7EF               	goto	l6943
  6420  004024                     __end_of_EEPROM_write:
  6421                           	opt stack 0
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           intcon2	equ	0xFF1
  6430                           intcon3	equ	0xFF0
  6431                           postinc0	equ	0xFEE
  6432                           wreg	equ	0xFE8
  6433                           postdec1	equ	0xFE5
  6434                           fsr1l	equ	0xFE1
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           postdec2	equ	0xFDD
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function _EEPROM_read *****************
  6443 ;; Defined at:
  6444 ;;		line 68 in file "EEPROM.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;  address         2    0[BANK0 ] unsigned short 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;		None
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1    wreg      unsigned char 
  6451 ;; Registers used:
  6452 ;;		wreg, status,2
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6458 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;Total ram usage:        2 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    7
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_Loading
  6469 ;;		_EEPROM_write
  6470 ;;		_logRun
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           	psect	text15
  6475  0053C6                     __ptext15:
  6476                           	opt stack 0
  6477  0053C6                     _EEPROM_read:
  6478                           	opt stack 20
  6479                           
  6480                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6481                           
  6482                           ;incstack = 0
  6483  0053C6  0100               	movlb	0	; () banked
  6484  0053C8  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6485  0053CA  6EAA               	movwf	4010,c	;volatile
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6489  0053CC  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6493  0053D0  9EA6               	bcf	4006,7,c	;volatile
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6497  0053D2  9CA6               	bcf	4006,6,c	;volatile
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6501  0053D4  80A6               	bsf	4006,0,c	;volatile
  6502  0053D6                     l1085:
  6503  0053D6  B0A6               	btfsc	4006,0,c	;volatile
  6504  0053D8  D7FE               	goto	l1085
  6505                           
  6506                           ;EEPROM.c: 81: return EEDATA;
  6507  0053DA  50A8               	movf	4008,w,c	;volatile
  6508  0053DC  0012               	return	
  6509  0053DE                     __end_of_EEPROM_read:
  6510                           	opt stack 0
  6511                           tblptru	equ	0xFF8
  6512                           tblptrh	equ	0xFF7
  6513                           tblptrl	equ	0xFF6
  6514                           tablat	equ	0xFF5
  6515                           prodh	equ	0xFF4
  6516                           prodl	equ	0xFF3
  6517                           intcon	equ	0xFF2
  6518                           intcon2	equ	0xFF1
  6519                           intcon3	equ	0xFF0
  6520                           postinc0	equ	0xFEE
  6521                           wreg	equ	0xFE8
  6522                           postdec1	equ	0xFE5
  6523                           fsr1l	equ	0xFE1
  6524                           indf2	equ	0xFDF
  6525                           postinc2	equ	0xFDE
  6526                           postdec2	equ	0xFDD
  6527                           fsr2h	equ	0xFDA
  6528                           fsr2l	equ	0xFD9
  6529                           status	equ	0xFD8
  6530                           
  6531 ;; *************** function _initUI *****************
  6532 ;; Defined at:
  6533 ;;		line 62 in file "UI.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      void 
  6540 ;; Registers used:
  6541 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;Total ram usage:        0 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:   12
  6554 ;; This function calls:
  6555 ;;		_change_state_to_menu_start
  6556 ;;		_loadRTC
  6557 ;; This function is called by:
  6558 ;;		_main
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text16
  6563  004FB0                     __ptext16:
  6564                           	opt stack 0
  6565  004FB0                     _initUI:
  6566                           	opt stack 18
  6567                           
  6568                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6569                           
  6570                           ;incstack = 0
  6571  004FB0  8EF2               	bsf	intcon,7,c	;volatile
  6572                           
  6573                           ;UI.c: 64: machine_state = UI_state;
  6574  004FB2  0E00               	movlw	0
  6575  004FB4  0100               	movlb	0	; () banked
  6576  004FB6  6FFC               	movwf	_machine_state& (0+255),b
  6577                           
  6578                           ;UI.c: 65: logstate = 0;
  6579  004FB8  0E00               	movlw	0
  6580  004FBA  0100               	movlb	0	; () banked
  6581  004FBC  6FF9               	movwf	(_logstate+1)& (0+255),b
  6582  004FBE  0E00               	movlw	0
  6583  004FC0  6FF8               	movwf	_logstate& (0+255),b
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;UI.c: 67: if(RTCflag){
  6587  004FC2  0100               	movlb	0	; () banked
  6588  004FC4  51EA               	movf	_RTCflag& (0+255),w,b
  6589  004FC6  0100               	movlb	0	; () banked
  6590  004FC8  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6591  004FCA  A4D8               	btfss	status,2,c
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;UI.c: 68: loadRTC();
  6595  004FCC  EC11  F023         	call	_loadRTC	;wreg free
  6596                           
  6597                           ;UI.c: 69: }
  6598                           ;UI.c: 71: change_state_to_menu_start();
  6599  004FD0  ECF6  F028         	call	_change_state_to_menu_start	;wreg free
  6600                           
  6601                           ;UI.c: 72: firstboot = 1;
  6602  004FD4  0E00               	movlw	0
  6603  004FD6  0101               	movlb	1	; () banked
  6604  004FD8  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6605  004FDA  0E01               	movlw	1
  6606  004FDC  6F3B               	movwf	_firstboot& (0+255),b
  6607                           
  6608                           ; BSR set to: 1
  6609  004FDE  0012               	return		;funcret
  6610  004FE0                     __end_of_initUI:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon	equ	0xFF2
  6619                           intcon2	equ	0xFF1
  6620                           intcon3	equ	0xFF0
  6621                           postinc0	equ	0xFEE
  6622                           wreg	equ	0xFE8
  6623                           postdec1	equ	0xFE5
  6624                           fsr1l	equ	0xFE1
  6625                           indf2	equ	0xFDF
  6626                           postinc2	equ	0xFDE
  6627                           postdec2	equ	0xFDD
  6628                           fsr2h	equ	0xFDA
  6629                           fsr2l	equ	0xFD9
  6630                           status	equ	0xFD8
  6631                           
  6632 ;; *************** function _loadRTC *****************
  6633 ;; Defined at:
  6634 ;;		line 28 in file "RTC.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;  i               2   22[BANK0 ] int 
  6639 ;; Return value:  Size  Location     Type
  6640 ;;                  1    wreg      void 
  6641 ;; Registers used:
  6642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6651 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;Total ram usage:        3 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    9
  6655 ;; This function calls:
  6656 ;;		_I2C_Master_Init
  6657 ;;		_I2C_Master_Start
  6658 ;;		_I2C_Master_Stop
  6659 ;;		_I2C_Master_Write
  6660 ;; This function is called by:
  6661 ;;		_initUI
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text17
  6666  004622                     __ptext17:
  6667                           	opt stack 0
  6668  004622                     _loadRTC:
  6669                           	opt stack 20
  6670                           
  6671                           ;RTC.c: 30: I2C_Master_Init(10000);
  6672                           
  6673                           ; BSR set to: 1
  6674                           ;incstack = 0
  6675  004622  0E10               	movlw	16
  6676  004624  0100               	movlb	0	; () banked
  6677  004626  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6678  004628  0E27               	movlw	39
  6679  00462A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6680  00462C  0E00               	movlw	0
  6681  00462E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6682  004630  0E00               	movlw	0
  6683  004632  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6684  004634  ECCF  F025         	call	_I2C_Master_Init	;wreg free
  6685                           
  6686                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6687  004638  9EF2               	bcf	intcon,7,c	;volatile
  6688                           
  6689                           ;RTC.c: 34: I2C_Master_Start();
  6690  00463A  EC3B  F02A         	call	_I2C_Master_Start	;wreg free
  6691                           
  6692                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6693  00463E  0E00               	movlw	0
  6694  004640  0100               	movlb	0	; () banked
  6695  004642  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6696  004644  0ED0               	movlw	208
  6697  004646  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6698  004648  EC29  F02A         	call	_I2C_Master_Write	;wreg free
  6699                           
  6700                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6701  00464C  0E00               	movlw	0
  6702  00464E  0100               	movlb	0	; () banked
  6703  004650  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6704  004652  0E00               	movlw	0
  6705  004654  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6706  004656  EC29  F02A         	call	_I2C_Master_Write	;wreg free
  6707                           
  6708                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6709  00465A  0E00               	movlw	0
  6710  00465C  0100               	movlb	0	; () banked
  6711  00465E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6712  004660  0E00               	movlw	0
  6713  004662  6F96               	movwf	loadRTC@i& (0+255),b
  6714  004664                     l7091:
  6715                           
  6716                           ; BSR set to: 0
  6717  004664  0100               	movlb	0	; () banked
  6718  004666  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6719  004668  D008               	goto	l7095
  6720  00466A  0100               	movlb	0	; () banked
  6721  00466C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6722  00466E  E11B               	bnz	l7101
  6723  004670  0E07               	movlw	7
  6724  004672  0100               	movlb	0	; () banked
  6725  004674  5D96               	subwf	loadRTC@i& (0+255),w,b
  6726  004676  B0D8               	btfsc	status,0,c
  6727  004678  D016               	goto	l7101
  6728  00467A                     l7095:
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6732  00467A  0E1C               	movlw	low _time
  6733  00467C  0100               	movlb	0	; () banked
  6734  00467E  2596               	addwf	loadRTC@i& (0+255),w,b
  6735  004680  6ED9               	movwf	fsr2l,c
  6736  004682  0E01               	movlw	high _time
  6737  004684  0100               	movlb	0	; () banked
  6738  004686  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6739  004688  6EDA               	movwf	fsr2h,c
  6740  00468A  50DF               	movf	indf2,w,c
  6741  00468C  0100               	movlb	0	; () banked
  6742  00468E  6F95               	movwf	??_loadRTC& (0+255),b
  6743  004690  0100               	movlb	0	; () banked
  6744  004692  5195               	movf	??_loadRTC& (0+255),w,b
  6745  004694  0100               	movlb	0	; () banked
  6746  004696  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6747  004698  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6748  00469A  EC29  F02A         	call	_I2C_Master_Write	;wreg free
  6749  00469E  0100               	movlb	0	; () banked
  6750  0046A0  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6751  0046A2  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6752  0046A4  D7DF               	goto	l7091
  6753  0046A6                     l7101:
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;RTC.c: 39: }
  6757                           ;RTC.c: 40: I2C_Master_Stop();
  6758  0046A6  EC37  F02A         	call	_I2C_Master_Stop	;wreg free
  6759                           
  6760                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6761  0046AA  8EF2               	bsf	intcon,7,c	;volatile
  6762  0046AC  0012               	return		;funcret
  6763  0046AE                     __end_of_loadRTC:
  6764                           	opt stack 0
  6765                           tblptru	equ	0xFF8
  6766                           tblptrh	equ	0xFF7
  6767                           tblptrl	equ	0xFF6
  6768                           tablat	equ	0xFF5
  6769                           prodh	equ	0xFF4
  6770                           prodl	equ	0xFF3
  6771                           intcon	equ	0xFF2
  6772                           intcon2	equ	0xFF1
  6773                           intcon3	equ	0xFF0
  6774                           postinc0	equ	0xFEE
  6775                           wreg	equ	0xFE8
  6776                           postdec1	equ	0xFE5
  6777                           fsr1l	equ	0xFE1
  6778                           indf2	equ	0xFDF
  6779                           postinc2	equ	0xFDE
  6780                           postdec2	equ	0xFDD
  6781                           fsr2h	equ	0xFDA
  6782                           fsr2l	equ	0xFD9
  6783                           status	equ	0xFD8
  6784                           
  6785 ;; *************** function _I2C_Master_Init *****************
  6786 ;; Defined at:
  6787 ;;		line 15 in file "I2C.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  c               4   13[BANK0 ] const unsigned long 
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;		None
  6792 ;; Return value:  Size  Location     Type
  6793 ;;                  1    wreg      void 
  6794 ;; Registers used:
  6795 ;;		wreg, status,2, status,0, cstack
  6796 ;; Tracked objects:
  6797 ;;		On entry : 0/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6801 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;Total ram usage:        8 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:    8
  6808 ;; This function calls:
  6809 ;;		___lldiv
  6810 ;; This function is called by:
  6811 ;;		_main
  6812 ;;		_loadRTC
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text18
  6817  004B9E                     __ptext18:
  6818                           	opt stack 0
  6819  004B9E                     _I2C_Master_Init:
  6820                           	opt stack 20
  6821                           
  6822                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6823                           
  6824                           ;incstack = 0
  6825  004B9E  0E00               	movlw	0
  6826  004BA0  6EC7               	movwf	4039,c	;volatile
  6827                           
  6828                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6829  004BA2  0E28               	movlw	40
  6830  004BA4  6EC6               	movwf	4038,c	;volatile
  6831                           
  6832                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6833  004BA6  0E00               	movlw	0
  6834  004BA8  6EC5               	movwf	4037,c	;volatile
  6835                           
  6836                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6837  004BAA  0E00               	movlw	0
  6838  004BAC  0100               	movlb	0	; () banked
  6839  004BAE  6F80               	movwf	___lldiv@dividend& (0+255),b
  6840  004BB0  0E48               	movlw	72
  6841  004BB2  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6842  004BB4  0EE8               	movlw	232
  6843  004BB6  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6844  004BB8  0E01               	movlw	1
  6845  004BBA  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6846  004BBC  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6847  004BC0  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6848  004BC4  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6849  004BC8  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6850  004BCC  0E02               	movlw	2
  6851  004BCE                     u5385:
  6852  004BCE  90D8               	bcf	status,0,c
  6853  004BD0  0100               	movlb	0	; () banked
  6854  004BD2  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6855  004BD4  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6856  004BD6  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6857  004BD8  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6858  004BDA  2EE8               	decfsz	wreg,f,c
  6859  004BDC  D7F8               	goto	u5385
  6860  004BDE  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6861  004BE2  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6862  004BE6  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6863  004BEA  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6864  004BEE  EC0D  F022         	call	___lldiv	;wreg free
  6865  004BF2  0100               	movlb	0	; () banked
  6866  004BF4  0580               	decf	?___lldiv& (0+255),w,b
  6867  004BF6  6EC8               	movwf	4040,c	;volatile
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;I2C.c: 22: TRISC3 = 1;
  6871  004BF8  8694               	bsf	3988,3,c	;volatile
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;I2C.c: 23: TRISC4 = 1;
  6875  004BFA  8894               	bsf	3988,4,c	;volatile
  6876                           
  6877                           ; BSR set to: 0
  6878  004BFC  0012               	return		;funcret
  6879  004BFE                     __end_of_I2C_Master_Init:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           intcon	equ	0xFF2
  6888                           intcon2	equ	0xFF1
  6889                           intcon3	equ	0xFF0
  6890                           postinc0	equ	0xFEE
  6891                           wreg	equ	0xFE8
  6892                           postdec1	equ	0xFE5
  6893                           fsr1l	equ	0xFE1
  6894                           indf2	equ	0xFDF
  6895                           postinc2	equ	0xFDE
  6896                           postdec2	equ	0xFDD
  6897                           fsr2h	equ	0xFDA
  6898                           fsr2l	equ	0xFD9
  6899                           status	equ	0xFD8
  6900                           
  6901 ;; *************** function ___lldiv *****************
  6902 ;; Defined at:
  6903 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;  dividend        4    0[BANK0 ] unsigned long 
  6906 ;;  divisor         4    4[BANK0 ] unsigned long 
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;  quotient        4    8[BANK0 ] unsigned long 
  6909 ;;  counter         1   12[BANK0 ] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  4    0[BANK0 ] unsigned long 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6919 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6922 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;Total ram usage:       13 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    7
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_I2C_Master_Init
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text19
  6934  00441A                     __ptext19:
  6935                           	opt stack 0
  6936  00441A                     ___lldiv:
  6937                           	opt stack 20
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;incstack = 0
  6941  00441A  0E00               	movlw	0
  6942  00441C  0100               	movlb	0	; () banked
  6943  00441E  6F88               	movwf	___lldiv@quotient& (0+255),b
  6944  004420  0E00               	movlw	0
  6945  004422  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6946  004424  0E00               	movlw	0
  6947  004426  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6948  004428  0E00               	movlw	0
  6949  00442A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6950                           
  6951                           ; BSR set to: 0
  6952  00442C  0100               	movlb	0	; () banked
  6953  00442E  5184               	movf	___lldiv@divisor& (0+255),w,b
  6954  004430  0100               	movlb	0	; () banked
  6955  004432  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6956  004434  0100               	movlb	0	; () banked
  6957  004436  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6958  004438  0100               	movlb	0	; () banked
  6959  00443A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6960  00443C  B4D8               	btfsc	status,2,c
  6961  00443E  D042               	goto	l1835
  6962                           
  6963                           ; BSR set to: 0
  6964  004440  0E01               	movlw	1
  6965  004442  0100               	movlb	0	; () banked
  6966  004444  6F8C               	movwf	___lldiv@counter& (0+255),b
  6967  004446  D008               	goto	l6505
  6968  004448                     l6503:
  6969                           
  6970                           ; BSR set to: 0
  6971  004448  0100               	movlb	0	; () banked
  6972  00444A  90D8               	bcf	status,0,c
  6973  00444C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6974  00444E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6975  004450  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6976  004452  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6977  004454  0100               	movlb	0	; () banked
  6978  004456  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6979  004458                     l6505:
  6980                           
  6981                           ; BSR set to: 0
  6982  004458  0100               	movlb	0	; () banked
  6983  00445A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6984  00445C  D7F5               	goto	l6503
  6985  00445E                     l6507:
  6986                           
  6987                           ; BSR set to: 0
  6988  00445E  0100               	movlb	0	; () banked
  6989  004460  90D8               	bcf	status,0,c
  6990  004462  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6991  004464  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6992  004466  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6993  004468  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6994                           
  6995                           ; BSR set to: 0
  6996  00446A  0100               	movlb	0	; () banked
  6997  00446C  5184               	movf	___lldiv@divisor& (0+255),w,b
  6998  00446E  0100               	movlb	0	; () banked
  6999  004470  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7000  004472  0100               	movlb	0	; () banked
  7001  004474  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7002  004476  0100               	movlb	0	; () banked
  7003  004478  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7004  00447A  0100               	movlb	0	; () banked
  7005  00447C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7006  00447E  0100               	movlb	0	; () banked
  7007  004480  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7008  004482  0100               	movlb	0	; () banked
  7009  004484  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7010  004486  0100               	movlb	0	; () banked
  7011  004488  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7012  00448A  A0D8               	btfss	status,0,c
  7013  00448C  D012               	goto	l6515
  7014                           
  7015                           ; BSR set to: 0
  7016  00448E  0100               	movlb	0	; () banked
  7017  004490  5184               	movf	___lldiv@divisor& (0+255),w,b
  7018  004492  0100               	movlb	0	; () banked
  7019  004494  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7020  004496  0100               	movlb	0	; () banked
  7021  004498  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7022  00449A  0100               	movlb	0	; () banked
  7023  00449C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7024  00449E  0100               	movlb	0	; () banked
  7025  0044A0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7026  0044A2  0100               	movlb	0	; () banked
  7027  0044A4  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7028  0044A6  0100               	movlb	0	; () banked
  7029  0044A8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7030  0044AA  0100               	movlb	0	; () banked
  7031  0044AC  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7032                           
  7033                           ; BSR set to: 0
  7034  0044AE  0100               	movlb	0	; () banked
  7035  0044B0  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7036  0044B2                     l6515:
  7037                           
  7038                           ; BSR set to: 0
  7039  0044B2  0100               	movlb	0	; () banked
  7040  0044B4  90D8               	bcf	status,0,c
  7041  0044B6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7042  0044B8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7043  0044BA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7044  0044BC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7045                           
  7046                           ; BSR set to: 0
  7047  0044BE  0100               	movlb	0	; () banked
  7048  0044C0  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7049  0044C2  D7CD               	goto	l6507
  7050  0044C4                     l1835:
  7051                           
  7052                           ; BSR set to: 0
  7053  0044C4  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7054  0044C8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7055  0044CC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7056  0044D0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7057                           
  7058                           ; BSR set to: 0
  7059  0044D4  0012               	return		;funcret
  7060  0044D6                     __end_of___lldiv:
  7061                           	opt stack 0
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           intcon	equ	0xFF2
  7069                           intcon2	equ	0xFF1
  7070                           intcon3	equ	0xFF0
  7071                           postinc0	equ	0xFEE
  7072                           wreg	equ	0xFE8
  7073                           postdec1	equ	0xFE5
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           fsr2h	equ	0xFDA
  7079                           fsr2l	equ	0xFD9
  7080                           status	equ	0xFD8
  7081                           
  7082 ;; *************** function _change_state_to_menu_start *****************
  7083 ;; Defined at:
  7084 ;;		line 477 in file "UI.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;		None
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;		None
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7102 ;;Total ram usage:        0 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; Hardware stack levels required when called:   11
  7105 ;; This function calls:
  7106 ;;		_lcdInst
  7107 ;;		_printRTC
  7108 ;;		_printf
  7109 ;; This function is called by:
  7110 ;;		_initUI
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           	psect	text20
  7115  0051EC                     __ptext20:
  7116                           	opt stack 0
  7117  0051EC                     _change_state_to_menu_start:
  7118                           	opt stack 18
  7119                           
  7120                           ;UI.c: 478: cur_state = 0;
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;incstack = 0
  7124  0051EC  0E00               	movlw	0
  7125  0051EE  0100               	movlb	0	; () banked
  7126  0051F0  6FED               	movwf	(_cur_state+1)& (0+255),b
  7127  0051F2  0E00               	movlw	0
  7128  0051F4  6FEC               	movwf	_cur_state& (0+255),b
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;UI.c: 480: lcdInst(0b10000000);;
  7132  0051F6  0E80               	movlw	128
  7133  0051F8  EC15  F02A         	call	_lcdInst
  7134                           
  7135                           ;UI.c: 481: printRTC();
  7136  0051FC  EC2F  F012         	call	_printRTC	;wreg free
  7137                           
  7138                           ;UI.c: 482: lcdInst(0b11000000);;
  7139  005200  0EC0               	movlw	192
  7140  005202  EC15  F02A         	call	_lcdInst
  7141                           
  7142                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7143  005206  0EF7               	movlw	low STR_30
  7144  005208  0100               	movlb	0	; () banked
  7145  00520A  6F8E               	movwf	printf@f& (0+255),b
  7146  00520C  0EFD               	movlw	high STR_30
  7147  00520E  0100               	movlb	0	; () banked
  7148  005210  6F8F               	movwf	(printf@f+1)& (0+255),b
  7149  005212  EC1B  F00B         	call	_printf	;wreg free
  7150  005216  0012               	return		;funcret
  7151  005218                     __end_of_change_state_to_menu_start:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           intcon	equ	0xFF2
  7160                           intcon2	equ	0xFF1
  7161                           intcon3	equ	0xFF0
  7162                           postinc0	equ	0xFEE
  7163                           wreg	equ	0xFE8
  7164                           postdec1	equ	0xFE5
  7165                           fsr1l	equ	0xFE1
  7166                           indf2	equ	0xFDF
  7167                           postinc2	equ	0xFDE
  7168                           postdec2	equ	0xFDD
  7169                           fsr2h	equ	0xFDA
  7170                           fsr2l	equ	0xFD9
  7171                           status	equ	0xFD8
  7172                           
  7173 ;; *************** function _initTime *****************
  7174 ;; Defined at:
  7175 ;;		line 17 in file "RTC.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;  s               1    wreg     unsigned char 
  7178 ;;  m               1    0[BANK0 ] unsigned char 
  7179 ;;  h               1    1[BANK0 ] unsigned char 
  7180 ;;  w               1    2[BANK0 ] unsigned char 
  7181 ;;  DD              1    3[BANK0 ] unsigned char 
  7182 ;;  MM              1    4[BANK0 ] unsigned char 
  7183 ;;  YY              1    5[BANK0 ] unsigned char 
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;  s               1    6[BANK0 ] unsigned char 
  7186 ;; Return value:  Size  Location     Type
  7187 ;;                  1    wreg      void 
  7188 ;; Registers used:
  7189 ;;		wreg
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7195 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;Total ram usage:        7 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    7
  7202 ;; This function calls:
  7203 ;;		Nothing
  7204 ;; This function is called by:
  7205 ;;		_main
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           	psect	text21
  7210  005350                     __ptext21:
  7211                           	opt stack 0
  7212  005350                     _initTime:
  7213                           	opt stack 23
  7214                           
  7215                           ;incstack = 0
  7216                           ;initTime@s stored from wreg
  7217  005350  0100               	movlb	0	; () banked
  7218  005352  6F86               	movwf	initTime@s& (0+255),b
  7219                           
  7220                           ;RTC.c: 19: time[0] = s;
  7221  005354  C086  F11C         	movff	initTime@s,_time
  7222                           
  7223                           ;RTC.c: 20: time[1] = m;
  7224  005358  C080  F11D         	movff	initTime@m,_time+1
  7225                           
  7226                           ;RTC.c: 21: time[2] = h;
  7227  00535C  C081  F11E         	movff	initTime@h,_time+2
  7228                           
  7229                           ;RTC.c: 22: time[3] = w;
  7230  005360  C082  F11F         	movff	initTime@w,_time+3
  7231                           
  7232                           ;RTC.c: 23: time[4] = DD;
  7233  005364  C083  F120         	movff	initTime@DD,_time+4
  7234                           
  7235                           ;RTC.c: 24: time[5] = MM;
  7236  005368  C084  F121         	movff	initTime@MM,_time+5
  7237                           
  7238                           ;RTC.c: 25: time[6] = YY;
  7239  00536C  C085  F122         	movff	initTime@YY,_time+6
  7240  005370  0012               	return		;funcret
  7241  005372                     __end_of_initTime:
  7242                           	opt stack 0
  7243                           tblptru	equ	0xFF8
  7244                           tblptrh	equ	0xFF7
  7245                           tblptrl	equ	0xFF6
  7246                           tablat	equ	0xFF5
  7247                           prodh	equ	0xFF4
  7248                           prodl	equ	0xFF3
  7249                           intcon	equ	0xFF2
  7250                           intcon2	equ	0xFF1
  7251                           intcon3	equ	0xFF0
  7252                           postinc0	equ	0xFEE
  7253                           wreg	equ	0xFE8
  7254                           postdec1	equ	0xFE5
  7255                           fsr1l	equ	0xFE1
  7256                           indf2	equ	0xFDF
  7257                           postinc2	equ	0xFDE
  7258                           postdec2	equ	0xFDD
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263 ;; *************** function _initLCD *****************
  7264 ;; Defined at:
  7265 ;;		line 48 in file "lcd.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;		None
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;		None
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  1    wreg      void 
  7272 ;; Registers used:
  7273 ;;		wreg, status,2, status,0, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;Total ram usage:        1 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    9
  7286 ;; This function calls:
  7287 ;;		_lcdInst
  7288 ;; This function is called by:
  7289 ;;		_main
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           	psect	text22
  7294  004DE8                     __ptext22:
  7295                           	opt stack 0
  7296  004DE8                     _initLCD:
  7297                           	opt stack 21
  7298                           
  7299                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7300                           
  7301                           ;incstack = 0
  7302  004DE8  0E9C               	movlw	156
  7303  004DEA  0100               	movlb	0	; () banked
  7304  004DEC  6F83               	movwf	??_initLCD& (0+255),b
  7305  004DEE  0ED7               	movlw	215
  7306  004DF0                     u9297:
  7307  004DF0  2EE8               	decfsz	wreg,f,c
  7308  004DF2  D7FE               	bra	u9297
  7309  004DF4  2F83               	decfsz	??_initLCD& (0+255),f,b
  7310  004DF6  D7FC               	bra	u9297
  7311                           
  7312                           ;lcd.c: 50: lcdInst(0b00110011);
  7313  004DF8  0E33               	movlw	51
  7314  004DFA  EC15  F02A         	call	_lcdInst
  7315                           
  7316                           ;lcd.c: 51: lcdInst(0b00110010);
  7317  004DFE  0E32               	movlw	50
  7318  004E00  EC15  F02A         	call	_lcdInst
  7319                           
  7320                           ;lcd.c: 53: lcdInst(0b00101000);
  7321  004E04  0E28               	movlw	40
  7322  004E06  EC15  F02A         	call	_lcdInst
  7323                           
  7324                           ;lcd.c: 54: lcdInst(0b00001100);
  7325  004E0A  0E0C               	movlw	12
  7326  004E0C  EC15  F02A         	call	_lcdInst
  7327                           
  7328                           ;lcd.c: 55: lcdInst(0b00000110);
  7329  004E10  0E06               	movlw	6
  7330  004E12  EC15  F02A         	call	_lcdInst
  7331                           
  7332                           ;lcd.c: 56: lcdInst(0b00000001);
  7333  004E16  0E01               	movlw	1
  7334  004E18  EC15  F02A         	call	_lcdInst
  7335                           
  7336                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7337  004E1C  0E9C               	movlw	156
  7338  004E1E  0100               	movlb	0	; () banked
  7339  004E20  6F83               	movwf	??_initLCD& (0+255),b
  7340  004E22  0ED7               	movlw	215
  7341  004E24                     u9307:
  7342  004E24  2EE8               	decfsz	wreg,f,c
  7343  004E26  D7FE               	bra	u9307
  7344  004E28  2F83               	decfsz	??_initLCD& (0+255),f,b
  7345  004E2A  D7FC               	bra	u9307
  7346  004E2C  0012               	return		;funcret
  7347  004E2E                     __end_of_initLCD:
  7348                           	opt stack 0
  7349                           tblptru	equ	0xFF8
  7350                           tblptrh	equ	0xFF7
  7351                           tblptrl	equ	0xFF6
  7352                           tablat	equ	0xFF5
  7353                           prodh	equ	0xFF4
  7354                           prodl	equ	0xFF3
  7355                           intcon	equ	0xFF2
  7356                           intcon2	equ	0xFF1
  7357                           intcon3	equ	0xFF0
  7358                           postinc0	equ	0xFEE
  7359                           wreg	equ	0xFE8
  7360                           postdec1	equ	0xFE5
  7361                           fsr1l	equ	0xFE1
  7362                           indf2	equ	0xFDF
  7363                           postinc2	equ	0xFDE
  7364                           postdec2	equ	0xFDD
  7365                           fsr2h	equ	0xFDA
  7366                           fsr2l	equ	0xFD9
  7367                           status	equ	0xFD8
  7368                           
  7369 ;; *************** function _UI *****************
  7370 ;; Defined at:
  7371 ;;		line 76 in file "UI.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;		None
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;  i               1   73[BANK0 ] unsigned char 
  7376 ;;  i               1   85[BANK0 ] unsigned char 
  7377 ;;  i               1   84[BANK0 ] unsigned char 
  7378 ;;  i               1   83[BANK0 ] unsigned char 
  7379 ;;  i               1   82[BANK0 ] unsigned char 
  7380 ;;  i               1   81[BANK0 ] unsigned char 
  7381 ;;  i               1   80[BANK0 ] unsigned char 
  7382 ;;  i               1   79[BANK0 ] unsigned char 
  7383 ;;  i               1   78[BANK0 ] unsigned char 
  7384 ;;  i               1   77[BANK0 ] unsigned char 
  7385 ;;  i               1   76[BANK0 ] unsigned char 
  7386 ;;  i               1   75[BANK0 ] unsigned char 
  7387 ;;  i               1   74[BANK0 ] unsigned char 
  7388 ;;  month           4   86[BANK0 ] unsigned char [4]
  7389 ;;  i               1   72[BANK0 ] unsigned char 
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      void 
  7392 ;; Registers used:
  7393 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;Total ram usage:       22 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:   11
  7406 ;; This function calls:
  7407 ;;		___awdiv
  7408 ;;		___awmod
  7409 ;;		_change_state_to_menu_12
  7410 ;;		_change_state_to_menu_22
  7411 ;;		_lcdInst
  7412 ;;		_printRTC
  7413 ;;		_printf
  7414 ;;		_strcpy
  7415 ;; This function is called by:
  7416 ;;		_main
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           	psect	text23
  7421  000012                     __ptext23:
  7422                           	opt stack 0
  7423  000012                     _UI:
  7424                           	opt stack 19
  7425                           
  7426                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7427                           
  7428                           ;incstack = 0
  7429  000012  0E02               	movlw	2
  7430  000014  0100               	movlb	0	; () banked
  7431  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  7432  000018  A4D8               	btfss	status,2,c
  7433  00001A  D086               	goto	l8647
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7437  00001C  0E01               	movlw	1
  7438  00001E  EC15  F02A         	call	_lcdInst
  7439  000022  0E68               	movlw	104
  7440  000024  0100               	movlb	0	; () banked
  7441  000026  6FC4               	movwf	??_UI& (0+255),b
  7442  000028  0EE4               	movlw	228
  7443  00002A                     u9317:
  7444  00002A  2EE8               	decfsz	wreg,f,c
  7445  00002C  D7FE               	bra	u9317
  7446  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  7447  000030  D7FC               	bra	u9317
  7448  000032  F000               	nop	
  7449                           
  7450                           ;UI.c: 79: lcdInst(0b10000000);;
  7451  000034  0E80               	movlw	128
  7452  000036  EC15  F02A         	call	_lcdInst
  7453                           
  7454                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7455  00003A  0E81               	movlw	low STR_1
  7456  00003C  0100               	movlb	0	; () banked
  7457  00003E  6F8E               	movwf	printf@f& (0+255),b
  7458  000040  0EFB               	movlw	high STR_1
  7459  000042  0100               	movlb	0	; () banked
  7460  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  7461  000046  0E01               	movlw	1
  7462  000048  0100               	movlb	0	; () banked
  7463  00004A  25FD               	addwf	_sel& (0+255),w,b
  7464  00004C  0100               	movlb	0	; () banked
  7465  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  7466  000050  0100               	movlb	0	; () banked
  7467  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  7468  000054  0E00               	movlw	0
  7469  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7470  000058  EC1B  F00B         	call	_printf	;wreg free
  7471                           
  7472                           ;UI.c: 81: lcdInst(0b11000000);;
  7473  00005C  0EC0               	movlw	192
  7474  00005E  EC15  F02A         	call	_lcdInst
  7475                           
  7476                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7477  000062  0E0E               	movlw	14
  7478  000064  0100               	movlb	0	; () banked
  7479  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7480  000068  0E10               	movlw	16
  7481  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  7482  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  7483  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7484  000074  ECC0  F022         	call	___awmod	;wreg free
  7485  000078  C080  F0C6         	movff	?___awmod,_UI$2402
  7486  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2402+1
  7487                           
  7488                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7489  000080  0E27               	movlw	low STR_2
  7490  000082  0100               	movlb	0	; () banked
  7491  000084  6F8E               	movwf	printf@f& (0+255),b
  7492  000086  0EFF               	movlw	high STR_2
  7493  000088  0100               	movlb	0	; () banked
  7494  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7495  00008C  0E0E               	movlw	14
  7496  00008E  0100               	movlb	0	; () banked
  7497  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7498  000092  0E10               	movlw	16
  7499  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  7500  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  7501  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7502  00009E  ECC0  F022         	call	___awmod	;wreg free
  7503  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  7504  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7505  0000AA  0E00               	movlw	0
  7506  0000AC  0100               	movlb	0	; () banked
  7507  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7508  0000B0  0E3C               	movlw	60
  7509  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  7510  0000B4  EC50  F021         	call	___awdiv	;wreg free
  7511  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  7512  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  7513  0000C0  C0C6  F080         	movff	_UI$2402,___awmod@dividend
  7514  0000C4  C0C7  F081         	movff	_UI$2402+1,___awmod@dividend+1
  7515  0000C8  0E00               	movlw	0
  7516  0000CA  0100               	movlb	0	; () banked
  7517  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7518  0000CE  0E3C               	movlw	60
  7519  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  7520  0000D2  ECC0  F022         	call	___awmod	;wreg free
  7521  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  7522  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  7523  0000DE  EC1B  F00B         	call	_printf	;wreg free
  7524  0000E2                     l180:
  7525  0000E2  B281               	btfsc	3969,1,c	;volatile
  7526  0000E4  D7FE               	goto	l180
  7527  0000E6                     l183:
  7528  0000E6  A281               	btfss	3969,1,c	;volatile
  7529  0000E8  D7FE               	goto	l183
  7530                           
  7531                           ;UI.c: 86: }
  7532                           ;UI.c: 87: if(cur_state == 12){
  7533  0000EA  0E0C               	movlw	12
  7534  0000EC  0100               	movlb	0	; () banked
  7535  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  7536  0000F0  0100               	movlb	0	; () banked
  7537  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7538  0000F4  A4D8               	btfss	status,2,c
  7539  0000F6  D003               	goto	l8641
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;UI.c: 88: change_state_to_menu_12();
  7543  0000F8  EC54  F027         	call	_change_state_to_menu_12	;wreg free
  7544                           
  7545                           ;UI.c: 89: }
  7546  0000FC  D002               	goto	l188
  7547  0000FE                     l8641:
  7548                           
  7549                           ;UI.c: 90: else{
  7550                           ;UI.c: 91: change_state_to_menu_22();
  7551  0000FE  EC38  F027         	call	_change_state_to_menu_22	;wreg free
  7552  000102                     l188:
  7553  000102  B281               	btfsc	3969,1,c	;volatile
  7554  000104  D7FE               	goto	l188
  7555                           
  7556                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  7557  000106  0E05               	movlw	5
  7558  000108  0100               	movlb	0	; () banked
  7559  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  7560  00010C  0E0F               	movlw	15
  7561  00010E  0100               	movlb	0	; () banked
  7562  000110  6FC4               	movwf	??_UI& (0+255),b
  7563  000112  0EF1               	movlw	241
  7564  000114                     u9327:
  7565  000114  2EE8               	decfsz	wreg,f,c
  7566  000116  D7FE               	bra	u9327
  7567  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  7568  00011A  D7FC               	bra	u9327
  7569  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  7570  00011E  D7FA               	bra	u9327
  7571                           
  7572                           ;UI.c: 95: machine_state = UI_state;
  7573  000120  0E00               	movlw	0
  7574  000122  0100               	movlb	0	; () banked
  7575  000124  6FFC               	movwf	_machine_state& (0+255),b
  7576                           
  7577                           ;UI.c: 96: }
  7578  000126  D3D2               	goto	l8967
  7579  000128                     l8647:
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;UI.c: 97: else if(cur_state == 0){
  7583  000128  0100               	movlb	0	; () banked
  7584  00012A  51EC               	movf	_cur_state& (0+255),w,b
  7585  00012C  0100               	movlb	0	; () banked
  7586  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7587  000130  A4D8               	btfss	status,2,c
  7588  000132  D3CC               	goto	l8967
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7592  000134  0E00               	movlw	0
  7593  000136  0100               	movlb	0	; () banked
  7594  000138  6FC8               	movwf	UI@i& (0+255),b
  7595  00013A                     l8651:
  7596                           
  7597                           ; BSR set to: 0
  7598  00013A  0E63               	movlw	99
  7599  00013C  0100               	movlb	0	; () banked
  7600  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  7601  000140  D001               	goto	l8655
  7602  000142  D00C               	goto	l8659
  7603  000144                     l8655:
  7604                           
  7605                           ; BSR set to: 0
  7606  000144  0E68               	movlw	104
  7607  000146  0100               	movlb	0	; () banked
  7608  000148  6FC4               	movwf	??_UI& (0+255),b
  7609  00014A  0EE4               	movlw	228
  7610  00014C                     u9337:
  7611  00014C  2EE8               	decfsz	wreg,f,c
  7612  00014E  D7FE               	bra	u9337
  7613  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  7614  000152  D7FC               	bra	u9337
  7615  000154  F000               	nop	
  7616  000156  0100               	movlb	0	; () banked
  7617  000158  2BC8               	incf	UI@i& (0+255),f,b
  7618  00015A  D7EF               	goto	l8651
  7619  00015C                     l8659:
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;UI.c: 99: if(cur_state == 0){
  7623  00015C  0100               	movlb	0	; () banked
  7624  00015E  51EC               	movf	_cur_state& (0+255),w,b
  7625  000160  0100               	movlb	0	; () banked
  7626  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7627  000164  A4D8               	btfss	status,2,c
  7628  000166  D3B2               	goto	l8967
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;UI.c: 100: printRTC();
  7632  000168  EC2F  F012         	call	_printRTC	;wreg free
  7633                           
  7634                           ;UI.c: 101: }
  7635                           ;UI.c: 102: }
  7636                           ;UI.c: 103: while(logstate){
  7637  00016C  D3AF               	goto	l8967
  7638  00016E                     l8663:
  7639                           
  7640                           ;UI.c: 105: if(!log_completion){
  7641  00016E  0100               	movlb	0	; () banked
  7642  000170  51F4               	movf	_log_completion& (0+255),w,b
  7643  000172  0100               	movlb	0	; () banked
  7644  000174  11F5               	iorwf	(_log_completion+1)& (0+255),w,b
  7645  000176  A4D8               	btfss	status,2,c
  7646  000178  D041               	goto	l8693
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7650  00017A  0E01               	movlw	1
  7651  00017C  EC15  F02A         	call	_lcdInst
  7652  000180  0E68               	movlw	104
  7653  000182  0100               	movlb	0	; () banked
  7654  000184  6FC4               	movwf	??_UI& (0+255),b
  7655  000186  0EE4               	movlw	228
  7656  000188                     u9347:
  7657  000188  2EE8               	decfsz	wreg,f,c
  7658  00018A  D7FE               	bra	u9347
  7659  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  7660  00018E  D7FC               	bra	u9347
  7661  000190  F000               	nop	
  7662                           
  7663                           ;UI.c: 107: lcdInst(0b10000000);;
  7664  000192  0E80               	movlw	128
  7665  000194  EC15  F02A         	call	_lcdInst
  7666                           
  7667                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  7668  000198  0E6F               	movlw	low STR_3
  7669  00019A  0100               	movlb	0	; () banked
  7670  00019C  6F8E               	movwf	printf@f& (0+255),b
  7671  00019E  0EFB               	movlw	high STR_3
  7672  0001A0  0100               	movlb	0	; () banked
  7673  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  7674  0001A4  C0F2  F090         	movff	_log,?_printf+2
  7675  0001A8  C0F3  F091         	movff	_log+1,?_printf+3
  7676  0001AC  EC1B  F00B         	call	_printf	;wreg free
  7677                           
  7678                           ;UI.c: 109: lcdInst(0b11000000);;
  7679  0001B0  0EC0               	movlw	192
  7680  0001B2  EC15  F02A         	call	_lcdInst
  7681                           
  7682                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  7683  0001B6  0E4A               	movlw	low STR_4
  7684  0001B8  0100               	movlb	0	; () banked
  7685  0001BA  6F8E               	movwf	printf@f& (0+255),b
  7686  0001BC  0EFE               	movlw	high STR_4
  7687  0001BE  0100               	movlb	0	; () banked
  7688  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  7689  0001C2  EC1B  F00B         	call	_printf	;wreg free
  7690  0001C6                     l8677:
  7691  0001C6  0E00               	movlw	0
  7692  0001C8  0100               	movlb	0	; () banked
  7693  0001CA  6FC9               	movwf	UI@i_409& (0+255),b
  7694  0001CC                     l8679:
  7695                           
  7696                           ; BSR set to: 0
  7697  0001CC  0E63               	movlw	99
  7698  0001CE  0100               	movlb	0	; () banked
  7699  0001D0  65C9               	cpfsgt	UI@i_409& (0+255),b
  7700  0001D2  D001               	goto	l8683
  7701  0001D4  D00C               	goto	l8687
  7702  0001D6                     l8683:
  7703                           
  7704                           ; BSR set to: 0
  7705  0001D6  0E68               	movlw	104
  7706  0001D8  0100               	movlb	0	; () banked
  7707  0001DA  6FC4               	movwf	??_UI& (0+255),b
  7708  0001DC  0EE4               	movlw	228
  7709  0001DE                     u9357:
  7710  0001DE  2EE8               	decfsz	wreg,f,c
  7711  0001E0  D7FE               	bra	u9357
  7712  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  7713  0001E4  D7FC               	bra	u9357
  7714  0001E6  F000               	nop	
  7715  0001E8  0100               	movlb	0	; () banked
  7716  0001EA  2BC9               	incf	UI@i_409& (0+255),f,b
  7717  0001EC  D7EF               	goto	l8679
  7718  0001EE                     l8687:
  7719                           
  7720                           ; BSR set to: 0
  7721  0001EE  0100               	movlb	0	; () banked
  7722  0001F0  51F8               	movf	_logstate& (0+255),w,b
  7723  0001F2  0100               	movlb	0	; () banked
  7724  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7725  0001F6  B4D8               	btfsc	status,2,c
  7726  0001F8  0012               	return	
  7727  0001FA  D7E5               	goto	l8677
  7728  0001FC                     l8693:
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;UI.c: 114: else{
  7732                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7733  0001FC  0E01               	movlw	1
  7734  0001FE  EC15  F02A         	call	_lcdInst
  7735  000202  0E68               	movlw	104
  7736  000204  0100               	movlb	0	; () banked
  7737  000206  6FC4               	movwf	??_UI& (0+255),b
  7738  000208  0EE4               	movlw	228
  7739  00020A                     u9367:
  7740  00020A  2EE8               	decfsz	wreg,f,c
  7741  00020C  D7FE               	bra	u9367
  7742  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  7743  000210  D7FC               	bra	u9367
  7744  000212  F000               	nop	
  7745                           
  7746                           ;UI.c: 116: lcdInst(0b10000000);;
  7747  000214  0E80               	movlw	128
  7748  000216  EC15  F02A         	call	_lcdInst
  7749                           
  7750                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  7751  00021A  0E6F               	movlw	low STR_3
  7752  00021C  0100               	movlb	0	; () banked
  7753  00021E  6F8E               	movwf	printf@f& (0+255),b
  7754  000220  0EFB               	movlw	high STR_3
  7755  000222  0100               	movlb	0	; () banked
  7756  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  7757  000226  C0F2  F090         	movff	_log,?_printf+2
  7758  00022A  C0F3  F091         	movff	_log+1,?_printf+3
  7759  00022E  EC1B  F00B         	call	_printf	;wreg free
  7760                           
  7761                           ;UI.c: 118: lcdInst(0b11000000);;
  7762  000232  0EC0               	movlw	192
  7763  000234  EC15  F02A         	call	_lcdInst
  7764                           
  7765                           ;UI.c: 119: printf("PAUSE < | BACK >");
  7766  000238  0EE6               	movlw	low STR_6
  7767  00023A  0100               	movlb	0	; () banked
  7768  00023C  6F8E               	movwf	printf@f& (0+255),b
  7769  00023E  0EFD               	movlw	high STR_6
  7770  000240  0100               	movlb	0	; () banked
  7771  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  7772  000244  EC1B  F00B         	call	_printf	;wreg free
  7773                           
  7774                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7775  000248  0E00               	movlw	0
  7776  00024A  0100               	movlb	0	; () banked
  7777  00024C  6FCA               	movwf	UI@i_412& (0+255),b
  7778  00024E                     l8707:
  7779                           
  7780                           ; BSR set to: 0
  7781  00024E  0E63               	movlw	99
  7782  000250  0100               	movlb	0	; () banked
  7783  000252  65CA               	cpfsgt	UI@i_412& (0+255),b
  7784  000254  D001               	goto	l8711
  7785  000256  D00C               	goto	l8715
  7786  000258                     l8711:
  7787                           
  7788                           ; BSR set to: 0
  7789  000258  0E68               	movlw	104
  7790  00025A  0100               	movlb	0	; () banked
  7791  00025C  6FC4               	movwf	??_UI& (0+255),b
  7792  00025E  0EE4               	movlw	228
  7793  000260                     u9377:
  7794  000260  2EE8               	decfsz	wreg,f,c
  7795  000262  D7FE               	bra	u9377
  7796  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  7797  000266  D7FC               	bra	u9377
  7798  000268  F000               	nop	
  7799  00026A  0100               	movlb	0	; () banked
  7800  00026C  2BCA               	incf	UI@i_412& (0+255),f,b
  7801  00026E  D7EF               	goto	l8707
  7802  000270                     l8715:
  7803                           
  7804                           ; BSR set to: 0
  7805  000270  0100               	movlb	0	; () banked
  7806  000272  51F8               	movf	_logstate& (0+255),w,b
  7807  000274  0100               	movlb	0	; () banked
  7808  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7809  000278  B4D8               	btfsc	status,2,c
  7810  00027A  0012               	return	
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7814                           
  7815                           ; BSR set to: 0
  7816                           
  7817                           ; BSR set to: 0
  7818  00027C  0E00               	movlw	0
  7819  00027E  0100               	movlb	0	; () banked
  7820  000280  6FCB               	movwf	UI@i_413& (0+255),b
  7821  000282                     l8721:
  7822                           
  7823                           ; BSR set to: 0
  7824  000282  0E63               	movlw	99
  7825  000284  0100               	movlb	0	; () banked
  7826  000286  65CB               	cpfsgt	UI@i_413& (0+255),b
  7827  000288  D001               	goto	l8725
  7828  00028A  D00C               	goto	l8729
  7829  00028C                     l8725:
  7830                           
  7831                           ; BSR set to: 0
  7832  00028C  0E68               	movlw	104
  7833  00028E  0100               	movlb	0	; () banked
  7834  000290  6FC4               	movwf	??_UI& (0+255),b
  7835  000292  0EE4               	movlw	228
  7836  000294                     u9387:
  7837  000294  2EE8               	decfsz	wreg,f,c
  7838  000296  D7FE               	bra	u9387
  7839  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  7840  00029A  D7FC               	bra	u9387
  7841  00029C  F000               	nop	
  7842  00029E  0100               	movlb	0	; () banked
  7843  0002A0  2BCB               	incf	UI@i_413& (0+255),f,b
  7844  0002A2  D7EF               	goto	l8721
  7845  0002A4                     l8729:
  7846                           
  7847                           ; BSR set to: 0
  7848  0002A4  0100               	movlb	0	; () banked
  7849  0002A6  51F8               	movf	_logstate& (0+255),w,b
  7850  0002A8  0100               	movlb	0	; () banked
  7851  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7852  0002AC  B4D8               	btfsc	status,2,c
  7853  0002AE  0012               	return	
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7857                           
  7858                           ; BSR set to: 0
  7859                           
  7860                           ; BSR set to: 0
  7861  0002B0  0E01               	movlw	1
  7862  0002B2  EC15  F02A         	call	_lcdInst
  7863  0002B6  0E68               	movlw	104
  7864  0002B8  0100               	movlb	0	; () banked
  7865  0002BA  6FC4               	movwf	??_UI& (0+255),b
  7866  0002BC  0EE4               	movlw	228
  7867  0002BE                     u9397:
  7868  0002BE  2EE8               	decfsz	wreg,f,c
  7869  0002C0  D7FE               	bra	u9397
  7870  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  7871  0002C4  D7FC               	bra	u9397
  7872  0002C6  F000               	nop	
  7873                           
  7874                           ;UI.c: 125: lcdInst(0b10000000);;
  7875  0002C8  0E80               	movlw	128
  7876  0002CA  EC15  F02A         	call	_lcdInst
  7877                           
  7878                           ;UI.c: 126: printf("START:");
  7879  0002CE  0EC4               	movlw	low STR_7
  7880  0002D0  0100               	movlb	0	; () banked
  7881  0002D2  6F8E               	movwf	printf@f& (0+255),b
  7882  0002D4  0EFF               	movlw	high STR_7
  7883  0002D6  0100               	movlb	0	; () banked
  7884  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7885  0002DA  EC1B  F00B         	call	_printf	;wreg free
  7886                           
  7887                           ;UI.c: 127: lcdInst(0b11000000);;
  7888  0002DE  0EC0               	movlw	192
  7889  0002E0  EC15  F02A         	call	_lcdInst
  7890                           
  7891                           ;UI.c: 128: char month[] = "MMM";
  7892  0002E4  C147  F0D6         	movff	UI@F3239,UI@month
  7893  0002E8  C148  F0D7         	movff	UI@F3239+1,UI@month+1
  7894  0002EC  C149  F0D8         	movff	UI@F3239+2,UI@month+2
  7895  0002F0  C14A  F0D9         	movff	UI@F3239+3,UI@month+3
  7896                           
  7897                           ;UI.c: 129: switch(log_startTime[5]){
  7898  0002F4  D0C3               	goto	l8773
  7899  0002F6                     l8745:
  7900                           
  7901                           ;UI.c: 131: strcpy(month, "JAN");
  7902  0002F6  0ED6               	movlw	low UI@month
  7903  0002F8  0100               	movlb	0	; () banked
  7904  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  7905  0002FC  0E00               	movlw	high UI@month
  7906  0002FE  0100               	movlb	0	; () banked
  7907  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7908  000302  0EDB               	movlw	low STR_8
  7909  000304  0100               	movlb	0	; () banked
  7910  000306  6F82               	movwf	strcpy@from& (0+255),b
  7911  000308  0EFF               	movlw	high STR_8
  7912  00030A  0100               	movlb	0	; () banked
  7913  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7914  00030E  EC70  F027         	call	_strcpy	;wreg free
  7915                           
  7916                           ;UI.c: 132: break;
  7917  000312  D0E6               	goto	l8775
  7918  000314                     l8747:
  7919                           
  7920                           ;UI.c: 134: strcpy(month, "FEB");
  7921  000314  0ED6               	movlw	low UI@month
  7922  000316  0100               	movlb	0	; () banked
  7923  000318  6F80               	movwf	strcpy@to& (0+255),b
  7924  00031A  0E00               	movlw	high UI@month
  7925  00031C  0100               	movlb	0	; () banked
  7926  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7927  000320  0ECB               	movlw	low STR_9
  7928  000322  0100               	movlb	0	; () banked
  7929  000324  6F82               	movwf	strcpy@from& (0+255),b
  7930  000326  0EFF               	movlw	high STR_9
  7931  000328  0100               	movlb	0	; () banked
  7932  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7933  00032C  EC70  F027         	call	_strcpy	;wreg free
  7934                           
  7935                           ;UI.c: 135: break;
  7936  000330  D0D7               	goto	l8775
  7937  000332                     l8749:
  7938                           
  7939                           ;UI.c: 137: strcpy(month, "MAR");
  7940  000332  0ED6               	movlw	low UI@month
  7941  000334  0100               	movlb	0	; () banked
  7942  000336  6F80               	movwf	strcpy@to& (0+255),b
  7943  000338  0E00               	movlw	high UI@month
  7944  00033A  0100               	movlb	0	; () banked
  7945  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7946  00033E  0EE7               	movlw	low STR_10
  7947  000340  0100               	movlb	0	; () banked
  7948  000342  6F82               	movwf	strcpy@from& (0+255),b
  7949  000344  0EFF               	movlw	high STR_10
  7950  000346  0100               	movlb	0	; () banked
  7951  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7952  00034A  EC70  F027         	call	_strcpy	;wreg free
  7953                           
  7954                           ;UI.c: 138: break;
  7955  00034E  D0C8               	goto	l8775
  7956  000350                     l8751:
  7957                           
  7958                           ;UI.c: 140: strcpy(month, "APR");
  7959  000350  0ED6               	movlw	low UI@month
  7960  000352  0100               	movlb	0	; () banked
  7961  000354  6F80               	movwf	strcpy@to& (0+255),b
  7962  000356  0E00               	movlw	high UI@month
  7963  000358  0100               	movlb	0	; () banked
  7964  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7965  00035C  0EEB               	movlw	low STR_11
  7966  00035E  0100               	movlb	0	; () banked
  7967  000360  6F82               	movwf	strcpy@from& (0+255),b
  7968  000362  0EFF               	movlw	high STR_11
  7969  000364  0100               	movlb	0	; () banked
  7970  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7971  000368  EC70  F027         	call	_strcpy	;wreg free
  7972                           
  7973                           ;UI.c: 141: break;
  7974  00036C  D0B9               	goto	l8775
  7975  00036E                     l8753:
  7976                           
  7977                           ;UI.c: 143: strcpy(month, "MAY");
  7978  00036E  0ED6               	movlw	low UI@month
  7979  000370  0100               	movlb	0	; () banked
  7980  000372  6F80               	movwf	strcpy@to& (0+255),b
  7981  000374  0E00               	movlw	high UI@month
  7982  000376  0100               	movlb	0	; () banked
  7983  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7984  00037A  0EFB               	movlw	low STR_12
  7985  00037C  0100               	movlb	0	; () banked
  7986  00037E  6F82               	movwf	strcpy@from& (0+255),b
  7987  000380  0EFF               	movlw	high STR_12
  7988  000382  0100               	movlb	0	; () banked
  7989  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7990  000386  EC70  F027         	call	_strcpy	;wreg free
  7991                           
  7992                           ;UI.c: 144: break;
  7993  00038A  D0AA               	goto	l8775
  7994  00038C                     l8755:
  7995                           
  7996                           ;UI.c: 146: strcpy(month, "JUN");
  7997  00038C  0ED6               	movlw	low UI@month
  7998  00038E  0100               	movlb	0	; () banked
  7999  000390  6F80               	movwf	strcpy@to& (0+255),b
  8000  000392  0E00               	movlw	high UI@month
  8001  000394  0100               	movlb	0	; () banked
  8002  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8003  000398  0EDF               	movlw	low STR_13
  8004  00039A  0100               	movlb	0	; () banked
  8005  00039C  6F82               	movwf	strcpy@from& (0+255),b
  8006  00039E  0EFF               	movlw	high STR_13
  8007  0003A0  0100               	movlb	0	; () banked
  8008  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8009  0003A4  EC70  F027         	call	_strcpy	;wreg free
  8010                           
  8011                           ;UI.c: 147: break;
  8012  0003A8  D09B               	goto	l8775
  8013  0003AA                     l8757:
  8014                           
  8015                           ;UI.c: 149: strcpy(month, "JUL");
  8016  0003AA  0ED6               	movlw	low UI@month
  8017  0003AC  0100               	movlb	0	; () banked
  8018  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  8019  0003B0  0E00               	movlw	high UI@month
  8020  0003B2  0100               	movlb	0	; () banked
  8021  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8022  0003B6  0ED7               	movlw	low STR_14
  8023  0003B8  0100               	movlb	0	; () banked
  8024  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  8025  0003BC  0EFF               	movlw	high STR_14
  8026  0003BE  0100               	movlb	0	; () banked
  8027  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8028  0003C2  EC70  F027         	call	_strcpy	;wreg free
  8029                           
  8030                           ;UI.c: 150: break;
  8031  0003C6  D08C               	goto	l8775
  8032  0003C8                     l8759:
  8033                           
  8034                           ;UI.c: 152: strcpy(month, "AUG");
  8035  0003C8  0ED6               	movlw	low UI@month
  8036  0003CA  0100               	movlb	0	; () banked
  8037  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  8038  0003CE  0E00               	movlw	high UI@month
  8039  0003D0  0100               	movlb	0	; () banked
  8040  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8041  0003D4  0ED3               	movlw	low STR_15
  8042  0003D6  0100               	movlb	0	; () banked
  8043  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  8044  0003DA  0EFF               	movlw	high STR_15
  8045  0003DC  0100               	movlb	0	; () banked
  8046  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8047  0003E0  EC70  F027         	call	_strcpy	;wreg free
  8048                           
  8049                           ;UI.c: 153: break;
  8050  0003E4  D07D               	goto	l8775
  8051  0003E6                     l8761:
  8052                           
  8053                           ;UI.c: 155: strcpy(month, "SEP");
  8054  0003E6  0ED6               	movlw	low UI@month
  8055  0003E8  0100               	movlb	0	; () banked
  8056  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  8057  0003EC  0E00               	movlw	high UI@month
  8058  0003EE  0100               	movlb	0	; () banked
  8059  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8060  0003F2  0EE3               	movlw	low STR_16
  8061  0003F4  0100               	movlb	0	; () banked
  8062  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  8063  0003F8  0EFF               	movlw	high STR_16
  8064  0003FA  0100               	movlb	0	; () banked
  8065  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8066  0003FE  EC70  F027         	call	_strcpy	;wreg free
  8067                           
  8068                           ;UI.c: 156: break;
  8069  000402  D06E               	goto	l8775
  8070  000404                     l8763:
  8071                           
  8072                           ;UI.c: 158: strcpy(month, "OCT");
  8073  000404  0ED6               	movlw	low UI@month
  8074  000406  0100               	movlb	0	; () banked
  8075  000408  6F80               	movwf	strcpy@to& (0+255),b
  8076  00040A  0E00               	movlw	high UI@month
  8077  00040C  0100               	movlb	0	; () banked
  8078  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8079  000410  0EF3               	movlw	low STR_17
  8080  000412  0100               	movlb	0	; () banked
  8081  000414  6F82               	movwf	strcpy@from& (0+255),b
  8082  000416  0EFF               	movlw	high STR_17
  8083  000418  0100               	movlb	0	; () banked
  8084  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8085  00041C  EC70  F027         	call	_strcpy	;wreg free
  8086                           
  8087                           ;UI.c: 159: break;
  8088  000420  D05F               	goto	l8775
  8089  000422                     l8765:
  8090                           
  8091                           ;UI.c: 161: strcpy(month, "NOV");
  8092  000422  0ED6               	movlw	low UI@month
  8093  000424  0100               	movlb	0	; () banked
  8094  000426  6F80               	movwf	strcpy@to& (0+255),b
  8095  000428  0E00               	movlw	high UI@month
  8096  00042A  0100               	movlb	0	; () banked
  8097  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8098  00042E  0EF7               	movlw	low STR_18
  8099  000430  0100               	movlb	0	; () banked
  8100  000432  6F82               	movwf	strcpy@from& (0+255),b
  8101  000434  0EFF               	movlw	high STR_18
  8102  000436  0100               	movlb	0	; () banked
  8103  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8104  00043A  EC70  F027         	call	_strcpy	;wreg free
  8105                           
  8106                           ;UI.c: 162: break;
  8107  00043E  D050               	goto	l8775
  8108  000440                     l8767:
  8109                           
  8110                           ;UI.c: 164: strcpy(month, "DEC");
  8111  000440  0ED6               	movlw	low UI@month
  8112  000442  0100               	movlb	0	; () banked
  8113  000444  6F80               	movwf	strcpy@to& (0+255),b
  8114  000446  0E00               	movlw	high UI@month
  8115  000448  0100               	movlb	0	; () banked
  8116  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8117  00044C  0ECF               	movlw	low STR_19
  8118  00044E  0100               	movlb	0	; () banked
  8119  000450  6F82               	movwf	strcpy@from& (0+255),b
  8120  000452  0EFF               	movlw	high STR_19
  8121  000454  0100               	movlb	0	; () banked
  8122  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8123  000458  EC70  F027         	call	_strcpy	;wreg free
  8124                           
  8125                           ;UI.c: 165: break;
  8126  00045C  D041               	goto	l8775
  8127  00045E                     l8769:
  8128                           
  8129                           ;UI.c: 167: strcpy(month, "ERR");
  8130  00045E  0ED6               	movlw	low UI@month
  8131  000460  0100               	movlb	0	; () banked
  8132  000462  6F80               	movwf	strcpy@to& (0+255),b
  8133  000464  0E00               	movlw	high UI@month
  8134  000466  0100               	movlb	0	; () banked
  8135  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8136  00046A  0EEF               	movlw	low STR_20
  8137  00046C  0100               	movlb	0	; () banked
  8138  00046E  6F82               	movwf	strcpy@from& (0+255),b
  8139  000470  0EFF               	movlw	high STR_20
  8140  000472  0100               	movlb	0	; () banked
  8141  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8142  000476  EC70  F027         	call	_strcpy	;wreg free
  8143                           
  8144                           ;UI.c: 169: }
  8145                           
  8146                           ;UI.c: 168: break;
  8147  00047A  D032               	goto	l8775
  8148  00047C                     l8773:
  8149  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  8150  000480  CFDE F0C4          	movff	postinc2,??_UI
  8151  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  8152                           
  8153                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8154                           ; Switch size 1, requested type "space"
  8155                           ; Number of cases is 1, Range of values is 0 to 0
  8156                           ; switch strategies available:
  8157                           ; Name         Instructions Cycles
  8158                           ; simple_byte            4     3 (average)
  8159                           ;	Chosen strategy is simple_byte
  8160  000488  0100               	movlb	0	; () banked
  8161  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  8162  00048C  0A00               	xorlw	0	; case 0
  8163  00048E  A4D8               	btfss	status,2,c
  8164  000490  D7E6               	goto	l8769
  8165                           
  8166                           ; BSR set to: 0
  8167                           ; Switch size 1, requested type "space"
  8168                           ; Number of cases is 12, Range of values is 1 to 12
  8169                           ; switch strategies available:
  8170                           ; Name         Instructions Cycles
  8171                           ; simple_byte           37    19 (average)
  8172                           ;	Chosen strategy is simple_byte
  8173  000492  0100               	movlb	0	; () banked
  8174  000494  51C4               	movf	??_UI& (0+255),w,b
  8175  000496  0A01               	xorlw	1	; case 1
  8176  000498  B4D8               	btfsc	status,2,c
  8177  00049A  D72D               	goto	l8745
  8178  00049C  0A03               	xorlw	3	; case 2
  8179  00049E  B4D8               	btfsc	status,2,c
  8180  0004A0  D739               	goto	l8747
  8181  0004A2  0A01               	xorlw	1	; case 3
  8182  0004A4  B4D8               	btfsc	status,2,c
  8183  0004A6  D745               	goto	l8749
  8184  0004A8  0A07               	xorlw	7	; case 4
  8185  0004AA  B4D8               	btfsc	status,2,c
  8186  0004AC  D751               	goto	l8751
  8187  0004AE  0A01               	xorlw	1	; case 5
  8188  0004B0  B4D8               	btfsc	status,2,c
  8189  0004B2  D75D               	goto	l8753
  8190  0004B4  0A03               	xorlw	3	; case 6
  8191  0004B6  B4D8               	btfsc	status,2,c
  8192  0004B8  D769               	goto	l8755
  8193  0004BA  0A01               	xorlw	1	; case 7
  8194  0004BC  B4D8               	btfsc	status,2,c
  8195  0004BE  D775               	goto	l8757
  8196  0004C0  0A0F               	xorlw	15	; case 8
  8197  0004C2  B4D8               	btfsc	status,2,c
  8198  0004C4  D781               	goto	l8759
  8199  0004C6  0A01               	xorlw	1	; case 9
  8200  0004C8  B4D8               	btfsc	status,2,c
  8201  0004CA  D78D               	goto	l8761
  8202  0004CC  0A03               	xorlw	3	; case 10
  8203  0004CE  B4D8               	btfsc	status,2,c
  8204  0004D0  D799               	goto	l8763
  8205  0004D2  0A01               	xorlw	1	; case 11
  8206  0004D4  B4D8               	btfsc	status,2,c
  8207  0004D6  D7A5               	goto	l8765
  8208  0004D8  0A07               	xorlw	7	; case 12
  8209  0004DA  B4D8               	btfsc	status,2,c
  8210  0004DC  D7B1               	goto	l8767
  8211  0004DE  D7BF               	goto	l8769
  8212  0004E0                     l8775:
  8213                           
  8214                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8215  0004E0  0EE8               	movlw	low STR_21
  8216  0004E2  0100               	movlb	0	; () banked
  8217  0004E4  6F8E               	movwf	printf@f& (0+255),b
  8218  0004E6  0EFA               	movlw	high STR_21
  8219  0004E8  0100               	movlb	0	; () banked
  8220  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8221  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  8222  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  8223  0004F4  0ED6               	movlw	low UI@month
  8224  0004F6  0100               	movlb	0	; () banked
  8225  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  8226  0004FA  0E00               	movlw	high UI@month
  8227  0004FC  0100               	movlb	0	; () banked
  8228  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  8229  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  8230  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  8231  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  8232  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  8233  000510  C100  F098         	movff	_log_startTime,?_printf+10
  8234  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  8235  000518  EC1B  F00B         	call	_printf	;wreg free
  8236                           
  8237                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8238  00051C  0E00               	movlw	0
  8239  00051E  0100               	movlb	0	; () banked
  8240  000520  6FCC               	movwf	UI@i_431& (0+255),b
  8241  000522                     l8779:
  8242                           
  8243                           ; BSR set to: 0
  8244  000522  0E63               	movlw	99
  8245  000524  0100               	movlb	0	; () banked
  8246  000526  65CC               	cpfsgt	UI@i_431& (0+255),b
  8247  000528  D001               	goto	l8783
  8248  00052A  D00C               	goto	l8787
  8249  00052C                     l8783:
  8250                           
  8251                           ; BSR set to: 0
  8252  00052C  0E68               	movlw	104
  8253  00052E  0100               	movlb	0	; () banked
  8254  000530  6FC4               	movwf	??_UI& (0+255),b
  8255  000532  0EE4               	movlw	228
  8256  000534                     u9407:
  8257  000534  2EE8               	decfsz	wreg,f,c
  8258  000536  D7FE               	bra	u9407
  8259  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  8260  00053A  D7FC               	bra	u9407
  8261  00053C  F000               	nop	
  8262  00053E  0100               	movlb	0	; () banked
  8263  000540  2BCC               	incf	UI@i_431& (0+255),f,b
  8264  000542  D7EF               	goto	l8779
  8265  000544                     l8787:
  8266                           
  8267                           ; BSR set to: 0
  8268  000544  0100               	movlb	0	; () banked
  8269  000546  51F8               	movf	_logstate& (0+255),w,b
  8270  000548  0100               	movlb	0	; () banked
  8271  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8272  00054C  B4D8               	btfsc	status,2,c
  8273  00054E  0012               	return	
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8277                           
  8278                           ; BSR set to: 0
  8279                           
  8280                           ; BSR set to: 0
  8281  000550  0E00               	movlw	0
  8282  000552  0100               	movlb	0	; () banked
  8283  000554  6FCD               	movwf	UI@i_432& (0+255),b
  8284  000556                     l8793:
  8285                           
  8286                           ; BSR set to: 0
  8287  000556  0E63               	movlw	99
  8288  000558  0100               	movlb	0	; () banked
  8289  00055A  65CD               	cpfsgt	UI@i_432& (0+255),b
  8290  00055C  D001               	goto	l8797
  8291  00055E  D00C               	goto	l8801
  8292  000560                     l8797:
  8293                           
  8294                           ; BSR set to: 0
  8295  000560  0E68               	movlw	104
  8296  000562  0100               	movlb	0	; () banked
  8297  000564  6FC4               	movwf	??_UI& (0+255),b
  8298  000566  0EE4               	movlw	228
  8299  000568                     u9417:
  8300  000568  2EE8               	decfsz	wreg,f,c
  8301  00056A  D7FE               	bra	u9417
  8302  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  8303  00056E  D7FC               	bra	u9417
  8304  000570  F000               	nop	
  8305  000572  0100               	movlb	0	; () banked
  8306  000574  2BCD               	incf	UI@i_432& (0+255),f,b
  8307  000576  D7EF               	goto	l8793
  8308  000578                     l8801:
  8309                           
  8310                           ; BSR set to: 0
  8311  000578  0100               	movlb	0	; () banked
  8312  00057A  51F8               	movf	_logstate& (0+255),w,b
  8313  00057C  0100               	movlb	0	; () banked
  8314  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8315  000580  B4D8               	btfsc	status,2,c
  8316  000582  0012               	return	
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8320                           
  8321                           ; BSR set to: 0
  8322                           
  8323                           ; BSR set to: 0
  8324  000584  0E01               	movlw	1
  8325  000586  EC15  F02A         	call	_lcdInst
  8326  00058A  0E68               	movlw	104
  8327  00058C  0100               	movlb	0	; () banked
  8328  00058E  6FC4               	movwf	??_UI& (0+255),b
  8329  000590  0EE4               	movlw	228
  8330  000592                     u9427:
  8331  000592  2EE8               	decfsz	wreg,f,c
  8332  000594  D7FE               	bra	u9427
  8333  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  8334  000598  D7FC               	bra	u9427
  8335  00059A  F000               	nop	
  8336                           
  8337                           ;UI.c: 176: lcdInst(0b10000000);;
  8338  00059C  0E80               	movlw	128
  8339  00059E  EC15  F02A         	call	_lcdInst
  8340                           
  8341                           ;UI.c: 177: printf("DURATION:");
  8342  0005A2  0E9B               	movlw	low STR_22
  8343  0005A4  0100               	movlb	0	; () banked
  8344  0005A6  6F8E               	movwf	printf@f& (0+255),b
  8345  0005A8  0EFF               	movlw	high STR_22
  8346  0005AA  0100               	movlb	0	; () banked
  8347  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8348  0005AE  EC1B  F00B         	call	_printf	;wreg free
  8349                           
  8350                           ;UI.c: 178: lcdInst(0b11000000);;
  8351  0005B2  0EC0               	movlw	192
  8352  0005B4  EC15  F02A         	call	_lcdInst
  8353                           
  8354                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8355  0005B8  0E0E               	movlw	14
  8356  0005BA  0100               	movlb	0	; () banked
  8357  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8358  0005BE  0E10               	movlw	16
  8359  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  8360  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8361  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8362  0005CA  ECC0  F022         	call	___awmod	;wreg free
  8363  0005CE  C080  F0C6         	movff	?___awmod,_UI$2402
  8364  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2402+1
  8365                           
  8366                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8367  0005D6  0E19               	movlw	low STR_23
  8368  0005D8  0100               	movlb	0	; () banked
  8369  0005DA  6F8E               	movwf	printf@f& (0+255),b
  8370  0005DC  0EFF               	movlw	high STR_23
  8371  0005DE  0100               	movlb	0	; () banked
  8372  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8373  0005E2  0E0E               	movlw	14
  8374  0005E4  0100               	movlb	0	; () banked
  8375  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8376  0005E8  0E10               	movlw	16
  8377  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  8378  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8379  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8380  0005F4  ECC0  F022         	call	___awmod	;wreg free
  8381  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  8382  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8383  000600  0E00               	movlw	0
  8384  000602  0100               	movlb	0	; () banked
  8385  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8386  000606  0E3C               	movlw	60
  8387  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  8388  00060A  EC50  F021         	call	___awdiv	;wreg free
  8389  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  8390  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  8391  000616  C0C6  F080         	movff	_UI$2402,___awmod@dividend
  8392  00061A  C0C7  F081         	movff	_UI$2402+1,___awmod@dividend+1
  8393  00061E  0E00               	movlw	0
  8394  000620  0100               	movlb	0	; () banked
  8395  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8396  000624  0E3C               	movlw	60
  8397  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  8398  000628  ECC0  F022         	call	___awmod	;wreg free
  8399  00062C  C080  F092         	movff	?___awmod,?_printf+4
  8400  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  8401  000634  EC1B  F00B         	call	_printf	;wreg free
  8402                           
  8403                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8404  000638  0E00               	movlw	0
  8405  00063A  0100               	movlb	0	; () banked
  8406  00063C  6FCE               	movwf	UI@i_435& (0+255),b
  8407  00063E                     l8821:
  8408                           
  8409                           ; BSR set to: 0
  8410  00063E  0E63               	movlw	99
  8411  000640  0100               	movlb	0	; () banked
  8412  000642  65CE               	cpfsgt	UI@i_435& (0+255),b
  8413  000644  D001               	goto	l8825
  8414  000646  D00C               	goto	l8829
  8415  000648                     l8825:
  8416                           
  8417                           ; BSR set to: 0
  8418  000648  0E68               	movlw	104
  8419  00064A  0100               	movlb	0	; () banked
  8420  00064C  6FC4               	movwf	??_UI& (0+255),b
  8421  00064E  0EE4               	movlw	228
  8422  000650                     u9437:
  8423  000650  2EE8               	decfsz	wreg,f,c
  8424  000652  D7FE               	bra	u9437
  8425  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  8426  000656  D7FC               	bra	u9437
  8427  000658  F000               	nop	
  8428  00065A  0100               	movlb	0	; () banked
  8429  00065C  2BCE               	incf	UI@i_435& (0+255),f,b
  8430  00065E  D7EF               	goto	l8821
  8431  000660                     l8829:
  8432                           
  8433                           ; BSR set to: 0
  8434  000660  0100               	movlb	0	; () banked
  8435  000662  51F8               	movf	_logstate& (0+255),w,b
  8436  000664  0100               	movlb	0	; () banked
  8437  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8438  000668  B4D8               	btfsc	status,2,c
  8439  00066A  0012               	return	
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8443                           
  8444                           ; BSR set to: 0
  8445                           
  8446                           ; BSR set to: 0
  8447  00066C  0E00               	movlw	0
  8448  00066E  0100               	movlb	0	; () banked
  8449  000670  6FCF               	movwf	UI@i_436& (0+255),b
  8450  000672                     l8835:
  8451                           
  8452                           ; BSR set to: 0
  8453  000672  0E63               	movlw	99
  8454  000674  0100               	movlb	0	; () banked
  8455  000676  65CF               	cpfsgt	UI@i_436& (0+255),b
  8456  000678  D001               	goto	l8839
  8457  00067A  D00C               	goto	l8843
  8458  00067C                     l8839:
  8459                           
  8460                           ; BSR set to: 0
  8461  00067C  0E68               	movlw	104
  8462  00067E  0100               	movlb	0	; () banked
  8463  000680  6FC4               	movwf	??_UI& (0+255),b
  8464  000682  0EE4               	movlw	228
  8465  000684                     u9447:
  8466  000684  2EE8               	decfsz	wreg,f,c
  8467  000686  D7FE               	bra	u9447
  8468  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  8469  00068A  D7FC               	bra	u9447
  8470  00068C  F000               	nop	
  8471  00068E  0100               	movlb	0	; () banked
  8472  000690  2BCF               	incf	UI@i_436& (0+255),f,b
  8473  000692  D7EF               	goto	l8835
  8474  000694                     l8843:
  8475                           
  8476                           ; BSR set to: 0
  8477  000694  0100               	movlb	0	; () banked
  8478  000696  51F8               	movf	_logstate& (0+255),w,b
  8479  000698  0100               	movlb	0	; () banked
  8480  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8481  00069C  B4D8               	btfsc	status,2,c
  8482  00069E  0012               	return	
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8486                           
  8487                           ; BSR set to: 0
  8488                           
  8489                           ; BSR set to: 0
  8490  0006A0  0E01               	movlw	1
  8491  0006A2  EC15  F02A         	call	_lcdInst
  8492  0006A6  0E68               	movlw	104
  8493  0006A8  0100               	movlb	0	; () banked
  8494  0006AA  6FC4               	movwf	??_UI& (0+255),b
  8495  0006AC  0EE4               	movlw	228
  8496  0006AE                     u9457:
  8497  0006AE  2EE8               	decfsz	wreg,f,c
  8498  0006B0  D7FE               	bra	u9457
  8499  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  8500  0006B4  D7FC               	bra	u9457
  8501  0006B6  F000               	nop	
  8502                           
  8503                           ;UI.c: 185: lcdInst(0b10000000);;
  8504  0006B8  0E80               	movlw	128
  8505  0006BA  EC15  F02A         	call	_lcdInst
  8506                           
  8507                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  8508  0006BE  0E3C               	movlw	low STR_24
  8509  0006C0  0100               	movlb	0	; () banked
  8510  0006C2  6F8E               	movwf	printf@f& (0+255),b
  8511  0006C4  0EFD               	movlw	high STR_24
  8512  0006C6  0100               	movlb	0	; () banked
  8513  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8514  0006CA  EC1B  F00B         	call	_printf	;wreg free
  8515                           
  8516                           ;UI.c: 187: lcdInst(0b11000000);;
  8517  0006CE  0EC0               	movlw	192
  8518  0006D0  EC15  F02A         	call	_lcdInst
  8519                           
  8520                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8521  0006D4  0E19               	movlw	low STR_25
  8522  0006D6  0100               	movlb	0	; () banked
  8523  0006D8  6F8E               	movwf	printf@f& (0+255),b
  8524  0006DA  0EFE               	movlw	high STR_25
  8525  0006DC  0100               	movlb	0	; () banked
  8526  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8527  0006E0  C065  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8528  0006E4  C066  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8529  0006E8  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8530  0006EC  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8531  0006F0  EC1B  F00B         	call	_printf	;wreg free
  8532                           
  8533                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8534  0006F4  0E00               	movlw	0
  8535  0006F6  0100               	movlb	0	; () banked
  8536  0006F8  6FD0               	movwf	UI@i_439& (0+255),b
  8537  0006FA                     l8861:
  8538                           
  8539                           ; BSR set to: 0
  8540  0006FA  0E63               	movlw	99
  8541  0006FC  0100               	movlb	0	; () banked
  8542  0006FE  65D0               	cpfsgt	UI@i_439& (0+255),b
  8543  000700  D001               	goto	l8865
  8544  000702  D00C               	goto	l8869
  8545  000704                     l8865:
  8546                           
  8547                           ; BSR set to: 0
  8548  000704  0E68               	movlw	104
  8549  000706  0100               	movlb	0	; () banked
  8550  000708  6FC4               	movwf	??_UI& (0+255),b
  8551  00070A  0EE4               	movlw	228
  8552  00070C                     u9467:
  8553  00070C  2EE8               	decfsz	wreg,f,c
  8554  00070E  D7FE               	bra	u9467
  8555  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  8556  000712  D7FC               	bra	u9467
  8557  000714  F000               	nop	
  8558  000716  0100               	movlb	0	; () banked
  8559  000718  2BD0               	incf	UI@i_439& (0+255),f,b
  8560  00071A  D7EF               	goto	l8861
  8561  00071C                     l8869:
  8562                           
  8563                           ; BSR set to: 0
  8564  00071C  0100               	movlb	0	; () banked
  8565  00071E  51F8               	movf	_logstate& (0+255),w,b
  8566  000720  0100               	movlb	0	; () banked
  8567  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8568  000724  B4D8               	btfsc	status,2,c
  8569  000726  0012               	return	
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8573                           
  8574                           ; BSR set to: 0
  8575                           
  8576                           ; BSR set to: 0
  8577  000728  0E00               	movlw	0
  8578  00072A  0100               	movlb	0	; () banked
  8579  00072C  6FD1               	movwf	UI@i_440& (0+255),b
  8580  00072E                     l8875:
  8581                           
  8582                           ; BSR set to: 0
  8583  00072E  0E63               	movlw	99
  8584  000730  0100               	movlb	0	; () banked
  8585  000732  65D1               	cpfsgt	UI@i_440& (0+255),b
  8586  000734  D001               	goto	l8879
  8587  000736  D00C               	goto	l8883
  8588  000738                     l8879:
  8589                           
  8590                           ; BSR set to: 0
  8591  000738  0E68               	movlw	104
  8592  00073A  0100               	movlb	0	; () banked
  8593  00073C  6FC4               	movwf	??_UI& (0+255),b
  8594  00073E  0EE4               	movlw	228
  8595  000740                     u9477:
  8596  000740  2EE8               	decfsz	wreg,f,c
  8597  000742  D7FE               	bra	u9477
  8598  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  8599  000746  D7FC               	bra	u9477
  8600  000748  F000               	nop	
  8601  00074A  0100               	movlb	0	; () banked
  8602  00074C  2BD1               	incf	UI@i_440& (0+255),f,b
  8603  00074E  D7EF               	goto	l8875
  8604  000750                     l8883:
  8605                           
  8606                           ; BSR set to: 0
  8607  000750  0100               	movlb	0	; () banked
  8608  000752  51F8               	movf	_logstate& (0+255),w,b
  8609  000754  0100               	movlb	0	; () banked
  8610  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8611  000758  B4D8               	btfsc	status,2,c
  8612  00075A  0012               	return	
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8616                           
  8617                           ; BSR set to: 0
  8618                           
  8619                           ; BSR set to: 0
  8620  00075C  0E01               	movlw	1
  8621  00075E  EC15  F02A         	call	_lcdInst
  8622  000762  0E68               	movlw	104
  8623  000764  0100               	movlb	0	; () banked
  8624  000766  6FC4               	movwf	??_UI& (0+255),b
  8625  000768  0EE4               	movlw	228
  8626  00076A                     u9487:
  8627  00076A  2EE8               	decfsz	wreg,f,c
  8628  00076C  D7FE               	bra	u9487
  8629  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  8630  000770  D7FC               	bra	u9487
  8631  000772  F000               	nop	
  8632                           
  8633                           ;UI.c: 194: lcdInst(0b10000000);;
  8634  000774  0E80               	movlw	128
  8635  000776  EC15  F02A         	call	_lcdInst
  8636                           
  8637                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  8638  00077A  0E4D               	movlw	low STR_26
  8639  00077C  0100               	movlb	0	; () banked
  8640  00077E  6F8E               	movwf	printf@f& (0+255),b
  8641  000780  0EFD               	movlw	high STR_26
  8642  000782  0100               	movlb	0	; () banked
  8643  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  8644  000786  EC1B  F00B         	call	_printf	;wreg free
  8645                           
  8646                           ;UI.c: 196: lcdInst(0b11000000);;
  8647  00078A  0EC0               	movlw	192
  8648  00078C  EC15  F02A         	call	_lcdInst
  8649                           
  8650                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8651  000790  0E08               	movlw	low STR_27
  8652  000792  0100               	movlb	0	; () banked
  8653  000794  6F8E               	movwf	printf@f& (0+255),b
  8654  000796  0EFE               	movlw	high STR_27
  8655  000798  0100               	movlb	0	; () banked
  8656  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8657  00079C  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8658  0007A0  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8659  0007A4  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  8660  0007A8  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8661  0007AC  EC1B  F00B         	call	_printf	;wreg free
  8662                           
  8663                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8664  0007B0  0E00               	movlw	0
  8665  0007B2  0100               	movlb	0	; () banked
  8666  0007B4  6FD2               	movwf	UI@i_443& (0+255),b
  8667  0007B6                     l8901:
  8668                           
  8669                           ; BSR set to: 0
  8670  0007B6  0E63               	movlw	99
  8671  0007B8  0100               	movlb	0	; () banked
  8672  0007BA  65D2               	cpfsgt	UI@i_443& (0+255),b
  8673  0007BC  D001               	goto	l8905
  8674  0007BE  D00C               	goto	l8909
  8675  0007C0                     l8905:
  8676                           
  8677                           ; BSR set to: 0
  8678  0007C0  0E68               	movlw	104
  8679  0007C2  0100               	movlb	0	; () banked
  8680  0007C4  6FC4               	movwf	??_UI& (0+255),b
  8681  0007C6  0EE4               	movlw	228
  8682  0007C8                     u9497:
  8683  0007C8  2EE8               	decfsz	wreg,f,c
  8684  0007CA  D7FE               	bra	u9497
  8685  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  8686  0007CE  D7FC               	bra	u9497
  8687  0007D0  F000               	nop	
  8688  0007D2  0100               	movlb	0	; () banked
  8689  0007D4  2BD2               	incf	UI@i_443& (0+255),f,b
  8690  0007D6  D7EF               	goto	l8901
  8691  0007D8                     l8909:
  8692                           
  8693                           ; BSR set to: 0
  8694  0007D8  0100               	movlb	0	; () banked
  8695  0007DA  51F8               	movf	_logstate& (0+255),w,b
  8696  0007DC  0100               	movlb	0	; () banked
  8697  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8698  0007E0  B4D8               	btfsc	status,2,c
  8699  0007E2  0012               	return	
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8703                           
  8704                           ; BSR set to: 0
  8705                           
  8706                           ; BSR set to: 0
  8707  0007E4  0E00               	movlw	0
  8708  0007E6  0100               	movlb	0	; () banked
  8709  0007E8  6FD3               	movwf	UI@i_444& (0+255),b
  8710  0007EA                     l8915:
  8711                           
  8712                           ; BSR set to: 0
  8713  0007EA  0E63               	movlw	99
  8714  0007EC  0100               	movlb	0	; () banked
  8715  0007EE  65D3               	cpfsgt	UI@i_444& (0+255),b
  8716  0007F0  D001               	goto	l8919
  8717  0007F2  D00C               	goto	l8923
  8718  0007F4                     l8919:
  8719                           
  8720                           ; BSR set to: 0
  8721  0007F4  0E68               	movlw	104
  8722  0007F6  0100               	movlb	0	; () banked
  8723  0007F8  6FC4               	movwf	??_UI& (0+255),b
  8724  0007FA  0EE4               	movlw	228
  8725  0007FC                     u9507:
  8726  0007FC  2EE8               	decfsz	wreg,f,c
  8727  0007FE  D7FE               	bra	u9507
  8728  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  8729  000802  D7FC               	bra	u9507
  8730  000804  F000               	nop	
  8731  000806  0100               	movlb	0	; () banked
  8732  000808  2BD3               	incf	UI@i_444& (0+255),f,b
  8733  00080A  D7EF               	goto	l8915
  8734  00080C                     l8923:
  8735                           
  8736                           ; BSR set to: 0
  8737  00080C  0100               	movlb	0	; () banked
  8738  00080E  51F8               	movf	_logstate& (0+255),w,b
  8739  000810  0100               	movlb	0	; () banked
  8740  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8741  000814  B4D8               	btfsc	status,2,c
  8742  000816  0012               	return	
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8746                           
  8747                           ; BSR set to: 0
  8748                           
  8749                           ; BSR set to: 0
  8750  000818  0E01               	movlw	1
  8751  00081A  EC15  F02A         	call	_lcdInst
  8752  00081E  0E68               	movlw	104
  8753  000820  0100               	movlb	0	; () banked
  8754  000822  6FC4               	movwf	??_UI& (0+255),b
  8755  000824  0EE4               	movlw	228
  8756  000826                     u9517:
  8757  000826  2EE8               	decfsz	wreg,f,c
  8758  000828  D7FE               	bra	u9517
  8759  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
  8760  00082C  D7FC               	bra	u9517
  8761  00082E  F000               	nop	
  8762                           
  8763                           ;UI.c: 203: lcdInst(0b10000000);;
  8764  000830  0E80               	movlw	128
  8765  000832  EC15  F02A         	call	_lcdInst
  8766                           
  8767                           ;UI.c: 204: printf("-- TOTAL CANS --");
  8768  000836  0E5E               	movlw	low STR_28
  8769  000838  0100               	movlb	0	; () banked
  8770  00083A  6F8E               	movwf	printf@f& (0+255),b
  8771  00083C  0EFD               	movlw	high STR_28
  8772  00083E  0100               	movlb	0	; () banked
  8773  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
  8774  000842  EC1B  F00B         	call	_printf	;wreg free
  8775                           
  8776                           ;UI.c: 205: lcdInst(0b11000000);;
  8777  000846  0EC0               	movlw	192
  8778  000848  EC15  F02A         	call	_lcdInst
  8779                           
  8780                           ;UI.c: 206: printf("%d", log_count_total);
  8781  00084C  0E16               	movlw	low (STR_27+14)
  8782  00084E  0100               	movlb	0	; () banked
  8783  000850  6F8E               	movwf	printf@f& (0+255),b
  8784  000852  0EFE               	movlw	high (STR_27+14)
  8785  000854  0100               	movlb	0	; () banked
  8786  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
  8787  000858  C143  F090         	movff	_log_count_total,?_printf+2
  8788  00085C  C144  F091         	movff	_log_count_total+1,?_printf+3
  8789  000860  EC1B  F00B         	call	_printf	;wreg free
  8790                           
  8791                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8792  000864  0E00               	movlw	0
  8793  000866  0100               	movlb	0	; () banked
  8794  000868  6FD4               	movwf	UI@i_447& (0+255),b
  8795  00086A                     l8941:
  8796                           
  8797                           ; BSR set to: 0
  8798  00086A  0E63               	movlw	99
  8799  00086C  0100               	movlb	0	; () banked
  8800  00086E  65D4               	cpfsgt	UI@i_447& (0+255),b
  8801  000870  D001               	goto	l8945
  8802  000872  D00C               	goto	l8949
  8803  000874                     l8945:
  8804                           
  8805                           ; BSR set to: 0
  8806  000874  0E68               	movlw	104
  8807  000876  0100               	movlb	0	; () banked
  8808  000878  6FC4               	movwf	??_UI& (0+255),b
  8809  00087A  0EE4               	movlw	228
  8810  00087C                     u9527:
  8811  00087C  2EE8               	decfsz	wreg,f,c
  8812  00087E  D7FE               	bra	u9527
  8813  000880  2FC4               	decfsz	??_UI& (0+255),f,b
  8814  000882  D7FC               	bra	u9527
  8815  000884  F000               	nop	
  8816  000886  0100               	movlb	0	; () banked
  8817  000888  2BD4               	incf	UI@i_447& (0+255),f,b
  8818  00088A  D7EF               	goto	l8941
  8819  00088C                     l8949:
  8820                           
  8821                           ; BSR set to: 0
  8822  00088C  0100               	movlb	0	; () banked
  8823  00088E  51F8               	movf	_logstate& (0+255),w,b
  8824  000890  0100               	movlb	0	; () banked
  8825  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8826  000894  B4D8               	btfsc	status,2,c
  8827  000896  0012               	return	
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8831                           
  8832                           ; BSR set to: 0
  8833                           
  8834                           ; BSR set to: 0
  8835  000898  0E00               	movlw	0
  8836  00089A  0100               	movlb	0	; () banked
  8837  00089C  6FD5               	movwf	UI@i_448& (0+255),b
  8838  00089E                     l8955:
  8839                           
  8840                           ; BSR set to: 0
  8841  00089E  0E63               	movlw	99
  8842  0008A0  0100               	movlb	0	; () banked
  8843  0008A2  65D5               	cpfsgt	UI@i_448& (0+255),b
  8844  0008A4  D001               	goto	l8959
  8845  0008A6  D00C               	goto	l8963
  8846  0008A8                     l8959:
  8847                           
  8848                           ; BSR set to: 0
  8849  0008A8  0E68               	movlw	104
  8850  0008AA  0100               	movlb	0	; () banked
  8851  0008AC  6FC4               	movwf	??_UI& (0+255),b
  8852  0008AE  0EE4               	movlw	228
  8853  0008B0                     u9537:
  8854  0008B0  2EE8               	decfsz	wreg,f,c
  8855  0008B2  D7FE               	bra	u9537
  8856  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
  8857  0008B6  D7FC               	bra	u9537
  8858  0008B8  F000               	nop	
  8859  0008BA  0100               	movlb	0	; () banked
  8860  0008BC  2BD5               	incf	UI@i_448& (0+255),f,b
  8861  0008BE  D7EF               	goto	l8955
  8862  0008C0                     l8963:
  8863                           
  8864                           ; BSR set to: 0
  8865  0008C0  0100               	movlb	0	; () banked
  8866  0008C2  51F8               	movf	_logstate& (0+255),w,b
  8867  0008C4  0100               	movlb	0	; () banked
  8868  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8869  0008C8  B4D8               	btfsc	status,2,c
  8870  0008CA  0012               	return	
  8871  0008CC                     l8967:
  8872  0008CC  0100               	movlb	0	; () banked
  8873  0008CE  51F8               	movf	_logstate& (0+255),w,b
  8874  0008D0  0100               	movlb	0	; () banked
  8875  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8876  0008D4  B4D8               	btfsc	status,2,c
  8877  0008D6  0012               	return	
  8878  0008D8  D44A               	goto	l8663
  8879  0008DA                     __end_of_UI:
  8880                           	opt stack 0
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           intcon	equ	0xFF2
  8888                           intcon2	equ	0xFF1
  8889                           intcon3	equ	0xFF0
  8890                           postinc0	equ	0xFEE
  8891                           wreg	equ	0xFE8
  8892                           postdec1	equ	0xFE5
  8893                           fsr1l	equ	0xFE1
  8894                           indf2	equ	0xFDF
  8895                           postinc2	equ	0xFDE
  8896                           postdec2	equ	0xFDD
  8897                           fsr2h	equ	0xFDA
  8898                           fsr2l	equ	0xFD9
  8899                           status	equ	0xFD8
  8900                           
  8901 ;; *************** function _printRTC *****************
  8902 ;; Defined at:
  8903 ;;		line 63 in file "RTC.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;		None
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  i               2   66[BANK0 ] int 
  8908 ;;  INT_time       14   46[BANK0 ] int [7]
  8909 ;;  month           4   62[BANK0 ] unsigned char [4]
  8910 ;;  RTC_month       2   60[BANK0 ] int 
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;Total ram usage:       25 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:   10
  8927 ;; This function calls:
  8928 ;;		_getRTC
  8929 ;;		_lcdInst
  8930 ;;		_printf
  8931 ;;		_strcpy
  8932 ;; This function is called by:
  8933 ;;		_UI
  8934 ;;		_change_state_to_menu_start
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           	psect	text24
  8939  00245E                     __ptext24:
  8940                           	opt stack 0
  8941  00245E                     _printRTC:
  8942                           	opt stack 18
  8943                           
  8944                           ;RTC.c: 64: getRTC();
  8945                           
  8946                           ; BSR set to: 0
  8947                           ;incstack = 0
  8948  00245E  EC57  F023         	call	_getRTC	;wreg free
  8949                           
  8950                           ;RTC.c: 65: char month[] = "MMM";
  8951  002462  C14B  F0BE         	movff	printRTC@F3229,printRTC@month
  8952  002466  C14C  F0BF         	movff	printRTC@F3229+1,printRTC@month+1
  8953  00246A  C14D  F0C0         	movff	printRTC@F3229+2,printRTC@month+2
  8954  00246E  C14E  F0C1         	movff	printRTC@F3229+3,printRTC@month+3
  8955                           
  8956                           ;RTC.c: 66: int INT_time[7];
  8957                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8958  002472  0E00               	movlw	0
  8959  002474  0100               	movlb	0	; () banked
  8960  002476  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8961  002478  0E00               	movlw	0
  8962  00247A  6FC2               	movwf	printRTC@i& (0+255),b
  8963                           
  8964                           ; BSR set to: 0
  8965  00247C  0100               	movlb	0	; () banked
  8966  00247E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8967  002480  D008               	goto	l6711
  8968  002482  0100               	movlb	0	; () banked
  8969  002484  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8970  002486  E146               	bnz	l616
  8971  002488  0E07               	movlw	7
  8972  00248A  0100               	movlb	0	; () banked
  8973  00248C  5DC2               	subwf	printRTC@i& (0+255),w,b
  8974  00248E  B0D8               	btfsc	status,0,c
  8975  002490  D041               	goto	l616
  8976  002492                     l6711:
  8977                           
  8978                           ; BSR set to: 0
  8979                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8980  002492  0E1C               	movlw	low _time
  8981  002494  0100               	movlb	0	; () banked
  8982  002496  25C2               	addwf	printRTC@i& (0+255),w,b
  8983  002498  6ED9               	movwf	fsr2l,c
  8984  00249A  0E01               	movlw	high _time
  8985  00249C  0100               	movlb	0	; () banked
  8986  00249E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8987  0024A0  6EDA               	movwf	fsr2h,c
  8988  0024A2  50DF               	movf	indf2,w,c
  8989  0024A4  0100               	movlb	0	; () banked
  8990  0024A6  6FAB               	movwf	??_printRTC& (0+255),b
  8991  0024A8  0100               	movlb	0	; () banked
  8992  0024AA  3BAB               	swapf	??_printRTC& (0+255),f,b
  8993  0024AC  0E0F               	movlw	15
  8994  0024AE  17AB               	andwf	??_printRTC& (0+255),f,b
  8995  0024B0  0E0F               	movlw	15
  8996  0024B2  0100               	movlb	0	; () banked
  8997  0024B4  17AB               	andwf	??_printRTC& (0+255),f,b
  8998  0024B6  0100               	movlb	0	; () banked
  8999  0024B8  51AB               	movf	??_printRTC& (0+255),w,b
  9000  0024BA  0D0A               	mullw	10
  9001  0024BC  0E1C               	movlw	low _time
  9002  0024BE  0100               	movlb	0	; () banked
  9003  0024C0  25C2               	addwf	printRTC@i& (0+255),w,b
  9004  0024C2  6ED9               	movwf	fsr2l,c
  9005  0024C4  0E01               	movlw	high _time
  9006  0024C6  0100               	movlb	0	; () banked
  9007  0024C8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9008  0024CA  6EDA               	movwf	fsr2h,c
  9009  0024CC  50DF               	movf	indf2,w,c
  9010  0024CE  0B0F               	andlw	15
  9011  0024D0  0100               	movlb	0	; () banked
  9012  0024D2  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  9013  0024D4  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  9014  0024D6  50F3               	movf	prodl,w,c
  9015  0024D8  0100               	movlb	0	; () banked
  9016  0024DA  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  9017  0024DC  50F4               	movf	prodh,w,c
  9018  0024DE  0100               	movlb	0	; () banked
  9019  0024E0  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  9020  0024E2  90D8               	bcf	status,0,c
  9021  0024E4  0100               	movlb	0	; () banked
  9022  0024E6  35C2               	rlcf	printRTC@i& (0+255),w,b
  9023  0024E8  6ED9               	movwf	fsr2l,c
  9024  0024EA  0100               	movlb	0	; () banked
  9025  0024EC  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  9026  0024EE  6EDA               	movwf	fsr2h,c
  9027  0024F0  0EAE               	movlw	low printRTC@INT_time
  9028  0024F2  26D9               	addwf	fsr2l,f,c
  9029  0024F4  0E00               	movlw	high printRTC@INT_time
  9030  0024F6  22DA               	addwfc	fsr2h,f,c
  9031  0024F8  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  9032  0024FC  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  9033                           
  9034                           ; BSR set to: 0
  9035  002500  0100               	movlb	0	; () banked
  9036  002502  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9037  002504  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9038                           
  9039                           ; BSR set to: 0
  9040  002506  0100               	movlb	0	; () banked
  9041  002508  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9042  00250A  D7C3               	goto	l6711
  9043  00250C  0100               	movlb	0	; () banked
  9044  00250E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9045  002510  E101               	bnz	u5400
  9046  002512  D7BA               	goto	L8
  9047  002514                     u5400:
  9048  002514                     l616:
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;RTC.c: 69: }
  9052                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9053  002514  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9054  002518  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9055                           
  9056                           ;RTC.c: 72: switch(RTC_month){
  9057  00251C  D0B4               	goto	l6743
  9058  00251E                     l6717:
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;RTC.c: 74: strcpy(month, "JAN");
  9062  00251E  0EBE               	movlw	low printRTC@month
  9063  002520  0100               	movlb	0	; () banked
  9064  002522  6F80               	movwf	strcpy@to& (0+255),b
  9065  002524  0E00               	movlw	high printRTC@month
  9066  002526  0100               	movlb	0	; () banked
  9067  002528  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9068  00252A  0EDB               	movlw	low STR_8
  9069  00252C  0100               	movlb	0	; () banked
  9070  00252E  6F82               	movwf	strcpy@from& (0+255),b
  9071  002530  0EFF               	movlw	high STR_8
  9072  002532  0100               	movlb	0	; () banked
  9073  002534  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9074  002536  EC70  F027         	call	_strcpy	;wreg free
  9075                           
  9076                           ;RTC.c: 75: break;
  9077  00253A  D0D4               	goto	l6745
  9078  00253C                     l6719:
  9079                           
  9080                           ;RTC.c: 77: strcpy(month, "FEB");
  9081  00253C  0EBE               	movlw	low printRTC@month
  9082  00253E  0100               	movlb	0	; () banked
  9083  002540  6F80               	movwf	strcpy@to& (0+255),b
  9084  002542  0E00               	movlw	high printRTC@month
  9085  002544  0100               	movlb	0	; () banked
  9086  002546  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9087  002548  0ECB               	movlw	low STR_9
  9088  00254A  0100               	movlb	0	; () banked
  9089  00254C  6F82               	movwf	strcpy@from& (0+255),b
  9090  00254E  0EFF               	movlw	high STR_9
  9091  002550  0100               	movlb	0	; () banked
  9092  002552  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9093  002554  EC70  F027         	call	_strcpy	;wreg free
  9094                           
  9095                           ;RTC.c: 78: break;
  9096  002558  D0C5               	goto	l6745
  9097  00255A                     l6721:
  9098                           
  9099                           ;RTC.c: 80: strcpy(month, "MAR");
  9100  00255A  0EBE               	movlw	low printRTC@month
  9101  00255C  0100               	movlb	0	; () banked
  9102  00255E  6F80               	movwf	strcpy@to& (0+255),b
  9103  002560  0E00               	movlw	high printRTC@month
  9104  002562  0100               	movlb	0	; () banked
  9105  002564  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9106  002566  0EE7               	movlw	low STR_10
  9107  002568  0100               	movlb	0	; () banked
  9108  00256A  6F82               	movwf	strcpy@from& (0+255),b
  9109  00256C  0EFF               	movlw	high STR_10
  9110  00256E  0100               	movlb	0	; () banked
  9111  002570  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9112  002572  EC70  F027         	call	_strcpy	;wreg free
  9113                           
  9114                           ;RTC.c: 81: break;
  9115  002576  D0B6               	goto	l6745
  9116  002578                     l6723:
  9117                           
  9118                           ;RTC.c: 83: strcpy(month, "APR");
  9119  002578  0EBE               	movlw	low printRTC@month
  9120  00257A  0100               	movlb	0	; () banked
  9121  00257C  6F80               	movwf	strcpy@to& (0+255),b
  9122  00257E  0E00               	movlw	high printRTC@month
  9123  002580  0100               	movlb	0	; () banked
  9124  002582  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9125  002584  0EEB               	movlw	low STR_11
  9126  002586  0100               	movlb	0	; () banked
  9127  002588  6F82               	movwf	strcpy@from& (0+255),b
  9128  00258A  0EFF               	movlw	high STR_11
  9129  00258C  0100               	movlb	0	; () banked
  9130  00258E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9131  002590  EC70  F027         	call	_strcpy	;wreg free
  9132                           
  9133                           ;RTC.c: 84: break;
  9134  002594  D0A7               	goto	l6745
  9135  002596                     l6725:
  9136                           
  9137                           ;RTC.c: 86: strcpy(month, "MAY");
  9138  002596  0EBE               	movlw	low printRTC@month
  9139  002598  0100               	movlb	0	; () banked
  9140  00259A  6F80               	movwf	strcpy@to& (0+255),b
  9141  00259C  0E00               	movlw	high printRTC@month
  9142  00259E  0100               	movlb	0	; () banked
  9143  0025A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9144  0025A2  0EFB               	movlw	low STR_12
  9145  0025A4  0100               	movlb	0	; () banked
  9146  0025A6  6F82               	movwf	strcpy@from& (0+255),b
  9147  0025A8  0EFF               	movlw	high STR_12
  9148  0025AA  0100               	movlb	0	; () banked
  9149  0025AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9150  0025AE  EC70  F027         	call	_strcpy	;wreg free
  9151                           
  9152                           ;RTC.c: 87: break;
  9153  0025B2  D098               	goto	l6745
  9154  0025B4                     l6727:
  9155                           
  9156                           ;RTC.c: 89: strcpy(month, "JUN");
  9157  0025B4  0EBE               	movlw	low printRTC@month
  9158  0025B6  0100               	movlb	0	; () banked
  9159  0025B8  6F80               	movwf	strcpy@to& (0+255),b
  9160  0025BA  0E00               	movlw	high printRTC@month
  9161  0025BC  0100               	movlb	0	; () banked
  9162  0025BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9163  0025C0  0EDF               	movlw	low STR_13
  9164  0025C2  0100               	movlb	0	; () banked
  9165  0025C4  6F82               	movwf	strcpy@from& (0+255),b
  9166  0025C6  0EFF               	movlw	high STR_13
  9167  0025C8  0100               	movlb	0	; () banked
  9168  0025CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9169  0025CC  EC70  F027         	call	_strcpy	;wreg free
  9170                           
  9171                           ;RTC.c: 90: break;
  9172  0025D0  D089               	goto	l6745
  9173  0025D2                     l6729:
  9174                           
  9175                           ;RTC.c: 92: strcpy(month, "JUL");
  9176  0025D2  0EBE               	movlw	low printRTC@month
  9177  0025D4  0100               	movlb	0	; () banked
  9178  0025D6  6F80               	movwf	strcpy@to& (0+255),b
  9179  0025D8  0E00               	movlw	high printRTC@month
  9180  0025DA  0100               	movlb	0	; () banked
  9181  0025DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9182  0025DE  0ED7               	movlw	low STR_14
  9183  0025E0  0100               	movlb	0	; () banked
  9184  0025E2  6F82               	movwf	strcpy@from& (0+255),b
  9185  0025E4  0EFF               	movlw	high STR_14
  9186  0025E6  0100               	movlb	0	; () banked
  9187  0025E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9188  0025EA  EC70  F027         	call	_strcpy	;wreg free
  9189                           
  9190                           ;RTC.c: 93: break;
  9191  0025EE  D07A               	goto	l6745
  9192  0025F0                     l6731:
  9193                           
  9194                           ;RTC.c: 95: strcpy(month, "AUG");
  9195  0025F0  0EBE               	movlw	low printRTC@month
  9196  0025F2  0100               	movlb	0	; () banked
  9197  0025F4  6F80               	movwf	strcpy@to& (0+255),b
  9198  0025F6  0E00               	movlw	high printRTC@month
  9199  0025F8  0100               	movlb	0	; () banked
  9200  0025FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9201  0025FC  0ED3               	movlw	low STR_15
  9202  0025FE  0100               	movlb	0	; () banked
  9203  002600  6F82               	movwf	strcpy@from& (0+255),b
  9204  002602  0EFF               	movlw	high STR_15
  9205  002604  0100               	movlb	0	; () banked
  9206  002606  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9207  002608  EC70  F027         	call	_strcpy	;wreg free
  9208                           
  9209                           ;RTC.c: 96: break;
  9210  00260C  D06B               	goto	l6745
  9211  00260E                     l6733:
  9212                           
  9213                           ;RTC.c: 98: strcpy(month, "SEP");
  9214  00260E  0EBE               	movlw	low printRTC@month
  9215  002610  0100               	movlb	0	; () banked
  9216  002612  6F80               	movwf	strcpy@to& (0+255),b
  9217  002614  0E00               	movlw	high printRTC@month
  9218  002616  0100               	movlb	0	; () banked
  9219  002618  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9220  00261A  0EE3               	movlw	low STR_16
  9221  00261C  0100               	movlb	0	; () banked
  9222  00261E  6F82               	movwf	strcpy@from& (0+255),b
  9223  002620  0EFF               	movlw	high STR_16
  9224  002622  0100               	movlb	0	; () banked
  9225  002624  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9226  002626  EC70  F027         	call	_strcpy	;wreg free
  9227                           
  9228                           ;RTC.c: 99: break;
  9229  00262A  D05C               	goto	l6745
  9230  00262C                     l6735:
  9231                           
  9232                           ;RTC.c: 101: strcpy(month, "OCT");
  9233  00262C  0EBE               	movlw	low printRTC@month
  9234  00262E  0100               	movlb	0	; () banked
  9235  002630  6F80               	movwf	strcpy@to& (0+255),b
  9236  002632  0E00               	movlw	high printRTC@month
  9237  002634  0100               	movlb	0	; () banked
  9238  002636  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9239  002638  0EF3               	movlw	low STR_17
  9240  00263A  0100               	movlb	0	; () banked
  9241  00263C  6F82               	movwf	strcpy@from& (0+255),b
  9242  00263E  0EFF               	movlw	high STR_17
  9243  002640  0100               	movlb	0	; () banked
  9244  002642  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9245  002644  EC70  F027         	call	_strcpy	;wreg free
  9246                           
  9247                           ;RTC.c: 102: break;
  9248  002648  D04D               	goto	l6745
  9249  00264A                     l6737:
  9250                           
  9251                           ;RTC.c: 104: strcpy(month, "NOV");
  9252  00264A  0EBE               	movlw	low printRTC@month
  9253  00264C  0100               	movlb	0	; () banked
  9254  00264E  6F80               	movwf	strcpy@to& (0+255),b
  9255  002650  0E00               	movlw	high printRTC@month
  9256  002652  0100               	movlb	0	; () banked
  9257  002654  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9258  002656  0EF7               	movlw	low STR_18
  9259  002658  0100               	movlb	0	; () banked
  9260  00265A  6F82               	movwf	strcpy@from& (0+255),b
  9261  00265C  0EFF               	movlw	high STR_18
  9262  00265E  0100               	movlb	0	; () banked
  9263  002660  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9264  002662  EC70  F027         	call	_strcpy	;wreg free
  9265                           
  9266                           ;RTC.c: 105: break;
  9267  002666  D03E               	goto	l6745
  9268  002668                     l6739:
  9269                           
  9270                           ;RTC.c: 107: strcpy(month, "DEC");
  9271  002668  0EBE               	movlw	low printRTC@month
  9272  00266A  0100               	movlb	0	; () banked
  9273  00266C  6F80               	movwf	strcpy@to& (0+255),b
  9274  00266E  0E00               	movlw	high printRTC@month
  9275  002670  0100               	movlb	0	; () banked
  9276  002672  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9277  002674  0ECF               	movlw	low STR_19
  9278  002676  0100               	movlb	0	; () banked
  9279  002678  6F82               	movwf	strcpy@from& (0+255),b
  9280  00267A  0EFF               	movlw	high STR_19
  9281  00267C  0100               	movlb	0	; () banked
  9282  00267E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9283  002680  EC70  F027         	call	_strcpy	;wreg free
  9284                           
  9285                           ;RTC.c: 109: }
  9286                           
  9287                           ;RTC.c: 108: break;
  9288  002684  D02F               	goto	l6745
  9289  002686                     l6743:
  9290  002686  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9291  00268A  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9292                           
  9293                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9294                           ; Switch size 1, requested type "space"
  9295                           ; Number of cases is 1, Range of values is 0 to 0
  9296                           ; switch strategies available:
  9297                           ; Name         Instructions Cycles
  9298                           ; simple_byte            4     3 (average)
  9299                           ;	Chosen strategy is simple_byte
  9300  00268E  0100               	movlb	0	; () banked
  9301  002690  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9302  002692  0A00               	xorlw	0	; case 0
  9303  002694  A4D8               	btfss	status,2,c
  9304  002696  D026               	goto	l6745
  9305                           
  9306                           ; BSR set to: 0
  9307                           ; Switch size 1, requested type "space"
  9308                           ; Number of cases is 12, Range of values is 1 to 12
  9309                           ; switch strategies available:
  9310                           ; Name         Instructions Cycles
  9311                           ; simple_byte           37    19 (average)
  9312                           ;	Chosen strategy is simple_byte
  9313  002698  0100               	movlb	0	; () banked
  9314  00269A  51AB               	movf	??_printRTC& (0+255),w,b
  9315  00269C  0A01               	xorlw	1	; case 1
  9316  00269E  B4D8               	btfsc	status,2,c
  9317  0026A0  D73E               	goto	l6717
  9318  0026A2  0A03               	xorlw	3	; case 2
  9319  0026A4  B4D8               	btfsc	status,2,c
  9320  0026A6  D74A               	goto	l6719
  9321  0026A8  0A01               	xorlw	1	; case 3
  9322  0026AA  B4D8               	btfsc	status,2,c
  9323  0026AC  D756               	goto	l6721
  9324  0026AE  0A07               	xorlw	7	; case 4
  9325  0026B0  B4D8               	btfsc	status,2,c
  9326  0026B2  D762               	goto	l6723
  9327  0026B4  0A01               	xorlw	1	; case 5
  9328  0026B6  B4D8               	btfsc	status,2,c
  9329  0026B8  D76E               	goto	l6725
  9330  0026BA  0A03               	xorlw	3	; case 6
  9331  0026BC  B4D8               	btfsc	status,2,c
  9332  0026BE  D77A               	goto	l6727
  9333  0026C0  0A01               	xorlw	1	; case 7
  9334  0026C2  B4D8               	btfsc	status,2,c
  9335  0026C4  D786               	goto	l6729
  9336  0026C6  0A0F               	xorlw	15	; case 8
  9337  0026C8  B4D8               	btfsc	status,2,c
  9338  0026CA  D792               	goto	l6731
  9339  0026CC  0A01               	xorlw	1	; case 9
  9340  0026CE  B4D8               	btfsc	status,2,c
  9341  0026D0  D79E               	goto	l6733
  9342  0026D2  0A03               	xorlw	3	; case 10
  9343  0026D4  B4D8               	btfsc	status,2,c
  9344  0026D6  D7AA               	goto	l6735
  9345  0026D8  0A01               	xorlw	1	; case 11
  9346  0026DA  B4D8               	btfsc	status,2,c
  9347  0026DC  D7B6               	goto	l6737
  9348  0026DE  0A07               	xorlw	7	; case 12
  9349  0026E0  B4D8               	btfsc	status,2,c
  9350  0026E2  D7C2               	goto	l6739
  9351  0026E4                     l6745:
  9352                           
  9353                           ;RTC.c: 110: lcdInst(0b10000000);;
  9354  0026E4  0E80               	movlw	128
  9355  0026E6  EC15  F02A         	call	_lcdInst
  9356                           
  9357                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9358  0026EA  0EE8               	movlw	low STR_21
  9359  0026EC  0100               	movlb	0	; () banked
  9360  0026EE  6F8E               	movwf	printf@f& (0+255),b
  9361  0026F0  0EFA               	movlw	high STR_21
  9362  0026F2  0100               	movlb	0	; () banked
  9363  0026F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9364  0026F6  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9365  0026FA  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9366  0026FE  0EBE               	movlw	low printRTC@month
  9367  002700  0100               	movlb	0	; () banked
  9368  002702  6F92               	movwf	(?_printf+4)& (0+255),b
  9369  002704  0E00               	movlw	high printRTC@month
  9370  002706  0100               	movlb	0	; () banked
  9371  002708  6F93               	movwf	(?_printf+5)& (0+255),b
  9372  00270A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9373  00270E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9374  002712  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9375  002716  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9376  00271A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9377  00271E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9378  002722  EC1B  F00B         	call	_printf	;wreg free
  9379  002726  0012               	return		;funcret
  9380  002728                     __end_of_printRTC:
  9381                           	opt stack 0
  9382                           tblptru	equ	0xFF8
  9383                           tblptrh	equ	0xFF7
  9384                           tblptrl	equ	0xFF6
  9385                           tablat	equ	0xFF5
  9386                           prodh	equ	0xFF4
  9387                           prodl	equ	0xFF3
  9388                           intcon	equ	0xFF2
  9389                           intcon2	equ	0xFF1
  9390                           intcon3	equ	0xFF0
  9391                           postinc0	equ	0xFEE
  9392                           wreg	equ	0xFE8
  9393                           postdec1	equ	0xFE5
  9394                           fsr1l	equ	0xFE1
  9395                           indf2	equ	0xFDF
  9396                           postinc2	equ	0xFDE
  9397                           postdec2	equ	0xFDD
  9398                           fsr2h	equ	0xFDA
  9399                           fsr2l	equ	0xFD9
  9400                           status	equ	0xFD8
  9401                           
  9402 ;; *************** function _strcpy *****************
  9403 ;; Defined at:
  9404 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9407 ;;		 -> printRTC@month(4), UI@month(4), 
  9408 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9409 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9410 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9411 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9412 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9413 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9414 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9415 ;;		 -> STR_8(4), 
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9418 ;;		 -> printRTC@month(4), UI@month(4), 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  2    0[BANK0 ] PTR unsigned char 
  9421 ;; Registers used:
  9422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9428 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9429 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9431 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9432 ;;Total ram usage:        6 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    7
  9435 ;; This function calls:
  9436 ;;		Nothing
  9437 ;; This function is called by:
  9438 ;;		_UI
  9439 ;;		_printRTC
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text25
  9444  004EE0                     __ptext25:
  9445                           	opt stack 0
  9446  004EE0                     _strcpy:
  9447                           	opt stack 20
  9448                           
  9449                           ;incstack = 0
  9450  004EE0  C080  F084         	movff	strcpy@to,strcpy@cp
  9451  004EE4  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9452  004EE8  D006               	goto	l6451
  9453  004EEA                     l6449:
  9454  004EEA  0100               	movlb	0	; () banked
  9455  004EEC  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9456  004EEE  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9457  004EF0  0100               	movlb	0	; () banked
  9458  004EF2  4B82               	infsnz	strcpy@from& (0+255),f,b
  9459  004EF4  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9460  004EF6                     l6451:
  9461  004EF6  C082  FFF6         	movff	strcpy@from,tblptrl
  9462  004EFA  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9463  004EFE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9464  004EFE  6AF8               	clrf	tblptru,c
  9465  004F00                     	endif
  9466  004F00                     	if	0	;tblptru may be non-zero
  9467  004F00                     	endif
  9468  004F00  C084  FFD9         	movff	strcpy@cp,fsr2l
  9469  004F04  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9470  004F08  0008               	tblrd		*
  9471  004F0A  CFF5 FFDF          	movff	tablat,indf2
  9472  004F0E  50DF               	movf	indf2,w,c
  9473  004F10  B4D8               	btfsc	status,2,c
  9474  004F12  0012               	return	
  9475  004F14  D7EA               	goto	l6449
  9476  004F16                     __end_of_strcpy:
  9477                           	opt stack 0
  9478                           tblptru	equ	0xFF8
  9479                           tblptrh	equ	0xFF7
  9480                           tblptrl	equ	0xFF6
  9481                           tablat	equ	0xFF5
  9482                           prodh	equ	0xFF4
  9483                           prodl	equ	0xFF3
  9484                           intcon	equ	0xFF2
  9485                           intcon2	equ	0xFF1
  9486                           intcon3	equ	0xFF0
  9487                           postinc0	equ	0xFEE
  9488                           wreg	equ	0xFE8
  9489                           postdec1	equ	0xFE5
  9490                           fsr1l	equ	0xFE1
  9491                           indf2	equ	0xFDF
  9492                           postinc2	equ	0xFDE
  9493                           postdec2	equ	0xFDD
  9494                           fsr2h	equ	0xFDA
  9495                           fsr2l	equ	0xFD9
  9496                           status	equ	0xFD8
  9497                           
  9498 ;; *************** function _getRTC *****************
  9499 ;; Defined at:
  9500 ;;		line 44 in file "RTC.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;		None
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  i               2    3[BANK0 ] int 
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      void 
  9507 ;; Registers used:
  9508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;Total ram usage:        2 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    9
  9521 ;; This function calls:
  9522 ;;		_I2C_Master_Read
  9523 ;;		_I2C_Master_Start
  9524 ;;		_I2C_Master_Stop
  9525 ;;		_I2C_Master_Write
  9526 ;; This function is called by:
  9527 ;;		_printRTC
  9528 ;;		_initSortTimer
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text26
  9533  0046AE                     __ptext26:
  9534                           	opt stack 0
  9535  0046AE                     _getRTC:
  9536                           	opt stack 18
  9537                           
  9538                           ;RTC.c: 48: I2C_Master_Start();
  9539                           
  9540                           ;incstack = 0
  9541  0046AE  EC3B  F02A         	call	_I2C_Master_Start	;wreg free
  9542                           
  9543                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9544  0046B2  0E00               	movlw	0
  9545  0046B4  0100               	movlb	0	; () banked
  9546  0046B6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9547  0046B8  0ED0               	movlw	208
  9548  0046BA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9549  0046BC  EC29  F02A         	call	_I2C_Master_Write	;wreg free
  9550                           
  9551                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9552  0046C0  0E00               	movlw	0
  9553  0046C2  0100               	movlb	0	; () banked
  9554  0046C4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9555  0046C6  0E00               	movlw	0
  9556  0046C8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9557  0046CA  EC29  F02A         	call	_I2C_Master_Write	;wreg free
  9558                           
  9559                           ;RTC.c: 51: I2C_Master_Stop();
  9560  0046CE  EC37  F02A         	call	_I2C_Master_Stop	;wreg free
  9561                           
  9562                           ;RTC.c: 54: I2C_Master_Start();
  9563  0046D2  EC3B  F02A         	call	_I2C_Master_Start	;wreg free
  9564                           
  9565                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9566  0046D6  0E00               	movlw	0
  9567  0046D8  0100               	movlb	0	; () banked
  9568  0046DA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9569  0046DC  0ED1               	movlw	209
  9570  0046DE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9571  0046E0  EC29  F02A         	call	_I2C_Master_Write	;wreg free
  9572                           
  9573                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9574  0046E4  0E00               	movlw	0
  9575  0046E6  0100               	movlb	0	; () banked
  9576  0046E8  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9577  0046EA  0E00               	movlw	0
  9578  0046EC  6F83               	movwf	getRTC@i& (0+255),b
  9579  0046EE                     l6457:
  9580                           
  9581                           ; BSR set to: 0
  9582  0046EE  0100               	movlb	0	; () banked
  9583  0046F0  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9584  0046F2  D008               	goto	l6461
  9585  0046F4  0100               	movlb	0	; () banked
  9586  0046F6  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9587  0046F8  E115               	bnz	l6467
  9588  0046FA  0E06               	movlw	6
  9589  0046FC  0100               	movlb	0	; () banked
  9590  0046FE  5D83               	subwf	getRTC@i& (0+255),w,b
  9591  004700  B0D8               	btfsc	status,0,c
  9592  004702  D010               	goto	l6467
  9593  004704                     l6461:
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9597  004704  0E1C               	movlw	low _time
  9598  004706  0100               	movlb	0	; () banked
  9599  004708  2583               	addwf	getRTC@i& (0+255),w,b
  9600  00470A  6ED9               	movwf	fsr2l,c
  9601  00470C  0E01               	movlw	high _time
  9602  00470E  0100               	movlb	0	; () banked
  9603  004710  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9604  004712  6EDA               	movwf	fsr2h,c
  9605  004714  0E01               	movlw	1
  9606  004716  ECC8  F028         	call	_I2C_Master_Read
  9607  00471A  6EDF               	movwf	indf2,c
  9608  00471C  0100               	movlb	0	; () banked
  9609  00471E  4B83               	infsnz	getRTC@i& (0+255),f,b
  9610  004720  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9611  004722  D7E5               	goto	l6457
  9612  004724                     l6467:
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;RTC.c: 58: }
  9616                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9617  004724  0E00               	movlw	0
  9618  004726  ECC8  F028         	call	_I2C_Master_Read
  9619  00472A  0101               	movlb	1	; () banked
  9620  00472C  6F22               	movwf	(_time+6)& (0+255),b
  9621                           
  9622                           ;RTC.c: 60: I2C_Master_Stop();
  9623  00472E  EC37  F02A         	call	_I2C_Master_Stop	;wreg free
  9624  004732  0012               	return		;funcret
  9625  004734                     __end_of_getRTC:
  9626                           	opt stack 0
  9627                           tblptru	equ	0xFF8
  9628                           tblptrh	equ	0xFF7
  9629                           tblptrl	equ	0xFF6
  9630                           tablat	equ	0xFF5
  9631                           prodh	equ	0xFF4
  9632                           prodl	equ	0xFF3
  9633                           intcon	equ	0xFF2
  9634                           intcon2	equ	0xFF1
  9635                           intcon3	equ	0xFF0
  9636                           postinc0	equ	0xFEE
  9637                           wreg	equ	0xFE8
  9638                           postdec1	equ	0xFE5
  9639                           fsr1l	equ	0xFE1
  9640                           indf2	equ	0xFDF
  9641                           postinc2	equ	0xFDE
  9642                           postdec2	equ	0xFDD
  9643                           fsr2h	equ	0xFDA
  9644                           fsr2l	equ	0xFD9
  9645                           status	equ	0xFD8
  9646                           
  9647 ;; *************** function _I2C_Master_Write *****************
  9648 ;; Defined at:
  9649 ;;		line 49 in file "I2C.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  d               2    1[BANK0 ] unsigned int 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;		None
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  1    wreg      void 
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, status,0, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9663 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;Total ram usage:        2 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    8
  9670 ;; This function calls:
  9671 ;;		_I2C_Master_Wait
  9672 ;; This function is called by:
  9673 ;;		_loadRTC
  9674 ;;		_getRTC
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           	psect	text27
  9679  005452                     __ptext27:
  9680                           	opt stack 0
  9681  005452                     _I2C_Master_Write:
  9682                           	opt stack 18
  9683                           
  9684                           ;I2C.c: 51: I2C_Master_Wait();
  9685                           
  9686                           ;incstack = 0
  9687  005452  ECFA  F029         	call	_I2C_Master_Wait	;wreg free
  9688                           
  9689                           ;I2C.c: 52: SSPBUF = d;
  9690  005456  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9691  00545A  0012               	return		;funcret
  9692  00545C                     __end_of_I2C_Master_Write:
  9693                           	opt stack 0
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           intcon2	equ	0xFF1
  9702                           intcon3	equ	0xFF0
  9703                           postinc0	equ	0xFEE
  9704                           wreg	equ	0xFE8
  9705                           postdec1	equ	0xFE5
  9706                           fsr1l	equ	0xFE1
  9707                           indf2	equ	0xFDF
  9708                           postinc2	equ	0xFDE
  9709                           postdec2	equ	0xFDD
  9710                           fsr2h	equ	0xFDA
  9711                           fsr2l	equ	0xFD9
  9712                           status	equ	0xFD8
  9713                           
  9714 ;; *************** function _I2C_Master_Stop *****************
  9715 ;; Defined at:
  9716 ;;		line 43 in file "I2C.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;		None
  9719 ;; Auto vars:     Size  Location     Type
  9720 ;;		None
  9721 ;; Return value:  Size  Location     Type
  9722 ;;                  1    wreg      void 
  9723 ;; Registers used:
  9724 ;;		wreg, status,2, status,0, cstack
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9734 ;;Total ram usage:        0 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    8
  9737 ;; This function calls:
  9738 ;;		_I2C_Master_Wait
  9739 ;; This function is called by:
  9740 ;;		_loadRTC
  9741 ;;		_getRTC
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           	psect	text28
  9746  00546E                     __ptext28:
  9747                           	opt stack 0
  9748  00546E                     _I2C_Master_Stop:
  9749                           	opt stack 18
  9750                           
  9751                           ;I2C.c: 45: I2C_Master_Wait();
  9752                           
  9753                           ;incstack = 0
  9754  00546E  ECFA  F029         	call	_I2C_Master_Wait	;wreg free
  9755                           
  9756                           ;I2C.c: 46: PEN = 1;
  9757  005472  84C5               	bsf	4037,2,c	;volatile
  9758  005474  0012               	return		;funcret
  9759  005476                     __end_of_I2C_Master_Stop:
  9760                           	opt stack 0
  9761                           tblptru	equ	0xFF8
  9762                           tblptrh	equ	0xFF7
  9763                           tblptrl	equ	0xFF6
  9764                           tablat	equ	0xFF5
  9765                           prodh	equ	0xFF4
  9766                           prodl	equ	0xFF3
  9767                           intcon	equ	0xFF2
  9768                           intcon2	equ	0xFF1
  9769                           intcon3	equ	0xFF0
  9770                           postinc0	equ	0xFEE
  9771                           wreg	equ	0xFE8
  9772                           postdec1	equ	0xFE5
  9773                           fsr1l	equ	0xFE1
  9774                           indf2	equ	0xFDF
  9775                           postinc2	equ	0xFDE
  9776                           postdec2	equ	0xFDD
  9777                           fsr2h	equ	0xFDA
  9778                           fsr2l	equ	0xFD9
  9779                           status	equ	0xFD8
  9780                           
  9781 ;; *************** function _I2C_Master_Start *****************
  9782 ;; Defined at:
  9783 ;;		line 31 in file "I2C.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;		None
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;		None
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      void 
  9790 ;; Registers used:
  9791 ;;		wreg, status,2, status,0, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9801 ;;Total ram usage:        0 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    8
  9804 ;; This function calls:
  9805 ;;		_I2C_Master_Wait
  9806 ;; This function is called by:
  9807 ;;		_loadRTC
  9808 ;;		_getRTC
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           	psect	text29
  9813  005476                     __ptext29:
  9814                           	opt stack 0
  9815  005476                     _I2C_Master_Start:
  9816                           	opt stack 18
  9817                           
  9818                           ;I2C.c: 33: I2C_Master_Wait();
  9819                           
  9820                           ;incstack = 0
  9821  005476  ECFA  F029         	call	_I2C_Master_Wait	;wreg free
  9822                           
  9823                           ;I2C.c: 34: SEN = 1;
  9824  00547A  80C5               	bsf	4037,0,c	;volatile
  9825  00547C  0012               	return		;funcret
  9826  00547E                     __end_of_I2C_Master_Start:
  9827                           	opt stack 0
  9828                           tblptru	equ	0xFF8
  9829                           tblptrh	equ	0xFF7
  9830                           tblptrl	equ	0xFF6
  9831                           tablat	equ	0xFF5
  9832                           prodh	equ	0xFF4
  9833                           prodl	equ	0xFF3
  9834                           intcon	equ	0xFF2
  9835                           intcon2	equ	0xFF1
  9836                           intcon3	equ	0xFF0
  9837                           postinc0	equ	0xFEE
  9838                           wreg	equ	0xFE8
  9839                           postdec1	equ	0xFE5
  9840                           fsr1l	equ	0xFE1
  9841                           indf2	equ	0xFDF
  9842                           postinc2	equ	0xFDE
  9843                           postdec2	equ	0xFDD
  9844                           fsr2h	equ	0xFDA
  9845                           fsr2l	equ	0xFD9
  9846                           status	equ	0xFD8
  9847                           
  9848 ;; *************** function _I2C_Master_Read *****************
  9849 ;; Defined at:
  9850 ;;		line 55 in file "I2C.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;  a               1    wreg     unsigned char 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  a               1    1[BANK0 ] unsigned char 
  9855 ;;  temp            1    2[BANK0 ] unsigned char 
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  1    wreg      unsigned char 
  9858 ;; Registers used:
  9859 ;;		wreg, status,2, status,0, cstack
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;Total ram usage:        2 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    8
  9872 ;; This function calls:
  9873 ;;		_I2C_Master_Wait
  9874 ;; This function is called by:
  9875 ;;		_getRTC
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           	psect	text30
  9880  005190                     __ptext30:
  9881                           	opt stack 0
  9882  005190                     _I2C_Master_Read:
  9883                           	opt stack 18
  9884                           
  9885                           ;incstack = 0
  9886                           ;I2C_Master_Read@a stored from wreg
  9887  005190  0100               	movlb	0	; () banked
  9888  005192  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9889                           
  9890                           ;I2C.c: 57: unsigned char temp;
  9891                           ;I2C.c: 58: I2C_Master_Wait();
  9892  005194  ECFA  F029         	call	_I2C_Master_Wait	;wreg free
  9893                           
  9894                           ;I2C.c: 59: RCEN = 1;
  9895  005198  86C5               	bsf	4037,3,c	;volatile
  9896                           
  9897                           ;I2C.c: 60: I2C_Master_Wait();
  9898  00519A  ECFA  F029         	call	_I2C_Master_Wait	;wreg free
  9899                           
  9900                           ;I2C.c: 61: temp = SSPBUF;
  9901  00519E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9902                           
  9903                           ;I2C.c: 62: I2C_Master_Wait();
  9904  0051A2  ECFA  F029         	call	_I2C_Master_Wait	;wreg free
  9905                           
  9906                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9907  0051A6  0100               	movlb	0	; () banked
  9908  0051A8  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9909  0051AA  0100               	movlb	0	; () banked
  9910  0051AC  A4D8               	btfss	status,2,c
  9911  0051AE  D002               	goto	u4490
  9912  0051B0  8AC5               	bsf	4037,5,c	;volatile
  9913  0051B2  D001               	goto	l6145
  9914  0051B4                     u4490:
  9915  0051B4  9AC5               	bcf	4037,5,c	;volatile
  9916  0051B6                     l6145:
  9917                           
  9918                           ;I2C.c: 64: ACKEN = 1;
  9919  0051B6  88C5               	bsf	4037,4,c	;volatile
  9920                           
  9921                           ;I2C.c: 65: return temp;
  9922  0051B8  0100               	movlb	0	; () banked
  9923  0051BA  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9924  0051BC  0012               	return	
  9925  0051BE                     __end_of_I2C_Master_Read:
  9926                           	opt stack 0
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           intcon	equ	0xFF2
  9934                           intcon2	equ	0xFF1
  9935                           intcon3	equ	0xFF0
  9936                           postinc0	equ	0xFEE
  9937                           wreg	equ	0xFE8
  9938                           postdec1	equ	0xFE5
  9939                           fsr1l	equ	0xFE1
  9940                           indf2	equ	0xFDF
  9941                           postinc2	equ	0xFDE
  9942                           postdec2	equ	0xFDD
  9943                           fsr2h	equ	0xFDA
  9944                           fsr2l	equ	0xFD9
  9945                           status	equ	0xFD8
  9946                           
  9947 ;; *************** function _I2C_Master_Wait *****************
  9948 ;; Defined at:
  9949 ;;		line 26 in file "I2C.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      void 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;Total ram usage:        1 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    7
  9970 ;; This function calls:
  9971 ;;		Nothing
  9972 ;; This function is called by:
  9973 ;;		_I2C_Master_Start
  9974 ;;		_I2C_Master_Stop
  9975 ;;		_I2C_Master_Write
  9976 ;;		_I2C_Master_Read
  9977 ;;		_I2C_Master_RepeatedStart
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           	psect	text31
  9982  0053F4                     __ptext31:
  9983                           	opt stack 0
  9984  0053F4                     _I2C_Master_Wait:
  9985                           	opt stack 18
  9986  0053F4                     l66:
  9987  0053F4  B4C7               	btfsc	4039,2,c	;volatile
  9988  0053F6  D7FE               	goto	l66
  9989  0053F8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9990  0053FC  0E1F               	movlw	31
  9991  0053FE  0100               	movlb	0	; () banked
  9992  005400  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9993  005402  B4D8               	btfsc	status,2,c
  9994  005404  0012               	return	
  9995  005406  D7F6               	goto	l66
  9996  005408                     __end_of_I2C_Master_Wait:
  9997                           	opt stack 0
  9998                           tblptru	equ	0xFF8
  9999                           tblptrh	equ	0xFF7
 10000                           tblptrl	equ	0xFF6
 10001                           tablat	equ	0xFF5
 10002                           prodh	equ	0xFF4
 10003                           prodl	equ	0xFF3
 10004                           intcon	equ	0xFF2
 10005                           intcon2	equ	0xFF1
 10006                           intcon3	equ	0xFF0
 10007                           postinc0	equ	0xFEE
 10008                           wreg	equ	0xFE8
 10009                           postdec1	equ	0xFE5
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function _change_state_to_menu_22 *****************
 10019 ;; Defined at:
 10020 ;;		line 501 in file "UI.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;		None
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  1    wreg      void 
 10027 ;; Registers used:
 10028 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:   10
 10041 ;; This function calls:
 10042 ;;		_lcdInst
 10043 ;;		_printf
 10044 ;; This function is called by:
 10045 ;;		_UI
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text32
 10050  004E70                     __ptext32:
 10051                           	opt stack 0
 10052  004E70                     _change_state_to_menu_22:
 10053                           	opt stack 19
 10054                           
 10055                           ;UI.c: 502: cur_state = 22;
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;incstack = 0
 10059  004E70  0E00               	movlw	0
 10060  004E72  0100               	movlb	0	; () banked
 10061  004E74  6FED               	movwf	(_cur_state+1)& (0+255),b
 10062  004E76  0E16               	movlw	22
 10063  004E78  6FEC               	movwf	_cur_state& (0+255),b
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;UI.c: 504: lcdInst(0b10000000);;
 10067  004E7A  0E80               	movlw	128
 10068  004E7C  EC15  F02A         	call	_lcdInst
 10069                           
 10070                           ;UI.c: 505: printf("2. SORT        <");
 10071  004E80  0EC4               	movlw	low STR_34
 10072  004E82  0100               	movlb	0	; () banked
 10073  004E84  6F8E               	movwf	printf@f& (0+255),b
 10074  004E86  0EFD               	movlw	high STR_34
 10075  004E88  0100               	movlb	0	; () banked
 10076  004E8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10077  004E8C  EC1B  F00B         	call	_printf	;wreg free
 10078                           
 10079                           ;UI.c: 506: lcdInst(0b11000000);;
 10080  004E90  0EC0               	movlw	192
 10081  004E92  EC15  F02A         	call	_lcdInst
 10082                           
 10083                           ;UI.c: 507: printf("3. LOGS         ");
 10084  004E96  0E09               	movlw	low STR_36
 10085  004E98  0100               	movlb	0	; () banked
 10086  004E9A  6F8E               	movwf	printf@f& (0+255),b
 10087  004E9C  0EFD               	movlw	high STR_36
 10088  004E9E  0100               	movlb	0	; () banked
 10089  004EA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10090  004EA2  EC1B  F00B         	call	_printf	;wreg free
 10091  004EA6  0012               	return		;funcret
 10092  004EA8                     __end_of_change_state_to_menu_22:
 10093                           	opt stack 0
 10094                           tblptru	equ	0xFF8
 10095                           tblptrh	equ	0xFF7
 10096                           tblptrl	equ	0xFF6
 10097                           tablat	equ	0xFF5
 10098                           prodh	equ	0xFF4
 10099                           prodl	equ	0xFF3
 10100                           intcon	equ	0xFF2
 10101                           intcon2	equ	0xFF1
 10102                           intcon3	equ	0xFF0
 10103                           postinc0	equ	0xFEE
 10104                           wreg	equ	0xFE8
 10105                           postdec1	equ	0xFE5
 10106                           fsr1l	equ	0xFE1
 10107                           indf2	equ	0xFDF
 10108                           postinc2	equ	0xFDE
 10109                           postdec2	equ	0xFDD
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function _change_state_to_menu_12 *****************
 10115 ;; Defined at:
 10116 ;;		line 493 in file "UI.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;		None
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  1    wreg      void 
 10123 ;; Registers used:
 10124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;Total ram usage:        0 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:   10
 10137 ;; This function calls:
 10138 ;;		_lcdInst
 10139 ;;		_printf
 10140 ;; This function is called by:
 10141 ;;		_UI
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text33
 10146  004EA8                     __ptext33:
 10147                           	opt stack 0
 10148  004EA8                     _change_state_to_menu_12:
 10149                           	opt stack 19
 10150                           
 10151                           ;UI.c: 494: cur_state = 12;
 10152                           
 10153                           ;incstack = 0
 10154  004EA8  0E00               	movlw	0
 10155  004EAA  0100               	movlb	0	; () banked
 10156  004EAC  6FED               	movwf	(_cur_state+1)& (0+255),b
 10157  004EAE  0E0C               	movlw	12
 10158  004EB0  6FEC               	movwf	_cur_state& (0+255),b
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;UI.c: 496: lcdInst(0b10000000);;
 10162  004EB2  0E80               	movlw	128
 10163  004EB4  EC15  F02A         	call	_lcdInst
 10164                           
 10165                           ;UI.c: 497: printf("1. DATE/TIME    ");
 10166  004EB8  0E2B               	movlw	low STR_33
 10167  004EBA  0100               	movlb	0	; () banked
 10168  004EBC  6F8E               	movwf	printf@f& (0+255),b
 10169  004EBE  0EFD               	movlw	high STR_33
 10170  004EC0  0100               	movlb	0	; () banked
 10171  004EC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10172  004EC4  EC1B  F00B         	call	_printf	;wreg free
 10173                           
 10174                           ;UI.c: 498: lcdInst(0b11000000);;
 10175  004EC8  0EC0               	movlw	192
 10176  004ECA  EC15  F02A         	call	_lcdInst
 10177                           
 10178                           ;UI.c: 499: printf("2. SORT        <");
 10179  004ECE  0EC4               	movlw	low STR_34
 10180  004ED0  0100               	movlb	0	; () banked
 10181  004ED2  6F8E               	movwf	printf@f& (0+255),b
 10182  004ED4  0EFD               	movlw	high STR_34
 10183  004ED6  0100               	movlb	0	; () banked
 10184  004ED8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10185  004EDA  EC1B  F00B         	call	_printf	;wreg free
 10186  004EDE  0012               	return		;funcret
 10187  004EE0                     __end_of_change_state_to_menu_12:
 10188                           	opt stack 0
 10189                           tblptru	equ	0xFF8
 10190                           tblptrh	equ	0xFF7
 10191                           tblptrl	equ	0xFF6
 10192                           tablat	equ	0xFF5
 10193                           prodh	equ	0xFF4
 10194                           prodl	equ	0xFF3
 10195                           intcon	equ	0xFF2
 10196                           intcon2	equ	0xFF1
 10197                           intcon3	equ	0xFF0
 10198                           postinc0	equ	0xFEE
 10199                           wreg	equ	0xFE8
 10200                           postdec1	equ	0xFE5
 10201                           fsr1l	equ	0xFE1
 10202                           indf2	equ	0xFDF
 10203                           postinc2	equ	0xFDE
 10204                           postdec2	equ	0xFDD
 10205                           fsr2h	equ	0xFDA
 10206                           fsr2l	equ	0xFD9
 10207                           status	equ	0xFD8
 10208                           
 10209 ;; *************** function ___awmod *****************
 10210 ;; Defined at:
 10211 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;  dividend        2    0[BANK0 ] int 
 10214 ;;  divisor         2    2[BANK0 ] int 
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;  sign            1    5[BANK0 ] unsigned char 
 10217 ;;  counter         1    4[BANK0 ] unsigned char 
 10218 ;; Return value:  Size  Location     Type
 10219 ;;                  2    0[BANK0 ] int 
 10220 ;; Registers used:
 10221 ;;		wreg, status,2, status,0
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10227 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;Total ram usage:        6 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    7
 10234 ;; This function calls:
 10235 ;;		Nothing
 10236 ;; This function is called by:
 10237 ;;		_UI
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           	psect	text34
 10242  004580                     __ptext34:
 10243                           	opt stack 0
 10244  004580                     ___awmod:
 10245                           	opt stack 22
 10246                           
 10247                           ;incstack = 0
 10248  004580  0E00               	movlw	0
 10249  004582  0100               	movlb	0	; () banked
 10250  004584  6F85               	movwf	___awmod@sign& (0+255),b
 10251                           
 10252                           ; BSR set to: 0
 10253  004586  0100               	movlb	0	; () banked
 10254  004588  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10255  00458A  D008               	goto	l8549
 10256                           
 10257                           ; BSR set to: 0
 10258  00458C  0100               	movlb	0	; () banked
 10259  00458E  6D80               	negf	___awmod@dividend& (0+255),b
 10260  004590  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10261  004592  B0D8               	btfsc	status,0,c
 10262  004594  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10263                           
 10264                           ; BSR set to: 0
 10265  004596  0E01               	movlw	1
 10266  004598  0100               	movlb	0	; () banked
 10267  00459A  6F85               	movwf	___awmod@sign& (0+255),b
 10268  00459C                     l8549:
 10269                           
 10270                           ; BSR set to: 0
 10271  00459C  0100               	movlb	0	; () banked
 10272  00459E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10273  0045A0  D005               	goto	l8553
 10274                           
 10275                           ; BSR set to: 0
 10276  0045A2  0100               	movlb	0	; () banked
 10277  0045A4  6D82               	negf	___awmod@divisor& (0+255),b
 10278  0045A6  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10279  0045A8  B0D8               	btfsc	status,0,c
 10280  0045AA  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10281  0045AC                     l8553:
 10282                           
 10283                           ; BSR set to: 0
 10284  0045AC  0100               	movlb	0	; () banked
 10285  0045AE  5182               	movf	___awmod@divisor& (0+255),w,b
 10286  0045B0  0100               	movlb	0	; () banked
 10287  0045B2  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10288  0045B4  B4D8               	btfsc	status,2,c
 10289  0045B6  D026               	goto	l8569
 10290                           
 10291                           ; BSR set to: 0
 10292  0045B8  0E01               	movlw	1
 10293  0045BA  0100               	movlb	0	; () banked
 10294  0045BC  6F84               	movwf	___awmod@counter& (0+255),b
 10295  0045BE  D006               	goto	l8559
 10296  0045C0                     l8557:
 10297                           
 10298                           ; BSR set to: 0
 10299  0045C0  0100               	movlb	0	; () banked
 10300  0045C2  90D8               	bcf	status,0,c
 10301  0045C4  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10302  0045C6  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10303  0045C8  0100               	movlb	0	; () banked
 10304  0045CA  2B84               	incf	___awmod@counter& (0+255),f,b
 10305  0045CC                     l8559:
 10306                           
 10307                           ; BSR set to: 0
 10308  0045CC  0100               	movlb	0	; () banked
 10309  0045CE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10310  0045D0  D7F7               	goto	l8557
 10311  0045D2                     l8561:
 10312                           
 10313                           ; BSR set to: 0
 10314  0045D2  0100               	movlb	0	; () banked
 10315  0045D4  5182               	movf	___awmod@divisor& (0+255),w,b
 10316  0045D6  0100               	movlb	0	; () banked
 10317  0045D8  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10318  0045DA  0100               	movlb	0	; () banked
 10319  0045DC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10320  0045DE  0100               	movlb	0	; () banked
 10321  0045E0  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10322  0045E2  A0D8               	btfss	status,0,c
 10323  0045E4  D008               	goto	l8565
 10324                           
 10325                           ; BSR set to: 0
 10326  0045E6  0100               	movlb	0	; () banked
 10327  0045E8  5182               	movf	___awmod@divisor& (0+255),w,b
 10328  0045EA  0100               	movlb	0	; () banked
 10329  0045EC  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10330  0045EE  0100               	movlb	0	; () banked
 10331  0045F0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10332  0045F2  0100               	movlb	0	; () banked
 10333  0045F4  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10334  0045F6                     l8565:
 10335                           
 10336                           ; BSR set to: 0
 10337  0045F6  0100               	movlb	0	; () banked
 10338  0045F8  90D8               	bcf	status,0,c
 10339  0045FA  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10340  0045FC  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10341                           
 10342                           ; BSR set to: 0
 10343  0045FE  0100               	movlb	0	; () banked
 10344  004600  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10345  004602  D7E7               	goto	l8561
 10346  004604                     l8569:
 10347                           
 10348                           ; BSR set to: 0
 10349  004604  0100               	movlb	0	; () banked
 10350  004606  5185               	movf	___awmod@sign& (0+255),w,b
 10351  004608  0100               	movlb	0	; () banked
 10352  00460A  B4D8               	btfsc	status,2,c
 10353  00460C  D005               	goto	l8573
 10354                           
 10355                           ; BSR set to: 0
 10356  00460E  0100               	movlb	0	; () banked
 10357  004610  6D80               	negf	___awmod@dividend& (0+255),b
 10358  004612  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10359  004614  B0D8               	btfsc	status,0,c
 10360  004616  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10361  004618                     l8573:
 10362                           
 10363                           ; BSR set to: 0
 10364  004618  C080  F080         	movff	___awmod@dividend,?___awmod
 10365  00461C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10366  004620  0012               	return	
 10367  004622                     __end_of___awmod:
 10368                           	opt stack 0
 10369                           tblptru	equ	0xFF8
 10370                           tblptrh	equ	0xFF7
 10371                           tblptrl	equ	0xFF6
 10372                           tablat	equ	0xFF5
 10373                           prodh	equ	0xFF4
 10374                           prodl	equ	0xFF3
 10375                           intcon	equ	0xFF2
 10376                           intcon2	equ	0xFF1
 10377                           intcon3	equ	0xFF0
 10378                           postinc0	equ	0xFEE
 10379                           wreg	equ	0xFE8
 10380                           postdec1	equ	0xFE5
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           fsr2h	equ	0xFDA
 10386                           fsr2l	equ	0xFD9
 10387                           status	equ	0xFD8
 10388                           
 10389 ;; *************** function ___awdiv *****************
 10390 ;; Defined at:
 10391 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;  dividend        2    6[BANK0 ] int 
 10394 ;;  divisor         2    8[BANK0 ] int 
 10395 ;; Auto vars:     Size  Location     Type
 10396 ;;  quotient        2   12[BANK0 ] int 
 10397 ;;  sign            1   11[BANK0 ] unsigned char 
 10398 ;;  counter         1   10[BANK0 ] unsigned char 
 10399 ;; Return value:  Size  Location     Type
 10400 ;;                  2    6[BANK0 ] int 
 10401 ;; Registers used:
 10402 ;;		wreg, status,2, status,0
 10403 ;; Tracked objects:
 10404 ;;		On entry : 0/0
 10405 ;;		On exit  : 0/0
 10406 ;;		Unchanged: 0/0
 10407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10408 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;Total ram usage:        8 bytes
 10413 ;; Hardware stack levels used:    1
 10414 ;; Hardware stack levels required when called:    7
 10415 ;; This function calls:
 10416 ;;		Nothing
 10417 ;; This function is called by:
 10418 ;;		_UI
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           	psect	text35
 10423  0042A0                     __ptext35:
 10424                           	opt stack 0
 10425  0042A0                     ___awdiv:
 10426                           	opt stack 22
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;incstack = 0
 10430  0042A0  0E00               	movlw	0
 10431  0042A2  0100               	movlb	0	; () banked
 10432  0042A4  6F8B               	movwf	___awdiv@sign& (0+255),b
 10433                           
 10434                           ; BSR set to: 0
 10435  0042A6  0100               	movlb	0	; () banked
 10436  0042A8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10437  0042AA  D008               	goto	l8505
 10438                           
 10439                           ; BSR set to: 0
 10440  0042AC  0100               	movlb	0	; () banked
 10441  0042AE  6D88               	negf	___awdiv@divisor& (0+255),b
 10442  0042B0  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10443  0042B2  B0D8               	btfsc	status,0,c
 10444  0042B4  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10445                           
 10446                           ; BSR set to: 0
 10447  0042B6  0E01               	movlw	1
 10448  0042B8  0100               	movlb	0	; () banked
 10449  0042BA  6F8B               	movwf	___awdiv@sign& (0+255),b
 10450  0042BC                     l8505:
 10451                           
 10452                           ; BSR set to: 0
 10453  0042BC  0100               	movlb	0	; () banked
 10454  0042BE  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10455  0042C0  D008               	goto	l8511
 10456                           
 10457                           ; BSR set to: 0
 10458  0042C2  0100               	movlb	0	; () banked
 10459  0042C4  6D86               	negf	___awdiv@dividend& (0+255),b
 10460  0042C6  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10461  0042C8  B0D8               	btfsc	status,0,c
 10462  0042CA  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10463                           
 10464                           ; BSR set to: 0
 10465  0042CC  0E01               	movlw	1
 10466  0042CE  0100               	movlb	0	; () banked
 10467  0042D0  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10468  0042D2                     l8511:
 10469                           
 10470                           ; BSR set to: 0
 10471  0042D2  0E00               	movlw	0
 10472  0042D4  0100               	movlb	0	; () banked
 10473  0042D6  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10474  0042D8  0E00               	movlw	0
 10475  0042DA  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10476                           
 10477                           ; BSR set to: 0
 10478  0042DC  0100               	movlb	0	; () banked
 10479  0042DE  5188               	movf	___awdiv@divisor& (0+255),w,b
 10480  0042E0  0100               	movlb	0	; () banked
 10481  0042E2  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10482  0042E4  B4D8               	btfsc	status,2,c
 10483  0042E6  D02C               	goto	l8533
 10484                           
 10485                           ; BSR set to: 0
 10486  0042E8  0E01               	movlw	1
 10487  0042EA  0100               	movlb	0	; () banked
 10488  0042EC  6F8A               	movwf	___awdiv@counter& (0+255),b
 10489  0042EE  D006               	goto	l8519
 10490  0042F0                     l8517:
 10491                           
 10492                           ; BSR set to: 0
 10493  0042F0  0100               	movlb	0	; () banked
 10494  0042F2  90D8               	bcf	status,0,c
 10495  0042F4  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10496  0042F6  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10497  0042F8  0100               	movlb	0	; () banked
 10498  0042FA  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10499  0042FC                     l8519:
 10500                           
 10501                           ; BSR set to: 0
 10502  0042FC  0100               	movlb	0	; () banked
 10503  0042FE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10504  004300  D7F7               	goto	l8517
 10505  004302                     l8521:
 10506                           
 10507                           ; BSR set to: 0
 10508  004302  0100               	movlb	0	; () banked
 10509  004304  90D8               	bcf	status,0,c
 10510  004306  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10511  004308  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10512                           
 10513                           ; BSR set to: 0
 10514  00430A  0100               	movlb	0	; () banked
 10515  00430C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10516  00430E  0100               	movlb	0	; () banked
 10517  004310  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10518  004312  0100               	movlb	0	; () banked
 10519  004314  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10520  004316  0100               	movlb	0	; () banked
 10521  004318  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10522  00431A  A0D8               	btfss	status,0,c
 10523  00431C  D00A               	goto	l8529
 10524                           
 10525                           ; BSR set to: 0
 10526  00431E  0100               	movlb	0	; () banked
 10527  004320  5188               	movf	___awdiv@divisor& (0+255),w,b
 10528  004322  0100               	movlb	0	; () banked
 10529  004324  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10530  004326  0100               	movlb	0	; () banked
 10531  004328  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10532  00432A  0100               	movlb	0	; () banked
 10533  00432C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10534                           
 10535                           ; BSR set to: 0
 10536  00432E  0100               	movlb	0	; () banked
 10537  004330  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10538  004332                     l8529:
 10539                           
 10540                           ; BSR set to: 0
 10541  004332  0100               	movlb	0	; () banked
 10542  004334  90D8               	bcf	status,0,c
 10543  004336  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10544  004338  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10545                           
 10546                           ; BSR set to: 0
 10547  00433A  0100               	movlb	0	; () banked
 10548  00433C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10549  00433E  D7E1               	goto	l8521
 10550  004340                     l8533:
 10551                           
 10552                           ; BSR set to: 0
 10553  004340  0100               	movlb	0	; () banked
 10554  004342  518B               	movf	___awdiv@sign& (0+255),w,b
 10555  004344  0100               	movlb	0	; () banked
 10556  004346  B4D8               	btfsc	status,2,c
 10557  004348  D005               	goto	l8537
 10558                           
 10559                           ; BSR set to: 0
 10560  00434A  0100               	movlb	0	; () banked
 10561  00434C  6D8C               	negf	___awdiv@quotient& (0+255),b
 10562  00434E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10563  004350  B0D8               	btfsc	status,0,c
 10564  004352  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10565  004354                     l8537:
 10566                           
 10567                           ; BSR set to: 0
 10568  004354  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10569  004358  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10570  00435C  0012               	return	
 10571  00435E                     __end_of___awdiv:
 10572                           	opt stack 0
 10573                           tblptru	equ	0xFF8
 10574                           tblptrh	equ	0xFF7
 10575                           tblptrl	equ	0xFF6
 10576                           tablat	equ	0xFF5
 10577                           prodh	equ	0xFF4
 10578                           prodl	equ	0xFF3
 10579                           intcon	equ	0xFF2
 10580                           intcon2	equ	0xFF1
 10581                           intcon3	equ	0xFF0
 10582                           postinc0	equ	0xFEE
 10583                           wreg	equ	0xFE8
 10584                           postdec1	equ	0xFE5
 10585                           fsr1l	equ	0xFE1
 10586                           indf2	equ	0xFDF
 10587                           postinc2	equ	0xFDE
 10588                           postdec2	equ	0xFDD
 10589                           fsr2h	equ	0xFDA
 10590                           fsr2l	equ	0xFD9
 10591                           status	equ	0xFD8
 10592                           
 10593 ;; *************** function _Test *****************
 10594 ;; Defined at:
 10595 ;;		line 30 in file "Test.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;		None
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;		None
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      void 
 10602 ;; Registers used:
 10603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10611 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10612 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10613 ;;Total ram usage:        2 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:   11
 10616 ;; This function calls:
 10617 ;;		_BlockerTest
 10618 ;;		_BothServos
 10619 ;;		_EEPROMTest
 10620 ;;		_PortTestDC
 10621 ;;		_PusherTest
 10622 ;;		_SpeedTest
 10623 ;;		_actuatorTest
 10624 ;;		_algorithmTest
 10625 ;;		_arm
 10626 ;;		_lcdInst
 10627 ;;		_printf
 10628 ;;		_sensorTest
 10629 ;; This function is called by:
 10630 ;;		_main
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           	psect	text36
 10635  003D30                     __ptext36:
 10636                           	opt stack 0
 10637  003D30                     _Test:
 10638                           	opt stack 19
 10639                           
 10640                           ;Test.c: 32: while(machine_state == Testing_state){
 10641                           
 10642                           ; BSR set to: 0
 10643                           ;incstack = 0
 10644  003D30  D07C               	goto	l9303
 10645  003D32                     l9263:
 10646                           
 10647                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10648  003D32  0E01               	movlw	1
 10649  003D34  EC15  F02A         	call	_lcdInst
 10650  003D38  0E68               	movlw	104
 10651  003D3A  0100               	movlb	0	; () banked
 10652  003D3C  6FC6               	movwf	??_Test& (0+255),b
 10653  003D3E  0EE4               	movlw	228
 10654  003D40                     u9547:
 10655  003D40  2EE8               	decfsz	wreg,f,c
 10656  003D42  D7FE               	bra	u9547
 10657  003D44  2FC6               	decfsz	??_Test& (0+255),f,b
 10658  003D46  D7FC               	bra	u9547
 10659  003D48  F000               	nop	
 10660  003D4A  0E80               	movlw	128
 10661  003D4C  EC15  F02A         	call	_lcdInst
 10662                           
 10663                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10664  003D50  0E81               	movlw	low STR_68
 10665  003D52  0100               	movlb	0	; () banked
 10666  003D54  6F8E               	movwf	printf@f& (0+255),b
 10667  003D56  0EFC               	movlw	high STR_68
 10668  003D58  0100               	movlb	0	; () banked
 10669  003D5A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10670  003D5C  EC1B  F00B         	call	_printf	;wreg free
 10671                           
 10672                           ;Test.c: 35: lcdInst(0b11000000);;
 10673  003D60  0EC0               	movlw	192
 10674  003D62  EC15  F02A         	call	_lcdInst
 10675                           
 10676                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10677  003D66  0E92               	movlw	low STR_69
 10678  003D68  0100               	movlb	0	; () banked
 10679  003D6A  6F8E               	movwf	printf@f& (0+255),b
 10680  003D6C  0EFC               	movlw	high STR_69
 10681  003D6E  0100               	movlb	0	; () banked
 10682  003D70  6F8F               	movwf	(printf@f+1)& (0+255),b
 10683  003D72  EC1B  F00B         	call	_printf	;wreg free
 10684  003D76                     l1177:
 10685  003D76  A281               	btfss	3969,1,c	;volatile
 10686  003D78  D7FE               	goto	l1177
 10687                           
 10688                           ;Test.c: 38: var = PORTB >> 4;
 10689  003D7A  CF81 F0C6          	movff	3969,??_Test	;volatile
 10690  003D7E  0100               	movlb	0	; () banked
 10691  003D80  3BC6               	swapf	??_Test& (0+255),f,b
 10692  003D82  0E0F               	movlw	15
 10693  003D84  17C6               	andwf	??_Test& (0+255),f,b
 10694  003D86  0100               	movlb	0	; () banked
 10695  003D88  51C6               	movf	??_Test& (0+255),w,b
 10696  003D8A  0101               	movlb	1	; () banked
 10697  003D8C  6F45               	movwf	_var& (0+255),b
 10698  003D8E  6B46               	clrf	(_var+1)& (0+255),b
 10699                           
 10700                           ; BSR set to: 1
 10701                           ;Test.c: 39: var++;
 10702  003D90  0101               	movlb	1	; () banked
 10703  003D92  4B45               	infsnz	_var& (0+255),f,b
 10704  003D94  2B46               	incf	(_var+1)& (0+255),f,b
 10705  003D96                     l1180:
 10706  003D96  A281               	btfss	3969,1,c	;volatile
 10707  003D98  D01F               	goto	l9301
 10708  003D9A  D7FD               	goto	l1180
 10709  003D9C                     l9279:
 10710                           
 10711                           ;Test.c: 43: algorithmTest();
 10712  003D9C  EC83  F020         	call	_algorithmTest	;wreg free
 10713                           
 10714                           ;Test.c: 44: break;
 10715  003DA0  D044               	goto	l9303
 10716  003DA2                     l9281:
 10717                           
 10718                           ;Test.c: 46: sensorTest();
 10719  003DA2  ECB0  F010         	call	_sensorTest	;wreg free
 10720                           
 10721                           ;Test.c: 47: break;
 10722  003DA6  D041               	goto	l9303
 10723  003DA8                     l9283:
 10724                           
 10725                           ;Test.c: 49: actuatorTest();
 10726  003DA8  EC6D  F004         	call	_actuatorTest	;wreg free
 10727                           
 10728                           ;Test.c: 50: break;
 10729  003DAC  D03E               	goto	l9303
 10730  003DAE                     l9285:
 10731                           
 10732                           ;Test.c: 52: arm();
 10733  003DAE  EC1B  F01F         	call	_arm	;wreg free
 10734                           
 10735                           ;Test.c: 53: break;
 10736  003DB2  D03B               	goto	l9303
 10737  003DB4                     l9287:
 10738                           
 10739                           ;Test.c: 55: PortTestDC();
 10740  003DB4  ECFF  F025         	call	_PortTestDC	;wreg free
 10741                           
 10742                           ;Test.c: 56: break;
 10743  003DB8  D038               	goto	l9303
 10744  003DBA                     l9289:
 10745                           
 10746                           ;Test.c: 59: SpeedTest();
 10747  003DBA  ECDD  F023         	call	_SpeedTest	;wreg free
 10748                           
 10749                           ;Test.c: 60: break;
 10750  003DBE  D035               	goto	l9303
 10751  003DC0                     l9291:
 10752                           
 10753                           ;Test.c: 62: EEPROMTest();
 10754  003DC0  EC47  F02A         	call	_EEPROMTest	;wreg free
 10755                           
 10756                           ;Test.c: 63: break;
 10757  003DC4  D032               	goto	l9303
 10758  003DC6                     l9293:
 10759                           
 10760                           ;Test.c: 65: PusherTest();
 10761  003DC6  EC7C  F017         	call	_PusherTest	;wreg free
 10762                           
 10763                           ;Test.c: 66: break;
 10764  003DCA  D02F               	goto	l9303
 10765  003DCC                     l9295:
 10766                           
 10767                           ;Test.c: 68: BothServos();
 10768  003DCC  EC37  F00D         	call	_BothServos	;wreg free
 10769                           
 10770                           ;Test.c: 69: break;
 10771  003DD0  D02C               	goto	l9303
 10772  003DD2                     l9297:
 10773                           
 10774                           ;Test.c: 71: BlockerTest();
 10775  003DD2  ECA3  F01C         	call	_BlockerTest	;wreg free
 10776                           
 10777                           ;Test.c: 75: }
 10778                           
 10779                           ;Test.c: 74: break;
 10780                           
 10781                           ;Test.c: 73: default:
 10782                           
 10783                           ;Test.c: 72: break;
 10784  003DD6  D029               	goto	l9303
 10785  003DD8                     l9301:
 10786  003DD8  C145  F0C6         	movff	_var,??_Test
 10787  003DDC  C146  F0C7         	movff	_var+1,??_Test+1
 10788                           
 10789                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10790                           ; Switch size 1, requested type "space"
 10791                           ; Number of cases is 1, Range of values is 0 to 0
 10792                           ; switch strategies available:
 10793                           ; Name         Instructions Cycles
 10794                           ; simple_byte            4     3 (average)
 10795                           ;	Chosen strategy is simple_byte
 10796  003DE0  0100               	movlb	0	; () banked
 10797  003DE2  51C7               	movf	(??_Test+1)& (0+255),w,b
 10798  003DE4  0A00               	xorlw	0	; case 0
 10799  003DE6  A4D8               	btfss	status,2,c
 10800  003DE8  D020               	goto	l9303
 10801                           
 10802                           ; BSR set to: 0
 10803                           ; Switch size 1, requested type "space"
 10804                           ; Number of cases is 10, Range of values is 1 to 11
 10805                           ; switch strategies available:
 10806                           ; Name         Instructions Cycles
 10807                           ; simple_byte           31    16 (average)
 10808                           ;	Chosen strategy is simple_byte
 10809  003DEA  0100               	movlb	0	; () banked
 10810  003DEC  51C6               	movf	??_Test& (0+255),w,b
 10811  003DEE  0A01               	xorlw	1	; case 1
 10812  003DF0  B4D8               	btfsc	status,2,c
 10813  003DF2  D7D4               	goto	l9279
 10814  003DF4  0A03               	xorlw	3	; case 2
 10815  003DF6  B4D8               	btfsc	status,2,c
 10816  003DF8  D7D4               	goto	l9281
 10817  003DFA  0A01               	xorlw	1	; case 3
 10818  003DFC  B4D8               	btfsc	status,2,c
 10819  003DFE  D7D4               	goto	l9283
 10820  003E00  0A07               	xorlw	7	; case 4
 10821  003E02  B4D8               	btfsc	status,2,c
 10822  003E04  D7D4               	goto	l9285
 10823  003E06  0A01               	xorlw	1	; case 5
 10824  003E08  B4D8               	btfsc	status,2,c
 10825  003E0A  D7D4               	goto	l9287
 10826  003E0C  0A03               	xorlw	3	; case 6
 10827  003E0E  B4D8               	btfsc	status,2,c
 10828  003E10  D7D4               	goto	l9289
 10829  003E12  0A01               	xorlw	1	; case 7
 10830  003E14  B4D8               	btfsc	status,2,c
 10831  003E16  D7D4               	goto	l9291
 10832  003E18  0A0F               	xorlw	15	; case 8
 10833  003E1A  B4D8               	btfsc	status,2,c
 10834  003E1C  D7D4               	goto	l9293
 10835  003E1E  0A02               	xorlw	2	; case 10
 10836  003E20  B4D8               	btfsc	status,2,c
 10837  003E22  D7D4               	goto	l9295
 10838  003E24  0A01               	xorlw	1	; case 11
 10839  003E26  B4D8               	btfsc	status,2,c
 10840  003E28  D7D4               	goto	l9297
 10841  003E2A                     l9303:
 10842  003E2A  0E03               	movlw	3
 10843  003E2C  0100               	movlb	0	; () banked
 10844  003E2E  19FC               	xorwf	_machine_state& (0+255),w,b
 10845  003E30  A4D8               	btfss	status,2,c
 10846  003E32  0012               	return	
 10847  003E34  D77E               	goto	l9263
 10848  003E36                     __end_of_Test:
 10849                           	opt stack 0
 10850                           tblptru	equ	0xFF8
 10851                           tblptrh	equ	0xFF7
 10852                           tblptrl	equ	0xFF6
 10853                           tablat	equ	0xFF5
 10854                           prodh	equ	0xFF4
 10855                           prodl	equ	0xFF3
 10856                           intcon	equ	0xFF2
 10857                           intcon2	equ	0xFF1
 10858                           intcon3	equ	0xFF0
 10859                           postinc0	equ	0xFEE
 10860                           wreg	equ	0xFE8
 10861                           postdec1	equ	0xFE5
 10862                           fsr1l	equ	0xFE1
 10863                           indf2	equ	0xFDF
 10864                           postinc2	equ	0xFDE
 10865                           postdec2	equ	0xFDD
 10866                           fsr2h	equ	0xFDA
 10867                           fsr2l	equ	0xFD9
 10868                           status	equ	0xFD8
 10869                           
 10870 ;; *************** function _sensorTest *****************
 10871 ;; Defined at:
 10872 ;;		line 123 in file "Test.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;		None
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;  res             2   45[BANK0 ] int 
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      void 
 10879 ;; Registers used:
 10880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10889 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;Total ram usage:        4 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:   10
 10893 ;; This function calls:
 10894 ;;		_lcdInst
 10895 ;;		_printf
 10896 ;;		_readADC
 10897 ;;		_readMAG
 10898 ;; This function is called by:
 10899 ;;		_Test
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           	psect	text37
 10904  002160                     __ptext37:
 10905                           	opt stack 0
 10906  002160                     _sensorTest:
 10907                           	opt stack 19
 10908                           
 10909                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;incstack = 0
 10913  002160  0E01               	movlw	1
 10914  002162  EC15  F02A         	call	_lcdInst
 10915  002166  0E68               	movlw	104
 10916  002168  0100               	movlb	0	; () banked
 10917  00216A  6FAB               	movwf	??_sensorTest& (0+255),b
 10918  00216C  0EE4               	movlw	228
 10919  00216E                     u9557:
 10920  00216E  2EE8               	decfsz	wreg,f,c
 10921  002170  D7FE               	bra	u9557
 10922  002172  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10923  002174  D7FC               	bra	u9557
 10924  002176  F000               	nop	
 10925  002178  0E80               	movlw	128
 10926  00217A  EC15  F02A         	call	_lcdInst
 10927                           
 10928                           ;Test.c: 126: printf("SENSORS");
 10929  00217E  0EAE               	movlw	low STR_77
 10930  002180  0100               	movlb	0	; () banked
 10931  002182  6F8E               	movwf	printf@f& (0+255),b
 10932  002184  0EFF               	movlw	high STR_77
 10933  002186  0100               	movlb	0	; () banked
 10934  002188  6F8F               	movwf	(printf@f+1)& (0+255),b
 10935  00218A  EC1B  F00B         	call	_printf	;wreg free
 10936                           
 10937                           ;Test.c: 127: lcdInst(0b11000000);;
 10938  00218E  0EC0               	movlw	192
 10939  002190  EC15  F02A         	call	_lcdInst
 10940                           
 10941                           ;Test.c: 128: printf("PUSH TO START");
 10942  002194  0E0B               	movlw	low STR_71
 10943  002196  0100               	movlb	0	; () banked
 10944  002198  6F8E               	movwf	printf@f& (0+255),b
 10945  00219A  0EFF               	movlw	high STR_71
 10946  00219C  0100               	movlb	0	; () banked
 10947  00219E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10948  0021A0  EC1B  F00B         	call	_printf	;wreg free
 10949                           
 10950                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 10951  0021A4  0E05               	movlw	5
 10952  0021A6  0100               	movlb	0	; () banked
 10953  0021A8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10954  0021AA  0E0F               	movlw	15
 10955  0021AC  0100               	movlb	0	; () banked
 10956  0021AE  6FAB               	movwf	??_sensorTest& (0+255),b
 10957  0021B0  0EF1               	movlw	241
 10958  0021B2                     u9567:
 10959  0021B2  2EE8               	decfsz	wreg,f,c
 10960  0021B4  D7FE               	bra	u9567
 10961  0021B6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10962  0021B8  D7FC               	bra	u9567
 10963  0021BA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10964  0021BC  D7FA               	bra	u9567
 10965  0021BE                     l1209:
 10966  0021BE  A281               	btfss	3969,1,c	;volatile
 10967  0021C0  D7FE               	goto	l1209
 10968  0021C2                     l1212:
 10969  0021C2  B281               	btfsc	3969,1,c	;volatile
 10970  0021C4  D7FE               	goto	l1212
 10971                           
 10972                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10973  0021C6  0E01               	movlw	1
 10974  0021C8  EC15  F02A         	call	_lcdInst
 10975  0021CC  0E68               	movlw	104
 10976  0021CE  0100               	movlb	0	; () banked
 10977  0021D0  6FAB               	movwf	??_sensorTest& (0+255),b
 10978  0021D2  0EE4               	movlw	228
 10979  0021D4                     u9577:
 10980  0021D4  2EE8               	decfsz	wreg,f,c
 10981  0021D6  D7FE               	bra	u9577
 10982  0021D8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10983  0021DA  D7FC               	bra	u9577
 10984  0021DC  F000               	nop	
 10985  0021DE  0E80               	movlw	128
 10986  0021E0  EC15  F02A         	call	_lcdInst
 10987                           
 10988                           ;Test.c: 137: printf("TST: IR SNSR");
 10989  0021E4  0E35               	movlw	low STR_79
 10990  0021E6  0100               	movlb	0	; () banked
 10991  0021E8  6F8E               	movwf	printf@f& (0+255),b
 10992  0021EA  0EFF               	movlw	high STR_79
 10993  0021EC  0100               	movlb	0	; () banked
 10994  0021EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10995  0021F0  EC1B  F00B         	call	_printf	;wreg free
 10996                           
 10997                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 10998  0021F4  0E05               	movlw	5
 10999  0021F6  0100               	movlb	0	; () banked
 11000  0021F8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11001  0021FA  0E0F               	movlw	15
 11002  0021FC  0100               	movlb	0	; () banked
 11003  0021FE  6FAB               	movwf	??_sensorTest& (0+255),b
 11004  002200  0EF1               	movlw	241
 11005  002202                     u9587:
 11006  002202  2EE8               	decfsz	wreg,f,c
 11007  002204  D7FE               	bra	u9587
 11008  002206  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11009  002208  D7FC               	bra	u9587
 11010  00220A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11011  00220C  D7FA               	bra	u9587
 11012                           
 11013                           ;Test.c: 139: LATCbits.LATC5 = 1;
 11014  00220E  8A8B               	bsf	3979,5,c	;volatile
 11015                           
 11016                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 11017  002210  D05C               	goto	l7697
 11018  002212                     l7679:
 11019                           
 11020                           ;Test.c: 142: readADC(0);
 11021  002212  0E00               	movlw	0
 11022  002214  EC0C  F029         	call	_readADC
 11023                           
 11024                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 11025  002218  50C3               	movf	4035,w,c	;volatile
 11026  00221A  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 11027  00221E  0100               	movlb	0	; () banked
 11028  002220  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11029  002222  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11030  002226  0100               	movlb	0	; () banked
 11031  002228  6BAB               	clrf	??_sensorTest& (0+255),b
 11032  00222A  0100               	movlb	0	; () banked
 11033  00222C  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11034  00222E  0100               	movlb	0	; () banked
 11035  002230  6FAD               	movwf	sensorTest@res& (0+255),b
 11036  002232  0100               	movlb	0	; () banked
 11037  002234  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11038  002236  0100               	movlb	0	; () banked
 11039  002238  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 11043  00223A  0100               	movlb	0	; () banked
 11044  00223C  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11045  00223E  D00A               	goto	u6280
 11046  002240  0E21               	movlw	33
 11047  002242  0100               	movlb	0	; () banked
 11048  002244  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11049  002246  0E03               	movlw	3
 11050  002248  0100               	movlb	0	; () banked
 11051  00224A  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11052  00224C  A0D8               	btfss	status,0,c
 11053  00224E  D002               	goto	u6280
 11054  002250  0E01               	movlw	1
 11055  002252  D001               	goto	u6290
 11056  002254                     u6280:
 11057  002254  0E00               	movlw	0
 11058  002256                     u6290:
 11059  002256  0100               	movlb	0	; () banked
 11060  002258  6FE6               	movwf	_IR_signal& (0+255),b
 11061  00225A  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11062                           
 11063                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11064  00225C  0E01               	movlw	1
 11065  00225E  EC15  F02A         	call	_lcdInst
 11066  002262  0E68               	movlw	104
 11067  002264  0100               	movlb	0	; () banked
 11068  002266  6FAB               	movwf	??_sensorTest& (0+255),b
 11069  002268  0EE4               	movlw	228
 11070  00226A                     u9597:
 11071  00226A  2EE8               	decfsz	wreg,f,c
 11072  00226C  D7FE               	bra	u9597
 11073  00226E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11074  002270  D7FC               	bra	u9597
 11075  002272  F000               	nop	
 11076  002274  0E80               	movlw	128
 11077  002276  EC15  F02A         	call	_lcdInst
 11078                           
 11079                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 11080  00227A  0E5A               	movlw	low STR_80
 11081  00227C  0100               	movlb	0	; () banked
 11082  00227E  6F8E               	movwf	printf@f& (0+255),b
 11083  002280  0EFE               	movlw	high STR_80
 11084  002282  0100               	movlb	0	; () banked
 11085  002284  6F8F               	movwf	(printf@f+1)& (0+255),b
 11086  002286  C0E6  F090         	movff	_IR_signal,?_printf+2
 11087  00228A  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11088  00228E  EC1B  F00B         	call	_printf	;wreg free
 11089                           
 11090                           ;Test.c: 148: lcdInst(0b11000000);;
 11091  002292  0EC0               	movlw	192
 11092  002294  EC15  F02A         	call	_lcdInst
 11093                           
 11094                           ;Test.c: 149: printf("%d", res);
 11095  002298  0E16               	movlw	low (STR_27+14)
 11096  00229A  0100               	movlb	0	; () banked
 11097  00229C  6F8E               	movwf	printf@f& (0+255),b
 11098  00229E  0EFE               	movlw	high (STR_27+14)
 11099  0022A0  0100               	movlb	0	; () banked
 11100  0022A2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11101  0022A4  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11102  0022A8  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11103  0022AC  EC1B  F00B         	call	_printf	;wreg free
 11104                           
 11105                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 11106  0022B0  0E05               	movlw	5
 11107  0022B2  0100               	movlb	0	; () banked
 11108  0022B4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11109  0022B6  0E0F               	movlw	15
 11110  0022B8  0100               	movlb	0	; () banked
 11111  0022BA  6FAB               	movwf	??_sensorTest& (0+255),b
 11112  0022BC  0EF1               	movlw	241
 11113  0022BE                     u9607:
 11114  0022BE  2EE8               	decfsz	wreg,f,c
 11115  0022C0  D7FE               	bra	u9607
 11116  0022C2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11117  0022C4  D7FC               	bra	u9607
 11118  0022C6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11119  0022C8  D7FA               	bra	u9607
 11120  0022CA                     l7697:
 11121  0022CA  A281               	btfss	3969,1,c	;volatile
 11122  0022CC  D7A2               	goto	l7679
 11123                           
 11124                           ;Test.c: 151: }
 11125                           ;Test.c: 152: LATCbits.LATC5 = 0;
 11126  0022CE  9A8B               	bcf	3979,5,c	;volatile
 11127                           
 11128                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11129  0022D0  0E01               	movlw	1
 11130  0022D2  EC15  F02A         	call	_lcdInst
 11131  0022D6  0E68               	movlw	104
 11132  0022D8  0100               	movlb	0	; () banked
 11133  0022DA  6FAB               	movwf	??_sensorTest& (0+255),b
 11134  0022DC  0EE4               	movlw	228
 11135  0022DE                     u9617:
 11136  0022DE  2EE8               	decfsz	wreg,f,c
 11137  0022E0  D7FE               	bra	u9617
 11138  0022E2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11139  0022E4  D7FC               	bra	u9617
 11140  0022E6  F000               	nop	
 11141  0022E8  0E80               	movlw	128
 11142  0022EA  EC15  F02A         	call	_lcdInst
 11143                           
 11144                           ;Test.c: 161: printf("TST: MAGNETISM");
 11145  0022EE  0E87               	movlw	low STR_82
 11146  0022F0  0100               	movlb	0	; () banked
 11147  0022F2  6F8E               	movwf	printf@f& (0+255),b
 11148  0022F4  0EFE               	movlw	high STR_82
 11149  0022F6  0100               	movlb	0	; () banked
 11150  0022F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11151  0022FA  EC1B  F00B         	call	_printf	;wreg free
 11152                           
 11153                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 11154  0022FE  0E05               	movlw	5
 11155  002300  0100               	movlb	0	; () banked
 11156  002302  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11157  002304  0E0F               	movlw	15
 11158  002306  0100               	movlb	0	; () banked
 11159  002308  6FAB               	movwf	??_sensorTest& (0+255),b
 11160  00230A  0EF1               	movlw	241
 11161  00230C                     u9627:
 11162  00230C  2EE8               	decfsz	wreg,f,c
 11163  00230E  D7FE               	bra	u9627
 11164  002310  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11165  002312  D7FC               	bra	u9627
 11166  002314  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11167  002316  D7FA               	bra	u9627
 11168                           
 11169                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 11170  002318  D021               	goto	l7715
 11171  00231A                     l7709:
 11172                           
 11173                           ;Test.c: 164: readMAG();
 11174  00231A  ECCE  F026         	call	_readMAG	;wreg free
 11175                           
 11176                           ;Test.c: 165: lcdInst(0b10000000);;
 11177  00231E  0E80               	movlw	128
 11178  002320  EC15  F02A         	call	_lcdInst
 11179                           
 11180                           ;Test.c: 166: lcdInst(0b11000000);;
 11181  002324  0EC0               	movlw	192
 11182  002326  EC15  F02A         	call	_lcdInst
 11183                           
 11184                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 11185  00232A  0E2A               	movlw	low STR_83
 11186  00232C  0100               	movlb	0	; () banked
 11187  00232E  6F8E               	movwf	printf@f& (0+255),b
 11188  002330  0EFE               	movlw	high STR_83
 11189  002332  0100               	movlb	0	; () banked
 11190  002334  6F8F               	movwf	(printf@f+1)& (0+255),b
 11191  002336  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11192  00233A  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11193  00233E  EC1B  F00B         	call	_printf	;wreg free
 11194                           
 11195                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 11196  002342  0E05               	movlw	5
 11197  002344  0100               	movlb	0	; () banked
 11198  002346  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11199  002348  0E0F               	movlw	15
 11200  00234A  0100               	movlb	0	; () banked
 11201  00234C  6FAB               	movwf	??_sensorTest& (0+255),b
 11202  00234E  0EF1               	movlw	241
 11203  002350                     u9637:
 11204  002350  2EE8               	decfsz	wreg,f,c
 11205  002352  D7FE               	bra	u9637
 11206  002354  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11207  002356  D7FC               	bra	u9637
 11208  002358  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11209  00235A  D7FA               	bra	u9637
 11210  00235C                     l7715:
 11211  00235C  A281               	btfss	3969,1,c	;volatile
 11212  00235E  D7DD               	goto	l7709
 11213                           
 11214                           ;Test.c: 169: }
 11215                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11216  002360  0E01               	movlw	1
 11217  002362  EC15  F02A         	call	_lcdInst
 11218  002366  0E68               	movlw	104
 11219  002368  0100               	movlb	0	; () banked
 11220  00236A  6FAB               	movwf	??_sensorTest& (0+255),b
 11221  00236C  0EE4               	movlw	228
 11222  00236E                     u9647:
 11223  00236E  2EE8               	decfsz	wreg,f,c
 11224  002370  D7FE               	bra	u9647
 11225  002372  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11226  002374  D7FC               	bra	u9647
 11227  002376  F000               	nop	
 11228  002378  0E80               	movlw	128
 11229  00237A  EC15  F02A         	call	_lcdInst
 11230                           
 11231                           ;Test.c: 175: printf("TST: COND");
 11232  00237E  0E87               	movlw	low STR_84
 11233  002380  0100               	movlb	0	; () banked
 11234  002382  6F8E               	movwf	printf@f& (0+255),b
 11235  002384  0EFF               	movlw	high STR_84
 11236  002386  0100               	movlb	0	; () banked
 11237  002388  6F8F               	movwf	(printf@f+1)& (0+255),b
 11238  00238A  EC1B  F00B         	call	_printf	;wreg free
 11239                           
 11240                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 11241  00238E  0E05               	movlw	5
 11242  002390  0100               	movlb	0	; () banked
 11243  002392  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11244  002394  0E0F               	movlw	15
 11245  002396  0100               	movlb	0	; () banked
 11246  002398  6FAB               	movwf	??_sensorTest& (0+255),b
 11247  00239A  0EF1               	movlw	241
 11248  00239C                     u9657:
 11249  00239C  2EE8               	decfsz	wreg,f,c
 11250  00239E  D7FE               	bra	u9657
 11251  0023A0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11252  0023A2  D7FC               	bra	u9657
 11253  0023A4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11254  0023A6  D7FA               	bra	u9657
 11255  0023A8                     l7727:
 11256                           
 11257                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11258  0023A8  0E01               	movlw	1
 11259  0023AA  EC15  F02A         	call	_lcdInst
 11260  0023AE  0E68               	movlw	104
 11261  0023B0  0100               	movlb	0	; () banked
 11262  0023B2  6FAB               	movwf	??_sensorTest& (0+255),b
 11263  0023B4  0EE4               	movlw	228
 11264  0023B6                     u9667:
 11265  0023B6  2EE8               	decfsz	wreg,f,c
 11266  0023B8  D7FE               	bra	u9667
 11267  0023BA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11268  0023BC  D7FC               	bra	u9667
 11269  0023BE  F000               	nop	
 11270  0023C0  0E80               	movlw	128
 11271  0023C2  EC15  F02A         	call	_lcdInst
 11272                           
 11273                           ;Test.c: 179: printf("TST: COND");
 11274  0023C6  0E87               	movlw	low STR_84
 11275  0023C8  0100               	movlb	0	; () banked
 11276  0023CA  6F8E               	movwf	printf@f& (0+255),b
 11277  0023CC  0EFF               	movlw	high STR_84
 11278  0023CE  0100               	movlb	0	; () banked
 11279  0023D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11280  0023D2  EC1B  F00B         	call	_printf	;wreg free
 11281                           
 11282                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 11283  0023D6  D01B               	goto	l7739
 11284  0023D8                     l7735:
 11285                           
 11286                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11287  0023D8  0E80               	movlw	128
 11288  0023DA  EC15  F02A         	call	_lcdInst
 11289  0023DE  0EC0               	movlw	192
 11290  0023E0  EC15  F02A         	call	_lcdInst
 11291                           
 11292                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 11293  0023E4  0EA5               	movlw	low STR_86
 11294  0023E6  0100               	movlb	0	; () banked
 11295  0023E8  6F8E               	movwf	printf@f& (0+255),b
 11296  0023EA  0EFF               	movlw	high STR_86
 11297  0023EC  0100               	movlb	0	; () banked
 11298  0023EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11299  0023F0  A480               	btfss	3968,2,c	;volatile
 11300  0023F2  D004               	goto	u6320
 11301  0023F4  0100               	movlb	0	; () banked
 11302  0023F6  6BAB               	clrf	??_sensorTest& (0+255),b
 11303  0023F8  2BAB               	incf	??_sensorTest& (0+255),f,b
 11304  0023FA  D002               	goto	u6328
 11305  0023FC                     u6320:
 11306  0023FC  0100               	movlb	0	; () banked
 11307  0023FE  6BAB               	clrf	??_sensorTest& (0+255),b
 11308  002400                     u6328:
 11309  002400  0100               	movlb	0	; () banked
 11310  002402  51AB               	movf	??_sensorTest& (0+255),w,b
 11311  002404  0100               	movlb	0	; () banked
 11312  002406  6F90               	movwf	(?_printf+2)& (0+255),b
 11313  002408  6B91               	clrf	(?_printf+3)& (0+255),b
 11314  00240A  EC1B  F00B         	call	_printf	;wreg free
 11315  00240E                     l7739:
 11316  00240E  A281               	btfss	3969,1,c	;volatile
 11317  002410  D7E3               	goto	l7735
 11318                           
 11319                           ;Test.c: 186: }
 11320                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 11321  002412  3881               	swapf	3969,w,c	;volatile
 11322  002414  0B0F               	andlw	15
 11323  002416  0A0F               	xorlw	15
 11324  002418  B4D8               	btfsc	status,2,c
 11325  00241A  0012               	return	
 11326                           
 11327                           ;Test.c: 190: else{
 11328                           ;Test.c: 191: LATAbits.LATA3 = 1;
 11329                           
 11330                           ;Test.c: 189: }
 11331                           
 11332                           ;Test.c: 188: break;
 11333  00241C  8689               	bsf	3977,3,c	;volatile
 11334                           
 11335                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 11336  00241E  D01B               	goto	l7751
 11337  002420                     l7747:
 11338                           
 11339                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11340  002420  0E80               	movlw	128
 11341  002422  EC15  F02A         	call	_lcdInst
 11342  002426  0EC0               	movlw	192
 11343  002428  EC15  F02A         	call	_lcdInst
 11344                           
 11345                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 11346  00242C  0EA5               	movlw	low STR_86
 11347  00242E  0100               	movlb	0	; () banked
 11348  002430  6F8E               	movwf	printf@f& (0+255),b
 11349  002432  0EFF               	movlw	high STR_86
 11350  002434  0100               	movlb	0	; () banked
 11351  002436  6F8F               	movwf	(printf@f+1)& (0+255),b
 11352  002438  A480               	btfss	3968,2,c	;volatile
 11353  00243A  D004               	goto	u6350
 11354  00243C  0100               	movlb	0	; () banked
 11355  00243E  6BAB               	clrf	??_sensorTest& (0+255),b
 11356  002440  2BAB               	incf	??_sensorTest& (0+255),f,b
 11357  002442  D002               	goto	u6358
 11358  002444                     u6350:
 11359  002444  0100               	movlb	0	; () banked
 11360  002446  6BAB               	clrf	??_sensorTest& (0+255),b
 11361  002448                     u6358:
 11362  002448  0100               	movlb	0	; () banked
 11363  00244A  51AB               	movf	??_sensorTest& (0+255),w,b
 11364  00244C  0100               	movlb	0	; () banked
 11365  00244E  6F90               	movwf	(?_printf+2)& (0+255),b
 11366  002450  6B91               	clrf	(?_printf+3)& (0+255),b
 11367  002452  EC1B  F00B         	call	_printf	;wreg free
 11368  002456                     l7751:
 11369  002456  B281               	btfsc	3969,1,c	;volatile
 11370  002458  D7E3               	goto	l7747
 11371                           
 11372                           ;Test.c: 196: }
 11373                           ;Test.c: 197: LATAbits.LATA3 = !1;
 11374  00245A  9689               	bcf	3977,3,c	;volatile
 11375  00245C  D7A5               	goto	l7727
 11376  00245E                     __end_of_sensorTest:
 11377                           	opt stack 0
 11378                           tblptru	equ	0xFF8
 11379                           tblptrh	equ	0xFF7
 11380                           tblptrl	equ	0xFF6
 11381                           tablat	equ	0xFF5
 11382                           prodh	equ	0xFF4
 11383                           prodl	equ	0xFF3
 11384                           intcon	equ	0xFF2
 11385                           intcon2	equ	0xFF1
 11386                           intcon3	equ	0xFF0
 11387                           postinc0	equ	0xFEE
 11388                           wreg	equ	0xFE8
 11389                           postdec1	equ	0xFE5
 11390                           fsr1l	equ	0xFE1
 11391                           indf2	equ	0xFDF
 11392                           postinc2	equ	0xFDE
 11393                           postdec2	equ	0xFDD
 11394                           fsr2h	equ	0xFDA
 11395                           fsr2l	equ	0xFD9
 11396                           status	equ	0xFD8
 11397                           
 11398 ;; *************** function _readMAG *****************
 11399 ;; Defined at:
 11400 ;;		line 29 in file "ADCFunctionality.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;		None
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;  res             2    4[BANK0 ] int 
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  1    wreg      void 
 11407 ;; Registers used:
 11408 ;;		wreg, status,2, status,0, cstack
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11417 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11418 ;;Total ram usage:        4 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; Hardware stack levels required when called:    8
 11421 ;; This function calls:
 11422 ;;		_readADC
 11423 ;; This function is called by:
 11424 ;;		_getMAG
 11425 ;;		_sensorTest
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429                           	psect	text38
 11430  004D9C                     __ptext38:
 11431                           	opt stack 0
 11432  004D9C                     _readMAG:
 11433                           	opt stack 19
 11434                           
 11435                           ;ADCFunctionality.c: 30: readADC(1);
 11436                           
 11437                           ;incstack = 0
 11438  004D9C  0E01               	movlw	1
 11439  004D9E  EC0C  F029         	call	_readADC
 11440                           
 11441                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11442  004DA2  50C3               	movf	4035,w,c	;volatile
 11443  004DA4  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11444  004DA8  0100               	movlb	0	; () banked
 11445  004DAA  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11446  004DAC  C082  F083         	movff	??_readMAG,??_readMAG+1
 11447  004DB0  0100               	movlb	0	; () banked
 11448  004DB2  6B82               	clrf	??_readMAG& (0+255),b
 11449  004DB4  0100               	movlb	0	; () banked
 11450  004DB6  1182               	iorwf	??_readMAG& (0+255),w,b
 11451  004DB8  0100               	movlb	0	; () banked
 11452  004DBA  6F84               	movwf	readMAG@res& (0+255),b
 11453  004DBC  0100               	movlb	0	; () banked
 11454  004DBE  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11455  004DC0  0100               	movlb	0	; () banked
 11456  004DC2  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11460  004DC4  0100               	movlb	0	; () banked
 11461  004DC6  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11462  004DC8  D008               	goto	u4711
 11463  004DCA  0100               	movlb	0	; () banked
 11464  004DCC  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11465  004DCE  E107               	bnz	u4710
 11466  004DD0  0E96               	movlw	150
 11467  004DD2  0100               	movlb	0	; () banked
 11468  004DD4  5D84               	subwf	readMAG@res& (0+255),w,b
 11469  004DD6  B0D8               	btfsc	status,0,c
 11470  004DD8  D002               	goto	u4710
 11471  004DDA                     u4711:
 11472  004DDA  0E01               	movlw	1
 11473  004DDC  D001               	goto	u4720
 11474  004DDE                     u4710:
 11475  004DDE  0E00               	movlw	0
 11476  004DE0                     u4720:
 11477  004DE0  0100               	movlb	0	; () banked
 11478  004DE2  6FE8               	movwf	_MAG_signal& (0+255),b
 11479  004DE4  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11480                           
 11481                           ; BSR set to: 0
 11482  004DE6  0012               	return		;funcret
 11483  004DE8                     __end_of_readMAG:
 11484                           	opt stack 0
 11485                           tblptru	equ	0xFF8
 11486                           tblptrh	equ	0xFF7
 11487                           tblptrl	equ	0xFF6
 11488                           tablat	equ	0xFF5
 11489                           prodh	equ	0xFF4
 11490                           prodl	equ	0xFF3
 11491                           intcon	equ	0xFF2
 11492                           intcon2	equ	0xFF1
 11493                           intcon3	equ	0xFF0
 11494                           postinc0	equ	0xFEE
 11495                           wreg	equ	0xFE8
 11496                           postdec1	equ	0xFE5
 11497                           fsr1l	equ	0xFE1
 11498                           indf2	equ	0xFDF
 11499                           postinc2	equ	0xFDE
 11500                           postdec2	equ	0xFDD
 11501                           fsr2h	equ	0xFDA
 11502                           fsr2l	equ	0xFD9
 11503                           status	equ	0xFD8
 11504                           
 11505 ;; *************** function _arm *****************
 11506 ;; Defined at:
 11507 ;;		line 603 in file "Test.c"
 11508 ;; Parameters:    Size  Location     Type
 11509 ;;		None
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;  on              2   44[BANK0 ] int 
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  1    wreg      void 
 11514 ;; Registers used:
 11515 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11524 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11525 ;;Total ram usage:        3 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:   10
 11528 ;; This function calls:
 11529 ;;		_lcdInst
 11530 ;;		_printf
 11531 ;; This function is called by:
 11532 ;;		_Test
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           	psect	text39
 11537  003E36                     __ptext39:
 11538                           	opt stack 0
 11539  003E36                     _arm:
 11540                           	opt stack 19
 11541                           
 11542                           ;Test.c: 604: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11543                           
 11544                           ; BSR set to: 0
 11545                           ;incstack = 0
 11546  003E36  0E01               	movlw	1
 11547  003E38  EC15  F02A         	call	_lcdInst
 11548  003E3C  0E68               	movlw	104
 11549  003E3E  0100               	movlb	0	; () banked
 11550  003E40  6FAB               	movwf	??_arm& (0+255),b
 11551  003E42  0EE4               	movlw	228
 11552  003E44                     u9677:
 11553  003E44  2EE8               	decfsz	wreg,f,c
 11554  003E46  D7FE               	bra	u9677
 11555  003E48  2FAB               	decfsz	??_arm& (0+255),f,b
 11556  003E4A  D7FC               	bra	u9677
 11557  003E4C  F000               	nop	
 11558  003E4E  0E80               	movlw	128
 11559  003E50  EC15  F02A         	call	_lcdInst
 11560                           
 11561                           ;Test.c: 605: printf("D WILL RETURN   ");
 11562  003E54  0E0A               	movlw	low STR_118
 11563  003E56  0100               	movlb	0	; () banked
 11564  003E58  6F8E               	movwf	printf@f& (0+255),b
 11565  003E5A  0EFC               	movlw	high STR_118
 11566  003E5C  0100               	movlb	0	; () banked
 11567  003E5E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11568  003E60  EC1B  F00B         	call	_printf	;wreg free
 11569                           
 11570                           ;Test.c: 606: lcdInst(0b11000000);;
 11571  003E64  0EC0               	movlw	192
 11572  003E66  EC15  F02A         	call	_lcdInst
 11573                           
 11574                           ;Test.c: 607: printf("ELSE TOGGLES ARM");
 11575  003E6A  0EA3               	movlw	low STR_127
 11576  003E6C  0100               	movlb	0	; () banked
 11577  003E6E  6F8E               	movwf	printf@f& (0+255),b
 11578  003E70  0EFC               	movlw	high STR_127
 11579  003E72  0100               	movlb	0	; () banked
 11580  003E74  6F8F               	movwf	(printf@f+1)& (0+255),b
 11581  003E76  EC1B  F00B         	call	_printf	;wreg free
 11582                           
 11583                           ;Test.c: 608: int on = 0;
 11584  003E7A  0E00               	movlw	0
 11585  003E7C  0100               	movlb	0	; () banked
 11586  003E7E  6FAD               	movwf	(arm@on+1)& (0+255),b
 11587  003E80  0E00               	movlw	0
 11588  003E82  6FAC               	movwf	arm@on& (0+255),b
 11589  003E84                     l8191:
 11590                           
 11591                           ;Test.c: 610: if(on){
 11592  003E84  0100               	movlb	0	; () banked
 11593  003E86  51AC               	movf	arm@on& (0+255),w,b
 11594  003E88  0100               	movlb	0	; () banked
 11595  003E8A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11596  003E8C  B4D8               	btfsc	status,2,c
 11597  003E8E  D02B               	goto	l8205
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;Test.c: 611: on = !on;
 11601  003E90  0100               	movlb	0	; () banked
 11602  003E92  51AC               	movf	arm@on& (0+255),w,b
 11603  003E94  0100               	movlb	0	; () banked
 11604  003E96  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11605  003E98  A4D8               	btfss	status,2,c
 11606  003E9A  D002               	goto	u6940
 11607  003E9C  0E01               	movlw	1
 11608  003E9E  D001               	goto	u6950
 11609  003EA0                     u6940:
 11610  003EA0  0E00               	movlw	0
 11611  003EA2                     u6950:
 11612  003EA2  0100               	movlb	0	; () banked
 11613  003EA4  6FAC               	movwf	arm@on& (0+255),b
 11614  003EA6  6BAD               	clrf	(arm@on+1)& (0+255),b
 11615                           
 11616                           ;Test.c: 612: while(PORTBbits.RB1 == 0){
 11617  003EA8  D014               	goto	l8199
 11618  003EAA                     l1395:
 11619                           
 11620                           ;Test.c: 613: LATBbits.LATB3 = 1;
 11621  003EAA  868A               	bsf	3978,3,c	;volatile
 11622                           
 11623                           ;Test.c: 614: _delay((unsigned long)((1200)*(32000000/4000000.0)));
 11624  003EAC  0E0D               	movlw	13
 11625  003EAE  0100               	movlb	0	; () banked
 11626  003EB0  6FAB               	movwf	??_arm& (0+255),b
 11627  003EB2  0E76               	movlw	118
 11628  003EB4                     u9687:
 11629  003EB4  2EE8               	decfsz	wreg,f,c
 11630  003EB6  D7FE               	bra	u9687
 11631  003EB8  2FAB               	decfsz	??_arm& (0+255),f,b
 11632  003EBA  D7FC               	bra	u9687
 11633  003EBC  F000               	nop	
 11634                           
 11635                           ;Test.c: 615: LATBbits.LATB3 = 0;
 11636  003EBE  968A               	bcf	3978,3,c	;volatile
 11637                           
 11638                           ;Test.c: 616: _delay((unsigned long)((19)*(32000000/4000.0)));
 11639  003EC0  0EC6               	movlw	198
 11640  003EC2  0100               	movlb	0	; () banked
 11641  003EC4  6FAB               	movwf	??_arm& (0+255),b
 11642  003EC6  0E65               	movlw	101
 11643  003EC8                     u9697:
 11644  003EC8  2EE8               	decfsz	wreg,f,c
 11645  003ECA  D7FE               	bra	u9697
 11646  003ECC  2FAB               	decfsz	??_arm& (0+255),f,b
 11647  003ECE  D7FC               	bra	u9697
 11648  003ED0  D000               	nop2	
 11649  003ED2                     l8199:
 11650  003ED2  A281               	btfss	3969,1,c	;volatile
 11651  003ED4  D7EA               	goto	l1395
 11652                           
 11653                           ;Test.c: 617: }
 11654                           ;Test.c: 618: if(PORTB >> 4 == 0b1111){
 11655  003ED6  3881               	swapf	3969,w,c	;volatile
 11656  003ED8  0B0F               	andlw	15
 11657  003EDA  0A0F               	xorlw	15
 11658  003EDC  B4D8               	btfsc	status,2,c
 11659  003EDE  0012               	return	
 11660  003EE0                     l1399:
 11661  003EE0  A281               	btfss	3969,1,c	;volatile
 11662  003EE2  D7D0               	goto	l8191
 11663  003EE4  D7FD               	goto	l1399
 11664  003EE6                     l8205:
 11665                           
 11666                           ;Test.c: 623: else{
 11667                           ;Test.c: 624: on = !on;
 11668  003EE6  0100               	movlb	0	; () banked
 11669  003EE8  51AC               	movf	arm@on& (0+255),w,b
 11670  003EEA  0100               	movlb	0	; () banked
 11671  003EEC  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11672  003EEE  A4D8               	btfss	status,2,c
 11673  003EF0  D002               	goto	u6990
 11674  003EF2  0E01               	movlw	1
 11675  003EF4  D001               	goto	u7000
 11676  003EF6                     u6990:
 11677  003EF6  0E00               	movlw	0
 11678  003EF8                     u7000:
 11679  003EF8  0100               	movlb	0	; () banked
 11680  003EFA  6FAC               	movwf	arm@on& (0+255),b
 11681  003EFC  6BAD               	clrf	(arm@on+1)& (0+255),b
 11682                           
 11683                           ;Test.c: 625: while(PORTBbits.RB1 == 0){
 11684  003EFE  D014               	goto	l8211
 11685  003F00                     l1404:
 11686                           
 11687                           ;Test.c: 626: LATBbits.LATB3 = 1;
 11688  003F00  868A               	bsf	3978,3,c	;volatile
 11689                           
 11690                           ;Test.c: 627: _delay((unsigned long)((2400)*(32000000/4000000.0)));
 11691  003F02  0E19               	movlw	25
 11692  003F04  0100               	movlb	0	; () banked
 11693  003F06  6FAB               	movwf	??_arm& (0+255),b
 11694  003F08  0EEE               	movlw	238
 11695  003F0A                     u9707:
 11696  003F0A  2EE8               	decfsz	wreg,f,c
 11697  003F0C  D7FE               	bra	u9707
 11698  003F0E  2FAB               	decfsz	??_arm& (0+255),f,b
 11699  003F10  D7FC               	bra	u9707
 11700  003F12  F000               	nop	
 11701                           
 11702                           ;Test.c: 628: LATBbits.LATB3 = 0;
 11703  003F14  968A               	bcf	3978,3,c	;volatile
 11704                           
 11705                           ;Test.c: 629: _delay((unsigned long)((17)*(32000000/4000.0)));
 11706  003F16  0EB1               	movlw	177
 11707  003F18  0100               	movlb	0	; () banked
 11708  003F1A  6FAB               	movwf	??_arm& (0+255),b
 11709  003F1C  0E9E               	movlw	158
 11710  003F1E                     u9717:
 11711  003F1E  2EE8               	decfsz	wreg,f,c
 11712  003F20  D7FE               	bra	u9717
 11713  003F22  2FAB               	decfsz	??_arm& (0+255),f,b
 11714  003F24  D7FC               	bra	u9717
 11715  003F26  F000               	nop	
 11716  003F28                     l8211:
 11717  003F28  A281               	btfss	3969,1,c	;volatile
 11718  003F2A  D7EA               	goto	l1404
 11719                           
 11720                           ;Test.c: 630: }
 11721                           ;Test.c: 631: if(PORTB >> 4 == 0b1111){
 11722  003F2C  3881               	swapf	3969,w,c	;volatile
 11723  003F2E  0B0F               	andlw	15
 11724  003F30  0A0F               	xorlw	15
 11725  003F32  B4D8               	btfsc	status,2,c
 11726  003F34  0012               	return	
 11727  003F36                     l1407:
 11728  003F36  A281               	btfss	3969,1,c	;volatile
 11729  003F38  D7A5               	goto	l8191
 11730  003F3A  D7FD               	goto	l1407
 11731  003F3C                     __end_of_arm:
 11732                           	opt stack 0
 11733                           tblptru	equ	0xFF8
 11734                           tblptrh	equ	0xFF7
 11735                           tblptrl	equ	0xFF6
 11736                           tablat	equ	0xFF5
 11737                           prodh	equ	0xFF4
 11738                           prodl	equ	0xFF3
 11739                           intcon	equ	0xFF2
 11740                           intcon2	equ	0xFF1
 11741                           intcon3	equ	0xFF0
 11742                           postinc0	equ	0xFEE
 11743                           wreg	equ	0xFE8
 11744                           postdec1	equ	0xFE5
 11745                           fsr1l	equ	0xFE1
 11746                           indf2	equ	0xFDF
 11747                           postinc2	equ	0xFDE
 11748                           postdec2	equ	0xFDD
 11749                           fsr2h	equ	0xFDA
 11750                           fsr2l	equ	0xFD9
 11751                           status	equ	0xFD8
 11752                           
 11753 ;; *************** function _algorithmTest *****************
 11754 ;; Defined at:
 11755 ;;		line 79 in file "Test.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;		None
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;		None
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1    wreg      void 
 11762 ;; Registers used:
 11763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11773 ;;Total ram usage:        2 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:   10
 11776 ;; This function calls:
 11777 ;;		_lcdInst
 11778 ;;		_printf
 11779 ;; This function is called by:
 11780 ;;		_Test
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           	psect	text40
 11785  004106                     __ptext40:
 11786                           	opt stack 0
 11787  004106                     _algorithmTest:
 11788                           	opt stack 19
 11789                           
 11790                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11791                           
 11792                           ;incstack = 0
 11793  004106  0E01               	movlw	1
 11794  004108  EC15  F02A         	call	_lcdInst
 11795  00410C  0E68               	movlw	104
 11796  00410E  0100               	movlb	0	; () banked
 11797  004110  6FAB               	movwf	??_algorithmTest& (0+255),b
 11798  004112  0EE4               	movlw	228
 11799  004114                     u9727:
 11800  004114  2EE8               	decfsz	wreg,f,c
 11801  004116  D7FE               	bra	u9727
 11802  004118  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11803  00411A  D7FC               	bra	u9727
 11804  00411C  F000               	nop	
 11805  00411E  0E80               	movlw	128
 11806  004120  EC15  F02A         	call	_lcdInst
 11807                           
 11808                           ;Test.c: 82: printf("ALGORITHM TEST");
 11809  004124  0ED2               	movlw	low STR_70
 11810  004126  0100               	movlb	0	; () banked
 11811  004128  6F8E               	movwf	printf@f& (0+255),b
 11812  00412A  0EFE               	movlw	high STR_70
 11813  00412C  0100               	movlb	0	; () banked
 11814  00412E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11815  004130  EC1B  F00B         	call	_printf	;wreg free
 11816                           
 11817                           ;Test.c: 83: lcdInst(0b11000000);;
 11818  004134  0EC0               	movlw	192
 11819  004136  EC15  F02A         	call	_lcdInst
 11820                           
 11821                           ;Test.c: 84: printf("PUSH TO START");
 11822  00413A  0E0B               	movlw	low STR_71
 11823  00413C  0100               	movlb	0	; () banked
 11824  00413E  6F8E               	movwf	printf@f& (0+255),b
 11825  004140  0EFF               	movlw	high STR_71
 11826  004142  0100               	movlb	0	; () banked
 11827  004144  6F8F               	movwf	(printf@f+1)& (0+255),b
 11828  004146  EC1B  F00B         	call	_printf	;wreg free
 11829                           
 11830                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 11831  00414A  0E05               	movlw	5
 11832  00414C  0100               	movlb	0	; () banked
 11833  00414E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11834  004150  0E0F               	movlw	15
 11835  004152  0100               	movlb	0	; () banked
 11836  004154  6FAB               	movwf	??_algorithmTest& (0+255),b
 11837  004156  0EF1               	movlw	241
 11838  004158                     u9737:
 11839  004158  2EE8               	decfsz	wreg,f,c
 11840  00415A  D7FE               	bra	u9737
 11841  00415C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11842  00415E  D7FC               	bra	u9737
 11843  004160  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11844  004162  D7FA               	bra	u9737
 11845  004164                     l1200:
 11846  004164  A281               	btfss	3969,1,c	;volatile
 11847  004166  D7FE               	goto	l1200
 11848  004168                     l1203:
 11849  004168  B281               	btfsc	3969,1,c	;volatile
 11850  00416A  D7FE               	goto	l1203
 11851                           
 11852                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11853  00416C  0E01               	movlw	1
 11854  00416E  EC15  F02A         	call	_lcdInst
 11855  004172  0E68               	movlw	104
 11856  004174  0100               	movlb	0	; () banked
 11857  004176  6FAB               	movwf	??_algorithmTest& (0+255),b
 11858  004178  0EE4               	movlw	228
 11859  00417A                     u9747:
 11860  00417A  2EE8               	decfsz	wreg,f,c
 11861  00417C  D7FE               	bra	u9747
 11862  00417E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11863  004180  D7FC               	bra	u9747
 11864  004182  F000               	nop	
 11865  004184  0E80               	movlw	128
 11866  004186  EC15  F02A         	call	_lcdInst
 11867                           
 11868                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 11869  00418A  0E4E               	movlw	low STR_72
 11870  00418C  0100               	movlb	0	; () banked
 11871  00418E  6F8E               	movwf	printf@f& (0+255),b
 11872  004190  0EFC               	movlw	high STR_72
 11873  004192  0100               	movlb	0	; () banked
 11874  004194  6F8F               	movwf	(printf@f+1)& (0+255),b
 11875  004196  EC1B  F00B         	call	_printf	;wreg free
 11876                           
 11877                           ;Test.c: 100: printf("ALG2: 12 CANS");
 11878  00419A  0EEF               	movlw	low STR_73
 11879  00419C  0100               	movlb	0	; () banked
 11880  00419E  6F8E               	movwf	printf@f& (0+255),b
 11881  0041A0  0EFE               	movlw	high STR_73
 11882  0041A2  0100               	movlb	0	; () banked
 11883  0041A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11884  0041A6  EC1B  F00B         	call	_printf	;wreg free
 11885                           
 11886                           ;Test.c: 109: printf("ALG3: 1 CAN");
 11887  0041AA  0E4F               	movlw	low STR_74
 11888  0041AC  0100               	movlb	0	; () banked
 11889  0041AE  6F8E               	movwf	printf@f& (0+255),b
 11890  0041B0  0EFF               	movlw	high STR_74
 11891  0041B2  0100               	movlb	0	; () banked
 11892  0041B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11893  0041B6  EC1B  F00B         	call	_printf	;wreg free
 11894                           
 11895                           ;Test.c: 115: printf("ALG4: ALL CANS");
 11896  0041BA  0EB4               	movlw	low STR_75
 11897  0041BC  0100               	movlb	0	; () banked
 11898  0041BE  6F8E               	movwf	printf@f& (0+255),b
 11899  0041C0  0EFE               	movlw	high STR_75
 11900  0041C2  0100               	movlb	0	; () banked
 11901  0041C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11902  0041C6  EC1B  F00B         	call	_printf	;wreg free
 11903                           
 11904                           ;Test.c: 120: printf("ALG5: NO CANS");
 11905  0041CA  0EFD               	movlw	low STR_76
 11906  0041CC  0100               	movlb	0	; () banked
 11907  0041CE  6F8E               	movwf	printf@f& (0+255),b
 11908  0041D0  0EFE               	movlw	high STR_76
 11909  0041D2  0100               	movlb	0	; () banked
 11910  0041D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11911  0041D6  EC1B  F00B         	call	_printf	;wreg free
 11912  0041DA  0012               	return		;funcret
 11913  0041DC                     __end_of_algorithmTest:
 11914                           	opt stack 0
 11915                           tblptru	equ	0xFF8
 11916                           tblptrh	equ	0xFF7
 11917                           tblptrl	equ	0xFF6
 11918                           tablat	equ	0xFF5
 11919                           prodh	equ	0xFF4
 11920                           prodl	equ	0xFF3
 11921                           intcon	equ	0xFF2
 11922                           intcon2	equ	0xFF1
 11923                           intcon3	equ	0xFF0
 11924                           postinc0	equ	0xFEE
 11925                           wreg	equ	0xFE8
 11926                           postdec1	equ	0xFE5
 11927                           fsr1l	equ	0xFE1
 11928                           indf2	equ	0xFDF
 11929                           postinc2	equ	0xFDE
 11930                           postdec2	equ	0xFDD
 11931                           fsr2h	equ	0xFDA
 11932                           fsr2l	equ	0xFD9
 11933                           status	equ	0xFD8
 11934                           
 11935 ;; *************** function _actuatorTest *****************
 11936 ;; Defined at:
 11937 ;;		line 202 in file "Test.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;		None
 11940 ;; Auto vars:     Size  Location     Type
 11941 ;;  i               1   45[BANK0 ] unsigned char 
 11942 ;;  i               1   67[BANK0 ] unsigned char 
 11943 ;;  i               1   66[BANK0 ] unsigned char 
 11944 ;;  i               1   65[BANK0 ] unsigned char 
 11945 ;;  i               1   64[BANK0 ] unsigned char 
 11946 ;;  i               1   63[BANK0 ] unsigned char 
 11947 ;;  i               1   62[BANK0 ] unsigned char 
 11948 ;;  i               1   61[BANK0 ] unsigned char 
 11949 ;;  i               1   60[BANK0 ] unsigned char 
 11950 ;;  i               1   59[BANK0 ] unsigned char 
 11951 ;;  i               1   58[BANK0 ] unsigned char 
 11952 ;;  i               1   57[BANK0 ] unsigned char 
 11953 ;;  i               1   56[BANK0 ] unsigned char 
 11954 ;;  i               1   55[BANK0 ] unsigned char 
 11955 ;;  i               1   54[BANK0 ] unsigned char 
 11956 ;;  i               1   53[BANK0 ] unsigned char 
 11957 ;;  i               1   52[BANK0 ] unsigned char 
 11958 ;;  i               1   51[BANK0 ] unsigned char 
 11959 ;;  i               1   50[BANK0 ] unsigned char 
 11960 ;;  i               1   49[BANK0 ] unsigned char 
 11961 ;;  i               1   48[BANK0 ] unsigned char 
 11962 ;;  i               1   47[BANK0 ] unsigned char 
 11963 ;;  i               1   46[BANK0 ] unsigned char 
 11964 ;;  i               2   68[BANK0 ] int 
 11965 ;; Return value:  Size  Location     Type
 11966 ;;                  1    wreg      void 
 11967 ;; Registers used:
 11968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11969 ;; Tracked objects:
 11970 ;;		On entry : 0/0
 11971 ;;		On exit  : 0/0
 11972 ;;		Unchanged: 0/0
 11973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11975 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11977 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11978 ;;Total ram usage:       27 bytes
 11979 ;; Hardware stack levels used:    1
 11980 ;; Hardware stack levels required when called:   10
 11981 ;; This function calls:
 11982 ;;		_lcdInst
 11983 ;;		_printf
 11984 ;;		_updateServoPosition
 11985 ;; This function is called by:
 11986 ;;		_Test
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           	psect	text41
 11991  0008DA                     __ptext41:
 11992                           	opt stack 0
 11993  0008DA                     _actuatorTest:
 11994                           	opt stack 19
 11995                           
 11996                           ;Test.c: 204: int i = 0;
 11997                           
 11998                           ;incstack = 0
 11999  0008DA  0E00               	movlw	0
 12000  0008DC  0100               	movlb	0	; () banked
 12001  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12002  0008E0  0E00               	movlw	0
 12003  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 12004                           
 12005                           ; BSR set to: 0
 12006                           ;Test.c: 206: (INTCONbits.GIE = 1);
 12007  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12011  0008E6  0E01               	movlw	1
 12012  0008E8  EC15  F02A         	call	_lcdInst
 12013  0008EC  0E68               	movlw	104
 12014  0008EE  0100               	movlb	0	; () banked
 12015  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12016  0008F2  0EE4               	movlw	228
 12017  0008F4                     u9757:
 12018  0008F4  2EE8               	decfsz	wreg,f,c
 12019  0008F6  D7FE               	bra	u9757
 12020  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12021  0008FA  D7FC               	bra	u9757
 12022  0008FC  F000               	nop	
 12023  0008FE  0E80               	movlw	128
 12024  000900  EC15  F02A         	call	_lcdInst
 12025                           
 12026                           ;Test.c: 208: printf("ACTUATORS");
 12027  000904  0E91               	movlw	low STR_88
 12028  000906  0100               	movlb	0	; () banked
 12029  000908  6F8E               	movwf	printf@f& (0+255),b
 12030  00090A  0EFF               	movlw	high STR_88
 12031  00090C  0100               	movlb	0	; () banked
 12032  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12033  000910  EC1B  F00B         	call	_printf	;wreg free
 12034                           
 12035                           ;Test.c: 209: lcdInst(0b11000000);;
 12036  000914  0EC0               	movlw	192
 12037  000916  EC15  F02A         	call	_lcdInst
 12038                           
 12039                           ;Test.c: 210: printf("PUSH TO START");
 12040  00091A  0E0B               	movlw	low STR_71
 12041  00091C  0100               	movlb	0	; () banked
 12042  00091E  6F8E               	movwf	printf@f& (0+255),b
 12043  000920  0EFF               	movlw	high STR_71
 12044  000922  0100               	movlb	0	; () banked
 12045  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 12046  000926  EC1B  F00B         	call	_printf	;wreg free
 12047                           
 12048                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 12049  00092A  0E05               	movlw	5
 12050  00092C  0100               	movlb	0	; () banked
 12051  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12052  000930  0E0F               	movlw	15
 12053  000932  0100               	movlb	0	; () banked
 12054  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 12055  000936  0EF1               	movlw	241
 12056  000938                     u9767:
 12057  000938  2EE8               	decfsz	wreg,f,c
 12058  00093A  D7FE               	bra	u9767
 12059  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12060  00093E  D7FC               	bra	u9767
 12061  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12062  000942  D7FA               	bra	u9767
 12063  000944                     l1235:
 12064  000944  A281               	btfss	3969,1,c	;volatile
 12065  000946  D7FE               	goto	l1235
 12066  000948                     l1238:
 12067  000948  B281               	btfsc	3969,1,c	;volatile
 12068  00094A  D7FE               	goto	l1238
 12069                           
 12070                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12071  00094C  0E01               	movlw	1
 12072  00094E  EC15  F02A         	call	_lcdInst
 12073  000952  0E68               	movlw	104
 12074  000954  0100               	movlb	0	; () banked
 12075  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 12076  000958  0EE4               	movlw	228
 12077  00095A                     u9777:
 12078  00095A  2EE8               	decfsz	wreg,f,c
 12079  00095C  D7FE               	bra	u9777
 12080  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12081  000960  D7FC               	bra	u9777
 12082  000962  F000               	nop	
 12083  000964  0E80               	movlw	128
 12084  000966  EC15  F02A         	call	_lcdInst
 12085                           
 12086                           ;Test.c: 219: printf("TST: DC MOTORS");
 12087  00096A  0EC3               	movlw	low STR_90
 12088  00096C  0100               	movlb	0	; () banked
 12089  00096E  6F8E               	movwf	printf@f& (0+255),b
 12090  000970  0EFE               	movlw	high STR_90
 12091  000972  0100               	movlb	0	; () banked
 12092  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 12093  000976  EC1B  F00B         	call	_printf	;wreg free
 12094                           
 12095                           ;Test.c: 220: lcdInst(0b11000000);;
 12096  00097A  0EC0               	movlw	192
 12097  00097C  EC15  F02A         	call	_lcdInst
 12098                           
 12099                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 12100  000980  0EE1               	movlw	low STR_91
 12101  000982  0100               	movlb	0	; () banked
 12102  000984  6F8E               	movwf	printf@f& (0+255),b
 12103  000986  0EFE               	movlw	high STR_91
 12104  000988  0100               	movlb	0	; () banked
 12105  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12106  00098C  EC1B  F00B         	call	_printf	;wreg free
 12107                           
 12108                           ;Test.c: 222: LATBbits.LATB2 = 1;
 12109  000990  848A               	bsf	3978,2,c	;volatile
 12110                           
 12111                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12112  000992  0E00               	movlw	0
 12113  000994  0100               	movlb	0	; () banked
 12114  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12115  000998  0E00               	movlw	0
 12116  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 12117                           
 12118                           ; BSR set to: 0
 12119  00099C  0100               	movlb	0	; () banked
 12120  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12121  0009A0  D008               	goto	l7791
 12122  0009A2  0100               	movlb	0	; () banked
 12123  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12124  0009A6  E123               	bnz	l1242
 12125  0009A8  0E05               	movlw	5
 12126  0009AA  0100               	movlb	0	; () banked
 12127  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12128  0009AE  B0D8               	btfsc	status,0,c
 12129  0009B0  D01E               	goto	l1242
 12130  0009B2                     l7791:
 12131                           
 12132                           ; BSR set to: 0
 12133  0009B2  0E00               	movlw	0
 12134  0009B4  0100               	movlb	0	; () banked
 12135  0009B6  6FAD               	movwf	actuatorTest@i_1720& (0+255),b
 12136  0009B8                     l7793:
 12137                           
 12138                           ; BSR set to: 0
 12139  0009B8  0E63               	movlw	99
 12140  0009BA  0100               	movlb	0	; () banked
 12141  0009BC  65AD               	cpfsgt	actuatorTest@i_1720& (0+255),b
 12142  0009BE  D001               	goto	l7797
 12143  0009C0  D00C               	goto	l7801
 12144  0009C2                     l7797:
 12145                           
 12146                           ; BSR set to: 0
 12147  0009C2  0E68               	movlw	104
 12148  0009C4  0100               	movlb	0	; () banked
 12149  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12150  0009C8  0EE4               	movlw	228
 12151  0009CA                     u9787:
 12152  0009CA  2EE8               	decfsz	wreg,f,c
 12153  0009CC  D7FE               	bra	u9787
 12154  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12155  0009D0  D7FC               	bra	u9787
 12156  0009D2  F000               	nop	
 12157  0009D4  0100               	movlb	0	; () banked
 12158  0009D6  2BAD               	incf	actuatorTest@i_1720& (0+255),f,b
 12159  0009D8  D7EF               	goto	l7793
 12160  0009DA                     l7801:
 12161                           
 12162                           ; BSR set to: 0
 12163  0009DA  0100               	movlb	0	; () banked
 12164  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12165  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12166                           
 12167                           ; BSR set to: 0
 12168  0009E0  0100               	movlb	0	; () banked
 12169  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12170  0009E4  D7E6               	goto	l7791
 12171  0009E6  0100               	movlb	0	; () banked
 12172  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12173  0009EA  E101               	bnz	u6420
 12174  0009EC  D7DD               	goto	L9
 12175  0009EE                     u6420:
 12176  0009EE                     l1242:
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;Test.c: 224: LATBbits.LATB2 = 0;
 12180  0009EE  948A               	bcf	3978,2,c	;volatile
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12184  0009F0  0E01               	movlw	1
 12185  0009F2  EC15  F02A         	call	_lcdInst
 12186  0009F6  0E68               	movlw	104
 12187  0009F8  0100               	movlb	0	; () banked
 12188  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12189  0009FC  0EE4               	movlw	228
 12190  0009FE                     u9797:
 12191  0009FE  2EE8               	decfsz	wreg,f,c
 12192  000A00  D7FE               	bra	u9797
 12193  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12194  000A04  D7FC               	bra	u9797
 12195  000A06  F000               	nop	
 12196  000A08  0E80               	movlw	128
 12197  000A0A  EC15  F02A         	call	_lcdInst
 12198                           
 12199                           ;Test.c: 231: printf("TST: COND SOLN'D");
 12200  000A0E  0E5F               	movlw	low STR_92
 12201  000A10  0100               	movlb	0	; () banked
 12202  000A12  6F8E               	movwf	printf@f& (0+255),b
 12203  000A14  0EFC               	movlw	high STR_92
 12204  000A16  0100               	movlb	0	; () banked
 12205  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 12206  000A1A  EC1B  F00B         	call	_printf	;wreg free
 12207                           
 12208                           ;Test.c: 232: lcdInst(0b11000000);;
 12209  000A1E  0EC0               	movlw	192
 12210  000A20  EC15  F02A         	call	_lcdInst
 12211                           
 12212                           ;Test.c: 233: printf("PIN RA3...");
 12213  000A24  0E5B               	movlw	low STR_93
 12214  000A26  0100               	movlb	0	; () banked
 12215  000A28  6F8E               	movwf	printf@f& (0+255),b
 12216  000A2A  0EFF               	movlw	high STR_93
 12217  000A2C  0100               	movlb	0	; () banked
 12218  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12219  000A30  EC1B  F00B         	call	_printf	;wreg free
 12220                           
 12221                           ;Test.c: 234: for(i=0;i<5;i++){
 12222  000A34  0E00               	movlw	0
 12223  000A36  0100               	movlb	0	; () banked
 12224  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12225  000A3A  0E00               	movlw	0
 12226  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 12227                           
 12228                           ; BSR set to: 0
 12229  000A3E  0100               	movlb	0	; () banked
 12230  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12231  000A42  D008               	goto	l1245
 12232  000A44  0100               	movlb	0	; () banked
 12233  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12234  000A48  E12C               	bnz	l1246
 12235  000A4A  0E05               	movlw	5
 12236  000A4C  0100               	movlb	0	; () banked
 12237  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12238  000A50  B0D8               	btfsc	status,0,c
 12239  000A52  D027               	goto	l1246
 12240  000A54                     l1245:
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;Test.c: 235: LATAbits.LATA3 = 1;
 12244  000A54  8689               	bsf	3977,3,c	;volatile
 12245                           
 12246                           ; BSR set to: 0
 12247                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 12248  000A56  0E0D               	movlw	13
 12249  000A58  0100               	movlb	0	; () banked
 12250  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12251  000A5C  0E2D               	movlw	45
 12252  000A5E  0100               	movlb	0	; () banked
 12253  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 12254  000A62  0ED7               	movlw	215
 12255  000A64                     u9807:
 12256  000A64  2EE8               	decfsz	wreg,f,c
 12257  000A66  D7FE               	bra	u9807
 12258  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12259  000A6A  D7FC               	bra	u9807
 12260  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12261  000A6E  D7FA               	bra	u9807
 12262  000A70  D000               	nop2	
 12263                           
 12264                           ;Test.c: 237: LATAbits.LATA3 = !1;
 12265  000A72  9689               	bcf	3977,3,c	;volatile
 12266                           
 12267                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12268  000A74  0E1D               	movlw	29
 12269  000A76  0100               	movlb	0	; () banked
 12270  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12271  000A7A  0E69               	movlw	105
 12272  000A7C  0100               	movlb	0	; () banked
 12273  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12274  000A80  0EA5               	movlw	165
 12275  000A82                     u9817:
 12276  000A82  2EE8               	decfsz	wreg,f,c
 12277  000A84  D7FE               	bra	u9817
 12278  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12279  000A88  D7FC               	bra	u9817
 12280  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12281  000A8C  D7FA               	bra	u9817
 12282  000A8E  0100               	movlb	0	; () banked
 12283  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12284  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12285  000A94  0100               	movlb	0	; () banked
 12286  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12287  000A98  D7DD               	goto	l1245
 12288  000A9A  0100               	movlb	0	; () banked
 12289  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12290  000A9E  E101               	bnz	u6440
 12291  000AA0  D7D4               	goto	L10
 12292  000AA2                     u6440:
 12293  000AA2                     l1246:
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;Test.c: 239: }
 12297                           ;Test.c: 240: LATAbits.LATA3 = !1;
 12298  000AA2  9689               	bcf	3977,3,c	;volatile
 12299                           
 12300                           ; BSR set to: 0
 12301                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12302  000AA4  0E01               	movlw	1
 12303  000AA6  EC15  F02A         	call	_lcdInst
 12304  000AAA  0E68               	movlw	104
 12305  000AAC  0100               	movlb	0	; () banked
 12306  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12307  000AB0  0EE4               	movlw	228
 12308  000AB2                     u9827:
 12309  000AB2  2EE8               	decfsz	wreg,f,c
 12310  000AB4  D7FE               	bra	u9827
 12311  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12312  000AB8  D7FC               	bra	u9827
 12313  000ABA  F000               	nop	
 12314  000ABC  0E80               	movlw	128
 12315  000ABE  EC15  F02A         	call	_lcdInst
 12316                           
 12317                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 12318  000AC2  0E70               	movlw	low STR_94
 12319  000AC4  0100               	movlb	0	; () banked
 12320  000AC6  6F8E               	movwf	printf@f& (0+255),b
 12321  000AC8  0EFC               	movlw	high STR_94
 12322  000ACA  0100               	movlb	0	; () banked
 12323  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12324  000ACE  EC1B  F00B         	call	_printf	;wreg free
 12325                           
 12326                           ;Test.c: 248: lcdInst(0b11000000);;
 12327  000AD2  0EC0               	movlw	192
 12328  000AD4  EC15  F02A         	call	_lcdInst
 12329                           
 12330                           ;Test.c: 249: printf("PIN RA4...");
 12331  000AD8  0E66               	movlw	low STR_95
 12332  000ADA  0100               	movlb	0	; () banked
 12333  000ADC  6F8E               	movwf	printf@f& (0+255),b
 12334  000ADE  0EFF               	movlw	high STR_95
 12335  000AE0  0100               	movlb	0	; () banked
 12336  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12337  000AE4  EC1B  F00B         	call	_printf	;wreg free
 12338                           
 12339                           ;Test.c: 250: for(i=0;i<5;i++){
 12340  000AE8  0E00               	movlw	0
 12341  000AEA  0100               	movlb	0	; () banked
 12342  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12343  000AEE  0E00               	movlw	0
 12344  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 12345                           
 12346                           ; BSR set to: 0
 12347  000AF2  0100               	movlb	0	; () banked
 12348  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12349  000AF6  D008               	goto	l1247
 12350  000AF8  0100               	movlb	0	; () banked
 12351  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12352  000AFC  E12C               	bnz	l1248
 12353  000AFE  0E05               	movlw	5
 12354  000B00  0100               	movlb	0	; () banked
 12355  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12356  000B04  B0D8               	btfsc	status,0,c
 12357  000B06  D027               	goto	l1248
 12358  000B08                     l1247:
 12359                           
 12360                           ; BSR set to: 0
 12361                           ;Test.c: 251: LATAbits.LATA4 = 1;
 12362  000B08  8889               	bsf	3977,4,c	;volatile
 12363                           
 12364                           ; BSR set to: 0
 12365                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 12366  000B0A  0E0D               	movlw	13
 12367  000B0C  0100               	movlb	0	; () banked
 12368  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12369  000B10  0E2D               	movlw	45
 12370  000B12  0100               	movlb	0	; () banked
 12371  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 12372  000B16  0ED7               	movlw	215
 12373  000B18                     u9837:
 12374  000B18  2EE8               	decfsz	wreg,f,c
 12375  000B1A  D7FE               	bra	u9837
 12376  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12377  000B1E  D7FC               	bra	u9837
 12378  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12379  000B22  D7FA               	bra	u9837
 12380  000B24  D000               	nop2	
 12381                           
 12382                           ;Test.c: 253: LATAbits.LATA4 = !1;
 12383  000B26  9889               	bcf	3977,4,c	;volatile
 12384                           
 12385                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12386  000B28  0E1D               	movlw	29
 12387  000B2A  0100               	movlb	0	; () banked
 12388  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12389  000B2E  0E69               	movlw	105
 12390  000B30  0100               	movlb	0	; () banked
 12391  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 12392  000B34  0EA5               	movlw	165
 12393  000B36                     u9847:
 12394  000B36  2EE8               	decfsz	wreg,f,c
 12395  000B38  D7FE               	bra	u9847
 12396  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12397  000B3C  D7FC               	bra	u9847
 12398  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12399  000B40  D7FA               	bra	u9847
 12400  000B42  0100               	movlb	0	; () banked
 12401  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12402  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12403  000B48  0100               	movlb	0	; () banked
 12404  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12405  000B4C  D7DD               	goto	l1247
 12406  000B4E  0100               	movlb	0	; () banked
 12407  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12408  000B52  E101               	bnz	u6460
 12409  000B54  D7D4               	goto	L11
 12410  000B56                     u6460:
 12411  000B56                     l1248:
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;Test.c: 255: }
 12415                           ;Test.c: 256: LATAbits.LATA4 = !1;
 12416  000B56  9889               	bcf	3977,4,c	;volatile
 12417                           
 12418                           ; BSR set to: 0
 12419                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12420  000B58  0E01               	movlw	1
 12421  000B5A  EC15  F02A         	call	_lcdInst
 12422  000B5E  0E68               	movlw	104
 12423  000B60  0100               	movlb	0	; () banked
 12424  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 12425  000B64  0EE4               	movlw	228
 12426  000B66                     u9857:
 12427  000B66  2EE8               	decfsz	wreg,f,c
 12428  000B68  D7FE               	bra	u9857
 12429  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12430  000B6C  D7FC               	bra	u9857
 12431  000B6E  F000               	nop	
 12432  000B70  0E80               	movlw	128
 12433  000B72  EC15  F02A         	call	_lcdInst
 12434                           
 12435                           ;Test.c: 260: machine_state = Sorting_state;
 12436  000B76  0E01               	movlw	1
 12437  000B78  0100               	movlb	0	; () banked
 12438  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 12439                           
 12440                           ; BSR set to: 0
 12441                           ;Test.c: 261: was_low_1 = 0;
 12442  000B7C  0E00               	movlw	0
 12443  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 12444  000B80  0E00               	movlw	0
 12445  000B82  6E77               	movwf	_was_low_1,c	;volatile
 12446                           
 12447                           ; BSR set to: 0
 12448                           ;Test.c: 262: was_low_1 = 0;
 12449  000B84  0E00               	movlw	0
 12450  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 12451  000B88  0E00               	movlw	0
 12452  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 12453                           
 12454                           ; BSR set to: 0
 12455                           ;Test.c: 269: printf("TST: PAN SERVO");
 12456  000B8C  0EA5               	movlw	low STR_96
 12457  000B8E  0100               	movlb	0	; () banked
 12458  000B90  6F8E               	movwf	printf@f& (0+255),b
 12459  000B92  0EFE               	movlw	high STR_96
 12460  000B94  0100               	movlb	0	; () banked
 12461  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 12462  000B98  EC1B  F00B         	call	_printf	;wreg free
 12463                           
 12464                           ;Test.c: 270: lcdInst(0b11000000);;
 12465  000B9C  0EC0               	movlw	192
 12466  000B9E  EC15  F02A         	call	_lcdInst
 12467                           
 12468                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 12469  000BA2  0EE8               	movlw	low STR_97
 12470  000BA4  0100               	movlb	0	; () banked
 12471  000BA6  6F8E               	movwf	printf@f& (0+255),b
 12472  000BA8  0EFB               	movlw	high STR_97
 12473  000BAA  0100               	movlb	0	; () banked
 12474  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12475  000BAE  EC1B  F00B         	call	_printf	;wreg free
 12476                           
 12477                           ;Test.c: 272: updateServoPosition(1200, 1);
 12478  000BB2  0E04               	movlw	4
 12479  000BB4  0100               	movlb	0	; () banked
 12480  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12481  000BB8  0EB0               	movlw	176
 12482  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12483  000BBC  0E00               	movlw	0
 12484  000BBE  0100               	movlb	0	; () banked
 12485  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12486  000BC2  0E01               	movlw	1
 12487  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12488  000BC6  EC9A  F023         	call	_updateServoPosition	;wreg free
 12489                           
 12490                           ;Test.c: 273: TMR1ON = 1;
 12491  000BCA  80CD               	bsf	4045,0,c	;volatile
 12492                           
 12493                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12494  000BCC  0E00               	movlw	0
 12495  000BCE  0100               	movlb	0	; () banked
 12496  000BD0  6FAE               	movwf	actuatorTest@i_1727& (0+255),b
 12497  000BD2                     l7877:
 12498                           
 12499                           ; BSR set to: 0
 12500  000BD2  0E63               	movlw	99
 12501  000BD4  0100               	movlb	0	; () banked
 12502  000BD6  65AE               	cpfsgt	actuatorTest@i_1727& (0+255),b
 12503  000BD8  D001               	goto	l7881
 12504  000BDA  D00C               	goto	l7885
 12505  000BDC                     l7881:
 12506                           
 12507                           ; BSR set to: 0
 12508  000BDC  0E68               	movlw	104
 12509  000BDE  0100               	movlb	0	; () banked
 12510  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12511  000BE2  0EE4               	movlw	228
 12512  000BE4                     u9867:
 12513  000BE4  2EE8               	decfsz	wreg,f,c
 12514  000BE6  D7FE               	bra	u9867
 12515  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12516  000BEA  D7FC               	bra	u9867
 12517  000BEC  F000               	nop	
 12518  000BEE  0100               	movlb	0	; () banked
 12519  000BF0  2BAE               	incf	actuatorTest@i_1727& (0+255),f,b
 12520  000BF2  D7EF               	goto	l7877
 12521  000BF4                     l7885:
 12522                           
 12523                           ; BSR set to: 0
 12524  000BF4  0E00               	movlw	0
 12525  000BF6  0100               	movlb	0	; () banked
 12526  000BF8  6FAF               	movwf	actuatorTest@i_1728& (0+255),b
 12527  000BFA                     l7887:
 12528                           
 12529                           ; BSR set to: 0
 12530  000BFA  0E63               	movlw	99
 12531  000BFC  0100               	movlb	0	; () banked
 12532  000BFE  65AF               	cpfsgt	actuatorTest@i_1728& (0+255),b
 12533  000C00  D001               	goto	l7891
 12534  000C02  D00C               	goto	l7895
 12535  000C04                     l7891:
 12536                           
 12537                           ; BSR set to: 0
 12538  000C04  0E68               	movlw	104
 12539  000C06  0100               	movlb	0	; () banked
 12540  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 12541  000C0A  0EE4               	movlw	228
 12542  000C0C                     u9877:
 12543  000C0C  2EE8               	decfsz	wreg,f,c
 12544  000C0E  D7FE               	bra	u9877
 12545  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12546  000C12  D7FC               	bra	u9877
 12547  000C14  F000               	nop	
 12548  000C16  0100               	movlb	0	; () banked
 12549  000C18  2BAF               	incf	actuatorTest@i_1728& (0+255),f,b
 12550  000C1A  D7EF               	goto	l7887
 12551  000C1C                     l7895:
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12555  000C1C  0E80               	movlw	128
 12556  000C1E  EC15  F02A         	call	_lcdInst
 12557  000C22  0EC0               	movlw	192
 12558  000C24  EC15  F02A         	call	_lcdInst
 12559                           
 12560                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 12561  000C28  0ED7               	movlw	low STR_98
 12562  000C2A  0100               	movlb	0	; () banked
 12563  000C2C  6F8E               	movwf	printf@f& (0+255),b
 12564  000C2E  0EFB               	movlw	high STR_98
 12565  000C30  0100               	movlb	0	; () banked
 12566  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 12567  000C34  EC1B  F00B         	call	_printf	;wreg free
 12568                           
 12569                           ;Test.c: 278: updateServoPosition(500, 1);
 12570  000C38  0E01               	movlw	1
 12571  000C3A  0100               	movlb	0	; () banked
 12572  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12573  000C3E  0EF4               	movlw	244
 12574  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12575  000C42  0E00               	movlw	0
 12576  000C44  0100               	movlb	0	; () banked
 12577  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12578  000C48  0E01               	movlw	1
 12579  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12580  000C4C  EC9A  F023         	call	_updateServoPosition	;wreg free
 12581                           
 12582                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12583  000C50  0E00               	movlw	0
 12584  000C52  0100               	movlb	0	; () banked
 12585  000C54  6FB0               	movwf	actuatorTest@i_1730& (0+255),b
 12586  000C56                     l7903:
 12587                           
 12588                           ; BSR set to: 0
 12589  000C56  0E63               	movlw	99
 12590  000C58  0100               	movlb	0	; () banked
 12591  000C5A  65B0               	cpfsgt	actuatorTest@i_1730& (0+255),b
 12592  000C5C  D001               	goto	l7907
 12593  000C5E  D00C               	goto	l7911
 12594  000C60                     l7907:
 12595                           
 12596                           ; BSR set to: 0
 12597  000C60  0E68               	movlw	104
 12598  000C62  0100               	movlb	0	; () banked
 12599  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 12600  000C66  0EE4               	movlw	228
 12601  000C68                     u9887:
 12602  000C68  2EE8               	decfsz	wreg,f,c
 12603  000C6A  D7FE               	bra	u9887
 12604  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12605  000C6E  D7FC               	bra	u9887
 12606  000C70  F000               	nop	
 12607  000C72  0100               	movlb	0	; () banked
 12608  000C74  2BB0               	incf	actuatorTest@i_1730& (0+255),f,b
 12609  000C76  D7EF               	goto	l7903
 12610  000C78                     l7911:
 12611                           
 12612                           ; BSR set to: 0
 12613  000C78  0E00               	movlw	0
 12614  000C7A  0100               	movlb	0	; () banked
 12615  000C7C  6FB1               	movwf	actuatorTest@i_1731& (0+255),b
 12616  000C7E                     l7913:
 12617                           
 12618                           ; BSR set to: 0
 12619  000C7E  0E63               	movlw	99
 12620  000C80  0100               	movlb	0	; () banked
 12621  000C82  65B1               	cpfsgt	actuatorTest@i_1731& (0+255),b
 12622  000C84  D001               	goto	l7917
 12623  000C86  D00C               	goto	l7921
 12624  000C88                     l7917:
 12625                           
 12626                           ; BSR set to: 0
 12627  000C88  0E68               	movlw	104
 12628  000C8A  0100               	movlb	0	; () banked
 12629  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12630  000C8E  0EE4               	movlw	228
 12631  000C90                     u9897:
 12632  000C90  2EE8               	decfsz	wreg,f,c
 12633  000C92  D7FE               	bra	u9897
 12634  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12635  000C96  D7FC               	bra	u9897
 12636  000C98  F000               	nop	
 12637  000C9A  0100               	movlb	0	; () banked
 12638  000C9C  2BB1               	incf	actuatorTest@i_1731& (0+255),f,b
 12639  000C9E  D7EF               	goto	l7913
 12640  000CA0                     l7921:
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12644  000CA0  0E80               	movlw	128
 12645  000CA2  EC15  F02A         	call	_lcdInst
 12646  000CA6  0EC0               	movlw	192
 12647  000CA8  EC15  F02A         	call	_lcdInst
 12648                           
 12649                           ;Test.c: 282: printf("LEFT -- 2s      ");
 12650  000CAC  0EB5               	movlw	low STR_99
 12651  000CAE  0100               	movlb	0	; () banked
 12652  000CB0  6F8E               	movwf	printf@f& (0+255),b
 12653  000CB2  0EFB               	movlw	high STR_99
 12654  000CB4  0100               	movlb	0	; () banked
 12655  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12656  000CB8  EC1B  F00B         	call	_printf	;wreg free
 12657                           
 12658                           ;Test.c: 283: updateServoPosition(2400, 1);
 12659  000CBC  0E09               	movlw	9
 12660  000CBE  0100               	movlb	0	; () banked
 12661  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12662  000CC2  0E60               	movlw	96
 12663  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12664  000CC6  0E00               	movlw	0
 12665  000CC8  0100               	movlb	0	; () banked
 12666  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12667  000CCC  0E01               	movlw	1
 12668  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12669  000CD0  EC9A  F023         	call	_updateServoPosition	;wreg free
 12670                           
 12671                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12672  000CD4  0E00               	movlw	0
 12673  000CD6  0100               	movlb	0	; () banked
 12674  000CD8  6FB2               	movwf	actuatorTest@i_1733& (0+255),b
 12675  000CDA                     l7929:
 12676                           
 12677                           ; BSR set to: 0
 12678  000CDA  0E63               	movlw	99
 12679  000CDC  0100               	movlb	0	; () banked
 12680  000CDE  65B2               	cpfsgt	actuatorTest@i_1733& (0+255),b
 12681  000CE0  D001               	goto	l7933
 12682  000CE2  D00C               	goto	l7937
 12683  000CE4                     l7933:
 12684                           
 12685                           ; BSR set to: 0
 12686  000CE4  0E68               	movlw	104
 12687  000CE6  0100               	movlb	0	; () banked
 12688  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 12689  000CEA  0EE4               	movlw	228
 12690  000CEC                     u9907:
 12691  000CEC  2EE8               	decfsz	wreg,f,c
 12692  000CEE  D7FE               	bra	u9907
 12693  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12694  000CF2  D7FC               	bra	u9907
 12695  000CF4  F000               	nop	
 12696  000CF6  0100               	movlb	0	; () banked
 12697  000CF8  2BB2               	incf	actuatorTest@i_1733& (0+255),f,b
 12698  000CFA  D7EF               	goto	l7929
 12699  000CFC                     l7937:
 12700                           
 12701                           ; BSR set to: 0
 12702  000CFC  0E00               	movlw	0
 12703  000CFE  0100               	movlb	0	; () banked
 12704  000D00  6FB3               	movwf	actuatorTest@i_1734& (0+255),b
 12705  000D02                     l7939:
 12706                           
 12707                           ; BSR set to: 0
 12708  000D02  0E63               	movlw	99
 12709  000D04  0100               	movlb	0	; () banked
 12710  000D06  65B3               	cpfsgt	actuatorTest@i_1734& (0+255),b
 12711  000D08  D001               	goto	l7943
 12712  000D0A  D00C               	goto	l7947
 12713  000D0C                     l7943:
 12714                           
 12715                           ; BSR set to: 0
 12716  000D0C  0E68               	movlw	104
 12717  000D0E  0100               	movlb	0	; () banked
 12718  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 12719  000D12  0EE4               	movlw	228
 12720  000D14                     u9917:
 12721  000D14  2EE8               	decfsz	wreg,f,c
 12722  000D16  D7FE               	bra	u9917
 12723  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12724  000D1A  D7FC               	bra	u9917
 12725  000D1C  F000               	nop	
 12726  000D1E  0100               	movlb	0	; () banked
 12727  000D20  2BB3               	incf	actuatorTest@i_1734& (0+255),f,b
 12728  000D22  D7EF               	goto	l7939
 12729  000D24                     l7947:
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12733  000D24  0E80               	movlw	128
 12734  000D26  EC15  F02A         	call	_lcdInst
 12735  000D2A  0EC0               	movlw	192
 12736  000D2C  EC15  F02A         	call	_lcdInst
 12737                           
 12738                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 12739  000D30  0E1B               	movlw	low STR_100
 12740  000D32  0100               	movlb	0	; () banked
 12741  000D34  6F8E               	movwf	printf@f& (0+255),b
 12742  000D36  0EFC               	movlw	high STR_100
 12743  000D38  0100               	movlb	0	; () banked
 12744  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12745  000D3C  EC1B  F00B         	call	_printf	;wreg free
 12746                           
 12747                           ;Test.c: 288: updateServoPosition(1670, 1);
 12748  000D40  0E06               	movlw	6
 12749  000D42  0100               	movlb	0	; () banked
 12750  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12751  000D46  0E86               	movlw	134
 12752  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12753  000D4A  0E00               	movlw	0
 12754  000D4C  0100               	movlb	0	; () banked
 12755  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12756  000D50  0E01               	movlw	1
 12757  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12758  000D54  EC9A  F023         	call	_updateServoPosition	;wreg free
 12759                           
 12760                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12761  000D58  0E00               	movlw	0
 12762  000D5A  0100               	movlb	0	; () banked
 12763  000D5C  6FB4               	movwf	actuatorTest@i_1736& (0+255),b
 12764  000D5E                     l7955:
 12765                           
 12766                           ; BSR set to: 0
 12767  000D5E  0E63               	movlw	99
 12768  000D60  0100               	movlb	0	; () banked
 12769  000D62  65B4               	cpfsgt	actuatorTest@i_1736& (0+255),b
 12770  000D64  D001               	goto	l7959
 12771  000D66  D00C               	goto	l7963
 12772  000D68                     l7959:
 12773                           
 12774                           ; BSR set to: 0
 12775  000D68  0E68               	movlw	104
 12776  000D6A  0100               	movlb	0	; () banked
 12777  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12778  000D6E  0EE4               	movlw	228
 12779  000D70                     u9927:
 12780  000D70  2EE8               	decfsz	wreg,f,c
 12781  000D72  D7FE               	bra	u9927
 12782  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12783  000D76  D7FC               	bra	u9927
 12784  000D78  F000               	nop	
 12785  000D7A  0100               	movlb	0	; () banked
 12786  000D7C  2BB4               	incf	actuatorTest@i_1736& (0+255),f,b
 12787  000D7E  D7EF               	goto	l7955
 12788  000D80                     l7963:
 12789                           
 12790                           ; BSR set to: 0
 12791  000D80  0E00               	movlw	0
 12792  000D82  0100               	movlb	0	; () banked
 12793  000D84  6FB5               	movwf	actuatorTest@i_1737& (0+255),b
 12794  000D86                     l7965:
 12795                           
 12796                           ; BSR set to: 0
 12797  000D86  0E63               	movlw	99
 12798  000D88  0100               	movlb	0	; () banked
 12799  000D8A  65B5               	cpfsgt	actuatorTest@i_1737& (0+255),b
 12800  000D8C  D001               	goto	l7969
 12801  000D8E  D00C               	goto	l7973
 12802  000D90                     l7969:
 12803                           
 12804                           ; BSR set to: 0
 12805  000D90  0E68               	movlw	104
 12806  000D92  0100               	movlb	0	; () banked
 12807  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 12808  000D96  0EE4               	movlw	228
 12809  000D98                     u9937:
 12810  000D98  2EE8               	decfsz	wreg,f,c
 12811  000D9A  D7FE               	bra	u9937
 12812  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12813  000D9E  D7FC               	bra	u9937
 12814  000DA0  F000               	nop	
 12815  000DA2  0100               	movlb	0	; () banked
 12816  000DA4  2BB5               	incf	actuatorTest@i_1737& (0+255),f,b
 12817  000DA6  D7EF               	goto	l7965
 12818  000DA8                     l7973:
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12822  000DA8  0E80               	movlw	128
 12823  000DAA  EC15  F02A         	call	_lcdInst
 12824  000DAE  0EC0               	movlw	192
 12825  000DB0  EC15  F02A         	call	_lcdInst
 12826                           
 12827                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 12828  000DB4  0E2C               	movlw	low STR_101
 12829  000DB6  0100               	movlb	0	; () banked
 12830  000DB8  6F8E               	movwf	printf@f& (0+255),b
 12831  000DBA  0EFC               	movlw	high STR_101
 12832  000DBC  0100               	movlb	0	; () banked
 12833  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12834  000DC0  EC1B  F00B         	call	_printf	;wreg free
 12835                           
 12836                           ;Test.c: 293: updateServoPosition(850, 1);
 12837  000DC4  0E03               	movlw	3
 12838  000DC6  0100               	movlb	0	; () banked
 12839  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12840  000DCA  0E52               	movlw	82
 12841  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12842  000DCE  0E00               	movlw	0
 12843  000DD0  0100               	movlb	0	; () banked
 12844  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12845  000DD4  0E01               	movlw	1
 12846  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12847  000DD8  EC9A  F023         	call	_updateServoPosition	;wreg free
 12848                           
 12849                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12850  000DDC  0E00               	movlw	0
 12851  000DDE  0100               	movlb	0	; () banked
 12852  000DE0  6FB6               	movwf	actuatorTest@i_1739& (0+255),b
 12853  000DE2                     l7981:
 12854                           
 12855                           ; BSR set to: 0
 12856  000DE2  0E63               	movlw	99
 12857  000DE4  0100               	movlb	0	; () banked
 12858  000DE6  65B6               	cpfsgt	actuatorTest@i_1739& (0+255),b
 12859  000DE8  D001               	goto	l7985
 12860  000DEA  D00C               	goto	l7989
 12861  000DEC                     l7985:
 12862                           
 12863                           ; BSR set to: 0
 12864  000DEC  0E68               	movlw	104
 12865  000DEE  0100               	movlb	0	; () banked
 12866  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12867  000DF2  0EE4               	movlw	228
 12868  000DF4                     u9947:
 12869  000DF4  2EE8               	decfsz	wreg,f,c
 12870  000DF6  D7FE               	bra	u9947
 12871  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12872  000DFA  D7FC               	bra	u9947
 12873  000DFC  F000               	nop	
 12874  000DFE  0100               	movlb	0	; () banked
 12875  000E00  2BB6               	incf	actuatorTest@i_1739& (0+255),f,b
 12876  000E02  D7EF               	goto	l7981
 12877  000E04                     l7989:
 12878                           
 12879                           ; BSR set to: 0
 12880  000E04  0E00               	movlw	0
 12881  000E06  0100               	movlb	0	; () banked
 12882  000E08  6FB7               	movwf	actuatorTest@i_1740& (0+255),b
 12883  000E0A                     l7991:
 12884                           
 12885                           ; BSR set to: 0
 12886  000E0A  0E63               	movlw	99
 12887  000E0C  0100               	movlb	0	; () banked
 12888  000E0E  65B7               	cpfsgt	actuatorTest@i_1740& (0+255),b
 12889  000E10  D001               	goto	l7995
 12890  000E12  D00C               	goto	l7999
 12891  000E14                     l7995:
 12892                           
 12893                           ; BSR set to: 0
 12894  000E14  0E68               	movlw	104
 12895  000E16  0100               	movlb	0	; () banked
 12896  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 12897  000E1A  0EE4               	movlw	228
 12898  000E1C                     u9957:
 12899  000E1C  2EE8               	decfsz	wreg,f,c
 12900  000E1E  D7FE               	bra	u9957
 12901  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12902  000E22  D7FC               	bra	u9957
 12903  000E24  F000               	nop	
 12904  000E26  0100               	movlb	0	; () banked
 12905  000E28  2BB7               	incf	actuatorTest@i_1740& (0+255),f,b
 12906  000E2A  D7EF               	goto	l7991
 12907  000E2C                     l7999:
 12908                           
 12909                           ; BSR set to: 0
 12910                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12911  000E2C  0E80               	movlw	128
 12912  000E2E  EC15  F02A         	call	_lcdInst
 12913  000E32  0EC0               	movlw	192
 12914  000E34  EC15  F02A         	call	_lcdInst
 12915                           
 12916                           ;Test.c: 297: printf("MID -- 2s       ");
 12917  000E38  0E93               	movlw	low STR_102
 12918  000E3A  0100               	movlb	0	; () banked
 12919  000E3C  6F8E               	movwf	printf@f& (0+255),b
 12920  000E3E  0EFB               	movlw	high STR_102
 12921  000E40  0100               	movlb	0	; () banked
 12922  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 12923  000E44  EC1B  F00B         	call	_printf	;wreg free
 12924                           
 12925                           ;Test.c: 298: updateServoPosition(1200, 1);
 12926  000E48  0E04               	movlw	4
 12927  000E4A  0100               	movlb	0	; () banked
 12928  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12929  000E4E  0EB0               	movlw	176
 12930  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12931  000E52  0E00               	movlw	0
 12932  000E54  0100               	movlb	0	; () banked
 12933  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12934  000E58  0E01               	movlw	1
 12935  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12936  000E5C  EC9A  F023         	call	_updateServoPosition	;wreg free
 12937                           
 12938                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12939  000E60  0E00               	movlw	0
 12940  000E62  0100               	movlb	0	; () banked
 12941  000E64  6FB8               	movwf	actuatorTest@i_1742& (0+255),b
 12942  000E66                     l8007:
 12943                           
 12944                           ; BSR set to: 0
 12945  000E66  0E63               	movlw	99
 12946  000E68  0100               	movlb	0	; () banked
 12947  000E6A  65B8               	cpfsgt	actuatorTest@i_1742& (0+255),b
 12948  000E6C  D001               	goto	l8011
 12949  000E6E  D00C               	goto	l8015
 12950  000E70                     l8011:
 12951                           
 12952                           ; BSR set to: 0
 12953  000E70  0E68               	movlw	104
 12954  000E72  0100               	movlb	0	; () banked
 12955  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 12956  000E76  0EE4               	movlw	228
 12957  000E78                     u9967:
 12958  000E78  2EE8               	decfsz	wreg,f,c
 12959  000E7A  D7FE               	bra	u9967
 12960  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12961  000E7E  D7FC               	bra	u9967
 12962  000E80  F000               	nop	
 12963  000E82  0100               	movlb	0	; () banked
 12964  000E84  2BB8               	incf	actuatorTest@i_1742& (0+255),f,b
 12965  000E86  D7EF               	goto	l8007
 12966  000E88                     l8015:
 12967                           
 12968                           ; BSR set to: 0
 12969  000E88  0E00               	movlw	0
 12970  000E8A  0100               	movlb	0	; () banked
 12971  000E8C  6FB9               	movwf	actuatorTest@i_1743& (0+255),b
 12972  000E8E                     l8017:
 12973                           
 12974                           ; BSR set to: 0
 12975  000E8E  0E63               	movlw	99
 12976  000E90  0100               	movlb	0	; () banked
 12977  000E92  65B9               	cpfsgt	actuatorTest@i_1743& (0+255),b
 12978  000E94  D001               	goto	l8021
 12979  000E96  D00C               	goto	l1272
 12980  000E98                     l8021:
 12981                           
 12982                           ; BSR set to: 0
 12983  000E98  0E68               	movlw	104
 12984  000E9A  0100               	movlb	0	; () banked
 12985  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12986  000E9E  0EE4               	movlw	228
 12987  000EA0                     u9977:
 12988  000EA0  2EE8               	decfsz	wreg,f,c
 12989  000EA2  D7FE               	bra	u9977
 12990  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12991  000EA6  D7FC               	bra	u9977
 12992  000EA8  F000               	nop	
 12993  000EAA  0100               	movlb	0	; () banked
 12994  000EAC  2BB9               	incf	actuatorTest@i_1743& (0+255),f,b
 12995  000EAE  D7EF               	goto	l8017
 12996  000EB0                     l1272:
 12997                           
 12998                           ; BSR set to: 0
 12999                           ;Test.c: 300: TMR1ON = 0;
 13000  000EB0  90CD               	bcf	4045,0,c	;volatile
 13001                           
 13002                           ; BSR set to: 0
 13003                           ;Test.c: 307: printf("TST: TILT SERVO");
 13004  000EB2  0E3A               	movlw	low STR_103
 13005  000EB4  0100               	movlb	0	; () banked
 13006  000EB6  6F8E               	movwf	printf@f& (0+255),b
 13007  000EB8  0EFE               	movlw	high STR_103
 13008  000EBA  0100               	movlb	0	; () banked
 13009  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13010  000EBE  EC1B  F00B         	call	_printf	;wreg free
 13011                           
 13012                           ;Test.c: 308: lcdInst(0b11000000);;
 13013  000EC2  0EC0               	movlw	192
 13014  000EC4  EC15  F02A         	call	_lcdInst
 13015                           
 13016                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 13017  000EC8  0EC6               	movlw	low STR_104
 13018  000ECA  0100               	movlb	0	; () banked
 13019  000ECC  6F8E               	movwf	printf@f& (0+255),b
 13020  000ECE  0EFB               	movlw	high STR_104
 13021  000ED0  0100               	movlb	0	; () banked
 13022  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13023  000ED4  EC1B  F00B         	call	_printf	;wreg free
 13024                           
 13025                           ;Test.c: 310: updateServoPosition(1050, 3);
 13026  000ED8  0E04               	movlw	4
 13027  000EDA  0100               	movlb	0	; () banked
 13028  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13029  000EDE  0E1A               	movlw	26
 13030  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13031  000EE2  0E00               	movlw	0
 13032  000EE4  0100               	movlb	0	; () banked
 13033  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13034  000EE8  0E03               	movlw	3
 13035  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13036  000EEC  EC9A  F023         	call	_updateServoPosition	;wreg free
 13037                           
 13038                           ;Test.c: 311: TMR3ON = 1;
 13039  000EF0  80B1               	bsf	4017,0,c	;volatile
 13040                           
 13041                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13042  000EF2  0E00               	movlw	0
 13043  000EF4  0100               	movlb	0	; () banked
 13044  000EF6  6FBA               	movwf	actuatorTest@i_1746& (0+255),b
 13045  000EF8                     l8035:
 13046                           
 13047                           ; BSR set to: 0
 13048  000EF8  0E63               	movlw	99
 13049  000EFA  0100               	movlb	0	; () banked
 13050  000EFC  65BA               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13051  000EFE  D001               	goto	l8039
 13052  000F00  D00C               	goto	l8043
 13053  000F02                     l8039:
 13054                           
 13055                           ; BSR set to: 0
 13056  000F02  0E68               	movlw	104
 13057  000F04  0100               	movlb	0	; () banked
 13058  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 13059  000F08  0EE4               	movlw	228
 13060  000F0A                     u9987:
 13061  000F0A  2EE8               	decfsz	wreg,f,c
 13062  000F0C  D7FE               	bra	u9987
 13063  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13064  000F10  D7FC               	bra	u9987
 13065  000F12  F000               	nop	
 13066  000F14  0100               	movlb	0	; () banked
 13067  000F16  2BBA               	incf	actuatorTest@i_1746& (0+255),f,b
 13068  000F18  D7EF               	goto	l8035
 13069  000F1A                     l8043:
 13070                           
 13071                           ; BSR set to: 0
 13072  000F1A  0E00               	movlw	0
 13073  000F1C  0100               	movlb	0	; () banked
 13074  000F1E  6FBB               	movwf	actuatorTest@i_1747& (0+255),b
 13075  000F20                     l8045:
 13076                           
 13077                           ; BSR set to: 0
 13078  000F20  0E63               	movlw	99
 13079  000F22  0100               	movlb	0	; () banked
 13080  000F24  65BB               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13081  000F26  D001               	goto	l8049
 13082  000F28  D00C               	goto	l8053
 13083  000F2A                     l8049:
 13084                           
 13085                           ; BSR set to: 0
 13086  000F2A  0E68               	movlw	104
 13087  000F2C  0100               	movlb	0	; () banked
 13088  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13089  000F30  0EE4               	movlw	228
 13090  000F32                     u9997:
 13091  000F32  2EE8               	decfsz	wreg,f,c
 13092  000F34  D7FE               	bra	u9997
 13093  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13094  000F38  D7FC               	bra	u9997
 13095  000F3A  F000               	nop	
 13096  000F3C  0100               	movlb	0	; () banked
 13097  000F3E  2BBB               	incf	actuatorTest@i_1747& (0+255),f,b
 13098  000F40  D7EF               	goto	l8045
 13099  000F42                     l8053:
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13103  000F42  0E80               	movlw	128
 13104  000F44  EC15  F02A         	call	_lcdInst
 13105  000F48  0EC0               	movlw	192
 13106  000F4A  EC15  F02A         	call	_lcdInst
 13107                           
 13108                           ;Test.c: 315: printf("DROP -- 2s      ");
 13109  000F4E  0EA4               	movlw	low STR_105
 13110  000F50  0100               	movlb	0	; () banked
 13111  000F52  6F8E               	movwf	printf@f& (0+255),b
 13112  000F54  0EFB               	movlw	high STR_105
 13113  000F56  0100               	movlb	0	; () banked
 13114  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 13115  000F5A  EC1B  F00B         	call	_printf	;wreg free
 13116                           
 13117                           ;Test.c: 316: updateServoPosition(1260, 3);
 13118  000F5E  0E04               	movlw	4
 13119  000F60  0100               	movlb	0	; () banked
 13120  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13121  000F64  0EEC               	movlw	236
 13122  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13123  000F68  0E00               	movlw	0
 13124  000F6A  0100               	movlb	0	; () banked
 13125  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13126  000F6E  0E03               	movlw	3
 13127  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13128  000F72  EC9A  F023         	call	_updateServoPosition	;wreg free
 13129                           
 13130                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13131  000F76  0E00               	movlw	0
 13132  000F78  0100               	movlb	0	; () banked
 13133  000F7A  6FBC               	movwf	actuatorTest@i_1749& (0+255),b
 13134  000F7C                     l8061:
 13135                           
 13136                           ; BSR set to: 0
 13137  000F7C  0E63               	movlw	99
 13138  000F7E  0100               	movlb	0	; () banked
 13139  000F80  65BC               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13140  000F82  D001               	goto	l8065
 13141  000F84  D00C               	goto	l8069
 13142  000F86                     l8065:
 13143                           
 13144                           ; BSR set to: 0
 13145  000F86  0E68               	movlw	104
 13146  000F88  0100               	movlb	0	; () banked
 13147  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13148  000F8C  0EE4               	movlw	228
 13149  000F8E                     u10007:
 13150  000F8E  2EE8               	decfsz	wreg,f,c
 13151  000F90  D7FE               	bra	u10007
 13152  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13153  000F94  D7FC               	bra	u10007
 13154  000F96  F000               	nop	
 13155  000F98  0100               	movlb	0	; () banked
 13156  000F9A  2BBC               	incf	actuatorTest@i_1749& (0+255),f,b
 13157  000F9C  D7EF               	goto	l8061
 13158  000F9E                     l8069:
 13159                           
 13160                           ; BSR set to: 0
 13161  000F9E  0E00               	movlw	0
 13162  000FA0  0100               	movlb	0	; () banked
 13163  000FA2  6FBD               	movwf	actuatorTest@i_1750& (0+255),b
 13164  000FA4                     l8071:
 13165                           
 13166                           ; BSR set to: 0
 13167  000FA4  0E63               	movlw	99
 13168  000FA6  0100               	movlb	0	; () banked
 13169  000FA8  65BD               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13170  000FAA  D001               	goto	l8075
 13171  000FAC  D00C               	goto	l8079
 13172  000FAE                     l8075:
 13173                           
 13174                           ; BSR set to: 0
 13175  000FAE  0E68               	movlw	104
 13176  000FB0  0100               	movlb	0	; () banked
 13177  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 13178  000FB4  0EE4               	movlw	228
 13179  000FB6                     u10017:
 13180  000FB6  2EE8               	decfsz	wreg,f,c
 13181  000FB8  D7FE               	bra	u10017
 13182  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13183  000FBC  D7FC               	bra	u10017
 13184  000FBE  F000               	nop	
 13185  000FC0  0100               	movlb	0	; () banked
 13186  000FC2  2BBD               	incf	actuatorTest@i_1750& (0+255),f,b
 13187  000FC4  D7EF               	goto	l8071
 13188  000FC6                     l8079:
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13192  000FC6  0E80               	movlw	128
 13193  000FC8  EC15  F02A         	call	_lcdInst
 13194  000FCC  0EC0               	movlw	192
 13195  000FCE  EC15  F02A         	call	_lcdInst
 13196                           
 13197                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 13198  000FD2  0EC6               	movlw	low STR_104
 13199  000FD4  0100               	movlb	0	; () banked
 13200  000FD6  6F8E               	movwf	printf@f& (0+255),b
 13201  000FD8  0EFB               	movlw	high STR_104
 13202  000FDA  0100               	movlb	0	; () banked
 13203  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13204  000FDE  EC1B  F00B         	call	_printf	;wreg free
 13205                           
 13206                           ;Test.c: 321: updateServoPosition(1050, 3);
 13207  000FE2  0E04               	movlw	4
 13208  000FE4  0100               	movlb	0	; () banked
 13209  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13210  000FE8  0E1A               	movlw	26
 13211  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13212  000FEC  0E00               	movlw	0
 13213  000FEE  0100               	movlb	0	; () banked
 13214  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13215  000FF2  0E03               	movlw	3
 13216  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13217  000FF6  EC9A  F023         	call	_updateServoPosition	;wreg free
 13218                           
 13219                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13220  000FFA  0E00               	movlw	0
 13221  000FFC  0100               	movlb	0	; () banked
 13222  000FFE  6FBE               	movwf	actuatorTest@i_1752& (0+255),b
 13223  001000                     l8087:
 13224                           
 13225                           ; BSR set to: 0
 13226  001000  0E63               	movlw	99
 13227  001002  0100               	movlb	0	; () banked
 13228  001004  65BE               	cpfsgt	actuatorTest@i_1752& (0+255),b
 13229  001006  D001               	goto	l8091
 13230  001008  D00C               	goto	l8095
 13231  00100A                     l8091:
 13232                           
 13233                           ; BSR set to: 0
 13234  00100A  0E68               	movlw	104
 13235  00100C  0100               	movlb	0	; () banked
 13236  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13237  001010  0EE4               	movlw	228
 13238  001012                     u10027:
 13239  001012  2EE8               	decfsz	wreg,f,c
 13240  001014  D7FE               	bra	u10027
 13241  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13242  001018  D7FC               	bra	u10027
 13243  00101A  F000               	nop	
 13244  00101C  0100               	movlb	0	; () banked
 13245  00101E  2BBE               	incf	actuatorTest@i_1752& (0+255),f,b
 13246  001020  D7EF               	goto	l8087
 13247  001022                     l8095:
 13248                           
 13249                           ; BSR set to: 0
 13250  001022  0E00               	movlw	0
 13251  001024  0100               	movlb	0	; () banked
 13252  001026  6FBF               	movwf	actuatorTest@i_1753& (0+255),b
 13253  001028                     l8097:
 13254                           
 13255                           ; BSR set to: 0
 13256  001028  0E63               	movlw	99
 13257  00102A  0100               	movlb	0	; () banked
 13258  00102C  65BF               	cpfsgt	actuatorTest@i_1753& (0+255),b
 13259  00102E  D001               	goto	l8101
 13260  001030  D00C               	goto	l1284
 13261  001032                     l8101:
 13262                           
 13263                           ; BSR set to: 0
 13264  001032  0E68               	movlw	104
 13265  001034  0100               	movlb	0	; () banked
 13266  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 13267  001038  0EE4               	movlw	228
 13268  00103A                     u10037:
 13269  00103A  2EE8               	decfsz	wreg,f,c
 13270  00103C  D7FE               	bra	u10037
 13271  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13272  001040  D7FC               	bra	u10037
 13273  001042  F000               	nop	
 13274  001044  0100               	movlb	0	; () banked
 13275  001046  2BBF               	incf	actuatorTest@i_1753& (0+255),f,b
 13276  001048  D7EF               	goto	l8097
 13277  00104A                     l1284:
 13278                           
 13279                           ; BSR set to: 0
 13280                           ;Test.c: 323: TMR3ON = 0;
 13281  00104A  90B1               	bcf	4017,0,c	;volatile
 13282                           
 13283                           ;Test.c: 324: (INTCONbits.GIE = 0);
 13284  00104C  9EF2               	bcf	intcon,7,c	;volatile
 13285                           
 13286                           ; BSR set to: 0
 13287                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13288  00104E  0E01               	movlw	1
 13289  001050  EC15  F02A         	call	_lcdInst
 13290  001054  0E68               	movlw	104
 13291  001056  0100               	movlb	0	; () banked
 13292  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 13293  00105A  0EE4               	movlw	228
 13294  00105C                     u10047:
 13295  00105C  2EE8               	decfsz	wreg,f,c
 13296  00105E  D7FE               	bra	u10047
 13297  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13298  001062  D7FC               	bra	u10047
 13299  001064  F000               	nop	
 13300  001066  0E80               	movlw	128
 13301  001068  EC15  F02A         	call	_lcdInst
 13302                           
 13303                           ;Test.c: 330: printf("TST: CAM SERVO");
 13304  00106C  0E96               	movlw	low STR_107
 13305  00106E  0100               	movlb	0	; () banked
 13306  001070  6F8E               	movwf	printf@f& (0+255),b
 13307  001072  0EFE               	movlw	high STR_107
 13308  001074  0100               	movlb	0	; () banked
 13309  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 13310  001078  EC1B  F00B         	call	_printf	;wreg free
 13311                           
 13312                           ;Test.c: 331: lcdInst(0b11000000);;
 13313  00107C  0EC0               	movlw	192
 13314  00107E  EC15  F02A         	call	_lcdInst
 13315                           
 13316                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 13317  001082  0E78               	movlw	low STR_108
 13318  001084  0100               	movlb	0	; () banked
 13319  001086  6F8E               	movwf	printf@f& (0+255),b
 13320  001088  0EFE               	movlw	high STR_108
 13321  00108A  0100               	movlb	0	; () banked
 13322  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13323  00108E  EC1B  F00B         	call	_printf	;wreg free
 13324                           
 13325                           ;Test.c: 333: LATCbits.LATC0 = 1;
 13326  001092  808B               	bsf	3979,0,c	;volatile
 13327                           
 13328                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13329  001094  0E00               	movlw	0
 13330  001096  0100               	movlb	0	; () banked
 13331  001098  6FC0               	movwf	actuatorTest@i_1756& (0+255),b
 13332  00109A                     l8121:
 13333                           
 13334                           ; BSR set to: 0
 13335  00109A  0E63               	movlw	99
 13336  00109C  0100               	movlb	0	; () banked
 13337  00109E  65C0               	cpfsgt	actuatorTest@i_1756& (0+255),b
 13338  0010A0  D001               	goto	l8125
 13339  0010A2  D00C               	goto	l8129
 13340  0010A4                     l8125:
 13341                           
 13342                           ; BSR set to: 0
 13343  0010A4  0E68               	movlw	104
 13344  0010A6  0100               	movlb	0	; () banked
 13345  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13346  0010AA  0EE4               	movlw	228
 13347  0010AC                     u10057:
 13348  0010AC  2EE8               	decfsz	wreg,f,c
 13349  0010AE  D7FE               	bra	u10057
 13350  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13351  0010B2  D7FC               	bra	u10057
 13352  0010B4  F000               	nop	
 13353  0010B6  0100               	movlb	0	; () banked
 13354  0010B8  2BC0               	incf	actuatorTest@i_1756& (0+255),f,b
 13355  0010BA  D7EF               	goto	l8121
 13356  0010BC                     l8129:
 13357                           
 13358                           ; BSR set to: 0
 13359  0010BC  0E00               	movlw	0
 13360  0010BE  0100               	movlb	0	; () banked
 13361  0010C0  6FC1               	movwf	actuatorTest@i_1757& (0+255),b
 13362  0010C2                     l8131:
 13363                           
 13364                           ; BSR set to: 0
 13365  0010C2  0E63               	movlw	99
 13366  0010C4  0100               	movlb	0	; () banked
 13367  0010C6  65C1               	cpfsgt	actuatorTest@i_1757& (0+255),b
 13368  0010C8  D001               	goto	l8135
 13369  0010CA  D00C               	goto	l8139
 13370  0010CC                     l8135:
 13371                           
 13372                           ; BSR set to: 0
 13373  0010CC  0E68               	movlw	104
 13374  0010CE  0100               	movlb	0	; () banked
 13375  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13376  0010D2  0EE4               	movlw	228
 13377  0010D4                     u10067:
 13378  0010D4  2EE8               	decfsz	wreg,f,c
 13379  0010D6  D7FE               	bra	u10067
 13380  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13381  0010DA  D7FC               	bra	u10067
 13382  0010DC  F000               	nop	
 13383  0010DE  0100               	movlb	0	; () banked
 13384  0010E0  2BC1               	incf	actuatorTest@i_1757& (0+255),f,b
 13385  0010E2  D7EF               	goto	l8131
 13386  0010E4                     l8139:
 13387                           
 13388                           ; BSR set to: 0
 13389                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13390  0010E4  0E80               	movlw	128
 13391  0010E6  EC15  F02A         	call	_lcdInst
 13392  0010EA  0EC0               	movlw	192
 13393  0010EC  EC15  F02A         	call	_lcdInst
 13394                           
 13395                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 13396  0010F0  0E69               	movlw	low STR_109
 13397  0010F2  0100               	movlb	0	; () banked
 13398  0010F4  6F8E               	movwf	printf@f& (0+255),b
 13399  0010F6  0EFE               	movlw	high STR_109
 13400  0010F8  0100               	movlb	0	; () banked
 13401  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13402  0010FC  EC1B  F00B         	call	_printf	;wreg free
 13403                           
 13404                           ;Test.c: 339: for(i=0;i<10000;i++)
 13405  001100  0E00               	movlw	0
 13406  001102  0100               	movlb	0	; () banked
 13407  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13408  001106  0E00               	movlw	0
 13409  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 13410  00110A                     l8145:
 13411                           
 13412                           ; BSR set to: 0
 13413  00110A  0100               	movlb	0	; () banked
 13414  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13415  00110E  D008               	goto	l1289
 13416  001110  0E10               	movlw	16
 13417  001112  0100               	movlb	0	; () banked
 13418  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13419  001116  0E27               	movlw	39
 13420  001118  0100               	movlb	0	; () banked
 13421  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13422  00111C  B0D8               	btfsc	status,0,c
 13423  00111E  D00D               	goto	l8155
 13424  001120                     l1289:
 13425                           
 13426                           ; BSR set to: 0
 13427                           ;Test.c: 340: {
 13428                           ;Test.c: 341: LATCbits.LATC0 = 1;
 13429  001120  808B               	bsf	3979,0,c	;volatile
 13430                           
 13431                           ; BSR set to: 0
 13432                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13433  001122  0E1A               	movlw	26
 13434  001124                     u10077:
 13435  001124  2EE8               	decfsz	wreg,f,c
 13436  001126  D7FE               	bra	u10077
 13437  001128  D000               	nop2	
 13438                           
 13439                           ;Test.c: 343: LATCbits.LATC0 = 0;
 13440  00112A  908B               	bcf	3979,0,c	;volatile
 13441                           
 13442                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13443  00112C  0EF0               	movlw	240
 13444  00112E                     u10087:
 13445  00112E  2EE8               	decfsz	wreg,f,c
 13446  001130  D7FE               	bra	u10087
 13447  001132  0100               	movlb	0	; () banked
 13448  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13449  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13450  001138  D7E8               	goto	l8145
 13451  00113A                     l8155:
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;Test.c: 345: }
 13455                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13456  00113A  0E00               	movlw	0
 13457  00113C  0100               	movlb	0	; () banked
 13458  00113E  6FC2               	movwf	actuatorTest@i_1759& (0+255),b
 13459  001140                     l8157:
 13460                           
 13461                           ; BSR set to: 0
 13462  001140  0E63               	movlw	99
 13463  001142  0100               	movlb	0	; () banked
 13464  001144  65C2               	cpfsgt	actuatorTest@i_1759& (0+255),b
 13465  001146  D001               	goto	l8161
 13466  001148  D00C               	goto	l8165
 13467  00114A                     l8161:
 13468                           
 13469                           ; BSR set to: 0
 13470  00114A  0E68               	movlw	104
 13471  00114C  0100               	movlb	0	; () banked
 13472  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13473  001150  0EE4               	movlw	228
 13474  001152                     u10097:
 13475  001152  2EE8               	decfsz	wreg,f,c
 13476  001154  D7FE               	bra	u10097
 13477  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13478  001158  D7FC               	bra	u10097
 13479  00115A  F000               	nop	
 13480  00115C  0100               	movlb	0	; () banked
 13481  00115E  2BC2               	incf	actuatorTest@i_1759& (0+255),f,b
 13482  001160  D7EF               	goto	l8157
 13483  001162                     l8165:
 13484                           
 13485                           ; BSR set to: 0
 13486  001162  0E00               	movlw	0
 13487  001164  0100               	movlb	0	; () banked
 13488  001166  6FC3               	movwf	actuatorTest@i_1760& (0+255),b
 13489  001168                     l8167:
 13490                           
 13491                           ; BSR set to: 0
 13492  001168  0E63               	movlw	99
 13493  00116A  0100               	movlb	0	; () banked
 13494  00116C  65C3               	cpfsgt	actuatorTest@i_1760& (0+255),b
 13495  00116E  D001               	goto	l8171
 13496  001170  D00C               	goto	l8175
 13497  001172                     l8171:
 13498                           
 13499                           ; BSR set to: 0
 13500  001172  0E68               	movlw	104
 13501  001174  0100               	movlb	0	; () banked
 13502  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 13503  001178  0EE4               	movlw	228
 13504  00117A                     u10107:
 13505  00117A  2EE8               	decfsz	wreg,f,c
 13506  00117C  D7FE               	bra	u10107
 13507  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13508  001180  D7FC               	bra	u10107
 13509  001182  F000               	nop	
 13510  001184  0100               	movlb	0	; () banked
 13511  001186  2BC3               	incf	actuatorTest@i_1760& (0+255),f,b
 13512  001188  D7EF               	goto	l8167
 13513  00118A                     l8175:
 13514                           
 13515                           ; BSR set to: 0
 13516                           ;Test.c: 348: machine_state = Testing_state;
 13517  00118A  0E03               	movlw	3
 13518  00118C  0100               	movlb	0	; () banked
 13519  00118E  6FFC               	movwf	_machine_state& (0+255),b
 13520                           
 13521                           ; BSR set to: 0
 13522  001190  0012               	return		;funcret
 13523  001192                     __end_of_actuatorTest:
 13524                           	opt stack 0
 13525                           tblptru	equ	0xFF8
 13526                           tblptrh	equ	0xFF7
 13527                           tblptrl	equ	0xFF6
 13528                           tablat	equ	0xFF5
 13529                           prodh	equ	0xFF4
 13530                           prodl	equ	0xFF3
 13531                           intcon	equ	0xFF2
 13532                           intcon2	equ	0xFF1
 13533                           intcon3	equ	0xFF0
 13534                           postinc0	equ	0xFEE
 13535                           wreg	equ	0xFE8
 13536                           postdec1	equ	0xFE5
 13537                           fsr1l	equ	0xFE1
 13538                           indf2	equ	0xFDF
 13539                           postinc2	equ	0xFDE
 13540                           postdec2	equ	0xFDD
 13541                           fsr2h	equ	0xFDA
 13542                           fsr2l	equ	0xFD9
 13543                           status	equ	0xFD8
 13544                           
 13545 ;; *************** function _SpeedTest *****************
 13546 ;; Defined at:
 13547 ;;		line 513 in file "Test.c"
 13548 ;; Parameters:    Size  Location     Type
 13549 ;;		None
 13550 ;; Auto vars:     Size  Location     Type
 13551 ;;		None
 13552 ;; Return value:  Size  Location     Type
 13553 ;;                  1    wreg      void 
 13554 ;; Registers used:
 13555 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13556 ;; Tracked objects:
 13557 ;;		On entry : 0/0
 13558 ;;		On exit  : 0/0
 13559 ;;		Unchanged: 0/0
 13560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13563 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13564 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13565 ;;Total ram usage:        1 bytes
 13566 ;; Hardware stack levels used:    1
 13567 ;; Hardware stack levels required when called:   10
 13568 ;; This function calls:
 13569 ;;		_lcdInst
 13570 ;;		_printf
 13571 ;; This function is called by:
 13572 ;;		_Test
 13573 ;; This function uses a non-reentrant model
 13574 ;;
 13575                           
 13576                           	psect	text42
 13577  0047BA                     __ptext42:
 13578                           	opt stack 0
 13579  0047BA                     _SpeedTest:
 13580                           	opt stack 19
 13581                           
 13582                           ;Test.c: 515: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13583                           
 13584                           ; BSR set to: 0
 13585                           ;incstack = 0
 13586  0047BA  0E01               	movlw	1
 13587  0047BC  EC15  F02A         	call	_lcdInst
 13588  0047C0  0E68               	movlw	104
 13589  0047C2  0100               	movlb	0	; () banked
 13590  0047C4  6FAB               	movwf	??_SpeedTest& (0+255),b
 13591  0047C6  0EE4               	movlw	228
 13592  0047C8                     u10117:
 13593  0047C8  2EE8               	decfsz	wreg,f,c
 13594  0047CA  D7FE               	bra	u10117
 13595  0047CC  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13596  0047CE  D7FC               	bra	u10117
 13597  0047D0  F000               	nop	
 13598  0047D2  0E80               	movlw	128
 13599  0047D4  EC15  F02A         	call	_lcdInst
 13600                           
 13601                           ;Test.c: 516: printf("S: D WILL RETURN ");
 13602  0047D8  0E39               	movlw	low STR_120
 13603  0047DA  0100               	movlb	0	; () banked
 13604  0047DC  6F8E               	movwf	printf@f& (0+255),b
 13605  0047DE  0EFB               	movlw	high STR_120
 13606  0047E0  0100               	movlb	0	; () banked
 13607  0047E2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13608  0047E4  EC1B  F00B         	call	_printf	;wreg free
 13609                           
 13610                           ;Test.c: 517: lcdInst(0b11000000);;
 13611  0047E8  0EC0               	movlw	192
 13612  0047EA  EC15  F02A         	call	_lcdInst
 13613                           
 13614                           ;Test.c: 518: printf("OTHER SETS RA5   ");
 13615  0047EE  0E27               	movlw	low STR_121
 13616  0047F0  0100               	movlb	0	; () banked
 13617  0047F2  6F8E               	movwf	printf@f& (0+255),b
 13618  0047F4  0EFB               	movlw	high STR_121
 13619  0047F6  0100               	movlb	0	; () banked
 13620  0047F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13621  0047FA  EC1B  F00B         	call	_printf	;wreg free
 13622  0047FE                     l1354:
 13623  0047FE  A281               	btfss	3969,1,c	;volatile
 13624  004800  D7FE               	goto	l1354
 13625                           
 13626                           ;Test.c: 523: }
 13627                           ;Test.c: 524: if(PORTB >> 4 == 0b1111){
 13628  004802  3881               	swapf	3969,w,c	;volatile
 13629  004804  0B0F               	andlw	15
 13630  004806  0A0F               	xorlw	15
 13631  004808  B4D8               	btfsc	status,2,c
 13632  00480A  0012               	return	
 13633  00480C  D014               	goto	l8257
 13634  00480E                     l1361:
 13635                           
 13636                           ;Test.c: 529: LATBbits.LATB2 = 1;
 13637  00480E  848A               	bsf	3978,2,c	;volatile
 13638                           
 13639                           ;Test.c: 530: _delay((unsigned long)((5)*(32000000/4000.0)));
 13640  004810  0E34               	movlw	52
 13641  004812  0100               	movlb	0	; () banked
 13642  004814  6FAB               	movwf	??_SpeedTest& (0+255),b
 13643  004816  0EF1               	movlw	241
 13644  004818                     u10127:
 13645  004818  2EE8               	decfsz	wreg,f,c
 13646  00481A  D7FE               	bra	u10127
 13647  00481C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13648  00481E  D7FC               	bra	u10127
 13649  004820  D000               	nop2	
 13650                           
 13651                           ;Test.c: 531: LATBbits.LATB2 = 0;
 13652  004822  948A               	bcf	3978,2,c	;volatile
 13653                           
 13654                           ;Test.c: 532: _delay((unsigned long)((5)*(32000000/4000.0)));
 13655  004824  0E34               	movlw	52
 13656  004826  0100               	movlb	0	; () banked
 13657  004828  6FAB               	movwf	??_SpeedTest& (0+255),b
 13658  00482A  0EF1               	movlw	241
 13659  00482C                     u10137:
 13660  00482C  2EE8               	decfsz	wreg,f,c
 13661  00482E  D7FE               	bra	u10137
 13662  004830  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13663  004832  D7FC               	bra	u10137
 13664  004834  D000               	nop2	
 13665  004836                     l8257:
 13666  004836  B281               	btfsc	3969,1,c	;volatile
 13667  004838  D7EA               	goto	l1361
 13668                           
 13669                           ;Test.c: 535: }
 13670                           ;Test.c: 536: LATBbits.LATB2 = 0;
 13671  00483A  948A               	bcf	3978,2,c	;volatile
 13672  00483C  D7E0               	goto	l1354
 13673  00483E                     __end_of_SpeedTest:
 13674                           	opt stack 0
 13675                           tblptru	equ	0xFF8
 13676                           tblptrh	equ	0xFF7
 13677                           tblptrl	equ	0xFF6
 13678                           tablat	equ	0xFF5
 13679                           prodh	equ	0xFF4
 13680                           prodl	equ	0xFF3
 13681                           intcon	equ	0xFF2
 13682                           intcon2	equ	0xFF1
 13683                           intcon3	equ	0xFF0
 13684                           postinc0	equ	0xFEE
 13685                           wreg	equ	0xFE8
 13686                           postdec1	equ	0xFE5
 13687                           fsr1l	equ	0xFE1
 13688                           indf2	equ	0xFDF
 13689                           postinc2	equ	0xFDE
 13690                           postdec2	equ	0xFDD
 13691                           fsr2h	equ	0xFDA
 13692                           fsr2l	equ	0xFD9
 13693                           status	equ	0xFD8
 13694                           
 13695 ;; *************** function _PusherTest *****************
 13696 ;; Defined at:
 13697 ;;		line 431 in file "Test.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;		None
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;  i               2   51[BANK0 ] int 
 13702 ;;  i               2   49[BANK0 ] int 
 13703 ;;  res             2   47[BANK0 ] int 
 13704 ;;  res             2   45[BANK0 ] int 
 13705 ;; Return value:  Size  Location     Type
 13706 ;;                  1    wreg      void 
 13707 ;; Registers used:
 13708 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13709 ;; Tracked objects:
 13710 ;;		On entry : 0/0
 13711 ;;		On exit  : 0/0
 13712 ;;		Unchanged: 0/0
 13713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13717 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13718 ;;Total ram usage:       10 bytes
 13719 ;; Hardware stack levels used:    1
 13720 ;; Hardware stack levels required when called:   10
 13721 ;; This function calls:
 13722 ;;		_lcdInst
 13723 ;;		_printf
 13724 ;;		_readADC
 13725 ;; This function is called by:
 13726 ;;		_Test
 13727 ;; This function uses a non-reentrant model
 13728 ;;
 13729                           
 13730                           	psect	text43
 13731  002EF8                     __ptext43:
 13732                           	opt stack 0
 13733  002EF8                     _PusherTest:
 13734                           	opt stack 19
 13735                           
 13736                           ;Test.c: 432: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13737                           
 13738                           ;incstack = 0
 13739  002EF8  0E01               	movlw	1
 13740  002EFA  EC15  F02A         	call	_lcdInst
 13741  002EFE  0E68               	movlw	104
 13742  002F00  0100               	movlb	0	; () banked
 13743  002F02  6FAB               	movwf	??_PusherTest& (0+255),b
 13744  002F04  0EE4               	movlw	228
 13745  002F06                     u10147:
 13746  002F06  2EE8               	decfsz	wreg,f,c
 13747  002F08  D7FE               	bra	u10147
 13748  002F0A  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13749  002F0C  D7FC               	bra	u10147
 13750  002F0E  F000               	nop	
 13751  002F10  0E80               	movlw	128
 13752  002F12  EC15  F02A         	call	_lcdInst
 13753                           
 13754                           ;Test.c: 433: printf("PUSHER TST");
 13755  002F16  0E71               	movlw	low STR_113
 13756  002F18  0100               	movlb	0	; () banked
 13757  002F1A  6F8E               	movwf	printf@f& (0+255),b
 13758  002F1C  0EFF               	movlw	high STR_113
 13759  002F1E  0100               	movlb	0	; () banked
 13760  002F20  6F8F               	movwf	(printf@f+1)& (0+255),b
 13761  002F22  EC1B  F00B         	call	_printf	;wreg free
 13762                           
 13763                           ;Test.c: 434: LATCbits.LATC5 = 1;
 13764  002F26  8A8B               	bsf	3979,5,c	;volatile
 13765                           
 13766                           ;Test.c: 436: while(PORTBbits.RB1 == 0){
 13767  002F28  D05C               	goto	l8287
 13768  002F2A                     l8269:
 13769                           
 13770                           ;Test.c: 437: readADC(0);
 13771  002F2A  0E00               	movlw	0
 13772  002F2C  EC0C  F029         	call	_readADC
 13773                           
 13774                           ;Test.c: 438: int res = ADRESH<<8 | ADRESL;
 13775  002F30  50C3               	movf	4035,w,c	;volatile
 13776  002F32  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13777  002F36  0100               	movlb	0	; () banked
 13778  002F38  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13779  002F3A  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13780  002F3E  0100               	movlb	0	; () banked
 13781  002F40  6BAB               	clrf	??_PusherTest& (0+255),b
 13782  002F42  0100               	movlb	0	; () banked
 13783  002F44  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13784  002F46  0100               	movlb	0	; () banked
 13785  002F48  6FAD               	movwf	PusherTest@res& (0+255),b
 13786  002F4A  0100               	movlb	0	; () banked
 13787  002F4C  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13788  002F4E  0100               	movlb	0	; () banked
 13789  002F50  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13790                           
 13791                           ; BSR set to: 0
 13792                           ;Test.c: 439: IR_signal = (res > 800) ? 1 : 0;
 13793  002F52  0100               	movlb	0	; () banked
 13794  002F54  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13795  002F56  D00A               	goto	u7100
 13796  002F58  0E21               	movlw	33
 13797  002F5A  0100               	movlb	0	; () banked
 13798  002F5C  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13799  002F5E  0E03               	movlw	3
 13800  002F60  0100               	movlb	0	; () banked
 13801  002F62  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13802  002F64  A0D8               	btfss	status,0,c
 13803  002F66  D002               	goto	u7100
 13804  002F68  0E01               	movlw	1
 13805  002F6A  D001               	goto	u7110
 13806  002F6C                     u7100:
 13807  002F6C  0E00               	movlw	0
 13808  002F6E                     u7110:
 13809  002F6E  0100               	movlb	0	; () banked
 13810  002F70  6FE6               	movwf	_IR_signal& (0+255),b
 13811  002F72  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13812                           
 13813                           ;Test.c: 441: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13814  002F74  0E01               	movlw	1
 13815  002F76  EC15  F02A         	call	_lcdInst
 13816  002F7A  0E68               	movlw	104
 13817  002F7C  0100               	movlb	0	; () banked
 13818  002F7E  6FAB               	movwf	??_PusherTest& (0+255),b
 13819  002F80  0EE4               	movlw	228
 13820  002F82                     u10157:
 13821  002F82  2EE8               	decfsz	wreg,f,c
 13822  002F84  D7FE               	bra	u10157
 13823  002F86  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13824  002F88  D7FC               	bra	u10157
 13825  002F8A  F000               	nop	
 13826  002F8C  0E80               	movlw	128
 13827  002F8E  EC15  F02A         	call	_lcdInst
 13828                           
 13829                           ;Test.c: 442: printf("IR_signal: %d ", IR_signal);
 13830  002F92  0E5A               	movlw	low STR_80
 13831  002F94  0100               	movlb	0	; () banked
 13832  002F96  6F8E               	movwf	printf@f& (0+255),b
 13833  002F98  0EFE               	movlw	high STR_80
 13834  002F9A  0100               	movlb	0	; () banked
 13835  002F9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13836  002F9E  C0E6  F090         	movff	_IR_signal,?_printf+2
 13837  002FA2  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13838  002FA6  EC1B  F00B         	call	_printf	;wreg free
 13839                           
 13840                           ;Test.c: 443: lcdInst(0b11000000);;
 13841  002FAA  0EC0               	movlw	192
 13842  002FAC  EC15  F02A         	call	_lcdInst
 13843                           
 13844                           ;Test.c: 444: printf("%d", res);
 13845  002FB0  0E16               	movlw	low (STR_27+14)
 13846  002FB2  0100               	movlb	0	; () banked
 13847  002FB4  6F8E               	movwf	printf@f& (0+255),b
 13848  002FB6  0EFE               	movlw	high (STR_27+14)
 13849  002FB8  0100               	movlb	0	; () banked
 13850  002FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13851  002FBC  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13852  002FC0  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13853  002FC4  EC1B  F00B         	call	_printf	;wreg free
 13854                           
 13855                           ;Test.c: 445: _delay((unsigned long)((100)*(32000000/4000.0)));
 13856  002FC8  0E05               	movlw	5
 13857  002FCA  0100               	movlb	0	; () banked
 13858  002FCC  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13859  002FCE  0E0F               	movlw	15
 13860  002FD0  0100               	movlb	0	; () banked
 13861  002FD2  6FAB               	movwf	??_PusherTest& (0+255),b
 13862  002FD4  0EF1               	movlw	241
 13863  002FD6                     u10167:
 13864  002FD6  2EE8               	decfsz	wreg,f,c
 13865  002FD8  D7FE               	bra	u10167
 13866  002FDA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13867  002FDC  D7FC               	bra	u10167
 13868  002FDE  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13869  002FE0  D7FA               	bra	u10167
 13870  002FE2                     l8287:
 13871  002FE2  B281               	btfsc	3969,1,c	;volatile
 13872  002FE4  D05D               	goto	l8307
 13873  002FE6  D7A1               	goto	l8269
 13874  002FE8                     l8289:
 13875                           
 13876                           ;Test.c: 451: readADC(0);
 13877  002FE8  0E00               	movlw	0
 13878  002FEA  EC0C  F029         	call	_readADC
 13879                           
 13880                           ;Test.c: 452: int res = ADRESH<<8 | ADRESL;
 13881  002FEE  50C3               	movf	4035,w,c	;volatile
 13882  002FF0  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13883  002FF4  0100               	movlb	0	; () banked
 13884  002FF6  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13885  002FF8  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13886  002FFC  0100               	movlb	0	; () banked
 13887  002FFE  6BAB               	clrf	??_PusherTest& (0+255),b
 13888  003000  0100               	movlb	0	; () banked
 13889  003002  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13890  003004  0100               	movlb	0	; () banked
 13891  003006  6FAF               	movwf	PusherTest@res_1771& (0+255),b
 13892  003008  0100               	movlb	0	; () banked
 13893  00300A  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13894  00300C  0100               	movlb	0	; () banked
 13895  00300E  6FB0               	movwf	(PusherTest@res_1771+1)& (0+255),b
 13896                           
 13897                           ; BSR set to: 0
 13898                           ;Test.c: 453: IR_signal = (res > 800) ? 1 : 0;
 13899  003010  0100               	movlb	0	; () banked
 13900  003012  BFB0               	btfsc	(PusherTest@res_1771+1)& (0+255),7,b
 13901  003014  D00A               	goto	u7130
 13902  003016  0E21               	movlw	33
 13903  003018  0100               	movlb	0	; () banked
 13904  00301A  5DAF               	subwf	PusherTest@res_1771& (0+255),w,b
 13905  00301C  0E03               	movlw	3
 13906  00301E  0100               	movlb	0	; () banked
 13907  003020  59B0               	subwfb	(PusherTest@res_1771+1)& (0+255),w,b
 13908  003022  A0D8               	btfss	status,0,c
 13909  003024  D002               	goto	u7130
 13910  003026  0E01               	movlw	1
 13911  003028  D001               	goto	u7140
 13912  00302A                     u7130:
 13913  00302A  0E00               	movlw	0
 13914  00302C                     u7140:
 13915  00302C  0100               	movlb	0	; () banked
 13916  00302E  6FE6               	movwf	_IR_signal& (0+255),b
 13917  003030  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13918                           
 13919                           ;Test.c: 454: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13920  003032  0E01               	movlw	1
 13921  003034  EC15  F02A         	call	_lcdInst
 13922  003038  0E68               	movlw	104
 13923  00303A  0100               	movlb	0	; () banked
 13924  00303C  6FAB               	movwf	??_PusherTest& (0+255),b
 13925  00303E  0EE4               	movlw	228
 13926  003040                     u10177:
 13927  003040  2EE8               	decfsz	wreg,f,c
 13928  003042  D7FE               	bra	u10177
 13929  003044  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13930  003046  D7FC               	bra	u10177
 13931  003048  F000               	nop	
 13932  00304A  0E80               	movlw	128
 13933  00304C  EC15  F02A         	call	_lcdInst
 13934                           
 13935                           ;Test.c: 455: printf("IR_signal: %d ", IR_signal);
 13936  003050  0E5A               	movlw	low STR_80
 13937  003052  0100               	movlb	0	; () banked
 13938  003054  6F8E               	movwf	printf@f& (0+255),b
 13939  003056  0EFE               	movlw	high STR_80
 13940  003058  0100               	movlb	0	; () banked
 13941  00305A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13942  00305C  C0E6  F090         	movff	_IR_signal,?_printf+2
 13943  003060  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13944  003064  EC1B  F00B         	call	_printf	;wreg free
 13945                           
 13946                           ;Test.c: 456: lcdInst(0b11000000);;
 13947  003068  0EC0               	movlw	192
 13948  00306A  EC15  F02A         	call	_lcdInst
 13949                           
 13950                           ;Test.c: 457: printf("%d", res);
 13951  00306E  0E16               	movlw	low (STR_27+14)
 13952  003070  0100               	movlb	0	; () banked
 13953  003072  6F8E               	movwf	printf@f& (0+255),b
 13954  003074  0EFE               	movlw	high (STR_27+14)
 13955  003076  0100               	movlb	0	; () banked
 13956  003078  6F8F               	movwf	(printf@f+1)& (0+255),b
 13957  00307A  C0AF  F090         	movff	PusherTest@res_1771,?_printf+2
 13958  00307E  C0B0  F091         	movff	PusherTest@res_1771+1,?_printf+3
 13959  003082  EC1B  F00B         	call	_printf	;wreg free
 13960                           
 13961                           ;Test.c: 458: _delay((unsigned long)((100)*(32000000/4000.0)));
 13962  003086  0E05               	movlw	5
 13963  003088  0100               	movlb	0	; () banked
 13964  00308A  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13965  00308C  0E0F               	movlw	15
 13966  00308E  0100               	movlb	0	; () banked
 13967  003090  6FAB               	movwf	??_PusherTest& (0+255),b
 13968  003092  0EF1               	movlw	241
 13969  003094                     u10187:
 13970  003094  2EE8               	decfsz	wreg,f,c
 13971  003096  D7FE               	bra	u10187
 13972  003098  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13973  00309A  D7FC               	bra	u10187
 13974  00309C  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13975  00309E  D7FA               	bra	u10187
 13976  0030A0                     l8307:
 13977  0030A0  A281               	btfss	3969,1,c	;volatile
 13978  0030A2  D7A2               	goto	l8289
 13979                           
 13980                           ;Test.c: 459: }
 13981                           ;Test.c: 460: if(PORTB >> 4 == 0b1111){
 13982  0030A4  3881               	swapf	3969,w,c	;volatile
 13983  0030A6  0B0F               	andlw	15
 13984  0030A8  0A0F               	xorlw	15
 13985  0030AA  B4D8               	btfsc	status,2,c
 13986  0030AC  D047               	goto	l1323
 13987                           
 13988                           ;Test.c: 465: else if(PORTB >> 4 == 0b0101){
 13989                           
 13990                           ;Test.c: 462: }
 13991                           
 13992                           ;Test.c: 461: break;
 13993  0030AE  3881               	swapf	3969,w,c	;volatile
 13994  0030B0  0B0F               	andlw	15
 13995  0030B2  0A05               	xorlw	5
 13996  0030B4  A4D8               	btfss	status,2,c
 13997  0030B6  D01D               	goto	l8329
 13998                           
 13999                           ;Test.c: 466: for(int i = 0; i<3000; i++){
 14000  0030B8  0E00               	movlw	0
 14001  0030BA  0100               	movlb	0	; () banked
 14002  0030BC  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 14003  0030BE  0E00               	movlw	0
 14004  0030C0  6FB1               	movwf	PusherTest@i& (0+255),b
 14005  0030C2                     l8319:
 14006                           
 14007                           ; BSR set to: 0
 14008  0030C2  0100               	movlb	0	; () banked
 14009  0030C4  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 14010  0030C6  D008               	goto	l1326
 14011  0030C8  0EB8               	movlw	184
 14012  0030CA  0100               	movlb	0	; () banked
 14013  0030CC  5DB1               	subwf	PusherTest@i& (0+255),w,b
 14014  0030CE  0E0B               	movlw	11
 14015  0030D0  0100               	movlb	0	; () banked
 14016  0030D2  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 14017  0030D4  B0D8               	btfsc	status,0,c
 14018  0030D6  D02F               	goto	l1332
 14019  0030D8                     l1326:
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;Test.c: 467: LATAbits.LATA4 = 1;
 14023  0030D8  8889               	bsf	3977,4,c	;volatile
 14024                           
 14025                           ; BSR set to: 0
 14026                           ;Test.c: 468: _delay((unsigned long)((75)*(32000000/4000000.0)));
 14027  0030DA  0EC8               	movlw	200
 14028  0030DC                     u10197:
 14029  0030DC  2EE8               	decfsz	wreg,f,c
 14030  0030DE  D7FE               	bra	u10197
 14031                           
 14032                           ;Test.c: 469: LATAbits.LATA4 = 0;
 14033  0030E0  9889               	bcf	3977,4,c	;volatile
 14034                           
 14035                           ;Test.c: 470: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14036  0030E2  0E42               	movlw	66
 14037  0030E4                     u10207:
 14038  0030E4  2EE8               	decfsz	wreg,f,c
 14039  0030E6  D7FE               	bra	u10207
 14040  0030E8  D000               	nop2	
 14041  0030EA  0100               	movlb	0	; () banked
 14042  0030EC  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 14043  0030EE  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 14044  0030F0  D7E8               	goto	l8319
 14045  0030F2                     l8329:
 14046                           
 14047                           ;Test.c: 473: else if (PORTB >> 4 == 0b110){
 14048  0030F2  3881               	swapf	3969,w,c	;volatile
 14049  0030F4  0B0F               	andlw	15
 14050  0030F6  0A06               	xorlw	6
 14051  0030F8  A4D8               	btfss	status,2,c
 14052  0030FA  D01D               	goto	l1332
 14053                           
 14054                           ;Test.c: 474: for(int i = 0; i<3000; i++){
 14055  0030FC  0E00               	movlw	0
 14056  0030FE  0100               	movlb	0	; () banked
 14057  003100  6FB4               	movwf	(PusherTest@i_1775+1)& (0+255),b
 14058  003102  0E00               	movlw	0
 14059  003104  6FB3               	movwf	PusherTest@i_1775& (0+255),b
 14060  003106                     l8333:
 14061                           
 14062                           ; BSR set to: 0
 14063  003106  0100               	movlb	0	; () banked
 14064  003108  BFB4               	btfsc	(PusherTest@i_1775+1)& (0+255),7,b
 14065  00310A  D008               	goto	l1330
 14066  00310C  0EB8               	movlw	184
 14067  00310E  0100               	movlb	0	; () banked
 14068  003110  5DB3               	subwf	PusherTest@i_1775& (0+255),w,b
 14069  003112  0E0B               	movlw	11
 14070  003114  0100               	movlb	0	; () banked
 14071  003116  59B4               	subwfb	(PusherTest@i_1775+1)& (0+255),w,b
 14072  003118  B0D8               	btfsc	status,0,c
 14073  00311A  D00D               	goto	l1332
 14074  00311C                     l1330:
 14075                           
 14076                           ; BSR set to: 0
 14077                           ;Test.c: 475: LATAbits.LATA4 = 1;
 14078  00311C  8889               	bsf	3977,4,c	;volatile
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;Test.c: 476: _delay((unsigned long)((58)*(32000000/4000000.0)));
 14082  00311E  0E9A               	movlw	154
 14083  003120                     u10217:
 14084  003120  2EE8               	decfsz	wreg,f,c
 14085  003122  D7FE               	bra	u10217
 14086  003124  D000               	nop2	
 14087                           
 14088                           ;Test.c: 477: LATAbits.LATA4 = 0;
 14089  003126  9889               	bcf	3977,4,c	;volatile
 14090                           
 14091                           ;Test.c: 478: _delay((unsigned long)((42)*(32000000/4000000.0)));
 14092  003128  0E70               	movlw	112
 14093  00312A                     u10227:
 14094  00312A  2EE8               	decfsz	wreg,f,c
 14095  00312C  D7FE               	bra	u10227
 14096  00312E  0100               	movlb	0	; () banked
 14097  003130  4BB3               	infsnz	PusherTest@i_1775& (0+255),f,b
 14098  003132  2BB4               	incf	(PusherTest@i_1775+1)& (0+255),f,b
 14099  003134  D7E8               	goto	l8333
 14100  003136                     l1332:
 14101  003136  A281               	btfss	3969,1,c	;volatile
 14102  003138  D7B3               	goto	l8307
 14103  00313A  D7FD               	goto	l1332
 14104  00313C                     l1323:
 14105                           
 14106                           ;Test.c: 483: }
 14107                           ;Test.c: 484: LATCbits.LATC5 = 0;
 14108  00313C  9A8B               	bcf	3979,5,c	;volatile
 14109  00313E  0012               	return		;funcret
 14110  003140                     __end_of_PusherTest:
 14111                           	opt stack 0
 14112                           tblptru	equ	0xFF8
 14113                           tblptrh	equ	0xFF7
 14114                           tblptrl	equ	0xFF6
 14115                           tablat	equ	0xFF5
 14116                           prodh	equ	0xFF4
 14117                           prodl	equ	0xFF3
 14118                           intcon	equ	0xFF2
 14119                           intcon2	equ	0xFF1
 14120                           intcon3	equ	0xFF0
 14121                           postinc0	equ	0xFEE
 14122                           wreg	equ	0xFE8
 14123                           postdec1	equ	0xFE5
 14124                           fsr1l	equ	0xFE1
 14125                           indf2	equ	0xFDF
 14126                           postinc2	equ	0xFDE
 14127                           postdec2	equ	0xFDD
 14128                           fsr2h	equ	0xFDA
 14129                           fsr2l	equ	0xFD9
 14130                           status	equ	0xFD8
 14131                           
 14132 ;; *************** function _readADC *****************
 14133 ;; Defined at:
 14134 ;;		line 15 in file "ADCFunctionality.c"
 14135 ;; Parameters:    Size  Location     Type
 14136 ;;  channel         1    wreg     unsigned char 
 14137 ;; Auto vars:     Size  Location     Type
 14138 ;;  channel         1    1[BANK0 ] unsigned char 
 14139 ;; Return value:  Size  Location     Type
 14140 ;;                  1    wreg      void 
 14141 ;; Registers used:
 14142 ;;		wreg, status,2, status,0, cstack
 14143 ;; Tracked objects:
 14144 ;;		On entry : 0/0
 14145 ;;		On exit  : 0/0
 14146 ;;		Unchanged: 0/0
 14147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14152 ;;Total ram usage:        2 bytes
 14153 ;; Hardware stack levels used:    1
 14154 ;; Hardware stack levels required when called:    7
 14155 ;; This function calls:
 14156 ;;		Nothing
 14157 ;; This function is called by:
 14158 ;;		_readIR
 14159 ;;		_readMAG
 14160 ;;		_sensorTest
 14161 ;;		_PusherTest
 14162 ;; This function uses a non-reentrant model
 14163 ;;
 14164                           
 14165                           	psect	text44
 14166  005218                     __ptext44:
 14167                           	opt stack 0
 14168  005218                     _readADC:
 14169                           	opt stack 20
 14170                           
 14171                           ;incstack = 0
 14172                           ;readADC@channel stored from wreg
 14173  005218  0100               	movlb	0	; () banked
 14174  00521A  6F81               	movwf	readADC@channel& (0+255),b
 14175                           
 14176                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14177  00521C  0100               	movlb	0	; () banked
 14178  00521E  4581               	rlncf	readADC@channel& (0+255),w,b
 14179  005220  46E8               	rlncf	wreg,f,c
 14180  005222  0BFC               	andlw	252
 14181  005224  6EC2               	movwf	4034,c	;volatile
 14182                           
 14183                           ; BSR set to: 0
 14184                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14185  005226  80C2               	bsf	4034,0,c	;volatile
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14189  005228  82C2               	bsf	4034,1,c	;volatile
 14190                           
 14191                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14192  00522A  D009               	goto	l6123
 14193  00522C                     l6121:
 14194  00522C  0E34               	movlw	52
 14195  00522E  0100               	movlb	0	; () banked
 14196  005230  6F80               	movwf	??_readADC& (0+255),b
 14197  005232  0EF1               	movlw	241
 14198  005234                     u10237:
 14199  005234  2EE8               	decfsz	wreg,f,c
 14200  005236  D7FE               	bra	u10237
 14201  005238  2F80               	decfsz	??_readADC& (0+255),f,b
 14202  00523A  D7FC               	bra	u10237
 14203  00523C  D000               	nop2	
 14204  00523E                     l6123:
 14205  00523E  A2C2               	btfss	4034,1,c	;volatile
 14206  005240  0012               	return	
 14207  005242  D7F4               	goto	l6121
 14208  005244                     __end_of_readADC:
 14209                           	opt stack 0
 14210                           tblptru	equ	0xFF8
 14211                           tblptrh	equ	0xFF7
 14212                           tblptrl	equ	0xFF6
 14213                           tablat	equ	0xFF5
 14214                           prodh	equ	0xFF4
 14215                           prodl	equ	0xFF3
 14216                           intcon	equ	0xFF2
 14217                           intcon2	equ	0xFF1
 14218                           intcon3	equ	0xFF0
 14219                           postinc0	equ	0xFEE
 14220                           wreg	equ	0xFE8
 14221                           postdec1	equ	0xFE5
 14222                           fsr1l	equ	0xFE1
 14223                           indf2	equ	0xFDF
 14224                           postinc2	equ	0xFDE
 14225                           postdec2	equ	0xFDD
 14226                           fsr2h	equ	0xFDA
 14227                           fsr2l	equ	0xFD9
 14228                           status	equ	0xFD8
 14229                           
 14230 ;; *************** function _PortTestDC *****************
 14231 ;; Defined at:
 14232 ;;		line 408 in file "Test.c"
 14233 ;; Parameters:    Size  Location     Type
 14234 ;;		None
 14235 ;; Auto vars:     Size  Location     Type
 14236 ;;		None
 14237 ;; Return value:  Size  Location     Type
 14238 ;;                  1    wreg      void 
 14239 ;; Registers used:
 14240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14241 ;; Tracked objects:
 14242 ;;		On entry : 0/0
 14243 ;;		On exit  : 0/0
 14244 ;;		Unchanged: 0/0
 14245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14250 ;;Total ram usage:        1 bytes
 14251 ;; Hardware stack levels used:    1
 14252 ;; Hardware stack levels required when called:   10
 14253 ;; This function calls:
 14254 ;;		_lcdInst
 14255 ;;		_printf
 14256 ;; This function is called by:
 14257 ;;		_Test
 14258 ;; This function uses a non-reentrant model
 14259 ;;
 14260                           
 14261                           	psect	text45
 14262  004BFE                     __ptext45:
 14263                           	opt stack 0
 14264  004BFE                     _PortTestDC:
 14265                           	opt stack 19
 14266                           
 14267                           ;Test.c: 409: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14268                           
 14269                           ;incstack = 0
 14270  004BFE  0E01               	movlw	1
 14271  004C00  EC15  F02A         	call	_lcdInst
 14272  004C04  0E68               	movlw	104
 14273  004C06  0100               	movlb	0	; () banked
 14274  004C08  6FAB               	movwf	??_PortTestDC& (0+255),b
 14275  004C0A  0EE4               	movlw	228
 14276  004C0C                     u10247:
 14277  004C0C  2EE8               	decfsz	wreg,f,c
 14278  004C0E  D7FE               	bra	u10247
 14279  004C10  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 14280  004C12  D7FC               	bra	u10247
 14281  004C14  F000               	nop	
 14282  004C16  0E80               	movlw	128
 14283  004C18  EC15  F02A         	call	_lcdInst
 14284                           
 14285                           ;Test.c: 410: printf("D WILL RETURN    ");
 14286  004C1C  0E15               	movlw	low STR_111
 14287  004C1E  0100               	movlb	0	; () banked
 14288  004C20  6F8E               	movwf	printf@f& (0+255),b
 14289  004C22  0EFB               	movlw	high STR_111
 14290  004C24  0100               	movlb	0	; () banked
 14291  004C26  6F8F               	movwf	(printf@f+1)& (0+255),b
 14292  004C28  EC1B  F00B         	call	_printf	;wreg free
 14293                           
 14294                           ;Test.c: 411: lcdInst(0b11000000);;
 14295  004C2C  0EC0               	movlw	192
 14296  004C2E  EC15  F02A         	call	_lcdInst
 14297                           
 14298                           ;Test.c: 412: printf("OTHER SETS DC   ");
 14299  004C32  0EF9               	movlw	low STR_112
 14300  004C34  0100               	movlb	0	; () banked
 14301  004C36  6F8E               	movwf	printf@f& (0+255),b
 14302  004C38  0EFB               	movlw	high STR_112
 14303  004C3A  0100               	movlb	0	; () banked
 14304  004C3C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14305  004C3E  EC1B  F00B         	call	_printf	;wreg free
 14306  004C42                     l1302:
 14307  004C42  A281               	btfss	3969,1,c	;volatile
 14308  004C44  D7FE               	goto	l1302
 14309                           
 14310                           ;Test.c: 417: }
 14311                           ;Test.c: 418: if(PORTB >> 4 == 0b1111){
 14312  004C46  3881               	swapf	3969,w,c	;volatile
 14313  004C48  0B0F               	andlw	15
 14314  004C4A  0A0F               	xorlw	15
 14315  004C4C  B4D8               	btfsc	status,2,c
 14316  004C4E  0012               	return	
 14317                           
 14318                           ;Test.c: 421: else{
 14319                           ;Test.c: 422: LATBbits.LATB2 = 1;
 14320                           
 14321                           ;Test.c: 420: }
 14322                           
 14323                           ;Test.c: 419: break;
 14324  004C50  848A               	bsf	3978,2,c	;volatile
 14325  004C52                     l1308:
 14326  004C52  B281               	btfsc	3969,1,c	;volatile
 14327  004C54  D7FE               	goto	l1308
 14328                           
 14329                           ;Test.c: 425: }
 14330                           ;Test.c: 426: LATBbits.LATB2 = 0;
 14331  004C56  948A               	bcf	3978,2,c	;volatile
 14332  004C58  D7F4               	goto	l1302
 14333  004C5A                     __end_of_PortTestDC:
 14334                           	opt stack 0
 14335                           tblptru	equ	0xFF8
 14336                           tblptrh	equ	0xFF7
 14337                           tblptrl	equ	0xFF6
 14338                           tablat	equ	0xFF5
 14339                           prodh	equ	0xFF4
 14340                           prodl	equ	0xFF3
 14341                           intcon	equ	0xFF2
 14342                           intcon2	equ	0xFF1
 14343                           intcon3	equ	0xFF0
 14344                           postinc0	equ	0xFEE
 14345                           wreg	equ	0xFE8
 14346                           postdec1	equ	0xFE5
 14347                           fsr1l	equ	0xFE1
 14348                           indf2	equ	0xFDF
 14349                           postinc2	equ	0xFDE
 14350                           postdec2	equ	0xFDD
 14351                           fsr2h	equ	0xFDA
 14352                           fsr2l	equ	0xFD9
 14353                           status	equ	0xFD8
 14354                           
 14355 ;; *************** function _EEPROMTest *****************
 14356 ;; Defined at:
 14357 ;;		line 541 in file "Test.c"
 14358 ;; Parameters:    Size  Location     Type
 14359 ;;		None
 14360 ;; Auto vars:     Size  Location     Type
 14361 ;;		None
 14362 ;; Return value:  Size  Location     Type
 14363 ;;                  1    wreg      void 
 14364 ;; Registers used:
 14365 ;;		None
 14366 ;; Tracked objects:
 14367 ;;		On entry : 0/0
 14368 ;;		On exit  : 0/0
 14369 ;;		Unchanged: 0/0
 14370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14375 ;;Total ram usage:        0 bytes
 14376 ;; Hardware stack levels used:    1
 14377 ;; Hardware stack levels required when called:    7
 14378 ;; This function calls:
 14379 ;;		Nothing
 14380 ;; This function is called by:
 14381 ;;		_Test
 14382 ;; This function uses a non-reentrant model
 14383 ;;
 14384                           
 14385                           	psect	text46
 14386  00548E                     __ptext46:
 14387                           	opt stack 0
 14388  00548E                     _EEPROMTest:
 14389                           	opt stack 22
 14390                           
 14391                           ;incstack = 0
 14392  00548E  0012               	return		;funcret
 14393  005490                     __end_of_EEPROMTest:
 14394                           	opt stack 0
 14395                           tblptru	equ	0xFF8
 14396                           tblptrh	equ	0xFF7
 14397                           tblptrl	equ	0xFF6
 14398                           tablat	equ	0xFF5
 14399                           prodh	equ	0xFF4
 14400                           prodl	equ	0xFF3
 14401                           intcon	equ	0xFF2
 14402                           intcon2	equ	0xFF1
 14403                           intcon3	equ	0xFF0
 14404                           postinc0	equ	0xFEE
 14405                           wreg	equ	0xFE8
 14406                           postdec1	equ	0xFE5
 14407                           fsr1l	equ	0xFE1
 14408                           indf2	equ	0xFDF
 14409                           postinc2	equ	0xFDE
 14410                           postdec2	equ	0xFDD
 14411                           fsr2h	equ	0xFDA
 14412                           fsr2l	equ	0xFD9
 14413                           status	equ	0xFD8
 14414                           
 14415 ;; *************** function _BothServos *****************
 14416 ;; Defined at:
 14417 ;;		line 351 in file "Test.c"
 14418 ;; Parameters:    Size  Location     Type
 14419 ;;		None
 14420 ;; Auto vars:     Size  Location     Type
 14421 ;;		None
 14422 ;; Return value:  Size  Location     Type
 14423 ;;                  1    wreg      void 
 14424 ;; Registers used:
 14425 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14426 ;; Tracked objects:
 14427 ;;		On entry : 0/0
 14428 ;;		On exit  : 0/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14435 ;;Total ram usage:        2 bytes
 14436 ;; Hardware stack levels used:    1
 14437 ;; Hardware stack levels required when called:   10
 14438 ;; This function calls:
 14439 ;;		_initServos
 14440 ;;		_lcdInst
 14441 ;;		_printf
 14442 ;;		_updateServoPosition
 14443 ;; This function is called by:
 14444 ;;		_Test
 14445 ;; This function uses a non-reentrant model
 14446 ;;
 14447                           
 14448                           	psect	text47
 14449  001A6E                     __ptext47:
 14450                           	opt stack 0
 14451  001A6E                     _BothServos:
 14452                           	opt stack 19
 14453                           
 14454                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14455                           
 14456                           ;incstack = 0
 14457  001A6E  0E01               	movlw	1
 14458  001A70  EC15  F02A         	call	_lcdInst
 14459  001A74  0E68               	movlw	104
 14460  001A76  0100               	movlb	0	; () banked
 14461  001A78  6FAB               	movwf	??_BothServos& (0+255),b
 14462  001A7A  0EE4               	movlw	228
 14463  001A7C                     u10257:
 14464  001A7C  2EE8               	decfsz	wreg,f,c
 14465  001A7E  D7FE               	bra	u10257
 14466  001A80  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14467  001A82  D7FC               	bra	u10257
 14468  001A84  F000               	nop	
 14469  001A86  0E80               	movlw	128
 14470  001A88  EC15  F02A         	call	_lcdInst
 14471                           
 14472                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 14473  001A8C  0EB4               	movlw	low STR_110
 14474  001A8E  0100               	movlb	0	; () banked
 14475  001A90  6F8E               	movwf	printf@f& (0+255),b
 14476  001A92  0EFC               	movlw	high STR_110
 14477  001A94  0100               	movlb	0	; () banked
 14478  001A96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14479  001A98  EC1B  F00B         	call	_printf	;wreg free
 14480                           
 14481                           ;Test.c: 354: TMR1ON = 1;
 14482  001A9C  80CD               	bsf	4045,0,c	;volatile
 14483                           
 14484                           ;Test.c: 355: TMR3ON = 1;
 14485  001A9E  80B1               	bsf	4017,0,c	;volatile
 14486                           
 14487                           ;Test.c: 356: machine_state = Sorting_state;
 14488  001AA0  0E01               	movlw	1
 14489  001AA2  0100               	movlb	0	; () banked
 14490  001AA4  6FFC               	movwf	_machine_state& (0+255),b
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;Test.c: 357: was_low_1 = 0;
 14494  001AA6  0E00               	movlw	0
 14495  001AA8  6E78               	movwf	_was_low_1+1,c	;volatile
 14496  001AAA  0E00               	movlw	0
 14497  001AAC  6E77               	movwf	_was_low_1,c	;volatile
 14498                           
 14499                           ; BSR set to: 0
 14500                           ;Test.c: 358: was_low_3 = 0;
 14501  001AAE  0E00               	movlw	0
 14502  001AB0  6E7C               	movwf	_was_low_3+1,c	;volatile
 14503  001AB2  0E00               	movlw	0
 14504  001AB4  6E7B               	movwf	_was_low_3,c	;volatile
 14505                           
 14506                           ; BSR set to: 0
 14507                           ;Test.c: 364: initServos();
 14508  001AB6  EC39  F025         	call	_initServos	;wreg free
 14509                           
 14510                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14511  001ABA  0E3D               	movlw	61
 14512  001ABC  0100               	movlb	0	; () banked
 14513  001ABE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14514  001AC0  0EE1               	movlw	225
 14515  001AC2  0100               	movlb	0	; () banked
 14516  001AC4  6FAB               	movwf	??_BothServos& (0+255),b
 14517  001AC6  0E3F               	movlw	63
 14518  001AC8                     u10267:
 14519  001AC8  2EE8               	decfsz	wreg,f,c
 14520  001ACA  D7FE               	bra	u10267
 14521  001ACC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14522  001ACE  D7FC               	bra	u10267
 14523  001AD0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14524  001AD2  D7FA               	bra	u10267
 14525  001AD4  D000               	nop2	
 14526                           
 14527                           ;Test.c: 367: updateServoPosition(500, 1);
 14528  001AD6  0E01               	movlw	1
 14529  001AD8  0100               	movlb	0	; () banked
 14530  001ADA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14531  001ADC  0EF4               	movlw	244
 14532  001ADE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14533  001AE0  0E00               	movlw	0
 14534  001AE2  0100               	movlb	0	; () banked
 14535  001AE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14536  001AE6  0E01               	movlw	1
 14537  001AE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14538  001AEA  EC9A  F023         	call	_updateServoPosition	;wreg free
 14539                           
 14540                           ;Test.c: 368: updateServoPosition(1050, 3);
 14541  001AEE  0E04               	movlw	4
 14542  001AF0  0100               	movlb	0	; () banked
 14543  001AF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14544  001AF4  0E1A               	movlw	26
 14545  001AF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14546  001AF8  0E00               	movlw	0
 14547  001AFA  0100               	movlb	0	; () banked
 14548  001AFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14549  001AFE  0E03               	movlw	3
 14550  001B00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14551  001B02  EC9A  F023         	call	_updateServoPosition	;wreg free
 14552                           
 14553                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 14554  001B06  0E1F               	movlw	31
 14555  001B08  0100               	movlb	0	; () banked
 14556  001B0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14557  001B0C  0E71               	movlw	113
 14558  001B0E  0100               	movlb	0	; () banked
 14559  001B10  6FAB               	movwf	??_BothServos& (0+255),b
 14560  001B12  0E1E               	movlw	30
 14561  001B14                     u10277:
 14562  001B14  2EE8               	decfsz	wreg,f,c
 14563  001B16  D7FE               	bra	u10277
 14564  001B18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14565  001B1A  D7FC               	bra	u10277
 14566  001B1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14567  001B1E  D7FA               	bra	u10277
 14568  001B20  F000               	nop	
 14569                           
 14570                           ;Test.c: 370: updateServoPosition(1260, 3);
 14571  001B22  0E04               	movlw	4
 14572  001B24  0100               	movlb	0	; () banked
 14573  001B26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14574  001B28  0EEC               	movlw	236
 14575  001B2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14576  001B2C  0E00               	movlw	0
 14577  001B2E  0100               	movlb	0	; () banked
 14578  001B30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14579  001B32  0E03               	movlw	3
 14580  001B34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14581  001B36  EC9A  F023         	call	_updateServoPosition	;wreg free
 14582                           
 14583                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 14584  001B3A  0E1D               	movlw	29
 14585  001B3C  0100               	movlb	0	; () banked
 14586  001B3E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14587  001B40  0E69               	movlw	105
 14588  001B42  0100               	movlb	0	; () banked
 14589  001B44  6FAB               	movwf	??_BothServos& (0+255),b
 14590  001B46  0EA5               	movlw	165
 14591  001B48                     u10287:
 14592  001B48  2EE8               	decfsz	wreg,f,c
 14593  001B4A  D7FE               	bra	u10287
 14594  001B4C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14595  001B4E  D7FC               	bra	u10287
 14596  001B50  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14597  001B52  D7FA               	bra	u10287
 14598                           
 14599                           ;Test.c: 372: updateServoPosition(1050, 3);
 14600  001B54  0E04               	movlw	4
 14601  001B56  0100               	movlb	0	; () banked
 14602  001B58  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14603  001B5A  0E1A               	movlw	26
 14604  001B5C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14605  001B5E  0E00               	movlw	0
 14606  001B60  0100               	movlb	0	; () banked
 14607  001B62  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14608  001B64  0E03               	movlw	3
 14609  001B66  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14610  001B68  EC9A  F023         	call	_updateServoPosition	;wreg free
 14611                           
 14612                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 14613  001B6C  0E1F               	movlw	31
 14614  001B6E  0100               	movlb	0	; () banked
 14615  001B70  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14616  001B72  0E71               	movlw	113
 14617  001B74  0100               	movlb	0	; () banked
 14618  001B76  6FAB               	movwf	??_BothServos& (0+255),b
 14619  001B78  0E1E               	movlw	30
 14620  001B7A                     u10297:
 14621  001B7A  2EE8               	decfsz	wreg,f,c
 14622  001B7C  D7FE               	bra	u10297
 14623  001B7E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14624  001B80  D7FC               	bra	u10297
 14625  001B82  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14626  001B84  D7FA               	bra	u10297
 14627  001B86  F000               	nop	
 14628                           
 14629                           ;Test.c: 375: updateServoPosition(850, 1);
 14630  001B88  0E03               	movlw	3
 14631  001B8A  0100               	movlb	0	; () banked
 14632  001B8C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14633  001B8E  0E52               	movlw	82
 14634  001B90  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14635  001B92  0E00               	movlw	0
 14636  001B94  0100               	movlb	0	; () banked
 14637  001B96  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14638  001B98  0E01               	movlw	1
 14639  001B9A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14640  001B9C  EC9A  F023         	call	_updateServoPosition	;wreg free
 14641                           
 14642                           ;Test.c: 376: updateServoPosition(1050, 3);
 14643  001BA0  0E04               	movlw	4
 14644  001BA2  0100               	movlb	0	; () banked
 14645  001BA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14646  001BA6  0E1A               	movlw	26
 14647  001BA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14648  001BAA  0E00               	movlw	0
 14649  001BAC  0100               	movlb	0	; () banked
 14650  001BAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14651  001BB0  0E03               	movlw	3
 14652  001BB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14653  001BB4  EC9A  F023         	call	_updateServoPosition	;wreg free
 14654                           
 14655                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 14656  001BB8  0E1F               	movlw	31
 14657  001BBA  0100               	movlb	0	; () banked
 14658  001BBC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14659  001BBE  0E71               	movlw	113
 14660  001BC0  0100               	movlb	0	; () banked
 14661  001BC2  6FAB               	movwf	??_BothServos& (0+255),b
 14662  001BC4  0E1E               	movlw	30
 14663  001BC6                     u10307:
 14664  001BC6  2EE8               	decfsz	wreg,f,c
 14665  001BC8  D7FE               	bra	u10307
 14666  001BCA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14667  001BCC  D7FC               	bra	u10307
 14668  001BCE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14669  001BD0  D7FA               	bra	u10307
 14670  001BD2  F000               	nop	
 14671                           
 14672                           ;Test.c: 378: updateServoPosition(1260, 3);
 14673  001BD4  0E04               	movlw	4
 14674  001BD6  0100               	movlb	0	; () banked
 14675  001BD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14676  001BDA  0EEC               	movlw	236
 14677  001BDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14678  001BDE  0E00               	movlw	0
 14679  001BE0  0100               	movlb	0	; () banked
 14680  001BE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14681  001BE4  0E03               	movlw	3
 14682  001BE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14683  001BE8  EC9A  F023         	call	_updateServoPosition	;wreg free
 14684                           
 14685                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 14686  001BEC  0E1D               	movlw	29
 14687  001BEE  0100               	movlb	0	; () banked
 14688  001BF0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14689  001BF2  0E69               	movlw	105
 14690  001BF4  0100               	movlb	0	; () banked
 14691  001BF6  6FAB               	movwf	??_BothServos& (0+255),b
 14692  001BF8  0EA5               	movlw	165
 14693  001BFA                     u10317:
 14694  001BFA  2EE8               	decfsz	wreg,f,c
 14695  001BFC  D7FE               	bra	u10317
 14696  001BFE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14697  001C00  D7FC               	bra	u10317
 14698  001C02  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14699  001C04  D7FA               	bra	u10317
 14700                           
 14701                           ;Test.c: 380: updateServoPosition(1050, 3);
 14702  001C06  0E04               	movlw	4
 14703  001C08  0100               	movlb	0	; () banked
 14704  001C0A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14705  001C0C  0E1A               	movlw	26
 14706  001C0E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14707  001C10  0E00               	movlw	0
 14708  001C12  0100               	movlb	0	; () banked
 14709  001C14  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14710  001C16  0E03               	movlw	3
 14711  001C18  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14712  001C1A  EC9A  F023         	call	_updateServoPosition	;wreg free
 14713                           
 14714                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 14715  001C1E  0E1F               	movlw	31
 14716  001C20  0100               	movlb	0	; () banked
 14717  001C22  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14718  001C24  0E71               	movlw	113
 14719  001C26  0100               	movlb	0	; () banked
 14720  001C28  6FAB               	movwf	??_BothServos& (0+255),b
 14721  001C2A  0E1E               	movlw	30
 14722  001C2C                     u10327:
 14723  001C2C  2EE8               	decfsz	wreg,f,c
 14724  001C2E  D7FE               	bra	u10327
 14725  001C30  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14726  001C32  D7FC               	bra	u10327
 14727  001C34  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14728  001C36  D7FA               	bra	u10327
 14729  001C38  F000               	nop	
 14730                           
 14731                           ;Test.c: 383: updateServoPosition(1200, 1);
 14732  001C3A  0E04               	movlw	4
 14733  001C3C  0100               	movlb	0	; () banked
 14734  001C3E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14735  001C40  0EB0               	movlw	176
 14736  001C42  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14737  001C44  0E00               	movlw	0
 14738  001C46  0100               	movlb	0	; () banked
 14739  001C48  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14740  001C4A  0E01               	movlw	1
 14741  001C4C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14742  001C4E  EC9A  F023         	call	_updateServoPosition	;wreg free
 14743                           
 14744                           ;Test.c: 384: updateServoPosition(1050, 3);
 14745  001C52  0E04               	movlw	4
 14746  001C54  0100               	movlb	0	; () banked
 14747  001C56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14748  001C58  0E1A               	movlw	26
 14749  001C5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14750  001C5C  0E00               	movlw	0
 14751  001C5E  0100               	movlb	0	; () banked
 14752  001C60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14753  001C62  0E03               	movlw	3
 14754  001C64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14755  001C66  EC9A  F023         	call	_updateServoPosition	;wreg free
 14756                           
 14757                           ;Test.c: 385: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14758  001C6A  0E3D               	movlw	61
 14759  001C6C  0100               	movlb	0	; () banked
 14760  001C6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14761  001C70  0EE1               	movlw	225
 14762  001C72  0100               	movlb	0	; () banked
 14763  001C74  6FAB               	movwf	??_BothServos& (0+255),b
 14764  001C76  0E3F               	movlw	63
 14765  001C78                     u10337:
 14766  001C78  2EE8               	decfsz	wreg,f,c
 14767  001C7A  D7FE               	bra	u10337
 14768  001C7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14769  001C7E  D7FC               	bra	u10337
 14770  001C80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14771  001C82  D7FA               	bra	u10337
 14772  001C84  D000               	nop2	
 14773                           
 14774                           ;Test.c: 387: updateServoPosition(1670, 1);
 14775  001C86  0E06               	movlw	6
 14776  001C88  0100               	movlb	0	; () banked
 14777  001C8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14778  001C8C  0E86               	movlw	134
 14779  001C8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14780  001C90  0E00               	movlw	0
 14781  001C92  0100               	movlb	0	; () banked
 14782  001C94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14783  001C96  0E01               	movlw	1
 14784  001C98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14785  001C9A  EC9A  F023         	call	_updateServoPosition	;wreg free
 14786                           
 14787                           ;Test.c: 388: updateServoPosition(1050, 3);
 14788  001C9E  0E04               	movlw	4
 14789  001CA0  0100               	movlb	0	; () banked
 14790  001CA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14791  001CA4  0E1A               	movlw	26
 14792  001CA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14793  001CA8  0E00               	movlw	0
 14794  001CAA  0100               	movlb	0	; () banked
 14795  001CAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14796  001CAE  0E03               	movlw	3
 14797  001CB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14798  001CB2  EC9A  F023         	call	_updateServoPosition	;wreg free
 14799                           
 14800                           ;Test.c: 389: _delay((unsigned long)((750)*(32000000/4000.0)));
 14801  001CB6  0E1F               	movlw	31
 14802  001CB8  0100               	movlb	0	; () banked
 14803  001CBA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14804  001CBC  0E71               	movlw	113
 14805  001CBE  0100               	movlb	0	; () banked
 14806  001CC0  6FAB               	movwf	??_BothServos& (0+255),b
 14807  001CC2  0E1E               	movlw	30
 14808  001CC4                     u10347:
 14809  001CC4  2EE8               	decfsz	wreg,f,c
 14810  001CC6  D7FE               	bra	u10347
 14811  001CC8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14812  001CCA  D7FC               	bra	u10347
 14813  001CCC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14814  001CCE  D7FA               	bra	u10347
 14815  001CD0  F000               	nop	
 14816                           
 14817                           ;Test.c: 390: updateServoPosition(1390, 3);
 14818  001CD2  0E05               	movlw	5
 14819  001CD4  0100               	movlb	0	; () banked
 14820  001CD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14821  001CD8  0E6E               	movlw	110
 14822  001CDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14823  001CDC  0E00               	movlw	0
 14824  001CDE  0100               	movlb	0	; () banked
 14825  001CE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14826  001CE2  0E03               	movlw	3
 14827  001CE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14828  001CE6  EC9A  F023         	call	_updateServoPosition	;wreg free
 14829                           
 14830                           ;Test.c: 391: _delay((unsigned long)((700)*(32000000/4000.0)));
 14831  001CEA  0E1D               	movlw	29
 14832  001CEC  0100               	movlb	0	; () banked
 14833  001CEE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14834  001CF0  0E69               	movlw	105
 14835  001CF2  0100               	movlb	0	; () banked
 14836  001CF4  6FAB               	movwf	??_BothServos& (0+255),b
 14837  001CF6  0EA5               	movlw	165
 14838  001CF8                     u10357:
 14839  001CF8  2EE8               	decfsz	wreg,f,c
 14840  001CFA  D7FE               	bra	u10357
 14841  001CFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14842  001CFE  D7FC               	bra	u10357
 14843  001D00  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14844  001D02  D7FA               	bra	u10357
 14845                           
 14846                           ;Test.c: 392: updateServoPosition(1050, 3);
 14847  001D04  0E04               	movlw	4
 14848  001D06  0100               	movlb	0	; () banked
 14849  001D08  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14850  001D0A  0E1A               	movlw	26
 14851  001D0C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14852  001D0E  0E00               	movlw	0
 14853  001D10  0100               	movlb	0	; () banked
 14854  001D12  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14855  001D14  0E03               	movlw	3
 14856  001D16  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14857  001D18  EC9A  F023         	call	_updateServoPosition	;wreg free
 14858                           
 14859                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 14860  001D1C  0E1F               	movlw	31
 14861  001D1E  0100               	movlb	0	; () banked
 14862  001D20  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14863  001D22  0E71               	movlw	113
 14864  001D24  0100               	movlb	0	; () banked
 14865  001D26  6FAB               	movwf	??_BothServos& (0+255),b
 14866  001D28  0E1E               	movlw	30
 14867  001D2A                     u10367:
 14868  001D2A  2EE8               	decfsz	wreg,f,c
 14869  001D2C  D7FE               	bra	u10367
 14870  001D2E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14871  001D30  D7FC               	bra	u10367
 14872  001D32  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14873  001D34  D7FA               	bra	u10367
 14874  001D36  F000               	nop	
 14875                           
 14876                           ;Test.c: 395: updateServoPosition(2400, 1);
 14877  001D38  0E09               	movlw	9
 14878  001D3A  0100               	movlb	0	; () banked
 14879  001D3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14880  001D3E  0E60               	movlw	96
 14881  001D40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14882  001D42  0E00               	movlw	0
 14883  001D44  0100               	movlb	0	; () banked
 14884  001D46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14885  001D48  0E01               	movlw	1
 14886  001D4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14887  001D4C  EC9A  F023         	call	_updateServoPosition	;wreg free
 14888                           
 14889                           ;Test.c: 396: updateServoPosition(1050, 3);
 14890  001D50  0E04               	movlw	4
 14891  001D52  0100               	movlb	0	; () banked
 14892  001D54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14893  001D56  0E1A               	movlw	26
 14894  001D58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14895  001D5A  0E00               	movlw	0
 14896  001D5C  0100               	movlb	0	; () banked
 14897  001D5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14898  001D60  0E03               	movlw	3
 14899  001D62  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14900  001D64  EC9A  F023         	call	_updateServoPosition	;wreg free
 14901                           
 14902                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 14903  001D68  0E1F               	movlw	31
 14904  001D6A  0100               	movlb	0	; () banked
 14905  001D6C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14906  001D6E  0E71               	movlw	113
 14907  001D70  0100               	movlb	0	; () banked
 14908  001D72  6FAB               	movwf	??_BothServos& (0+255),b
 14909  001D74  0E1E               	movlw	30
 14910  001D76                     u10377:
 14911  001D76  2EE8               	decfsz	wreg,f,c
 14912  001D78  D7FE               	bra	u10377
 14913  001D7A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14914  001D7C  D7FC               	bra	u10377
 14915  001D7E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14916  001D80  D7FA               	bra	u10377
 14917  001D82  F000               	nop	
 14918                           
 14919                           ;Test.c: 398: updateServoPosition(1390, 3);
 14920  001D84  0E05               	movlw	5
 14921  001D86  0100               	movlb	0	; () banked
 14922  001D88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14923  001D8A  0E6E               	movlw	110
 14924  001D8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14925  001D8E  0E00               	movlw	0
 14926  001D90  0100               	movlb	0	; () banked
 14927  001D92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14928  001D94  0E03               	movlw	3
 14929  001D96  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14930  001D98  EC9A  F023         	call	_updateServoPosition	;wreg free
 14931                           
 14932                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 14933  001D9C  0E1D               	movlw	29
 14934  001D9E  0100               	movlb	0	; () banked
 14935  001DA0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14936  001DA2  0E69               	movlw	105
 14937  001DA4  0100               	movlb	0	; () banked
 14938  001DA6  6FAB               	movwf	??_BothServos& (0+255),b
 14939  001DA8  0EA5               	movlw	165
 14940  001DAA                     u10387:
 14941  001DAA  2EE8               	decfsz	wreg,f,c
 14942  001DAC  D7FE               	bra	u10387
 14943  001DAE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14944  001DB0  D7FC               	bra	u10387
 14945  001DB2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14946  001DB4  D7FA               	bra	u10387
 14947                           
 14948                           ;Test.c: 400: updateServoPosition(1050, 3);
 14949  001DB6  0E04               	movlw	4
 14950  001DB8  0100               	movlb	0	; () banked
 14951  001DBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14952  001DBC  0E1A               	movlw	26
 14953  001DBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14954  001DC0  0E00               	movlw	0
 14955  001DC2  0100               	movlb	0	; () banked
 14956  001DC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14957  001DC6  0E03               	movlw	3
 14958  001DC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14959  001DCA  EC9A  F023         	call	_updateServoPosition	;wreg free
 14960                           
 14961                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 14962  001DCE  0E1F               	movlw	31
 14963  001DD0  0100               	movlb	0	; () banked
 14964  001DD2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14965  001DD4  0E71               	movlw	113
 14966  001DD6  0100               	movlb	0	; () banked
 14967  001DD8  6FAB               	movwf	??_BothServos& (0+255),b
 14968  001DDA  0E1E               	movlw	30
 14969  001DDC                     u10397:
 14970  001DDC  2EE8               	decfsz	wreg,f,c
 14971  001DDE  D7FE               	bra	u10397
 14972  001DE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14973  001DE2  D7FC               	bra	u10397
 14974  001DE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14975  001DE6  D7FA               	bra	u10397
 14976  001DE8  F000               	nop	
 14977                           
 14978                           ;Test.c: 403: TMR1ON = 0;
 14979  001DEA  90CD               	bcf	4045,0,c	;volatile
 14980                           
 14981                           ;Test.c: 404: TMR3ON = 0;
 14982  001DEC  90B1               	bcf	4017,0,c	;volatile
 14983                           
 14984                           ;Test.c: 405: (INTCONbits.GIE = 0);
 14985  001DEE  9EF2               	bcf	intcon,7,c	;volatile
 14986  001DF0  0012               	return		;funcret
 14987  001DF2                     __end_of_BothServos:
 14988                           	opt stack 0
 14989                           tblptru	equ	0xFF8
 14990                           tblptrh	equ	0xFF7
 14991                           tblptrl	equ	0xFF6
 14992                           tablat	equ	0xFF5
 14993                           prodh	equ	0xFF4
 14994                           prodl	equ	0xFF3
 14995                           intcon	equ	0xFF2
 14996                           intcon2	equ	0xFF1
 14997                           intcon3	equ	0xFF0
 14998                           postinc0	equ	0xFEE
 14999                           wreg	equ	0xFE8
 15000                           postdec1	equ	0xFE5
 15001                           fsr1l	equ	0xFE1
 15002                           indf2	equ	0xFDF
 15003                           postinc2	equ	0xFDE
 15004                           postdec2	equ	0xFDD
 15005                           fsr2h	equ	0xFDA
 15006                           fsr2l	equ	0xFD9
 15007                           status	equ	0xFD8
 15008                           
 15009 ;; *************** function _initServos *****************
 15010 ;; Defined at:
 15011 ;;		line 433 in file "sort.c"
 15012 ;; Parameters:    Size  Location     Type
 15013 ;;		None
 15014 ;; Auto vars:     Size  Location     Type
 15015 ;;		None
 15016 ;; Return value:  Size  Location     Type
 15017 ;;                  1    wreg      void 
 15018 ;; Registers used:
 15019 ;;		wreg, status,2, status,0, cstack
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15029 ;;Total ram usage:        1 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:    8
 15032 ;; This function calls:
 15033 ;;		_updateServoPosition
 15034 ;; This function is called by:
 15035 ;;		_Loading
 15036 ;;		_BothServos
 15037 ;; This function uses a non-reentrant model
 15038 ;;
 15039                           
 15040                           	psect	text48
 15041  004A72                     __ptext48:
 15042                           	opt stack 0
 15043  004A72                     _initServos:
 15044                           	opt stack 20
 15045                           
 15046                           ;sort.c: 435: updateServoPosition(1200, 1);
 15047                           
 15048                           ;incstack = 0
 15049  004A72  0E04               	movlw	4
 15050  004A74  0100               	movlb	0	; () banked
 15051  004A76  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15052  004A78  0EB0               	movlw	176
 15053  004A7A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15054  004A7C  0E00               	movlw	0
 15055  004A7E  0100               	movlb	0	; () banked
 15056  004A80  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15057  004A82  0E01               	movlw	1
 15058  004A84  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15059  004A86  EC9A  F023         	call	_updateServoPosition	;wreg free
 15060                           
 15061                           ;sort.c: 436: updateServoPosition(1050, 3);
 15062  004A8A  0E04               	movlw	4
 15063  004A8C  0100               	movlb	0	; () banked
 15064  004A8E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15065  004A90  0E1A               	movlw	26
 15066  004A92  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15067  004A94  0E00               	movlw	0
 15068  004A96  0100               	movlb	0	; () banked
 15069  004A98  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15070  004A9A  0E03               	movlw	3
 15071  004A9C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15072  004A9E  EC9A  F023         	call	_updateServoPosition	;wreg free
 15073                           
 15074                           ;sort.c: 437: TMR1ON = 1;
 15075  004AA2  80CD               	bsf	4045,0,c	;volatile
 15076                           
 15077                           ;sort.c: 438: was_low_1 = 0;
 15078  004AA4  0E00               	movlw	0
 15079  004AA6  6E78               	movwf	_was_low_1+1,c	;volatile
 15080  004AA8  0E00               	movlw	0
 15081  004AAA  6E77               	movwf	_was_low_1,c	;volatile
 15082                           
 15083                           ;sort.c: 439: _delay((unsigned long)((5)*(32000000/4000.0)));
 15084  004AAC  0E34               	movlw	52
 15085  004AAE  0100               	movlb	0	; () banked
 15086  004AB0  6F88               	movwf	??_initServos& (0+255),b
 15087  004AB2  0EF1               	movlw	241
 15088  004AB4                     u10407:
 15089  004AB4  2EE8               	decfsz	wreg,f,c
 15090  004AB6  D7FE               	bra	u10407
 15091  004AB8  2F88               	decfsz	??_initServos& (0+255),f,b
 15092  004ABA  D7FC               	bra	u10407
 15093  004ABC  D000               	nop2	
 15094                           
 15095                           ;sort.c: 440: TMR3ON = 1;
 15096  004ABE  80B1               	bsf	4017,0,c	;volatile
 15097                           
 15098                           ;sort.c: 441: was_low_3 = 0;
 15099  004AC0  0E00               	movlw	0
 15100  004AC2  6E7C               	movwf	_was_low_3+1,c	;volatile
 15101  004AC4  0E00               	movlw	0
 15102  004AC6  6E7B               	movwf	_was_low_3,c	;volatile
 15103                           
 15104                           ;sort.c: 444: LATBbits.LATB3 = 1;
 15105  004AC8  868A               	bsf	3978,3,c	;volatile
 15106                           
 15107                           ;sort.c: 445: TMR2ON = 1;
 15108  004ACA  84CA               	bsf	4042,2,c	;volatile
 15109                           
 15110                           ;sort.c: 446: was_low_2 = 0;
 15111  004ACC  0E00               	movlw	0
 15112  004ACE  6E7A               	movwf	_was_low_2+1,c	;volatile
 15113  004AD0  0E00               	movlw	0
 15114  004AD2  6E79               	movwf	_was_low_2,c	;volatile
 15115                           
 15116                           ;sort.c: 448: LATCbits.LATC0 = 1;
 15117  004AD4  808B               	bsf	3979,0,c	;volatile
 15118  004AD6  0012               	return		;funcret
 15119  004AD8                     __end_of_initServos:
 15120                           	opt stack 0
 15121                           tblptru	equ	0xFF8
 15122                           tblptrh	equ	0xFF7
 15123                           tblptrl	equ	0xFF6
 15124                           tablat	equ	0xFF5
 15125                           prodh	equ	0xFF4
 15126                           prodl	equ	0xFF3
 15127                           intcon	equ	0xFF2
 15128                           intcon2	equ	0xFF1
 15129                           intcon3	equ	0xFF0
 15130                           postinc0	equ	0xFEE
 15131                           wreg	equ	0xFE8
 15132                           postdec1	equ	0xFE5
 15133                           fsr1l	equ	0xFE1
 15134                           indf2	equ	0xFDF
 15135                           postinc2	equ	0xFDE
 15136                           postdec2	equ	0xFDD
 15137                           fsr2h	equ	0xFDA
 15138                           fsr2l	equ	0xFD9
 15139                           status	equ	0xFD8
 15140                           
 15141 ;; *************** function _updateServoPosition *****************
 15142 ;; Defined at:
 15143 ;;		line 516 in file "sort.c"
 15144 ;; Parameters:    Size  Location     Type
 15145 ;;  time_us         2    0[BANK0 ] int 
 15146 ;;  timer           2    2[BANK0 ] int 
 15147 ;; Auto vars:     Size  Location     Type
 15148 ;;  my_time         2    6[BANK0 ] unsigned int 
 15149 ;; Return value:  Size  Location     Type
 15150 ;;                  1    wreg      void 
 15151 ;; Registers used:
 15152 ;;		wreg, status,2, status,0
 15153 ;; Tracked objects:
 15154 ;;		On entry : 0/0
 15155 ;;		On exit  : 0/0
 15156 ;;		Unchanged: 0/0
 15157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15158 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15159 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15160 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15161 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15162 ;;Total ram usage:        8 bytes
 15163 ;; Hardware stack levels used:    1
 15164 ;; Hardware stack levels required when called:    7
 15165 ;; This function calls:
 15166 ;;		Nothing
 15167 ;; This function is called by:
 15168 ;;		_Distribution
 15169 ;;		_initServos
 15170 ;;		_actuatorTest
 15171 ;;		_BothServos
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175                           	psect	text49
 15176  004734                     __ptext49:
 15177                           	opt stack 0
 15178  004734                     _updateServoPosition:
 15179                           	opt stack 20
 15180                           
 15181                           ;sort.c: 517: unsigned int my_time = 65535 - time_us;
 15182                           
 15183                           ;incstack = 0
 15184  004734  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15185  004738  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15186  00473C  0100               	movlb	0	; () banked
 15187  00473E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15188  004740  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15189  004742  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15190  004744  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15191  004746  0EFF               	movlw	255
 15192  004748  0100               	movlb	0	; () banked
 15193  00474A  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15194  00474C  0100               	movlb	0	; () banked
 15195  00474E  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15196  004750  0EFF               	movlw	255
 15197  004752  0100               	movlb	0	; () banked
 15198  004754  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15199  004756  0100               	movlb	0	; () banked
 15200  004758  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15201                           
 15202                           ;sort.c: 518: switch(timer){
 15203  00475A  D01D               	goto	l6491
 15204  00475C                     l6485:
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;sort.c: 520: servoTimes[0] = my_time >> 8;
 15208  00475C  0100               	movlb	0	; () banked
 15209  00475E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15210  004760  0100               	movlb	0	; () banked
 15211  004762  6FDA               	movwf	_servoTimes& (0+255),b
 15212  004764  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15213                           
 15214                           ;sort.c: 521: servoTimes[1] = my_time & 0xFF;
 15215  004766  0100               	movlb	0	; () banked
 15216  004768  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15217  00476A  0100               	movlb	0	; () banked
 15218  00476C  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15219  00476E  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15220                           
 15221                           ; BSR set to: 0
 15222                           ;sort.c: 523: pan_servo_state = time_us;
 15223  004770  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15224  004774  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15225  004778                     l886:
 15226                           
 15227                           ; BSR set to: 0
 15228                           ;sort.c: 525: servoTimes[2] = my_time >> 8;
 15229  004778  0100               	movlb	0	; () banked
 15230  00477A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15231  00477C  0100               	movlb	0	; () banked
 15232  00477E  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15233  004780  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15234                           
 15235                           ;sort.c: 526: servoTimes[3] = my_time & 0xFF;
 15236  004782  0100               	movlb	0	; () banked
 15237  004784  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15238  004786  0100               	movlb	0	; () banked
 15239  004788  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15240  00478A  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15241                           
 15242                           ; BSR set to: 0
 15243                           ;sort.c: 528: tilt_servo_state = time_us;
 15244  00478C  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15245  004790  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15246                           
 15247                           ;sort.c: 529: }
 15248  004794  0012               	return	
 15249  004796                     l6491:
 15250                           
 15251                           ; BSR set to: 0
 15252  004796  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15253  00479A  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15254                           
 15255                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15256                           ; Switch size 1, requested type "space"
 15257                           ; Number of cases is 1, Range of values is 0 to 0
 15258                           ; switch strategies available:
 15259                           ; Name         Instructions Cycles
 15260                           ; simple_byte            4     3 (average)
 15261                           ;	Chosen strategy is simple_byte
 15262  00479E  0100               	movlb	0	; () banked
 15263  0047A0  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15264  0047A2  0A00               	xorlw	0	; case 0
 15265  0047A4  A4D8               	btfss	status,2,c
 15266  0047A6  0012               	return	
 15267                           
 15268                           ; BSR set to: 0
 15269                           ; Switch size 1, requested type "space"
 15270                           ; Number of cases is 2, Range of values is 1 to 3
 15271                           ; switch strategies available:
 15272                           ; Name         Instructions Cycles
 15273                           ; simple_byte            7     4 (average)
 15274                           ;	Chosen strategy is simple_byte
 15275  0047A8  0100               	movlb	0	; () banked
 15276  0047AA  5184               	movf	??_updateServoPosition& (0+255),w,b
 15277  0047AC  0A01               	xorlw	1	; case 1
 15278  0047AE  B4D8               	btfsc	status,2,c
 15279  0047B0  D7D5               	goto	l6485
 15280  0047B2  0A02               	xorlw	2	; case 3
 15281  0047B4  A4D8               	btfss	status,2,c
 15282  0047B6  0012               	return	
 15283  0047B8  D7DF               	goto	l886
 15284  0047BA                     __end_of_updateServoPosition:
 15285                           	opt stack 0
 15286                           tblptru	equ	0xFF8
 15287                           tblptrh	equ	0xFF7
 15288                           tblptrl	equ	0xFF6
 15289                           tablat	equ	0xFF5
 15290                           prodh	equ	0xFF4
 15291                           prodl	equ	0xFF3
 15292                           intcon	equ	0xFF2
 15293                           intcon2	equ	0xFF1
 15294                           intcon3	equ	0xFF0
 15295                           postinc0	equ	0xFEE
 15296                           wreg	equ	0xFE8
 15297                           postdec1	equ	0xFE5
 15298                           fsr1l	equ	0xFE1
 15299                           indf2	equ	0xFDF
 15300                           postinc2	equ	0xFDE
 15301                           postdec2	equ	0xFDD
 15302                           fsr2h	equ	0xFDA
 15303                           fsr2l	equ	0xFD9
 15304                           status	equ	0xFD8
 15305                           
 15306 ;; *************** function _BlockerTest *****************
 15307 ;; Defined at:
 15308 ;;		line 553 in file "Test.c"
 15309 ;; Parameters:    Size  Location     Type
 15310 ;;		None
 15311 ;; Auto vars:     Size  Location     Type
 15312 ;;  i               2   44[BANK0 ] int 
 15313 ;;  cond_flag       2   48[BANK0 ] int 
 15314 ;;  cam_flag        2   46[BANK0 ] int 
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      void 
 15317 ;; Registers used:
 15318 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15325 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15327 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15328 ;;Total ram usage:        7 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; Hardware stack levels required when called:   10
 15331 ;; This function calls:
 15332 ;;		_lcdInst
 15333 ;;		_printf
 15334 ;; This function is called by:
 15335 ;;		_Test
 15336 ;; This function uses a non-reentrant model
 15337 ;;
 15338                           
 15339                           	psect	text50
 15340  003946                     __ptext50:
 15341                           	opt stack 0
 15342  003946                     _BlockerTest:
 15343                           	opt stack 19
 15344                           
 15345                           ;Test.c: 554: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15346                           
 15347                           ; BSR set to: 0
 15348                           ;incstack = 0
 15349  003946  0E01               	movlw	1
 15350  003948  EC15  F02A         	call	_lcdInst
 15351  00394C  0E68               	movlw	104
 15352  00394E  0100               	movlb	0	; () banked
 15353  003950  6FAB               	movwf	??_BlockerTest& (0+255),b
 15354  003952  0EE4               	movlw	228
 15355  003954                     u10417:
 15356  003954  2EE8               	decfsz	wreg,f,c
 15357  003956  D7FE               	bra	u10417
 15358  003958  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15359  00395A  D7FC               	bra	u10417
 15360  00395C  F000               	nop	
 15361  00395E  0E80               	movlw	128
 15362  003960  EC15  F02A         	call	_lcdInst
 15363                           
 15364                           ;Test.c: 555: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15365  003964  0E5D               	movlw	low STR_122
 15366  003966  0100               	movlb	0	; () banked
 15367  003968  6F8E               	movwf	printf@f& (0+255),b
 15368  00396A  0EFB               	movlw	high STR_122
 15369  00396C  0100               	movlb	0	; () banked
 15370  00396E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15371  003970  A480               	btfss	3968,2,c	;volatile
 15372  003972  D004               	goto	u7240
 15373  003974  0100               	movlb	0	; () banked
 15374  003976  6BAB               	clrf	??_BlockerTest& (0+255),b
 15375  003978  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15376  00397A  D002               	goto	u7248
 15377  00397C                     u7240:
 15378  00397C  0100               	movlb	0	; () banked
 15379  00397E  6BAB               	clrf	??_BlockerTest& (0+255),b
 15380  003980                     u7248:
 15381  003980  0100               	movlb	0	; () banked
 15382  003982  51AB               	movf	??_BlockerTest& (0+255),w,b
 15383  003984  0100               	movlb	0	; () banked
 15384  003986  6F90               	movwf	(?_printf+2)& (0+255),b
 15385  003988  6B91               	clrf	(?_printf+3)& (0+255),b
 15386  00398A  EC1B  F00B         	call	_printf	;wreg free
 15387                           
 15388                           ;Test.c: 556: lcdInst(0b11000000);;
 15389  00398E  0EC0               	movlw	192
 15390  003990  EC15  F02A         	call	_lcdInst
 15391                           
 15392                           ;Test.c: 557: printf("OTHER: CAM TOGGLE");
 15393  003994  0E4B               	movlw	low STR_123
 15394  003996  0100               	movlb	0	; () banked
 15395  003998  6F8E               	movwf	printf@f& (0+255),b
 15396  00399A  0EFB               	movlw	high STR_123
 15397  00399C  0100               	movlb	0	; () banked
 15398  00399E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15399  0039A0  EC1B  F00B         	call	_printf	;wreg free
 15400                           
 15401                           ;Test.c: 558: int cam_flag = 1;
 15402  0039A4  0E00               	movlw	0
 15403  0039A6  0100               	movlb	0	; () banked
 15404  0039A8  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15405  0039AA  0E01               	movlw	1
 15406  0039AC  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15407                           
 15408                           ; BSR set to: 0
 15409                           ;Test.c: 559: int cond_flag = 0;
 15410  0039AE  0E00               	movlw	0
 15411  0039B0  0100               	movlb	0	; () banked
 15412  0039B2  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15413  0039B4  0E00               	movlw	0
 15414  0039B6  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15415                           
 15416                           ; BSR set to: 0
 15417                           ;Test.c: 561: while(PORTBbits.RB1 == 0){
 15418                           
 15419                           ;Test.c: 560: while(1){
 15420  0039B8  D018               	goto	l8453
 15421  0039BA                     l8449:
 15422                           
 15423                           ;Test.c: 562: lcdInst(0b10000000);;
 15424  0039BA  0E80               	movlw	128
 15425  0039BC  EC15  F02A         	call	_lcdInst
 15426                           
 15427                           ;Test.c: 563: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15428  0039C0  0E5D               	movlw	low STR_122
 15429  0039C2  0100               	movlb	0	; () banked
 15430  0039C4  6F8E               	movwf	printf@f& (0+255),b
 15431  0039C6  0EFB               	movlw	high STR_122
 15432  0039C8  0100               	movlb	0	; () banked
 15433  0039CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15434  0039CC  A480               	btfss	3968,2,c	;volatile
 15435  0039CE  D004               	goto	u7250
 15436  0039D0  0100               	movlb	0	; () banked
 15437  0039D2  6BAB               	clrf	??_BlockerTest& (0+255),b
 15438  0039D4  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15439  0039D6  D002               	goto	u7258
 15440  0039D8                     u7250:
 15441  0039D8  0100               	movlb	0	; () banked
 15442  0039DA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15443  0039DC                     u7258:
 15444  0039DC  0100               	movlb	0	; () banked
 15445  0039DE  51AB               	movf	??_BlockerTest& (0+255),w,b
 15446  0039E0  0100               	movlb	0	; () banked
 15447  0039E2  6F90               	movwf	(?_printf+2)& (0+255),b
 15448  0039E4  6B91               	clrf	(?_printf+3)& (0+255),b
 15449  0039E6  EC1B  F00B         	call	_printf	;wreg free
 15450  0039EA                     l8453:
 15451  0039EA  A281               	btfss	3969,1,c	;volatile
 15452  0039EC  D7E6               	goto	l8449
 15453                           
 15454                           ;Test.c: 564: }
 15455                           ;Test.c: 565: if(PORTB >> 4 == 0b1111){
 15456  0039EE  3881               	swapf	3969,w,c	;volatile
 15457  0039F0  0B0F               	andlw	15
 15458  0039F2  0A0F               	xorlw	15
 15459  0039F4  B4D8               	btfsc	status,2,c
 15460  0039F6  0012               	return	
 15461                           
 15462                           ;Test.c: 568: else if(PORTB >> 4 == 0b0001){
 15463                           
 15464                           ;Test.c: 567: }
 15465                           
 15466                           ;Test.c: 566: break;
 15467  0039F8  3881               	swapf	3969,w,c	;volatile
 15468  0039FA  0B0F               	andlw	15
 15469  0039FC  06E8               	decf	wreg,f,c
 15470  0039FE  A4D8               	btfss	status,2,c
 15471  003A00  D016               	goto	l8471
 15472                           
 15473                           ;Test.c: 569: if(cond_flag){
 15474  003A02  0100               	movlb	0	; () banked
 15475  003A04  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15476  003A06  0100               	movlb	0	; () banked
 15477  003A08  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15478  003A0A  B4D8               	btfsc	status,2,c
 15479  003A0C  D007               	goto	l1378
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;Test.c: 570: LATAbits.LATA3 = 1;
 15483  003A0E  8689               	bsf	3977,3,c	;volatile
 15484  003A10  D006               	goto	l8469
 15485  003A12                     u7301:
 15486  003A12  0E01               	movlw	1
 15487  003A14                     u7310:
 15488  003A14  0100               	movlb	0	; () banked
 15489  003A16  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15490  003A18  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15491                           
 15492                           ;Test.c: 572: }
 15493  003A1A  D054               	goto	l8495
 15494  003A1C                     l1378:
 15495                           
 15496                           ; BSR set to: 0
 15497                           ;Test.c: 573: else{
 15498                           ;Test.c: 574: LATAbits.LATA3 = 0;
 15499  003A1C  9689               	bcf	3977,3,c	;volatile
 15500  003A1E                     l8469:
 15501                           
 15502                           ; BSR set to: 0
 15503                           ;Test.c: 575: cond_flag = !cond_flag;
 15504  003A1E  0100               	movlb	0	; () banked
 15505  003A20  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15506  003A22  0100               	movlb	0	; () banked
 15507  003A24  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15508  003A26  B4D8               	btfsc	status,2,c
 15509  003A28  D7F4               	goto	u7301
 15510  003A2A  0E00               	movlw	0
 15511  003A2C  D7F3               	goto	u7310
 15512  003A2E                     l8471:
 15513                           
 15514                           ;Test.c: 578: else{
 15515                           ;Test.c: 579: if(cam_flag){
 15516  003A2E  0100               	movlb	0	; () banked
 15517  003A30  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15518  003A32  0100               	movlb	0	; () banked
 15519  003A34  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15520  003A36  B4D8               	btfsc	status,2,c
 15521  003A38  D007               	goto	l8477
 15522                           
 15523                           ; BSR set to: 0
 15524                           ;Test.c: 580: LATCbits.LATC0 = 1;
 15525  003A3A  808B               	bsf	3979,0,c	;volatile
 15526  003A3C  D023               	goto	l8489
 15527  003A3E                     u7351:
 15528  003A3E  0E01               	movlw	1
 15529  003A40                     u7360:
 15530  003A40  0100               	movlb	0	; () banked
 15531  003A42  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15532  003A44  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15533                           
 15534                           ;Test.c: 582: }
 15535  003A46  D03E               	goto	l8495
 15536  003A48                     l8477:
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;Test.c: 583: else{
 15540                           ;Test.c: 584: for(int i=0;i<5000;i++)
 15541  003A48  0E00               	movlw	0
 15542  003A4A  0100               	movlb	0	; () banked
 15543  003A4C  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15544  003A4E  0E00               	movlw	0
 15545  003A50  6FAC               	movwf	BlockerTest@i& (0+255),b
 15546  003A52                     l8479:
 15547                           
 15548                           ; BSR set to: 0
 15549  003A52  0100               	movlb	0	; () banked
 15550  003A54  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15551  003A56  D008               	goto	l1383
 15552  003A58  0E88               	movlw	136
 15553  003A5A  0100               	movlb	0	; () banked
 15554  003A5C  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15555  003A5E  0E13               	movlw	19
 15556  003A60  0100               	movlb	0	; () banked
 15557  003A62  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15558  003A64  B0D8               	btfsc	status,0,c
 15559  003A66  D00D               	goto	l1384
 15560  003A68                     l1383:
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;Test.c: 585: {
 15564                           ;Test.c: 586: LATCbits.LATC0 = 1;
 15565  003A68  808B               	bsf	3979,0,c	;volatile
 15566                           
 15567                           ; BSR set to: 0
 15568                           ;Test.c: 587: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15569  003A6A  0E1A               	movlw	26
 15570  003A6C                     u10427:
 15571  003A6C  2EE8               	decfsz	wreg,f,c
 15572  003A6E  D7FE               	bra	u10427
 15573  003A70  D000               	nop2	
 15574                           
 15575                           ;Test.c: 588: LATCbits.LATC0 = 0;
 15576  003A72  908B               	bcf	3979,0,c	;volatile
 15577                           
 15578                           ;Test.c: 589: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15579  003A74  0EF0               	movlw	240
 15580  003A76                     u10437:
 15581  003A76  2EE8               	decfsz	wreg,f,c
 15582  003A78  D7FE               	bra	u10437
 15583  003A7A  0100               	movlb	0	; () banked
 15584  003A7C  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15585  003A7E  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15586  003A80  D7E8               	goto	l8479
 15587  003A82                     l1384:
 15588                           
 15589                           ; BSR set to: 0
 15590                           ;Test.c: 590: }
 15591                           ;Test.c: 591: LATCbits.LATC0 = 0;
 15592  003A82  908B               	bcf	3979,0,c	;volatile
 15593  003A84                     l8489:
 15594                           
 15595                           ; BSR set to: 0
 15596                           ;Test.c: 592: cam_flag = !cam_flag;
 15597  003A84  0100               	movlb	0	; () banked
 15598  003A86  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15599  003A88  0100               	movlb	0	; () banked
 15600  003A8A  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15601  003A8C  B4D8               	btfsc	status,2,c
 15602  003A8E  D7D7               	goto	u7351
 15603  003A90  0E00               	movlw	0
 15604  003A92  D7D6               	goto	u7360
 15605  003A94                     l8491:
 15606                           
 15607                           ;Test.c: 597: lcdInst(0b10000000);;
 15608  003A94  0E80               	movlw	128
 15609  003A96  EC15  F02A         	call	_lcdInst
 15610                           
 15611                           ;Test.c: 598: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15612  003A9A  0E5D               	movlw	low STR_122
 15613  003A9C  0100               	movlb	0	; () banked
 15614  003A9E  6F8E               	movwf	printf@f& (0+255),b
 15615  003AA0  0EFB               	movlw	high STR_122
 15616  003AA2  0100               	movlb	0	; () banked
 15617  003AA4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15618  003AA6  A480               	btfss	3968,2,c	;volatile
 15619  003AA8  D004               	goto	u7410
 15620  003AAA  0100               	movlb	0	; () banked
 15621  003AAC  6BAB               	clrf	??_BlockerTest& (0+255),b
 15622  003AAE  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15623  003AB0  D002               	goto	u7418
 15624  003AB2                     u7410:
 15625  003AB2  0100               	movlb	0	; () banked
 15626  003AB4  6BAB               	clrf	??_BlockerTest& (0+255),b
 15627  003AB6                     u7418:
 15628  003AB6  0100               	movlb	0	; () banked
 15629  003AB8  51AB               	movf	??_BlockerTest& (0+255),w,b
 15630  003ABA  0100               	movlb	0	; () banked
 15631  003ABC  6F90               	movwf	(?_printf+2)& (0+255),b
 15632  003ABE  6B91               	clrf	(?_printf+3)& (0+255),b
 15633  003AC0  EC1B  F00B         	call	_printf	;wreg free
 15634  003AC4                     l8495:
 15635  003AC4  A281               	btfss	3969,1,c	;volatile
 15636  003AC6  D791               	goto	l8453
 15637  003AC8  D7E5               	goto	l8491
 15638  003ACA                     __end_of_BlockerTest:
 15639                           	opt stack 0
 15640                           tblptru	equ	0xFF8
 15641                           tblptrh	equ	0xFF7
 15642                           tblptrl	equ	0xFF6
 15643                           tablat	equ	0xFF5
 15644                           prodh	equ	0xFF4
 15645                           prodl	equ	0xFF3
 15646                           intcon	equ	0xFF2
 15647                           intcon2	equ	0xFF1
 15648                           intcon3	equ	0xFF0
 15649                           postinc0	equ	0xFEE
 15650                           wreg	equ	0xFE8
 15651                           postdec1	equ	0xFE5
 15652                           fsr1l	equ	0xFE1
 15653                           indf2	equ	0xFDF
 15654                           postinc2	equ	0xFDE
 15655                           postdec2	equ	0xFDD
 15656                           fsr2h	equ	0xFDA
 15657                           fsr2l	equ	0xFD9
 15658                           status	equ	0xFD8
 15659                           
 15660 ;; *************** function _printf *****************
 15661 ;; Defined at:
 15662 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15663 ;; Parameters:    Size  Location     Type
 15664 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15665 ;;		 -> STR_127(17), STR_126(17), STR_125(18), STR_124(18), 
 15666 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 15667 ;;		 -> STR_119(17), STR_118(17), STR_117(3), STR_116(15), 
 15668 ;;		 -> STR_115(3), STR_114(15), STR_113(11), STR_112(17), 
 15669 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 15670 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 15671 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 15672 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 15673 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 15674 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 15675 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 15676 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 15677 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 15678 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 15679 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 15680 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 15681 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 15682 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 15683 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 15684 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 15685 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 15686 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 15687 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 15688 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 15689 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 15690 ;;		 -> STR_2(14), STR_1(18), 
 15691 ;; Auto vars:     Size  Location     Type
 15692 ;;  tmpval          4    0        struct .
 15693 ;;  width           2   41[BANK0 ] int 
 15694 ;;  val             2   37[BANK0 ] unsigned int 
 15695 ;;  len             2   35[BANK0 ] unsigned int 
 15696 ;;  ap              2   33[BANK0 ] PTR void [1]
 15697 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15698 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15699 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 15700 ;;  c               1   40[BANK0 ] char 
 15701 ;;  flag            1   39[BANK0 ] unsigned char 
 15702 ;;  prec            1   30[BANK0 ] char 
 15703 ;; Return value:  Size  Location     Type
 15704 ;;                  2   14[BANK0 ] int 
 15705 ;; Registers used:
 15706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15707 ;; Tracked objects:
 15708 ;;		On entry : 0/0
 15709 ;;		On exit  : 0/0
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15712 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15713 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15714 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15715 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15716 ;;Total ram usage:       29 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; Hardware stack levels required when called:    9
 15719 ;; This function calls:
 15720 ;;		___lwdiv
 15721 ;;		___lwmod
 15722 ;;		___wmul
 15723 ;;		_isdigit
 15724 ;;		_putch
 15725 ;; This function is called by:
 15726 ;;		_UI
 15727 ;;		_change_state_to_menu_start
 15728 ;;		_change_state_to_menu_12
 15729 ;;		_change_state_to_menu_22
 15730 ;;		_printRTC
 15731 ;;		_EEPROM_write
 15732 ;;		_Test
 15733 ;;		_algorithmTest
 15734 ;;		_sensorTest
 15735 ;;		_actuatorTest
 15736 ;;		_BothServos
 15737 ;;		_PortTestDC
 15738 ;;		_PusherTest
 15739 ;;		_SpeedTest
 15740 ;;		_BlockerTest
 15741 ;;		_arm
 15742 ;;		_ToggleTestA5
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           	psect	text51
 15747  001636                     __ptext51:
 15748                           	opt stack 0
 15749  001636                     _printf:
 15750                           	opt stack 18
 15751                           
 15752                           ;doprnt.c: 466: va_list ap;
 15753                           ;doprnt.c: 499: signed char c;
 15754                           ;doprnt.c: 501: int width;
 15755                           ;doprnt.c: 506: signed char prec;
 15756                           ;doprnt.c: 508: unsigned char flag;
 15757                           ;doprnt.c: 523: union {
 15758                           ;doprnt.c: 524: unsigned long vd;
 15759                           ;doprnt.c: 525: double integ;
 15760                           ;doprnt.c: 526: } tmpval;
 15761                           ;doprnt.c: 528: unsigned int val;
 15762                           ;doprnt.c: 529: unsigned len;
 15763                           ;doprnt.c: 530: const char * cp;
 15764                           ;doprnt.c: 533: *ap = __va_start();
 15765                           
 15766                           ;incstack = 0
 15767  001636  0E90               	movlw	low (?_printf+2)
 15768  001638  0100               	movlb	0	; () banked
 15769  00163A  6FA1               	movwf	printf@ap& (0+255),b
 15770  00163C  0E00               	movlw	high (?_printf+2)
 15771  00163E  0100               	movlb	0	; () banked
 15772  001640  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15773                           
 15774                           ;doprnt.c: 536: while(c = *f++) {
 15775  001642  D205               	goto	l6445
 15776  001644                     l6315:
 15777                           
 15778                           ; BSR set to: 0
 15779                           ;doprnt.c: 538: if(c != '%')
 15780  001644  0E25               	movlw	37
 15781  001646  0100               	movlb	0	; () banked
 15782  001648  19A8               	xorwf	printf@c& (0+255),w,b
 15783  00164A  B4D8               	btfsc	status,2,c
 15784  00164C  D005               	goto	l6319
 15785                           
 15786                           ; BSR set to: 0
 15787                           ;doprnt.c: 540: {
 15788                           ;doprnt.c: 541: (putch(c) );
 15789  00164E  0100               	movlb	0	; () banked
 15790  001650  51A8               	movf	printf@c& (0+255),w,b
 15791  001652  EC0D  F02A         	call	_putch
 15792                           
 15793                           ;doprnt.c: 542: continue;
 15794  001656  D1FB               	goto	l6445
 15795  001658                     l6319:
 15796                           
 15797                           ;doprnt.c: 543: }
 15798                           ;doprnt.c: 546: width = 0;
 15799  001658  0E00               	movlw	0
 15800  00165A  0100               	movlb	0	; () banked
 15801  00165C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15802  00165E  0E00               	movlw	0
 15803  001660  6FA9               	movwf	printf@width& (0+255),b
 15804                           
 15805                           ;doprnt.c: 548: flag = 0;
 15806  001662  0E00               	movlw	0
 15807  001664  0100               	movlb	0	; () banked
 15808  001666  6FA7               	movwf	printf@flag& (0+255),b
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;doprnt.c: 551: switch(*f) {
 15812                           
 15813                           ;doprnt.c: 550: for(;;) {
 15814  001668  D005               	goto	l6325
 15815  00166A                     l6321:
 15816                           
 15817                           ;doprnt.c: 580: flag |= 0x04;
 15818  00166A  0100               	movlb	0	; () banked
 15819  00166C  85A7               	bsf	printf@flag& (0+255),2,b
 15820                           
 15821                           ;doprnt.c: 581: f++;
 15822  00166E  0100               	movlb	0	; () banked
 15823  001670  4B8E               	infsnz	printf@f& (0+255),f,b
 15824  001672  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15825  001674                     l6325:
 15826  001674  C08E  FFF6         	movff	printf@f,tblptrl
 15827  001678  C08F  FFF7         	movff	printf@f+1,tblptrh
 15828  00167C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15829  00167C  6AF8               	clrf	tblptru,c
 15830  00167E                     	endif
 15831  00167E                     	if	0	;tblptru may be non-zero
 15832  00167E                     	endif
 15833  00167E  0008               	tblrd		*
 15834  001680  50F5               	movf	tablat,w,c
 15835                           
 15836                           ; Switch size 1, requested type "space"
 15837                           ; Number of cases is 1, Range of values is 48 to 48
 15838                           ; switch strategies available:
 15839                           ; Name         Instructions Cycles
 15840                           ; simple_byte            4     3 (average)
 15841                           ;	Chosen strategy is simple_byte
 15842  001682  0A30               	xorlw	48	; case 48
 15843  001684  B4D8               	btfsc	status,2,c
 15844  001686  D7F1               	goto	l6321
 15845                           
 15846                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15847                           
 15848                           ;doprnt.c: 586: }
 15849                           
 15850                           ;doprnt.c: 585: break;
 15851  001688  C08E  FFF6         	movff	printf@f,tblptrl
 15852  00168C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15853  001690                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15854  001690  6AF8               	clrf	tblptru,c
 15855  001692                     	endif
 15856  001692                     	if	0	;tblptru may be non-zero
 15857  001692                     	endif
 15858  001692  0008               	tblrd		*
 15859  001694  50F5               	movf	tablat,w,c
 15860  001696  EC22  F029         	call	_isdigit
 15861  00169A  A0D8               	btfss	status,0,c
 15862  00169C  D0D2               	goto	l6373
 15863                           
 15864                           ;doprnt.c: 598: width = 0;
 15865  00169E  0E00               	movlw	0
 15866  0016A0  0100               	movlb	0	; () banked
 15867  0016A2  6FAA               	movwf	(printf@width+1)& (0+255),b
 15868  0016A4  0E00               	movlw	0
 15869  0016A6  6FA9               	movwf	printf@width& (0+255),b
 15870  0016A8                     l6331:
 15871                           
 15872                           ;doprnt.c: 600: width *= 10;
 15873  0016A8  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15874  0016AC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15875  0016B0  0E00               	movlw	0
 15876  0016B2  0100               	movlb	0	; () banked
 15877  0016B4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15878  0016B6  0E0A               	movlw	10
 15879  0016B8  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15880  0016BA  EC8B  F027         	call	___wmul	;wreg free
 15881  0016BE  C080  F0A9         	movff	?___wmul,printf@width
 15882  0016C2  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15883                           
 15884                           ;doprnt.c: 601: width += *f++ - '0';
 15885  0016C6  0ED0               	movlw	208
 15886  0016C8  0100               	movlb	0	; () banked
 15887  0016CA  6F9A               	movwf	??_printf& (0+255),b
 15888  0016CC  0EFF               	movlw	255
 15889  0016CE  0100               	movlb	0	; () banked
 15890  0016D0  6F9B               	movwf	(??_printf+1)& (0+255),b
 15891  0016D2  C08E  FFF6         	movff	printf@f,tblptrl
 15892  0016D6  C08F  FFF7         	movff	printf@f+1,tblptrh
 15893  0016DA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15894  0016DA  6AF8               	clrf	tblptru,c
 15895  0016DC                     	endif
 15896  0016DC                     	if	0	;tblptru may be non-zero
 15897  0016DC                     	endif
 15898  0016DC  0008               	tblrd		*
 15899  0016DE  50F5               	movf	tablat,w,c
 15900  0016E0  0100               	movlb	0	; () banked
 15901  0016E2  6F9C               	movwf	(??_printf+2)& (0+255),b
 15902  0016E4  6B9D               	clrf	(??_printf+3)& (0+255),b
 15903  0016E6  0100               	movlb	0	; () banked
 15904  0016E8  519A               	movf	??_printf& (0+255),w,b
 15905  0016EA  0100               	movlb	0	; () banked
 15906  0016EC  279C               	addwf	(??_printf+2)& (0+255),f,b
 15907  0016EE  0100               	movlb	0	; () banked
 15908  0016F0  519B               	movf	(??_printf+1)& (0+255),w,b
 15909  0016F2  0100               	movlb	0	; () banked
 15910  0016F4  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15911  0016F6  0100               	movlb	0	; () banked
 15912  0016F8  519C               	movf	(??_printf+2)& (0+255),w,b
 15913  0016FA  0100               	movlb	0	; () banked
 15914  0016FC  27A9               	addwf	printf@width& (0+255),f,b
 15915  0016FE  0100               	movlb	0	; () banked
 15916  001700  519D               	movf	(??_printf+3)& (0+255),w,b
 15917  001702  0100               	movlb	0	; () banked
 15918  001704  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15919                           
 15920                           ; BSR set to: 0
 15921  001706  0100               	movlb	0	; () banked
 15922  001708  4B8E               	infsnz	printf@f& (0+255),f,b
 15923  00170A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15924                           
 15925                           ; BSR set to: 0
 15926                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15927  00170C  C08E  FFF6         	movff	printf@f,tblptrl
 15928  001710  C08F  FFF7         	movff	printf@f+1,tblptrh
 15929  001714                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15930  001714  6AF8               	clrf	tblptru,c
 15931  001716                     	endif
 15932  001716                     	if	0	;tblptru may be non-zero
 15933  001716                     	endif
 15934  001716  0008               	tblrd		*
 15935  001718  50F5               	movf	tablat,w,c
 15936  00171A  EC22  F029         	call	_isdigit
 15937  00171E  A0D8               	btfss	status,0,c
 15938  001720  D090               	goto	l6373
 15939  001722  D7C2               	goto	l6331
 15940  001724                     l6339:
 15941                           
 15942                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15943  001724  C0A1  FFD9         	movff	printf@ap,fsr2l
 15944  001728  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15945  00172C  CFDE F09F          	movff	postinc2,printf@cp
 15946  001730  CFDD F0A0          	movff	postdec2,printf@cp+1
 15947  001734  0E02               	movlw	2
 15948  001736  0100               	movlb	0	; () banked
 15949  001738  27A1               	addwf	printf@ap& (0+255),f,b
 15950  00173A  0E00               	movlw	0
 15951  00173C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15952                           
 15953                           ; BSR set to: 0
 15954                           ;doprnt.c: 740: if(!cp)
 15955  00173E  0100               	movlb	0	; () banked
 15956  001740  519F               	movf	printf@cp& (0+255),w,b
 15957  001742  0100               	movlb	0	; () banked
 15958  001744  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15959  001746  A4D8               	btfss	status,2,c
 15960  001748  D006               	goto	l6347
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;doprnt.c: 741: cp = "(null)";
 15964  00174A  0EB6               	movlw	low STR_128
 15965  00174C  0100               	movlb	0	; () banked
 15966  00174E  6F9F               	movwf	printf@cp& (0+255),b
 15967  001750  0EFF               	movlw	high STR_128
 15968  001752  0100               	movlb	0	; () banked
 15969  001754  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15970  001756                     l6347:
 15971                           
 15972                           ; BSR set to: 0
 15973                           ;doprnt.c: 745: len = 0;
 15974  001756  0E00               	movlw	0
 15975  001758  0100               	movlb	0	; () banked
 15976  00175A  6FA4               	movwf	(printf@len+1)& (0+255),b
 15977  00175C  0E00               	movlw	0
 15978  00175E  6FA3               	movwf	printf@len& (0+255),b
 15979                           
 15980                           ;doprnt.c: 746: while(cp[len])
 15981  001760  D003               	goto	l6351
 15982  001762                     l6349:
 15983                           
 15984                           ;doprnt.c: 747: len++;
 15985  001762  0100               	movlb	0	; () banked
 15986  001764  4BA3               	infsnz	printf@len& (0+255),f,b
 15987  001766  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15988  001768                     l6351:
 15989                           
 15990                           ; BSR set to: 0
 15991  001768  0100               	movlb	0	; () banked
 15992  00176A  51A3               	movf	printf@len& (0+255),w,b
 15993  00176C  0100               	movlb	0	; () banked
 15994  00176E  259F               	addwf	printf@cp& (0+255),w,b
 15995  001770  0100               	movlb	0	; () banked
 15996  001772  6F9A               	movwf	??_printf& (0+255),b
 15997  001774  0100               	movlb	0	; () banked
 15998  001776  51A4               	movf	(printf@len+1)& (0+255),w,b
 15999  001778  0100               	movlb	0	; () banked
 16000  00177A  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 16001  00177C  0100               	movlb	0	; () banked
 16002  00177E  6F9B               	movwf	(??_printf+1)& (0+255),b
 16003  001780  C09A  FFF6         	movff	??_printf,tblptrl
 16004  001784  C09B  FFF7         	movff	??_printf+1,tblptrh
 16005  001788  0E00               	movlw	low (__mediumconst shr (0+16))
 16006  00178A  6EF8               	movwf	tblptru,c
 16007  00178C  0E0F               	movlw	(high __ramtop+-1)
 16008  00178E  64F7               	cpfsgt	tblptrh,c
 16009  001790  D003               	bra	u4777
 16010  001792  0008               	tblrd		*
 16011  001794  50F5               	movf	tablat,w,c
 16012  001796  D005               	bra	u4770
 16013  001798                     u4777:
 16014  001798  CFF6 FFE9          	movff	tblptrl,fsr0l
 16015  00179C  CFF7 FFEA          	movff	tblptrh,fsr0h
 16016  0017A0  50EF               	movf	indf0,w,c
 16017  0017A2                     u4770:
 16018  0017A2  0900               	iorlw	0
 16019  0017A4  A4D8               	btfss	status,2,c
 16020  0017A6  D7DD               	goto	l6349
 16021                           
 16022                           ;doprnt.c: 757: if(width > len)
 16023  0017A8  0100               	movlb	0	; () banked
 16024  0017AA  51A9               	movf	printf@width& (0+255),w,b
 16025  0017AC  0100               	movlb	0	; () banked
 16026  0017AE  5DA3               	subwf	printf@len& (0+255),w,b
 16027  0017B0  0100               	movlb	0	; () banked
 16028  0017B2  51AA               	movf	(printf@width+1)& (0+255),w,b
 16029  0017B4  0100               	movlb	0	; () banked
 16030  0017B6  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 16031  0017B8  B0D8               	btfsc	status,0,c
 16032  0017BA  D009               	goto	l6357
 16033                           
 16034                           ; BSR set to: 0
 16035                           ;doprnt.c: 758: width -= len;
 16036  0017BC  0100               	movlb	0	; () banked
 16037  0017BE  51A3               	movf	printf@len& (0+255),w,b
 16038  0017C0  0100               	movlb	0	; () banked
 16039  0017C2  5FA9               	subwf	printf@width& (0+255),f,b
 16040  0017C4  0100               	movlb	0	; () banked
 16041  0017C6  51A4               	movf	(printf@len+1)& (0+255),w,b
 16042  0017C8  0100               	movlb	0	; () banked
 16043  0017CA  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16044  0017CC  D009               	goto	l6361
 16045  0017CE                     l6357:
 16046                           
 16047                           ; BSR set to: 0
 16048                           ;doprnt.c: 759: else
 16049                           ;doprnt.c: 760: width = 0;
 16050  0017CE  0E00               	movlw	0
 16051  0017D0  0100               	movlb	0	; () banked
 16052  0017D2  6FAA               	movwf	(printf@width+1)& (0+255),b
 16053  0017D4  0E00               	movlw	0
 16054  0017D6  6FA9               	movwf	printf@width& (0+255),b
 16055                           
 16056                           ; BSR set to: 0
 16057                           ;doprnt.c: 764: while(width--)
 16058  0017D8  D003               	goto	l6361
 16059  0017DA                     l6359:
 16060                           
 16061                           ; BSR set to: 0
 16062                           ;doprnt.c: 765: (putch(' ') );
 16063  0017DA  0E20               	movlw	32
 16064  0017DC  EC0D  F02A         	call	_putch
 16065  0017E0                     l6361:
 16066  0017E0  0100               	movlb	0	; () banked
 16067  0017E2  07A9               	decf	printf@width& (0+255),f,b
 16068  0017E4  A0D8               	btfss	status,0,c
 16069  0017E6  07AA               	decf	(printf@width+1)& (0+255),f,b
 16070  0017E8  0100               	movlb	0	; () banked
 16071  0017EA  29A9               	incf	printf@width& (0+255),w,b
 16072  0017EC  E1F6               	bnz	l6359
 16073  0017EE  0100               	movlb	0	; () banked
 16074  0017F0  29AA               	incf	(printf@width+1)& (0+255),w,b
 16075  0017F2  B4D8               	btfsc	status,2,c
 16076  0017F4  D017               	goto	l6367
 16077  0017F6  D7F1               	goto	l6359
 16078  0017F8                     l6363:
 16079                           
 16080                           ; BSR set to: 0
 16081                           ;doprnt.c: 768: (putch(*cp++) );
 16082  0017F8  C09F  FFF6         	movff	printf@cp,tblptrl
 16083  0017FC  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16084  001800  0E00               	movlw	low (__mediumconst shr (0+16))
 16085  001802  6EF8               	movwf	tblptru,c
 16086  001804  0E0F               	movlw	(high __ramtop+-1)
 16087  001806  64F7               	cpfsgt	tblptrh,c
 16088  001808  D003               	bra	u4817
 16089  00180A  0008               	tblrd		*
 16090  00180C  50F5               	movf	tablat,w,c
 16091  00180E  D005               	bra	u4810
 16092  001810                     u4817:
 16093  001810  CFF6 FFE9          	movff	tblptrl,fsr0l
 16094  001814  CFF7 FFEA          	movff	tblptrh,fsr0h
 16095  001818  50EF               	movf	indf0,w,c
 16096  00181A                     u4810:
 16097  00181A  EC0D  F02A         	call	_putch
 16098  00181E  0100               	movlb	0	; () banked
 16099  001820  4B9F               	infsnz	printf@cp& (0+255),f,b
 16100  001822  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16101  001824                     l6367:
 16102                           
 16103                           ; BSR set to: 0
 16104  001824  0100               	movlb	0	; () banked
 16105  001826  07A3               	decf	printf@len& (0+255),f,b
 16106  001828  A0D8               	btfss	status,0,c
 16107  00182A  07A4               	decf	(printf@len+1)& (0+255),f,b
 16108  00182C  0100               	movlb	0	; () banked
 16109  00182E  29A3               	incf	printf@len& (0+255),w,b
 16110  001830  E1E3               	bnz	l6363
 16111  001832  0100               	movlb	0	; () banked
 16112  001834  29A4               	incf	(printf@len+1)& (0+255),w,b
 16113  001836  B4D8               	btfsc	status,2,c
 16114  001838  D10A               	goto	l6445
 16115  00183A  D7DE               	goto	l6363
 16116  00183C                     l6369:
 16117                           
 16118                           ; BSR set to: 0
 16119                           ;doprnt.c: 818: flag |= 0x40;
 16120  00183C  0100               	movlb	0	; () banked
 16121  00183E  8DA7               	bsf	printf@flag& (0+255),6,b
 16122                           
 16123                           ; BSR set to: 0
 16124                           ;doprnt.c: 822: }
 16125                           
 16126                           ;doprnt.c: 819: break;
 16127  001840  D01D               	goto	l1441
 16128  001842                     l6373:
 16129  001842  C08E  FFF6         	movff	printf@f,tblptrl
 16130  001846  C08F  FFF7         	movff	printf@f+1,tblptrh
 16131  00184A  0100               	movlb	0	; () banked
 16132  00184C  4B8E               	infsnz	printf@f& (0+255),f,b
 16133  00184E  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16134  001850                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16135  001850  6AF8               	clrf	tblptru,c
 16136  001852                     	endif
 16137  001852                     	if	0	;tblptru may be non-zero
 16138  001852                     	endif
 16139  001852  0008               	tblrd		*
 16140  001854  CFF5 F0A8          	movff	tablat,printf@c
 16141  001858  0100               	movlb	0	; () banked
 16142  00185A  51A8               	movf	printf@c& (0+255),w,b
 16143                           
 16144                           ; Switch size 1, requested type "space"
 16145                           ; Number of cases is 5, Range of values is 0 to 117
 16146                           ; switch strategies available:
 16147                           ; Name         Instructions Cycles
 16148                           ; simple_byte           16     9 (average)
 16149                           ;	Chosen strategy is simple_byte
 16150  00185C  0A00               	xorlw	0	; case 0
 16151  00185E  B4D8               	btfsc	status,2,c
 16152  001860  0012               	return	
 16153  001862  0A64               	xorlw	100	; case 100
 16154  001864  B4D8               	btfsc	status,2,c
 16155  001866  D00A               	goto	l1441
 16156  001868  0A0D               	xorlw	13	; case 105
 16157  00186A  B4D8               	btfsc	status,2,c
 16158  00186C  D007               	goto	l1441
 16159  00186E  0A1A               	xorlw	26	; case 115
 16160  001870  B4D8               	btfsc	status,2,c
 16161  001872  D758               	goto	l6339
 16162  001874  0A06               	xorlw	6	; case 117
 16163  001876  B4D8               	btfsc	status,2,c
 16164  001878  D7E1               	goto	l6369
 16165  00187A  D0E9               	goto	l6445
 16166  00187C                     l1441:
 16167                           
 16168                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16169  00187C  0100               	movlb	0	; () banked
 16170  00187E  BDA7               	btfsc	printf@flag& (0+255),6,b
 16171  001880  D019               	goto	l6385
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;doprnt.c: 1253: {
 16175                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16176  001882  C0A1  FFD9         	movff	printf@ap,fsr2l
 16177  001886  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16178  00188A  CFDE F0A5          	movff	postinc2,printf@val
 16179  00188E  CFDD F0A6          	movff	postdec2,printf@val+1
 16180                           
 16181                           ; BSR set to: 0
 16182  001892  0E02               	movlw	2
 16183  001894  0100               	movlb	0	; () banked
 16184  001896  27A1               	addwf	printf@ap& (0+255),f,b
 16185  001898  0E00               	movlw	0
 16186  00189A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16187                           
 16188                           ; BSR set to: 0
 16189                           ;doprnt.c: 1261: if((int)val < 0) {
 16190  00189C  0100               	movlb	0	; () banked
 16191  00189E  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16192  0018A0  D016               	goto	l6389
 16193                           
 16194                           ; BSR set to: 0
 16195                           ;doprnt.c: 1262: flag |= 0x03;
 16196  0018A2  0E03               	movlw	3
 16197  0018A4  0100               	movlb	0	; () banked
 16198  0018A6  13A7               	iorwf	printf@flag& (0+255),f,b
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;doprnt.c: 1263: val = -val;
 16202  0018A8  0100               	movlb	0	; () banked
 16203  0018AA  6DA5               	negf	printf@val& (0+255),b
 16204  0018AC  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16205  0018AE  B0D8               	btfsc	status,0,c
 16206  0018B0  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16207                           
 16208                           ; BSR set to: 0
 16209                           ;doprnt.c: 1264: }
 16210                           ;doprnt.c: 1266: }
 16211  0018B2  D00D               	goto	l6389
 16212  0018B4                     l6385:
 16213                           
 16214                           ; BSR set to: 0
 16215                           ;doprnt.c: 1268: else
 16216                           ;doprnt.c: 1273: {
 16217                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16218  0018B4  C0A1  FFD9         	movff	printf@ap,fsr2l
 16219  0018B8  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16220  0018BC  CFDE F0A5          	movff	postinc2,printf@val
 16221  0018C0  CFDD F0A6          	movff	postdec2,printf@val+1
 16222                           
 16223                           ; BSR set to: 0
 16224  0018C4  0E02               	movlw	2
 16225  0018C6  0100               	movlb	0	; () banked
 16226  0018C8  27A1               	addwf	printf@ap& (0+255),f,b
 16227  0018CA  0E00               	movlw	0
 16228  0018CC  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16229  0018CE                     l6389:
 16230                           
 16231                           ; BSR set to: 0
 16232                           ;doprnt.c: 1287: }
 16233                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16234  0018CE  0E01               	movlw	1
 16235  0018D0  0100               	movlb	0	; () banked
 16236  0018D2  6FA8               	movwf	printf@c& (0+255),b
 16237  0018D4                     l6391:
 16238                           
 16239                           ; BSR set to: 0
 16240  0018D4  0E05               	movlw	5
 16241  0018D6  0100               	movlb	0	; () banked
 16242  0018D8  19A8               	xorwf	printf@c& (0+255),w,b
 16243  0018DA  B4D8               	btfsc	status,2,c
 16244  0018DC  D019               	goto	l6403
 16245                           
 16246                           ; BSR set to: 0
 16247                           ;doprnt.c: 1306: if(val < dpowers[c])
 16248                           
 16249                           ; BSR set to: 0
 16250                           
 16251                           ; BSR set to: 0
 16252  0018DE  0100               	movlb	0	; () banked
 16253  0018E0  51A8               	movf	printf@c& (0+255),w,b
 16254  0018E2  0D02               	mullw	2
 16255  0018E4  0EDE               	movlw	low _dpowers
 16256  0018E6  24F3               	addwf	prodl,w,c
 16257  0018E8  6EF6               	movwf	tblptrl,c
 16258  0018EA  0EFA               	movlw	high _dpowers
 16259  0018EC  20F4               	addwfc	prodh,w,c
 16260  0018EE  6EF7               	movwf	tblptrh,c
 16261  0018F0                     	if	1	;There are 3 active tblptr bytes
 16262  0018F0  6AF8               	clrf	tblptru,c
 16263  0018F2  0E00               	movlw	low (__mediumconst shr (0+16))
 16264  0018F4  22F8               	addwfc	tblptru,f,c
 16265  0018F6                     	endif
 16266  0018F6  0009               	tblrd		*+
 16267  0018F8  50F5               	movf	tablat,w,c
 16268  0018FA  0100               	movlb	0	; () banked
 16269  0018FC  5DA5               	subwf	printf@val& (0+255),w,b
 16270  0018FE  0009               	tblrd		*+
 16271  001900  50F5               	movf	tablat,w,c
 16272  001902  0100               	movlb	0	; () banked
 16273  001904  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16274  001906  A0D8               	btfss	status,0,c
 16275  001908  D003               	goto	l6403
 16276                           
 16277                           ; BSR set to: 0
 16278                           
 16279                           ; BSR set to: 0
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;doprnt.c: 1307: break;
 16283  00190A  0100               	movlb	0	; () banked
 16284  00190C  2BA8               	incf	printf@c& (0+255),f,b
 16285  00190E  D7E2               	goto	l6391
 16286  001910                     l6403:
 16287                           
 16288                           ; BSR set to: 0
 16289                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16290  001910  0100               	movlb	0	; () banked
 16291  001912  51A9               	movf	printf@width& (0+255),w,b
 16292  001914  0100               	movlb	0	; () banked
 16293  001916  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16294  001918  B4D8               	btfsc	status,2,c
 16295  00191A  D00B               	goto	l6409
 16296                           
 16297                           ; BSR set to: 0
 16298  00191C  C0A7  F09A         	movff	printf@flag,??_printf
 16299  001920  0E03               	movlw	3
 16300  001922  0100               	movlb	0	; () banked
 16301  001924  179A               	andwf	??_printf& (0+255),f,b
 16302  001926  B4D8               	btfsc	status,2,c
 16303  001928  D004               	goto	l6409
 16304                           
 16305                           ; BSR set to: 0
 16306                           ;doprnt.c: 1346: width--;
 16307  00192A  0100               	movlb	0	; () banked
 16308  00192C  07A9               	decf	printf@width& (0+255),f,b
 16309  00192E  A0D8               	btfss	status,0,c
 16310  001930  07AA               	decf	(printf@width+1)& (0+255),f,b
 16311  001932                     l6409:
 16312                           
 16313                           ; BSR set to: 0
 16314                           ;doprnt.c: 1381: if(width > c)
 16315  001932  0E80               	movlw	128
 16316  001934  0100               	movlb	0	; () banked
 16317  001936  BFA8               	btfsc	printf@c& (0+255),7,b
 16318  001938  0E7F               	movlw	127
 16319  00193A  0100               	movlb	0	; () banked
 16320  00193C  6F9A               	movwf	??_printf& (0+255),b
 16321  00193E  0100               	movlb	0	; () banked
 16322  001940  51A9               	movf	printf@width& (0+255),w,b
 16323  001942  0100               	movlb	0	; () banked
 16324  001944  5DA8               	subwf	printf@c& (0+255),w,b
 16325  001946  0100               	movlb	0	; () banked
 16326  001948  51AA               	movf	(printf@width+1)& (0+255),w,b
 16327  00194A  0A80               	xorlw	128
 16328  00194C  0100               	movlb	0	; () banked
 16329  00194E  599A               	subwfb	??_printf& (0+255),w,b
 16330  001950  B0D8               	btfsc	status,0,c
 16331  001952  D00B               	goto	l6413
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;doprnt.c: 1382: width -= c;
 16335  001954  0100               	movlb	0	; () banked
 16336  001956  51A8               	movf	printf@c& (0+255),w,b
 16337  001958  0100               	movlb	0	; () banked
 16338  00195A  5FA9               	subwf	printf@width& (0+255),f,b
 16339  00195C  0E00               	movlw	0
 16340  00195E  0100               	movlb	0	; () banked
 16341  001960  BFA8               	btfsc	printf@c& (0+255),7,b
 16342  001962  0EFF               	movlw	255
 16343  001964  0100               	movlb	0	; () banked
 16344  001966  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16345  001968  D005               	goto	l6415
 16346  00196A                     l6413:
 16347                           
 16348                           ; BSR set to: 0
 16349                           ;doprnt.c: 1383: else
 16350                           ;doprnt.c: 1384: width = 0;
 16351  00196A  0E00               	movlw	0
 16352  00196C  0100               	movlb	0	; () banked
 16353  00196E  6FAA               	movwf	(printf@width+1)& (0+255),b
 16354  001970  0E00               	movlw	0
 16355  001972  6FA9               	movwf	printf@width& (0+255),b
 16356  001974                     l6415:
 16357                           
 16358                           ; BSR set to: 0
 16359                           ;doprnt.c: 1387: if(flag & 0x04) {
 16360  001974  0100               	movlb	0	; () banked
 16361  001976  A5A7               	btfss	printf@flag& (0+255),2,b
 16362  001978  D018               	goto	l6427
 16363                           
 16364                           ; BSR set to: 0
 16365                           ;doprnt.c: 1392: if(flag & 0x03)
 16366  00197A  C0A7  F09A         	movff	printf@flag,??_printf
 16367  00197E  0E03               	movlw	3
 16368  001980  0100               	movlb	0	; () banked
 16369  001982  179A               	andwf	??_printf& (0+255),f,b
 16370  001984  B4D8               	btfsc	status,2,c
 16371  001986  D003               	goto	l6421
 16372                           
 16373                           ; BSR set to: 0
 16374                           ;doprnt.c: 1393: (putch('-') );
 16375  001988  0E2D               	movlw	45
 16376  00198A  EC0D  F02A         	call	_putch
 16377  00198E                     l6421:
 16378                           
 16379                           ;doprnt.c: 1415: if(width)
 16380  00198E  0100               	movlb	0	; () banked
 16381  001990  51A9               	movf	printf@width& (0+255),w,b
 16382  001992  0100               	movlb	0	; () banked
 16383  001994  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16384  001996  B4D8               	btfsc	status,2,c
 16385  001998  D025               	goto	l6437
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;doprnt.c: 1417: (putch('0') );
 16389                           
 16390                           ; BSR set to: 0
 16391                           
 16392                           ;doprnt.c: 1416: do
 16393  00199A  0E30               	movlw	48
 16394  00199C  EC0D  F02A         	call	_putch
 16395                           
 16396                           ;doprnt.c: 1418: while(--width);
 16397  0019A0  0100               	movlb	0	; () banked
 16398  0019A2  07A9               	decf	printf@width& (0+255),f,b
 16399  0019A4  A0D8               	btfss	status,0,c
 16400  0019A6  07AA               	decf	(printf@width+1)& (0+255),f,b
 16401  0019A8  D7F2               	goto	l6421
 16402  0019AA                     l6427:
 16403                           
 16404                           ; BSR set to: 0
 16405                           ;doprnt.c: 1422: {
 16406                           ;doprnt.c: 1424: if(width
 16407                           ;doprnt.c: 1428: )
 16408  0019AA  0100               	movlb	0	; () banked
 16409  0019AC  51A9               	movf	printf@width& (0+255),w,b
 16410  0019AE  0100               	movlb	0	; () banked
 16411  0019B0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16412  0019B2  B4D8               	btfsc	status,2,c
 16413  0019B4  D00D               	goto	l6433
 16414  0019B6                     l6429:
 16415                           
 16416                           ; BSR set to: 0
 16417                           ;doprnt.c: 1430: (putch(' ') );
 16418  0019B6  0E20               	movlw	32
 16419  0019B8  EC0D  F02A         	call	_putch
 16420                           
 16421                           ;doprnt.c: 1431: while(--width);
 16422  0019BC  0100               	movlb	0	; () banked
 16423  0019BE  07A9               	decf	printf@width& (0+255),f,b
 16424  0019C0  A0D8               	btfss	status,0,c
 16425  0019C2  07AA               	decf	(printf@width+1)& (0+255),f,b
 16426  0019C4  0100               	movlb	0	; () banked
 16427  0019C6  51A9               	movf	printf@width& (0+255),w,b
 16428  0019C8  0100               	movlb	0	; () banked
 16429  0019CA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16430  0019CC  A4D8               	btfss	status,2,c
 16431  0019CE  D7F3               	goto	l6429
 16432  0019D0                     l6433:
 16433                           
 16434                           ; BSR set to: 0
 16435                           ;doprnt.c: 1438: if(flag & 0x03)
 16436  0019D0  C0A7  F09A         	movff	printf@flag,??_printf
 16437  0019D4  0E03               	movlw	3
 16438  0019D6  0100               	movlb	0	; () banked
 16439  0019D8  179A               	andwf	??_printf& (0+255),f,b
 16440  0019DA  B4D8               	btfsc	status,2,c
 16441  0019DC  D003               	goto	l6437
 16442                           
 16443                           ; BSR set to: 0
 16444                           ;doprnt.c: 1439: (putch('-') );
 16445  0019DE  0E2D               	movlw	45
 16446  0019E0  EC0D  F02A         	call	_putch
 16447  0019E4                     l6437:
 16448                           
 16449                           ;doprnt.c: 1469: }
 16450                           ;doprnt.c: 1472: prec = c;
 16451  0019E4  C0A8  F09E         	movff	printf@c,printf@prec
 16452                           
 16453                           ;doprnt.c: 1474: while(prec--) {
 16454  0019E8  D02C               	goto	l6443
 16455  0019EA                     l6439:
 16456                           
 16457                           ;doprnt.c: 1478: {
 16458                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16459  0019EA  0100               	movlb	0	; () banked
 16460  0019EC  519E               	movf	printf@prec& (0+255),w,b
 16461  0019EE  0D02               	mullw	2
 16462  0019F0  0EDE               	movlw	low _dpowers
 16463  0019F2  24F3               	addwf	prodl,w,c
 16464  0019F4  6EF6               	movwf	tblptrl,c
 16465  0019F6  0EFA               	movlw	high _dpowers
 16466  0019F8  20F4               	addwfc	prodh,w,c
 16467  0019FA  6EF7               	movwf	tblptrh,c
 16468  0019FC                     	if	1	;There are 3 active tblptr bytes
 16469  0019FC  6AF8               	clrf	tblptru,c
 16470  0019FE  0E00               	movlw	low (__mediumconst shr (0+16))
 16471  001A00  22F8               	addwfc	tblptru,f,c
 16472  001A02                     	endif
 16473  001A02  0009               	tblrd		*+
 16474  001A04  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16475  001A08  000A               	tblrd		*-
 16476  001A0A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16477  001A0E  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16478  001A12  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16479  001A16  EC1F  F024         	call	___lwdiv	;wreg free
 16480  001A1A  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16481  001A1E  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16482  001A22  0E00               	movlw	0
 16483  001A24  0100               	movlb	0	; () banked
 16484  001A26  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16485  001A28  0E0A               	movlw	10
 16486  001A2A  6F89               	movwf	___lwmod@divisor& (0+255),b
 16487  001A2C  EC9E  F025         	call	___lwmod	;wreg free
 16488  001A30  0100               	movlb	0	; () banked
 16489  001A32  5187               	movf	?___lwmod& (0+255),w,b
 16490  001A34  0F30               	addlw	48
 16491  001A36  0100               	movlb	0	; () banked
 16492  001A38  6FA8               	movwf	printf@c& (0+255),b
 16493                           
 16494                           ; BSR set to: 0
 16495                           ;doprnt.c: 1523: }
 16496                           ;doprnt.c: 1524: (putch(c) );
 16497  001A3A  0100               	movlb	0	; () banked
 16498  001A3C  51A8               	movf	printf@c& (0+255),w,b
 16499  001A3E  EC0D  F02A         	call	_putch
 16500  001A42                     l6443:
 16501  001A42  0100               	movlb	0	; () banked
 16502  001A44  079E               	decf	printf@prec& (0+255),f,b
 16503  001A46  0100               	movlb	0	; () banked
 16504  001A48  299E               	incf	printf@prec& (0+255),w,b
 16505  001A4A  A4D8               	btfss	status,2,c
 16506  001A4C  D7CE               	goto	l6439
 16507  001A4E                     l6445:
 16508  001A4E  C08E  FFF6         	movff	printf@f,tblptrl
 16509  001A52  C08F  FFF7         	movff	printf@f+1,tblptrh
 16510  001A56  0100               	movlb	0	; () banked
 16511  001A58  4B8E               	infsnz	printf@f& (0+255),f,b
 16512  001A5A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16513  001A5C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16514  001A5C  6AF8               	clrf	tblptru,c
 16515  001A5E                     	endif
 16516  001A5E                     	if	0	;tblptru may be non-zero
 16517  001A5E                     	endif
 16518  001A5E  0008               	tblrd		*
 16519  001A60  CFF5 F0A8          	movff	tablat,printf@c
 16520  001A64  0100               	movlb	0	; () banked
 16521  001A66  51A8               	movf	printf@c& (0+255),w,b
 16522  001A68  B4D8               	btfsc	status,2,c
 16523  001A6A  0012               	return	
 16524  001A6C  D5EB               	goto	l6315
 16525  001A6E                     __end_of_printf:
 16526                           	opt stack 0
 16527                           tblptru	equ	0xFF8
 16528                           tblptrh	equ	0xFF7
 16529                           tblptrl	equ	0xFF6
 16530                           tablat	equ	0xFF5
 16531                           prodh	equ	0xFF4
 16532                           prodl	equ	0xFF3
 16533                           intcon	equ	0xFF2
 16534                           intcon2	equ	0xFF1
 16535                           intcon3	equ	0xFF0
 16536                           indf0	equ	0xFEF
 16537                           postinc0	equ	0xFEE
 16538                           fsr0h	equ	0xFEA
 16539                           fsr0l	equ	0xFE9
 16540                           wreg	equ	0xFE8
 16541                           postdec1	equ	0xFE5
 16542                           fsr1l	equ	0xFE1
 16543                           indf2	equ	0xFDF
 16544                           postinc2	equ	0xFDE
 16545                           postdec2	equ	0xFDD
 16546                           fsr2h	equ	0xFDA
 16547                           fsr2l	equ	0xFD9
 16548                           status	equ	0xFD8
 16549                           
 16550 ;; *************** function _putch *****************
 16551 ;; Defined at:
 16552 ;;		line 20 in file "lcd.c"
 16553 ;; Parameters:    Size  Location     Type
 16554 ;;  data            1    wreg     unsigned char 
 16555 ;; Auto vars:     Size  Location     Type
 16556 ;;  data            1    2[BANK0 ] unsigned char 
 16557 ;; Return value:  Size  Location     Type
 16558 ;;                  1    wreg      void 
 16559 ;; Registers used:
 16560 ;;		wreg, status,2, status,0, cstack
 16561 ;; Tracked objects:
 16562 ;;		On entry : 0/0
 16563 ;;		On exit  : 0/0
 16564 ;;		Unchanged: 0/0
 16565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16569 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16570 ;;Total ram usage:        1 bytes
 16571 ;; Hardware stack levels used:    1
 16572 ;; Hardware stack levels required when called:    8
 16573 ;; This function calls:
 16574 ;;		_lcdNibble
 16575 ;; This function is called by:
 16576 ;;		_printf
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           	psect	text52
 16581  00541A                     __ptext52:
 16582                           	opt stack 0
 16583  00541A                     _putch:
 16584                           	opt stack 18
 16585                           
 16586                           ;incstack = 0
 16587                           ;putch@data stored from wreg
 16588  00541A  0100               	movlb	0	; () banked
 16589  00541C  6F82               	movwf	putch@data& (0+255),b
 16590                           
 16591                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16592  00541E  848C               	bsf	3980,2,c	;volatile
 16593                           
 16594                           ;lcd.c: 22: lcdNibble(data);
 16595  005420  0100               	movlb	0	; () banked
 16596  005422  5182               	movf	putch@data& (0+255),w,b
 16597  005424  EC05  F025         	call	_lcdNibble
 16598  005428  0012               	return		;funcret
 16599  00542A                     __end_of_putch:
 16600                           	opt stack 0
 16601                           tblptru	equ	0xFF8
 16602                           tblptrh	equ	0xFF7
 16603                           tblptrl	equ	0xFF6
 16604                           tablat	equ	0xFF5
 16605                           prodh	equ	0xFF4
 16606                           prodl	equ	0xFF3
 16607                           intcon	equ	0xFF2
 16608                           intcon2	equ	0xFF1
 16609                           intcon3	equ	0xFF0
 16610                           indf0	equ	0xFEF
 16611                           postinc0	equ	0xFEE
 16612                           fsr0h	equ	0xFEA
 16613                           fsr0l	equ	0xFE9
 16614                           wreg	equ	0xFE8
 16615                           postdec1	equ	0xFE5
 16616                           fsr1l	equ	0xFE1
 16617                           indf2	equ	0xFDF
 16618                           postinc2	equ	0xFDE
 16619                           postdec2	equ	0xFDD
 16620                           fsr2h	equ	0xFDA
 16621                           fsr2l	equ	0xFD9
 16622                           status	equ	0xFD8
 16623                           
 16624 ;; *************** function _isdigit *****************
 16625 ;; Defined at:
 16626 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16627 ;; Parameters:    Size  Location     Type
 16628 ;;  c               1    wreg     unsigned char 
 16629 ;; Auto vars:     Size  Location     Type
 16630 ;;  c               1    2[BANK0 ] unsigned char 
 16631 ;; Return value:  Size  Location     Type
 16632 ;;		None               void
 16633 ;; Registers used:
 16634 ;;		wreg, status,2, status,0
 16635 ;; Tracked objects:
 16636 ;;		On entry : 0/0
 16637 ;;		On exit  : 0/0
 16638 ;;		Unchanged: 0/0
 16639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16641 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16643 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16644 ;;Total ram usage:        3 bytes
 16645 ;; Hardware stack levels used:    1
 16646 ;; Hardware stack levels required when called:    7
 16647 ;; This function calls:
 16648 ;;		Nothing
 16649 ;; This function is called by:
 16650 ;;		_printf
 16651 ;; This function uses a non-reentrant model
 16652 ;;
 16653                           
 16654                           	psect	text53
 16655  005244                     __ptext53:
 16656                           	opt stack 0
 16657  005244                     _isdigit:
 16658                           	opt stack 19
 16659                           
 16660                           ;incstack = 0
 16661                           ;isdigit@c stored from wreg
 16662  005244  0100               	movlb	0	; () banked
 16663  005246  6F82               	movwf	isdigit@c& (0+255),b
 16664  005248  0E00               	movlw	0
 16665  00524A  0100               	movlb	0	; () banked
 16666  00524C  6F81               	movwf	_isdigit$2044& (0+255),b
 16667                           
 16668                           ; BSR set to: 0
 16669  00524E  0E3A               	movlw	58
 16670  005250  0100               	movlb	0	; () banked
 16671  005252  6182               	cpfslt	isdigit@c& (0+255),b
 16672  005254  D007               	goto	l6163
 16673                           
 16674                           ; BSR set to: 0
 16675  005256  0E2F               	movlw	47
 16676  005258  0100               	movlb	0	; () banked
 16677  00525A  6582               	cpfsgt	isdigit@c& (0+255),b
 16678  00525C  D003               	goto	l6163
 16679                           
 16680                           ; BSR set to: 0
 16681  00525E  0E01               	movlw	1
 16682  005260  0100               	movlb	0	; () banked
 16683  005262  6F81               	movwf	_isdigit$2044& (0+255),b
 16684  005264                     l6163:
 16685                           
 16686                           ; BSR set to: 0
 16687  005264  C081  F080         	movff	_isdigit$2044,??_isdigit
 16688  005268  0100               	movlb	0	; () banked
 16689  00526A  3180               	rrcf	??_isdigit& (0+255),w,b
 16690  00526C  0012               	return	
 16691  00526E                     __end_of_isdigit:
 16692                           	opt stack 0
 16693                           tblptru	equ	0xFF8
 16694                           tblptrh	equ	0xFF7
 16695                           tblptrl	equ	0xFF6
 16696                           tablat	equ	0xFF5
 16697                           prodh	equ	0xFF4
 16698                           prodl	equ	0xFF3
 16699                           intcon	equ	0xFF2
 16700                           intcon2	equ	0xFF1
 16701                           intcon3	equ	0xFF0
 16702                           indf0	equ	0xFEF
 16703                           postinc0	equ	0xFEE
 16704                           fsr0h	equ	0xFEA
 16705                           fsr0l	equ	0xFE9
 16706                           wreg	equ	0xFE8
 16707                           postdec1	equ	0xFE5
 16708                           fsr1l	equ	0xFE1
 16709                           indf2	equ	0xFDF
 16710                           postinc2	equ	0xFDE
 16711                           postdec2	equ	0xFDD
 16712                           fsr2h	equ	0xFDA
 16713                           fsr2l	equ	0xFD9
 16714                           status	equ	0xFD8
 16715                           
 16716 ;; *************** function ___wmul *****************
 16717 ;; Defined at:
 16718 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16719 ;; Parameters:    Size  Location     Type
 16720 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16721 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16722 ;; Auto vars:     Size  Location     Type
 16723 ;;  product         2    4[BANK0 ] unsigned int 
 16724 ;; Return value:  Size  Location     Type
 16725 ;;                  2    0[BANK0 ] unsigned int 
 16726 ;; Registers used:
 16727 ;;		wreg, status,2, status,0, prodl, prodh
 16728 ;; Tracked objects:
 16729 ;;		On entry : 0/0
 16730 ;;		On exit  : 0/0
 16731 ;;		Unchanged: 0/0
 16732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16733 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16734 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16736 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16737 ;;Total ram usage:        6 bytes
 16738 ;; Hardware stack levels used:    1
 16739 ;; Hardware stack levels required when called:    7
 16740 ;; This function calls:
 16741 ;;		Nothing
 16742 ;; This function is called by:
 16743 ;;		_printf
 16744 ;; This function uses a non-reentrant model
 16745 ;;
 16746                           
 16747                           	psect	text54
 16748  004F16                     __ptext54:
 16749                           	opt stack 0
 16750  004F16                     ___wmul:
 16751                           	opt stack 19
 16752                           
 16753                           ; BSR set to: 0
 16754                           ;incstack = 0
 16755  004F16  0100               	movlb	0	; () banked
 16756  004F18  5180               	movf	___wmul@multiplier& (0+255),w,b
 16757  004F1A  0100               	movlb	0	; () banked
 16758  004F1C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16759  004F1E  CFF3 F084          	movff	prodl,___wmul@product
 16760  004F22  CFF4 F085          	movff	prodh,___wmul@product+1
 16761  004F26  0100               	movlb	0	; () banked
 16762  004F28  5180               	movf	___wmul@multiplier& (0+255),w,b
 16763  004F2A  0100               	movlb	0	; () banked
 16764  004F2C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16765  004F2E  50F3               	movf	prodl,w,c
 16766  004F30  0100               	movlb	0	; () banked
 16767  004F32  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16768  004F34  0100               	movlb	0	; () banked
 16769  004F36  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16770  004F38  0100               	movlb	0	; () banked
 16771  004F3A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16772  004F3C  50F3               	movf	prodl,w,c
 16773  004F3E  0100               	movlb	0	; () banked
 16774  004F40  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16775                           
 16776                           ; BSR set to: 0
 16777  004F42  C084  F080         	movff	___wmul@product,?___wmul
 16778  004F46  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16779  004F4A  0012               	return	
 16780  004F4C                     __end_of___wmul:
 16781                           	opt stack 0
 16782                           tblptru	equ	0xFF8
 16783                           tblptrh	equ	0xFF7
 16784                           tblptrl	equ	0xFF6
 16785                           tablat	equ	0xFF5
 16786                           prodh	equ	0xFF4
 16787                           prodl	equ	0xFF3
 16788                           intcon	equ	0xFF2
 16789                           intcon2	equ	0xFF1
 16790                           intcon3	equ	0xFF0
 16791                           indf0	equ	0xFEF
 16792                           postinc0	equ	0xFEE
 16793                           fsr0h	equ	0xFEA
 16794                           fsr0l	equ	0xFE9
 16795                           wreg	equ	0xFE8
 16796                           postdec1	equ	0xFE5
 16797                           fsr1l	equ	0xFE1
 16798                           indf2	equ	0xFDF
 16799                           postinc2	equ	0xFDE
 16800                           postdec2	equ	0xFDD
 16801                           fsr2h	equ	0xFDA
 16802                           fsr2l	equ	0xFD9
 16803                           status	equ	0xFD8
 16804                           
 16805 ;; *************** function ___lwmod *****************
 16806 ;; Defined at:
 16807 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16808 ;; Parameters:    Size  Location     Type
 16809 ;;  dividend        2    7[BANK0 ] unsigned int 
 16810 ;;  divisor         2    9[BANK0 ] unsigned int 
 16811 ;; Auto vars:     Size  Location     Type
 16812 ;;  counter         1   11[BANK0 ] unsigned char 
 16813 ;; Return value:  Size  Location     Type
 16814 ;;                  2    7[BANK0 ] unsigned int 
 16815 ;; Registers used:
 16816 ;;		wreg, status,2, status,0
 16817 ;; Tracked objects:
 16818 ;;		On entry : 0/0
 16819 ;;		On exit  : 0/0
 16820 ;;		Unchanged: 0/0
 16821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16822 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16825 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16826 ;;Total ram usage:        5 bytes
 16827 ;; Hardware stack levels used:    1
 16828 ;; Hardware stack levels required when called:    7
 16829 ;; This function calls:
 16830 ;;		Nothing
 16831 ;; This function is called by:
 16832 ;;		_printf
 16833 ;; This function uses a non-reentrant model
 16834 ;;
 16835                           
 16836                           	psect	text55
 16837  004B3C                     __ptext55:
 16838                           	opt stack 0
 16839  004B3C                     ___lwmod:
 16840                           	opt stack 19
 16841                           
 16842                           ; BSR set to: 0
 16843                           ;incstack = 0
 16844  004B3C  0100               	movlb	0	; () banked
 16845  004B3E  5189               	movf	___lwmod@divisor& (0+255),w,b
 16846  004B40  0100               	movlb	0	; () banked
 16847  004B42  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16848  004B44  B4D8               	btfsc	status,2,c
 16849  004B46  D026               	goto	l1898
 16850                           
 16851                           ; BSR set to: 0
 16852  004B48  0E01               	movlw	1
 16853  004B4A  0100               	movlb	0	; () banked
 16854  004B4C  6F8B               	movwf	___lwmod@counter& (0+255),b
 16855  004B4E  D006               	goto	l6201
 16856  004B50                     l6199:
 16857                           
 16858                           ; BSR set to: 0
 16859  004B50  0100               	movlb	0	; () banked
 16860  004B52  90D8               	bcf	status,0,c
 16861  004B54  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16862  004B56  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16863  004B58  0100               	movlb	0	; () banked
 16864  004B5A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16865  004B5C                     l6201:
 16866                           
 16867                           ; BSR set to: 0
 16868  004B5C  0100               	movlb	0	; () banked
 16869  004B5E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16870  004B60  D7F7               	goto	l6199
 16871  004B62                     l6203:
 16872                           
 16873                           ; BSR set to: 0
 16874  004B62  0100               	movlb	0	; () banked
 16875  004B64  5189               	movf	___lwmod@divisor& (0+255),w,b
 16876  004B66  0100               	movlb	0	; () banked
 16877  004B68  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16878  004B6A  0100               	movlb	0	; () banked
 16879  004B6C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16880  004B6E  0100               	movlb	0	; () banked
 16881  004B70  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16882  004B72  A0D8               	btfss	status,0,c
 16883  004B74  D008               	goto	l6207
 16884                           
 16885                           ; BSR set to: 0
 16886  004B76  0100               	movlb	0	; () banked
 16887  004B78  5189               	movf	___lwmod@divisor& (0+255),w,b
 16888  004B7A  0100               	movlb	0	; () banked
 16889  004B7C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16890  004B7E  0100               	movlb	0	; () banked
 16891  004B80  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16892  004B82  0100               	movlb	0	; () banked
 16893  004B84  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16894  004B86                     l6207:
 16895                           
 16896                           ; BSR set to: 0
 16897  004B86  0100               	movlb	0	; () banked
 16898  004B88  90D8               	bcf	status,0,c
 16899  004B8A  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16900  004B8C  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16901                           
 16902                           ; BSR set to: 0
 16903  004B8E  0100               	movlb	0	; () banked
 16904  004B90  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16905  004B92  D7E7               	goto	l6203
 16906  004B94                     l1898:
 16907                           
 16908                           ; BSR set to: 0
 16909  004B94  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16910  004B98  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16911                           
 16912                           ; BSR set to: 0
 16913  004B9C  0012               	return		;funcret
 16914  004B9E                     __end_of___lwmod:
 16915                           	opt stack 0
 16916                           tblptru	equ	0xFF8
 16917                           tblptrh	equ	0xFF7
 16918                           tblptrl	equ	0xFF6
 16919                           tablat	equ	0xFF5
 16920                           prodh	equ	0xFF4
 16921                           prodl	equ	0xFF3
 16922                           intcon	equ	0xFF2
 16923                           intcon2	equ	0xFF1
 16924                           intcon3	equ	0xFF0
 16925                           indf0	equ	0xFEF
 16926                           postinc0	equ	0xFEE
 16927                           fsr0h	equ	0xFEA
 16928                           fsr0l	equ	0xFE9
 16929                           wreg	equ	0xFE8
 16930                           postdec1	equ	0xFE5
 16931                           fsr1l	equ	0xFE1
 16932                           indf2	equ	0xFDF
 16933                           postinc2	equ	0xFDE
 16934                           postdec2	equ	0xFDD
 16935                           fsr2h	equ	0xFDA
 16936                           fsr2l	equ	0xFD9
 16937                           status	equ	0xFD8
 16938                           
 16939 ;; *************** function ___lwdiv *****************
 16940 ;; Defined at:
 16941 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16942 ;; Parameters:    Size  Location     Type
 16943 ;;  dividend        2    0[BANK0 ] unsigned int 
 16944 ;;  divisor         2    2[BANK0 ] unsigned int 
 16945 ;; Auto vars:     Size  Location     Type
 16946 ;;  quotient        2    4[BANK0 ] unsigned int 
 16947 ;;  counter         1    6[BANK0 ] unsigned char 
 16948 ;; Return value:  Size  Location     Type
 16949 ;;                  2    0[BANK0 ] unsigned int 
 16950 ;; Registers used:
 16951 ;;		wreg, status,2, status,0
 16952 ;; Tracked objects:
 16953 ;;		On entry : 0/0
 16954 ;;		On exit  : 0/0
 16955 ;;		Unchanged: 0/0
 16956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16957 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16958 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16960 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16961 ;;Total ram usage:        7 bytes
 16962 ;; Hardware stack levels used:    1
 16963 ;; Hardware stack levels required when called:    7
 16964 ;; This function calls:
 16965 ;;		Nothing
 16966 ;; This function is called by:
 16967 ;;		_printf
 16968 ;; This function uses a non-reentrant model
 16969 ;;
 16970                           
 16971                           	psect	text56
 16972  00483E                     __ptext56:
 16973                           	opt stack 0
 16974  00483E                     ___lwdiv:
 16975                           	opt stack 19
 16976                           
 16977                           ; BSR set to: 0
 16978                           ;incstack = 0
 16979  00483E  0E00               	movlw	0
 16980  004840  0100               	movlb	0	; () banked
 16981  004842  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16982  004844  0E00               	movlw	0
 16983  004846  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16984                           
 16985                           ; BSR set to: 0
 16986  004848  0100               	movlb	0	; () banked
 16987  00484A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16988  00484C  0100               	movlb	0	; () banked
 16989  00484E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16990  004850  B4D8               	btfsc	status,2,c
 16991  004852  D02C               	goto	l1888
 16992                           
 16993                           ; BSR set to: 0
 16994  004854  0E01               	movlw	1
 16995  004856  0100               	movlb	0	; () banked
 16996  004858  6F86               	movwf	___lwdiv@counter& (0+255),b
 16997  00485A  D006               	goto	l6181
 16998  00485C                     l6179:
 16999                           
 17000                           ; BSR set to: 0
 17001  00485C  0100               	movlb	0	; () banked
 17002  00485E  90D8               	bcf	status,0,c
 17003  004860  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17004  004862  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17005  004864  0100               	movlb	0	; () banked
 17006  004866  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17007  004868                     l6181:
 17008                           
 17009                           ; BSR set to: 0
 17010  004868  0100               	movlb	0	; () banked
 17011  00486A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17012  00486C  D7F7               	goto	l6179
 17013  00486E                     l6183:
 17014                           
 17015                           ; BSR set to: 0
 17016  00486E  0100               	movlb	0	; () banked
 17017  004870  90D8               	bcf	status,0,c
 17018  004872  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17019  004874  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17020                           
 17021                           ; BSR set to: 0
 17022  004876  0100               	movlb	0	; () banked
 17023  004878  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17024  00487A  0100               	movlb	0	; () banked
 17025  00487C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17026  00487E  0100               	movlb	0	; () banked
 17027  004880  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17028  004882  0100               	movlb	0	; () banked
 17029  004884  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17030  004886  A0D8               	btfss	status,0,c
 17031  004888  D00A               	goto	l6191
 17032                           
 17033                           ; BSR set to: 0
 17034  00488A  0100               	movlb	0	; () banked
 17035  00488C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17036  00488E  0100               	movlb	0	; () banked
 17037  004890  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17038  004892  0100               	movlb	0	; () banked
 17039  004894  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17040  004896  0100               	movlb	0	; () banked
 17041  004898  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17042                           
 17043                           ; BSR set to: 0
 17044  00489A  0100               	movlb	0	; () banked
 17045  00489C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17046  00489E                     l6191:
 17047                           
 17048                           ; BSR set to: 0
 17049  00489E  0100               	movlb	0	; () banked
 17050  0048A0  90D8               	bcf	status,0,c
 17051  0048A2  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17052  0048A4  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17053                           
 17054                           ; BSR set to: 0
 17055  0048A6  0100               	movlb	0	; () banked
 17056  0048A8  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17057  0048AA  D7E1               	goto	l6183
 17058  0048AC                     l1888:
 17059                           
 17060                           ; BSR set to: 0
 17061  0048AC  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17062  0048B0  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17063                           
 17064                           ; BSR set to: 0
 17065  0048B4  0012               	return		;funcret
 17066  0048B6                     __end_of___lwdiv:
 17067                           	opt stack 0
 17068                           tblptru	equ	0xFF8
 17069                           tblptrh	equ	0xFF7
 17070                           tblptrl	equ	0xFF6
 17071                           tablat	equ	0xFF5
 17072                           prodh	equ	0xFF4
 17073                           prodl	equ	0xFF3
 17074                           intcon	equ	0xFF2
 17075                           intcon2	equ	0xFF1
 17076                           intcon3	equ	0xFF0
 17077                           indf0	equ	0xFEF
 17078                           postinc0	equ	0xFEE
 17079                           fsr0h	equ	0xFEA
 17080                           fsr0l	equ	0xFE9
 17081                           wreg	equ	0xFE8
 17082                           postdec1	equ	0xFE5
 17083                           fsr1l	equ	0xFE1
 17084                           indf2	equ	0xFDF
 17085                           postinc2	equ	0xFDE
 17086                           postdec2	equ	0xFDD
 17087                           fsr2h	equ	0xFDA
 17088                           fsr2l	equ	0xFD9
 17089                           status	equ	0xFD8
 17090                           
 17091 ;; *************** function _lcdInst *****************
 17092 ;; Defined at:
 17093 ;;		line 15 in file "lcd.c"
 17094 ;; Parameters:    Size  Location     Type
 17095 ;;  data            1    wreg     unsigned char 
 17096 ;; Auto vars:     Size  Location     Type
 17097 ;;  data            1    2[BANK0 ] unsigned char 
 17098 ;; Return value:  Size  Location     Type
 17099 ;;                  1    wreg      void 
 17100 ;; Registers used:
 17101 ;;		wreg, status,2, status,0, cstack
 17102 ;; Tracked objects:
 17103 ;;		On entry : 0/0
 17104 ;;		On exit  : 0/0
 17105 ;;		Unchanged: 0/0
 17106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17111 ;;Total ram usage:        1 bytes
 17112 ;; Hardware stack levels used:    1
 17113 ;; Hardware stack levels required when called:    8
 17114 ;; This function calls:
 17115 ;;		_lcdNibble
 17116 ;; This function is called by:
 17117 ;;		_UI
 17118 ;;		_change_state_to_menu_start
 17119 ;;		_change_state_to_menu_12
 17120 ;;		_change_state_to_menu_22
 17121 ;;		_initLCD
 17122 ;;		_printRTC
 17123 ;;		_Loading
 17124 ;;		_EEPROM_write
 17125 ;;		_Test
 17126 ;;		_algorithmTest
 17127 ;;		_sensorTest
 17128 ;;		_actuatorTest
 17129 ;;		_BothServos
 17130 ;;		_PortTestDC
 17131 ;;		_PusherTest
 17132 ;;		_SpeedTest
 17133 ;;		_BlockerTest
 17134 ;;		_arm
 17135 ;;		_ToggleTestA5
 17136 ;; This function uses a non-reentrant model
 17137 ;;
 17138                           
 17139                           	psect	text57
 17140  00542A                     __ptext57:
 17141                           	opt stack 0
 17142  00542A                     _lcdInst:
 17143                           	opt stack 20
 17144                           
 17145                           ; BSR set to: 0
 17146                           ;incstack = 0
 17147                           ;lcdInst@data stored from wreg
 17148  00542A  0100               	movlb	0	; () banked
 17149  00542C  6F82               	movwf	lcdInst@data& (0+255),b
 17150                           
 17151                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17152  00542E  948C               	bcf	3980,2,c	;volatile
 17153                           
 17154                           ;lcd.c: 17: lcdNibble(data);
 17155  005430  0100               	movlb	0	; () banked
 17156  005432  5182               	movf	lcdInst@data& (0+255),w,b
 17157  005434  EC05  F025         	call	_lcdNibble
 17158  005438  0012               	return		;funcret
 17159  00543A                     __end_of_lcdInst:
 17160                           	opt stack 0
 17161                           tblptru	equ	0xFF8
 17162                           tblptrh	equ	0xFF7
 17163                           tblptrl	equ	0xFF6
 17164                           tablat	equ	0xFF5
 17165                           prodh	equ	0xFF4
 17166                           prodl	equ	0xFF3
 17167                           intcon	equ	0xFF2
 17168                           intcon2	equ	0xFF1
 17169                           intcon3	equ	0xFF0
 17170                           indf0	equ	0xFEF
 17171                           postinc0	equ	0xFEE
 17172                           fsr0h	equ	0xFEA
 17173                           fsr0l	equ	0xFE9
 17174                           wreg	equ	0xFE8
 17175                           postdec1	equ	0xFE5
 17176                           fsr1l	equ	0xFE1
 17177                           indf2	equ	0xFDF
 17178                           postinc2	equ	0xFDE
 17179                           postdec2	equ	0xFDD
 17180                           fsr2h	equ	0xFDA
 17181                           fsr2l	equ	0xFD9
 17182                           status	equ	0xFD8
 17183                           
 17184 ;; *************** function _lcdNibble *****************
 17185 ;; Defined at:
 17186 ;;		line 25 in file "lcd.c"
 17187 ;; Parameters:    Size  Location     Type
 17188 ;;  data            1    wreg     unsigned char 
 17189 ;; Auto vars:     Size  Location     Type
 17190 ;;  data            1    1[BANK0 ] unsigned char 
 17191 ;;  temp            1    0[BANK0 ] unsigned char 
 17192 ;; Return value:  Size  Location     Type
 17193 ;;                  1    wreg      void 
 17194 ;; Registers used:
 17195 ;;		wreg, status,2, status,0
 17196 ;; Tracked objects:
 17197 ;;		On entry : 0/0
 17198 ;;		On exit  : 0/0
 17199 ;;		Unchanged: 0/0
 17200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;Total ram usage:        2 bytes
 17206 ;; Hardware stack levels used:    1
 17207 ;; Hardware stack levels required when called:    7
 17208 ;; This function calls:
 17209 ;;		Nothing
 17210 ;; This function is called by:
 17211 ;;		_lcdInst
 17212 ;;		_putch
 17213 ;; This function uses a non-reentrant model
 17214 ;;
 17215                           
 17216                           	psect	text58
 17217  004A0A                     __ptext58:
 17218                           	opt stack 0
 17219  004A0A                     _lcdNibble:
 17220                           	opt stack 20
 17221                           
 17222                           ;incstack = 0
 17223                           ;lcdNibble@data stored from wreg
 17224  004A0A  0100               	movlb	0	; () banked
 17225  004A0C  6F81               	movwf	lcdNibble@data& (0+255),b
 17226                           
 17227                           ;lcd.c: 27: char temp = data & 0xF0;
 17228  004A0E  0100               	movlb	0	; () banked
 17229  004A10  5181               	movf	lcdNibble@data& (0+255),w,b
 17230  004A12  0BF0               	andlw	240
 17231  004A14  0100               	movlb	0	; () banked
 17232  004A16  6F80               	movwf	lcdNibble@temp& (0+255),b
 17233                           
 17234                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17235  004A18  508C               	movf	3980,w,c	;volatile
 17236  004A1A  0B0F               	andlw	15
 17237  004A1C  6E8C               	movwf	3980,c	;volatile
 17238                           
 17239                           ;lcd.c: 29: LATD = temp | LATD;
 17240  004A1E  0100               	movlb	0	; () banked
 17241  004A20  5180               	movf	lcdNibble@temp& (0+255),w,b
 17242  004A22  108C               	iorwf	3980,w,c	;volatile
 17243  004A24  6E8C               	movwf	3980,c	;volatile
 17244                           
 17245                           ; BSR set to: 0
 17246                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17247  004A26  868C               	bsf	3980,3,c	;volatile
 17248                           
 17249                           ; BSR set to: 0
 17250                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17251  004A28  0E42               	movlw	66
 17252  004A2A                     u10447:
 17253  004A2A  2EE8               	decfsz	wreg,f,c
 17254  004A2C  D7FE               	bra	u10447
 17255  004A2E  D000               	nop2	
 17256                           
 17257                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17258  004A30  968C               	bcf	3980,3,c	;volatile
 17259                           
 17260                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17261  004A32  0E42               	movlw	66
 17262  004A34                     u10457:
 17263  004A34  2EE8               	decfsz	wreg,f,c
 17264  004A36  D7FE               	bra	u10457
 17265  004A38  D000               	nop2	
 17266                           
 17267                           ;lcd.c: 36: data = data << 4;
 17268  004A3A  0100               	movlb	0	; () banked
 17269  004A3C  3981               	swapf	lcdNibble@data& (0+255),w,b
 17270  004A3E  0BF0               	andlw	240
 17271  004A40  0100               	movlb	0	; () banked
 17272  004A42  6F81               	movwf	lcdNibble@data& (0+255),b
 17273                           
 17274                           ;lcd.c: 38: temp = data & 0xF0;
 17275  004A44  0100               	movlb	0	; () banked
 17276  004A46  5181               	movf	lcdNibble@data& (0+255),w,b
 17277  004A48  0BF0               	andlw	240
 17278  004A4A  0100               	movlb	0	; () banked
 17279  004A4C  6F80               	movwf	lcdNibble@temp& (0+255),b
 17280                           
 17281                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17282  004A4E  508C               	movf	3980,w,c	;volatile
 17283  004A50  0B0F               	andlw	15
 17284  004A52  6E8C               	movwf	3980,c	;volatile
 17285                           
 17286                           ;lcd.c: 40: LATD = temp | LATD;
 17287  004A54  0100               	movlb	0	; () banked
 17288  004A56  5180               	movf	lcdNibble@temp& (0+255),w,b
 17289  004A58  108C               	iorwf	3980,w,c	;volatile
 17290  004A5A  6E8C               	movwf	3980,c	;volatile
 17291                           
 17292                           ; BSR set to: 0
 17293                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17294  004A5C  868C               	bsf	3980,3,c	;volatile
 17295                           
 17296                           ; BSR set to: 0
 17297                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17298  004A5E  0E42               	movlw	66
 17299  004A60                     u10467:
 17300  004A60  2EE8               	decfsz	wreg,f,c
 17301  004A62  D7FE               	bra	u10467
 17302  004A64  D000               	nop2	
 17303                           
 17304                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17305  004A66  968C               	bcf	3980,3,c	;volatile
 17306                           
 17307                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17308  004A68  0E42               	movlw	66
 17309  004A6A                     u10477:
 17310  004A6A  2EE8               	decfsz	wreg,f,c
 17311  004A6C  D7FE               	bra	u10477
 17312  004A6E  D000               	nop2	
 17313  004A70  0012               	return		;funcret
 17314  004A72                     __end_of_lcdNibble:
 17315                           	opt stack 0
 17316                           tblptru	equ	0xFF8
 17317                           tblptrh	equ	0xFF7
 17318                           tblptrl	equ	0xFF6
 17319                           tablat	equ	0xFF5
 17320                           prodh	equ	0xFF4
 17321                           prodl	equ	0xFF3
 17322                           intcon	equ	0xFF2
 17323                           intcon2	equ	0xFF1
 17324                           intcon3	equ	0xFF0
 17325                           indf0	equ	0xFEF
 17326                           postinc0	equ	0xFEE
 17327                           fsr0h	equ	0xFEA
 17328                           fsr0l	equ	0xFE9
 17329                           wreg	equ	0xFE8
 17330                           postdec1	equ	0xFE5
 17331                           fsr1l	equ	0xFE1
 17332                           indf2	equ	0xFDF
 17333                           postinc2	equ	0xFDE
 17334                           postdec2	equ	0xFDD
 17335                           fsr2h	equ	0xFDA
 17336                           fsr2l	equ	0xFD9
 17337                           status	equ	0xFD8
 17338                           
 17339 ;; *************** function _handler *****************
 17340 ;; Defined at:
 17341 ;;		line 16 in file "interruptHandler.c"
 17342 ;; Parameters:    Size  Location     Type
 17343 ;;		None
 17344 ;; Auto vars:     Size  Location     Type
 17345 ;;		None
 17346 ;; Return value:  Size  Location     Type
 17347 ;;                  1    wreg      void 
 17348 ;; Registers used:
 17349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17350 ;; Tracked objects:
 17351 ;;		On entry : 0/0
 17352 ;;		On exit  : 0/0
 17353 ;;		Unchanged: 0/0
 17354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17357 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17358 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17359 ;;Total ram usage:       16 bytes
 17360 ;; Hardware stack levels used:    1
 17361 ;; Hardware stack levels required when called:    6
 17362 ;; This function calls:
 17363 ;;		_printSortTimer
 17364 ;;		_updateMenu
 17365 ;;		_updateServoStates
 17366 ;;		i2_change_state_to_menu_start
 17367 ;; This function is called by:
 17368 ;;		Interrupt level 2
 17369 ;; This function uses a non-reentrant model
 17370 ;;
 17371                           
 17372                           	psect	intcode
 17373  000008                     __pintcode:
 17374                           	opt stack 0
 17375  000008                     _handler:
 17376                           	opt stack 18
 17377                           
 17378                           ;incstack = 0
 17379  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17380  00000A  EDBB  F019         	call	int_func,f	;refresh shadow registers
 17381                           tblptru	equ	0xFF8
 17382                           tblptrh	equ	0xFF7
 17383                           tblptrl	equ	0xFF6
 17384                           tablat	equ	0xFF5
 17385                           prodh	equ	0xFF4
 17386                           prodl	equ	0xFF3
 17387                           intcon	equ	0xFF2
 17388                           intcon2	equ	0xFF1
 17389                           intcon3	equ	0xFF0
 17390                           indf0	equ	0xFEF
 17391                           postinc0	equ	0xFEE
 17392                           fsr0h	equ	0xFEA
 17393                           fsr0l	equ	0xFE9
 17394                           wreg	equ	0xFE8
 17395                           postdec1	equ	0xFE5
 17396                           fsr1l	equ	0xFE1
 17397                           indf2	equ	0xFDF
 17398                           postinc2	equ	0xFDE
 17399                           postdec2	equ	0xFDD
 17400                           fsr2h	equ	0xFDA
 17401                           fsr2l	equ	0xFD9
 17402                           status	equ	0xFD8
 17403                           
 17404                           	psect	intcode_body
 17405  003376                     __pintcode_body:
 17406                           	opt stack 18
 17407  003376                     int_func:
 17408                           	opt stack 18
 17409  003376  0006               	pop		; remove dummy address from shadow register refresh
 17410  003378  CFFA F04D          	movff	pclath,??_handler+2
 17411  00337C  CFFB F04E          	movff	pclatu,??_handler+3
 17412  003380  CFE9 F04F          	movff	fsr0l,??_handler+4
 17413  003384  CFEA F050          	movff	fsr0h,??_handler+5
 17414  003388  CFE1 F051          	movff	fsr1l,??_handler+6
 17415  00338C  CFE2 F052          	movff	fsr1h,??_handler+7
 17416  003390  CFD9 F053          	movff	fsr2l,??_handler+8
 17417  003394  CFDA F054          	movff	fsr2h,??_handler+9
 17418  003398  CFF3 F055          	movff	prodl,??_handler+10
 17419  00339C  CFF4 F056          	movff	prodh,??_handler+11
 17420  0033A0  CFF6 F057          	movff	tblptrl,??_handler+12
 17421  0033A4  CFF7 F058          	movff	tblptrh,??_handler+13
 17422  0033A8  CFF8 F059          	movff	tblptru,??_handler+14
 17423  0033AC  CFF5 F05A          	movff	tablat,??_handler+15
 17424                           
 17425                           ;interruptHandler.c: 18: if(INT1IF){
 17426  0033B0  A0F0               	btfss	intcon3,0,c	;volatile
 17427  0033B2  D034               	goto	i2l9531
 17428                           
 17429                           ;interruptHandler.c: 19: INT1IF = 0;
 17430  0033B4  90F0               	bcf	intcon3,0,c	;volatile
 17431                           
 17432                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 17433  0033B6  3881               	swapf	3969,w,c	;volatile
 17434  0033B8  0B0F               	andlw	15
 17435  0033BA  0B0F               	andlw	15
 17436  0033BC  6E4B               	movwf	??_handler& (0+255),c
 17437  0033BE  6A4C               	clrf	(??_handler+1)& (0+255),c
 17438  0033C0  0ECD               	movlw	low _keys
 17439  0033C2  244B               	addwf	??_handler,w,c
 17440  0033C4  6EF6               	movwf	tblptrl,c
 17441  0033C6  0EFA               	movlw	high _keys
 17442  0033C8  204C               	addwfc	??_handler+1,w,c
 17443  0033CA  6EF7               	movwf	tblptrh,c
 17444  0033CC                     	if	1	;There are 3 active tblptr bytes
 17445  0033CC  6AF8               	clrf	tblptru,c
 17446  0033CE  0E00               	movlw	low (__mediumconst shr (0+16))
 17447  0033D0  22F8               	addwfc	tblptru,f,c
 17448  0033D2                     	endif
 17449  0033D2  0008               	tblrd		*
 17450  0033D4  CFF5 F07D          	movff	tablat,_input	;volatile
 17451                           
 17452                           ;interruptHandler.c: 21: if(input == '*'){
 17453  0033D8  0E2A               	movlw	42
 17454  0033DA  187D               	xorwf	_input,w,c	;volatile
 17455  0033DC  B4D8               	btfsc	status,2,c
 17456  0033DE  D00D               	goto	i2l9525
 17457  0033E0  D018               	goto	i2l9527
 17458  0033E2                     i2l9515:
 17459                           
 17460                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17461  0033E2  0E03               	movlw	3
 17462  0033E4  D007               	goto	L12
 17463  0033E6                     i2l9517:
 17464                           
 17465                           ; BSR set to: 0
 17466                           ;interruptHandler.c: 27: machine_state = UI_state;
 17467  0033E6  0E00               	movlw	0
 17468  0033E8  0100               	movlb	0	; () banked
 17469  0033EA  6FFC               	movwf	_machine_state& (0+255),b
 17470                           
 17471                           ; BSR set to: 0
 17472                           ;interruptHandler.c: 28: change_state_to_menu_start();
 17473  0033EC  EC4B  F029         	call	i2_change_state_to_menu_start	;wreg free
 17474                           
 17475                           ;interruptHandler.c: 29: break;
 17476  0033F0  D015               	goto	i2l9531
 17477  0033F2                     i2l9521:
 17478                           
 17479                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 17480  0033F2  0E02               	movlw	2
 17481  0033F4                     L12:
 17482  0033F4  0100               	movlb	0	; () banked
 17483  0033F6  6FFC               	movwf	_machine_state& (0+255),b
 17484                           
 17485                           ; BSR set to: 0
 17486                           ;interruptHandler.c: 33: }
 17487                           
 17488                           ;interruptHandler.c: 32: break;
 17489  0033F8  D011               	goto	i2l9531
 17490  0033FA                     i2l9525:
 17491  0033FA  0100               	movlb	0	; () banked
 17492  0033FC  51FC               	movf	_machine_state& (0+255),w,b
 17493                           
 17494                           ; Switch size 1, requested type "space"
 17495                           ; Number of cases is 3, Range of values is 0 to 3
 17496                           ; switch strategies available:
 17497                           ; Name         Instructions Cycles
 17498                           ; simple_byte           10     6 (average)
 17499                           ;	Chosen strategy is simple_byte
 17500  0033FE  0A00               	xorlw	0	; case 0
 17501  003400  B4D8               	btfsc	status,2,c
 17502  003402  D7EF               	goto	i2l9515
 17503  003404  0A01               	xorlw	1	; case 1
 17504  003406  B4D8               	btfsc	status,2,c
 17505  003408  D7F4               	goto	i2l9521
 17506  00340A  0A02               	xorlw	2	; case 3
 17507  00340C  B4D8               	btfsc	status,2,c
 17508  00340E  D7EB               	goto	i2l9517
 17509                           
 17510                           ; BSR set to: 0
 17511                           ;interruptHandler.c: 34: }
 17512  003410  D005               	goto	i2l9531
 17513  003412                     i2l9527:
 17514                           
 17515                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 17516  003412  0100               	movlb	0	; () banked
 17517  003414  51FC               	movf	_machine_state& (0+255),w,b
 17518  003416  B4D8               	btfsc	status,2,c
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;interruptHandler.c: 36: updateMenu();
 17522  003418  EC94  F013         	call	_updateMenu	;wreg free
 17523  00341C                     i2l9531:
 17524                           
 17525                           ;interruptHandler.c: 37: }
 17526                           ;interruptHandler.c: 38: }
 17527                           ;interruptHandler.c: 41: if(TMR0IF){
 17528  00341C  A4F2               	btfss	intcon,2,c	;volatile
 17529  00341E  D00C               	goto	i2l9545
 17530                           
 17531                           ;interruptHandler.c: 42: TMR0IF = 0;
 17532  003420  94F2               	bcf	intcon,2,c	;volatile
 17533                           
 17534                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 17535  003422  0100               	movlb	0	; () banked
 17536  003424  05FC               	decf	_machine_state& (0+255),w,b
 17537  003426  A4D8               	btfss	status,2,c
 17538  003428  D007               	goto	i2l9545
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;interruptHandler.c: 44: printSortTimer();
 17542  00342A  ECF4  F014         	call	_printSortTimer	;wreg free
 17543                           
 17544                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 17545  00342E  0E85               	movlw	133
 17546  003430  6ED7               	movwf	4055,c	;volatile
 17547                           
 17548                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 17549  003432  0EEE               	movlw	238
 17550  003434  6ED6               	movwf	4054,c	;volatile
 17551                           
 17552                           ;interruptHandler.c: 48: TMR0ON = 1;
 17553  003436  8ED5               	bsf	4053,7,c	;volatile
 17554  003438                     i2l9545:
 17555                           
 17556                           ;interruptHandler.c: 49: }
 17557                           ;interruptHandler.c: 50: }
 17558                           ;interruptHandler.c: 53: if(TMR1IF){
 17559  003438  A09E               	btfss	3998,0,c	;volatile
 17560  00343A  D02A               	goto	i2l9573
 17561                           
 17562                           ;interruptHandler.c: 54: TMR1IF = 0;
 17563  00343C  909E               	bcf	3998,0,c	;volatile
 17564                           
 17565                           ;interruptHandler.c: 55: TMR1ON = 0;
 17566  00343E  90CD               	bcf	4045,0,c	;volatile
 17567                           
 17568                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 17569  003440  0100               	movlb	0	; () banked
 17570  003442  05FC               	decf	_machine_state& (0+255),w,b
 17571  003444  A4D8               	btfss	status,2,c
 17572  003446  D024               	goto	i2l9573
 17573                           
 17574                           ; BSR set to: 0
 17575                           ;interruptHandler.c: 57: if(was_low_1){
 17576  003448  5077               	movf	_was_low_1,w,c	;volatile
 17577  00344A  1078               	iorwf	_was_low_1+1,w,c	;volatile
 17578  00344C  B4D8               	btfsc	status,2,c
 17579  00344E  D00A               	goto	i2l998
 17580                           
 17581                           ; BSR set to: 0
 17582                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 17583  003450  828B               	bsf	3979,1,c	;volatile
 17584                           
 17585                           ; BSR set to: 0
 17586                           ;interruptHandler.c: 59: was_low_1 = 0;
 17587  003452  0E00               	movlw	0
 17588  003454  6E78               	movwf	_was_low_1+1,c	;volatile
 17589  003456  0E00               	movlw	0
 17590  003458  6E77               	movwf	_was_low_1,c	;volatile
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 17594  00345A  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 17598  00345E  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17599                           
 17600                           ;interruptHandler.c: 62: }
 17601  003462  D00F               	goto	i2l9567
 17602  003464                     i2l998:
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;interruptHandler.c: 63: else{
 17606                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 17607  003464  928B               	bcf	3979,1,c	;volatile
 17608                           
 17609                           ; BSR set to: 0
 17610                           ;interruptHandler.c: 65: was_low_1 = 1;
 17611  003466  0E00               	movlw	0
 17612  003468  6E78               	movwf	_was_low_1+1,c	;volatile
 17613  00346A  0E01               	movlw	1
 17614  00346C  6E77               	movwf	_was_low_1,c	;volatile
 17615                           
 17616                           ; BSR set to: 0
 17617                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 17618  00346E  0100               	movlb	0	; () banked
 17619  003470  51DA               	movf	_servoTimes& (0+255),w,b
 17620  003472  0800               	sublw	0
 17621  003474  0F20               	addlw	32
 17622  003476  6ECF               	movwf	4047,c	;volatile
 17623                           
 17624                           ; BSR set to: 0
 17625                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 17626  003478  0100               	movlb	0	; () banked
 17627  00347A  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17628  00347C  0800               	sublw	0
 17629  00347E  0F20               	addlw	32
 17630  003480  6ECE               	movwf	4046,c	;volatile
 17631  003482                     i2l9567:
 17632                           
 17633                           ; BSR set to: 0
 17634                           ;interruptHandler.c: 68: }
 17635                           ;interruptHandler.c: 69: TMR1ON = 1;
 17636  003482  80CD               	bsf	4045,0,c	;volatile
 17637                           
 17638                           ; BSR set to: 0
 17639                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 17640  003484  0E0A               	movlw	10
 17641  003486  266D               	addwf	_servo_timer_counter,f,c	;volatile
 17642  003488  0E00               	movlw	0
 17643  00348A  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17644                           
 17645                           ; BSR set to: 0
 17646                           ;interruptHandler.c: 72: updateServoStates();
 17647  00348C  ECBF  F01B         	call	_updateServoStates	;wreg free
 17648  003490                     i2l9573:
 17649                           
 17650                           ;interruptHandler.c: 73: }
 17651                           ;interruptHandler.c: 74: }
 17652                           ;interruptHandler.c: 77: if(TMR2IF){
 17653  003490  A29E               	btfss	3998,1,c	;volatile
 17654  003492  D03B               	goto	i2l9599
 17655                           
 17656                           ;interruptHandler.c: 80: TMR2IF = 0;
 17657  003494  929E               	bcf	3998,1,c	;volatile
 17658                           
 17659                           ;interruptHandler.c: 81: TMR2ON = 0;
 17660  003496  94CA               	bcf	4042,2,c	;volatile
 17661                           
 17662                           ;interruptHandler.c: 82: timer2_counter++;
 17663  003498  4A73               	infsnz	_timer2_counter,f,c	;volatile
 17664  00349A  2A74               	incf	_timer2_counter+1,f,c	;volatile
 17665                           
 17666                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 17667  00349C  0100               	movlb	0	; () banked
 17668  00349E  05FC               	decf	_machine_state& (0+255),w,b
 17669  0034A0  A4D8               	btfss	status,2,c
 17670  0034A2  D033               	goto	i2l9599
 17671                           
 17672                           ; BSR set to: 0
 17673                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == (40 - f_arm_position))){
 17674  0034A4  5079               	movf	_was_low_2,w,c	;volatile
 17675  0034A6  107A               	iorwf	_was_low_2+1,w,c	;volatile
 17676  0034A8  B4D8               	btfsc	status,2,c
 17677  0034AA  D018               	goto	i2l9589
 17678                           
 17679                           ; BSR set to: 0
 17680  0034AC  C061  F04B         	movff	_f_arm_position,??_handler	;volatile
 17681  0034B0  C062  F04C         	movff	_f_arm_position+1,??_handler+1	;volatile
 17682  0034B4  1E4B               	comf	??_handler,f,c
 17683  0034B6  1E4C               	comf	??_handler+1,f,c
 17684  0034B8  4A4B               	infsnz	??_handler,f,c
 17685  0034BA  2A4C               	incf	??_handler+1,f,c
 17686  0034BC  0E28               	movlw	40
 17687  0034BE  264B               	addwf	??_handler,f,c
 17688  0034C0  0E00               	movlw	0
 17689  0034C2  224C               	addwfc	??_handler+1,f,c
 17690  0034C4  5073               	movf	_timer2_counter,w,c	;volatile
 17691  0034C6  184B               	xorwf	??_handler,w,c
 17692  0034C8  E109               	bnz	i2l9589
 17693  0034CA  5074               	movf	_timer2_counter+1,w,c	;volatile
 17694  0034CC  184C               	xorwf	??_handler+1,w,c
 17695  0034CE  A4D8               	btfss	status,2,c
 17696  0034D0  D005               	goto	i2l9589
 17697                           
 17698                           ; BSR set to: 0
 17699                           ;interruptHandler.c: 87: LATBbits.LATB3 = 1;
 17700  0034D2  868A               	bsf	3978,3,c	;volatile
 17701                           
 17702                           ; BSR set to: 0
 17703                           ;interruptHandler.c: 88: was_low_2 = 0;
 17704  0034D4  0E00               	movlw	0
 17705  0034D6  6E7A               	movwf	_was_low_2+1,c	;volatile
 17706  0034D8  0E00               	movlw	0
 17707  0034DA  D00F               	goto	L13
 17708  0034DC                     i2l9589:
 17709                           
 17710                           ; BSR set to: 0
 17711                           ;interruptHandler.c: 91: else if((!was_low_2) && (timer2_counter == f_arm_position)){
 17712  0034DC  5079               	movf	_was_low_2,w,c	;volatile
 17713  0034DE  107A               	iorwf	_was_low_2+1,w,c	;volatile
 17714  0034E0  A4D8               	btfss	status,2,c
 17715  0034E2  D010               	goto	i2l1003
 17716                           
 17717                           ; BSR set to: 0
 17718  0034E4  5061               	movf	_f_arm_position,w,c	;volatile
 17719  0034E6  1873               	xorwf	_timer2_counter,w,c	;volatile
 17720  0034E8  E10D               	bnz	i2l1003
 17721  0034EA  5062               	movf	_f_arm_position+1,w,c	;volatile
 17722  0034EC  1874               	xorwf	_timer2_counter+1,w,c	;volatile
 17723  0034EE  A4D8               	btfss	status,2,c
 17724  0034F0  D009               	goto	i2l1003
 17725                           
 17726                           ; BSR set to: 0
 17727                           ;interruptHandler.c: 92: LATBbits.LATB3 = 0;
 17728  0034F2  968A               	bcf	3978,3,c	;volatile
 17729                           
 17730                           ; BSR set to: 0
 17731                           ;interruptHandler.c: 93: was_low_2 = 1;
 17732  0034F4  0E00               	movlw	0
 17733  0034F6  6E7A               	movwf	_was_low_2+1,c	;volatile
 17734  0034F8  0E01               	movlw	1
 17735  0034FA                     L13:
 17736  0034FA  6E79               	movwf	_was_low_2,c	;volatile
 17737                           
 17738                           ;interruptHandler.c: 94: timer2_counter = 0;
 17739  0034FC  0E00               	movlw	0
 17740  0034FE  6E74               	movwf	_timer2_counter+1,c	;volatile
 17741  003500  0E00               	movlw	0
 17742  003502  6E73               	movwf	_timer2_counter,c	;volatile
 17743  003504                     i2l1003:
 17744                           
 17745                           ; BSR set to: 0
 17746                           ;interruptHandler.c: 95: }
 17747                           ;interruptHandler.c: 96: PR2 = 0x11;
 17748  003504  0E11               	movlw	17
 17749  003506  6ECB               	movwf	4043,c	;volatile
 17750                           
 17751                           ; BSR set to: 0
 17752                           ;interruptHandler.c: 97: TMR2ON = 1;
 17753  003508  84CA               	bsf	4042,2,c	;volatile
 17754  00350A                     i2l9599:
 17755                           
 17756                           ;interruptHandler.c: 98: }
 17757                           ;interruptHandler.c: 99: }
 17758                           ;interruptHandler.c: 102: if(TMR3IF){
 17759  00350A  A2A1               	btfss	4001,1,c	;volatile
 17760  00350C  D024               	goto	i2l1009
 17761                           
 17762                           ;interruptHandler.c: 103: TMR3IF = 0;
 17763  00350E  92A1               	bcf	4001,1,c	;volatile
 17764                           
 17765                           ;interruptHandler.c: 104: TMR3ON = 0;
 17766  003510  90B1               	bcf	4017,0,c	;volatile
 17767                           
 17768                           ;interruptHandler.c: 105: if(machine_state == Sorting_state){
 17769  003512  0100               	movlb	0	; () banked
 17770  003514  05FC               	decf	_machine_state& (0+255),w,b
 17771  003516  A4D8               	btfss	status,2,c
 17772  003518  D01E               	goto	i2l1009
 17773                           
 17774                           ; BSR set to: 0
 17775                           ;interruptHandler.c: 106: if(was_low_3){
 17776  00351A  507B               	movf	_was_low_3,w,c	;volatile
 17777  00351C  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17778  00351E  B4D8               	btfsc	status,2,c
 17779  003520  D00A               	goto	i2l1007
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;interruptHandler.c: 107: LATCbits.LATC2 = 1;
 17783  003522  848B               	bsf	3979,2,c	;volatile
 17784                           
 17785                           ; BSR set to: 0
 17786                           ;interruptHandler.c: 108: was_low_3 = 0;
 17787  003524  0E00               	movlw	0
 17788  003526  6E7C               	movwf	_was_low_3+1,c	;volatile
 17789  003528  0E00               	movlw	0
 17790  00352A  6E7B               	movwf	_was_low_3,c	;volatile
 17791                           
 17792                           ; BSR set to: 0
 17793                           ;interruptHandler.c: 109: TMR3H = servoTimes[2];
 17794  00352C  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17795                           
 17796                           ; BSR set to: 0
 17797                           ;interruptHandler.c: 110: TMR3L = servoTimes[3];
 17798  003530  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17799                           
 17800                           ;interruptHandler.c: 111: }
 17801  003534  D00F               	goto	i2l9621
 17802  003536                     i2l1007:
 17803                           
 17804                           ; BSR set to: 0
 17805                           ;interruptHandler.c: 112: else{
 17806                           ;interruptHandler.c: 113: LATCbits.LATC2 = 0;
 17807  003536  948B               	bcf	3979,2,c	;volatile
 17808                           
 17809                           ; BSR set to: 0
 17810                           ;interruptHandler.c: 114: was_low_3 = 1;
 17811  003538  0E00               	movlw	0
 17812  00353A  6E7C               	movwf	_was_low_3+1,c	;volatile
 17813  00353C  0E01               	movlw	1
 17814  00353E  6E7B               	movwf	_was_low_3,c	;volatile
 17815                           
 17816                           ; BSR set to: 0
 17817                           ;interruptHandler.c: 115: TMR3H = 20000 - servoTimes[2];
 17818  003540  0100               	movlb	0	; () banked
 17819  003542  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17820  003544  0800               	sublw	0
 17821  003546  0F20               	addlw	32
 17822  003548  6EB3               	movwf	4019,c	;volatile
 17823                           
 17824                           ; BSR set to: 0
 17825                           ;interruptHandler.c: 116: TMR3L = 20000 - servoTimes[3];
 17826  00354A  0100               	movlb	0	; () banked
 17827  00354C  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17828  00354E  0800               	sublw	0
 17829  003550  0F20               	addlw	32
 17830  003552  6EB2               	movwf	4018,c	;volatile
 17831  003554                     i2l9621:
 17832                           
 17833                           ; BSR set to: 0
 17834                           ;interruptHandler.c: 117: }
 17835                           ;interruptHandler.c: 118: TMR3ON = 1;
 17836  003554  80B1               	bsf	4017,0,c	;volatile
 17837  003556                     i2l1009:
 17838  003556  C05A  FFF5         	movff	??_handler+15,tablat
 17839  00355A  C059  FFF8         	movff	??_handler+14,tblptru
 17840  00355E  C058  FFF7         	movff	??_handler+13,tblptrh
 17841  003562  C057  FFF6         	movff	??_handler+12,tblptrl
 17842  003566  C056  FFF4         	movff	??_handler+11,prodh
 17843  00356A  C055  FFF3         	movff	??_handler+10,prodl
 17844  00356E  C054  FFDA         	movff	??_handler+9,fsr2h
 17845  003572  C053  FFD9         	movff	??_handler+8,fsr2l
 17846  003576  C052  FFE2         	movff	??_handler+7,fsr1h
 17847  00357A  C051  FFE1         	movff	??_handler+6,fsr1l
 17848  00357E  C050  FFEA         	movff	??_handler+5,fsr0h
 17849  003582  C04F  FFE9         	movff	??_handler+4,fsr0l
 17850  003586  C04E  FFFB         	movff	??_handler+3,pclatu
 17851  00358A  C04D  FFFA         	movff	??_handler+2,pclath
 17852  00358E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17853  003590  0011               	retfie		f
 17854  003592                     __end_of_handler:
 17855                           	opt stack 0
 17856                           pclatu	equ	0xFFB
 17857                           pclath	equ	0xFFA
 17858                           tblptru	equ	0xFF8
 17859                           tblptrh	equ	0xFF7
 17860                           tblptrl	equ	0xFF6
 17861                           tablat	equ	0xFF5
 17862                           prodh	equ	0xFF4
 17863                           prodl	equ	0xFF3
 17864                           intcon	equ	0xFF2
 17865                           intcon2	equ	0xFF1
 17866                           intcon3	equ	0xFF0
 17867                           indf0	equ	0xFEF
 17868                           postinc0	equ	0xFEE
 17869                           fsr0h	equ	0xFEA
 17870                           fsr0l	equ	0xFE9
 17871                           wreg	equ	0xFE8
 17872                           postdec1	equ	0xFE5
 17873                           fsr1h	equ	0xFE2
 17874                           fsr1l	equ	0xFE1
 17875                           indf2	equ	0xFDF
 17876                           postinc2	equ	0xFDE
 17877                           postdec2	equ	0xFDD
 17878                           fsr2h	equ	0xFDA
 17879                           fsr2l	equ	0xFD9
 17880                           status	equ	0xFD8
 17881                           
 17882 ;; *************** function _updateServoStates *****************
 17883 ;; Defined at:
 17884 ;;		line 531 in file "sort.c"
 17885 ;; Parameters:    Size  Location     Type
 17886 ;;		None
 17887 ;; Auto vars:     Size  Location     Type
 17888 ;;		None
 17889 ;; Return value:  Size  Location     Type
 17890 ;;                  1    wreg      void 
 17891 ;; Registers used:
 17892 ;;		wreg, status,2, status,0, cstack
 17893 ;; Tracked objects:
 17894 ;;		On entry : 0/0
 17895 ;;		On exit  : 0/0
 17896 ;;		Unchanged: 0/0
 17897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;Total ram usage:        2 bytes
 17903 ;; Hardware stack levels used:    1
 17904 ;; Hardware stack levels required when called:    1
 17905 ;; This function calls:
 17906 ;;		i2_updateServoPosition
 17907 ;; This function is called by:
 17908 ;;		_handler
 17909 ;; This function uses a non-reentrant model
 17910 ;;
 17911                           
 17912                           	psect	text60
 17913  00377E                     __ptext60:
 17914                           	opt stack 0
 17915  00377E                     _updateServoStates:
 17916                           	opt stack 22
 17917                           
 17918                           ;sort.c: 533: if(servo_timer_counter >= servo_timer_target){
 17919                           
 17920                           ;incstack = 0
 17921  00377E  506F               	movf	_servo_timer_target,w,c	;volatile
 17922  003780  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 17923  003782  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 17924  003784  0A80               	xorlw	128
 17925  003786  6E09               	movwf	??_updateServoStates& (0+255),c
 17926  003788  5070               	movf	_servo_timer_target+1,w,c	;volatile
 17927  00378A  0A80               	xorlw	128
 17928  00378C  5809               	subwfb	??_updateServoStates& (0+255),w,c
 17929  00378E  A0D8               	btfss	status,0,c
 17930  003790  0012               	return	
 17931                           
 17932                           ;sort.c: 535: if(f_panning_to_bin){
 17933  003792  5063               	movf	_f_panning_to_bin,w,c	;volatile
 17934  003794  1064               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 17935  003796  A4D8               	btfss	status,2,c
 17936  003798  D036               	goto	i2l9407
 17937  00379A  D05F               	goto	i2l9411
 17938  00379C                     i2l9381:
 17939                           
 17940                           ;sort.c: 539: updateServoPosition(1260, 3);
 17941  00379C  0E04               	movlw	4
 17942  00379E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17943  0037A0  0EEC               	movlw	236
 17944  0037A2  6E01               	movwf	i2updateServoPosition@time_us,c
 17945  0037A4  0E00               	movlw	0
 17946  0037A6  6E04               	movwf	i2updateServoPosition@timer+1,c
 17947  0037A8  0E03               	movlw	3
 17948  0037AA  6E03               	movwf	i2updateServoPosition@timer,c
 17949  0037AC  ECCD  F024         	call	i2_updateServoPosition	;wreg free
 17950  0037B0  D025               	goto	i2l9401
 17951  0037B2                     i2l9385:
 17952                           
 17953                           ;sort.c: 541: servo_timer_target = 700;
 17954  0037B2  0E02               	movlw	2
 17955  0037B4  6E70               	movwf	_servo_timer_target+1,c	;volatile
 17956  0037B6  0EBC               	movlw	188
 17957  0037B8  6E6F               	movwf	_servo_timer_target,c	;volatile
 17958                           
 17959                           ;sort.c: 542: break;
 17960  0037BA  D04A               	goto	i2l9409
 17961  0037BC                     i2l9387:
 17962                           
 17963                           ;sort.c: 544: updateServoPosition(1260, 3);
 17964  0037BC  0E04               	movlw	4
 17965  0037BE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17966  0037C0  0EEC               	movlw	236
 17967  0037C2  6E01               	movwf	i2updateServoPosition@time_us,c
 17968  0037C4  0E00               	movlw	0
 17969  0037C6  6E04               	movwf	i2updateServoPosition@timer+1,c
 17970  0037C8  0E03               	movlw	3
 17971  0037CA  6E03               	movwf	i2updateServoPosition@timer,c
 17972  0037CC  ECCD  F024         	call	i2_updateServoPosition	;wreg free
 17973  0037D0  D015               	goto	i2l9401
 17974  0037D2                     i2l9393:
 17975                           
 17976                           ;sort.c: 550: updateServoPosition(1390, 3);
 17977  0037D2  0E05               	movlw	5
 17978  0037D4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17979  0037D6  0E6E               	movlw	110
 17980  0037D8  6E01               	movwf	i2updateServoPosition@time_us,c
 17981  0037DA  0E00               	movlw	0
 17982  0037DC  6E04               	movwf	i2updateServoPosition@timer+1,c
 17983  0037DE  0E03               	movlw	3
 17984  0037E0  6E03               	movwf	i2updateServoPosition@timer,c
 17985  0037E2  ECCD  F024         	call	i2_updateServoPosition	;wreg free
 17986  0037E6  D00A               	goto	i2l9401
 17987  0037E8                     i2l9399:
 17988                           
 17989                           ;sort.c: 555: updateServoPosition(1390, 3);
 17990  0037E8  0E05               	movlw	5
 17991  0037EA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17992  0037EC  0E6E               	movlw	110
 17993  0037EE  6E01               	movwf	i2updateServoPosition@time_us,c
 17994  0037F0  0E00               	movlw	0
 17995  0037F2  6E04               	movwf	i2updateServoPosition@timer+1,c
 17996  0037F4  0E03               	movlw	3
 17997  0037F6  6E03               	movwf	i2updateServoPosition@timer,c
 17998  0037F8  ECCD  F024         	call	i2_updateServoPosition	;wreg free
 17999  0037FC                     i2l9401:
 18000                           
 18001                           ;sort.c: 556: servo_timer_counter = 0;
 18002  0037FC  0E00               	movlw	0
 18003  0037FE  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18004  003800  0E00               	movlw	0
 18005  003802  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18006  003804  D7D6               	goto	i2l9385
 18007  003806                     i2l9407:
 18008  003806  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 18009  00380A  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 18010                           
 18011                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18012                           ; Switch size 1, requested type "space"
 18013                           ; Number of cases is 4, Range of values is 1 to 9
 18014                           ; switch strategies available:
 18015                           ; Name         Instructions Cycles
 18016                           ; simple_byte           13     7 (average)
 18017                           ;	Chosen strategy is simple_byte
 18018  00380E  500A               	movf	??_updateServoStates+1,w,c
 18019  003810  0A01               	xorlw	1	; case 1
 18020  003812  B4D8               	btfsc	status,2,c
 18021  003814  D00A               	goto	i2l10049
 18022  003816  0A02               	xorlw	2	; case 3
 18023  003818  B4D8               	btfsc	status,2,c
 18024  00381A  D00C               	goto	i2l10051
 18025  00381C  0A05               	xorlw	5	; case 6
 18026  00381E  B4D8               	btfsc	status,2,c
 18027  003820  D00E               	goto	i2l10053
 18028  003822  0A0F               	xorlw	15	; case 9
 18029  003824  B4D8               	btfsc	status,2,c
 18030  003826  D010               	goto	i2l10055
 18031  003828  D013               	goto	i2l9409
 18032  00382A                     i2l10049:
 18033                           
 18034                           ; Switch size 1, requested type "space"
 18035                           ; Number of cases is 1, Range of values is 244 to 244
 18036                           ; switch strategies available:
 18037                           ; Name         Instructions Cycles
 18038                           ; simple_byte            4     3 (average)
 18039                           ;	Chosen strategy is simple_byte
 18040  00382A  5009               	movf	??_updateServoStates,w,c
 18041  00382C  0AF4               	xorlw	244	; case 244
 18042  00382E  B4D8               	btfsc	status,2,c
 18043  003830  D7B5               	goto	i2l9381
 18044  003832  D00E               	goto	i2l9409
 18045  003834                     i2l10051:
 18046                           
 18047                           ; Switch size 1, requested type "space"
 18048                           ; Number of cases is 1, Range of values is 82 to 82
 18049                           ; switch strategies available:
 18050                           ; Name         Instructions Cycles
 18051                           ; simple_byte            4     3 (average)
 18052                           ;	Chosen strategy is simple_byte
 18053  003834  5009               	movf	??_updateServoStates,w,c
 18054  003836  0A52               	xorlw	82	; case 82
 18055  003838  B4D8               	btfsc	status,2,c
 18056  00383A  D7C0               	goto	i2l9387
 18057  00383C  D009               	goto	i2l9409
 18058  00383E                     i2l10053:
 18059                           
 18060                           ; Switch size 1, requested type "space"
 18061                           ; Number of cases is 1, Range of values is 134 to 134
 18062                           ; switch strategies available:
 18063                           ; Name         Instructions Cycles
 18064                           ; simple_byte            4     3 (average)
 18065                           ;	Chosen strategy is simple_byte
 18066  00383E  5009               	movf	??_updateServoStates,w,c
 18067  003840  0A86               	xorlw	134	; case 134
 18068  003842  B4D8               	btfsc	status,2,c
 18069  003844  D7C6               	goto	i2l9393
 18070  003846  D004               	goto	i2l9409
 18071  003848                     i2l10055:
 18072                           
 18073                           ; Switch size 1, requested type "space"
 18074                           ; Number of cases is 1, Range of values is 96 to 96
 18075                           ; switch strategies available:
 18076                           ; Name         Instructions Cycles
 18077                           ; simple_byte            4     3 (average)
 18078                           ;	Chosen strategy is simple_byte
 18079  003848  5009               	movf	??_updateServoStates,w,c
 18080  00384A  0A60               	xorlw	96	; case 96
 18081  00384C  B4D8               	btfsc	status,2,c
 18082  00384E  D7CC               	goto	i2l9399
 18083  003850                     i2l9409:
 18084                           
 18085                           ;sort.c: 562: f_panning_to_bin = 0;
 18086  003850  0E00               	movlw	0
 18087  003852  6E64               	movwf	_f_panning_to_bin+1,c	;volatile
 18088  003854  0E00               	movlw	0
 18089  003856  6E63               	movwf	_f_panning_to_bin,c	;volatile
 18090                           
 18091                           ;sort.c: 563: }
 18092  003858  0012               	return	
 18093  00385A                     i2l9411:
 18094                           
 18095                           ;sort.c: 564: else if(pan_servo_state == 1200){
 18096  00385A  0EB0               	movlw	176
 18097  00385C  186B               	xorwf	_pan_servo_state,w,c	;volatile
 18098  00385E  E15A               	bnz	i2l9441
 18099  003860  0E04               	movlw	4
 18100  003862  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 18101  003864  A4D8               	btfss	status,2,c
 18102  003866  D056               	goto	i2l9441
 18103                           
 18104                           ;sort.c: 566: servo_timer_counter = 0;
 18105  003868  0E00               	movlw	0
 18106  00386A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18107  00386C  0E00               	movlw	0
 18108  00386E  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18109                           
 18110                           ;sort.c: 567: }
 18111  003870  0012               	return	
 18112  003872                     i2l9415:
 18113                           
 18114                           ;sort.c: 572: updateServoPosition(1050, 3);
 18115  003872  0E04               	movlw	4
 18116  003874  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18117  003876  0E1A               	movlw	26
 18118  003878  6E01               	movwf	i2updateServoPosition@time_us,c
 18119  00387A  0E00               	movlw	0
 18120  00387C  6E04               	movwf	i2updateServoPosition@timer+1,c
 18121  00387E  0E03               	movlw	3
 18122  003880  6E03               	movwf	i2updateServoPosition@timer,c
 18123  003882  ECCD  F024         	call	i2_updateServoPosition	;wreg free
 18124                           
 18125                           ;sort.c: 573: servo_timer_counter = 0;
 18126  003886  0E00               	movlw	0
 18127  003888  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18128  00388A  0E00               	movlw	0
 18129  00388C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18130                           
 18131                           ;sort.c: 574: servo_timer_target = 750;
 18132  00388E  0E02               	movlw	2
 18133  003890  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18134  003892  0EEE               	movlw	238
 18135  003894  6E6F               	movwf	_servo_timer_target,c	;volatile
 18136                           
 18137                           ;sort.c: 575: break;
 18138  003896  0012               	return	
 18139  003898                     i2l9421:
 18140                           
 18141                           ;sort.c: 577: updateServoPosition(1050, 3);
 18142  003898  0E04               	movlw	4
 18143  00389A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18144  00389C  0E1A               	movlw	26
 18145  00389E  6E01               	movwf	i2updateServoPosition@time_us,c
 18146  0038A0  0E00               	movlw	0
 18147  0038A2  6E04               	movwf	i2updateServoPosition@timer+1,c
 18148  0038A4  0E03               	movlw	3
 18149  0038A6  6E03               	movwf	i2updateServoPosition@timer,c
 18150  0038A8  ECCD  F024         	call	i2_updateServoPosition	;wreg free
 18151                           
 18152                           ;sort.c: 578: servo_timer_counter = 0;
 18153  0038AC  0E00               	movlw	0
 18154  0038AE  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18155  0038B0  0E00               	movlw	0
 18156  0038B2  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18157                           
 18158                           ;sort.c: 579: servo_timer_target = 750;
 18159  0038B4  0E02               	movlw	2
 18160  0038B6  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18161  0038B8  0EEE               	movlw	238
 18162  0038BA  6E6F               	movwf	_servo_timer_target,c	;volatile
 18163                           
 18164                           ;sort.c: 580: break;
 18165  0038BC  0012               	return	
 18166  0038BE                     i2l9427:
 18167                           
 18168                           ;sort.c: 583: updateServoPosition(1200, 1);
 18169  0038BE  0E04               	movlw	4
 18170  0038C0  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18171  0038C2  0EB0               	movlw	176
 18172  0038C4  6E01               	movwf	i2updateServoPosition@time_us,c
 18173  0038C6  0E00               	movlw	0
 18174  0038C8  6E04               	movwf	i2updateServoPosition@timer+1,c
 18175  0038CA  0E01               	movlw	1
 18176  0038CC  6E03               	movwf	i2updateServoPosition@timer,c
 18177  0038CE  ECCD  F024         	call	i2_updateServoPosition	;wreg free
 18178                           
 18179                           ;sort.c: 584: updateServoPosition(1050, 3);
 18180  0038D2  0E04               	movlw	4
 18181  0038D4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18182  0038D6  0E1A               	movlw	26
 18183  0038D8  6E01               	movwf	i2updateServoPosition@time_us,c
 18184  0038DA  0E00               	movlw	0
 18185  0038DC  6E04               	movwf	i2updateServoPosition@timer+1,c
 18186  0038DE  0E03               	movlw	3
 18187  0038E0  6E03               	movwf	i2updateServoPosition@timer,c
 18188  0038E2  ECCD  F024         	call	i2_updateServoPosition	;wreg free
 18189                           
 18190                           ;sort.c: 585: servo_timer_counter = 0;
 18191  0038E6  0E00               	movlw	0
 18192  0038E8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18193  0038EA  0E00               	movlw	0
 18194  0038EC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18195                           
 18196                           ;sort.c: 586: servo_timer_target = 9999;
 18197  0038EE  0E27               	movlw	39
 18198  0038F0  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18199  0038F2  0E0F               	movlw	15
 18200  0038F4  6E6F               	movwf	_servo_timer_target,c	;volatile
 18201                           
 18202                           ;sort.c: 588: f_can_distributed = 1;
 18203  0038F6  0E00               	movlw	0
 18204  0038F8  0101               	movlb	1	; () banked
 18205  0038FA  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18206  0038FC  0E01               	movlw	1
 18207  0038FE  6F35               	movwf	_f_can_distributed& (0+255),b
 18208                           
 18209                           ; BSR set to: 1
 18210                           ;sort.c: 589: if(f_lastCan == 1){
 18211  003900  0100               	movlb	0	; () banked
 18212  003902  05EE               	decf	_f_lastCan& (0+255),w,b
 18213  003904  0100               	movlb	0	; () banked
 18214  003906  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18215  003908  A4D8               	btfss	status,2,c
 18216  00390A  0012               	return	
 18217                           
 18218                           ; BSR set to: 0
 18219                           ;sort.c: 590: machine_state = DoneSorting_state;
 18220  00390C  0E02               	movlw	2
 18221  00390E  0100               	movlb	0	; () banked
 18222  003910  6FFC               	movwf	_machine_state& (0+255),b
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;sort.c: 596: }
 18226                           
 18227                           ; BSR set to: 0
 18228                           ;sort.c: 595: break;
 18229                           
 18230                           ;sort.c: 594: default:
 18231                           
 18232                           ; BSR set to: 0
 18233                           ;sort.c: 591: }
 18234                           ;sort.c: 592: break;
 18235  003912  0012               	return	
 18236  003914                     i2l9441:
 18237  003914  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18238  003918  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18239                           
 18240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18241                           ; Switch size 1, requested type "space"
 18242                           ; Number of cases is 2, Range of values is 4 to 5
 18243                           ; switch strategies available:
 18244                           ; Name         Instructions Cycles
 18245                           ; simple_byte            7     4 (average)
 18246                           ;	Chosen strategy is simple_byte
 18247  00391C  500A               	movf	??_updateServoStates+1,w,c
 18248  00391E  0A04               	xorlw	4	; case 4
 18249  003920  B4D8               	btfsc	status,2,c
 18250  003922  D004               	goto	i2l10057
 18251  003924  0A01               	xorlw	1	; case 5
 18252  003926  A4D8               	btfss	status,2,c
 18253  003928  0012               	return	
 18254  00392A  D008               	goto	i2l10059
 18255  00392C                     i2l10057:
 18256                           
 18257                           ; Switch size 1, requested type "space"
 18258                           ; Number of cases is 2, Range of values is 26 to 236
 18259                           ; switch strategies available:
 18260                           ; Name         Instructions Cycles
 18261                           ; simple_byte            7     4 (average)
 18262                           ;	Chosen strategy is simple_byte
 18263  00392C  5009               	movf	??_updateServoStates,w,c
 18264  00392E  0A1A               	xorlw	26	; case 26
 18265  003930  B4D8               	btfsc	status,2,c
 18266  003932  D7C5               	goto	i2l9427
 18267  003934  0AF6               	xorlw	246	; case 236
 18268  003936  A4D8               	btfss	status,2,c
 18269  003938  0012               	return	
 18270  00393A  D79B               	goto	i2l9415
 18271  00393C                     i2l10059:
 18272                           
 18273                           ; Switch size 1, requested type "space"
 18274                           ; Number of cases is 1, Range of values is 110 to 110
 18275                           ; switch strategies available:
 18276                           ; Name         Instructions Cycles
 18277                           ; simple_byte            4     3 (average)
 18278                           ;	Chosen strategy is simple_byte
 18279  00393C  5009               	movf	??_updateServoStates,w,c
 18280  00393E  0A6E               	xorlw	110	; case 110
 18281  003940  A4D8               	btfss	status,2,c
 18282  003942  0012               	return	
 18283  003944  D7A9               	goto	i2l9421
 18284  003946                     __end_of_updateServoStates:
 18285                           	opt stack 0
 18286                           pclatu	equ	0xFFB
 18287                           pclath	equ	0xFFA
 18288                           tblptru	equ	0xFF8
 18289                           tblptrh	equ	0xFF7
 18290                           tblptrl	equ	0xFF6
 18291                           tablat	equ	0xFF5
 18292                           prodh	equ	0xFF4
 18293                           prodl	equ	0xFF3
 18294                           intcon	equ	0xFF2
 18295                           intcon2	equ	0xFF1
 18296                           intcon3	equ	0xFF0
 18297                           indf0	equ	0xFEF
 18298                           postinc0	equ	0xFEE
 18299                           fsr0h	equ	0xFEA
 18300                           fsr0l	equ	0xFE9
 18301                           wreg	equ	0xFE8
 18302                           postdec1	equ	0xFE5
 18303                           fsr1h	equ	0xFE2
 18304                           fsr1l	equ	0xFE1
 18305                           indf2	equ	0xFDF
 18306                           postinc2	equ	0xFDE
 18307                           postdec2	equ	0xFDD
 18308                           fsr2h	equ	0xFDA
 18309                           fsr2l	equ	0xFD9
 18310                           status	equ	0xFD8
 18311                           
 18312 ;; *************** function i2_updateServoPosition *****************
 18313 ;; Defined at:
 18314 ;;		line 516 in file "sort.c"
 18315 ;; Parameters:    Size  Location     Type
 18316 ;;  time_us         2    0[COMRAM] int 
 18317 ;;  timer           2    2[COMRAM] int 
 18318 ;; Auto vars:     Size  Location     Type
 18319 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18320 ;; Return value:  Size  Location     Type
 18321 ;;                  1    wreg      void 
 18322 ;; Registers used:
 18323 ;;		wreg, status,2, status,0
 18324 ;; Tracked objects:
 18325 ;;		On entry : 0/0
 18326 ;;		On exit  : 0/0
 18327 ;;		Unchanged: 0/0
 18328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18329 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18330 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18331 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18332 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18333 ;;Total ram usage:        8 bytes
 18334 ;; Hardware stack levels used:    1
 18335 ;; This function calls:
 18336 ;;		Nothing
 18337 ;; This function is called by:
 18338 ;;		_updateServoStates
 18339 ;; This function uses a non-reentrant model
 18340 ;;
 18341                           
 18342                           	psect	text61
 18343  00499A                     __ptext61:
 18344                           	opt stack 0
 18345  00499A                     i2_updateServoPosition:
 18346                           	opt stack 22
 18347                           
 18348                           ;sort.c: 517: unsigned int my_time = 65535 - time_us;
 18349                           
 18350                           ;incstack = 0
 18351  00499A  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18352  00499E  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18353  0049A2  1E05               	comf	??i2_updateServoPosition,f,c
 18354  0049A4  1E06               	comf	??i2_updateServoPosition+1,f,c
 18355  0049A6  4A05               	infsnz	??i2_updateServoPosition,f,c
 18356  0049A8  2A06               	incf	??i2_updateServoPosition+1,f,c
 18357  0049AA  0EFF               	movlw	255
 18358  0049AC  2405               	addwf	??i2_updateServoPosition,w,c
 18359  0049AE  6E07               	movwf	i2updateServoPosition@my_time,c
 18360  0049B0  0EFF               	movlw	255
 18361  0049B2  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18362  0049B4  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18363                           
 18364                           ;sort.c: 518: switch(timer){
 18365  0049B6  D019               	goto	i2l8595
 18366  0049B8                     i2l8589:
 18367                           
 18368                           ;sort.c: 520: servoTimes[0] = my_time >> 8;
 18369  0049B8  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18370  0049BA  0100               	movlb	0	; () banked
 18371  0049BC  6FDA               	movwf	_servoTimes& (0+255),b
 18372  0049BE  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18373                           
 18374                           ;sort.c: 521: servoTimes[1] = my_time & 0xFF;
 18375  0049C0  5007               	movf	i2updateServoPosition@my_time,w,c
 18376  0049C2  0100               	movlb	0	; () banked
 18377  0049C4  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18378  0049C6  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18379                           
 18380                           ; BSR set to: 0
 18381                           ;sort.c: 523: pan_servo_state = time_us;
 18382  0049C8  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18383  0049CC  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18384  0049D0                     i2l886:
 18385                           
 18386                           ;sort.c: 525: servoTimes[2] = my_time >> 8;
 18387  0049D0  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18388  0049D2  0100               	movlb	0	; () banked
 18389  0049D4  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18390  0049D6  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18391                           
 18392                           ;sort.c: 526: servoTimes[3] = my_time & 0xFF;
 18393  0049D8  5007               	movf	i2updateServoPosition@my_time,w,c
 18394  0049DA  0100               	movlb	0	; () banked
 18395  0049DC  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18396  0049DE  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;sort.c: 528: tilt_servo_state = time_us;
 18400  0049E0  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18401  0049E4  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18402                           
 18403                           ;sort.c: 529: }
 18404  0049E8  0012               	return	
 18405  0049EA                     i2l8595:
 18406  0049EA  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18407  0049EE  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18408                           
 18409                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18410                           ; Switch size 1, requested type "space"
 18411                           ; Number of cases is 1, Range of values is 0 to 0
 18412                           ; switch strategies available:
 18413                           ; Name         Instructions Cycles
 18414                           ; simple_byte            4     3 (average)
 18415                           ;	Chosen strategy is simple_byte
 18416  0049F2  5006               	movf	??i2_updateServoPosition+1,w,c
 18417  0049F4  0A00               	xorlw	0	; case 0
 18418  0049F6  A4D8               	btfss	status,2,c
 18419  0049F8  0012               	return	
 18420                           
 18421                           ; Switch size 1, requested type "space"
 18422                           ; Number of cases is 2, Range of values is 1 to 3
 18423                           ; switch strategies available:
 18424                           ; Name         Instructions Cycles
 18425                           ; simple_byte            7     4 (average)
 18426                           ;	Chosen strategy is simple_byte
 18427  0049FA  5005               	movf	??i2_updateServoPosition,w,c
 18428  0049FC  0A01               	xorlw	1	; case 1
 18429  0049FE  B4D8               	btfsc	status,2,c
 18430  004A00  D7DB               	goto	i2l8589
 18431  004A02  0A02               	xorlw	2	; case 3
 18432  004A04  A4D8               	btfss	status,2,c
 18433  004A06  0012               	return	
 18434  004A08  D7E3               	goto	i2l886
 18435  004A0A                     __end_ofi2_updateServoPosition:
 18436                           	opt stack 0
 18437                           pclatu	equ	0xFFB
 18438                           pclath	equ	0xFFA
 18439                           tblptru	equ	0xFF8
 18440                           tblptrh	equ	0xFF7
 18441                           tblptrl	equ	0xFF6
 18442                           tablat	equ	0xFF5
 18443                           prodh	equ	0xFF4
 18444                           prodl	equ	0xFF3
 18445                           intcon	equ	0xFF2
 18446                           intcon2	equ	0xFF1
 18447                           intcon3	equ	0xFF0
 18448                           indf0	equ	0xFEF
 18449                           postinc0	equ	0xFEE
 18450                           fsr0h	equ	0xFEA
 18451                           fsr0l	equ	0xFE9
 18452                           wreg	equ	0xFE8
 18453                           postdec1	equ	0xFE5
 18454                           fsr1h	equ	0xFE2
 18455                           fsr1l	equ	0xFE1
 18456                           indf2	equ	0xFDF
 18457                           postinc2	equ	0xFDE
 18458                           postdec2	equ	0xFDD
 18459                           fsr2h	equ	0xFDA
 18460                           fsr2l	equ	0xFD9
 18461                           status	equ	0xFD8
 18462                           
 18463 ;; *************** function _updateMenu *****************
 18464 ;; Defined at:
 18465 ;;		line 216 in file "UI.c"
 18466 ;; Parameters:    Size  Location     Type
 18467 ;;		None
 18468 ;; Auto vars:     Size  Location     Type
 18469 ;;		None
 18470 ;; Return value:  Size  Location     Type
 18471 ;;                  1    wreg      void 
 18472 ;; Registers used:
 18473 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18474 ;; Tracked objects:
 18475 ;;		On entry : 0/0
 18476 ;;		On exit  : 0/0
 18477 ;;		Unchanged: 0/0
 18478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18481 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18483 ;;Total ram usage:        2 bytes
 18484 ;; Hardware stack levels used:    1
 18485 ;; Hardware stack levels required when called:    5
 18486 ;; This function calls:
 18487 ;;		_change_state_to_logs_11
 18488 ;;		_change_state_to_logs_12
 18489 ;;		_change_state_to_logs_22
 18490 ;;		_change_state_to_logs_23
 18491 ;;		_change_state_to_logs_33
 18492 ;;		_change_state_to_logs_34
 18493 ;;		_change_state_to_menu_11
 18494 ;;		_change_state_to_menu_23
 18495 ;;		_dispLogs
 18496 ;;		_inputHandler
 18497 ;;		i2_change_state_to_menu_12
 18498 ;;		i2_change_state_to_menu_22
 18499 ;;		i2_change_state_to_menu_start
 18500 ;; This function is called by:
 18501 ;;		_handler
 18502 ;; This function uses a non-reentrant model
 18503 ;;
 18504                           
 18505                           	psect	text62
 18506  002728                     __ptext62:
 18507                           	opt stack 0
 18508  002728                     _updateMenu:
 18509                           	opt stack 18
 18510                           
 18511                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 18512                           
 18513                           ;incstack = 0
 18514  002728  0E00               	movlw	0
 18515  00272A  6E76               	movwf	_up+1,c
 18516  00272C  0E00               	movlw	0
 18517  00272E  6E75               	movwf	_up,c
 18518  002730  0E00               	movlw	0
 18519  002732  6E5E               	movwf	_down+1,c
 18520  002734  0E00               	movlw	0
 18521  002736  6E5D               	movwf	_down,c
 18522  002738  0E00               	movlw	0
 18523  00273A  6E60               	movwf	_enter+1,c
 18524  00273C  0E00               	movlw	0
 18525  00273E  6E5F               	movwf	_enter,c
 18526  002740  0E00               	movlw	0
 18527  002742  6E5C               	movwf	_back+1,c
 18528  002744  0E00               	movlw	0
 18529  002746  6E5B               	movwf	_back,c
 18530                           
 18531                           ;UI.c: 218: (INTCONbits.GIE = 0);
 18532  002748  9EF2               	bcf	intcon,7,c	;volatile
 18533                           
 18534                           ;UI.c: 220: if (inputHandler()
 18535                           ;UI.c: 223: ){
 18536  00274A  ECC9  F01A         	call	_inputHandler	;wreg free
 18537  00274E  502A               	movf	?_inputHandler,w,c
 18538  002750  102B               	iorwf	?_inputHandler+1,w,c
 18539  002752  A4D8               	btfss	status,2,c
 18540  002754  D112               	goto	i2l9129
 18541  002756  D146               	goto	i2l263
 18542  002758                     i2l8981:
 18543                           
 18544                           ;UI.c: 227: change_state_to_menu_11();
 18545  002758  EC38  F028         	call	_change_state_to_menu_11	;wreg free
 18546                           
 18547                           ;UI.c: 228: break;
 18548  00275C  D143               	goto	i2l263
 18549  00275E                     i2l8983:
 18550                           
 18551                           ;UI.c: 231: if(up){
 18552  00275E  5075               	movf	_up,w,c
 18553  002760  1076               	iorwf	_up+1,w,c
 18554  002762  B4D8               	btfsc	status,2,c
 18555  002764  D003               	goto	i2l8987
 18556                           
 18557                           ;UI.c: 232: change_state_to_menu_23();
 18558  002766  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 18559                           
 18560                           ;UI.c: 233: }
 18561  00276A  D13C               	goto	i2l263
 18562  00276C                     i2l8987:
 18563                           
 18564                           ;UI.c: 234: else if(down){
 18565  00276C  505D               	movf	_down,w,c
 18566  00276E  105E               	iorwf	_down+1,w,c
 18567  002770  B4D8               	btfsc	status,2,c
 18568  002772  D003               	goto	i2l8991
 18569                           
 18570                           ;UI.c: 235: change_state_to_menu_12();
 18571  002774  EC08  F028         	call	i2_change_state_to_menu_12	;wreg free
 18572                           
 18573                           ;UI.c: 236: }
 18574  002778  D135               	goto	i2l263
 18575  00277A                     i2l8991:
 18576                           
 18577                           ;UI.c: 237: else if(enter){
 18578  00277A  505F               	movf	_enter,w,c
 18579  00277C  1060               	iorwf	_enter+1,w,c
 18580  00277E  B4D8               	btfsc	status,2,c
 18581  002780  D131               	goto	i2l263
 18582                           
 18583                           ;UI.c: 238: change_state_to_menu_start();
 18584  002782  EC4B  F029         	call	i2_change_state_to_menu_start	;wreg free
 18585                           
 18586                           ;UI.c: 239: }
 18587                           ;UI.c: 240: break;
 18588  002786  D12E               	goto	i2l263
 18589  002788                     i2l8995:
 18590                           
 18591                           ;UI.c: 243: if(up){
 18592  002788  5075               	movf	_up,w,c
 18593  00278A  1076               	iorwf	_up+1,w,c
 18594  00278C  B4D8               	btfsc	status,2,c
 18595  00278E  D003               	goto	i2l8999
 18596                           
 18597                           ;UI.c: 244: change_state_to_menu_11();
 18598  002790  EC38  F028         	call	_change_state_to_menu_11	;wreg free
 18599                           
 18600                           ;UI.c: 245: }
 18601  002794  D127               	goto	i2l263
 18602  002796                     i2l8999:
 18603                           
 18604                           ;UI.c: 246: else if(down){
 18605  002796  505D               	movf	_down,w,c
 18606  002798  105E               	iorwf	_down+1,w,c
 18607  00279A  B4D8               	btfsc	status,2,c
 18608  00279C  D011               	goto	i2l9015
 18609                           
 18610                           ;UI.c: 247: change_state_to_menu_23();
 18611  00279E  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 18612                           
 18613                           ;UI.c: 248: }
 18614  0027A2  D120               	goto	i2l263
 18615  0027A4                     i2l9007:
 18616                           
 18617                           ;UI.c: 255: if(up){
 18618  0027A4  5075               	movf	_up,w,c
 18619  0027A6  1076               	iorwf	_up+1,w,c
 18620  0027A8  B4D8               	btfsc	status,2,c
 18621  0027AA  D003               	goto	i2l9011
 18622                           
 18623                           ;UI.c: 256: change_state_to_menu_11();
 18624  0027AC  EC38  F028         	call	_change_state_to_menu_11	;wreg free
 18625                           
 18626                           ;UI.c: 257: }
 18627  0027B0  D119               	goto	i2l263
 18628  0027B2                     i2l9011:
 18629                           
 18630                           ;UI.c: 258: else if(down){
 18631  0027B2  505D               	movf	_down,w,c
 18632  0027B4  105E               	iorwf	_down+1,w,c
 18633  0027B6  B4D8               	btfsc	status,2,c
 18634  0027B8  D003               	goto	i2l9015
 18635                           
 18636                           ;UI.c: 259: change_state_to_menu_23();
 18637  0027BA  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 18638                           
 18639                           ;UI.c: 260: }
 18640  0027BE  D112               	goto	i2l263
 18641  0027C0                     i2l9015:
 18642                           
 18643                           ;UI.c: 261: else if(enter){
 18644  0027C0  505F               	movf	_enter,w,c
 18645  0027C2  1060               	iorwf	_enter+1,w,c
 18646  0027C4  B4D8               	btfsc	status,2,c
 18647  0027C6  D10E               	goto	i2l263
 18648                           
 18649                           ;UI.c: 262: machine_state = Sorting_state;
 18650  0027C8  0E01               	movlw	1
 18651  0027CA  0100               	movlb	0	; () banked
 18652  0027CC  6FFC               	movwf	_machine_state& (0+255),b
 18653                           
 18654                           ; BSR set to: 0
 18655                           ;UI.c: 263: }
 18656                           ;UI.c: 264: break;
 18657                           
 18658                           ; BSR set to: 0
 18659                           
 18660                           ; BSR set to: 0
 18661  0027CE  D10A               	goto	i2l263
 18662  0027D0                     i2l9019:
 18663                           
 18664                           ;UI.c: 267: if(up){
 18665  0027D0  5075               	movf	_up,w,c
 18666  0027D2  1076               	iorwf	_up+1,w,c
 18667  0027D4  B4D8               	btfsc	status,2,c
 18668  0027D6  D003               	goto	i2l9023
 18669                           
 18670                           ;UI.c: 268: change_state_to_menu_22();
 18671  0027D8  ECF0  F027         	call	i2_change_state_to_menu_22	;wreg free
 18672                           
 18673                           ;UI.c: 269: }
 18674  0027DC  D103               	goto	i2l263
 18675  0027DE                     i2l9023:
 18676                           
 18677                           ;UI.c: 270: else if(down){
 18678  0027DE  505D               	movf	_down,w,c
 18679  0027E0  105E               	iorwf	_down+1,w,c
 18680  0027E2  B4D8               	btfsc	status,2,c
 18681  0027E4  D003               	goto	i2l9027
 18682                           
 18683                           ;UI.c: 271: change_state_to_menu_11();
 18684  0027E6  EC38  F028         	call	_change_state_to_menu_11	;wreg free
 18685                           
 18686                           ;UI.c: 272: }
 18687  0027EA  D0FC               	goto	i2l263
 18688  0027EC                     i2l9027:
 18689                           
 18690                           ;UI.c: 273: else if(enter){
 18691  0027EC  505F               	movf	_enter,w,c
 18692  0027EE  1060               	iorwf	_enter+1,w,c
 18693  0027F0  B4D8               	btfsc	status,2,c
 18694  0027F2  D0F8               	goto	i2l263
 18695                           
 18696                           ;UI.c: 274: change_state_to_logs_11();
 18697  0027F4  ECB0  F028         	call	_change_state_to_logs_11	;wreg free
 18698                           
 18699                           ;UI.c: 275: }
 18700                           ;UI.c: 276: break;
 18701  0027F8  D0F5               	goto	i2l263
 18702  0027FA                     i2l9031:
 18703                           
 18704                           ;UI.c: 279: if(up){
 18705  0027FA  5075               	movf	_up,w,c
 18706  0027FC  1076               	iorwf	_up+1,w,c
 18707  0027FE  B4D8               	btfsc	status,2,c
 18708  002800  D003               	goto	i2l9035
 18709                           
 18710                           ;UI.c: 280: change_state_to_logs_34();
 18711  002802  EC50  F028         	call	_change_state_to_logs_34	;wreg free
 18712                           
 18713                           ;UI.c: 281: }
 18714  002806  D0EE               	goto	i2l263
 18715  002808                     i2l9035:
 18716                           
 18717                           ;UI.c: 282: else if(down){
 18718  002808  505D               	movf	_down,w,c
 18719  00280A  105E               	iorwf	_down+1,w,c
 18720  00280C  B4D8               	btfsc	status,2,c
 18721  00280E  D003               	goto	i2l9039
 18722                           
 18723                           ;UI.c: 283: change_state_to_logs_12();
 18724  002810  EC98  F028         	call	_change_state_to_logs_12	;wreg free
 18725                           
 18726                           ;UI.c: 284: }
 18727  002814  D0E7               	goto	i2l263
 18728  002816                     i2l9039:
 18729                           
 18730                           ;UI.c: 285: else if(enter){
 18731  002816  505F               	movf	_enter,w,c
 18732  002818  1060               	iorwf	_enter+1,w,c
 18733  00281A  B4D8               	btfsc	status,2,c
 18734  00281C  D007               	goto	i2l9043
 18735                           
 18736                           ;UI.c: 286: dispLogs(1);
 18737  00281E  0E00               	movlw	0
 18738  002820  6E13               	movwf	dispLogs@myLog+1,c
 18739  002822  0E01               	movlw	1
 18740  002824  6E12               	movwf	dispLogs@myLog,c
 18741  002826  EC85  F029         	call	_dispLogs	;wreg free
 18742                           
 18743                           ;UI.c: 287: }
 18744  00282A  D0DC               	goto	i2l263
 18745  00282C                     i2l9043:
 18746                           
 18747                           ;UI.c: 288: else if(back){
 18748  00282C  505B               	movf	_back,w,c
 18749  00282E  105C               	iorwf	_back+1,w,c
 18750  002830  B4D8               	btfsc	status,2,c
 18751  002832  D0D8               	goto	i2l263
 18752                           
 18753                           ;UI.c: 289: change_state_to_menu_23();
 18754  002834  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 18755                           
 18756                           ;UI.c: 290: }
 18757                           ;UI.c: 291: break;
 18758  002838  D0D5               	goto	i2l263
 18759  00283A                     i2l9047:
 18760                           
 18761                           ;UI.c: 294: if(up){
 18762  00283A  5075               	movf	_up,w,c
 18763  00283C  1076               	iorwf	_up+1,w,c
 18764  00283E  B4D8               	btfsc	status,2,c
 18765  002840  D003               	goto	i2l9051
 18766                           
 18767                           ;UI.c: 295: change_state_to_logs_11();
 18768  002842  ECB0  F028         	call	_change_state_to_logs_11	;wreg free
 18769                           
 18770                           ;UI.c: 296: }
 18771  002846  D0CE               	goto	i2l263
 18772  002848                     i2l9051:
 18773                           
 18774                           ;UI.c: 297: else if(down){
 18775  002848  505D               	movf	_down,w,c
 18776  00284A  105E               	iorwf	_down+1,w,c
 18777  00284C  B4D8               	btfsc	status,2,c
 18778  00284E  D003               	goto	i2l9055
 18779                           
 18780                           ;UI.c: 298: change_state_to_logs_23();
 18781  002850  ECDF  F028         	call	_change_state_to_logs_23	;wreg free
 18782                           
 18783                           ;UI.c: 299: }
 18784  002854  D0C7               	goto	i2l263
 18785  002856                     i2l9055:
 18786                           
 18787                           ;UI.c: 300: else if(enter){
 18788  002856  505F               	movf	_enter,w,c
 18789  002858  1060               	iorwf	_enter+1,w,c
 18790  00285A  B4D8               	btfsc	status,2,c
 18791  00285C  D007               	goto	i2l9059
 18792                           
 18793                           ;UI.c: 301: dispLogs(2);
 18794  00285E  0E00               	movlw	0
 18795  002860  6E13               	movwf	dispLogs@myLog+1,c
 18796  002862  0E02               	movlw	2
 18797  002864  6E12               	movwf	dispLogs@myLog,c
 18798  002866  EC85  F029         	call	_dispLogs	;wreg free
 18799                           
 18800                           ;UI.c: 302: }
 18801  00286A  D0BC               	goto	i2l263
 18802  00286C                     i2l9059:
 18803                           
 18804                           ;UI.c: 303: else if(back){
 18805  00286C  505B               	movf	_back,w,c
 18806  00286E  105C               	iorwf	_back+1,w,c
 18807  002870  B4D8               	btfsc	status,2,c
 18808  002872  D0B8               	goto	i2l263
 18809                           
 18810                           ;UI.c: 304: change_state_to_menu_23();
 18811  002874  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 18812                           
 18813                           ;UI.c: 305: }
 18814                           ;UI.c: 306: break;
 18815  002878  D0B5               	goto	i2l263
 18816  00287A                     i2l9063:
 18817                           
 18818                           ;UI.c: 309: if(up){
 18819  00287A  5075               	movf	_up,w,c
 18820  00287C  1076               	iorwf	_up+1,w,c
 18821  00287E  B4D8               	btfsc	status,2,c
 18822  002880  D003               	goto	i2l9067
 18823                           
 18824                           ;UI.c: 310: change_state_to_logs_11();
 18825  002882  ECB0  F028         	call	_change_state_to_logs_11	;wreg free
 18826                           
 18827                           ;UI.c: 311: }
 18828  002886  D0AE               	goto	i2l263
 18829  002888                     i2l9067:
 18830                           
 18831                           ;UI.c: 312: else if(down){
 18832  002888  505D               	movf	_down,w,c
 18833  00288A  105E               	iorwf	_down+1,w,c
 18834  00288C  B4D8               	btfsc	status,2,c
 18835  00288E  D003               	goto	i2l9071
 18836                           
 18837                           ;UI.c: 313: change_state_to_logs_23();
 18838  002890  ECDF  F028         	call	_change_state_to_logs_23	;wreg free
 18839                           
 18840                           ;UI.c: 314: }
 18841  002894  D0A7               	goto	i2l263
 18842  002896                     i2l9071:
 18843                           
 18844                           ;UI.c: 315: else if(enter){
 18845  002896  505F               	movf	_enter,w,c
 18846  002898  1060               	iorwf	_enter+1,w,c
 18847  00289A  B4D8               	btfsc	status,2,c
 18848  00289C  D007               	goto	i2l9075
 18849                           
 18850                           ;UI.c: 316: dispLogs(2);
 18851  00289E  0E00               	movlw	0
 18852  0028A0  6E13               	movwf	dispLogs@myLog+1,c
 18853  0028A2  0E02               	movlw	2
 18854  0028A4  6E12               	movwf	dispLogs@myLog,c
 18855  0028A6  EC85  F029         	call	_dispLogs	;wreg free
 18856                           
 18857                           ;UI.c: 317: }
 18858  0028AA  D09C               	goto	i2l263
 18859  0028AC                     i2l9075:
 18860                           
 18861                           ;UI.c: 318: else if(back){
 18862  0028AC  505B               	movf	_back,w,c
 18863  0028AE  105C               	iorwf	_back+1,w,c
 18864  0028B0  B4D8               	btfsc	status,2,c
 18865  0028B2  D098               	goto	i2l263
 18866                           
 18867                           ;UI.c: 319: change_state_to_menu_23();
 18868  0028B4  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 18869                           
 18870                           ;UI.c: 320: }
 18871                           ;UI.c: 321: break;
 18872  0028B8  D095               	goto	i2l263
 18873  0028BA                     i2l9079:
 18874                           
 18875                           ;UI.c: 324: if(up){
 18876  0028BA  5075               	movf	_up,w,c
 18877  0028BC  1076               	iorwf	_up+1,w,c
 18878  0028BE  B4D8               	btfsc	status,2,c
 18879  0028C0  D003               	goto	i2l9083
 18880                           
 18881                           ;UI.c: 325: change_state_to_logs_22();
 18882  0028C2  EC80  F028         	call	_change_state_to_logs_22	;wreg free
 18883                           
 18884                           ;UI.c: 326: }
 18885  0028C6  D08E               	goto	i2l263
 18886  0028C8                     i2l9083:
 18887                           
 18888                           ;UI.c: 327: else if(down){
 18889  0028C8  505D               	movf	_down,w,c
 18890  0028CA  105E               	iorwf	_down+1,w,c
 18891  0028CC  B4D8               	btfsc	status,2,c
 18892  0028CE  D003               	goto	i2l9087
 18893                           
 18894                           ;UI.c: 328: change_state_to_logs_34();
 18895  0028D0  EC50  F028         	call	_change_state_to_logs_34	;wreg free
 18896                           
 18897                           ;UI.c: 329: }
 18898  0028D4  D087               	goto	i2l263
 18899  0028D6                     i2l9087:
 18900                           
 18901                           ;UI.c: 330: else if(enter){
 18902  0028D6  505F               	movf	_enter,w,c
 18903  0028D8  1060               	iorwf	_enter+1,w,c
 18904  0028DA  B4D8               	btfsc	status,2,c
 18905  0028DC  D007               	goto	i2l9091
 18906                           
 18907                           ;UI.c: 331: dispLogs(3);
 18908  0028DE  0E00               	movlw	0
 18909  0028E0  6E13               	movwf	dispLogs@myLog+1,c
 18910  0028E2  0E03               	movlw	3
 18911  0028E4  6E12               	movwf	dispLogs@myLog,c
 18912  0028E6  EC85  F029         	call	_dispLogs	;wreg free
 18913                           
 18914                           ;UI.c: 332: }
 18915  0028EA  D07C               	goto	i2l263
 18916  0028EC                     i2l9091:
 18917                           
 18918                           ;UI.c: 333: else if(back){
 18919  0028EC  505B               	movf	_back,w,c
 18920  0028EE  105C               	iorwf	_back+1,w,c
 18921  0028F0  B4D8               	btfsc	status,2,c
 18922  0028F2  D078               	goto	i2l263
 18923                           
 18924                           ;UI.c: 334: change_state_to_menu_23();
 18925  0028F4  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 18926                           
 18927                           ;UI.c: 335: }
 18928                           ;UI.c: 336: break;
 18929  0028F8  D075               	goto	i2l263
 18930  0028FA                     i2l9095:
 18931                           
 18932                           ;UI.c: 339: if(up){
 18933  0028FA  5075               	movf	_up,w,c
 18934  0028FC  1076               	iorwf	_up+1,w,c
 18935  0028FE  B4D8               	btfsc	status,2,c
 18936  002900  D003               	goto	i2l9099
 18937                           
 18938                           ;UI.c: 340: change_state_to_logs_22();
 18939  002902  EC80  F028         	call	_change_state_to_logs_22	;wreg free
 18940                           
 18941                           ;UI.c: 341: }
 18942  002906  D06E               	goto	i2l263
 18943  002908                     i2l9099:
 18944                           
 18945                           ;UI.c: 342: else if(down){
 18946  002908  505D               	movf	_down,w,c
 18947  00290A  105E               	iorwf	_down+1,w,c
 18948  00290C  B4D8               	btfsc	status,2,c
 18949  00290E  D003               	goto	i2l9103
 18950                           
 18951                           ;UI.c: 343: change_state_to_logs_34();
 18952  002910  EC50  F028         	call	_change_state_to_logs_34	;wreg free
 18953                           
 18954                           ;UI.c: 344: }
 18955  002914  D067               	goto	i2l263
 18956  002916                     i2l9103:
 18957                           
 18958                           ;UI.c: 345: else if(enter){
 18959  002916  505F               	movf	_enter,w,c
 18960  002918  1060               	iorwf	_enter+1,w,c
 18961  00291A  B4D8               	btfsc	status,2,c
 18962  00291C  D007               	goto	i2l9107
 18963                           
 18964                           ;UI.c: 346: dispLogs(3);
 18965  00291E  0E00               	movlw	0
 18966  002920  6E13               	movwf	dispLogs@myLog+1,c
 18967  002922  0E03               	movlw	3
 18968  002924  6E12               	movwf	dispLogs@myLog,c
 18969  002926  EC85  F029         	call	_dispLogs	;wreg free
 18970                           
 18971                           ;UI.c: 347: }
 18972  00292A  D05C               	goto	i2l263
 18973  00292C                     i2l9107:
 18974                           
 18975                           ;UI.c: 348: else if(back){
 18976  00292C  505B               	movf	_back,w,c
 18977  00292E  105C               	iorwf	_back+1,w,c
 18978  002930  B4D8               	btfsc	status,2,c
 18979  002932  D058               	goto	i2l263
 18980                           
 18981                           ;UI.c: 349: change_state_to_menu_23();
 18982  002934  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 18983                           
 18984                           ;UI.c: 350: }
 18985                           ;UI.c: 351: break;
 18986  002938  D055               	goto	i2l263
 18987  00293A                     i2l9111:
 18988                           
 18989                           ;UI.c: 354: if(up){
 18990  00293A  5075               	movf	_up,w,c
 18991  00293C  1076               	iorwf	_up+1,w,c
 18992  00293E  B4D8               	btfsc	status,2,c
 18993  002940  D003               	goto	i2l9115
 18994                           
 18995                           ;UI.c: 355: change_state_to_logs_33();
 18996  002942  EC68  F028         	call	_change_state_to_logs_33	;wreg free
 18997                           
 18998                           ;UI.c: 356: }
 18999  002946  D04E               	goto	i2l263
 19000  002948                     i2l9115:
 19001                           
 19002                           ;UI.c: 357: else if(down){
 19003  002948  505D               	movf	_down,w,c
 19004  00294A  105E               	iorwf	_down+1,w,c
 19005  00294C  B4D8               	btfsc	status,2,c
 19006  00294E  D003               	goto	i2l9119
 19007                           
 19008                           ;UI.c: 358: change_state_to_logs_11();
 19009  002950  ECB0  F028         	call	_change_state_to_logs_11	;wreg free
 19010                           
 19011                           ;UI.c: 359: }
 19012  002954  D047               	goto	i2l263
 19013  002956                     i2l9119:
 19014                           
 19015                           ;UI.c: 360: else if(enter){
 19016  002956  505F               	movf	_enter,w,c
 19017  002958  1060               	iorwf	_enter+1,w,c
 19018  00295A  B4D8               	btfsc	status,2,c
 19019  00295C  D007               	goto	i2l9123
 19020                           
 19021                           ;UI.c: 361: dispLogs(4);
 19022  00295E  0E00               	movlw	0
 19023  002960  6E13               	movwf	dispLogs@myLog+1,c
 19024  002962  0E04               	movlw	4
 19025  002964  6E12               	movwf	dispLogs@myLog,c
 19026  002966  EC85  F029         	call	_dispLogs	;wreg free
 19027                           
 19028                           ;UI.c: 362: }
 19029  00296A  D03C               	goto	i2l263
 19030  00296C                     i2l9123:
 19031                           
 19032                           ;UI.c: 363: else if(back){
 19033  00296C  505B               	movf	_back,w,c
 19034  00296E  105C               	iorwf	_back+1,w,c
 19035  002970  B4D8               	btfsc	status,2,c
 19036  002972  D038               	goto	i2l263
 19037                           
 19038                           ;UI.c: 364: change_state_to_menu_23();
 19039  002974  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 19040                           
 19041                           ;UI.c: 370: }
 19042                           
 19043                           ;UI.c: 369: break;
 19044                           
 19045                           ;UI.c: 368: default:
 19046                           
 19047                           ;UI.c: 365: }
 19048                           ;UI.c: 366: break;
 19049  002978  D035               	goto	i2l263
 19050  00297A                     i2l9129:
 19051  00297A  C0EC  F043         	movff	_cur_state,??_updateMenu
 19052  00297E  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 19053                           
 19054                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19055                           ; Switch size 1, requested type "space"
 19056                           ; Number of cases is 3, Range of values is 0 to 4
 19057                           ; switch strategies available:
 19058                           ; Name         Instructions Cycles
 19059                           ; simple_byte           10     6 (average)
 19060                           ;	Chosen strategy is simple_byte
 19061  002982  5044               	movf	??_updateMenu+1,w,c
 19062  002984  0A00               	xorlw	0	; case 0
 19063  002986  B4D8               	btfsc	status,2,c
 19064  002988  D007               	goto	i2l10063
 19065  00298A  0A03               	xorlw	3	; case 3
 19066  00298C  B4D8               	btfsc	status,2,c
 19067  00298E  D015               	goto	i2l10065
 19068  002990  0A07               	xorlw	7	; case 4
 19069  002992  B4D8               	btfsc	status,2,c
 19070  002994  D020               	goto	i2l10067
 19071  002996  D026               	goto	i2l263
 19072  002998                     i2l10063:
 19073                           
 19074                           ; Switch size 1, requested type "space"
 19075                           ; Number of cases is 5, Range of values is 0 to 23
 19076                           ; switch strategies available:
 19077                           ; Name         Instructions Cycles
 19078                           ; simple_byte           16     9 (average)
 19079                           ;	Chosen strategy is simple_byte
 19080  002998  5043               	movf	??_updateMenu,w,c
 19081  00299A  0A00               	xorlw	0	; case 0
 19082  00299C  B4D8               	btfsc	status,2,c
 19083  00299E  D6DC               	goto	i2l8981
 19084  0029A0  0A0B               	xorlw	11	; case 11
 19085  0029A2  B4D8               	btfsc	status,2,c
 19086  0029A4  D6DC               	goto	i2l8983
 19087  0029A6  0A07               	xorlw	7	; case 12
 19088  0029A8  B4D8               	btfsc	status,2,c
 19089  0029AA  D6EE               	goto	i2l8995
 19090  0029AC  0A1A               	xorlw	26	; case 22
 19091  0029AE  B4D8               	btfsc	status,2,c
 19092  0029B0  D6F9               	goto	i2l9007
 19093  0029B2  0A01               	xorlw	1	; case 23
 19094  0029B4  B4D8               	btfsc	status,2,c
 19095  0029B6  D70C               	goto	i2l9019
 19096  0029B8  D015               	goto	i2l263
 19097  0029BA                     i2l10065:
 19098                           
 19099                           ; Switch size 1, requested type "space"
 19100                           ; Number of cases is 4, Range of values is 243 to 255
 19101                           ; switch strategies available:
 19102                           ; Name         Instructions Cycles
 19103                           ; simple_byte           13     7 (average)
 19104                           ;	Chosen strategy is simple_byte
 19105  0029BA  5043               	movf	??_updateMenu,w,c
 19106  0029BC  0AF3               	xorlw	243	; case 243
 19107  0029BE  B4D8               	btfsc	status,2,c
 19108  0029C0  D71C               	goto	i2l9031
 19109  0029C2  0A07               	xorlw	7	; case 244
 19110  0029C4  B4D8               	btfsc	status,2,c
 19111  0029C6  D739               	goto	i2l9047
 19112  0029C8  0A0A               	xorlw	10	; case 254
 19113  0029CA  B4D8               	btfsc	status,2,c
 19114  0029CC  D756               	goto	i2l9063
 19115  0029CE  0A01               	xorlw	1	; case 255
 19116  0029D0  B4D8               	btfsc	status,2,c
 19117  0029D2  D773               	goto	i2l9079
 19118  0029D4  D007               	goto	i2l263
 19119  0029D6                     i2l10067:
 19120                           
 19121                           ; Switch size 1, requested type "space"
 19122                           ; Number of cases is 2, Range of values is 9 to 10
 19123                           ; switch strategies available:
 19124                           ; Name         Instructions Cycles
 19125                           ; simple_byte            7     4 (average)
 19126                           ;	Chosen strategy is simple_byte
 19127  0029D6  5043               	movf	??_updateMenu,w,c
 19128  0029D8  0A09               	xorlw	9	; case 9
 19129  0029DA  B4D8               	btfsc	status,2,c
 19130  0029DC  D78E               	goto	i2l9095
 19131  0029DE  0A03               	xorlw	3	; case 10
 19132  0029E0  B4D8               	btfsc	status,2,c
 19133  0029E2  D7AB               	goto	i2l9111
 19134  0029E4                     i2l263:
 19135                           
 19136                           ;UI.c: 371: }
 19137                           ;UI.c: 372: (INTCONbits.GIE = 1);
 19138  0029E4  8EF2               	bsf	intcon,7,c	;volatile
 19139  0029E6  0012               	return		;funcret
 19140  0029E8                     __end_of_updateMenu:
 19141                           	opt stack 0
 19142                           pclatu	equ	0xFFB
 19143                           pclath	equ	0xFFA
 19144                           tblptru	equ	0xFF8
 19145                           tblptrh	equ	0xFF7
 19146                           tblptrl	equ	0xFF6
 19147                           tablat	equ	0xFF5
 19148                           prodh	equ	0xFF4
 19149                           prodl	equ	0xFF3
 19150                           intcon	equ	0xFF2
 19151                           intcon2	equ	0xFF1
 19152                           intcon3	equ	0xFF0
 19153                           indf0	equ	0xFEF
 19154                           postinc0	equ	0xFEE
 19155                           fsr0h	equ	0xFEA
 19156                           fsr0l	equ	0xFE9
 19157                           wreg	equ	0xFE8
 19158                           postdec1	equ	0xFE5
 19159                           fsr1h	equ	0xFE2
 19160                           fsr1l	equ	0xFE1
 19161                           indf2	equ	0xFDF
 19162                           postinc2	equ	0xFDE
 19163                           postdec2	equ	0xFDD
 19164                           fsr2h	equ	0xFDA
 19165                           fsr2l	equ	0xFD9
 19166                           status	equ	0xFD8
 19167                           
 19168 ;; *************** function i2_change_state_to_menu_start *****************
 19169 ;; Defined at:
 19170 ;;		line 477 in file "UI.c"
 19171 ;; Parameters:    Size  Location     Type
 19172 ;;		None
 19173 ;; Auto vars:     Size  Location     Type
 19174 ;;		None
 19175 ;; Return value:  Size  Location     Type
 19176 ;;                  1    wreg      void 
 19177 ;; Registers used:
 19178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19179 ;; Tracked objects:
 19180 ;;		On entry : 0/0
 19181 ;;		On exit  : 0/0
 19182 ;;		Unchanged: 0/0
 19183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19188 ;;Total ram usage:        0 bytes
 19189 ;; Hardware stack levels used:    1
 19190 ;; Hardware stack levels required when called:    4
 19191 ;; This function calls:
 19192 ;;		i2_lcdInst
 19193 ;;		i2_printRTC
 19194 ;;		i2_printf
 19195 ;; This function is called by:
 19196 ;;		_updateMenu
 19197 ;;		_handler
 19198 ;; This function uses a non-reentrant model
 19199 ;;
 19200                           
 19201                           	psect	text63
 19202  005296                     __ptext63:
 19203                           	opt stack 0
 19204  005296                     i2_change_state_to_menu_start:
 19205                           	opt stack 19
 19206                           
 19207                           ;UI.c: 478: cur_state = 0;
 19208                           
 19209                           ;incstack = 0
 19210  005296  0E00               	movlw	0
 19211  005298  0100               	movlb	0	; () banked
 19212  00529A  6FED               	movwf	(_cur_state+1)& (0+255),b
 19213  00529C  0E00               	movlw	0
 19214  00529E  6FEC               	movwf	_cur_state& (0+255),b
 19215                           
 19216                           ; BSR set to: 0
 19217                           ;UI.c: 480: lcdInst(0b10000000);;
 19218  0052A0  0E80               	movlw	128
 19219  0052A2  EC23  F02A         	call	i2_lcdInst
 19220                           
 19221                           ;UI.c: 481: printRTC();
 19222  0052A6  ECA0  F018         	call	i2_printRTC	;wreg free
 19223                           
 19224                           ;UI.c: 482: lcdInst(0b11000000);;
 19225  0052AA  0EC0               	movlw	192
 19226  0052AC  EC23  F02A         	call	i2_lcdInst
 19227                           
 19228                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 19229  0052B0  0EF7               	movlw	low STR_30
 19230  0052B2  6E0D               	movwf	i2printf@f,c
 19231  0052B4  0EFD               	movlw	high STR_30
 19232  0052B6  6E0E               	movwf	i2printf@f+1,c
 19233  0052B8  ECF9  F00E         	call	i2_printf	;wreg free
 19234  0052BC  0012               	return		;funcret
 19235  0052BE                     __end_ofi2_change_state_to_menu_start:
 19236                           	opt stack 0
 19237                           pclatu	equ	0xFFB
 19238                           pclath	equ	0xFFA
 19239                           tblptru	equ	0xFF8
 19240                           tblptrh	equ	0xFF7
 19241                           tblptrl	equ	0xFF6
 19242                           tablat	equ	0xFF5
 19243                           prodh	equ	0xFF4
 19244                           prodl	equ	0xFF3
 19245                           intcon	equ	0xFF2
 19246                           intcon2	equ	0xFF1
 19247                           intcon3	equ	0xFF0
 19248                           indf0	equ	0xFEF
 19249                           postinc0	equ	0xFEE
 19250                           fsr0h	equ	0xFEA
 19251                           fsr0l	equ	0xFE9
 19252                           wreg	equ	0xFE8
 19253                           postdec1	equ	0xFE5
 19254                           fsr1h	equ	0xFE2
 19255                           fsr1l	equ	0xFE1
 19256                           indf2	equ	0xFDF
 19257                           postinc2	equ	0xFDE
 19258                           postdec2	equ	0xFDD
 19259                           fsr2h	equ	0xFDA
 19260                           fsr2l	equ	0xFD9
 19261                           status	equ	0xFD8
 19262                           
 19263 ;; *************** function i2_printRTC *****************
 19264 ;; Defined at:
 19265 ;;		line 63 in file "RTC.c"
 19266 ;; Parameters:    Size  Location     Type
 19267 ;;		None
 19268 ;; Auto vars:     Size  Location     Type
 19269 ;;  printRTC       14   44[COMRAM] int [7]
 19270 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19271 ;;  printRTC        2   64[COMRAM] int 
 19272 ;;  printRTC        2   58[COMRAM] int 
 19273 ;; Return value:  Size  Location     Type
 19274 ;;                  1    wreg      void 
 19275 ;; Registers used:
 19276 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19277 ;; Tracked objects:
 19278 ;;		On entry : 0/0
 19279 ;;		On exit  : 0/0
 19280 ;;		Unchanged: 0/0
 19281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19283 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19284 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19285 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19286 ;;Total ram usage:       25 bytes
 19287 ;; Hardware stack levels used:    1
 19288 ;; Hardware stack levels required when called:    3
 19289 ;; This function calls:
 19290 ;;		i2_getRTC
 19291 ;;		i2_lcdInst
 19292 ;;		i2_printf
 19293 ;;		i2_strcpy
 19294 ;; This function is called by:
 19295 ;;		i2_change_state_to_menu_start
 19296 ;; This function uses a non-reentrant model
 19297 ;;
 19298                           
 19299                           	psect	text64
 19300  003140                     __ptext64:
 19301                           	opt stack 0
 19302  003140                     i2_printRTC:
 19303                           	opt stack 19
 19304                           
 19305                           ;RTC.c: 64: getRTC();
 19306                           
 19307                           ;incstack = 0
 19308  003140  EC94  F024         	call	i2_getRTC	;wreg free
 19309                           
 19310                           ;RTC.c: 65: char month[] = "MMM";
 19311  003144  C14B  F03D         	movff	printRTC@F3229,i2printRTC@month
 19312  003148  C14C  F03E         	movff	printRTC@F3229+1,i2printRTC@month+1
 19313  00314C  C14D  F03F         	movff	printRTC@F3229+2,i2printRTC@month+2
 19314  003150  C14E  F040         	movff	printRTC@F3229+3,i2printRTC@month+3
 19315                           
 19316                           ;RTC.c: 66: int INT_time[7];
 19317                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19318  003154  0E00               	movlw	0
 19319  003156  6E42               	movwf	i2printRTC@i+1,c
 19320  003158  0E00               	movlw	0
 19321  00315A  6E41               	movwf	i2printRTC@i,c
 19322  00315C  BE42               	btfsc	i2printRTC@i+1,7,c
 19323  00315E  D006               	goto	i2l7043
 19324  003160  5042               	movf	i2printRTC@i+1,w,c
 19325  003162  E135               	bnz	i2l616
 19326  003164  0E07               	movlw	7
 19327  003166  5C41               	subwf	i2printRTC@i,w,c
 19328  003168  B0D8               	btfsc	status,0,c
 19329  00316A  D031               	goto	i2l616
 19330  00316C                     i2l7043:
 19331                           
 19332                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19333  00316C  0E1C               	movlw	low _time
 19334  00316E  2441               	addwf	i2printRTC@i,w,c
 19335  003170  6ED9               	movwf	fsr2l,c
 19336  003172  0E01               	movlw	high _time
 19337  003174  2042               	addwfc	i2printRTC@i+1,w,c
 19338  003176  6EDA               	movwf	fsr2h,c
 19339  003178  50DF               	movf	indf2,w,c
 19340  00317A  6E2A               	movwf	??i2_printRTC& (0+255),c
 19341  00317C  3A2A               	swapf	??i2_printRTC,f,c
 19342  00317E  0E0F               	movlw	15
 19343  003180  162A               	andwf	??i2_printRTC,f,c
 19344  003182  0E0F               	movlw	15
 19345  003184  162A               	andwf	??i2_printRTC,f,c
 19346  003186  502A               	movf	??i2_printRTC,w,c
 19347  003188  0D0A               	mullw	10
 19348  00318A  0E1C               	movlw	low _time
 19349  00318C  2441               	addwf	i2printRTC@i,w,c
 19350  00318E  6ED9               	movwf	fsr2l,c
 19351  003190  0E01               	movlw	high _time
 19352  003192  2042               	addwfc	i2printRTC@i+1,w,c
 19353  003194  6EDA               	movwf	fsr2h,c
 19354  003196  50DF               	movf	indf2,w,c
 19355  003198  0B0F               	andlw	15
 19356  00319A  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19357  00319C  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19358  00319E  50F3               	movf	prodl,w,c
 19359  0031A0  262B               	addwf	??i2_printRTC+1,f,c
 19360  0031A2  50F4               	movf	prodh,w,c
 19361  0031A4  222C               	addwfc	??i2_printRTC+2,f,c
 19362  0031A6  90D8               	bcf	status,0,c
 19363  0031A8  3441               	rlcf	i2printRTC@i,w,c
 19364  0031AA  6ED9               	movwf	fsr2l,c
 19365  0031AC  3442               	rlcf	i2printRTC@i+1,w,c
 19366  0031AE  6EDA               	movwf	fsr2h,c
 19367  0031B0  0E2D               	movlw	low i2printRTC@INT_time
 19368  0031B2  26D9               	addwf	fsr2l,f,c
 19369  0031B4  0E00               	movlw	high i2printRTC@INT_time
 19370  0031B6  22DA               	addwfc	fsr2h,f,c
 19371  0031B8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19372  0031BC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19373  0031C0  4A41               	infsnz	i2printRTC@i,f,c
 19374  0031C2  2A42               	incf	i2printRTC@i+1,f,c
 19375  0031C4  BE42               	btfsc	i2printRTC@i+1,7,c
 19376  0031C6  D7D2               	goto	i2l7043
 19377  0031C8  5042               	movf	i2printRTC@i+1,w,c
 19378  0031CA  E101               	bnz	i2u559_40
 19379  0031CC  D7CB               	goto	L14
 19380  0031CE                     i2u559_40:
 19381  0031CE                     i2l616:
 19382                           
 19383                           ;RTC.c: 69: }
 19384                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19385  0031CE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19386  0031D2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19387                           
 19388                           ;RTC.c: 72: switch(RTC_month){
 19389  0031D6  D084               	goto	i2l7075
 19390  0031D8                     i2l7049:
 19391                           
 19392                           ;RTC.c: 74: strcpy(month, "JAN");
 19393  0031D8  0E3D               	movlw	low i2printRTC@month
 19394  0031DA  6E01               	movwf	i2strcpy@to,c
 19395  0031DC  0E00               	movlw	high i2printRTC@month
 19396  0031DE  6E02               	movwf	i2strcpy@to+1,c
 19397  0031E0  0EDB               	movlw	low STR_8
 19398  0031E2  6E03               	movwf	i2strcpy@from,c
 19399  0031E4  0EFF               	movlw	high STR_8
 19400  0031E6  6E04               	movwf	i2strcpy@from+1,c
 19401  0031E8  ECBF  F027         	call	i2_strcpy	;wreg free
 19402                           
 19403                           ;RTC.c: 75: break;
 19404  0031EC  D0A6               	goto	i2l7077
 19405  0031EE                     i2l7051:
 19406                           
 19407                           ;RTC.c: 77: strcpy(month, "FEB");
 19408  0031EE  0E3D               	movlw	low i2printRTC@month
 19409  0031F0  6E01               	movwf	i2strcpy@to,c
 19410  0031F2  0E00               	movlw	high i2printRTC@month
 19411  0031F4  6E02               	movwf	i2strcpy@to+1,c
 19412  0031F6  0ECB               	movlw	low STR_9
 19413  0031F8  6E03               	movwf	i2strcpy@from,c
 19414  0031FA  0EFF               	movlw	high STR_9
 19415  0031FC  6E04               	movwf	i2strcpy@from+1,c
 19416  0031FE  ECBF  F027         	call	i2_strcpy	;wreg free
 19417                           
 19418                           ;RTC.c: 78: break;
 19419  003202  D09B               	goto	i2l7077
 19420  003204                     i2l7053:
 19421                           
 19422                           ;RTC.c: 80: strcpy(month, "MAR");
 19423  003204  0E3D               	movlw	low i2printRTC@month
 19424  003206  6E01               	movwf	i2strcpy@to,c
 19425  003208  0E00               	movlw	high i2printRTC@month
 19426  00320A  6E02               	movwf	i2strcpy@to+1,c
 19427  00320C  0EE7               	movlw	low STR_10
 19428  00320E  6E03               	movwf	i2strcpy@from,c
 19429  003210  0EFF               	movlw	high STR_10
 19430  003212  6E04               	movwf	i2strcpy@from+1,c
 19431  003214  ECBF  F027         	call	i2_strcpy	;wreg free
 19432                           
 19433                           ;RTC.c: 81: break;
 19434  003218  D090               	goto	i2l7077
 19435  00321A                     i2l7055:
 19436                           
 19437                           ;RTC.c: 83: strcpy(month, "APR");
 19438  00321A  0E3D               	movlw	low i2printRTC@month
 19439  00321C  6E01               	movwf	i2strcpy@to,c
 19440  00321E  0E00               	movlw	high i2printRTC@month
 19441  003220  6E02               	movwf	i2strcpy@to+1,c
 19442  003222  0EEB               	movlw	low STR_11
 19443  003224  6E03               	movwf	i2strcpy@from,c
 19444  003226  0EFF               	movlw	high STR_11
 19445  003228  6E04               	movwf	i2strcpy@from+1,c
 19446  00322A  ECBF  F027         	call	i2_strcpy	;wreg free
 19447                           
 19448                           ;RTC.c: 84: break;
 19449  00322E  D085               	goto	i2l7077
 19450  003230                     i2l7057:
 19451                           
 19452                           ;RTC.c: 86: strcpy(month, "MAY");
 19453  003230  0E3D               	movlw	low i2printRTC@month
 19454  003232  6E01               	movwf	i2strcpy@to,c
 19455  003234  0E00               	movlw	high i2printRTC@month
 19456  003236  6E02               	movwf	i2strcpy@to+1,c
 19457  003238  0EFB               	movlw	low STR_12
 19458  00323A  6E03               	movwf	i2strcpy@from,c
 19459  00323C  0EFF               	movlw	high STR_12
 19460  00323E  6E04               	movwf	i2strcpy@from+1,c
 19461  003240  ECBF  F027         	call	i2_strcpy	;wreg free
 19462                           
 19463                           ;RTC.c: 87: break;
 19464  003244  D07A               	goto	i2l7077
 19465  003246                     i2l7059:
 19466                           
 19467                           ;RTC.c: 89: strcpy(month, "JUN");
 19468  003246  0E3D               	movlw	low i2printRTC@month
 19469  003248  6E01               	movwf	i2strcpy@to,c
 19470  00324A  0E00               	movlw	high i2printRTC@month
 19471  00324C  6E02               	movwf	i2strcpy@to+1,c
 19472  00324E  0EDF               	movlw	low STR_13
 19473  003250  6E03               	movwf	i2strcpy@from,c
 19474  003252  0EFF               	movlw	high STR_13
 19475  003254  6E04               	movwf	i2strcpy@from+1,c
 19476  003256  ECBF  F027         	call	i2_strcpy	;wreg free
 19477                           
 19478                           ;RTC.c: 90: break;
 19479  00325A  D06F               	goto	i2l7077
 19480  00325C                     i2l7061:
 19481                           
 19482                           ;RTC.c: 92: strcpy(month, "JUL");
 19483  00325C  0E3D               	movlw	low i2printRTC@month
 19484  00325E  6E01               	movwf	i2strcpy@to,c
 19485  003260  0E00               	movlw	high i2printRTC@month
 19486  003262  6E02               	movwf	i2strcpy@to+1,c
 19487  003264  0ED7               	movlw	low STR_14
 19488  003266  6E03               	movwf	i2strcpy@from,c
 19489  003268  0EFF               	movlw	high STR_14
 19490  00326A  6E04               	movwf	i2strcpy@from+1,c
 19491  00326C  ECBF  F027         	call	i2_strcpy	;wreg free
 19492                           
 19493                           ;RTC.c: 93: break;
 19494  003270  D064               	goto	i2l7077
 19495  003272                     i2l7063:
 19496                           
 19497                           ;RTC.c: 95: strcpy(month, "AUG");
 19498  003272  0E3D               	movlw	low i2printRTC@month
 19499  003274  6E01               	movwf	i2strcpy@to,c
 19500  003276  0E00               	movlw	high i2printRTC@month
 19501  003278  6E02               	movwf	i2strcpy@to+1,c
 19502  00327A  0ED3               	movlw	low STR_15
 19503  00327C  6E03               	movwf	i2strcpy@from,c
 19504  00327E  0EFF               	movlw	high STR_15
 19505  003280  6E04               	movwf	i2strcpy@from+1,c
 19506  003282  ECBF  F027         	call	i2_strcpy	;wreg free
 19507                           
 19508                           ;RTC.c: 96: break;
 19509  003286  D059               	goto	i2l7077
 19510  003288                     i2l7065:
 19511                           
 19512                           ;RTC.c: 98: strcpy(month, "SEP");
 19513  003288  0E3D               	movlw	low i2printRTC@month
 19514  00328A  6E01               	movwf	i2strcpy@to,c
 19515  00328C  0E00               	movlw	high i2printRTC@month
 19516  00328E  6E02               	movwf	i2strcpy@to+1,c
 19517  003290  0EE3               	movlw	low STR_16
 19518  003292  6E03               	movwf	i2strcpy@from,c
 19519  003294  0EFF               	movlw	high STR_16
 19520  003296  6E04               	movwf	i2strcpy@from+1,c
 19521  003298  ECBF  F027         	call	i2_strcpy	;wreg free
 19522                           
 19523                           ;RTC.c: 99: break;
 19524  00329C  D04E               	goto	i2l7077
 19525  00329E                     i2l7067:
 19526                           
 19527                           ;RTC.c: 101: strcpy(month, "OCT");
 19528  00329E  0E3D               	movlw	low i2printRTC@month
 19529  0032A0  6E01               	movwf	i2strcpy@to,c
 19530  0032A2  0E00               	movlw	high i2printRTC@month
 19531  0032A4  6E02               	movwf	i2strcpy@to+1,c
 19532  0032A6  0EF3               	movlw	low STR_17
 19533  0032A8  6E03               	movwf	i2strcpy@from,c
 19534  0032AA  0EFF               	movlw	high STR_17
 19535  0032AC  6E04               	movwf	i2strcpy@from+1,c
 19536  0032AE  ECBF  F027         	call	i2_strcpy	;wreg free
 19537                           
 19538                           ;RTC.c: 102: break;
 19539  0032B2  D043               	goto	i2l7077
 19540  0032B4                     i2l7069:
 19541                           
 19542                           ;RTC.c: 104: strcpy(month, "NOV");
 19543  0032B4  0E3D               	movlw	low i2printRTC@month
 19544  0032B6  6E01               	movwf	i2strcpy@to,c
 19545  0032B8  0E00               	movlw	high i2printRTC@month
 19546  0032BA  6E02               	movwf	i2strcpy@to+1,c
 19547  0032BC  0EF7               	movlw	low STR_18
 19548  0032BE  6E03               	movwf	i2strcpy@from,c
 19549  0032C0  0EFF               	movlw	high STR_18
 19550  0032C2  6E04               	movwf	i2strcpy@from+1,c
 19551  0032C4  ECBF  F027         	call	i2_strcpy	;wreg free
 19552                           
 19553                           ;RTC.c: 105: break;
 19554  0032C8  D038               	goto	i2l7077
 19555  0032CA                     i2l7071:
 19556                           
 19557                           ;RTC.c: 107: strcpy(month, "DEC");
 19558  0032CA  0E3D               	movlw	low i2printRTC@month
 19559  0032CC  6E01               	movwf	i2strcpy@to,c
 19560  0032CE  0E00               	movlw	high i2printRTC@month
 19561  0032D0  6E02               	movwf	i2strcpy@to+1,c
 19562  0032D2  0ECF               	movlw	low STR_19
 19563  0032D4  6E03               	movwf	i2strcpy@from,c
 19564  0032D6  0EFF               	movlw	high STR_19
 19565  0032D8  6E04               	movwf	i2strcpy@from+1,c
 19566  0032DA  ECBF  F027         	call	i2_strcpy	;wreg free
 19567                           
 19568                           ;RTC.c: 109: }
 19569                           
 19570                           ;RTC.c: 108: break;
 19571  0032DE  D02D               	goto	i2l7077
 19572  0032E0                     i2l7075:
 19573  0032E0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19574  0032E4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19575                           
 19576                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19577                           ; Switch size 1, requested type "space"
 19578                           ; Number of cases is 1, Range of values is 0 to 0
 19579                           ; switch strategies available:
 19580                           ; Name         Instructions Cycles
 19581                           ; simple_byte            4     3 (average)
 19582                           ;	Chosen strategy is simple_byte
 19583  0032E8  502B               	movf	??i2_printRTC+1,w,c
 19584  0032EA  0A00               	xorlw	0	; case 0
 19585  0032EC  A4D8               	btfss	status,2,c
 19586  0032EE  D025               	goto	i2l7077
 19587                           
 19588                           ; Switch size 1, requested type "space"
 19589                           ; Number of cases is 12, Range of values is 1 to 12
 19590                           ; switch strategies available:
 19591                           ; Name         Instructions Cycles
 19592                           ; simple_byte           37    19 (average)
 19593                           ;	Chosen strategy is simple_byte
 19594  0032F0  502A               	movf	??i2_printRTC,w,c
 19595  0032F2  0A01               	xorlw	1	; case 1
 19596  0032F4  B4D8               	btfsc	status,2,c
 19597  0032F6  D770               	goto	i2l7049
 19598  0032F8  0A03               	xorlw	3	; case 2
 19599  0032FA  B4D8               	btfsc	status,2,c
 19600  0032FC  D778               	goto	i2l7051
 19601  0032FE  0A01               	xorlw	1	; case 3
 19602  003300  B4D8               	btfsc	status,2,c
 19603  003302  D780               	goto	i2l7053
 19604  003304  0A07               	xorlw	7	; case 4
 19605  003306  B4D8               	btfsc	status,2,c
 19606  003308  D788               	goto	i2l7055
 19607  00330A  0A01               	xorlw	1	; case 5
 19608  00330C  B4D8               	btfsc	status,2,c
 19609  00330E  D790               	goto	i2l7057
 19610  003310  0A03               	xorlw	3	; case 6
 19611  003312  B4D8               	btfsc	status,2,c
 19612  003314  D798               	goto	i2l7059
 19613  003316  0A01               	xorlw	1	; case 7
 19614  003318  B4D8               	btfsc	status,2,c
 19615  00331A  D7A0               	goto	i2l7061
 19616  00331C  0A0F               	xorlw	15	; case 8
 19617  00331E  B4D8               	btfsc	status,2,c
 19618  003320  D7A8               	goto	i2l7063
 19619  003322  0A01               	xorlw	1	; case 9
 19620  003324  B4D8               	btfsc	status,2,c
 19621  003326  D7B0               	goto	i2l7065
 19622  003328  0A03               	xorlw	3	; case 10
 19623  00332A  B4D8               	btfsc	status,2,c
 19624  00332C  D7B8               	goto	i2l7067
 19625  00332E  0A01               	xorlw	1	; case 11
 19626  003330  B4D8               	btfsc	status,2,c
 19627  003332  D7C0               	goto	i2l7069
 19628  003334  0A07               	xorlw	7	; case 12
 19629  003336  B4D8               	btfsc	status,2,c
 19630  003338  D7C8               	goto	i2l7071
 19631  00333A                     i2l7077:
 19632                           
 19633                           ;RTC.c: 110: lcdInst(0b10000000);;
 19634  00333A  0E80               	movlw	128
 19635  00333C  EC23  F02A         	call	i2_lcdInst
 19636                           
 19637                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19638  003340  0EE8               	movlw	low STR_21
 19639  003342  6E0D               	movwf	i2printf@f,c
 19640  003344  0EFA               	movlw	high STR_21
 19641  003346  6E0E               	movwf	i2printf@f+1,c
 19642  003348  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19643  00334C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19644  003350  0E3D               	movlw	low i2printRTC@month
 19645  003352  6E11               	movwf	?i2_printf+4,c
 19646  003354  0E00               	movlw	high i2printRTC@month
 19647  003356  6E12               	movwf	?i2_printf+5,c
 19648  003358  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19649  00335C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19650  003360  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19651  003364  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19652  003368  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19653  00336C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19654  003370  ECF9  F00E         	call	i2_printf	;wreg free
 19655  003374  0012               	return		;funcret
 19656  003376                     __end_ofi2_printRTC:
 19657                           	opt stack 0
 19658                           pclatu	equ	0xFFB
 19659                           pclath	equ	0xFFA
 19660                           tblptru	equ	0xFF8
 19661                           tblptrh	equ	0xFF7
 19662                           tblptrl	equ	0xFF6
 19663                           tablat	equ	0xFF5
 19664                           prodh	equ	0xFF4
 19665                           prodl	equ	0xFF3
 19666                           intcon	equ	0xFF2
 19667                           intcon2	equ	0xFF1
 19668                           intcon3	equ	0xFF0
 19669                           indf0	equ	0xFEF
 19670                           postinc0	equ	0xFEE
 19671                           fsr0h	equ	0xFEA
 19672                           fsr0l	equ	0xFE9
 19673                           wreg	equ	0xFE8
 19674                           postdec1	equ	0xFE5
 19675                           fsr1h	equ	0xFE2
 19676                           fsr1l	equ	0xFE1
 19677                           indf2	equ	0xFDF
 19678                           postinc2	equ	0xFDE
 19679                           postdec2	equ	0xFDD
 19680                           fsr2h	equ	0xFDA
 19681                           fsr2l	equ	0xFD9
 19682                           status	equ	0xFD8
 19683                           
 19684 ;; *************** function i2_strcpy *****************
 19685 ;; Defined at:
 19686 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19687 ;; Parameters:    Size  Location     Type
 19688 ;;  to              2    0[COMRAM] PTR unsigned char 
 19689 ;;		 -> printRTC@month(4), UI@month(4), 
 19690 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19691 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19692 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19693 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19694 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19695 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19696 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19697 ;;		 -> STR_8(4), 
 19698 ;; Auto vars:     Size  Location     Type
 19699 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19700 ;;		 -> printRTC@month(4), UI@month(4), 
 19701 ;; Return value:  Size  Location     Type
 19702 ;;                  2    0[COMRAM] PTR unsigned char 
 19703 ;; Registers used:
 19704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19705 ;; Tracked objects:
 19706 ;;		On entry : 0/0
 19707 ;;		On exit  : 0/0
 19708 ;;		Unchanged: 0/0
 19709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19710 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19713 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19714 ;;Total ram usage:        6 bytes
 19715 ;; Hardware stack levels used:    1
 19716 ;; This function calls:
 19717 ;;		Nothing
 19718 ;; This function is called by:
 19719 ;;		i2_printRTC
 19720 ;; This function uses a non-reentrant model
 19721 ;;
 19722                           
 19723                           	psect	text65
 19724  004F7E                     __ptext65:
 19725                           	opt stack 0
 19726  004F7E                     i2_strcpy:
 19727                           	opt stack 21
 19728                           
 19729                           ;incstack = 0
 19730  004F7E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19731  004F82  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19732  004F86  D004               	goto	i2l6691
 19733  004F88                     i2l6689:
 19734  004F88  4A05               	infsnz	i2strcpy@cp,f,c
 19735  004F8A  2A06               	incf	i2strcpy@cp+1,f,c
 19736  004F8C  4A03               	infsnz	i2strcpy@from,f,c
 19737  004F8E  2A04               	incf	i2strcpy@from+1,f,c
 19738  004F90                     i2l6691:
 19739  004F90  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19740  004F94  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19741  004F98                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19742  004F98  6AF8               	clrf	tblptru,c
 19743  004F9A                     	endif
 19744  004F9A                     	if	0	;tblptru may be non-zero
 19745  004F9A                     	endif
 19746  004F9A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19747  004F9E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19748  004FA2  0008               	tblrd		*
 19749  004FA4  CFF5 FFDF          	movff	tablat,indf2
 19750  004FA8  50DF               	movf	indf2,w,c
 19751  004FAA  B4D8               	btfsc	status,2,c
 19752  004FAC  0012               	return	
 19753  004FAE  D7EC               	goto	i2l6689
 19754  004FB0                     __end_ofi2_strcpy:
 19755                           	opt stack 0
 19756                           pclatu	equ	0xFFB
 19757                           pclath	equ	0xFFA
 19758                           tblptru	equ	0xFF8
 19759                           tblptrh	equ	0xFF7
 19760                           tblptrl	equ	0xFF6
 19761                           tablat	equ	0xFF5
 19762                           prodh	equ	0xFF4
 19763                           prodl	equ	0xFF3
 19764                           intcon	equ	0xFF2
 19765                           intcon2	equ	0xFF1
 19766                           intcon3	equ	0xFF0
 19767                           indf0	equ	0xFEF
 19768                           postinc0	equ	0xFEE
 19769                           fsr0h	equ	0xFEA
 19770                           fsr0l	equ	0xFE9
 19771                           wreg	equ	0xFE8
 19772                           postdec1	equ	0xFE5
 19773                           fsr1h	equ	0xFE2
 19774                           fsr1l	equ	0xFE1
 19775                           indf2	equ	0xFDF
 19776                           postinc2	equ	0xFDE
 19777                           postdec2	equ	0xFDD
 19778                           fsr2h	equ	0xFDA
 19779                           fsr2l	equ	0xFD9
 19780                           status	equ	0xFD8
 19781                           
 19782 ;; *************** function _inputHandler *****************
 19783 ;; Defined at:
 19784 ;;		line 375 in file "UI.c"
 19785 ;; Parameters:    Size  Location     Type
 19786 ;;		None
 19787 ;; Auto vars:     Size  Location     Type
 19788 ;;		None
 19789 ;; Return value:  Size  Location     Type
 19790 ;;                  2   41[COMRAM] int 
 19791 ;; Registers used:
 19792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19793 ;; Tracked objects:
 19794 ;;		On entry : 0/0
 19795 ;;		On exit  : 0/0
 19796 ;;		Unchanged: 0/0
 19797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19798 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19801 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19802 ;;Total ram usage:        4 bytes
 19803 ;; Hardware stack levels used:    1
 19804 ;; Hardware stack levels required when called:    4
 19805 ;; This function calls:
 19806 ;;		_change_state_to_logs_11
 19807 ;;		_change_state_to_logs_12
 19808 ;;		_change_state_to_logs_22
 19809 ;;		_change_state_to_logs_23
 19810 ;;		_change_state_to_logs_33
 19811 ;;		_change_state_to_logs_34
 19812 ;;		_change_state_to_menu_11
 19813 ;;		_change_state_to_menu_23
 19814 ;;		i2_change_state_to_menu_12
 19815 ;;		i2_change_state_to_menu_22
 19816 ;; This function is called by:
 19817 ;;		_updateMenu
 19818 ;; This function uses a non-reentrant model
 19819 ;;
 19820                           
 19821                           	psect	text66
 19822  003592                     __ptext66:
 19823                           	opt stack 0
 19824  003592                     _inputHandler:
 19825                           	opt stack 18
 19826                           
 19827                           ;UI.c: 380: if(firstboot){
 19828                           
 19829                           ;incstack = 0
 19830  003592  0101               	movlb	1	; () banked
 19831  003594  513B               	movf	_firstboot& (0+255),w,b
 19832  003596  0101               	movlb	1	; () banked
 19833  003598  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 19834  00359A  B4D8               	btfsc	status,2,c
 19835  00359C  D00C               	goto	i2l7145
 19836                           
 19837                           ; BSR set to: 1
 19838                           ;UI.c: 381: change_state_to_menu_11();
 19839  00359E  EC38  F028         	call	_change_state_to_menu_11	;wreg free
 19840                           
 19841                           ;UI.c: 382: firstboot = 0;
 19842  0035A2  0E00               	movlw	0
 19843  0035A4  0101               	movlb	1	; () banked
 19844  0035A6  6F3C               	movwf	(_firstboot+1)& (0+255),b
 19845  0035A8  0E00               	movlw	0
 19846  0035AA  6F3B               	movwf	_firstboot& (0+255),b
 19847                           
 19848                           ; BSR set to: 1
 19849                           ;UI.c: 383: return 0;
 19850  0035AC  0E00               	movlw	0
 19851  0035AE  6E2B               	movwf	?_inputHandler+1,c
 19852  0035B0  0E00               	movlw	0
 19853  0035B2  6E2A               	movwf	?_inputHandler,c
 19854                           
 19855                           ; BSR set to: 1
 19856  0035B4  0012               	return	
 19857  0035B6                     i2l7145:
 19858                           
 19859                           ; BSR set to: 1
 19860                           ;UI.c: 384: }
 19861                           ;UI.c: 385: if (logstate){
 19862  0035B6  0100               	movlb	0	; () banked
 19863  0035B8  51F8               	movf	_logstate& (0+255),w,b
 19864  0035BA  0100               	movlb	0	; () banked
 19865  0035BC  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 19866  0035BE  B4D8               	btfsc	status,2,c
 19867  0035C0  D0C7               	goto	i2l7263
 19868                           
 19869                           ; BSR set to: 0
 19870                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 19871  0035C2  0E43               	movlw	67
 19872  0035C4  187D               	xorwf	_input,w,c	;volatile
 19873  0035C6  A4D8               	btfss	status,2,c
 19874  0035C8  D012               	goto	i2l7163
 19875                           
 19876                           ; BSR set to: 0
 19877  0035CA  B281               	btfsc	3969,1,c	;volatile
 19878  0035CC  D009               	goto	i2l7155
 19879  0035CE  D00F               	goto	i2l7163
 19880  0035D0                     i2l7153:
 19881                           
 19882                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 19883  0035D0  0E68               	movlw	104
 19884  0035D2  6E2C               	movwf	??_inputHandler& (0+255),c
 19885  0035D4  0EE4               	movlw	228
 19886  0035D6                     i2u1048_47:
 19887  0035D6  2EE8               	decfsz	wreg,f,c
 19888  0035D8  D7FE               	bra	i2u1048_47
 19889  0035DA  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19890  0035DC  D7FC               	bra	i2u1048_47
 19891  0035DE  D000               	nop2	
 19892  0035E0                     i2l7155:
 19893  0035E0  B281               	btfsc	3969,1,c	;volatile
 19894  0035E2  D7F6               	goto	i2l7153
 19895  0035E4                     i2l7157:
 19896                           
 19897                           ;UI.c: 390: }
 19898                           ;UI.c: 391: return 0;
 19899  0035E4  0E00               	movlw	0
 19900  0035E6  6E2B               	movwf	?_inputHandler+1,c
 19901  0035E8  0E00               	movlw	0
 19902  0035EA  6E2A               	movwf	?_inputHandler,c
 19903  0035EC  0012               	return	
 19904  0035EE                     i2l7163:
 19905                           
 19906                           ;UI.c: 393: else if (input == 'D'){
 19907  0035EE  0E44               	movlw	68
 19908  0035F0  187D               	xorwf	_input,w,c	;volatile
 19909  0035F2  A4D8               	btfss	status,2,c
 19910  0035F4  D7F7               	goto	i2l7157
 19911                           
 19912                           ;UI.c: 395: logstate = 0;
 19913  0035F6  0E00               	movlw	0
 19914  0035F8  0100               	movlb	0	; () banked
 19915  0035FA  6FF9               	movwf	(_logstate+1)& (0+255),b
 19916  0035FC  0E00               	movlw	0
 19917  0035FE  6FF8               	movwf	_logstate& (0+255),b
 19918                           
 19919                           ;UI.c: 396: switch(cur_state){
 19920  003600  D012               	goto	i2l7181
 19921  003602                     i2l7167:
 19922                           
 19923                           ;UI.c: 398: change_state_to_logs_11();
 19924  003602  ECB0  F028         	call	_change_state_to_logs_11	;wreg free
 19925                           
 19926                           ;UI.c: 399: break;
 19927  003606  D7EE               	goto	i2l7157
 19928  003608                     i2l7169:
 19929                           
 19930                           ;UI.c: 401: change_state_to_logs_12();
 19931  003608  EC98  F028         	call	_change_state_to_logs_12	;wreg free
 19932                           
 19933                           ;UI.c: 402: break;
 19934  00360C  D7EB               	goto	i2l7157
 19935  00360E                     i2l7171:
 19936                           
 19937                           ;UI.c: 404: change_state_to_logs_22();
 19938  00360E  EC80  F028         	call	_change_state_to_logs_22	;wreg free
 19939                           
 19940                           ;UI.c: 405: break;
 19941  003612  D7E8               	goto	i2l7157
 19942  003614                     i2l7173:
 19943                           
 19944                           ;UI.c: 407: change_state_to_logs_23();
 19945  003614  ECDF  F028         	call	_change_state_to_logs_23	;wreg free
 19946                           
 19947                           ;UI.c: 408: break;
 19948  003618  D7E5               	goto	i2l7157
 19949  00361A                     i2l7175:
 19950                           
 19951                           ;UI.c: 410: change_state_to_logs_33();
 19952  00361A  EC68  F028         	call	_change_state_to_logs_33	;wreg free
 19953                           
 19954                           ;UI.c: 411: break;
 19955  00361E  D7E2               	goto	i2l7157
 19956  003620                     i2l7177:
 19957                           
 19958                           ;UI.c: 413: change_state_to_logs_34();
 19959  003620  EC50  F028         	call	_change_state_to_logs_34	;wreg free
 19960                           
 19961                           ;UI.c: 415: }
 19962                           
 19963                           ;UI.c: 414: break;
 19964  003624  D7DF               	goto	i2l7157
 19965  003626                     i2l7181:
 19966  003626  C0EC  F02C         	movff	_cur_state,??_inputHandler
 19967  00362A  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 19968                           
 19969                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19970                           ; Switch size 1, requested type "space"
 19971                           ; Number of cases is 2, Range of values is 3 to 4
 19972                           ; switch strategies available:
 19973                           ; Name         Instructions Cycles
 19974                           ; simple_byte            7     4 (average)
 19975                           ;	Chosen strategy is simple_byte
 19976  00362E  502D               	movf	??_inputHandler+1,w,c
 19977  003630  0A03               	xorlw	3	; case 3
 19978  003632  B4D8               	btfsc	status,2,c
 19979  003634  D004               	goto	i2l10071
 19980  003636  0A07               	xorlw	7	; case 4
 19981  003638  B4D8               	btfsc	status,2,c
 19982  00363A  D00F               	goto	i2l10073
 19983  00363C  D7D3               	goto	i2l7157
 19984  00363E                     i2l10071:
 19985                           
 19986                           ; Switch size 1, requested type "space"
 19987                           ; Number of cases is 4, Range of values is 243 to 255
 19988                           ; switch strategies available:
 19989                           ; Name         Instructions Cycles
 19990                           ; simple_byte           13     7 (average)
 19991                           ;	Chosen strategy is simple_byte
 19992  00363E  502C               	movf	??_inputHandler,w,c
 19993  003640  0AF3               	xorlw	243	; case 243
 19994  003642  B4D8               	btfsc	status,2,c
 19995  003644  D7DE               	goto	i2l7167
 19996  003646  0A07               	xorlw	7	; case 244
 19997  003648  B4D8               	btfsc	status,2,c
 19998  00364A  D7DE               	goto	i2l7169
 19999  00364C  0A0A               	xorlw	10	; case 254
 20000  00364E  B4D8               	btfsc	status,2,c
 20001  003650  D7DE               	goto	i2l7171
 20002  003652  0A01               	xorlw	1	; case 255
 20003  003654  B4D8               	btfsc	status,2,c
 20004  003656  D7DE               	goto	i2l7173
 20005  003658  D7C5               	goto	i2l7157
 20006  00365A                     i2l10073:
 20007                           
 20008                           ; Switch size 1, requested type "space"
 20009                           ; Number of cases is 2, Range of values is 9 to 10
 20010                           ; switch strategies available:
 20011                           ; Name         Instructions Cycles
 20012                           ; simple_byte            7     4 (average)
 20013                           ;	Chosen strategy is simple_byte
 20014  00365A  502C               	movf	??_inputHandler,w,c
 20015  00365C  0A09               	xorlw	9	; case 9
 20016  00365E  B4D8               	btfsc	status,2,c
 20017  003660  D7DC               	goto	i2l7175
 20018  003662  0A03               	xorlw	3	; case 10
 20019  003664  B4D8               	btfsc	status,2,c
 20020  003666  D7DC               	goto	i2l7177
 20021  003668  D7BD               	goto	i2l7157
 20022  00366A                     i2l7193:
 20023                           
 20024                           ;UI.c: 425: if(cur_state == 11){
 20025  00366A  0E0B               	movlw	11
 20026  00366C  0100               	movlb	0	; () banked
 20027  00366E  19EC               	xorwf	_cur_state& (0+255),w,b
 20028  003670  0100               	movlb	0	; () banked
 20029  003672  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20030  003674  A4D8               	btfss	status,2,c
 20031  003676  D005               	goto	i2l7201
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;UI.c: 426: return 0;
 20035  003678  0E00               	movlw	0
 20036  00367A  6E2B               	movwf	?_inputHandler+1,c
 20037  00367C  0E00               	movlw	0
 20038  00367E  6E2A               	movwf	?_inputHandler,c
 20039                           
 20040                           ; BSR set to: 0
 20041  003680  0012               	return	
 20042  003682                     i2l7201:
 20043                           
 20044                           ; BSR set to: 0
 20045                           ;UI.c: 428: else{
 20046                           ;UI.c: 429: change_state_to_menu_11();
 20047  003682  EC38  F028         	call	_change_state_to_menu_11	;wreg free
 20048                           
 20049                           ;UI.c: 430: }
 20050                           ;UI.c: 431: return 0;
 20051  003686  0E00               	movlw	0
 20052  003688  6E2B               	movwf	?_inputHandler+1,c
 20053  00368A  0E00               	movlw	0
 20054  00368C  6E2A               	movwf	?_inputHandler,c
 20055  00368E  0012               	return	
 20056  003690                     i2l7207:
 20057                           
 20058                           ;UI.c: 433: if(cur_state == 22 | cur_state == 12){
 20059  003690  0E16               	movlw	22
 20060  003692  0100               	movlb	0	; () banked
 20061  003694  19EC               	xorwf	_cur_state& (0+255),w,b
 20062  003696  0100               	movlb	0	; () banked
 20063  003698  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20064  00369A  B4D8               	btfsc	status,2,c
 20065  00369C  D007               	goto	i2l7211
 20066                           
 20067                           ; BSR set to: 0
 20068  00369E  0E0C               	movlw	12
 20069  0036A0  0100               	movlb	0	; () banked
 20070  0036A2  19EC               	xorwf	_cur_state& (0+255),w,b
 20071  0036A4  0100               	movlb	0	; () banked
 20072  0036A6  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20073  0036A8  A4D8               	btfss	status,2,c
 20074  0036AA  D005               	goto	i2l7217
 20075  0036AC                     i2l7211:
 20076                           
 20077                           ; BSR set to: 0
 20078                           ;UI.c: 434: return 0;
 20079  0036AC  0E00               	movlw	0
 20080  0036AE  6E2B               	movwf	?_inputHandler+1,c
 20081  0036B0  0E00               	movlw	0
 20082  0036B2  6E2A               	movwf	?_inputHandler,c
 20083                           
 20084                           ; BSR set to: 0
 20085  0036B4  0012               	return	
 20086  0036B6                     i2l7217:
 20087                           
 20088                           ; BSR set to: 0
 20089                           ;UI.c: 436: else if(cur_state == 23){
 20090  0036B6  0E17               	movlw	23
 20091  0036B8  0100               	movlb	0	; () banked
 20092  0036BA  19EC               	xorwf	_cur_state& (0+255),w,b
 20093  0036BC  0100               	movlb	0	; () banked
 20094  0036BE  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20095  0036C0  A4D8               	btfss	status,2,c
 20096  0036C2  D003               	goto	i2l7221
 20097                           
 20098                           ; BSR set to: 0
 20099                           ;UI.c: 437: change_state_to_menu_22();
 20100  0036C4  ECF0  F027         	call	i2_change_state_to_menu_22	;wreg free
 20101                           
 20102                           ;UI.c: 438: }
 20103  0036C8  D002               	goto	i2l7223
 20104  0036CA                     i2l7221:
 20105                           
 20106                           ;UI.c: 439: else{
 20107                           ;UI.c: 440: change_state_to_menu_12();
 20108  0036CA  EC08  F028         	call	i2_change_state_to_menu_12	;wreg free
 20109  0036CE                     i2l7223:
 20110                           
 20111                           ;UI.c: 441: }
 20112                           ;UI.c: 442: return 0;
 20113  0036CE  0E00               	movlw	0
 20114  0036D0  6E2B               	movwf	?_inputHandler+1,c
 20115  0036D2  0E00               	movlw	0
 20116  0036D4  6E2A               	movwf	?_inputHandler,c
 20117  0036D6  0012               	return	
 20118  0036D8                     i2l7227:
 20119                           
 20120                           ;UI.c: 444: if(cur_state == 23){
 20121  0036D8  0E17               	movlw	23
 20122  0036DA  0100               	movlb	0	; () banked
 20123  0036DC  19EC               	xorwf	_cur_state& (0+255),w,b
 20124  0036DE  0100               	movlb	0	; () banked
 20125  0036E0  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20126  0036E2  A4D8               	btfss	status,2,c
 20127  0036E4  D005               	goto	i2l7235
 20128                           
 20129                           ; BSR set to: 0
 20130                           ;UI.c: 445: return 0;
 20131  0036E6  0E00               	movlw	0
 20132  0036E8  6E2B               	movwf	?_inputHandler+1,c
 20133  0036EA  0E00               	movlw	0
 20134  0036EC  6E2A               	movwf	?_inputHandler,c
 20135                           
 20136                           ; BSR set to: 0
 20137  0036EE  0012               	return	
 20138  0036F0                     i2l7235:
 20139                           
 20140                           ; BSR set to: 0
 20141                           ;UI.c: 447: else{
 20142                           ;UI.c: 448: change_state_to_menu_23();
 20143  0036F0  EC20  F028         	call	_change_state_to_menu_23	;wreg free
 20144                           
 20145                           ;UI.c: 449: }
 20146                           ;UI.c: 450: return 0;
 20147  0036F4  0E00               	movlw	0
 20148  0036F6  6E2B               	movwf	?_inputHandler+1,c
 20149  0036F8  0E00               	movlw	0
 20150  0036FA  6E2A               	movwf	?_inputHandler,c
 20151  0036FC  0012               	return	
 20152  0036FE                     i2l7241:
 20153                           
 20154                           ;UI.c: 453: up = 1;
 20155  0036FE  0E00               	movlw	0
 20156  003700  6E76               	movwf	_up+1,c
 20157  003702  0E01               	movlw	1
 20158  003704  6E75               	movwf	_up,c
 20159                           
 20160                           ;UI.c: 454: return 1;
 20161  003706  0E00               	movlw	0
 20162  003708  6E2B               	movwf	?_inputHandler+1,c
 20163  00370A  0E01               	movlw	1
 20164  00370C  6E2A               	movwf	?_inputHandler,c
 20165  00370E  0012               	return	
 20166  003710                     i2l7245:
 20167                           
 20168                           ;UI.c: 456: down = 1;
 20169  003710  0E00               	movlw	0
 20170  003712  6E5E               	movwf	_down+1,c
 20171  003714  0E01               	movlw	1
 20172  003716  6E5D               	movwf	_down,c
 20173                           
 20174                           ;UI.c: 457: return 1;
 20175  003718  0E00               	movlw	0
 20176  00371A  6E2B               	movwf	?_inputHandler+1,c
 20177  00371C  0E01               	movlw	1
 20178  00371E  6E2A               	movwf	?_inputHandler,c
 20179  003720  0012               	return	
 20180  003722                     i2l7249:
 20181                           
 20182                           ;UI.c: 459: enter = 1;
 20183  003722  0E00               	movlw	0
 20184  003724  6E60               	movwf	_enter+1,c
 20185  003726  0E01               	movlw	1
 20186  003728  6E5F               	movwf	_enter,c
 20187                           
 20188                           ;UI.c: 460: return 1;
 20189  00372A  0E00               	movlw	0
 20190  00372C  6E2B               	movwf	?_inputHandler+1,c
 20191  00372E  0E01               	movlw	1
 20192  003730  6E2A               	movwf	?_inputHandler,c
 20193  003732  0012               	return	
 20194  003734                     i2l7253:
 20195                           
 20196                           ;UI.c: 462: back = 1;
 20197  003734  0E00               	movlw	0
 20198  003736  6E5C               	movwf	_back+1,c
 20199  003738  0E01               	movlw	1
 20200  00373A  6E5B               	movwf	_back,c
 20201                           
 20202                           ;UI.c: 463: return 1;
 20203  00373C  0E00               	movlw	0
 20204  00373E  6E2B               	movwf	?_inputHandler+1,c
 20205  003740  0E01               	movlw	1
 20206  003742  6E2A               	movwf	?_inputHandler,c
 20207  003744  0012               	return	
 20208  003746                     i2l7257:
 20209                           
 20210                           ;UI.c: 466: return 1;
 20211  003746  0E00               	movlw	0
 20212  003748  6E2B               	movwf	?_inputHandler+1,c
 20213  00374A  0E01               	movlw	1
 20214  00374C  6E2A               	movwf	?_inputHandler,c
 20215                           
 20216                           ;UI.c: 467: }
 20217  00374E  0012               	return	
 20218  003750                     i2l7263:
 20219  003750  507D               	movf	_input,w,c	;volatile
 20220                           
 20221                           ; Switch size 1, requested type "space"
 20222                           ; Number of cases is 7, Range of values is 49 to 68
 20223                           ; switch strategies available:
 20224                           ; Name         Instructions Cycles
 20225                           ; simple_byte           22    12 (average)
 20226                           ;	Chosen strategy is simple_byte
 20227  003752  0A31               	xorlw	49	; case 49
 20228  003754  B4D8               	btfsc	status,2,c
 20229  003756  D789               	goto	i2l7193
 20230  003758  0A03               	xorlw	3	; case 50
 20231  00375A  B4D8               	btfsc	status,2,c
 20232  00375C  D799               	goto	i2l7207
 20233  00375E  0A01               	xorlw	1	; case 51
 20234  003760  B4D8               	btfsc	status,2,c
 20235  003762  D7BA               	goto	i2l7227
 20236  003764  0A72               	xorlw	114	; case 65
 20237  003766  B4D8               	btfsc	status,2,c
 20238  003768  D7CA               	goto	i2l7241
 20239  00376A  0A03               	xorlw	3	; case 66
 20240  00376C  B4D8               	btfsc	status,2,c
 20241  00376E  D7D0               	goto	i2l7245
 20242  003770  0A01               	xorlw	1	; case 67
 20243  003772  B4D8               	btfsc	status,2,c
 20244  003774  D7D6               	goto	i2l7249
 20245  003776  0A07               	xorlw	7	; case 68
 20246  003778  B4D8               	btfsc	status,2,c
 20247  00377A  D7DC               	goto	i2l7253
 20248  00377C  D7E4               	goto	i2l7257
 20249  00377E                     __end_of_inputHandler:
 20250                           	opt stack 0
 20251                           pclatu	equ	0xFFB
 20252                           pclath	equ	0xFFA
 20253                           tblptru	equ	0xFF8
 20254                           tblptrh	equ	0xFF7
 20255                           tblptrl	equ	0xFF6
 20256                           tablat	equ	0xFF5
 20257                           prodh	equ	0xFF4
 20258                           prodl	equ	0xFF3
 20259                           intcon	equ	0xFF2
 20260                           intcon2	equ	0xFF1
 20261                           intcon3	equ	0xFF0
 20262                           indf0	equ	0xFEF
 20263                           postinc0	equ	0xFEE
 20264                           fsr0h	equ	0xFEA
 20265                           fsr0l	equ	0xFE9
 20266                           wreg	equ	0xFE8
 20267                           postdec1	equ	0xFE5
 20268                           fsr1h	equ	0xFE2
 20269                           fsr1l	equ	0xFE1
 20270                           indf2	equ	0xFDF
 20271                           postinc2	equ	0xFDE
 20272                           postdec2	equ	0xFDD
 20273                           fsr2h	equ	0xFDA
 20274                           fsr2l	equ	0xFD9
 20275                           status	equ	0xFD8
 20276                           
 20277 ;; *************** function i2_change_state_to_menu_22 *****************
 20278 ;; Defined at:
 20279 ;;		line 501 in file "UI.c"
 20280 ;; Parameters:    Size  Location     Type
 20281 ;;		None
 20282 ;; Auto vars:     Size  Location     Type
 20283 ;;		None
 20284 ;; Return value:  Size  Location     Type
 20285 ;;                  1    wreg      void 
 20286 ;; Registers used:
 20287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20288 ;; Tracked objects:
 20289 ;;		On entry : 0/0
 20290 ;;		On exit  : 0/0
 20291 ;;		Unchanged: 0/0
 20292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20297 ;;Total ram usage:        0 bytes
 20298 ;; Hardware stack levels used:    1
 20299 ;; Hardware stack levels required when called:    3
 20300 ;; This function calls:
 20301 ;;		i2_lcdInst
 20302 ;;		i2_printf
 20303 ;; This function is called by:
 20304 ;;		_updateMenu
 20305 ;;		_inputHandler
 20306 ;; This function uses a non-reentrant model
 20307 ;;
 20308                           
 20309                           	psect	text67
 20310  004FE0                     __ptext67:
 20311                           	opt stack 0
 20312  004FE0                     i2_change_state_to_menu_22:
 20313                           	opt stack 19
 20314                           
 20315                           ;UI.c: 502: cur_state = 22;
 20316                           
 20317                           ;incstack = 0
 20318  004FE0  0E00               	movlw	0
 20319  004FE2  0100               	movlb	0	; () banked
 20320  004FE4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20321  004FE6  0E16               	movlw	22
 20322  004FE8  6FEC               	movwf	_cur_state& (0+255),b
 20323                           
 20324                           ; BSR set to: 0
 20325                           ;UI.c: 504: lcdInst(0b10000000);;
 20326  004FEA  0E80               	movlw	128
 20327  004FEC  EC23  F02A         	call	i2_lcdInst
 20328                           
 20329                           ;UI.c: 505: printf("2. SORT        <");
 20330  004FF0  0EC4               	movlw	low STR_34
 20331  004FF2  6E0D               	movwf	i2printf@f,c
 20332  004FF4  0EFD               	movlw	high STR_34
 20333  004FF6  6E0E               	movwf	i2printf@f+1,c
 20334  004FF8  ECF9  F00E         	call	i2_printf	;wreg free
 20335                           
 20336                           ;UI.c: 506: lcdInst(0b11000000);;
 20337  004FFC  0EC0               	movlw	192
 20338  004FFE  EC23  F02A         	call	i2_lcdInst
 20339                           
 20340                           ;UI.c: 507: printf("3. LOGS         ");
 20341  005002  0E09               	movlw	low STR_36
 20342  005004  6E0D               	movwf	i2printf@f,c
 20343  005006  0EFD               	movlw	high STR_36
 20344  005008  6E0E               	movwf	i2printf@f+1,c
 20345  00500A  ECF9  F00E         	call	i2_printf	;wreg free
 20346  00500E  0012               	return		;funcret
 20347  005010                     __end_ofi2_change_state_to_menu_22:
 20348                           	opt stack 0
 20349                           pclatu	equ	0xFFB
 20350                           pclath	equ	0xFFA
 20351                           tblptru	equ	0xFF8
 20352                           tblptrh	equ	0xFF7
 20353                           tblptrl	equ	0xFF6
 20354                           tablat	equ	0xFF5
 20355                           prodh	equ	0xFF4
 20356                           prodl	equ	0xFF3
 20357                           intcon	equ	0xFF2
 20358                           intcon2	equ	0xFF1
 20359                           intcon3	equ	0xFF0
 20360                           indf0	equ	0xFEF
 20361                           postinc0	equ	0xFEE
 20362                           fsr0h	equ	0xFEA
 20363                           fsr0l	equ	0xFE9
 20364                           wreg	equ	0xFE8
 20365                           postdec1	equ	0xFE5
 20366                           fsr1h	equ	0xFE2
 20367                           fsr1l	equ	0xFE1
 20368                           indf2	equ	0xFDF
 20369                           postinc2	equ	0xFDE
 20370                           postdec2	equ	0xFDD
 20371                           fsr2h	equ	0xFDA
 20372                           fsr2l	equ	0xFD9
 20373                           status	equ	0xFD8
 20374                           
 20375 ;; *************** function i2_change_state_to_menu_12 *****************
 20376 ;; Defined at:
 20377 ;;		line 493 in file "UI.c"
 20378 ;; Parameters:    Size  Location     Type
 20379 ;;		None
 20380 ;; Auto vars:     Size  Location     Type
 20381 ;;		None
 20382 ;; Return value:  Size  Location     Type
 20383 ;;                  1    wreg      void 
 20384 ;; Registers used:
 20385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20386 ;; Tracked objects:
 20387 ;;		On entry : 0/0
 20388 ;;		On exit  : 0/0
 20389 ;;		Unchanged: 0/0
 20390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20395 ;;Total ram usage:        0 bytes
 20396 ;; Hardware stack levels used:    1
 20397 ;; Hardware stack levels required when called:    3
 20398 ;; This function calls:
 20399 ;;		i2_lcdInst
 20400 ;;		i2_printf
 20401 ;; This function is called by:
 20402 ;;		_updateMenu
 20403 ;;		_inputHandler
 20404 ;; This function uses a non-reentrant model
 20405 ;;
 20406                           
 20407                           	psect	text68
 20408  005010                     __ptext68:
 20409                           	opt stack 0
 20410  005010                     i2_change_state_to_menu_12:
 20411                           	opt stack 19
 20412                           
 20413                           ;UI.c: 494: cur_state = 12;
 20414                           
 20415                           ;incstack = 0
 20416  005010  0E00               	movlw	0
 20417  005012  0100               	movlb	0	; () banked
 20418  005014  6FED               	movwf	(_cur_state+1)& (0+255),b
 20419  005016  0E0C               	movlw	12
 20420  005018  6FEC               	movwf	_cur_state& (0+255),b
 20421                           
 20422                           ; BSR set to: 0
 20423                           ;UI.c: 496: lcdInst(0b10000000);;
 20424  00501A  0E80               	movlw	128
 20425  00501C  EC23  F02A         	call	i2_lcdInst
 20426                           
 20427                           ;UI.c: 497: printf("1. DATE/TIME    ");
 20428  005020  0E2B               	movlw	low STR_33
 20429  005022  6E0D               	movwf	i2printf@f,c
 20430  005024  0EFD               	movlw	high STR_33
 20431  005026  6E0E               	movwf	i2printf@f+1,c
 20432  005028  ECF9  F00E         	call	i2_printf	;wreg free
 20433                           
 20434                           ;UI.c: 498: lcdInst(0b11000000);;
 20435  00502C  0EC0               	movlw	192
 20436  00502E  EC23  F02A         	call	i2_lcdInst
 20437                           
 20438                           ;UI.c: 499: printf("2. SORT        <");
 20439  005032  0EC4               	movlw	low STR_34
 20440  005034  6E0D               	movwf	i2printf@f,c
 20441  005036  0EFD               	movlw	high STR_34
 20442  005038  6E0E               	movwf	i2printf@f+1,c
 20443  00503A  ECF9  F00E         	call	i2_printf	;wreg free
 20444  00503E  0012               	return		;funcret
 20445  005040                     __end_ofi2_change_state_to_menu_12:
 20446                           	opt stack 0
 20447                           pclatu	equ	0xFFB
 20448                           pclath	equ	0xFFA
 20449                           tblptru	equ	0xFF8
 20450                           tblptrh	equ	0xFF7
 20451                           tblptrl	equ	0xFF6
 20452                           tablat	equ	0xFF5
 20453                           prodh	equ	0xFF4
 20454                           prodl	equ	0xFF3
 20455                           intcon	equ	0xFF2
 20456                           intcon2	equ	0xFF1
 20457                           intcon3	equ	0xFF0
 20458                           indf0	equ	0xFEF
 20459                           postinc0	equ	0xFEE
 20460                           fsr0h	equ	0xFEA
 20461                           fsr0l	equ	0xFE9
 20462                           wreg	equ	0xFE8
 20463                           postdec1	equ	0xFE5
 20464                           fsr1h	equ	0xFE2
 20465                           fsr1l	equ	0xFE1
 20466                           indf2	equ	0xFDF
 20467                           postinc2	equ	0xFDE
 20468                           postdec2	equ	0xFDD
 20469                           fsr2h	equ	0xFDA
 20470                           fsr2l	equ	0xFD9
 20471                           status	equ	0xFD8
 20472                           
 20473 ;; *************** function _change_state_to_menu_23 *****************
 20474 ;; Defined at:
 20475 ;;		line 509 in file "UI.c"
 20476 ;; Parameters:    Size  Location     Type
 20477 ;;		None
 20478 ;; Auto vars:     Size  Location     Type
 20479 ;;		None
 20480 ;; Return value:  Size  Location     Type
 20481 ;;                  1    wreg      void 
 20482 ;; Registers used:
 20483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20484 ;; Tracked objects:
 20485 ;;		On entry : 0/0
 20486 ;;		On exit  : 0/0
 20487 ;;		Unchanged: 0/0
 20488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20493 ;;Total ram usage:        0 bytes
 20494 ;; Hardware stack levels used:    1
 20495 ;; Hardware stack levels required when called:    3
 20496 ;; This function calls:
 20497 ;;		i2_lcdInst
 20498 ;;		i2_printf
 20499 ;; This function is called by:
 20500 ;;		_updateMenu
 20501 ;;		_inputHandler
 20502 ;; This function uses a non-reentrant model
 20503 ;;
 20504                           
 20505                           	psect	text69
 20506  005040                     __ptext69:
 20507                           	opt stack 0
 20508  005040                     _change_state_to_menu_23:
 20509                           	opt stack 18
 20510                           
 20511                           ;UI.c: 510: cur_state = 23;
 20512                           
 20513                           ;incstack = 0
 20514  005040  0E00               	movlw	0
 20515  005042  0100               	movlb	0	; () banked
 20516  005044  6FED               	movwf	(_cur_state+1)& (0+255),b
 20517  005046  0E17               	movlw	23
 20518  005048  6FEC               	movwf	_cur_state& (0+255),b
 20519                           
 20520                           ; BSR set to: 0
 20521                           ;UI.c: 512: lcdInst(0b10000000);;
 20522  00504A  0E80               	movlw	128
 20523  00504C  EC23  F02A         	call	i2_lcdInst
 20524                           
 20525                           ;UI.c: 513: printf("2. SORT         ");
 20526  005050  0E1A               	movlw	low STR_32
 20527  005052  6E0D               	movwf	i2printf@f,c
 20528  005054  0EFD               	movlw	high STR_32
 20529  005056  6E0E               	movwf	i2printf@f+1,c
 20530  005058  ECF9  F00E         	call	i2_printf	;wreg free
 20531                           
 20532                           ;UI.c: 514: lcdInst(0b11000000);;
 20533  00505C  0EC0               	movlw	192
 20534  00505E  EC23  F02A         	call	i2_lcdInst
 20535                           
 20536                           ;UI.c: 515: printf("3. LOGS        <");
 20537  005062  0EB3               	movlw	low STR_38
 20538  005064  6E0D               	movwf	i2printf@f,c
 20539  005066  0EFD               	movlw	high STR_38
 20540  005068  6E0E               	movwf	i2printf@f+1,c
 20541  00506A  ECF9  F00E         	call	i2_printf	;wreg free
 20542  00506E  0012               	return		;funcret
 20543  005070                     __end_of_change_state_to_menu_23:
 20544                           	opt stack 0
 20545                           pclatu	equ	0xFFB
 20546                           pclath	equ	0xFFA
 20547                           tblptru	equ	0xFF8
 20548                           tblptrh	equ	0xFF7
 20549                           tblptrl	equ	0xFF6
 20550                           tablat	equ	0xFF5
 20551                           prodh	equ	0xFF4
 20552                           prodl	equ	0xFF3
 20553                           intcon	equ	0xFF2
 20554                           intcon2	equ	0xFF1
 20555                           intcon3	equ	0xFF0
 20556                           indf0	equ	0xFEF
 20557                           postinc0	equ	0xFEE
 20558                           fsr0h	equ	0xFEA
 20559                           fsr0l	equ	0xFE9
 20560                           wreg	equ	0xFE8
 20561                           postdec1	equ	0xFE5
 20562                           fsr1h	equ	0xFE2
 20563                           fsr1l	equ	0xFE1
 20564                           indf2	equ	0xFDF
 20565                           postinc2	equ	0xFDE
 20566                           postdec2	equ	0xFDD
 20567                           fsr2h	equ	0xFDA
 20568                           fsr2l	equ	0xFD9
 20569                           status	equ	0xFD8
 20570                           
 20571 ;; *************** function _change_state_to_menu_11 *****************
 20572 ;; Defined at:
 20573 ;;		line 485 in file "UI.c"
 20574 ;; Parameters:    Size  Location     Type
 20575 ;;		None
 20576 ;; Auto vars:     Size  Location     Type
 20577 ;;		None
 20578 ;; Return value:  Size  Location     Type
 20579 ;;                  1    wreg      void 
 20580 ;; Registers used:
 20581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20582 ;; Tracked objects:
 20583 ;;		On entry : 0/0
 20584 ;;		On exit  : 0/0
 20585 ;;		Unchanged: 0/0
 20586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20591 ;;Total ram usage:        0 bytes
 20592 ;; Hardware stack levels used:    1
 20593 ;; Hardware stack levels required when called:    3
 20594 ;; This function calls:
 20595 ;;		i2_lcdInst
 20596 ;;		i2_printf
 20597 ;; This function is called by:
 20598 ;;		_updateMenu
 20599 ;;		_inputHandler
 20600 ;; This function uses a non-reentrant model
 20601 ;;
 20602                           
 20603                           	psect	text70
 20604  005070                     __ptext70:
 20605                           	opt stack 0
 20606  005070                     _change_state_to_menu_11:
 20607                           	opt stack 18
 20608                           
 20609                           ;UI.c: 486: cur_state = 11;
 20610                           
 20611                           ;incstack = 0
 20612  005070  0E00               	movlw	0
 20613  005072  0100               	movlb	0	; () banked
 20614  005074  6FED               	movwf	(_cur_state+1)& (0+255),b
 20615  005076  0E0B               	movlw	11
 20616  005078  6FEC               	movwf	_cur_state& (0+255),b
 20617                           
 20618                           ; BSR set to: 0
 20619                           ;UI.c: 488: lcdInst(0b10000000);;
 20620  00507A  0E80               	movlw	128
 20621  00507C  EC23  F02A         	call	i2_lcdInst
 20622                           
 20623                           ;UI.c: 489: printf("1. DATE/TIME   <");
 20624  005080  0ED5               	movlw	low STR_31
 20625  005082  6E0D               	movwf	i2printf@f,c
 20626  005084  0EFD               	movlw	high STR_31
 20627  005086  6E0E               	movwf	i2printf@f+1,c
 20628  005088  ECF9  F00E         	call	i2_printf	;wreg free
 20629                           
 20630                           ;UI.c: 490: lcdInst(0b11000000);;
 20631  00508C  0EC0               	movlw	192
 20632  00508E  EC23  F02A         	call	i2_lcdInst
 20633                           
 20634                           ;UI.c: 491: printf("2. SORT         ");
 20635  005092  0E1A               	movlw	low STR_32
 20636  005094  6E0D               	movwf	i2printf@f,c
 20637  005096  0EFD               	movlw	high STR_32
 20638  005098  6E0E               	movwf	i2printf@f+1,c
 20639  00509A  ECF9  F00E         	call	i2_printf	;wreg free
 20640  00509E  0012               	return		;funcret
 20641  0050A0                     __end_of_change_state_to_menu_11:
 20642                           	opt stack 0
 20643                           pclatu	equ	0xFFB
 20644                           pclath	equ	0xFFA
 20645                           tblptru	equ	0xFF8
 20646                           tblptrh	equ	0xFF7
 20647                           tblptrl	equ	0xFF6
 20648                           tablat	equ	0xFF5
 20649                           prodh	equ	0xFF4
 20650                           prodl	equ	0xFF3
 20651                           intcon	equ	0xFF2
 20652                           intcon2	equ	0xFF1
 20653                           intcon3	equ	0xFF0
 20654                           indf0	equ	0xFEF
 20655                           postinc0	equ	0xFEE
 20656                           fsr0h	equ	0xFEA
 20657                           fsr0l	equ	0xFE9
 20658                           wreg	equ	0xFE8
 20659                           postdec1	equ	0xFE5
 20660                           fsr1h	equ	0xFE2
 20661                           fsr1l	equ	0xFE1
 20662                           indf2	equ	0xFDF
 20663                           postinc2	equ	0xFDE
 20664                           postdec2	equ	0xFDD
 20665                           fsr2h	equ	0xFDA
 20666                           fsr2l	equ	0xFD9
 20667                           status	equ	0xFD8
 20668                           
 20669 ;; *************** function _change_state_to_logs_34 *****************
 20670 ;; Defined at:
 20671 ;;		line 552 in file "UI.c"
 20672 ;; Parameters:    Size  Location     Type
 20673 ;;		None
 20674 ;; Auto vars:     Size  Location     Type
 20675 ;;		None
 20676 ;; Return value:  Size  Location     Type
 20677 ;;                  1    wreg      void 
 20678 ;; Registers used:
 20679 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20680 ;; Tracked objects:
 20681 ;;		On entry : 0/0
 20682 ;;		On exit  : 0/0
 20683 ;;		Unchanged: 0/0
 20684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20689 ;;Total ram usage:        0 bytes
 20690 ;; Hardware stack levels used:    1
 20691 ;; Hardware stack levels required when called:    3
 20692 ;; This function calls:
 20693 ;;		i2_lcdInst
 20694 ;;		i2_printf
 20695 ;; This function is called by:
 20696 ;;		_updateMenu
 20697 ;;		_inputHandler
 20698 ;; This function uses a non-reentrant model
 20699 ;;
 20700                           
 20701                           	psect	text71
 20702  0050A0                     __ptext71:
 20703                           	opt stack 0
 20704  0050A0                     _change_state_to_logs_34:
 20705                           	opt stack 18
 20706                           
 20707                           ;UI.c: 553: cur_state = 1034;
 20708                           
 20709                           ;incstack = 0
 20710  0050A0  0E04               	movlw	4
 20711  0050A2  0100               	movlb	0	; () banked
 20712  0050A4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20713  0050A6  0E0A               	movlw	10
 20714  0050A8  6FEC               	movwf	_cur_state& (0+255),b
 20715                           
 20716                           ; BSR set to: 0
 20717                           ;UI.c: 554: lcdInst(0b10000000);;
 20718  0050AA  0E80               	movlw	128
 20719  0050AC  EC23  F02A         	call	i2_lcdInst
 20720                           
 20721                           ;UI.c: 555: printf("LOG 3           ");
 20722  0050B0  0EE7               	movlw	low STR_44
 20723  0050B2  6E0D               	movwf	i2printf@f,c
 20724  0050B4  0EFC               	movlw	high STR_44
 20725  0050B6  6E0E               	movwf	i2printf@f+1,c
 20726  0050B8  ECF9  F00E         	call	i2_printf	;wreg free
 20727                           
 20728                           ;UI.c: 556: lcdInst(0b11000000);;
 20729  0050BC  0EC0               	movlw	192
 20730  0050BE  EC23  F02A         	call	i2_lcdInst
 20731                           
 20732                           ;UI.c: 557: printf("LOG 4          <");
 20733  0050C2  0EA2               	movlw	low STR_50
 20734  0050C4  6E0D               	movwf	i2printf@f,c
 20735  0050C6  0EFD               	movlw	high STR_50
 20736  0050C8  6E0E               	movwf	i2printf@f+1,c
 20737  0050CA  ECF9  F00E         	call	i2_printf	;wreg free
 20738  0050CE  0012               	return		;funcret
 20739  0050D0                     __end_of_change_state_to_logs_34:
 20740                           	opt stack 0
 20741                           pclatu	equ	0xFFB
 20742                           pclath	equ	0xFFA
 20743                           tblptru	equ	0xFF8
 20744                           tblptrh	equ	0xFF7
 20745                           tblptrl	equ	0xFF6
 20746                           tablat	equ	0xFF5
 20747                           prodh	equ	0xFF4
 20748                           prodl	equ	0xFF3
 20749                           intcon	equ	0xFF2
 20750                           intcon2	equ	0xFF1
 20751                           intcon3	equ	0xFF0
 20752                           indf0	equ	0xFEF
 20753                           postinc0	equ	0xFEE
 20754                           fsr0h	equ	0xFEA
 20755                           fsr0l	equ	0xFE9
 20756                           wreg	equ	0xFE8
 20757                           postdec1	equ	0xFE5
 20758                           fsr1h	equ	0xFE2
 20759                           fsr1l	equ	0xFE1
 20760                           indf2	equ	0xFDF
 20761                           postinc2	equ	0xFDE
 20762                           postdec2	equ	0xFDD
 20763                           fsr2h	equ	0xFDA
 20764                           fsr2l	equ	0xFD9
 20765                           status	equ	0xFD8
 20766                           
 20767 ;; *************** function _change_state_to_logs_33 *****************
 20768 ;; Defined at:
 20769 ;;		line 545 in file "UI.c"
 20770 ;; Parameters:    Size  Location     Type
 20771 ;;		None
 20772 ;; Auto vars:     Size  Location     Type
 20773 ;;		None
 20774 ;; Return value:  Size  Location     Type
 20775 ;;                  1    wreg      void 
 20776 ;; Registers used:
 20777 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20778 ;; Tracked objects:
 20779 ;;		On entry : 0/0
 20780 ;;		On exit  : 0/0
 20781 ;;		Unchanged: 0/0
 20782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20787 ;;Total ram usage:        0 bytes
 20788 ;; Hardware stack levels used:    1
 20789 ;; Hardware stack levels required when called:    3
 20790 ;; This function calls:
 20791 ;;		i2_lcdInst
 20792 ;;		i2_printf
 20793 ;; This function is called by:
 20794 ;;		_updateMenu
 20795 ;;		_inputHandler
 20796 ;; This function uses a non-reentrant model
 20797 ;;
 20798                           
 20799                           	psect	text72
 20800  0050D0                     __ptext72:
 20801                           	opt stack 0
 20802  0050D0                     _change_state_to_logs_33:
 20803                           	opt stack 18
 20804                           
 20805                           ;UI.c: 546: cur_state = 1033;
 20806                           
 20807                           ;incstack = 0
 20808  0050D0  0E04               	movlw	4
 20809  0050D2  0100               	movlb	0	; () banked
 20810  0050D4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20811  0050D6  0E09               	movlw	9
 20812  0050D8  6FEC               	movwf	_cur_state& (0+255),b
 20813                           
 20814                           ; BSR set to: 0
 20815                           ;UI.c: 547: lcdInst(0b10000000);;
 20816  0050DA  0E80               	movlw	128
 20817  0050DC  EC23  F02A         	call	i2_lcdInst
 20818                           
 20819                           ;UI.c: 548: printf("LOG 3          <");
 20820  0050E0  0E91               	movlw	low STR_46
 20821  0050E2  6E0D               	movwf	i2printf@f,c
 20822  0050E4  0EFD               	movlw	high STR_46
 20823  0050E6  6E0E               	movwf	i2printf@f+1,c
 20824  0050E8  ECF9  F00E         	call	i2_printf	;wreg free
 20825                           
 20826                           ;UI.c: 549: lcdInst(0b11000000);;
 20827  0050EC  0EC0               	movlw	192
 20828  0050EE  EC23  F02A         	call	i2_lcdInst
 20829                           
 20830                           ;UI.c: 550: printf("LOG 4           ");
 20831  0050F2  0EF8               	movlw	low STR_48
 20832  0050F4  6E0D               	movwf	i2printf@f,c
 20833  0050F6  0EFC               	movlw	high STR_48
 20834  0050F8  6E0E               	movwf	i2printf@f+1,c
 20835  0050FA  ECF9  F00E         	call	i2_printf	;wreg free
 20836  0050FE  0012               	return		;funcret
 20837  005100                     __end_of_change_state_to_logs_33:
 20838                           	opt stack 0
 20839                           pclatu	equ	0xFFB
 20840                           pclath	equ	0xFFA
 20841                           tblptru	equ	0xFF8
 20842                           tblptrh	equ	0xFF7
 20843                           tblptrl	equ	0xFF6
 20844                           tablat	equ	0xFF5
 20845                           prodh	equ	0xFF4
 20846                           prodl	equ	0xFF3
 20847                           intcon	equ	0xFF2
 20848                           intcon2	equ	0xFF1
 20849                           intcon3	equ	0xFF0
 20850                           indf0	equ	0xFEF
 20851                           postinc0	equ	0xFEE
 20852                           fsr0h	equ	0xFEA
 20853                           fsr0l	equ	0xFE9
 20854                           wreg	equ	0xFE8
 20855                           postdec1	equ	0xFE5
 20856                           fsr1h	equ	0xFE2
 20857                           fsr1l	equ	0xFE1
 20858                           indf2	equ	0xFDF
 20859                           postinc2	equ	0xFDE
 20860                           postdec2	equ	0xFDD
 20861                           fsr2h	equ	0xFDA
 20862                           fsr2l	equ	0xFD9
 20863                           status	equ	0xFD8
 20864                           
 20865 ;; *************** function _change_state_to_logs_23 *****************
 20866 ;; Defined at:
 20867 ;;		line 538 in file "UI.c"
 20868 ;; Parameters:    Size  Location     Type
 20869 ;;		None
 20870 ;; Auto vars:     Size  Location     Type
 20871 ;;		None
 20872 ;; Return value:  Size  Location     Type
 20873 ;;                  1    wreg      void 
 20874 ;; Registers used:
 20875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20876 ;; Tracked objects:
 20877 ;;		On entry : 0/0
 20878 ;;		On exit  : 0/0
 20879 ;;		Unchanged: 0/0
 20880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20885 ;;Total ram usage:        0 bytes
 20886 ;; Hardware stack levels used:    1
 20887 ;; Hardware stack levels required when called:    3
 20888 ;; This function calls:
 20889 ;;		i2_lcdInst
 20890 ;;		i2_printf
 20891 ;; This function is called by:
 20892 ;;		_updateMenu
 20893 ;;		_inputHandler
 20894 ;; This function uses a non-reentrant model
 20895 ;;
 20896                           
 20897                           	psect	text73
 20898  0051BE                     __ptext73:
 20899                           	opt stack 0
 20900  0051BE                     _change_state_to_logs_23:
 20901                           	opt stack 18
 20902                           
 20903                           ;UI.c: 539: cur_state = 1023;
 20904                           
 20905                           ;incstack = 0
 20906  0051BE  0E03               	movlw	3
 20907  0051C0  0100               	movlb	0	; () banked
 20908  0051C2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20909  0051C4  69EC               	setf	_cur_state& (0+255),b
 20910                           
 20911                           ; BSR set to: 0
 20912                           ;UI.c: 540: lcdInst(0b10000000);;
 20913  0051C6  0E80               	movlw	128
 20914  0051C8  EC23  F02A         	call	i2_lcdInst
 20915                           
 20916                           ;UI.c: 541: printf("LOG 2           ");
 20917  0051CC  0ED6               	movlw	low STR_40
 20918  0051CE  6E0D               	movwf	i2printf@f,c
 20919  0051D0  0EFC               	movlw	high STR_40
 20920  0051D2  6E0E               	movwf	i2printf@f+1,c
 20921  0051D4  ECF9  F00E         	call	i2_printf	;wreg free
 20922                           
 20923                           ;UI.c: 542: lcdInst(0b11000000);;
 20924  0051D8  0EC0               	movlw	192
 20925  0051DA  EC23  F02A         	call	i2_lcdInst
 20926                           
 20927                           ;UI.c: 543: printf("LOG 3          <");
 20928  0051DE  0E91               	movlw	low STR_46
 20929  0051E0  6E0D               	movwf	i2printf@f,c
 20930  0051E2  0EFD               	movlw	high STR_46
 20931  0051E4  6E0E               	movwf	i2printf@f+1,c
 20932  0051E6  ECF9  F00E         	call	i2_printf	;wreg free
 20933  0051EA  0012               	return		;funcret
 20934  0051EC                     __end_of_change_state_to_logs_23:
 20935                           	opt stack 0
 20936                           pclatu	equ	0xFFB
 20937                           pclath	equ	0xFFA
 20938                           tblptru	equ	0xFF8
 20939                           tblptrh	equ	0xFF7
 20940                           tblptrl	equ	0xFF6
 20941                           tablat	equ	0xFF5
 20942                           prodh	equ	0xFF4
 20943                           prodl	equ	0xFF3
 20944                           intcon	equ	0xFF2
 20945                           intcon2	equ	0xFF1
 20946                           intcon3	equ	0xFF0
 20947                           indf0	equ	0xFEF
 20948                           postinc0	equ	0xFEE
 20949                           fsr0h	equ	0xFEA
 20950                           fsr0l	equ	0xFE9
 20951                           wreg	equ	0xFE8
 20952                           postdec1	equ	0xFE5
 20953                           fsr1h	equ	0xFE2
 20954                           fsr1l	equ	0xFE1
 20955                           indf2	equ	0xFDF
 20956                           postinc2	equ	0xFDE
 20957                           postdec2	equ	0xFDD
 20958                           fsr2h	equ	0xFDA
 20959                           fsr2l	equ	0xFD9
 20960                           status	equ	0xFD8
 20961                           
 20962 ;; *************** function _change_state_to_logs_22 *****************
 20963 ;; Defined at:
 20964 ;;		line 531 in file "UI.c"
 20965 ;; Parameters:    Size  Location     Type
 20966 ;;		None
 20967 ;; Auto vars:     Size  Location     Type
 20968 ;;		None
 20969 ;; Return value:  Size  Location     Type
 20970 ;;                  1    wreg      void 
 20971 ;; Registers used:
 20972 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20973 ;; Tracked objects:
 20974 ;;		On entry : 0/0
 20975 ;;		On exit  : 0/0
 20976 ;;		Unchanged: 0/0
 20977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20982 ;;Total ram usage:        0 bytes
 20983 ;; Hardware stack levels used:    1
 20984 ;; Hardware stack levels required when called:    3
 20985 ;; This function calls:
 20986 ;;		i2_lcdInst
 20987 ;;		i2_printf
 20988 ;; This function is called by:
 20989 ;;		_updateMenu
 20990 ;;		_inputHandler
 20991 ;; This function uses a non-reentrant model
 20992 ;;
 20993                           
 20994                           	psect	text74
 20995  005100                     __ptext74:
 20996                           	opt stack 0
 20997  005100                     _change_state_to_logs_22:
 20998                           	opt stack 18
 20999                           
 21000                           ;UI.c: 532: cur_state = 1022;
 21001                           
 21002                           ;incstack = 0
 21003  005100  0E03               	movlw	3
 21004  005102  0100               	movlb	0	; () banked
 21005  005104  6FED               	movwf	(_cur_state+1)& (0+255),b
 21006  005106  0EFE               	movlw	254
 21007  005108  6FEC               	movwf	_cur_state& (0+255),b
 21008                           
 21009                           ; BSR set to: 0
 21010                           ;UI.c: 533: lcdInst(0b10000000);;
 21011  00510A  0E80               	movlw	128
 21012  00510C  EC23  F02A         	call	i2_lcdInst
 21013                           
 21014                           ;UI.c: 534: printf("LOG 2          <");
 21015  005110  0E80               	movlw	low STR_42
 21016  005112  6E0D               	movwf	i2printf@f,c
 21017  005114  0EFD               	movlw	high STR_42
 21018  005116  6E0E               	movwf	i2printf@f+1,c
 21019  005118  ECF9  F00E         	call	i2_printf	;wreg free
 21020                           
 21021                           ;UI.c: 535: lcdInst(0b11000000);;
 21022  00511C  0EC0               	movlw	192
 21023  00511E  EC23  F02A         	call	i2_lcdInst
 21024                           
 21025                           ;UI.c: 536: printf("LOG 3           ");
 21026  005122  0EE7               	movlw	low STR_44
 21027  005124  6E0D               	movwf	i2printf@f,c
 21028  005126  0EFC               	movlw	high STR_44
 21029  005128  6E0E               	movwf	i2printf@f+1,c
 21030  00512A  ECF9  F00E         	call	i2_printf	;wreg free
 21031  00512E  0012               	return		;funcret
 21032  005130                     __end_of_change_state_to_logs_22:
 21033                           	opt stack 0
 21034                           pclatu	equ	0xFFB
 21035                           pclath	equ	0xFFA
 21036                           tblptru	equ	0xFF8
 21037                           tblptrh	equ	0xFF7
 21038                           tblptrl	equ	0xFF6
 21039                           tablat	equ	0xFF5
 21040                           prodh	equ	0xFF4
 21041                           prodl	equ	0xFF3
 21042                           intcon	equ	0xFF2
 21043                           intcon2	equ	0xFF1
 21044                           intcon3	equ	0xFF0
 21045                           indf0	equ	0xFEF
 21046                           postinc0	equ	0xFEE
 21047                           fsr0h	equ	0xFEA
 21048                           fsr0l	equ	0xFE9
 21049                           wreg	equ	0xFE8
 21050                           postdec1	equ	0xFE5
 21051                           fsr1h	equ	0xFE2
 21052                           fsr1l	equ	0xFE1
 21053                           indf2	equ	0xFDF
 21054                           postinc2	equ	0xFDE
 21055                           postdec2	equ	0xFDD
 21056                           fsr2h	equ	0xFDA
 21057                           fsr2l	equ	0xFD9
 21058                           status	equ	0xFD8
 21059                           
 21060 ;; *************** function _change_state_to_logs_12 *****************
 21061 ;; Defined at:
 21062 ;;		line 524 in file "UI.c"
 21063 ;; Parameters:    Size  Location     Type
 21064 ;;		None
 21065 ;; Auto vars:     Size  Location     Type
 21066 ;;		None
 21067 ;; Return value:  Size  Location     Type
 21068 ;;                  1    wreg      void 
 21069 ;; Registers used:
 21070 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21071 ;; Tracked objects:
 21072 ;;		On entry : 0/0
 21073 ;;		On exit  : 0/0
 21074 ;;		Unchanged: 0/0
 21075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21080 ;;Total ram usage:        0 bytes
 21081 ;; Hardware stack levels used:    1
 21082 ;; Hardware stack levels required when called:    3
 21083 ;; This function calls:
 21084 ;;		i2_lcdInst
 21085 ;;		i2_printf
 21086 ;; This function is called by:
 21087 ;;		_updateMenu
 21088 ;;		_inputHandler
 21089 ;; This function uses a non-reentrant model
 21090 ;;
 21091                           
 21092                           	psect	text75
 21093  005130                     __ptext75:
 21094                           	opt stack 0
 21095  005130                     _change_state_to_logs_12:
 21096                           	opt stack 18
 21097                           
 21098                           ;UI.c: 525: cur_state = 1012;
 21099                           
 21100                           ;incstack = 0
 21101  005130  0E03               	movlw	3
 21102  005132  0100               	movlb	0	; () banked
 21103  005134  6FED               	movwf	(_cur_state+1)& (0+255),b
 21104  005136  0EF4               	movlw	244
 21105  005138  6FEC               	movwf	_cur_state& (0+255),b
 21106                           
 21107                           ; BSR set to: 0
 21108                           ;UI.c: 526: lcdInst(0b10000000);;
 21109  00513A  0E80               	movlw	128
 21110  00513C  EC23  F02A         	call	i2_lcdInst
 21111                           
 21112                           ;UI.c: 527: printf("LOG 1           ");
 21113  005140  0EC5               	movlw	low STR_41
 21114  005142  6E0D               	movwf	i2printf@f,c
 21115  005144  0EFC               	movlw	high STR_41
 21116  005146  6E0E               	movwf	i2printf@f+1,c
 21117  005148  ECF9  F00E         	call	i2_printf	;wreg free
 21118                           
 21119                           ;UI.c: 528: lcdInst(0b11000000);;
 21120  00514C  0EC0               	movlw	192
 21121  00514E  EC23  F02A         	call	i2_lcdInst
 21122                           
 21123                           ;UI.c: 529: printf("LOG 2          <");
 21124  005152  0E80               	movlw	low STR_42
 21125  005154  6E0D               	movwf	i2printf@f,c
 21126  005156  0EFD               	movlw	high STR_42
 21127  005158  6E0E               	movwf	i2printf@f+1,c
 21128  00515A  ECF9  F00E         	call	i2_printf	;wreg free
 21129  00515E  0012               	return		;funcret
 21130  005160                     __end_of_change_state_to_logs_12:
 21131                           	opt stack 0
 21132                           pclatu	equ	0xFFB
 21133                           pclath	equ	0xFFA
 21134                           tblptru	equ	0xFF8
 21135                           tblptrh	equ	0xFF7
 21136                           tblptrl	equ	0xFF6
 21137                           tablat	equ	0xFF5
 21138                           prodh	equ	0xFF4
 21139                           prodl	equ	0xFF3
 21140                           intcon	equ	0xFF2
 21141                           intcon2	equ	0xFF1
 21142                           intcon3	equ	0xFF0
 21143                           indf0	equ	0xFEF
 21144                           postinc0	equ	0xFEE
 21145                           fsr0h	equ	0xFEA
 21146                           fsr0l	equ	0xFE9
 21147                           wreg	equ	0xFE8
 21148                           postdec1	equ	0xFE5
 21149                           fsr1h	equ	0xFE2
 21150                           fsr1l	equ	0xFE1
 21151                           indf2	equ	0xFDF
 21152                           postinc2	equ	0xFDE
 21153                           postdec2	equ	0xFDD
 21154                           fsr2h	equ	0xFDA
 21155                           fsr2l	equ	0xFD9
 21156                           status	equ	0xFD8
 21157                           
 21158 ;; *************** function _change_state_to_logs_11 *****************
 21159 ;; Defined at:
 21160 ;;		line 517 in file "UI.c"
 21161 ;; Parameters:    Size  Location     Type
 21162 ;;		None
 21163 ;; Auto vars:     Size  Location     Type
 21164 ;;		None
 21165 ;; Return value:  Size  Location     Type
 21166 ;;                  1    wreg      void 
 21167 ;; Registers used:
 21168 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21169 ;; Tracked objects:
 21170 ;;		On entry : 0/0
 21171 ;;		On exit  : 0/0
 21172 ;;		Unchanged: 0/0
 21173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21178 ;;Total ram usage:        0 bytes
 21179 ;; Hardware stack levels used:    1
 21180 ;; Hardware stack levels required when called:    3
 21181 ;; This function calls:
 21182 ;;		i2_lcdInst
 21183 ;;		i2_printf
 21184 ;; This function is called by:
 21185 ;;		_updateMenu
 21186 ;;		_inputHandler
 21187 ;; This function uses a non-reentrant model
 21188 ;;
 21189                           
 21190                           	psect	text76
 21191  005160                     __ptext76:
 21192                           	opt stack 0
 21193  005160                     _change_state_to_logs_11:
 21194                           	opt stack 18
 21195                           
 21196                           ;UI.c: 518: cur_state = 1011;
 21197                           
 21198                           ;incstack = 0
 21199  005160  0E03               	movlw	3
 21200  005162  0100               	movlb	0	; () banked
 21201  005164  6FED               	movwf	(_cur_state+1)& (0+255),b
 21202  005166  0EF3               	movlw	243
 21203  005168  6FEC               	movwf	_cur_state& (0+255),b
 21204                           
 21205                           ; BSR set to: 0
 21206                           ;UI.c: 519: lcdInst(0b10000000);;
 21207  00516A  0E80               	movlw	128
 21208  00516C  EC23  F02A         	call	i2_lcdInst
 21209                           
 21210                           ;UI.c: 520: printf("LOG 1          <");
 21211  005170  0E6F               	movlw	low STR_39
 21212  005172  6E0D               	movwf	i2printf@f,c
 21213  005174  0EFD               	movlw	high STR_39
 21214  005176  6E0E               	movwf	i2printf@f+1,c
 21215  005178  ECF9  F00E         	call	i2_printf	;wreg free
 21216                           
 21217                           ;UI.c: 521: lcdInst(0b11000000);;
 21218  00517C  0EC0               	movlw	192
 21219  00517E  EC23  F02A         	call	i2_lcdInst
 21220                           
 21221                           ;UI.c: 522: printf("LOG 2           ");
 21222  005182  0ED6               	movlw	low STR_40
 21223  005184  6E0D               	movwf	i2printf@f,c
 21224  005186  0EFC               	movlw	high STR_40
 21225  005188  6E0E               	movwf	i2printf@f+1,c
 21226  00518A  ECF9  F00E         	call	i2_printf	;wreg free
 21227  00518E  0012               	return		;funcret
 21228  005190                     __end_of_change_state_to_logs_11:
 21229                           	opt stack 0
 21230                           pclatu	equ	0xFFB
 21231                           pclath	equ	0xFFA
 21232                           tblptru	equ	0xFF8
 21233                           tblptrh	equ	0xFF7
 21234                           tblptrl	equ	0xFF6
 21235                           tablat	equ	0xFF5
 21236                           prodh	equ	0xFF4
 21237                           prodl	equ	0xFF3
 21238                           intcon	equ	0xFF2
 21239                           intcon2	equ	0xFF1
 21240                           intcon3	equ	0xFF0
 21241                           indf0	equ	0xFEF
 21242                           postinc0	equ	0xFEE
 21243                           fsr0h	equ	0xFEA
 21244                           fsr0l	equ	0xFE9
 21245                           wreg	equ	0xFE8
 21246                           postdec1	equ	0xFE5
 21247                           fsr1h	equ	0xFE2
 21248                           fsr1l	equ	0xFE1
 21249                           indf2	equ	0xFDF
 21250                           postinc2	equ	0xFDE
 21251                           postdec2	equ	0xFDD
 21252                           fsr2h	equ	0xFDA
 21253                           fsr2l	equ	0xFD9
 21254                           status	equ	0xFD8
 21255                           
 21256 ;; *************** function _dispLogs *****************
 21257 ;; Defined at:
 21258 ;;		line 470 in file "UI.c"
 21259 ;; Parameters:    Size  Location     Type
 21260 ;;  myLog           2   17[COMRAM] int 
 21261 ;; Auto vars:     Size  Location     Type
 21262 ;;		None
 21263 ;; Return value:  Size  Location     Type
 21264 ;;                  1    wreg      void 
 21265 ;; Registers used:
 21266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21267 ;; Tracked objects:
 21268 ;;		On entry : 0/0
 21269 ;;		On exit  : 0/0
 21270 ;;		Unchanged: 0/0
 21271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21272 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21275 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21276 ;;Total ram usage:        2 bytes
 21277 ;; Hardware stack levels used:    1
 21278 ;; Hardware stack levels required when called:    2
 21279 ;; This function calls:
 21280 ;;		_retrieveLog
 21281 ;; This function is called by:
 21282 ;;		_updateMenu
 21283 ;; This function uses a non-reentrant model
 21284 ;;
 21285                           
 21286                           	psect	text77
 21287  00530A                     __ptext77:
 21288                           	opt stack 0
 21289  00530A                     _dispLogs:
 21290                           	opt stack 20
 21291                           
 21292                           ;UI.c: 471: logstate = 1;
 21293                           
 21294                           ;incstack = 0
 21295  00530A  0E00               	movlw	0
 21296  00530C  0100               	movlb	0	; () banked
 21297  00530E  6FF9               	movwf	(_logstate+1)& (0+255),b
 21298  005310  0E01               	movlw	1
 21299  005312  6FF8               	movwf	_logstate& (0+255),b
 21300                           
 21301                           ; BSR set to: 0
 21302                           ;UI.c: 472: log = myLog;
 21303  005314  C012  F0F2         	movff	dispLogs@myLog,_log
 21304  005318  C013  F0F3         	movff	dispLogs@myLog+1,_log+1
 21305                           
 21306                           ; BSR set to: 0
 21307                           ;UI.c: 473: retrieveLog(myLog - 1);
 21308  00531C  0EFF               	movlw	255
 21309  00531E  2412               	addwf	dispLogs@myLog,w,c
 21310  005320  6E07               	movwf	retrieveLog@logNum,c
 21311  005322  0EFF               	movlw	255
 21312  005324  2013               	addwfc	dispLogs@myLog+1,w,c
 21313  005326  6E08               	movwf	retrieveLog@logNum+1,c
 21314  005328  EC07  F01E         	call	_retrieveLog	;wreg free
 21315  00532C  0012               	return		;funcret
 21316  00532E                     __end_of_dispLogs:
 21317                           	opt stack 0
 21318                           pclatu	equ	0xFFB
 21319                           pclath	equ	0xFFA
 21320                           tblptru	equ	0xFF8
 21321                           tblptrh	equ	0xFF7
 21322                           tblptrl	equ	0xFF6
 21323                           tablat	equ	0xFF5
 21324                           prodh	equ	0xFF4
 21325                           prodl	equ	0xFF3
 21326                           intcon	equ	0xFF2
 21327                           intcon2	equ	0xFF1
 21328                           intcon3	equ	0xFF0
 21329                           indf0	equ	0xFEF
 21330                           postinc0	equ	0xFEE
 21331                           fsr0h	equ	0xFEA
 21332                           fsr0l	equ	0xFE9
 21333                           wreg	equ	0xFE8
 21334                           postdec1	equ	0xFE5
 21335                           fsr1h	equ	0xFE2
 21336                           fsr1l	equ	0xFE1
 21337                           indf2	equ	0xFDF
 21338                           postinc2	equ	0xFDE
 21339                           postdec2	equ	0xFDD
 21340                           fsr2h	equ	0xFDA
 21341                           fsr2l	equ	0xFD9
 21342                           status	equ	0xFD8
 21343                           
 21344 ;; *************** function _retrieveLog *****************
 21345 ;; Defined at:
 21346 ;;		line 134 in file "EEPROM.c"
 21347 ;; Parameters:    Size  Location     Type
 21348 ;;  logNum          2    6[COMRAM] int 
 21349 ;; Auto vars:     Size  Location     Type
 21350 ;;  i               2   13[COMRAM] int 
 21351 ;;  addr            2   15[COMRAM] unsigned short 
 21352 ;;  byte3           1   12[COMRAM] unsigned char 
 21353 ;;  byte2           1   11[COMRAM] unsigned char 
 21354 ;;  byte1           1   10[COMRAM] unsigned char 
 21355 ;; Return value:  Size  Location     Type
 21356 ;;                  1    wreg      void 
 21357 ;; Registers used:
 21358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21359 ;; Tracked objects:
 21360 ;;		On entry : 0/0
 21361 ;;		On exit  : 0/0
 21362 ;;		Unchanged: 0/0
 21363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21364 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21365 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21367 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21368 ;;Total ram usage:       11 bytes
 21369 ;; Hardware stack levels used:    1
 21370 ;; Hardware stack levels required when called:    1
 21371 ;; This function calls:
 21372 ;;		i2_EEPROM_read
 21373 ;;		i2___wmul
 21374 ;; This function is called by:
 21375 ;;		_dispLogs
 21376 ;; This function uses a non-reentrant model
 21377 ;;
 21378                           
 21379                           	psect	text78
 21380  003C0E                     __ptext78:
 21381                           	opt stack 0
 21382  003C0E                     _retrieveLog:
 21383                           	opt stack 20
 21384                           
 21385                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21386                           
 21387                           ;incstack = 0
 21388  003C0E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21389  003C12  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21390  003C16  0E00               	movlw	0
 21391  003C18  6E04               	movwf	i2___wmul@multiplicand+1,c
 21392  003C1A  0E0B               	movlw	11
 21393  003C1C  6E03               	movwf	i2___wmul@multiplicand,c
 21394  003C1E  EC5F  F029         	call	i2___wmul	;wreg free
 21395  003C22  0E01               	movlw	1
 21396  003C24  2401               	addwf	?i2___wmul,w,c
 21397  003C26  6E10               	movwf	retrieveLog@addr,c
 21398  003C28  0E00               	movlw	0
 21399  003C2A  2002               	addwfc	?i2___wmul+1,w,c
 21400  003C2C  6E11               	movwf	retrieveLog@addr+1,c
 21401                           
 21402                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21403  003C2E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21404  003C32  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21405  003C36  ECEF  F029         	call	i2_EEPROM_read	;wreg free
 21406  003C3A  6E0B               	movwf	retrieveLog@byte1,c
 21407                           
 21408                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21409  003C3C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21410  003C40  0E80               	movlw	128
 21411  003C42  1609               	andwf	??_retrieveLog,f,c
 21412  003C44  5009               	movf	??_retrieveLog,w,c
 21413  003C46  0100               	movlb	0	; () banked
 21414  003C48  6FF4               	movwf	_log_completion& (0+255),b
 21415  003C4A  6BF5               	clrf	(_log_completion+1)& (0+255),b
 21416                           
 21417                           ; BSR set to: 0
 21418                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21419  003C4C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21420  003C50  0E0F               	movlw	15
 21421  003C52  1609               	andwf	??_retrieveLog,f,c
 21422  003C54  5009               	movf	??_retrieveLog,w,c
 21423  003C56  0101               	movlb	1	; () banked
 21424  003C58  6F43               	movwf	_log_count_total& (0+255),b
 21425  003C5A  6B44               	clrf	(_log_count_total+1)& (0+255),b
 21426                           
 21427                           ; BSR set to: 1
 21428                           ;EEPROM.c: 146: addr++;
 21429  003C5C  4A10               	infsnz	retrieveLog@addr,f,c
 21430  003C5E  2A11               	incf	retrieveLog@addr+1,f,c
 21431                           
 21432                           ; BSR set to: 1
 21433                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21434  003C60  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21435  003C64  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21436  003C68  ECEF  F029         	call	i2_EEPROM_read	;wreg free
 21437  003C6C  6E0C               	movwf	retrieveLog@byte2,c
 21438                           
 21439                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21440  003C6E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21441  003C72  3A09               	swapf	??_retrieveLog,f,c
 21442  003C74  0E0F               	movlw	15
 21443  003C76  1609               	andwf	??_retrieveLog,f,c
 21444  003C78  0E0F               	movlw	15
 21445  003C7A  1609               	andwf	??_retrieveLog,f,c
 21446  003C7C  5009               	movf	??_retrieveLog,w,c
 21447  003C7E  6E65               	movwf	_log_count_pop_no_tab,c
 21448  003C80  6A66               	clrf	_log_count_pop_no_tab+1,c
 21449                           
 21450                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21451  003C82  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21452  003C86  0E0F               	movlw	15
 21453  003C88  1609               	andwf	??_retrieveLog,f,c
 21454  003C8A  5009               	movf	??_retrieveLog,w,c
 21455  003C8C  6E67               	movwf	_log_count_pop_w_tab,c
 21456  003C8E  6A68               	clrf	_log_count_pop_w_tab+1,c
 21457                           
 21458                           ;EEPROM.c: 152: addr++;
 21459  003C90  4A10               	infsnz	retrieveLog@addr,f,c
 21460  003C92  2A11               	incf	retrieveLog@addr+1,f,c
 21461                           
 21462                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21463  003C94  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21464  003C98  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21465  003C9C  ECEF  F029         	call	i2_EEPROM_read	;wreg free
 21466  003CA0  6E0D               	movwf	retrieveLog@byte3,c
 21467                           
 21468                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21469  003CA2  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21470  003CA6  3A09               	swapf	??_retrieveLog,f,c
 21471  003CA8  0E0F               	movlw	15
 21472  003CAA  1609               	andwf	??_retrieveLog,f,c
 21473  003CAC  0E0F               	movlw	15
 21474  003CAE  1609               	andwf	??_retrieveLog,f,c
 21475  003CB0  5009               	movf	??_retrieveLog,w,c
 21476  003CB2  0101               	movlb	1	; () banked
 21477  003CB4  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 21478  003CB6  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 21479                           
 21480                           ; BSR set to: 1
 21481                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21482  003CB8  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21483  003CBC  0E0F               	movlw	15
 21484  003CBE  1609               	andwf	??_retrieveLog,f,c
 21485  003CC0  5009               	movf	??_retrieveLog,w,c
 21486  003CC2  0101               	movlb	1	; () banked
 21487  003CC4  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 21488  003CC6  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 21489                           
 21490                           ; BSR set to: 1
 21491                           ;EEPROM.c: 156: addr++;
 21492  003CC8  4A10               	infsnz	retrieveLog@addr,f,c
 21493  003CCA  2A11               	incf	retrieveLog@addr+1,f,c
 21494                           
 21495                           ; BSR set to: 1
 21496                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21497  003CCC  0E00               	movlw	0
 21498  003CCE  6E0F               	movwf	retrieveLog@i+1,c
 21499  003CD0  0E00               	movlw	0
 21500  003CD2  6E0E               	movwf	retrieveLog@i,c
 21501  003CD4                     i2l6861:
 21502                           
 21503                           ; BSR set to: 1
 21504  003CD4  BE0F               	btfsc	retrieveLog@i+1,7,c
 21505  003CD6  D006               	goto	i2l6865
 21506  003CD8  500F               	movf	retrieveLog@i+1,w,c
 21507  003CDA  E11E               	bnz	i2l6873
 21508  003CDC  0E07               	movlw	7
 21509  003CDE  5C0E               	subwf	retrieveLog@i,w,c
 21510  003CE0  B0D8               	btfsc	status,0,c
 21511  003CE2  D01A               	goto	i2l6873
 21512  003CE4                     i2l6865:
 21513                           
 21514                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21515  003CE4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21516  003CE8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21517  003CEC  ECEF  F029         	call	i2_EEPROM_read	;wreg free
 21518  003CF0  6E09               	movwf	??_retrieveLog& (0+255),c
 21519  003CF2  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21520  003CF4  90D8               	bcf	status,0,c
 21521  003CF6  340E               	rlcf	retrieveLog@i,w,c
 21522  003CF8  6ED9               	movwf	fsr2l,c
 21523  003CFA  340F               	rlcf	retrieveLog@i+1,w,c
 21524  003CFC  6EDA               	movwf	fsr2h,c
 21525  003CFE  0E00               	movlw	low _log_startTime
 21526  003D00  26D9               	addwf	fsr2l,f,c
 21527  003D02  0E01               	movlw	high _log_startTime
 21528  003D04  22DA               	addwfc	fsr2h,f,c
 21529  003D06  C009  FFDE         	movff	??_retrieveLog,postinc2
 21530  003D0A  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21531                           
 21532                           ;EEPROM.c: 161: addr++;
 21533  003D0E  4A10               	infsnz	retrieveLog@addr,f,c
 21534  003D10  2A11               	incf	retrieveLog@addr+1,f,c
 21535  003D12  4A0E               	infsnz	retrieveLog@i,f,c
 21536  003D14  2A0F               	incf	retrieveLog@i+1,f,c
 21537  003D16  D7DE               	goto	i2l6861
 21538  003D18                     i2l6873:
 21539                           
 21540                           ;EEPROM.c: 162: }
 21541                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21542  003D18  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21543  003D1C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21544  003D20  ECEF  F029         	call	i2_EEPROM_read	;wreg free
 21545  003D24  6E09               	movwf	??_retrieveLog& (0+255),c
 21546  003D26  5009               	movf	??_retrieveLog,w,c
 21547  003D28  0100               	movlb	0	; () banked
 21548  003D2A  6FF6               	movwf	_log_total_time& (0+255),b
 21549  003D2C  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 21550                           
 21551                           ; BSR set to: 0
 21552  003D2E  0012               	return		;funcret
 21553  003D30                     __end_of_retrieveLog:
 21554                           	opt stack 0
 21555                           pclatu	equ	0xFFB
 21556                           pclath	equ	0xFFA
 21557                           tblptru	equ	0xFF8
 21558                           tblptrh	equ	0xFF7
 21559                           tblptrl	equ	0xFF6
 21560                           tablat	equ	0xFF5
 21561                           prodh	equ	0xFF4
 21562                           prodl	equ	0xFF3
 21563                           intcon	equ	0xFF2
 21564                           intcon2	equ	0xFF1
 21565                           intcon3	equ	0xFF0
 21566                           indf0	equ	0xFEF
 21567                           postinc0	equ	0xFEE
 21568                           fsr0h	equ	0xFEA
 21569                           fsr0l	equ	0xFE9
 21570                           wreg	equ	0xFE8
 21571                           postdec1	equ	0xFE5
 21572                           fsr1h	equ	0xFE2
 21573                           fsr1l	equ	0xFE1
 21574                           indf2	equ	0xFDF
 21575                           postinc2	equ	0xFDE
 21576                           postdec2	equ	0xFDD
 21577                           fsr2h	equ	0xFDA
 21578                           fsr2l	equ	0xFD9
 21579                           status	equ	0xFD8
 21580                           
 21581 ;; *************** function i2_EEPROM_read *****************
 21582 ;; Defined at:
 21583 ;;		line 68 in file "EEPROM.c"
 21584 ;; Parameters:    Size  Location     Type
 21585 ;;  address         2    0[COMRAM] unsigned short 
 21586 ;; Auto vars:     Size  Location     Type
 21587 ;;		None
 21588 ;; Return value:  Size  Location     Type
 21589 ;;                  1    wreg      unsigned char 
 21590 ;; Registers used:
 21591 ;;		wreg, status,2
 21592 ;; Tracked objects:
 21593 ;;		On entry : 0/0
 21594 ;;		On exit  : 0/0
 21595 ;;		Unchanged: 0/0
 21596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21597 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21601 ;;Total ram usage:        2 bytes
 21602 ;; Hardware stack levels used:    1
 21603 ;; This function calls:
 21604 ;;		Nothing
 21605 ;; This function is called by:
 21606 ;;		_retrieveLog
 21607 ;; This function uses a non-reentrant model
 21608 ;;
 21609                           
 21610                           	psect	text79
 21611  0053DE                     __ptext79:
 21612                           	opt stack 0
 21613  0053DE                     i2_EEPROM_read:
 21614                           	opt stack 20
 21615                           
 21616                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21617                           
 21618                           ; BSR set to: 0
 21619                           ;incstack = 0
 21620  0053DE  5002               	movf	i2EEPROM_read@address+1,w,c
 21621  0053E0  6EAA               	movwf	4010,c	;volatile
 21622                           
 21623                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21624  0053E2  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21625                           
 21626                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21627  0053E6  9EA6               	bcf	4006,7,c	;volatile
 21628                           
 21629                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21630  0053E8  9CA6               	bcf	4006,6,c	;volatile
 21631                           
 21632                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21633  0053EA  80A6               	bsf	4006,0,c	;volatile
 21634  0053EC                     i2l1085:
 21635  0053EC  B0A6               	btfsc	4006,0,c	;volatile
 21636  0053EE  D7FE               	goto	i2l1085
 21637                           
 21638                           ;EEPROM.c: 81: return EEDATA;
 21639  0053F0  50A8               	movf	4008,w,c	;volatile
 21640  0053F2  0012               	return	
 21641  0053F4                     __end_ofi2_EEPROM_read:
 21642                           	opt stack 0
 21643                           pclatu	equ	0xFFB
 21644                           pclath	equ	0xFFA
 21645                           tblptru	equ	0xFF8
 21646                           tblptrh	equ	0xFF7
 21647                           tblptrl	equ	0xFF6
 21648                           tablat	equ	0xFF5
 21649                           prodh	equ	0xFF4
 21650                           prodl	equ	0xFF3
 21651                           intcon	equ	0xFF2
 21652                           intcon2	equ	0xFF1
 21653                           intcon3	equ	0xFF0
 21654                           indf0	equ	0xFEF
 21655                           postinc0	equ	0xFEE
 21656                           fsr0h	equ	0xFEA
 21657                           fsr0l	equ	0xFE9
 21658                           wreg	equ	0xFE8
 21659                           postdec1	equ	0xFE5
 21660                           fsr1h	equ	0xFE2
 21661                           fsr1l	equ	0xFE1
 21662                           indf2	equ	0xFDF
 21663                           postinc2	equ	0xFDE
 21664                           postdec2	equ	0xFDD
 21665                           fsr2h	equ	0xFDA
 21666                           fsr2l	equ	0xFD9
 21667                           status	equ	0xFD8
 21668                           
 21669 ;; *************** function _printSortTimer *****************
 21670 ;; Defined at:
 21671 ;;		line 450 in file "sort.c"
 21672 ;; Parameters:    Size  Location     Type
 21673 ;;		None
 21674 ;; Auto vars:     Size  Location     Type
 21675 ;;  i               2   70[COMRAM] int 
 21676 ;;  i               2   72[COMRAM] int 
 21677 ;;  curTime        14   44[COMRAM] int [7]
 21678 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21679 ;;  sec             2   64[COMRAM] int 
 21680 ;;  min             2   62[COMRAM] int 
 21681 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21682 ;;  start_sec       2   58[COMRAM] unsigned int 
 21683 ;; Return value:  Size  Location     Type
 21684 ;;                  1    wreg      void 
 21685 ;; Registers used:
 21686 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21687 ;; Tracked objects:
 21688 ;;		On entry : 0/0
 21689 ;;		On exit  : 0/0
 21690 ;;		Unchanged: 0/0
 21691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21693 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21694 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21695 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21696 ;;Total ram usage:       33 bytes
 21697 ;; Hardware stack levels used:    1
 21698 ;; Hardware stack levels required when called:    3
 21699 ;; This function calls:
 21700 ;;		i2___lwdiv
 21701 ;;		i2___lwmod
 21702 ;;		i2___wmul
 21703 ;;		i2_delay_ms
 21704 ;;		i2_getRTC
 21705 ;;		i2_lcdInst
 21706 ;;		i2_printf
 21707 ;; This function is called by:
 21708 ;;		_handler
 21709 ;; This function uses a non-reentrant model
 21710 ;;
 21711                           
 21712                           	psect	text80
 21713  0029E8                     __ptext80:
 21714                           	opt stack 0
 21715  0029E8                     _printSortTimer:
 21716                           	opt stack 20
 21717                           
 21718                           ;sort.c: 451: getRTC();
 21719                           
 21720                           ;incstack = 0
 21721  0029E8  EC94  F024         	call	i2_getRTC	;wreg free
 21722                           
 21723                           ;sort.c: 452: int curTime[7];
 21724                           ;sort.c: 453: for(int i = 0; i < 7; i++){
 21725  0029EC  0E00               	movlw	0
 21726  0029EE  6E4A               	movwf	printSortTimer@i+1,c
 21727  0029F0  0E00               	movlw	0
 21728  0029F2  6E49               	movwf	printSortTimer@i,c
 21729  0029F4                     i2l9313:
 21730  0029F4  BE4A               	btfsc	printSortTimer@i+1,7,c
 21731  0029F6  D006               	goto	i2l9317
 21732  0029F8  504A               	movf	printSortTimer@i+1,w,c
 21733  0029FA  E131               	bnz	i2l9323
 21734  0029FC  0E07               	movlw	7
 21735  0029FE  5C49               	subwf	printSortTimer@i,w,c
 21736  002A00  B0D8               	btfsc	status,0,c
 21737  002A02  D02D               	goto	i2l9323
 21738  002A04                     i2l9317:
 21739                           
 21740                           ;sort.c: 454: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21741  002A04  0E1C               	movlw	low _time
 21742  002A06  2449               	addwf	printSortTimer@i,w,c
 21743  002A08  6ED9               	movwf	fsr2l,c
 21744  002A0A  0E01               	movlw	high _time
 21745  002A0C  204A               	addwfc	printSortTimer@i+1,w,c
 21746  002A0E  6EDA               	movwf	fsr2h,c
 21747  002A10  50DF               	movf	indf2,w,c
 21748  002A12  6E2A               	movwf	??_printSortTimer& (0+255),c
 21749  002A14  3A2A               	swapf	??_printSortTimer,f,c
 21750  002A16  0E0F               	movlw	15
 21751  002A18  162A               	andwf	??_printSortTimer,f,c
 21752  002A1A  0E0F               	movlw	15
 21753  002A1C  162A               	andwf	??_printSortTimer,f,c
 21754  002A1E  502A               	movf	??_printSortTimer,w,c
 21755  002A20  0D0A               	mullw	10
 21756  002A22  0E1C               	movlw	low _time
 21757  002A24  2449               	addwf	printSortTimer@i,w,c
 21758  002A26  6ED9               	movwf	fsr2l,c
 21759  002A28  0E01               	movlw	high _time
 21760  002A2A  204A               	addwfc	printSortTimer@i+1,w,c
 21761  002A2C  6EDA               	movwf	fsr2h,c
 21762  002A2E  50DF               	movf	indf2,w,c
 21763  002A30  0B0F               	andlw	15
 21764  002A32  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21765  002A34  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21766  002A36  50F3               	movf	prodl,w,c
 21767  002A38  262B               	addwf	??_printSortTimer+1,f,c
 21768  002A3A  50F4               	movf	prodh,w,c
 21769  002A3C  222C               	addwfc	??_printSortTimer+2,f,c
 21770  002A3E  90D8               	bcf	status,0,c
 21771  002A40  3449               	rlcf	printSortTimer@i,w,c
 21772  002A42  6ED9               	movwf	fsr2l,c
 21773  002A44  344A               	rlcf	printSortTimer@i+1,w,c
 21774  002A46  6EDA               	movwf	fsr2h,c
 21775  002A48  0E2D               	movlw	low printSortTimer@curTime
 21776  002A4A  26D9               	addwf	fsr2l,f,c
 21777  002A4C  0E00               	movlw	high printSortTimer@curTime
 21778  002A4E  22DA               	addwfc	fsr2h,f,c
 21779  002A50  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21780  002A54  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21781  002A58  4A49               	infsnz	printSortTimer@i,f,c
 21782  002A5A  2A4A               	incf	printSortTimer@i+1,f,c
 21783  002A5C  D7CB               	goto	i2l9313
 21784  002A5E                     i2l9323:
 21785                           
 21786                           ;sort.c: 455: }
 21787                           ;sort.c: 456: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21788  002A5E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21789  002A62  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21790  002A66  0E00               	movlw	0
 21791  002A68  6E04               	movwf	i2___wmul@multiplicand+1,c
 21792  002A6A  0E3C               	movlw	60
 21793  002A6C  6E03               	movwf	i2___wmul@multiplicand,c
 21794  002A6E  EC5F  F029         	call	i2___wmul	;wreg free
 21795  002A72  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21796  002A76  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21797  002A7A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21798  002A7E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21799  002A82  0E0E               	movlw	14
 21800  002A84  6E04               	movwf	i2___wmul@multiplicand+1,c
 21801  002A86  0E10               	movlw	16
 21802  002A88  6E03               	movwf	i2___wmul@multiplicand,c
 21803  002A8A  EC5F  F029         	call	i2___wmul	;wreg free
 21804  002A8E  5001               	movf	?i2___wmul,w,c
 21805  002A90  262A               	addwf	??_printSortTimer,f,c
 21806  002A92  5002               	movf	?i2___wmul+1,w,c
 21807  002A94  222B               	addwfc	??_printSortTimer+1,f,c
 21808  002A96  0101               	movlb	1	; () banked
 21809  002A98  510E               	movf	_startTime& (0+255),w,b
 21810  002A9A  242A               	addwf	??_printSortTimer,w,c
 21811  002A9C  6E3B               	movwf	printSortTimer@start_sec,c
 21812  002A9E  0101               	movlb	1	; () banked
 21813  002AA0  510F               	movf	(_startTime+1)& (0+255),w,b
 21814  002AA2  202B               	addwfc	??_printSortTimer+1,w,c
 21815  002AA4  6E3C               	movwf	printSortTimer@start_sec+1,c
 21816                           
 21817                           ;sort.c: 457: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21818  002AA6  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21819  002AAA  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21820  002AAE  0E00               	movlw	0
 21821  002AB0  6E04               	movwf	i2___wmul@multiplicand+1,c
 21822  002AB2  0E3C               	movlw	60
 21823  002AB4  6E03               	movwf	i2___wmul@multiplicand,c
 21824  002AB6  EC5F  F029         	call	i2___wmul	;wreg free
 21825  002ABA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21826  002ABE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21827  002AC2  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21828  002AC6  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21829  002ACA  0E0E               	movlw	14
 21830  002ACC  6E04               	movwf	i2___wmul@multiplicand+1,c
 21831  002ACE  0E10               	movlw	16
 21832  002AD0  6E03               	movwf	i2___wmul@multiplicand,c
 21833  002AD2  EC5F  F029         	call	i2___wmul	;wreg free
 21834  002AD6  5001               	movf	?i2___wmul,w,c
 21835  002AD8  262A               	addwf	??_printSortTimer,f,c
 21836  002ADA  5002               	movf	?i2___wmul+1,w,c
 21837  002ADC  222B               	addwfc	??_printSortTimer+1,f,c
 21838  002ADE  502D               	movf	printSortTimer@curTime,w,c
 21839  002AE0  242A               	addwf	??_printSortTimer,w,c
 21840  002AE2  6E3D               	movwf	printSortTimer@cur_sec,c
 21841  002AE4  502E               	movf	printSortTimer@curTime+1,w,c
 21842  002AE6  202B               	addwfc	??_printSortTimer+1,w,c
 21843  002AE8  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21844                           
 21845                           ;sort.c: 458: unsigned int timeDiff = cur_sec - start_sec;
 21846  002AEA  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21847  002AEE  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21848  002AF2  1E2A               	comf	??_printSortTimer,f,c
 21849  002AF4  1E2B               	comf	??_printSortTimer+1,f,c
 21850  002AF6  4A2A               	infsnz	??_printSortTimer,f,c
 21851  002AF8  2A2B               	incf	??_printSortTimer+1,f,c
 21852  002AFA  503D               	movf	printSortTimer@cur_sec,w,c
 21853  002AFC  242A               	addwf	??_printSortTimer,w,c
 21854  002AFE  6E45               	movwf	printSortTimer@timeDiff,c
 21855  002B00  503E               	movf	printSortTimer@cur_sec+1,w,c
 21856  002B02  202B               	addwfc	??_printSortTimer+1,w,c
 21857  002B04  6E46               	movwf	printSortTimer@timeDiff+1,c
 21858                           
 21859                           ;sort.c: 460: total_time = timeDiff;
 21860  002B06  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 21861  002B0A  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 21862                           
 21863                           ;sort.c: 462: if(f_most_recent_sort_time){
 21864  002B0E  0101               	movlb	1	; () banked
 21865  002B10  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 21866  002B12  0101               	movlb	1	; () banked
 21867  002B14  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21868  002B16  B4D8               	btfsc	status,2,c
 21869  002B18  D009               	goto	i2l9335
 21870                           
 21871                           ; BSR set to: 1
 21872                           ;sort.c: 463: most_recent_sort_time = total_time;
 21873  002B1A  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 21874  002B1E  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 21875                           
 21876                           ; BSR set to: 1
 21877                           ;sort.c: 464: f_most_recent_sort_time = 0;
 21878  002B22  0E00               	movlw	0
 21879  002B24  0101               	movlb	1	; () banked
 21880  002B26  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21881  002B28  0E00               	movlw	0
 21882  002B2A  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 21883  002B2C                     i2l9335:
 21884                           
 21885                           ; BSR set to: 1
 21886                           ;sort.c: 465: }
 21887                           ;sort.c: 467: if(total_time - most_recent_sort_time == 20){
 21888  002B2C  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21889  002B30  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21890  002B34  1E2A               	comf	??_printSortTimer,f,c
 21891  002B36  1E2B               	comf	??_printSortTimer+1,f,c
 21892  002B38  4A2A               	infsnz	??_printSortTimer,f,c
 21893  002B3A  2A2B               	incf	??_printSortTimer+1,f,c
 21894  002B3C  0100               	movlb	0	; () banked
 21895  002B3E  51FA               	movf	_total_time& (0+255),w,b
 21896  002B40  262A               	addwf	??_printSortTimer,f,c
 21897  002B42  0100               	movlb	0	; () banked
 21898  002B44  51FB               	movf	(_total_time+1)& (0+255),w,b
 21899  002B46  222B               	addwfc	??_printSortTimer+1,f,c
 21900  002B48  0E14               	movlw	20
 21901  002B4A  182A               	xorwf	??_printSortTimer,w,c
 21902  002B4C  102B               	iorwf	??_printSortTimer+1,w,c
 21903  002B4E  A4D8               	btfss	status,2,c
 21904  002B50  D033               	goto	i2l9355
 21905                           
 21906                           ; BSR set to: 0
 21907                           ;sort.c: 468: LATBbits.LATB2 = 0;
 21908  002B52  948A               	bcf	3978,2,c	;volatile
 21909                           
 21910                           ; BSR set to: 0
 21911                           ;sort.c: 469: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21912  002B54  0E52               	movlw	82
 21913  002B56  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21914  002B58  0E2B               	movlw	43
 21915  002B5A  6E2A               	movwf	??_printSortTimer& (0+255),c
 21916  002B5C  0E00               	movlw	0
 21917  002B5E                     i2u1049_47:
 21918  002B5E  2EE8               	decfsz	wreg,f,c
 21919  002B60  D7FE               	bra	i2u1049_47
 21920  002B62  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21921  002B64  D7FC               	bra	i2u1049_47
 21922  002B66  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21923  002B68  D7FA               	bra	i2u1049_47
 21924  002B6A  D000               	nop2	
 21925                           
 21926                           ;sort.c: 470: for(int i=0; i<46; i++){
 21927  002B6C  0E00               	movlw	0
 21928  002B6E  6E48               	movwf	printSortTimer@i_1192+1,c
 21929  002B70  0E00               	movlw	0
 21930  002B72  6E47               	movwf	printSortTimer@i_1192,c
 21931  002B74  BE48               	btfsc	printSortTimer@i_1192+1,7,c
 21932  002B76  D006               	goto	i2l9347
 21933  002B78  5048               	movf	printSortTimer@i_1192+1,w,c
 21934  002B7A  E11D               	bnz	i2l865
 21935  002B7C  0E2E               	movlw	46
 21936  002B7E  5C47               	subwf	printSortTimer@i_1192,w,c
 21937  002B80  B0D8               	btfsc	status,0,c
 21938  002B82  D019               	goto	i2l865
 21939  002B84                     i2l9347:
 21940                           
 21941                           ;sort.c: 471: LATBbits.LATB2 = !LATBbits.LATB2;
 21942  002B84  B48A               	btfsc	3978,2,c	;volatile
 21943  002B86  D003               	goto	i2u858_40
 21944  002B88  6A2A               	clrf	??_printSortTimer& (0+255),c
 21945  002B8A  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21946  002B8C  D001               	goto	i2u859_48
 21947  002B8E                     i2u858_40:
 21948  002B8E  6A2A               	clrf	??_printSortTimer& (0+255),c
 21949  002B90                     i2u859_48:
 21950  002B90  462A               	rlncf	??_printSortTimer,f,c
 21951  002B92  462A               	rlncf	??_printSortTimer,f,c
 21952  002B94  508A               	movf	3978,w,c	;volatile
 21953  002B96  182A               	xorwf	??_printSortTimer,w,c
 21954  002B98  0BFB               	andlw	-5
 21955  002B9A  182A               	xorwf	??_printSortTimer,w,c
 21956  002B9C  6E8A               	movwf	3978,c	;volatile
 21957                           
 21958                           ;sort.c: 472: delay_ms(45-i);
 21959  002B9E  5047               	movf	printSortTimer@i_1192,w,c
 21960  002BA0  0800               	sublw	0
 21961  002BA2  0F2D               	addlw	45
 21962  002BA4  ECC8  F029         	call	i2_delay_ms
 21963  002BA8  4A47               	infsnz	printSortTimer@i_1192,f,c
 21964  002BAA  2A48               	incf	printSortTimer@i_1192+1,f,c
 21965  002BAC  BE48               	btfsc	printSortTimer@i_1192+1,7,c
 21966  002BAE  D7EA               	goto	i2l9347
 21967  002BB0  5048               	movf	printSortTimer@i_1192+1,w,c
 21968  002BB2  E101               	bnz	i2u860_40
 21969  002BB4  D7E3               	goto	L15
 21970  002BB6                     i2u860_40:
 21971  002BB6                     i2l865:
 21972                           
 21973                           ;sort.c: 473: }
 21974                           ;sort.c: 474: LATBbits.LATB2 = 1;
 21975  002BB6  848A               	bsf	3978,2,c	;volatile
 21976  002BB8                     i2l9355:
 21977                           
 21978                           ;sort.c: 475: }
 21979                           ;sort.c: 477: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21980  002BB8  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21981  002BBC  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21982  002BC0  1E2A               	comf	??_printSortTimer,f,c
 21983  002BC2  1E2B               	comf	??_printSortTimer+1,f,c
 21984  002BC4  4A2A               	infsnz	??_printSortTimer,f,c
 21985  002BC6  2A2B               	incf	??_printSortTimer+1,f,c
 21986  002BC8  0100               	movlb	0	; () banked
 21987  002BCA  51FA               	movf	_total_time& (0+255),w,b
 21988  002BCC  262A               	addwf	??_printSortTimer,f,c
 21989  002BCE  0100               	movlb	0	; () banked
 21990  002BD0  51FB               	movf	(_total_time+1)& (0+255),w,b
 21991  002BD2  222B               	addwfc	??_printSortTimer+1,f,c
 21992  002BD4  0E2A               	movlw	42
 21993  002BD6  182A               	xorwf	??_printSortTimer,w,c
 21994  002BD8  102B               	iorwf	??_printSortTimer+1,w,c
 21995  002BDA  B4D8               	btfsc	status,2,c
 21996  002BDC  D007               	goto	i2l9359
 21997                           
 21998                           ; BSR set to: 0
 21999  002BDE  0EB3               	movlw	179
 22000  002BE0  0100               	movlb	0	; () banked
 22001  002BE2  19FA               	xorwf	_total_time& (0+255),w,b
 22002  002BE4  0100               	movlb	0	; () banked
 22003  002BE6  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 22004  002BE8  A4D8               	btfss	status,2,c
 22005  002BEA  D003               	goto	i2l9361
 22006  002BEC                     i2l9359:
 22007                           
 22008                           ; BSR set to: 0
 22009                           ;sort.c: 478: machine_state = DoneSorting_state;
 22010  002BEC  0E02               	movlw	2
 22011  002BEE  0100               	movlb	0	; () banked
 22012  002BF0  6FFC               	movwf	_machine_state& (0+255),b
 22013  002BF2                     i2l9361:
 22014                           
 22015                           ; BSR set to: 0
 22016                           ;sort.c: 480: }
 22017                           ;sort.c: 482: int min = (timeDiff % 3600) / 60;
 22018  002BF2  0E0E               	movlw	14
 22019  002BF4  6E04               	movwf	i2___lwmod@divisor+1,c
 22020  002BF6  0E10               	movlw	16
 22021  002BF8  6E03               	movwf	i2___lwmod@divisor,c
 22022  002BFA  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22023  002BFE  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22024  002C02  EC17  F027         	call	i2___lwmod	;wreg free
 22025  002C06  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 22026  002C0A  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 22027  002C0E  0E00               	movlw	0
 22028  002C10  6E09               	movwf	i2___lwdiv@divisor+1,c
 22029  002C12  0E3C               	movlw	60
 22030  002C14  6E08               	movwf	i2___lwdiv@divisor,c
 22031  002C16  EC58  F026         	call	i2___lwdiv	;wreg free
 22032  002C1A  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 22033  002C1E  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 22034                           
 22035                           ;sort.c: 483: int sec = (timeDiff % 3600) % 60;
 22036  002C22  0E0E               	movlw	14
 22037  002C24  6E04               	movwf	i2___lwmod@divisor+1,c
 22038  002C26  0E10               	movlw	16
 22039  002C28  6E03               	movwf	i2___lwmod@divisor,c
 22040  002C2A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22041  002C2E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22042  002C32  EC17  F027         	call	i2___lwmod	;wreg free
 22043  002C36  C001  F043         	movff	?i2___lwmod,_printSortTimer$2534
 22044  002C3A  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2534+1
 22045                           
 22046                           ;sort.c: 483: int sec = (timeDiff % 3600) % 60;
 22047  002C3E  C043  F001         	movff	_printSortTimer$2534,i2___lwmod@dividend
 22048  002C42  C044  F002         	movff	_printSortTimer$2534+1,i2___lwmod@dividend+1
 22049  002C46  0E00               	movlw	0
 22050  002C48  6E04               	movwf	i2___lwmod@divisor+1,c
 22051  002C4A  0E3C               	movlw	60
 22052  002C4C  6E03               	movwf	i2___lwmod@divisor,c
 22053  002C4E  EC17  F027         	call	i2___lwmod	;wreg free
 22054  002C52  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 22055  002C56  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22056                           
 22057                           ;sort.c: 485: lcdInst(0b10000000);;
 22058  002C5A  0E80               	movlw	128
 22059  002C5C  EC23  F02A         	call	i2_lcdInst
 22060                           
 22061                           ;sort.c: 486: printf("SORTING...");
 22062  002C60  0E7C               	movlw	low STR_64
 22063  002C62  6E0D               	movwf	i2printf@f,c
 22064  002C64  0EFF               	movlw	high STR_64
 22065  002C66  6E0E               	movwf	i2printf@f+1,c
 22066  002C68  ECF9  F00E         	call	i2_printf	;wreg free
 22067                           
 22068                           ;sort.c: 487: lcdInst(0b11000000);;
 22069  002C6C  0EC0               	movlw	192
 22070  002C6E  EC23  F02A         	call	i2_lcdInst
 22071                           
 22072                           ;sort.c: 488: printf("TIME %d:%02d", min, sec);
 22073  002C72  0E42               	movlw	low STR_65
 22074  002C74  6E0D               	movwf	i2printf@f,c
 22075  002C76  0EFF               	movlw	high STR_65
 22076  002C78  6E0E               	movwf	i2printf@f+1,c
 22077  002C7A  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22078  002C7E  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22079  002C82  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22080  002C86  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22081  002C8A  ECF9  F00E         	call	i2_printf	;wreg free
 22082  002C8E  0012               	return		;funcret
 22083  002C90                     __end_of_printSortTimer:
 22084                           	opt stack 0
 22085                           pclatu	equ	0xFFB
 22086                           pclath	equ	0xFFA
 22087                           tblptru	equ	0xFF8
 22088                           tblptrh	equ	0xFF7
 22089                           tblptrl	equ	0xFF6
 22090                           tablat	equ	0xFF5
 22091                           prodh	equ	0xFF4
 22092                           prodl	equ	0xFF3
 22093                           intcon	equ	0xFF2
 22094                           intcon2	equ	0xFF1
 22095                           intcon3	equ	0xFF0
 22096                           indf0	equ	0xFEF
 22097                           postinc0	equ	0xFEE
 22098                           fsr0h	equ	0xFEA
 22099                           fsr0l	equ	0xFE9
 22100                           wreg	equ	0xFE8
 22101                           postdec1	equ	0xFE5
 22102                           fsr1h	equ	0xFE2
 22103                           fsr1l	equ	0xFE1
 22104                           indf2	equ	0xFDF
 22105                           postinc2	equ	0xFDE
 22106                           postdec2	equ	0xFDD
 22107                           fsr2h	equ	0xFDA
 22108                           fsr2l	equ	0xFD9
 22109                           status	equ	0xFD8
 22110                           
 22111 ;; *************** function i2_printf *****************
 22112 ;; Defined at:
 22113 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22114 ;; Parameters:    Size  Location     Type
 22115 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22116 ;;		 -> STR_127(17), STR_126(17), STR_125(18), STR_124(18), 
 22117 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 22118 ;;		 -> STR_119(17), STR_118(17), STR_117(3), STR_116(15), 
 22119 ;;		 -> STR_115(3), STR_114(15), STR_113(11), STR_112(17), 
 22120 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 22121 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 22122 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 22123 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 22124 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 22125 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 22126 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 22127 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 22128 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 22129 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 22130 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 22131 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 22132 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 22133 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 22134 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 22135 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 22136 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 22137 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 22138 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 22139 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 22140 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 22141 ;;		 -> STR_2(14), STR_1(18), 
 22142 ;; Auto vars:     Size  Location     Type
 22143 ;;  printf          4    0        struct .
 22144 ;;  printf          2   39[COMRAM] int 
 22145 ;;  printf          2   35[COMRAM] unsigned int 
 22146 ;;  printf          2   33[COMRAM] unsigned int 
 22147 ;;  printf          2   31[COMRAM] PTR void [1]
 22148 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22149 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 22150 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 22151 ;;  printf          1   38[COMRAM] char 
 22152 ;;  printf          1   37[COMRAM] unsigned char 
 22153 ;;  printf          1   28[COMRAM] char 
 22154 ;; Return value:  Size  Location     Type
 22155 ;;                  2   12[COMRAM] int 
 22156 ;; Registers used:
 22157 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22158 ;; Tracked objects:
 22159 ;;		On entry : 0/0
 22160 ;;		On exit  : 0/0
 22161 ;;		Unchanged: 0/0
 22162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22163 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22164 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22165 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22166 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22167 ;;Total ram usage:       29 bytes
 22168 ;; Hardware stack levels used:    1
 22169 ;; Hardware stack levels required when called:    2
 22170 ;; This function calls:
 22171 ;;		i2___lwdiv
 22172 ;;		i2___lwmod
 22173 ;;		i2___wmul
 22174 ;;		i2_isdigit
 22175 ;;		i2_putch
 22176 ;; This function is called by:
 22177 ;;		_change_state_to_menu_11
 22178 ;;		_change_state_to_menu_23
 22179 ;;		_change_state_to_logs_11
 22180 ;;		_change_state_to_logs_12
 22181 ;;		_change_state_to_logs_22
 22182 ;;		_change_state_to_logs_23
 22183 ;;		_change_state_to_logs_33
 22184 ;;		_change_state_to_logs_34
 22185 ;;		_printSortTimer
 22186 ;;		i2_change_state_to_menu_start
 22187 ;;		i2_change_state_to_menu_12
 22188 ;;		i2_change_state_to_menu_22
 22189 ;;		i2_printRTC
 22190 ;; This function uses a non-reentrant model
 22191 ;;
 22192                           
 22193                           	psect	text81
 22194  001DF2                     __ptext81:
 22195                           	opt stack 0
 22196  001DF2                     i2_printf:
 22197                           	opt stack 20
 22198                           
 22199                           ;doprnt.c: 466: va_list ap;
 22200                           ;doprnt.c: 499: signed char c;
 22201                           ;doprnt.c: 501: int width;
 22202                           ;doprnt.c: 506: signed char prec;
 22203                           ;doprnt.c: 508: unsigned char flag;
 22204                           ;doprnt.c: 523: union {
 22205                           ;doprnt.c: 524: unsigned long vd;
 22206                           ;doprnt.c: 525: double integ;
 22207                           ;doprnt.c: 526: } tmpval;
 22208                           ;doprnt.c: 528: unsigned int val;
 22209                           ;doprnt.c: 529: unsigned len;
 22210                           ;doprnt.c: 530: const char * cp;
 22211                           ;doprnt.c: 533: *ap = __va_start();
 22212                           
 22213                           ;incstack = 0
 22214  001DF2  0E0F               	movlw	low (?i2_printf+2)
 22215  001DF4  6E20               	movwf	i2printf@ap,c
 22216  001DF6  0E00               	movlw	high (?i2_printf+2)
 22217  001DF8  6E21               	movwf	i2printf@ap+1,c
 22218                           
 22219                           ;doprnt.c: 536: while(c = *f++) {
 22220  001DFA  D1A4               	goto	i2l6685
 22221  001DFC                     i2l6555:
 22222                           
 22223                           ;doprnt.c: 538: if(c != '%')
 22224  001DFC  0E25               	movlw	37
 22225  001DFE  1827               	xorwf	i2printf@c,w,c
 22226  001E00  B4D8               	btfsc	status,2,c
 22227  001E02  D004               	goto	i2l6559
 22228                           
 22229                           ;doprnt.c: 540: {
 22230                           ;doprnt.c: 541: (putch(c) );
 22231  001E04  5027               	movf	i2printf@c,w,c
 22232  001E06  EC1D  F02A         	call	i2_putch
 22233                           
 22234                           ;doprnt.c: 542: continue;
 22235  001E0A  D19C               	goto	i2l6685
 22236  001E0C                     i2l6559:
 22237                           
 22238                           ;doprnt.c: 543: }
 22239                           ;doprnt.c: 546: width = 0;
 22240  001E0C  0E00               	movlw	0
 22241  001E0E  6E29               	movwf	i2printf@width+1,c
 22242  001E10  0E00               	movlw	0
 22243  001E12  6E28               	movwf	i2printf@width,c
 22244                           
 22245                           ;doprnt.c: 548: flag = 0;
 22246  001E14  0E00               	movlw	0
 22247  001E16  6E26               	movwf	i2printf@flag,c
 22248                           
 22249                           ;doprnt.c: 551: switch(*f) {
 22250                           
 22251                           ;doprnt.c: 550: for(;;) {
 22252  001E18  D003               	goto	i2l6565
 22253  001E1A                     i2l6561:
 22254                           
 22255                           ;doprnt.c: 580: flag |= 0x04;
 22256  001E1A  8426               	bsf	i2printf@flag,2,c
 22257                           
 22258                           ;doprnt.c: 581: f++;
 22259  001E1C  4A0D               	infsnz	i2printf@f,f,c
 22260  001E1E  2A0E               	incf	i2printf@f+1,f,c
 22261  001E20                     i2l6565:
 22262  001E20  C00D  FFF6         	movff	i2printf@f,tblptrl
 22263  001E24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22264  001E28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22265  001E28  6AF8               	clrf	tblptru,c
 22266  001E2A                     	endif
 22267  001E2A                     	if	0	;tblptru may be non-zero
 22268  001E2A                     	endif
 22269  001E2A  0008               	tblrd		*
 22270  001E2C  50F5               	movf	tablat,w,c
 22271                           
 22272                           ; Switch size 1, requested type "space"
 22273                           ; Number of cases is 1, Range of values is 48 to 48
 22274                           ; switch strategies available:
 22275                           ; Name         Instructions Cycles
 22276                           ; simple_byte            4     3 (average)
 22277                           ;	Chosen strategy is simple_byte
 22278  001E2E  0A30               	xorlw	48	; case 48
 22279  001E30  B4D8               	btfsc	status,2,c
 22280  001E32  D7F3               	goto	i2l6561
 22281                           
 22282                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22283                           
 22284                           ;doprnt.c: 586: }
 22285                           
 22286                           ;doprnt.c: 585: break;
 22287  001E34  C00D  FFF6         	movff	i2printf@f,tblptrl
 22288  001E38  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22289  001E3C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22290  001E3C  6AF8               	clrf	tblptru,c
 22291  001E3E                     	endif
 22292  001E3E                     	if	0	;tblptru may be non-zero
 22293  001E3E                     	endif
 22294  001E3E  0008               	tblrd		*
 22295  001E40  50F5               	movf	tablat,w,c
 22296  001E42  ECB9  F029         	call	i2_isdigit
 22297  001E46  A0D8               	btfss	status,0,c
 22298  001E48  D0A6               	goto	i2l6613
 22299                           
 22300                           ;doprnt.c: 598: width = 0;
 22301  001E4A  0E00               	movlw	0
 22302  001E4C  6E29               	movwf	i2printf@width+1,c
 22303  001E4E  0E00               	movlw	0
 22304  001E50  6E28               	movwf	i2printf@width,c
 22305  001E52                     i2l6571:
 22306                           
 22307                           ;doprnt.c: 600: width *= 10;
 22308  001E52  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22309  001E56  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22310  001E5A  0E00               	movlw	0
 22311  001E5C  6E04               	movwf	i2___wmul@multiplicand+1,c
 22312  001E5E  0E0A               	movlw	10
 22313  001E60  6E03               	movwf	i2___wmul@multiplicand,c
 22314  001E62  EC5F  F029         	call	i2___wmul	;wreg free
 22315  001E66  C001  F028         	movff	?i2___wmul,i2printf@width
 22316  001E6A  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22317                           
 22318                           ;doprnt.c: 601: width += *f++ - '0';
 22319  001E6E  0ED0               	movlw	208
 22320  001E70  6E19               	movwf	??i2_printf& (0+255),c
 22321  001E72  0EFF               	movlw	255
 22322  001E74  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22323  001E76  C00D  FFF6         	movff	i2printf@f,tblptrl
 22324  001E7A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22325  001E7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22326  001E7E  6AF8               	clrf	tblptru,c
 22327  001E80                     	endif
 22328  001E80                     	if	0	;tblptru may be non-zero
 22329  001E80                     	endif
 22330  001E80  0008               	tblrd		*
 22331  001E82  50F5               	movf	tablat,w,c
 22332  001E84  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22333  001E86  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22334  001E88  5019               	movf	??i2_printf,w,c
 22335  001E8A  261B               	addwf	??i2_printf+2,f,c
 22336  001E8C  501A               	movf	??i2_printf+1,w,c
 22337  001E8E  221C               	addwfc	??i2_printf+3,f,c
 22338  001E90  501B               	movf	??i2_printf+2,w,c
 22339  001E92  2628               	addwf	i2printf@width,f,c
 22340  001E94  501C               	movf	??i2_printf+3,w,c
 22341  001E96  2229               	addwfc	i2printf@width+1,f,c
 22342  001E98  4A0D               	infsnz	i2printf@f,f,c
 22343  001E9A  2A0E               	incf	i2printf@f+1,f,c
 22344                           
 22345                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22346  001E9C  C00D  FFF6         	movff	i2printf@f,tblptrl
 22347  001EA0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22348  001EA4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22349  001EA4  6AF8               	clrf	tblptru,c
 22350  001EA6                     	endif
 22351  001EA6                     	if	0	;tblptru may be non-zero
 22352  001EA6                     	endif
 22353  001EA6  0008               	tblrd		*
 22354  001EA8  50F5               	movf	tablat,w,c
 22355  001EAA  ECB9  F029         	call	i2_isdigit
 22356  001EAE  A0D8               	btfss	status,0,c
 22357  001EB0  D072               	goto	i2l6613
 22358  001EB2  D7CF               	goto	i2l6571
 22359  001EB4                     i2l6579:
 22360                           
 22361                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22362  001EB4  C020  FFD9         	movff	i2printf@ap,fsr2l
 22363  001EB8  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22364  001EBC  CFDE F01E          	movff	postinc2,i2printf@cp
 22365  001EC0  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22366  001EC4  0E02               	movlw	2
 22367  001EC6  2620               	addwf	i2printf@ap,f,c
 22368  001EC8  0E00               	movlw	0
 22369  001ECA  2221               	addwfc	i2printf@ap+1,f,c
 22370                           
 22371                           ;doprnt.c: 740: if(!cp)
 22372  001ECC  501E               	movf	i2printf@cp,w,c
 22373  001ECE  101F               	iorwf	i2printf@cp+1,w,c
 22374  001ED0  A4D8               	btfss	status,2,c
 22375  001ED2  D004               	goto	i2l6587
 22376                           
 22377                           ;doprnt.c: 741: cp = "(null)";
 22378  001ED4  0EB6               	movlw	low STR_128
 22379  001ED6  6E1E               	movwf	i2printf@cp,c
 22380  001ED8  0EFF               	movlw	high STR_128
 22381  001EDA  6E1F               	movwf	i2printf@cp+1,c
 22382  001EDC                     i2l6587:
 22383                           
 22384                           ;doprnt.c: 745: len = 0;
 22385  001EDC  0E00               	movlw	0
 22386  001EDE  6E23               	movwf	i2printf@len+1,c
 22387  001EE0  0E00               	movlw	0
 22388  001EE2  6E22               	movwf	i2printf@len,c
 22389                           
 22390                           ;doprnt.c: 746: while(cp[len])
 22391  001EE4  D002               	goto	i2l6591
 22392  001EE6                     i2l6589:
 22393                           
 22394                           ;doprnt.c: 747: len++;
 22395  001EE6  4A22               	infsnz	i2printf@len,f,c
 22396  001EE8  2A23               	incf	i2printf@len+1,f,c
 22397  001EEA                     i2l6591:
 22398  001EEA  5022               	movf	i2printf@len,w,c
 22399  001EEC  241E               	addwf	i2printf@cp,w,c
 22400  001EEE  6E19               	movwf	??i2_printf& (0+255),c
 22401  001EF0  5023               	movf	i2printf@len+1,w,c
 22402  001EF2  201F               	addwfc	i2printf@cp+1,w,c
 22403  001EF4  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22404  001EF6  C019  FFF6         	movff	??i2_printf,tblptrl
 22405  001EFA  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22406  001EFE  0E00               	movlw	low (__mediumconst shr (0+16))
 22407  001F00  6EF8               	movwf	tblptru,c
 22408  001F02  0E0F               	movlw	(high __ramtop+-1)
 22409  001F04  64F7               	cpfsgt	tblptrh,c
 22410  001F06  D003               	bra	i2u514_47
 22411  001F08  0008               	tblrd		*
 22412  001F0A  50F5               	movf	tablat,w,c
 22413  001F0C  D005               	bra	i2u514_40
 22414  001F0E                     i2u514_47:
 22415  001F0E  CFF6 FFE9          	movff	tblptrl,fsr0l
 22416  001F12  CFF7 FFEA          	movff	tblptrh,fsr0h
 22417  001F16  50EF               	movf	indf0,w,c
 22418  001F18                     i2u514_40:
 22419  001F18  0900               	iorlw	0
 22420  001F1A  A4D8               	btfss	status,2,c
 22421  001F1C  D7E4               	goto	i2l6589
 22422                           
 22423                           ;doprnt.c: 757: if(width > len)
 22424  001F1E  5028               	movf	i2printf@width,w,c
 22425  001F20  5C22               	subwf	i2printf@len,w,c
 22426  001F22  5029               	movf	i2printf@width+1,w,c
 22427  001F24  5823               	subwfb	i2printf@len+1,w,c
 22428  001F26  B0D8               	btfsc	status,0,c
 22429  001F28  D005               	goto	i2l6597
 22430                           
 22431                           ;doprnt.c: 758: width -= len;
 22432  001F2A  5022               	movf	i2printf@len,w,c
 22433  001F2C  5E28               	subwf	i2printf@width,f,c
 22434  001F2E  5023               	movf	i2printf@len+1,w,c
 22435  001F30  5A29               	subwfb	i2printf@width+1,f,c
 22436  001F32  D008               	goto	i2l6601
 22437  001F34                     i2l6597:
 22438                           
 22439                           ;doprnt.c: 759: else
 22440                           ;doprnt.c: 760: width = 0;
 22441  001F34  0E00               	movlw	0
 22442  001F36  6E29               	movwf	i2printf@width+1,c
 22443  001F38  0E00               	movlw	0
 22444  001F3A  6E28               	movwf	i2printf@width,c
 22445                           
 22446                           ;doprnt.c: 764: while(width--)
 22447  001F3C  D003               	goto	i2l6601
 22448  001F3E                     i2l6599:
 22449                           
 22450                           ;doprnt.c: 765: (putch(' ') );
 22451  001F3E  0E20               	movlw	32
 22452  001F40  EC1D  F02A         	call	i2_putch
 22453  001F44                     i2l6601:
 22454  001F44  0628               	decf	i2printf@width,f,c
 22455  001F46  A0D8               	btfss	status,0,c
 22456  001F48  0629               	decf	i2printf@width+1,f,c
 22457  001F4A  2828               	incf	i2printf@width,w,c
 22458  001F4C  E1F8               	bnz	i2l6599
 22459  001F4E  2829               	incf	i2printf@width+1,w,c
 22460  001F50  B4D8               	btfsc	status,2,c
 22461  001F52  D016               	goto	i2l6607
 22462  001F54  D7F4               	goto	i2l6599
 22463  001F56                     i2l6603:
 22464                           
 22465                           ;doprnt.c: 768: (putch(*cp++) );
 22466  001F56  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22467  001F5A  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22468  001F5E  0E00               	movlw	low (__mediumconst shr (0+16))
 22469  001F60  6EF8               	movwf	tblptru,c
 22470  001F62  0E0F               	movlw	(high __ramtop+-1)
 22471  001F64  64F7               	cpfsgt	tblptrh,c
 22472  001F66  D003               	bra	i2u518_47
 22473  001F68  0008               	tblrd		*
 22474  001F6A  50F5               	movf	tablat,w,c
 22475  001F6C  D005               	bra	i2u518_40
 22476  001F6E                     i2u518_47:
 22477  001F6E  CFF6 FFE9          	movff	tblptrl,fsr0l
 22478  001F72  CFF7 FFEA          	movff	tblptrh,fsr0h
 22479  001F76  50EF               	movf	indf0,w,c
 22480  001F78                     i2u518_40:
 22481  001F78  EC1D  F02A         	call	i2_putch
 22482  001F7C  4A1E               	infsnz	i2printf@cp,f,c
 22483  001F7E  2A1F               	incf	i2printf@cp+1,f,c
 22484  001F80                     i2l6607:
 22485  001F80  0622               	decf	i2printf@len,f,c
 22486  001F82  A0D8               	btfss	status,0,c
 22487  001F84  0623               	decf	i2printf@len+1,f,c
 22488  001F86  2822               	incf	i2printf@len,w,c
 22489  001F88  E1E6               	bnz	i2l6603
 22490  001F8A  2823               	incf	i2printf@len+1,w,c
 22491  001F8C  B4D8               	btfsc	status,2,c
 22492  001F8E  D0DA               	goto	i2l6685
 22493  001F90  D7E2               	goto	i2l6603
 22494  001F92                     i2l6609:
 22495                           
 22496                           ;doprnt.c: 818: flag |= 0x40;
 22497  001F92  8C26               	bsf	i2printf@flag,6,c
 22498                           
 22499                           ;doprnt.c: 822: }
 22500                           
 22501                           ;doprnt.c: 819: break;
 22502  001F94  D01B               	goto	i2l1441
 22503  001F96                     i2l6613:
 22504  001F96  C00D  FFF6         	movff	i2printf@f,tblptrl
 22505  001F9A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22506  001F9E  4A0D               	infsnz	i2printf@f,f,c
 22507  001FA0  2A0E               	incf	i2printf@f+1,f,c
 22508  001FA2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22509  001FA2  6AF8               	clrf	tblptru,c
 22510  001FA4                     	endif
 22511  001FA4                     	if	0	;tblptru may be non-zero
 22512  001FA4                     	endif
 22513  001FA4  0008               	tblrd		*
 22514  001FA6  CFF5 F027          	movff	tablat,i2printf@c
 22515  001FAA  5027               	movf	i2printf@c,w,c
 22516                           
 22517                           ; Switch size 1, requested type "space"
 22518                           ; Number of cases is 5, Range of values is 0 to 117
 22519                           ; switch strategies available:
 22520                           ; Name         Instructions Cycles
 22521                           ; simple_byte           16     9 (average)
 22522                           ;	Chosen strategy is simple_byte
 22523  001FAC  0A00               	xorlw	0	; case 0
 22524  001FAE  B4D8               	btfsc	status,2,c
 22525  001FB0  0012               	return	
 22526  001FB2  0A64               	xorlw	100	; case 100
 22527  001FB4  B4D8               	btfsc	status,2,c
 22528  001FB6  D00A               	goto	i2l1441
 22529  001FB8  0A0D               	xorlw	13	; case 105
 22530  001FBA  B4D8               	btfsc	status,2,c
 22531  001FBC  D007               	goto	i2l1441
 22532  001FBE  0A1A               	xorlw	26	; case 115
 22533  001FC0  B4D8               	btfsc	status,2,c
 22534  001FC2  D778               	goto	i2l6579
 22535  001FC4  0A06               	xorlw	6	; case 117
 22536  001FC6  B4D8               	btfsc	status,2,c
 22537  001FC8  D7E4               	goto	i2l6609
 22538  001FCA  D0BC               	goto	i2l6685
 22539  001FCC                     i2l1441:
 22540                           
 22541                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22542  001FCC  BC26               	btfsc	i2printf@flag,6,c
 22543  001FCE  D015               	goto	i2l6625
 22544                           
 22545                           ;doprnt.c: 1253: {
 22546                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22547  001FD0  C020  FFD9         	movff	i2printf@ap,fsr2l
 22548  001FD4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22549  001FD8  CFDE F024          	movff	postinc2,i2printf@val
 22550  001FDC  CFDD F025          	movff	postdec2,i2printf@val+1
 22551  001FE0  0E02               	movlw	2
 22552  001FE2  2620               	addwf	i2printf@ap,f,c
 22553  001FE4  0E00               	movlw	0
 22554  001FE6  2221               	addwfc	i2printf@ap+1,f,c
 22555                           
 22556                           ;doprnt.c: 1261: if((int)val < 0) {
 22557  001FE8  AE25               	btfss	i2printf@val+1,7,c
 22558  001FEA  D013               	goto	i2l6629
 22559                           
 22560                           ;doprnt.c: 1262: flag |= 0x03;
 22561  001FEC  0E03               	movlw	3
 22562  001FEE  1226               	iorwf	i2printf@flag,f,c
 22563                           
 22564                           ;doprnt.c: 1263: val = -val;
 22565  001FF0  6C24               	negf	i2printf@val,c
 22566  001FF2  1E25               	comf	i2printf@val+1,f,c
 22567  001FF4  B0D8               	btfsc	status,0,c
 22568  001FF6  2A25               	incf	i2printf@val+1,f,c
 22569                           
 22570                           ;doprnt.c: 1264: }
 22571                           ;doprnt.c: 1266: }
 22572  001FF8  D00C               	goto	i2l6629
 22573  001FFA                     i2l6625:
 22574                           
 22575                           ;doprnt.c: 1268: else
 22576                           ;doprnt.c: 1273: {
 22577                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22578  001FFA  C020  FFD9         	movff	i2printf@ap,fsr2l
 22579  001FFE  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22580  002002  CFDE F024          	movff	postinc2,i2printf@val
 22581  002006  CFDD F025          	movff	postdec2,i2printf@val+1
 22582  00200A  0E02               	movlw	2
 22583  00200C  2620               	addwf	i2printf@ap,f,c
 22584  00200E  0E00               	movlw	0
 22585  002010  2221               	addwfc	i2printf@ap+1,f,c
 22586  002012                     i2l6629:
 22587                           
 22588                           ;doprnt.c: 1287: }
 22589                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22590  002012  0E01               	movlw	1
 22591  002014  6E27               	movwf	i2printf@c,c
 22592  002016                     i2l6631:
 22593  002016  0E05               	movlw	5
 22594  002018  1827               	xorwf	i2printf@c,w,c
 22595  00201A  B4D8               	btfsc	status,2,c
 22596  00201C  D015               	goto	i2l6643
 22597                           
 22598                           ;doprnt.c: 1306: if(val < dpowers[c])
 22599  00201E  5027               	movf	i2printf@c,w,c
 22600  002020  0D02               	mullw	2
 22601  002022  0EDE               	movlw	low _dpowers
 22602  002024  24F3               	addwf	prodl,w,c
 22603  002026  6EF6               	movwf	tblptrl,c
 22604  002028  0EFA               	movlw	high _dpowers
 22605  00202A  20F4               	addwfc	prodh,w,c
 22606  00202C  6EF7               	movwf	tblptrh,c
 22607  00202E                     	if	1	;There are 3 active tblptr bytes
 22608  00202E  6AF8               	clrf	tblptru,c
 22609  002030  0E00               	movlw	low (__mediumconst shr (0+16))
 22610  002032  22F8               	addwfc	tblptru,f,c
 22611  002034                     	endif
 22612  002034  0009               	tblrd		*+
 22613  002036  50F5               	movf	tablat,w,c
 22614  002038  5C24               	subwf	i2printf@val,w,c
 22615  00203A  0009               	tblrd		*+
 22616  00203C  50F5               	movf	tablat,w,c
 22617  00203E  5825               	subwfb	i2printf@val+1,w,c
 22618  002040  A0D8               	btfss	status,0,c
 22619  002042  D002               	goto	i2l6643
 22620                           
 22621                           ;doprnt.c: 1307: break;
 22622  002044  2A27               	incf	i2printf@c,f,c
 22623  002046  D7E7               	goto	i2l6631
 22624  002048                     i2l6643:
 22625                           
 22626                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22627  002048  5028               	movf	i2printf@width,w,c
 22628  00204A  1029               	iorwf	i2printf@width+1,w,c
 22629  00204C  B4D8               	btfsc	status,2,c
 22630  00204E  D009               	goto	i2l6649
 22631  002050  C026  F019         	movff	i2printf@flag,??i2_printf
 22632  002054  0E03               	movlw	3
 22633  002056  1619               	andwf	??i2_printf,f,c
 22634  002058  B4D8               	btfsc	status,2,c
 22635  00205A  D003               	goto	i2l6649
 22636                           
 22637                           ;doprnt.c: 1346: width--;
 22638  00205C  0628               	decf	i2printf@width,f,c
 22639  00205E  A0D8               	btfss	status,0,c
 22640  002060  0629               	decf	i2printf@width+1,f,c
 22641  002062                     i2l6649:
 22642                           
 22643                           ;doprnt.c: 1381: if(width > c)
 22644  002062  0E80               	movlw	128
 22645  002064  BE27               	btfsc	i2printf@c,7,c
 22646  002066  0E7F               	movlw	127
 22647  002068  6E19               	movwf	??i2_printf& (0+255),c
 22648  00206A  5028               	movf	i2printf@width,w,c
 22649  00206C  5C27               	subwf	i2printf@c,w,c
 22650  00206E  5029               	movf	i2printf@width+1,w,c
 22651  002070  0A80               	xorlw	128
 22652  002072  5819               	subwfb	??i2_printf& (0+255),w,c
 22653  002074  B0D8               	btfsc	status,0,c
 22654  002076  D007               	goto	i2l6653
 22655                           
 22656                           ;doprnt.c: 1382: width -= c;
 22657  002078  5027               	movf	i2printf@c,w,c
 22658  00207A  5E28               	subwf	i2printf@width,f,c
 22659  00207C  0E00               	movlw	0
 22660  00207E  BE27               	btfsc	i2printf@c,7,c
 22661  002080  0EFF               	movlw	255
 22662  002082  5A29               	subwfb	i2printf@width+1,f,c
 22663  002084  D004               	goto	i2l6655
 22664  002086                     i2l6653:
 22665                           
 22666                           ;doprnt.c: 1383: else
 22667                           ;doprnt.c: 1384: width = 0;
 22668  002086  0E00               	movlw	0
 22669  002088  6E29               	movwf	i2printf@width+1,c
 22670  00208A  0E00               	movlw	0
 22671  00208C  6E28               	movwf	i2printf@width,c
 22672  00208E                     i2l6655:
 22673                           
 22674                           ;doprnt.c: 1387: if(flag & 0x04) {
 22675  00208E  A426               	btfss	i2printf@flag,2,c
 22676  002090  D014               	goto	i2l6667
 22677                           
 22678                           ;doprnt.c: 1392: if(flag & 0x03)
 22679  002092  C026  F019         	movff	i2printf@flag,??i2_printf
 22680  002096  0E03               	movlw	3
 22681  002098  1619               	andwf	??i2_printf,f,c
 22682  00209A  B4D8               	btfsc	status,2,c
 22683  00209C  D003               	goto	i2l6661
 22684                           
 22685                           ;doprnt.c: 1393: (putch('-') );
 22686  00209E  0E2D               	movlw	45
 22687  0020A0  EC1D  F02A         	call	i2_putch
 22688  0020A4                     i2l6661:
 22689                           
 22690                           ;doprnt.c: 1415: if(width)
 22691  0020A4  5028               	movf	i2printf@width,w,c
 22692  0020A6  1029               	iorwf	i2printf@width+1,w,c
 22693  0020A8  B4D8               	btfsc	status,2,c
 22694  0020AA  D01E               	goto	i2l6677
 22695                           
 22696                           ;doprnt.c: 1417: (putch('0') );
 22697                           
 22698                           ;doprnt.c: 1416: do
 22699  0020AC  0E30               	movlw	48
 22700  0020AE  EC1D  F02A         	call	i2_putch
 22701                           
 22702                           ;doprnt.c: 1418: while(--width);
 22703  0020B2  0628               	decf	i2printf@width,f,c
 22704  0020B4  A0D8               	btfss	status,0,c
 22705  0020B6  0629               	decf	i2printf@width+1,f,c
 22706  0020B8  D7F5               	goto	i2l6661
 22707  0020BA                     i2l6667:
 22708                           
 22709                           ;doprnt.c: 1422: {
 22710                           ;doprnt.c: 1424: if(width
 22711                           ;doprnt.c: 1428: )
 22712  0020BA  5028               	movf	i2printf@width,w,c
 22713  0020BC  1029               	iorwf	i2printf@width+1,w,c
 22714  0020BE  B4D8               	btfsc	status,2,c
 22715  0020C0  D00A               	goto	i2l6673
 22716  0020C2                     i2l6669:
 22717                           
 22718                           ;doprnt.c: 1430: (putch(' ') );
 22719  0020C2  0E20               	movlw	32
 22720  0020C4  EC1D  F02A         	call	i2_putch
 22721                           
 22722                           ;doprnt.c: 1431: while(--width);
 22723  0020C8  0628               	decf	i2printf@width,f,c
 22724  0020CA  A0D8               	btfss	status,0,c
 22725  0020CC  0629               	decf	i2printf@width+1,f,c
 22726  0020CE  5028               	movf	i2printf@width,w,c
 22727  0020D0  1029               	iorwf	i2printf@width+1,w,c
 22728  0020D2  A4D8               	btfss	status,2,c
 22729  0020D4  D7F6               	goto	i2l6669
 22730  0020D6                     i2l6673:
 22731                           
 22732                           ;doprnt.c: 1438: if(flag & 0x03)
 22733  0020D6  C026  F019         	movff	i2printf@flag,??i2_printf
 22734  0020DA  0E03               	movlw	3
 22735  0020DC  1619               	andwf	??i2_printf,f,c
 22736  0020DE  B4D8               	btfsc	status,2,c
 22737  0020E0  D003               	goto	i2l6677
 22738                           
 22739                           ;doprnt.c: 1439: (putch('-') );
 22740  0020E2  0E2D               	movlw	45
 22741  0020E4  EC1D  F02A         	call	i2_putch
 22742  0020E8                     i2l6677:
 22743                           
 22744                           ;doprnt.c: 1469: }
 22745                           ;doprnt.c: 1472: prec = c;
 22746  0020E8  C027  F01D         	movff	i2printf@c,i2printf@prec
 22747                           
 22748                           ;doprnt.c: 1474: while(prec--) {
 22749  0020EC  D027               	goto	i2l6683
 22750  0020EE                     i2l6679:
 22751                           
 22752                           ;doprnt.c: 1478: {
 22753                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22754  0020EE  501D               	movf	i2printf@prec,w,c
 22755  0020F0  0D02               	mullw	2
 22756  0020F2  0EDE               	movlw	low _dpowers
 22757  0020F4  24F3               	addwf	prodl,w,c
 22758  0020F6  6EF6               	movwf	tblptrl,c
 22759  0020F8  0EFA               	movlw	high _dpowers
 22760  0020FA  20F4               	addwfc	prodh,w,c
 22761  0020FC  6EF7               	movwf	tblptrh,c
 22762  0020FE                     	if	1	;There are 3 active tblptr bytes
 22763  0020FE  6AF8               	clrf	tblptru,c
 22764  002100  0E00               	movlw	low (__mediumconst shr (0+16))
 22765  002102  22F8               	addwfc	tblptru,f,c
 22766  002104                     	endif
 22767  002104  0009               	tblrd		*+
 22768  002106  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22769  00210A  000A               	tblrd		*-
 22770  00210C  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22771  002110  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22772  002114  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22773  002118  EC58  F026         	call	i2___lwdiv	;wreg free
 22774  00211C  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22775  002120  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22776  002124  0E00               	movlw	0
 22777  002126  6E04               	movwf	i2___lwmod@divisor+1,c
 22778  002128  0E0A               	movlw	10
 22779  00212A  6E03               	movwf	i2___lwmod@divisor,c
 22780  00212C  EC17  F027         	call	i2___lwmod	;wreg free
 22781  002130  5001               	movf	?i2___lwmod,w,c
 22782  002132  0F30               	addlw	48
 22783  002134  6E27               	movwf	i2printf@c,c
 22784                           
 22785                           ;doprnt.c: 1523: }
 22786                           ;doprnt.c: 1524: (putch(c) );
 22787  002136  5027               	movf	i2printf@c,w,c
 22788  002138  EC1D  F02A         	call	i2_putch
 22789  00213C                     i2l6683:
 22790  00213C  061D               	decf	i2printf@prec,f,c
 22791  00213E  281D               	incf	i2printf@prec,w,c
 22792  002140  A4D8               	btfss	status,2,c
 22793  002142  D7D5               	goto	i2l6679
 22794  002144                     i2l6685:
 22795  002144  C00D  FFF6         	movff	i2printf@f,tblptrl
 22796  002148  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22797  00214C  4A0D               	infsnz	i2printf@f,f,c
 22798  00214E  2A0E               	incf	i2printf@f+1,f,c
 22799  002150                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22800  002150  6AF8               	clrf	tblptru,c
 22801  002152                     	endif
 22802  002152                     	if	0	;tblptru may be non-zero
 22803  002152                     	endif
 22804  002152  0008               	tblrd		*
 22805  002154  CFF5 F027          	movff	tablat,i2printf@c
 22806  002158  5027               	movf	i2printf@c,w,c
 22807  00215A  B4D8               	btfsc	status,2,c
 22808  00215C  0012               	return	
 22809  00215E  D64E               	goto	i2l6555
 22810  002160                     __end_ofi2_printf:
 22811                           	opt stack 0
 22812                           pclatu	equ	0xFFB
 22813                           pclath	equ	0xFFA
 22814                           tblptru	equ	0xFF8
 22815                           tblptrh	equ	0xFF7
 22816                           tblptrl	equ	0xFF6
 22817                           tablat	equ	0xFF5
 22818                           prodh	equ	0xFF4
 22819                           prodl	equ	0xFF3
 22820                           intcon	equ	0xFF2
 22821                           intcon2	equ	0xFF1
 22822                           intcon3	equ	0xFF0
 22823                           indf0	equ	0xFEF
 22824                           postinc0	equ	0xFEE
 22825                           fsr0h	equ	0xFEA
 22826                           fsr0l	equ	0xFE9
 22827                           wreg	equ	0xFE8
 22828                           postdec1	equ	0xFE5
 22829                           fsr1h	equ	0xFE2
 22830                           fsr1l	equ	0xFE1
 22831                           indf2	equ	0xFDF
 22832                           postinc2	equ	0xFDE
 22833                           postdec2	equ	0xFDD
 22834                           fsr2h	equ	0xFDA
 22835                           fsr2l	equ	0xFD9
 22836                           status	equ	0xFD8
 22837                           
 22838 ;; *************** function i2_putch *****************
 22839 ;; Defined at:
 22840 ;;		line 20 in file "lcd.c"
 22841 ;; Parameters:    Size  Location     Type
 22842 ;;  data            1    wreg     unsigned char 
 22843 ;; Auto vars:     Size  Location     Type
 22844 ;;  data            1    2[COMRAM] unsigned char 
 22845 ;; Return value:  Size  Location     Type
 22846 ;;                  1    wreg      void 
 22847 ;; Registers used:
 22848 ;;		wreg, status,2, status,0, cstack
 22849 ;; Tracked objects:
 22850 ;;		On entry : 0/0
 22851 ;;		On exit  : 0/0
 22852 ;;		Unchanged: 0/0
 22853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22858 ;;Total ram usage:        1 bytes
 22859 ;; Hardware stack levels used:    1
 22860 ;; Hardware stack levels required when called:    1
 22861 ;; This function calls:
 22862 ;;		i2_lcdNibble
 22863 ;; This function is called by:
 22864 ;;		i2_printf
 22865 ;; This function uses a non-reentrant model
 22866 ;;
 22867                           
 22868                           	psect	text82
 22869  00543A                     __ptext82:
 22870                           	opt stack 0
 22871  00543A                     i2_putch:
 22872                           	opt stack 20
 22873                           
 22874                           ;incstack = 0
 22875                           ;i2putch@data stored from wreg
 22876  00543A  6E03               	movwf	i2putch@data,c
 22877                           
 22878                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22879  00543C  848C               	bsf	3980,2,c	;volatile
 22880                           
 22881                           ;lcd.c: 22: lcdNibble(data);
 22882  00543E  5003               	movf	i2putch@data,w,c
 22883  005440  EC2D  F026         	call	i2_lcdNibble
 22884  005444  0012               	return		;funcret
 22885  005446                     __end_ofi2_putch:
 22886                           	opt stack 0
 22887                           pclatu	equ	0xFFB
 22888                           pclath	equ	0xFFA
 22889                           tblptru	equ	0xFF8
 22890                           tblptrh	equ	0xFF7
 22891                           tblptrl	equ	0xFF6
 22892                           tablat	equ	0xFF5
 22893                           prodh	equ	0xFF4
 22894                           prodl	equ	0xFF3
 22895                           intcon	equ	0xFF2
 22896                           intcon2	equ	0xFF1
 22897                           intcon3	equ	0xFF0
 22898                           indf0	equ	0xFEF
 22899                           postinc0	equ	0xFEE
 22900                           fsr0h	equ	0xFEA
 22901                           fsr0l	equ	0xFE9
 22902                           wreg	equ	0xFE8
 22903                           postdec1	equ	0xFE5
 22904                           fsr1h	equ	0xFE2
 22905                           fsr1l	equ	0xFE1
 22906                           indf2	equ	0xFDF
 22907                           postinc2	equ	0xFDE
 22908                           postdec2	equ	0xFDD
 22909                           fsr2h	equ	0xFDA
 22910                           fsr2l	equ	0xFD9
 22911                           status	equ	0xFD8
 22912                           
 22913 ;; *************** function i2_isdigit *****************
 22914 ;; Defined at:
 22915 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22916 ;; Parameters:    Size  Location     Type
 22917 ;;  c               1    wreg     unsigned char 
 22918 ;; Auto vars:     Size  Location     Type
 22919 ;;  c               1    2[COMRAM] unsigned char 
 22920 ;; Return value:  Size  Location     Type
 22921 ;;		None               void
 22922 ;; Registers used:
 22923 ;;		wreg, status,2, status,0
 22924 ;; Tracked objects:
 22925 ;;		On entry : 0/0
 22926 ;;		On exit  : 0/0
 22927 ;;		Unchanged: 0/0
 22928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22932 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22933 ;;Total ram usage:        3 bytes
 22934 ;; Hardware stack levels used:    1
 22935 ;; This function calls:
 22936 ;;		Nothing
 22937 ;; This function is called by:
 22938 ;;		i2_printf
 22939 ;; This function uses a non-reentrant model
 22940 ;;
 22941                           
 22942                           	psect	text83
 22943  005372                     __ptext83:
 22944                           	opt stack 0
 22945  005372                     i2_isdigit:
 22946                           	opt stack 21
 22947                           
 22948                           ;incstack = 0
 22949                           ;i2isdigit@c stored from wreg
 22950  005372  6E03               	movwf	i2isdigit@c,c
 22951  005374  0E00               	movlw	0
 22952  005376  6E02               	movwf	i2_isdigit$2044,c
 22953  005378  0E3A               	movlw	58
 22954  00537A  6003               	cpfslt	i2isdigit@c,c
 22955  00537C  D005               	goto	i2l6255
 22956  00537E  0E2F               	movlw	47
 22957  005380  6403               	cpfsgt	i2isdigit@c,c
 22958  005382  D002               	goto	i2l6255
 22959  005384  0E01               	movlw	1
 22960  005386  6E02               	movwf	i2_isdigit$2044,c
 22961  005388                     i2l6255:
 22962  005388  C002  F001         	movff	i2_isdigit$2044,??i2_isdigit
 22963  00538C  3001               	rrcf	??i2_isdigit,w,c
 22964  00538E  0012               	return	
 22965  005390                     __end_ofi2_isdigit:
 22966                           	opt stack 0
 22967                           pclatu	equ	0xFFB
 22968                           pclath	equ	0xFFA
 22969                           tblptru	equ	0xFF8
 22970                           tblptrh	equ	0xFF7
 22971                           tblptrl	equ	0xFF6
 22972                           tablat	equ	0xFF5
 22973                           prodh	equ	0xFF4
 22974                           prodl	equ	0xFF3
 22975                           intcon	equ	0xFF2
 22976                           intcon2	equ	0xFF1
 22977                           intcon3	equ	0xFF0
 22978                           indf0	equ	0xFEF
 22979                           postinc0	equ	0xFEE
 22980                           fsr0h	equ	0xFEA
 22981                           fsr0l	equ	0xFE9
 22982                           wreg	equ	0xFE8
 22983                           postdec1	equ	0xFE5
 22984                           fsr1h	equ	0xFE2
 22985                           fsr1l	equ	0xFE1
 22986                           indf2	equ	0xFDF
 22987                           postinc2	equ	0xFDE
 22988                           postdec2	equ	0xFDD
 22989                           fsr2h	equ	0xFDA
 22990                           fsr2l	equ	0xFD9
 22991                           status	equ	0xFD8
 22992                           
 22993 ;; *************** function i2___wmul *****************
 22994 ;; Defined at:
 22995 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22996 ;; Parameters:    Size  Location     Type
 22997 ;;  multiplier      2    0[COMRAM] unsigned int 
 22998 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22999 ;; Auto vars:     Size  Location     Type
 23000 ;;  __wmul          2    4[COMRAM] unsigned int 
 23001 ;; Return value:  Size  Location     Type
 23002 ;;                  2    0[COMRAM] unsigned int 
 23003 ;; Registers used:
 23004 ;;		wreg, status,2, status,0, prodl, prodh
 23005 ;; Tracked objects:
 23006 ;;		On entry : 0/0
 23007 ;;		On exit  : 0/0
 23008 ;;		Unchanged: 0/0
 23009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23010 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23011 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23013 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23014 ;;Total ram usage:        6 bytes
 23015 ;; Hardware stack levels used:    1
 23016 ;; This function calls:
 23017 ;;		Nothing
 23018 ;; This function is called by:
 23019 ;;		_printSortTimer
 23020 ;;		_retrieveLog
 23021 ;;		i2_printf
 23022 ;; This function uses a non-reentrant model
 23023 ;;
 23024                           
 23025                           	psect	text84
 23026  0052BE                     __ptext84:
 23027                           	opt stack 0
 23028  0052BE                     i2___wmul:
 23029                           	opt stack 21
 23030                           
 23031                           ;incstack = 0
 23032  0052BE  5001               	movf	i2___wmul@multiplier,w,c
 23033  0052C0  0203               	mulwf	i2___wmul@multiplicand,c
 23034  0052C2  CFF3 F005          	movff	prodl,i2___wmul@product
 23035  0052C6  CFF4 F006          	movff	prodh,i2___wmul@product+1
 23036  0052CA  5001               	movf	i2___wmul@multiplier,w,c
 23037  0052CC  0204               	mulwf	i2___wmul@multiplicand+1,c
 23038  0052CE  50F3               	movf	prodl,w,c
 23039  0052D0  2606               	addwf	i2___wmul@product+1,f,c
 23040  0052D2  5002               	movf	i2___wmul@multiplier+1,w,c
 23041  0052D4  0203               	mulwf	i2___wmul@multiplicand,c
 23042  0052D6  50F3               	movf	prodl,w,c
 23043  0052D8  2606               	addwf	i2___wmul@product+1,f,c
 23044  0052DA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 23045  0052DE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 23046  0052E2  0012               	return	
 23047  0052E4                     __end_ofi2___wmul:
 23048                           	opt stack 0
 23049                           pclatu	equ	0xFFB
 23050                           pclath	equ	0xFFA
 23051                           tblptru	equ	0xFF8
 23052                           tblptrh	equ	0xFF7
 23053                           tblptrl	equ	0xFF6
 23054                           tablat	equ	0xFF5
 23055                           prodh	equ	0xFF4
 23056                           prodl	equ	0xFF3
 23057                           intcon	equ	0xFF2
 23058                           intcon2	equ	0xFF1
 23059                           intcon3	equ	0xFF0
 23060                           indf0	equ	0xFEF
 23061                           postinc0	equ	0xFEE
 23062                           fsr0h	equ	0xFEA
 23063                           fsr0l	equ	0xFE9
 23064                           wreg	equ	0xFE8
 23065                           postdec1	equ	0xFE5
 23066                           fsr1h	equ	0xFE2
 23067                           fsr1l	equ	0xFE1
 23068                           indf2	equ	0xFDF
 23069                           postinc2	equ	0xFDE
 23070                           postdec2	equ	0xFDD
 23071                           fsr2h	equ	0xFDA
 23072                           fsr2l	equ	0xFD9
 23073                           status	equ	0xFD8
 23074                           
 23075 ;; *************** function i2___lwmod *****************
 23076 ;; Defined at:
 23077 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23078 ;; Parameters:    Size  Location     Type
 23079 ;;  dividend        2    0[COMRAM] unsigned int 
 23080 ;;  divisor         2    2[COMRAM] unsigned int 
 23081 ;; Auto vars:     Size  Location     Type
 23082 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23083 ;; Return value:  Size  Location     Type
 23084 ;;                  2    0[COMRAM] unsigned int 
 23085 ;; Registers used:
 23086 ;;		wreg, status,2, status,0
 23087 ;; Tracked objects:
 23088 ;;		On entry : 0/0
 23089 ;;		On exit  : 0/0
 23090 ;;		Unchanged: 0/0
 23091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23095 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23096 ;;Total ram usage:        5 bytes
 23097 ;; Hardware stack levels used:    1
 23098 ;; This function calls:
 23099 ;;		Nothing
 23100 ;; This function is called by:
 23101 ;;		_printSortTimer
 23102 ;;		i2_printf
 23103 ;; This function uses a non-reentrant model
 23104 ;;
 23105                           
 23106                           	psect	text85
 23107  004E2E                     __ptext85:
 23108                           	opt stack 0
 23109  004E2E                     i2___lwmod:
 23110                           	opt stack 21
 23111                           
 23112                           ;incstack = 0
 23113  004E2E  5003               	movf	i2___lwmod@divisor,w,c
 23114  004E30  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23115  004E32  B4D8               	btfsc	status,2,c
 23116  004E34  D018               	goto	i2l1898
 23117  004E36  0E01               	movlw	1
 23118  004E38  6E05               	movwf	i2___lwmod@counter,c
 23119  004E3A  D004               	goto	i2l6287
 23120  004E3C                     i2l6285:
 23121  004E3C  90D8               	bcf	status,0,c
 23122  004E3E  3603               	rlcf	i2___lwmod@divisor,f,c
 23123  004E40  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23124  004E42  2A05               	incf	i2___lwmod@counter,f,c
 23125  004E44                     i2l6287:
 23126  004E44  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23127  004E46  D7FA               	goto	i2l6285
 23128  004E48                     i2l6289:
 23129  004E48  5003               	movf	i2___lwmod@divisor,w,c
 23130  004E4A  5C01               	subwf	i2___lwmod@dividend,w,c
 23131  004E4C  5004               	movf	i2___lwmod@divisor+1,w,c
 23132  004E4E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23133  004E50  A0D8               	btfss	status,0,c
 23134  004E52  D004               	goto	i2l6293
 23135  004E54  5003               	movf	i2___lwmod@divisor,w,c
 23136  004E56  5E01               	subwf	i2___lwmod@dividend,f,c
 23137  004E58  5004               	movf	i2___lwmod@divisor+1,w,c
 23138  004E5A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23139  004E5C                     i2l6293:
 23140  004E5C  90D8               	bcf	status,0,c
 23141  004E5E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23142  004E60  3203               	rrcf	i2___lwmod@divisor,f,c
 23143  004E62  2E05               	decfsz	i2___lwmod@counter,f,c
 23144  004E64  D7F1               	goto	i2l6289
 23145  004E66                     i2l1898:
 23146  004E66  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23147  004E6A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23148  004E6E  0012               	return		;funcret
 23149  004E70                     __end_ofi2___lwmod:
 23150                           	opt stack 0
 23151                           pclatu	equ	0xFFB
 23152                           pclath	equ	0xFFA
 23153                           tblptru	equ	0xFF8
 23154                           tblptrh	equ	0xFF7
 23155                           tblptrl	equ	0xFF6
 23156                           tablat	equ	0xFF5
 23157                           prodh	equ	0xFF4
 23158                           prodl	equ	0xFF3
 23159                           intcon	equ	0xFF2
 23160                           intcon2	equ	0xFF1
 23161                           intcon3	equ	0xFF0
 23162                           indf0	equ	0xFEF
 23163                           postinc0	equ	0xFEE
 23164                           fsr0h	equ	0xFEA
 23165                           fsr0l	equ	0xFE9
 23166                           wreg	equ	0xFE8
 23167                           postdec1	equ	0xFE5
 23168                           fsr1h	equ	0xFE2
 23169                           fsr1l	equ	0xFE1
 23170                           indf2	equ	0xFDF
 23171                           postinc2	equ	0xFDE
 23172                           postdec2	equ	0xFDD
 23173                           fsr2h	equ	0xFDA
 23174                           fsr2l	equ	0xFD9
 23175                           status	equ	0xFD8
 23176                           
 23177 ;; *************** function i2___lwdiv *****************
 23178 ;; Defined at:
 23179 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23180 ;; Parameters:    Size  Location     Type
 23181 ;;  dividend        2    5[COMRAM] unsigned int 
 23182 ;;  divisor         2    7[COMRAM] unsigned int 
 23183 ;; Auto vars:     Size  Location     Type
 23184 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23185 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23186 ;; Return value:  Size  Location     Type
 23187 ;;                  2    5[COMRAM] unsigned int 
 23188 ;; Registers used:
 23189 ;;		wreg, status,2, status,0
 23190 ;; Tracked objects:
 23191 ;;		On entry : 0/0
 23192 ;;		On exit  : 0/0
 23193 ;;		Unchanged: 0/0
 23194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23196 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23198 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23199 ;;Total ram usage:        7 bytes
 23200 ;; Hardware stack levels used:    1
 23201 ;; This function calls:
 23202 ;;		Nothing
 23203 ;; This function is called by:
 23204 ;;		_printSortTimer
 23205 ;;		i2_printf
 23206 ;; This function uses a non-reentrant model
 23207 ;;
 23208                           
 23209                           	psect	text86
 23210  004CB0                     __ptext86:
 23211                           	opt stack 0
 23212  004CB0                     i2___lwdiv:
 23213                           	opt stack 21
 23214                           
 23215                           ;incstack = 0
 23216  004CB0  0E00               	movlw	0
 23217  004CB2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23218  004CB4  0E00               	movlw	0
 23219  004CB6  6E0A               	movwf	i2___lwdiv@quotient,c
 23220  004CB8  5008               	movf	i2___lwdiv@divisor,w,c
 23221  004CBA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23222  004CBC  B4D8               	btfsc	status,2,c
 23223  004CBE  D01C               	goto	i2l1888
 23224  004CC0  0E01               	movlw	1
 23225  004CC2  6E0C               	movwf	i2___lwdiv@counter,c
 23226  004CC4  D004               	goto	i2l6267
 23227  004CC6                     i2l6265:
 23228  004CC6  90D8               	bcf	status,0,c
 23229  004CC8  3608               	rlcf	i2___lwdiv@divisor,f,c
 23230  004CCA  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23231  004CCC  2A0C               	incf	i2___lwdiv@counter,f,c
 23232  004CCE                     i2l6267:
 23233  004CCE  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23234  004CD0  D7FA               	goto	i2l6265
 23235  004CD2                     i2l6269:
 23236  004CD2  90D8               	bcf	status,0,c
 23237  004CD4  360A               	rlcf	i2___lwdiv@quotient,f,c
 23238  004CD6  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23239  004CD8  5008               	movf	i2___lwdiv@divisor,w,c
 23240  004CDA  5C06               	subwf	i2___lwdiv@dividend,w,c
 23241  004CDC  5009               	movf	i2___lwdiv@divisor+1,w,c
 23242  004CDE  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23243  004CE0  A0D8               	btfss	status,0,c
 23244  004CE2  D005               	goto	i2l6277
 23245  004CE4  5008               	movf	i2___lwdiv@divisor,w,c
 23246  004CE6  5E06               	subwf	i2___lwdiv@dividend,f,c
 23247  004CE8  5009               	movf	i2___lwdiv@divisor+1,w,c
 23248  004CEA  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23249  004CEC  800A               	bsf	i2___lwdiv@quotient,0,c
 23250  004CEE                     i2l6277:
 23251  004CEE  90D8               	bcf	status,0,c
 23252  004CF0  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 23253  004CF2  3208               	rrcf	i2___lwdiv@divisor,f,c
 23254  004CF4  2E0C               	decfsz	i2___lwdiv@counter,f,c
 23255  004CF6  D7ED               	goto	i2l6269
 23256  004CF8                     i2l1888:
 23257  004CF8  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23258  004CFC  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23259  004D00  0012               	return		;funcret
 23260  004D02                     __end_ofi2___lwdiv:
 23261                           	opt stack 0
 23262                           pclatu	equ	0xFFB
 23263                           pclath	equ	0xFFA
 23264                           tblptru	equ	0xFF8
 23265                           tblptrh	equ	0xFF7
 23266                           tblptrl	equ	0xFF6
 23267                           tablat	equ	0xFF5
 23268                           prodh	equ	0xFF4
 23269                           prodl	equ	0xFF3
 23270                           intcon	equ	0xFF2
 23271                           intcon2	equ	0xFF1
 23272                           intcon3	equ	0xFF0
 23273                           indf0	equ	0xFEF
 23274                           postinc0	equ	0xFEE
 23275                           fsr0h	equ	0xFEA
 23276                           fsr0l	equ	0xFE9
 23277                           wreg	equ	0xFE8
 23278                           postdec1	equ	0xFE5
 23279                           fsr1h	equ	0xFE2
 23280                           fsr1l	equ	0xFE1
 23281                           indf2	equ	0xFDF
 23282                           postinc2	equ	0xFDE
 23283                           postdec2	equ	0xFDD
 23284                           fsr2h	equ	0xFDA
 23285                           fsr2l	equ	0xFD9
 23286                           status	equ	0xFD8
 23287                           
 23288 ;; *************** function i2_lcdInst *****************
 23289 ;; Defined at:
 23290 ;;		line 15 in file "lcd.c"
 23291 ;; Parameters:    Size  Location     Type
 23292 ;;  data            1    wreg     unsigned char 
 23293 ;; Auto vars:     Size  Location     Type
 23294 ;;  data            1    2[COMRAM] unsigned char 
 23295 ;; Return value:  Size  Location     Type
 23296 ;;                  1    wreg      void 
 23297 ;; Registers used:
 23298 ;;		wreg, status,2, status,0, cstack
 23299 ;; Tracked objects:
 23300 ;;		On entry : 0/0
 23301 ;;		On exit  : 0/0
 23302 ;;		Unchanged: 0/0
 23303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23305 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23308 ;;Total ram usage:        1 bytes
 23309 ;; Hardware stack levels used:    1
 23310 ;; Hardware stack levels required when called:    1
 23311 ;; This function calls:
 23312 ;;		i2_lcdNibble
 23313 ;; This function is called by:
 23314 ;;		_change_state_to_menu_11
 23315 ;;		_change_state_to_menu_23
 23316 ;;		_change_state_to_logs_11
 23317 ;;		_change_state_to_logs_12
 23318 ;;		_change_state_to_logs_22
 23319 ;;		_change_state_to_logs_23
 23320 ;;		_change_state_to_logs_33
 23321 ;;		_change_state_to_logs_34
 23322 ;;		_printSortTimer
 23323 ;;		i2_change_state_to_menu_start
 23324 ;;		i2_change_state_to_menu_12
 23325 ;;		i2_change_state_to_menu_22
 23326 ;;		i2_printRTC
 23327 ;; This function uses a non-reentrant model
 23328 ;;
 23329                           
 23330                           	psect	text87
 23331  005446                     __ptext87:
 23332                           	opt stack 0
 23333  005446                     i2_lcdInst:
 23334                           	opt stack 20
 23335                           
 23336                           ;incstack = 0
 23337                           ;i2lcdInst@data stored from wreg
 23338  005446  6E03               	movwf	i2lcdInst@data,c
 23339                           
 23340                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23341  005448  948C               	bcf	3980,2,c	;volatile
 23342                           
 23343                           ;lcd.c: 17: lcdNibble(data);
 23344  00544A  5003               	movf	i2lcdInst@data,w,c
 23345  00544C  EC2D  F026         	call	i2_lcdNibble
 23346  005450  0012               	return		;funcret
 23347  005452                     __end_ofi2_lcdInst:
 23348                           	opt stack 0
 23349                           pclatu	equ	0xFFB
 23350                           pclath	equ	0xFFA
 23351                           tblptru	equ	0xFF8
 23352                           tblptrh	equ	0xFF7
 23353                           tblptrl	equ	0xFF6
 23354                           tablat	equ	0xFF5
 23355                           prodh	equ	0xFF4
 23356                           prodl	equ	0xFF3
 23357                           intcon	equ	0xFF2
 23358                           intcon2	equ	0xFF1
 23359                           intcon3	equ	0xFF0
 23360                           indf0	equ	0xFEF
 23361                           postinc0	equ	0xFEE
 23362                           fsr0h	equ	0xFEA
 23363                           fsr0l	equ	0xFE9
 23364                           wreg	equ	0xFE8
 23365                           postdec1	equ	0xFE5
 23366                           fsr1h	equ	0xFE2
 23367                           fsr1l	equ	0xFE1
 23368                           indf2	equ	0xFDF
 23369                           postinc2	equ	0xFDE
 23370                           postdec2	equ	0xFDD
 23371                           fsr2h	equ	0xFDA
 23372                           fsr2l	equ	0xFD9
 23373                           status	equ	0xFD8
 23374                           
 23375 ;; *************** function i2_lcdNibble *****************
 23376 ;; Defined at:
 23377 ;;		line 25 in file "lcd.c"
 23378 ;; Parameters:    Size  Location     Type
 23379 ;;  data            1    wreg     unsigned char 
 23380 ;; Auto vars:     Size  Location     Type
 23381 ;;  data            1    1[COMRAM] unsigned char 
 23382 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23383 ;; Return value:  Size  Location     Type
 23384 ;;                  1    wreg      void 
 23385 ;; Registers used:
 23386 ;;		wreg, status,2, status,0
 23387 ;; Tracked objects:
 23388 ;;		On entry : 0/0
 23389 ;;		On exit  : 0/0
 23390 ;;		Unchanged: 0/0
 23391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23396 ;;Total ram usage:        2 bytes
 23397 ;; Hardware stack levels used:    1
 23398 ;; This function calls:
 23399 ;;		Nothing
 23400 ;; This function is called by:
 23401 ;;		i2_lcdInst
 23402 ;;		i2_putch
 23403 ;; This function uses a non-reentrant model
 23404 ;;
 23405                           
 23406                           	psect	text88
 23407  004C5A                     __ptext88:
 23408                           	opt stack 0
 23409  004C5A                     i2_lcdNibble:
 23410                           	opt stack 20
 23411                           
 23412                           ;incstack = 0
 23413                           ;i2lcdNibble@data stored from wreg
 23414  004C5A  6E02               	movwf	i2lcdNibble@data,c
 23415                           
 23416                           ;lcd.c: 27: char temp = data & 0xF0;
 23417  004C5C  5002               	movf	i2lcdNibble@data,w,c
 23418  004C5E  0BF0               	andlw	240
 23419  004C60  6E01               	movwf	i2lcdNibble@temp,c
 23420                           
 23421                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23422  004C62  508C               	movf	3980,w,c	;volatile
 23423  004C64  0B0F               	andlw	15
 23424  004C66  6E8C               	movwf	3980,c	;volatile
 23425                           
 23426                           ;lcd.c: 29: LATD = temp | LATD;
 23427  004C68  5001               	movf	i2lcdNibble@temp,w,c
 23428  004C6A  108C               	iorwf	3980,w,c	;volatile
 23429  004C6C  6E8C               	movwf	3980,c	;volatile
 23430                           
 23431                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23432  004C6E  868C               	bsf	3980,3,c	;volatile
 23433                           
 23434                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23435  004C70  0E42               	movlw	66
 23436  004C72                     i2u1050_47:
 23437  004C72  2EE8               	decfsz	wreg,f,c
 23438  004C74  D7FE               	bra	i2u1050_47
 23439  004C76  D000               	nop2	
 23440                           
 23441                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23442  004C78  968C               	bcf	3980,3,c	;volatile
 23443                           
 23444                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23445  004C7A  0E42               	movlw	66
 23446  004C7C                     i2u1051_47:
 23447  004C7C  2EE8               	decfsz	wreg,f,c
 23448  004C7E  D7FE               	bra	i2u1051_47
 23449  004C80  D000               	nop2	
 23450                           
 23451                           ;lcd.c: 36: data = data << 4;
 23452  004C82  3802               	swapf	i2lcdNibble@data,w,c
 23453  004C84  0BF0               	andlw	240
 23454  004C86  6E02               	movwf	i2lcdNibble@data,c
 23455                           
 23456                           ;lcd.c: 38: temp = data & 0xF0;
 23457  004C88  5002               	movf	i2lcdNibble@data,w,c
 23458  004C8A  0BF0               	andlw	240
 23459  004C8C  6E01               	movwf	i2lcdNibble@temp,c
 23460                           
 23461                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23462  004C8E  508C               	movf	3980,w,c	;volatile
 23463  004C90  0B0F               	andlw	15
 23464  004C92  6E8C               	movwf	3980,c	;volatile
 23465                           
 23466                           ;lcd.c: 40: LATD = temp | LATD;
 23467  004C94  5001               	movf	i2lcdNibble@temp,w,c
 23468  004C96  108C               	iorwf	3980,w,c	;volatile
 23469  004C98  6E8C               	movwf	3980,c	;volatile
 23470                           
 23471                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23472  004C9A  868C               	bsf	3980,3,c	;volatile
 23473                           
 23474                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23475  004C9C  0E42               	movlw	66
 23476  004C9E                     i2u1052_47:
 23477  004C9E  2EE8               	decfsz	wreg,f,c
 23478  004CA0  D7FE               	bra	i2u1052_47
 23479  004CA2  D000               	nop2	
 23480                           
 23481                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23482  004CA4  968C               	bcf	3980,3,c	;volatile
 23483                           
 23484                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23485  004CA6  0E42               	movlw	66
 23486  004CA8                     i2u1053_47:
 23487  004CA8  2EE8               	decfsz	wreg,f,c
 23488  004CAA  D7FE               	bra	i2u1053_47
 23489  004CAC  D000               	nop2	
 23490  004CAE  0012               	return		;funcret
 23491  004CB0                     __end_ofi2_lcdNibble:
 23492                           	opt stack 0
 23493                           pclatu	equ	0xFFB
 23494                           pclath	equ	0xFFA
 23495                           tblptru	equ	0xFF8
 23496                           tblptrh	equ	0xFF7
 23497                           tblptrl	equ	0xFF6
 23498                           tablat	equ	0xFF5
 23499                           prodh	equ	0xFF4
 23500                           prodl	equ	0xFF3
 23501                           intcon	equ	0xFF2
 23502                           intcon2	equ	0xFF1
 23503                           intcon3	equ	0xFF0
 23504                           indf0	equ	0xFEF
 23505                           postinc0	equ	0xFEE
 23506                           fsr0h	equ	0xFEA
 23507                           fsr0l	equ	0xFE9
 23508                           wreg	equ	0xFE8
 23509                           postdec1	equ	0xFE5
 23510                           fsr1h	equ	0xFE2
 23511                           fsr1l	equ	0xFE1
 23512                           indf2	equ	0xFDF
 23513                           postinc2	equ	0xFDE
 23514                           postdec2	equ	0xFDD
 23515                           fsr2h	equ	0xFDA
 23516                           fsr2l	equ	0xFD9
 23517                           status	equ	0xFD8
 23518                           
 23519 ;; *************** function i2_getRTC *****************
 23520 ;; Defined at:
 23521 ;;		line 44 in file "RTC.c"
 23522 ;; Parameters:    Size  Location     Type
 23523 ;;		None
 23524 ;; Auto vars:     Size  Location     Type
 23525 ;;  getRTC          2    3[COMRAM] int 
 23526 ;; Return value:  Size  Location     Type
 23527 ;;                  1    wreg      void 
 23528 ;; Registers used:
 23529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23530 ;; Tracked objects:
 23531 ;;		On entry : 0/0
 23532 ;;		On exit  : 0/0
 23533 ;;		Unchanged: 0/0
 23534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23536 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23538 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23539 ;;Total ram usage:        2 bytes
 23540 ;; Hardware stack levels used:    1
 23541 ;; Hardware stack levels required when called:    2
 23542 ;; This function calls:
 23543 ;;		i2_I2C_Master_Read
 23544 ;;		i2_I2C_Master_Start
 23545 ;;		i2_I2C_Master_Stop
 23546 ;;		i2_I2C_Master_Write
 23547 ;; This function is called by:
 23548 ;;		_printSortTimer
 23549 ;;		i2_printRTC
 23550 ;; This function uses a non-reentrant model
 23551 ;;
 23552                           
 23553                           	psect	text89
 23554  004928                     __ptext89:
 23555                           	opt stack 0
 23556  004928                     i2_getRTC:
 23557                           	opt stack 19
 23558                           
 23559                           ;RTC.c: 48: I2C_Master_Start();
 23560                           
 23561                           ;incstack = 0
 23562  004928  EC43  F02A         	call	i2_I2C_Master_Start	;wreg free
 23563                           
 23564                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23565  00492C  0E00               	movlw	0
 23566  00492E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23567  004930  0ED0               	movlw	208
 23568  004932  6E02               	movwf	i2I2C_Master_Write@d,c
 23569  004934  EC2E  F02A         	call	i2_I2C_Master_Write	;wreg free
 23570                           
 23571                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23572  004938  0E00               	movlw	0
 23573  00493A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23574  00493C  0E00               	movlw	0
 23575  00493E  6E02               	movwf	i2I2C_Master_Write@d,c
 23576  004940  EC2E  F02A         	call	i2_I2C_Master_Write	;wreg free
 23577                           
 23578                           ;RTC.c: 51: I2C_Master_Stop();
 23579  004944  EC3F  F02A         	call	i2_I2C_Master_Stop	;wreg free
 23580                           
 23581                           ;RTC.c: 54: I2C_Master_Start();
 23582  004948  EC43  F02A         	call	i2_I2C_Master_Start	;wreg free
 23583                           
 23584                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23585  00494C  0E00               	movlw	0
 23586  00494E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23587  004950  0ED1               	movlw	209
 23588  004952  6E02               	movwf	i2I2C_Master_Write@d,c
 23589  004954  EC2E  F02A         	call	i2_I2C_Master_Write	;wreg free
 23590                           
 23591                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23592  004958  0E00               	movlw	0
 23593  00495A  6E05               	movwf	i2getRTC@i+1,c
 23594  00495C  0E00               	movlw	0
 23595  00495E  6E04               	movwf	i2getRTC@i,c
 23596  004960                     i2l6527:
 23597  004960  BE05               	btfsc	i2getRTC@i+1,7,c
 23598  004962  D006               	goto	i2l6531
 23599  004964  5005               	movf	i2getRTC@i+1,w,c
 23600  004966  E111               	bnz	i2l6537
 23601  004968  0E06               	movlw	6
 23602  00496A  5C04               	subwf	i2getRTC@i,w,c
 23603  00496C  B0D8               	btfsc	status,0,c
 23604  00496E  D00D               	goto	i2l6537
 23605  004970                     i2l6531:
 23606                           
 23607                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23608  004970  0E1C               	movlw	low _time
 23609  004972  2404               	addwf	i2getRTC@i,w,c
 23610  004974  6ED9               	movwf	fsr2l,c
 23611  004976  0E01               	movlw	high _time
 23612  004978  2005               	addwfc	i2getRTC@i+1,w,c
 23613  00497A  6EDA               	movwf	fsr2h,c
 23614  00497C  0E01               	movlw	1
 23615  00497E  EC72  F029         	call	i2_I2C_Master_Read
 23616  004982  6EDF               	movwf	indf2,c
 23617  004984  4A04               	infsnz	i2getRTC@i,f,c
 23618  004986  2A05               	incf	i2getRTC@i+1,f,c
 23619  004988  D7EB               	goto	i2l6527
 23620  00498A                     i2l6537:
 23621                           
 23622                           ;RTC.c: 58: }
 23623                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23624  00498A  0E00               	movlw	0
 23625  00498C  EC72  F029         	call	i2_I2C_Master_Read
 23626  004990  0101               	movlb	1	; () banked
 23627  004992  6F22               	movwf	(_time+6)& (0+255),b
 23628                           
 23629                           ;RTC.c: 60: I2C_Master_Stop();
 23630  004994  EC3F  F02A         	call	i2_I2C_Master_Stop	;wreg free
 23631  004998  0012               	return		;funcret
 23632  00499A                     __end_ofi2_getRTC:
 23633                           	opt stack 0
 23634                           pclatu	equ	0xFFB
 23635                           pclath	equ	0xFFA
 23636                           tblptru	equ	0xFF8
 23637                           tblptrh	equ	0xFF7
 23638                           tblptrl	equ	0xFF6
 23639                           tablat	equ	0xFF5
 23640                           prodh	equ	0xFF4
 23641                           prodl	equ	0xFF3
 23642                           intcon	equ	0xFF2
 23643                           intcon2	equ	0xFF1
 23644                           intcon3	equ	0xFF0
 23645                           indf0	equ	0xFEF
 23646                           postinc0	equ	0xFEE
 23647                           fsr0h	equ	0xFEA
 23648                           fsr0l	equ	0xFE9
 23649                           wreg	equ	0xFE8
 23650                           postdec1	equ	0xFE5
 23651                           fsr1h	equ	0xFE2
 23652                           fsr1l	equ	0xFE1
 23653                           indf2	equ	0xFDF
 23654                           postinc2	equ	0xFDE
 23655                           postdec2	equ	0xFDD
 23656                           fsr2h	equ	0xFDA
 23657                           fsr2l	equ	0xFD9
 23658                           status	equ	0xFD8
 23659                           
 23660 ;; *************** function i2_I2C_Master_Write *****************
 23661 ;; Defined at:
 23662 ;;		line 49 in file "I2C.c"
 23663 ;; Parameters:    Size  Location     Type
 23664 ;;  d               2    1[COMRAM] unsigned int 
 23665 ;; Auto vars:     Size  Location     Type
 23666 ;;		None
 23667 ;; Return value:  Size  Location     Type
 23668 ;;                  1    wreg      void 
 23669 ;; Registers used:
 23670 ;;		wreg, status,2, status,0, cstack
 23671 ;; Tracked objects:
 23672 ;;		On entry : 0/0
 23673 ;;		On exit  : 0/0
 23674 ;;		Unchanged: 0/0
 23675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23680 ;;Total ram usage:        2 bytes
 23681 ;; Hardware stack levels used:    1
 23682 ;; Hardware stack levels required when called:    1
 23683 ;; This function calls:
 23684 ;;		i2_I2C_Master_Wait
 23685 ;; This function is called by:
 23686 ;;		i2_getRTC
 23687 ;; This function uses a non-reentrant model
 23688 ;;
 23689                           
 23690                           	psect	text90
 23691  00545C                     __ptext90:
 23692                           	opt stack 0
 23693  00545C                     i2_I2C_Master_Write:
 23694                           	opt stack 19
 23695                           
 23696                           ;I2C.c: 51: I2C_Master_Wait();
 23697                           
 23698                           ;incstack = 0
 23699  00545C  EC04  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23700                           
 23701                           ;I2C.c: 52: SSPBUF = d;
 23702  005460  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23703  005464  0012               	return		;funcret
 23704  005466                     __end_ofi2_I2C_Master_Write:
 23705                           	opt stack 0
 23706                           pclatu	equ	0xFFB
 23707                           pclath	equ	0xFFA
 23708                           tblptru	equ	0xFF8
 23709                           tblptrh	equ	0xFF7
 23710                           tblptrl	equ	0xFF6
 23711                           tablat	equ	0xFF5
 23712                           prodh	equ	0xFF4
 23713                           prodl	equ	0xFF3
 23714                           intcon	equ	0xFF2
 23715                           intcon2	equ	0xFF1
 23716                           intcon3	equ	0xFF0
 23717                           indf0	equ	0xFEF
 23718                           postinc0	equ	0xFEE
 23719                           fsr0h	equ	0xFEA
 23720                           fsr0l	equ	0xFE9
 23721                           wreg	equ	0xFE8
 23722                           postdec1	equ	0xFE5
 23723                           fsr1h	equ	0xFE2
 23724                           fsr1l	equ	0xFE1
 23725                           indf2	equ	0xFDF
 23726                           postinc2	equ	0xFDE
 23727                           postdec2	equ	0xFDD
 23728                           fsr2h	equ	0xFDA
 23729                           fsr2l	equ	0xFD9
 23730                           status	equ	0xFD8
 23731                           
 23732 ;; *************** function i2_I2C_Master_Stop *****************
 23733 ;; Defined at:
 23734 ;;		line 43 in file "I2C.c"
 23735 ;; Parameters:    Size  Location     Type
 23736 ;;		None
 23737 ;; Auto vars:     Size  Location     Type
 23738 ;;		None
 23739 ;; Return value:  Size  Location     Type
 23740 ;;                  1    wreg      void 
 23741 ;; Registers used:
 23742 ;;		wreg, status,2, status,0, cstack
 23743 ;; Tracked objects:
 23744 ;;		On entry : 0/0
 23745 ;;		On exit  : 0/0
 23746 ;;		Unchanged: 0/0
 23747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23752 ;;Total ram usage:        0 bytes
 23753 ;; Hardware stack levels used:    1
 23754 ;; Hardware stack levels required when called:    1
 23755 ;; This function calls:
 23756 ;;		i2_I2C_Master_Wait
 23757 ;; This function is called by:
 23758 ;;		i2_getRTC
 23759 ;; This function uses a non-reentrant model
 23760 ;;
 23761                           
 23762                           	psect	text91
 23763  00547E                     __ptext91:
 23764                           	opt stack 0
 23765  00547E                     i2_I2C_Master_Stop:
 23766                           	opt stack 19
 23767                           
 23768                           ;I2C.c: 45: I2C_Master_Wait();
 23769                           
 23770                           ;incstack = 0
 23771  00547E  EC04  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23772                           
 23773                           ;I2C.c: 46: PEN = 1;
 23774  005482  84C5               	bsf	4037,2,c	;volatile
 23775  005484  0012               	return		;funcret
 23776  005486                     __end_ofi2_I2C_Master_Stop:
 23777                           	opt stack 0
 23778                           pclatu	equ	0xFFB
 23779                           pclath	equ	0xFFA
 23780                           tblptru	equ	0xFF8
 23781                           tblptrh	equ	0xFF7
 23782                           tblptrl	equ	0xFF6
 23783                           tablat	equ	0xFF5
 23784                           prodh	equ	0xFF4
 23785                           prodl	equ	0xFF3
 23786                           intcon	equ	0xFF2
 23787                           intcon2	equ	0xFF1
 23788                           intcon3	equ	0xFF0
 23789                           indf0	equ	0xFEF
 23790                           postinc0	equ	0xFEE
 23791                           fsr0h	equ	0xFEA
 23792                           fsr0l	equ	0xFE9
 23793                           wreg	equ	0xFE8
 23794                           postdec1	equ	0xFE5
 23795                           fsr1h	equ	0xFE2
 23796                           fsr1l	equ	0xFE1
 23797                           indf2	equ	0xFDF
 23798                           postinc2	equ	0xFDE
 23799                           postdec2	equ	0xFDD
 23800                           fsr2h	equ	0xFDA
 23801                           fsr2l	equ	0xFD9
 23802                           status	equ	0xFD8
 23803                           
 23804 ;; *************** function i2_I2C_Master_Start *****************
 23805 ;; Defined at:
 23806 ;;		line 31 in file "I2C.c"
 23807 ;; Parameters:    Size  Location     Type
 23808 ;;		None
 23809 ;; Auto vars:     Size  Location     Type
 23810 ;;		None
 23811 ;; Return value:  Size  Location     Type
 23812 ;;                  1    wreg      void 
 23813 ;; Registers used:
 23814 ;;		wreg, status,2, status,0, cstack
 23815 ;; Tracked objects:
 23816 ;;		On entry : 0/0
 23817 ;;		On exit  : 0/0
 23818 ;;		Unchanged: 0/0
 23819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23824 ;;Total ram usage:        0 bytes
 23825 ;; Hardware stack levels used:    1
 23826 ;; Hardware stack levels required when called:    1
 23827 ;; This function calls:
 23828 ;;		i2_I2C_Master_Wait
 23829 ;; This function is called by:
 23830 ;;		i2_getRTC
 23831 ;; This function uses a non-reentrant model
 23832 ;;
 23833                           
 23834                           	psect	text92
 23835  005486                     __ptext92:
 23836                           	opt stack 0
 23837  005486                     i2_I2C_Master_Start:
 23838                           	opt stack 19
 23839                           
 23840                           ;I2C.c: 33: I2C_Master_Wait();
 23841                           
 23842                           ;incstack = 0
 23843  005486  EC04  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23844                           
 23845                           ;I2C.c: 34: SEN = 1;
 23846  00548A  80C5               	bsf	4037,0,c	;volatile
 23847  00548C  0012               	return		;funcret
 23848  00548E                     __end_ofi2_I2C_Master_Start:
 23849                           	opt stack 0
 23850                           pclatu	equ	0xFFB
 23851                           pclath	equ	0xFFA
 23852                           tblptru	equ	0xFF8
 23853                           tblptrh	equ	0xFF7
 23854                           tblptrl	equ	0xFF6
 23855                           tablat	equ	0xFF5
 23856                           prodh	equ	0xFF4
 23857                           prodl	equ	0xFF3
 23858                           intcon	equ	0xFF2
 23859                           intcon2	equ	0xFF1
 23860                           intcon3	equ	0xFF0
 23861                           indf0	equ	0xFEF
 23862                           postinc0	equ	0xFEE
 23863                           fsr0h	equ	0xFEA
 23864                           fsr0l	equ	0xFE9
 23865                           wreg	equ	0xFE8
 23866                           postdec1	equ	0xFE5
 23867                           fsr1h	equ	0xFE2
 23868                           fsr1l	equ	0xFE1
 23869                           indf2	equ	0xFDF
 23870                           postinc2	equ	0xFDE
 23871                           postdec2	equ	0xFDD
 23872                           fsr2h	equ	0xFDA
 23873                           fsr2l	equ	0xFD9
 23874                           status	equ	0xFD8
 23875                           
 23876 ;; *************** function i2_I2C_Master_Read *****************
 23877 ;; Defined at:
 23878 ;;		line 55 in file "I2C.c"
 23879 ;; Parameters:    Size  Location     Type
 23880 ;;  a               1    wreg     unsigned char 
 23881 ;; Auto vars:     Size  Location     Type
 23882 ;;  a               1    1[COMRAM] unsigned char 
 23883 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23884 ;; Return value:  Size  Location     Type
 23885 ;;                  1    wreg      unsigned char 
 23886 ;; Registers used:
 23887 ;;		wreg, status,2, status,0, cstack
 23888 ;; Tracked objects:
 23889 ;;		On entry : 0/0
 23890 ;;		On exit  : 0/0
 23891 ;;		Unchanged: 0/0
 23892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23894 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23896 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23897 ;;Total ram usage:        2 bytes
 23898 ;; Hardware stack levels used:    1
 23899 ;; Hardware stack levels required when called:    1
 23900 ;; This function calls:
 23901 ;;		i2_I2C_Master_Wait
 23902 ;; This function is called by:
 23903 ;;		i2_getRTC
 23904 ;; This function uses a non-reentrant model
 23905 ;;
 23906                           
 23907                           	psect	text93
 23908  0052E4                     __ptext93:
 23909                           	opt stack 0
 23910  0052E4                     i2_I2C_Master_Read:
 23911                           	opt stack 19
 23912                           
 23913                           ;incstack = 0
 23914                           ;i2I2C_Master_Read@a stored from wreg
 23915  0052E4  6E02               	movwf	i2I2C_Master_Read@a,c
 23916                           
 23917                           ;I2C.c: 57: unsigned char temp;
 23918                           ;I2C.c: 58: I2C_Master_Wait();
 23919  0052E6  EC04  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23920                           
 23921                           ;I2C.c: 59: RCEN = 1;
 23922  0052EA  86C5               	bsf	4037,3,c	;volatile
 23923                           
 23924                           ;I2C.c: 60: I2C_Master_Wait();
 23925  0052EC  EC04  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23926                           
 23927                           ;I2C.c: 61: temp = SSPBUF;
 23928  0052F0  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23929                           
 23930                           ;I2C.c: 62: I2C_Master_Wait();
 23931  0052F4  EC04  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23932                           
 23933                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23934  0052F8  5002               	movf	i2I2C_Master_Read@a,w,c
 23935  0052FA  A4D8               	btfss	status,2,c
 23936  0052FC  D002               	goto	i2u459_40
 23937  0052FE  8AC5               	bsf	4037,5,c	;volatile
 23938  005300  D001               	goto	i2l6231
 23939  005302                     i2u459_40:
 23940  005302  9AC5               	bcf	4037,5,c	;volatile
 23941  005304                     i2l6231:
 23942                           
 23943                           ;I2C.c: 64: ACKEN = 1;
 23944  005304  88C5               	bsf	4037,4,c	;volatile
 23945                           
 23946                           ;I2C.c: 65: return temp;
 23947  005306  5003               	movf	i2I2C_Master_Read@temp,w,c
 23948  005308  0012               	return	
 23949  00530A                     __end_ofi2_I2C_Master_Read:
 23950                           	opt stack 0
 23951                           pclatu	equ	0xFFB
 23952                           pclath	equ	0xFFA
 23953                           tblptru	equ	0xFF8
 23954                           tblptrh	equ	0xFF7
 23955                           tblptrl	equ	0xFF6
 23956                           tablat	equ	0xFF5
 23957                           prodh	equ	0xFF4
 23958                           prodl	equ	0xFF3
 23959                           intcon	equ	0xFF2
 23960                           intcon2	equ	0xFF1
 23961                           intcon3	equ	0xFF0
 23962                           indf0	equ	0xFEF
 23963                           postinc0	equ	0xFEE
 23964                           fsr0h	equ	0xFEA
 23965                           fsr0l	equ	0xFE9
 23966                           wreg	equ	0xFE8
 23967                           postdec1	equ	0xFE5
 23968                           fsr1h	equ	0xFE2
 23969                           fsr1l	equ	0xFE1
 23970                           indf2	equ	0xFDF
 23971                           postinc2	equ	0xFDE
 23972                           postdec2	equ	0xFDD
 23973                           fsr2h	equ	0xFDA
 23974                           fsr2l	equ	0xFD9
 23975                           status	equ	0xFD8
 23976                           
 23977 ;; *************** function i2_I2C_Master_Wait *****************
 23978 ;; Defined at:
 23979 ;;		line 26 in file "I2C.c"
 23980 ;; Parameters:    Size  Location     Type
 23981 ;;		None
 23982 ;; Auto vars:     Size  Location     Type
 23983 ;;		None
 23984 ;; Return value:  Size  Location     Type
 23985 ;;                  1    wreg      void 
 23986 ;; Registers used:
 23987 ;;		wreg, status,2, status,0
 23988 ;; Tracked objects:
 23989 ;;		On entry : 0/0
 23990 ;;		On exit  : 0/0
 23991 ;;		Unchanged: 0/0
 23992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23996 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23997 ;;Total ram usage:        1 bytes
 23998 ;; Hardware stack levels used:    1
 23999 ;; This function calls:
 24000 ;;		Nothing
 24001 ;; This function is called by:
 24002 ;;		i2_I2C_Master_Start
 24003 ;;		i2_I2C_Master_Stop
 24004 ;;		i2_I2C_Master_Write
 24005 ;;		i2_I2C_Master_Read
 24006 ;; This function uses a non-reentrant model
 24007 ;;
 24008                           
 24009                           	psect	text94
 24010  005408                     __ptext94:
 24011                           	opt stack 0
 24012  005408                     i2_I2C_Master_Wait:
 24013                           	opt stack 19
 24014  005408                     i2l66:
 24015  005408  B4C7               	btfsc	4039,2,c	;volatile
 24016  00540A  D7FE               	goto	i2l66
 24017  00540C  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 24018  005410  0E1F               	movlw	31
 24019  005412  1601               	andwf	??i2_I2C_Master_Wait,f,c
 24020  005414  B4D8               	btfsc	status,2,c
 24021  005416  0012               	return	
 24022  005418  D7F7               	goto	i2l66
 24023  00541A                     __end_ofi2_I2C_Master_Wait:
 24024                           	opt stack 0
 24025                           pclatu	equ	0xFFB
 24026                           pclath	equ	0xFFA
 24027                           tblptru	equ	0xFF8
 24028                           tblptrh	equ	0xFF7
 24029                           tblptrl	equ	0xFF6
 24030                           tablat	equ	0xFF5
 24031                           prodh	equ	0xFF4
 24032                           prodl	equ	0xFF3
 24033                           intcon	equ	0xFF2
 24034                           intcon2	equ	0xFF1
 24035                           intcon3	equ	0xFF0
 24036                           indf0	equ	0xFEF
 24037                           postinc0	equ	0xFEE
 24038                           fsr0h	equ	0xFEA
 24039                           fsr0l	equ	0xFE9
 24040                           wreg	equ	0xFE8
 24041                           postdec1	equ	0xFE5
 24042                           fsr1h	equ	0xFE2
 24043                           fsr1l	equ	0xFE1
 24044                           indf2	equ	0xFDF
 24045                           postinc2	equ	0xFDE
 24046                           postdec2	equ	0xFDD
 24047                           fsr2h	equ	0xFDA
 24048                           fsr2l	equ	0xFD9
 24049                           status	equ	0xFD8
 24050                           
 24051 ;; *************** function i2_delay_ms *****************
 24052 ;; Defined at:
 24053 ;;		line 601 in file "sort.c"
 24054 ;; Parameters:    Size  Location     Type
 24055 ;;  milliseconds    1    wreg     unsigned char 
 24056 ;; Auto vars:     Size  Location     Type
 24057 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24058 ;; Return value:  Size  Location     Type
 24059 ;;                  1    wreg      void 
 24060 ;; Registers used:
 24061 ;;		wreg, status,2, status,0, cstack
 24062 ;; Tracked objects:
 24063 ;;		On entry : 0/0
 24064 ;;		On exit  : 0/0
 24065 ;;		Unchanged: 0/0
 24066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24070 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24071 ;;Total ram usage:        2 bytes
 24072 ;; Hardware stack levels used:    1
 24073 ;; This function calls:
 24074 ;;		Nothing
 24075 ;; This function is called by:
 24076 ;;		_printSortTimer
 24077 ;; This function uses a non-reentrant model
 24078 ;;
 24079                           
 24080                           	psect	text95
 24081  005390                     __ptext95:
 24082                           	opt stack 0
 24083  005390                     i2_delay_ms:
 24084                           	opt stack 22
 24085                           
 24086                           ;incstack = 0
 24087                           ;i2delay_ms@milliseconds stored from wreg
 24088  005390  6E02               	movwf	i2delay_ms@milliseconds,c
 24089                           
 24090                           ;sort.c: 602: while(milliseconds > 0)
 24091  005392  D008               	goto	i2l8607
 24092  005394                     i2l8603:
 24093                           
 24094                           ;sort.c: 603: {
 24095                           ;sort.c: 604: milliseconds--;
 24096  005394  0602               	decf	i2delay_ms@milliseconds,f,c
 24097                           
 24098                           ;sort.c: 605: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24099  005396  0E0B               	movlw	11
 24100  005398  6E01               	movwf	??i2_delay_ms& (0+255),c
 24101  00539A  0E48               	movlw	72
 24102  00539C                     i2u1054_47:
 24103  00539C  2EE8               	decfsz	wreg,f,c
 24104  00539E  D7FE               	bra	i2u1054_47
 24105  0053A0  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24106  0053A2  D7FC               	bra	i2u1054_47
 24107  0053A4                     i2l8607:
 24108  0053A4  5002               	movf	i2delay_ms@milliseconds,w,c
 24109  0053A6  B4D8               	btfsc	status,2,c
 24110  0053A8  0012               	return	
 24111  0053AA  D7F4               	goto	i2l8603
 24112  0053AC                     __end_ofi2_delay_ms:
 24113                           	opt stack 0
 24114                           pclatu	equ	0xFFB
 24115                           pclath	equ	0xFFA
 24116                           tblptru	equ	0xFF8
 24117                           tblptrh	equ	0xFF7
 24118                           tblptrl	equ	0xFF6
 24119                           tablat	equ	0xFF5
 24120                           prodh	equ	0xFF4
 24121                           prodl	equ	0xFF3
 24122                           intcon	equ	0xFF2
 24123                           intcon2	equ	0xFF1
 24124                           intcon3	equ	0xFF0
 24125                           indf0	equ	0xFEF
 24126                           postinc0	equ	0xFEE
 24127                           fsr0h	equ	0xFEA
 24128                           fsr0l	equ	0xFE9
 24129                           wreg	equ	0xFE8
 24130                           postdec1	equ	0xFE5
 24131                           fsr1h	equ	0xFE2
 24132                           fsr1l	equ	0xFE1
 24133                           indf2	equ	0xFDF
 24134                           postinc2	equ	0xFDE
 24135                           postdec2	equ	0xFDD
 24136                           fsr2h	equ	0xFDA
 24137                           fsr2l	equ	0xFD9
 24138                           status	equ	0xFD8
 24139                           pclatu	equ	0xFFB
 24140                           pclath	equ	0xFFA
 24141                           tblptru	equ	0xFF8
 24142                           tblptrh	equ	0xFF7
 24143                           tblptrl	equ	0xFF6
 24144                           tablat	equ	0xFF5
 24145                           prodh	equ	0xFF4
 24146                           prodl	equ	0xFF3
 24147                           intcon	equ	0xFF2
 24148                           intcon2	equ	0xFF1
 24149                           intcon3	equ	0xFF0
 24150                           indf0	equ	0xFEF
 24151                           postinc0	equ	0xFEE
 24152                           fsr0h	equ	0xFEA
 24153                           fsr0l	equ	0xFE9
 24154                           wreg	equ	0xFE8
 24155                           postdec1	equ	0xFE5
 24156                           fsr1h	equ	0xFE2
 24157                           fsr1l	equ	0xFE1
 24158                           indf2	equ	0xFDF
 24159                           postinc2	equ	0xFDE
 24160                           postdec2	equ	0xFDD
 24161                           fsr2h	equ	0xFDA
 24162                           fsr2l	equ	0xFD9
 24163                           status	equ	0xFD8
 24164                           
 24165                           	psect	rparam
 24166  0000                     pclatu	equ	0xFFB
 24167                           pclath	equ	0xFFA
 24168                           tblptru	equ	0xFF8
 24169                           tblptrh	equ	0xFF7
 24170                           tblptrl	equ	0xFF6
 24171                           tablat	equ	0xFF5
 24172                           prodh	equ	0xFF4
 24173                           prodl	equ	0xFF3
 24174                           intcon	equ	0xFF2
 24175                           intcon2	equ	0xFF1
 24176                           intcon3	equ	0xFF0
 24177                           indf0	equ	0xFEF
 24178                           postinc0	equ	0xFEE
 24179                           fsr0h	equ	0xFEA
 24180                           fsr0l	equ	0xFE9
 24181                           wreg	equ	0xFE8
 24182                           postdec1	equ	0xFE5
 24183                           fsr1h	equ	0xFE2
 24184                           fsr1l	equ	0xFE1
 24185                           indf2	equ	0xFDF
 24186                           postinc2	equ	0xFDE
 24187                           postdec2	equ	0xFDD
 24188                           fsr2h	equ	0xFDA
 24189                           fsr2l	equ	0xFD9
 24190                           status	equ	0xFD8
 24191                           
 24192                           	psect	temp
 24193  00007E                     btemp:
 24194                           	opt stack 0
 24195  00007E                     	ds	1
 24196  0000                     int$flags	set	btemp
 24197                           pclatu	equ	0xFFB
 24198                           pclath	equ	0xFFA
 24199                           tblptru	equ	0xFF8
 24200                           tblptrh	equ	0xFF7
 24201                           tblptrl	equ	0xFF6
 24202                           tablat	equ	0xFF5
 24203                           prodh	equ	0xFF4
 24204                           prodl	equ	0xFF3
 24205                           intcon	equ	0xFF2
 24206                           intcon2	equ	0xFF1
 24207                           intcon3	equ	0xFF0
 24208                           indf0	equ	0xFEF
 24209                           postinc0	equ	0xFEE
 24210                           fsr0h	equ	0xFEA
 24211                           fsr0l	equ	0xFE9
 24212                           wreg	equ	0xFE8
 24213                           postdec1	equ	0xFE5
 24214                           fsr1h	equ	0xFE2
 24215                           fsr1l	equ	0xFE1
 24216                           indf2	equ	0xFDF
 24217                           postinc2	equ	0xFDE
 24218                           postdec2	equ	0xFDD
 24219                           fsr2h	equ	0xFDA
 24220                           fsr2l	equ	0xFD9
 24221                           status	equ	0xFD8


Data Sizes:
    Strings     1303
    Constant    27
    Data        8
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_127(CODE[17]), STR_126(CODE[17]), STR_125(CODE[18]), STR_124(CODE[18]), 
		 -> STR_123(CODE[18]), STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[18]), 
		 -> STR_119(CODE[17]), STR_118(CODE[17]), STR_117(CODE[3]), STR_116(CODE[15]), 
		 -> STR_115(CODE[3]), STR_114(CODE[15]), STR_113(CODE[11]), STR_112(CODE[17]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestDC->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  211795
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22911
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17591
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11414
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10667
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23224
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22310
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46200
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13339
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  106933
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestDC
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9083
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9040
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8971
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15351
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9175
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19245
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9155
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8836
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Apr 07 17:22:49 2017

                                    _i 013D                     i2_I2C_Master_Start 5486  
                   i2_I2C_Master_Write 545C                                     l66 53F4  
                                   _ID 2C90                       _f_panning_to_bin 0063  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ID@i 0084                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 00E2                                    l183 00E6  
                                  l188 0102                                    l616 2514  
                                  l803 152E                                    l813 1628  
                                  l805 1540                                    l830 2E38  
                                  l806 1554                                    l807 1568  
                                  l808 157C                                    l809 1592  
                                  l497 427A                                    l834 2EEA  
                                  l770 1262                                    l827 2DFA  
                                  l828 2E14                                    l780 131C  
                                  l829 2E52                                    l791 142A  
                                  l783 1356                                    l788 13F0  
                                  l797 15DC                                    l886 4778  
                         __CFG_CPB$OFF 000000                                    _PR2 000FCB  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001              __end_of_updateServoStates 3946  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _arm 3E36                                    _log 00F2  
                                  _sel 00FD                                    _var 0145  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3ACA  
                  _log_count_can_w_lab 0141                             i2_delay_ms 5390  
      __end_of_change_state_to_menu_11 50A0        __end_of_change_state_to_menu_12 4EE0  
      __end_of_change_state_to_menu_22 4EA8        __end_of_change_state_to_menu_23 5070  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5190        __end_of_change_state_to_logs_12 5160  
      __end_of_change_state_to_logs_22 5130        __end_of_change_state_to_logs_23 51EC  
      __end_of_change_state_to_logs_33 5100        __end_of_change_state_to_logs_34 50D0  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1200 4164                                   l1203 4168  
                                 l1212 21C2                                   l1302 4C42  
                                 l1072 3F5E                                   l1209 21BE  
                                 l1330 311C                                   l1242 09EE  
                                 l1323 313C                                   l1235 0944  
                                 l1308 4C52                                   l1332 3136  
                                 l1404 3F00                                   l1180 3D96  
                                 l1245 0A54                                   l1085 53D6  
                                 l1326 30D8                                   l1246 0AA2  
                                 l1238 0948                                   l1094 3BF8  
                                 l1247 0B08                                   l1407 3F36  
                                 l1272 0EB0                                   l1248 0B56  
                                 l1441 187C                                   l1361 480E  
                                 l1177 3D76                                   l1354 47FE  
                                 l1284 104A                                   l1383 3A68  
                                 l1384 3A82                                   l1289 1120  
                                 l1378 3A1C                                   l1395 3EAA  
                                 ?_arm 0001                                   l1399 3EE0  
                                 l1835 44C4                                   l6201 4B5C  
                                 l6121 522C                                   l6203 4B62  
                                 l6123 523E                                   l7003 491C  
                                 l7101 46A6                                   l6207 4B86  
                                 l1888 48AC                                   l6321 166A  
                                 l6145 51B6                                   l1898 4B94  
                                 l6163 5264                                   l6403 1910  
                                 l6331 16A8                                   l6315 1644  
                                 l8011 0E70                                   l6181 4868  
                                 l6421 198E                                   l6413 196A  
                                 l6325 1674                                   l8101 1032  
                                 l8021 0E98                                   l6191 489E  
                                 l6183 486E                                   l6415 1974  
                                 l6351 1768                                   l6319 1658  
                                 l8015 0E88                                   l8007 0E66  
                                 l6503 4448                                   l6433 19D0  
                                 l6409 1932                                   l6361 17E0  
                                 l8121 109A                                   l8017 0E8E  
                                 l6505 4458                                   l6179 485C  
                                 l6443 1A42                                   l6427 19AA  
                                 l6363 17F8                                   l6347 1756  
                                 l6339 1724                                   l8131 10C2  
                                 l8043 0F1A                                   l8035 0EF8  
                                 l8211 3F28                                   l6451 4EF6  
                                 l6515 44B2                                   l6507 445E  
                                 l7091 4664                                   l7307 1220  
                                 l6429 19B6                                   l6437 19E4  
                                 l6357 17CE                                   l6349 1762  
                                 l6373 1842                                   l6445 1A4E  
                                 l8125 10A4                                   l8061 0F7C  
                                 l8053 0F42                                   l8045 0F20  
                                 l8205 3EE6                                   l6461 4704  
                                 l7421 14A8                                   l7413 146A  
                                 l7333 12A6                                   l7317 126A  
                                 l6199 4B50                                   l6439 19EA  
                                 l6391 18D4                                   l6367 1824  
                                 l6359 17DA                                   l8135 10CC  
                                 l8071 0FA4                                   l8039 0F02  
                                 l6711 2492                                   l7095 467A  
                                 _ADIE 007CEE                                   l6385 18B4  
                                 l6369 183C                                   l8161 114A  
                                 l8145 110A                                   l8129 10BC  
                                 l8065 0F86                                   l8049 0F2A  
                                 l6457 46EE                                   l6449 4EEA  
                                 l6721 255A                                   l7601 4056  
                                 l7409 1444                                   l7361 1340  
                                 l6491 4796                                   l8307 30A0  
                                 l8171 1172                                   l8155 113A  
                                 l8139 10E4                                   l8091 100A  
                                 l8075 0FAE                                   l6467 4724  
                                 l6731 25F0                                   l6723 2578  
                                 l7603 4070                                   l7611 40D2  
                                 l7523 2D76                                   l7371 1370  
                                 l6389 18CE                                   l6485 475C  
                                 l8333 3106                                   l8165 1162  
                                 l8157 1140                                   l8069 0F9E  
                                 l9301 3DD8                                   l6733 260E  
                                 l6725 2596                                   l6717 251E  
                                 l7605 408A                                   l7541 2DC0  
                                 l7437 150C                                   l7349 1306  
                                 l8319 30C2                                   l8175 118A  
                                 l8167 1168                                   l8095 1022  
                                 l8087 1000                                   l8079 0FC6  
                                 l8191 3E84                                   l9303 3E2A  
                                 l8511 42D2                                   l6735 262C  
                                 l6727 25B4                                   l6719 253C  
                                 l6743 2686                                   l9223 3B16  
                                 l7535 2DAE                                   l7527 2D86  
                                 l7439 1516                                   l7359 1336  
                                 l8329 30F2                                   l8257 4836  
                                 l8097 1028                                   l7801 09DA  
                                 l8521 4302                                   l8505 42BC  
                                 l6737 264A                                   l6729 25D2  
                                 l6745 26E4                                   l9225 3B2A  
                                 l7609 40A4                                   l7561 2E22  
                                 l7715 235C                                   l6739 2668  
                                 l6931 3FCA                                   l7539 2DBE  
                                 l7467 159E                                   l7475 15E4  
                                 l7387 13DA                                   l8453 39EA  
                                 l8269 2F2A                                   l7709 231A  
                                 l8517 42F0                                   l8533 4340  
                                 l7549 2DE4                                   l7469 15D4  
                                 l7397 140A                                   l8471 3A2E  
                                 l8287 2FE2                                   l7911 0C78  
                                 l7903 0C56                                   l8199 3ED2  
                                 l7751 2456                                   l7735 23D8  
                                 l7727 23A8                                   l9263 3D32  
                                 l8519 42FC                                   l8711 0258  
                                 l6943 4002                                   l6935 3FD4  
                                 l7559 2E18                                   l7487 161C  
                                 l7399 1414                                   l9503 427C  
                                 l8449 39BA                                   l8289 2FE8  
                                 l7921 0CA0                                   l7913 0C7E  
                                 l9281 3DA2                                   l8537 4354  
                                 l8529 4332                                   l8561 45D2  
                                 l8553 45AC                                   l8801 0578  
                                 l8721 0282                                   l8641 00FE  
                                 l9249 3BB2                                   l6953 5274  
                                 l7585 2EA8                                   l7593 2EEC  
                                 l7489 162A                                   l8491 3A94  
                                 l7907 0C60                                   l7747 2420  
                                 l7739 240E                                   l9291 3DC0  
                                 l9283 3DA8                                   l8715 0270  
                                 l8707 024E                                   l8651 013A  
                                 l6947 400C                                   l6939 3FEC  
                                 l8477 3A48                                   l8469 3A1E  
                                 l7933 0CE4                                   l7917 0C88  
                                 l9293 3DC6                                   l9285 3DAE  
                                 l8573 4618                                   l8565 45F6  
                                 l8557 45C0                                   l8549 459C  
                                 l8901 07B6                                   l8821 063E  
                                 l8725 028C                                   l6957 528A  
                                 l6885 44E4                                   l8479 3A52  
                                 l8495 3AC4                                   l7943 0D0C  
                                 l7791 09B2                                   l7679 2212  
                                 l9295 3DCC                                   l9287 3DB4  
                                 l9279 3D9C                                   l8559 45CC  
                                 l8751 0350                                   l8663 016E  
                                 l8655 0144                                   l8647 0128  
                                 l7599 403C                                   l6983 48C4  
                                 l6895 4570                                   l8489 3A84  
                                 l7937 0CFC                                   l7929 0CDA  
                                 l7881 0BDC                                   l7793 09B8  
                                 l7697 22CA                                   l9297 3DD2  
                                 l9289 3DBA                                   l8569 4604  
                                 l8905 07C0                                   l8825 0648  
                                 l8761 03E6                                   l8753 036E  
                                 l8745 02F6                                   l8729 02A4  
                                 l6889 44FA                                   l9481 423C  
                                 l7963 0D80                                   l7955 0D5E  
                                 l7947 0D24                                   l7939 0D02  
                                 l7891 0C04                                   l8923 080C  
                                 l8915 07EA                                   l8843 0694  
                                 l8835 0672                                   l8763 0404  
                                 l8755 038C                                   l8747 0314  
                                 l8683 01D6                                   l8659 015C  
                                 l6987 48DA                                   l7981 0DE2  
                                 l7973 0DA8                                   l7965 0D86  
                                 l7885 0BF4                                   l7877 0BD2  
                                 l7797 09C2                                   l8941 086A  
                                 l8909 07D8                                   l8861 06FA  
                                 l8829 0660                                   l8765 0422  
                                 l8757 03AA                                   l8749 0332  
                                 l8773 047C                                   l8677 01C6  
                                 l8693 01FC                                   l9485 424C  
                                 l7991 0E0A                                   l7959 0D68  
                                 l7895 0C1C                                   l7887 0BFA  
                                 l8919 07F4                                   l8839 067C  
                                 l8783 052C                                   l8767 0440  
                                 l8759 03C8                                   l8775 04E0  
                                 l8687 01EE                                   l8679 01CC  
                                 l6999 4904                                   l9487 4252  
                                 l9479 4226                                   l7985 0DEC  
                                 l7969 0D90                                   l8945 0874  
                                 l8865 0704                                   l8793 0556  
                                 l8769 045E                                   l9497 4270  
                                 l9489 4258                                   l7995 0E14  
                                 l8963 08C0                                   l8955 089E  
                                 l8883 0750                                   l8875 072E  
                                 l8787 0544                                   l8779 0522  
                                 l9499 4276                                   l7989 0E04  
                                 l8949 088C                                   l8869 071C  
                                 l8797 0560                                   l7999 0E2C  
                                 l8959 08A8                                   l8879 0738  
                                 l8967 08CC                                   STR_1 FB81  
                                 STR_2 FF27                                   STR_3 FB6F  
                                 STR_4 FE4A                                   STR_5 FB6F  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u7000 3EF8                                   u5400 2514  
                                 u6200 2EB4                                   _PEIE 007F96  
                                 u7100 2F6C                                   u6220 2EEA  
                                 u6060 2CE0                                   u4700 4D94  
                                 u7110 2F6E                                   u4710 4DDE  
                                 u6070 2D36                                   u4711 4DDA  
                                 u4720 4DE0                                   u6320 23FC  
                                 u4810 181A                                   u7130 302A  
                                 u4490 51B4                                   u6218 2EB8  
                                 u7140 302C                                   u6420 09EE  
                                 u6068 2CE4                                   _RCEN 007E2B  
                                 u7301 3A12                                   u7310 3A14  
                                 u6350 2444                                   u6078 2D3A  
                                 u7240 397C                                   u6440 0AA2  
                                 u6328 2400                                   u6280 2254  
                                 u4817 1810                                   u5385 4BCE  
                                 u4770 17A2                                   u7410 3AB2  
                                 u7250 39D8                                   u6290 2256  
                                 u4690 4D92                                   u6460 0B56  
                                 u6358 2448                                   u5750 122C  
                                 u7351 3A3E                                   u9007 14C2  
                                 u7360 3A40                                   u7248 3980  
                                 u4777 1798                                   u9017 14FA  
                                 i2l66 5408                                   u7418 3AB6  
                                 u7258 39DC                                   u5770 1262  
                                 u9107 1580                                   u9027 1532  
                                 u9117 158A                                   u9037 153A  
                                 u5950 1488                                   u9207 2DFE  
                                 u9127 1596                                   u9047 1544  
                                 u5768 1230                                   u9217 2E08  
                                 u9137 15FE                                   u9057 154E  
                                 u9307 4E24                                   u9227 2E3C  
                                 u9147 4F6A                                   u9067 1558  
                                 u6940 3EA0                                   u9317 002A  
                                 u9237 2E46                                   u9157 48E2  
                                 u9077 1562                                   u6950 3EA2  
                                 u9407 0534                                   u9327 0114  
                                 u9247 2E6C                                   u9167 2CAA  
                                 u9087 156C                                   u5968 148C  
                                 u9417 0568                                   u9337 014C  
                                 u9257 5280                                   u9177 2CC6  
                                 u9097 1574                                   u8490 3BF8  
                                 u9507 07FC                                   u9427 0592  
                                 u9347 0188                                   u9267 3F80  
                                 u9187 2CFE                                   u9517 0826  
                                 u9437 0650                                   u9357 01DE  
                                 u9277 3FDC                                   u9197 2D1C  
                                 u6990 3EF6                                   u9607 22BE  
                                 u9527 087C                                   u9447 0684  
                                 u9367 020A                                   u9287 4014  
                                 u9617 22DE                                   u9537 08B0  
                                 u9457 06AE                                   u9377 0260  
                                 u9297 4DF0                                   u9707 3F0A  
                                 u9627 230C                                   u9547 3D40  
                                 u9467 070C                                   u9387 0294  
                                 u8907 1328                                   u9717 3F1E  
                                 u9637 2350                                   u9557 216E  
                                 u9477 0740                                   u9397 02BE  
                                 u8917 135A                                   u9807 0A64  
                                 u9727 4114                                   u9647 236E  
                                 u9567 21B2                                   u9487 076A  
                                 u8927 1364                                   u9817 0A82  
                                 u9737 4158                                   u9657 239C  
                                 u9577 21D4                                   u9497 07C8  
                                 u8937 137E                                   u9907 0CEC  
                                 u9827 0AB2                                   u9747 417A  
                                 u9667 23B6                                   u9587 2202  
                                 u8947 13A8                                   u9917 0D14  
                                 u9837 0B18                                   u9757 08F4  
                                 u9677 3E44                                   u9597 226A  
                                 u8957 13F4                                   u8877 11B0  
                                 u9927 0D70                                   u9847 0B36  
                                 u9767 0938                                   u9687 3EB4  
                                 u8967 13FC                                   u8887 12D4  
                                 u9937 0D98                                   u9857 0B66  
                                 u9777 095A                                   u9697 3EC8  
                                 u8977 142E                                   u8897 1320  
                                 u9947 0DF4                                   u9867 0BE4  
                                 u9787 09CA                                   u8987 1438  
                                 u9957 0E1C                                   u9877 0C0C  
                                 u9797 09FE                                   u8997 1452  
                                 u9967 0E78                                   u9887 0C68  
                                 u9977 0EA0                                   u9897 0C90  
                                 u9987 0F0A                                   _RSEN 007E29  
                                 u9997 0F32                            _stopSignals 53AC  
                                 _Test 3D30                                   _back 005B  
                                 _main 41DC                                   _down 005D  
                                 _keys FACD                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 532E  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 013F  
                      __end_ofi2_putch 5446                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 3140                            i2_lcdNibble 4C5A  
                      __end_of_Loading 1636                   __end_of_actuatorTest 1192  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 4024  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 435E  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FAE8                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 4622                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FAE8  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC4E                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB00                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC81                                  STR_92 FC5F  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FC92  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC70                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FBE8  
                                STR_98 FBD7                                  STR_99 FBB5  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 44D6           i2updateServoPosition@time_us 0001  
                                u10007 0F8E                                  u10017 0FB6  
                                u10107 117A                                  u10027 1012  
                                u10117 47C8                                  u10037 103A  
                                u10207 30E4                                  u10127 4818  
                                u10047 105C                                  u10217 3120  
                                u10137 482C                                  u10057 10AC  
                                u10307 1BC6                                  u10227 312A  
                                u10147 2F06                                  u10067 10D4  
                                u10317 1BFA                                  u10237 5234  
                                u10157 2F82                                  u10077 1124  
                                u10407 4AB4                                  u10327 1C2C  
                                u10247 4C0C                                  u10167 2FD6  
                                u10087 112E                                  _T0CON 000FD5  
                                u10417 3954                                  u10337 1C78  
                                u10257 1A7C                                  u10177 3040  
                                u10097 1152                                  u10427 3A6C  
                                u10347 1CC4                                  u10267 1AC8  
                                u10187 3094                        ___awdiv@divisor 0088  
                                u10437 3A76                                  u10357 1CF8  
                                u10277 1B14                                  u10197 30DC  
                                u10447 4A2A                                  u10367 1D2A  
                                u10287 1B48                                  _T1CON 000FCD  
                                u10457 4A34                                  u10377 1D76  
                                u10297 1B7A                                  u10467 4A60  
                                u10387 1DAA                                  u10477 4A6A  
                                u10397 1DDC                                  _T2CON 000FCA  
                                _T3CON 000FB1                        __end_of___lwdiv 48B6  
                      __end_of___lwmod 4B9E                                  i2l263 29E4  
                                i2l616 31CE                                  i2l865 2BB6  
                      ___awdiv@counter 008A                                  i2l886 49D0  
                                i2l998 3464                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1A6E  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 543A  
                      __end_of_handler 3592                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 5244                        __end_of_initLCD 4E2E  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                                  _getIR 48B6  
                      __end_of_loadRTC 46AE                        __end_of_readMAG 4DE8  
                      __end_of_dpowers FAE8                                  _first 0139  
                                _enter 005F                                  arm@on 00AC  
                      __end_of_isdigit 526E                                  _input 007D  
                                _putch 541A                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 52E4  
                     __end_ofi2_getRTC 499A                    _log_count_pop_w_tab 0067  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 2160  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4FB0                            Loading@addr 00B3  
                     _count_can_no_lab 0123                   printSortTimer@i_1192 0047  
                 __size_of_EEPROM_read 0018                        __initialization 4D02  
                         __end_of_Test 3E36                     __size_ofi2_lcdInst 000C  
                         __end_of_main 42A0                           __end_of_keys FADE  
                         __end_of_sort 5350                             i2printf@ap 0020  
                           i2printf@cp 001E                          PusherTest@res 00AD  
                   __size_ofi2_isdigit 001E                       PusherTest@i_1775 00B3  
                          _BlockerTest 3946                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003             __size_of_updateServoStates 01C8  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC1B  
                               STR_101 FC2C                                 STR_110 FCB4  
                               STR_102 FB93                                 STR_103 FE3A  
                               STR_111 FB15                                 STR_112 FBF9  
                               STR_104 FBC6                                 STR_120 FB39  
                               STR_113 FF71                                 STR_105 FBA4  
                               STR_121 FB27                                 STR_106 FBC6  
                               STR_114 FE5A                                 STR_122 FB5D  
                               _ADRESH 000FC4                                 STR_115 FE16  
                               STR_107 FE96                                 STR_123 FB4B  
                               STR_116 FE5A                                 STR_124 FB5D  
                               STR_108 FE78                                 _EEADRH 000FAA  
                               STR_117 FE16                                 STR_125 FB5D  
                               STR_109 FE69                                 STR_126 FC0A  
                               STR_118 FC0A                                 _ADRESL 000FC3  
                               STR_127 FCA3                                 STR_119 FC3D  
                               STR_128 FFB6                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 5010              i2_change_state_to_menu_22 4FE0  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1003 3504  
                               i2l1007 3536                                 i2l1009 3556  
                               i2l1085 53EC                                 i2l1441 1FCC  
                               i2l6231 5304                                 i2l1888 4CF8  
                               i2l7201 3682                                 i2l1898 4E66  
                               i2l7211 36AC                                 i2l7051 31EE  
                               i2l7043 316C                                 i2l7221 36CA  
                               i2l7061 325C                                 i2l7053 3204  
                               i2l6255 5388                                 i2l7223 36CE  
                               i2l7207 3690                                 i2l7071 32CA  
                               i2l7063 3272                                 i2l7055 321A  
                               i2l6265 4CC6                                 i2l6601 1F44  
                               i2l7241 36FE                                 i2l7217 36B6  
                               i2l7153 35D0                                 i2l7145 35B6  
                               i2l7065 3288                                 i2l7057 3230  
                               i2l7049 31D8                                 i2l6531 4970  
                               i2l6267 4CCE                                 i2l6603 1F56  
                               i2l7235 36F0                                 i2l7227 36D8  
                               i2l7171 360E                                 i2l7155 35E0  
                               i2l7163 35EE                                 i2l7067 329E  
                               i2l7059 3246                                 i2l7075 32E0  
                               i2l9011 27B2                                 i2l6277 4CEE  
                               i2l6269 4CD2                                 i2l6293 4E5C  
                               i2l6285 4E3C                                 i2l6613 1F96  
                               i2l7253 3734                                 i2l7245 3710  
                               i2l7173 3614                                 i2l7181 3626  
                               i2l7157 35E4                                 i2l7069 32B4  
                               i2l7077 333A                                 i2l6527 4960  
                               i2l6287 4E44                                 i2l6631 2016  
                               i2l6607 1F80                                 i2l7175 361A  
                               i2l7167 3602                                 i2l7263 3750  
                               i2l9111 293A                                 i2l9103 2916  
                               i2l9031 27FA                                 i2l9023 27DE  
                               i2l9015 27C0                                 i2l9007 27A4  
                               i2l6537 498A                                 i2l6289 4E48  
                               i2l6625 1FFA                                 i2l6609 1F92  
                               i2l6561 1E1A                                 i2l7257 3746  
                               i2l7249 3722                                 i2l7193 366A  
                               i2l7177 3620                                 i2l7169 3608  
                               i2l6643 2048                                 i2l6571 1E52  
                               i2l6555 1DFC                                 i2l9123 296C  
                               i2l9115 2948                                 i2l9107 292C  
                               i2l9051 2848                                 i2l9043 282C  
                               i2l9035 2808                                 i2l9027 27EC  
                               i2l9019 27D0                                 i2l6661 20A4  
                               i2l6653 2086                                 i2l6629 2012  
                               i2l6565 1E20                                 i2l6655 208E  
                               i2l6591 1EEA                                 i2l6559 1E0C  
                               i2l9119 2956                                 i2l9071 2896  
                               i2l9063 287A                                 i2l9055 2856  
                               i2l9047 283A                                 i2l9039 2816  
                               i2l6673 20D6                                 i2l6649 2062  
                               i2l9313 29F4                                 i2l9129 297A  
                               i2l9401 37FC                                 i2l8603 5394  
                               i2l6683 213C                                 i2l6667 20BA  
                               i2l6587 1EDC                                 i2l6579 1EB4  
                               i2l9323 2A5E                                 i2l6691 4F90  
                               i2l9091 28EC                                 i2l9083 28C8  
                               i2l9075 28AC                                 i2l9067 2888  
                               i2l9059 286C                                 i2l9411 385A  
                               i2l6669 20C2                                 i2l6677 20E8  
                               i2l6597 1F34                                 i2l6589 1EE6  
                               i2l6685 2144                                 i2l9317 2A04  
                               i2l6861 3CD4                                 i2l9421 3898  
                               i2l8607 53A4                                 i2l6679 20EE  
                               i2l6599 1F3E                                 i2l9335 2B2C  
                               i2l9095 28FA                                 i2l9087 28D6  
                               i2l9079 28BA                                 i2l9415 3872  
                               i2l9407 3806                                 i2l9361 2BF2  
                               i2l6873 3D18                                 i2l6865 3CE4  
                               i2l6689 4F88                                 i2l9441 3914  
                               i2l9409 3850                                 i2l9521 33F2  
                               i2l9347 2B84                                 i2l9355 2BB8  
                               i2l9099 2908                                 i2l9427 38BE  
                               i2l9515 33E2                                 i2l9531 341C  
                               i2l9381 379C                                 i2l9621 3554  
                               i2l9517 33E6                                 i2l9525 33FA  
                               i2l9359 2BEC                                 i2l9527 3412  
                               i2l9393 37D2                                 i2l9385 37B2  
                               i2l9545 3438                                 i2l8595 49EA  
                               i2l9387 37BC                                 i2l8589 49B8  
                               i2l9573 3490                                 i2l9399 37E8  
                               i2l9567 3482                                 i2l8981 2758  
                               i2l9589 34DC                                 i2l8991 277A  
                               i2l8983 275E                                 i2l9599 350A  
                               i2l8995 2788                                 i2l8987 276C  
                               i2l8999 2796                _f_most_recent_sort_time 0137  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5296  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 532E                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4106  
                               ___wmul 4F16                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4F4C  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 46AE                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5372  
                               _initUI 4FB0                                 _readIR 4D50  
                               _logRun 3ACA                                 getIR@i 0087  
                               clear_0 4D28                                 clear_1 4D34  
                               clear_2 4D40                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4BFE  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1636                              ??_handler 004B  
              __size_of_initGlobalVars 00BC                           ?_retrieveLog 0007  
                               _strcpy 4EE0                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 52BE  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5296                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 4D02                       __end_of_printRTC 2728  
                         __mediumconst FACC                      __end_ofi2___lwmod 4E70  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 0065  
                __end_of_algorithmTest 41DC                      __end_ofi2_lcdInst 5452  
                           _PusherTest 2EF8                      __end_ofi2_isdigit 5390  
                           __accesstop 0080                __end_of__initialization 4D46  
                        ?_inputHandler 002A                  _most_recent_sort_time 0069  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 53DE  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 5490                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 5466                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 4928                            i2printRTC@i 0041  
                        _initSortTimer 44D6            __end_of_updateServoPosition 47BA  
                        __end_of_putch 542A                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2EF8  
                           __end_of_UI 08DA                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 5218          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 51EC                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08DA                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 4A0A                           _EEPROM_write 3F3C  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3239 0147                      __end_of_SpeedTest 483E  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2402 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10051 3834  
                              i2l10053 383E                                i2l10071 363E  
                              i2l10063 2998                                i2l10055 3848  
                              i2l10073 365A                                i2l10065 29BA  
                              i2l10057 392C                                i2l10049 382A  
                              i2l10067 29D6                                i2l10059 393C  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00EA                                i2_putch 543A  
                            ?_initTime 0080                        _f_loadingNewCan 00F0  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 4A72  
                              _Loading 1192            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 42A0                                ___awmod 4580  
                           _initServos 4A72                                ___lldiv 441A  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 483E                                ___lwmod 4B3C  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 4D02                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 435E  
                              _lcdInst 542A                                _handler 0008  
                              __ptext0 41DC                                __ptext1 53AC  
                              __ptext2 532E                                __ptext3 1192  
                              __ptext4 44D6                                __ptext5 435E  
                              __ptext6 4F4C                                __ptext7 48B6  
                              __ptext8 4D50                                __ptext9 2C90  
                      __size_of_printf 0438                                _readADC 5218  
                      __size_of_strcpy 0036                                _initLCD 4DE8  
                              _cur_can 012B                                _loadRTC 4622  
                              _readMAG 4D9C                                _dpowers FADE  
                   actuatorTest@i_1720 00AD                     actuatorTest@i_1730 00B0  
                   actuatorTest@i_1731 00B1                     actuatorTest@i_1740 00B7  
                   actuatorTest@i_1733 00B2                     actuatorTest@i_1750 00BD  
                   actuatorTest@i_1742 00B8                     actuatorTest@i_1734 00B3  
                   actuatorTest@i_1743 00B9                     actuatorTest@i_1727 00AE  
                   actuatorTest@i_1760 00C3                     actuatorTest@i_1752 00BE  
                   actuatorTest@i_1736 00B4                     actuatorTest@i_1728 00AF  
                   actuatorTest@i_1753 00BF                     actuatorTest@i_1737 00B5  
                   actuatorTest@i_1746 00BA                     actuatorTest@i_1747 00BB  
                   actuatorTest@i_1739 00B6                           __size_of_arm 0106  
                   actuatorTest@i_1756 00C0                     actuatorTest@i_1757 00C1  
                   actuatorTest@i_1749 00BC                     actuatorTest@i_1759 00C2  
                              _isdigit 5244                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0122  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 4024                         __pintcode_body 3376  
                 end_of_initialization 4D46                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3376                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1050_47 4C72                              i2u1051_47 4C7C  
                            i2u1052_47 4C9E                              i2u1053_47 4CA8  
                            i2u1054_47 539C                              i2u1048_47 35D6  
                            i2u1049_47 2B5E              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 53AC                 __end_of_initGlobalVars 441A  
                           _sensorTest 2160                    __size_of_PusherTest 0248  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 377E  
                         ??_BothServos 00AB                  __end_of_machineConfig 4B3C  
                           _updateMenu 2728                      i2_I2C_Master_Read 52E4  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 5408  
                    i2_I2C_Master_Stop 547E                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                              i2___lwdiv 4CB0  
                            i2___lwmod 4E2E                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3376                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 5446                          Loading@i_1154 00B6  
                        Loading@i_1163 00B8                          Loading@i_1165 00BA  
                        Loading@i_1166 00BC                          Loading@i_1168 00BE  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5372                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DF2                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 53DE                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4F4C  
                       __end_of_getMAG 4F7E                         __end_of_getRTC 4734  
                 __size_ofi2_lcdNibble 0056                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 4FE0                         __end_of_readIR 4D9C  
                       __end_of_logRun 3C0E                       i2___wmul@product 0005  
                       __end_of_printf 1A6E                           i2printf@flag 0026  
                       __end_of_strcpy 4F16              __end_ofi2_I2C_Master_Read 530A  
            __end_ofi2_I2C_Master_Wait 541A                           i2printf@prec 001D  
                  start_initialization 4D02              __end_ofi2_I2C_Master_Stop 5486  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                            __end_of_arm 3F3C  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1433 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 47BA  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 0147  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1180 0088                               ID@i_1179 0086  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2534 0043                   __size_of_BlockerTest 0184  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0086  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2044 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0066  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                     PusherTest@res_1771 00AF  
                      _count_pop_w_tab 0129                            _EEPROM_read 53C6  
                     _I2C_Master_Start 5476                     __end_of_PortTestDC 4C5A  
                            _f_lastCan 00EE                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5452  
                    __size_of_initTime 0022                  i2_updateServoPosition 499A  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FACC                              _lcdNibble 4A0A  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 3140                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 4106  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0268  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 548E             __end_ofi2_I2C_Master_Write 5466  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 3592                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u514_40 1F18  
                             i2u514_47 1F0E                               _PIR2bits 000FA1  
                             i2u518_40 1F78                               i2u518_47 1F6E  
                             i2u459_40 5302                               i2u559_40 31CE  
                             i2u860_40 2BB6                               i2u858_40 2B8E  
                             i2u859_48 2B90                    __size_of_updateMenu 02C0  
                       _log_completion 00F4                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 52BE                          lcdNibble@data 0081  
                             i2_getRTC 4928                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00C2                               Loading@j 00C0  
                             i2_printf 1DF2                               i2_strcpy 4F7E  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4D16                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 53F4  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 04A4                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4580  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 5070  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4EA8  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4E70  
              _change_state_to_menu_23 5040                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5160                _change_state_to_logs_12 5130  
              _change_state_to_logs_22 5100                _change_state_to_logs_23 51BE  
              _change_state_to_logs_33 50D0                _change_state_to_logs_34 50A0  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 358A                             _EEPROMTest 548E  
                      _I2C_Master_Init 4B9E                       __size_of_readADC 002C  
                      _I2C_Master_Read 5190                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 53F4  
                      _I2C_Master_Stop 546E                       __size_of_isdigit 002A  
                             _delay_ms 526E                         _printSortTimer 29E8  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3D30                               __ptext10 526E  
                             __ptext11 4024                               __ptext20 51EC  
                             __ptext12 4AD8                               __ptext21 5350  
                             __ptext13 3ACA                               __ptext30 5190  
                             __ptext22 4DE8                               __ptext14 3F3C  
                             __ptext31 53F4                               __ptext23 0012  
                             __ptext15 53C6                               __ptext40 4106  
                             __ptext32 4E70                               __ptext24 245E  
                             __ptext16 4FB0                               __ptext41 08DA  
                             __ptext33 4EA8                               __ptext25 4EE0  
                             __ptext17 4622                               __ptext50 3946  
                             __ptext42 47BA                               __ptext34 4580  
                             __ptext26 46AE                               __ptext18 4B9E  
                             __ptext51 1636                               __ptext43 2EF8  
                             __ptext35 42A0                               __ptext27 5452  
                             __ptext19 441A                               __ptext60 377E  
                             __ptext52 541A                               __ptext44 5218  
                             __ptext36 3D30                               __ptext28 546E  
                             __ptext61 499A                               __ptext53 5244  
                             __ptext45 4BFE                               __ptext37 2160  
                             __ptext29 5476                               __ptext70 5070  
                             __ptext62 2728                               __ptext54 4F16  
                             __ptext46 548E                               __ptext38 4D9C  
                             __ptext71 50A0                               __ptext63 5296  
                             __ptext55 4B3C                               __ptext47 1A6E  
                             __ptext39 3E36                               __ptext80 29E8  
                             __ptext72 50D0                               __ptext64 3140  
                             __ptext56 483E                               __ptext48 4A72  
                             __ptext81 1DF2                               __ptext73 51BE  
                             __ptext65 4F7E                               __ptext57 542A  
                             __ptext49 4734                               __ptext90 545C  
                             __ptext82 543A                               __ptext74 5100  
                             __ptext66 3592                               __ptext58 4A0A  
                             __ptext91 547E                               __ptext83 5372  
                             __ptext75 5130                               __ptext67 4FE0  
                             __ptext92 5486                               __ptext84 52BE  
                             __ptext76 5160                               __ptext68 5010  
                             __ptext93 52E4                               __ptext85 4E2E  
                             __ptext77 530A                               __ptext69 5040  
                             __ptext94 5408                               __ptext86 4CB0  
                             __ptext78 3C0E                               __ptext95 5390  
                             __ptext87 5446                               __ptext79 53DE  
                             __ptext88 4C5A                               __ptext89 4928  
                             _dispLogs 530A                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                         i2_isdigit$2044 0002  
                           strcpy@from 0082                     __end_of_initServos 4AD8  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5350                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4734  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 245E                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5040  
    __end_ofi2_change_state_to_menu_22 5010                               loadRTC@i 0096  
               __end_of_printSortTimer 2C90                              putch@data 0082  
             __end_of_I2C_Master_Start 547E                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 545C                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E8  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 245E                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 53C6              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 29E8  
              __end_of_I2C_Master_Init 4BFE                __end_of_I2C_Master_Read 51BE  
              __end_of_I2C_Master_Wait 5408                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5476                            lcdInst@data 0082  
                        printRTC@F3229 014B                           retrieveLog@i 000E  
                          _retrieveLog 3C0E                    __end_ofi2_lcdNibble 4CB0  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4AD8                        ___lwmod@counter 008B  
                    _updateServoStates 377E                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 0061                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
