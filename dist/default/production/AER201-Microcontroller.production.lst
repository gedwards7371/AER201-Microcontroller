

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 11 23:08:02 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.40
   123                           ; Generated 01/12/2016 GMT
   124                           ; 
   125                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4620 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataBANK1
   158  005EB0                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for UI@F3250
   162  005EB0  4D                 	db	77
   163  005EB1  4D                 	db	77
   164  005EB2  4D                 	db	77
   165  005EB3  00                 	db	0
   166                           
   167                           ;initializer for printRTC@F3240
   168  005EB4  4D                 	db	77
   169  005EB5  4D                 	db	77
   170  005EB6  4D                 	db	77
   171  005EB7  00                 	db	0
   172                           
   173                           	psect	mediumconst
   174  00FAAE                     __pmediumconst:
   175                           	opt stack 0
   176  00FAAE  00                 	db	0
   177  00FAAF                     _keys:
   178                           	opt stack 0
   179  00FAAF  31                 	db	49
   180  00FAB0  32                 	db	50
   181  00FAB1  33                 	db	51
   182  00FAB2  41                 	db	65
   183  00FAB3  34                 	db	52
   184  00FAB4  35                 	db	53
   185  00FAB5  36                 	db	54
   186  00FAB6  42                 	db	66
   187  00FAB7  37                 	db	55
   188  00FAB8  38                 	db	56
   189  00FAB9  39                 	db	57
   190  00FABA  43                 	db	67
   191  00FABB  2A                 	db	42
   192  00FABC  30                 	db	48
   193  00FABD  23                 	db	35
   194  00FABE  44                 	db	68
   195  00FABF  00                 	db	0
   196  00FAC0                     __end_of_keys:
   197                           	opt stack 0
   198  00FAC0                     _dpowers:
   199                           	opt stack 0
   200  00FAC0  0001               	dw	1
   201  00FAC2  000A               	dw	10
   202  00FAC4  0064               	dw	100
   203  00FAC6  03E8               	dw	1000
   204  00FAC8  2710               	dw	10000
   205  00FACA                     __end_of_dpowers:
   206                           	opt stack 0
   207  0000                     _ADCON0	set	4034
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON2	set	4032
   211  0000                     _ADRESH	set	4036
   212  0000                     _ADRESL	set	4035
   213  0000                     _CMCONbits	set	4020
   214  0000                     _CVRCON	set	4021
   215  0000                     _EEADR	set	4009
   216  0000                     _EEADRH	set	4010
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATA	set	3977
   222  0000                     _LATAbits	set	3977
   223  0000                     _LATB	set	3978
   224  0000                     _LATBbits	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _LATCbits	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATDbits	set	3980
   229  0000                     _LATE	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCTUNEbits	set	3995
   232  0000                     _PIR2bits	set	4001
   233  0000                     _PORTAbits	set	3968
   234  0000                     _PORTB	set	3969
   235  0000                     _PORTBbits	set	3969
   236  0000                     _PR2	set	4043
   237  0000                     _SSPADD	set	4040
   238  0000                     _SSPBUF	set	4041
   239  0000                     _SSPCON1	set	4038
   240  0000                     _SSPCON2	set	4037
   241  0000                     _SSPSTAT	set	4039
   242  0000                     _T0CON	set	4053
   243  0000                     _T1CON	set	4045
   244  0000                     _T2CON	set	4042
   245  0000                     _T3CON	set	4017
   246  0000                     _TMR0H	set	4055
   247  0000                     _TMR0L	set	4054
   248  0000                     _TMR1H	set	4047
   249  0000                     _TMR1L	set	4046
   250  0000                     _TMR3H	set	4019
   251  0000                     _TMR3L	set	4018
   252  0000                     _TRISA	set	3986
   253  0000                     _TRISB	set	3987
   254  0000                     _TRISC	set	3988
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISE	set	3990
   257  0000                     _ACKDT	set	32301
   258  0000                     _ACKEN	set	32300
   259  0000                     _ADIE	set	31982
   260  0000                     _INT1IE	set	32643
   261  0000                     _INT1IF	set	32640
   262  0000                     _PEIE	set	32662
   263  0000                     _PEN	set	32298
   264  0000                     _RCEN	set	32299
   265  0000                     _RSEN	set	32297
   266  0000                     _SEN	set	32296
   267  0000                     _TMR0IE	set	32661
   268  0000                     _TMR0IF	set	32658
   269  0000                     _TMR0ON	set	32431
   270  0000                     _TMR1IE	set	31976
   271  0000                     _TMR1IF	set	31984
   272  0000                     _TMR1ON	set	32360
   273  0000                     _TMR2IE	set	31977
   274  0000                     _TMR2IF	set	31985
   275  0000                     _TMR2ON	set	32338
   276  0000                     _TMR3IE	set	32001
   277  0000                     _TMR3IF	set	32009
   278  0000                     _TMR3ON	set	32136
   279  0000                     _TRISC3	set	31907
   280  0000                     _TRISC4	set	31908
   281  0000                     _nRBPU	set	32655
   282  00FACA                     STR_21:
   283  00FACA  25                 	db	37
   284  00FACB  30                 	db	48	;'0'
   285  00FACC  32                 	db	50	;'2'
   286  00FACD  64                 	db	100	;'d'
   287  00FACE  25                 	db	37
   288  00FACF  73                 	db	115	;'s'
   289  00FAD0  20                 	db	32
   290  00FAD1  7C                 	db	124
   291  00FAD2  20                 	db	32
   292  00FAD3  25                 	db	37
   293  00FAD4  30                 	db	48	;'0'
   294  00FAD5  32                 	db	50	;'2'
   295  00FAD6  64                 	db	100	;'d'
   296  00FAD7  3A                 	db	58	;':'
   297  00FAD8  25                 	db	37
   298  00FAD9  30                 	db	48	;'0'
   299  00FADA  32                 	db	50	;'2'
   300  00FADB  64                 	db	100	;'d'
   301  00FADC  3A                 	db	58	;':'
   302  00FADD  25                 	db	37
   303  00FADE  30                 	db	48	;'0'
   304  00FADF  32                 	db	50	;'2'
   305  00FAE0  64                 	db	100	;'d'
   306  00FAE1  00                 	db	0
   307  00FAE2                     STR_66:
   308  00FAE2  28                 	db	40
   309  00FAE3  64                 	db	100	;'d'
   310  00FAE4  61                 	db	97	;'a'
   311  00FAE5  74                 	db	116	;'t'
   312  00FAE6  61                 	db	97	;'a'
   313  00FAE7  3A                 	db	58	;':'
   314  00FAE8  20                 	db	32
   315  00FAE9  25                 	db	37
   316  00FAEA  75                 	db	117	;'u'
   317  00FAEB  2C                 	db	44
   318  00FAEC  20                 	db	32
   319  00FAED  61                 	db	97	;'a'
   320  00FAEE  64                 	db	100	;'d'
   321  00FAEF  64                 	db	100	;'d'
   322  00FAF0  72                 	db	114	;'r'
   323  00FAF1  3A                 	db	58	;':'
   324  00FAF2  20                 	db	32
   325  00FAF3  25                 	db	37
   326  00FAF4  75                 	db	117	;'u'
   327  00FAF5  29                 	db	41
   328  00FAF6  00                 	db	0
   329  00FAF7                     STR_111:
   330  00FAF7  44                 	db	68	;'D'
   331  00FAF8  20                 	db	32
   332  00FAF9  57                 	db	87	;'W'
   333  00FAFA  49                 	db	73	;'I'
   334  00FAFB  4C                 	db	76	;'L'
   335  00FAFC  4C                 	db	76	;'L'
   336  00FAFD  20                 	db	32
   337  00FAFE  52                 	db	82	;'R'
   338  00FAFF  45                 	db	69	;'E'
   339  00FB00  54                 	db	84	;'T'
   340  00FB01  55                 	db	85	;'U'
   341  00FB02  52                 	db	82	;'R'
   342  00FB03  4E                 	db	78	;'N'
   343  00FB04  20                 	db	32
   344  00FB05  20                 	db	32
   345  00FB06  20                 	db	32
   346  00FB07  20                 	db	32
   347  00FB08  00                 	db	0
   348  00FB09                     STR_119:
   349  00FB09  4F                 	db	79	;'O'
   350  00FB0A  54                 	db	84	;'T'
   351  00FB0B  48                 	db	72	;'H'
   352  00FB0C  45                 	db	69	;'E'
   353  00FB0D  52                 	db	82	;'R'
   354  00FB0E  20                 	db	32
   355  00FB0F  53                 	db	83	;'S'
   356  00FB10  45                 	db	69	;'E'
   357  00FB11  54                 	db	84	;'T'
   358  00FB12  53                 	db	83	;'S'
   359  00FB13  20                 	db	32
   360  00FB14  52                 	db	82	;'R'
   361  00FB15  41                 	db	65	;'A'
   362  00FB16  35                 	db	53	;'5'
   363  00FB17  20                 	db	32
   364  00FB18  20                 	db	32
   365  00FB19  20                 	db	32
   366  00FB1A  00                 	db	0
   367  00FB1B                     STR_118:
   368  00FB1B  53                 	db	83	;'S'
   369  00FB1C  3A                 	db	58	;':'
   370  00FB1D  20                 	db	32
   371  00FB1E  44                 	db	68	;'D'
   372  00FB1F  20                 	db	32
   373  00FB20  57                 	db	87	;'W'
   374  00FB21  49                 	db	73	;'I'
   375  00FB22  4C                 	db	76	;'L'
   376  00FB23  4C                 	db	76	;'L'
   377  00FB24  20                 	db	32
   378  00FB25  52                 	db	82	;'R'
   379  00FB26  45                 	db	69	;'E'
   380  00FB27  54                 	db	84	;'T'
   381  00FB28  55                 	db	85	;'U'
   382  00FB29  52                 	db	82	;'R'
   383  00FB2A  4E                 	db	78	;'N'
   384  00FB2B  20                 	db	32
   385  00FB2C  00                 	db	0
   386  00FB2D                     STR_121:
   387  00FB2D  4F                 	db	79	;'O'
   388  00FB2E  54                 	db	84	;'T'
   389  00FB2F  48                 	db	72	;'H'
   390  00FB30  45                 	db	69	;'E'
   391  00FB31  52                 	db	82	;'R'
   392  00FB32  3A                 	db	58	;':'
   393  00FB33  20                 	db	32
   394  00FB34  43                 	db	67	;'C'
   395  00FB35  41                 	db	65	;'A'
   396  00FB36  4D                 	db	77	;'M'
   397  00FB37  20                 	db	32
   398  00FB38  54                 	db	84	;'T'
   399  00FB39  4F                 	db	79	;'O'
   400  00FB3A  47                 	db	71	;'G'
   401  00FB3B  47                 	db	71	;'G'
   402  00FB3C  4C                 	db	76	;'L'
   403  00FB3D  45                 	db	69	;'E'
   404  00FB3E  00                 	db	0
   405  00FB3F                     STR_127:
   406  00FB3F  4F                 	db	79	;'O'
   407  00FB40  54                 	db	84	;'T'
   408  00FB41  48                 	db	72	;'H'
   409  00FB42  45                 	db	69	;'E'
   410  00FB43  52                 	db	82	;'R'
   411  00FB44  20                 	db	32
   412  00FB45  53                 	db	83	;'S'
   413  00FB46  45                 	db	69	;'E'
   414  00FB47  54                 	db	84	;'T'
   415  00FB48  53                 	db	83	;'S'
   416  00FB49  20                 	db	32
   417  00FB4A  50                 	db	80	;'P'
   418  00FB4B  55                 	db	85	;'U'
   419  00FB4C  53                 	db	83	;'S'
   420  00FB4D  48                 	db	72	;'H'
   421  00FB4E  45                 	db	69	;'E'
   422  00FB4F  52                 	db	82	;'R'
   423  00FB50  00                 	db	0
   424  00FB51                     STR_3:
   425  00FB51  2D                 	db	45
   426  00FB52  2D                 	db	45
   427  00FB53  20                 	db	32
   428  00FB54  4C                 	db	76	;'L'
   429  00FB55  4F                 	db	79	;'O'
   430  00FB56  47                 	db	71	;'G'
   431  00FB57  20                 	db	32
   432  00FB58  25                 	db	37
   433  00FB59  32                 	db	50	;'2'
   434  00FB5A  64                 	db	100	;'d'
   435  00FB5B  20                 	db	32
   436  00FB5C  48                 	db	72	;'H'
   437  00FB5D  45                 	db	69	;'E'
   438  00FB5E  52                 	db	82	;'R'
   439  00FB5F  45                 	db	69	;'E'
   440  00FB60  2D                 	db	45
   441  00FB61  2D                 	db	45
   442  00FB62  00                 	db	0
   443  00FB63                     STR_1:
   444  00FB63  52                 	db	82	;'R'
   445  00FB64  45                 	db	69	;'E'
   446  00FB65  53                 	db	83	;'S'
   447  00FB66  55                 	db	85	;'U'
   448  00FB67  4C                 	db	76	;'L'
   449  00FB68  54                 	db	84	;'T'
   450  00FB69  53                 	db	83	;'S'
   451  00FB6A  20                 	db	32
   452  00FB6B  49                 	db	73	;'I'
   453  00FB6C  4E                 	db	78	;'N'
   454  00FB6D  20                 	db	32
   455  00FB6E  4C                 	db	76	;'L'
   456  00FB6F  4F                 	db	79	;'O'
   457  00FB70  47                 	db	71	;'G'
   458  00FB71  20                 	db	32
   459  00FB72  25                 	db	37
   460  00FB73  64                 	db	100	;'d'
   461  00FB74  00                 	db	0
   462  00FB75                     STR_102:
   463  00FB75  4D                 	db	77	;'M'
   464  00FB76  49                 	db	73	;'I'
   465  00FB77  44                 	db	68	;'D'
   466  00FB78  20                 	db	32
   467  00FB79  2D                 	db	45
   468  00FB7A  2D                 	db	45
   469  00FB7B  20                 	db	32
   470  00FB7C  32                 	db	50	;'2'
   471  00FB7D  73                 	db	115	;'s'
   472  00FB7E  20                 	db	32
   473  00FB7F  20                 	db	32
   474  00FB80  20                 	db	32
   475  00FB81  20                 	db	32
   476  00FB82  20                 	db	32
   477  00FB83  20                 	db	32
   478  00FB84  20                 	db	32
   479  00FB85  00                 	db	0
   480  00FB86                     STR_105:
   481  00FB86  44                 	db	68	;'D'
   482  00FB87  52                 	db	82	;'R'
   483  00FB88  4F                 	db	79	;'O'
   484  00FB89  50                 	db	80	;'P'
   485  00FB8A  20                 	db	32
   486  00FB8B  2D                 	db	45
   487  00FB8C  2D                 	db	45
   488  00FB8D  20                 	db	32
   489  00FB8E  32                 	db	50	;'2'
   490  00FB8F  73                 	db	115	;'s'
   491  00FB90  20                 	db	32
   492  00FB91  20                 	db	32
   493  00FB92  20                 	db	32
   494  00FB93  20                 	db	32
   495  00FB94  20                 	db	32
   496  00FB95  20                 	db	32
   497  00FB96  00                 	db	0
   498  00FB97                     STR_99:
   499  00FB97  4C                 	db	76	;'L'
   500  00FB98  45                 	db	69	;'E'
   501  00FB99  46                 	db	70	;'F'
   502  00FB9A  54                 	db	84	;'T'
   503  00FB9B  20                 	db	32
   504  00FB9C  2D                 	db	45
   505  00FB9D  2D                 	db	45
   506  00FB9E  20                 	db	32
   507  00FB9F  32                 	db	50	;'2'
   508  00FBA0  73                 	db	115	;'s'
   509  00FBA1  20                 	db	32
   510  00FBA2  20                 	db	32
   511  00FBA3  20                 	db	32
   512  00FBA4  20                 	db	32
   513  00FBA5  20                 	db	32
   514  00FBA6  20                 	db	32
   515  00FBA7  00                 	db	0
   516  00FBA8                     STR_104:
   517  00FBA8  4C                 	db	76	;'L'
   518  00FBA9  45                 	db	69	;'E'
   519  00FBAA  56                 	db	86	;'V'
   520  00FBAB  45                 	db	69	;'E'
   521  00FBAC  4C                 	db	76	;'L'
   522  00FBAD  20                 	db	32
   523  00FBAE  2D                 	db	45
   524  00FBAF  2D                 	db	45
   525  00FBB0  20                 	db	32
   526  00FBB1  32                 	db	50	;'2'
   527  00FBB2  73                 	db	115	;'s'
   528  00FBB3  20                 	db	32
   529  00FBB4  20                 	db	32
   530  00FBB5  20                 	db	32
   531  00FBB6  20                 	db	32
   532  00FBB7  20                 	db	32
   533  00FBB8  00                 	db	0
   534  00FBB9                     STR_98:
   535  00FBB9  52                 	db	82	;'R'
   536  00FBBA  49                 	db	73	;'I'
   537  00FBBB  47                 	db	71	;'G'
   538  00FBBC  48                 	db	72	;'H'
   539  00FBBD  54                 	db	84	;'T'
   540  00FBBE  20                 	db	32
   541  00FBBF  2D                 	db	45
   542  00FBC0  2D                 	db	45
   543  00FBC1  20                 	db	32
   544  00FBC2  32                 	db	50	;'2'
   545  00FBC3  73                 	db	115	;'s'
   546  00FBC4  20                 	db	32
   547  00FBC5  20                 	db	32
   548  00FBC6  20                 	db	32
   549  00FBC7  20                 	db	32
   550  00FBC8  20                 	db	32
   551  00FBC9  00                 	db	0
   552  00FBCA                     STR_97:
   553  00FBCA  4D                 	db	77	;'M'
   554  00FBCB  49                 	db	73	;'I'
   555  00FBCC  44                 	db	68	;'D'
   556  00FBCD  44                 	db	68	;'D'
   557  00FBCE  4C                 	db	76	;'L'
   558  00FBCF  45                 	db	69	;'E'
   559  00FBD0  20                 	db	32
   560  00FBD1  2D                 	db	45
   561  00FBD2  2D                 	db	45
   562  00FBD3  20                 	db	32
   563  00FBD4  32                 	db	50	;'2'
   564  00FBD5  73                 	db	115	;'s'
   565  00FBD6  20                 	db	32
   566  00FBD7  20                 	db	32
   567  00FBD8  20                 	db	32
   568  00FBD9  20                 	db	32
   569  00FBDA  00                 	db	0
   570  00FBDB                     STR_112:
   571  00FBDB  4F                 	db	79	;'O'
   572  00FBDC  54                 	db	84	;'T'
   573  00FBDD  48                 	db	72	;'H'
   574  00FBDE  45                 	db	69	;'E'
   575  00FBDF  52                 	db	82	;'R'
   576  00FBE0  20                 	db	32
   577  00FBE1  53                 	db	83	;'S'
   578  00FBE2  45                 	db	69	;'E'
   579  00FBE3  54                 	db	84	;'T'
   580  00FBE4  53                 	db	83	;'S'
   581  00FBE5  20                 	db	32
   582  00FBE6  44                 	db	68	;'D'
   583  00FBE7  43                 	db	67	;'C'
   584  00FBE8  20                 	db	32
   585  00FBE9  20                 	db	32
   586  00FBEA  20                 	db	32
   587  00FBEB  00                 	db	0
   588  00FBEC                     STR_124:
   589  00FBEC  44                 	db	68	;'D'
   590  00FBED  20                 	db	32
   591  00FBEE  57                 	db	87	;'W'
   592  00FBEF  49                 	db	73	;'I'
   593  00FBF0  4C                 	db	76	;'L'
   594  00FBF1  4C                 	db	76	;'L'
   595  00FBF2  20                 	db	32
   596  00FBF3  52                 	db	82	;'R'
   597  00FBF4  45                 	db	69	;'E'
   598  00FBF5  54                 	db	84	;'T'
   599  00FBF6  55                 	db	85	;'U'
   600  00FBF7  52                 	db	82	;'R'
   601  00FBF8  4E                 	db	78	;'N'
   602  00FBF9  20                 	db	32
   603  00FBFA  20                 	db	32
   604  00FBFB  20                 	db	32
   605  00FBFC  00                 	db	0
   606  00FBFD                     STR_115:
   607  00FBFD  35                 	db	53	;'5'
   608  00FBFE  3A                 	db	58	;':'
   609  00FBFF  48                 	db	72	;'H'
   610  00FC00  7C                 	db	124
   611  00FC01  36                 	db	54	;'6'
   612  00FC02  3A                 	db	58	;':'
   613  00FC03  4C                 	db	76	;'L'
   614  00FC04  7C                 	db	124
   615  00FC05  49                 	db	73	;'I'
   616  00FC06  52                 	db	82	;'R'
   617  00FC07  3A                 	db	58	;':'
   618  00FC08  25                 	db	37
   619  00FC09  64                 	db	100	;'d'
   620  00FC0A  20                 	db	32
   621  00FC0B  20                 	db	32
   622  00FC0C  20                 	db	32
   623  00FC0D  00                 	db	0
   624  00FC0E                     STR_113:
   625  00FC0E  31                 	db	49	;'1'
   626  00FC0F  3A                 	db	58	;':'
   627  00FC10  20                 	db	32
   628  00FC11  44                 	db	68	;'D'
   629  00FC12  43                 	db	67	;'C'
   630  00FC13  20                 	db	32
   631  00FC14  7C                 	db	124
   632  00FC15  20                 	db	32
   633  00FC16  41                 	db	65	;'A'
   634  00FC17  3A                 	db	58	;':'
   635  00FC18  20                 	db	32
   636  00FC19  41                 	db	65	;'A'
   637  00FC1A  52                 	db	82	;'R'
   638  00FC1B  4D                 	db	77	;'M'
   639  00FC1C  20                 	db	32
   640  00FC1D  20                 	db	32
   641  00FC1E  00                 	db	0
   642  00FC1F                     STR_100:
   643  00FC1F  4D                 	db	77	;'M'
   644  00FC20  49                 	db	73	;'I'
   645  00FC21  44                 	db	68	;'D'
   646  00FC22  2D                 	db	45
   647  00FC23  4C                 	db	76	;'L'
   648  00FC24  45                 	db	69	;'E'
   649  00FC25  46                 	db	70	;'F'
   650  00FC26  54                 	db	84	;'T'
   651  00FC27  20                 	db	32
   652  00FC28  2D                 	db	45
   653  00FC29  2D                 	db	45
   654  00FC2A  20                 	db	32
   655  00FC2B  32                 	db	50	;'2'
   656  00FC2C  73                 	db	115	;'s'
   657  00FC2D  20                 	db	32
   658  00FC2E  20                 	db	32
   659  00FC2F  00                 	db	0
   660  00FC30                     STR_101:
   661  00FC30  4D                 	db	77	;'M'
   662  00FC31  49                 	db	73	;'I'
   663  00FC32  44                 	db	68	;'D'
   664  00FC33  2D                 	db	45
   665  00FC34  52                 	db	82	;'R'
   666  00FC35  49                 	db	73	;'I'
   667  00FC36  47                 	db	71	;'G'
   668  00FC37  48                 	db	72	;'H'
   669  00FC38  54                 	db	84	;'T'
   670  00FC39  20                 	db	32
   671  00FC3A  2D                 	db	45
   672  00FC3B  2D                 	db	45
   673  00FC3C  20                 	db	32
   674  00FC3D  32                 	db	50	;'2'
   675  00FC3E  73                 	db	115	;'s'
   676  00FC3F  20                 	db	32
   677  00FC40  00                 	db	0
   678  00FC41                     STR_72:
   679  00FC41  41                 	db	65	;'A'
   680  00FC42  4C                 	db	76	;'L'
   681  00FC43  47                 	db	71	;'G'
   682  00FC44  31                 	db	49	;'1'
   683  00FC45  3A                 	db	58	;':'
   684  00FC46  20                 	db	32
   685  00FC47  39                 	db	57	;'9'
   686  00FC48  20                 	db	32
   687  00FC49  50                 	db	80	;'P'
   688  00FC4A  4F                 	db	79	;'O'
   689  00FC4B  50                 	db	80	;'P'
   690  00FC4C  4E                 	db	78	;'N'
   691  00FC4D  4F                 	db	79	;'O'
   692  00FC4E  54                 	db	84	;'T'
   693  00FC4F  41                 	db	65	;'A'
   694  00FC50  42                 	db	66	;'B'
   695  00FC51  00                 	db	0
   696  00FC52                     STR_92:
   697  00FC52  54                 	db	84	;'T'
   698  00FC53  53                 	db	83	;'S'
   699  00FC54  54                 	db	84	;'T'
   700  00FC55  3A                 	db	58	;':'
   701  00FC56  20                 	db	32
   702  00FC57  43                 	db	67	;'C'
   703  00FC58  4F                 	db	79	;'O'
   704  00FC59  4E                 	db	78	;'N'
   705  00FC5A  44                 	db	68	;'D'
   706  00FC5B  20                 	db	32
   707  00FC5C  53                 	db	83	;'S'
   708  00FC5D  4F                 	db	79	;'O'
   709  00FC5E  4C                 	db	76	;'L'
   710  00FC5F  4E                 	db	78	;'N'
   711  00FC60  27                 	db	39
   712  00FC61  44                 	db	68	;'D'
   713  00FC62  00                 	db	0
   714  00FC63                     STR_94:
   715  00FC63  54                 	db	84	;'T'
   716  00FC64  53                 	db	83	;'S'
   717  00FC65  54                 	db	84	;'T'
   718  00FC66  3A                 	db	58	;':'
   719  00FC67  20                 	db	32
   720  00FC68  50                 	db	80	;'P'
   721  00FC69  55                 	db	85	;'U'
   722  00FC6A  53                 	db	83	;'S'
   723  00FC6B  48                 	db	72	;'H'
   724  00FC6C  20                 	db	32
   725  00FC6D  53                 	db	83	;'S'
   726  00FC6E  4F                 	db	79	;'O'
   727  00FC6F  4C                 	db	76	;'L'
   728  00FC70  4E                 	db	78	;'N'
   729  00FC71  27                 	db	39
   730  00FC72  44                 	db	68	;'D'
   731  00FC73  00                 	db	0
   732  00FC74                     STR_68:
   733  00FC74  32                 	db	50	;'2'
   734  00FC75  2E                 	db	46
   735  00FC76  53                 	db	83	;'S'
   736  00FC77  4E                 	db	78	;'N'
   737  00FC78  52                 	db	82	;'R'
   738  00FC79  7C                 	db	124
   739  00FC7A  34                 	db	52	;'4'
   740  00FC7B  2E                 	db	46
   741  00FC7C  48                 	db	72	;'H'
   742  00FC7D  49                 	db	73	;'I'
   743  00FC7E  7C                 	db	124
   744  00FC7F  35                 	db	53	;'5'
   745  00FC80  2E                 	db	46
   746  00FC81  4D                 	db	77	;'M'
   747  00FC82  45                 	db	69	;'E'
   748  00FC83  44                 	db	68	;'D'
   749  00FC84  00                 	db	0
   750  00FC85                     STR_69:
   751  00FC85  42                 	db	66	;'B'
   752  00FC86  2E                 	db	46
   753  00FC87  50                 	db	80	;'P'
   754  00FC88  4C                 	db	76	;'L'
   755  00FC89  41                 	db	65	;'A'
   756  00FC8A  7C                 	db	124
   757  00FC8B  38                 	db	56	;'8'
   758  00FC8C  2E                 	db	46
   759  00FC8D  53                 	db	83	;'S'
   760  00FC8E  56                 	db	86	;'V'
   761  00FC8F  7C                 	db	124
   762  00FC90  39                 	db	57	;'9'
   763  00FC91  2E                 	db	46
   764  00FC92  42                 	db	66	;'B'
   765  00FC93  4C                 	db	76	;'L'
   766  00FC94  4B                 	db	75	;'K'
   767  00FC95  00                 	db	0
   768  00FC96                     STR_125:
   769  00FC96  45                 	db	69	;'E'
   770  00FC97  4C                 	db	76	;'L'
   771  00FC98  53                 	db	83	;'S'
   772  00FC99  45                 	db	69	;'E'
   773  00FC9A  20                 	db	32
   774  00FC9B  54                 	db	84	;'T'
   775  00FC9C  4F                 	db	79	;'O'
   776  00FC9D  47                 	db	71	;'G'
   777  00FC9E  47                 	db	71	;'G'
   778  00FC9F  4C                 	db	76	;'L'
   779  00FCA0  45                 	db	69	;'E'
   780  00FCA1  53                 	db	83	;'S'
   781  00FCA2  20                 	db	32
   782  00FCA3  41                 	db	65	;'A'
   783  00FCA4  52                 	db	82	;'R'
   784  00FCA5  4D                 	db	77	;'M'
   785  00FCA6  00                 	db	0
   786  00FCA7                     STR_110:
   787  00FCA7  54                 	db	84	;'T'
   788  00FCA8  53                 	db	83	;'S'
   789  00FCA9  54                 	db	84	;'T'
   790  00FCAA  3A                 	db	58	;':'
   791  00FCAB  20                 	db	32
   792  00FCAC  42                 	db	66	;'B'
   793  00FCAD  4F                 	db	79	;'O'
   794  00FCAE  54                 	db	84	;'T'
   795  00FCAF  48                 	db	72	;'H'
   796  00FCB0  20                 	db	32
   797  00FCB1  53                 	db	83	;'S'
   798  00FCB2  45                 	db	69	;'E'
   799  00FCB3  52                 	db	82	;'R'
   800  00FCB4  56                 	db	86	;'V'
   801  00FCB5  4F                 	db	79	;'O'
   802  00FCB6  53                 	db	83	;'S'
   803  00FCB7  00                 	db	0
   804  00FCB8                     STR_41:
   805  00FCB8  4C                 	db	76	;'L'
   806  00FCB9  4F                 	db	79	;'O'
   807  00FCBA  47                 	db	71	;'G'
   808  00FCBB  20                 	db	32
   809  00FCBC  31                 	db	49	;'1'
   810  00FCBD  20                 	db	32
   811  00FCBE  20                 	db	32
   812  00FCBF  20                 	db	32
   813  00FCC0  20                 	db	32
   814  00FCC1  20                 	db	32
   815  00FCC2  20                 	db	32
   816  00FCC3  20                 	db	32
   817  00FCC4  20                 	db	32
   818  00FCC5  20                 	db	32
   819  00FCC6  20                 	db	32
   820  00FCC7  20                 	db	32
   821  00FCC8  00                 	db	0
   822  00FCC9                     STR_40:
   823  00FCC9  4C                 	db	76	;'L'
   824  00FCCA  4F                 	db	79	;'O'
   825  00FCCB  47                 	db	71	;'G'
   826  00FCCC  20                 	db	32
   827  00FCCD  32                 	db	50	;'2'
   828  00FCCE  20                 	db	32
   829  00FCCF  20                 	db	32
   830  00FCD0  20                 	db	32
   831  00FCD1  20                 	db	32
   832  00FCD2  20                 	db	32
   833  00FCD3  20                 	db	32
   834  00FCD4  20                 	db	32
   835  00FCD5  20                 	db	32
   836  00FCD6  20                 	db	32
   837  00FCD7  20                 	db	32
   838  00FCD8  20                 	db	32
   839  00FCD9  00                 	db	0
   840  00FCDA                     STR_44:
   841  00FCDA  4C                 	db	76	;'L'
   842  00FCDB  4F                 	db	79	;'O'
   843  00FCDC  47                 	db	71	;'G'
   844  00FCDD  20                 	db	32
   845  00FCDE  33                 	db	51	;'3'
   846  00FCDF  20                 	db	32
   847  00FCE0  20                 	db	32
   848  00FCE1  20                 	db	32
   849  00FCE2  20                 	db	32
   850  00FCE3  20                 	db	32
   851  00FCE4  20                 	db	32
   852  00FCE5  20                 	db	32
   853  00FCE6  20                 	db	32
   854  00FCE7  20                 	db	32
   855  00FCE8  20                 	db	32
   856  00FCE9  20                 	db	32
   857  00FCEA  00                 	db	0
   858  00FCEB                     STR_48:
   859  00FCEB  4C                 	db	76	;'L'
   860  00FCEC  4F                 	db	79	;'O'
   861  00FCED  47                 	db	71	;'G'
   862  00FCEE  20                 	db	32
   863  00FCEF  34                 	db	52	;'4'
   864  00FCF0  20                 	db	32
   865  00FCF1  20                 	db	32
   866  00FCF2  20                 	db	32
   867  00FCF3  20                 	db	32
   868  00FCF4  20                 	db	32
   869  00FCF5  20                 	db	32
   870  00FCF6  20                 	db	32
   871  00FCF7  20                 	db	32
   872  00FCF8  20                 	db	32
   873  00FCF9  20                 	db	32
   874  00FCFA  20                 	db	32
   875  00FCFB  00                 	db	0
   876  00FCFC                     STR_36:
   877  00FCFC  33                 	db	51	;'3'
   878  00FCFD  2E                 	db	46
   879  00FCFE  20                 	db	32
   880  00FCFF  4C                 	db	76	;'L'
   881  00FD00  4F                 	db	79	;'O'
   882  00FD01  47                 	db	71	;'G'
   883  00FD02  53                 	db	83	;'S'
   884  00FD03  20                 	db	32
   885  00FD04  20                 	db	32
   886  00FD05  20                 	db	32
   887  00FD06  20                 	db	32
   888  00FD07  20                 	db	32
   889  00FD08  20                 	db	32
   890  00FD09  20                 	db	32
   891  00FD0A  20                 	db	32
   892  00FD0B  20                 	db	32
   893  00FD0C  00                 	db	0
   894  00FD0D                     STR_32:
   895  00FD0D  32                 	db	50	;'2'
   896  00FD0E  2E                 	db	46
   897  00FD0F  20                 	db	32
   898  00FD10  53                 	db	83	;'S'
   899  00FD11  4F                 	db	79	;'O'
   900  00FD12  52                 	db	82	;'R'
   901  00FD13  54                 	db	84	;'T'
   902  00FD14  20                 	db	32
   903  00FD15  20                 	db	32
   904  00FD16  20                 	db	32
   905  00FD17  20                 	db	32
   906  00FD18  20                 	db	32
   907  00FD19  20                 	db	32
   908  00FD1A  20                 	db	32
   909  00FD1B  20                 	db	32
   910  00FD1C  20                 	db	32
   911  00FD1D  00                 	db	0
   912  00FD1E                     STR_33:
   913  00FD1E  31                 	db	49	;'1'
   914  00FD1F  2E                 	db	46
   915  00FD20  20                 	db	32
   916  00FD21  44                 	db	68	;'D'
   917  00FD22  41                 	db	65	;'A'
   918  00FD23  54                 	db	84	;'T'
   919  00FD24  45                 	db	69	;'E'
   920  00FD25  2F                 	db	47
   921  00FD26  54                 	db	84	;'T'
   922  00FD27  49                 	db	73	;'I'
   923  00FD28  4D                 	db	77	;'M'
   924  00FD29  45                 	db	69	;'E'
   925  00FD2A  20                 	db	32
   926  00FD2B  20                 	db	32
   927  00FD2C  20                 	db	32
   928  00FD2D  20                 	db	32
   929  00FD2E  00                 	db	0
   930  00FD2F                     STR_24:
   931  00FD2F  20                 	db	32
   932  00FD30  2D                 	db	45
   933  00FD31  2D                 	db	45
   934  00FD32  20                 	db	32
   935  00FD33  50                 	db	80	;'P'
   936  00FD34  4F                 	db	79	;'O'
   937  00FD35  50                 	db	80	;'P'
   938  00FD36  20                 	db	32
   939  00FD37  20                 	db	32
   940  00FD38  43                 	db	67	;'C'
   941  00FD39  41                 	db	65	;'A'
   942  00FD3A  4E                 	db	78	;'N'
   943  00FD3B  20                 	db	32
   944  00FD3C  2D                 	db	45
   945  00FD3D  2D                 	db	45
   946  00FD3E  20                 	db	32
   947  00FD3F  00                 	db	0
   948  00FD40                     STR_26:
   949  00FD40  20                 	db	32
   950  00FD41  2D                 	db	45
   951  00FD42  2D                 	db	45
   952  00FD43  20                 	db	32
   953  00FD44  53                 	db	83	;'S'
   954  00FD45  4F                 	db	79	;'O'
   955  00FD46  55                 	db	85	;'U'
   956  00FD47  50                 	db	80	;'P'
   957  00FD48  20                 	db	32
   958  00FD49  43                 	db	67	;'C'
   959  00FD4A  41                 	db	65	;'A'
   960  00FD4B  4E                 	db	78	;'N'
   961  00FD4C  20                 	db	32
   962  00FD4D  2D                 	db	45
   963  00FD4E  2D                 	db	45
   964  00FD4F  20                 	db	32
   965  00FD50  00                 	db	0
   966  00FD51                     STR_28:
   967  00FD51  2D                 	db	45
   968  00FD52  2D                 	db	45
   969  00FD53  20                 	db	32
   970  00FD54  54                 	db	84	;'T'
   971  00FD55  4F                 	db	79	;'O'
   972  00FD56  54                 	db	84	;'T'
   973  00FD57  41                 	db	65	;'A'
   974  00FD58  4C                 	db	76	;'L'
   975  00FD59  20                 	db	32
   976  00FD5A  43                 	db	67	;'C'
   977  00FD5B  41                 	db	65	;'A'
   978  00FD5C  4E                 	db	78	;'N'
   979  00FD5D  53                 	db	83	;'S'
   980  00FD5E  20                 	db	32
   981  00FD5F  2D                 	db	45
   982  00FD60  2D                 	db	45
   983  00FD61  00                 	db	0
   984  00FD62                     STR_39:
   985  00FD62  4C                 	db	76	;'L'
   986  00FD63  4F                 	db	79	;'O'
   987  00FD64  47                 	db	71	;'G'
   988  00FD65  20                 	db	32
   989  00FD66  31                 	db	49	;'1'
   990  00FD67  20                 	db	32
   991  00FD68  20                 	db	32
   992  00FD69  20                 	db	32
   993  00FD6A  20                 	db	32
   994  00FD6B  20                 	db	32
   995  00FD6C  20                 	db	32
   996  00FD6D  20                 	db	32
   997  00FD6E  20                 	db	32
   998  00FD6F  20                 	db	32
   999  00FD70  20                 	db	32
  1000  00FD71  3C                 	db	60	;'<'
  1001  00FD72  00                 	db	0
  1002  00FD73                     STR_42:
  1003  00FD73  4C                 	db	76	;'L'
  1004  00FD74  4F                 	db	79	;'O'
  1005  00FD75  47                 	db	71	;'G'
  1006  00FD76  20                 	db	32
  1007  00FD77  32                 	db	50	;'2'
  1008  00FD78  20                 	db	32
  1009  00FD79  20                 	db	32
  1010  00FD7A  20                 	db	32
  1011  00FD7B  20                 	db	32
  1012  00FD7C  20                 	db	32
  1013  00FD7D  20                 	db	32
  1014  00FD7E  20                 	db	32
  1015  00FD7F  20                 	db	32
  1016  00FD80  20                 	db	32
  1017  00FD81  20                 	db	32
  1018  00FD82  3C                 	db	60	;'<'
  1019  00FD83  00                 	db	0
  1020  00FD84                     STR_46:
  1021  00FD84  4C                 	db	76	;'L'
  1022  00FD85  4F                 	db	79	;'O'
  1023  00FD86  47                 	db	71	;'G'
  1024  00FD87  20                 	db	32
  1025  00FD88  33                 	db	51	;'3'
  1026  00FD89  20                 	db	32
  1027  00FD8A  20                 	db	32
  1028  00FD8B  20                 	db	32
  1029  00FD8C  20                 	db	32
  1030  00FD8D  20                 	db	32
  1031  00FD8E  20                 	db	32
  1032  00FD8F  20                 	db	32
  1033  00FD90  20                 	db	32
  1034  00FD91  20                 	db	32
  1035  00FD92  20                 	db	32
  1036  00FD93  3C                 	db	60	;'<'
  1037  00FD94  00                 	db	0
  1038  00FD95                     STR_50:
  1039  00FD95  4C                 	db	76	;'L'
  1040  00FD96  4F                 	db	79	;'O'
  1041  00FD97  47                 	db	71	;'G'
  1042  00FD98  20                 	db	32
  1043  00FD99  34                 	db	52	;'4'
  1044  00FD9A  20                 	db	32
  1045  00FD9B  20                 	db	32
  1046  00FD9C  20                 	db	32
  1047  00FD9D  20                 	db	32
  1048  00FD9E  20                 	db	32
  1049  00FD9F  20                 	db	32
  1050  00FDA0  20                 	db	32
  1051  00FDA1  20                 	db	32
  1052  00FDA2  20                 	db	32
  1053  00FDA3  20                 	db	32
  1054  00FDA4  3C                 	db	60	;'<'
  1055  00FDA5  00                 	db	0
  1056  00FDA6                     STR_38:
  1057  00FDA6  33                 	db	51	;'3'
  1058  00FDA7  2E                 	db	46
  1059  00FDA8  20                 	db	32
  1060  00FDA9  4C                 	db	76	;'L'
  1061  00FDAA  4F                 	db	79	;'O'
  1062  00FDAB  47                 	db	71	;'G'
  1063  00FDAC  53                 	db	83	;'S'
  1064  00FDAD  20                 	db	32
  1065  00FDAE  20                 	db	32
  1066  00FDAF  20                 	db	32
  1067  00FDB0  20                 	db	32
  1068  00FDB1  20                 	db	32
  1069  00FDB2  20                 	db	32
  1070  00FDB3  20                 	db	32
  1071  00FDB4  20                 	db	32
  1072  00FDB5  3C                 	db	60	;'<'
  1073  00FDB6  00                 	db	0
  1074  00FDB7                     STR_34:
  1075  00FDB7  32                 	db	50	;'2'
  1076  00FDB8  2E                 	db	46
  1077  00FDB9  20                 	db	32
  1078  00FDBA  53                 	db	83	;'S'
  1079  00FDBB  4F                 	db	79	;'O'
  1080  00FDBC  52                 	db	82	;'R'
  1081  00FDBD  54                 	db	84	;'T'
  1082  00FDBE  20                 	db	32
  1083  00FDBF  20                 	db	32
  1084  00FDC0  20                 	db	32
  1085  00FDC1  20                 	db	32
  1086  00FDC2  20                 	db	32
  1087  00FDC3  20                 	db	32
  1088  00FDC4  20                 	db	32
  1089  00FDC5  20                 	db	32
  1090  00FDC6  3C                 	db	60	;'<'
  1091  00FDC7  00                 	db	0
  1092  00FDC8                     STR_31:
  1093  00FDC8  31                 	db	49	;'1'
  1094  00FDC9  2E                 	db	46
  1095  00FDCA  20                 	db	32
  1096  00FDCB  44                 	db	68	;'D'
  1097  00FDCC  41                 	db	65	;'A'
  1098  00FDCD  54                 	db	84	;'T'
  1099  00FDCE  45                 	db	69	;'E'
  1100  00FDCF  2F                 	db	47
  1101  00FDD0  54                 	db	84	;'T'
  1102  00FDD1  49                 	db	73	;'I'
  1103  00FDD2  4D                 	db	77	;'M'
  1104  00FDD3  45                 	db	69	;'E'
  1105  00FDD4  20                 	db	32
  1106  00FDD5  20                 	db	32
  1107  00FDD6  20                 	db	32
  1108  00FDD7  3C                 	db	60	;'<'
  1109  00FDD8  00                 	db	0
  1110  00FDD9                     STR_6:
  1111  00FDD9  50                 	db	80	;'P'
  1112  00FDDA  41                 	db	65	;'A'
  1113  00FDDB  55                 	db	85	;'U'
  1114  00FDDC  53                 	db	83	;'S'
  1115  00FDDD  45                 	db	69	;'E'
  1116  00FDDE  20                 	db	32
  1117  00FDDF  3C                 	db	60	;'<'
  1118  00FDE0  20                 	db	32
  1119  00FDE1  7C                 	db	124
  1120  00FDE2  20                 	db	32
  1121  00FDE3  42                 	db	66	;'B'
  1122  00FDE4  41                 	db	65	;'A'
  1123  00FDE5  43                 	db	67	;'C'
  1124  00FDE6  4B                 	db	75	;'K'
  1125  00FDE7  20                 	db	32
  1126  00FDE8  3E                 	db	62	;'>'
  1127  00FDE9  00                 	db	0
  1128  00FDEA                     STR_30:
  1129  00FDEA  50                 	db	80	;'P'
  1130  00FDEB  55                 	db	85	;'U'
  1131  00FDEC  53                 	db	83	;'S'
  1132  00FDED  48                 	db	72	;'H'
  1133  00FDEE  20                 	db	32
  1134  00FDEF  54                 	db	84	;'T'
  1135  00FDF0  4F                 	db	79	;'O'
  1136  00FDF1  20                 	db	32
  1137  00FDF2  43                 	db	67	;'C'
  1138  00FDF3  4F                 	db	79	;'O'
  1139  00FDF4  4E                 	db	78	;'N'
  1140  00FDF5  54                 	db	84	;'T'
  1141  00FDF6  49                 	db	73	;'I'
  1142  00FDF7  4E                 	db	78	;'N'
  1143  00FDF8  55                 	db	85	;'U'
  1144  00FDF9  45                 	db	69	;'E'
  1145  00FDFA  00                 	db	0
  1146  00FDFB                     STR_27:
  1147  00FDFB  4E                 	db	78	;'N'
  1148  00FDFC  4C                 	db	76	;'L'
  1149  00FDFD  41                 	db	65	;'A'
  1150  00FDFE  42                 	db	66	;'B'
  1151  00FDFF  3A                 	db	58	;':'
  1152  00FE00  20                 	db	32
  1153  00FE01  25                 	db	37
  1154  00FE02  64                 	db	100	;'d'
  1155  00FE03  7C                 	db	124
  1156  00FE04  4C                 	db	76	;'L'
  1157  00FE05  41                 	db	65	;'A'
  1158  00FE06  42                 	db	66	;'B'
  1159  00FE07  3A                 	db	58	;':'
  1160  00FE08  20                 	db	32
  1161  00FE09  25                 	db	37
  1162  00FE0A  64                 	db	100	;'d'
  1163  00FE0B  00                 	db	0
  1164  00FE0C                     STR_25:
  1165  00FE0C  4E                 	db	78	;'N'
  1166  00FE0D  54                 	db	84	;'T'
  1167  00FE0E  41                 	db	65	;'A'
  1168  00FE0F  42                 	db	66	;'B'
  1169  00FE10  3A                 	db	58	;':'
  1170  00FE11  20                 	db	32
  1171  00FE12  25                 	db	37
  1172  00FE13  64                 	db	100	;'d'
  1173  00FE14  7C                 	db	124
  1174  00FE15  54                 	db	84	;'T'
  1175  00FE16  41                 	db	65	;'A'
  1176  00FE17  42                 	db	66	;'B'
  1177  00FE18  3A                 	db	58	;':'
  1178  00FE19  20                 	db	32
  1179  00FE1A  25                 	db	37
  1180  00FE1B  64                 	db	100	;'d'
  1181  00FE1C  00                 	db	0
  1182  00FE1D                     STR_83:
  1183  00FE1D  4D                 	db	77	;'M'
  1184  00FE1E  41                 	db	65	;'A'
  1185  00FE1F  47                 	db	71	;'G'
  1186  00FE20  5F                 	db	95	;'_'
  1187  00FE21  73                 	db	115	;'s'
  1188  00FE22  69                 	db	105	;'i'
  1189  00FE23  67                 	db	103	;'g'
  1190  00FE24  6E                 	db	110	;'n'
  1191  00FE25  61                 	db	97	;'a'
  1192  00FE26  6C                 	db	108	;'l'
  1193  00FE27  3A                 	db	58	;':'
  1194  00FE28  20                 	db	32
  1195  00FE29  25                 	db	37
  1196  00FE2A  64                 	db	100	;'d'
  1197  00FE2B  20                 	db	32
  1198  00FE2C  00                 	db	0
  1199  00FE2D                     STR_103:
  1200  00FE2D  54                 	db	84	;'T'
  1201  00FE2E  53                 	db	83	;'S'
  1202  00FE2F  54                 	db	84	;'T'
  1203  00FE30  3A                 	db	58	;':'
  1204  00FE31  20                 	db	32
  1205  00FE32  54                 	db	84	;'T'
  1206  00FE33  49                 	db	73	;'I'
  1207  00FE34  4C                 	db	76	;'L'
  1208  00FE35  54                 	db	84	;'T'
  1209  00FE36  20                 	db	32
  1210  00FE37  53                 	db	83	;'S'
  1211  00FE38  45                 	db	69	;'E'
  1212  00FE39  52                 	db	82	;'R'
  1213  00FE3A  56                 	db	86	;'V'
  1214  00FE3B  4F                 	db	79	;'O'
  1215  00FE3C  00                 	db	0
  1216  00FE3D                     STR_64:
  1217  00FE3D  53                 	db	83	;'S'
  1218  00FE3E  4F                 	db	79	;'O'
  1219  00FE3F  52                 	db	82	;'R'
  1220  00FE40  54                 	db	84	;'T'
  1221  00FE41  49                 	db	73	;'I'
  1222  00FE42  4E                 	db	78	;'N'
  1223  00FE43  47                 	db	71	;'G'
  1224  00FE44  2E                 	db	46
  1225  00FE45  2E                 	db	46
  1226  00FE46  2E                 	db	46
  1227  00FE47  20                 	db	32
  1228  00FE48  20                 	db	32
  1229  00FE49  20                 	db	32
  1230  00FE4A  20                 	db	32
  1231  00FE4B  20                 	db	32
  1232  00FE4C  00                 	db	0
  1233  00FE4D                     STR_65:
  1234  00FE4D  54                 	db	84	;'T'
  1235  00FE4E  49                 	db	73	;'I'
  1236  00FE4F  4D                 	db	77	;'M'
  1237  00FE50  45                 	db	69	;'E'
  1238  00FE51  20                 	db	32
  1239  00FE52  25                 	db	37
  1240  00FE53  64                 	db	100	;'d'
  1241  00FE54  3A                 	db	58	;':'
  1242  00FE55  25                 	db	37
  1243  00FE56  30                 	db	48	;'0'
  1244  00FE57  32                 	db	50	;'2'
  1245  00FE58  64                 	db	100	;'d'
  1246  00FE59  20                 	db	32
  1247  00FE5A  20                 	db	32
  1248  00FE5B  20                 	db	32
  1249  00FE5C  00                 	db	0
  1250  00FE5D                     STR_4:
  1251  00FE5D  44                 	db	68	;'D'
  1252  00FE5E  49                 	db	73	;'I'
  1253  00FE5F  44                 	db	68	;'D'
  1254  00FE60  4E                 	db	78	;'N'
  1255  00FE61  27                 	db	39
  1256  00FE62  54                 	db	84	;'T'
  1257  00FE63  20                 	db	32
  1258  00FE64  43                 	db	67	;'C'
  1259  00FE65  4F                 	db	79	;'O'
  1260  00FE66  4D                 	db	77	;'M'
  1261  00FE67  50                 	db	80	;'P'
  1262  00FE68  4C                 	db	76	;'L'
  1263  00FE69  45                 	db	69	;'E'
  1264  00FE6A  54                 	db	84	;'T'
  1265  00FE6B  45                 	db	69	;'E'
  1266  00FE6C  00                 	db	0
  1267  00FE6D                     STR_120:
  1268  00FE6D  44                 	db	68	;'D'
  1269  00FE6E  3A                 	db	58	;':'
  1270  00FE6F  52                 	db	82	;'R'
  1271  00FE70  45                 	db	69	;'E'
  1272  00FE71  54                 	db	84	;'T'
  1273  00FE72  7C                 	db	124
  1274  00FE73  32                 	db	50	;'2'
  1275  00FE74  3A                 	db	58	;':'
  1276  00FE75  43                 	db	67	;'C'
  1277  00FE76  20                 	db	32
  1278  00FE77  25                 	db	37
  1279  00FE78  64                 	db	100	;'d'
  1280  00FE79  20                 	db	32
  1281  00FE7A  20                 	db	32
  1282  00FE7B  00                 	db	0
  1283  00FE7C                     STR_80:
  1284  00FE7C  49                 	db	73	;'I'
  1285  00FE7D  52                 	db	82	;'R'
  1286  00FE7E  5F                 	db	95	;'_'
  1287  00FE7F  73                 	db	115	;'s'
  1288  00FE80  69                 	db	105	;'i'
  1289  00FE81  67                 	db	103	;'g'
  1290  00FE82  6E                 	db	110	;'n'
  1291  00FE83  61                 	db	97	;'a'
  1292  00FE84  6C                 	db	108	;'l'
  1293  00FE85  3A                 	db	58	;':'
  1294  00FE86  20                 	db	32
  1295  00FE87  25                 	db	37
  1296  00FE88  64                 	db	100	;'d'
  1297  00FE89  20                 	db	32
  1298  00FE8A  00                 	db	0
  1299  00FE8B                     STR_109:
  1300  00FE8B  43                 	db	67	;'C'
  1301  00FE8C  41                 	db	65	;'A'
  1302  00FE8D  4D                 	db	77	;'M'
  1303  00FE8E  20                 	db	32
  1304  00FE8F  44                 	db	68	;'D'
  1305  00FE90  57                 	db	87	;'W'
  1306  00FE91  4E                 	db	78	;'N'
  1307  00FE92  20                 	db	32
  1308  00FE93  7C                 	db	124
  1309  00FE94  52                 	db	82	;'R'
  1310  00FE95  43                 	db	67	;'C'
  1311  00FE96  30                 	db	48	;'0'
  1312  00FE97  3D                 	db	61	;'='
  1313  00FE98  30                 	db	48	;'0'
  1314  00FE99  00                 	db	0
  1315  00FE9A                     STR_108:
  1316  00FE9A  43                 	db	67	;'C'
  1317  00FE9B  41                 	db	65	;'A'
  1318  00FE9C  4D                 	db	77	;'M'
  1319  00FE9D  20                 	db	32
  1320  00FE9E  55                 	db	85	;'U'
  1321  00FE9F  50                 	db	80	;'P'
  1322  00FEA0  20                 	db	32
  1323  00FEA1  20                 	db	32
  1324  00FEA2  7C                 	db	124
  1325  00FEA3  52                 	db	82	;'R'
  1326  00FEA4  43                 	db	67	;'C'
  1327  00FEA5  30                 	db	48	;'0'
  1328  00FEA6  3D                 	db	61	;'='
  1329  00FEA7  31                 	db	49	;'1'
  1330  00FEA8  00                 	db	0
  1331  00FEA9                     STR_82:
  1332  00FEA9  54                 	db	84	;'T'
  1333  00FEAA  53                 	db	83	;'S'
  1334  00FEAB  54                 	db	84	;'T'
  1335  00FEAC  3A                 	db	58	;':'
  1336  00FEAD  20                 	db	32
  1337  00FEAE  4D                 	db	77	;'M'
  1338  00FEAF  41                 	db	65	;'A'
  1339  00FEB0  47                 	db	71	;'G'
  1340  00FEB1  4E                 	db	78	;'N'
  1341  00FEB2  45                 	db	69	;'E'
  1342  00FEB3  54                 	db	84	;'T'
  1343  00FEB4  49                 	db	73	;'I'
  1344  00FEB5  53                 	db	83	;'S'
  1345  00FEB6  4D                 	db	77	;'M'
  1346  00FEB7  00                 	db	0
  1347  00FEB8                     STR_107:
  1348  00FEB8  54                 	db	84	;'T'
  1349  00FEB9  53                 	db	83	;'S'
  1350  00FEBA  54                 	db	84	;'T'
  1351  00FEBB  3A                 	db	58	;':'
  1352  00FEBC  20                 	db	32
  1353  00FEBD  43                 	db	67	;'C'
  1354  00FEBE  41                 	db	65	;'A'
  1355  00FEBF  4D                 	db	77	;'M'
  1356  00FEC0  20                 	db	32
  1357  00FEC1  53                 	db	83	;'S'
  1358  00FEC2  45                 	db	69	;'E'
  1359  00FEC3  52                 	db	82	;'R'
  1360  00FEC4  56                 	db	86	;'V'
  1361  00FEC5  4F                 	db	79	;'O'
  1362  00FEC6  00                 	db	0
  1363  00FEC7                     STR_96:
  1364  00FEC7  54                 	db	84	;'T'
  1365  00FEC8  53                 	db	83	;'S'
  1366  00FEC9  54                 	db	84	;'T'
  1367  00FECA  3A                 	db	58	;':'
  1368  00FECB  20                 	db	32
  1369  00FECC  50                 	db	80	;'P'
  1370  00FECD  41                 	db	65	;'A'
  1371  00FECE  4E                 	db	78	;'N'
  1372  00FECF  20                 	db	32
  1373  00FED0  53                 	db	83	;'S'
  1374  00FED1  45                 	db	69	;'E'
  1375  00FED2  52                 	db	82	;'R'
  1376  00FED3  56                 	db	86	;'V'
  1377  00FED4  4F                 	db	79	;'O'
  1378  00FED5  00                 	db	0
  1379  00FED6                     STR_75:
  1380  00FED6  41                 	db	65	;'A'
  1381  00FED7  4C                 	db	76	;'L'
  1382  00FED8  47                 	db	71	;'G'
  1383  00FED9  34                 	db	52	;'4'
  1384  00FEDA  3A                 	db	58	;':'
  1385  00FEDB  20                 	db	32
  1386  00FEDC  41                 	db	65	;'A'
  1387  00FEDD  4C                 	db	76	;'L'
  1388  00FEDE  4C                 	db	76	;'L'
  1389  00FEDF  20                 	db	32
  1390  00FEE0  43                 	db	67	;'C'
  1391  00FEE1  41                 	db	65	;'A'
  1392  00FEE2  4E                 	db	78	;'N'
  1393  00FEE3  53                 	db	83	;'S'
  1394  00FEE4  00                 	db	0
  1395  00FEE5                     STR_90:
  1396  00FEE5  54                 	db	84	;'T'
  1397  00FEE6  53                 	db	83	;'S'
  1398  00FEE7  54                 	db	84	;'T'
  1399  00FEE8  3A                 	db	58	;':'
  1400  00FEE9  20                 	db	32
  1401  00FEEA  44                 	db	68	;'D'
  1402  00FEEB  43                 	db	67	;'C'
  1403  00FEEC  20                 	db	32
  1404  00FEED  4D                 	db	77	;'M'
  1405  00FEEE  4F                 	db	79	;'O'
  1406  00FEEF  54                 	db	84	;'T'
  1407  00FEF0  4F                 	db	79	;'O'
  1408  00FEF1  52                 	db	82	;'R'
  1409  00FEF2  53                 	db	83	;'S'
  1410  00FEF3  00                 	db	0
  1411  00FEF4                     STR_70:
  1412  00FEF4  41                 	db	65	;'A'
  1413  00FEF5  4C                 	db	76	;'L'
  1414  00FEF6  47                 	db	71	;'G'
  1415  00FEF7  4F                 	db	79	;'O'
  1416  00FEF8  52                 	db	82	;'R'
  1417  00FEF9  49                 	db	73	;'I'
  1418  00FEFA  54                 	db	84	;'T'
  1419  00FEFB  48                 	db	72	;'H'
  1420  00FEFC  4D                 	db	77	;'M'
  1421  00FEFD  20                 	db	32
  1422  00FEFE  54                 	db	84	;'T'
  1423  00FEFF  45                 	db	69	;'E'
  1424  00FF00  53                 	db	83	;'S'
  1425  00FF01  54                 	db	84	;'T'
  1426  00FF02  00                 	db	0
  1427  00FF03                     STR_91:
  1428  00FF03  50                 	db	80	;'P'
  1429  00FF04  49                 	db	73	;'I'
  1430  00FF05  4E                 	db	78	;'N'
  1431  00FF06  20                 	db	32
  1432  00FF07  52                 	db	82	;'R'
  1433  00FF08  41                 	db	65	;'A'
  1434  00FF09  35                 	db	53	;'5'
  1435  00FF0A  20                 	db	32
  1436  00FF0B  48                 	db	72	;'H'
  1437  00FF0C  49                 	db	73	;'I'
  1438  00FF0D  47                 	db	71	;'G'
  1439  00FF0E  48                 	db	72	;'H'
  1440  00FF0F  2E                 	db	46
  1441  00FF10  00                 	db	0
  1442  00FF11                     STR_73:
  1443  00FF11  41                 	db	65	;'A'
  1444  00FF12  4C                 	db	76	;'L'
  1445  00FF13  47                 	db	71	;'G'
  1446  00FF14  32                 	db	50	;'2'
  1447  00FF15  3A                 	db	58	;':'
  1448  00FF16  20                 	db	32
  1449  00FF17  31                 	db	49	;'1'
  1450  00FF18  32                 	db	50	;'2'
  1451  00FF19  20                 	db	32
  1452  00FF1A  43                 	db	67	;'C'
  1453  00FF1B  41                 	db	65	;'A'
  1454  00FF1C  4E                 	db	78	;'N'
  1455  00FF1D  53                 	db	83	;'S'
  1456  00FF1E  00                 	db	0
  1457  00FF1F                     STR_76:
  1458  00FF1F  41                 	db	65	;'A'
  1459  00FF20  4C                 	db	76	;'L'
  1460  00FF21  47                 	db	71	;'G'
  1461  00FF22  35                 	db	53	;'5'
  1462  00FF23  3A                 	db	58	;':'
  1463  00FF24  20                 	db	32
  1464  00FF25  4E                 	db	78	;'N'
  1465  00FF26  4F                 	db	79	;'O'
  1466  00FF27  20                 	db	32
  1467  00FF28  43                 	db	67	;'C'
  1468  00FF29  41                 	db	65	;'A'
  1469  00FF2A  4E                 	db	78	;'N'
  1470  00FF2B  53                 	db	83	;'S'
  1471  00FF2C  00                 	db	0
  1472  00FF2D                     STR_71:
  1473  00FF2D  50                 	db	80	;'P'
  1474  00FF2E  55                 	db	85	;'U'
  1475  00FF2F  53                 	db	83	;'S'
  1476  00FF30  48                 	db	72	;'H'
  1477  00FF31  20                 	db	32
  1478  00FF32  54                 	db	84	;'T'
  1479  00FF33  4F                 	db	79	;'O'
  1480  00FF34  20                 	db	32
  1481  00FF35  53                 	db	83	;'S'
  1482  00FF36  54                 	db	84	;'T'
  1483  00FF37  41                 	db	65	;'A'
  1484  00FF38  52                 	db	82	;'R'
  1485  00FF39  54                 	db	84	;'T'
  1486  00FF3A  00                 	db	0
  1487  00FF3B                     STR_23:
  1488  00FF3B  25                 	db	37
  1489  00FF3C  64                 	db	100	;'d'
  1490  00FF3D  20                 	db	32
  1491  00FF3E  4D                 	db	77	;'M'
  1492  00FF3F  49                 	db	73	;'I'
  1493  00FF40  4E                 	db	78	;'N'
  1494  00FF41  20                 	db	32
  1495  00FF42  25                 	db	37
  1496  00FF43  64                 	db	100	;'d'
  1497  00FF44  20                 	db	32
  1498  00FF45  53                 	db	83	;'S'
  1499  00FF46  45                 	db	69	;'E'
  1500  00FF47  43                 	db	67	;'C'
  1501  00FF48  00                 	db	0
  1502  00FF49                     STR_2:
  1503  00FF49  54                 	db	84	;'T'
  1504  00FF4A  49                 	db	73	;'I'
  1505  00FF4B  4D                 	db	77	;'M'
  1506  00FF4C  45                 	db	69	;'E'
  1507  00FF4D  3A                 	db	58	;':'
  1508  00FF4E  20                 	db	32
  1509  00FF4F  25                 	db	37
  1510  00FF50  64                 	db	100	;'d'
  1511  00FF51  3A                 	db	58	;':'
  1512  00FF52  25                 	db	37
  1513  00FF53  30                 	db	48	;'0'
  1514  00FF54  32                 	db	50	;'2'
  1515  00FF55  64                 	db	100	;'d'
  1516  00FF56  00                 	db	0
  1517  00FF57                     STR_79:
  1518  00FF57  54                 	db	84	;'T'
  1519  00FF58  53                 	db	83	;'S'
  1520  00FF59  54                 	db	84	;'T'
  1521  00FF5A  3A                 	db	58	;':'
  1522  00FF5B  20                 	db	32
  1523  00FF5C  49                 	db	73	;'I'
  1524  00FF5D  52                 	db	82	;'R'
  1525  00FF5E  20                 	db	32
  1526  00FF5F  53                 	db	83	;'S'
  1527  00FF60  4E                 	db	78	;'N'
  1528  00FF61  53                 	db	83	;'S'
  1529  00FF62  52                 	db	82	;'R'
  1530  00FF63  00                 	db	0
  1531  00FF64                     STR_74:
  1532  00FF64  41                 	db	65	;'A'
  1533  00FF65  4C                 	db	76	;'L'
  1534  00FF66  47                 	db	71	;'G'
  1535  00FF67  33                 	db	51	;'3'
  1536  00FF68  3A                 	db	58	;':'
  1537  00FF69  20                 	db	32
  1538  00FF6A  31                 	db	49	;'1'
  1539  00FF6B  20                 	db	32
  1540  00FF6C  43                 	db	67	;'C'
  1541  00FF6D  41                 	db	65	;'A'
  1542  00FF6E  4E                 	db	78	;'N'
  1543  00FF6F  00                 	db	0
  1544  00FF70                     STR_93:
  1545  00FF70  50                 	db	80	;'P'
  1546  00FF71  49                 	db	73	;'I'
  1547  00FF72  4E                 	db	78	;'N'
  1548  00FF73  20                 	db	32
  1549  00FF74  52                 	db	82	;'R'
  1550  00FF75  41                 	db	65	;'A'
  1551  00FF76  33                 	db	51	;'3'
  1552  00FF77  2E                 	db	46
  1553  00FF78  2E                 	db	46
  1554  00FF79  2E                 	db	46
  1555  00FF7A  00                 	db	0
  1556  00FF7B                     STR_95:
  1557  00FF7B  50                 	db	80	;'P'
  1558  00FF7C  49                 	db	73	;'I'
  1559  00FF7D  4E                 	db	78	;'N'
  1560  00FF7E  20                 	db	32
  1561  00FF7F  52                 	db	82	;'R'
  1562  00FF80  41                 	db	65	;'A'
  1563  00FF81  34                 	db	52	;'4'
  1564  00FF82  2E                 	db	46
  1565  00FF83  2E                 	db	46
  1566  00FF84  2E                 	db	46
  1567  00FF85  00                 	db	0
  1568  00FF86                     STR_84:
  1569  00FF86  54                 	db	84	;'T'
  1570  00FF87  53                 	db	83	;'S'
  1571  00FF88  54                 	db	84	;'T'
  1572  00FF89  3A                 	db	58	;':'
  1573  00FF8A  20                 	db	32
  1574  00FF8B  43                 	db	67	;'C'
  1575  00FF8C  4F                 	db	79	;'O'
  1576  00FF8D  4E                 	db	78	;'N'
  1577  00FF8E  44                 	db	68	;'D'
  1578  00FF8F  00                 	db	0
  1579  00FF90                     STR_88:
  1580  00FF90  41                 	db	65	;'A'
  1581  00FF91  43                 	db	67	;'C'
  1582  00FF92  54                 	db	84	;'T'
  1583  00FF93  55                 	db	85	;'U'
  1584  00FF94  41                 	db	65	;'A'
  1585  00FF95  54                 	db	84	;'T'
  1586  00FF96  4F                 	db	79	;'O'
  1587  00FF97  52                 	db	82	;'R'
  1588  00FF98  53                 	db	83	;'S'
  1589  00FF99  00                 	db	0
  1590  00FF9A                     STR_22:
  1591  00FF9A  44                 	db	68	;'D'
  1592  00FF9B  55                 	db	85	;'U'
  1593  00FF9C  52                 	db	82	;'R'
  1594  00FF9D  41                 	db	65	;'A'
  1595  00FF9E  54                 	db	84	;'T'
  1596  00FF9F  49                 	db	73	;'I'
  1597  00FFA0  4F                 	db	79	;'O'
  1598  00FFA1  4E                 	db	78	;'N'
  1599  00FFA2  3A                 	db	58	;':'
  1600  00FFA3  00                 	db	0
  1601  00FFA4                     STR_86:
  1602  00FFA4  43                 	db	67	;'C'
  1603  00FFA5  4F                 	db	79	;'O'
  1604  00FFA6  4E                 	db	78	;'N'
  1605  00FFA7  44                 	db	68	;'D'
  1606  00FFA8  3A                 	db	58	;':'
  1607  00FFA9  20                 	db	32
  1608  00FFAA  25                 	db	37
  1609  00FFAB  64                 	db	100	;'d'
  1610  00FFAC  00                 	db	0
  1611  00FFAD                     STR_77:
  1612  00FFAD  53                 	db	83	;'S'
  1613  00FFAE  45                 	db	69	;'E'
  1614  00FFAF  4E                 	db	78	;'N'
  1615  00FFB0  53                 	db	83	;'S'
  1616  00FFB1  4F                 	db	79	;'O'
  1617  00FFB2  52                 	db	82	;'R'
  1618  00FFB3  53                 	db	83	;'S'
  1619  00FFB4  00                 	db	0
  1620  00FFB5                     STR_128:
  1621  00FFB5  28                 	db	40
  1622  00FFB6  6E                 	db	110	;'n'
  1623  00FFB7  75                 	db	117	;'u'
  1624  00FFB8  6C                 	db	108	;'l'
  1625  00FFB9  6C                 	db	108	;'l'
  1626  00FFBA  29                 	db	41
  1627  00FFBB  00                 	db	0
  1628  00FFBC                     STR_67:
  1629  00FFBC  46                 	db	70	;'F'
  1630  00FFBD  41                 	db	65	;'A'
  1631  00FFBE  49                 	db	73	;'I'
  1632  00FFBF  4C                 	db	76	;'L'
  1633  00FFC0  45                 	db	69	;'E'
  1634  00FFC1  44                 	db	68	;'D'
  1635  00FFC2  00                 	db	0
  1636  00FFC3                     STR_7:
  1637  00FFC3  53                 	db	83	;'S'
  1638  00FFC4  54                 	db	84	;'T'
  1639  00FFC5  41                 	db	65	;'A'
  1640  00FFC6  52                 	db	82	;'R'
  1641  00FFC7  54                 	db	84	;'T'
  1642  00FFC8  3A                 	db	58	;':'
  1643  00FFC9  00                 	db	0
  1644  00FFCA                     STR_9:
  1645  00FFCA  46                 	db	70	;'F'
  1646  00FFCB  45                 	db	69	;'E'
  1647  00FFCC  42                 	db	66	;'B'
  1648  00FFCD  00                 	db	0
  1649  00FFCE                     STR_19:
  1650  00FFCE  44                 	db	68	;'D'
  1651  00FFCF  45                 	db	69	;'E'
  1652  00FFD0  43                 	db	67	;'C'
  1653  00FFD1  00                 	db	0
  1654  00FFD2                     STR_15:
  1655  00FFD2  41                 	db	65	;'A'
  1656  00FFD3  55                 	db	85	;'U'
  1657  00FFD4  47                 	db	71	;'G'
  1658  00FFD5  00                 	db	0
  1659  00FFD6                     STR_14:
  1660  00FFD6  4A                 	db	74	;'J'
  1661  00FFD7  55                 	db	85	;'U'
  1662  00FFD8  4C                 	db	76	;'L'
  1663  00FFD9  00                 	db	0
  1664  00FFDA                     STR_8:
  1665  00FFDA  4A                 	db	74	;'J'
  1666  00FFDB  41                 	db	65	;'A'
  1667  00FFDC  4E                 	db	78	;'N'
  1668  00FFDD  00                 	db	0
  1669  00FFDE                     STR_13:
  1670  00FFDE  4A                 	db	74	;'J'
  1671  00FFDF  55                 	db	85	;'U'
  1672  00FFE0  4E                 	db	78	;'N'
  1673  00FFE1  00                 	db	0
  1674  00FFE2                     STR_16:
  1675  00FFE2  53                 	db	83	;'S'
  1676  00FFE3  45                 	db	69	;'E'
  1677  00FFE4  50                 	db	80	;'P'
  1678  00FFE5  00                 	db	0
  1679  00FFE6                     STR_10:
  1680  00FFE6  4D                 	db	77	;'M'
  1681  00FFE7  41                 	db	65	;'A'
  1682  00FFE8  52                 	db	82	;'R'
  1683  00FFE9  00                 	db	0
  1684  00FFEA                     STR_11:
  1685  00FFEA  41                 	db	65	;'A'
  1686  00FFEB  50                 	db	80	;'P'
  1687  00FFEC  52                 	db	82	;'R'
  1688  00FFED  00                 	db	0
  1689  00FFEE                     STR_20:
  1690  00FFEE  45                 	db	69	;'E'
  1691  00FFEF  52                 	db	82	;'R'
  1692  00FFF0  52                 	db	82	;'R'
  1693  00FFF1  00                 	db	0
  1694  00FFF2                     STR_17:
  1695  00FFF2  4F                 	db	79	;'O'
  1696  00FFF3  43                 	db	67	;'C'
  1697  00FFF4  54                 	db	84	;'T'
  1698  00FFF5  00                 	db	0
  1699  00FFF6                     STR_18:
  1700  00FFF6  4E                 	db	78	;'N'
  1701  00FFF7  4F                 	db	79	;'O'
  1702  00FFF8  56                 	db	86	;'V'
  1703  00FFF9  00                 	db	0
  1704  00FFFA                     STR_12:
  1705  00FFFA  4D                 	db	77	;'M'
  1706  00FFFB  41                 	db	65	;'A'
  1707  00FFFC  59                 	db	89	;'Y'
  1708  00FFFD  00                 	db	0
  1709  0000                     
  1710                           ; #config settings
  1711  00FFFE  00                 	db	0	; dummy byte at the end
  1712  0000                     
  1713                           	psect	cinit
  1714  0056B6                     __pcinit:
  1715                           	opt stack 0
  1716  0056B6                     start_initialization:
  1717                           	opt stack 0
  1718  0056B6                     __initialization:
  1719                           	opt stack 0
  1720                           
  1721                           ; Initialize objects allocated to BANK1 (8 bytes)
  1722                           ; load TBLPTR registers with __pidataBANK1
  1723  0056B6  0EB0               	movlw	low __pidataBANK1
  1724  0056B8  6EF6               	movwf	tblptrl,c
  1725  0056BA  0E5E               	movlw	high __pidataBANK1
  1726  0056BC  6EF7               	movwf	tblptrh,c
  1727  0056BE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1728  0056C0  6EF8               	movwf	tblptru,c
  1729  0056C2  EE01  F04D         	lfsr	0,__pdataBANK1
  1730  0056C6  EE10 F008          	lfsr	1,8
  1731  0056CA                     copy_data0:
  1732  0056CA  0009               	tblrd		*+
  1733  0056CC  CFF5 FFEE          	movff	tablat,postinc0
  1734  0056D0  50E5               	movf	postdec1,w,c
  1735  0056D2  50E1               	movf	fsr1l,w,c
  1736  0056D4  E1FA               	bnz	copy_data0
  1737                           
  1738                           ; Clear objects allocated to BANK1 (77 bytes)
  1739  0056D6  EE01  F000         	lfsr	0,__pbssBANK1
  1740  0056DA  0E4D               	movlw	77
  1741  0056DC                     clear_0:
  1742  0056DC  6AEE               	clrf	postinc0,c
  1743  0056DE  06E8               	decf	wreg,f,c
  1744  0056E0  E1FD               	bnz	clear_0
  1745                           
  1746                           ; Clear objects allocated to BANK0 (38 bytes)
  1747  0056E2  EE00  F0DA         	lfsr	0,__pbssBANK0
  1748  0056E6  0E26               	movlw	38
  1749  0056E8                     clear_1:
  1750  0056E8  6AEE               	clrf	postinc0,c
  1751  0056EA  06E8               	decf	wreg,f,c
  1752  0056EC  E1FD               	bnz	clear_1
  1753                           
  1754                           ; Clear objects allocated to COMRAM (35 bytes)
  1755  0056EE  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1756  0056F2  0E23               	movlw	35
  1757  0056F4                     clear_2:
  1758  0056F4  6AEE               	clrf	postinc0,c
  1759  0056F6  06E8               	decf	wreg,f,c
  1760  0056F8  E1FD               	bnz	clear_2
  1761  0056FA                     end_of_initialization:
  1762                           	opt stack 0
  1763  0056FA                     __end_of__initialization:
  1764                           	opt stack 0
  1765  0056FA  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1766  0056FC  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1767  0056FE  0100               	movlb	0
  1768  005700  EFE7  F024         	goto	_main	;jump to C main() function
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           
  1778                           	psect	bssCOMRAM
  1779  00005B                     __pbssCOMRAM:
  1780                           	opt stack 0
  1781  00005B                     _servoTimes:
  1782                           	opt stack 0
  1783  00005B                     	ds	8
  1784  000063                     _back:
  1785                           	opt stack 0
  1786  000063                     	ds	2
  1787  000065                     _down:
  1788                           	opt stack 0
  1789  000065                     	ds	2
  1790  000067                     _enter:
  1791                           	opt stack 0
  1792  000067                     	ds	2
  1793  000069                     _f_panning_to_bin:
  1794                           	opt stack 0
  1795  000069                     	ds	2
  1796  00006B                     _pan_servo_state:
  1797                           	opt stack 0
  1798  00006B                     	ds	2
  1799  00006D                     _servo_timer_counter:
  1800                           	opt stack 0
  1801  00006D                     	ds	2
  1802  00006F                     _servo_timer_target:
  1803                           	opt stack 0
  1804  00006F                     	ds	2
  1805  000071                     _tilt_servo_state:
  1806                           	opt stack 0
  1807  000071                     	ds	2
  1808  000073                     _timer2_counter:
  1809                           	opt stack 0
  1810  000073                     	ds	2
  1811  000075                     _up:
  1812                           	opt stack 0
  1813  000075                     	ds	2
  1814  000077                     _was_low_1:
  1815                           	opt stack 0
  1816  000077                     	ds	2
  1817  000079                     _was_low_2:
  1818                           	opt stack 0
  1819  000079                     	ds	2
  1820  00007B                     _was_low_3:
  1821                           	opt stack 0
  1822  00007B                     	ds	2
  1823  00007D                     _input:
  1824                           	opt stack 0
  1825  00007D                     	ds	1
  1826                           tblptru	equ	0xFF8
  1827                           tblptrh	equ	0xFF7
  1828                           tblptrl	equ	0xFF6
  1829                           tablat	equ	0xFF5
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postdec1	equ	0xFE5
  1833                           fsr1l	equ	0xFE1
  1834                           
  1835                           	psect	bssBANK0
  1836  0000DA                     __pbssBANK0:
  1837                           	opt stack 0
  1838  0000DA                     _sensor_outputs:
  1839                           	opt stack 0
  1840  0000DA                     	ds	4
  1841  0000DE                     _COND_signal:
  1842                           	opt stack 0
  1843  0000DE                     	ds	2
  1844  0000E0                     _IR_signal:
  1845                           	opt stack 0
  1846  0000E0                     	ds	2
  1847  0000E2                     _MAG_signal:
  1848                           	opt stack 0
  1849  0000E2                     	ds	2
  1850  0000E4                     _RTCflag:
  1851                           	opt stack 0
  1852  0000E4                     	ds	2
  1853  0000E6                     _cur_state:
  1854                           	opt stack 0
  1855  0000E6                     	ds	2
  1856  0000E8                     _f_arm_position:
  1857                           	opt stack 0
  1858  0000E8                     	ds	2
  1859  0000EA                     _f_lastCan:
  1860                           	opt stack 0
  1861  0000EA                     	ds	2
  1862  0000EC                     _f_loadingNewCan:
  1863                           	opt stack 0
  1864  0000EC                     	ds	2
  1865  0000EE                     _log:
  1866                           	opt stack 0
  1867  0000EE                     	ds	2
  1868  0000F0                     _log_completion:
  1869                           	opt stack 0
  1870  0000F0                     	ds	2
  1871  0000F2                     _log_count_pop_no_tab:
  1872                           	opt stack 0
  1873  0000F2                     	ds	2
  1874  0000F4                     _log_count_pop_w_tab:
  1875                           	opt stack 0
  1876  0000F4                     	ds	2
  1877  0000F6                     _log_total_time:
  1878                           	opt stack 0
  1879  0000F6                     	ds	2
  1880  0000F8                     _logstate:
  1881                           	opt stack 0
  1882  0000F8                     	ds	2
  1883  0000FA                     _total_time:
  1884                           	opt stack 0
  1885  0000FA                     	ds	2
  1886  0000FC                     _machine_state:
  1887                           	opt stack 0
  1888  0000FC                     	ds	1
  1889  0000FD                     _sel:
  1890                           	opt stack 0
  1891  0000FD                     	ds	1
  1892  0000FE                     _count_total:
  1893                           	opt stack 0
  1894  0000FE                     	ds	2
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postdec1	equ	0xFE5
  1902                           fsr1l	equ	0xFE1
  1903                           
  1904                           	psect	bssBANK1
  1905  000100                     __pbssBANK1:
  1906                           	opt stack 0
  1907  000100                     _log_startTime:
  1908                           	opt stack 0
  1909  000100                     	ds	14
  1910  00010E                     _startTime:
  1911                           	opt stack 0
  1912  00010E                     	ds	14
  1913  00011C                     _time:
  1914                           	opt stack 0
  1915  00011C                     	ds	7
  1916  000123                     _agitator_toggle_count:
  1917                           	opt stack 0
  1918  000123                     	ds	2
  1919  000125                     _count_can_no_lab:
  1920                           	opt stack 0
  1921  000125                     	ds	2
  1922  000127                     _count_can_w_lab:
  1923                           	opt stack 0
  1924  000127                     	ds	2
  1925  000129                     _count_pop_no_tab:
  1926                           	opt stack 0
  1927  000129                     	ds	2
  1928  00012B                     _count_pop_w_tab:
  1929                           	opt stack 0
  1930  00012B                     	ds	2
  1931  00012D                     _cur_can:
  1932                           	opt stack 0
  1933  00012D                     	ds	2
  1934  00012F                     _debug:
  1935                           	opt stack 0
  1936  00012F                     	ds	2
  1937  000131                     _f_ID_receive:
  1938                           	opt stack 0
  1939  000131                     	ds	2
  1940  000133                     _f_can_coming_to_ID:
  1941                           	opt stack 0
  1942  000133                     	ds	2
  1943  000135                     _f_can_coming_to_distribution:
  1944                           	opt stack 0
  1945  000135                     	ds	2
  1946  000137                     _f_can_distributed:
  1947                           	opt stack 0
  1948  000137                     	ds	2
  1949  000139                     _f_most_recent_sort_time:
  1950                           	opt stack 0
  1951  000139                     	ds	2
  1952  00013B                     _first:
  1953                           	opt stack 0
  1954  00013B                     	ds	2
  1955  00013D                     _firstboot:
  1956                           	opt stack 0
  1957  00013D                     	ds	2
  1958  00013F                     _i:
  1959                           	opt stack 0
  1960  00013F                     	ds	2
  1961  000141                     _log_count_can_no_lab:
  1962                           	opt stack 0
  1963  000141                     	ds	2
  1964  000143                     _log_count_can_w_lab:
  1965                           	opt stack 0
  1966  000143                     	ds	2
  1967  000145                     _log_count_total:
  1968                           	opt stack 0
  1969  000145                     	ds	2
  1970  000147                     _most_recent_sort_time:
  1971                           	opt stack 0
  1972  000147                     	ds	2
  1973  000149                     _motor_toggle_count:
  1974                           	opt stack 0
  1975  000149                     	ds	2
  1976  00014B                     _var:
  1977                           	opt stack 0
  1978  00014B                     	ds	2
  1979                           tblptru	equ	0xFF8
  1980                           tblptrh	equ	0xFF7
  1981                           tblptrl	equ	0xFF6
  1982                           tablat	equ	0xFF5
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           postdec1	equ	0xFE5
  1986                           fsr1l	equ	0xFE1
  1987                           
  1988                           	psect	dataBANK1
  1989  00014D                     __pdataBANK1:
  1990                           	opt stack 0
  1991  00014D                     UI@F3250:
  1992                           	opt stack 0
  1993  00014D                     	ds	4
  1994  000151                     printRTC@F3240:
  1995                           	opt stack 0
  1996  000151                     	ds	4
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           postinc0	equ	0xFEE
  2002                           wreg	equ	0xFE8
  2003                           postdec1	equ	0xFE5
  2004                           fsr1l	equ	0xFE1
  2005                           
  2006                           	psect	cstackBANK0
  2007  000080                     __pcstackBANK0:
  2008                           	opt stack 0
  2009  000080                     ??_delay_ms:
  2010  000080                     ??_isdigit:
  2011  000080                     ??_readADC:
  2012  000080                     ??_I2C_Master_Wait:
  2013  000080                     ?___wmul:
  2014                           	opt stack 0
  2015  000080                     ?___awmod:
  2016                           	opt stack 0
  2017  000080                     ?___lwdiv:
  2018                           	opt stack 0
  2019  000080                     ?___ftpack:
  2020                           	opt stack 0
  2021  000080                     ?___lldiv:
  2022                           	opt stack 0
  2023  000080                     lcdNibble@temp:
  2024                           	opt stack 0
  2025  000080                     initTime@m:
  2026                           	opt stack 0
  2027  000080                     updateServoPosition@time_us:
  2028                           	opt stack 0
  2029  000080                     EEPROM_read@address:
  2030                           	opt stack 0
  2031  000080                     ___wmul@multiplier:
  2032                           	opt stack 0
  2033  000080                     ___awmod@dividend:
  2034                           	opt stack 0
  2035  000080                     ___lwdiv@dividend:
  2036                           	opt stack 0
  2037  000080                     strcpy@to:
  2038                           	opt stack 0
  2039  000080                     ___ftpack@arg:
  2040                           	opt stack 0
  2041  000080                     ___lldiv@dividend:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x0
  2045  000080                     	ds	1
  2046  000081                     readADC@channel:
  2047                           	opt stack 0
  2048  000081                     I2C_Master_Read@a:
  2049                           	opt stack 0
  2050  000081                     lcdNibble@data:
  2051                           	opt stack 0
  2052  000081                     initTime@h:
  2053                           	opt stack 0
  2054  000081                     delay_ms@milliseconds:
  2055                           	opt stack 0
  2056  000081                     _isdigit$2070:
  2057                           	opt stack 0
  2058  000081                     I2C_Master_Write@d:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x1
  2062  000081                     	ds	1
  2063  000082                     ??_readMAG:
  2064  000082                     ??_readCOND:
  2065  000082                     I2C_Master_Read@temp:
  2066                           	opt stack 0
  2067  000082                     lcdInst@data:
  2068                           	opt stack 0
  2069  000082                     putch@data:
  2070                           	opt stack 0
  2071  000082                     initTime@w:
  2072                           	opt stack 0
  2073  000082                     isdigit@c:
  2074                           	opt stack 0
  2075  000082                     readIR@ana_port:
  2076                           	opt stack 0
  2077  000082                     updateServoPosition@timer:
  2078                           	opt stack 0
  2079  000082                     ___wmul@multiplicand:
  2080                           	opt stack 0
  2081  000082                     ___awmod@divisor:
  2082                           	opt stack 0
  2083  000082                     ___lwdiv@divisor:
  2084                           	opt stack 0
  2085  000082                     strcpy@from:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x2
  2089  000082                     	ds	1
  2090  000083                     ??_initLCD:
  2091  000083                     initTime@DD:
  2092                           	opt stack 0
  2093  000083                     ___ftpack@exp:
  2094                           	opt stack 0
  2095  000083                     getRTC@i:
  2096                           	opt stack 0
  2097                           
  2098                           ; 2 bytes @ 0x3
  2099  000083                     	ds	1
  2100  000084                     ??_updateServoPosition:
  2101  000084                     ??_readIR:
  2102  000084                     initTime@MM:
  2103                           	opt stack 0
  2104  000084                     ___awmod@counter:
  2105                           	opt stack 0
  2106  000084                     ___ftpack@sign:
  2107                           	opt stack 0
  2108  000084                     readMAG@res:
  2109                           	opt stack 0
  2110  000084                     readCOND@res:
  2111                           	opt stack 0
  2112  000084                     ___wmul@product:
  2113                           	opt stack 0
  2114  000084                     ___lwdiv@quotient:
  2115                           	opt stack 0
  2116  000084                     strcpy@cp:
  2117                           	opt stack 0
  2118  000084                     ___lldiv@divisor:
  2119                           	opt stack 0
  2120                           
  2121                           ; 4 bytes @ 0x4
  2122  000084                     	ds	1
  2123  000085                     ??_initSortTimer:
  2124  000085                     ??___ftpack:
  2125  000085                     initTime@YY:
  2126                           	opt stack 0
  2127  000085                     ___awmod@sign:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x5
  2131  000085                     	ds	1
  2132  000086                     ??_getMAG:
  2133  000086                     ?___awdiv:
  2134                           	opt stack 0
  2135  000086                     initTime@s:
  2136                           	opt stack 0
  2137  000086                     ___lwdiv@counter:
  2138                           	opt stack 0
  2139  000086                     readIR@res:
  2140                           	opt stack 0
  2141  000086                     updateServoPosition@my_time:
  2142                           	opt stack 0
  2143  000086                     ___awdiv@dividend:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0x6
  2147  000086                     	ds	1
  2148  000087                     ?___lwmod:
  2149                           	opt stack 0
  2150  000087                     ___lwmod@dividend:
  2151                           	opt stack 0
  2152                           
  2153                           ; 2 bytes @ 0x7
  2154  000087                     	ds	1
  2155  000088                     ??_Distribution:
  2156  000088                     ??_initServos:
  2157  000088                     initSortTimer@i:
  2158                           	opt stack 0
  2159  000088                     getIR@port:
  2160                           	opt stack 0
  2161  000088                     ___awdiv@divisor:
  2162                           	opt stack 0
  2163  000088                     ___lldiv@quotient:
  2164                           	opt stack 0
  2165                           
  2166                           ; 4 bytes @ 0x8
  2167  000088                     	ds	1
  2168  000089                     ___lwmod@divisor:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x9
  2172  000089                     	ds	1
  2173  00008A                     ??_getIR:
  2174  00008A                     ___awdiv@counter:
  2175                           	opt stack 0
  2176                           
  2177                           ; 1 bytes @ 0xA
  2178  00008A                     	ds	1
  2179  00008B                     ___awdiv@sign:
  2180                           	opt stack 0
  2181  00008B                     ___lwmod@counter:
  2182                           	opt stack 0
  2183  00008B                     getIR@i:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0xB
  2187  00008B                     	ds	1
  2188  00008C                     ___lldiv@counter:
  2189                           	opt stack 0
  2190  00008C                     ___awdiv@quotient:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0xC
  2194  00008C                     	ds	1
  2195  00008D                     I2C_Master_Init@c:
  2196                           	opt stack 0
  2197                           
  2198                           ; 4 bytes @ 0xD
  2199  00008D                     	ds	1
  2200  00008E                     ?_printf:
  2201                           	opt stack 0
  2202  00008E                     ?___awtoft:
  2203                           	opt stack 0
  2204  00008E                     printf@f:
  2205                           	opt stack 0
  2206  00008E                     ___awtoft@c:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0xE
  2210  00008E                     	ds	3
  2211  000091                     ??_I2C_Master_Init:
  2212  000091                     ___awtoft@sign:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x11
  2216  000091                     	ds	1
  2217  000092                     ___ftge@ff1:
  2218                           	opt stack 0
  2219                           
  2220                           ; 3 bytes @ 0x12
  2221  000092                     	ds	3
  2222  000095                     ??_loadRTC:
  2223  000095                     ___ftge@ff2:
  2224                           	opt stack 0
  2225                           
  2226                           ; 3 bytes @ 0x15
  2227  000095                     	ds	1
  2228  000096                     loadRTC@i:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x16
  2232  000096                     	ds	2
  2233  000098                     ??___ftge:
  2234                           
  2235                           ; 1 bytes @ 0x18
  2236  000098                     	ds	2
  2237  00009A                     ??_printf:
  2238                           
  2239                           ; 1 bytes @ 0x1A
  2240  00009A                     	ds	1
  2241  00009B                     ??_ID:
  2242                           
  2243                           ; 1 bytes @ 0x1B
  2244  00009B                     	ds	2
  2245  00009D                     ID@time_1150:
  2246                           	opt stack 0
  2247                           
  2248                           ; 1 bytes @ 0x1D
  2249  00009D                     	ds	1
  2250  00009E                     _ID$1141:
  2251                           	opt stack 0
  2252  00009E                     printf@prec:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x1E
  2256  00009E                     	ds	1
  2257  00009F                     _ID$1149:
  2258                           	opt stack 0
  2259  00009F                     printf@cp:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x1F
  2263  00009F                     	ds	1
  2264  0000A0                     _ID$1154:
  2265                           	opt stack 0
  2266                           
  2267                           ; 1 bytes @ 0x20
  2268  0000A0                     	ds	1
  2269  0000A1                     ID@i:
  2270                           	opt stack 0
  2271  0000A1                     printf@ap:
  2272                           	opt stack 0
  2273                           
  2274                           ; 2 bytes @ 0x21
  2275  0000A1                     	ds	2
  2276  0000A3                     ID@i_1148:
  2277                           	opt stack 0
  2278  0000A3                     printf@len:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x23
  2282  0000A3                     	ds	2
  2283  0000A5                     ID@i_1153:
  2284                           	opt stack 0
  2285  0000A5                     printf@val:
  2286                           	opt stack 0
  2287                           
  2288                           ; 2 bytes @ 0x25
  2289  0000A5                     	ds	2
  2290  0000A7                     printf@flag:
  2291                           	opt stack 0
  2292  0000A7                     ID@i_1155:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x27
  2296  0000A7                     	ds	1
  2297  0000A8                     printf@c:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x28
  2301  0000A8                     	ds	1
  2302  0000A9                     ID@time:
  2303                           	opt stack 0
  2304  0000A9                     printf@width:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x29
  2308  0000A9                     	ds	1
  2309  0000AA                     ID@res1:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x2A
  2313  0000AA                     	ds	1
  2314  0000AB                     ??_printRTC:
  2315  0000AB                     ??_algorithmTest:
  2316  0000AB                     ??_sensorTest:
  2317  0000AB                     ??_actuatorTest:
  2318  0000AB                     ??_arm:
  2319  0000AB                     ??_PortTestDC:
  2320  0000AB                     ??_SpeedTest:
  2321  0000AB                     ??_PortTestPusher:
  2322  0000AB                     ??_PlatformTest:
  2323  0000AB                     ??_BothServos:
  2324  0000AB                     ??_BlockerTest:
  2325  0000AB                     EEPROM_write@address:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x2B
  2329  0000AB                     	ds	1
  2330  0000AC                     ID@res2:
  2331                           	opt stack 0
  2332  0000AC                     arm@on:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x2C
  2336  0000AC                     	ds	1
  2337  0000AD                     EEPROM_write@data:
  2338                           	opt stack 0
  2339  0000AD                     actuatorTest@i_1745:
  2340                           	opt stack 0
  2341  0000AD                     sensorTest@res:
  2342                           	opt stack 0
  2343  0000AD                     PlatformTest@res:
  2344                           	opt stack 0
  2345  0000AD                     BlockerTest@i:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x2D
  2349  0000AD                     	ds	1
  2350  0000AE                     ??_EEPROM_write:
  2351  0000AE                     actuatorTest@i_1752:
  2352                           	opt stack 0
  2353  0000AE                     ID@res:
  2354                           	opt stack 0
  2355  0000AE                     printRTC@INT_time:
  2356                           	opt stack 0
  2357                           
  2358                           ; 14 bytes @ 0x2E
  2359  0000AE                     	ds	1
  2360  0000AF                     EEPROM_write@i:
  2361                           	opt stack 0
  2362  0000AF                     actuatorTest@i_1753:
  2363                           	opt stack 0
  2364  0000AF                     PlatformTest@res_1797:
  2365                           	opt stack 0
  2366  0000AF                     BlockerTest@res:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x2F
  2370  0000AF                     	ds	1
  2371  0000B0                     EEPROM_write@i_1413:
  2372                           	opt stack 0
  2373  0000B0                     actuatorTest@i_1755:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x30
  2377  0000B0                     	ds	1
  2378  0000B1                     ??_Loading:
  2379  0000B1                     logRun@num:
  2380                           	opt stack 0
  2381  0000B1                     actuatorTest@i_1756:
  2382                           	opt stack 0
  2383  0000B1                     PlatformTest@i:
  2384                           	opt stack 0
  2385  0000B1                     BlockerTest@cam_flag:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x31
  2389  0000B1                     	ds	1
  2390  0000B2                     logRun@byte1:
  2391                           	opt stack 0
  2392  0000B2                     actuatorTest@i_1758:
  2393                           	opt stack 0
  2394  0000B2                     ID@i_1156:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x32
  2398  0000B2                     	ds	1
  2399  0000B3                     logRun@byte2:
  2400                           	opt stack 0
  2401  0000B3                     actuatorTest@i_1759:
  2402                           	opt stack 0
  2403  0000B3                     Loading@addr:
  2404                           	opt stack 0
  2405  0000B3                     PlatformTest@i_1801:
  2406                           	opt stack 0
  2407  0000B3                     BlockerTest@cond_flag:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x33
  2411  0000B3                     	ds	1
  2412  0000B4                     logRun@byte3:
  2413                           	opt stack 0
  2414  0000B4                     actuatorTest@i_1761:
  2415                           	opt stack 0
  2416  0000B4                     ID@j:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x34
  2420  0000B4                     	ds	1
  2421  0000B5                     Loading@byte1:
  2422                           	opt stack 0
  2423  0000B5                     logRun@byte_i:
  2424                           	opt stack 0
  2425  0000B5                     actuatorTest@i_1762:
  2426                           	opt stack 0
  2427  0000B5                     PlatformTest@on:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x35
  2431  0000B5                     	ds	1
  2432  0000B6                     logRun@byte11:
  2433                           	opt stack 0
  2434  0000B6                     actuatorTest@i_1764:
  2435                           	opt stack 0
  2436  0000B6                     Loading@i_1125:
  2437                           	opt stack 0
  2438  0000B6                     ID@n:
  2439                           	opt stack 0
  2440                           
  2441                           ; 2 bytes @ 0x36
  2442  0000B6                     	ds	1
  2443  0000B7                     actuatorTest@i_1765:
  2444                           	opt stack 0
  2445  0000B7                     logRun@i:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x37
  2449  0000B7                     	ds	1
  2450  0000B8                     actuatorTest@i_1767:
  2451                           	opt stack 0
  2452  0000B8                     Loading@i_1134:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x38
  2456  0000B8                     	ds	1
  2457  0000B9                     actuatorTest@i_1768:
  2458                           	opt stack 0
  2459  0000B9                     logRun@addr:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x39
  2463  0000B9                     	ds	1
  2464  0000BA                     actuatorTest@i_1771:
  2465                           	opt stack 0
  2466  0000BA                     Loading@i_1136:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x3A
  2470  0000BA                     	ds	1
  2471  0000BB                     actuatorTest@i_1772:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x3B
  2475  0000BB                     	ds	1
  2476  0000BC                     actuatorTest@i_1774:
  2477                           	opt stack 0
  2478  0000BC                     printRTC@RTC_month:
  2479                           	opt stack 0
  2480  0000BC                     Loading@i_1137:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x3C
  2484  0000BC                     	ds	1
  2485  0000BD                     actuatorTest@i_1775:
  2486                           	opt stack 0
  2487                           
  2488                           ; 1 bytes @ 0x3D
  2489  0000BD                     	ds	1
  2490  0000BE                     actuatorTest@i_1777:
  2491                           	opt stack 0
  2492  0000BE                     Loading@i_1139:
  2493                           	opt stack 0
  2494  0000BE                     printRTC@month:
  2495                           	opt stack 0
  2496                           
  2497                           ; 4 bytes @ 0x3E
  2498  0000BE                     	ds	1
  2499  0000BF                     actuatorTest@i_1778:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x3F
  2503  0000BF                     	ds	1
  2504  0000C0                     actuatorTest@i_1781:
  2505                           	opt stack 0
  2506  0000C0                     Loading@i:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x40
  2510  0000C0                     	ds	1
  2511  0000C1                     actuatorTest@i_1782:
  2512                           	opt stack 0
  2513                           
  2514                           ; 1 bytes @ 0x41
  2515  0000C1                     	ds	1
  2516  0000C2                     actuatorTest@i_1784:
  2517                           	opt stack 0
  2518  0000C2                     printRTC@i:
  2519                           	opt stack 0
  2520  0000C2                     Loading@j:
  2521                           	opt stack 0
  2522                           
  2523                           ; 2 bytes @ 0x42
  2524  0000C2                     	ds	1
  2525  0000C3                     actuatorTest@i_1785:
  2526                           	opt stack 0
  2527                           
  2528                           ; 1 bytes @ 0x43
  2529  0000C3                     	ds	1
  2530  0000C4                     ??_UI:
  2531  0000C4                     actuatorTest@i:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x44
  2535  0000C4                     	ds	2
  2536  0000C6                     ??_Test:
  2537  0000C6                     _UI$2432:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x46
  2541  0000C6                     	ds	2
  2542  0000C8                     UI@i:
  2543                           	opt stack 0
  2544                           
  2545                           ; 1 bytes @ 0x48
  2546  0000C8                     	ds	1
  2547  0000C9                     UI@i_413:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x49
  2551  0000C9                     	ds	1
  2552  0000CA                     UI@i_416:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x4A
  2556  0000CA                     	ds	1
  2557  0000CB                     UI@i_417:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x4B
  2561  0000CB                     	ds	1
  2562  0000CC                     UI@i_435:
  2563                           	opt stack 0
  2564                           
  2565                           ; 1 bytes @ 0x4C
  2566  0000CC                     	ds	1
  2567  0000CD                     UI@i_436:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x4D
  2571  0000CD                     	ds	1
  2572  0000CE                     UI@i_439:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x4E
  2576  0000CE                     	ds	1
  2577  0000CF                     UI@i_440:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x4F
  2581  0000CF                     	ds	1
  2582  0000D0                     UI@i_443:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x50
  2586  0000D0                     	ds	1
  2587  0000D1                     UI@i_444:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x51
  2591  0000D1                     	ds	1
  2592  0000D2                     UI@i_447:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x52
  2596  0000D2                     	ds	1
  2597  0000D3                     UI@i_448:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x53
  2601  0000D3                     	ds	1
  2602  0000D4                     UI@i_451:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x54
  2606  0000D4                     	ds	1
  2607  0000D5                     UI@i_452:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x55
  2611  0000D5                     	ds	1
  2612  0000D6                     UI@month:
  2613                           	opt stack 0
  2614                           
  2615                           ; 4 bytes @ 0x56
  2616  0000D6                     	ds	4
  2617  0000DA                     tblptru	equ	0xFF8
  2618                           tblptrh	equ	0xFF7
  2619                           tblptrl	equ	0xFF6
  2620                           tablat	equ	0xFF5
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           postdec1	equ	0xFE5
  2624                           fsr1l	equ	0xFE1
  2625                           
  2626                           ; 1 bytes @ 0x5A
  2627                           
  2628                           	psect	cstackCOMRAM
  2629  000001                     __pcstackCOMRAM:
  2630                           	opt stack 0
  2631  000001                     ??_updateArmState:
  2632  000001                     ??i2_I2C_Master_Wait:
  2633  000001                     ??i2_delay_ms:
  2634  000001                     ??i2_isdigit:
  2635  000001                     ?i2___wmul:
  2636                           	opt stack 0
  2637  000001                     ?i2___awmod:
  2638                           	opt stack 0
  2639  000001                     ?i2___lwmod:
  2640                           	opt stack 0
  2641  000001                     i2lcdNibble@temp:
  2642                           	opt stack 0
  2643  000001                     i2updateServoPosition@time_us:
  2644                           	opt stack 0
  2645  000001                     i2EEPROM_read@address:
  2646                           	opt stack 0
  2647  000001                     i2___wmul@multiplier:
  2648                           	opt stack 0
  2649  000001                     i2___awmod@dividend:
  2650                           	opt stack 0
  2651  000001                     i2___lwmod@dividend:
  2652                           	opt stack 0
  2653  000001                     i2strcpy@to:
  2654                           	opt stack 0
  2655                           
  2656                           ; 2 bytes @ 0x0
  2657  000001                     	ds	1
  2658  000002                     i2I2C_Master_Read@a:
  2659                           	opt stack 0
  2660  000002                     i2lcdNibble@data:
  2661                           	opt stack 0
  2662  000002                     i2delay_ms@milliseconds:
  2663                           	opt stack 0
  2664  000002                     i2_isdigit$2070:
  2665                           	opt stack 0
  2666  000002                     i2I2C_Master_Write@d:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0x1
  2670  000002                     	ds	1
  2671  000003                     i2I2C_Master_Read@temp:
  2672                           	opt stack 0
  2673  000003                     i2lcdInst@data:
  2674                           	opt stack 0
  2675  000003                     i2putch@data:
  2676                           	opt stack 0
  2677  000003                     i2isdigit@c:
  2678                           	opt stack 0
  2679  000003                     i2updateServoPosition@timer:
  2680                           	opt stack 0
  2681  000003                     i2___wmul@multiplicand:
  2682                           	opt stack 0
  2683  000003                     i2___awmod@divisor:
  2684                           	opt stack 0
  2685  000003                     i2___lwmod@divisor:
  2686                           	opt stack 0
  2687  000003                     i2strcpy@from:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x2
  2691  000003                     	ds	1
  2692  000004                     i2getRTC@i:
  2693                           	opt stack 0
  2694                           
  2695                           ; 2 bytes @ 0x3
  2696  000004                     	ds	1
  2697  000005                     ??i2_updateServoPosition:
  2698  000005                     i2___awmod@counter:
  2699                           	opt stack 0
  2700  000005                     i2___lwmod@counter:
  2701                           	opt stack 0
  2702  000005                     i2___wmul@product:
  2703                           	opt stack 0
  2704  000005                     i2strcpy@cp:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x4
  2708  000005                     	ds	1
  2709  000006                     ?i2___lwdiv:
  2710                           	opt stack 0
  2711  000006                     i2___awmod@sign:
  2712                           	opt stack 0
  2713  000006                     i2___lwdiv@dividend:
  2714                           	opt stack 0
  2715                           
  2716                           ; 2 bytes @ 0x5
  2717  000006                     	ds	1
  2718  000007                     retrieveLog@logNum:
  2719                           	opt stack 0
  2720  000007                     i2updateServoPosition@my_time:
  2721                           	opt stack 0
  2722                           
  2723                           ; 2 bytes @ 0x6
  2724  000007                     	ds	1
  2725  000008                     i2___lwdiv@divisor:
  2726                           	opt stack 0
  2727                           
  2728                           ; 2 bytes @ 0x7
  2729  000008                     	ds	1
  2730  000009                     ??_retrieveLog:
  2731  000009                     ??_updateServoStates:
  2732                           
  2733                           ; 1 bytes @ 0x8
  2734  000009                     	ds	1
  2735  00000A                     i2___lwdiv@quotient:
  2736                           	opt stack 0
  2737                           
  2738                           ; 2 bytes @ 0x9
  2739  00000A                     	ds	1
  2740  00000B                     retrieveLog@byte1:
  2741                           	opt stack 0
  2742                           
  2743                           ; 1 bytes @ 0xA
  2744  00000B                     	ds	1
  2745  00000C                     retrieveLog@byte2:
  2746                           	opt stack 0
  2747  00000C                     i2___lwdiv@counter:
  2748                           	opt stack 0
  2749                           
  2750                           ; 1 bytes @ 0xB
  2751  00000C                     	ds	1
  2752  00000D                     ?i2_printf:
  2753                           	opt stack 0
  2754  00000D                     retrieveLog@byte3:
  2755                           	opt stack 0
  2756  00000D                     i2printf@f:
  2757                           	opt stack 0
  2758                           
  2759                           ; 2 bytes @ 0xC
  2760  00000D                     	ds	1
  2761  00000E                     retrieveLog@i:
  2762                           	opt stack 0
  2763                           
  2764                           ; 2 bytes @ 0xD
  2765  00000E                     	ds	2
  2766  000010                     retrieveLog@addr:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0xF
  2770  000010                     	ds	2
  2771  000012                     dispLogs@myLog:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x11
  2775  000012                     	ds	2
  2776  000014                     
  2777                           ; 1 bytes @ 0x13
  2778  000014                     	ds	5
  2779  000019                     ??i2_printf:
  2780                           
  2781                           ; 1 bytes @ 0x18
  2782  000019                     	ds	4
  2783  00001D                     i2printf@prec:
  2784                           	opt stack 0
  2785                           
  2786                           ; 1 bytes @ 0x1C
  2787  00001D                     	ds	1
  2788  00001E                     i2printf@cp:
  2789                           	opt stack 0
  2790                           
  2791                           ; 2 bytes @ 0x1D
  2792  00001E                     	ds	2
  2793  000020                     i2printf@ap:
  2794                           	opt stack 0
  2795                           
  2796                           ; 2 bytes @ 0x1F
  2797  000020                     	ds	2
  2798  000022                     i2printf@len:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x21
  2802  000022                     	ds	2
  2803  000024                     i2printf@val:
  2804                           	opt stack 0
  2805                           
  2806                           ; 2 bytes @ 0x23
  2807  000024                     	ds	2
  2808  000026                     i2printf@flag:
  2809                           	opt stack 0
  2810                           
  2811                           ; 1 bytes @ 0x25
  2812  000026                     	ds	1
  2813  000027                     i2printf@c:
  2814                           	opt stack 0
  2815                           
  2816                           ; 1 bytes @ 0x26
  2817  000027                     	ds	1
  2818  000028                     i2printf@width:
  2819                           	opt stack 0
  2820                           
  2821                           ; 2 bytes @ 0x27
  2822  000028                     	ds	2
  2823  00002A                     ??_printSortTimer:
  2824  00002A                     ??i2_printRTC:
  2825  00002A                     ?_inputHandler:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x29
  2829  00002A                     	ds	2
  2830  00002C                     ??_inputHandler:
  2831                           
  2832                           ; 1 bytes @ 0x2B
  2833  00002C                     	ds	1
  2834  00002D                     printSortTimer@curTime:
  2835                           	opt stack 0
  2836  00002D                     i2printRTC@INT_time:
  2837                           	opt stack 0
  2838                           
  2839                           ; 14 bytes @ 0x2C
  2840  00002D                     	ds	14
  2841  00003B                     printSortTimer@start_sec:
  2842                           	opt stack 0
  2843  00003B                     i2printRTC@RTC_month:
  2844                           	opt stack 0
  2845                           
  2846                           ; 2 bytes @ 0x3A
  2847  00003B                     	ds	2
  2848  00003D                     printSortTimer@cur_sec:
  2849                           	opt stack 0
  2850  00003D                     i2printRTC@month:
  2851                           	opt stack 0
  2852                           
  2853                           ; 4 bytes @ 0x3C
  2854  00003D                     	ds	2
  2855  00003F                     printSortTimer@min:
  2856                           	opt stack 0
  2857                           
  2858                           ; 2 bytes @ 0x3E
  2859  00003F                     	ds	2
  2860  000041                     printSortTimer@sec:
  2861                           	opt stack 0
  2862  000041                     i2printRTC@i:
  2863                           	opt stack 0
  2864                           
  2865                           ; 2 bytes @ 0x40
  2866  000041                     	ds	2
  2867  000043                     ??_updateMenu:
  2868  000043                     _printSortTimer$2572:
  2869                           	opt stack 0
  2870                           
  2871                           ; 2 bytes @ 0x42
  2872  000043                     	ds	2
  2873  000045                     printSortTimer@timeDiff:
  2874                           	opt stack 0
  2875                           
  2876                           ; 2 bytes @ 0x44
  2877  000045                     	ds	2
  2878  000047                     printSortTimer@i_1168:
  2879                           	opt stack 0
  2880                           
  2881                           ; 2 bytes @ 0x46
  2882  000047                     	ds	2
  2883  000049                     printSortTimer@i:
  2884                           	opt stack 0
  2885                           
  2886                           ; 2 bytes @ 0x48
  2887  000049                     	ds	2
  2888  00004B                     ??_handler:
  2889                           
  2890                           ; 1 bytes @ 0x4A
  2891  00004B                     	ds	16
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           postinc0	equ	0xFEE
  2897                           wreg	equ	0xFE8
  2898                           postdec1	equ	0xFE5
  2899                           fsr1l	equ	0xFE1
  2900                           
  2901 ;;
  2902 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2903 ;;
  2904 ;; *************** function _main *****************
  2905 ;; Defined at:
  2906 ;;		line 19 in file "main.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;Total ram usage:        0 bytes
  2925 ;; Hardware stack levels required when called:   13
  2926 ;; This function calls:
  2927 ;;		_I2C_Master_Init
  2928 ;;		_Test
  2929 ;;		_UI
  2930 ;;		_initEEPROM
  2931 ;;		_initLCD
  2932 ;;		_initTime
  2933 ;;		_initUI
  2934 ;;		_logRun
  2935 ;;		_machineConfig
  2936 ;;		_sort
  2937 ;;		_stopSignals
  2938 ;; This function is called by:
  2939 ;;		Startup code after reset
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text0
  2944  0049CE                     __ptext0:
  2945                           	opt stack 0
  2946  0049CE                     _main:
  2947                           	opt stack 18
  2948                           
  2949                           ;main.c: 20: machineConfig();
  2950                           
  2951                           ;incstack = 0
  2952  0049CE  EC44  F02A         	call	_machineConfig	;wreg free
  2953                           
  2954                           ;main.c: 21: initLCD();
  2955  0049D2  ECCE  F02B         	call	_initLCD	;wreg free
  2956                           
  2957                           ;main.c: 24: RTCflag = 0;
  2958  0049D6  0E00               	movlw	0
  2959  0049D8  0100               	movlb	0	; () banked
  2960  0049DA  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2961  0049DC  0E00               	movlw	0
  2962  0049DE  6FE4               	movwf	_RTCflag& (0+255),b
  2963                           
  2964                           ;main.c: 25: if(RTCflag){
  2965  0049E0  0100               	movlb	0	; () banked
  2966  0049E2  51E4               	movf	_RTCflag& (0+255),w,b
  2967  0049E4  0100               	movlb	0	; () banked
  2968  0049E6  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2969  0049E8  B4D8               	btfsc	status,2,c
  2970  0049EA  D016               	goto	l10320
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2974  0049EC  0E47               	movlw	71
  2975  0049EE  0100               	movlb	0	; () banked
  2976  0049F0  6F80               	movwf	initTime@m& (0+255),b
  2977  0049F2  0E17               	movlw	23
  2978  0049F4  0100               	movlb	0	; () banked
  2979  0049F6  6F81               	movwf	initTime@h& (0+255),b
  2980  0049F8  0E07               	movlw	7
  2981  0049FA  0100               	movlb	0	; () banked
  2982  0049FC  6F82               	movwf	initTime@w& (0+255),b
  2983  0049FE  0E08               	movlw	8
  2984  004A00  0100               	movlb	0	; () banked
  2985  004A02  6F83               	movwf	initTime@DD& (0+255),b
  2986  004A04  0E04               	movlw	4
  2987  004A06  0100               	movlb	0	; () banked
  2988  004A08  6F84               	movwf	initTime@MM& (0+255),b
  2989  004A0A  0E17               	movlw	23
  2990  004A0C  0100               	movlb	0	; () banked
  2991  004A0E  6F85               	movwf	initTime@YY& (0+255),b
  2992  004A10  0E42               	movlw	66
  2993  004A12  ECC1  F02E         	call	_initTime
  2994                           
  2995                           ;main.c: 27: }
  2996  004A16  D00B               	goto	l10322
  2997  004A18                     l10320:
  2998                           
  2999                           ;main.c: 28: else{
  3000                           ;main.c: 29: I2C_Master_Init(10000);
  3001  004A18  0E10               	movlw	16
  3002  004A1A  0100               	movlb	0	; () banked
  3003  004A1C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3004  004A1E  0E27               	movlw	39
  3005  004A20  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3006  004A22  0E00               	movlw	0
  3007  004A24  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3008  004A26  0E00               	movlw	0
  3009  004A28  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3010  004A2A  ECA7  F02A         	call	_I2C_Master_Init	;wreg free
  3011  004A2E                     l10322:
  3012                           
  3013                           ;main.c: 30: }
  3014                           ;main.c: 32: initUI();
  3015  004A2E  ECF1  F02C         	call	_initUI	;wreg free
  3016                           
  3017                           ;main.c: 33: first = 1;
  3018  004A32  0E00               	movlw	0
  3019  004A34  0101               	movlb	1	; () banked
  3020  004A36  6F3C               	movwf	(_first+1)& (0+255),b
  3021  004A38  0E01               	movlw	1
  3022  004A3A  6F3B               	movwf	_first& (0+255),b
  3023                           
  3024                           ; BSR set to: 1
  3025                           ;main.c: 34: initEEPROM();
  3026  004A3C  EC09  F02F         	call	_initEEPROM	;wreg free
  3027                           
  3028                           ;main.c: 45: switch(machine_state){
  3029                           
  3030                           ;main.c: 44: while(1){
  3031  004A40  D018               	goto	l10346
  3032  004A42                     l10328:
  3033                           
  3034                           ;main.c: 47: UI();
  3035  004A42  EC09  F000         	call	_UI	;wreg free
  3036                           
  3037                           ;main.c: 48: break;
  3038  004A46  D015               	goto	l10346
  3039  004A48                     l10330:
  3040                           
  3041                           ;main.c: 50: sort();
  3042  004A48  ECB0  F02E         	call	_sort	;wreg free
  3043                           
  3044                           ;main.c: 51: break;
  3045  004A4C  D012               	goto	l10346
  3046  004A4E                     l10332:
  3047                           
  3048                           ;main.c: 53: stopSignals();
  3049  004A4E  ECE1  F02E         	call	_stopSignals	;wreg free
  3050                           
  3051                           ;main.c: 54: logRun();
  3052  004A52  EC70  F020         	call	_logRun	;wreg free
  3053                           
  3054                           ;main.c: 55: first = 1;
  3055  004A56  0E00               	movlw	0
  3056  004A58  0101               	movlb	1	; () banked
  3057  004A5A  6F3C               	movwf	(_first+1)& (0+255),b
  3058  004A5C  0E01               	movlw	1
  3059  004A5E  6F3B               	movwf	_first& (0+255),b
  3060                           
  3061                           ; BSR set to: 1
  3062                           ;main.c: 56: UI();
  3063  004A60  EC09  F000         	call	_UI	;wreg free
  3064                           
  3065                           ;main.c: 57: break;
  3066  004A64  D006               	goto	l10346
  3067  004A66                     l10340:
  3068                           
  3069                           ;main.c: 59: Test();
  3070  004A66  EC2B  F022         	call	_Test	;wreg free
  3071                           
  3072                           ;main.c: 60: break;
  3073  004A6A  D003               	goto	l10346
  3074  004A6C                     l10342:
  3075                           
  3076                           ;main.c: 62: stopSignals();
  3077  004A6C  ECE1  F02E         	call	_stopSignals	;wreg free
  3078  004A70                     l513:
  3079  004A70  D7FF               	goto	l513
  3080  004A72                     l10346:
  3081  004A72  0100               	movlb	0	; () banked
  3082  004A74  51FC               	movf	_machine_state& (0+255),w,b
  3083                           
  3084                           ; Switch size 1, requested type "space"
  3085                           ; Number of cases is 5, Range of values is 0 to 4
  3086                           ; switch strategies available:
  3087                           ; Name         Instructions Cycles
  3088                           ; simple_byte           16     9 (average)
  3089                           ;	Chosen strategy is simple_byte
  3090  004A76  0A00               	xorlw	0	; case 0
  3091  004A78  B4D8               	btfsc	status,2,c
  3092  004A7A  D7E3               	goto	l10328
  3093  004A7C  0A01               	xorlw	1	; case 1
  3094  004A7E  B4D8               	btfsc	status,2,c
  3095  004A80  D7E3               	goto	l10330
  3096  004A82  0A03               	xorlw	3	; case 2
  3097  004A84  B4D8               	btfsc	status,2,c
  3098  004A86  D7E3               	goto	l10332
  3099  004A88  0A01               	xorlw	1	; case 3
  3100  004A8A  B4D8               	btfsc	status,2,c
  3101  004A8C  D7EC               	goto	l10340
  3102  004A8E  0A07               	xorlw	7	; case 4
  3103  004A90  B4D8               	btfsc	status,2,c
  3104  004A92  D7EC               	goto	l10342
  3105                           
  3106                           ; BSR set to: 0
  3107                           
  3108                           ; BSR set to: 0
  3109  004A94  D7EE               	goto	l10346
  3110  004A96                     __end_of_main:
  3111                           	opt stack 0
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           postinc0	equ	0xFEE
  3117                           wreg	equ	0xFE8
  3118                           postdec1	equ	0xFE5
  3119                           fsr1l	equ	0xFE1
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _sort *****************
  3123 ;; Defined at:
  3124 ;;		line 71 in file "sort.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;Total ram usage:        0 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:   12
  3145 ;; This function calls:
  3146 ;;		_Distribution
  3147 ;;		_ID
  3148 ;;		_Loading
  3149 ;; This function is called by:
  3150 ;;		_main
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text1
  3155  005D60                     __ptext1:
  3156                           	opt stack 0
  3157  005D60                     _sort:
  3158                           	opt stack 18
  3159                           
  3160                           ;sort.c: 72: if(machine_state == Sorting_state){
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;incstack = 0
  3164  005D60  0100               	movlb	0	; () banked
  3165  005D62  05FC               	decf	_machine_state& (0+255),w,b
  3166  005D64  B4D8               	btfsc	status,2,c
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;sort.c: 73: Loading();
  3170  005D66  EC9D  F00B         	call	_Loading	;wreg free
  3171                           
  3172                           ;sort.c: 74: }
  3173                           ;sort.c: 75: if(machine_state == Sorting_state){
  3174  005D6A  0100               	movlb	0	; () banked
  3175  005D6C  05FC               	decf	_machine_state& (0+255),w,b
  3176  005D6E  B4D8               	btfsc	status,2,c
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;sort.c: 76: ID();
  3180  005D70  ECC9  F008         	call	_ID	;wreg free
  3181                           
  3182                           ;sort.c: 77: }
  3183                           ;sort.c: 78: if(machine_state == Sorting_state){
  3184  005D74  0100               	movlb	0	; () banked
  3185  005D76  05FC               	decf	_machine_state& (0+255),w,b
  3186  005D78  A4D8               	btfss	status,2,c
  3187  005D7A  0012               	return	
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;sort.c: 79: Distribution();
  3191  005D7C  ECA1  F023         	call	_Distribution	;wreg free
  3192  005D80  0012               	return	
  3193  005D82                     __end_of_sort:
  3194                           	opt stack 0
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           postinc0	equ	0xFEE
  3200                           wreg	equ	0xFE8
  3201                           postdec1	equ	0xFE5
  3202                           fsr1l	equ	0xFE1
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function _Loading *****************
  3206 ;; Defined at:
  3207 ;;		line 83 in file "sort.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;		None
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  i               2   62[BANK0 ] int 
  3212 ;;  i               2   60[BANK0 ] int 
  3213 ;;  i               2   58[BANK0 ] int 
  3214 ;;  i               2   56[BANK0 ] int 
  3215 ;;  i               2   54[BANK0 ] int 
  3216 ;;  j               2   66[BANK0 ] int 
  3217 ;;  i               2   64[BANK0 ] int 
  3218 ;;  addr            2   51[BANK0 ] unsigned short 
  3219 ;;  byte1           1   53[BANK0 ] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;Total ram usage:       19 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:   11
  3236 ;; This function calls:
  3237 ;;		_EEPROM_read
  3238 ;;		_EEPROM_write
  3239 ;;		_delay_ms
  3240 ;;		_getIR
  3241 ;;		_getMAG
  3242 ;;		_initGlobalVars
  3243 ;;		_initServos
  3244 ;;		_initSortTimer
  3245 ;;		_lcdInst
  3246 ;;		_readIR
  3247 ;; This function is called by:
  3248 ;;		_sort
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text2
  3253  00173A                     __ptext2:
  3254                           	opt stack 0
  3255  00173A                     _Loading:
  3256                           	opt stack 18
  3257                           
  3258                           ;sort.c: 84: if(first){
  3259                           
  3260                           ;incstack = 0
  3261  00173A  0101               	movlb	1	; () banked
  3262  00173C  513B               	movf	_first& (0+255),w,b
  3263  00173E  0101               	movlb	1	; () banked
  3264  001740  113C               	iorwf	(_first+1)& (0+255),w,b
  3265  001742  B4D8               	btfsc	status,2,c
  3266  001744  D06A               	goto	l7950
  3267                           
  3268                           ; BSR set to: 1
  3269                           ;sort.c: 85: TMR1IE = 1;
  3270  001746  809D               	bsf	3997,0,c	;volatile
  3271                           
  3272                           ;sort.c: 86: TMR2IE = 1;
  3273  001748  829D               	bsf	3997,1,c	;volatile
  3274                           
  3275                           ;sort.c: 87: TMR3IE = 1;
  3276  00174A  82A0               	bsf	4000,1,c	;volatile
  3277                           
  3278                           ; BSR set to: 1
  3279                           ;sort.c: 88: initGlobalVars();
  3280  00174C  EC7D  F024         	call	_initGlobalVars	;wreg free
  3281                           
  3282                           ;sort.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3283  001750  0E01               	movlw	1
  3284  001752  EC3A  F02F         	call	_lcdInst
  3285  001756  0E68               	movlw	104
  3286  001758  0100               	movlb	0	; () banked
  3287  00175A  6FB1               	movwf	??_Loading& (0+255),b
  3288  00175C  0EE4               	movlw	228
  3289  00175E                     u10297:
  3290  00175E  2EE8               	decfsz	wreg,f,c
  3291  001760  D7FE               	bra	u10297
  3292  001762  2FB1               	decfsz	??_Loading& (0+255),f,b
  3293  001764  D7FC               	bra	u10297
  3294  001766  F000               	nop	
  3295                           
  3296                           ;sort.c: 90: initSortTimer();
  3297  001768  EC6C  F026         	call	_initSortTimer	;wreg free
  3298                           
  3299                           ;sort.c: 91: LATCbits.LATC5 = 1;
  3300  00176C  8A8B               	bsf	3979,5,c	;volatile
  3301                           
  3302                           ;sort.c: 92: LATCbits.LATC6 = 1;
  3303  00176E  8C8B               	bsf	3979,6,c	;volatile
  3304                           
  3305                           ;sort.c: 97: sel = EEPROM_read(0);
  3306  001770  0E00               	movlw	0
  3307  001772  0100               	movlb	0	; () banked
  3308  001774  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3309  001776  0E00               	movlw	0
  3310  001778  6F80               	movwf	EEPROM_read@address& (0+255),b
  3311  00177A  ECFD  F02E         	call	_EEPROM_read	;wreg free
  3312  00177E  0100               	movlb	0	; () banked
  3313  001780  6FFD               	movwf	_sel& (0+255),b
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;sort.c: 98: unsigned short addr = 1 + 11 * sel;
  3317  001782  0100               	movlb	0	; () banked
  3318  001784  51FD               	movf	_sel& (0+255),w,b
  3319  001786  0D0B               	mullw	11
  3320  001788  0E01               	movlw	1
  3321  00178A  24F3               	addwf	prodl,w,c
  3322  00178C  0100               	movlb	0	; () banked
  3323  00178E  6FB3               	movwf	Loading@addr& (0+255),b
  3324  001790  0E00               	movlw	0
  3325  001792  20F4               	addwfc	prodh,w,c
  3326  001794  0100               	movlb	0	; () banked
  3327  001796  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;sort.c: 99: unsigned char byte1 = 0b01111111;
  3331  001798  0E7F               	movlw	127
  3332  00179A  0100               	movlb	0	; () banked
  3333  00179C  6FB5               	movwf	Loading@byte1& (0+255),b
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;sort.c: 100: EEPROM_write(addr, byte1);
  3337  00179E  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3338  0017A2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3339  0017A6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3340  0017AA  EC2D  F023         	call	_EEPROM_write	;wreg free
  3341                           
  3342                           ;sort.c: 103: LATBbits.LATB2 = 0;
  3343  0017AE  948A               	bcf	3978,2,c	;volatile
  3344                           
  3345                           ;sort.c: 105: for(int i=0; i<46; i++){
  3346  0017B0  0E00               	movlw	0
  3347  0017B2  0100               	movlb	0	; () banked
  3348  0017B4  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3349  0017B6  0E00               	movlw	0
  3350  0017B8  6FC0               	movwf	Loading@i& (0+255),b
  3351                           
  3352                           ; BSR set to: 0
  3353  0017BA  0100               	movlb	0	; () banked
  3354  0017BC  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3355  0017BE  D008               	goto	l7940
  3356  0017C0  0100               	movlb	0	; () banked
  3357  0017C2  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3358  0017C4  E126               	bnz	l800
  3359  0017C6  0E2E               	movlw	46
  3360  0017C8  0100               	movlb	0	; () banked
  3361  0017CA  5DC0               	subwf	Loading@i& (0+255),w,b
  3362  0017CC  B0D8               	btfsc	status,0,c
  3363  0017CE  D021               	goto	l800
  3364  0017D0                     l7940:
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;sort.c: 106: LATBbits.LATB2 = !LATBbits.LATB2;
  3368  0017D0  B48A               	btfsc	3978,2,c	;volatile
  3369  0017D2  D004               	goto	u6680
  3370  0017D4  0100               	movlb	0	; () banked
  3371  0017D6  6BB1               	clrf	??_Loading& (0+255),b
  3372  0017D8  2BB1               	incf	??_Loading& (0+255),f,b
  3373  0017DA  D002               	goto	u6698
  3374  0017DC                     u6680:
  3375  0017DC  0100               	movlb	0	; () banked
  3376  0017DE  6BB1               	clrf	??_Loading& (0+255),b
  3377  0017E0                     u6698:
  3378  0017E0  0100               	movlb	0	; () banked
  3379  0017E2  47B1               	rlncf	??_Loading& (0+255),f,b
  3380  0017E4  47B1               	rlncf	??_Loading& (0+255),f,b
  3381  0017E6  508A               	movf	3978,w,c	;volatile
  3382  0017E8  0100               	movlb	0	; () banked
  3383  0017EA  19B1               	xorwf	??_Loading& (0+255),w,b
  3384  0017EC  0BFB               	andlw	-5
  3385  0017EE  19B1               	xorwf	??_Loading& (0+255),w,b
  3386  0017F0  6E8A               	movwf	3978,c	;volatile
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;sort.c: 107: delay_ms(45-i);
  3390  0017F2  0100               	movlb	0	; () banked
  3391  0017F4  51C0               	movf	Loading@i& (0+255),w,b
  3392  0017F6  0800               	sublw	0
  3393  0017F8  0F2D               	addlw	45
  3394  0017FA  EC50  F02E         	call	_delay_ms
  3395  0017FE  0100               	movlb	0	; () banked
  3396  001800  4BC0               	infsnz	Loading@i& (0+255),f,b
  3397  001802  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3398                           
  3399                           ; BSR set to: 0
  3400  001804  0100               	movlb	0	; () banked
  3401  001806  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3402  001808  D7E3               	goto	l7940
  3403  00180A  0100               	movlb	0	; () banked
  3404  00180C  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3405  00180E  E101               	bnz	u6700
  3406  001810  D7DA               	goto	L1
  3407  001812                     u6700:
  3408  001812                     l800:
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;sort.c: 108: }
  3412                           ;sort.c: 109: LATBbits.LATB2 = 1;
  3413  001812  848A               	bsf	3978,2,c	;volatile
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;sort.c: 112: initServos();
  3417  001814  ECF1  F028         	call	_initServos	;wreg free
  3418                           
  3419                           ;sort.c: 113: }
  3420  001818  0012               	return	
  3421  00181A                     l7950:
  3422                           
  3423                           ;sort.c: 114: else{
  3424                           ;sort.c: 117: if(!f_loadingNewCan){
  3425  00181A  0100               	movlb	0	; () banked
  3426  00181C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3427  00181E  0100               	movlb	0	; () banked
  3428  001820  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3429  001822  A4D8               	btfss	status,2,c
  3430  001824  D01D               	goto	l7966
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;sort.c: 119: getIR(0);
  3434  001826  0E00               	movlw	0
  3435  001828  0100               	movlb	0	; () banked
  3436  00182A  6F89               	movwf	(getIR@port+1)& (0+255),b
  3437  00182C  0E00               	movlw	0
  3438  00182E  6F88               	movwf	getIR@port& (0+255),b
  3439  001830  EC71  F028         	call	_getIR	;wreg free
  3440                           
  3441                           ;sort.c: 121: if(!f_loadingNewCan){
  3442  001834  0100               	movlb	0	; () banked
  3443  001836  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3444  001838  0100               	movlb	0	; () banked
  3445  00183A  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3446  00183C  B4D8               	btfsc	status,2,c
  3447  00183E  0012               	return	
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;sort.c: 125: else{
  3451                           ;sort.c: 126: count_total++;
  3452                           
  3453                           ; BSR set to: 0
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;sort.c: 123: }
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;sort.c: 122: return;
  3460  001840  0100               	movlb	0	; () banked
  3461  001842  4BFE               	infsnz	_count_total& (0+255),f,b
  3462  001844  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;sort.c: 127: if(count_total == 12){
  3466  001846  0E0C               	movlw	12
  3467  001848  0100               	movlb	0	; () banked
  3468  00184A  19FE               	xorwf	_count_total& (0+255),w,b
  3469  00184C  0100               	movlb	0	; () banked
  3470  00184E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3471  001850  A4D8               	btfss	status,2,c
  3472  001852  0012               	return	
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;sort.c: 128: f_lastCan = 1;
  3476  001854  0E00               	movlw	0
  3477  001856  0100               	movlb	0	; () banked
  3478  001858  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  3479  00185A  0E01               	movlw	1
  3480  00185C  6FEA               	movwf	_f_lastCan& (0+255),b
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;sort.c: 129: }
  3484                           ;sort.c: 130: }
  3485                           ;sort.c: 131: }
  3486                           
  3487                           ; BSR set to: 0
  3488  00185E  0012               	return	
  3489  001860                     l7966:
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;sort.c: 134: else if(f_ID_receive){
  3493  001860  0101               	movlb	1	; () banked
  3494  001862  5131               	movf	_f_ID_receive& (0+255),w,b
  3495  001864  0101               	movlb	1	; () banked
  3496  001866  1132               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3497  001868  B4D8               	btfsc	status,2,c
  3498  00186A  0012               	return	
  3499                           
  3500                           ; BSR set to: 1
  3501                           ;sort.c: 135: f_most_recent_sort_time = 1;
  3502  00186C  0E00               	movlw	0
  3503  00186E  0101               	movlb	1	; () banked
  3504  001870  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3505  001872  0E01               	movlw	1
  3506  001874  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  3507                           
  3508                           ;sort.c: 136: f_loadingNewCan = 0;
  3509  001876  0E00               	movlw	0
  3510  001878  0100               	movlb	0	; () banked
  3511  00187A  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3512  00187C  0E00               	movlw	0
  3513  00187E  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;sort.c: 137: _delay((unsigned long)((400)*(32000000/4000.0)));
  3517  001880  0E11               	movlw	17
  3518  001882  0100               	movlb	0	; () banked
  3519  001884  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3520  001886  0E3C               	movlw	60
  3521  001888  0100               	movlb	0	; () banked
  3522  00188A  6FB1               	movwf	??_Loading& (0+255),b
  3523  00188C  0ECB               	movlw	203
  3524  00188E                     u10307:
  3525  00188E  2EE8               	decfsz	wreg,f,c
  3526  001890  D7FE               	bra	u10307
  3527  001892  2FB1               	decfsz	??_Loading& (0+255),f,b
  3528  001894  D7FC               	bra	u10307
  3529  001896  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3530  001898  D7FA               	bra	u10307
  3531                           
  3532                           ;sort.c: 138: LATBbits.LATB2 = 0;
  3533  00189A  948A               	bcf	3978,2,c	;volatile
  3534                           
  3535                           ;sort.c: 142: f_arm_position = 1;
  3536  00189C  0E00               	movlw	0
  3537  00189E  0100               	movlb	0	; () banked
  3538  0018A0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3539  0018A2  0E01               	movlw	1
  3540  0018A4  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;sort.c: 144: delay_ms(750);
  3544  0018A6  0EEE               	movlw	238
  3545  0018A8  EC50  F02E         	call	_delay_ms
  3546                           
  3547                           ;sort.c: 145: getMAG();
  3548  0018AC  ECBF  F02C         	call	_getMAG	;wreg free
  3549                           
  3550                           ;sort.c: 146: sensor_outputs[0] = MAG_signal;
  3551  0018B0  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3552  0018B4  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3553                           
  3554                           ;sort.c: 148: TMR2IE = 0;
  3555  0018B8  929D               	bcf	3997,1,c	;volatile
  3556                           
  3557                           ;sort.c: 149: if(sensor_outputs[0]){
  3558  0018BA  0100               	movlb	0	; () banked
  3559  0018BC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3560  0018BE  0100               	movlb	0	; () banked
  3561  0018C0  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3562  0018C2  B4D8               	btfsc	status,2,c
  3563  0018C4  D01D               	goto	l7998
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;sort.c: 150: for(int i = 0; i<2500; i++){
  3567  0018C6  0E00               	movlw	0
  3568  0018C8  0100               	movlb	0	; () banked
  3569  0018CA  6FB7               	movwf	(Loading@i_1125+1)& (0+255),b
  3570  0018CC  0E00               	movlw	0
  3571  0018CE  6FB6               	movwf	Loading@i_1125& (0+255),b
  3572  0018D0                     l7988:
  3573                           
  3574                           ; BSR set to: 0
  3575  0018D0  0100               	movlb	0	; () banked
  3576  0018D2  BFB7               	btfsc	(Loading@i_1125+1)& (0+255),7,b
  3577  0018D4  D008               	goto	l810
  3578  0018D6  0EC4               	movlw	196
  3579  0018D8  0100               	movlb	0	; () banked
  3580  0018DA  5DB6               	subwf	Loading@i_1125& (0+255),w,b
  3581  0018DC  0E09               	movlw	9
  3582  0018DE  0100               	movlb	0	; () banked
  3583  0018E0  59B7               	subwfb	(Loading@i_1125+1)& (0+255),w,b
  3584  0018E2  B0D8               	btfsc	status,0,c
  3585  0018E4  D02B               	goto	l812
  3586  0018E6                     l810:
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;sort.c: 151: LATAbits.LATA4 = 1;
  3590  0018E6  8889               	bsf	3977,4,c	;volatile
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;sort.c: 152: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3594  0018E8  0EC8               	movlw	200
  3595  0018EA                     u10317:
  3596  0018EA  2EE8               	decfsz	wreg,f,c
  3597  0018EC  D7FE               	bra	u10317
  3598                           
  3599                           ;sort.c: 153: LATAbits.LATA4 = 0;
  3600  0018EE  9889               	bcf	3977,4,c	;volatile
  3601                           
  3602                           ;sort.c: 154: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3603  0018F0  0E42               	movlw	66
  3604  0018F2                     u10327:
  3605  0018F2  2EE8               	decfsz	wreg,f,c
  3606  0018F4  D7FE               	bra	u10327
  3607  0018F6  D000               	nop2	
  3608  0018F8  0100               	movlb	0	; () banked
  3609  0018FA  4BB6               	infsnz	Loading@i_1125& (0+255),f,b
  3610  0018FC  2BB7               	incf	(Loading@i_1125+1)& (0+255),f,b
  3611  0018FE  D7E8               	goto	l7988
  3612  001900                     l7998:
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;sort.c: 157: else{
  3616                           ;sort.c: 158: for(int i = 0; i<2500; i++){
  3617  001900  0E00               	movlw	0
  3618  001902  0100               	movlb	0	; () banked
  3619  001904  6FB9               	movwf	(Loading@i_1134+1)& (0+255),b
  3620  001906  0E00               	movlw	0
  3621  001908  6FB8               	movwf	Loading@i_1134& (0+255),b
  3622  00190A                     l8000:
  3623                           
  3624                           ; BSR set to: 0
  3625  00190A  0100               	movlb	0	; () banked
  3626  00190C  BFB9               	btfsc	(Loading@i_1134+1)& (0+255),7,b
  3627  00190E  D008               	goto	l813
  3628  001910  0EC4               	movlw	196
  3629  001912  0100               	movlb	0	; () banked
  3630  001914  5DB8               	subwf	Loading@i_1134& (0+255),w,b
  3631  001916  0E09               	movlw	9
  3632  001918  0100               	movlb	0	; () banked
  3633  00191A  59B9               	subwfb	(Loading@i_1134+1)& (0+255),w,b
  3634  00191C  B0D8               	btfsc	status,0,c
  3635  00191E  D00E               	goto	l812
  3636  001920                     l813:
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;sort.c: 159: LATAbits.LATA4 = 1;
  3640  001920  8889               	bsf	3977,4,c	;volatile
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;sort.c: 160: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3644  001922  0E85               	movlw	133
  3645  001924                     u10337:
  3646  001924  2EE8               	decfsz	wreg,f,c
  3647  001926  D7FE               	bra	u10337
  3648  001928  F000               	nop	
  3649                           
  3650                           ;sort.c: 161: LATAbits.LATA4 = 0;
  3651  00192A  9889               	bcf	3977,4,c	;volatile
  3652                           
  3653                           ;sort.c: 162: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3654  00192C  0E85               	movlw	133
  3655  00192E                     u10347:
  3656  00192E  2EE8               	decfsz	wreg,f,c
  3657  001930  D7FE               	bra	u10347
  3658  001932  F000               	nop	
  3659  001934  0100               	movlb	0	; () banked
  3660  001936  4BB8               	infsnz	Loading@i_1134& (0+255),f,b
  3661  001938  2BB9               	incf	(Loading@i_1134+1)& (0+255),f,b
  3662  00193A  D7E7               	goto	l8000
  3663  00193C                     l812:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 163: }
  3667                           ;sort.c: 164: }
  3668                           ;sort.c: 165: TMR2IE = 1;
  3669  00193C  829D               	bsf	3997,1,c	;volatile
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;sort.c: 166: _delay((unsigned long)((350)*(32000000/4000.0)));
  3673  00193E  0E0F               	movlw	15
  3674  001940  0100               	movlb	0	; () banked
  3675  001942  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3676  001944  0E35               	movlw	53
  3677  001946  0100               	movlb	0	; () banked
  3678  001948  6FB1               	movwf	??_Loading& (0+255),b
  3679  00194A  0E51               	movlw	81
  3680  00194C                     u10357:
  3681  00194C  2EE8               	decfsz	wreg,f,c
  3682  00194E  D7FE               	bra	u10357
  3683  001950  2FB1               	decfsz	??_Loading& (0+255),f,b
  3684  001952  D7FC               	bra	u10357
  3685  001954  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3686  001956  D7FA               	bra	u10357
  3687                           
  3688                           ;sort.c: 168: readIR(0);
  3689  001958  0E00               	movlw	0
  3690  00195A  0100               	movlb	0	; () banked
  3691  00195C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3692  00195E  0E00               	movlw	0
  3693  001960  6F82               	movwf	readIR@ana_port& (0+255),b
  3694  001962  EC12  F027         	call	_readIR	;wreg free
  3695                           
  3696                           ;sort.c: 169: if(IR_signal==1){
  3697  001966  0100               	movlb	0	; () banked
  3698  001968  05E0               	decf	_IR_signal& (0+255),w,b
  3699  00196A  0100               	movlb	0	; () banked
  3700  00196C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3701  00196E  A4D8               	btfss	status,2,c
  3702  001970  D1A8               	goto	l8142
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;sort.c: 170: _delay((unsigned long)((70)*(32000000/4000.0)));
  3706  001972  0E03               	movlw	3
  3707  001974  0100               	movlb	0	; () banked
  3708  001976  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3709  001978  0ED8               	movlw	216
  3710  00197A  0100               	movlb	0	; () banked
  3711  00197C  6FB1               	movwf	??_Loading& (0+255),b
  3712  00197E  0E41               	movlw	65
  3713  001980                     u10367:
  3714  001980  2EE8               	decfsz	wreg,f,c
  3715  001982  D7FE               	bra	u10367
  3716  001984  2FB1               	decfsz	??_Loading& (0+255),f,b
  3717  001986  D7FC               	bra	u10367
  3718  001988  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3719  00198A  D7FA               	bra	u10367
  3720  00198C  D000               	nop2	
  3721                           
  3722                           ;sort.c: 171: readIR(0);
  3723  00198E  0E00               	movlw	0
  3724  001990  0100               	movlb	0	; () banked
  3725  001992  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3726  001994  0E00               	movlw	0
  3727  001996  6F82               	movwf	readIR@ana_port& (0+255),b
  3728  001998  EC12  F027         	call	_readIR	;wreg free
  3729                           
  3730                           ;sort.c: 172: if(IR_signal==1){
  3731  00199C  0100               	movlb	0	; () banked
  3732  00199E  05E0               	decf	_IR_signal& (0+255),w,b
  3733  0019A0  0100               	movlb	0	; () banked
  3734  0019A2  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3735  0019A4  A4D8               	btfss	status,2,c
  3736  0019A6  D041               	goto	l8048
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;sort.c: 173: if(sensor_outputs[0]){
  3740  0019A8  0100               	movlb	0	; () banked
  3741  0019AA  51DA               	movf	_sensor_outputs& (0+255),w,b
  3742  0019AC  0100               	movlb	0	; () banked
  3743  0019AE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3744  0019B0  B4D8               	btfsc	status,2,c
  3745  0019B2  D01D               	goto	l8036
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;sort.c: 174: for(int i = 0; i<2500; i++){
  3749  0019B4  0E00               	movlw	0
  3750  0019B6  0100               	movlb	0	; () banked
  3751  0019B8  6FBB               	movwf	(Loading@i_1136+1)& (0+255),b
  3752  0019BA  0E00               	movlw	0
  3753  0019BC  6FBA               	movwf	Loading@i_1136& (0+255),b
  3754  0019BE                     l8026:
  3755                           
  3756                           ; BSR set to: 0
  3757  0019BE  0100               	movlb	0	; () banked
  3758  0019C0  BFBB               	btfsc	(Loading@i_1136+1)& (0+255),7,b
  3759  0019C2  D008               	goto	l818
  3760  0019C4  0EC4               	movlw	196
  3761  0019C6  0100               	movlb	0	; () banked
  3762  0019C8  5DBA               	subwf	Loading@i_1136& (0+255),w,b
  3763  0019CA  0E09               	movlw	9
  3764  0019CC  0100               	movlb	0	; () banked
  3765  0019CE  59BB               	subwfb	(Loading@i_1136+1)& (0+255),w,b
  3766  0019D0  B0D8               	btfsc	status,0,c
  3767  0019D2  D02B               	goto	l8048
  3768  0019D4                     l818:
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;sort.c: 175: LATAbits.LATA4 = 1;
  3772  0019D4  8889               	bsf	3977,4,c	;volatile
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;sort.c: 176: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3776  0019D6  0EC8               	movlw	200
  3777  0019D8                     u10377:
  3778  0019D8  2EE8               	decfsz	wreg,f,c
  3779  0019DA  D7FE               	bra	u10377
  3780                           
  3781                           ;sort.c: 177: LATAbits.LATA4 = 0;
  3782  0019DC  9889               	bcf	3977,4,c	;volatile
  3783                           
  3784                           ;sort.c: 178: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3785  0019DE  0E42               	movlw	66
  3786  0019E0                     u10387:
  3787  0019E0  2EE8               	decfsz	wreg,f,c
  3788  0019E2  D7FE               	bra	u10387
  3789  0019E4  D000               	nop2	
  3790  0019E6  0100               	movlb	0	; () banked
  3791  0019E8  4BBA               	infsnz	Loading@i_1136& (0+255),f,b
  3792  0019EA  2BBB               	incf	(Loading@i_1136+1)& (0+255),f,b
  3793  0019EC  D7E8               	goto	l8026
  3794  0019EE                     l8036:
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;sort.c: 181: else{
  3798                           ;sort.c: 182: for(int i = 0; i<2500; i++){
  3799  0019EE  0E00               	movlw	0
  3800  0019F0  0100               	movlb	0	; () banked
  3801  0019F2  6FBD               	movwf	(Loading@i_1137+1)& (0+255),b
  3802  0019F4  0E00               	movlw	0
  3803  0019F6  6FBC               	movwf	Loading@i_1137& (0+255),b
  3804  0019F8                     l8038:
  3805                           
  3806                           ; BSR set to: 0
  3807  0019F8  0100               	movlb	0	; () banked
  3808  0019FA  BFBD               	btfsc	(Loading@i_1137+1)& (0+255),7,b
  3809  0019FC  D008               	goto	l821
  3810  0019FE  0EC4               	movlw	196
  3811  001A00  0100               	movlb	0	; () banked
  3812  001A02  5DBC               	subwf	Loading@i_1137& (0+255),w,b
  3813  001A04  0E09               	movlw	9
  3814  001A06  0100               	movlb	0	; () banked
  3815  001A08  59BD               	subwfb	(Loading@i_1137+1)& (0+255),w,b
  3816  001A0A  B0D8               	btfsc	status,0,c
  3817  001A0C  D00E               	goto	l8048
  3818  001A0E                     l821:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;sort.c: 183: LATAbits.LATA4 = 1;
  3822  001A0E  8889               	bsf	3977,4,c	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;sort.c: 184: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3826  001A10  0E85               	movlw	133
  3827  001A12                     u10397:
  3828  001A12  2EE8               	decfsz	wreg,f,c
  3829  001A14  D7FE               	bra	u10397
  3830  001A16  F000               	nop	
  3831                           
  3832                           ;sort.c: 185: LATAbits.LATA4 = 0;
  3833  001A18  9889               	bcf	3977,4,c	;volatile
  3834                           
  3835                           ;sort.c: 186: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3836  001A1A  0E85               	movlw	133
  3837  001A1C                     u10407:
  3838  001A1C  2EE8               	decfsz	wreg,f,c
  3839  001A1E  D7FE               	bra	u10407
  3840  001A20  F000               	nop	
  3841  001A22  0100               	movlb	0	; () banked
  3842  001A24  4BBC               	infsnz	Loading@i_1137& (0+255),f,b
  3843  001A26  2BBD               	incf	(Loading@i_1137+1)& (0+255),f,b
  3844  001A28  D7E7               	goto	l8038
  3845  001A2A                     l8048:
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;sort.c: 187: }
  3849                           ;sort.c: 188: }
  3850                           ;sort.c: 189: }
  3851                           ;sort.c: 191: _delay((unsigned long)((350)*(32000000/4000.0)));
  3852  001A2A  0E0F               	movlw	15
  3853  001A2C  0100               	movlb	0	; () banked
  3854  001A2E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3855  001A30  0E35               	movlw	53
  3856  001A32  0100               	movlb	0	; () banked
  3857  001A34  6FB1               	movwf	??_Loading& (0+255),b
  3858  001A36  0E51               	movlw	81
  3859  001A38                     u10417:
  3860  001A38  2EE8               	decfsz	wreg,f,c
  3861  001A3A  D7FE               	bra	u10417
  3862  001A3C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3863  001A3E  D7FC               	bra	u10417
  3864  001A40  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3865  001A42  D7FA               	bra	u10417
  3866                           
  3867                           ;sort.c: 193: int j = 0;
  3868  001A44  0E00               	movlw	0
  3869  001A46  0100               	movlb	0	; () banked
  3870  001A48  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3871  001A4A  0E00               	movlw	0
  3872  001A4C  6FC2               	movwf	Loading@j& (0+255),b
  3873                           
  3874                           ;sort.c: 194: while(IR_signal == 1){
  3875  001A4E  D132               	goto	l8140
  3876  001A50                     l8052:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;sort.c: 195: readIR(0);
  3880  001A50  0E00               	movlw	0
  3881  001A52  0100               	movlb	0	; () banked
  3882  001A54  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3883  001A56  0E00               	movlw	0
  3884  001A58  6F82               	movwf	readIR@ana_port& (0+255),b
  3885  001A5A  EC12  F027         	call	_readIR	;wreg free
  3886                           
  3887                           ;sort.c: 196: if(j == 3 || j == 4){
  3888  001A5E  0E03               	movlw	3
  3889  001A60  0100               	movlb	0	; () banked
  3890  001A62  19C2               	xorwf	Loading@j& (0+255),w,b
  3891  001A64  0100               	movlb	0	; () banked
  3892  001A66  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3893  001A68  B4D8               	btfsc	status,2,c
  3894  001A6A  D007               	goto	l8058
  3895                           
  3896                           ; BSR set to: 0
  3897  001A6C  0E04               	movlw	4
  3898  001A6E  0100               	movlb	0	; () banked
  3899  001A70  19C2               	xorwf	Loading@j& (0+255),w,b
  3900  001A72  0100               	movlb	0	; () banked
  3901  001A74  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3902  001A76  A4D8               	btfss	status,2,c
  3903  001A78  D005               	goto	l8060
  3904  001A7A                     l8058:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;sort.c: 197: f_arm_position = 0;
  3908  001A7A  0E00               	movlw	0
  3909  001A7C  0100               	movlb	0	; () banked
  3910  001A7E  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3911  001A80  0E00               	movlw	0
  3912  001A82  D030               	goto	L2
  3913  001A84                     l8060:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;sort.c: 199: else if(j == 5 || j == 6){
  3917  001A84  0E05               	movlw	5
  3918  001A86  0100               	movlb	0	; () banked
  3919  001A88  19C2               	xorwf	Loading@j& (0+255),w,b
  3920  001A8A  0100               	movlb	0	; () banked
  3921  001A8C  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3922  001A8E  B4D8               	btfsc	status,2,c
  3923  001A90  D007               	goto	l831
  3924                           
  3925                           ; BSR set to: 0
  3926  001A92  0E06               	movlw	6
  3927  001A94  0100               	movlb	0	; () banked
  3928  001A96  19C2               	xorwf	Loading@j& (0+255),w,b
  3929  001A98  0100               	movlb	0	; () banked
  3930  001A9A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3931  001A9C  A4D8               	btfss	status,2,c
  3932  001A9E  D002               	goto	l8064
  3933  001AA0                     l831:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;sort.c: 200: LATBbits.LATB2 = 1;
  3937  001AA0  848A               	bsf	3978,2,c	;volatile
  3938                           
  3939                           ;sort.c: 201: }
  3940  001AA2  D042               	goto	l828
  3941  001AA4                     l8064:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;sort.c: 202: else if(j == 7 || j == 8 || j == 9 || j == 10){
  3945  001AA4  0E07               	movlw	7
  3946  001AA6  0100               	movlb	0	; () banked
  3947  001AA8  19C2               	xorwf	Loading@j& (0+255),w,b
  3948  001AAA  0100               	movlb	0	; () banked
  3949  001AAC  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3950  001AAE  B4D8               	btfsc	status,2,c
  3951  001AB0  D015               	goto	l8072
  3952                           
  3953                           ; BSR set to: 0
  3954  001AB2  0E08               	movlw	8
  3955  001AB4  0100               	movlb	0	; () banked
  3956  001AB6  19C2               	xorwf	Loading@j& (0+255),w,b
  3957  001AB8  0100               	movlb	0	; () banked
  3958  001ABA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3959  001ABC  B4D8               	btfsc	status,2,c
  3960  001ABE  D00E               	goto	l8072
  3961                           
  3962                           ; BSR set to: 0
  3963  001AC0  0E09               	movlw	9
  3964  001AC2  0100               	movlb	0	; () banked
  3965  001AC4  19C2               	xorwf	Loading@j& (0+255),w,b
  3966  001AC6  0100               	movlb	0	; () banked
  3967  001AC8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3968  001ACA  B4D8               	btfsc	status,2,c
  3969  001ACC  D007               	goto	l8072
  3970                           
  3971                           ; BSR set to: 0
  3972  001ACE  0E0A               	movlw	10
  3973  001AD0  0100               	movlb	0	; () banked
  3974  001AD2  19C2               	xorwf	Loading@j& (0+255),w,b
  3975  001AD4  0100               	movlb	0	; () banked
  3976  001AD6  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3977  001AD8  A4D8               	btfss	status,2,c
  3978  001ADA  D006               	goto	l833
  3979  001ADC                     l8072:
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;sort.c: 203: f_arm_position = 1;
  3983  001ADC  0E00               	movlw	0
  3984  001ADE  0100               	movlb	0	; () banked
  3985  001AE0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3986  001AE2  0E01               	movlw	1
  3987  001AE4                     L2:
  3988  001AE4  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3989                           
  3990                           ;sort.c: 204: }
  3991  001AE6  D020               	goto	l828
  3992  001AE8                     l833:
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;sort.c: 205: else if(j % 2 == 0){
  3996  001AE8  0100               	movlb	0	; () banked
  3997  001AEA  B1C2               	btfsc	Loading@j& (0+255),0,b
  3998  001AEC  D01D               	goto	l828
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;sort.c: 206: LATBbits.LATB2 = !LATBbits.LATB2;
  4002  001AEE  B48A               	btfsc	3978,2,c	;volatile
  4003  001AF0  D004               	goto	u6960
  4004  001AF2  0100               	movlb	0	; () banked
  4005  001AF4  6BB1               	clrf	??_Loading& (0+255),b
  4006  001AF6  2BB1               	incf	??_Loading& (0+255),f,b
  4007  001AF8  D002               	goto	u6978
  4008  001AFA                     u6960:
  4009  001AFA  0100               	movlb	0	; () banked
  4010  001AFC  6BB1               	clrf	??_Loading& (0+255),b
  4011  001AFE                     u6978:
  4012  001AFE  0100               	movlb	0	; () banked
  4013  001B00  47B1               	rlncf	??_Loading& (0+255),f,b
  4014  001B02  47B1               	rlncf	??_Loading& (0+255),f,b
  4015  001B04  508A               	movf	3978,w,c	;volatile
  4016  001B06  0100               	movlb	0	; () banked
  4017  001B08  19B1               	xorwf	??_Loading& (0+255),w,b
  4018  001B0A  0BFB               	andlw	-5
  4019  001B0C  19B1               	xorwf	??_Loading& (0+255),w,b
  4020  001B0E  6E8A               	movwf	3978,c	;volatile
  4021                           
  4022                           ;sort.c: 207: f_arm_position = !f_arm_position;
  4023  001B10  0100               	movlb	0	; () banked
  4024  001B12  51E8               	movf	_f_arm_position& (0+255),w,b	;volatile
  4025  001B14  0100               	movlb	0	; () banked
  4026  001B16  11E9               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4027  001B18  A4D8               	btfss	status,2,c
  4028  001B1A  D002               	goto	u6980
  4029  001B1C  0E01               	movlw	1
  4030  001B1E  D001               	goto	u6990
  4031  001B20                     u6980:
  4032  001B20  0E00               	movlw	0
  4033  001B22                     u6990:
  4034  001B22  0100               	movlb	0	; () banked
  4035  001B24  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4036  001B26  6BE9               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4037  001B28                     l828:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;sort.c: 208: }
  4041                           ;sort.c: 211: if(IR_signal==1){
  4042  001B28  0100               	movlb	0	; () banked
  4043  001B2A  05E0               	decf	_IR_signal& (0+255),w,b
  4044  001B2C  0100               	movlb	0	; () banked
  4045  001B2E  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4046  001B30  A4D8               	btfss	status,2,c
  4047  001B32  D09F               	goto	l8128
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;sort.c: 212: _delay((unsigned long)((350)*(32000000/4000.0)));
  4051  001B34  0E0F               	movlw	15
  4052  001B36  0100               	movlb	0	; () banked
  4053  001B38  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4054  001B3A  0E35               	movlw	53
  4055  001B3C  0100               	movlb	0	; () banked
  4056  001B3E  6FB1               	movwf	??_Loading& (0+255),b
  4057  001B40  0E51               	movlw	81
  4058  001B42                     u10427:
  4059  001B42  2EE8               	decfsz	wreg,f,c
  4060  001B44  D7FE               	bra	u10427
  4061  001B46  2FB1               	decfsz	??_Loading& (0+255),f,b
  4062  001B48  D7FC               	bra	u10427
  4063  001B4A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4064  001B4C  D7FA               	bra	u10427
  4065                           
  4066                           ;sort.c: 213: readIR(0);
  4067  001B4E  0E00               	movlw	0
  4068  001B50  0100               	movlb	0	; () banked
  4069  001B52  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4070  001B54  0E00               	movlw	0
  4071  001B56  6F82               	movwf	readIR@ana_port& (0+255),b
  4072  001B58  EC12  F027         	call	_readIR	;wreg free
  4073                           
  4074                           ;sort.c: 214: if(IR_signal==1){
  4075  001B5C  0100               	movlb	0	; () banked
  4076  001B5E  05E0               	decf	_IR_signal& (0+255),w,b
  4077  001B60  0100               	movlb	0	; () banked
  4078  001B62  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4079  001B64  A4D8               	btfss	status,2,c
  4080  001B66  D081               	goto	l839
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;sort.c: 215: if(sensor_outputs[0]){
  4084  001B68  0100               	movlb	0	; () banked
  4085  001B6A  51DA               	movf	_sensor_outputs& (0+255),w,b
  4086  001B6C  0100               	movlb	0	; () banked
  4087  001B6E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4088  001B70  B4D8               	btfsc	status,2,c
  4089  001B72  D011               	goto	l840
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;sort.c: 216: LATAbits.LATA4 = 1;
  4093  001B74  8889               	bsf	3977,4,c	;volatile
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;sort.c: 217: _delay((unsigned long)((250)*(32000000/4000.0)));
  4097  001B76  0E0B               	movlw	11
  4098  001B78  0100               	movlb	0	; () banked
  4099  001B7A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4100  001B7C  0E26               	movlw	38
  4101  001B7E  0100               	movlb	0	; () banked
  4102  001B80  6FB1               	movwf	??_Loading& (0+255),b
  4103  001B82  0E5D               	movlw	93
  4104  001B84                     u10437:
  4105  001B84  2EE8               	decfsz	wreg,f,c
  4106  001B86  D7FE               	bra	u10437
  4107  001B88  2FB1               	decfsz	??_Loading& (0+255),f,b
  4108  001B8A  D7FC               	bra	u10437
  4109  001B8C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4110  001B8E  D7FA               	bra	u10437
  4111  001B90  D000               	nop2	
  4112                           
  4113                           ;sort.c: 218: LATAbits.LATA4 = 0;
  4114  001B92  9889               	bcf	3977,4,c	;volatile
  4115                           
  4116                           ;sort.c: 219: }
  4117  001B94  D06A               	goto	l839
  4118  001B96                     l840:
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;sort.c: 220: else{
  4122                           ;sort.c: 221: TMR2IE = 0;
  4123  001B96  929D               	bcf	3997,1,c	;volatile
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;sort.c: 222: for(int i = 0; i<2500; i++){
  4127  001B98  0E00               	movlw	0
  4128  001B9A  0100               	movlb	0	; () banked
  4129  001B9C  6FBF               	movwf	(Loading@i_1139+1)& (0+255),b
  4130  001B9E  0E00               	movlw	0
  4131  001BA0  6FBE               	movwf	Loading@i_1139& (0+255),b
  4132  001BA2                     l8092:
  4133                           
  4134                           ; BSR set to: 0
  4135  001BA2  0100               	movlb	0	; () banked
  4136  001BA4  BFBF               	btfsc	(Loading@i_1139+1)& (0+255),7,b
  4137  001BA6  D041               	goto	l8120
  4138  001BA8  0EC4               	movlw	196
  4139  001BAA  0100               	movlb	0	; () banked
  4140  001BAC  5DBE               	subwf	Loading@i_1139& (0+255),w,b
  4141  001BAE  0E09               	movlw	9
  4142  001BB0  0100               	movlb	0	; () banked
  4143  001BB2  59BF               	subwfb	(Loading@i_1139+1)& (0+255),w,b
  4144  001BB4  B0D8               	btfsc	status,0,c
  4145  001BB6  D058               	goto	l843
  4146  001BB8  D038               	goto	l8120
  4147  001BBA                     l845:
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;sort.c: 225: LATAbits.LATA4 = 1;
  4151  001BBA  8889               	bsf	3977,4,c	;volatile
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;sort.c: 226: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4155  001BBC  0EC8               	movlw	200
  4156  001BBE                     u10447:
  4157  001BBE  2EE8               	decfsz	wreg,f,c
  4158  001BC0  D7FE               	bra	u10447
  4159                           
  4160                           ;sort.c: 227: LATAbits.LATA4 = 0;
  4161  001BC2  9889               	bcf	3977,4,c	;volatile
  4162                           
  4163                           ;sort.c: 228: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4164  001BC4  0E42               	movlw	66
  4165  001BC6                     u10457:
  4166  001BC6  2EE8               	decfsz	wreg,f,c
  4167  001BC8  D7FE               	bra	u10457
  4168  001BCA  D01C               	goto	L3
  4169  001BCC                     l847:
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;sort.c: 231: LATAbits.LATA4 = 1;
  4173  001BCC  8889               	bsf	3977,4,c	;volatile
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;sort.c: 232: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4177  001BCE  0ED5               	movlw	213
  4178  001BD0                     u10467:
  4179  001BD0  2EE8               	decfsz	wreg,f,c
  4180  001BD2  D7FE               	bra	u10467
  4181  001BD4  F000               	nop	
  4182                           
  4183                           ;sort.c: 233: LATAbits.LATA4 = 0;
  4184  001BD6  9889               	bcf	3977,4,c	;volatile
  4185                           
  4186                           ;sort.c: 234: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4187  001BD8  0E35               	movlw	53
  4188  001BDA                     u10477:
  4189  001BDA  2EE8               	decfsz	wreg,f,c
  4190  001BDC  D7FE               	bra	u10477
  4191  001BDE  D01D               	goto	L4
  4192  001BE0                     l848:
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;sort.c: 237: LATAbits.LATA4 = 1;
  4196  001BE0  8889               	bsf	3977,4,c	;volatile
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;sort.c: 238: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4200  001BE2  0EE2               	movlw	226
  4201  001BE4                     u10487:
  4202  001BE4  2EE8               	decfsz	wreg,f,c
  4203  001BE6  D7FE               	bra	u10487
  4204  001BE8  D000               	nop2	
  4205                           
  4206                           ;sort.c: 239: LATAbits.LATA4 = 0;
  4207  001BEA  9889               	bcf	3977,4,c	;volatile
  4208                           
  4209                           ;sort.c: 240: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4210  001BEC  0E28               	movlw	40
  4211  001BEE                     u10497:
  4212  001BEE  2EE8               	decfsz	wreg,f,c
  4213  001BF0  D7FE               	bra	u10497
  4214                           
  4215                           ;sort.c: 241: break;
  4216  001BF2  D036               	goto	l8122
  4217  001BF4                     l849:
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;sort.c: 243: LATAbits.LATA4 = 1;
  4221  001BF4  8889               	bsf	3977,4,c	;volatile
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;sort.c: 244: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4225  001BF6  0EF0               	movlw	240
  4226  001BF8                     u10507:
  4227  001BF8  2EE8               	decfsz	wreg,f,c
  4228  001BFA  D7FE               	bra	u10507
  4229                           
  4230                           ;sort.c: 245: LATAbits.LATA4 = 0;
  4231  001BFC  9889               	bcf	3977,4,c	;volatile
  4232                           
  4233                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4234  001BFE  0E1A               	movlw	26
  4235  001C00                     u10517:
  4236  001C00  2EE8               	decfsz	wreg,f,c
  4237  001C02  D7FE               	bra	u10517
  4238  001C04                     L3:
  4239  001C04  D000               	nop2	
  4240                           
  4241                           ;sort.c: 247: break;
  4242  001C06  D02C               	goto	l8122
  4243  001C08                     l850:
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;sort.c: 249: LATAbits.LATA4 = 1;
  4247  001C08  8889               	bsf	3977,4,c	;volatile
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;sort.c: 250: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4251  001C0A  0EFD               	movlw	253
  4252  001C0C                     u10527:
  4253  001C0C  2EE8               	decfsz	wreg,f,c
  4254  001C0E  D7FE               	bra	u10527
  4255  001C10  F000               	nop	
  4256                           
  4257                           ;sort.c: 251: LATAbits.LATA4 = 0;
  4258  001C12  9889               	bcf	3977,4,c	;volatile
  4259                           
  4260                           ;sort.c: 252: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4261  001C14  0E85               	movlw	133
  4262  001C16                     u10537:
  4263  001C16  2EE8               	decfsz	wreg,f,c
  4264  001C18  D7FE               	bra	u10537
  4265  001C1A                     L4:
  4266  001C1A  F000               	nop	
  4267                           
  4268                           ;sort.c: 253: break;
  4269  001C1C  D021               	goto	l8122
  4270  001C1E                     l851:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;sort.c: 255: LATAbits.LATA4 = 1;
  4274  001C1E  8889               	bsf	3977,4,c	;volatile
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;sort.c: 256: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4278  001C20  0EA0               	movlw	160
  4279  001C22                     u10547:
  4280  001C22  D000               	nop2	
  4281  001C24  2EE8               	decfsz	wreg,f,c
  4282  001C26  D7FD               	bra	u10547
  4283                           
  4284                           ;sort.c: 258: }
  4285                           
  4286                           ;sort.c: 257: break;
  4287  001C28  D01B               	goto	l8122
  4288  001C2A                     l8120:
  4289  001C2A  C0C2  F0B1         	movff	Loading@j,??_Loading
  4290  001C2E  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4291                           
  4292                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4293                           ; Switch size 1, requested type "space"
  4294                           ; Number of cases is 1, Range of values is 0 to 0
  4295                           ; switch strategies available:
  4296                           ; Name         Instructions Cycles
  4297                           ; simple_byte            4     3 (average)
  4298                           ;	Chosen strategy is simple_byte
  4299  001C32  0100               	movlb	0	; () banked
  4300  001C34  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4301  001C36  0A00               	xorlw	0	; case 0
  4302  001C38  A4D8               	btfss	status,2,c
  4303  001C3A  D7F1               	goto	l851
  4304                           
  4305                           ; BSR set to: 0
  4306                           ; Switch size 1, requested type "space"
  4307                           ; Number of cases is 5, Range of values is 0 to 4
  4308                           ; switch strategies available:
  4309                           ; Name         Instructions Cycles
  4310                           ; simple_byte           16     9 (average)
  4311                           ;	Chosen strategy is simple_byte
  4312  001C3C  0100               	movlb	0	; () banked
  4313  001C3E  51B1               	movf	??_Loading& (0+255),w,b
  4314  001C40  0A00               	xorlw	0	; case 0
  4315  001C42  B4D8               	btfsc	status,2,c
  4316  001C44  D7BA               	goto	l845
  4317  001C46  0A01               	xorlw	1	; case 1
  4318  001C48  B4D8               	btfsc	status,2,c
  4319  001C4A  D7C0               	goto	l847
  4320  001C4C  0A03               	xorlw	3	; case 2
  4321  001C4E  B4D8               	btfsc	status,2,c
  4322  001C50  D7C7               	goto	l848
  4323  001C52  0A01               	xorlw	1	; case 3
  4324  001C54  B4D8               	btfsc	status,2,c
  4325  001C56  D7CE               	goto	l849
  4326  001C58  0A07               	xorlw	7	; case 4
  4327  001C5A  B4D8               	btfsc	status,2,c
  4328  001C5C  D7D5               	goto	l850
  4329  001C5E  D7DF               	goto	l851
  4330  001C60                     l8122:
  4331  001C60  0100               	movlb	0	; () banked
  4332  001C62  4BBE               	infsnz	Loading@i_1139& (0+255),f,b
  4333  001C64  2BBF               	incf	(Loading@i_1139+1)& (0+255),f,b
  4334  001C66  D79D               	goto	l8092
  4335  001C68                     l843:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;sort.c: 259: }
  4339                           ;sort.c: 260: TMR2IE = 1;
  4340  001C68  829D               	bsf	3997,1,c	;volatile
  4341  001C6A                     l839:
  4342                           
  4343                           ;sort.c: 261: }
  4344                           ;sort.c: 262: }
  4345                           ;sort.c: 263: LATAbits.LATA4 = 0;
  4346  001C6A  9889               	bcf	3977,4,c	;volatile
  4347                           
  4348                           ;sort.c: 264: j++;
  4349  001C6C  0100               	movlb	0	; () banked
  4350  001C6E  4BC2               	infsnz	Loading@j& (0+255),f,b
  4351  001C70  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4352  001C72                     l8128:
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;sort.c: 265: }
  4356                           ;sort.c: 267: if(!IR_signal){
  4357  001C72  0100               	movlb	0	; () banked
  4358  001C74  51E0               	movf	_IR_signal& (0+255),w,b
  4359  001C76  0100               	movlb	0	; () banked
  4360  001C78  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4361  001C7A  A4D8               	btfss	status,2,c
  4362  001C7C  D01B               	goto	l8140
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;sort.c: 268: _delay((unsigned long)((500)*(32000000/4000.0)));
  4366  001C7E  0E15               	movlw	21
  4367  001C80  0100               	movlb	0	; () banked
  4368  001C82  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4369  001C84  0E4B               	movlw	75
  4370  001C86  0100               	movlb	0	; () banked
  4371  001C88  6FB1               	movwf	??_Loading& (0+255),b
  4372  001C8A  0EBE               	movlw	190
  4373  001C8C                     u10557:
  4374  001C8C  2EE8               	decfsz	wreg,f,c
  4375  001C8E  D7FE               	bra	u10557
  4376  001C90  2FB1               	decfsz	??_Loading& (0+255),f,b
  4377  001C92  D7FC               	bra	u10557
  4378  001C94  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4379  001C96  D7FA               	bra	u10557
  4380  001C98  F000               	nop	
  4381                           
  4382                           ;sort.c: 269: readIR(0);
  4383  001C9A  0E00               	movlw	0
  4384  001C9C  0100               	movlb	0	; () banked
  4385  001C9E  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4386  001CA0  0E00               	movlw	0
  4387  001CA2  6F82               	movwf	readIR@ana_port& (0+255),b
  4388  001CA4  EC12  F027         	call	_readIR	;wreg free
  4389                           
  4390                           ;sort.c: 270: if(IR_signal==1){
  4391  001CA8  0100               	movlb	0	; () banked
  4392  001CAA  05E0               	decf	_IR_signal& (0+255),w,b
  4393  001CAC  0100               	movlb	0	; () banked
  4394  001CAE  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4395  001CB0  A4D8               	btfss	status,2,c
  4396  001CB2  D006               	goto	l855
  4397  001CB4                     l8140:
  4398                           
  4399                           ; BSR set to: 0
  4400  001CB4  0100               	movlb	0	; () banked
  4401  001CB6  05E0               	decf	_IR_signal& (0+255),w,b
  4402  001CB8  0100               	movlb	0	; () banked
  4403  001CBA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4404  001CBC  B4D8               	btfsc	status,2,c
  4405  001CBE  D6C8               	goto	l8052
  4406  001CC0                     l855:
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;sort.c: 275: }
  4410                           ;sort.c: 276: }
  4411                           ;sort.c: 277: }
  4412                           ;sort.c: 278: LATBbits.LATB2 = 0;
  4413  001CC0  948A               	bcf	3978,2,c	;volatile
  4414  001CC2                     l8142:
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;sort.c: 279: }
  4418                           ;sort.c: 280: f_can_coming_to_ID = 1;
  4419  001CC2  0E00               	movlw	0
  4420  001CC4  0101               	movlb	1	; () banked
  4421  001CC6  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4422  001CC8  0E01               	movlw	1
  4423  001CCA  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4424                           
  4425                           ; BSR set to: 1
  4426                           
  4427                           ; BSR set to: 1
  4428  001CCC  0012               	return	
  4429  001CCE                     __end_of_Loading:
  4430                           	opt stack 0
  4431                           tblptru	equ	0xFF8
  4432                           tblptrh	equ	0xFF7
  4433                           tblptrl	equ	0xFF6
  4434                           tablat	equ	0xFF5
  4435                           prodh	equ	0xFF4
  4436                           prodl	equ	0xFF3
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           postdec1	equ	0xFE5
  4440                           fsr1l	equ	0xFE1
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function _initSortTimer *****************
  4444 ;; Defined at:
  4445 ;;		line 478 in file "sort.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  i               2    8[BANK0 ] int 
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;Total ram usage:        5 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:   10
  4466 ;; This function calls:
  4467 ;;		_getRTC
  4468 ;; This function is called by:
  4469 ;;		_Loading
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text3
  4474  004CD8                     __ptext3:
  4475                           	opt stack 0
  4476  004CD8                     _initSortTimer:
  4477                           	opt stack 18
  4478                           
  4479                           ;sort.c: 480: getRTC();
  4480                           
  4481                           ;incstack = 0
  4482  004CD8  ECEC  F027         	call	_getRTC	;wreg free
  4483                           
  4484                           ;sort.c: 481: for(int i = 0; i < 7; i++){
  4485  004CDC  0E00               	movlw	0
  4486  004CDE  0100               	movlb	0	; () banked
  4487  004CE0  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4488  004CE2  0E00               	movlw	0
  4489  004CE4  6F88               	movwf	initSortTimer@i& (0+255),b
  4490  004CE6                     l7438:
  4491                           
  4492                           ; BSR set to: 0
  4493  004CE6  0100               	movlb	0	; () banked
  4494  004CE8  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4495  004CEA  D008               	goto	l7442
  4496  004CEC  0100               	movlb	0	; () banked
  4497  004CEE  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4498  004CF0  E140               	bnz	l7448
  4499  004CF2  0E07               	movlw	7
  4500  004CF4  0100               	movlb	0	; () banked
  4501  004CF6  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4502  004CF8  B0D8               	btfsc	status,0,c
  4503  004CFA  D03B               	goto	l7448
  4504  004CFC                     l7442:
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;sort.c: 482: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4508  004CFC  0E1C               	movlw	low _time
  4509  004CFE  0100               	movlb	0	; () banked
  4510  004D00  2588               	addwf	initSortTimer@i& (0+255),w,b
  4511  004D02  6ED9               	movwf	fsr2l,c
  4512  004D04  0E01               	movlw	high _time
  4513  004D06  0100               	movlb	0	; () banked
  4514  004D08  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4515  004D0A  6EDA               	movwf	fsr2h,c
  4516  004D0C  50DF               	movf	indf2,w,c
  4517  004D0E  0100               	movlb	0	; () banked
  4518  004D10  6F85               	movwf	??_initSortTimer& (0+255),b
  4519  004D12  0100               	movlb	0	; () banked
  4520  004D14  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4521  004D16  0E0F               	movlw	15
  4522  004D18  1785               	andwf	??_initSortTimer& (0+255),f,b
  4523  004D1A  0E0F               	movlw	15
  4524  004D1C  0100               	movlb	0	; () banked
  4525  004D1E  1785               	andwf	??_initSortTimer& (0+255),f,b
  4526  004D20  0100               	movlb	0	; () banked
  4527  004D22  5185               	movf	??_initSortTimer& (0+255),w,b
  4528  004D24  0D0A               	mullw	10
  4529  004D26  0E1C               	movlw	low _time
  4530  004D28  0100               	movlb	0	; () banked
  4531  004D2A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4532  004D2C  6ED9               	movwf	fsr2l,c
  4533  004D2E  0E01               	movlw	high _time
  4534  004D30  0100               	movlb	0	; () banked
  4535  004D32  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4536  004D34  6EDA               	movwf	fsr2h,c
  4537  004D36  50DF               	movf	indf2,w,c
  4538  004D38  0B0F               	andlw	15
  4539  004D3A  0100               	movlb	0	; () banked
  4540  004D3C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4541  004D3E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4542  004D40  50F3               	movf	prodl,w,c
  4543  004D42  0100               	movlb	0	; () banked
  4544  004D44  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4545  004D46  50F4               	movf	prodh,w,c
  4546  004D48  0100               	movlb	0	; () banked
  4547  004D4A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4548  004D4C  90D8               	bcf	status,0,c
  4549  004D4E  0100               	movlb	0	; () banked
  4550  004D50  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4551  004D52  6ED9               	movwf	fsr2l,c
  4552  004D54  0100               	movlb	0	; () banked
  4553  004D56  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4554  004D58  6EDA               	movwf	fsr2h,c
  4555  004D5A  0E0E               	movlw	low _startTime
  4556  004D5C  26D9               	addwf	fsr2l,f,c
  4557  004D5E  0E01               	movlw	high _startTime
  4558  004D60  22DA               	addwfc	fsr2h,f,c
  4559  004D62  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4560  004D66  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4561                           
  4562                           ; BSR set to: 0
  4563  004D6A  0100               	movlb	0	; () banked
  4564  004D6C  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4565  004D6E  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4566  004D70  D7BA               	goto	l7438
  4567  004D72                     l7448:
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;sort.c: 483: }
  4571                           ;sort.c: 485: T0CON = 0b00010111;
  4572  004D72  0E17               	movlw	23
  4573  004D74  6ED5               	movwf	4053,c	;volatile
  4574                           
  4575                           ;sort.c: 494: TMR0H = 0b10000101;
  4576  004D76  0E85               	movlw	133
  4577  004D78  6ED7               	movwf	4055,c	;volatile
  4578                           
  4579                           ;sort.c: 495: TMR0L = 0b11101110;
  4580  004D7A  0EEE               	movlw	238
  4581  004D7C  6ED6               	movwf	4054,c	;volatile
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;sort.c: 496: TMR0ON = 1;
  4585  004D7E  8ED5               	bsf	4053,7,c	;volatile
  4586                           
  4587                           ; BSR set to: 0
  4588  004D80  0012               	return		;funcret
  4589  004D82                     __end_of_initSortTimer:
  4590                           	opt stack 0
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           postdec1	equ	0xFE5
  4600                           fsr1l	equ	0xFE1
  4601                           indf2	equ	0xFDF
  4602                           postinc2	equ	0xFDE
  4603                           postdec2	equ	0xFDD
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _initGlobalVars *****************
  4609 ;; Defined at:
  4610 ;;		line 442 in file "sort.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        0 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    7
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_Loading
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text4
  4639  0048FA                     __ptext4:
  4640                           	opt stack 0
  4641  0048FA                     _initGlobalVars:
  4642                           	opt stack 21
  4643                           
  4644                           ;sort.c: 444: first = 0;
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;incstack = 0
  4648  0048FA  0E00               	movlw	0
  4649  0048FC  0101               	movlb	1	; () banked
  4650  0048FE  6F3C               	movwf	(_first+1)& (0+255),b
  4651  004900  0E00               	movlw	0
  4652  004902  6F3B               	movwf	_first& (0+255),b
  4653                           
  4654                           ;sort.c: 447: f_loadingNewCan = 0;
  4655  004904  0E00               	movlw	0
  4656  004906  0100               	movlb	0	; () banked
  4657  004908  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4658  00490A  0E00               	movlw	0
  4659  00490C  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4660                           
  4661                           ;sort.c: 448: f_lastCan = 0;
  4662  00490E  0E00               	movlw	0
  4663  004910  0100               	movlb	0	; () banked
  4664  004912  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  4665  004914  0E00               	movlw	0
  4666  004916  6FEA               	movwf	_f_lastCan& (0+255),b
  4667                           
  4668                           ;sort.c: 449: f_ID_receive = 1;
  4669  004918  0E00               	movlw	0
  4670  00491A  0101               	movlb	1	; () banked
  4671  00491C  6F32               	movwf	(_f_ID_receive+1)& (0+255),b
  4672  00491E  0E01               	movlw	1
  4673  004920  6F31               	movwf	_f_ID_receive& (0+255),b
  4674                           
  4675                           ;sort.c: 450: f_can_coming_to_ID = 0;
  4676  004922  0E00               	movlw	0
  4677  004924  0101               	movlb	1	; () banked
  4678  004926  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4679  004928  0E00               	movlw	0
  4680  00492A  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4681                           
  4682                           ;sort.c: 451: f_can_coming_to_distribution = 0;
  4683  00492C  0E00               	movlw	0
  4684  00492E  0101               	movlb	1	; () banked
  4685  004930  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4686  004932  0E00               	movlw	0
  4687  004934  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  4688                           
  4689                           ;sort.c: 452: f_can_distributed = 1;
  4690  004936  0E00               	movlw	0
  4691  004938  0101               	movlb	1	; () banked
  4692  00493A  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  4693  00493C  0E01               	movlw	1
  4694  00493E  6F37               	movwf	_f_can_distributed& (0+255),b
  4695                           
  4696                           ;sort.c: 453: f_most_recent_sort_time = 0;
  4697  004940  0E00               	movlw	0
  4698  004942  0101               	movlb	1	; () banked
  4699  004944  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4700  004946  0E00               	movlw	0
  4701  004948  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  4702                           
  4703                           ;sort.c: 456: count_total = 0;
  4704  00494A  0E00               	movlw	0
  4705  00494C  0100               	movlb	0	; () banked
  4706  00494E  6FFF               	movwf	(_count_total+1)& (0+255),b
  4707  004950  0E00               	movlw	0
  4708  004952  6FFE               	movwf	_count_total& (0+255),b
  4709                           
  4710                           ;sort.c: 457: count_pop_no_tab = 0;
  4711  004954  0E00               	movlw	0
  4712  004956  0101               	movlb	1	; () banked
  4713  004958  6F2A               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4714  00495A  0E00               	movlw	0
  4715  00495C  6F29               	movwf	_count_pop_no_tab& (0+255),b
  4716                           
  4717                           ;sort.c: 458: count_pop_w_tab = 0;
  4718  00495E  0E00               	movlw	0
  4719  004960  0101               	movlb	1	; () banked
  4720  004962  6F2C               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4721  004964  0E00               	movlw	0
  4722  004966  6F2B               	movwf	_count_pop_w_tab& (0+255),b
  4723                           
  4724                           ;sort.c: 459: count_can_w_lab = 0;
  4725  004968  0E00               	movlw	0
  4726  00496A  0101               	movlb	1	; () banked
  4727  00496C  6F28               	movwf	(_count_can_w_lab+1)& (0+255),b
  4728  00496E  0E00               	movlw	0
  4729  004970  6F27               	movwf	_count_can_w_lab& (0+255),b
  4730                           
  4731                           ;sort.c: 460: count_can_no_lab = 0;
  4732  004972  0E00               	movlw	0
  4733  004974  0101               	movlb	1	; () banked
  4734  004976  6F26               	movwf	(_count_can_no_lab+1)& (0+255),b
  4735  004978  0E00               	movlw	0
  4736  00497A  6F25               	movwf	_count_can_no_lab& (0+255),b
  4737                           
  4738                           ;sort.c: 463: most_recent_sort_time = 999;
  4739  00497C  0E03               	movlw	3
  4740  00497E  0101               	movlb	1	; () banked
  4741  004980  6F48               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4742  004982  0EE7               	movlw	231
  4743  004984  6F47               	movwf	_most_recent_sort_time& (0+255),b
  4744                           
  4745                           ;sort.c: 466: motor_toggle_count = 0;
  4746  004986  0E00               	movlw	0
  4747  004988  0101               	movlb	1	; () banked
  4748  00498A  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
  4749  00498C  0E00               	movlw	0
  4750  00498E  6F49               	movwf	_motor_toggle_count& (0+255),b
  4751                           
  4752                           ;sort.c: 467: agitator_toggle_count = 0;
  4753  004990  0E00               	movlw	0
  4754  004992  0101               	movlb	1	; () banked
  4755  004994  6F24               	movwf	(_agitator_toggle_count+1)& (0+255),b
  4756  004996  0E00               	movlw	0
  4757  004998  6F23               	movwf	_agitator_toggle_count& (0+255),b
  4758                           
  4759                           ;sort.c: 470: servo_timer_counter = 0;
  4760  00499A  0E00               	movlw	0
  4761  00499C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4762  00499E  0E00               	movlw	0
  4763  0049A0  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4764                           
  4765                           ;sort.c: 471: servo_timer_target = 9999;
  4766  0049A2  0E27               	movlw	39
  4767  0049A4  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4768  0049A6  0E0F               	movlw	15
  4769  0049A8  6E6F               	movwf	_servo_timer_target,c	;volatile
  4770                           
  4771                           ;sort.c: 472: timer2_counter = 0;
  4772  0049AA  0E00               	movlw	0
  4773  0049AC  6E74               	movwf	_timer2_counter+1,c	;volatile
  4774  0049AE  0E00               	movlw	0
  4775  0049B0  6E73               	movwf	_timer2_counter,c	;volatile
  4776                           
  4777                           ;sort.c: 473: f_arm_position = 0;
  4778  0049B2  0E00               	movlw	0
  4779  0049B4  0100               	movlb	0	; () banked
  4780  0049B6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4781  0049B8  0E00               	movlw	0
  4782  0049BA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;sort.c: 474: pan_servo_state = -1;
  4786  0049BC  686B               	setf	_pan_servo_state,c	;volatile
  4787  0049BE  686C               	setf	_pan_servo_state+1,c	;volatile
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;sort.c: 475: tilt_servo_state = -1;
  4791  0049C0  6871               	setf	_tilt_servo_state,c	;volatile
  4792  0049C2  6872               	setf	_tilt_servo_state+1,c	;volatile
  4793                           
  4794                           ;sort.c: 476: f_panning_to_bin = 0;
  4795  0049C4  0E00               	movlw	0
  4796  0049C6  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4797  0049C8  0E00               	movlw	0
  4798  0049CA  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4799                           
  4800                           ; BSR set to: 0
  4801  0049CC  0012               	return		;funcret
  4802  0049CE                     __end_of_initGlobalVars:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           postinc0	equ	0xFEE
  4811                           wreg	equ	0xFE8
  4812                           postdec1	equ	0xFE5
  4813                           fsr1l	equ	0xFE1
  4814                           indf2	equ	0xFDF
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           fsr2h	equ	0xFDA
  4818                           fsr2l	equ	0xFD9
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function _getMAG *****************
  4822 ;; Defined at:
  4823 ;;		line 598 in file "sort.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;Total ram usage:        2 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    9
  4844 ;; This function calls:
  4845 ;;		_readMAG
  4846 ;; This function is called by:
  4847 ;;		_Loading
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           	psect	text5
  4852  00597E                     __ptext5:
  4853                           	opt stack 0
  4854  00597E                     _getMAG:
  4855                           	opt stack 19
  4856                           
  4857                           ;sort.c: 599: readMAG();
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;incstack = 0
  4861  00597E  ECA8  F02B         	call	_readMAG	;wreg free
  4862                           
  4863                           ;sort.c: 601: if(MAG_signal==1){
  4864  005982  0100               	movlb	0	; () banked
  4865  005984  05E2               	decf	_MAG_signal& (0+255),w,b
  4866  005986  0100               	movlb	0	; () banked
  4867  005988  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4868  00598A  A4D8               	btfss	status,2,c
  4869  00598C  0012               	return	
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;sort.c: 602: _delay((unsigned long)((500)*(32000000/4000.0)));
  4873  00598E  0E15               	movlw	21
  4874  005990  0100               	movlb	0	; () banked
  4875  005992  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4876  005994  0E4B               	movlw	75
  4877  005996  0100               	movlb	0	; () banked
  4878  005998  6F86               	movwf	??_getMAG& (0+255),b
  4879  00599A  0EBE               	movlw	190
  4880  00599C                     u10567:
  4881  00599C  2EE8               	decfsz	wreg,f,c
  4882  00599E  D7FE               	bra	u10567
  4883  0059A0  2F86               	decfsz	??_getMAG& (0+255),f,b
  4884  0059A2  D7FC               	bra	u10567
  4885  0059A4  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4886  0059A6  D7FA               	bra	u10567
  4887  0059A8  F000               	nop	
  4888                           
  4889                           ;sort.c: 603: readMAG();
  4890  0059AA  ECA8  F02B         	call	_readMAG	;wreg free
  4891  0059AE  0012               	return	
  4892  0059B0                     __end_of_getMAG:
  4893                           	opt stack 0
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           postinc0	equ	0xFEE
  4901                           wreg	equ	0xFE8
  4902                           postdec1	equ	0xFE5
  4903                           fsr1l	equ	0xFE1
  4904                           indf2	equ	0xFDF
  4905                           postinc2	equ	0xFDE
  4906                           postdec2	equ	0xFDD
  4907                           fsr2h	equ	0xFDA
  4908                           fsr2l	equ	0xFD9
  4909                           status	equ	0xFD8
  4910                           
  4911 ;; *************** function _getIR *****************
  4912 ;; Defined at:
  4913 ;;		line 581 in file "sort.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  port            2    8[BANK0 ] int 
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;  i               2   11[BANK0 ] int 
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      void 
  4920 ;; Registers used:
  4921 ;;		wreg, status,2, status,0, cstack
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4927 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;Total ram usage:        5 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    9
  4934 ;; This function calls:
  4935 ;;		_readIR
  4936 ;; This function is called by:
  4937 ;;		_Loading
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text6
  4942  0050E2                     __ptext6:
  4943                           	opt stack 0
  4944  0050E2                     _getIR:
  4945                           	opt stack 19
  4946                           
  4947                           ;sort.c: 582: readIR(port);
  4948                           
  4949                           ;incstack = 0
  4950  0050E2  C088  F082         	movff	getIR@port,readIR@ana_port
  4951  0050E6  C089  F083         	movff	getIR@port+1,readIR@ana_port+1
  4952  0050EA  EC12  F027         	call	_readIR	;wreg free
  4953                           
  4954                           ;sort.c: 583: for(int i = 0; i < 150; i++){
  4955  0050EE  0E00               	movlw	0
  4956  0050F0  0100               	movlb	0	; () banked
  4957  0050F2  6F8C               	movwf	(getIR@i+1)& (0+255),b
  4958  0050F4  0E00               	movlw	0
  4959  0050F6  6F8B               	movwf	getIR@i& (0+255),b
  4960  0050F8                     l7538:
  4961                           
  4962                           ; BSR set to: 0
  4963  0050F8  0100               	movlb	0	; () banked
  4964  0050FA  BF8C               	btfsc	(getIR@i+1)& (0+255),7,b
  4965  0050FC  D008               	goto	l7542
  4966  0050FE  0100               	movlb	0	; () banked
  4967  005100  518C               	movf	(getIR@i+1)& (0+255),w,b
  4968  005102  E11E               	bnz	l7554
  4969  005104  0E96               	movlw	150
  4970  005106  0100               	movlb	0	; () banked
  4971  005108  5D8B               	subwf	getIR@i& (0+255),w,b
  4972  00510A  B0D8               	btfsc	status,0,c
  4973  00510C  D019               	goto	l7554
  4974  00510E                     l7542:
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;sort.c: 584: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4978  00510E  0E06               	movlw	6
  4979  005110  0100               	movlb	0	; () banked
  4980  005112  6F8A               	movwf	??_getIR& (0+255),b
  4981  005114  0E30               	movlw	48
  4982  005116                     u10577:
  4983  005116  2EE8               	decfsz	wreg,f,c
  4984  005118  D7FE               	bra	u10577
  4985  00511A  2F8A               	decfsz	??_getIR& (0+255),f,b
  4986  00511C  D7FC               	bra	u10577
  4987  00511E  F000               	nop	
  4988                           
  4989                           ;sort.c: 585: readIR(port);
  4990  005120  C088  F082         	movff	getIR@port,readIR@ana_port
  4991  005124  C089  F083         	movff	getIR@port+1,readIR@ana_port+1
  4992  005128  EC12  F027         	call	_readIR	;wreg free
  4993                           
  4994                           ;sort.c: 586: if(!IR_signal){
  4995  00512C  0100               	movlb	0	; () banked
  4996  00512E  51E0               	movf	_IR_signal& (0+255),w,b
  4997  005130  0100               	movlb	0	; () banked
  4998  005132  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4999  005134  B4D8               	btfsc	status,2,c
  5000  005136  D004               	goto	l7554
  5001                           
  5002                           ; BSR set to: 0
  5003                           
  5004                           ; BSR set to: 0
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;sort.c: 587: break;
  5008  005138  0100               	movlb	0	; () banked
  5009  00513A  4B8B               	infsnz	getIR@i& (0+255),f,b
  5010  00513C  2B8C               	incf	(getIR@i+1)& (0+255),f,b
  5011  00513E  D7DC               	goto	l7538
  5012  005140                     l7554:
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;sort.c: 588: }
  5016                           ;sort.c: 589: }
  5017                           ;sort.c: 590: if(IR_signal==1){
  5018  005140  0100               	movlb	0	; () banked
  5019  005142  05E0               	decf	_IR_signal& (0+255),w,b
  5020  005144  0100               	movlb	0	; () banked
  5021  005146  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5022  005148  A4D8               	btfss	status,2,c
  5023  00514A  D006               	goto	l7558
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;sort.c: 591: f_loadingNewCan = 1;
  5027  00514C  0E00               	movlw	0
  5028  00514E  0100               	movlb	0	; () banked
  5029  005150  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5030  005152  0E01               	movlw	1
  5031  005154  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5032                           
  5033                           ;sort.c: 592: }
  5034  005156  0012               	return	
  5035  005158                     l7558:
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;sort.c: 593: else{
  5039                           ;sort.c: 594: f_loadingNewCan = 0;
  5040  005158  0E00               	movlw	0
  5041  00515A  0100               	movlb	0	; () banked
  5042  00515C  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5043  00515E  0E00               	movlw	0
  5044  005160  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5045  005162  0012               	return	
  5046  005164                     __end_of_getIR:
  5047                           	opt stack 0
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           postinc0	equ	0xFEE
  5055                           wreg	equ	0xFE8
  5056                           postdec1	equ	0xFE5
  5057                           fsr1l	equ	0xFE1
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           fsr2h	equ	0xFDA
  5062                           fsr2l	equ	0xFD9
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function _ID *****************
  5066 ;; Defined at:
  5067 ;;		line 284 in file "sort.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;		None
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  i               2   37[BANK0 ] int 
  5072 ;;  i               2   50[BANK0 ] int 
  5073 ;;  j               2   52[BANK0 ] int 
  5074 ;;  i               2   35[BANK0 ] int 
  5075 ;;  i               2   33[BANK0 ] int 
  5076 ;;  i               2   39[BANK0 ] int 
  5077 ;;  res             4   46[BANK0 ] int [2]
  5078 ;;  time            1   29[BANK0 ] const unsigned char 
  5079 ;;  res2            2   44[BANK0 ] int 
  5080 ;;  res1            2   42[BANK0 ] int 
  5081 ;;  time            1   41[BANK0 ] const unsigned char 
  5082 ;;  n               2   54[BANK0 ] const int 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      void 
  5085 ;; Registers used:
  5086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;Total ram usage:       29 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    9
  5099 ;; This function calls:
  5100 ;;		___awdiv
  5101 ;;		___awtoft
  5102 ;;		___ftge
  5103 ;;		_delay_ms
  5104 ;;		_readCOND
  5105 ;;		_readIR
  5106 ;; This function is called by:
  5107 ;;		_sort
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           	psect	text7
  5112  001192                     __ptext7:
  5113                           	opt stack 0
  5114  001192                     _ID:
  5115                           	opt stack 20
  5116                           
  5117                           ;sort.c: 285: if(f_can_coming_to_ID){
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;incstack = 0
  5121  001192  0101               	movlb	1	; () banked
  5122  001194  5133               	movf	_f_can_coming_to_ID& (0+255),w,b
  5123  001196  0101               	movlb	1	; () banked
  5124  001198  1134               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5125  00119A  B4D8               	btfsc	status,2,c
  5126  00119C  0012               	return	
  5127                           
  5128                           ; BSR set to: 1
  5129                           ;sort.c: 287: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5130  00119E  0E29               	movlw	41
  5131  0011A0  0100               	movlb	0	; () banked
  5132  0011A2  6F9C               	movwf	(??_ID+1)& (0+255),b
  5133  0011A4  0E96               	movlw	150
  5134  0011A6  0100               	movlb	0	; () banked
  5135  0011A8  6F9B               	movwf	??_ID& (0+255),b
  5136  0011AA  0E7F               	movlw	127
  5137  0011AC                     u10587:
  5138  0011AC  2EE8               	decfsz	wreg,f,c
  5139  0011AE  D7FE               	bra	u10587
  5140  0011B0  2F9B               	decfsz	??_ID& (0+255),f,b
  5141  0011B2  D7FC               	bra	u10587
  5142  0011B4  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5143  0011B6  D7FA               	bra	u10587
  5144                           
  5145                           ;sort.c: 289: f_arm_position = 0;
  5146  0011B8  0E00               	movlw	0
  5147  0011BA  0100               	movlb	0	; () banked
  5148  0011BC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5149  0011BE  0E00               	movlw	0
  5150  0011C0  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;sort.c: 291: if(sensor_outputs[0]){
  5154  0011C2  0100               	movlb	0	; () banked
  5155  0011C4  51DA               	movf	_sensor_outputs& (0+255),w,b
  5156  0011C6  0100               	movlb	0	; () banked
  5157  0011C8  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5158  0011CA  B4D8               	btfsc	status,2,c
  5159  0011CC  D036               	goto	l8176
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;sort.c: 293: readIR(3);
  5163  0011CE  0E00               	movlw	0
  5164  0011D0  0100               	movlb	0	; () banked
  5165  0011D2  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5166  0011D4  0E03               	movlw	3
  5167  0011D6  6F82               	movwf	readIR@ana_port& (0+255),b
  5168  0011D8  EC12  F027         	call	_readIR	;wreg free
  5169                           
  5170                           ;sort.c: 294: sensor_outputs[1] = IR_signal;
  5171  0011DC  C0E0  F0DC         	movff	_IR_signal,_sensor_outputs+2
  5172  0011E0  C0E1  F0DD         	movff	_IR_signal+1,_sensor_outputs+3
  5173                           
  5174                           ;sort.c: 295: _delay((unsigned long)((200)*(32000000/4000.0)));
  5175  0011E4  0E09               	movlw	9
  5176  0011E6  0100               	movlb	0	; () banked
  5177  0011E8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5178  0011EA  0E1E               	movlw	30
  5179  0011EC  0100               	movlb	0	; () banked
  5180  0011EE  6F9B               	movwf	??_ID& (0+255),b
  5181  0011F0  0EE4               	movlw	228
  5182  0011F2                     u10597:
  5183  0011F2  2EE8               	decfsz	wreg,f,c
  5184  0011F4  D7FE               	bra	u10597
  5185  0011F6  2F9B               	decfsz	??_ID& (0+255),f,b
  5186  0011F8  D7FC               	bra	u10597
  5187  0011FA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5188  0011FC  D7FA               	bra	u10597
  5189  0011FE  F000               	nop	
  5190                           
  5191                           ;sort.c: 296: readIR(3);
  5192  001200  0E00               	movlw	0
  5193  001202  0100               	movlb	0	; () banked
  5194  001204  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5195  001206  0E03               	movlw	3
  5196  001208  6F82               	movwf	readIR@ana_port& (0+255),b
  5197  00120A  EC12  F027         	call	_readIR	;wreg free
  5198                           
  5199                           ;sort.c: 297: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5200  00120E  0E01               	movlw	1
  5201  001210  0100               	movlb	0	; () banked
  5202  001212  6F9E               	movwf	_ID$1141& (0+255),b
  5203                           
  5204                           ; BSR set to: 0
  5205  001214  0100               	movlb	0	; () banked
  5206  001216  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5207  001218  0100               	movlb	0	; () banked
  5208  00121A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5209  00121C  A4D8               	btfss	status,2,c
  5210  00121E  D009               	goto	l8174
  5211                           
  5212                           ; BSR set to: 0
  5213  001220  0100               	movlb	0	; () banked
  5214  001222  51E0               	movf	_IR_signal& (0+255),w,b
  5215  001224  0100               	movlb	0	; () banked
  5216  001226  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5217  001228  A4D8               	btfss	status,2,c
  5218  00122A  D003               	goto	l8174
  5219                           
  5220                           ; BSR set to: 0
  5221  00122C  0E00               	movlw	0
  5222  00122E  0100               	movlb	0	; () banked
  5223  001230  6F9E               	movwf	_ID$1141& (0+255),b
  5224  001232                     l8174:
  5225                           
  5226                           ; BSR set to: 0
  5227  001232  C09E  F0DC         	movff	_ID$1141,_sensor_outputs+2
  5228  001236  0100               	movlb	0	; () banked
  5229  001238  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5230  00123A                     l8176:
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;sort.c: 298: }
  5234                           ;sort.c: 300: LATCbits.LATC7 = 1;
  5235  00123A  8E8B               	bsf	3979,7,c	;volatile
  5236                           
  5237                           ;sort.c: 303: const int n = 10;
  5238  00123C  0E00               	movlw	0
  5239  00123E  0100               	movlb	0	; () banked
  5240  001240  6FB7               	movwf	(ID@n+1)& (0+255),b
  5241  001242  0E0A               	movlw	10
  5242  001244  6FB6               	movwf	ID@n& (0+255),b
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;sort.c: 305: if(!sensor_outputs[0]){
  5246  001246  0100               	movlb	0	; () banked
  5247  001248  51DA               	movf	_sensor_outputs& (0+255),w,b
  5248  00124A  0100               	movlb	0	; () banked
  5249  00124C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5250  00124E  A4D8               	btfss	status,2,c
  5251  001250  D0E3               	goto	l8230
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;sort.c: 306: const unsigned char time = (600 / n);
  5255  001252  0E02               	movlw	2
  5256  001254  0100               	movlb	0	; () banked
  5257  001256  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5258  001258  0E58               	movlw	88
  5259  00125A  6F86               	movwf	___awdiv@dividend& (0+255),b
  5260  00125C  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5261  001260  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5262  001264  ECAF  F025         	call	___awdiv	;wreg free
  5263  001268  0100               	movlb	0	; () banked
  5264  00126A  5186               	movf	?___awdiv& (0+255),w,b
  5265  00126C  0100               	movlb	0	; () banked
  5266  00126E  6FA9               	movwf	ID@time& (0+255),b
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;sort.c: 307: int res1 = 0;
  5270  001270  0E00               	movlw	0
  5271  001272  0100               	movlb	0	; () banked
  5272  001274  6FAB               	movwf	(ID@res1+1)& (0+255),b
  5273  001276  0E00               	movlw	0
  5274  001278  6FAA               	movwf	ID@res1& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;sort.c: 308: int res2 = 0;
  5278  00127A  0E00               	movlw	0
  5279  00127C  0100               	movlb	0	; () banked
  5280  00127E  6FAD               	movwf	(ID@res2+1)& (0+255),b
  5281  001280  0E00               	movlw	0
  5282  001282  6FAC               	movwf	ID@res2& (0+255),b
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;sort.c: 309: for(int i = 0; i<n; i++){
  5286  001284  0E00               	movlw	0
  5287  001286  0100               	movlb	0	; () banked
  5288  001288  6FA2               	movwf	(ID@i+1)& (0+255),b
  5289  00128A  0E00               	movlw	0
  5290  00128C  6FA1               	movwf	ID@i& (0+255),b
  5291  00128E                     l8188:
  5292                           
  5293                           ; BSR set to: 0
  5294  00128E  0100               	movlb	0	; () banked
  5295  001290  51B6               	movf	ID@n& (0+255),w,b
  5296  001292  0100               	movlb	0	; () banked
  5297  001294  5DA1               	subwf	ID@i& (0+255),w,b
  5298  001296  0100               	movlb	0	; () banked
  5299  001298  51A2               	movf	(ID@i+1)& (0+255),w,b
  5300  00129A  0A80               	xorlw	128
  5301  00129C  0100               	movlb	0	; () banked
  5302  00129E  6F9B               	movwf	??_ID& (0+255),b
  5303  0012A0  0100               	movlb	0	; () banked
  5304  0012A2  51B7               	movf	(ID@n+1)& (0+255),w,b
  5305  0012A4  0A80               	xorlw	128
  5306  0012A6  0100               	movlb	0	; () banked
  5307  0012A8  599B               	subwfb	??_ID& (0+255),w,b
  5308  0012AA  B0D8               	btfsc	status,0,c
  5309  0012AC  D012               	goto	l864
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;sort.c: 310: delay_ms(time);
  5313                           
  5314                           ; BSR set to: 0
  5315                           
  5316                           ; BSR set to: 0
  5317  0012AE  0100               	movlb	0	; () banked
  5318  0012B0  51A9               	movf	ID@time& (0+255),w,b
  5319  0012B2  EC50  F02E         	call	_delay_ms
  5320                           
  5321                           ;sort.c: 311: readCOND();
  5322  0012B6  EC82  F02B         	call	_readCOND	;wreg free
  5323                           
  5324                           ;sort.c: 312: res1 += COND_signal;
  5325  0012BA  0100               	movlb	0	; () banked
  5326  0012BC  51DE               	movf	_COND_signal& (0+255),w,b
  5327  0012BE  0100               	movlb	0	; () banked
  5328  0012C0  27AA               	addwf	ID@res1& (0+255),f,b
  5329  0012C2  0100               	movlb	0	; () banked
  5330  0012C4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5331  0012C6  0100               	movlb	0	; () banked
  5332  0012C8  23AB               	addwfc	(ID@res1+1)& (0+255),f,b
  5333                           
  5334                           ; BSR set to: 0
  5335  0012CA  0100               	movlb	0	; () banked
  5336  0012CC  4BA1               	infsnz	ID@i& (0+255),f,b
  5337  0012CE  2BA2               	incf	(ID@i+1)& (0+255),f,b
  5338  0012D0  D7DE               	goto	l8188
  5339  0012D2                     l864:
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;sort.c: 313: }
  5343                           ;sort.c: 314: LATCbits.LATC7 = 0;
  5344  0012D2  9E8B               	bcf	3979,7,c	;volatile
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;sort.c: 315: _delay((unsigned long)((200)*(32000000/4000.0)));
  5348  0012D4  0E09               	movlw	9
  5349  0012D6  0100               	movlb	0	; () banked
  5350  0012D8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5351  0012DA  0E1E               	movlw	30
  5352  0012DC  0100               	movlb	0	; () banked
  5353  0012DE  6F9B               	movwf	??_ID& (0+255),b
  5354  0012E0  0EE4               	movlw	228
  5355  0012E2                     u10607:
  5356  0012E2  2EE8               	decfsz	wreg,f,c
  5357  0012E4  D7FE               	bra	u10607
  5358  0012E6  2F9B               	decfsz	??_ID& (0+255),f,b
  5359  0012E8  D7FC               	bra	u10607
  5360  0012EA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5361  0012EC  D7FA               	bra	u10607
  5362  0012EE  F000               	nop	
  5363                           
  5364                           ;sort.c: 316: LATCbits.LATC7 = 1;
  5365  0012F0  8E8B               	bsf	3979,7,c	;volatile
  5366                           
  5367                           ;sort.c: 317: for(int i = 0; i<n; i++){
  5368  0012F2  0E00               	movlw	0
  5369  0012F4  0100               	movlb	0	; () banked
  5370  0012F6  6FA4               	movwf	(ID@i_1148+1)& (0+255),b
  5371  0012F8  0E00               	movlw	0
  5372  0012FA  6FA3               	movwf	ID@i_1148& (0+255),b
  5373  0012FC                     l8206:
  5374                           
  5375                           ; BSR set to: 0
  5376  0012FC  0100               	movlb	0	; () banked
  5377  0012FE  51B6               	movf	ID@n& (0+255),w,b
  5378  001300  0100               	movlb	0	; () banked
  5379  001302  5DA3               	subwf	ID@i_1148& (0+255),w,b
  5380  001304  0100               	movlb	0	; () banked
  5381  001306  51A4               	movf	(ID@i_1148+1)& (0+255),w,b
  5382  001308  0A80               	xorlw	128
  5383  00130A  0100               	movlb	0	; () banked
  5384  00130C  6F9B               	movwf	??_ID& (0+255),b
  5385  00130E  0100               	movlb	0	; () banked
  5386  001310  51B7               	movf	(ID@n+1)& (0+255),w,b
  5387  001312  0A80               	xorlw	128
  5388  001314  0100               	movlb	0	; () banked
  5389  001316  599B               	subwfb	??_ID& (0+255),w,b
  5390  001318  B0D8               	btfsc	status,0,c
  5391  00131A  D012               	goto	l866
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;sort.c: 318: delay_ms(time);
  5395                           
  5396                           ; BSR set to: 0
  5397                           
  5398                           ; BSR set to: 0
  5399  00131C  0100               	movlb	0	; () banked
  5400  00131E  51A9               	movf	ID@time& (0+255),w,b
  5401  001320  EC50  F02E         	call	_delay_ms
  5402                           
  5403                           ;sort.c: 319: readCOND();
  5404  001324  EC82  F02B         	call	_readCOND	;wreg free
  5405                           
  5406                           ;sort.c: 320: res2 += COND_signal;
  5407  001328  0100               	movlb	0	; () banked
  5408  00132A  51DE               	movf	_COND_signal& (0+255),w,b
  5409  00132C  0100               	movlb	0	; () banked
  5410  00132E  27AC               	addwf	ID@res2& (0+255),f,b
  5411  001330  0100               	movlb	0	; () banked
  5412  001332  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5413  001334  0100               	movlb	0	; () banked
  5414  001336  23AD               	addwfc	(ID@res2+1)& (0+255),f,b
  5415                           
  5416                           ; BSR set to: 0
  5417  001338  0100               	movlb	0	; () banked
  5418  00133A  4BA3               	infsnz	ID@i_1148& (0+255),f,b
  5419  00133C  2BA4               	incf	(ID@i_1148+1)& (0+255),f,b
  5420  00133E  D7DE               	goto	l8206
  5421  001340                     l866:
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;sort.c: 321: }
  5425                           ;sort.c: 322: LATCbits.LATC7 = 0;
  5426  001340  9E8B               	bcf	3979,7,c	;volatile
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;sort.c: 323: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5430  001342  0E9A               	movlw	154
  5431  001344  0100               	movlb	0	; () banked
  5432  001346  6F92               	movwf	___ftge@ff1& (0+255),b
  5433  001348  0E99               	movlw	153
  5434  00134A  0100               	movlb	0	; () banked
  5435  00134C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5436  00134E  0E3E               	movlw	62
  5437  001350  0100               	movlb	0	; () banked
  5438  001352  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5439  001354  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5440  001358  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5441  00135C  C0AA  F086         	movff	ID@res1,___awdiv@dividend
  5442  001360  C0AB  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5443  001364  ECAF  F025         	call	___awdiv	;wreg free
  5444  001368  C086  F08E         	movff	?___awdiv,___awtoft@c
  5445  00136C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5446  001370  ECF1  F02B         	call	___awtoft	;wreg free
  5447  001374  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5448  001378  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5449  00137C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5450  001380  EC4B  F025         	call	___ftge	;wreg free
  5451  001384  0100               	movlb	0	; () banked
  5452  001386  B0D8               	btfsc	status,0,c
  5453  001388  D002               	goto	u7170
  5454  00138A  0E01               	movlw	1
  5455  00138C  D001               	goto	u7180
  5456  00138E                     u7170:
  5457  00138E  0E00               	movlw	0
  5458  001390                     u7180:
  5459  001390  0100               	movlb	0	; () banked
  5460  001392  6FAA               	movwf	ID@res1& (0+255),b
  5461  001394  6BAB               	clrf	(ID@res1+1)& (0+255),b
  5462                           
  5463                           ;sort.c: 324: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5464  001396  0E9A               	movlw	154
  5465  001398  0100               	movlb	0	; () banked
  5466  00139A  6F92               	movwf	___ftge@ff1& (0+255),b
  5467  00139C  0E99               	movlw	153
  5468  00139E  0100               	movlb	0	; () banked
  5469  0013A0  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5470  0013A2  0E3E               	movlw	62
  5471  0013A4  0100               	movlb	0	; () banked
  5472  0013A6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5473  0013A8  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5474  0013AC  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5475  0013B0  C0AC  F086         	movff	ID@res2,___awdiv@dividend
  5476  0013B4  C0AD  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5477  0013B8  ECAF  F025         	call	___awdiv	;wreg free
  5478  0013BC  C086  F08E         	movff	?___awdiv,___awtoft@c
  5479  0013C0  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5480  0013C4  ECF1  F02B         	call	___awtoft	;wreg free
  5481  0013C8  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5482  0013CC  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5483  0013D0  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5484  0013D4  EC4B  F025         	call	___ftge	;wreg free
  5485  0013D8  0100               	movlb	0	; () banked
  5486  0013DA  B0D8               	btfsc	status,0,c
  5487  0013DC  D002               	goto	u7190
  5488  0013DE  0E01               	movlw	1
  5489  0013E0  D001               	goto	u7200
  5490  0013E2                     u7190:
  5491  0013E2  0E00               	movlw	0
  5492  0013E4                     u7200:
  5493  0013E4  0100               	movlb	0	; () banked
  5494  0013E6  6FAC               	movwf	ID@res2& (0+255),b
  5495  0013E8  6BAD               	clrf	(ID@res2+1)& (0+255),b
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;sort.c: 327: sensor_outputs[1] = (res1 || res2);
  5499  0013EA  0E01               	movlw	1
  5500  0013EC  0100               	movlb	0	; () banked
  5501  0013EE  6F9F               	movwf	_ID$1149& (0+255),b
  5502                           
  5503                           ; BSR set to: 0
  5504  0013F0  0100               	movlb	0	; () banked
  5505  0013F2  51AA               	movf	ID@res1& (0+255),w,b
  5506  0013F4  0100               	movlb	0	; () banked
  5507  0013F6  11AB               	iorwf	(ID@res1+1)& (0+255),w,b
  5508  0013F8  A4D8               	btfss	status,2,c
  5509  0013FA  D009               	goto	l8228
  5510                           
  5511                           ; BSR set to: 0
  5512  0013FC  0100               	movlb	0	; () banked
  5513  0013FE  51AC               	movf	ID@res2& (0+255),w,b
  5514  001400  0100               	movlb	0	; () banked
  5515  001402  11AD               	iorwf	(ID@res2+1)& (0+255),w,b
  5516  001404  A4D8               	btfss	status,2,c
  5517  001406  D003               	goto	l8228
  5518                           
  5519                           ; BSR set to: 0
  5520  001408  0E00               	movlw	0
  5521  00140A  0100               	movlb	0	; () banked
  5522  00140C  6F9F               	movwf	_ID$1149& (0+255),b
  5523  00140E                     l8228:
  5524                           
  5525                           ; BSR set to: 0
  5526  00140E  C09F  F0DC         	movff	_ID$1149,_sensor_outputs+2
  5527  001412  0100               	movlb	0	; () banked
  5528  001414  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5529                           
  5530                           ;sort.c: 328: }
  5531  001416  D0E3               	goto	l8274
  5532  001418                     l8230:
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;sort.c: 329: else{
  5536                           ;sort.c: 330: const unsigned char time = (400 / n);
  5537  001418  0E01               	movlw	1
  5538  00141A  0100               	movlb	0	; () banked
  5539  00141C  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5540  00141E  0E90               	movlw	144
  5541  001420  6F86               	movwf	___awdiv@dividend& (0+255),b
  5542  001422  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5543  001426  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5544  00142A  ECAF  F025         	call	___awdiv	;wreg free
  5545  00142E  0100               	movlb	0	; () banked
  5546  001430  5186               	movf	?___awdiv& (0+255),w,b
  5547  001432  0100               	movlb	0	; () banked
  5548  001434  6F9D               	movwf	ID@time_1150& (0+255),b
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;sort.c: 331: int res[2];
  5552                           ;sort.c: 333: for(int j = 0; j < 2; j++){
  5553  001436  0E00               	movlw	0
  5554  001438  0100               	movlb	0	; () banked
  5555  00143A  6FB5               	movwf	(ID@j+1)& (0+255),b
  5556  00143C  0E00               	movlw	0
  5557  00143E  6FB4               	movwf	ID@j& (0+255),b
  5558                           
  5559                           ; BSR set to: 0
  5560  001440  0100               	movlb	0	; () banked
  5561  001442  BFB5               	btfsc	(ID@j+1)& (0+255),7,b
  5562  001444  D00A               	goto	l870
  5563  001446  0100               	movlb	0	; () banked
  5564  001448  51B5               	movf	(ID@j+1)& (0+255),w,b
  5565  00144A  E106               	bnz	u7230
  5566  00144C  0E02               	movlw	2
  5567  00144E  0100               	movlb	0	; () banked
  5568  001450  5DB4               	subwf	ID@j& (0+255),w,b
  5569  001452  B0D8               	btfsc	status,0,c
  5570  001454  D0C4               	goto	l8274
  5571  001456  D001               	goto	l870
  5572  001458                     u7230:
  5573                           
  5574                           ; BSR set to: 0
  5575  001458  D0C2               	goto	l8274
  5576  00145A                     l870:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;sort.c: 334: LATCbits.LATC7 = 1;
  5580  00145A  8E8B               	bsf	3979,7,c	;volatile
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;sort.c: 335: for(int i = 0; i < n; i++){
  5584  00145C  0E00               	movlw	0
  5585  00145E  0100               	movlb	0	; () banked
  5586  001460  6FA6               	movwf	(ID@i_1153+1)& (0+255),b
  5587  001462  0E00               	movlw	0
  5588  001464  6FA5               	movwf	ID@i_1153& (0+255),b
  5589  001466                     l8240:
  5590                           
  5591                           ; BSR set to: 0
  5592  001466  0100               	movlb	0	; () banked
  5593  001468  51B6               	movf	ID@n& (0+255),w,b
  5594  00146A  0100               	movlb	0	; () banked
  5595  00146C  5DA5               	subwf	ID@i_1153& (0+255),w,b
  5596  00146E  0100               	movlb	0	; () banked
  5597  001470  51A6               	movf	(ID@i_1153+1)& (0+255),w,b
  5598  001472  0A80               	xorlw	128
  5599  001474  0100               	movlb	0	; () banked
  5600  001476  6F9B               	movwf	??_ID& (0+255),b
  5601  001478  0100               	movlb	0	; () banked
  5602  00147A  51B7               	movf	(ID@n+1)& (0+255),w,b
  5603  00147C  0A80               	xorlw	128
  5604  00147E  0100               	movlb	0	; () banked
  5605  001480  599B               	subwfb	??_ID& (0+255),w,b
  5606  001482  B0D8               	btfsc	status,0,c
  5607  001484  D01A               	goto	l873
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;sort.c: 336: delay_ms(time);
  5611                           
  5612                           ; BSR set to: 0
  5613                           
  5614                           ; BSR set to: 0
  5615  001486  0100               	movlb	0	; () banked
  5616  001488  519D               	movf	ID@time_1150& (0+255),w,b
  5617  00148A  EC50  F02E         	call	_delay_ms
  5618                           
  5619                           ;sort.c: 337: readCOND();
  5620  00148E  EC82  F02B         	call	_readCOND	;wreg free
  5621                           
  5622                           ;sort.c: 338: res[j] += COND_signal;
  5623  001492  90D8               	bcf	status,0,c
  5624  001494  0100               	movlb	0	; () banked
  5625  001496  35B4               	rlcf	ID@j& (0+255),w,b
  5626  001498  6ED9               	movwf	fsr2l,c
  5627  00149A  0100               	movlb	0	; () banked
  5628  00149C  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5629  00149E  6EDA               	movwf	fsr2h,c
  5630  0014A0  0EAE               	movlw	low ID@res
  5631  0014A2  26D9               	addwf	fsr2l,f,c
  5632  0014A4  0E00               	movlw	high ID@res
  5633  0014A6  22DA               	addwfc	fsr2h,f,c
  5634  0014A8  0100               	movlb	0	; () banked
  5635  0014AA  51DE               	movf	_COND_signal& (0+255),w,b
  5636  0014AC  26DE               	addwf	postinc2,f,c
  5637  0014AE  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5638  0014B0  22DD               	addwfc	postdec2,f,c
  5639                           
  5640                           ; BSR set to: 0
  5641  0014B2  0100               	movlb	0	; () banked
  5642  0014B4  4BA5               	infsnz	ID@i_1153& (0+255),f,b
  5643  0014B6  2BA6               	incf	(ID@i_1153+1)& (0+255),f,b
  5644  0014B8  D7D6               	goto	l8240
  5645  0014BA                     l873:
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;sort.c: 339: }
  5649                           ;sort.c: 340: LATCbits.LATC7 = 0;
  5650  0014BA  9E8B               	bcf	3979,7,c	;volatile
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;sort.c: 342: _delay((unsigned long)((200)*(32000000/4000.0)));
  5654  0014BC  0E09               	movlw	9
  5655  0014BE  0100               	movlb	0	; () banked
  5656  0014C0  6F9C               	movwf	(??_ID+1)& (0+255),b
  5657  0014C2  0E1E               	movlw	30
  5658  0014C4  0100               	movlb	0	; () banked
  5659  0014C6  6F9B               	movwf	??_ID& (0+255),b
  5660  0014C8  0EE4               	movlw	228
  5661  0014CA                     u10617:
  5662  0014CA  2EE8               	decfsz	wreg,f,c
  5663  0014CC  D7FE               	bra	u10617
  5664  0014CE  2F9B               	decfsz	??_ID& (0+255),f,b
  5665  0014D0  D7FC               	bra	u10617
  5666  0014D2  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5667  0014D4  D7FA               	bra	u10617
  5668  0014D6  F000               	nop	
  5669                           
  5670                           ;sort.c: 345: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5671  0014D8  0E9A               	movlw	154
  5672  0014DA  0100               	movlb	0	; () banked
  5673  0014DC  6F92               	movwf	___ftge@ff1& (0+255),b
  5674  0014DE  0E99               	movlw	153
  5675  0014E0  0100               	movlb	0	; () banked
  5676  0014E2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5677  0014E4  0E3E               	movlw	62
  5678  0014E6  0100               	movlb	0	; () banked
  5679  0014E8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5680  0014EA  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5681  0014EE  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5682  0014F2  90D8               	bcf	status,0,c
  5683  0014F4  0100               	movlb	0	; () banked
  5684  0014F6  35B4               	rlcf	ID@j& (0+255),w,b
  5685  0014F8  6ED9               	movwf	fsr2l,c
  5686  0014FA  0100               	movlb	0	; () banked
  5687  0014FC  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5688  0014FE  6EDA               	movwf	fsr2h,c
  5689  001500  0EAE               	movlw	low ID@res
  5690  001502  26D9               	addwf	fsr2l,f,c
  5691  001504  0E00               	movlw	high ID@res
  5692  001506  22DA               	addwfc	fsr2h,f,c
  5693  001508  CFDE F086          	movff	postinc2,___awdiv@dividend
  5694  00150C  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5695  001510  ECAF  F025         	call	___awdiv	;wreg free
  5696  001514  C086  F08E         	movff	?___awdiv,___awtoft@c
  5697  001518  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5698  00151C  ECF1  F02B         	call	___awtoft	;wreg free
  5699  001520  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5700  001524  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5701  001528  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5702  00152C  EC4B  F025         	call	___ftge	;wreg free
  5703  001530  0100               	movlb	0	; () banked
  5704  001532  B0D8               	btfsc	status,0,c
  5705  001534  D002               	goto	u7260
  5706  001536  0E01               	movlw	1
  5707  001538  D001               	goto	u7270
  5708  00153A                     u7260:
  5709  00153A  0E00               	movlw	0
  5710  00153C                     u7270:
  5711  00153C  0100               	movlb	0	; () banked
  5712  00153E  6F9B               	movwf	??_ID& (0+255),b
  5713  001540  6B9C               	clrf	(??_ID+1)& (0+255),b
  5714  001542  90D8               	bcf	status,0,c
  5715  001544  0100               	movlb	0	; () banked
  5716  001546  35B4               	rlcf	ID@j& (0+255),w,b
  5717  001548  6ED9               	movwf	fsr2l,c
  5718  00154A  0100               	movlb	0	; () banked
  5719  00154C  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5720  00154E  6EDA               	movwf	fsr2h,c
  5721  001550  0EAE               	movlw	low ID@res
  5722  001552  26D9               	addwf	fsr2l,f,c
  5723  001554  0E00               	movlw	high ID@res
  5724  001556  22DA               	addwfc	fsr2h,f,c
  5725  001558  C09B  FFDE         	movff	??_ID,postinc2
  5726  00155C  C09C  FFDD         	movff	??_ID+1,postdec2
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;sort.c: 346: if(j==0){
  5730  001560  0100               	movlb	0	; () banked
  5731  001562  51B4               	movf	ID@j& (0+255),w,b
  5732  001564  0100               	movlb	0	; () banked
  5733  001566  11B5               	iorwf	(ID@j+1)& (0+255),w,b
  5734  001568  A4D8               	btfss	status,2,c
  5735  00156A  D010               	goto	l8260
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;sort.c: 347: sensor_outputs[1] = res[j];
  5739  00156C  90D8               	bcf	status,0,c
  5740  00156E  0100               	movlb	0	; () banked
  5741  001570  35B4               	rlcf	ID@j& (0+255),w,b
  5742  001572  6ED9               	movwf	fsr2l,c
  5743  001574  0100               	movlb	0	; () banked
  5744  001576  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5745  001578  6EDA               	movwf	fsr2h,c
  5746  00157A  0EAE               	movlw	low ID@res
  5747  00157C  26D9               	addwf	fsr2l,f,c
  5748  00157E  0E00               	movlw	high ID@res
  5749  001580  22DA               	addwfc	fsr2h,f,c
  5750  001582  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5751  001586  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5752                           
  5753                           ;sort.c: 348: }
  5754  00158A  D01F               	goto	l8270
  5755  00158C                     l8260:
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;sort.c: 349: else{
  5759                           ;sort.c: 350: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5760  00158C  0E01               	movlw	1
  5761  00158E  0100               	movlb	0	; () banked
  5762  001590  6FA0               	movwf	_ID$1154& (0+255),b
  5763                           
  5764                           ; BSR set to: 0
  5765  001592  0100               	movlb	0	; () banked
  5766  001594  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5767  001596  0100               	movlb	0	; () banked
  5768  001598  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5769  00159A  A4D8               	btfss	status,2,c
  5770  00159C  D012               	goto	l8268
  5771                           
  5772                           ; BSR set to: 0
  5773  00159E  90D8               	bcf	status,0,c
  5774  0015A0  0100               	movlb	0	; () banked
  5775  0015A2  35B4               	rlcf	ID@j& (0+255),w,b
  5776  0015A4  6ED9               	movwf	fsr2l,c
  5777  0015A6  0100               	movlb	0	; () banked
  5778  0015A8  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5779  0015AA  6EDA               	movwf	fsr2h,c
  5780  0015AC  0EAE               	movlw	low ID@res
  5781  0015AE  26D9               	addwf	fsr2l,f,c
  5782  0015B0  0E00               	movlw	high ID@res
  5783  0015B2  22DA               	addwfc	fsr2h,f,c
  5784  0015B4  50DE               	movf	postinc2,w,c
  5785  0015B6  10DE               	iorwf	postinc2,w,c
  5786  0015B8  A4D8               	btfss	status,2,c
  5787  0015BA  D003               	goto	l8268
  5788                           
  5789                           ; BSR set to: 0
  5790  0015BC  0E00               	movlw	0
  5791  0015BE  0100               	movlb	0	; () banked
  5792  0015C0  6FA0               	movwf	_ID$1154& (0+255),b
  5793  0015C2                     l8268:
  5794                           
  5795                           ; BSR set to: 0
  5796  0015C2  C0A0  F0DC         	movff	_ID$1154,_sensor_outputs+2
  5797  0015C6  0100               	movlb	0	; () banked
  5798  0015C8  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5799  0015CA                     l8270:
  5800                           
  5801                           ; BSR set to: 0
  5802  0015CA  0100               	movlb	0	; () banked
  5803  0015CC  4BB4               	infsnz	ID@j& (0+255),f,b
  5804  0015CE  2BB5               	incf	(ID@j+1)& (0+255),f,b
  5805                           
  5806                           ; BSR set to: 0
  5807  0015D0  0100               	movlb	0	; () banked
  5808  0015D2  BFB5               	btfsc	(ID@j+1)& (0+255),7,b
  5809  0015D4  D742               	goto	l870
  5810  0015D6  0100               	movlb	0	; () banked
  5811  0015D8  51B5               	movf	(ID@j+1)& (0+255),w,b
  5812  0015DA  E101               	bnz	l8274
  5813  0015DC  D737               	goto	L5
  5814  0015DE                     l8274:
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;sort.c: 351: }
  5818                           ;sort.c: 352: }
  5819                           ;sort.c: 353: }
  5820                           ;sort.c: 361: if(!sensor_outputs[0]){
  5821  0015DE  0100               	movlb	0	; () banked
  5822  0015E0  51DA               	movf	_sensor_outputs& (0+255),w,b
  5823  0015E2  0100               	movlb	0	; () banked
  5824  0015E4  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5825  0015E6  A4D8               	btfss	status,2,c
  5826  0015E8  D016               	goto	l8286
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;sort.c: 362: if(!sensor_outputs[1]){
  5830  0015EA  0100               	movlb	0	; () banked
  5831  0015EC  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5832  0015EE  0100               	movlb	0	; () banked
  5833  0015F0  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5834  0015F2  A4D8               	btfss	status,2,c
  5835  0015F4  D008               	goto	l8282
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;sort.c: 363: count_pop_no_tab++;
  5839  0015F6  0101               	movlb	1	; () banked
  5840  0015F8  4B29               	infsnz	_count_pop_no_tab& (0+255),f,b
  5841  0015FA  2B2A               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5842                           
  5843                           ; BSR set to: 1
  5844                           ;sort.c: 364: cur_can = 0;
  5845  0015FC  0E00               	movlw	0
  5846  0015FE  0101               	movlb	1	; () banked
  5847  001600  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5848  001602  0E00               	movlw	0
  5849  001604  D007               	goto	L6
  5850  001606                     l8282:
  5851                           
  5852                           ;sort.c: 366: else{
  5853                           ;sort.c: 367: count_pop_w_tab++;
  5854  001606  0101               	movlb	1	; () banked
  5855  001608  4B2B               	infsnz	_count_pop_w_tab& (0+255),f,b
  5856  00160A  2B2C               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5857                           
  5858                           ; BSR set to: 1
  5859                           ;sort.c: 368: cur_can = 1;
  5860  00160C  0E00               	movlw	0
  5861  00160E  0101               	movlb	1	; () banked
  5862  001610  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5863  001612  0E01               	movlw	1
  5864  001614                     L6:
  5865  001614  6F2D               	movwf	_cur_can& (0+255),b
  5866  001616                     l8286:
  5867                           
  5868                           ;sort.c: 369: }
  5869                           ;sort.c: 370: }
  5870                           ;sort.c: 371: if(sensor_outputs[0]){
  5871  001616  0100               	movlb	0	; () banked
  5872  001618  51DA               	movf	_sensor_outputs& (0+255),w,b
  5873  00161A  0100               	movlb	0	; () banked
  5874  00161C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5875  00161E  B4D8               	btfsc	status,2,c
  5876  001620  D016               	goto	l8298
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;sort.c: 372: if(!sensor_outputs[1]){
  5880  001622  0100               	movlb	0	; () banked
  5881  001624  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5882  001626  0100               	movlb	0	; () banked
  5883  001628  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5884  00162A  A4D8               	btfss	status,2,c
  5885  00162C  D008               	goto	l8294
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;sort.c: 373: count_can_w_lab++;
  5889  00162E  0101               	movlb	1	; () banked
  5890  001630  4B27               	infsnz	_count_can_w_lab& (0+255),f,b
  5891  001632  2B28               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5892                           
  5893                           ; BSR set to: 1
  5894                           ;sort.c: 374: cur_can = 2;
  5895  001634  0E00               	movlw	0
  5896  001636  0101               	movlb	1	; () banked
  5897  001638  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5898  00163A  0E02               	movlw	2
  5899  00163C  D007               	goto	L7
  5900  00163E                     l8294:
  5901                           
  5902                           ;sort.c: 376: else{
  5903                           ;sort.c: 377: count_can_no_lab++;
  5904  00163E  0101               	movlb	1	; () banked
  5905  001640  4B25               	infsnz	_count_can_no_lab& (0+255),f,b
  5906  001642  2B26               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5907                           
  5908                           ; BSR set to: 1
  5909                           ;sort.c: 378: cur_can = 3;
  5910  001644  0E00               	movlw	0
  5911  001646  0101               	movlb	1	; () banked
  5912  001648  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5913  00164A  0E03               	movlw	3
  5914  00164C                     L7:
  5915  00164C  6F2D               	movwf	_cur_can& (0+255),b
  5916  00164E                     l8298:
  5917  00164E  0101               	movlb	1	; () banked
  5918  001650  5137               	movf	_f_can_distributed& (0+255),w,b
  5919  001652  0101               	movlb	1	; () banked
  5920  001654  1138               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5921  001656  B4D8               	btfsc	status,2,c
  5922  001658  D7FA               	goto	l8298
  5923                           
  5924                           ; BSR set to: 1
  5925                           ;sort.c: 384: for(int i=0;i<10000;i++)
  5926                           
  5927                           ; BSR set to: 1
  5928  00165A  0E00               	movlw	0
  5929  00165C  0100               	movlb	0	; () banked
  5930  00165E  6FA8               	movwf	(ID@i_1155+1)& (0+255),b
  5931  001660  0E00               	movlw	0
  5932  001662  6FA7               	movwf	ID@i_1155& (0+255),b
  5933  001664                     l8302:
  5934                           
  5935                           ; BSR set to: 0
  5936  001664  0100               	movlb	0	; () banked
  5937  001666  BFA8               	btfsc	(ID@i_1155+1)& (0+255),7,b
  5938  001668  D008               	goto	l887
  5939  00166A  0E10               	movlw	16
  5940  00166C  0100               	movlb	0	; () banked
  5941  00166E  5DA7               	subwf	ID@i_1155& (0+255),w,b
  5942  001670  0E27               	movlw	39
  5943  001672  0100               	movlb	0	; () banked
  5944  001674  59A8               	subwfb	(ID@i_1155+1)& (0+255),w,b
  5945  001676  B0D8               	btfsc	status,0,c
  5946  001678  D00D               	goto	l888
  5947  00167A                     l887:
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;sort.c: 385: {
  5951                           ;sort.c: 386: LATCbits.LATC0 = 1;
  5952  00167A  808B               	bsf	3979,0,c	;volatile
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;sort.c: 387: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5956  00167C  0E1A               	movlw	26
  5957  00167E                     u10627:
  5958  00167E  2EE8               	decfsz	wreg,f,c
  5959  001680  D7FE               	bra	u10627
  5960  001682  D000               	nop2	
  5961                           
  5962                           ;sort.c: 388: LATCbits.LATC0 = 0;
  5963  001684  908B               	bcf	3979,0,c	;volatile
  5964                           
  5965                           ;sort.c: 389: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5966  001686  0EF0               	movlw	240
  5967  001688                     u10637:
  5968  001688  2EE8               	decfsz	wreg,f,c
  5969  00168A  D7FE               	bra	u10637
  5970  00168C  0100               	movlb	0	; () banked
  5971  00168E  4BA7               	infsnz	ID@i_1155& (0+255),f,b
  5972  001690  2BA8               	incf	(ID@i_1155+1)& (0+255),f,b
  5973  001692  D7E8               	goto	l8302
  5974  001694                     l888:
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;sort.c: 390: }
  5978                           ;sort.c: 392: LATCbits.LATC0 = 0;
  5979  001694  908B               	bcf	3979,0,c	;volatile
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;sort.c: 394: f_can_coming_to_distribution = 1;
  5983  001696  0E00               	movlw	0
  5984  001698  0101               	movlb	1	; () banked
  5985  00169A  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5986  00169C  0E01               	movlw	1
  5987  00169E  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  5988                           
  5989                           ; BSR set to: 1
  5990                           ;sort.c: 395: _delay((unsigned long)((750)*(32000000/4000.0)));
  5991  0016A0  0E1F               	movlw	31
  5992  0016A2  0100               	movlb	0	; () banked
  5993  0016A4  6F9C               	movwf	(??_ID+1)& (0+255),b
  5994  0016A6  0E71               	movlw	113
  5995  0016A8  0100               	movlb	0	; () banked
  5996  0016AA  6F9B               	movwf	??_ID& (0+255),b
  5997  0016AC  0E1E               	movlw	30
  5998  0016AE                     u10647:
  5999  0016AE  2EE8               	decfsz	wreg,f,c
  6000  0016B0  D7FE               	bra	u10647
  6001  0016B2  2F9B               	decfsz	??_ID& (0+255),f,b
  6002  0016B4  D7FC               	bra	u10647
  6003  0016B6  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  6004  0016B8  D7FA               	bra	u10647
  6005  0016BA  F000               	nop	
  6006                           
  6007                           ;sort.c: 396: LATCbits.LATC0 = 1;
  6008  0016BC  808B               	bsf	3979,0,c	;volatile
  6009                           
  6010                           ;sort.c: 399: if(!f_lastCan){
  6011  0016BE  0100               	movlb	0	; () banked
  6012  0016C0  51EA               	movf	_f_lastCan& (0+255),w,b
  6013  0016C2  0100               	movlb	0	; () banked
  6014  0016C4  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
  6015  0016C6  A4D8               	btfss	status,2,c
  6016  0016C8  D032               	goto	l8334
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;sort.c: 400: for(int i=0; i<46; i++){
  6020  0016CA  0E00               	movlw	0
  6021  0016CC  0100               	movlb	0	; () banked
  6022  0016CE  6FB3               	movwf	(ID@i_1156+1)& (0+255),b
  6023  0016D0  0E00               	movlw	0
  6024  0016D2  6FB2               	movwf	ID@i_1156& (0+255),b
  6025                           
  6026                           ; BSR set to: 0
  6027  0016D4  0100               	movlb	0	; () banked
  6028  0016D6  BFB3               	btfsc	(ID@i_1156+1)& (0+255),7,b
  6029  0016D8  D008               	goto	l8326
  6030  0016DA  0100               	movlb	0	; () banked
  6031  0016DC  51B3               	movf	(ID@i_1156+1)& (0+255),w,b
  6032  0016DE  E126               	bnz	l891
  6033  0016E0  0E2E               	movlw	46
  6034  0016E2  0100               	movlb	0	; () banked
  6035  0016E4  5DB2               	subwf	ID@i_1156& (0+255),w,b
  6036  0016E6  B0D8               	btfsc	status,0,c
  6037  0016E8  D021               	goto	l891
  6038  0016EA                     l8326:
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;sort.c: 401: LATBbits.LATB2 = !LATBbits.LATB2;
  6042  0016EA  B48A               	btfsc	3978,2,c	;volatile
  6043  0016EC  D004               	goto	u7410
  6044  0016EE  0100               	movlb	0	; () banked
  6045  0016F0  6B9B               	clrf	??_ID& (0+255),b
  6046  0016F2  2B9B               	incf	??_ID& (0+255),f,b
  6047  0016F4  D002               	goto	u7428
  6048  0016F6                     u7410:
  6049  0016F6  0100               	movlb	0	; () banked
  6050  0016F8  6B9B               	clrf	??_ID& (0+255),b
  6051  0016FA                     u7428:
  6052  0016FA  0100               	movlb	0	; () banked
  6053  0016FC  479B               	rlncf	??_ID& (0+255),f,b
  6054  0016FE  479B               	rlncf	??_ID& (0+255),f,b
  6055  001700  508A               	movf	3978,w,c	;volatile
  6056  001702  0100               	movlb	0	; () banked
  6057  001704  199B               	xorwf	??_ID& (0+255),w,b
  6058  001706  0BFB               	andlw	-5
  6059  001708  199B               	xorwf	??_ID& (0+255),w,b
  6060  00170A  6E8A               	movwf	3978,c	;volatile
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;sort.c: 402: delay_ms(45-i);
  6064  00170C  0100               	movlb	0	; () banked
  6065  00170E  51B2               	movf	ID@i_1156& (0+255),w,b
  6066  001710  0800               	sublw	0
  6067  001712  0F2D               	addlw	45
  6068  001714  EC50  F02E         	call	_delay_ms
  6069  001718  0100               	movlb	0	; () banked
  6070  00171A  4BB2               	infsnz	ID@i_1156& (0+255),f,b
  6071  00171C  2BB3               	incf	(ID@i_1156+1)& (0+255),f,b
  6072                           
  6073                           ; BSR set to: 0
  6074  00171E  0100               	movlb	0	; () banked
  6075  001720  BFB3               	btfsc	(ID@i_1156+1)& (0+255),7,b
  6076  001722  D7E3               	goto	l8326
  6077  001724  0100               	movlb	0	; () banked
  6078  001726  51B3               	movf	(ID@i_1156+1)& (0+255),w,b
  6079  001728  E101               	bnz	u7430
  6080  00172A  D7DA               	goto	L8
  6081  00172C                     u7430:
  6082  00172C                     l891:
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;sort.c: 403: }
  6086                           ;sort.c: 404: LATBbits.LATB2 = 1;
  6087  00172C  848A               	bsf	3978,2,c	;volatile
  6088  00172E                     l8334:
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;sort.c: 405: }
  6092                           ;sort.c: 407: f_can_coming_to_ID = 0;
  6093  00172E  0E00               	movlw	0
  6094  001730  0101               	movlb	1	; () banked
  6095  001732  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6096  001734  0E00               	movlw	0
  6097  001736  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  6098  001738  0012               	return	
  6099  00173A                     __end_of_ID:
  6100                           	opt stack 0
  6101                           tblptru	equ	0xFF8
  6102                           tblptrh	equ	0xFF7
  6103                           tblptrl	equ	0xFF6
  6104                           tablat	equ	0xFF5
  6105                           prodh	equ	0xFF4
  6106                           prodl	equ	0xFF3
  6107                           postinc0	equ	0xFEE
  6108                           wreg	equ	0xFE8
  6109                           postdec1	equ	0xFE5
  6110                           fsr1l	equ	0xFE1
  6111                           indf2	equ	0xFDF
  6112                           postinc2	equ	0xFDE
  6113                           postdec2	equ	0xFDD
  6114                           fsr2h	equ	0xFDA
  6115                           fsr2l	equ	0xFD9
  6116                           status	equ	0xFD8
  6117                           
  6118 ;; *************** function _readIR *****************
  6119 ;; Defined at:
  6120 ;;		line 23 in file "ADCFunctionality.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  ana_port        2    2[BANK0 ] int 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  res             2    6[BANK0 ] int 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  1    wreg      void 
  6127 ;; Registers used:
  6128 ;;		wreg, status,2, status,0, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6134 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;Total ram usage:        6 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    8
  6141 ;; This function calls:
  6142 ;;		_readADC
  6143 ;; This function is called by:
  6144 ;;		_Loading
  6145 ;;		_ID
  6146 ;;		_getIR
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text8
  6151  004E24                     __ptext8:
  6152                           	opt stack 0
  6153  004E24                     _readIR:
  6154                           	opt stack 20
  6155                           
  6156                           ;ADCFunctionality.c: 24: readADC(ana_port);
  6157                           
  6158                           ; BSR set to: 1
  6159                           ;incstack = 0
  6160  004E24  0100               	movlb	0	; () banked
  6161  004E26  5182               	movf	readIR@ana_port& (0+255),w,b
  6162  004E28  EC25  F02E         	call	_readADC
  6163                           
  6164                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  6165  004E2C  50C3               	movf	4035,w,c	;volatile
  6166  004E2E  CFC4 F084          	movff	4036,??_readIR	;volatile
  6167  004E32  0100               	movlb	0	; () banked
  6168  004E34  6B85               	clrf	(??_readIR+1)& (0+255),b
  6169  004E36  C084  F085         	movff	??_readIR,??_readIR+1
  6170  004E3A  0100               	movlb	0	; () banked
  6171  004E3C  6B84               	clrf	??_readIR& (0+255),b
  6172  004E3E  0100               	movlb	0	; () banked
  6173  004E40  1184               	iorwf	??_readIR& (0+255),w,b
  6174  004E42  0100               	movlb	0	; () banked
  6175  004E44  6F86               	movwf	readIR@res& (0+255),b
  6176  004E46  0100               	movlb	0	; () banked
  6177  004E48  5185               	movf	(??_readIR+1)& (0+255),w,b
  6178  004E4A  0100               	movlb	0	; () banked
  6179  004E4C  6F87               	movwf	(readIR@res+1)& (0+255),b
  6180                           
  6181                           ;ADCFunctionality.c: 26: switch(ana_port){
  6182  004E4E  D024               	goto	l6800
  6183  004E50                     l6794:
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;ADCFunctionality.c: 28: IR_signal = (res > 800) ? 1 : 0;
  6187  004E50  0100               	movlb	0	; () banked
  6188  004E52  BF87               	btfsc	(readIR@res+1)& (0+255),7,b
  6189  004E54  D00A               	goto	u5400
  6190  004E56  0E21               	movlw	33
  6191  004E58  0100               	movlb	0	; () banked
  6192  004E5A  5D86               	subwf	readIR@res& (0+255),w,b
  6193  004E5C  0E03               	movlw	3
  6194  004E5E  0100               	movlb	0	; () banked
  6195  004E60  5987               	subwfb	(readIR@res+1)& (0+255),w,b
  6196  004E62  A0D8               	btfss	status,0,c
  6197  004E64  D002               	goto	u5400
  6198  004E66  0E01               	movlw	1
  6199  004E68  D001               	goto	u5410
  6200  004E6A                     u5400:
  6201  004E6A  0E00               	movlw	0
  6202  004E6C                     u5410:
  6203  004E6C  0100               	movlb	0	; () banked
  6204  004E6E  6FE0               	movwf	_IR_signal& (0+255),b
  6205  004E70  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  6206                           
  6207                           ;ADCFunctionality.c: 29: break;
  6208  004E72  0012               	return	
  6209  004E74                     l6796:
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;ADCFunctionality.c: 31: IR_signal = (res > 500) ? 1 : 0;
  6213  004E74  0100               	movlb	0	; () banked
  6214  004E76  BF87               	btfsc	(readIR@res+1)& (0+255),7,b
  6215  004E78  D00A               	goto	u5420
  6216  004E7A  0EF5               	movlw	245
  6217  004E7C  0100               	movlb	0	; () banked
  6218  004E7E  5D86               	subwf	readIR@res& (0+255),w,b
  6219  004E80  0E01               	movlw	1
  6220  004E82  0100               	movlb	0	; () banked
  6221  004E84  5987               	subwfb	(readIR@res+1)& (0+255),w,b
  6222  004E86  A0D8               	btfss	status,0,c
  6223  004E88  D002               	goto	u5420
  6224  004E8A  0E01               	movlw	1
  6225  004E8C  D001               	goto	u5430
  6226  004E8E                     u5420:
  6227  004E8E  0E00               	movlw	0
  6228  004E90                     u5430:
  6229  004E90  0100               	movlb	0	; () banked
  6230  004E92  6FE0               	movwf	_IR_signal& (0+255),b
  6231  004E94  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;ADCFunctionality.c: 35: }
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;ADCFunctionality.c: 34: break;
  6238                           
  6239                           ;ADCFunctionality.c: 33: default:
  6240                           
  6241                           ;ADCFunctionality.c: 32: break;
  6242  004E96  0012               	return	
  6243  004E98                     l6800:
  6244                           
  6245                           ; BSR set to: 0
  6246  004E98  C082  F084         	movff	readIR@ana_port,??_readIR
  6247  004E9C  C083  F085         	movff	readIR@ana_port+1,??_readIR+1
  6248                           
  6249                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6250                           ; Switch size 1, requested type "space"
  6251                           ; Number of cases is 1, Range of values is 0 to 0
  6252                           ; switch strategies available:
  6253                           ; Name         Instructions Cycles
  6254                           ; simple_byte            4     3 (average)
  6255                           ;	Chosen strategy is simple_byte
  6256  004EA0  0100               	movlb	0	; () banked
  6257  004EA2  5185               	movf	(??_readIR+1)& (0+255),w,b
  6258  004EA4  0A00               	xorlw	0	; case 0
  6259  004EA6  A4D8               	btfss	status,2,c
  6260  004EA8  0012               	return	
  6261                           
  6262                           ; BSR set to: 0
  6263                           ; Switch size 1, requested type "space"
  6264                           ; Number of cases is 2, Range of values is 0 to 3
  6265                           ; switch strategies available:
  6266                           ; Name         Instructions Cycles
  6267                           ; simple_byte            7     4 (average)
  6268                           ;	Chosen strategy is simple_byte
  6269  004EAA  0100               	movlb	0	; () banked
  6270  004EAC  5184               	movf	??_readIR& (0+255),w,b
  6271  004EAE  0A00               	xorlw	0	; case 0
  6272  004EB0  B4D8               	btfsc	status,2,c
  6273  004EB2  D7CE               	goto	l6794
  6274  004EB4  0A03               	xorlw	3	; case 3
  6275  004EB6  A4D8               	btfss	status,2,c
  6276  004EB8  0012               	return	
  6277  004EBA  D7DC               	goto	l6796
  6278  004EBC                     __end_of_readIR:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           postinc0	equ	0xFEE
  6287                           wreg	equ	0xFE8
  6288                           postdec1	equ	0xFE5
  6289                           fsr1l	equ	0xFE1
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _readCOND *****************
  6298 ;; Defined at:
  6299 ;;		line 44 in file "ADCFunctionality.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  res             2    4[BANK0 ] int 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      void 
  6306 ;; Registers used:
  6307 ;;		wreg, status,2, status,0, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;Total ram usage:        4 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    8
  6320 ;; This function calls:
  6321 ;;		_readADC
  6322 ;; This function is called by:
  6323 ;;		_ID
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           	psect	text9
  6328  005704                     __ptext9:
  6329                           	opt stack 0
  6330  005704                     _readCOND:
  6331                           	opt stack 20
  6332                           
  6333                           ;ADCFunctionality.c: 45: readADC(2);
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;incstack = 0
  6337  005704  0E02               	movlw	2
  6338  005706  EC25  F02E         	call	_readADC
  6339                           
  6340                           ;ADCFunctionality.c: 46: int res = ADRESH<<8 | ADRESL;
  6341  00570A  50C3               	movf	4035,w,c	;volatile
  6342  00570C  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6343  005710  0100               	movlb	0	; () banked
  6344  005712  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6345  005714  C082  F083         	movff	??_readCOND,??_readCOND+1
  6346  005718  0100               	movlb	0	; () banked
  6347  00571A  6B82               	clrf	??_readCOND& (0+255),b
  6348  00571C  0100               	movlb	0	; () banked
  6349  00571E  1182               	iorwf	??_readCOND& (0+255),w,b
  6350  005720  0100               	movlb	0	; () banked
  6351  005722  6F84               	movwf	readCOND@res& (0+255),b
  6352  005724  0100               	movlb	0	; () banked
  6353  005726  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6354  005728  0100               	movlb	0	; () banked
  6355  00572A  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;ADCFunctionality.c: 47: COND_signal = (res > 300) ? 1 : 0;
  6359  00572C  0100               	movlb	0	; () banked
  6360  00572E  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6361  005730  D00A               	goto	u6190
  6362  005732  0E2D               	movlw	45
  6363  005734  0100               	movlb	0	; () banked
  6364  005736  5D84               	subwf	readCOND@res& (0+255),w,b
  6365  005738  0E01               	movlw	1
  6366  00573A  0100               	movlb	0	; () banked
  6367  00573C  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6368  00573E  A0D8               	btfss	status,0,c
  6369  005740  D002               	goto	u6190
  6370  005742  0E01               	movlw	1
  6371  005744  D001               	goto	u6200
  6372  005746                     u6190:
  6373  005746  0E00               	movlw	0
  6374  005748                     u6200:
  6375  005748  0100               	movlb	0	; () banked
  6376  00574A  6FDE               	movwf	_COND_signal& (0+255),b
  6377  00574C  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6378                           
  6379                           ; BSR set to: 0
  6380  00574E  0012               	return		;funcret
  6381  005750                     __end_of_readCOND:
  6382                           	opt stack 0
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           prodh	equ	0xFF4
  6388                           prodl	equ	0xFF3
  6389                           postinc0	equ	0xFEE
  6390                           wreg	equ	0xFE8
  6391                           postdec1	equ	0xFE5
  6392                           fsr1l	equ	0xFE1
  6393                           indf2	equ	0xFDF
  6394                           postinc2	equ	0xFDE
  6395                           postdec2	equ	0xFDD
  6396                           fsr2h	equ	0xFDA
  6397                           fsr2l	equ	0xFD9
  6398                           status	equ	0xFD8
  6399                           
  6400 ;; *************** function _delay_ms *****************
  6401 ;; Defined at:
  6402 ;;		line 717 in file "sort.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;  milliseconds    1    wreg     unsigned char 
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      void 
  6409 ;; Registers used:
  6410 ;;		wreg, status,2, status,0, cstack
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;Total ram usage:        2 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:    7
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_Loading
  6427 ;;		_ID
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           	psect	text10
  6432  005CA0                     __ptext10:
  6433                           	opt stack 0
  6434  005CA0                     _delay_ms:
  6435                           	opt stack 21
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;incstack = 0
  6439                           ;delay_ms@milliseconds stored from wreg
  6440  005CA0  0100               	movlb	0	; () banked
  6441  005CA2  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6442                           
  6443                           ;sort.c: 718: while(milliseconds > 0)
  6444  005CA4  D00B               	goto	l7510
  6445  005CA6                     l7506:
  6446                           
  6447                           ;sort.c: 719: {
  6448                           ;sort.c: 720: milliseconds--;
  6449  005CA6  0100               	movlb	0	; () banked
  6450  005CA8  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;sort.c: 721: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6454  005CAA  0E0B               	movlw	11
  6455  005CAC  0100               	movlb	0	; () banked
  6456  005CAE  6F80               	movwf	??_delay_ms& (0+255),b
  6457  005CB0  0E47               	movlw	71
  6458  005CB2                     u10657:
  6459  005CB2  2EE8               	decfsz	wreg,f,c
  6460  005CB4  D7FE               	bra	u10657
  6461  005CB6  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6462  005CB8  D7FC               	bra	u10657
  6463  005CBA  D000               	nop2	
  6464  005CBC                     l7510:
  6465  005CBC  0100               	movlb	0	; () banked
  6466  005CBE  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6467  005CC0  0100               	movlb	0	; () banked
  6468  005CC2  B4D8               	btfsc	status,2,c
  6469  005CC4  0012               	return	
  6470  005CC6  D7EF               	goto	l7506
  6471  005CC8                     __end_of_delay_ms:
  6472                           	opt stack 0
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodh	equ	0xFF4
  6478                           prodl	equ	0xFF3
  6479                           postinc0	equ	0xFEE
  6480                           wreg	equ	0xFE8
  6481                           postdec1	equ	0xFE5
  6482                           fsr1l	equ	0xFE1
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function ___ftge *****************
  6491 ;; Defined at:
  6492 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  ff1             3   18[BANK0 ] float 
  6495 ;;  ff2             3   21[BANK0 ] float 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;		None
  6498 ;; Return value:  Size  Location     Type
  6499 ;;		None               void
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, status,0
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6507 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;Total ram usage:        9 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    7
  6514 ;; This function calls:
  6515 ;;		Nothing
  6516 ;; This function is called by:
  6517 ;;		_ID
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text11
  6522  004A96                     __ptext11:
  6523                           	opt stack 0
  6524  004A96                     ___ftge:
  6525                           	opt stack 21
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;incstack = 0
  6529  004A96  0100               	movlb	0	; () banked
  6530  004A98  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6531  004A9A  D01D               	goto	l7628
  6532                           
  6533                           ; BSR set to: 0
  6534  004A9C  C092  F098         	movff	___ftge@ff1,??___ftge
  6535  004AA0  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6536  004AA4  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6537  004AA8  0100               	movlb	0	; () banked
  6538  004AAA  1F98               	comf	??___ftge& (0+255),f,b
  6539  004AAC  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6540  004AAE  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6541  004AB0  2B98               	incf	??___ftge& (0+255),f,b
  6542  004AB2  0E00               	movlw	0
  6543  004AB4  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6544  004AB6  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6545  004AB8  0E00               	movlw	0
  6546  004ABA  0100               	movlb	0	; () banked
  6547  004ABC  2598               	addwf	??___ftge& (0+255),w,b
  6548  004ABE  0100               	movlb	0	; () banked
  6549  004AC0  6F92               	movwf	___ftge@ff1& (0+255),b
  6550  004AC2  0E00               	movlw	0
  6551  004AC4  0100               	movlb	0	; () banked
  6552  004AC6  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6553  004AC8  0100               	movlb	0	; () banked
  6554  004ACA  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6555  004ACC  0E80               	movlw	128
  6556  004ACE  0100               	movlb	0	; () banked
  6557  004AD0  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6558  004AD2  0100               	movlb	0	; () banked
  6559  004AD4  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6560  004AD6                     l7628:
  6561                           
  6562                           ; BSR set to: 0
  6563  004AD6  0100               	movlb	0	; () banked
  6564  004AD8  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6565  004ADA  D01D               	goto	l7632
  6566                           
  6567                           ; BSR set to: 0
  6568  004ADC  C095  F098         	movff	___ftge@ff2,??___ftge
  6569  004AE0  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6570  004AE4  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6571  004AE8  0100               	movlb	0	; () banked
  6572  004AEA  1F98               	comf	??___ftge& (0+255),f,b
  6573  004AEC  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6574  004AEE  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6575  004AF0  2B98               	incf	??___ftge& (0+255),f,b
  6576  004AF2  0E00               	movlw	0
  6577  004AF4  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6578  004AF6  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6579  004AF8  0E00               	movlw	0
  6580  004AFA  0100               	movlb	0	; () banked
  6581  004AFC  2598               	addwf	??___ftge& (0+255),w,b
  6582  004AFE  0100               	movlb	0	; () banked
  6583  004B00  6F95               	movwf	___ftge@ff2& (0+255),b
  6584  004B02  0E00               	movlw	0
  6585  004B04  0100               	movlb	0	; () banked
  6586  004B06  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6587  004B08  0100               	movlb	0	; () banked
  6588  004B0A  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6589  004B0C  0E80               	movlw	128
  6590  004B0E  0100               	movlb	0	; () banked
  6591  004B10  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6592  004B12  0100               	movlb	0	; () banked
  6593  004B14  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6594  004B16                     l7632:
  6595                           
  6596                           ; BSR set to: 0
  6597  004B16  0E00               	movlw	0
  6598  004B18  0100               	movlb	0	; () banked
  6599  004B1A  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6600  004B1C  0E00               	movlw	0
  6601  004B1E  0100               	movlb	0	; () banked
  6602  004B20  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6603  004B22  0E80               	movlw	128
  6604  004B24  0100               	movlb	0	; () banked
  6605  004B26  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6606                           
  6607                           ; BSR set to: 0
  6608  004B28  0E00               	movlw	0
  6609  004B2A  0100               	movlb	0	; () banked
  6610  004B2C  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6611  004B2E  0E00               	movlw	0
  6612  004B30  0100               	movlb	0	; () banked
  6613  004B32  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6614  004B34  0E80               	movlw	128
  6615  004B36  0100               	movlb	0	; () banked
  6616  004B38  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6617  004B3A  0100               	movlb	0	; () banked
  6618  004B3C  5195               	movf	___ftge@ff2& (0+255),w,b
  6619  004B3E  0100               	movlb	0	; () banked
  6620  004B40  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6621  004B42  0100               	movlb	0	; () banked
  6622  004B44  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6623  004B46  0100               	movlb	0	; () banked
  6624  004B48  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6625  004B4A  0100               	movlb	0	; () banked
  6626  004B4C  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6627  004B4E  0100               	movlb	0	; () banked
  6628  004B50  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6629  004B52  B0D8               	btfsc	status,0,c
  6630  004B54  D002               	goto	l7638
  6631                           
  6632                           ; BSR set to: 0
  6633  004B56  90D8               	bcf	status,0,c
  6634  004B58  0012               	return	
  6635  004B5A                     l7638:
  6636                           
  6637                           ; BSR set to: 0
  6638  004B5A  80D8               	bsf	status,0,c
  6639                           
  6640                           ; BSR set to: 0
  6641  004B5C  0012               	return	
  6642  004B5E                     __end_of___ftge:
  6643                           	opt stack 0
  6644                           tblptru	equ	0xFF8
  6645                           tblptrh	equ	0xFF7
  6646                           tblptrl	equ	0xFF6
  6647                           tablat	equ	0xFF5
  6648                           prodh	equ	0xFF4
  6649                           prodl	equ	0xFF3
  6650                           postinc0	equ	0xFEE
  6651                           wreg	equ	0xFE8
  6652                           postdec1	equ	0xFE5
  6653                           fsr1l	equ	0xFE1
  6654                           indf2	equ	0xFDF
  6655                           postinc2	equ	0xFDE
  6656                           postdec2	equ	0xFDD
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function ___awtoft *****************
  6662 ;; Defined at:
  6663 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  c               2   14[BANK0 ] int 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  sign            1   17[BANK0 ] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  3   14[BANK0 ] float 
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6677 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;Total ram usage:        4 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    8
  6684 ;; This function calls:
  6685 ;;		___ftpack
  6686 ;; This function is called by:
  6687 ;;		_ID
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text12
  6692  0057E2                     __ptext12:
  6693                           	opt stack 0
  6694  0057E2                     ___awtoft:
  6695                           	opt stack 20
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;incstack = 0
  6699  0057E2  0E00               	movlw	0
  6700  0057E4  0100               	movlb	0	; () banked
  6701  0057E6  6F91               	movwf	___awtoft@sign& (0+255),b
  6702                           
  6703                           ; BSR set to: 0
  6704  0057E8  0100               	movlb	0	; () banked
  6705  0057EA  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6706  0057EC  D008               	goto	l7620
  6707                           
  6708                           ; BSR set to: 0
  6709  0057EE  0100               	movlb	0	; () banked
  6710  0057F0  6D8E               	negf	___awtoft@c& (0+255),b
  6711  0057F2  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6712  0057F4  B0D8               	btfsc	status,0,c
  6713  0057F6  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6714                           
  6715                           ; BSR set to: 0
  6716  0057F8  0E01               	movlw	1
  6717  0057FA  0100               	movlb	0	; () banked
  6718  0057FC  6F91               	movwf	___awtoft@sign& (0+255),b
  6719  0057FE                     l7620:
  6720                           
  6721                           ; BSR set to: 0
  6722  0057FE  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6723  005802  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6724  005806  0100               	movlb	0	; () banked
  6725  005808  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6726  00580A  0E8E               	movlw	142
  6727  00580C  0100               	movlb	0	; () banked
  6728  00580E  6F83               	movwf	___ftpack@exp& (0+255),b
  6729  005810  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6730  005814  ECA5  F021         	call	___ftpack	;wreg free
  6731  005818  C080  F08E         	movff	?___ftpack,?___awtoft
  6732  00581C  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6733  005820  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6734  005824  0012               	return	
  6735  005826                     __end_of___awtoft:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           postinc0	equ	0xFEE
  6744                           wreg	equ	0xFE8
  6745                           postdec1	equ	0xFE5
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function ___ftpack *****************
  6755 ;; Defined at:
  6756 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;  arg             3    0[BANK0 ] unsigned um
  6759 ;;  exp             1    3[BANK0 ] unsigned char 
  6760 ;;  sign            1    4[BANK0 ] unsigned char 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  3    0[BANK0 ] float 
  6765 ;; Registers used:
  6766 ;;		wreg, status,2, status,0
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6772 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;Total ram usage:        8 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; Hardware stack levels required when called:    7
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		___awtoft
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text13
  6787  00434A                     __ptext13:
  6788                           	opt stack 0
  6789  00434A                     ___ftpack:
  6790                           	opt stack 20
  6791                           
  6792                           ;incstack = 0
  6793  00434A  0100               	movlb	0	; () banked
  6794  00434C  5183               	movf	___ftpack@exp& (0+255),w,b
  6795  00434E  0100               	movlb	0	; () banked
  6796  004350  B4D8               	btfsc	status,2,c
  6797  004352  D008               	goto	l7004
  6798                           
  6799                           ; BSR set to: 0
  6800  004354  0100               	movlb	0	; () banked
  6801  004356  5180               	movf	___ftpack@arg& (0+255),w,b
  6802  004358  0100               	movlb	0	; () banked
  6803  00435A  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6804  00435C  0100               	movlb	0	; () banked
  6805  00435E  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6806  004360  A4D8               	btfss	status,2,c
  6807  004362  D011               	goto	l7010
  6808  004364                     l7004:
  6809                           
  6810                           ; BSR set to: 0
  6811  004364  0E00               	movlw	0
  6812  004366  0100               	movlb	0	; () banked
  6813  004368  6F80               	movwf	?___ftpack& (0+255),b
  6814  00436A  0E00               	movlw	0
  6815  00436C  0100               	movlb	0	; () banked
  6816  00436E  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6817  004370  0E00               	movlw	0
  6818  004372  0100               	movlb	0	; () banked
  6819  004374  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6820                           
  6821                           ; BSR set to: 0
  6822  004376  0012               	return	
  6823  004378                     l7008:
  6824                           
  6825                           ; BSR set to: 0
  6826  004378  0100               	movlb	0	; () banked
  6827  00437A  2B83               	incf	___ftpack@exp& (0+255),f,b
  6828  00437C  0100               	movlb	0	; () banked
  6829  00437E  90D8               	bcf	status,0,c
  6830  004380  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6831  004382  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6832  004384  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6833  004386                     l7010:
  6834                           
  6835                           ; BSR set to: 0
  6836  004386  0E00               	movlw	0
  6837  004388  0100               	movlb	0	; () banked
  6838  00438A  1580               	andwf	___ftpack@arg& (0+255),w,b
  6839  00438C  0100               	movlb	0	; () banked
  6840  00438E  6F85               	movwf	??___ftpack& (0+255),b
  6841  004390  0E00               	movlw	0
  6842  004392  0100               	movlb	0	; () banked
  6843  004394  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6844  004396  0100               	movlb	0	; () banked
  6845  004398  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6846  00439A  0EFE               	movlw	254
  6847  00439C  0100               	movlb	0	; () banked
  6848  00439E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6849  0043A0  0100               	movlb	0	; () banked
  6850  0043A2  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6851  0043A4  0100               	movlb	0	; () banked
  6852  0043A6  5185               	movf	??___ftpack& (0+255),w,b
  6853  0043A8  0100               	movlb	0	; () banked
  6854  0043AA  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6855  0043AC  0100               	movlb	0	; () banked
  6856  0043AE  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6857  0043B0  B4D8               	btfsc	status,2,c
  6858  0043B2  D011               	goto	l7016
  6859  0043B4  D7E1               	goto	l7008
  6860  0043B6                     l7012:
  6861                           
  6862                           ; BSR set to: 0
  6863  0043B6  0100               	movlb	0	; () banked
  6864  0043B8  2B83               	incf	___ftpack@exp& (0+255),f,b
  6865                           
  6866                           ; BSR set to: 0
  6867  0043BA  0E01               	movlw	1
  6868  0043BC  0100               	movlb	0	; () banked
  6869  0043BE  2780               	addwf	___ftpack@arg& (0+255),f,b
  6870  0043C0  0E00               	movlw	0
  6871  0043C2  0100               	movlb	0	; () banked
  6872  0043C4  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6873  0043C6  0E00               	movlw	0
  6874  0043C8  0100               	movlb	0	; () banked
  6875  0043CA  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6876  0043CC  0100               	movlb	0	; () banked
  6877  0043CE  90D8               	bcf	status,0,c
  6878  0043D0  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6879  0043D2  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6880  0043D4  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6881  0043D6                     l7016:
  6882                           
  6883                           ; BSR set to: 0
  6884  0043D6  0E00               	movlw	0
  6885  0043D8  0100               	movlb	0	; () banked
  6886  0043DA  1580               	andwf	___ftpack@arg& (0+255),w,b
  6887  0043DC  0100               	movlb	0	; () banked
  6888  0043DE  6F85               	movwf	??___ftpack& (0+255),b
  6889  0043E0  0E00               	movlw	0
  6890  0043E2  0100               	movlb	0	; () banked
  6891  0043E4  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6892  0043E6  0100               	movlb	0	; () banked
  6893  0043E8  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6894  0043EA  0EFF               	movlw	255
  6895  0043EC  0100               	movlb	0	; () banked
  6896  0043EE  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6897  0043F0  0100               	movlb	0	; () banked
  6898  0043F2  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6899  0043F4  0100               	movlb	0	; () banked
  6900  0043F6  5185               	movf	??___ftpack& (0+255),w,b
  6901  0043F8  0100               	movlb	0	; () banked
  6902  0043FA  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6903  0043FC  0100               	movlb	0	; () banked
  6904  0043FE  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6905  004400  B4D8               	btfsc	status,2,c
  6906  004402  D008               	goto	l7020
  6907  004404  D7D8               	goto	l7012
  6908  004406                     l7018:
  6909                           
  6910                           ; BSR set to: 0
  6911  004406  0100               	movlb	0	; () banked
  6912  004408  0783               	decf	___ftpack@exp& (0+255),f,b
  6913  00440A  0100               	movlb	0	; () banked
  6914  00440C  90D8               	bcf	status,0,c
  6915  00440E  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6916  004410  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6917  004412  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6918  004414                     l7020:
  6919                           
  6920                           ; BSR set to: 0
  6921  004414  0100               	movlb	0	; () banked
  6922  004416  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6923  004418  D004               	goto	l1800
  6924                           
  6925                           ; BSR set to: 0
  6926  00441A  0E02               	movlw	2
  6927  00441C  0100               	movlb	0	; () banked
  6928  00441E  6183               	cpfslt	___ftpack@exp& (0+255),b
  6929  004420  D7F2               	goto	l7018
  6930  004422                     l1800:
  6931                           
  6932                           ; BSR set to: 0
  6933  004422  0100               	movlb	0	; () banked
  6934  004424  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6935  004426  D002               	goto	l7026
  6936                           
  6937                           ; BSR set to: 0
  6938  004428  0100               	movlb	0	; () banked
  6939  00442A  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6940  00442C                     l7026:
  6941                           
  6942                           ; BSR set to: 0
  6943  00442C  0100               	movlb	0	; () banked
  6944  00442E  90D8               	bcf	status,0,c
  6945  004430  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6946  004432  0100               	movlb	0	; () banked
  6947  004434  5183               	movf	___ftpack@exp& (0+255),w,b
  6948  004436  0100               	movlb	0	; () banked
  6949  004438  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6950                           
  6951                           ; BSR set to: 0
  6952  00443A  0100               	movlb	0	; () banked
  6953  00443C  5184               	movf	___ftpack@sign& (0+255),w,b
  6954  00443E  0100               	movlb	0	; () banked
  6955  004440  B4D8               	btfsc	status,2,c
  6956  004442  D002               	goto	l7032
  6957                           
  6958                           ; BSR set to: 0
  6959  004444  0100               	movlb	0	; () banked
  6960  004446  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6961  004448                     l7032:
  6962                           
  6963                           ; BSR set to: 0
  6964  004448  C080  F080         	movff	___ftpack@arg,?___ftpack
  6965  00444C  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6966  004450  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6967  004454  0012               	return	
  6968  004456                     __end_of___ftpack:
  6969                           	opt stack 0
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           postinc0	equ	0xFEE
  6977                           wreg	equ	0xFE8
  6978                           postdec1	equ	0xFE5
  6979                           fsr1l	equ	0xFE1
  6980                           indf2	equ	0xFDF
  6981                           postinc2	equ	0xFDE
  6982                           postdec2	equ	0xFDD
  6983                           fsr2h	equ	0xFDA
  6984                           fsr2l	equ	0xFD9
  6985                           status	equ	0xFD8
  6986                           
  6987 ;; *************** function _Distribution *****************
  6988 ;; Defined at:
  6989 ;;		line 410 in file "sort.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;		None
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  1    wreg      void 
  6996 ;; Registers used:
  6997 ;;		wreg, status,2, status,0, cstack
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;Total ram usage:        2 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:    8
  7010 ;; This function calls:
  7011 ;;		_updateServoPosition
  7012 ;; This function is called by:
  7013 ;;		_sort
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text14
  7018  004742                     __ptext14:
  7019                           	opt stack 0
  7020  004742                     _Distribution:
  7021                           	opt stack 21
  7022                           
  7023                           ;sort.c: 411: if(f_can_coming_to_distribution){
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;incstack = 0
  7027  004742  0101               	movlb	1	; () banked
  7028  004744  5135               	movf	_f_can_coming_to_distribution& (0+255),w,b
  7029  004746  0101               	movlb	1	; () banked
  7030  004748  1136               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  7031  00474A  B4D8               	btfsc	status,2,c
  7032  00474C  0012               	return	
  7033                           
  7034                           ; BSR set to: 1
  7035                           ;sort.c: 412: f_can_distributed = 0;
  7036  00474E  0E00               	movlw	0
  7037  004750  0101               	movlb	1	; () banked
  7038  004752  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  7039  004754  0E00               	movlw	0
  7040  004756  6F37               	movwf	_f_can_distributed& (0+255),b
  7041                           
  7042                           ;sort.c: 419: switch(cur_can){
  7043  004758  D034               	goto	l8350
  7044  00475A                     l8340:
  7045                           
  7046                           ;sort.c: 421: updateServoPosition(500, 1);
  7047  00475A  0E01               	movlw	1
  7048  00475C  0100               	movlb	0	; () banked
  7049  00475E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7050  004760  0EF4               	movlw	244
  7051  004762  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7052  004764  0E00               	movlw	0
  7053  004766  0100               	movlb	0	; () banked
  7054  004768  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7055  00476A  0E01               	movlw	1
  7056  00476C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7057  00476E  ECB2  F028         	call	_updateServoPosition	;wreg free
  7058                           
  7059                           ;sort.c: 422: break;
  7060  004772  D03E               	goto	l8352
  7061  004774                     l8342:
  7062                           
  7063                           ;sort.c: 424: updateServoPosition(850, 1);
  7064  004774  0E03               	movlw	3
  7065  004776  0100               	movlb	0	; () banked
  7066  004778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7067  00477A  0E52               	movlw	82
  7068  00477C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7069  00477E  0E00               	movlw	0
  7070  004780  0100               	movlb	0	; () banked
  7071  004782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7072  004784  0E01               	movlw	1
  7073  004786  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7074  004788  ECB2  F028         	call	_updateServoPosition	;wreg free
  7075                           
  7076                           ;sort.c: 425: break;
  7077  00478C  D031               	goto	l8352
  7078  00478E                     l8344:
  7079                           
  7080                           ;sort.c: 427: updateServoPosition(1670, 1);
  7081  00478E  0E06               	movlw	6
  7082  004790  0100               	movlb	0	; () banked
  7083  004792  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7084  004794  0E86               	movlw	134
  7085  004796  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7086  004798  0E00               	movlw	0
  7087  00479A  0100               	movlb	0	; () banked
  7088  00479C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7089  00479E  0E01               	movlw	1
  7090  0047A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7091  0047A2  ECB2  F028         	call	_updateServoPosition	;wreg free
  7092                           
  7093                           ;sort.c: 428: break;
  7094  0047A6  D024               	goto	l8352
  7095  0047A8                     l8346:
  7096                           
  7097                           ;sort.c: 430: updateServoPosition(2400, 1);
  7098  0047A8  0E09               	movlw	9
  7099  0047AA  0100               	movlb	0	; () banked
  7100  0047AC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7101  0047AE  0E60               	movlw	96
  7102  0047B0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7103  0047B2  0E00               	movlw	0
  7104  0047B4  0100               	movlb	0	; () banked
  7105  0047B6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7106  0047B8  0E01               	movlw	1
  7107  0047BA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7108  0047BC  ECB2  F028         	call	_updateServoPosition	;wreg free
  7109                           
  7110                           ;sort.c: 434: }
  7111                           
  7112                           ;sort.c: 433: break;
  7113                           
  7114                           ;sort.c: 432: default:
  7115                           
  7116                           ;sort.c: 431: break;
  7117  0047C0  D017               	goto	l8352
  7118  0047C2                     l8350:
  7119  0047C2  C12D  F088         	movff	_cur_can,??_Distribution
  7120  0047C6  C12E  F089         	movff	_cur_can+1,??_Distribution+1
  7121                           
  7122                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7123                           ; Switch size 1, requested type "space"
  7124                           ; Number of cases is 1, Range of values is 0 to 0
  7125                           ; switch strategies available:
  7126                           ; Name         Instructions Cycles
  7127                           ; simple_byte            4     3 (average)
  7128                           ;	Chosen strategy is simple_byte
  7129  0047CA  0100               	movlb	0	; () banked
  7130  0047CC  5189               	movf	(??_Distribution+1)& (0+255),w,b
  7131  0047CE  0A00               	xorlw	0	; case 0
  7132  0047D0  A4D8               	btfss	status,2,c
  7133  0047D2  D00E               	goto	l8352
  7134                           
  7135                           ; BSR set to: 0
  7136                           ; Switch size 1, requested type "space"
  7137                           ; Number of cases is 4, Range of values is 0 to 3
  7138                           ; switch strategies available:
  7139                           ; Name         Instructions Cycles
  7140                           ; simple_byte           13     7 (average)
  7141                           ;	Chosen strategy is simple_byte
  7142  0047D4  0100               	movlb	0	; () banked
  7143  0047D6  5188               	movf	??_Distribution& (0+255),w,b
  7144  0047D8  0A00               	xorlw	0	; case 0
  7145  0047DA  B4D8               	btfsc	status,2,c
  7146  0047DC  D7BE               	goto	l8340
  7147  0047DE  0A01               	xorlw	1	; case 1
  7148  0047E0  B4D8               	btfsc	status,2,c
  7149  0047E2  D7C8               	goto	l8342
  7150  0047E4  0A03               	xorlw	3	; case 2
  7151  0047E6  B4D8               	btfsc	status,2,c
  7152  0047E8  D7D2               	goto	l8344
  7153  0047EA  0A01               	xorlw	1	; case 3
  7154  0047EC  B4D8               	btfsc	status,2,c
  7155  0047EE  D7DC               	goto	l8346
  7156  0047F0                     l8352:
  7157                           
  7158                           ;sort.c: 435: updateServoPosition(1050, 3);
  7159  0047F0  0E04               	movlw	4
  7160  0047F2  0100               	movlb	0	; () banked
  7161  0047F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7162  0047F6  0E1A               	movlw	26
  7163  0047F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7164  0047FA  0E00               	movlw	0
  7165  0047FC  0100               	movlb	0	; () banked
  7166  0047FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7167  004800  0E03               	movlw	3
  7168  004802  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7169  004804  ECB2  F028         	call	_updateServoPosition	;wreg free
  7170                           
  7171                           ;sort.c: 436: servo_timer_target = 750;
  7172  004808  0E02               	movlw	2
  7173  00480A  6E70               	movwf	_servo_timer_target+1,c	;volatile
  7174  00480C  0EEE               	movlw	238
  7175  00480E  6E6F               	movwf	_servo_timer_target,c	;volatile
  7176                           
  7177                           ;sort.c: 437: f_panning_to_bin = 1;
  7178  004810  0E00               	movlw	0
  7179  004812  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  7180  004814  0E01               	movlw	1
  7181  004816  6E69               	movwf	_f_panning_to_bin,c	;volatile
  7182                           
  7183                           ;sort.c: 438: f_can_coming_to_distribution = 0;
  7184  004818  0E00               	movlw	0
  7185  00481A  0101               	movlb	1	; () banked
  7186  00481C  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  7187  00481E  0E00               	movlw	0
  7188  004820  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  7189  004822  0012               	return	
  7190  004824                     __end_of_Distribution:
  7191                           	opt stack 0
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           postdec1	equ	0xFE5
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           postinc2	equ	0xFDE
  7204                           postdec2	equ	0xFDD
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function _machineConfig *****************
  7210 ;; Defined at:
  7211 ;;		line 15 in file "MachineConfig.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;		None
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, status,2
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;Total ram usage:        0 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    7
  7232 ;; This function calls:
  7233 ;;		Nothing
  7234 ;; This function is called by:
  7235 ;;		_main
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text15
  7240  005488                     __ptext15:
  7241                           	opt stack 0
  7242  005488                     _machineConfig:
  7243                           	opt stack 23
  7244                           
  7245                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7246                           
  7247                           ; BSR set to: 1
  7248                           ;incstack = 0
  7249  005488  0EF0               	movlw	240
  7250  00548A  6ED3               	movwf	4051,c	;volatile
  7251                           
  7252                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7253  00548C  8C9B               	bsf	3995,6,c	;volatile
  7254                           
  7255                           ;MachineConfig.c: 22: TRISA = 0b00001111;
  7256  00548E  0E0F               	movlw	15
  7257  005490  6E92               	movwf	3986,c	;volatile
  7258                           
  7259                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7260  005492  0EF2               	movlw	242
  7261  005494  6E93               	movwf	3987,c	;volatile
  7262                           
  7263                           ;MachineConfig.c: 27: TRISC = 0x00;
  7264  005496  0E00               	movlw	0
  7265  005498  6E94               	movwf	3988,c	;volatile
  7266                           
  7267                           ;MachineConfig.c: 31: TRISD = 0x00;
  7268  00549A  0E00               	movlw	0
  7269  00549C  6E95               	movwf	3989,c	;volatile
  7270                           
  7271                           ;MachineConfig.c: 34: TRISE = 0x00;
  7272  00549E  0E00               	movlw	0
  7273  0054A0  6E96               	movwf	3990,c	;volatile
  7274                           
  7275                           ;MachineConfig.c: 37: LATA = 0x00;
  7276  0054A2  0E00               	movlw	0
  7277  0054A4  6E89               	movwf	3977,c	;volatile
  7278                           
  7279                           ;MachineConfig.c: 38: LATB = 0x00;
  7280  0054A6  0E00               	movlw	0
  7281  0054A8  6E8A               	movwf	3978,c	;volatile
  7282                           
  7283                           ;MachineConfig.c: 39: LATC = 0x00;
  7284  0054AA  0E00               	movlw	0
  7285  0054AC  6E8B               	movwf	3979,c	;volatile
  7286                           
  7287                           ;MachineConfig.c: 40: LATD = 0x00;
  7288  0054AE  0E00               	movlw	0
  7289  0054B0  6E8C               	movwf	3980,c	;volatile
  7290                           
  7291                           ;MachineConfig.c: 41: LATE = 0x00;
  7292  0054B2  0E00               	movlw	0
  7293  0054B4  6E8D               	movwf	3981,c	;volatile
  7294                           
  7295                           ;MachineConfig.c: 43: nRBPU = 0;
  7296  0054B6  9EF1               	bcf	intcon2,7,c	;volatile
  7297                           
  7298                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7299  0054B8  0E00               	movlw	0
  7300  0054BA  6EC2               	movwf	4034,c	;volatile
  7301                           
  7302                           ;MachineConfig.c: 47: ADCON1 = 0b00001011;
  7303  0054BC  0E0B               	movlw	11
  7304  0054BE  6EC1               	movwf	4033,c	;volatile
  7305                           
  7306                           ;MachineConfig.c: 52: CVRCON = 0x00;
  7307  0054C0  0E00               	movlw	0
  7308  0054C2  6EB5               	movwf	4021,c	;volatile
  7309                           
  7310                           ;MachineConfig.c: 53: CMCONbits.CIS = 0;
  7311  0054C4  96B4               	bcf	4020,3,c	;volatile
  7312                           
  7313                           ;MachineConfig.c: 54: ADCON2 = 0b10110001;
  7314  0054C6  0EB1               	movlw	177
  7315  0054C8  6EC0               	movwf	4032,c	;volatile
  7316                           
  7317                           ;MachineConfig.c: 57: INT1IE = 1;
  7318  0054CA  86F0               	bsf	intcon3,3,c	;volatile
  7319                           
  7320                           ;MachineConfig.c: 59: TMR0IE = 1;
  7321  0054CC  8AF2               	bsf	intcon,5,c	;volatile
  7322                           
  7323                           ;MachineConfig.c: 60: TMR1IE = 1;
  7324  0054CE  809D               	bsf	3997,0,c	;volatile
  7325                           
  7326                           ;MachineConfig.c: 61: TMR2IE = 1;
  7327  0054D0  829D               	bsf	3997,1,c	;volatile
  7328                           
  7329                           ;MachineConfig.c: 62: TMR3IE = 1;
  7330  0054D2  82A0               	bsf	4000,1,c	;volatile
  7331                           
  7332                           ;MachineConfig.c: 64: T1CON = 0b10110000;
  7333  0054D4  0EB0               	movlw	176
  7334  0054D6  6ECD               	movwf	4045,c	;volatile
  7335                           
  7336                           ;MachineConfig.c: 65: T2CON = 0b01111011;
  7337  0054D8  0E7B               	movlw	123
  7338  0054DA  6ECA               	movwf	4042,c	;volatile
  7339                           
  7340                           ;MachineConfig.c: 66: PR2 = 0x22;
  7341  0054DC  0E22               	movlw	34
  7342  0054DE  6ECB               	movwf	4043,c	;volatile
  7343                           
  7344                           ;MachineConfig.c: 67: T3CON = 0b10110000;
  7345  0054E0  0EB0               	movlw	176
  7346  0054E2  6EB1               	movwf	4017,c	;volatile
  7347                           
  7348                           ;MachineConfig.c: 68: PEIE = 1;
  7349  0054E4  8CF2               	bsf	intcon,6,c	;volatile
  7350                           
  7351                           ;MachineConfig.c: 69: ADIE = 0;
  7352  0054E6  9C9D               	bcf	3997,6,c	;volatile
  7353                           
  7354                           ;MachineConfig.c: 70: (INTCONbits.GIE = 0);
  7355  0054E8  9EF2               	bcf	intcon,7,c	;volatile
  7356  0054EA  0012               	return		;funcret
  7357  0054EC                     __end_of_machineConfig:
  7358                           	opt stack 0
  7359                           tblptru	equ	0xFF8
  7360                           tblptrh	equ	0xFF7
  7361                           tblptrl	equ	0xFF6
  7362                           tablat	equ	0xFF5
  7363                           prodh	equ	0xFF4
  7364                           prodl	equ	0xFF3
  7365                           intcon	equ	0xFF2
  7366                           intcon2	equ	0xFF1
  7367                           intcon3	equ	0xFF0
  7368                           postinc0	equ	0xFEE
  7369                           wreg	equ	0xFE8
  7370                           postdec1	equ	0xFE5
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function _logRun *****************
  7380 ;; Defined at:
  7381 ;;		line 88 in file "EEPROM.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;		None
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7386 ;;  i               2   55[BANK0 ] int 
  7387 ;;  num             1   49[BANK0 ] unsigned char 
  7388 ;;  addr            2   57[BANK0 ] unsigned short 
  7389 ;;  byte11          1   54[BANK0 ] unsigned char 
  7390 ;;  byte3           1   52[BANK0 ] unsigned char 
  7391 ;;  byte2           1   51[BANK0 ] unsigned char 
  7392 ;;  byte1           1   50[BANK0 ] unsigned char 
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  1    wreg      void 
  7395 ;; Registers used:
  7396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;Total ram usage:       10 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:   11
  7409 ;; This function calls:
  7410 ;;		_EEPROM_read
  7411 ;;		_EEPROM_write
  7412 ;; This function is called by:
  7413 ;;		_main
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           	psect	text16
  7418  0040E0                     __ptext16:
  7419                           	opt stack 0
  7420  0040E0                     _logRun:
  7421                           	opt stack 19
  7422                           
  7423                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7424                           
  7425                           ;incstack = 0
  7426  0040E0  0E00               	movlw	0
  7427  0040E2  0100               	movlb	0	; () banked
  7428  0040E4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7429  0040E6  0E00               	movlw	0
  7430  0040E8  6F80               	movwf	EEPROM_read@address& (0+255),b
  7431  0040EA  ECFD  F02E         	call	_EEPROM_read	;wreg free
  7432  0040EE  0100               	movlb	0	; () banked
  7433  0040F0  6FFD               	movwf	_sel& (0+255),b
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7437  0040F2  0100               	movlb	0	; () banked
  7438  0040F4  51FD               	movf	_sel& (0+255),w,b
  7439  0040F6  0D0B               	mullw	11
  7440  0040F8  0E01               	movlw	1
  7441  0040FA  24F3               	addwf	prodl,w,c
  7442  0040FC  0100               	movlb	0	; () banked
  7443  0040FE  6FB9               	movwf	logRun@addr& (0+255),b
  7444  004100  0E00               	movlw	0
  7445  004102  20F4               	addwfc	prodh,w,c
  7446  004104  0100               	movlb	0	; () banked
  7447  004106  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;EEPROM.c: 105: if (sel < 3){
  7451  004108  0E03               	movlw	3
  7452  00410A  0100               	movlb	0	; () banked
  7453  00410C  61FD               	cpfslt	_sel& (0+255),b
  7454  00410E  D00E               	goto	l10030
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7458  004110  0100               	movlb	0	; () banked
  7459  004112  29FD               	incf	_sel& (0+255),w,b
  7460  004114  0100               	movlb	0	; () banked
  7461  004116  6FB1               	movwf	logRun@num& (0+255),b
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7465  004118  0E00               	movlw	0
  7466  00411A  0100               	movlb	0	; () banked
  7467  00411C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7468  00411E  0E00               	movlw	0
  7469  004120  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7470  004122  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7471  004126  EC2D  F023         	call	_EEPROM_write	;wreg free
  7472                           
  7473                           ;EEPROM.c: 108: }
  7474  00412A  D00A               	goto	l10032
  7475  00412C                     l10030:
  7476                           
  7477                           ;EEPROM.c: 109: else{
  7478                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7479  00412C  0E00               	movlw	0
  7480  00412E  0100               	movlb	0	; () banked
  7481  004130  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7482  004132  0E00               	movlw	0
  7483  004134  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7484  004136  0E00               	movlw	0
  7485  004138  0100               	movlb	0	; () banked
  7486  00413A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7487  00413C  EC2D  F023         	call	_EEPROM_write	;wreg free
  7488  004140                     l10032:
  7489                           
  7490                           ;EEPROM.c: 111: }
  7491                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7492  004140  0100               	movlb	0	; () banked
  7493  004142  51FE               	movf	_count_total& (0+255),w,b
  7494  004144  0980               	iorlw	128
  7495  004146  0100               	movlb	0	; () banked
  7496  004148  6FB2               	movwf	logRun@byte1& (0+255),b
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7500  00414A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7501  00414E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7502  004152  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7503  004156  EC2D  F023         	call	_EEPROM_write	;wreg free
  7504                           
  7505                           ;EEPROM.c: 116: addr++;
  7506  00415A  0100               	movlb	0	; () banked
  7507  00415C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7508  00415E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7512  004160  0101               	movlb	1	; () banked
  7513  004162  3929               	swapf	_count_pop_no_tab& (0+255),w,b
  7514  004164  0BF0               	andlw	240
  7515  004166  0101               	movlb	1	; () banked
  7516  004168  112B               	iorwf	_count_pop_w_tab& (0+255),w,b
  7517  00416A  0100               	movlb	0	; () banked
  7518  00416C  6FB3               	movwf	logRun@byte2& (0+255),b
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7522  00416E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7523  004172  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7524  004176  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7525  00417A  EC2D  F023         	call	_EEPROM_write	;wreg free
  7526                           
  7527                           ;EEPROM.c: 121: addr++;
  7528  00417E  0100               	movlb	0	; () banked
  7529  004180  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7530  004182  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7534  004184  0101               	movlb	1	; () banked
  7535  004186  3927               	swapf	_count_can_w_lab& (0+255),w,b
  7536  004188  0BF0               	andlw	240
  7537  00418A  0101               	movlb	1	; () banked
  7538  00418C  1125               	iorwf	_count_can_no_lab& (0+255),w,b
  7539  00418E  0100               	movlb	0	; () banked
  7540  004190  6FB4               	movwf	logRun@byte3& (0+255),b
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7544  004192  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7545  004196  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7546  00419A  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7547  00419E  EC2D  F023         	call	_EEPROM_write	;wreg free
  7548                           
  7549                           ;EEPROM.c: 124: addr++;
  7550  0041A2  0100               	movlb	0	; () banked
  7551  0041A4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7552  0041A6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7556  0041A8  0E00               	movlw	0
  7557  0041AA  0100               	movlb	0	; () banked
  7558  0041AC  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7559  0041AE  0E00               	movlw	0
  7560  0041B0  6FB7               	movwf	logRun@i& (0+255),b
  7561                           
  7562                           ; BSR set to: 0
  7563  0041B2  0100               	movlb	0	; () banked
  7564  0041B4  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7565  0041B6  D008               	goto	l10056
  7566  0041B8  0100               	movlb	0	; () banked
  7567  0041BA  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7568  0041BC  E128               	bnz	l1172
  7569  0041BE  0E07               	movlw	7
  7570  0041C0  0100               	movlb	0	; () banked
  7571  0041C2  5DB7               	subwf	logRun@i& (0+255),w,b
  7572  0041C4  B0D8               	btfsc	status,0,c
  7573  0041C6  D023               	goto	l1172
  7574  0041C8                     l10056:
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7578  0041C8  90D8               	bcf	status,0,c
  7579  0041CA  0100               	movlb	0	; () banked
  7580  0041CC  35B7               	rlcf	logRun@i& (0+255),w,b
  7581  0041CE  6ED9               	movwf	fsr2l,c
  7582  0041D0  0100               	movlb	0	; () banked
  7583  0041D2  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7584  0041D4  6EDA               	movwf	fsr2h,c
  7585  0041D6  0E0E               	movlw	low _startTime
  7586  0041D8  26D9               	addwf	fsr2l,f,c
  7587  0041DA  0E01               	movlw	high _startTime
  7588  0041DC  22DA               	addwfc	fsr2h,f,c
  7589  0041DE  50DF               	movf	indf2,w,c
  7590  0041E0  0100               	movlb	0	; () banked
  7591  0041E2  6FB5               	movwf	logRun@byte_i& (0+255),b
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7595  0041E4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7596  0041E8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7597  0041EC  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7598  0041F0  EC2D  F023         	call	_EEPROM_write	;wreg free
  7599                           
  7600                           ;EEPROM.c: 130: addr++;
  7601  0041F4  0100               	movlb	0	; () banked
  7602  0041F6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7603  0041F8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7604                           
  7605                           ; BSR set to: 0
  7606  0041FA  0100               	movlb	0	; () banked
  7607  0041FC  4BB7               	infsnz	logRun@i& (0+255),f,b
  7608  0041FE  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7609                           
  7610                           ; BSR set to: 0
  7611  004200  0100               	movlb	0	; () banked
  7612  004202  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7613  004204  D7E1               	goto	l10056
  7614  004206  0100               	movlb	0	; () banked
  7615  004208  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7616  00420A  E101               	bnz	u9820
  7617  00420C  D7D8               	goto	L9
  7618  00420E                     u9820:
  7619  00420E                     l1172:
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;EEPROM.c: 131: }
  7623                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7624  00420E  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7628  004212  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7629  004216  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7630  00421A  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7631  00421E  EC2D  F023         	call	_EEPROM_write	;wreg free
  7632  004222  0012               	return		;funcret
  7633  004224                     __end_of_logRun:
  7634                           	opt stack 0
  7635                           tblptru	equ	0xFF8
  7636                           tblptrh	equ	0xFF7
  7637                           tblptrl	equ	0xFF6
  7638                           tablat	equ	0xFF5
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           intcon	equ	0xFF2
  7642                           intcon2	equ	0xFF1
  7643                           intcon3	equ	0xFF0
  7644                           postinc0	equ	0xFEE
  7645                           wreg	equ	0xFE8
  7646                           postdec1	equ	0xFE5
  7647                           fsr1l	equ	0xFE1
  7648                           indf2	equ	0xFDF
  7649                           postinc2	equ	0xFDE
  7650                           postdec2	equ	0xFDD
  7651                           fsr2h	equ	0xFDA
  7652                           fsr2l	equ	0xFD9
  7653                           status	equ	0xFD8
  7654                           
  7655 ;; *************** function _initUI *****************
  7656 ;; Defined at:
  7657 ;;		line 62 in file "UI.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;		None
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;		None
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  1    wreg      void 
  7664 ;; Registers used:
  7665 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;Total ram usage:        0 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:   12
  7678 ;; This function calls:
  7679 ;;		_change_state_to_menu_start
  7680 ;;		_loadRTC
  7681 ;; This function is called by:
  7682 ;;		_main
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text17
  7687  0059E2                     __ptext17:
  7688                           	opt stack 0
  7689  0059E2                     _initUI:
  7690                           	opt stack 18
  7691                           
  7692                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7693                           
  7694                           ;incstack = 0
  7695  0059E2  8EF2               	bsf	intcon,7,c	;volatile
  7696                           
  7697                           ;UI.c: 64: machine_state = UI_state;
  7698  0059E4  0E00               	movlw	0
  7699  0059E6  0100               	movlb	0	; () banked
  7700  0059E8  6FFC               	movwf	_machine_state& (0+255),b
  7701                           
  7702                           ;UI.c: 65: logstate = 0;
  7703  0059EA  0E00               	movlw	0
  7704  0059EC  0100               	movlb	0	; () banked
  7705  0059EE  6FF9               	movwf	(_logstate+1)& (0+255),b
  7706  0059F0  0E00               	movlw	0
  7707  0059F2  6FF8               	movwf	_logstate& (0+255),b
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;UI.c: 67: if(RTCflag){
  7711  0059F4  0100               	movlb	0	; () banked
  7712  0059F6  51E4               	movf	_RTCflag& (0+255),w,b
  7713  0059F8  0100               	movlb	0	; () banked
  7714  0059FA  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7715  0059FC  A4D8               	btfss	status,2,c
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;UI.c: 68: loadRTC();
  7719  0059FE  ECA6  F027         	call	_loadRTC	;wreg free
  7720                           
  7721                           ;UI.c: 69: }
  7722                           ;UI.c: 71: change_state_to_menu_start();
  7723  005A02  EC0F  F02E         	call	_change_state_to_menu_start	;wreg free
  7724                           
  7725                           ;UI.c: 72: firstboot = 1;
  7726  005A06  0E00               	movlw	0
  7727  005A08  0101               	movlb	1	; () banked
  7728  005A0A  6F3E               	movwf	(_firstboot+1)& (0+255),b
  7729  005A0C  0E01               	movlw	1
  7730  005A0E  6F3D               	movwf	_firstboot& (0+255),b
  7731                           
  7732                           ; BSR set to: 1
  7733  005A10  0012               	return		;funcret
  7734  005A12                     __end_of_initUI:
  7735                           	opt stack 0
  7736                           tblptru	equ	0xFF8
  7737                           tblptrh	equ	0xFF7
  7738                           tblptrl	equ	0xFF6
  7739                           tablat	equ	0xFF5
  7740                           prodh	equ	0xFF4
  7741                           prodl	equ	0xFF3
  7742                           intcon	equ	0xFF2
  7743                           intcon2	equ	0xFF1
  7744                           intcon3	equ	0xFF0
  7745                           postinc0	equ	0xFEE
  7746                           wreg	equ	0xFE8
  7747                           postdec1	equ	0xFE5
  7748                           fsr1l	equ	0xFE1
  7749                           indf2	equ	0xFDF
  7750                           postinc2	equ	0xFDE
  7751                           postdec2	equ	0xFDD
  7752                           fsr2h	equ	0xFDA
  7753                           fsr2l	equ	0xFD9
  7754                           status	equ	0xFD8
  7755                           
  7756 ;; *************** function _loadRTC *****************
  7757 ;; Defined at:
  7758 ;;		line 28 in file "RTC.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;		None
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  i               2   22[BANK0 ] int 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;Total ram usage:        3 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    9
  7779 ;; This function calls:
  7780 ;;		_I2C_Master_Init
  7781 ;;		_I2C_Master_Start
  7782 ;;		_I2C_Master_Stop
  7783 ;;		_I2C_Master_Write
  7784 ;; This function is called by:
  7785 ;;		_initUI
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           	psect	text18
  7790  004F4C                     __ptext18:
  7791                           	opt stack 0
  7792  004F4C                     _loadRTC:
  7793                           	opt stack 20
  7794                           
  7795                           ;RTC.c: 30: I2C_Master_Init(10000);
  7796                           
  7797                           ; BSR set to: 1
  7798                           ;incstack = 0
  7799  004F4C  0E10               	movlw	16
  7800  004F4E  0100               	movlb	0	; () banked
  7801  004F50  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7802  004F52  0E27               	movlw	39
  7803  004F54  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7804  004F56  0E00               	movlw	0
  7805  004F58  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7806  004F5A  0E00               	movlw	0
  7807  004F5C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7808  004F5E  ECA7  F02A         	call	_I2C_Master_Init	;wreg free
  7809                           
  7810                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7811  004F62  9EF2               	bcf	intcon,7,c	;volatile
  7812                           
  7813                           ;RTC.c: 34: I2C_Master_Start();
  7814  004F64  EC60  F02F         	call	_I2C_Master_Start	;wreg free
  7815                           
  7816                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7817  004F68  0E00               	movlw	0
  7818  004F6A  0100               	movlb	0	; () banked
  7819  004F6C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7820  004F6E  0ED0               	movlw	208
  7821  004F70  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7822  004F72  EC4E  F02F         	call	_I2C_Master_Write	;wreg free
  7823                           
  7824                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7825  004F76  0E00               	movlw	0
  7826  004F78  0100               	movlb	0	; () banked
  7827  004F7A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7828  004F7C  0E00               	movlw	0
  7829  004F7E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7830  004F80  EC4E  F02F         	call	_I2C_Master_Write	;wreg free
  7831                           
  7832                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7833  004F84  0E00               	movlw	0
  7834  004F86  0100               	movlb	0	; () banked
  7835  004F88  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7836  004F8A  0E00               	movlw	0
  7837  004F8C  6F96               	movwf	loadRTC@i& (0+255),b
  7838  004F8E                     l7720:
  7839                           
  7840                           ; BSR set to: 0
  7841  004F8E  0100               	movlb	0	; () banked
  7842  004F90  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7843  004F92  D008               	goto	l7724
  7844  004F94  0100               	movlb	0	; () banked
  7845  004F96  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7846  004F98  E11B               	bnz	l7730
  7847  004F9A  0E07               	movlw	7
  7848  004F9C  0100               	movlb	0	; () banked
  7849  004F9E  5D96               	subwf	loadRTC@i& (0+255),w,b
  7850  004FA0  B0D8               	btfsc	status,0,c
  7851  004FA2  D016               	goto	l7730
  7852  004FA4                     l7724:
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7856  004FA4  0E1C               	movlw	low _time
  7857  004FA6  0100               	movlb	0	; () banked
  7858  004FA8  2596               	addwf	loadRTC@i& (0+255),w,b
  7859  004FAA  6ED9               	movwf	fsr2l,c
  7860  004FAC  0E01               	movlw	high _time
  7861  004FAE  0100               	movlb	0	; () banked
  7862  004FB0  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7863  004FB2  6EDA               	movwf	fsr2h,c
  7864  004FB4  50DF               	movf	indf2,w,c
  7865  004FB6  0100               	movlb	0	; () banked
  7866  004FB8  6F95               	movwf	??_loadRTC& (0+255),b
  7867  004FBA  0100               	movlb	0	; () banked
  7868  004FBC  5195               	movf	??_loadRTC& (0+255),w,b
  7869  004FBE  0100               	movlb	0	; () banked
  7870  004FC0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7871  004FC2  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7872  004FC4  EC4E  F02F         	call	_I2C_Master_Write	;wreg free
  7873  004FC8  0100               	movlb	0	; () banked
  7874  004FCA  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7875  004FCC  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7876  004FCE  D7DF               	goto	l7720
  7877  004FD0                     l7730:
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;RTC.c: 39: }
  7881                           ;RTC.c: 40: I2C_Master_Stop();
  7882  004FD0  EC5C  F02F         	call	_I2C_Master_Stop	;wreg free
  7883                           
  7884                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7885  004FD4  8EF2               	bsf	intcon,7,c	;volatile
  7886  004FD6  0012               	return		;funcret
  7887  004FD8                     __end_of_loadRTC:
  7888                           	opt stack 0
  7889                           tblptru	equ	0xFF8
  7890                           tblptrh	equ	0xFF7
  7891                           tblptrl	equ	0xFF6
  7892                           tablat	equ	0xFF5
  7893                           prodh	equ	0xFF4
  7894                           prodl	equ	0xFF3
  7895                           intcon	equ	0xFF2
  7896                           intcon2	equ	0xFF1
  7897                           intcon3	equ	0xFF0
  7898                           postinc0	equ	0xFEE
  7899                           wreg	equ	0xFE8
  7900                           postdec1	equ	0xFE5
  7901                           fsr1l	equ	0xFE1
  7902                           indf2	equ	0xFDF
  7903                           postinc2	equ	0xFDE
  7904                           postdec2	equ	0xFDD
  7905                           fsr2h	equ	0xFDA
  7906                           fsr2l	equ	0xFD9
  7907                           status	equ	0xFD8
  7908                           
  7909 ;; *************** function _I2C_Master_Init *****************
  7910 ;; Defined at:
  7911 ;;		line 15 in file "I2C.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;  c               4   13[BANK0 ] const unsigned long 
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;		None
  7916 ;; Return value:  Size  Location     Type
  7917 ;;                  1    wreg      void 
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0, cstack
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7925 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;Total ram usage:        8 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; Hardware stack levels required when called:    8
  7932 ;; This function calls:
  7933 ;;		___lldiv
  7934 ;; This function is called by:
  7935 ;;		_main
  7936 ;;		_loadRTC
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           	psect	text19
  7941  00554E                     __ptext19:
  7942                           	opt stack 0
  7943  00554E                     _I2C_Master_Init:
  7944                           	opt stack 20
  7945                           
  7946                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7947                           
  7948                           ;incstack = 0
  7949  00554E  0E00               	movlw	0
  7950  005550  6EC7               	movwf	4039,c	;volatile
  7951                           
  7952                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7953  005552  0E28               	movlw	40
  7954  005554  6EC6               	movwf	4038,c	;volatile
  7955                           
  7956                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7957  005556  0E00               	movlw	0
  7958  005558  6EC5               	movwf	4037,c	;volatile
  7959                           
  7960                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7961  00555A  0E00               	movlw	0
  7962  00555C  0100               	movlb	0	; () banked
  7963  00555E  6F80               	movwf	___lldiv@dividend& (0+255),b
  7964  005560  0E48               	movlw	72
  7965  005562  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7966  005564  0EE8               	movlw	232
  7967  005566  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7968  005568  0E01               	movlw	1
  7969  00556A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7970  00556C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7971  005570  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7972  005574  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7973  005578  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7974  00557C  0E02               	movlw	2
  7975  00557E                     u6215:
  7976  00557E  90D8               	bcf	status,0,c
  7977  005580  0100               	movlb	0	; () banked
  7978  005582  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7979  005584  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7980  005586  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7981  005588  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7982  00558A  2EE8               	decfsz	wreg,f,c
  7983  00558C  D7F8               	goto	u6215
  7984  00558E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7985  005592  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7986  005596  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7987  00559A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7988  00559E  EC0E  F026         	call	___lldiv	;wreg free
  7989  0055A2  0100               	movlb	0	; () banked
  7990  0055A4  0580               	decf	?___lldiv& (0+255),w,b
  7991  0055A6  6EC8               	movwf	4040,c	;volatile
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;I2C.c: 22: TRISC3 = 1;
  7995  0055A8  8694               	bsf	3988,3,c	;volatile
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;I2C.c: 23: TRISC4 = 1;
  7999  0055AA  8894               	bsf	3988,4,c	;volatile
  8000                           
  8001                           ; BSR set to: 0
  8002  0055AC  0012               	return		;funcret
  8003  0055AE                     __end_of_I2C_Master_Init:
  8004                           	opt stack 0
  8005                           tblptru	equ	0xFF8
  8006                           tblptrh	equ	0xFF7
  8007                           tblptrl	equ	0xFF6
  8008                           tablat	equ	0xFF5
  8009                           prodh	equ	0xFF4
  8010                           prodl	equ	0xFF3
  8011                           intcon	equ	0xFF2
  8012                           intcon2	equ	0xFF1
  8013                           intcon3	equ	0xFF0
  8014                           postinc0	equ	0xFEE
  8015                           wreg	equ	0xFE8
  8016                           postdec1	equ	0xFE5
  8017                           fsr1l	equ	0xFE1
  8018                           indf2	equ	0xFDF
  8019                           postinc2	equ	0xFDE
  8020                           postdec2	equ	0xFDD
  8021                           fsr2h	equ	0xFDA
  8022                           fsr2l	equ	0xFD9
  8023                           status	equ	0xFD8
  8024                           
  8025 ;; *************** function ___lldiv *****************
  8026 ;; Defined at:
  8027 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  dividend        4    0[BANK0 ] unsigned long 
  8030 ;;  divisor         4    4[BANK0 ] unsigned long 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  quotient        4    8[BANK0 ] unsigned long 
  8033 ;;  counter         1   12[BANK0 ] unsigned char 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  4    0[BANK0 ] unsigned long 
  8036 ;; Registers used:
  8037 ;;		wreg, status,2, status,0
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8043 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;Total ram usage:       13 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    7
  8050 ;; This function calls:
  8051 ;;		Nothing
  8052 ;; This function is called by:
  8053 ;;		_I2C_Master_Init
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           	psect	text20
  8058  004C1C                     __ptext20:
  8059                           	opt stack 0
  8060  004C1C                     ___lldiv:
  8061                           	opt stack 20
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;incstack = 0
  8065  004C1C  0E00               	movlw	0
  8066  004C1E  0100               	movlb	0	; () banked
  8067  004C20  6F88               	movwf	___lldiv@quotient& (0+255),b
  8068  004C22  0E00               	movlw	0
  8069  004C24  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8070  004C26  0E00               	movlw	0
  8071  004C28  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8072  004C2A  0E00               	movlw	0
  8073  004C2C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8074                           
  8075                           ; BSR set to: 0
  8076  004C2E  0100               	movlb	0	; () banked
  8077  004C30  5184               	movf	___lldiv@divisor& (0+255),w,b
  8078  004C32  0100               	movlb	0	; () banked
  8079  004C34  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8080  004C36  0100               	movlb	0	; () banked
  8081  004C38  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8082  004C3A  0100               	movlb	0	; () banked
  8083  004C3C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8084  004C3E  B4D8               	btfsc	status,2,c
  8085  004C40  D042               	goto	l1930
  8086                           
  8087                           ; BSR set to: 0
  8088  004C42  0E01               	movlw	1
  8089  004C44  0100               	movlb	0	; () banked
  8090  004C46  6F8C               	movwf	___lldiv@counter& (0+255),b
  8091  004C48  D008               	goto	l7044
  8092  004C4A                     l7042:
  8093                           
  8094                           ; BSR set to: 0
  8095  004C4A  0100               	movlb	0	; () banked
  8096  004C4C  90D8               	bcf	status,0,c
  8097  004C4E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8098  004C50  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8099  004C52  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8100  004C54  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8101  004C56  0100               	movlb	0	; () banked
  8102  004C58  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8103  004C5A                     l7044:
  8104                           
  8105                           ; BSR set to: 0
  8106  004C5A  0100               	movlb	0	; () banked
  8107  004C5C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8108  004C5E  D7F5               	goto	l7042
  8109  004C60                     l7046:
  8110                           
  8111                           ; BSR set to: 0
  8112  004C60  0100               	movlb	0	; () banked
  8113  004C62  90D8               	bcf	status,0,c
  8114  004C64  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8115  004C66  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8116  004C68  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8117  004C6A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8118                           
  8119                           ; BSR set to: 0
  8120  004C6C  0100               	movlb	0	; () banked
  8121  004C6E  5184               	movf	___lldiv@divisor& (0+255),w,b
  8122  004C70  0100               	movlb	0	; () banked
  8123  004C72  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8124  004C74  0100               	movlb	0	; () banked
  8125  004C76  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8126  004C78  0100               	movlb	0	; () banked
  8127  004C7A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8128  004C7C  0100               	movlb	0	; () banked
  8129  004C7E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8130  004C80  0100               	movlb	0	; () banked
  8131  004C82  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8132  004C84  0100               	movlb	0	; () banked
  8133  004C86  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8134  004C88  0100               	movlb	0	; () banked
  8135  004C8A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8136  004C8C  A0D8               	btfss	status,0,c
  8137  004C8E  D012               	goto	l7054
  8138                           
  8139                           ; BSR set to: 0
  8140  004C90  0100               	movlb	0	; () banked
  8141  004C92  5184               	movf	___lldiv@divisor& (0+255),w,b
  8142  004C94  0100               	movlb	0	; () banked
  8143  004C96  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8144  004C98  0100               	movlb	0	; () banked
  8145  004C9A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8146  004C9C  0100               	movlb	0	; () banked
  8147  004C9E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8148  004CA0  0100               	movlb	0	; () banked
  8149  004CA2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8150  004CA4  0100               	movlb	0	; () banked
  8151  004CA6  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8152  004CA8  0100               	movlb	0	; () banked
  8153  004CAA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8154  004CAC  0100               	movlb	0	; () banked
  8155  004CAE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8156                           
  8157                           ; BSR set to: 0
  8158  004CB0  0100               	movlb	0	; () banked
  8159  004CB2  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8160  004CB4                     l7054:
  8161                           
  8162                           ; BSR set to: 0
  8163  004CB4  0100               	movlb	0	; () banked
  8164  004CB6  90D8               	bcf	status,0,c
  8165  004CB8  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8166  004CBA  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8167  004CBC  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8168  004CBE  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8169                           
  8170                           ; BSR set to: 0
  8171  004CC0  0100               	movlb	0	; () banked
  8172  004CC2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8173  004CC4  D7CD               	goto	l7046
  8174  004CC6                     l1930:
  8175                           
  8176                           ; BSR set to: 0
  8177  004CC6  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8178  004CCA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8179  004CCE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8180  004CD2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8181                           
  8182                           ; BSR set to: 0
  8183  004CD6  0012               	return		;funcret
  8184  004CD8                     __end_of___lldiv:
  8185                           	opt stack 0
  8186                           tblptru	equ	0xFF8
  8187                           tblptrh	equ	0xFF7
  8188                           tblptrl	equ	0xFF6
  8189                           tablat	equ	0xFF5
  8190                           prodh	equ	0xFF4
  8191                           prodl	equ	0xFF3
  8192                           intcon	equ	0xFF2
  8193                           intcon2	equ	0xFF1
  8194                           intcon3	equ	0xFF0
  8195                           postinc0	equ	0xFEE
  8196                           wreg	equ	0xFE8
  8197                           postdec1	equ	0xFE5
  8198                           fsr1l	equ	0xFE1
  8199                           indf2	equ	0xFDF
  8200                           postinc2	equ	0xFDE
  8201                           postdec2	equ	0xFDD
  8202                           fsr2h	equ	0xFDA
  8203                           fsr2l	equ	0xFD9
  8204                           status	equ	0xFD8
  8205                           
  8206 ;; *************** function _change_state_to_menu_start *****************
  8207 ;; Defined at:
  8208 ;;		line 477 in file "UI.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;		None
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;		None
  8213 ;; Return value:  Size  Location     Type
  8214 ;;                  1    wreg      void 
  8215 ;; Registers used:
  8216 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8217 ;; Tracked objects:
  8218 ;;		On entry : 0/0
  8219 ;;		On exit  : 0/0
  8220 ;;		Unchanged: 0/0
  8221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;Total ram usage:        0 bytes
  8227 ;; Hardware stack levels used:    1
  8228 ;; Hardware stack levels required when called:   11
  8229 ;; This function calls:
  8230 ;;		_lcdInst
  8231 ;;		_printRTC
  8232 ;;		_printf
  8233 ;; This function is called by:
  8234 ;;		_initUI
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           	psect	text21
  8239  005C1E                     __ptext21:
  8240                           	opt stack 0
  8241  005C1E                     _change_state_to_menu_start:
  8242                           	opt stack 18
  8243                           
  8244                           ;UI.c: 478: cur_state = 0;
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;incstack = 0
  8248  005C1E  0E00               	movlw	0
  8249  005C20  0100               	movlb	0	; () banked
  8250  005C22  6FE7               	movwf	(_cur_state+1)& (0+255),b
  8251  005C24  0E00               	movlw	0
  8252  005C26  6FE6               	movwf	_cur_state& (0+255),b
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;UI.c: 480: lcdInst(0b10000000);;
  8256  005C28  0E80               	movlw	128
  8257  005C2A  EC3A  F02F         	call	_lcdInst
  8258                           
  8259                           ;UI.c: 481: printRTC();
  8260  005C2E  ECDE  F018         	call	_printRTC	;wreg free
  8261                           
  8262                           ;UI.c: 482: lcdInst(0b11000000);;
  8263  005C32  0EC0               	movlw	192
  8264  005C34  EC3A  F02F         	call	_lcdInst
  8265                           
  8266                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8267  005C38  0EEA               	movlw	low STR_30
  8268  005C3A  0100               	movlb	0	; () banked
  8269  005C3C  6F8E               	movwf	printf@f& (0+255),b
  8270  005C3E  0EFD               	movlw	high STR_30
  8271  005C40  0100               	movlb	0	; () banked
  8272  005C42  6F8F               	movwf	(printf@f+1)& (0+255),b
  8273  005C44  EC67  F00E         	call	_printf	;wreg free
  8274  005C48  0012               	return		;funcret
  8275  005C4A                     __end_of_change_state_to_menu_start:
  8276                           	opt stack 0
  8277                           tblptru	equ	0xFF8
  8278                           tblptrh	equ	0xFF7
  8279                           tblptrl	equ	0xFF6
  8280                           tablat	equ	0xFF5
  8281                           prodh	equ	0xFF4
  8282                           prodl	equ	0xFF3
  8283                           intcon	equ	0xFF2
  8284                           intcon2	equ	0xFF1
  8285                           intcon3	equ	0xFF0
  8286                           postinc0	equ	0xFEE
  8287                           wreg	equ	0xFE8
  8288                           postdec1	equ	0xFE5
  8289                           fsr1l	equ	0xFE1
  8290                           indf2	equ	0xFDF
  8291                           postinc2	equ	0xFDE
  8292                           postdec2	equ	0xFDD
  8293                           fsr2h	equ	0xFDA
  8294                           fsr2l	equ	0xFD9
  8295                           status	equ	0xFD8
  8296                           
  8297 ;; *************** function _initTime *****************
  8298 ;; Defined at:
  8299 ;;		line 17 in file "RTC.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;  s               1    wreg     unsigned char 
  8302 ;;  m               1    0[BANK0 ] unsigned char 
  8303 ;;  h               1    1[BANK0 ] unsigned char 
  8304 ;;  w               1    2[BANK0 ] unsigned char 
  8305 ;;  DD              1    3[BANK0 ] unsigned char 
  8306 ;;  MM              1    4[BANK0 ] unsigned char 
  8307 ;;  YY              1    5[BANK0 ] unsigned char 
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;  s               1    6[BANK0 ] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      void 
  8312 ;; Registers used:
  8313 ;;		wreg
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8319 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;Total ram usage:        7 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; Hardware stack levels required when called:    7
  8326 ;; This function calls:
  8327 ;;		Nothing
  8328 ;; This function is called by:
  8329 ;;		_main
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           	psect	text22
  8334  005D82                     __ptext22:
  8335                           	opt stack 0
  8336  005D82                     _initTime:
  8337                           	opt stack 23
  8338                           
  8339                           ;incstack = 0
  8340                           ;initTime@s stored from wreg
  8341  005D82  0100               	movlb	0	; () banked
  8342  005D84  6F86               	movwf	initTime@s& (0+255),b
  8343                           
  8344                           ;RTC.c: 19: time[0] = s;
  8345  005D86  C086  F11C         	movff	initTime@s,_time
  8346                           
  8347                           ;RTC.c: 20: time[1] = m;
  8348  005D8A  C080  F11D         	movff	initTime@m,_time+1
  8349                           
  8350                           ;RTC.c: 21: time[2] = h;
  8351  005D8E  C081  F11E         	movff	initTime@h,_time+2
  8352                           
  8353                           ;RTC.c: 22: time[3] = w;
  8354  005D92  C082  F11F         	movff	initTime@w,_time+3
  8355                           
  8356                           ;RTC.c: 23: time[4] = DD;
  8357  005D96  C083  F120         	movff	initTime@DD,_time+4
  8358                           
  8359                           ;RTC.c: 24: time[5] = MM;
  8360  005D9A  C084  F121         	movff	initTime@MM,_time+5
  8361                           
  8362                           ;RTC.c: 25: time[6] = YY;
  8363  005D9E  C085  F122         	movff	initTime@YY,_time+6
  8364  005DA2  0012               	return		;funcret
  8365  005DA4                     __end_of_initTime:
  8366                           	opt stack 0
  8367                           tblptru	equ	0xFF8
  8368                           tblptrh	equ	0xFF7
  8369                           tblptrl	equ	0xFF6
  8370                           tablat	equ	0xFF5
  8371                           prodh	equ	0xFF4
  8372                           prodl	equ	0xFF3
  8373                           intcon	equ	0xFF2
  8374                           intcon2	equ	0xFF1
  8375                           intcon3	equ	0xFF0
  8376                           postinc0	equ	0xFEE
  8377                           wreg	equ	0xFE8
  8378                           postdec1	equ	0xFE5
  8379                           fsr1l	equ	0xFE1
  8380                           indf2	equ	0xFDF
  8381                           postinc2	equ	0xFDE
  8382                           postdec2	equ	0xFDD
  8383                           fsr2h	equ	0xFDA
  8384                           fsr2l	equ	0xFD9
  8385                           status	equ	0xFD8
  8386                           
  8387 ;; *************** function _initLCD *****************
  8388 ;; Defined at:
  8389 ;;		line 50 in file "lcd.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;		None
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;		None
  8394 ;; Return value:  Size  Location     Type
  8395 ;;                  1    wreg      void 
  8396 ;; Registers used:
  8397 ;;		wreg, status,2, status,0, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 0/0
  8400 ;;		On exit  : 0/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8406 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8407 ;;Total ram usage:        1 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:    9
  8410 ;; This function calls:
  8411 ;;		_lcdInst
  8412 ;; This function is called by:
  8413 ;;		_main
  8414 ;; This function uses a non-reentrant model
  8415 ;;
  8416                           
  8417                           	psect	text23
  8418  00579C                     __ptext23:
  8419                           	opt stack 0
  8420  00579C                     _initLCD:
  8421                           	opt stack 21
  8422                           
  8423                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8424                           
  8425                           ;incstack = 0
  8426  00579C  0E9C               	movlw	156
  8427  00579E  0100               	movlb	0	; () banked
  8428  0057A0  6F83               	movwf	??_initLCD& (0+255),b
  8429  0057A2  0ED7               	movlw	215
  8430  0057A4                     u10667:
  8431  0057A4  2EE8               	decfsz	wreg,f,c
  8432  0057A6  D7FE               	bra	u10667
  8433  0057A8  2F83               	decfsz	??_initLCD& (0+255),f,b
  8434  0057AA  D7FC               	bra	u10667
  8435                           
  8436                           ;lcd.c: 52: lcdInst(0b00110011);
  8437  0057AC  0E33               	movlw	51
  8438  0057AE  EC3A  F02F         	call	_lcdInst
  8439                           
  8440                           ;lcd.c: 53: lcdInst(0b00110010);
  8441  0057B2  0E32               	movlw	50
  8442  0057B4  EC3A  F02F         	call	_lcdInst
  8443                           
  8444                           ;lcd.c: 55: lcdInst(0b00101000);
  8445  0057B8  0E28               	movlw	40
  8446  0057BA  EC3A  F02F         	call	_lcdInst
  8447                           
  8448                           ;lcd.c: 56: lcdInst(0b00001100);
  8449  0057BE  0E0C               	movlw	12
  8450  0057C0  EC3A  F02F         	call	_lcdInst
  8451                           
  8452                           ;lcd.c: 57: lcdInst(0b00000110);
  8453  0057C4  0E06               	movlw	6
  8454  0057C6  EC3A  F02F         	call	_lcdInst
  8455                           
  8456                           ;lcd.c: 58: lcdInst(0b00000001);
  8457  0057CA  0E01               	movlw	1
  8458  0057CC  EC3A  F02F         	call	_lcdInst
  8459                           
  8460                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8461  0057D0  0E9C               	movlw	156
  8462  0057D2  0100               	movlb	0	; () banked
  8463  0057D4  6F83               	movwf	??_initLCD& (0+255),b
  8464  0057D6  0ED7               	movlw	215
  8465  0057D8                     u10677:
  8466  0057D8  2EE8               	decfsz	wreg,f,c
  8467  0057DA  D7FE               	bra	u10677
  8468  0057DC  2F83               	decfsz	??_initLCD& (0+255),f,b
  8469  0057DE  D7FC               	bra	u10677
  8470  0057E0  0012               	return		;funcret
  8471  0057E2                     __end_of_initLCD:
  8472                           	opt stack 0
  8473                           tblptru	equ	0xFF8
  8474                           tblptrh	equ	0xFF7
  8475                           tblptrl	equ	0xFF6
  8476                           tablat	equ	0xFF5
  8477                           prodh	equ	0xFF4
  8478                           prodl	equ	0xFF3
  8479                           intcon	equ	0xFF2
  8480                           intcon2	equ	0xFF1
  8481                           intcon3	equ	0xFF0
  8482                           postinc0	equ	0xFEE
  8483                           wreg	equ	0xFE8
  8484                           postdec1	equ	0xFE5
  8485                           fsr1l	equ	0xFE1
  8486                           indf2	equ	0xFDF
  8487                           postinc2	equ	0xFDE
  8488                           postdec2	equ	0xFDD
  8489                           fsr2h	equ	0xFDA
  8490                           fsr2l	equ	0xFD9
  8491                           status	equ	0xFD8
  8492                           
  8493 ;; *************** function _initEEPROM *****************
  8494 ;; Defined at:
  8495 ;;		line 32 in file "EEPROM.c"
  8496 ;; Parameters:    Size  Location     Type
  8497 ;;		None
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;		None
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  1    wreg      void 
  8502 ;; Registers used:
  8503 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : 0/0
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;Total ram usage:        0 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:   11
  8516 ;; This function calls:
  8517 ;;		_EEPROM_write
  8518 ;; This function is called by:
  8519 ;;		_main
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           	psect	text24
  8524  005E12                     __ptext24:
  8525                           	opt stack 0
  8526  005E12                     _initEEPROM:
  8527                           	opt stack 19
  8528                           
  8529                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8530                           
  8531                           ;incstack = 0
  8532  005E12  0E00               	movlw	0
  8533  005E14  0100               	movlb	0	; () banked
  8534  005E16  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8535  005E18  0E00               	movlw	0
  8536  005E1A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8537  005E1C  0E01               	movlw	1
  8538  005E1E  0100               	movlb	0	; () banked
  8539  005E20  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8540  005E22  EC2D  F023         	call	_EEPROM_write	;wreg free
  8541  005E26  0012               	return		;funcret
  8542  005E28                     __end_of_initEEPROM:
  8543                           	opt stack 0
  8544                           tblptru	equ	0xFF8
  8545                           tblptrh	equ	0xFF7
  8546                           tblptrl	equ	0xFF6
  8547                           tablat	equ	0xFF5
  8548                           prodh	equ	0xFF4
  8549                           prodl	equ	0xFF3
  8550                           intcon	equ	0xFF2
  8551                           intcon2	equ	0xFF1
  8552                           intcon3	equ	0xFF0
  8553                           postinc0	equ	0xFEE
  8554                           wreg	equ	0xFE8
  8555                           postdec1	equ	0xFE5
  8556                           fsr1l	equ	0xFE1
  8557                           indf2	equ	0xFDF
  8558                           postinc2	equ	0xFDE
  8559                           postdec2	equ	0xFDD
  8560                           fsr2h	equ	0xFDA
  8561                           fsr2l	equ	0xFD9
  8562                           status	equ	0xFD8
  8563                           
  8564 ;; *************** function _EEPROM_write *****************
  8565 ;; Defined at:
  8566 ;;		line 36 in file "EEPROM.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;  address         2   43[BANK0 ] unsigned short 
  8569 ;;  data            1   45[BANK0 ] unsigned char 
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;  i               1   48[BANK0 ] unsigned char 
  8572 ;;  i               1   47[BANK0 ] unsigned char 
  8573 ;; Return value:  Size  Location     Type
  8574 ;;                  1    wreg      void 
  8575 ;; Registers used:
  8576 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8577 ;; Tracked objects:
  8578 ;;		On entry : 0/0
  8579 ;;		On exit  : 0/0
  8580 ;;		Unchanged: 0/0
  8581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8582 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8583 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;Total ram usage:        6 bytes
  8587 ;; Hardware stack levels used:    1
  8588 ;; Hardware stack levels required when called:   10
  8589 ;; This function calls:
  8590 ;;		_EEPROM_read
  8591 ;;		_lcdInst
  8592 ;;		_printf
  8593 ;; This function is called by:
  8594 ;;		_Loading
  8595 ;;		_initEEPROM
  8596 ;;		_logRun
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           	psect	text25
  8601  00465A                     __ptext25:
  8602                           	opt stack 0
  8603  00465A                     _EEPROM_write:
  8604                           	opt stack 18
  8605                           
  8606                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8607                           
  8608                           ;incstack = 0
  8609  00465A  84A6               	bsf	4006,2,c	;volatile
  8610                           
  8611                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8612  00465C  0100               	movlb	0	; () banked
  8613  00465E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8614  004660  6EAA               	movwf	4010,c	;volatile
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8618  004662  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;EEPROM.c: 43: EEDATA = data;
  8622  004666  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8626  00466A  9EA6               	bcf	4006,7,c	;volatile
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8630  00466C  9CA6               	bcf	4006,6,c	;volatile
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8634  00466E  9EF2               	bcf	intcon,7,c	;volatile
  8635                           
  8636                           ;EEPROM.c: 49: EECON2 = 0x55;
  8637  004670  0E55               	movlw	85
  8638  004672  6EA7               	movwf	4007,c	;volatile
  8639                           
  8640                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8641  004674  0EAA               	movlw	170
  8642  004676  6EA7               	movwf	4007,c	;volatile
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8646  004678  82A6               	bsf	4006,1,c	;volatile
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8650  00467A  8EF2               	bsf	intcon,7,c	;volatile
  8651  00467C                     l1150:
  8652  00467C  A8A1               	btfss	4001,4,c	;volatile
  8653  00467E  D7FE               	goto	l1150
  8654                           
  8655                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8656  004680  98A1               	bcf	4001,4,c	;volatile
  8657                           
  8658                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8659  004682  94A6               	bcf	4006,2,c	;volatile
  8660                           
  8661                           ;EEPROM.c: 61: if(debug){
  8662  004684  0101               	movlb	1	; () banked
  8663  004686  512F               	movf	_debug& (0+255),w,b
  8664  004688  0101               	movlb	1	; () banked
  8665  00468A  1130               	iorwf	(_debug+1)& (0+255),w,b
  8666  00468C  B4D8               	btfsc	status,2,c
  8667  00468E  0012               	return	
  8668                           
  8669                           ; BSR set to: 1
  8670                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8671  004690  0E01               	movlw	1
  8672  004692  EC3A  F02F         	call	_lcdInst
  8673  004696  0E68               	movlw	104
  8674  004698  0100               	movlb	0	; () banked
  8675  00469A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8676  00469C  0EE4               	movlw	228
  8677  00469E                     u10687:
  8678  00469E  2EE8               	decfsz	wreg,f,c
  8679  0046A0  D7FE               	bra	u10687
  8680  0046A2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8681  0046A4  D7FC               	bra	u10687
  8682  0046A6  F000               	nop	
  8683                           
  8684                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8685  0046A8  0E80               	movlw	128
  8686  0046AA  EC3A  F02F         	call	_lcdInst
  8687                           
  8688                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8689  0046AE  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8690  0046B2  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8691  0046B6  ECFD  F02E         	call	_EEPROM_read	;wreg free
  8692  0046BA  0100               	movlb	0	; () banked
  8693  0046BC  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8694  0046BE  A4D8               	btfss	status,2,c
  8695  0046C0  D024               	goto	l7492
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8699  0046C2  0EE2               	movlw	low STR_66
  8700  0046C4  0100               	movlb	0	; () banked
  8701  0046C6  6F8E               	movwf	printf@f& (0+255),b
  8702  0046C8  0EFA               	movlw	high STR_66
  8703  0046CA  0100               	movlb	0	; () banked
  8704  0046CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8705  0046CE  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8706  0046D2  0100               	movlb	0	; () banked
  8707  0046D4  6B91               	clrf	(?_printf+3)& (0+255),b
  8708  0046D6  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8709  0046DA  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8710  0046DE  EC67  F00E         	call	_printf	;wreg free
  8711                           
  8712                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8713  0046E2  0E00               	movlw	0
  8714  0046E4  0100               	movlb	0	; () banked
  8715  0046E6  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8716  0046E8                     l7484:
  8717                           
  8718                           ; BSR set to: 0
  8719  0046E8  0E63               	movlw	99
  8720  0046EA  0100               	movlb	0	; () banked
  8721  0046EC  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8722  0046EE  D001               	goto	l7488
  8723  0046F0  0012               	return	
  8724  0046F2                     l7488:
  8725                           
  8726                           ; BSR set to: 0
  8727  0046F2  0E68               	movlw	104
  8728  0046F4  0100               	movlb	0	; () banked
  8729  0046F6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8730  0046F8  0EE4               	movlw	228
  8731  0046FA                     u10697:
  8732  0046FA  2EE8               	decfsz	wreg,f,c
  8733  0046FC  D7FE               	bra	u10697
  8734  0046FE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8735  004700  D7FC               	bra	u10697
  8736  004702  F000               	nop	
  8737  004704  0100               	movlb	0	; () banked
  8738  004706  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8739  004708  D7EF               	goto	l7484
  8740  00470A                     l7492:
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8744  00470A  0EBC               	movlw	low STR_67
  8745  00470C  0100               	movlb	0	; () banked
  8746  00470E  6F8E               	movwf	printf@f& (0+255),b
  8747  004710  0EFF               	movlw	high STR_67
  8748  004712  0100               	movlb	0	; () banked
  8749  004714  6F8F               	movwf	(printf@f+1)& (0+255),b
  8750  004716  EC67  F00E         	call	_printf	;wreg free
  8751  00471A  0E00               	movlw	0
  8752  00471C  0100               	movlb	0	; () banked
  8753  00471E  6FB0               	movwf	EEPROM_write@i_1413& (0+255),b
  8754  004720                     l7496:
  8755                           
  8756                           ; BSR set to: 0
  8757  004720  0E63               	movlw	99
  8758  004722  0100               	movlb	0	; () banked
  8759  004724  65B0               	cpfsgt	EEPROM_write@i_1413& (0+255),b
  8760  004726  D001               	goto	l7500
  8761  004728  0012               	return	
  8762  00472A                     l7500:
  8763                           
  8764                           ; BSR set to: 0
  8765  00472A  0E68               	movlw	104
  8766  00472C  0100               	movlb	0	; () banked
  8767  00472E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8768  004730  0EE4               	movlw	228
  8769  004732                     u10707:
  8770  004732  2EE8               	decfsz	wreg,f,c
  8771  004734  D7FE               	bra	u10707
  8772  004736  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8773  004738  D7FC               	bra	u10707
  8774  00473A  F000               	nop	
  8775  00473C  0100               	movlb	0	; () banked
  8776  00473E  2BB0               	incf	EEPROM_write@i_1413& (0+255),f,b
  8777  004740  D7EF               	goto	l7496
  8778  004742                     __end_of_EEPROM_write:
  8779                           	opt stack 0
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           prodh	equ	0xFF4
  8785                           prodl	equ	0xFF3
  8786                           intcon	equ	0xFF2
  8787                           intcon2	equ	0xFF1
  8788                           intcon3	equ	0xFF0
  8789                           postinc0	equ	0xFEE
  8790                           wreg	equ	0xFE8
  8791                           postdec1	equ	0xFE5
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           postdec2	equ	0xFDD
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function _EEPROM_read *****************
  8801 ;; Defined at:
  8802 ;;		line 72 in file "EEPROM.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  address         2    0[BANK0 ] unsigned short 
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;		None
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  1    wreg      unsigned char 
  8809 ;; Registers used:
  8810 ;;		wreg, status,2
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8816 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;Total ram usage:        2 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    7
  8823 ;; This function calls:
  8824 ;;		Nothing
  8825 ;; This function is called by:
  8826 ;;		_Loading
  8827 ;;		_EEPROM_write
  8828 ;;		_logRun
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           	psect	text26
  8833  005DFA                     __ptext26:
  8834                           	opt stack 0
  8835  005DFA                     _EEPROM_read:
  8836                           	opt stack 20
  8837                           
  8838                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8839                           
  8840                           ;incstack = 0
  8841  005DFA  0100               	movlb	0	; () banked
  8842  005DFC  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8843  005DFE  6EAA               	movwf	4010,c	;volatile
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8847  005E00  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8851  005E04  9EA6               	bcf	4006,7,c	;volatile
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8855  005E06  9CA6               	bcf	4006,6,c	;volatile
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8859  005E08  80A6               	bsf	4006,0,c	;volatile
  8860  005E0A                     l1163:
  8861  005E0A  B0A6               	btfsc	4006,0,c	;volatile
  8862  005E0C  D7FE               	goto	l1163
  8863                           
  8864                           ;EEPROM.c: 85: return EEDATA;
  8865  005E0E  50A8               	movf	4008,w,c	;volatile
  8866  005E10  0012               	return	
  8867  005E12                     __end_of_EEPROM_read:
  8868                           	opt stack 0
  8869                           tblptru	equ	0xFF8
  8870                           tblptrh	equ	0xFF7
  8871                           tblptrl	equ	0xFF6
  8872                           tablat	equ	0xFF5
  8873                           prodh	equ	0xFF4
  8874                           prodl	equ	0xFF3
  8875                           intcon	equ	0xFF2
  8876                           intcon2	equ	0xFF1
  8877                           intcon3	equ	0xFF0
  8878                           postinc0	equ	0xFEE
  8879                           wreg	equ	0xFE8
  8880                           postdec1	equ	0xFE5
  8881                           fsr1l	equ	0xFE1
  8882                           indf2	equ	0xFDF
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function _UI *****************
  8890 ;; Defined at:
  8891 ;;		line 76 in file "UI.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  i               1   73[BANK0 ] unsigned char 
  8896 ;;  i               1   85[BANK0 ] unsigned char 
  8897 ;;  i               1   84[BANK0 ] unsigned char 
  8898 ;;  i               1   83[BANK0 ] unsigned char 
  8899 ;;  i               1   82[BANK0 ] unsigned char 
  8900 ;;  i               1   81[BANK0 ] unsigned char 
  8901 ;;  i               1   80[BANK0 ] unsigned char 
  8902 ;;  i               1   79[BANK0 ] unsigned char 
  8903 ;;  i               1   78[BANK0 ] unsigned char 
  8904 ;;  i               1   77[BANK0 ] unsigned char 
  8905 ;;  i               1   76[BANK0 ] unsigned char 
  8906 ;;  i               1   75[BANK0 ] unsigned char 
  8907 ;;  i               1   74[BANK0 ] unsigned char 
  8908 ;;  month           4   86[BANK0 ] unsigned char [4]
  8909 ;;  i               1   72[BANK0 ] unsigned char 
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  1    wreg      void 
  8912 ;; Registers used:
  8913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;Total ram usage:       22 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:   11
  8926 ;; This function calls:
  8927 ;;		___awdiv
  8928 ;;		___awmod
  8929 ;;		_change_state_to_menu_12
  8930 ;;		_change_state_to_menu_22
  8931 ;;		_lcdInst
  8932 ;;		_printRTC
  8933 ;;		_printf
  8934 ;;		_strcpy
  8935 ;; This function is called by:
  8936 ;;		_main
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           	psect	text27
  8941  000012                     __ptext27:
  8942                           	opt stack 0
  8943  000012                     _UI:
  8944                           	opt stack 19
  8945                           
  8946                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8947                           
  8948                           ;incstack = 0
  8949  000012  0E02               	movlw	2
  8950  000014  0100               	movlb	0	; () banked
  8951  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8952  000018  A4D8               	btfss	status,2,c
  8953  00001A  D086               	goto	l9458
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8957  00001C  0E01               	movlw	1
  8958  00001E  EC3A  F02F         	call	_lcdInst
  8959  000022  0E68               	movlw	104
  8960  000024  0100               	movlb	0	; () banked
  8961  000026  6FC4               	movwf	??_UI& (0+255),b
  8962  000028  0EE4               	movlw	228
  8963  00002A                     u10717:
  8964  00002A  2EE8               	decfsz	wreg,f,c
  8965  00002C  D7FE               	bra	u10717
  8966  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8967  000030  D7FC               	bra	u10717
  8968  000032  F000               	nop	
  8969                           
  8970                           ;UI.c: 79: lcdInst(0b10000000);;
  8971  000034  0E80               	movlw	128
  8972  000036  EC3A  F02F         	call	_lcdInst
  8973                           
  8974                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8975  00003A  0E63               	movlw	low STR_1
  8976  00003C  0100               	movlb	0	; () banked
  8977  00003E  6F8E               	movwf	printf@f& (0+255),b
  8978  000040  0EFB               	movlw	high STR_1
  8979  000042  0100               	movlb	0	; () banked
  8980  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8981  000046  0E01               	movlw	1
  8982  000048  0100               	movlb	0	; () banked
  8983  00004A  25FD               	addwf	_sel& (0+255),w,b
  8984  00004C  0100               	movlb	0	; () banked
  8985  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8986  000050  0100               	movlb	0	; () banked
  8987  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8988  000054  0E00               	movlw	0
  8989  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8990  000058  EC67  F00E         	call	_printf	;wreg free
  8991                           
  8992                           ;UI.c: 81: lcdInst(0b11000000);;
  8993  00005C  0EC0               	movlw	192
  8994  00005E  EC3A  F02F         	call	_lcdInst
  8995                           
  8996                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8997  000062  0E0E               	movlw	14
  8998  000064  0100               	movlb	0	; () banked
  8999  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9000  000068  0E10               	movlw	16
  9001  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  9002  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  9003  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9004  000074  ECC1  F026         	call	___awmod	;wreg free
  9005  000078  C080  F0C6         	movff	?___awmod,_UI$2432
  9006  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2432+1
  9007                           
  9008                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9009  000080  0E49               	movlw	low STR_2
  9010  000082  0100               	movlb	0	; () banked
  9011  000084  6F8E               	movwf	printf@f& (0+255),b
  9012  000086  0EFF               	movlw	high STR_2
  9013  000088  0100               	movlb	0	; () banked
  9014  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9015  00008C  0E0E               	movlw	14
  9016  00008E  0100               	movlb	0	; () banked
  9017  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9018  000092  0E10               	movlw	16
  9019  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  9020  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  9021  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9022  00009E  ECC1  F026         	call	___awmod	;wreg free
  9023  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  9024  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9025  0000AA  0E00               	movlw	0
  9026  0000AC  0100               	movlb	0	; () banked
  9027  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9028  0000B0  0E3C               	movlw	60
  9029  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  9030  0000B4  ECAF  F025         	call	___awdiv	;wreg free
  9031  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  9032  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  9033  0000C0  C0C6  F080         	movff	_UI$2432,___awmod@dividend
  9034  0000C4  C0C7  F081         	movff	_UI$2432+1,___awmod@dividend+1
  9035  0000C8  0E00               	movlw	0
  9036  0000CA  0100               	movlb	0	; () banked
  9037  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9038  0000CE  0E3C               	movlw	60
  9039  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  9040  0000D2  ECC1  F026         	call	___awmod	;wreg free
  9041  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  9042  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  9043  0000DE  EC67  F00E         	call	_printf	;wreg free
  9044  0000E2                     l190:
  9045  0000E2  B281               	btfsc	3969,1,c	;volatile
  9046  0000E4  D7FE               	goto	l190
  9047  0000E6                     l193:
  9048  0000E6  A281               	btfss	3969,1,c	;volatile
  9049  0000E8  D7FE               	goto	l193
  9050                           
  9051                           ;UI.c: 86: }
  9052                           ;UI.c: 87: if(cur_state == 12){
  9053  0000EA  0E0C               	movlw	12
  9054  0000EC  0100               	movlb	0	; () banked
  9055  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  9056  0000F0  0100               	movlb	0	; () banked
  9057  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9058  0000F4  A4D8               	btfss	status,2,c
  9059  0000F6  D003               	goto	l9452
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;UI.c: 88: change_state_to_menu_12();
  9063  0000F8  EC6D  F02C         	call	_change_state_to_menu_12	;wreg free
  9064                           
  9065                           ;UI.c: 89: }
  9066  0000FC  D002               	goto	l198
  9067  0000FE                     l9452:
  9068                           
  9069                           ;UI.c: 90: else{
  9070                           ;UI.c: 91: change_state_to_menu_22();
  9071  0000FE  EC51  F02C         	call	_change_state_to_menu_22	;wreg free
  9072  000102                     l198:
  9073  000102  B281               	btfsc	3969,1,c	;volatile
  9074  000104  D7FE               	goto	l198
  9075                           
  9076                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  9077  000106  0E05               	movlw	5
  9078  000108  0100               	movlb	0	; () banked
  9079  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  9080  00010C  0E0F               	movlw	15
  9081  00010E  0100               	movlb	0	; () banked
  9082  000110  6FC4               	movwf	??_UI& (0+255),b
  9083  000112  0EF1               	movlw	241
  9084  000114                     u10727:
  9085  000114  2EE8               	decfsz	wreg,f,c
  9086  000116  D7FE               	bra	u10727
  9087  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  9088  00011A  D7FC               	bra	u10727
  9089  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  9090  00011E  D7FA               	bra	u10727
  9091                           
  9092                           ;UI.c: 95: machine_state = UI_state;
  9093  000120  0E00               	movlw	0
  9094  000122  0100               	movlb	0	; () banked
  9095  000124  6FFC               	movwf	_machine_state& (0+255),b
  9096                           
  9097                           ;UI.c: 96: }
  9098  000126  D3D2               	goto	l9778
  9099  000128                     l9458:
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;UI.c: 97: else if(cur_state == 0){
  9103  000128  0100               	movlb	0	; () banked
  9104  00012A  51E6               	movf	_cur_state& (0+255),w,b
  9105  00012C  0100               	movlb	0	; () banked
  9106  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9107  000130  A4D8               	btfss	status,2,c
  9108  000132  D3CC               	goto	l9778
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  9112  000134  0E00               	movlw	0
  9113  000136  0100               	movlb	0	; () banked
  9114  000138  6FC8               	movwf	UI@i& (0+255),b
  9115  00013A                     l9462:
  9116                           
  9117                           ; BSR set to: 0
  9118  00013A  0E63               	movlw	99
  9119  00013C  0100               	movlb	0	; () banked
  9120  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  9121  000140  D001               	goto	l9466
  9122  000142  D00C               	goto	l9470
  9123  000144                     l9466:
  9124                           
  9125                           ; BSR set to: 0
  9126  000144  0E68               	movlw	104
  9127  000146  0100               	movlb	0	; () banked
  9128  000148  6FC4               	movwf	??_UI& (0+255),b
  9129  00014A  0EE4               	movlw	228
  9130  00014C                     u10737:
  9131  00014C  2EE8               	decfsz	wreg,f,c
  9132  00014E  D7FE               	bra	u10737
  9133  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  9134  000152  D7FC               	bra	u10737
  9135  000154  F000               	nop	
  9136  000156  0100               	movlb	0	; () banked
  9137  000158  2BC8               	incf	UI@i& (0+255),f,b
  9138  00015A  D7EF               	goto	l9462
  9139  00015C                     l9470:
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;UI.c: 99: if(cur_state == 0){
  9143  00015C  0100               	movlb	0	; () banked
  9144  00015E  51E6               	movf	_cur_state& (0+255),w,b
  9145  000160  0100               	movlb	0	; () banked
  9146  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9147  000164  A4D8               	btfss	status,2,c
  9148  000166  D3B2               	goto	l9778
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;UI.c: 100: printRTC();
  9152  000168  ECDE  F018         	call	_printRTC	;wreg free
  9153                           
  9154                           ;UI.c: 101: }
  9155                           ;UI.c: 102: }
  9156                           ;UI.c: 103: while(logstate){
  9157  00016C  D3AF               	goto	l9778
  9158  00016E                     l9474:
  9159                           
  9160                           ;UI.c: 105: if(!log_completion){
  9161  00016E  0100               	movlb	0	; () banked
  9162  000170  51F0               	movf	_log_completion& (0+255),w,b
  9163  000172  0100               	movlb	0	; () banked
  9164  000174  11F1               	iorwf	(_log_completion+1)& (0+255),w,b
  9165  000176  A4D8               	btfss	status,2,c
  9166  000178  D041               	goto	l9504
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9170  00017A  0E01               	movlw	1
  9171  00017C  EC3A  F02F         	call	_lcdInst
  9172  000180  0E68               	movlw	104
  9173  000182  0100               	movlb	0	; () banked
  9174  000184  6FC4               	movwf	??_UI& (0+255),b
  9175  000186  0EE4               	movlw	228
  9176  000188                     u10747:
  9177  000188  2EE8               	decfsz	wreg,f,c
  9178  00018A  D7FE               	bra	u10747
  9179  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  9180  00018E  D7FC               	bra	u10747
  9181  000190  F000               	nop	
  9182                           
  9183                           ;UI.c: 107: lcdInst(0b10000000);;
  9184  000192  0E80               	movlw	128
  9185  000194  EC3A  F02F         	call	_lcdInst
  9186                           
  9187                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  9188  000198  0E51               	movlw	low STR_3
  9189  00019A  0100               	movlb	0	; () banked
  9190  00019C  6F8E               	movwf	printf@f& (0+255),b
  9191  00019E  0EFB               	movlw	high STR_3
  9192  0001A0  0100               	movlb	0	; () banked
  9193  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9194  0001A4  C0EE  F090         	movff	_log,?_printf+2
  9195  0001A8  C0EF  F091         	movff	_log+1,?_printf+3
  9196  0001AC  EC67  F00E         	call	_printf	;wreg free
  9197                           
  9198                           ;UI.c: 109: lcdInst(0b11000000);;
  9199  0001B0  0EC0               	movlw	192
  9200  0001B2  EC3A  F02F         	call	_lcdInst
  9201                           
  9202                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  9203  0001B6  0E5D               	movlw	low STR_4
  9204  0001B8  0100               	movlb	0	; () banked
  9205  0001BA  6F8E               	movwf	printf@f& (0+255),b
  9206  0001BC  0EFE               	movlw	high STR_4
  9207  0001BE  0100               	movlb	0	; () banked
  9208  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9209  0001C2  EC67  F00E         	call	_printf	;wreg free
  9210  0001C6                     l9488:
  9211  0001C6  0E00               	movlw	0
  9212  0001C8  0100               	movlb	0	; () banked
  9213  0001CA  6FC9               	movwf	UI@i_413& (0+255),b
  9214  0001CC                     l9490:
  9215                           
  9216                           ; BSR set to: 0
  9217  0001CC  0E63               	movlw	99
  9218  0001CE  0100               	movlb	0	; () banked
  9219  0001D0  65C9               	cpfsgt	UI@i_413& (0+255),b
  9220  0001D2  D001               	goto	l9494
  9221  0001D4  D00C               	goto	l9498
  9222  0001D6                     l9494:
  9223                           
  9224                           ; BSR set to: 0
  9225  0001D6  0E68               	movlw	104
  9226  0001D8  0100               	movlb	0	; () banked
  9227  0001DA  6FC4               	movwf	??_UI& (0+255),b
  9228  0001DC  0EE4               	movlw	228
  9229  0001DE                     u10757:
  9230  0001DE  2EE8               	decfsz	wreg,f,c
  9231  0001E0  D7FE               	bra	u10757
  9232  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9233  0001E4  D7FC               	bra	u10757
  9234  0001E6  F000               	nop	
  9235  0001E8  0100               	movlb	0	; () banked
  9236  0001EA  2BC9               	incf	UI@i_413& (0+255),f,b
  9237  0001EC  D7EF               	goto	l9490
  9238  0001EE                     l9498:
  9239                           
  9240                           ; BSR set to: 0
  9241  0001EE  0100               	movlb	0	; () banked
  9242  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9243  0001F2  0100               	movlb	0	; () banked
  9244  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9245  0001F6  B4D8               	btfsc	status,2,c
  9246  0001F8  0012               	return	
  9247  0001FA  D7E5               	goto	l9488
  9248  0001FC                     l9504:
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;UI.c: 114: else{
  9252                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9253  0001FC  0E01               	movlw	1
  9254  0001FE  EC3A  F02F         	call	_lcdInst
  9255  000202  0E68               	movlw	104
  9256  000204  0100               	movlb	0	; () banked
  9257  000206  6FC4               	movwf	??_UI& (0+255),b
  9258  000208  0EE4               	movlw	228
  9259  00020A                     u10767:
  9260  00020A  2EE8               	decfsz	wreg,f,c
  9261  00020C  D7FE               	bra	u10767
  9262  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9263  000210  D7FC               	bra	u10767
  9264  000212  F000               	nop	
  9265                           
  9266                           ;UI.c: 116: lcdInst(0b10000000);;
  9267  000214  0E80               	movlw	128
  9268  000216  EC3A  F02F         	call	_lcdInst
  9269                           
  9270                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9271  00021A  0E51               	movlw	low STR_3
  9272  00021C  0100               	movlb	0	; () banked
  9273  00021E  6F8E               	movwf	printf@f& (0+255),b
  9274  000220  0EFB               	movlw	high STR_3
  9275  000222  0100               	movlb	0	; () banked
  9276  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9277  000226  C0EE  F090         	movff	_log,?_printf+2
  9278  00022A  C0EF  F091         	movff	_log+1,?_printf+3
  9279  00022E  EC67  F00E         	call	_printf	;wreg free
  9280                           
  9281                           ;UI.c: 118: lcdInst(0b11000000);;
  9282  000232  0EC0               	movlw	192
  9283  000234  EC3A  F02F         	call	_lcdInst
  9284                           
  9285                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9286  000238  0ED9               	movlw	low STR_6
  9287  00023A  0100               	movlb	0	; () banked
  9288  00023C  6F8E               	movwf	printf@f& (0+255),b
  9289  00023E  0EFD               	movlw	high STR_6
  9290  000240  0100               	movlb	0	; () banked
  9291  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9292  000244  EC67  F00E         	call	_printf	;wreg free
  9293                           
  9294                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9295  000248  0E00               	movlw	0
  9296  00024A  0100               	movlb	0	; () banked
  9297  00024C  6FCA               	movwf	UI@i_416& (0+255),b
  9298  00024E                     l9518:
  9299                           
  9300                           ; BSR set to: 0
  9301  00024E  0E63               	movlw	99
  9302  000250  0100               	movlb	0	; () banked
  9303  000252  65CA               	cpfsgt	UI@i_416& (0+255),b
  9304  000254  D001               	goto	l9522
  9305  000256  D00C               	goto	l9526
  9306  000258                     l9522:
  9307                           
  9308                           ; BSR set to: 0
  9309  000258  0E68               	movlw	104
  9310  00025A  0100               	movlb	0	; () banked
  9311  00025C  6FC4               	movwf	??_UI& (0+255),b
  9312  00025E  0EE4               	movlw	228
  9313  000260                     u10777:
  9314  000260  2EE8               	decfsz	wreg,f,c
  9315  000262  D7FE               	bra	u10777
  9316  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9317  000266  D7FC               	bra	u10777
  9318  000268  F000               	nop	
  9319  00026A  0100               	movlb	0	; () banked
  9320  00026C  2BCA               	incf	UI@i_416& (0+255),f,b
  9321  00026E  D7EF               	goto	l9518
  9322  000270                     l9526:
  9323                           
  9324                           ; BSR set to: 0
  9325  000270  0100               	movlb	0	; () banked
  9326  000272  51F8               	movf	_logstate& (0+255),w,b
  9327  000274  0100               	movlb	0	; () banked
  9328  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9329  000278  B4D8               	btfsc	status,2,c
  9330  00027A  0012               	return	
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9334                           
  9335                           ; BSR set to: 0
  9336                           
  9337                           ; BSR set to: 0
  9338  00027C  0E00               	movlw	0
  9339  00027E  0100               	movlb	0	; () banked
  9340  000280  6FCB               	movwf	UI@i_417& (0+255),b
  9341  000282                     l9532:
  9342                           
  9343                           ; BSR set to: 0
  9344  000282  0E63               	movlw	99
  9345  000284  0100               	movlb	0	; () banked
  9346  000286  65CB               	cpfsgt	UI@i_417& (0+255),b
  9347  000288  D001               	goto	l9536
  9348  00028A  D00C               	goto	l9540
  9349  00028C                     l9536:
  9350                           
  9351                           ; BSR set to: 0
  9352  00028C  0E68               	movlw	104
  9353  00028E  0100               	movlb	0	; () banked
  9354  000290  6FC4               	movwf	??_UI& (0+255),b
  9355  000292  0EE4               	movlw	228
  9356  000294                     u10787:
  9357  000294  2EE8               	decfsz	wreg,f,c
  9358  000296  D7FE               	bra	u10787
  9359  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9360  00029A  D7FC               	bra	u10787
  9361  00029C  F000               	nop	
  9362  00029E  0100               	movlb	0	; () banked
  9363  0002A0  2BCB               	incf	UI@i_417& (0+255),f,b
  9364  0002A2  D7EF               	goto	l9532
  9365  0002A4                     l9540:
  9366                           
  9367                           ; BSR set to: 0
  9368  0002A4  0100               	movlb	0	; () banked
  9369  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9370  0002A8  0100               	movlb	0	; () banked
  9371  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9372  0002AC  B4D8               	btfsc	status,2,c
  9373  0002AE  0012               	return	
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9377                           
  9378                           ; BSR set to: 0
  9379                           
  9380                           ; BSR set to: 0
  9381  0002B0  0E01               	movlw	1
  9382  0002B2  EC3A  F02F         	call	_lcdInst
  9383  0002B6  0E68               	movlw	104
  9384  0002B8  0100               	movlb	0	; () banked
  9385  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9386  0002BC  0EE4               	movlw	228
  9387  0002BE                     u10797:
  9388  0002BE  2EE8               	decfsz	wreg,f,c
  9389  0002C0  D7FE               	bra	u10797
  9390  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9391  0002C4  D7FC               	bra	u10797
  9392  0002C6  F000               	nop	
  9393                           
  9394                           ;UI.c: 125: lcdInst(0b10000000);;
  9395  0002C8  0E80               	movlw	128
  9396  0002CA  EC3A  F02F         	call	_lcdInst
  9397                           
  9398                           ;UI.c: 126: printf("START:");
  9399  0002CE  0EC3               	movlw	low STR_7
  9400  0002D0  0100               	movlb	0	; () banked
  9401  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9402  0002D4  0EFF               	movlw	high STR_7
  9403  0002D6  0100               	movlb	0	; () banked
  9404  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9405  0002DA  EC67  F00E         	call	_printf	;wreg free
  9406                           
  9407                           ;UI.c: 127: lcdInst(0b11000000);;
  9408  0002DE  0EC0               	movlw	192
  9409  0002E0  EC3A  F02F         	call	_lcdInst
  9410                           
  9411                           ;UI.c: 128: char month[] = "MMM";
  9412  0002E4  C14D  F0D6         	movff	UI@F3250,UI@month
  9413  0002E8  C14E  F0D7         	movff	UI@F3250+1,UI@month+1
  9414  0002EC  C14F  F0D8         	movff	UI@F3250+2,UI@month+2
  9415  0002F0  C150  F0D9         	movff	UI@F3250+3,UI@month+3
  9416                           
  9417                           ;UI.c: 129: switch(log_startTime[5]){
  9418  0002F4  D0C3               	goto	l9584
  9419  0002F6                     l9556:
  9420                           
  9421                           ;UI.c: 131: strcpy(month, "JAN");
  9422  0002F6  0ED6               	movlw	low UI@month
  9423  0002F8  0100               	movlb	0	; () banked
  9424  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9425  0002FC  0E00               	movlw	high UI@month
  9426  0002FE  0100               	movlb	0	; () banked
  9427  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9428  000302  0EDA               	movlw	low STR_8
  9429  000304  0100               	movlb	0	; () banked
  9430  000306  6F82               	movwf	strcpy@from& (0+255),b
  9431  000308  0EFF               	movlw	high STR_8
  9432  00030A  0100               	movlb	0	; () banked
  9433  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9434  00030E  EC89  F02C         	call	_strcpy	;wreg free
  9435                           
  9436                           ;UI.c: 132: break;
  9437  000312  D0E6               	goto	l9586
  9438  000314                     l9558:
  9439                           
  9440                           ;UI.c: 134: strcpy(month, "FEB");
  9441  000314  0ED6               	movlw	low UI@month
  9442  000316  0100               	movlb	0	; () banked
  9443  000318  6F80               	movwf	strcpy@to& (0+255),b
  9444  00031A  0E00               	movlw	high UI@month
  9445  00031C  0100               	movlb	0	; () banked
  9446  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9447  000320  0ECA               	movlw	low STR_9
  9448  000322  0100               	movlb	0	; () banked
  9449  000324  6F82               	movwf	strcpy@from& (0+255),b
  9450  000326  0EFF               	movlw	high STR_9
  9451  000328  0100               	movlb	0	; () banked
  9452  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9453  00032C  EC89  F02C         	call	_strcpy	;wreg free
  9454                           
  9455                           ;UI.c: 135: break;
  9456  000330  D0D7               	goto	l9586
  9457  000332                     l9560:
  9458                           
  9459                           ;UI.c: 137: strcpy(month, "MAR");
  9460  000332  0ED6               	movlw	low UI@month
  9461  000334  0100               	movlb	0	; () banked
  9462  000336  6F80               	movwf	strcpy@to& (0+255),b
  9463  000338  0E00               	movlw	high UI@month
  9464  00033A  0100               	movlb	0	; () banked
  9465  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9466  00033E  0EE6               	movlw	low STR_10
  9467  000340  0100               	movlb	0	; () banked
  9468  000342  6F82               	movwf	strcpy@from& (0+255),b
  9469  000344  0EFF               	movlw	high STR_10
  9470  000346  0100               	movlb	0	; () banked
  9471  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9472  00034A  EC89  F02C         	call	_strcpy	;wreg free
  9473                           
  9474                           ;UI.c: 138: break;
  9475  00034E  D0C8               	goto	l9586
  9476  000350                     l9562:
  9477                           
  9478                           ;UI.c: 140: strcpy(month, "APR");
  9479  000350  0ED6               	movlw	low UI@month
  9480  000352  0100               	movlb	0	; () banked
  9481  000354  6F80               	movwf	strcpy@to& (0+255),b
  9482  000356  0E00               	movlw	high UI@month
  9483  000358  0100               	movlb	0	; () banked
  9484  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9485  00035C  0EEA               	movlw	low STR_11
  9486  00035E  0100               	movlb	0	; () banked
  9487  000360  6F82               	movwf	strcpy@from& (0+255),b
  9488  000362  0EFF               	movlw	high STR_11
  9489  000364  0100               	movlb	0	; () banked
  9490  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9491  000368  EC89  F02C         	call	_strcpy	;wreg free
  9492                           
  9493                           ;UI.c: 141: break;
  9494  00036C  D0B9               	goto	l9586
  9495  00036E                     l9564:
  9496                           
  9497                           ;UI.c: 143: strcpy(month, "MAY");
  9498  00036E  0ED6               	movlw	low UI@month
  9499  000370  0100               	movlb	0	; () banked
  9500  000372  6F80               	movwf	strcpy@to& (0+255),b
  9501  000374  0E00               	movlw	high UI@month
  9502  000376  0100               	movlb	0	; () banked
  9503  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9504  00037A  0EFA               	movlw	low STR_12
  9505  00037C  0100               	movlb	0	; () banked
  9506  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9507  000380  0EFF               	movlw	high STR_12
  9508  000382  0100               	movlb	0	; () banked
  9509  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9510  000386  EC89  F02C         	call	_strcpy	;wreg free
  9511                           
  9512                           ;UI.c: 144: break;
  9513  00038A  D0AA               	goto	l9586
  9514  00038C                     l9566:
  9515                           
  9516                           ;UI.c: 146: strcpy(month, "JUN");
  9517  00038C  0ED6               	movlw	low UI@month
  9518  00038E  0100               	movlb	0	; () banked
  9519  000390  6F80               	movwf	strcpy@to& (0+255),b
  9520  000392  0E00               	movlw	high UI@month
  9521  000394  0100               	movlb	0	; () banked
  9522  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9523  000398  0EDE               	movlw	low STR_13
  9524  00039A  0100               	movlb	0	; () banked
  9525  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9526  00039E  0EFF               	movlw	high STR_13
  9527  0003A0  0100               	movlb	0	; () banked
  9528  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9529  0003A4  EC89  F02C         	call	_strcpy	;wreg free
  9530                           
  9531                           ;UI.c: 147: break;
  9532  0003A8  D09B               	goto	l9586
  9533  0003AA                     l9568:
  9534                           
  9535                           ;UI.c: 149: strcpy(month, "JUL");
  9536  0003AA  0ED6               	movlw	low UI@month
  9537  0003AC  0100               	movlb	0	; () banked
  9538  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9539  0003B0  0E00               	movlw	high UI@month
  9540  0003B2  0100               	movlb	0	; () banked
  9541  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9542  0003B6  0ED6               	movlw	low STR_14
  9543  0003B8  0100               	movlb	0	; () banked
  9544  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9545  0003BC  0EFF               	movlw	high STR_14
  9546  0003BE  0100               	movlb	0	; () banked
  9547  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9548  0003C2  EC89  F02C         	call	_strcpy	;wreg free
  9549                           
  9550                           ;UI.c: 150: break;
  9551  0003C6  D08C               	goto	l9586
  9552  0003C8                     l9570:
  9553                           
  9554                           ;UI.c: 152: strcpy(month, "AUG");
  9555  0003C8  0ED6               	movlw	low UI@month
  9556  0003CA  0100               	movlb	0	; () banked
  9557  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9558  0003CE  0E00               	movlw	high UI@month
  9559  0003D0  0100               	movlb	0	; () banked
  9560  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9561  0003D4  0ED2               	movlw	low STR_15
  9562  0003D6  0100               	movlb	0	; () banked
  9563  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9564  0003DA  0EFF               	movlw	high STR_15
  9565  0003DC  0100               	movlb	0	; () banked
  9566  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9567  0003E0  EC89  F02C         	call	_strcpy	;wreg free
  9568                           
  9569                           ;UI.c: 153: break;
  9570  0003E4  D07D               	goto	l9586
  9571  0003E6                     l9572:
  9572                           
  9573                           ;UI.c: 155: strcpy(month, "SEP");
  9574  0003E6  0ED6               	movlw	low UI@month
  9575  0003E8  0100               	movlb	0	; () banked
  9576  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9577  0003EC  0E00               	movlw	high UI@month
  9578  0003EE  0100               	movlb	0	; () banked
  9579  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9580  0003F2  0EE2               	movlw	low STR_16
  9581  0003F4  0100               	movlb	0	; () banked
  9582  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9583  0003F8  0EFF               	movlw	high STR_16
  9584  0003FA  0100               	movlb	0	; () banked
  9585  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9586  0003FE  EC89  F02C         	call	_strcpy	;wreg free
  9587                           
  9588                           ;UI.c: 156: break;
  9589  000402  D06E               	goto	l9586
  9590  000404                     l9574:
  9591                           
  9592                           ;UI.c: 158: strcpy(month, "OCT");
  9593  000404  0ED6               	movlw	low UI@month
  9594  000406  0100               	movlb	0	; () banked
  9595  000408  6F80               	movwf	strcpy@to& (0+255),b
  9596  00040A  0E00               	movlw	high UI@month
  9597  00040C  0100               	movlb	0	; () banked
  9598  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9599  000410  0EF2               	movlw	low STR_17
  9600  000412  0100               	movlb	0	; () banked
  9601  000414  6F82               	movwf	strcpy@from& (0+255),b
  9602  000416  0EFF               	movlw	high STR_17
  9603  000418  0100               	movlb	0	; () banked
  9604  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9605  00041C  EC89  F02C         	call	_strcpy	;wreg free
  9606                           
  9607                           ;UI.c: 159: break;
  9608  000420  D05F               	goto	l9586
  9609  000422                     l9576:
  9610                           
  9611                           ;UI.c: 161: strcpy(month, "NOV");
  9612  000422  0ED6               	movlw	low UI@month
  9613  000424  0100               	movlb	0	; () banked
  9614  000426  6F80               	movwf	strcpy@to& (0+255),b
  9615  000428  0E00               	movlw	high UI@month
  9616  00042A  0100               	movlb	0	; () banked
  9617  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9618  00042E  0EF6               	movlw	low STR_18
  9619  000430  0100               	movlb	0	; () banked
  9620  000432  6F82               	movwf	strcpy@from& (0+255),b
  9621  000434  0EFF               	movlw	high STR_18
  9622  000436  0100               	movlb	0	; () banked
  9623  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9624  00043A  EC89  F02C         	call	_strcpy	;wreg free
  9625                           
  9626                           ;UI.c: 162: break;
  9627  00043E  D050               	goto	l9586
  9628  000440                     l9578:
  9629                           
  9630                           ;UI.c: 164: strcpy(month, "DEC");
  9631  000440  0ED6               	movlw	low UI@month
  9632  000442  0100               	movlb	0	; () banked
  9633  000444  6F80               	movwf	strcpy@to& (0+255),b
  9634  000446  0E00               	movlw	high UI@month
  9635  000448  0100               	movlb	0	; () banked
  9636  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9637  00044C  0ECE               	movlw	low STR_19
  9638  00044E  0100               	movlb	0	; () banked
  9639  000450  6F82               	movwf	strcpy@from& (0+255),b
  9640  000452  0EFF               	movlw	high STR_19
  9641  000454  0100               	movlb	0	; () banked
  9642  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9643  000458  EC89  F02C         	call	_strcpy	;wreg free
  9644                           
  9645                           ;UI.c: 165: break;
  9646  00045C  D041               	goto	l9586
  9647  00045E                     l9580:
  9648                           
  9649                           ;UI.c: 167: strcpy(month, "ERR");
  9650  00045E  0ED6               	movlw	low UI@month
  9651  000460  0100               	movlb	0	; () banked
  9652  000462  6F80               	movwf	strcpy@to& (0+255),b
  9653  000464  0E00               	movlw	high UI@month
  9654  000466  0100               	movlb	0	; () banked
  9655  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9656  00046A  0EEE               	movlw	low STR_20
  9657  00046C  0100               	movlb	0	; () banked
  9658  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9659  000470  0EFF               	movlw	high STR_20
  9660  000472  0100               	movlb	0	; () banked
  9661  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9662  000476  EC89  F02C         	call	_strcpy	;wreg free
  9663                           
  9664                           ;UI.c: 169: }
  9665                           
  9666                           ;UI.c: 168: break;
  9667  00047A  D032               	goto	l9586
  9668  00047C                     l9584:
  9669  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9670  000480  CFDE F0C4          	movff	postinc2,??_UI
  9671  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9672                           
  9673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9674                           ; Switch size 1, requested type "space"
  9675                           ; Number of cases is 1, Range of values is 0 to 0
  9676                           ; switch strategies available:
  9677                           ; Name         Instructions Cycles
  9678                           ; simple_byte            4     3 (average)
  9679                           ;	Chosen strategy is simple_byte
  9680  000488  0100               	movlb	0	; () banked
  9681  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9682  00048C  0A00               	xorlw	0	; case 0
  9683  00048E  A4D8               	btfss	status,2,c
  9684  000490  D7E6               	goto	l9580
  9685                           
  9686                           ; BSR set to: 0
  9687                           ; Switch size 1, requested type "space"
  9688                           ; Number of cases is 12, Range of values is 1 to 12
  9689                           ; switch strategies available:
  9690                           ; Name         Instructions Cycles
  9691                           ; simple_byte           37    19 (average)
  9692                           ;	Chosen strategy is simple_byte
  9693  000492  0100               	movlb	0	; () banked
  9694  000494  51C4               	movf	??_UI& (0+255),w,b
  9695  000496  0A01               	xorlw	1	; case 1
  9696  000498  B4D8               	btfsc	status,2,c
  9697  00049A  D72D               	goto	l9556
  9698  00049C  0A03               	xorlw	3	; case 2
  9699  00049E  B4D8               	btfsc	status,2,c
  9700  0004A0  D739               	goto	l9558
  9701  0004A2  0A01               	xorlw	1	; case 3
  9702  0004A4  B4D8               	btfsc	status,2,c
  9703  0004A6  D745               	goto	l9560
  9704  0004A8  0A07               	xorlw	7	; case 4
  9705  0004AA  B4D8               	btfsc	status,2,c
  9706  0004AC  D751               	goto	l9562
  9707  0004AE  0A01               	xorlw	1	; case 5
  9708  0004B0  B4D8               	btfsc	status,2,c
  9709  0004B2  D75D               	goto	l9564
  9710  0004B4  0A03               	xorlw	3	; case 6
  9711  0004B6  B4D8               	btfsc	status,2,c
  9712  0004B8  D769               	goto	l9566
  9713  0004BA  0A01               	xorlw	1	; case 7
  9714  0004BC  B4D8               	btfsc	status,2,c
  9715  0004BE  D775               	goto	l9568
  9716  0004C0  0A0F               	xorlw	15	; case 8
  9717  0004C2  B4D8               	btfsc	status,2,c
  9718  0004C4  D781               	goto	l9570
  9719  0004C6  0A01               	xorlw	1	; case 9
  9720  0004C8  B4D8               	btfsc	status,2,c
  9721  0004CA  D78D               	goto	l9572
  9722  0004CC  0A03               	xorlw	3	; case 10
  9723  0004CE  B4D8               	btfsc	status,2,c
  9724  0004D0  D799               	goto	l9574
  9725  0004D2  0A01               	xorlw	1	; case 11
  9726  0004D4  B4D8               	btfsc	status,2,c
  9727  0004D6  D7A5               	goto	l9576
  9728  0004D8  0A07               	xorlw	7	; case 12
  9729  0004DA  B4D8               	btfsc	status,2,c
  9730  0004DC  D7B1               	goto	l9578
  9731  0004DE  D7BF               	goto	l9580
  9732  0004E0                     l9586:
  9733                           
  9734                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9735  0004E0  0ECA               	movlw	low STR_21
  9736  0004E2  0100               	movlb	0	; () banked
  9737  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9738  0004E6  0EFA               	movlw	high STR_21
  9739  0004E8  0100               	movlb	0	; () banked
  9740  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9741  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9742  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9743  0004F4  0ED6               	movlw	low UI@month
  9744  0004F6  0100               	movlb	0	; () banked
  9745  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9746  0004FA  0E00               	movlw	high UI@month
  9747  0004FC  0100               	movlb	0	; () banked
  9748  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9749  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9750  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9751  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9752  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9753  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9754  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9755  000518  EC67  F00E         	call	_printf	;wreg free
  9756                           
  9757                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9758  00051C  0E00               	movlw	0
  9759  00051E  0100               	movlb	0	; () banked
  9760  000520  6FCC               	movwf	UI@i_435& (0+255),b
  9761  000522                     l9590:
  9762                           
  9763                           ; BSR set to: 0
  9764  000522  0E63               	movlw	99
  9765  000524  0100               	movlb	0	; () banked
  9766  000526  65CC               	cpfsgt	UI@i_435& (0+255),b
  9767  000528  D001               	goto	l9594
  9768  00052A  D00C               	goto	l9598
  9769  00052C                     l9594:
  9770                           
  9771                           ; BSR set to: 0
  9772  00052C  0E68               	movlw	104
  9773  00052E  0100               	movlb	0	; () banked
  9774  000530  6FC4               	movwf	??_UI& (0+255),b
  9775  000532  0EE4               	movlw	228
  9776  000534                     u10807:
  9777  000534  2EE8               	decfsz	wreg,f,c
  9778  000536  D7FE               	bra	u10807
  9779  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9780  00053A  D7FC               	bra	u10807
  9781  00053C  F000               	nop	
  9782  00053E  0100               	movlb	0	; () banked
  9783  000540  2BCC               	incf	UI@i_435& (0+255),f,b
  9784  000542  D7EF               	goto	l9590
  9785  000544                     l9598:
  9786                           
  9787                           ; BSR set to: 0
  9788  000544  0100               	movlb	0	; () banked
  9789  000546  51F8               	movf	_logstate& (0+255),w,b
  9790  000548  0100               	movlb	0	; () banked
  9791  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9792  00054C  B4D8               	btfsc	status,2,c
  9793  00054E  0012               	return	
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9797                           
  9798                           ; BSR set to: 0
  9799                           
  9800                           ; BSR set to: 0
  9801  000550  0E00               	movlw	0
  9802  000552  0100               	movlb	0	; () banked
  9803  000554  6FCD               	movwf	UI@i_436& (0+255),b
  9804  000556                     l9604:
  9805                           
  9806                           ; BSR set to: 0
  9807  000556  0E63               	movlw	99
  9808  000558  0100               	movlb	0	; () banked
  9809  00055A  65CD               	cpfsgt	UI@i_436& (0+255),b
  9810  00055C  D001               	goto	l9608
  9811  00055E  D00C               	goto	l9612
  9812  000560                     l9608:
  9813                           
  9814                           ; BSR set to: 0
  9815  000560  0E68               	movlw	104
  9816  000562  0100               	movlb	0	; () banked
  9817  000564  6FC4               	movwf	??_UI& (0+255),b
  9818  000566  0EE4               	movlw	228
  9819  000568                     u10817:
  9820  000568  2EE8               	decfsz	wreg,f,c
  9821  00056A  D7FE               	bra	u10817
  9822  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9823  00056E  D7FC               	bra	u10817
  9824  000570  F000               	nop	
  9825  000572  0100               	movlb	0	; () banked
  9826  000574  2BCD               	incf	UI@i_436& (0+255),f,b
  9827  000576  D7EF               	goto	l9604
  9828  000578                     l9612:
  9829                           
  9830                           ; BSR set to: 0
  9831  000578  0100               	movlb	0	; () banked
  9832  00057A  51F8               	movf	_logstate& (0+255),w,b
  9833  00057C  0100               	movlb	0	; () banked
  9834  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9835  000580  B4D8               	btfsc	status,2,c
  9836  000582  0012               	return	
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9840                           
  9841                           ; BSR set to: 0
  9842                           
  9843                           ; BSR set to: 0
  9844  000584  0E01               	movlw	1
  9845  000586  EC3A  F02F         	call	_lcdInst
  9846  00058A  0E68               	movlw	104
  9847  00058C  0100               	movlb	0	; () banked
  9848  00058E  6FC4               	movwf	??_UI& (0+255),b
  9849  000590  0EE4               	movlw	228
  9850  000592                     u10827:
  9851  000592  2EE8               	decfsz	wreg,f,c
  9852  000594  D7FE               	bra	u10827
  9853  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9854  000598  D7FC               	bra	u10827
  9855  00059A  F000               	nop	
  9856                           
  9857                           ;UI.c: 176: lcdInst(0b10000000);;
  9858  00059C  0E80               	movlw	128
  9859  00059E  EC3A  F02F         	call	_lcdInst
  9860                           
  9861                           ;UI.c: 177: printf("DURATION:");
  9862  0005A2  0E9A               	movlw	low STR_22
  9863  0005A4  0100               	movlb	0	; () banked
  9864  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9865  0005A8  0EFF               	movlw	high STR_22
  9866  0005AA  0100               	movlb	0	; () banked
  9867  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9868  0005AE  EC67  F00E         	call	_printf	;wreg free
  9869                           
  9870                           ;UI.c: 178: lcdInst(0b11000000);;
  9871  0005B2  0EC0               	movlw	192
  9872  0005B4  EC3A  F02F         	call	_lcdInst
  9873                           
  9874                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9875  0005B8  0E0E               	movlw	14
  9876  0005BA  0100               	movlb	0	; () banked
  9877  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9878  0005BE  0E10               	movlw	16
  9879  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9880  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9881  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9882  0005CA  ECC1  F026         	call	___awmod	;wreg free
  9883  0005CE  C080  F0C6         	movff	?___awmod,_UI$2432
  9884  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2432+1
  9885                           
  9886                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9887  0005D6  0E3B               	movlw	low STR_23
  9888  0005D8  0100               	movlb	0	; () banked
  9889  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9890  0005DC  0EFF               	movlw	high STR_23
  9891  0005DE  0100               	movlb	0	; () banked
  9892  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9893  0005E2  0E0E               	movlw	14
  9894  0005E4  0100               	movlb	0	; () banked
  9895  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9896  0005E8  0E10               	movlw	16
  9897  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9898  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9899  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9900  0005F4  ECC1  F026         	call	___awmod	;wreg free
  9901  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9902  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9903  000600  0E00               	movlw	0
  9904  000602  0100               	movlb	0	; () banked
  9905  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9906  000606  0E3C               	movlw	60
  9907  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9908  00060A  ECAF  F025         	call	___awdiv	;wreg free
  9909  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9910  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9911  000616  C0C6  F080         	movff	_UI$2432,___awmod@dividend
  9912  00061A  C0C7  F081         	movff	_UI$2432+1,___awmod@dividend+1
  9913  00061E  0E00               	movlw	0
  9914  000620  0100               	movlb	0	; () banked
  9915  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9916  000624  0E3C               	movlw	60
  9917  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9918  000628  ECC1  F026         	call	___awmod	;wreg free
  9919  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9920  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9921  000634  EC67  F00E         	call	_printf	;wreg free
  9922                           
  9923                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9924  000638  0E00               	movlw	0
  9925  00063A  0100               	movlb	0	; () banked
  9926  00063C  6FCE               	movwf	UI@i_439& (0+255),b
  9927  00063E                     l9632:
  9928                           
  9929                           ; BSR set to: 0
  9930  00063E  0E63               	movlw	99
  9931  000640  0100               	movlb	0	; () banked
  9932  000642  65CE               	cpfsgt	UI@i_439& (0+255),b
  9933  000644  D001               	goto	l9636
  9934  000646  D00C               	goto	l9640
  9935  000648                     l9636:
  9936                           
  9937                           ; BSR set to: 0
  9938  000648  0E68               	movlw	104
  9939  00064A  0100               	movlb	0	; () banked
  9940  00064C  6FC4               	movwf	??_UI& (0+255),b
  9941  00064E  0EE4               	movlw	228
  9942  000650                     u10837:
  9943  000650  2EE8               	decfsz	wreg,f,c
  9944  000652  D7FE               	bra	u10837
  9945  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9946  000656  D7FC               	bra	u10837
  9947  000658  F000               	nop	
  9948  00065A  0100               	movlb	0	; () banked
  9949  00065C  2BCE               	incf	UI@i_439& (0+255),f,b
  9950  00065E  D7EF               	goto	l9632
  9951  000660                     l9640:
  9952                           
  9953                           ; BSR set to: 0
  9954  000660  0100               	movlb	0	; () banked
  9955  000662  51F8               	movf	_logstate& (0+255),w,b
  9956  000664  0100               	movlb	0	; () banked
  9957  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9958  000668  B4D8               	btfsc	status,2,c
  9959  00066A  0012               	return	
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9963                           
  9964                           ; BSR set to: 0
  9965                           
  9966                           ; BSR set to: 0
  9967  00066C  0E00               	movlw	0
  9968  00066E  0100               	movlb	0	; () banked
  9969  000670  6FCF               	movwf	UI@i_440& (0+255),b
  9970  000672                     l9646:
  9971                           
  9972                           ; BSR set to: 0
  9973  000672  0E63               	movlw	99
  9974  000674  0100               	movlb	0	; () banked
  9975  000676  65CF               	cpfsgt	UI@i_440& (0+255),b
  9976  000678  D001               	goto	l9650
  9977  00067A  D00C               	goto	l9654
  9978  00067C                     l9650:
  9979                           
  9980                           ; BSR set to: 0
  9981  00067C  0E68               	movlw	104
  9982  00067E  0100               	movlb	0	; () banked
  9983  000680  6FC4               	movwf	??_UI& (0+255),b
  9984  000682  0EE4               	movlw	228
  9985  000684                     u10847:
  9986  000684  2EE8               	decfsz	wreg,f,c
  9987  000686  D7FE               	bra	u10847
  9988  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9989  00068A  D7FC               	bra	u10847
  9990  00068C  F000               	nop	
  9991  00068E  0100               	movlb	0	; () banked
  9992  000690  2BCF               	incf	UI@i_440& (0+255),f,b
  9993  000692  D7EF               	goto	l9646
  9994  000694                     l9654:
  9995                           
  9996                           ; BSR set to: 0
  9997  000694  0100               	movlb	0	; () banked
  9998  000696  51F8               	movf	_logstate& (0+255),w,b
  9999  000698  0100               	movlb	0	; () banked
 10000  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10001  00069C  B4D8               	btfsc	status,2,c
 10002  00069E  0012               	return	
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10006                           
 10007                           ; BSR set to: 0
 10008                           
 10009                           ; BSR set to: 0
 10010  0006A0  0E01               	movlw	1
 10011  0006A2  EC3A  F02F         	call	_lcdInst
 10012  0006A6  0E68               	movlw	104
 10013  0006A8  0100               	movlb	0	; () banked
 10014  0006AA  6FC4               	movwf	??_UI& (0+255),b
 10015  0006AC  0EE4               	movlw	228
 10016  0006AE                     u10857:
 10017  0006AE  2EE8               	decfsz	wreg,f,c
 10018  0006B0  D7FE               	bra	u10857
 10019  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
 10020  0006B4  D7FC               	bra	u10857
 10021  0006B6  F000               	nop	
 10022                           
 10023                           ;UI.c: 185: lcdInst(0b10000000);;
 10024  0006B8  0E80               	movlw	128
 10025  0006BA  EC3A  F02F         	call	_lcdInst
 10026                           
 10027                           ;UI.c: 186: printf(" -- POP  CAN -- ");
 10028  0006BE  0E2F               	movlw	low STR_24
 10029  0006C0  0100               	movlb	0	; () banked
 10030  0006C2  6F8E               	movwf	printf@f& (0+255),b
 10031  0006C4  0EFD               	movlw	high STR_24
 10032  0006C6  0100               	movlb	0	; () banked
 10033  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10034  0006CA  EC67  F00E         	call	_printf	;wreg free
 10035                           
 10036                           ;UI.c: 187: lcdInst(0b11000000);;
 10037  0006CE  0EC0               	movlw	192
 10038  0006D0  EC3A  F02F         	call	_lcdInst
 10039                           
 10040                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
 10041  0006D4  0E0C               	movlw	low STR_25
 10042  0006D6  0100               	movlb	0	; () banked
 10043  0006D8  6F8E               	movwf	printf@f& (0+255),b
 10044  0006DA  0EFE               	movlw	high STR_25
 10045  0006DC  0100               	movlb	0	; () banked
 10046  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10047  0006E0  C0F2  F090         	movff	_log_count_pop_no_tab,?_printf+2
 10048  0006E4  C0F3  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
 10049  0006E8  C0F4  F092         	movff	_log_count_pop_w_tab,?_printf+4
 10050  0006EC  C0F5  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
 10051  0006F0  EC67  F00E         	call	_printf	;wreg free
 10052                           
 10053                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10054  0006F4  0E00               	movlw	0
 10055  0006F6  0100               	movlb	0	; () banked
 10056  0006F8  6FD0               	movwf	UI@i_443& (0+255),b
 10057  0006FA                     l9672:
 10058                           
 10059                           ; BSR set to: 0
 10060  0006FA  0E63               	movlw	99
 10061  0006FC  0100               	movlb	0	; () banked
 10062  0006FE  65D0               	cpfsgt	UI@i_443& (0+255),b
 10063  000700  D001               	goto	l9676
 10064  000702  D00C               	goto	l9680
 10065  000704                     l9676:
 10066                           
 10067                           ; BSR set to: 0
 10068  000704  0E68               	movlw	104
 10069  000706  0100               	movlb	0	; () banked
 10070  000708  6FC4               	movwf	??_UI& (0+255),b
 10071  00070A  0EE4               	movlw	228
 10072  00070C                     u10867:
 10073  00070C  2EE8               	decfsz	wreg,f,c
 10074  00070E  D7FE               	bra	u10867
 10075  000710  2FC4               	decfsz	??_UI& (0+255),f,b
 10076  000712  D7FC               	bra	u10867
 10077  000714  F000               	nop	
 10078  000716  0100               	movlb	0	; () banked
 10079  000718  2BD0               	incf	UI@i_443& (0+255),f,b
 10080  00071A  D7EF               	goto	l9672
 10081  00071C                     l9680:
 10082                           
 10083                           ; BSR set to: 0
 10084  00071C  0100               	movlb	0	; () banked
 10085  00071E  51F8               	movf	_logstate& (0+255),w,b
 10086  000720  0100               	movlb	0	; () banked
 10087  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10088  000724  B4D8               	btfsc	status,2,c
 10089  000726  0012               	return	
 10090                           
 10091                           ; BSR set to: 0
 10092                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10093                           
 10094                           ; BSR set to: 0
 10095                           
 10096                           ; BSR set to: 0
 10097  000728  0E00               	movlw	0
 10098  00072A  0100               	movlb	0	; () banked
 10099  00072C  6FD1               	movwf	UI@i_444& (0+255),b
 10100  00072E                     l9686:
 10101                           
 10102                           ; BSR set to: 0
 10103  00072E  0E63               	movlw	99
 10104  000730  0100               	movlb	0	; () banked
 10105  000732  65D1               	cpfsgt	UI@i_444& (0+255),b
 10106  000734  D001               	goto	l9690
 10107  000736  D00C               	goto	l9694
 10108  000738                     l9690:
 10109                           
 10110                           ; BSR set to: 0
 10111  000738  0E68               	movlw	104
 10112  00073A  0100               	movlb	0	; () banked
 10113  00073C  6FC4               	movwf	??_UI& (0+255),b
 10114  00073E  0EE4               	movlw	228
 10115  000740                     u10877:
 10116  000740  2EE8               	decfsz	wreg,f,c
 10117  000742  D7FE               	bra	u10877
 10118  000744  2FC4               	decfsz	??_UI& (0+255),f,b
 10119  000746  D7FC               	bra	u10877
 10120  000748  F000               	nop	
 10121  00074A  0100               	movlb	0	; () banked
 10122  00074C  2BD1               	incf	UI@i_444& (0+255),f,b
 10123  00074E  D7EF               	goto	l9686
 10124  000750                     l9694:
 10125                           
 10126                           ; BSR set to: 0
 10127  000750  0100               	movlb	0	; () banked
 10128  000752  51F8               	movf	_logstate& (0+255),w,b
 10129  000754  0100               	movlb	0	; () banked
 10130  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10131  000758  B4D8               	btfsc	status,2,c
 10132  00075A  0012               	return	
 10133                           
 10134                           ; BSR set to: 0
 10135                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10136                           
 10137                           ; BSR set to: 0
 10138                           
 10139                           ; BSR set to: 0
 10140  00075C  0E01               	movlw	1
 10141  00075E  EC3A  F02F         	call	_lcdInst
 10142  000762  0E68               	movlw	104
 10143  000764  0100               	movlb	0	; () banked
 10144  000766  6FC4               	movwf	??_UI& (0+255),b
 10145  000768  0EE4               	movlw	228
 10146  00076A                     u10887:
 10147  00076A  2EE8               	decfsz	wreg,f,c
 10148  00076C  D7FE               	bra	u10887
 10149  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
 10150  000770  D7FC               	bra	u10887
 10151  000772  F000               	nop	
 10152                           
 10153                           ;UI.c: 194: lcdInst(0b10000000);;
 10154  000774  0E80               	movlw	128
 10155  000776  EC3A  F02F         	call	_lcdInst
 10156                           
 10157                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
 10158  00077A  0E40               	movlw	low STR_26
 10159  00077C  0100               	movlb	0	; () banked
 10160  00077E  6F8E               	movwf	printf@f& (0+255),b
 10161  000780  0EFD               	movlw	high STR_26
 10162  000782  0100               	movlb	0	; () banked
 10163  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
 10164  000786  EC67  F00E         	call	_printf	;wreg free
 10165                           
 10166                           ;UI.c: 196: lcdInst(0b11000000);;
 10167  00078A  0EC0               	movlw	192
 10168  00078C  EC3A  F02F         	call	_lcdInst
 10169                           
 10170                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
 10171  000790  0EFB               	movlw	low STR_27
 10172  000792  0100               	movlb	0	; () banked
 10173  000794  6F8E               	movwf	printf@f& (0+255),b
 10174  000796  0EFD               	movlw	high STR_27
 10175  000798  0100               	movlb	0	; () banked
 10176  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10177  00079C  C141  F090         	movff	_log_count_can_no_lab,?_printf+2
 10178  0007A0  C142  F091         	movff	_log_count_can_no_lab+1,?_printf+3
 10179  0007A4  C143  F092         	movff	_log_count_can_w_lab,?_printf+4
 10180  0007A8  C144  F093         	movff	_log_count_can_w_lab+1,?_printf+5
 10181  0007AC  EC67  F00E         	call	_printf	;wreg free
 10182                           
 10183                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10184  0007B0  0E00               	movlw	0
 10185  0007B2  0100               	movlb	0	; () banked
 10186  0007B4  6FD2               	movwf	UI@i_447& (0+255),b
 10187  0007B6                     l9712:
 10188                           
 10189                           ; BSR set to: 0
 10190  0007B6  0E63               	movlw	99
 10191  0007B8  0100               	movlb	0	; () banked
 10192  0007BA  65D2               	cpfsgt	UI@i_447& (0+255),b
 10193  0007BC  D001               	goto	l9716
 10194  0007BE  D00C               	goto	l9720
 10195  0007C0                     l9716:
 10196                           
 10197                           ; BSR set to: 0
 10198  0007C0  0E68               	movlw	104
 10199  0007C2  0100               	movlb	0	; () banked
 10200  0007C4  6FC4               	movwf	??_UI& (0+255),b
 10201  0007C6  0EE4               	movlw	228
 10202  0007C8                     u10897:
 10203  0007C8  2EE8               	decfsz	wreg,f,c
 10204  0007CA  D7FE               	bra	u10897
 10205  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
 10206  0007CE  D7FC               	bra	u10897
 10207  0007D0  F000               	nop	
 10208  0007D2  0100               	movlb	0	; () banked
 10209  0007D4  2BD2               	incf	UI@i_447& (0+255),f,b
 10210  0007D6  D7EF               	goto	l9712
 10211  0007D8                     l9720:
 10212                           
 10213                           ; BSR set to: 0
 10214  0007D8  0100               	movlb	0	; () banked
 10215  0007DA  51F8               	movf	_logstate& (0+255),w,b
 10216  0007DC  0100               	movlb	0	; () banked
 10217  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10218  0007E0  B4D8               	btfsc	status,2,c
 10219  0007E2  0012               	return	
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10223                           
 10224                           ; BSR set to: 0
 10225                           
 10226                           ; BSR set to: 0
 10227  0007E4  0E00               	movlw	0
 10228  0007E6  0100               	movlb	0	; () banked
 10229  0007E8  6FD3               	movwf	UI@i_448& (0+255),b
 10230  0007EA                     l9726:
 10231                           
 10232                           ; BSR set to: 0
 10233  0007EA  0E63               	movlw	99
 10234  0007EC  0100               	movlb	0	; () banked
 10235  0007EE  65D3               	cpfsgt	UI@i_448& (0+255),b
 10236  0007F0  D001               	goto	l9730
 10237  0007F2  D00C               	goto	l9734
 10238  0007F4                     l9730:
 10239                           
 10240                           ; BSR set to: 0
 10241  0007F4  0E68               	movlw	104
 10242  0007F6  0100               	movlb	0	; () banked
 10243  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10244  0007FA  0EE4               	movlw	228
 10245  0007FC                     u10907:
 10246  0007FC  2EE8               	decfsz	wreg,f,c
 10247  0007FE  D7FE               	bra	u10907
 10248  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10249  000802  D7FC               	bra	u10907
 10250  000804  F000               	nop	
 10251  000806  0100               	movlb	0	; () banked
 10252  000808  2BD3               	incf	UI@i_448& (0+255),f,b
 10253  00080A  D7EF               	goto	l9726
 10254  00080C                     l9734:
 10255                           
 10256                           ; BSR set to: 0
 10257  00080C  0100               	movlb	0	; () banked
 10258  00080E  51F8               	movf	_logstate& (0+255),w,b
 10259  000810  0100               	movlb	0	; () banked
 10260  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10261  000814  B4D8               	btfsc	status,2,c
 10262  000816  0012               	return	
 10263                           
 10264                           ; BSR set to: 0
 10265                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10266                           
 10267                           ; BSR set to: 0
 10268                           
 10269                           ; BSR set to: 0
 10270  000818  0E01               	movlw	1
 10271  00081A  EC3A  F02F         	call	_lcdInst
 10272  00081E  0E68               	movlw	104
 10273  000820  0100               	movlb	0	; () banked
 10274  000822  6FC4               	movwf	??_UI& (0+255),b
 10275  000824  0EE4               	movlw	228
 10276  000826                     u10917:
 10277  000826  2EE8               	decfsz	wreg,f,c
 10278  000828  D7FE               	bra	u10917
 10279  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10280  00082C  D7FC               	bra	u10917
 10281  00082E  F000               	nop	
 10282                           
 10283                           ;UI.c: 203: lcdInst(0b10000000);;
 10284  000830  0E80               	movlw	128
 10285  000832  EC3A  F02F         	call	_lcdInst
 10286                           
 10287                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10288  000836  0E51               	movlw	low STR_28
 10289  000838  0100               	movlb	0	; () banked
 10290  00083A  6F8E               	movwf	printf@f& (0+255),b
 10291  00083C  0EFD               	movlw	high STR_28
 10292  00083E  0100               	movlb	0	; () banked
 10293  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10294  000842  EC67  F00E         	call	_printf	;wreg free
 10295                           
 10296                           ;UI.c: 205: lcdInst(0b11000000);;
 10297  000846  0EC0               	movlw	192
 10298  000848  EC3A  F02F         	call	_lcdInst
 10299                           
 10300                           ;UI.c: 206: printf("%d", log_count_total);
 10301  00084C  0E09               	movlw	low (STR_27+14)
 10302  00084E  0100               	movlb	0	; () banked
 10303  000850  6F8E               	movwf	printf@f& (0+255),b
 10304  000852  0EFE               	movlw	high (STR_27+14)
 10305  000854  0100               	movlb	0	; () banked
 10306  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10307  000858  C145  F090         	movff	_log_count_total,?_printf+2
 10308  00085C  C146  F091         	movff	_log_count_total+1,?_printf+3
 10309  000860  EC67  F00E         	call	_printf	;wreg free
 10310                           
 10311                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10312  000864  0E00               	movlw	0
 10313  000866  0100               	movlb	0	; () banked
 10314  000868  6FD4               	movwf	UI@i_451& (0+255),b
 10315  00086A                     l9752:
 10316                           
 10317                           ; BSR set to: 0
 10318  00086A  0E63               	movlw	99
 10319  00086C  0100               	movlb	0	; () banked
 10320  00086E  65D4               	cpfsgt	UI@i_451& (0+255),b
 10321  000870  D001               	goto	l9756
 10322  000872  D00C               	goto	l9760
 10323  000874                     l9756:
 10324                           
 10325                           ; BSR set to: 0
 10326  000874  0E68               	movlw	104
 10327  000876  0100               	movlb	0	; () banked
 10328  000878  6FC4               	movwf	??_UI& (0+255),b
 10329  00087A  0EE4               	movlw	228
 10330  00087C                     u10927:
 10331  00087C  2EE8               	decfsz	wreg,f,c
 10332  00087E  D7FE               	bra	u10927
 10333  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10334  000882  D7FC               	bra	u10927
 10335  000884  F000               	nop	
 10336  000886  0100               	movlb	0	; () banked
 10337  000888  2BD4               	incf	UI@i_451& (0+255),f,b
 10338  00088A  D7EF               	goto	l9752
 10339  00088C                     l9760:
 10340                           
 10341                           ; BSR set to: 0
 10342  00088C  0100               	movlb	0	; () banked
 10343  00088E  51F8               	movf	_logstate& (0+255),w,b
 10344  000890  0100               	movlb	0	; () banked
 10345  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10346  000894  B4D8               	btfsc	status,2,c
 10347  000896  0012               	return	
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10351                           
 10352                           ; BSR set to: 0
 10353                           
 10354                           ; BSR set to: 0
 10355  000898  0E00               	movlw	0
 10356  00089A  0100               	movlb	0	; () banked
 10357  00089C  6FD5               	movwf	UI@i_452& (0+255),b
 10358  00089E                     l9766:
 10359                           
 10360                           ; BSR set to: 0
 10361  00089E  0E63               	movlw	99
 10362  0008A0  0100               	movlb	0	; () banked
 10363  0008A2  65D5               	cpfsgt	UI@i_452& (0+255),b
 10364  0008A4  D001               	goto	l9770
 10365  0008A6  D00C               	goto	l9774
 10366  0008A8                     l9770:
 10367                           
 10368                           ; BSR set to: 0
 10369  0008A8  0E68               	movlw	104
 10370  0008AA  0100               	movlb	0	; () banked
 10371  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10372  0008AE  0EE4               	movlw	228
 10373  0008B0                     u10937:
 10374  0008B0  2EE8               	decfsz	wreg,f,c
 10375  0008B2  D7FE               	bra	u10937
 10376  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10377  0008B6  D7FC               	bra	u10937
 10378  0008B8  F000               	nop	
 10379  0008BA  0100               	movlb	0	; () banked
 10380  0008BC  2BD5               	incf	UI@i_452& (0+255),f,b
 10381  0008BE  D7EF               	goto	l9766
 10382  0008C0                     l9774:
 10383                           
 10384                           ; BSR set to: 0
 10385  0008C0  0100               	movlb	0	; () banked
 10386  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10387  0008C4  0100               	movlb	0	; () banked
 10388  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10389  0008C8  B4D8               	btfsc	status,2,c
 10390  0008CA  0012               	return	
 10391  0008CC                     l9778:
 10392  0008CC  0100               	movlb	0	; () banked
 10393  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10394  0008D0  0100               	movlb	0	; () banked
 10395  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10396  0008D4  B4D8               	btfsc	status,2,c
 10397  0008D6  0012               	return	
 10398  0008D8  D44A               	goto	l9474
 10399  0008DA                     __end_of_UI:
 10400                           	opt stack 0
 10401                           tblptru	equ	0xFF8
 10402                           tblptrh	equ	0xFF7
 10403                           tblptrl	equ	0xFF6
 10404                           tablat	equ	0xFF5
 10405                           prodh	equ	0xFF4
 10406                           prodl	equ	0xFF3
 10407                           intcon	equ	0xFF2
 10408                           intcon2	equ	0xFF1
 10409                           intcon3	equ	0xFF0
 10410                           postinc0	equ	0xFEE
 10411                           wreg	equ	0xFE8
 10412                           postdec1	equ	0xFE5
 10413                           fsr1l	equ	0xFE1
 10414                           indf2	equ	0xFDF
 10415                           postinc2	equ	0xFDE
 10416                           postdec2	equ	0xFDD
 10417                           fsr2h	equ	0xFDA
 10418                           fsr2l	equ	0xFD9
 10419                           status	equ	0xFD8
 10420                           
 10421 ;; *************** function _printRTC *****************
 10422 ;; Defined at:
 10423 ;;		line 63 in file "RTC.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  i               2   66[BANK0 ] int 
 10428 ;;  INT_time       14   46[BANK0 ] int [7]
 10429 ;;  month           4   62[BANK0 ] unsigned char [4]
 10430 ;;  RTC_month       2   60[BANK0 ] int 
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  1    wreg      void 
 10433 ;; Registers used:
 10434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10442 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10443 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10444 ;;Total ram usage:       25 bytes
 10445 ;; Hardware stack levels used:    1
 10446 ;; Hardware stack levels required when called:   10
 10447 ;; This function calls:
 10448 ;;		_getRTC
 10449 ;;		_lcdInst
 10450 ;;		_printf
 10451 ;;		_strcpy
 10452 ;; This function is called by:
 10453 ;;		_UI
 10454 ;;		_change_state_to_menu_start
 10455 ;; This function uses a non-reentrant model
 10456 ;;
 10457                           
 10458                           	psect	text28
 10459  0031BC                     __ptext28:
 10460                           	opt stack 0
 10461  0031BC                     _printRTC:
 10462                           	opt stack 18
 10463                           
 10464                           ;RTC.c: 64: getRTC();
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;incstack = 0
 10468  0031BC  ECEC  F027         	call	_getRTC	;wreg free
 10469                           
 10470                           ;RTC.c: 65: char month[] = "MMM";
 10471  0031C0  C151  F0BE         	movff	printRTC@F3240,printRTC@month
 10472  0031C4  C152  F0BF         	movff	printRTC@F3240+1,printRTC@month+1
 10473  0031C8  C153  F0C0         	movff	printRTC@F3240+2,printRTC@month+2
 10474  0031CC  C154  F0C1         	movff	printRTC@F3240+3,printRTC@month+3
 10475                           
 10476                           ;RTC.c: 66: int INT_time[7];
 10477                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10478  0031D0  0E00               	movlw	0
 10479  0031D2  0100               	movlb	0	; () banked
 10480  0031D4  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10481  0031D6  0E00               	movlw	0
 10482  0031D8  6FC2               	movwf	printRTC@i& (0+255),b
 10483                           
 10484                           ; BSR set to: 0
 10485  0031DA  0100               	movlb	0	; () banked
 10486  0031DC  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10487  0031DE  D008               	goto	l7256
 10488  0031E0  0100               	movlb	0	; () banked
 10489  0031E2  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10490  0031E4  E146               	bnz	l632
 10491  0031E6  0E07               	movlw	7
 10492  0031E8  0100               	movlb	0	; () banked
 10493  0031EA  5DC2               	subwf	printRTC@i& (0+255),w,b
 10494  0031EC  B0D8               	btfsc	status,0,c
 10495  0031EE  D041               	goto	l632
 10496  0031F0                     l7256:
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10500  0031F0  0E1C               	movlw	low _time
 10501  0031F2  0100               	movlb	0	; () banked
 10502  0031F4  25C2               	addwf	printRTC@i& (0+255),w,b
 10503  0031F6  6ED9               	movwf	fsr2l,c
 10504  0031F8  0E01               	movlw	high _time
 10505  0031FA  0100               	movlb	0	; () banked
 10506  0031FC  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10507  0031FE  6EDA               	movwf	fsr2h,c
 10508  003200  50DF               	movf	indf2,w,c
 10509  003202  0100               	movlb	0	; () banked
 10510  003204  6FAB               	movwf	??_printRTC& (0+255),b
 10511  003206  0100               	movlb	0	; () banked
 10512  003208  3BAB               	swapf	??_printRTC& (0+255),f,b
 10513  00320A  0E0F               	movlw	15
 10514  00320C  17AB               	andwf	??_printRTC& (0+255),f,b
 10515  00320E  0E0F               	movlw	15
 10516  003210  0100               	movlb	0	; () banked
 10517  003212  17AB               	andwf	??_printRTC& (0+255),f,b
 10518  003214  0100               	movlb	0	; () banked
 10519  003216  51AB               	movf	??_printRTC& (0+255),w,b
 10520  003218  0D0A               	mullw	10
 10521  00321A  0E1C               	movlw	low _time
 10522  00321C  0100               	movlb	0	; () banked
 10523  00321E  25C2               	addwf	printRTC@i& (0+255),w,b
 10524  003220  6ED9               	movwf	fsr2l,c
 10525  003222  0E01               	movlw	high _time
 10526  003224  0100               	movlb	0	; () banked
 10527  003226  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10528  003228  6EDA               	movwf	fsr2h,c
 10529  00322A  50DF               	movf	indf2,w,c
 10530  00322C  0B0F               	andlw	15
 10531  00322E  0100               	movlb	0	; () banked
 10532  003230  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10533  003232  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10534  003234  50F3               	movf	prodl,w,c
 10535  003236  0100               	movlb	0	; () banked
 10536  003238  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10537  00323A  50F4               	movf	prodh,w,c
 10538  00323C  0100               	movlb	0	; () banked
 10539  00323E  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10540  003240  90D8               	bcf	status,0,c
 10541  003242  0100               	movlb	0	; () banked
 10542  003244  35C2               	rlcf	printRTC@i& (0+255),w,b
 10543  003246  6ED9               	movwf	fsr2l,c
 10544  003248  0100               	movlb	0	; () banked
 10545  00324A  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10546  00324C  6EDA               	movwf	fsr2h,c
 10547  00324E  0EAE               	movlw	low printRTC@INT_time
 10548  003250  26D9               	addwf	fsr2l,f,c
 10549  003252  0E00               	movlw	high printRTC@INT_time
 10550  003254  22DA               	addwfc	fsr2h,f,c
 10551  003256  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10552  00325A  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10553                           
 10554                           ; BSR set to: 0
 10555  00325E  0100               	movlb	0	; () banked
 10556  003260  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10557  003262  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10558                           
 10559                           ; BSR set to: 0
 10560  003264  0100               	movlb	0	; () banked
 10561  003266  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10562  003268  D7C3               	goto	l7256
 10563  00326A  0100               	movlb	0	; () banked
 10564  00326C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10565  00326E  E101               	bnz	u6230
 10566  003270  D7BA               	goto	L10
 10567  003272                     u6230:
 10568  003272                     l632:
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;RTC.c: 69: }
 10572                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10573  003272  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10574  003276  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10575                           
 10576                           ;RTC.c: 72: switch(RTC_month){
 10577  00327A  D0B4               	goto	l7288
 10578  00327C                     l7262:
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;RTC.c: 74: strcpy(month, "JAN");
 10582  00327C  0EBE               	movlw	low printRTC@month
 10583  00327E  0100               	movlb	0	; () banked
 10584  003280  6F80               	movwf	strcpy@to& (0+255),b
 10585  003282  0E00               	movlw	high printRTC@month
 10586  003284  0100               	movlb	0	; () banked
 10587  003286  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10588  003288  0EDA               	movlw	low STR_8
 10589  00328A  0100               	movlb	0	; () banked
 10590  00328C  6F82               	movwf	strcpy@from& (0+255),b
 10591  00328E  0EFF               	movlw	high STR_8
 10592  003290  0100               	movlb	0	; () banked
 10593  003292  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10594  003294  EC89  F02C         	call	_strcpy	;wreg free
 10595                           
 10596                           ;RTC.c: 75: break;
 10597  003298  D0D4               	goto	l7290
 10598  00329A                     l7264:
 10599                           
 10600                           ;RTC.c: 77: strcpy(month, "FEB");
 10601  00329A  0EBE               	movlw	low printRTC@month
 10602  00329C  0100               	movlb	0	; () banked
 10603  00329E  6F80               	movwf	strcpy@to& (0+255),b
 10604  0032A0  0E00               	movlw	high printRTC@month
 10605  0032A2  0100               	movlb	0	; () banked
 10606  0032A4  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10607  0032A6  0ECA               	movlw	low STR_9
 10608  0032A8  0100               	movlb	0	; () banked
 10609  0032AA  6F82               	movwf	strcpy@from& (0+255),b
 10610  0032AC  0EFF               	movlw	high STR_9
 10611  0032AE  0100               	movlb	0	; () banked
 10612  0032B0  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10613  0032B2  EC89  F02C         	call	_strcpy	;wreg free
 10614                           
 10615                           ;RTC.c: 78: break;
 10616  0032B6  D0C5               	goto	l7290
 10617  0032B8                     l7266:
 10618                           
 10619                           ;RTC.c: 80: strcpy(month, "MAR");
 10620  0032B8  0EBE               	movlw	low printRTC@month
 10621  0032BA  0100               	movlb	0	; () banked
 10622  0032BC  6F80               	movwf	strcpy@to& (0+255),b
 10623  0032BE  0E00               	movlw	high printRTC@month
 10624  0032C0  0100               	movlb	0	; () banked
 10625  0032C2  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10626  0032C4  0EE6               	movlw	low STR_10
 10627  0032C6  0100               	movlb	0	; () banked
 10628  0032C8  6F82               	movwf	strcpy@from& (0+255),b
 10629  0032CA  0EFF               	movlw	high STR_10
 10630  0032CC  0100               	movlb	0	; () banked
 10631  0032CE  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10632  0032D0  EC89  F02C         	call	_strcpy	;wreg free
 10633                           
 10634                           ;RTC.c: 81: break;
 10635  0032D4  D0B6               	goto	l7290
 10636  0032D6                     l7268:
 10637                           
 10638                           ;RTC.c: 83: strcpy(month, "APR");
 10639  0032D6  0EBE               	movlw	low printRTC@month
 10640  0032D8  0100               	movlb	0	; () banked
 10641  0032DA  6F80               	movwf	strcpy@to& (0+255),b
 10642  0032DC  0E00               	movlw	high printRTC@month
 10643  0032DE  0100               	movlb	0	; () banked
 10644  0032E0  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10645  0032E2  0EEA               	movlw	low STR_11
 10646  0032E4  0100               	movlb	0	; () banked
 10647  0032E6  6F82               	movwf	strcpy@from& (0+255),b
 10648  0032E8  0EFF               	movlw	high STR_11
 10649  0032EA  0100               	movlb	0	; () banked
 10650  0032EC  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10651  0032EE  EC89  F02C         	call	_strcpy	;wreg free
 10652                           
 10653                           ;RTC.c: 84: break;
 10654  0032F2  D0A7               	goto	l7290
 10655  0032F4                     l7270:
 10656                           
 10657                           ;RTC.c: 86: strcpy(month, "MAY");
 10658  0032F4  0EBE               	movlw	low printRTC@month
 10659  0032F6  0100               	movlb	0	; () banked
 10660  0032F8  6F80               	movwf	strcpy@to& (0+255),b
 10661  0032FA  0E00               	movlw	high printRTC@month
 10662  0032FC  0100               	movlb	0	; () banked
 10663  0032FE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10664  003300  0EFA               	movlw	low STR_12
 10665  003302  0100               	movlb	0	; () banked
 10666  003304  6F82               	movwf	strcpy@from& (0+255),b
 10667  003306  0EFF               	movlw	high STR_12
 10668  003308  0100               	movlb	0	; () banked
 10669  00330A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10670  00330C  EC89  F02C         	call	_strcpy	;wreg free
 10671                           
 10672                           ;RTC.c: 87: break;
 10673  003310  D098               	goto	l7290
 10674  003312                     l7272:
 10675                           
 10676                           ;RTC.c: 89: strcpy(month, "JUN");
 10677  003312  0EBE               	movlw	low printRTC@month
 10678  003314  0100               	movlb	0	; () banked
 10679  003316  6F80               	movwf	strcpy@to& (0+255),b
 10680  003318  0E00               	movlw	high printRTC@month
 10681  00331A  0100               	movlb	0	; () banked
 10682  00331C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10683  00331E  0EDE               	movlw	low STR_13
 10684  003320  0100               	movlb	0	; () banked
 10685  003322  6F82               	movwf	strcpy@from& (0+255),b
 10686  003324  0EFF               	movlw	high STR_13
 10687  003326  0100               	movlb	0	; () banked
 10688  003328  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10689  00332A  EC89  F02C         	call	_strcpy	;wreg free
 10690                           
 10691                           ;RTC.c: 90: break;
 10692  00332E  D089               	goto	l7290
 10693  003330                     l7274:
 10694                           
 10695                           ;RTC.c: 92: strcpy(month, "JUL");
 10696  003330  0EBE               	movlw	low printRTC@month
 10697  003332  0100               	movlb	0	; () banked
 10698  003334  6F80               	movwf	strcpy@to& (0+255),b
 10699  003336  0E00               	movlw	high printRTC@month
 10700  003338  0100               	movlb	0	; () banked
 10701  00333A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10702  00333C  0ED6               	movlw	low STR_14
 10703  00333E  0100               	movlb	0	; () banked
 10704  003340  6F82               	movwf	strcpy@from& (0+255),b
 10705  003342  0EFF               	movlw	high STR_14
 10706  003344  0100               	movlb	0	; () banked
 10707  003346  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10708  003348  EC89  F02C         	call	_strcpy	;wreg free
 10709                           
 10710                           ;RTC.c: 93: break;
 10711  00334C  D07A               	goto	l7290
 10712  00334E                     l7276:
 10713                           
 10714                           ;RTC.c: 95: strcpy(month, "AUG");
 10715  00334E  0EBE               	movlw	low printRTC@month
 10716  003350  0100               	movlb	0	; () banked
 10717  003352  6F80               	movwf	strcpy@to& (0+255),b
 10718  003354  0E00               	movlw	high printRTC@month
 10719  003356  0100               	movlb	0	; () banked
 10720  003358  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10721  00335A  0ED2               	movlw	low STR_15
 10722  00335C  0100               	movlb	0	; () banked
 10723  00335E  6F82               	movwf	strcpy@from& (0+255),b
 10724  003360  0EFF               	movlw	high STR_15
 10725  003362  0100               	movlb	0	; () banked
 10726  003364  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10727  003366  EC89  F02C         	call	_strcpy	;wreg free
 10728                           
 10729                           ;RTC.c: 96: break;
 10730  00336A  D06B               	goto	l7290
 10731  00336C                     l7278:
 10732                           
 10733                           ;RTC.c: 98: strcpy(month, "SEP");
 10734  00336C  0EBE               	movlw	low printRTC@month
 10735  00336E  0100               	movlb	0	; () banked
 10736  003370  6F80               	movwf	strcpy@to& (0+255),b
 10737  003372  0E00               	movlw	high printRTC@month
 10738  003374  0100               	movlb	0	; () banked
 10739  003376  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10740  003378  0EE2               	movlw	low STR_16
 10741  00337A  0100               	movlb	0	; () banked
 10742  00337C  6F82               	movwf	strcpy@from& (0+255),b
 10743  00337E  0EFF               	movlw	high STR_16
 10744  003380  0100               	movlb	0	; () banked
 10745  003382  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10746  003384  EC89  F02C         	call	_strcpy	;wreg free
 10747                           
 10748                           ;RTC.c: 99: break;
 10749  003388  D05C               	goto	l7290
 10750  00338A                     l7280:
 10751                           
 10752                           ;RTC.c: 101: strcpy(month, "OCT");
 10753  00338A  0EBE               	movlw	low printRTC@month
 10754  00338C  0100               	movlb	0	; () banked
 10755  00338E  6F80               	movwf	strcpy@to& (0+255),b
 10756  003390  0E00               	movlw	high printRTC@month
 10757  003392  0100               	movlb	0	; () banked
 10758  003394  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10759  003396  0EF2               	movlw	low STR_17
 10760  003398  0100               	movlb	0	; () banked
 10761  00339A  6F82               	movwf	strcpy@from& (0+255),b
 10762  00339C  0EFF               	movlw	high STR_17
 10763  00339E  0100               	movlb	0	; () banked
 10764  0033A0  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10765  0033A2  EC89  F02C         	call	_strcpy	;wreg free
 10766                           
 10767                           ;RTC.c: 102: break;
 10768  0033A6  D04D               	goto	l7290
 10769  0033A8                     l7282:
 10770                           
 10771                           ;RTC.c: 104: strcpy(month, "NOV");
 10772  0033A8  0EBE               	movlw	low printRTC@month
 10773  0033AA  0100               	movlb	0	; () banked
 10774  0033AC  6F80               	movwf	strcpy@to& (0+255),b
 10775  0033AE  0E00               	movlw	high printRTC@month
 10776  0033B0  0100               	movlb	0	; () banked
 10777  0033B2  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10778  0033B4  0EF6               	movlw	low STR_18
 10779  0033B6  0100               	movlb	0	; () banked
 10780  0033B8  6F82               	movwf	strcpy@from& (0+255),b
 10781  0033BA  0EFF               	movlw	high STR_18
 10782  0033BC  0100               	movlb	0	; () banked
 10783  0033BE  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10784  0033C0  EC89  F02C         	call	_strcpy	;wreg free
 10785                           
 10786                           ;RTC.c: 105: break;
 10787  0033C4  D03E               	goto	l7290
 10788  0033C6                     l7284:
 10789                           
 10790                           ;RTC.c: 107: strcpy(month, "DEC");
 10791  0033C6  0EBE               	movlw	low printRTC@month
 10792  0033C8  0100               	movlb	0	; () banked
 10793  0033CA  6F80               	movwf	strcpy@to& (0+255),b
 10794  0033CC  0E00               	movlw	high printRTC@month
 10795  0033CE  0100               	movlb	0	; () banked
 10796  0033D0  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10797  0033D2  0ECE               	movlw	low STR_19
 10798  0033D4  0100               	movlb	0	; () banked
 10799  0033D6  6F82               	movwf	strcpy@from& (0+255),b
 10800  0033D8  0EFF               	movlw	high STR_19
 10801  0033DA  0100               	movlb	0	; () banked
 10802  0033DC  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10803  0033DE  EC89  F02C         	call	_strcpy	;wreg free
 10804                           
 10805                           ;RTC.c: 109: }
 10806                           
 10807                           ;RTC.c: 108: break;
 10808  0033E2  D02F               	goto	l7290
 10809  0033E4                     l7288:
 10810  0033E4  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10811  0033E8  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10812                           
 10813                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10814                           ; Switch size 1, requested type "space"
 10815                           ; Number of cases is 1, Range of values is 0 to 0
 10816                           ; switch strategies available:
 10817                           ; Name         Instructions Cycles
 10818                           ; simple_byte            4     3 (average)
 10819                           ;	Chosen strategy is simple_byte
 10820  0033EC  0100               	movlb	0	; () banked
 10821  0033EE  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10822  0033F0  0A00               	xorlw	0	; case 0
 10823  0033F2  A4D8               	btfss	status,2,c
 10824  0033F4  D026               	goto	l7290
 10825                           
 10826                           ; BSR set to: 0
 10827                           ; Switch size 1, requested type "space"
 10828                           ; Number of cases is 12, Range of values is 1 to 12
 10829                           ; switch strategies available:
 10830                           ; Name         Instructions Cycles
 10831                           ; simple_byte           37    19 (average)
 10832                           ;	Chosen strategy is simple_byte
 10833  0033F6  0100               	movlb	0	; () banked
 10834  0033F8  51AB               	movf	??_printRTC& (0+255),w,b
 10835  0033FA  0A01               	xorlw	1	; case 1
 10836  0033FC  B4D8               	btfsc	status,2,c
 10837  0033FE  D73E               	goto	l7262
 10838  003400  0A03               	xorlw	3	; case 2
 10839  003402  B4D8               	btfsc	status,2,c
 10840  003404  D74A               	goto	l7264
 10841  003406  0A01               	xorlw	1	; case 3
 10842  003408  B4D8               	btfsc	status,2,c
 10843  00340A  D756               	goto	l7266
 10844  00340C  0A07               	xorlw	7	; case 4
 10845  00340E  B4D8               	btfsc	status,2,c
 10846  003410  D762               	goto	l7268
 10847  003412  0A01               	xorlw	1	; case 5
 10848  003414  B4D8               	btfsc	status,2,c
 10849  003416  D76E               	goto	l7270
 10850  003418  0A03               	xorlw	3	; case 6
 10851  00341A  B4D8               	btfsc	status,2,c
 10852  00341C  D77A               	goto	l7272
 10853  00341E  0A01               	xorlw	1	; case 7
 10854  003420  B4D8               	btfsc	status,2,c
 10855  003422  D786               	goto	l7274
 10856  003424  0A0F               	xorlw	15	; case 8
 10857  003426  B4D8               	btfsc	status,2,c
 10858  003428  D792               	goto	l7276
 10859  00342A  0A01               	xorlw	1	; case 9
 10860  00342C  B4D8               	btfsc	status,2,c
 10861  00342E  D79E               	goto	l7278
 10862  003430  0A03               	xorlw	3	; case 10
 10863  003432  B4D8               	btfsc	status,2,c
 10864  003434  D7AA               	goto	l7280
 10865  003436  0A01               	xorlw	1	; case 11
 10866  003438  B4D8               	btfsc	status,2,c
 10867  00343A  D7B6               	goto	l7282
 10868  00343C  0A07               	xorlw	7	; case 12
 10869  00343E  B4D8               	btfsc	status,2,c
 10870  003440  D7C2               	goto	l7284
 10871  003442                     l7290:
 10872                           
 10873                           ;RTC.c: 110: lcdInst(0b10000000);;
 10874  003442  0E80               	movlw	128
 10875  003444  EC3A  F02F         	call	_lcdInst
 10876                           
 10877                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10878  003448  0ECA               	movlw	low STR_21
 10879  00344A  0100               	movlb	0	; () banked
 10880  00344C  6F8E               	movwf	printf@f& (0+255),b
 10881  00344E  0EFA               	movlw	high STR_21
 10882  003450  0100               	movlb	0	; () banked
 10883  003452  6F8F               	movwf	(printf@f+1)& (0+255),b
 10884  003454  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10885  003458  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10886  00345C  0EBE               	movlw	low printRTC@month
 10887  00345E  0100               	movlb	0	; () banked
 10888  003460  6F92               	movwf	(?_printf+4)& (0+255),b
 10889  003462  0E00               	movlw	high printRTC@month
 10890  003464  0100               	movlb	0	; () banked
 10891  003466  6F93               	movwf	(?_printf+5)& (0+255),b
 10892  003468  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10893  00346C  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10894  003470  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10895  003474  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10896  003478  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10897  00347C  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10898  003480  EC67  F00E         	call	_printf	;wreg free
 10899  003484  0012               	return		;funcret
 10900  003486                     __end_of_printRTC:
 10901                           	opt stack 0
 10902                           tblptru	equ	0xFF8
 10903                           tblptrh	equ	0xFF7
 10904                           tblptrl	equ	0xFF6
 10905                           tablat	equ	0xFF5
 10906                           prodh	equ	0xFF4
 10907                           prodl	equ	0xFF3
 10908                           intcon	equ	0xFF2
 10909                           intcon2	equ	0xFF1
 10910                           intcon3	equ	0xFF0
 10911                           postinc0	equ	0xFEE
 10912                           wreg	equ	0xFE8
 10913                           postdec1	equ	0xFE5
 10914                           fsr1l	equ	0xFE1
 10915                           indf2	equ	0xFDF
 10916                           postinc2	equ	0xFDE
 10917                           postdec2	equ	0xFDD
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922 ;; *************** function _strcpy *****************
 10923 ;; Defined at:
 10924 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10927 ;;		 -> printRTC@month(4), UI@month(4), 
 10928 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10929 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10930 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10931 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10932 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10933 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10934 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10935 ;;		 -> STR_8(4), 
 10936 ;; Auto vars:     Size  Location     Type
 10937 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10938 ;;		 -> printRTC@month(4), UI@month(4), 
 10939 ;; Return value:  Size  Location     Type
 10940 ;;                  2    0[BANK0 ] PTR unsigned char 
 10941 ;; Registers used:
 10942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10943 ;; Tracked objects:
 10944 ;;		On entry : 0/0
 10945 ;;		On exit  : 0/0
 10946 ;;		Unchanged: 0/0
 10947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10948 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10949 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;Total ram usage:        6 bytes
 10953 ;; Hardware stack levels used:    1
 10954 ;; Hardware stack levels required when called:    7
 10955 ;; This function calls:
 10956 ;;		Nothing
 10957 ;; This function is called by:
 10958 ;;		_UI
 10959 ;;		_printRTC
 10960 ;; This function uses a non-reentrant model
 10961 ;;
 10962                           
 10963                           	psect	text29
 10964  005912                     __ptext29:
 10965                           	opt stack 0
 10966  005912                     _strcpy:
 10967                           	opt stack 20
 10968                           
 10969                           ;incstack = 0
 10970  005912  C080  F084         	movff	strcpy@to,strcpy@cp
 10971  005916  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10972  00591A  D006               	goto	l6954
 10973  00591C                     l6952:
 10974  00591C  0100               	movlb	0	; () banked
 10975  00591E  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10976  005920  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10977  005922  0100               	movlb	0	; () banked
 10978  005924  4B82               	infsnz	strcpy@from& (0+255),f,b
 10979  005926  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10980  005928                     l6954:
 10981  005928  C082  FFF6         	movff	strcpy@from,tblptrl
 10982  00592C  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10983  005930                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10984  005930  6AF8               	clrf	tblptru,c
 10985  005932                     	endif
 10986  005932                     	if	0	;tblptru may be non-zero
 10987  005932                     	endif
 10988  005932  C084  FFD9         	movff	strcpy@cp,fsr2l
 10989  005936  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10990  00593A  0008               	tblrd		*
 10991  00593C  CFF5 FFDF          	movff	tablat,indf2
 10992  005940  50DF               	movf	indf2,w,c
 10993  005942  B4D8               	btfsc	status,2,c
 10994  005944  0012               	return	
 10995  005946  D7EA               	goto	l6952
 10996  005948                     __end_of_strcpy:
 10997                           	opt stack 0
 10998                           tblptru	equ	0xFF8
 10999                           tblptrh	equ	0xFF7
 11000                           tblptrl	equ	0xFF6
 11001                           tablat	equ	0xFF5
 11002                           prodh	equ	0xFF4
 11003                           prodl	equ	0xFF3
 11004                           intcon	equ	0xFF2
 11005                           intcon2	equ	0xFF1
 11006                           intcon3	equ	0xFF0
 11007                           postinc0	equ	0xFEE
 11008                           wreg	equ	0xFE8
 11009                           postdec1	equ	0xFE5
 11010                           fsr1l	equ	0xFE1
 11011                           indf2	equ	0xFDF
 11012                           postinc2	equ	0xFDE
 11013                           postdec2	equ	0xFDD
 11014                           fsr2h	equ	0xFDA
 11015                           fsr2l	equ	0xFD9
 11016                           status	equ	0xFD8
 11017                           
 11018 ;; *************** function _getRTC *****************
 11019 ;; Defined at:
 11020 ;;		line 44 in file "RTC.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;		None
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;  i               2    3[BANK0 ] int 
 11025 ;; Return value:  Size  Location     Type
 11026 ;;                  1    wreg      void 
 11027 ;; Registers used:
 11028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11029 ;; Tracked objects:
 11030 ;;		On entry : 0/0
 11031 ;;		On exit  : 0/0
 11032 ;;		Unchanged: 0/0
 11033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11035 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11037 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11038 ;;Total ram usage:        2 bytes
 11039 ;; Hardware stack levels used:    1
 11040 ;; Hardware stack levels required when called:    9
 11041 ;; This function calls:
 11042 ;;		_I2C_Master_Read
 11043 ;;		_I2C_Master_Start
 11044 ;;		_I2C_Master_Stop
 11045 ;;		_I2C_Master_Write
 11046 ;; This function is called by:
 11047 ;;		_printRTC
 11048 ;;		_initSortTimer
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           	psect	text30
 11053  004FD8                     __ptext30:
 11054                           	opt stack 0
 11055  004FD8                     _getRTC:
 11056                           	opt stack 18
 11057                           
 11058                           ;RTC.c: 48: I2C_Master_Start();
 11059                           
 11060                           ;incstack = 0
 11061  004FD8  EC60  F02F         	call	_I2C_Master_Start	;wreg free
 11062                           
 11063                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 11064  004FDC  0E00               	movlw	0
 11065  004FDE  0100               	movlb	0	; () banked
 11066  004FE0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11067  004FE2  0ED0               	movlw	208
 11068  004FE4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11069  004FE6  EC4E  F02F         	call	_I2C_Master_Write	;wreg free
 11070                           
 11071                           ;RTC.c: 50: I2C_Master_Write(0x00);
 11072  004FEA  0E00               	movlw	0
 11073  004FEC  0100               	movlb	0	; () banked
 11074  004FEE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11075  004FF0  0E00               	movlw	0
 11076  004FF2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11077  004FF4  EC4E  F02F         	call	_I2C_Master_Write	;wreg free
 11078                           
 11079                           ;RTC.c: 51: I2C_Master_Stop();
 11080  004FF8  EC5C  F02F         	call	_I2C_Master_Stop	;wreg free
 11081                           
 11082                           ;RTC.c: 54: I2C_Master_Start();
 11083  004FFC  EC60  F02F         	call	_I2C_Master_Start	;wreg free
 11084                           
 11085                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 11086  005000  0E00               	movlw	0
 11087  005002  0100               	movlb	0	; () banked
 11088  005004  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11089  005006  0ED1               	movlw	209
 11090  005008  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11091  00500A  EC4E  F02F         	call	_I2C_Master_Write	;wreg free
 11092                           
 11093                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 11094  00500E  0E00               	movlw	0
 11095  005010  0100               	movlb	0	; () banked
 11096  005012  6F84               	movwf	(getRTC@i+1)& (0+255),b
 11097  005014  0E00               	movlw	0
 11098  005016  6F83               	movwf	getRTC@i& (0+255),b
 11099  005018                     l6960:
 11100                           
 11101                           ; BSR set to: 0
 11102  005018  0100               	movlb	0	; () banked
 11103  00501A  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 11104  00501C  D008               	goto	l6964
 11105  00501E  0100               	movlb	0	; () banked
 11106  005020  5184               	movf	(getRTC@i+1)& (0+255),w,b
 11107  005022  E115               	bnz	l6970
 11108  005024  0E06               	movlw	6
 11109  005026  0100               	movlb	0	; () banked
 11110  005028  5D83               	subwf	getRTC@i& (0+255),w,b
 11111  00502A  B0D8               	btfsc	status,0,c
 11112  00502C  D010               	goto	l6970
 11113  00502E                     l6964:
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 11117  00502E  0E1C               	movlw	low _time
 11118  005030  0100               	movlb	0	; () banked
 11119  005032  2583               	addwf	getRTC@i& (0+255),w,b
 11120  005034  6ED9               	movwf	fsr2l,c
 11121  005036  0E01               	movlw	high _time
 11122  005038  0100               	movlb	0	; () banked
 11123  00503A  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 11124  00503C  6EDA               	movwf	fsr2h,c
 11125  00503E  0E01               	movlw	1
 11126  005040  ECE1  F02D         	call	_I2C_Master_Read
 11127  005044  6EDF               	movwf	indf2,c
 11128  005046  0100               	movlb	0	; () banked
 11129  005048  4B83               	infsnz	getRTC@i& (0+255),f,b
 11130  00504A  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 11131  00504C  D7E5               	goto	l6960
 11132  00504E                     l6970:
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;RTC.c: 58: }
 11136                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 11137  00504E  0E00               	movlw	0
 11138  005050  ECE1  F02D         	call	_I2C_Master_Read
 11139  005054  0101               	movlb	1	; () banked
 11140  005056  6F22               	movwf	(_time+6)& (0+255),b
 11141                           
 11142                           ;RTC.c: 60: I2C_Master_Stop();
 11143  005058  EC5C  F02F         	call	_I2C_Master_Stop	;wreg free
 11144  00505C  0012               	return		;funcret
 11145  00505E                     __end_of_getRTC:
 11146                           	opt stack 0
 11147                           tblptru	equ	0xFF8
 11148                           tblptrh	equ	0xFF7
 11149                           tblptrl	equ	0xFF6
 11150                           tablat	equ	0xFF5
 11151                           prodh	equ	0xFF4
 11152                           prodl	equ	0xFF3
 11153                           intcon	equ	0xFF2
 11154                           intcon2	equ	0xFF1
 11155                           intcon3	equ	0xFF0
 11156                           postinc0	equ	0xFEE
 11157                           wreg	equ	0xFE8
 11158                           postdec1	equ	0xFE5
 11159                           fsr1l	equ	0xFE1
 11160                           indf2	equ	0xFDF
 11161                           postinc2	equ	0xFDE
 11162                           postdec2	equ	0xFDD
 11163                           fsr2h	equ	0xFDA
 11164                           fsr2l	equ	0xFD9
 11165                           status	equ	0xFD8
 11166                           
 11167 ;; *************** function _I2C_Master_Write *****************
 11168 ;; Defined at:
 11169 ;;		line 49 in file "I2C.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;  d               2    1[BANK0 ] unsigned int 
 11172 ;; Auto vars:     Size  Location     Type
 11173 ;;		None
 11174 ;; Return value:  Size  Location     Type
 11175 ;;                  1    wreg      void 
 11176 ;; Registers used:
 11177 ;;		wreg, status,2, status,0, cstack
 11178 ;; Tracked objects:
 11179 ;;		On entry : 0/0
 11180 ;;		On exit  : 0/0
 11181 ;;		Unchanged: 0/0
 11182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;Total ram usage:        2 bytes
 11188 ;; Hardware stack levels used:    1
 11189 ;; Hardware stack levels required when called:    8
 11190 ;; This function calls:
 11191 ;;		_I2C_Master_Wait
 11192 ;; This function is called by:
 11193 ;;		_loadRTC
 11194 ;;		_getRTC
 11195 ;; This function uses a non-reentrant model
 11196 ;;
 11197                           
 11198                           	psect	text31
 11199  005E9C                     __ptext31:
 11200                           	opt stack 0
 11201  005E9C                     _I2C_Master_Write:
 11202                           	opt stack 18
 11203                           
 11204                           ;I2C.c: 51: I2C_Master_Wait();
 11205                           
 11206                           ;incstack = 0
 11207  005E9C  EC1F  F02F         	call	_I2C_Master_Wait	;wreg free
 11208                           
 11209                           ;I2C.c: 52: SSPBUF = d;
 11210  005EA0  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11211  005EA4  0012               	return		;funcret
 11212  005EA6                     __end_of_I2C_Master_Write:
 11213                           	opt stack 0
 11214                           tblptru	equ	0xFF8
 11215                           tblptrh	equ	0xFF7
 11216                           tblptrl	equ	0xFF6
 11217                           tablat	equ	0xFF5
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           intcon	equ	0xFF2
 11221                           intcon2	equ	0xFF1
 11222                           intcon3	equ	0xFF0
 11223                           postinc0	equ	0xFEE
 11224                           wreg	equ	0xFE8
 11225                           postdec1	equ	0xFE5
 11226                           fsr1l	equ	0xFE1
 11227                           indf2	equ	0xFDF
 11228                           postinc2	equ	0xFDE
 11229                           postdec2	equ	0xFDD
 11230                           fsr2h	equ	0xFDA
 11231                           fsr2l	equ	0xFD9
 11232                           status	equ	0xFD8
 11233                           
 11234 ;; *************** function _I2C_Master_Stop *****************
 11235 ;; Defined at:
 11236 ;;		line 43 in file "I2C.c"
 11237 ;; Parameters:    Size  Location     Type
 11238 ;;		None
 11239 ;; Auto vars:     Size  Location     Type
 11240 ;;		None
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      void 
 11243 ;; Registers used:
 11244 ;;		wreg, status,2, status,0, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11254 ;;Total ram usage:        0 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    8
 11257 ;; This function calls:
 11258 ;;		_I2C_Master_Wait
 11259 ;; This function is called by:
 11260 ;;		_loadRTC
 11261 ;;		_getRTC
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text32
 11266  005EB8                     __ptext32:
 11267                           	opt stack 0
 11268  005EB8                     _I2C_Master_Stop:
 11269                           	opt stack 18
 11270                           
 11271                           ;I2C.c: 45: I2C_Master_Wait();
 11272                           
 11273                           ;incstack = 0
 11274  005EB8  EC1F  F02F         	call	_I2C_Master_Wait	;wreg free
 11275                           
 11276                           ;I2C.c: 46: PEN = 1;
 11277  005EBC  84C5               	bsf	4037,2,c	;volatile
 11278  005EBE  0012               	return		;funcret
 11279  005EC0                     __end_of_I2C_Master_Stop:
 11280                           	opt stack 0
 11281                           tblptru	equ	0xFF8
 11282                           tblptrh	equ	0xFF7
 11283                           tblptrl	equ	0xFF6
 11284                           tablat	equ	0xFF5
 11285                           prodh	equ	0xFF4
 11286                           prodl	equ	0xFF3
 11287                           intcon	equ	0xFF2
 11288                           intcon2	equ	0xFF1
 11289                           intcon3	equ	0xFF0
 11290                           postinc0	equ	0xFEE
 11291                           wreg	equ	0xFE8
 11292                           postdec1	equ	0xFE5
 11293                           fsr1l	equ	0xFE1
 11294                           indf2	equ	0xFDF
 11295                           postinc2	equ	0xFDE
 11296                           postdec2	equ	0xFDD
 11297                           fsr2h	equ	0xFDA
 11298                           fsr2l	equ	0xFD9
 11299                           status	equ	0xFD8
 11300                           
 11301 ;; *************** function _I2C_Master_Start *****************
 11302 ;; Defined at:
 11303 ;;		line 31 in file "I2C.c"
 11304 ;; Parameters:    Size  Location     Type
 11305 ;;		None
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;		None
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  1    wreg      void 
 11310 ;; Registers used:
 11311 ;;		wreg, status,2, status,0, cstack
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;Total ram usage:        0 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:    8
 11324 ;; This function calls:
 11325 ;;		_I2C_Master_Wait
 11326 ;; This function is called by:
 11327 ;;		_loadRTC
 11328 ;;		_getRTC
 11329 ;; This function uses a non-reentrant model
 11330 ;;
 11331                           
 11332                           	psect	text33
 11333  005EC0                     __ptext33:
 11334                           	opt stack 0
 11335  005EC0                     _I2C_Master_Start:
 11336                           	opt stack 18
 11337                           
 11338                           ;I2C.c: 33: I2C_Master_Wait();
 11339                           
 11340                           ;incstack = 0
 11341  005EC0  EC1F  F02F         	call	_I2C_Master_Wait	;wreg free
 11342                           
 11343                           ;I2C.c: 34: SEN = 1;
 11344  005EC4  80C5               	bsf	4037,0,c	;volatile
 11345  005EC6  0012               	return		;funcret
 11346  005EC8                     __end_of_I2C_Master_Start:
 11347                           	opt stack 0
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodh	equ	0xFF4
 11353                           prodl	equ	0xFF3
 11354                           intcon	equ	0xFF2
 11355                           intcon2	equ	0xFF1
 11356                           intcon3	equ	0xFF0
 11357                           postinc0	equ	0xFEE
 11358                           wreg	equ	0xFE8
 11359                           postdec1	equ	0xFE5
 11360                           fsr1l	equ	0xFE1
 11361                           indf2	equ	0xFDF
 11362                           postinc2	equ	0xFDE
 11363                           postdec2	equ	0xFDD
 11364                           fsr2h	equ	0xFDA
 11365                           fsr2l	equ	0xFD9
 11366                           status	equ	0xFD8
 11367                           
 11368 ;; *************** function _I2C_Master_Read *****************
 11369 ;; Defined at:
 11370 ;;		line 55 in file "I2C.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;  a               1    wreg     unsigned char 
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;  a               1    1[BANK0 ] unsigned char 
 11375 ;;  temp            1    2[BANK0 ] unsigned char 
 11376 ;; Return value:  Size  Location     Type
 11377 ;;                  1    wreg      unsigned char 
 11378 ;; Registers used:
 11379 ;;		wreg, status,2, status,0, cstack
 11380 ;; Tracked objects:
 11381 ;;		On entry : 0/0
 11382 ;;		On exit  : 0/0
 11383 ;;		Unchanged: 0/0
 11384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11386 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;Total ram usage:        2 bytes
 11390 ;; Hardware stack levels used:    1
 11391 ;; Hardware stack levels required when called:    8
 11392 ;; This function calls:
 11393 ;;		_I2C_Master_Wait
 11394 ;; This function is called by:
 11395 ;;		_getRTC
 11396 ;; This function uses a non-reentrant model
 11397 ;;
 11398                           
 11399                           	psect	text34
 11400  005BC2                     __ptext34:
 11401                           	opt stack 0
 11402  005BC2                     _I2C_Master_Read:
 11403                           	opt stack 18
 11404                           
 11405                           ;incstack = 0
 11406                           ;I2C_Master_Read@a stored from wreg
 11407  005BC2  0100               	movlb	0	; () banked
 11408  005BC4  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11409                           
 11410                           ;I2C.c: 57: unsigned char temp;
 11411                           ;I2C.c: 58: I2C_Master_Wait();
 11412  005BC6  EC1F  F02F         	call	_I2C_Master_Wait	;wreg free
 11413                           
 11414                           ;I2C.c: 59: RCEN = 1;
 11415  005BCA  86C5               	bsf	4037,3,c	;volatile
 11416                           
 11417                           ;I2C.c: 60: I2C_Master_Wait();
 11418  005BCC  EC1F  F02F         	call	_I2C_Master_Wait	;wreg free
 11419                           
 11420                           ;I2C.c: 61: temp = SSPBUF;
 11421  005BD0  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11422                           
 11423                           ;I2C.c: 62: I2C_Master_Wait();
 11424  005BD4  EC1F  F02F         	call	_I2C_Master_Wait	;wreg free
 11425                           
 11426                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11427  005BD8  0100               	movlb	0	; () banked
 11428  005BDA  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11429  005BDC  0100               	movlb	0	; () banked
 11430  005BDE  A4D8               	btfss	status,2,c
 11431  005BE0  D002               	goto	u5200
 11432  005BE2  8AC5               	bsf	4037,5,c	;volatile
 11433  005BE4  D001               	goto	l6638
 11434  005BE6                     u5200:
 11435  005BE6  9AC5               	bcf	4037,5,c	;volatile
 11436  005BE8                     l6638:
 11437                           
 11438                           ;I2C.c: 64: ACKEN = 1;
 11439  005BE8  88C5               	bsf	4037,4,c	;volatile
 11440                           
 11441                           ;I2C.c: 65: return temp;
 11442  005BEA  0100               	movlb	0	; () banked
 11443  005BEC  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11444  005BEE  0012               	return	
 11445  005BF0                     __end_of_I2C_Master_Read:
 11446                           	opt stack 0
 11447                           tblptru	equ	0xFF8
 11448                           tblptrh	equ	0xFF7
 11449                           tblptrl	equ	0xFF6
 11450                           tablat	equ	0xFF5
 11451                           prodh	equ	0xFF4
 11452                           prodl	equ	0xFF3
 11453                           intcon	equ	0xFF2
 11454                           intcon2	equ	0xFF1
 11455                           intcon3	equ	0xFF0
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           postdec1	equ	0xFE5
 11459                           fsr1l	equ	0xFE1
 11460                           indf2	equ	0xFDF
 11461                           postinc2	equ	0xFDE
 11462                           postdec2	equ	0xFDD
 11463                           fsr2h	equ	0xFDA
 11464                           fsr2l	equ	0xFD9
 11465                           status	equ	0xFD8
 11466                           
 11467 ;; *************** function _I2C_Master_Wait *****************
 11468 ;; Defined at:
 11469 ;;		line 26 in file "I2C.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;		None
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;		None
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  1    wreg      void 
 11476 ;; Registers used:
 11477 ;;		wreg, status,2, status,0
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;Total ram usage:        1 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    7
 11490 ;; This function calls:
 11491 ;;		Nothing
 11492 ;; This function is called by:
 11493 ;;		_I2C_Master_Start
 11494 ;;		_I2C_Master_Stop
 11495 ;;		_I2C_Master_Write
 11496 ;;		_I2C_Master_Read
 11497 ;;		_I2C_Master_RepeatedStart
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           	psect	text35
 11502  005E3E                     __ptext35:
 11503                           	opt stack 0
 11504  005E3E                     _I2C_Master_Wait:
 11505                           	opt stack 18
 11506  005E3E                     l76:
 11507  005E3E  B4C7               	btfsc	4039,2,c	;volatile
 11508  005E40  D7FE               	goto	l76
 11509  005E42  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11510  005E46  0E1F               	movlw	31
 11511  005E48  0100               	movlb	0	; () banked
 11512  005E4A  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11513  005E4C  B4D8               	btfsc	status,2,c
 11514  005E4E  0012               	return	
 11515  005E50  D7F6               	goto	l76
 11516  005E52                     __end_of_I2C_Master_Wait:
 11517                           	opt stack 0
 11518                           tblptru	equ	0xFF8
 11519                           tblptrh	equ	0xFF7
 11520                           tblptrl	equ	0xFF6
 11521                           tablat	equ	0xFF5
 11522                           prodh	equ	0xFF4
 11523                           prodl	equ	0xFF3
 11524                           intcon	equ	0xFF2
 11525                           intcon2	equ	0xFF1
 11526                           intcon3	equ	0xFF0
 11527                           postinc0	equ	0xFEE
 11528                           wreg	equ	0xFE8
 11529                           postdec1	equ	0xFE5
 11530                           fsr1l	equ	0xFE1
 11531                           indf2	equ	0xFDF
 11532                           postinc2	equ	0xFDE
 11533                           postdec2	equ	0xFDD
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538 ;; *************** function _change_state_to_menu_22 *****************
 11539 ;; Defined at:
 11540 ;;		line 501 in file "UI.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;		None
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;		None
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  1    wreg      void 
 11547 ;; Registers used:
 11548 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;Total ram usage:        0 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:   10
 11561 ;; This function calls:
 11562 ;;		_lcdInst
 11563 ;;		_printf
 11564 ;; This function is called by:
 11565 ;;		_UI
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           	psect	text36
 11570  0058A2                     __ptext36:
 11571                           	opt stack 0
 11572  0058A2                     _change_state_to_menu_22:
 11573                           	opt stack 19
 11574                           
 11575                           ;UI.c: 502: cur_state = 22;
 11576                           
 11577                           ; BSR set to: 0
 11578                           ;incstack = 0
 11579  0058A2  0E00               	movlw	0
 11580  0058A4  0100               	movlb	0	; () banked
 11581  0058A6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11582  0058A8  0E16               	movlw	22
 11583  0058AA  6FE6               	movwf	_cur_state& (0+255),b
 11584                           
 11585                           ; BSR set to: 0
 11586                           ;UI.c: 504: lcdInst(0b10000000);;
 11587  0058AC  0E80               	movlw	128
 11588  0058AE  EC3A  F02F         	call	_lcdInst
 11589                           
 11590                           ;UI.c: 505: printf("2. SORT        <");
 11591  0058B2  0EB7               	movlw	low STR_34
 11592  0058B4  0100               	movlb	0	; () banked
 11593  0058B6  6F8E               	movwf	printf@f& (0+255),b
 11594  0058B8  0EFD               	movlw	high STR_34
 11595  0058BA  0100               	movlb	0	; () banked
 11596  0058BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11597  0058BE  EC67  F00E         	call	_printf	;wreg free
 11598                           
 11599                           ;UI.c: 506: lcdInst(0b11000000);;
 11600  0058C2  0EC0               	movlw	192
 11601  0058C4  EC3A  F02F         	call	_lcdInst
 11602                           
 11603                           ;UI.c: 507: printf("3. LOGS         ");
 11604  0058C8  0EFC               	movlw	low STR_36
 11605  0058CA  0100               	movlb	0	; () banked
 11606  0058CC  6F8E               	movwf	printf@f& (0+255),b
 11607  0058CE  0EFC               	movlw	high STR_36
 11608  0058D0  0100               	movlb	0	; () banked
 11609  0058D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11610  0058D4  EC67  F00E         	call	_printf	;wreg free
 11611  0058D8  0012               	return		;funcret
 11612  0058DA                     __end_of_change_state_to_menu_22:
 11613                           	opt stack 0
 11614                           tblptru	equ	0xFF8
 11615                           tblptrh	equ	0xFF7
 11616                           tblptrl	equ	0xFF6
 11617                           tablat	equ	0xFF5
 11618                           prodh	equ	0xFF4
 11619                           prodl	equ	0xFF3
 11620                           intcon	equ	0xFF2
 11621                           intcon2	equ	0xFF1
 11622                           intcon3	equ	0xFF0
 11623                           postinc0	equ	0xFEE
 11624                           wreg	equ	0xFE8
 11625                           postdec1	equ	0xFE5
 11626                           fsr1l	equ	0xFE1
 11627                           indf2	equ	0xFDF
 11628                           postinc2	equ	0xFDE
 11629                           postdec2	equ	0xFDD
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634 ;; *************** function _change_state_to_menu_12 *****************
 11635 ;; Defined at:
 11636 ;;		line 493 in file "UI.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;		None
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;		None
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  1    wreg      void 
 11643 ;; Registers used:
 11644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;Total ram usage:        0 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:   10
 11657 ;; This function calls:
 11658 ;;		_lcdInst
 11659 ;;		_printf
 11660 ;; This function is called by:
 11661 ;;		_UI
 11662 ;; This function uses a non-reentrant model
 11663 ;;
 11664                           
 11665                           	psect	text37
 11666  0058DA                     __ptext37:
 11667                           	opt stack 0
 11668  0058DA                     _change_state_to_menu_12:
 11669                           	opt stack 19
 11670                           
 11671                           ;UI.c: 494: cur_state = 12;
 11672                           
 11673                           ;incstack = 0
 11674  0058DA  0E00               	movlw	0
 11675  0058DC  0100               	movlb	0	; () banked
 11676  0058DE  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11677  0058E0  0E0C               	movlw	12
 11678  0058E2  6FE6               	movwf	_cur_state& (0+255),b
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;UI.c: 496: lcdInst(0b10000000);;
 11682  0058E4  0E80               	movlw	128
 11683  0058E6  EC3A  F02F         	call	_lcdInst
 11684                           
 11685                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11686  0058EA  0E1E               	movlw	low STR_33
 11687  0058EC  0100               	movlb	0	; () banked
 11688  0058EE  6F8E               	movwf	printf@f& (0+255),b
 11689  0058F0  0EFD               	movlw	high STR_33
 11690  0058F2  0100               	movlb	0	; () banked
 11691  0058F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11692  0058F6  EC67  F00E         	call	_printf	;wreg free
 11693                           
 11694                           ;UI.c: 498: lcdInst(0b11000000);;
 11695  0058FA  0EC0               	movlw	192
 11696  0058FC  EC3A  F02F         	call	_lcdInst
 11697                           
 11698                           ;UI.c: 499: printf("2. SORT        <");
 11699  005900  0EB7               	movlw	low STR_34
 11700  005902  0100               	movlb	0	; () banked
 11701  005904  6F8E               	movwf	printf@f& (0+255),b
 11702  005906  0EFD               	movlw	high STR_34
 11703  005908  0100               	movlb	0	; () banked
 11704  00590A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11705  00590C  EC67  F00E         	call	_printf	;wreg free
 11706  005910  0012               	return		;funcret
 11707  005912                     __end_of_change_state_to_menu_12:
 11708                           	opt stack 0
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           intcon2	equ	0xFF1
 11717                           intcon3	equ	0xFF0
 11718                           postinc0	equ	0xFEE
 11719                           wreg	equ	0xFE8
 11720                           postdec1	equ	0xFE5
 11721                           fsr1l	equ	0xFE1
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           fsr2h	equ	0xFDA
 11726                           fsr2l	equ	0xFD9
 11727                           status	equ	0xFD8
 11728                           
 11729 ;; *************** function ___awmod *****************
 11730 ;; Defined at:
 11731 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;  dividend        2    0[BANK0 ] int 
 11734 ;;  divisor         2    2[BANK0 ] int 
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;  sign            1    5[BANK0 ] unsigned char 
 11737 ;;  counter         1    4[BANK0 ] unsigned char 
 11738 ;; Return value:  Size  Location     Type
 11739 ;;                  2    0[BANK0 ] int 
 11740 ;; Registers used:
 11741 ;;		wreg, status,2, status,0
 11742 ;; Tracked objects:
 11743 ;;		On entry : 0/0
 11744 ;;		On exit  : 0/0
 11745 ;;		Unchanged: 0/0
 11746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11747 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11750 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11751 ;;Total ram usage:        6 bytes
 11752 ;; Hardware stack levels used:    1
 11753 ;; Hardware stack levels required when called:    7
 11754 ;; This function calls:
 11755 ;;		Nothing
 11756 ;; This function is called by:
 11757 ;;		_UI
 11758 ;; This function uses a non-reentrant model
 11759 ;;
 11760                           
 11761                           	psect	text38
 11762  004D82                     __ptext38:
 11763                           	opt stack 0
 11764  004D82                     ___awmod:
 11765                           	opt stack 22
 11766                           
 11767                           ;incstack = 0
 11768  004D82  0E00               	movlw	0
 11769  004D84  0100               	movlb	0	; () banked
 11770  004D86  6F85               	movwf	___awmod@sign& (0+255),b
 11771                           
 11772                           ; BSR set to: 0
 11773  004D88  0100               	movlb	0	; () banked
 11774  004D8A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11775  004D8C  D008               	goto	l9324
 11776                           
 11777                           ; BSR set to: 0
 11778  004D8E  0100               	movlb	0	; () banked
 11779  004D90  6D80               	negf	___awmod@dividend& (0+255),b
 11780  004D92  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11781  004D94  B0D8               	btfsc	status,0,c
 11782  004D96  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11783                           
 11784                           ; BSR set to: 0
 11785  004D98  0E01               	movlw	1
 11786  004D9A  0100               	movlb	0	; () banked
 11787  004D9C  6F85               	movwf	___awmod@sign& (0+255),b
 11788  004D9E                     l9324:
 11789                           
 11790                           ; BSR set to: 0
 11791  004D9E  0100               	movlb	0	; () banked
 11792  004DA0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11793  004DA2  D005               	goto	l9328
 11794                           
 11795                           ; BSR set to: 0
 11796  004DA4  0100               	movlb	0	; () banked
 11797  004DA6  6D82               	negf	___awmod@divisor& (0+255),b
 11798  004DA8  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11799  004DAA  B0D8               	btfsc	status,0,c
 11800  004DAC  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11801  004DAE                     l9328:
 11802                           
 11803                           ; BSR set to: 0
 11804  004DAE  0100               	movlb	0	; () banked
 11805  004DB0  5182               	movf	___awmod@divisor& (0+255),w,b
 11806  004DB2  0100               	movlb	0	; () banked
 11807  004DB4  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11808  004DB6  B4D8               	btfsc	status,2,c
 11809  004DB8  D026               	goto	l9344
 11810                           
 11811                           ; BSR set to: 0
 11812  004DBA  0E01               	movlw	1
 11813  004DBC  0100               	movlb	0	; () banked
 11814  004DBE  6F84               	movwf	___awmod@counter& (0+255),b
 11815  004DC0  D006               	goto	l9334
 11816  004DC2                     l9332:
 11817                           
 11818                           ; BSR set to: 0
 11819  004DC2  0100               	movlb	0	; () banked
 11820  004DC4  90D8               	bcf	status,0,c
 11821  004DC6  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11822  004DC8  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11823  004DCA  0100               	movlb	0	; () banked
 11824  004DCC  2B84               	incf	___awmod@counter& (0+255),f,b
 11825  004DCE                     l9334:
 11826                           
 11827                           ; BSR set to: 0
 11828  004DCE  0100               	movlb	0	; () banked
 11829  004DD0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11830  004DD2  D7F7               	goto	l9332
 11831  004DD4                     l9336:
 11832                           
 11833                           ; BSR set to: 0
 11834  004DD4  0100               	movlb	0	; () banked
 11835  004DD6  5182               	movf	___awmod@divisor& (0+255),w,b
 11836  004DD8  0100               	movlb	0	; () banked
 11837  004DDA  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11838  004DDC  0100               	movlb	0	; () banked
 11839  004DDE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11840  004DE0  0100               	movlb	0	; () banked
 11841  004DE2  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11842  004DE4  A0D8               	btfss	status,0,c
 11843  004DE6  D008               	goto	l9340
 11844                           
 11845                           ; BSR set to: 0
 11846  004DE8  0100               	movlb	0	; () banked
 11847  004DEA  5182               	movf	___awmod@divisor& (0+255),w,b
 11848  004DEC  0100               	movlb	0	; () banked
 11849  004DEE  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11850  004DF0  0100               	movlb	0	; () banked
 11851  004DF2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11852  004DF4  0100               	movlb	0	; () banked
 11853  004DF6  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11854  004DF8                     l9340:
 11855                           
 11856                           ; BSR set to: 0
 11857  004DF8  0100               	movlb	0	; () banked
 11858  004DFA  90D8               	bcf	status,0,c
 11859  004DFC  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11860  004DFE  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11861                           
 11862                           ; BSR set to: 0
 11863  004E00  0100               	movlb	0	; () banked
 11864  004E02  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11865  004E04  D7E7               	goto	l9336
 11866  004E06                     l9344:
 11867                           
 11868                           ; BSR set to: 0
 11869  004E06  0100               	movlb	0	; () banked
 11870  004E08  5185               	movf	___awmod@sign& (0+255),w,b
 11871  004E0A  0100               	movlb	0	; () banked
 11872  004E0C  B4D8               	btfsc	status,2,c
 11873  004E0E  D005               	goto	l9348
 11874                           
 11875                           ; BSR set to: 0
 11876  004E10  0100               	movlb	0	; () banked
 11877  004E12  6D80               	negf	___awmod@dividend& (0+255),b
 11878  004E14  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11879  004E16  B0D8               	btfsc	status,0,c
 11880  004E18  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11881  004E1A                     l9348:
 11882                           
 11883                           ; BSR set to: 0
 11884  004E1A  C080  F080         	movff	___awmod@dividend,?___awmod
 11885  004E1E  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11886  004E22  0012               	return	
 11887  004E24                     __end_of___awmod:
 11888                           	opt stack 0
 11889                           tblptru	equ	0xFF8
 11890                           tblptrh	equ	0xFF7
 11891                           tblptrl	equ	0xFF6
 11892                           tablat	equ	0xFF5
 11893                           prodh	equ	0xFF4
 11894                           prodl	equ	0xFF3
 11895                           intcon	equ	0xFF2
 11896                           intcon2	equ	0xFF1
 11897                           intcon3	equ	0xFF0
 11898                           postinc0	equ	0xFEE
 11899                           wreg	equ	0xFE8
 11900                           postdec1	equ	0xFE5
 11901                           fsr1l	equ	0xFE1
 11902                           indf2	equ	0xFDF
 11903                           postinc2	equ	0xFDE
 11904                           postdec2	equ	0xFDD
 11905                           fsr2h	equ	0xFDA
 11906                           fsr2l	equ	0xFD9
 11907                           status	equ	0xFD8
 11908                           
 11909 ;; *************** function ___awdiv *****************
 11910 ;; Defined at:
 11911 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;  dividend        2    6[BANK0 ] int 
 11914 ;;  divisor         2    8[BANK0 ] int 
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;  quotient        2   12[BANK0 ] int 
 11917 ;;  sign            1   11[BANK0 ] unsigned char 
 11918 ;;  counter         1   10[BANK0 ] unsigned char 
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  2    6[BANK0 ] int 
 11921 ;; Registers used:
 11922 ;;		wreg, status,2, status,0
 11923 ;; Tracked objects:
 11924 ;;		On entry : 0/0
 11925 ;;		On exit  : 0/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11928 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11929 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11931 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11932 ;;Total ram usage:        8 bytes
 11933 ;; Hardware stack levels used:    1
 11934 ;; Hardware stack levels required when called:    7
 11935 ;; This function calls:
 11936 ;;		Nothing
 11937 ;; This function is called by:
 11938 ;;		_UI
 11939 ;;		_ID
 11940 ;; This function uses a non-reentrant model
 11941 ;;
 11942                           
 11943                           	psect	text39
 11944  004B5E                     __ptext39:
 11945                           	opt stack 0
 11946  004B5E                     ___awdiv:
 11947                           	opt stack 21
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;incstack = 0
 11951  004B5E  0E00               	movlw	0
 11952  004B60  0100               	movlb	0	; () banked
 11953  004B62  6F8B               	movwf	___awdiv@sign& (0+255),b
 11954                           
 11955                           ; BSR set to: 0
 11956  004B64  0100               	movlb	0	; () banked
 11957  004B66  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11958  004B68  D008               	goto	l7576
 11959                           
 11960                           ; BSR set to: 0
 11961  004B6A  0100               	movlb	0	; () banked
 11962  004B6C  6D88               	negf	___awdiv@divisor& (0+255),b
 11963  004B6E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11964  004B70  B0D8               	btfsc	status,0,c
 11965  004B72  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11966                           
 11967                           ; BSR set to: 0
 11968  004B74  0E01               	movlw	1
 11969  004B76  0100               	movlb	0	; () banked
 11970  004B78  6F8B               	movwf	___awdiv@sign& (0+255),b
 11971  004B7A                     l7576:
 11972                           
 11973                           ; BSR set to: 0
 11974  004B7A  0100               	movlb	0	; () banked
 11975  004B7C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11976  004B7E  D008               	goto	l7582
 11977                           
 11978                           ; BSR set to: 0
 11979  004B80  0100               	movlb	0	; () banked
 11980  004B82  6D86               	negf	___awdiv@dividend& (0+255),b
 11981  004B84  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11982  004B86  B0D8               	btfsc	status,0,c
 11983  004B88  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11984                           
 11985                           ; BSR set to: 0
 11986  004B8A  0E01               	movlw	1
 11987  004B8C  0100               	movlb	0	; () banked
 11988  004B8E  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11989  004B90                     l7582:
 11990                           
 11991                           ; BSR set to: 0
 11992  004B90  0E00               	movlw	0
 11993  004B92  0100               	movlb	0	; () banked
 11994  004B94  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11995  004B96  0E00               	movlw	0
 11996  004B98  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11997                           
 11998                           ; BSR set to: 0
 11999  004B9A  0100               	movlb	0	; () banked
 12000  004B9C  5188               	movf	___awdiv@divisor& (0+255),w,b
 12001  004B9E  0100               	movlb	0	; () banked
 12002  004BA0  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12003  004BA2  B4D8               	btfsc	status,2,c
 12004  004BA4  D02C               	goto	l7604
 12005                           
 12006                           ; BSR set to: 0
 12007  004BA6  0E01               	movlw	1
 12008  004BA8  0100               	movlb	0	; () banked
 12009  004BAA  6F8A               	movwf	___awdiv@counter& (0+255),b
 12010  004BAC  D006               	goto	l7590
 12011  004BAE                     l7588:
 12012                           
 12013                           ; BSR set to: 0
 12014  004BAE  0100               	movlb	0	; () banked
 12015  004BB0  90D8               	bcf	status,0,c
 12016  004BB2  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 12017  004BB4  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12018  004BB6  0100               	movlb	0	; () banked
 12019  004BB8  2B8A               	incf	___awdiv@counter& (0+255),f,b
 12020  004BBA                     l7590:
 12021                           
 12022                           ; BSR set to: 0
 12023  004BBA  0100               	movlb	0	; () banked
 12024  004BBC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12025  004BBE  D7F7               	goto	l7588
 12026  004BC0                     l7592:
 12027                           
 12028                           ; BSR set to: 0
 12029  004BC0  0100               	movlb	0	; () banked
 12030  004BC2  90D8               	bcf	status,0,c
 12031  004BC4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 12032  004BC6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12033                           
 12034                           ; BSR set to: 0
 12035  004BC8  0100               	movlb	0	; () banked
 12036  004BCA  5188               	movf	___awdiv@divisor& (0+255),w,b
 12037  004BCC  0100               	movlb	0	; () banked
 12038  004BCE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 12039  004BD0  0100               	movlb	0	; () banked
 12040  004BD2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12041  004BD4  0100               	movlb	0	; () banked
 12042  004BD6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12043  004BD8  A0D8               	btfss	status,0,c
 12044  004BDA  D00A               	goto	l7600
 12045                           
 12046                           ; BSR set to: 0
 12047  004BDC  0100               	movlb	0	; () banked
 12048  004BDE  5188               	movf	___awdiv@divisor& (0+255),w,b
 12049  004BE0  0100               	movlb	0	; () banked
 12050  004BE2  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 12051  004BE4  0100               	movlb	0	; () banked
 12052  004BE6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12053  004BE8  0100               	movlb	0	; () banked
 12054  004BEA  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12055                           
 12056                           ; BSR set to: 0
 12057  004BEC  0100               	movlb	0	; () banked
 12058  004BEE  818C               	bsf	___awdiv@quotient& (0+255),0,b
 12059  004BF0                     l7600:
 12060                           
 12061                           ; BSR set to: 0
 12062  004BF0  0100               	movlb	0	; () banked
 12063  004BF2  90D8               	bcf	status,0,c
 12064  004BF4  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12065  004BF6  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 12066                           
 12067                           ; BSR set to: 0
 12068  004BF8  0100               	movlb	0	; () banked
 12069  004BFA  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 12070  004BFC  D7E1               	goto	l7592
 12071  004BFE                     l7604:
 12072                           
 12073                           ; BSR set to: 0
 12074  004BFE  0100               	movlb	0	; () banked
 12075  004C00  518B               	movf	___awdiv@sign& (0+255),w,b
 12076  004C02  0100               	movlb	0	; () banked
 12077  004C04  B4D8               	btfsc	status,2,c
 12078  004C06  D005               	goto	l7608
 12079                           
 12080                           ; BSR set to: 0
 12081  004C08  0100               	movlb	0	; () banked
 12082  004C0A  6D8C               	negf	___awdiv@quotient& (0+255),b
 12083  004C0C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12084  004C0E  B0D8               	btfsc	status,0,c
 12085  004C10  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12086  004C12                     l7608:
 12087                           
 12088                           ; BSR set to: 0
 12089  004C12  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 12090  004C16  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 12091  004C1A  0012               	return	
 12092  004C1C                     __end_of___awdiv:
 12093                           	opt stack 0
 12094                           tblptru	equ	0xFF8
 12095                           tblptrh	equ	0xFF7
 12096                           tblptrl	equ	0xFF6
 12097                           tablat	equ	0xFF5
 12098                           prodh	equ	0xFF4
 12099                           prodl	equ	0xFF3
 12100                           intcon	equ	0xFF2
 12101                           intcon2	equ	0xFF1
 12102                           intcon3	equ	0xFF0
 12103                           postinc0	equ	0xFEE
 12104                           wreg	equ	0xFE8
 12105                           postdec1	equ	0xFE5
 12106                           fsr1l	equ	0xFE1
 12107                           indf2	equ	0xFDF
 12108                           postinc2	equ	0xFDE
 12109                           postdec2	equ	0xFDD
 12110                           fsr2h	equ	0xFDA
 12111                           fsr2l	equ	0xFD9
 12112                           status	equ	0xFD8
 12113                           
 12114 ;; *************** function _Test *****************
 12115 ;; Defined at:
 12116 ;;		line 30 in file "Test.c"
 12117 ;; Parameters:    Size  Location     Type
 12118 ;;		None
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;		None
 12121 ;; Return value:  Size  Location     Type
 12122 ;;                  1    wreg      void 
 12123 ;; Registers used:
 12124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12125 ;; Tracked objects:
 12126 ;;		On entry : 0/0
 12127 ;;		On exit  : 0/0
 12128 ;;		Unchanged: 0/0
 12129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12134 ;;Total ram usage:        2 bytes
 12135 ;; Hardware stack levels used:    1
 12136 ;; Hardware stack levels required when called:   11
 12137 ;; This function calls:
 12138 ;;		_BlockerTest
 12139 ;;		_BothServos
 12140 ;;		_PlatformTest
 12141 ;;		_PortTestDC
 12142 ;;		_PortTestPusher
 12143 ;;		_SpeedTest
 12144 ;;		_actuatorTest
 12145 ;;		_algorithmTest
 12146 ;;		_arm
 12147 ;;		_lcdInst
 12148 ;;		_printf
 12149 ;;		_sensorTest
 12150 ;; This function is called by:
 12151 ;;		_main
 12152 ;; This function uses a non-reentrant model
 12153 ;;
 12154                           
 12155                           	psect	text40
 12156  004456                     __ptext40:
 12157                           	opt stack 0
 12158  004456                     _Test:
 12159                           	opt stack 19
 12160                           
 12161                           ;Test.c: 32: while(machine_state == Testing_state){
 12162                           
 12163                           ; BSR set to: 0
 12164                           ;incstack = 0
 12165  004456  D07C               	goto	l10110
 12166  004458                     l10070:
 12167                           
 12168                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12169  004458  0E01               	movlw	1
 12170  00445A  EC3A  F02F         	call	_lcdInst
 12171  00445E  0E68               	movlw	104
 12172  004460  0100               	movlb	0	; () banked
 12173  004462  6FC6               	movwf	??_Test& (0+255),b
 12174  004464  0EE4               	movlw	228
 12175  004466                     u10947:
 12176  004466  2EE8               	decfsz	wreg,f,c
 12177  004468  D7FE               	bra	u10947
 12178  00446A  2FC6               	decfsz	??_Test& (0+255),f,b
 12179  00446C  D7FC               	bra	u10947
 12180  00446E  F000               	nop	
 12181  004470  0E80               	movlw	128
 12182  004472  EC3A  F02F         	call	_lcdInst
 12183                           
 12184                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 12185  004476  0E74               	movlw	low STR_68
 12186  004478  0100               	movlb	0	; () banked
 12187  00447A  6F8E               	movwf	printf@f& (0+255),b
 12188  00447C  0EFC               	movlw	high STR_68
 12189  00447E  0100               	movlb	0	; () banked
 12190  004480  6F8F               	movwf	(printf@f+1)& (0+255),b
 12191  004482  EC67  F00E         	call	_printf	;wreg free
 12192                           
 12193                           ;Test.c: 35: lcdInst(0b11000000);;
 12194  004486  0EC0               	movlw	192
 12195  004488  EC3A  F02F         	call	_lcdInst
 12196                           
 12197                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 12198  00448C  0E85               	movlw	low STR_69
 12199  00448E  0100               	movlb	0	; () banked
 12200  004490  6F8E               	movwf	printf@f& (0+255),b
 12201  004492  0EFC               	movlw	high STR_69
 12202  004494  0100               	movlb	0	; () banked
 12203  004496  6F8F               	movwf	(printf@f+1)& (0+255),b
 12204  004498  EC67  F00E         	call	_printf	;wreg free
 12205  00449C                     l1265:
 12206  00449C  A281               	btfss	3969,1,c	;volatile
 12207  00449E  D7FE               	goto	l1265
 12208                           
 12209                           ;Test.c: 38: var = PORTB >> 4;
 12210  0044A0  CF81 F0C6          	movff	3969,??_Test	;volatile
 12211  0044A4  0100               	movlb	0	; () banked
 12212  0044A6  3BC6               	swapf	??_Test& (0+255),f,b
 12213  0044A8  0E0F               	movlw	15
 12214  0044AA  17C6               	andwf	??_Test& (0+255),f,b
 12215  0044AC  0100               	movlb	0	; () banked
 12216  0044AE  51C6               	movf	??_Test& (0+255),w,b
 12217  0044B0  0101               	movlb	1	; () banked
 12218  0044B2  6F4B               	movwf	_var& (0+255),b
 12219  0044B4  6B4C               	clrf	(_var+1)& (0+255),b
 12220                           
 12221                           ; BSR set to: 1
 12222                           ;Test.c: 39: var++;
 12223  0044B6  0101               	movlb	1	; () banked
 12224  0044B8  4B4B               	infsnz	_var& (0+255),f,b
 12225  0044BA  2B4C               	incf	(_var+1)& (0+255),f,b
 12226  0044BC                     l1268:
 12227  0044BC  A281               	btfss	3969,1,c	;volatile
 12228  0044BE  D01F               	goto	l10108
 12229  0044C0  D7FD               	goto	l1268
 12230  0044C2                     l10086:
 12231                           
 12232                           ;Test.c: 43: algorithmTest();
 12233  0044C2  EC12  F024         	call	_algorithmTest	;wreg free
 12234                           
 12235                           ;Test.c: 44: break;
 12236  0044C6  D044               	goto	l10110
 12237  0044C8                     l10088:
 12238                           
 12239                           ;Test.c: 46: sensorTest();
 12240  0044C8  EC5F  F017         	call	_sensorTest	;wreg free
 12241                           
 12242                           ;Test.c: 47: break;
 12243  0044CC  D041               	goto	l10110
 12244  0044CE                     l10090:
 12245                           
 12246                           ;Test.c: 49: actuatorTest();
 12247  0044CE  EC6D  F004         	call	_actuatorTest	;wreg free
 12248                           
 12249                           ;Test.c: 50: break;
 12250  0044D2  D03E               	goto	l10110
 12251  0044D4                     l10092:
 12252                           
 12253                           ;Test.c: 52: arm();
 12254  0044D4  ECAE  F022         	call	_arm	;wreg free
 12255                           
 12256                           ;Test.c: 53: break;
 12257  0044D8  D03B               	goto	l10110
 12258  0044DA                     l10094:
 12259                           
 12260                           ;Test.c: 55: PortTestDC();
 12261  0044DA  EC5E  F027         	call	_PortTestDC	;wreg free
 12262                           
 12263                           ;Test.c: 56: break;
 12264  0044DE  D038               	goto	l10110
 12265  0044E0                     l10096:
 12266                           
 12267                           ;Test.c: 58: SpeedTest();
 12268  0044E0  EC2F  F028         	call	_SpeedTest	;wreg free
 12269                           
 12270                           ;Test.c: 59: break;
 12271  0044E4  D035               	goto	l10110
 12272  0044E6                     l10098:
 12273                           
 12274                           ;Test.c: 61: PortTestPusher();
 12275  0044E6  ECD7  F02A         	call	_PortTestPusher	;wreg free
 12276                           
 12277                           ;Test.c: 62: break;
 12278  0044EA  D032               	goto	l10110
 12279  0044EC                     l10100:
 12280                           
 12281                           ;Test.c: 64: PlatformTest();
 12282  0044EC  ECD4  F015         	call	_PlatformTest	;wreg free
 12283                           
 12284                           ;Test.c: 65: break;
 12285  0044F0  D02F               	goto	l10110
 12286  0044F2                     l10102:
 12287                           
 12288                           ;Test.c: 67: BothServos();
 12289  0044F2  EC83  F010         	call	_BothServos	;wreg free
 12290                           
 12291                           ;Test.c: 68: break;
 12292  0044F6  D02C               	goto	l10110
 12293  0044F8                     l10104:
 12294                           
 12295                           ;Test.c: 70: BlockerTest();
 12296  0044F8  EC8D  F01F         	call	_BlockerTest	;wreg free
 12297                           
 12298                           ;Test.c: 74: }
 12299                           
 12300                           ;Test.c: 73: break;
 12301                           
 12302                           ;Test.c: 72: default:
 12303                           
 12304                           ;Test.c: 71: break;
 12305  0044FC  D029               	goto	l10110
 12306  0044FE                     l10108:
 12307  0044FE  C14B  F0C6         	movff	_var,??_Test
 12308  004502  C14C  F0C7         	movff	_var+1,??_Test+1
 12309                           
 12310                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12311                           ; Switch size 1, requested type "space"
 12312                           ; Number of cases is 1, Range of values is 0 to 0
 12313                           ; switch strategies available:
 12314                           ; Name         Instructions Cycles
 12315                           ; simple_byte            4     3 (average)
 12316                           ;	Chosen strategy is simple_byte
 12317  004506  0100               	movlb	0	; () banked
 12318  004508  51C7               	movf	(??_Test+1)& (0+255),w,b
 12319  00450A  0A00               	xorlw	0	; case 0
 12320  00450C  A4D8               	btfss	status,2,c
 12321  00450E  D020               	goto	l10110
 12322                           
 12323                           ; BSR set to: 0
 12324                           ; Switch size 1, requested type "space"
 12325                           ; Number of cases is 10, Range of values is 1 to 11
 12326                           ; switch strategies available:
 12327                           ; Name         Instructions Cycles
 12328                           ; simple_byte           31    16 (average)
 12329                           ;	Chosen strategy is simple_byte
 12330  004510  0100               	movlb	0	; () banked
 12331  004512  51C6               	movf	??_Test& (0+255),w,b
 12332  004514  0A01               	xorlw	1	; case 1
 12333  004516  B4D8               	btfsc	status,2,c
 12334  004518  D7D4               	goto	l10086
 12335  00451A  0A03               	xorlw	3	; case 2
 12336  00451C  B4D8               	btfsc	status,2,c
 12337  00451E  D7D4               	goto	l10088
 12338  004520  0A01               	xorlw	1	; case 3
 12339  004522  B4D8               	btfsc	status,2,c
 12340  004524  D7D4               	goto	l10090
 12341  004526  0A07               	xorlw	7	; case 4
 12342  004528  B4D8               	btfsc	status,2,c
 12343  00452A  D7D4               	goto	l10092
 12344  00452C  0A01               	xorlw	1	; case 5
 12345  00452E  B4D8               	btfsc	status,2,c
 12346  004530  D7D4               	goto	l10094
 12347  004532  0A03               	xorlw	3	; case 6
 12348  004534  B4D8               	btfsc	status,2,c
 12349  004536  D7D4               	goto	l10096
 12350  004538  0A01               	xorlw	1	; case 7
 12351  00453A  B4D8               	btfsc	status,2,c
 12352  00453C  D7D4               	goto	l10098
 12353  00453E  0A0F               	xorlw	15	; case 8
 12354  004540  B4D8               	btfsc	status,2,c
 12355  004542  D7D4               	goto	l10100
 12356  004544  0A02               	xorlw	2	; case 10
 12357  004546  B4D8               	btfsc	status,2,c
 12358  004548  D7D4               	goto	l10102
 12359  00454A  0A01               	xorlw	1	; case 11
 12360  00454C  B4D8               	btfsc	status,2,c
 12361  00454E  D7D4               	goto	l10104
 12362  004550                     l10110:
 12363  004550  0E03               	movlw	3
 12364  004552  0100               	movlb	0	; () banked
 12365  004554  19FC               	xorwf	_machine_state& (0+255),w,b
 12366  004556  A4D8               	btfss	status,2,c
 12367  004558  0012               	return	
 12368  00455A  D77E               	goto	l10070
 12369  00455C                     __end_of_Test:
 12370                           	opt stack 0
 12371                           tblptru	equ	0xFF8
 12372                           tblptrh	equ	0xFF7
 12373                           tblptrl	equ	0xFF6
 12374                           tablat	equ	0xFF5
 12375                           prodh	equ	0xFF4
 12376                           prodl	equ	0xFF3
 12377                           intcon	equ	0xFF2
 12378                           intcon2	equ	0xFF1
 12379                           intcon3	equ	0xFF0
 12380                           postinc0	equ	0xFEE
 12381                           wreg	equ	0xFE8
 12382                           postdec1	equ	0xFE5
 12383                           fsr1l	equ	0xFE1
 12384                           indf2	equ	0xFDF
 12385                           postinc2	equ	0xFDE
 12386                           postdec2	equ	0xFDD
 12387                           fsr2h	equ	0xFDA
 12388                           fsr2l	equ	0xFD9
 12389                           status	equ	0xFD8
 12390                           
 12391 ;; *************** function _sensorTest *****************
 12392 ;; Defined at:
 12393 ;;		line 122 in file "Test.c"
 12394 ;; Parameters:    Size  Location     Type
 12395 ;;		None
 12396 ;; Auto vars:     Size  Location     Type
 12397 ;;  res             2   45[BANK0 ] int 
 12398 ;; Return value:  Size  Location     Type
 12399 ;;                  1    wreg      void 
 12400 ;; Registers used:
 12401 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12402 ;; Tracked objects:
 12403 ;;		On entry : 0/0
 12404 ;;		On exit  : 0/0
 12405 ;;		Unchanged: 0/0
 12406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12408 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12410 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12411 ;;Total ram usage:        4 bytes
 12412 ;; Hardware stack levels used:    1
 12413 ;; Hardware stack levels required when called:   10
 12414 ;; This function calls:
 12415 ;;		_lcdInst
 12416 ;;		_printf
 12417 ;;		_readADC
 12418 ;;		_readMAG
 12419 ;; This function is called by:
 12420 ;;		_Test
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           	psect	text41
 12425  002EBE                     __ptext41:
 12426                           	opt stack 0
 12427  002EBE                     _sensorTest:
 12428                           	opt stack 19
 12429                           
 12430                           ;Test.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12431                           
 12432                           ; BSR set to: 0
 12433                           ;incstack = 0
 12434  002EBE  0E01               	movlw	1
 12435  002EC0  EC3A  F02F         	call	_lcdInst
 12436  002EC4  0E68               	movlw	104
 12437  002EC6  0100               	movlb	0	; () banked
 12438  002EC8  6FAB               	movwf	??_sensorTest& (0+255),b
 12439  002ECA  0EE4               	movlw	228
 12440  002ECC                     u10957:
 12441  002ECC  2EE8               	decfsz	wreg,f,c
 12442  002ECE  D7FE               	bra	u10957
 12443  002ED0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12444  002ED2  D7FC               	bra	u10957
 12445  002ED4  F000               	nop	
 12446  002ED6  0E80               	movlw	128
 12447  002ED8  EC3A  F02F         	call	_lcdInst
 12448                           
 12449                           ;Test.c: 125: printf("SENSORS");
 12450  002EDC  0EAD               	movlw	low STR_77
 12451  002EDE  0100               	movlb	0	; () banked
 12452  002EE0  6F8E               	movwf	printf@f& (0+255),b
 12453  002EE2  0EFF               	movlw	high STR_77
 12454  002EE4  0100               	movlb	0	; () banked
 12455  002EE6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12456  002EE8  EC67  F00E         	call	_printf	;wreg free
 12457                           
 12458                           ;Test.c: 126: lcdInst(0b11000000);;
 12459  002EEC  0EC0               	movlw	192
 12460  002EEE  EC3A  F02F         	call	_lcdInst
 12461                           
 12462                           ;Test.c: 127: printf("PUSH TO START");
 12463  002EF2  0E2D               	movlw	low STR_71
 12464  002EF4  0100               	movlb	0	; () banked
 12465  002EF6  6F8E               	movwf	printf@f& (0+255),b
 12466  002EF8  0EFF               	movlw	high STR_71
 12467  002EFA  0100               	movlb	0	; () banked
 12468  002EFC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12469  002EFE  EC67  F00E         	call	_printf	;wreg free
 12470                           
 12471                           ;Test.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
 12472  002F02  0E05               	movlw	5
 12473  002F04  0100               	movlb	0	; () banked
 12474  002F06  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12475  002F08  0E0F               	movlw	15
 12476  002F0A  0100               	movlb	0	; () banked
 12477  002F0C  6FAB               	movwf	??_sensorTest& (0+255),b
 12478  002F0E  0EF1               	movlw	241
 12479  002F10                     u10967:
 12480  002F10  2EE8               	decfsz	wreg,f,c
 12481  002F12  D7FE               	bra	u10967
 12482  002F14  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12483  002F16  D7FC               	bra	u10967
 12484  002F18  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12485  002F1A  D7FA               	bra	u10967
 12486  002F1C                     l1297:
 12487  002F1C  A281               	btfss	3969,1,c	;volatile
 12488  002F1E  D7FE               	goto	l1297
 12489  002F20                     l1300:
 12490  002F20  B281               	btfsc	3969,1,c	;volatile
 12491  002F22  D7FE               	goto	l1300
 12492                           
 12493                           ;Test.c: 131: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12494  002F24  0E01               	movlw	1
 12495  002F26  EC3A  F02F         	call	_lcdInst
 12496  002F2A  0E68               	movlw	104
 12497  002F2C  0100               	movlb	0	; () banked
 12498  002F2E  6FAB               	movwf	??_sensorTest& (0+255),b
 12499  002F30  0EE4               	movlw	228
 12500  002F32                     u10977:
 12501  002F32  2EE8               	decfsz	wreg,f,c
 12502  002F34  D7FE               	bra	u10977
 12503  002F36  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12504  002F38  D7FC               	bra	u10977
 12505  002F3A  F000               	nop	
 12506  002F3C  0E80               	movlw	128
 12507  002F3E  EC3A  F02F         	call	_lcdInst
 12508                           
 12509                           ;Test.c: 136: printf("TST: IR SNSR");
 12510  002F42  0E57               	movlw	low STR_79
 12511  002F44  0100               	movlb	0	; () banked
 12512  002F46  6F8E               	movwf	printf@f& (0+255),b
 12513  002F48  0EFF               	movlw	high STR_79
 12514  002F4A  0100               	movlb	0	; () banked
 12515  002F4C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12516  002F4E  EC67  F00E         	call	_printf	;wreg free
 12517                           
 12518                           ;Test.c: 137: _delay((unsigned long)((100)*(32000000/4000.0)));
 12519  002F52  0E05               	movlw	5
 12520  002F54  0100               	movlb	0	; () banked
 12521  002F56  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12522  002F58  0E0F               	movlw	15
 12523  002F5A  0100               	movlb	0	; () banked
 12524  002F5C  6FAB               	movwf	??_sensorTest& (0+255),b
 12525  002F5E  0EF1               	movlw	241
 12526  002F60                     u10987:
 12527  002F60  2EE8               	decfsz	wreg,f,c
 12528  002F62  D7FE               	bra	u10987
 12529  002F64  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12530  002F66  D7FC               	bra	u10987
 12531  002F68  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12532  002F6A  D7FA               	bra	u10987
 12533                           
 12534                           ;Test.c: 138: LATCbits.LATC5 = 1;
 12535  002F6C  8A8B               	bsf	3979,5,c	;volatile
 12536                           
 12537                           ;Test.c: 140: while(PORTBbits.RB1 == 0){
 12538  002F6E  D05C               	goto	l8438
 12539  002F70                     l8420:
 12540                           
 12541                           ;Test.c: 141: readADC(0);
 12542  002F70  0E00               	movlw	0
 12543  002F72  EC25  F02E         	call	_readADC
 12544                           
 12545                           ;Test.c: 142: int res = ADRESH<<8 | ADRESL;
 12546  002F76  50C3               	movf	4035,w,c	;volatile
 12547  002F78  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12548  002F7C  0100               	movlb	0	; () banked
 12549  002F7E  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12550  002F80  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12551  002F84  0100               	movlb	0	; () banked
 12552  002F86  6BAB               	clrf	??_sensorTest& (0+255),b
 12553  002F88  0100               	movlb	0	; () banked
 12554  002F8A  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12555  002F8C  0100               	movlb	0	; () banked
 12556  002F8E  6FAD               	movwf	sensorTest@res& (0+255),b
 12557  002F90  0100               	movlb	0	; () banked
 12558  002F92  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12559  002F94  0100               	movlb	0	; () banked
 12560  002F96  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;Test.c: 143: IR_signal = (res > 800) ? 1 : 0;
 12564  002F98  0100               	movlb	0	; () banked
 12565  002F9A  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12566  002F9C  D00A               	goto	u7490
 12567  002F9E  0E21               	movlw	33
 12568  002FA0  0100               	movlb	0	; () banked
 12569  002FA2  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12570  002FA4  0E03               	movlw	3
 12571  002FA6  0100               	movlb	0	; () banked
 12572  002FA8  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12573  002FAA  A0D8               	btfss	status,0,c
 12574  002FAC  D002               	goto	u7490
 12575  002FAE  0E01               	movlw	1
 12576  002FB0  D001               	goto	u7500
 12577  002FB2                     u7490:
 12578  002FB2  0E00               	movlw	0
 12579  002FB4                     u7500:
 12580  002FB4  0100               	movlb	0	; () banked
 12581  002FB6  6FE0               	movwf	_IR_signal& (0+255),b
 12582  002FB8  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12583                           
 12584                           ;Test.c: 145: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12585  002FBA  0E01               	movlw	1
 12586  002FBC  EC3A  F02F         	call	_lcdInst
 12587  002FC0  0E68               	movlw	104
 12588  002FC2  0100               	movlb	0	; () banked
 12589  002FC4  6FAB               	movwf	??_sensorTest& (0+255),b
 12590  002FC6  0EE4               	movlw	228
 12591  002FC8                     u10997:
 12592  002FC8  2EE8               	decfsz	wreg,f,c
 12593  002FCA  D7FE               	bra	u10997
 12594  002FCC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12595  002FCE  D7FC               	bra	u10997
 12596  002FD0  F000               	nop	
 12597  002FD2  0E80               	movlw	128
 12598  002FD4  EC3A  F02F         	call	_lcdInst
 12599                           
 12600                           ;Test.c: 146: printf("IR_signal: %d ", IR_signal);
 12601  002FD8  0E7C               	movlw	low STR_80
 12602  002FDA  0100               	movlb	0	; () banked
 12603  002FDC  6F8E               	movwf	printf@f& (0+255),b
 12604  002FDE  0EFE               	movlw	high STR_80
 12605  002FE0  0100               	movlb	0	; () banked
 12606  002FE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12607  002FE4  C0E0  F090         	movff	_IR_signal,?_printf+2
 12608  002FE8  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12609  002FEC  EC67  F00E         	call	_printf	;wreg free
 12610                           
 12611                           ;Test.c: 147: lcdInst(0b11000000);;
 12612  002FF0  0EC0               	movlw	192
 12613  002FF2  EC3A  F02F         	call	_lcdInst
 12614                           
 12615                           ;Test.c: 148: printf("%d", res);
 12616  002FF6  0E09               	movlw	low (STR_27+14)
 12617  002FF8  0100               	movlb	0	; () banked
 12618  002FFA  6F8E               	movwf	printf@f& (0+255),b
 12619  002FFC  0EFE               	movlw	high (STR_27+14)
 12620  002FFE  0100               	movlb	0	; () banked
 12621  003000  6F8F               	movwf	(printf@f+1)& (0+255),b
 12622  003002  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12623  003006  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12624  00300A  EC67  F00E         	call	_printf	;wreg free
 12625                           
 12626                           ;Test.c: 149: _delay((unsigned long)((100)*(32000000/4000.0)));
 12627  00300E  0E05               	movlw	5
 12628  003010  0100               	movlb	0	; () banked
 12629  003012  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12630  003014  0E0F               	movlw	15
 12631  003016  0100               	movlb	0	; () banked
 12632  003018  6FAB               	movwf	??_sensorTest& (0+255),b
 12633  00301A  0EF1               	movlw	241
 12634  00301C                     u11007:
 12635  00301C  2EE8               	decfsz	wreg,f,c
 12636  00301E  D7FE               	bra	u11007
 12637  003020  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12638  003022  D7FC               	bra	u11007
 12639  003024  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12640  003026  D7FA               	bra	u11007
 12641  003028                     l8438:
 12642  003028  A281               	btfss	3969,1,c	;volatile
 12643  00302A  D7A2               	goto	l8420
 12644                           
 12645                           ;Test.c: 150: }
 12646                           ;Test.c: 151: LATCbits.LATC5 = 0;
 12647  00302C  9A8B               	bcf	3979,5,c	;volatile
 12648                           
 12649                           ;Test.c: 159: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12650  00302E  0E01               	movlw	1
 12651  003030  EC3A  F02F         	call	_lcdInst
 12652  003034  0E68               	movlw	104
 12653  003036  0100               	movlb	0	; () banked
 12654  003038  6FAB               	movwf	??_sensorTest& (0+255),b
 12655  00303A  0EE4               	movlw	228
 12656  00303C                     u11017:
 12657  00303C  2EE8               	decfsz	wreg,f,c
 12658  00303E  D7FE               	bra	u11017
 12659  003040  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12660  003042  D7FC               	bra	u11017
 12661  003044  F000               	nop	
 12662  003046  0E80               	movlw	128
 12663  003048  EC3A  F02F         	call	_lcdInst
 12664                           
 12665                           ;Test.c: 160: printf("TST: MAGNETISM");
 12666  00304C  0EA9               	movlw	low STR_82
 12667  00304E  0100               	movlb	0	; () banked
 12668  003050  6F8E               	movwf	printf@f& (0+255),b
 12669  003052  0EFE               	movlw	high STR_82
 12670  003054  0100               	movlb	0	; () banked
 12671  003056  6F8F               	movwf	(printf@f+1)& (0+255),b
 12672  003058  EC67  F00E         	call	_printf	;wreg free
 12673                           
 12674                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 12675  00305C  0E05               	movlw	5
 12676  00305E  0100               	movlb	0	; () banked
 12677  003060  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12678  003062  0E0F               	movlw	15
 12679  003064  0100               	movlb	0	; () banked
 12680  003066  6FAB               	movwf	??_sensorTest& (0+255),b
 12681  003068  0EF1               	movlw	241
 12682  00306A                     u11027:
 12683  00306A  2EE8               	decfsz	wreg,f,c
 12684  00306C  D7FE               	bra	u11027
 12685  00306E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12686  003070  D7FC               	bra	u11027
 12687  003072  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12688  003074  D7FA               	bra	u11027
 12689                           
 12690                           ;Test.c: 162: while(PORTBbits.RB1 == 0){
 12691  003076  D021               	goto	l8456
 12692  003078                     l8450:
 12693                           
 12694                           ;Test.c: 163: readMAG();
 12695  003078  ECA8  F02B         	call	_readMAG	;wreg free
 12696                           
 12697                           ;Test.c: 164: lcdInst(0b10000000);;
 12698  00307C  0E80               	movlw	128
 12699  00307E  EC3A  F02F         	call	_lcdInst
 12700                           
 12701                           ;Test.c: 165: lcdInst(0b11000000);;
 12702  003082  0EC0               	movlw	192
 12703  003084  EC3A  F02F         	call	_lcdInst
 12704                           
 12705                           ;Test.c: 166: printf("MAG_signal: %d ", MAG_signal);
 12706  003088  0E1D               	movlw	low STR_83
 12707  00308A  0100               	movlb	0	; () banked
 12708  00308C  6F8E               	movwf	printf@f& (0+255),b
 12709  00308E  0EFE               	movlw	high STR_83
 12710  003090  0100               	movlb	0	; () banked
 12711  003092  6F8F               	movwf	(printf@f+1)& (0+255),b
 12712  003094  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12713  003098  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12714  00309C  EC67  F00E         	call	_printf	;wreg free
 12715                           
 12716                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 12717  0030A0  0E05               	movlw	5
 12718  0030A2  0100               	movlb	0	; () banked
 12719  0030A4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12720  0030A6  0E0F               	movlw	15
 12721  0030A8  0100               	movlb	0	; () banked
 12722  0030AA  6FAB               	movwf	??_sensorTest& (0+255),b
 12723  0030AC  0EF1               	movlw	241
 12724  0030AE                     u11037:
 12725  0030AE  2EE8               	decfsz	wreg,f,c
 12726  0030B0  D7FE               	bra	u11037
 12727  0030B2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12728  0030B4  D7FC               	bra	u11037
 12729  0030B6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12730  0030B8  D7FA               	bra	u11037
 12731  0030BA                     l8456:
 12732  0030BA  A281               	btfss	3969,1,c	;volatile
 12733  0030BC  D7DD               	goto	l8450
 12734                           
 12735                           ;Test.c: 168: }
 12736                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12737  0030BE  0E01               	movlw	1
 12738  0030C0  EC3A  F02F         	call	_lcdInst
 12739  0030C4  0E68               	movlw	104
 12740  0030C6  0100               	movlb	0	; () banked
 12741  0030C8  6FAB               	movwf	??_sensorTest& (0+255),b
 12742  0030CA  0EE4               	movlw	228
 12743  0030CC                     u11047:
 12744  0030CC  2EE8               	decfsz	wreg,f,c
 12745  0030CE  D7FE               	bra	u11047
 12746  0030D0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12747  0030D2  D7FC               	bra	u11047
 12748  0030D4  F000               	nop	
 12749  0030D6  0E80               	movlw	128
 12750  0030D8  EC3A  F02F         	call	_lcdInst
 12751                           
 12752                           ;Test.c: 174: printf("TST: COND");
 12753  0030DC  0E86               	movlw	low STR_84
 12754  0030DE  0100               	movlb	0	; () banked
 12755  0030E0  6F8E               	movwf	printf@f& (0+255),b
 12756  0030E2  0EFF               	movlw	high STR_84
 12757  0030E4  0100               	movlb	0	; () banked
 12758  0030E6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12759  0030E8  EC67  F00E         	call	_printf	;wreg free
 12760                           
 12761                           ;Test.c: 175: _delay((unsigned long)((100)*(32000000/4000.0)));
 12762  0030EC  0E05               	movlw	5
 12763  0030EE  0100               	movlb	0	; () banked
 12764  0030F0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12765  0030F2  0E0F               	movlw	15
 12766  0030F4  0100               	movlb	0	; () banked
 12767  0030F6  6FAB               	movwf	??_sensorTest& (0+255),b
 12768  0030F8  0EF1               	movlw	241
 12769  0030FA                     u11057:
 12770  0030FA  2EE8               	decfsz	wreg,f,c
 12771  0030FC  D7FE               	bra	u11057
 12772  0030FE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12773  003100  D7FC               	bra	u11057
 12774  003102  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12775  003104  D7FA               	bra	u11057
 12776  003106                     l8468:
 12777                           
 12778                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12779  003106  0E01               	movlw	1
 12780  003108  EC3A  F02F         	call	_lcdInst
 12781  00310C  0E68               	movlw	104
 12782  00310E  0100               	movlb	0	; () banked
 12783  003110  6FAB               	movwf	??_sensorTest& (0+255),b
 12784  003112  0EE4               	movlw	228
 12785  003114                     u11067:
 12786  003114  2EE8               	decfsz	wreg,f,c
 12787  003116  D7FE               	bra	u11067
 12788  003118  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12789  00311A  D7FC               	bra	u11067
 12790  00311C  F000               	nop	
 12791  00311E  0E80               	movlw	128
 12792  003120  EC3A  F02F         	call	_lcdInst
 12793                           
 12794                           ;Test.c: 178: printf("TST: COND");
 12795  003124  0E86               	movlw	low STR_84
 12796  003126  0100               	movlb	0	; () banked
 12797  003128  6F8E               	movwf	printf@f& (0+255),b
 12798  00312A  0EFF               	movlw	high STR_84
 12799  00312C  0100               	movlb	0	; () banked
 12800  00312E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12801  003130  EC67  F00E         	call	_printf	;wreg free
 12802                           
 12803                           ;Test.c: 179: while(PORTBbits.RB1 == 0){
 12804  003134  D01B               	goto	l8480
 12805  003136                     l8476:
 12806                           
 12807                           ;Test.c: 183: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12808  003136  0E80               	movlw	128
 12809  003138  EC3A  F02F         	call	_lcdInst
 12810  00313C  0EC0               	movlw	192
 12811  00313E  EC3A  F02F         	call	_lcdInst
 12812                           
 12813                           ;Test.c: 184: printf("COND: %d", PORTAbits.RA2);
 12814  003142  0EA4               	movlw	low STR_86
 12815  003144  0100               	movlb	0	; () banked
 12816  003146  6F8E               	movwf	printf@f& (0+255),b
 12817  003148  0EFF               	movlw	high STR_86
 12818  00314A  0100               	movlb	0	; () banked
 12819  00314C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12820  00314E  A480               	btfss	3968,2,c	;volatile
 12821  003150  D004               	goto	u7530
 12822  003152  0100               	movlb	0	; () banked
 12823  003154  6BAB               	clrf	??_sensorTest& (0+255),b
 12824  003156  2BAB               	incf	??_sensorTest& (0+255),f,b
 12825  003158  D002               	goto	u7538
 12826  00315A                     u7530:
 12827  00315A  0100               	movlb	0	; () banked
 12828  00315C  6BAB               	clrf	??_sensorTest& (0+255),b
 12829  00315E                     u7538:
 12830  00315E  0100               	movlb	0	; () banked
 12831  003160  51AB               	movf	??_sensorTest& (0+255),w,b
 12832  003162  0100               	movlb	0	; () banked
 12833  003164  6F90               	movwf	(?_printf+2)& (0+255),b
 12834  003166  6B91               	clrf	(?_printf+3)& (0+255),b
 12835  003168  EC67  F00E         	call	_printf	;wreg free
 12836  00316C                     l8480:
 12837  00316C  A281               	btfss	3969,1,c	;volatile
 12838  00316E  D7E3               	goto	l8476
 12839                           
 12840                           ;Test.c: 185: }
 12841                           ;Test.c: 186: if(PORTB >> 4 == 0b1111){
 12842  003170  3881               	swapf	3969,w,c	;volatile
 12843  003172  0B0F               	andlw	15
 12844  003174  0A0F               	xorlw	15
 12845  003176  B4D8               	btfsc	status,2,c
 12846  003178  0012               	return	
 12847                           
 12848                           ;Test.c: 189: else{
 12849                           ;Test.c: 190: LATCbits.LATC7 = 1;
 12850                           
 12851                           ;Test.c: 188: }
 12852                           
 12853                           ;Test.c: 187: break;
 12854  00317A  8E8B               	bsf	3979,7,c	;volatile
 12855                           
 12856                           ;Test.c: 191: while(PORTBbits.RB1 == 1){
 12857  00317C  D01B               	goto	l8492
 12858  00317E                     l8488:
 12859                           
 12860                           ;Test.c: 193: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12861  00317E  0E80               	movlw	128
 12862  003180  EC3A  F02F         	call	_lcdInst
 12863  003184  0EC0               	movlw	192
 12864  003186  EC3A  F02F         	call	_lcdInst
 12865                           
 12866                           ;Test.c: 194: printf("COND: %d", PORTAbits.RA2);
 12867  00318A  0EA4               	movlw	low STR_86
 12868  00318C  0100               	movlb	0	; () banked
 12869  00318E  6F8E               	movwf	printf@f& (0+255),b
 12870  003190  0EFF               	movlw	high STR_86
 12871  003192  0100               	movlb	0	; () banked
 12872  003194  6F8F               	movwf	(printf@f+1)& (0+255),b
 12873  003196  A480               	btfss	3968,2,c	;volatile
 12874  003198  D004               	goto	u7560
 12875  00319A  0100               	movlb	0	; () banked
 12876  00319C  6BAB               	clrf	??_sensorTest& (0+255),b
 12877  00319E  2BAB               	incf	??_sensorTest& (0+255),f,b
 12878  0031A0  D002               	goto	u7568
 12879  0031A2                     u7560:
 12880  0031A2  0100               	movlb	0	; () banked
 12881  0031A4  6BAB               	clrf	??_sensorTest& (0+255),b
 12882  0031A6                     u7568:
 12883  0031A6  0100               	movlb	0	; () banked
 12884  0031A8  51AB               	movf	??_sensorTest& (0+255),w,b
 12885  0031AA  0100               	movlb	0	; () banked
 12886  0031AC  6F90               	movwf	(?_printf+2)& (0+255),b
 12887  0031AE  6B91               	clrf	(?_printf+3)& (0+255),b
 12888  0031B0  EC67  F00E         	call	_printf	;wreg free
 12889  0031B4                     l8492:
 12890  0031B4  B281               	btfsc	3969,1,c	;volatile
 12891  0031B6  D7E3               	goto	l8488
 12892                           
 12893                           ;Test.c: 195: }
 12894                           ;Test.c: 196: LATCbits.LATC7 = !1;
 12895  0031B8  9E8B               	bcf	3979,7,c	;volatile
 12896  0031BA  D7A5               	goto	l8468
 12897  0031BC                     __end_of_sensorTest:
 12898                           	opt stack 0
 12899                           tblptru	equ	0xFF8
 12900                           tblptrh	equ	0xFF7
 12901                           tblptrl	equ	0xFF6
 12902                           tablat	equ	0xFF5
 12903                           prodh	equ	0xFF4
 12904                           prodl	equ	0xFF3
 12905                           intcon	equ	0xFF2
 12906                           intcon2	equ	0xFF1
 12907                           intcon3	equ	0xFF0
 12908                           postinc0	equ	0xFEE
 12909                           wreg	equ	0xFE8
 12910                           postdec1	equ	0xFE5
 12911                           fsr1l	equ	0xFE1
 12912                           indf2	equ	0xFDF
 12913                           postinc2	equ	0xFDE
 12914                           postdec2	equ	0xFDD
 12915                           fsr2h	equ	0xFDA
 12916                           fsr2l	equ	0xFD9
 12917                           status	equ	0xFD8
 12918                           
 12919 ;; *************** function _readMAG *****************
 12920 ;; Defined at:
 12921 ;;		line 38 in file "ADCFunctionality.c"
 12922 ;; Parameters:    Size  Location     Type
 12923 ;;		None
 12924 ;; Auto vars:     Size  Location     Type
 12925 ;;  res             2    4[BANK0 ] int 
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1    wreg      void 
 12928 ;; Registers used:
 12929 ;;		wreg, status,2, status,0, cstack
 12930 ;; Tracked objects:
 12931 ;;		On entry : 0/0
 12932 ;;		On exit  : 0/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12936 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12937 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12938 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12939 ;;Total ram usage:        4 bytes
 12940 ;; Hardware stack levels used:    1
 12941 ;; Hardware stack levels required when called:    8
 12942 ;; This function calls:
 12943 ;;		_readADC
 12944 ;; This function is called by:
 12945 ;;		_getMAG
 12946 ;;		_sensorTest
 12947 ;; This function uses a non-reentrant model
 12948 ;;
 12949                           
 12950                           	psect	text42
 12951  005750                     __ptext42:
 12952                           	opt stack 0
 12953  005750                     _readMAG:
 12954                           	opt stack 19
 12955                           
 12956                           ;ADCFunctionality.c: 39: readADC(1);
 12957                           
 12958                           ;incstack = 0
 12959  005750  0E01               	movlw	1
 12960  005752  EC25  F02E         	call	_readADC
 12961                           
 12962                           ;ADCFunctionality.c: 40: int res = ADRESH<<8 | ADRESL;
 12963  005756  50C3               	movf	4035,w,c	;volatile
 12964  005758  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12965  00575C  0100               	movlb	0	; () banked
 12966  00575E  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12967  005760  C082  F083         	movff	??_readMAG,??_readMAG+1
 12968  005764  0100               	movlb	0	; () banked
 12969  005766  6B82               	clrf	??_readMAG& (0+255),b
 12970  005768  0100               	movlb	0	; () banked
 12971  00576A  1182               	iorwf	??_readMAG& (0+255),w,b
 12972  00576C  0100               	movlb	0	; () banked
 12973  00576E  6F84               	movwf	readMAG@res& (0+255),b
 12974  005770  0100               	movlb	0	; () banked
 12975  005772  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12976  005774  0100               	movlb	0	; () banked
 12977  005776  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12978                           
 12979                           ; BSR set to: 0
 12980                           ;ADCFunctionality.c: 41: MAG_signal = (res < 150) ? 1 : 0;
 12981  005778  0100               	movlb	0	; () banked
 12982  00577A  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12983  00577C  D008               	goto	u5441
 12984  00577E  0100               	movlb	0	; () banked
 12985  005780  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12986  005782  E107               	bnz	u5440
 12987  005784  0E96               	movlw	150
 12988  005786  0100               	movlb	0	; () banked
 12989  005788  5D84               	subwf	readMAG@res& (0+255),w,b
 12990  00578A  B0D8               	btfsc	status,0,c
 12991  00578C  D002               	goto	u5440
 12992  00578E                     u5441:
 12993  00578E  0E01               	movlw	1
 12994  005790  D001               	goto	u5450
 12995  005792                     u5440:
 12996  005792  0E00               	movlw	0
 12997  005794                     u5450:
 12998  005794  0100               	movlb	0	; () banked
 12999  005796  6FE2               	movwf	_MAG_signal& (0+255),b
 13000  005798  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 13001                           
 13002                           ; BSR set to: 0
 13003  00579A  0012               	return		;funcret
 13004  00579C                     __end_of_readMAG:
 13005                           	opt stack 0
 13006                           tblptru	equ	0xFF8
 13007                           tblptrh	equ	0xFF7
 13008                           tblptrl	equ	0xFF6
 13009                           tablat	equ	0xFF5
 13010                           prodh	equ	0xFF4
 13011                           prodl	equ	0xFF3
 13012                           intcon	equ	0xFF2
 13013                           intcon2	equ	0xFF1
 13014                           intcon3	equ	0xFF0
 13015                           postinc0	equ	0xFEE
 13016                           wreg	equ	0xFE8
 13017                           postdec1	equ	0xFE5
 13018                           fsr1l	equ	0xFE1
 13019                           indf2	equ	0xFDF
 13020                           postinc2	equ	0xFDE
 13021                           postdec2	equ	0xFDD
 13022                           fsr2h	equ	0xFDA
 13023                           fsr2l	equ	0xFD9
 13024                           status	equ	0xFD8
 13025                           
 13026 ;; *************** function _arm *****************
 13027 ;; Defined at:
 13028 ;;		line 616 in file "Test.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;		None
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;  on              2   44[BANK0 ] int 
 13033 ;; Return value:  Size  Location     Type
 13034 ;;                  1    wreg      void 
 13035 ;; Registers used:
 13036 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13037 ;; Tracked objects:
 13038 ;;		On entry : 0/0
 13039 ;;		On exit  : 0/0
 13040 ;;		Unchanged: 0/0
 13041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13043 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13045 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13046 ;;Total ram usage:        3 bytes
 13047 ;; Hardware stack levels used:    1
 13048 ;; Hardware stack levels required when called:   10
 13049 ;; This function calls:
 13050 ;;		_lcdInst
 13051 ;;		_printf
 13052 ;;		_stopSignals
 13053 ;; This function is called by:
 13054 ;;		_Test
 13055 ;; This function uses a non-reentrant model
 13056 ;;
 13057                           
 13058                           	psect	text43
 13059  00455C                     __ptext43:
 13060                           	opt stack 0
 13061  00455C                     _arm:
 13062                           	opt stack 19
 13063                           
 13064                           ;Test.c: 617: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13065                           
 13066                           ; BSR set to: 0
 13067                           ;incstack = 0
 13068  00455C  0E01               	movlw	1
 13069  00455E  EC3A  F02F         	call	_lcdInst
 13070  004562  0E68               	movlw	104
 13071  004564  0100               	movlb	0	; () banked
 13072  004566  6FAB               	movwf	??_arm& (0+255),b
 13073  004568  0EE4               	movlw	228
 13074  00456A                     u11077:
 13075  00456A  2EE8               	decfsz	wreg,f,c
 13076  00456C  D7FE               	bra	u11077
 13077  00456E  2FAB               	decfsz	??_arm& (0+255),f,b
 13078  004570  D7FC               	bra	u11077
 13079  004572  F000               	nop	
 13080  004574  0E80               	movlw	128
 13081  004576  EC3A  F02F         	call	_lcdInst
 13082                           
 13083                           ;Test.c: 618: printf("D WILL RETURN   ");
 13084  00457A  0EEC               	movlw	low STR_124
 13085  00457C  0100               	movlb	0	; () banked
 13086  00457E  6F8E               	movwf	printf@f& (0+255),b
 13087  004580  0EFB               	movlw	high STR_124
 13088  004582  0100               	movlb	0	; () banked
 13089  004584  6F8F               	movwf	(printf@f+1)& (0+255),b
 13090  004586  EC67  F00E         	call	_printf	;wreg free
 13091                           
 13092                           ;Test.c: 619: lcdInst(0b11000000);;
 13093  00458A  0EC0               	movlw	192
 13094  00458C  EC3A  F02F         	call	_lcdInst
 13095                           
 13096                           ;Test.c: 620: printf("ELSE TOGGLES ARM");
 13097  004590  0E96               	movlw	low STR_125
 13098  004592  0100               	movlb	0	; () banked
 13099  004594  6F8E               	movwf	printf@f& (0+255),b
 13100  004596  0EFC               	movlw	high STR_125
 13101  004598  0100               	movlb	0	; () banked
 13102  00459A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13103  00459C  EC67  F00E         	call	_printf	;wreg free
 13104                           
 13105                           ;Test.c: 622: (INTCONbits.GIE = 1);
 13106  0045A0  8EF2               	bsf	intcon,7,c	;volatile
 13107                           
 13108                           ;Test.c: 623: machine_state = Sorting_state;
 13109  0045A2  0E01               	movlw	1
 13110  0045A4  0100               	movlb	0	; () banked
 13111  0045A6  6FFC               	movwf	_machine_state& (0+255),b
 13112                           
 13113                           ; BSR set to: 0
 13114                           ;Test.c: 624: f_arm_position = 2;
 13115  0045A8  0E00               	movlw	0
 13116  0045AA  0100               	movlb	0	; () banked
 13117  0045AC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13118  0045AE  0E02               	movlw	2
 13119  0045B0  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13120                           
 13121                           ; BSR set to: 0
 13122                           ;Test.c: 625: timer2_counter = 0;
 13123  0045B2  0E00               	movlw	0
 13124  0045B4  6E74               	movwf	_timer2_counter+1,c	;volatile
 13125  0045B6  0E00               	movlw	0
 13126  0045B8  6E73               	movwf	_timer2_counter,c	;volatile
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;Test.c: 626: LATBbits.LATB3 = 1;
 13130  0045BA  868A               	bsf	3978,3,c	;volatile
 13131                           
 13132                           ; BSR set to: 0
 13133                           ;Test.c: 627: TMR2ON = 1;
 13134  0045BC  84CA               	bsf	4042,2,c	;volatile
 13135                           
 13136                           ; BSR set to: 0
 13137                           ;Test.c: 628: was_low_2 = 0;
 13138  0045BE  0E00               	movlw	0
 13139  0045C0  6E7A               	movwf	_was_low_2+1,c	;volatile
 13140  0045C2  0E00               	movlw	0
 13141  0045C4  6E79               	movwf	_was_low_2,c	;volatile
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;Test.c: 630: int on = 0;
 13145  0045C6  0E00               	movlw	0
 13146  0045C8  0100               	movlb	0	; () banked
 13147  0045CA  6FAD               	movwf	(arm@on+1)& (0+255),b
 13148  0045CC  0E00               	movlw	0
 13149  0045CE  6FAC               	movwf	arm@on& (0+255),b
 13150  0045D0                     l8946:
 13151                           
 13152                           ;Test.c: 632: if(on){
 13153  0045D0  0100               	movlb	0	; () banked
 13154  0045D2  51AC               	movf	arm@on& (0+255),w,b
 13155  0045D4  0100               	movlb	0	; () banked
 13156  0045D6  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13157  0045D8  B4D8               	btfsc	status,2,c
 13158  0045DA  D01C               	goto	l8958
 13159                           
 13160                           ; BSR set to: 0
 13161                           ;Test.c: 633: on = !on;
 13162  0045DC  0100               	movlb	0	; () banked
 13163  0045DE  51AC               	movf	arm@on& (0+255),w,b
 13164  0045E0  0100               	movlb	0	; () banked
 13165  0045E2  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13166  0045E4  A4D8               	btfss	status,2,c
 13167  0045E6  D002               	goto	u8150
 13168  0045E8  0E01               	movlw	1
 13169  0045EA  D001               	goto	u8160
 13170  0045EC                     u8150:
 13171  0045EC  0E00               	movlw	0
 13172  0045EE                     u8160:
 13173  0045EE  0100               	movlb	0	; () banked
 13174  0045F0  6FAC               	movwf	arm@on& (0+255),b
 13175  0045F2  6BAD               	clrf	(arm@on+1)& (0+255),b
 13176                           
 13177                           ;Test.c: 634: while(PORTBbits.RB1 == 0){
 13178  0045F4  D005               	goto	l8952
 13179  0045F6                     l8950:
 13180                           
 13181                           ; BSR set to: 0
 13182                           ;Test.c: 635: f_arm_position = 0;
 13183  0045F6  0E00               	movlw	0
 13184  0045F8  0100               	movlb	0	; () banked
 13185  0045FA  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13186  0045FC  0E00               	movlw	0
 13187  0045FE  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13188  004600                     l8952:
 13189                           
 13190                           ; BSR set to: 0
 13191  004600  A281               	btfss	3969,1,c	;volatile
 13192  004602  D7F9               	goto	l8950
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;Test.c: 636: }
 13196                           ;Test.c: 637: if(PORTB >> 4 == 0b1111){
 13197                           
 13198                           ; BSR set to: 0
 13199  004604  3881               	swapf	3969,w,c	;volatile
 13200  004606  0B0F               	andlw	15
 13201  004608  0A0F               	xorlw	15
 13202  00460A  B4D8               	btfsc	status,2,c
 13203  00460C  D01F               	goto	l1479
 13204  00460E                     l1480:
 13205  00460E  A281               	btfss	3969,1,c	;volatile
 13206  004610  D7DF               	goto	l8946
 13207  004612  D7FD               	goto	l1480
 13208  004614                     l8958:
 13209                           
 13210                           ;Test.c: 642: else{
 13211                           ;Test.c: 643: on = !on;
 13212  004614  0100               	movlb	0	; () banked
 13213  004616  51AC               	movf	arm@on& (0+255),w,b
 13214  004618  0100               	movlb	0	; () banked
 13215  00461A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13216  00461C  A4D8               	btfss	status,2,c
 13217  00461E  D002               	goto	u8200
 13218  004620  0E01               	movlw	1
 13219  004622  D001               	goto	u8210
 13220  004624                     u8200:
 13221  004624  0E00               	movlw	0
 13222  004626                     u8210:
 13223  004626  0100               	movlb	0	; () banked
 13224  004628  6FAC               	movwf	arm@on& (0+255),b
 13225  00462A  6BAD               	clrf	(arm@on+1)& (0+255),b
 13226                           
 13227                           ;Test.c: 644: while(PORTBbits.RB1 == 0){
 13228  00462C  D005               	goto	l8962
 13229  00462E                     l8960:
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;Test.c: 645: f_arm_position = 1;
 13233  00462E  0E00               	movlw	0
 13234  004630  0100               	movlb	0	; () banked
 13235  004632  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13236  004634  0E01               	movlw	1
 13237  004636  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13238  004638                     l8962:
 13239                           
 13240                           ; BSR set to: 0
 13241  004638  A281               	btfss	3969,1,c	;volatile
 13242  00463A  D7F9               	goto	l8960
 13243                           
 13244                           ; BSR set to: 0
 13245                           ;Test.c: 646: }
 13246                           ;Test.c: 647: if(PORTB >> 4 == 0b1111){
 13247                           
 13248                           ; BSR set to: 0
 13249  00463C  3881               	swapf	3969,w,c	;volatile
 13250  00463E  0B0F               	andlw	15
 13251  004640  0A0F               	xorlw	15
 13252  004642  B4D8               	btfsc	status,2,c
 13253  004644  D003               	goto	l1479
 13254  004646                     l1488:
 13255  004646  A281               	btfss	3969,1,c	;volatile
 13256  004648  D7C3               	goto	l8946
 13257  00464A  D7FD               	goto	l1488
 13258  00464C                     l1479:
 13259                           
 13260                           ; BSR set to: 0
 13261                           ;Test.c: 651: }
 13262                           ;Test.c: 652: }
 13263                           ;Test.c: 654: (INTCONbits.GIE = 0);
 13264  00464C  9EF2               	bcf	intcon,7,c	;volatile
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;Test.c: 655: stopSignals();
 13268  00464E  ECE1  F02E         	call	_stopSignals	;wreg free
 13269                           
 13270                           ;Test.c: 656: machine_state = Testing_state;
 13271  004652  0E03               	movlw	3
 13272  004654  0100               	movlb	0	; () banked
 13273  004656  6FFC               	movwf	_machine_state& (0+255),b
 13274                           
 13275                           ; BSR set to: 0
 13276  004658  0012               	return		;funcret
 13277  00465A                     __end_of_arm:
 13278                           	opt stack 0
 13279                           tblptru	equ	0xFF8
 13280                           tblptrh	equ	0xFF7
 13281                           tblptrl	equ	0xFF6
 13282                           tablat	equ	0xFF5
 13283                           prodh	equ	0xFF4
 13284                           prodl	equ	0xFF3
 13285                           intcon	equ	0xFF2
 13286                           intcon2	equ	0xFF1
 13287                           intcon3	equ	0xFF0
 13288                           postinc0	equ	0xFEE
 13289                           wreg	equ	0xFE8
 13290                           postdec1	equ	0xFE5
 13291                           fsr1l	equ	0xFE1
 13292                           indf2	equ	0xFDF
 13293                           postinc2	equ	0xFDE
 13294                           postdec2	equ	0xFDD
 13295                           fsr2h	equ	0xFDA
 13296                           fsr2l	equ	0xFD9
 13297                           status	equ	0xFD8
 13298                           
 13299 ;; *************** function _algorithmTest *****************
 13300 ;; Defined at:
 13301 ;;		line 78 in file "Test.c"
 13302 ;; Parameters:    Size  Location     Type
 13303 ;;		None
 13304 ;; Auto vars:     Size  Location     Type
 13305 ;;		None
 13306 ;; Return value:  Size  Location     Type
 13307 ;;                  1    wreg      void 
 13308 ;; Registers used:
 13309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13310 ;; Tracked objects:
 13311 ;;		On entry : 0/0
 13312 ;;		On exit  : 0/0
 13313 ;;		Unchanged: 0/0
 13314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13317 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13319 ;;Total ram usage:        2 bytes
 13320 ;; Hardware stack levels used:    1
 13321 ;; Hardware stack levels required when called:   10
 13322 ;; This function calls:
 13323 ;;		_lcdInst
 13324 ;;		_printf
 13325 ;; This function is called by:
 13326 ;;		_Test
 13327 ;; This function uses a non-reentrant model
 13328 ;;
 13329                           
 13330                           	psect	text44
 13331  004824                     __ptext44:
 13332                           	opt stack 0
 13333  004824                     _algorithmTest:
 13334                           	opt stack 19
 13335                           
 13336                           ;Test.c: 80: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13337                           
 13338                           ; BSR set to: 0
 13339                           ;incstack = 0
 13340  004824  0E01               	movlw	1
 13341  004826  EC3A  F02F         	call	_lcdInst
 13342  00482A  0E68               	movlw	104
 13343  00482C  0100               	movlb	0	; () banked
 13344  00482E  6FAB               	movwf	??_algorithmTest& (0+255),b
 13345  004830  0EE4               	movlw	228
 13346  004832                     u11087:
 13347  004832  2EE8               	decfsz	wreg,f,c
 13348  004834  D7FE               	bra	u11087
 13349  004836  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13350  004838  D7FC               	bra	u11087
 13351  00483A  F000               	nop	
 13352  00483C  0E80               	movlw	128
 13353  00483E  EC3A  F02F         	call	_lcdInst
 13354                           
 13355                           ;Test.c: 81: printf("ALGORITHM TEST");
 13356  004842  0EF4               	movlw	low STR_70
 13357  004844  0100               	movlb	0	; () banked
 13358  004846  6F8E               	movwf	printf@f& (0+255),b
 13359  004848  0EFE               	movlw	high STR_70
 13360  00484A  0100               	movlb	0	; () banked
 13361  00484C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13362  00484E  EC67  F00E         	call	_printf	;wreg free
 13363                           
 13364                           ;Test.c: 82: lcdInst(0b11000000);;
 13365  004852  0EC0               	movlw	192
 13366  004854  EC3A  F02F         	call	_lcdInst
 13367                           
 13368                           ;Test.c: 83: printf("PUSH TO START");
 13369  004858  0E2D               	movlw	low STR_71
 13370  00485A  0100               	movlb	0	; () banked
 13371  00485C  6F8E               	movwf	printf@f& (0+255),b
 13372  00485E  0EFF               	movlw	high STR_71
 13373  004860  0100               	movlb	0	; () banked
 13374  004862  6F8F               	movwf	(printf@f+1)& (0+255),b
 13375  004864  EC67  F00E         	call	_printf	;wreg free
 13376                           
 13377                           ;Test.c: 84: _delay((unsigned long)((100)*(32000000/4000.0)));
 13378  004868  0E05               	movlw	5
 13379  00486A  0100               	movlb	0	; () banked
 13380  00486C  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13381  00486E  0E0F               	movlw	15
 13382  004870  0100               	movlb	0	; () banked
 13383  004872  6FAB               	movwf	??_algorithmTest& (0+255),b
 13384  004874  0EF1               	movlw	241
 13385  004876                     u11097:
 13386  004876  2EE8               	decfsz	wreg,f,c
 13387  004878  D7FE               	bra	u11097
 13388  00487A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13389  00487C  D7FC               	bra	u11097
 13390  00487E  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13391  004880  D7FA               	bra	u11097
 13392  004882                     l1288:
 13393  004882  A281               	btfss	3969,1,c	;volatile
 13394  004884  D7FE               	goto	l1288
 13395  004886                     l1291:
 13396  004886  B281               	btfsc	3969,1,c	;volatile
 13397  004888  D7FE               	goto	l1291
 13398                           
 13399                           ;Test.c: 87: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13400  00488A  0E01               	movlw	1
 13401  00488C  EC3A  F02F         	call	_lcdInst
 13402  004890  0E68               	movlw	104
 13403  004892  0100               	movlb	0	; () banked
 13404  004894  6FAB               	movwf	??_algorithmTest& (0+255),b
 13405  004896  0EE4               	movlw	228
 13406  004898                     u11107:
 13407  004898  2EE8               	decfsz	wreg,f,c
 13408  00489A  D7FE               	bra	u11107
 13409  00489C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13410  00489E  D7FC               	bra	u11107
 13411  0048A0  F000               	nop	
 13412  0048A2  0E80               	movlw	128
 13413  0048A4  EC3A  F02F         	call	_lcdInst
 13414                           
 13415                           ;Test.c: 92: printf("ALG1: 9 POPNOTAB");
 13416  0048A8  0E41               	movlw	low STR_72
 13417  0048AA  0100               	movlb	0	; () banked
 13418  0048AC  6F8E               	movwf	printf@f& (0+255),b
 13419  0048AE  0EFC               	movlw	high STR_72
 13420  0048B0  0100               	movlb	0	; () banked
 13421  0048B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13422  0048B4  EC67  F00E         	call	_printf	;wreg free
 13423                           
 13424                           ;Test.c: 99: printf("ALG2: 12 CANS");
 13425  0048B8  0E11               	movlw	low STR_73
 13426  0048BA  0100               	movlb	0	; () banked
 13427  0048BC  6F8E               	movwf	printf@f& (0+255),b
 13428  0048BE  0EFF               	movlw	high STR_73
 13429  0048C0  0100               	movlb	0	; () banked
 13430  0048C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13431  0048C4  EC67  F00E         	call	_printf	;wreg free
 13432                           
 13433                           ;Test.c: 108: printf("ALG3: 1 CAN");
 13434  0048C8  0E64               	movlw	low STR_74
 13435  0048CA  0100               	movlb	0	; () banked
 13436  0048CC  6F8E               	movwf	printf@f& (0+255),b
 13437  0048CE  0EFF               	movlw	high STR_74
 13438  0048D0  0100               	movlb	0	; () banked
 13439  0048D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13440  0048D4  EC67  F00E         	call	_printf	;wreg free
 13441                           
 13442                           ;Test.c: 114: printf("ALG4: ALL CANS");
 13443  0048D8  0ED6               	movlw	low STR_75
 13444  0048DA  0100               	movlb	0	; () banked
 13445  0048DC  6F8E               	movwf	printf@f& (0+255),b
 13446  0048DE  0EFE               	movlw	high STR_75
 13447  0048E0  0100               	movlb	0	; () banked
 13448  0048E2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13449  0048E4  EC67  F00E         	call	_printf	;wreg free
 13450                           
 13451                           ;Test.c: 119: printf("ALG5: NO CANS");
 13452  0048E8  0E1F               	movlw	low STR_76
 13453  0048EA  0100               	movlb	0	; () banked
 13454  0048EC  6F8E               	movwf	printf@f& (0+255),b
 13455  0048EE  0EFF               	movlw	high STR_76
 13456  0048F0  0100               	movlb	0	; () banked
 13457  0048F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13458  0048F4  EC67  F00E         	call	_printf	;wreg free
 13459  0048F8  0012               	return		;funcret
 13460  0048FA                     __end_of_algorithmTest:
 13461                           	opt stack 0
 13462                           tblptru	equ	0xFF8
 13463                           tblptrh	equ	0xFF7
 13464                           tblptrl	equ	0xFF6
 13465                           tablat	equ	0xFF5
 13466                           prodh	equ	0xFF4
 13467                           prodl	equ	0xFF3
 13468                           intcon	equ	0xFF2
 13469                           intcon2	equ	0xFF1
 13470                           intcon3	equ	0xFF0
 13471                           postinc0	equ	0xFEE
 13472                           wreg	equ	0xFE8
 13473                           postdec1	equ	0xFE5
 13474                           fsr1l	equ	0xFE1
 13475                           indf2	equ	0xFDF
 13476                           postinc2	equ	0xFDE
 13477                           postdec2	equ	0xFDD
 13478                           fsr2h	equ	0xFDA
 13479                           fsr2l	equ	0xFD9
 13480                           status	equ	0xFD8
 13481                           
 13482 ;; *************** function _actuatorTest *****************
 13483 ;; Defined at:
 13484 ;;		line 201 in file "Test.c"
 13485 ;; Parameters:    Size  Location     Type
 13486 ;;		None
 13487 ;; Auto vars:     Size  Location     Type
 13488 ;;  i               1   45[BANK0 ] unsigned char 
 13489 ;;  i               1   67[BANK0 ] unsigned char 
 13490 ;;  i               1   66[BANK0 ] unsigned char 
 13491 ;;  i               1   65[BANK0 ] unsigned char 
 13492 ;;  i               1   64[BANK0 ] unsigned char 
 13493 ;;  i               1   63[BANK0 ] unsigned char 
 13494 ;;  i               1   62[BANK0 ] unsigned char 
 13495 ;;  i               1   61[BANK0 ] unsigned char 
 13496 ;;  i               1   60[BANK0 ] unsigned char 
 13497 ;;  i               1   59[BANK0 ] unsigned char 
 13498 ;;  i               1   58[BANK0 ] unsigned char 
 13499 ;;  i               1   57[BANK0 ] unsigned char 
 13500 ;;  i               1   56[BANK0 ] unsigned char 
 13501 ;;  i               1   55[BANK0 ] unsigned char 
 13502 ;;  i               1   54[BANK0 ] unsigned char 
 13503 ;;  i               1   53[BANK0 ] unsigned char 
 13504 ;;  i               1   52[BANK0 ] unsigned char 
 13505 ;;  i               1   51[BANK0 ] unsigned char 
 13506 ;;  i               1   50[BANK0 ] unsigned char 
 13507 ;;  i               1   49[BANK0 ] unsigned char 
 13508 ;;  i               1   48[BANK0 ] unsigned char 
 13509 ;;  i               1   47[BANK0 ] unsigned char 
 13510 ;;  i               1   46[BANK0 ] unsigned char 
 13511 ;;  i               2   68[BANK0 ] int 
 13512 ;; Return value:  Size  Location     Type
 13513 ;;                  1    wreg      void 
 13514 ;; Registers used:
 13515 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13516 ;; Tracked objects:
 13517 ;;		On entry : 0/0
 13518 ;;		On exit  : 0/0
 13519 ;;		Unchanged: 0/0
 13520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13522 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13523 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13524 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13525 ;;Total ram usage:       27 bytes
 13526 ;; Hardware stack levels used:    1
 13527 ;; Hardware stack levels required when called:   10
 13528 ;; This function calls:
 13529 ;;		_lcdInst
 13530 ;;		_printf
 13531 ;;		_updateServoPosition
 13532 ;; This function is called by:
 13533 ;;		_Test
 13534 ;; This function uses a non-reentrant model
 13535 ;;
 13536                           
 13537                           	psect	text45
 13538  0008DA                     __ptext45:
 13539                           	opt stack 0
 13540  0008DA                     _actuatorTest:
 13541                           	opt stack 19
 13542                           
 13543                           ;Test.c: 203: int i = 0;
 13544                           
 13545                           ;incstack = 0
 13546  0008DA  0E00               	movlw	0
 13547  0008DC  0100               	movlb	0	; () banked
 13548  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13549  0008E0  0E00               	movlw	0
 13550  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;Test.c: 205: (INTCONbits.GIE = 1);
 13554  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13555                           
 13556                           ; BSR set to: 0
 13557                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13558  0008E6  0E01               	movlw	1
 13559  0008E8  EC3A  F02F         	call	_lcdInst
 13560  0008EC  0E68               	movlw	104
 13561  0008EE  0100               	movlb	0	; () banked
 13562  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13563  0008F2  0EE4               	movlw	228
 13564  0008F4                     u11117:
 13565  0008F4  2EE8               	decfsz	wreg,f,c
 13566  0008F6  D7FE               	bra	u11117
 13567  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13568  0008FA  D7FC               	bra	u11117
 13569  0008FC  F000               	nop	
 13570  0008FE  0E80               	movlw	128
 13571  000900  EC3A  F02F         	call	_lcdInst
 13572                           
 13573                           ;Test.c: 207: printf("ACTUATORS");
 13574  000904  0E90               	movlw	low STR_88
 13575  000906  0100               	movlb	0	; () banked
 13576  000908  6F8E               	movwf	printf@f& (0+255),b
 13577  00090A  0EFF               	movlw	high STR_88
 13578  00090C  0100               	movlb	0	; () banked
 13579  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13580  000910  EC67  F00E         	call	_printf	;wreg free
 13581                           
 13582                           ;Test.c: 208: lcdInst(0b11000000);;
 13583  000914  0EC0               	movlw	192
 13584  000916  EC3A  F02F         	call	_lcdInst
 13585                           
 13586                           ;Test.c: 209: printf("PUSH TO START");
 13587  00091A  0E2D               	movlw	low STR_71
 13588  00091C  0100               	movlb	0	; () banked
 13589  00091E  6F8E               	movwf	printf@f& (0+255),b
 13590  000920  0EFF               	movlw	high STR_71
 13591  000922  0100               	movlb	0	; () banked
 13592  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13593  000926  EC67  F00E         	call	_printf	;wreg free
 13594                           
 13595                           ;Test.c: 210: _delay((unsigned long)((100)*(32000000/4000.0)));
 13596  00092A  0E05               	movlw	5
 13597  00092C  0100               	movlb	0	; () banked
 13598  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13599  000930  0E0F               	movlw	15
 13600  000932  0100               	movlb	0	; () banked
 13601  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13602  000936  0EF1               	movlw	241
 13603  000938                     u11127:
 13604  000938  2EE8               	decfsz	wreg,f,c
 13605  00093A  D7FE               	bra	u11127
 13606  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13607  00093E  D7FC               	bra	u11127
 13608  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13609  000942  D7FA               	bra	u11127
 13610  000944                     l1323:
 13611  000944  A281               	btfss	3969,1,c	;volatile
 13612  000946  D7FE               	goto	l1323
 13613  000948                     l1326:
 13614  000948  B281               	btfsc	3969,1,c	;volatile
 13615  00094A  D7FE               	goto	l1326
 13616                           
 13617                           ;Test.c: 213: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13618  00094C  0E01               	movlw	1
 13619  00094E  EC3A  F02F         	call	_lcdInst
 13620  000952  0E68               	movlw	104
 13621  000954  0100               	movlb	0	; () banked
 13622  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13623  000958  0EE4               	movlw	228
 13624  00095A                     u11137:
 13625  00095A  2EE8               	decfsz	wreg,f,c
 13626  00095C  D7FE               	bra	u11137
 13627  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13628  000960  D7FC               	bra	u11137
 13629  000962  F000               	nop	
 13630  000964  0E80               	movlw	128
 13631  000966  EC3A  F02F         	call	_lcdInst
 13632                           
 13633                           ;Test.c: 218: printf("TST: DC MOTORS");
 13634  00096A  0EE5               	movlw	low STR_90
 13635  00096C  0100               	movlb	0	; () banked
 13636  00096E  6F8E               	movwf	printf@f& (0+255),b
 13637  000970  0EFE               	movlw	high STR_90
 13638  000972  0100               	movlb	0	; () banked
 13639  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13640  000976  EC67  F00E         	call	_printf	;wreg free
 13641                           
 13642                           ;Test.c: 219: lcdInst(0b11000000);;
 13643  00097A  0EC0               	movlw	192
 13644  00097C  EC3A  F02F         	call	_lcdInst
 13645                           
 13646                           ;Test.c: 220: printf("PIN RA5 HIGH.");
 13647  000980  0E03               	movlw	low STR_91
 13648  000982  0100               	movlb	0	; () banked
 13649  000984  6F8E               	movwf	printf@f& (0+255),b
 13650  000986  0EFF               	movlw	high STR_91
 13651  000988  0100               	movlb	0	; () banked
 13652  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13653  00098C  EC67  F00E         	call	_printf	;wreg free
 13654                           
 13655                           ;Test.c: 221: LATBbits.LATB2 = 1;
 13656  000990  848A               	bsf	3978,2,c	;volatile
 13657                           
 13658                           ;Test.c: 222: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13659  000992  0E00               	movlw	0
 13660  000994  0100               	movlb	0	; () banked
 13661  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13662  000998  0E00               	movlw	0
 13663  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13664                           
 13665                           ; BSR set to: 0
 13666  00099C  0100               	movlb	0	; () banked
 13667  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13668  0009A0  D008               	goto	l8532
 13669  0009A2  0100               	movlb	0	; () banked
 13670  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13671  0009A6  E123               	bnz	l1330
 13672  0009A8  0E05               	movlw	5
 13673  0009AA  0100               	movlb	0	; () banked
 13674  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13675  0009AE  B0D8               	btfsc	status,0,c
 13676  0009B0  D01E               	goto	l1330
 13677  0009B2                     l8532:
 13678                           
 13679                           ; BSR set to: 0
 13680  0009B2  0E00               	movlw	0
 13681  0009B4  0100               	movlb	0	; () banked
 13682  0009B6  6FAD               	movwf	actuatorTest@i_1745& (0+255),b
 13683  0009B8                     l8534:
 13684                           
 13685                           ; BSR set to: 0
 13686  0009B8  0E63               	movlw	99
 13687  0009BA  0100               	movlb	0	; () banked
 13688  0009BC  65AD               	cpfsgt	actuatorTest@i_1745& (0+255),b
 13689  0009BE  D001               	goto	l8538
 13690  0009C0  D00C               	goto	l8542
 13691  0009C2                     l8538:
 13692                           
 13693                           ; BSR set to: 0
 13694  0009C2  0E68               	movlw	104
 13695  0009C4  0100               	movlb	0	; () banked
 13696  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13697  0009C8  0EE4               	movlw	228
 13698  0009CA                     u11147:
 13699  0009CA  2EE8               	decfsz	wreg,f,c
 13700  0009CC  D7FE               	bra	u11147
 13701  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13702  0009D0  D7FC               	bra	u11147
 13703  0009D2  F000               	nop	
 13704  0009D4  0100               	movlb	0	; () banked
 13705  0009D6  2BAD               	incf	actuatorTest@i_1745& (0+255),f,b
 13706  0009D8  D7EF               	goto	l8534
 13707  0009DA                     l8542:
 13708                           
 13709                           ; BSR set to: 0
 13710  0009DA  0100               	movlb	0	; () banked
 13711  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13712  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13713                           
 13714                           ; BSR set to: 0
 13715  0009E0  0100               	movlb	0	; () banked
 13716  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13717  0009E4  D7E6               	goto	l8532
 13718  0009E6  0100               	movlb	0	; () banked
 13719  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13720  0009EA  E101               	bnz	u7630
 13721  0009EC  D7DD               	goto	L11
 13722  0009EE                     u7630:
 13723  0009EE                     l1330:
 13724                           
 13725                           ; BSR set to: 0
 13726                           ;Test.c: 223: LATBbits.LATB2 = 0;
 13727  0009EE  948A               	bcf	3978,2,c	;volatile
 13728                           
 13729                           ; BSR set to: 0
 13730                           ;Test.c: 224: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13731  0009F0  0E01               	movlw	1
 13732  0009F2  EC3A  F02F         	call	_lcdInst
 13733  0009F6  0E68               	movlw	104
 13734  0009F8  0100               	movlb	0	; () banked
 13735  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13736  0009FC  0EE4               	movlw	228
 13737  0009FE                     u11157:
 13738  0009FE  2EE8               	decfsz	wreg,f,c
 13739  000A00  D7FE               	bra	u11157
 13740  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13741  000A04  D7FC               	bra	u11157
 13742  000A06  F000               	nop	
 13743  000A08  0E80               	movlw	128
 13744  000A0A  EC3A  F02F         	call	_lcdInst
 13745                           
 13746                           ;Test.c: 230: printf("TST: COND SOLN'D");
 13747  000A0E  0E52               	movlw	low STR_92
 13748  000A10  0100               	movlb	0	; () banked
 13749  000A12  6F8E               	movwf	printf@f& (0+255),b
 13750  000A14  0EFC               	movlw	high STR_92
 13751  000A16  0100               	movlb	0	; () banked
 13752  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13753  000A1A  EC67  F00E         	call	_printf	;wreg free
 13754                           
 13755                           ;Test.c: 231: lcdInst(0b11000000);;
 13756  000A1E  0EC0               	movlw	192
 13757  000A20  EC3A  F02F         	call	_lcdInst
 13758                           
 13759                           ;Test.c: 232: printf("PIN RA3...");
 13760  000A24  0E70               	movlw	low STR_93
 13761  000A26  0100               	movlb	0	; () banked
 13762  000A28  6F8E               	movwf	printf@f& (0+255),b
 13763  000A2A  0EFF               	movlw	high STR_93
 13764  000A2C  0100               	movlb	0	; () banked
 13765  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13766  000A30  EC67  F00E         	call	_printf	;wreg free
 13767                           
 13768                           ;Test.c: 233: for(i=0;i<5;i++){
 13769  000A34  0E00               	movlw	0
 13770  000A36  0100               	movlb	0	; () banked
 13771  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13772  000A3A  0E00               	movlw	0
 13773  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13774                           
 13775                           ; BSR set to: 0
 13776  000A3E  0100               	movlb	0	; () banked
 13777  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13778  000A42  D008               	goto	l1333
 13779  000A44  0100               	movlb	0	; () banked
 13780  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13781  000A48  E12C               	bnz	l1334
 13782  000A4A  0E05               	movlw	5
 13783  000A4C  0100               	movlb	0	; () banked
 13784  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13785  000A50  B0D8               	btfsc	status,0,c
 13786  000A52  D027               	goto	l1334
 13787  000A54                     l1333:
 13788                           
 13789                           ; BSR set to: 0
 13790                           ;Test.c: 234: LATCbits.LATC7 = 1;
 13791  000A54  8E8B               	bsf	3979,7,c	;volatile
 13792                           
 13793                           ; BSR set to: 0
 13794                           ;Test.c: 235: _delay((unsigned long)((300)*(32000000/4000.0)));
 13795  000A56  0E0D               	movlw	13
 13796  000A58  0100               	movlb	0	; () banked
 13797  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13798  000A5C  0E2D               	movlw	45
 13799  000A5E  0100               	movlb	0	; () banked
 13800  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13801  000A62  0ED7               	movlw	215
 13802  000A64                     u11167:
 13803  000A64  2EE8               	decfsz	wreg,f,c
 13804  000A66  D7FE               	bra	u11167
 13805  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13806  000A6A  D7FC               	bra	u11167
 13807  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13808  000A6E  D7FA               	bra	u11167
 13809  000A70  D000               	nop2	
 13810                           
 13811                           ;Test.c: 236: LATCbits.LATC7 = !1;
 13812  000A72  9E8B               	bcf	3979,7,c	;volatile
 13813                           
 13814                           ;Test.c: 237: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13815  000A74  0E1D               	movlw	29
 13816  000A76  0100               	movlb	0	; () banked
 13817  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13818  000A7A  0E69               	movlw	105
 13819  000A7C  0100               	movlb	0	; () banked
 13820  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13821  000A80  0EA5               	movlw	165
 13822  000A82                     u11177:
 13823  000A82  2EE8               	decfsz	wreg,f,c
 13824  000A84  D7FE               	bra	u11177
 13825  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13826  000A88  D7FC               	bra	u11177
 13827  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13828  000A8C  D7FA               	bra	u11177
 13829  000A8E  0100               	movlb	0	; () banked
 13830  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13831  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13832  000A94  0100               	movlb	0	; () banked
 13833  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13834  000A98  D7DD               	goto	l1333
 13835  000A9A  0100               	movlb	0	; () banked
 13836  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13837  000A9E  E101               	bnz	u7650
 13838  000AA0  D7D4               	goto	L12
 13839  000AA2                     u7650:
 13840  000AA2                     l1334:
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;Test.c: 238: }
 13844                           ;Test.c: 239: LATCbits.LATC7 = !1;
 13845  000AA2  9E8B               	bcf	3979,7,c	;volatile
 13846                           
 13847                           ; BSR set to: 0
 13848                           ;Test.c: 240: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13849  000AA4  0E01               	movlw	1
 13850  000AA6  EC3A  F02F         	call	_lcdInst
 13851  000AAA  0E68               	movlw	104
 13852  000AAC  0100               	movlb	0	; () banked
 13853  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13854  000AB0  0EE4               	movlw	228
 13855  000AB2                     u11187:
 13856  000AB2  2EE8               	decfsz	wreg,f,c
 13857  000AB4  D7FE               	bra	u11187
 13858  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13859  000AB8  D7FC               	bra	u11187
 13860  000ABA  F000               	nop	
 13861  000ABC  0E80               	movlw	128
 13862  000ABE  EC3A  F02F         	call	_lcdInst
 13863                           
 13864                           ;Test.c: 246: printf("TST: PUSH SOLN'D");
 13865  000AC2  0E63               	movlw	low STR_94
 13866  000AC4  0100               	movlb	0	; () banked
 13867  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13868  000AC8  0EFC               	movlw	high STR_94
 13869  000ACA  0100               	movlb	0	; () banked
 13870  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13871  000ACE  EC67  F00E         	call	_printf	;wreg free
 13872                           
 13873                           ;Test.c: 247: lcdInst(0b11000000);;
 13874  000AD2  0EC0               	movlw	192
 13875  000AD4  EC3A  F02F         	call	_lcdInst
 13876                           
 13877                           ;Test.c: 248: printf("PIN RA4...");
 13878  000AD8  0E7B               	movlw	low STR_95
 13879  000ADA  0100               	movlb	0	; () banked
 13880  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13881  000ADE  0EFF               	movlw	high STR_95
 13882  000AE0  0100               	movlb	0	; () banked
 13883  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13884  000AE4  EC67  F00E         	call	_printf	;wreg free
 13885                           
 13886                           ;Test.c: 249: for(i=0;i<5;i++){
 13887  000AE8  0E00               	movlw	0
 13888  000AEA  0100               	movlb	0	; () banked
 13889  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13890  000AEE  0E00               	movlw	0
 13891  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13892                           
 13893                           ; BSR set to: 0
 13894  000AF2  0100               	movlb	0	; () banked
 13895  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13896  000AF6  D008               	goto	l1335
 13897  000AF8  0100               	movlb	0	; () banked
 13898  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13899  000AFC  E12C               	bnz	l1336
 13900  000AFE  0E05               	movlw	5
 13901  000B00  0100               	movlb	0	; () banked
 13902  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13903  000B04  B0D8               	btfsc	status,0,c
 13904  000B06  D027               	goto	l1336
 13905  000B08                     l1335:
 13906                           
 13907                           ; BSR set to: 0
 13908                           ;Test.c: 250: LATAbits.LATA4 = 1;
 13909  000B08  8889               	bsf	3977,4,c	;volatile
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;Test.c: 251: _delay((unsigned long)((300)*(32000000/4000.0)));
 13913  000B0A  0E0D               	movlw	13
 13914  000B0C  0100               	movlb	0	; () banked
 13915  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13916  000B10  0E2D               	movlw	45
 13917  000B12  0100               	movlb	0	; () banked
 13918  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13919  000B16  0ED7               	movlw	215
 13920  000B18                     u11197:
 13921  000B18  2EE8               	decfsz	wreg,f,c
 13922  000B1A  D7FE               	bra	u11197
 13923  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13924  000B1E  D7FC               	bra	u11197
 13925  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13926  000B22  D7FA               	bra	u11197
 13927  000B24  D000               	nop2	
 13928                           
 13929                           ;Test.c: 252: LATAbits.LATA4 = !1;
 13930  000B26  9889               	bcf	3977,4,c	;volatile
 13931                           
 13932                           ;Test.c: 253: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13933  000B28  0E1D               	movlw	29
 13934  000B2A  0100               	movlb	0	; () banked
 13935  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13936  000B2E  0E69               	movlw	105
 13937  000B30  0100               	movlb	0	; () banked
 13938  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13939  000B34  0EA5               	movlw	165
 13940  000B36                     u11207:
 13941  000B36  2EE8               	decfsz	wreg,f,c
 13942  000B38  D7FE               	bra	u11207
 13943  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13944  000B3C  D7FC               	bra	u11207
 13945  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13946  000B40  D7FA               	bra	u11207
 13947  000B42  0100               	movlb	0	; () banked
 13948  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13949  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13950  000B48  0100               	movlb	0	; () banked
 13951  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13952  000B4C  D7DD               	goto	l1335
 13953  000B4E  0100               	movlb	0	; () banked
 13954  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13955  000B52  E101               	bnz	u7670
 13956  000B54  D7D4               	goto	L13
 13957  000B56                     u7670:
 13958  000B56                     l1336:
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;Test.c: 254: }
 13962                           ;Test.c: 255: LATAbits.LATA4 = !1;
 13963  000B56  9889               	bcf	3977,4,c	;volatile
 13964                           
 13965                           ; BSR set to: 0
 13966                           ;Test.c: 256: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13967  000B58  0E01               	movlw	1
 13968  000B5A  EC3A  F02F         	call	_lcdInst
 13969  000B5E  0E68               	movlw	104
 13970  000B60  0100               	movlb	0	; () banked
 13971  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13972  000B64  0EE4               	movlw	228
 13973  000B66                     u11217:
 13974  000B66  2EE8               	decfsz	wreg,f,c
 13975  000B68  D7FE               	bra	u11217
 13976  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13977  000B6C  D7FC               	bra	u11217
 13978  000B6E  F000               	nop	
 13979  000B70  0E80               	movlw	128
 13980  000B72  EC3A  F02F         	call	_lcdInst
 13981                           
 13982                           ;Test.c: 259: machine_state = Sorting_state;
 13983  000B76  0E01               	movlw	1
 13984  000B78  0100               	movlb	0	; () banked
 13985  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13986                           
 13987                           ; BSR set to: 0
 13988                           ;Test.c: 260: was_low_1 = 0;
 13989  000B7C  0E00               	movlw	0
 13990  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13991  000B80  0E00               	movlw	0
 13992  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;Test.c: 261: was_low_1 = 0;
 13996  000B84  0E00               	movlw	0
 13997  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13998  000B88  0E00               	movlw	0
 13999  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 14000                           
 14001                           ; BSR set to: 0
 14002                           ;Test.c: 268: printf("TST: PAN SERVO");
 14003  000B8C  0EC7               	movlw	low STR_96
 14004  000B8E  0100               	movlb	0	; () banked
 14005  000B90  6F8E               	movwf	printf@f& (0+255),b
 14006  000B92  0EFE               	movlw	high STR_96
 14007  000B94  0100               	movlb	0	; () banked
 14008  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14009  000B98  EC67  F00E         	call	_printf	;wreg free
 14010                           
 14011                           ;Test.c: 269: lcdInst(0b11000000);;
 14012  000B9C  0EC0               	movlw	192
 14013  000B9E  EC3A  F02F         	call	_lcdInst
 14014                           
 14015                           ;Test.c: 270: printf("MIDDLE -- 2s    ");
 14016  000BA2  0ECA               	movlw	low STR_97
 14017  000BA4  0100               	movlb	0	; () banked
 14018  000BA6  6F8E               	movwf	printf@f& (0+255),b
 14019  000BA8  0EFB               	movlw	high STR_97
 14020  000BAA  0100               	movlb	0	; () banked
 14021  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14022  000BAE  EC67  F00E         	call	_printf	;wreg free
 14023                           
 14024                           ;Test.c: 271: updateServoPosition(1200, 1);
 14025  000BB2  0E04               	movlw	4
 14026  000BB4  0100               	movlb	0	; () banked
 14027  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14028  000BB8  0EB0               	movlw	176
 14029  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14030  000BBC  0E00               	movlw	0
 14031  000BBE  0100               	movlb	0	; () banked
 14032  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14033  000BC2  0E01               	movlw	1
 14034  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14035  000BC6  ECB2  F028         	call	_updateServoPosition	;wreg free
 14036                           
 14037                           ;Test.c: 272: TMR1ON = 1;
 14038  000BCA  80CD               	bsf	4045,0,c	;volatile
 14039                           
 14040                           ;Test.c: 273: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14041  000BCC  0E00               	movlw	0
 14042  000BCE  0100               	movlb	0	; () banked
 14043  000BD0  6FAE               	movwf	actuatorTest@i_1752& (0+255),b
 14044  000BD2                     l8618:
 14045                           
 14046                           ; BSR set to: 0
 14047  000BD2  0E63               	movlw	99
 14048  000BD4  0100               	movlb	0	; () banked
 14049  000BD6  65AE               	cpfsgt	actuatorTest@i_1752& (0+255),b
 14050  000BD8  D001               	goto	l8622
 14051  000BDA  D00C               	goto	l8626
 14052  000BDC                     l8622:
 14053                           
 14054                           ; BSR set to: 0
 14055  000BDC  0E68               	movlw	104
 14056  000BDE  0100               	movlb	0	; () banked
 14057  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14058  000BE2  0EE4               	movlw	228
 14059  000BE4                     u11227:
 14060  000BE4  2EE8               	decfsz	wreg,f,c
 14061  000BE6  D7FE               	bra	u11227
 14062  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14063  000BEA  D7FC               	bra	u11227
 14064  000BEC  F000               	nop	
 14065  000BEE  0100               	movlb	0	; () banked
 14066  000BF0  2BAE               	incf	actuatorTest@i_1752& (0+255),f,b
 14067  000BF2  D7EF               	goto	l8618
 14068  000BF4                     l8626:
 14069                           
 14070                           ; BSR set to: 0
 14071  000BF4  0E00               	movlw	0
 14072  000BF6  0100               	movlb	0	; () banked
 14073  000BF8  6FAF               	movwf	actuatorTest@i_1753& (0+255),b
 14074  000BFA                     l8628:
 14075                           
 14076                           ; BSR set to: 0
 14077  000BFA  0E63               	movlw	99
 14078  000BFC  0100               	movlb	0	; () banked
 14079  000BFE  65AF               	cpfsgt	actuatorTest@i_1753& (0+255),b
 14080  000C00  D001               	goto	l8632
 14081  000C02  D00C               	goto	l8636
 14082  000C04                     l8632:
 14083                           
 14084                           ; BSR set to: 0
 14085  000C04  0E68               	movlw	104
 14086  000C06  0100               	movlb	0	; () banked
 14087  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 14088  000C0A  0EE4               	movlw	228
 14089  000C0C                     u11237:
 14090  000C0C  2EE8               	decfsz	wreg,f,c
 14091  000C0E  D7FE               	bra	u11237
 14092  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14093  000C12  D7FC               	bra	u11237
 14094  000C14  F000               	nop	
 14095  000C16  0100               	movlb	0	; () banked
 14096  000C18  2BAF               	incf	actuatorTest@i_1753& (0+255),f,b
 14097  000C1A  D7EF               	goto	l8628
 14098  000C1C                     l8636:
 14099                           
 14100                           ; BSR set to: 0
 14101                           ;Test.c: 275: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14102  000C1C  0E80               	movlw	128
 14103  000C1E  EC3A  F02F         	call	_lcdInst
 14104  000C22  0EC0               	movlw	192
 14105  000C24  EC3A  F02F         	call	_lcdInst
 14106                           
 14107                           ;Test.c: 276: printf("RIGHT -- 2s     ");
 14108  000C28  0EB9               	movlw	low STR_98
 14109  000C2A  0100               	movlb	0	; () banked
 14110  000C2C  6F8E               	movwf	printf@f& (0+255),b
 14111  000C2E  0EFB               	movlw	high STR_98
 14112  000C30  0100               	movlb	0	; () banked
 14113  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14114  000C34  EC67  F00E         	call	_printf	;wreg free
 14115                           
 14116                           ;Test.c: 277: updateServoPosition(500, 1);
 14117  000C38  0E01               	movlw	1
 14118  000C3A  0100               	movlb	0	; () banked
 14119  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14120  000C3E  0EF4               	movlw	244
 14121  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14122  000C42  0E00               	movlw	0
 14123  000C44  0100               	movlb	0	; () banked
 14124  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14125  000C48  0E01               	movlw	1
 14126  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14127  000C4C  ECB2  F028         	call	_updateServoPosition	;wreg free
 14128                           
 14129                           ;Test.c: 278: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14130  000C50  0E00               	movlw	0
 14131  000C52  0100               	movlb	0	; () banked
 14132  000C54  6FB0               	movwf	actuatorTest@i_1755& (0+255),b
 14133  000C56                     l8644:
 14134                           
 14135                           ; BSR set to: 0
 14136  000C56  0E63               	movlw	99
 14137  000C58  0100               	movlb	0	; () banked
 14138  000C5A  65B0               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14139  000C5C  D001               	goto	l8648
 14140  000C5E  D00C               	goto	l8652
 14141  000C60                     l8648:
 14142                           
 14143                           ; BSR set to: 0
 14144  000C60  0E68               	movlw	104
 14145  000C62  0100               	movlb	0	; () banked
 14146  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 14147  000C66  0EE4               	movlw	228
 14148  000C68                     u11247:
 14149  000C68  2EE8               	decfsz	wreg,f,c
 14150  000C6A  D7FE               	bra	u11247
 14151  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14152  000C6E  D7FC               	bra	u11247
 14153  000C70  F000               	nop	
 14154  000C72  0100               	movlb	0	; () banked
 14155  000C74  2BB0               	incf	actuatorTest@i_1755& (0+255),f,b
 14156  000C76  D7EF               	goto	l8644
 14157  000C78                     l8652:
 14158                           
 14159                           ; BSR set to: 0
 14160  000C78  0E00               	movlw	0
 14161  000C7A  0100               	movlb	0	; () banked
 14162  000C7C  6FB1               	movwf	actuatorTest@i_1756& (0+255),b
 14163  000C7E                     l8654:
 14164                           
 14165                           ; BSR set to: 0
 14166  000C7E  0E63               	movlw	99
 14167  000C80  0100               	movlb	0	; () banked
 14168  000C82  65B1               	cpfsgt	actuatorTest@i_1756& (0+255),b
 14169  000C84  D001               	goto	l8658
 14170  000C86  D00C               	goto	l8662
 14171  000C88                     l8658:
 14172                           
 14173                           ; BSR set to: 0
 14174  000C88  0E68               	movlw	104
 14175  000C8A  0100               	movlb	0	; () banked
 14176  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14177  000C8E  0EE4               	movlw	228
 14178  000C90                     u11257:
 14179  000C90  2EE8               	decfsz	wreg,f,c
 14180  000C92  D7FE               	bra	u11257
 14181  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14182  000C96  D7FC               	bra	u11257
 14183  000C98  F000               	nop	
 14184  000C9A  0100               	movlb	0	; () banked
 14185  000C9C  2BB1               	incf	actuatorTest@i_1756& (0+255),f,b
 14186  000C9E  D7EF               	goto	l8654
 14187  000CA0                     l8662:
 14188                           
 14189                           ; BSR set to: 0
 14190                           ;Test.c: 280: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14191  000CA0  0E80               	movlw	128
 14192  000CA2  EC3A  F02F         	call	_lcdInst
 14193  000CA6  0EC0               	movlw	192
 14194  000CA8  EC3A  F02F         	call	_lcdInst
 14195                           
 14196                           ;Test.c: 281: printf("LEFT -- 2s      ");
 14197  000CAC  0E97               	movlw	low STR_99
 14198  000CAE  0100               	movlb	0	; () banked
 14199  000CB0  6F8E               	movwf	printf@f& (0+255),b
 14200  000CB2  0EFB               	movlw	high STR_99
 14201  000CB4  0100               	movlb	0	; () banked
 14202  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14203  000CB8  EC67  F00E         	call	_printf	;wreg free
 14204                           
 14205                           ;Test.c: 282: updateServoPosition(2400, 1);
 14206  000CBC  0E09               	movlw	9
 14207  000CBE  0100               	movlb	0	; () banked
 14208  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14209  000CC2  0E60               	movlw	96
 14210  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14211  000CC6  0E00               	movlw	0
 14212  000CC8  0100               	movlb	0	; () banked
 14213  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14214  000CCC  0E01               	movlw	1
 14215  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14216  000CD0  ECB2  F028         	call	_updateServoPosition	;wreg free
 14217                           
 14218                           ;Test.c: 283: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14219  000CD4  0E00               	movlw	0
 14220  000CD6  0100               	movlb	0	; () banked
 14221  000CD8  6FB2               	movwf	actuatorTest@i_1758& (0+255),b
 14222  000CDA                     l8670:
 14223                           
 14224                           ; BSR set to: 0
 14225  000CDA  0E63               	movlw	99
 14226  000CDC  0100               	movlb	0	; () banked
 14227  000CDE  65B2               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14228  000CE0  D001               	goto	l8674
 14229  000CE2  D00C               	goto	l8678
 14230  000CE4                     l8674:
 14231                           
 14232                           ; BSR set to: 0
 14233  000CE4  0E68               	movlw	104
 14234  000CE6  0100               	movlb	0	; () banked
 14235  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14236  000CEA  0EE4               	movlw	228
 14237  000CEC                     u11267:
 14238  000CEC  2EE8               	decfsz	wreg,f,c
 14239  000CEE  D7FE               	bra	u11267
 14240  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14241  000CF2  D7FC               	bra	u11267
 14242  000CF4  F000               	nop	
 14243  000CF6  0100               	movlb	0	; () banked
 14244  000CF8  2BB2               	incf	actuatorTest@i_1758& (0+255),f,b
 14245  000CFA  D7EF               	goto	l8670
 14246  000CFC                     l8678:
 14247                           
 14248                           ; BSR set to: 0
 14249  000CFC  0E00               	movlw	0
 14250  000CFE  0100               	movlb	0	; () banked
 14251  000D00  6FB3               	movwf	actuatorTest@i_1759& (0+255),b
 14252  000D02                     l8680:
 14253                           
 14254                           ; BSR set to: 0
 14255  000D02  0E63               	movlw	99
 14256  000D04  0100               	movlb	0	; () banked
 14257  000D06  65B3               	cpfsgt	actuatorTest@i_1759& (0+255),b
 14258  000D08  D001               	goto	l8684
 14259  000D0A  D00C               	goto	l8688
 14260  000D0C                     l8684:
 14261                           
 14262                           ; BSR set to: 0
 14263  000D0C  0E68               	movlw	104
 14264  000D0E  0100               	movlb	0	; () banked
 14265  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14266  000D12  0EE4               	movlw	228
 14267  000D14                     u11277:
 14268  000D14  2EE8               	decfsz	wreg,f,c
 14269  000D16  D7FE               	bra	u11277
 14270  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14271  000D1A  D7FC               	bra	u11277
 14272  000D1C  F000               	nop	
 14273  000D1E  0100               	movlb	0	; () banked
 14274  000D20  2BB3               	incf	actuatorTest@i_1759& (0+255),f,b
 14275  000D22  D7EF               	goto	l8680
 14276  000D24                     l8688:
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;Test.c: 285: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14280  000D24  0E80               	movlw	128
 14281  000D26  EC3A  F02F         	call	_lcdInst
 14282  000D2A  0EC0               	movlw	192
 14283  000D2C  EC3A  F02F         	call	_lcdInst
 14284                           
 14285                           ;Test.c: 286: printf("MID-LEFT -- 2s  ");
 14286  000D30  0E1F               	movlw	low STR_100
 14287  000D32  0100               	movlb	0	; () banked
 14288  000D34  6F8E               	movwf	printf@f& (0+255),b
 14289  000D36  0EFC               	movlw	high STR_100
 14290  000D38  0100               	movlb	0	; () banked
 14291  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14292  000D3C  EC67  F00E         	call	_printf	;wreg free
 14293                           
 14294                           ;Test.c: 287: updateServoPosition(1670, 1);
 14295  000D40  0E06               	movlw	6
 14296  000D42  0100               	movlb	0	; () banked
 14297  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14298  000D46  0E86               	movlw	134
 14299  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14300  000D4A  0E00               	movlw	0
 14301  000D4C  0100               	movlb	0	; () banked
 14302  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14303  000D50  0E01               	movlw	1
 14304  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14305  000D54  ECB2  F028         	call	_updateServoPosition	;wreg free
 14306                           
 14307                           ;Test.c: 288: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14308  000D58  0E00               	movlw	0
 14309  000D5A  0100               	movlb	0	; () banked
 14310  000D5C  6FB4               	movwf	actuatorTest@i_1761& (0+255),b
 14311  000D5E                     l8696:
 14312                           
 14313                           ; BSR set to: 0
 14314  000D5E  0E63               	movlw	99
 14315  000D60  0100               	movlb	0	; () banked
 14316  000D62  65B4               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14317  000D64  D001               	goto	l8700
 14318  000D66  D00C               	goto	l8704
 14319  000D68                     l8700:
 14320                           
 14321                           ; BSR set to: 0
 14322  000D68  0E68               	movlw	104
 14323  000D6A  0100               	movlb	0	; () banked
 14324  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14325  000D6E  0EE4               	movlw	228
 14326  000D70                     u11287:
 14327  000D70  2EE8               	decfsz	wreg,f,c
 14328  000D72  D7FE               	bra	u11287
 14329  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14330  000D76  D7FC               	bra	u11287
 14331  000D78  F000               	nop	
 14332  000D7A  0100               	movlb	0	; () banked
 14333  000D7C  2BB4               	incf	actuatorTest@i_1761& (0+255),f,b
 14334  000D7E  D7EF               	goto	l8696
 14335  000D80                     l8704:
 14336                           
 14337                           ; BSR set to: 0
 14338  000D80  0E00               	movlw	0
 14339  000D82  0100               	movlb	0	; () banked
 14340  000D84  6FB5               	movwf	actuatorTest@i_1762& (0+255),b
 14341  000D86                     l8706:
 14342                           
 14343                           ; BSR set to: 0
 14344  000D86  0E63               	movlw	99
 14345  000D88  0100               	movlb	0	; () banked
 14346  000D8A  65B5               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14347  000D8C  D001               	goto	l8710
 14348  000D8E  D00C               	goto	l8714
 14349  000D90                     l8710:
 14350                           
 14351                           ; BSR set to: 0
 14352  000D90  0E68               	movlw	104
 14353  000D92  0100               	movlb	0	; () banked
 14354  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14355  000D96  0EE4               	movlw	228
 14356  000D98                     u11297:
 14357  000D98  2EE8               	decfsz	wreg,f,c
 14358  000D9A  D7FE               	bra	u11297
 14359  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14360  000D9E  D7FC               	bra	u11297
 14361  000DA0  F000               	nop	
 14362  000DA2  0100               	movlb	0	; () banked
 14363  000DA4  2BB5               	incf	actuatorTest@i_1762& (0+255),f,b
 14364  000DA6  D7EF               	goto	l8706
 14365  000DA8                     l8714:
 14366                           
 14367                           ; BSR set to: 0
 14368                           ;Test.c: 290: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14369  000DA8  0E80               	movlw	128
 14370  000DAA  EC3A  F02F         	call	_lcdInst
 14371  000DAE  0EC0               	movlw	192
 14372  000DB0  EC3A  F02F         	call	_lcdInst
 14373                           
 14374                           ;Test.c: 291: printf("MID-RIGHT -- 2s ");
 14375  000DB4  0E30               	movlw	low STR_101
 14376  000DB6  0100               	movlb	0	; () banked
 14377  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14378  000DBA  0EFC               	movlw	high STR_101
 14379  000DBC  0100               	movlb	0	; () banked
 14380  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14381  000DC0  EC67  F00E         	call	_printf	;wreg free
 14382                           
 14383                           ;Test.c: 292: updateServoPosition(850, 1);
 14384  000DC4  0E03               	movlw	3
 14385  000DC6  0100               	movlb	0	; () banked
 14386  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14387  000DCA  0E52               	movlw	82
 14388  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14389  000DCE  0E00               	movlw	0
 14390  000DD0  0100               	movlb	0	; () banked
 14391  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14392  000DD4  0E01               	movlw	1
 14393  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14394  000DD8  ECB2  F028         	call	_updateServoPosition	;wreg free
 14395                           
 14396                           ;Test.c: 293: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14397  000DDC  0E00               	movlw	0
 14398  000DDE  0100               	movlb	0	; () banked
 14399  000DE0  6FB6               	movwf	actuatorTest@i_1764& (0+255),b
 14400  000DE2                     l8722:
 14401                           
 14402                           ; BSR set to: 0
 14403  000DE2  0E63               	movlw	99
 14404  000DE4  0100               	movlb	0	; () banked
 14405  000DE6  65B6               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14406  000DE8  D001               	goto	l8726
 14407  000DEA  D00C               	goto	l8730
 14408  000DEC                     l8726:
 14409                           
 14410                           ; BSR set to: 0
 14411  000DEC  0E68               	movlw	104
 14412  000DEE  0100               	movlb	0	; () banked
 14413  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14414  000DF2  0EE4               	movlw	228
 14415  000DF4                     u11307:
 14416  000DF4  2EE8               	decfsz	wreg,f,c
 14417  000DF6  D7FE               	bra	u11307
 14418  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14419  000DFA  D7FC               	bra	u11307
 14420  000DFC  F000               	nop	
 14421  000DFE  0100               	movlb	0	; () banked
 14422  000E00  2BB6               	incf	actuatorTest@i_1764& (0+255),f,b
 14423  000E02  D7EF               	goto	l8722
 14424  000E04                     l8730:
 14425                           
 14426                           ; BSR set to: 0
 14427  000E04  0E00               	movlw	0
 14428  000E06  0100               	movlb	0	; () banked
 14429  000E08  6FB7               	movwf	actuatorTest@i_1765& (0+255),b
 14430  000E0A                     l8732:
 14431                           
 14432                           ; BSR set to: 0
 14433  000E0A  0E63               	movlw	99
 14434  000E0C  0100               	movlb	0	; () banked
 14435  000E0E  65B7               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14436  000E10  D001               	goto	l8736
 14437  000E12  D00C               	goto	l8740
 14438  000E14                     l8736:
 14439                           
 14440                           ; BSR set to: 0
 14441  000E14  0E68               	movlw	104
 14442  000E16  0100               	movlb	0	; () banked
 14443  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14444  000E1A  0EE4               	movlw	228
 14445  000E1C                     u11317:
 14446  000E1C  2EE8               	decfsz	wreg,f,c
 14447  000E1E  D7FE               	bra	u11317
 14448  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14449  000E22  D7FC               	bra	u11317
 14450  000E24  F000               	nop	
 14451  000E26  0100               	movlb	0	; () banked
 14452  000E28  2BB7               	incf	actuatorTest@i_1765& (0+255),f,b
 14453  000E2A  D7EF               	goto	l8732
 14454  000E2C                     l8740:
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;Test.c: 295: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14458  000E2C  0E80               	movlw	128
 14459  000E2E  EC3A  F02F         	call	_lcdInst
 14460  000E32  0EC0               	movlw	192
 14461  000E34  EC3A  F02F         	call	_lcdInst
 14462                           
 14463                           ;Test.c: 296: printf("MID -- 2s       ");
 14464  000E38  0E75               	movlw	low STR_102
 14465  000E3A  0100               	movlb	0	; () banked
 14466  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14467  000E3E  0EFB               	movlw	high STR_102
 14468  000E40  0100               	movlb	0	; () banked
 14469  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14470  000E44  EC67  F00E         	call	_printf	;wreg free
 14471                           
 14472                           ;Test.c: 297: updateServoPosition(1200, 1);
 14473  000E48  0E04               	movlw	4
 14474  000E4A  0100               	movlb	0	; () banked
 14475  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14476  000E4E  0EB0               	movlw	176
 14477  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14478  000E52  0E00               	movlw	0
 14479  000E54  0100               	movlb	0	; () banked
 14480  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14481  000E58  0E01               	movlw	1
 14482  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14483  000E5C  ECB2  F028         	call	_updateServoPosition	;wreg free
 14484                           
 14485                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14486  000E60  0E00               	movlw	0
 14487  000E62  0100               	movlb	0	; () banked
 14488  000E64  6FB8               	movwf	actuatorTest@i_1767& (0+255),b
 14489  000E66                     l8748:
 14490                           
 14491                           ; BSR set to: 0
 14492  000E66  0E63               	movlw	99
 14493  000E68  0100               	movlb	0	; () banked
 14494  000E6A  65B8               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14495  000E6C  D001               	goto	l8752
 14496  000E6E  D00C               	goto	l8756
 14497  000E70                     l8752:
 14498                           
 14499                           ; BSR set to: 0
 14500  000E70  0E68               	movlw	104
 14501  000E72  0100               	movlb	0	; () banked
 14502  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14503  000E76  0EE4               	movlw	228
 14504  000E78                     u11327:
 14505  000E78  2EE8               	decfsz	wreg,f,c
 14506  000E7A  D7FE               	bra	u11327
 14507  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14508  000E7E  D7FC               	bra	u11327
 14509  000E80  F000               	nop	
 14510  000E82  0100               	movlb	0	; () banked
 14511  000E84  2BB8               	incf	actuatorTest@i_1767& (0+255),f,b
 14512  000E86  D7EF               	goto	l8748
 14513  000E88                     l8756:
 14514                           
 14515                           ; BSR set to: 0
 14516  000E88  0E00               	movlw	0
 14517  000E8A  0100               	movlb	0	; () banked
 14518  000E8C  6FB9               	movwf	actuatorTest@i_1768& (0+255),b
 14519  000E8E                     l8758:
 14520                           
 14521                           ; BSR set to: 0
 14522  000E8E  0E63               	movlw	99
 14523  000E90  0100               	movlb	0	; () banked
 14524  000E92  65B9               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14525  000E94  D001               	goto	l8762
 14526  000E96  D00C               	goto	l1360
 14527  000E98                     l8762:
 14528                           
 14529                           ; BSR set to: 0
 14530  000E98  0E68               	movlw	104
 14531  000E9A  0100               	movlb	0	; () banked
 14532  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14533  000E9E  0EE4               	movlw	228
 14534  000EA0                     u11337:
 14535  000EA0  2EE8               	decfsz	wreg,f,c
 14536  000EA2  D7FE               	bra	u11337
 14537  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14538  000EA6  D7FC               	bra	u11337
 14539  000EA8  F000               	nop	
 14540  000EAA  0100               	movlb	0	; () banked
 14541  000EAC  2BB9               	incf	actuatorTest@i_1768& (0+255),f,b
 14542  000EAE  D7EF               	goto	l8758
 14543  000EB0                     l1360:
 14544                           
 14545                           ; BSR set to: 0
 14546                           ;Test.c: 299: TMR1ON = 0;
 14547  000EB0  90CD               	bcf	4045,0,c	;volatile
 14548                           
 14549                           ; BSR set to: 0
 14550                           ;Test.c: 306: printf("TST: TILT SERVO");
 14551  000EB2  0E2D               	movlw	low STR_103
 14552  000EB4  0100               	movlb	0	; () banked
 14553  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14554  000EB8  0EFE               	movlw	high STR_103
 14555  000EBA  0100               	movlb	0	; () banked
 14556  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14557  000EBE  EC67  F00E         	call	_printf	;wreg free
 14558                           
 14559                           ;Test.c: 307: lcdInst(0b11000000);;
 14560  000EC2  0EC0               	movlw	192
 14561  000EC4  EC3A  F02F         	call	_lcdInst
 14562                           
 14563                           ;Test.c: 308: printf("LEVEL -- 2s     ");
 14564  000EC8  0EA8               	movlw	low STR_104
 14565  000ECA  0100               	movlb	0	; () banked
 14566  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14567  000ECE  0EFB               	movlw	high STR_104
 14568  000ED0  0100               	movlb	0	; () banked
 14569  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14570  000ED4  EC67  F00E         	call	_printf	;wreg free
 14571                           
 14572                           ;Test.c: 309: updateServoPosition(1050, 3);
 14573  000ED8  0E04               	movlw	4
 14574  000EDA  0100               	movlb	0	; () banked
 14575  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14576  000EDE  0E1A               	movlw	26
 14577  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14578  000EE2  0E00               	movlw	0
 14579  000EE4  0100               	movlb	0	; () banked
 14580  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14581  000EE8  0E03               	movlw	3
 14582  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14583  000EEC  ECB2  F028         	call	_updateServoPosition	;wreg free
 14584                           
 14585                           ;Test.c: 310: TMR3ON = 1;
 14586  000EF0  80B1               	bsf	4017,0,c	;volatile
 14587                           
 14588                           ;Test.c: 311: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14589  000EF2  0E00               	movlw	0
 14590  000EF4  0100               	movlb	0	; () banked
 14591  000EF6  6FBA               	movwf	actuatorTest@i_1771& (0+255),b
 14592  000EF8                     l8776:
 14593                           
 14594                           ; BSR set to: 0
 14595  000EF8  0E63               	movlw	99
 14596  000EFA  0100               	movlb	0	; () banked
 14597  000EFC  65BA               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14598  000EFE  D001               	goto	l8780
 14599  000F00  D00C               	goto	l8784
 14600  000F02                     l8780:
 14601                           
 14602                           ; BSR set to: 0
 14603  000F02  0E68               	movlw	104
 14604  000F04  0100               	movlb	0	; () banked
 14605  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14606  000F08  0EE4               	movlw	228
 14607  000F0A                     u11347:
 14608  000F0A  2EE8               	decfsz	wreg,f,c
 14609  000F0C  D7FE               	bra	u11347
 14610  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14611  000F10  D7FC               	bra	u11347
 14612  000F12  F000               	nop	
 14613  000F14  0100               	movlb	0	; () banked
 14614  000F16  2BBA               	incf	actuatorTest@i_1771& (0+255),f,b
 14615  000F18  D7EF               	goto	l8776
 14616  000F1A                     l8784:
 14617                           
 14618                           ; BSR set to: 0
 14619  000F1A  0E00               	movlw	0
 14620  000F1C  0100               	movlb	0	; () banked
 14621  000F1E  6FBB               	movwf	actuatorTest@i_1772& (0+255),b
 14622  000F20                     l8786:
 14623                           
 14624                           ; BSR set to: 0
 14625  000F20  0E63               	movlw	99
 14626  000F22  0100               	movlb	0	; () banked
 14627  000F24  65BB               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14628  000F26  D001               	goto	l8790
 14629  000F28  D00C               	goto	l8794
 14630  000F2A                     l8790:
 14631                           
 14632                           ; BSR set to: 0
 14633  000F2A  0E68               	movlw	104
 14634  000F2C  0100               	movlb	0	; () banked
 14635  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14636  000F30  0EE4               	movlw	228
 14637  000F32                     u11357:
 14638  000F32  2EE8               	decfsz	wreg,f,c
 14639  000F34  D7FE               	bra	u11357
 14640  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14641  000F38  D7FC               	bra	u11357
 14642  000F3A  F000               	nop	
 14643  000F3C  0100               	movlb	0	; () banked
 14644  000F3E  2BBB               	incf	actuatorTest@i_1772& (0+255),f,b
 14645  000F40  D7EF               	goto	l8786
 14646  000F42                     l8794:
 14647                           
 14648                           ; BSR set to: 0
 14649                           ;Test.c: 313: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14650  000F42  0E80               	movlw	128
 14651  000F44  EC3A  F02F         	call	_lcdInst
 14652  000F48  0EC0               	movlw	192
 14653  000F4A  EC3A  F02F         	call	_lcdInst
 14654                           
 14655                           ;Test.c: 314: printf("DROP -- 2s      ");
 14656  000F4E  0E86               	movlw	low STR_105
 14657  000F50  0100               	movlb	0	; () banked
 14658  000F52  6F8E               	movwf	printf@f& (0+255),b
 14659  000F54  0EFB               	movlw	high STR_105
 14660  000F56  0100               	movlb	0	; () banked
 14661  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14662  000F5A  EC67  F00E         	call	_printf	;wreg free
 14663                           
 14664                           ;Test.c: 315: updateServoPosition(1260, 3);
 14665  000F5E  0E04               	movlw	4
 14666  000F60  0100               	movlb	0	; () banked
 14667  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14668  000F64  0EEC               	movlw	236
 14669  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14670  000F68  0E00               	movlw	0
 14671  000F6A  0100               	movlb	0	; () banked
 14672  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14673  000F6E  0E03               	movlw	3
 14674  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14675  000F72  ECB2  F028         	call	_updateServoPosition	;wreg free
 14676                           
 14677                           ;Test.c: 316: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14678  000F76  0E00               	movlw	0
 14679  000F78  0100               	movlb	0	; () banked
 14680  000F7A  6FBC               	movwf	actuatorTest@i_1774& (0+255),b
 14681  000F7C                     l8802:
 14682                           
 14683                           ; BSR set to: 0
 14684  000F7C  0E63               	movlw	99
 14685  000F7E  0100               	movlb	0	; () banked
 14686  000F80  65BC               	cpfsgt	actuatorTest@i_1774& (0+255),b
 14687  000F82  D001               	goto	l8806
 14688  000F84  D00C               	goto	l8810
 14689  000F86                     l8806:
 14690                           
 14691                           ; BSR set to: 0
 14692  000F86  0E68               	movlw	104
 14693  000F88  0100               	movlb	0	; () banked
 14694  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14695  000F8C  0EE4               	movlw	228
 14696  000F8E                     u11367:
 14697  000F8E  2EE8               	decfsz	wreg,f,c
 14698  000F90  D7FE               	bra	u11367
 14699  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14700  000F94  D7FC               	bra	u11367
 14701  000F96  F000               	nop	
 14702  000F98  0100               	movlb	0	; () banked
 14703  000F9A  2BBC               	incf	actuatorTest@i_1774& (0+255),f,b
 14704  000F9C  D7EF               	goto	l8802
 14705  000F9E                     l8810:
 14706                           
 14707                           ; BSR set to: 0
 14708  000F9E  0E00               	movlw	0
 14709  000FA0  0100               	movlb	0	; () banked
 14710  000FA2  6FBD               	movwf	actuatorTest@i_1775& (0+255),b
 14711  000FA4                     l8812:
 14712                           
 14713                           ; BSR set to: 0
 14714  000FA4  0E63               	movlw	99
 14715  000FA6  0100               	movlb	0	; () banked
 14716  000FA8  65BD               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14717  000FAA  D001               	goto	l8816
 14718  000FAC  D00C               	goto	l8820
 14719  000FAE                     l8816:
 14720                           
 14721                           ; BSR set to: 0
 14722  000FAE  0E68               	movlw	104
 14723  000FB0  0100               	movlb	0	; () banked
 14724  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14725  000FB4  0EE4               	movlw	228
 14726  000FB6                     u11377:
 14727  000FB6  2EE8               	decfsz	wreg,f,c
 14728  000FB8  D7FE               	bra	u11377
 14729  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14730  000FBC  D7FC               	bra	u11377
 14731  000FBE  F000               	nop	
 14732  000FC0  0100               	movlb	0	; () banked
 14733  000FC2  2BBD               	incf	actuatorTest@i_1775& (0+255),f,b
 14734  000FC4  D7EF               	goto	l8812
 14735  000FC6                     l8820:
 14736                           
 14737                           ; BSR set to: 0
 14738                           ;Test.c: 318: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14739  000FC6  0E80               	movlw	128
 14740  000FC8  EC3A  F02F         	call	_lcdInst
 14741  000FCC  0EC0               	movlw	192
 14742  000FCE  EC3A  F02F         	call	_lcdInst
 14743                           
 14744                           ;Test.c: 319: printf("LEVEL -- 2s     ");
 14745  000FD2  0EA8               	movlw	low STR_104
 14746  000FD4  0100               	movlb	0	; () banked
 14747  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14748  000FD8  0EFB               	movlw	high STR_104
 14749  000FDA  0100               	movlb	0	; () banked
 14750  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14751  000FDE  EC67  F00E         	call	_printf	;wreg free
 14752                           
 14753                           ;Test.c: 320: updateServoPosition(1050, 3);
 14754  000FE2  0E04               	movlw	4
 14755  000FE4  0100               	movlb	0	; () banked
 14756  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14757  000FE8  0E1A               	movlw	26
 14758  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14759  000FEC  0E00               	movlw	0
 14760  000FEE  0100               	movlb	0	; () banked
 14761  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14762  000FF2  0E03               	movlw	3
 14763  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14764  000FF6  ECB2  F028         	call	_updateServoPosition	;wreg free
 14765                           
 14766                           ;Test.c: 321: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14767  000FFA  0E00               	movlw	0
 14768  000FFC  0100               	movlb	0	; () banked
 14769  000FFE  6FBE               	movwf	actuatorTest@i_1777& (0+255),b
 14770  001000                     l8828:
 14771                           
 14772                           ; BSR set to: 0
 14773  001000  0E63               	movlw	99
 14774  001002  0100               	movlb	0	; () banked
 14775  001004  65BE               	cpfsgt	actuatorTest@i_1777& (0+255),b
 14776  001006  D001               	goto	l8832
 14777  001008  D00C               	goto	l8836
 14778  00100A                     l8832:
 14779                           
 14780                           ; BSR set to: 0
 14781  00100A  0E68               	movlw	104
 14782  00100C  0100               	movlb	0	; () banked
 14783  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14784  001010  0EE4               	movlw	228
 14785  001012                     u11387:
 14786  001012  2EE8               	decfsz	wreg,f,c
 14787  001014  D7FE               	bra	u11387
 14788  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14789  001018  D7FC               	bra	u11387
 14790  00101A  F000               	nop	
 14791  00101C  0100               	movlb	0	; () banked
 14792  00101E  2BBE               	incf	actuatorTest@i_1777& (0+255),f,b
 14793  001020  D7EF               	goto	l8828
 14794  001022                     l8836:
 14795                           
 14796                           ; BSR set to: 0
 14797  001022  0E00               	movlw	0
 14798  001024  0100               	movlb	0	; () banked
 14799  001026  6FBF               	movwf	actuatorTest@i_1778& (0+255),b
 14800  001028                     l8838:
 14801                           
 14802                           ; BSR set to: 0
 14803  001028  0E63               	movlw	99
 14804  00102A  0100               	movlb	0	; () banked
 14805  00102C  65BF               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14806  00102E  D001               	goto	l8842
 14807  001030  D00C               	goto	l1372
 14808  001032                     l8842:
 14809                           
 14810                           ; BSR set to: 0
 14811  001032  0E68               	movlw	104
 14812  001034  0100               	movlb	0	; () banked
 14813  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14814  001038  0EE4               	movlw	228
 14815  00103A                     u11397:
 14816  00103A  2EE8               	decfsz	wreg,f,c
 14817  00103C  D7FE               	bra	u11397
 14818  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14819  001040  D7FC               	bra	u11397
 14820  001042  F000               	nop	
 14821  001044  0100               	movlb	0	; () banked
 14822  001046  2BBF               	incf	actuatorTest@i_1778& (0+255),f,b
 14823  001048  D7EF               	goto	l8838
 14824  00104A                     l1372:
 14825                           
 14826                           ; BSR set to: 0
 14827                           ;Test.c: 322: TMR3ON = 0;
 14828  00104A  90B1               	bcf	4017,0,c	;volatile
 14829                           
 14830                           ;Test.c: 323: (INTCONbits.GIE = 0);
 14831  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;Test.c: 328: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14835  00104E  0E01               	movlw	1
 14836  001050  EC3A  F02F         	call	_lcdInst
 14837  001054  0E68               	movlw	104
 14838  001056  0100               	movlb	0	; () banked
 14839  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14840  00105A  0EE4               	movlw	228
 14841  00105C                     u11407:
 14842  00105C  2EE8               	decfsz	wreg,f,c
 14843  00105E  D7FE               	bra	u11407
 14844  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14845  001062  D7FC               	bra	u11407
 14846  001064  F000               	nop	
 14847  001066  0E80               	movlw	128
 14848  001068  EC3A  F02F         	call	_lcdInst
 14849                           
 14850                           ;Test.c: 329: printf("TST: CAM SERVO");
 14851  00106C  0EB8               	movlw	low STR_107
 14852  00106E  0100               	movlb	0	; () banked
 14853  001070  6F8E               	movwf	printf@f& (0+255),b
 14854  001072  0EFE               	movlw	high STR_107
 14855  001074  0100               	movlb	0	; () banked
 14856  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14857  001078  EC67  F00E         	call	_printf	;wreg free
 14858                           
 14859                           ;Test.c: 330: lcdInst(0b11000000);;
 14860  00107C  0EC0               	movlw	192
 14861  00107E  EC3A  F02F         	call	_lcdInst
 14862                           
 14863                           ;Test.c: 331: printf("CAM UP  |RC0=1");
 14864  001082  0E9A               	movlw	low STR_108
 14865  001084  0100               	movlb	0	; () banked
 14866  001086  6F8E               	movwf	printf@f& (0+255),b
 14867  001088  0EFE               	movlw	high STR_108
 14868  00108A  0100               	movlb	0	; () banked
 14869  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14870  00108E  EC67  F00E         	call	_printf	;wreg free
 14871                           
 14872                           ;Test.c: 332: LATCbits.LATC0 = 1;
 14873  001092  808B               	bsf	3979,0,c	;volatile
 14874                           
 14875                           ;Test.c: 333: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14876  001094  0E00               	movlw	0
 14877  001096  0100               	movlb	0	; () banked
 14878  001098  6FC0               	movwf	actuatorTest@i_1781& (0+255),b
 14879  00109A                     l8862:
 14880                           
 14881                           ; BSR set to: 0
 14882  00109A  0E63               	movlw	99
 14883  00109C  0100               	movlb	0	; () banked
 14884  00109E  65C0               	cpfsgt	actuatorTest@i_1781& (0+255),b
 14885  0010A0  D001               	goto	l8866
 14886  0010A2  D00C               	goto	l8870
 14887  0010A4                     l8866:
 14888                           
 14889                           ; BSR set to: 0
 14890  0010A4  0E68               	movlw	104
 14891  0010A6  0100               	movlb	0	; () banked
 14892  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14893  0010AA  0EE4               	movlw	228
 14894  0010AC                     u11417:
 14895  0010AC  2EE8               	decfsz	wreg,f,c
 14896  0010AE  D7FE               	bra	u11417
 14897  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14898  0010B2  D7FC               	bra	u11417
 14899  0010B4  F000               	nop	
 14900  0010B6  0100               	movlb	0	; () banked
 14901  0010B8  2BC0               	incf	actuatorTest@i_1781& (0+255),f,b
 14902  0010BA  D7EF               	goto	l8862
 14903  0010BC                     l8870:
 14904                           
 14905                           ; BSR set to: 0
 14906  0010BC  0E00               	movlw	0
 14907  0010BE  0100               	movlb	0	; () banked
 14908  0010C0  6FC1               	movwf	actuatorTest@i_1782& (0+255),b
 14909  0010C2                     l8872:
 14910                           
 14911                           ; BSR set to: 0
 14912  0010C2  0E63               	movlw	99
 14913  0010C4  0100               	movlb	0	; () banked
 14914  0010C6  65C1               	cpfsgt	actuatorTest@i_1782& (0+255),b
 14915  0010C8  D001               	goto	l8876
 14916  0010CA  D00C               	goto	l8880
 14917  0010CC                     l8876:
 14918                           
 14919                           ; BSR set to: 0
 14920  0010CC  0E68               	movlw	104
 14921  0010CE  0100               	movlb	0	; () banked
 14922  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14923  0010D2  0EE4               	movlw	228
 14924  0010D4                     u11427:
 14925  0010D4  2EE8               	decfsz	wreg,f,c
 14926  0010D6  D7FE               	bra	u11427
 14927  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14928  0010DA  D7FC               	bra	u11427
 14929  0010DC  F000               	nop	
 14930  0010DE  0100               	movlb	0	; () banked
 14931  0010E0  2BC1               	incf	actuatorTest@i_1782& (0+255),f,b
 14932  0010E2  D7EF               	goto	l8872
 14933  0010E4                     l8880:
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;Test.c: 334: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14937  0010E4  0E80               	movlw	128
 14938  0010E6  EC3A  F02F         	call	_lcdInst
 14939  0010EA  0EC0               	movlw	192
 14940  0010EC  EC3A  F02F         	call	_lcdInst
 14941                           
 14942                           ;Test.c: 335: printf("CAM DWN |RC0=0");
 14943  0010F0  0E8B               	movlw	low STR_109
 14944  0010F2  0100               	movlb	0	; () banked
 14945  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14946  0010F6  0EFE               	movlw	high STR_109
 14947  0010F8  0100               	movlb	0	; () banked
 14948  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14949  0010FC  EC67  F00E         	call	_printf	;wreg free
 14950                           
 14951                           ;Test.c: 338: for(i=0;i<10000;i++)
 14952  001100  0E00               	movlw	0
 14953  001102  0100               	movlb	0	; () banked
 14954  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14955  001106  0E00               	movlw	0
 14956  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14957  00110A                     l8886:
 14958                           
 14959                           ; BSR set to: 0
 14960  00110A  0100               	movlb	0	; () banked
 14961  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14962  00110E  D008               	goto	l1377
 14963  001110  0E10               	movlw	16
 14964  001112  0100               	movlb	0	; () banked
 14965  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14966  001116  0E27               	movlw	39
 14967  001118  0100               	movlb	0	; () banked
 14968  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14969  00111C  B0D8               	btfsc	status,0,c
 14970  00111E  D00D               	goto	l8896
 14971  001120                     l1377:
 14972                           
 14973                           ; BSR set to: 0
 14974                           ;Test.c: 339: {
 14975                           ;Test.c: 340: LATCbits.LATC0 = 1;
 14976  001120  808B               	bsf	3979,0,c	;volatile
 14977                           
 14978                           ; BSR set to: 0
 14979                           ;Test.c: 341: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14980  001122  0E1A               	movlw	26
 14981  001124                     u11437:
 14982  001124  2EE8               	decfsz	wreg,f,c
 14983  001126  D7FE               	bra	u11437
 14984  001128  D000               	nop2	
 14985                           
 14986                           ;Test.c: 342: LATCbits.LATC0 = 0;
 14987  00112A  908B               	bcf	3979,0,c	;volatile
 14988                           
 14989                           ;Test.c: 343: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14990  00112C  0EF0               	movlw	240
 14991  00112E                     u11447:
 14992  00112E  2EE8               	decfsz	wreg,f,c
 14993  001130  D7FE               	bra	u11447
 14994  001132  0100               	movlb	0	; () banked
 14995  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14996  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14997  001138  D7E8               	goto	l8886
 14998  00113A                     l8896:
 14999                           
 15000                           ; BSR set to: 0
 15001                           ;Test.c: 344: }
 15002                           ;Test.c: 346: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15003  00113A  0E00               	movlw	0
 15004  00113C  0100               	movlb	0	; () banked
 15005  00113E  6FC2               	movwf	actuatorTest@i_1784& (0+255),b
 15006  001140                     l8898:
 15007                           
 15008                           ; BSR set to: 0
 15009  001140  0E63               	movlw	99
 15010  001142  0100               	movlb	0	; () banked
 15011  001144  65C2               	cpfsgt	actuatorTest@i_1784& (0+255),b
 15012  001146  D001               	goto	l8902
 15013  001148  D00C               	goto	l8906
 15014  00114A                     l8902:
 15015                           
 15016                           ; BSR set to: 0
 15017  00114A  0E68               	movlw	104
 15018  00114C  0100               	movlb	0	; () banked
 15019  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15020  001150  0EE4               	movlw	228
 15021  001152                     u11457:
 15022  001152  2EE8               	decfsz	wreg,f,c
 15023  001154  D7FE               	bra	u11457
 15024  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15025  001158  D7FC               	bra	u11457
 15026  00115A  F000               	nop	
 15027  00115C  0100               	movlb	0	; () banked
 15028  00115E  2BC2               	incf	actuatorTest@i_1784& (0+255),f,b
 15029  001160  D7EF               	goto	l8898
 15030  001162                     l8906:
 15031                           
 15032                           ; BSR set to: 0
 15033  001162  0E00               	movlw	0
 15034  001164  0100               	movlb	0	; () banked
 15035  001166  6FC3               	movwf	actuatorTest@i_1785& (0+255),b
 15036  001168                     l8908:
 15037                           
 15038                           ; BSR set to: 0
 15039  001168  0E63               	movlw	99
 15040  00116A  0100               	movlb	0	; () banked
 15041  00116C  65C3               	cpfsgt	actuatorTest@i_1785& (0+255),b
 15042  00116E  D001               	goto	l8912
 15043  001170  D00C               	goto	l8916
 15044  001172                     l8912:
 15045                           
 15046                           ; BSR set to: 0
 15047  001172  0E68               	movlw	104
 15048  001174  0100               	movlb	0	; () banked
 15049  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 15050  001178  0EE4               	movlw	228
 15051  00117A                     u11467:
 15052  00117A  2EE8               	decfsz	wreg,f,c
 15053  00117C  D7FE               	bra	u11467
 15054  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15055  001180  D7FC               	bra	u11467
 15056  001182  F000               	nop	
 15057  001184  0100               	movlb	0	; () banked
 15058  001186  2BC3               	incf	actuatorTest@i_1785& (0+255),f,b
 15059  001188  D7EF               	goto	l8908
 15060  00118A                     l8916:
 15061                           
 15062                           ; BSR set to: 0
 15063                           ;Test.c: 347: machine_state = Testing_state;
 15064  00118A  0E03               	movlw	3
 15065  00118C  0100               	movlb	0	; () banked
 15066  00118E  6FFC               	movwf	_machine_state& (0+255),b
 15067                           
 15068                           ; BSR set to: 0
 15069  001190  0012               	return		;funcret
 15070  001192                     __end_of_actuatorTest:
 15071                           	opt stack 0
 15072                           tblptru	equ	0xFF8
 15073                           tblptrh	equ	0xFF7
 15074                           tblptrl	equ	0xFF6
 15075                           tablat	equ	0xFF5
 15076                           prodh	equ	0xFF4
 15077                           prodl	equ	0xFF3
 15078                           intcon	equ	0xFF2
 15079                           intcon2	equ	0xFF1
 15080                           intcon3	equ	0xFF0
 15081                           postinc0	equ	0xFEE
 15082                           wreg	equ	0xFE8
 15083                           postdec1	equ	0xFE5
 15084                           fsr1l	equ	0xFE1
 15085                           indf2	equ	0xFDF
 15086                           postinc2	equ	0xFDE
 15087                           postdec2	equ	0xFDD
 15088                           fsr2h	equ	0xFDA
 15089                           fsr2l	equ	0xFD9
 15090                           status	equ	0xFD8
 15091                           
 15092 ;; *************** function _SpeedTest *****************
 15093 ;; Defined at:
 15094 ;;		line 518 in file "Test.c"
 15095 ;; Parameters:    Size  Location     Type
 15096 ;;		None
 15097 ;; Auto vars:     Size  Location     Type
 15098 ;;		None
 15099 ;; Return value:  Size  Location     Type
 15100 ;;                  1    wreg      void 
 15101 ;; Registers used:
 15102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15103 ;; Tracked objects:
 15104 ;;		On entry : 0/0
 15105 ;;		On exit  : 0/0
 15106 ;;		Unchanged: 0/0
 15107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15112 ;;Total ram usage:        1 bytes
 15113 ;; Hardware stack levels used:    1
 15114 ;; Hardware stack levels required when called:   10
 15115 ;; This function calls:
 15116 ;;		_lcdInst
 15117 ;;		_printf
 15118 ;; This function is called by:
 15119 ;;		_Test
 15120 ;; This function uses a non-reentrant model
 15121 ;;
 15122                           
 15123                           	psect	text46
 15124  00505E                     __ptext46:
 15125                           	opt stack 0
 15126  00505E                     _SpeedTest:
 15127                           	opt stack 19
 15128                           
 15129                           ;Test.c: 520: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15130                           
 15131                           ; BSR set to: 0
 15132                           ;incstack = 0
 15133  00505E  0E01               	movlw	1
 15134  005060  EC3A  F02F         	call	_lcdInst
 15135  005064  0E68               	movlw	104
 15136  005066  0100               	movlb	0	; () banked
 15137  005068  6FAB               	movwf	??_SpeedTest& (0+255),b
 15138  00506A  0EE4               	movlw	228
 15139  00506C                     u11477:
 15140  00506C  2EE8               	decfsz	wreg,f,c
 15141  00506E  D7FE               	bra	u11477
 15142  005070  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15143  005072  D7FC               	bra	u11477
 15144  005074  F000               	nop	
 15145  005076  0E80               	movlw	128
 15146  005078  EC3A  F02F         	call	_lcdInst
 15147                           
 15148                           ;Test.c: 521: printf("S: D WILL RETURN ");
 15149  00507C  0E1B               	movlw	low STR_118
 15150  00507E  0100               	movlb	0	; () banked
 15151  005080  6F8E               	movwf	printf@f& (0+255),b
 15152  005082  0EFB               	movlw	high STR_118
 15153  005084  0100               	movlb	0	; () banked
 15154  005086  6F8F               	movwf	(printf@f+1)& (0+255),b
 15155  005088  EC67  F00E         	call	_printf	;wreg free
 15156                           
 15157                           ;Test.c: 522: lcdInst(0b11000000);;
 15158  00508C  0EC0               	movlw	192
 15159  00508E  EC3A  F02F         	call	_lcdInst
 15160                           
 15161                           ;Test.c: 523: printf("OTHER SETS RA5   ");
 15162  005092  0E09               	movlw	low STR_119
 15163  005094  0100               	movlb	0	; () banked
 15164  005096  6F8E               	movwf	printf@f& (0+255),b
 15165  005098  0EFB               	movlw	high STR_119
 15166  00509A  0100               	movlb	0	; () banked
 15167  00509C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15168  00509E  EC67  F00E         	call	_printf	;wreg free
 15169  0050A2                     l1435:
 15170  0050A2  A281               	btfss	3969,1,c	;volatile
 15171  0050A4  D7FE               	goto	l1435
 15172                           
 15173                           ;Test.c: 528: }
 15174                           ;Test.c: 529: if(PORTB >> 4 == 0b1111){
 15175  0050A6  3881               	swapf	3969,w,c	;volatile
 15176  0050A8  0B0F               	andlw	15
 15177  0050AA  0A0F               	xorlw	15
 15178  0050AC  B4D8               	btfsc	status,2,c
 15179  0050AE  0012               	return	
 15180  0050B0  D014               	goto	l9014
 15181  0050B2                     l1442:
 15182                           
 15183                           ;Test.c: 534: LATBbits.LATB2 = 1;
 15184  0050B2  848A               	bsf	3978,2,c	;volatile
 15185                           
 15186                           ;Test.c: 535: _delay((unsigned long)((5)*(32000000/4000.0)));
 15187  0050B4  0E34               	movlw	52
 15188  0050B6  0100               	movlb	0	; () banked
 15189  0050B8  6FAB               	movwf	??_SpeedTest& (0+255),b
 15190  0050BA  0EF1               	movlw	241
 15191  0050BC                     u11487:
 15192  0050BC  2EE8               	decfsz	wreg,f,c
 15193  0050BE  D7FE               	bra	u11487
 15194  0050C0  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15195  0050C2  D7FC               	bra	u11487
 15196  0050C4  D000               	nop2	
 15197                           
 15198                           ;Test.c: 536: LATBbits.LATB2 = 0;
 15199  0050C6  948A               	bcf	3978,2,c	;volatile
 15200                           
 15201                           ;Test.c: 537: _delay((unsigned long)((5)*(32000000/4000.0)));
 15202  0050C8  0E34               	movlw	52
 15203  0050CA  0100               	movlb	0	; () banked
 15204  0050CC  6FAB               	movwf	??_SpeedTest& (0+255),b
 15205  0050CE  0EF1               	movlw	241
 15206  0050D0                     u11497:
 15207  0050D0  2EE8               	decfsz	wreg,f,c
 15208  0050D2  D7FE               	bra	u11497
 15209  0050D4  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15210  0050D6  D7FC               	bra	u11497
 15211  0050D8  D000               	nop2	
 15212  0050DA                     l9014:
 15213  0050DA  B281               	btfsc	3969,1,c	;volatile
 15214  0050DC  D7EA               	goto	l1442
 15215                           
 15216                           ;Test.c: 540: }
 15217                           ;Test.c: 541: LATBbits.LATB2 = 0;
 15218  0050DE  948A               	bcf	3978,2,c	;volatile
 15219  0050E0  D7E0               	goto	l1435
 15220  0050E2                     __end_of_SpeedTest:
 15221                           	opt stack 0
 15222                           tblptru	equ	0xFF8
 15223                           tblptrh	equ	0xFF7
 15224                           tblptrl	equ	0xFF6
 15225                           tablat	equ	0xFF5
 15226                           prodh	equ	0xFF4
 15227                           prodl	equ	0xFF3
 15228                           intcon	equ	0xFF2
 15229                           intcon2	equ	0xFF1
 15230                           intcon3	equ	0xFF0
 15231                           postinc0	equ	0xFEE
 15232                           wreg	equ	0xFE8
 15233                           postdec1	equ	0xFE5
 15234                           fsr1l	equ	0xFE1
 15235                           indf2	equ	0xFDF
 15236                           postinc2	equ	0xFDE
 15237                           postdec2	equ	0xFDD
 15238                           fsr2h	equ	0xFDA
 15239                           fsr2l	equ	0xFD9
 15240                           status	equ	0xFD8
 15241                           
 15242 ;; *************** function _PortTestPusher *****************
 15243 ;; Defined at:
 15244 ;;		line 659 in file "Test.c"
 15245 ;; Parameters:    Size  Location     Type
 15246 ;;		None
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;		None
 15249 ;; Return value:  Size  Location     Type
 15250 ;;                  1    wreg      void 
 15251 ;; Registers used:
 15252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15253 ;; Tracked objects:
 15254 ;;		On entry : 0/0
 15255 ;;		On exit  : 0/0
 15256 ;;		Unchanged: 0/0
 15257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;Total ram usage:        1 bytes
 15263 ;; Hardware stack levels used:    1
 15264 ;; Hardware stack levels required when called:   10
 15265 ;; This function calls:
 15266 ;;		_lcdInst
 15267 ;;		_printf
 15268 ;; This function is called by:
 15269 ;;		_Test
 15270 ;; This function uses a non-reentrant model
 15271 ;;
 15272                           
 15273                           	psect	text47
 15274  0055AE                     __ptext47:
 15275                           	opt stack 0
 15276  0055AE                     _PortTestPusher:
 15277                           	opt stack 19
 15278                           
 15279                           ;Test.c: 660: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15280                           
 15281                           ;incstack = 0
 15282  0055AE  0E01               	movlw	1
 15283  0055B0  EC3A  F02F         	call	_lcdInst
 15284  0055B4  0E68               	movlw	104
 15285  0055B6  0100               	movlb	0	; () banked
 15286  0055B8  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15287  0055BA  0EE4               	movlw	228
 15288  0055BC                     u11507:
 15289  0055BC  2EE8               	decfsz	wreg,f,c
 15290  0055BE  D7FE               	bra	u11507
 15291  0055C0  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15292  0055C2  D7FC               	bra	u11507
 15293  0055C4  F000               	nop	
 15294  0055C6  0E80               	movlw	128
 15295  0055C8  EC3A  F02F         	call	_lcdInst
 15296                           
 15297                           ;Test.c: 661: printf("D WILL RETURN    ");
 15298  0055CC  0EF7               	movlw	low STR_111
 15299  0055CE  0100               	movlb	0	; () banked
 15300  0055D0  6F8E               	movwf	printf@f& (0+255),b
 15301  0055D2  0EFA               	movlw	high STR_111
 15302  0055D4  0100               	movlb	0	; () banked
 15303  0055D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15304  0055D8  EC67  F00E         	call	_printf	;wreg free
 15305                           
 15306                           ;Test.c: 662: lcdInst(0b11000000);;
 15307  0055DC  0EC0               	movlw	192
 15308  0055DE  EC3A  F02F         	call	_lcdInst
 15309                           
 15310                           ;Test.c: 663: printf("OTHER SETS PUSHER");
 15311  0055E2  0E3F               	movlw	low STR_127
 15312  0055E4  0100               	movlb	0	; () banked
 15313  0055E6  6F8E               	movwf	printf@f& (0+255),b
 15314  0055E8  0EFB               	movlw	high STR_127
 15315  0055EA  0100               	movlb	0	; () banked
 15316  0055EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15317  0055EE  EC67  F00E         	call	_printf	;wreg free
 15318  0055F2                     l1496:
 15319  0055F2  A281               	btfss	3969,1,c	;volatile
 15320  0055F4  D7FE               	goto	l1496
 15321                           
 15322                           ;Test.c: 668: }
 15323                           ;Test.c: 669: if(PORTB >> 4 == 0b1111){
 15324  0055F6  3881               	swapf	3969,w,c	;volatile
 15325  0055F8  0B0F               	andlw	15
 15326  0055FA  0A0F               	xorlw	15
 15327  0055FC  B4D8               	btfsc	status,2,c
 15328  0055FE  0012               	return	
 15329                           
 15330                           ;Test.c: 672: else{
 15331                           ;Test.c: 673: LATAbits.LATA4 = 1;
 15332                           
 15333                           ;Test.c: 671: }
 15334                           
 15335                           ;Test.c: 670: break;
 15336  005600  8889               	bsf	3977,4,c	;volatile
 15337  005602                     l1502:
 15338  005602  B281               	btfsc	3969,1,c	;volatile
 15339  005604  D7FE               	goto	l1502
 15340                           
 15341                           ;Test.c: 676: }
 15342                           ;Test.c: 677: LATAbits.LATA4 = 0;
 15343  005606  9889               	bcf	3977,4,c	;volatile
 15344  005608  D7F4               	goto	l1496
 15345  00560A                     __end_of_PortTestPusher:
 15346                           	opt stack 0
 15347                           tblptru	equ	0xFF8
 15348                           tblptrh	equ	0xFF7
 15349                           tblptrl	equ	0xFF6
 15350                           tablat	equ	0xFF5
 15351                           prodh	equ	0xFF4
 15352                           prodl	equ	0xFF3
 15353                           intcon	equ	0xFF2
 15354                           intcon2	equ	0xFF1
 15355                           intcon3	equ	0xFF0
 15356                           postinc0	equ	0xFEE
 15357                           wreg	equ	0xFE8
 15358                           postdec1	equ	0xFE5
 15359                           fsr1l	equ	0xFE1
 15360                           indf2	equ	0xFDF
 15361                           postinc2	equ	0xFDE
 15362                           postdec2	equ	0xFDD
 15363                           fsr2h	equ	0xFDA
 15364                           fsr2l	equ	0xFD9
 15365                           status	equ	0xFD8
 15366                           
 15367 ;; *************** function _PortTestDC *****************
 15368 ;; Defined at:
 15369 ;;		line 410 in file "Test.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;		None
 15372 ;; Auto vars:     Size  Location     Type
 15373 ;;		None
 15374 ;; Return value:  Size  Location     Type
 15375 ;;                  1    wreg      void 
 15376 ;; Registers used:
 15377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15378 ;; Tracked objects:
 15379 ;;		On entry : 0/0
 15380 ;;		On exit  : 0/0
 15381 ;;		Unchanged: 0/0
 15382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15387 ;;Total ram usage:        1 bytes
 15388 ;; Hardware stack levels used:    1
 15389 ;; Hardware stack levels required when called:   10
 15390 ;; This function calls:
 15391 ;;		_lcdInst
 15392 ;;		_printf
 15393 ;; This function is called by:
 15394 ;;		_Test
 15395 ;; This function uses a non-reentrant model
 15396 ;;
 15397                           
 15398                           	psect	text48
 15399  004EBC                     __ptext48:
 15400                           	opt stack 0
 15401  004EBC                     _PortTestDC:
 15402                           	opt stack 19
 15403                           
 15404                           ;Test.c: 411: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15405                           
 15406                           ;incstack = 0
 15407  004EBC  0E01               	movlw	1
 15408  004EBE  EC3A  F02F         	call	_lcdInst
 15409  004EC2  0E68               	movlw	104
 15410  004EC4  0100               	movlb	0	; () banked
 15411  004EC6  6FAB               	movwf	??_PortTestDC& (0+255),b
 15412  004EC8  0EE4               	movlw	228
 15413  004ECA                     u11517:
 15414  004ECA  2EE8               	decfsz	wreg,f,c
 15415  004ECC  D7FE               	bra	u11517
 15416  004ECE  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15417  004ED0  D7FC               	bra	u11517
 15418  004ED2  F000               	nop	
 15419  004ED4  0E80               	movlw	128
 15420  004ED6  EC3A  F02F         	call	_lcdInst
 15421                           
 15422                           ;Test.c: 412: printf("D WILL RETURN    ");
 15423  004EDA  0EF7               	movlw	low STR_111
 15424  004EDC  0100               	movlb	0	; () banked
 15425  004EDE  6F8E               	movwf	printf@f& (0+255),b
 15426  004EE0  0EFA               	movlw	high STR_111
 15427  004EE2  0100               	movlb	0	; () banked
 15428  004EE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15429  004EE6  EC67  F00E         	call	_printf	;wreg free
 15430                           
 15431                           ;Test.c: 413: lcdInst(0b11000000);;
 15432  004EEA  0EC0               	movlw	192
 15433  004EEC  EC3A  F02F         	call	_lcdInst
 15434                           
 15435                           ;Test.c: 414: printf("OTHER SETS DC   ");
 15436  004EF0  0EDB               	movlw	low STR_112
 15437  004EF2  0100               	movlb	0	; () banked
 15438  004EF4  6F8E               	movwf	printf@f& (0+255),b
 15439  004EF6  0EFB               	movlw	high STR_112
 15440  004EF8  0100               	movlb	0	; () banked
 15441  004EFA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15442  004EFC  EC67  F00E         	call	_printf	;wreg free
 15443  004F00                     l1390:
 15444  004F00  A281               	btfss	3969,1,c	;volatile
 15445  004F02  D7FE               	goto	l1390
 15446                           
 15447                           ;Test.c: 419: }
 15448                           ;Test.c: 420: if(PORTB >> 4 == 0b1111){
 15449  004F04  3881               	swapf	3969,w,c	;volatile
 15450  004F06  0B0F               	andlw	15
 15451  004F08  0A0F               	xorlw	15
 15452  004F0A  B4D8               	btfsc	status,2,c
 15453  004F0C  0012               	return	
 15454                           
 15455                           ;Test.c: 422: }
 15456                           ;Test.c: 423: if(PORTB >> 4 == 0b0000){
 15457                           
 15458                           ;Test.c: 421: break;
 15459  004F0E  CF81 F0AB          	movff	3969,??_PortTestDC	;volatile
 15460  004F12  0100               	movlb	0	; () banked
 15461  004F14  3BAB               	swapf	??_PortTestDC& (0+255),f,b
 15462  004F16  0E0F               	movlw	15
 15463  004F18  17AB               	andwf	??_PortTestDC& (0+255),f,b
 15464  004F1A  A4D8               	btfss	status,2,c
 15465  004F1C  D012               	goto	l1395
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;Test.c: 425: LATBbits.LATB2 = !LATBbits.LATB2;
 15469  004F1E  B48A               	btfsc	3978,2,c	;volatile
 15470  004F20  D004               	goto	u8280
 15471  004F22  0100               	movlb	0	; () banked
 15472  004F24  6BAB               	clrf	??_PortTestDC& (0+255),b
 15473  004F26  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15474  004F28  D002               	goto	u8298
 15475  004F2A                     u8280:
 15476  004F2A  0100               	movlb	0	; () banked
 15477  004F2C  6BAB               	clrf	??_PortTestDC& (0+255),b
 15478  004F2E                     u8298:
 15479  004F2E  0100               	movlb	0	; () banked
 15480  004F30  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15481  004F32  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15482  004F34  508A               	movf	3978,w,c	;volatile
 15483  004F36  0100               	movlb	0	; () banked
 15484  004F38  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15485  004F3A  0BFB               	andlw	-5
 15486  004F3C  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15487  004F3E  6E8A               	movwf	3978,c	;volatile
 15488                           
 15489                           ;Test.c: 426: }
 15490  004F40  D7DF               	goto	l1390
 15491  004F42                     l1395:
 15492                           
 15493                           ; BSR set to: 0
 15494                           ;Test.c: 427: else{
 15495                           ;Test.c: 428: LATBbits.LATB2 = 1;
 15496  004F42  848A               	bsf	3978,2,c	;volatile
 15497  004F44                     l1397:
 15498  004F44  B281               	btfsc	3969,1,c	;volatile
 15499  004F46  D7FE               	goto	l1397
 15500                           
 15501                           ;Test.c: 431: }
 15502                           ;Test.c: 432: LATBbits.LATB2 = 0;
 15503  004F48  948A               	bcf	3978,2,c	;volatile
 15504  004F4A  D7DA               	goto	l1390
 15505  004F4C                     __end_of_PortTestDC:
 15506                           	opt stack 0
 15507                           tblptru	equ	0xFF8
 15508                           tblptrh	equ	0xFF7
 15509                           tblptrl	equ	0xFF6
 15510                           tablat	equ	0xFF5
 15511                           prodh	equ	0xFF4
 15512                           prodl	equ	0xFF3
 15513                           intcon	equ	0xFF2
 15514                           intcon2	equ	0xFF1
 15515                           intcon3	equ	0xFF0
 15516                           postinc0	equ	0xFEE
 15517                           wreg	equ	0xFE8
 15518                           postdec1	equ	0xFE5
 15519                           fsr1l	equ	0xFE1
 15520                           indf2	equ	0xFDF
 15521                           postinc2	equ	0xFDE
 15522                           postdec2	equ	0xFDD
 15523                           fsr2h	equ	0xFDA
 15524                           fsr2l	equ	0xFD9
 15525                           status	equ	0xFD8
 15526                           
 15527 ;; *************** function _PlatformTest *****************
 15528 ;; Defined at:
 15529 ;;		line 437 in file "Test.c"
 15530 ;; Parameters:    Size  Location     Type
 15531 ;;		None
 15532 ;; Auto vars:     Size  Location     Type
 15533 ;;  i               2   51[BANK0 ] int 
 15534 ;;  i               2   49[BANK0 ] int 
 15535 ;;  res             2   47[BANK0 ] int 
 15536 ;;  res             2   45[BANK0 ] int 
 15537 ;;  on              2   53[BANK0 ] int 
 15538 ;; Return value:  Size  Location     Type
 15539 ;;                  1    wreg      void 
 15540 ;; Registers used:
 15541 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15542 ;; Tracked objects:
 15543 ;;		On entry : 0/0
 15544 ;;		On exit  : 0/0
 15545 ;;		Unchanged: 0/0
 15546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15548 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15550 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15551 ;;Total ram usage:       12 bytes
 15552 ;; Hardware stack levels used:    1
 15553 ;; Hardware stack levels required when called:   10
 15554 ;; This function calls:
 15555 ;;		_lcdInst
 15556 ;;		_printf
 15557 ;;		_readADC
 15558 ;;		_stopSignals
 15559 ;; This function is called by:
 15560 ;;		_Test
 15561 ;; This function uses a non-reentrant model
 15562 ;;
 15563                           
 15564                           	psect	text49
 15565  002BA8                     __ptext49:
 15566                           	opt stack 0
 15567  002BA8                     _PlatformTest:
 15568                           	opt stack 19
 15569                           
 15570                           ;Test.c: 438: LATCbits.LATC5 = 1;
 15571                           
 15572                           ;incstack = 0
 15573  002BA8  8A8B               	bsf	3979,5,c	;volatile
 15574                           
 15575                           ;Test.c: 440: machine_state = Sorting_state;
 15576  002BAA  0E01               	movlw	1
 15577  002BAC  0100               	movlb	0	; () banked
 15578  002BAE  6FFC               	movwf	_machine_state& (0+255),b
 15579                           
 15580                           ;Test.c: 441: f_arm_position = 0;
 15581  002BB0  0E00               	movlw	0
 15582  002BB2  0100               	movlb	0	; () banked
 15583  002BB4  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15584  002BB6  0E00               	movlw	0
 15585  002BB8  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15586                           
 15587                           ;Test.c: 442: timer2_counter = 0;
 15588  002BBA  0E00               	movlw	0
 15589  002BBC  6E74               	movwf	_timer2_counter+1,c	;volatile
 15590  002BBE  0E00               	movlw	0
 15591  002BC0  6E73               	movwf	_timer2_counter,c	;volatile
 15592                           
 15593                           ; BSR set to: 0
 15594                           ;Test.c: 443: LATBbits.LATB3 = 0;
 15595  002BC2  968A               	bcf	3978,3,c	;volatile
 15596                           
 15597                           ; BSR set to: 0
 15598                           ;Test.c: 444: TMR2ON = 1;
 15599  002BC4  84CA               	bsf	4042,2,c	;volatile
 15600                           
 15601                           ;Test.c: 445: was_low_2 = 0;
 15602  002BC6  0E00               	movlw	0
 15603  002BC8  6E7A               	movwf	_was_low_2+1,c	;volatile
 15604  002BCA  0E00               	movlw	0
 15605  002BCC  6E79               	movwf	_was_low_2,c	;volatile
 15606                           
 15607                           ;Test.c: 447: int on = 1;
 15608  002BCE  0E00               	movlw	0
 15609  002BD0  0100               	movlb	0	; () banked
 15610  002BD2  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15611  002BD4  0E01               	movlw	1
 15612  002BD6  6FB5               	movwf	PlatformTest@on& (0+255),b
 15613                           
 15614                           ; BSR set to: 0
 15615                           ;Test.c: 448: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15616  002BD8  0E01               	movlw	1
 15617  002BDA  EC3A  F02F         	call	_lcdInst
 15618  002BDE  0E68               	movlw	104
 15619  002BE0  0100               	movlb	0	; () banked
 15620  002BE2  6FAB               	movwf	??_PlatformTest& (0+255),b
 15621  002BE4  0EE4               	movlw	228
 15622  002BE6                     u11527:
 15623  002BE6  2EE8               	decfsz	wreg,f,c
 15624  002BE8  D7FE               	bra	u11527
 15625  002BEA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15626  002BEC  D7FC               	bra	u11527
 15627  002BEE  F000               	nop	
 15628  002BF0  0E80               	movlw	128
 15629  002BF2  EC3A  F02F         	call	_lcdInst
 15630                           
 15631                           ;Test.c: 449: printf("1: DC | A: ARM  ");
 15632  002BF6  0E0E               	movlw	low STR_113
 15633  002BF8  0100               	movlb	0	; () banked
 15634  002BFA  6F8E               	movwf	printf@f& (0+255),b
 15635  002BFC  0EFC               	movlw	high STR_113
 15636  002BFE  0100               	movlb	0	; () banked
 15637  002C00  6F8F               	movwf	(printf@f+1)& (0+255),b
 15638  002C02  EC67  F00E         	call	_printf	;wreg free
 15639                           
 15640                           ;Test.c: 451: while(PORTBbits.RB1 == 0){
 15641  002C06  D058               	goto	l9068
 15642  002C08                     l9050:
 15643                           
 15644                           ;Test.c: 452: readADC(0);
 15645  002C08  0E00               	movlw	0
 15646  002C0A  EC25  F02E         	call	_readADC
 15647                           
 15648                           ;Test.c: 453: int res = ADRESH<<8 | ADRESL;
 15649  002C0E  50C3               	movf	4035,w,c	;volatile
 15650  002C10  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15651  002C14  0100               	movlb	0	; () banked
 15652  002C16  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15653  002C18  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15654  002C1C  0100               	movlb	0	; () banked
 15655  002C1E  6BAB               	clrf	??_PlatformTest& (0+255),b
 15656  002C20  0100               	movlb	0	; () banked
 15657  002C22  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15658  002C24  0100               	movlb	0	; () banked
 15659  002C26  6FAD               	movwf	PlatformTest@res& (0+255),b
 15660  002C28  0100               	movlb	0	; () banked
 15661  002C2A  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15662  002C2C  0100               	movlb	0	; () banked
 15663  002C2E  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15664                           
 15665                           ; BSR set to: 0
 15666                           ;Test.c: 454: IR_signal = (res > 800) ? 1 : 0;
 15667  002C30  0100               	movlb	0	; () banked
 15668  002C32  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15669  002C34  D00A               	goto	u8370
 15670  002C36  0E21               	movlw	33
 15671  002C38  0100               	movlb	0	; () banked
 15672  002C3A  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15673  002C3C  0E03               	movlw	3
 15674  002C3E  0100               	movlb	0	; () banked
 15675  002C40  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15676  002C42  A0D8               	btfss	status,0,c
 15677  002C44  D002               	goto	u8370
 15678  002C46  0E01               	movlw	1
 15679  002C48  D001               	goto	u8380
 15680  002C4A                     u8370:
 15681  002C4A  0E00               	movlw	0
 15682  002C4C                     u8380:
 15683  002C4C  0100               	movlb	0	; () banked
 15684  002C4E  6FE0               	movwf	_IR_signal& (0+255),b
 15685  002C50  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15686                           
 15687                           ;Test.c: 456: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15688  002C52  0E01               	movlw	1
 15689  002C54  EC3A  F02F         	call	_lcdInst
 15690  002C58  0E68               	movlw	104
 15691  002C5A  0100               	movlb	0	; () banked
 15692  002C5C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15693  002C5E  0EE4               	movlw	228
 15694  002C60                     u11537:
 15695  002C60  2EE8               	decfsz	wreg,f,c
 15696  002C62  D7FE               	bra	u11537
 15697  002C64  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15698  002C66  D7FC               	bra	u11537
 15699  002C68  F000               	nop	
 15700  002C6A  0E80               	movlw	128
 15701  002C6C  EC3A  F02F         	call	_lcdInst
 15702                           
 15703                           ;Test.c: 457: printf("1: DC | A: ARM  ");
 15704  002C70  0E0E               	movlw	low STR_113
 15705  002C72  0100               	movlb	0	; () banked
 15706  002C74  6F8E               	movwf	printf@f& (0+255),b
 15707  002C76  0EFC               	movlw	high STR_113
 15708  002C78  0100               	movlb	0	; () banked
 15709  002C7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15710  002C7C  EC67  F00E         	call	_printf	;wreg free
 15711                           
 15712                           ;Test.c: 458: lcdInst(0b11000000);;
 15713  002C80  0EC0               	movlw	192
 15714  002C82  EC3A  F02F         	call	_lcdInst
 15715                           
 15716                           ;Test.c: 459: printf("5:H|6:L|IR:%d   ", res);
 15717  002C86  0EFD               	movlw	low STR_115
 15718  002C88  0100               	movlb	0	; () banked
 15719  002C8A  6F8E               	movwf	printf@f& (0+255),b
 15720  002C8C  0EFB               	movlw	high STR_115
 15721  002C8E  0100               	movlb	0	; () banked
 15722  002C90  6F8F               	movwf	(printf@f+1)& (0+255),b
 15723  002C92  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15724  002C96  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15725  002C9A  EC67  F00E         	call	_printf	;wreg free
 15726                           
 15727                           ;Test.c: 460: _delay((unsigned long)((100)*(32000000/4000.0)));
 15728  002C9E  0E05               	movlw	5
 15729  002CA0  0100               	movlb	0	; () banked
 15730  002CA2  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15731  002CA4  0E0F               	movlw	15
 15732  002CA6  0100               	movlb	0	; () banked
 15733  002CA8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15734  002CAA  0EF1               	movlw	241
 15735  002CAC                     u11547:
 15736  002CAC  2EE8               	decfsz	wreg,f,c
 15737  002CAE  D7FE               	bra	u11547
 15738  002CB0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15739  002CB2  D7FC               	bra	u11547
 15740  002CB4  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15741  002CB6  D7FA               	bra	u11547
 15742  002CB8                     l9068:
 15743  002CB8  B281               	btfsc	3969,1,c	;volatile
 15744  002CBA  D059               	goto	l9088
 15745  002CBC  D7A5               	goto	l9050
 15746  002CBE                     l9070:
 15747                           
 15748                           ;Test.c: 465: readADC(0);
 15749  002CBE  0E00               	movlw	0
 15750  002CC0  EC25  F02E         	call	_readADC
 15751                           
 15752                           ;Test.c: 466: int res = ADRESH<<8 | ADRESL;
 15753  002CC4  50C3               	movf	4035,w,c	;volatile
 15754  002CC6  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15755  002CCA  0100               	movlb	0	; () banked
 15756  002CCC  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15757  002CCE  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15758  002CD2  0100               	movlb	0	; () banked
 15759  002CD4  6BAB               	clrf	??_PlatformTest& (0+255),b
 15760  002CD6  0100               	movlb	0	; () banked
 15761  002CD8  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15762  002CDA  0100               	movlb	0	; () banked
 15763  002CDC  6FAF               	movwf	PlatformTest@res_1797& (0+255),b
 15764  002CDE  0100               	movlb	0	; () banked
 15765  002CE0  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15766  002CE2  0100               	movlb	0	; () banked
 15767  002CE4  6FB0               	movwf	(PlatformTest@res_1797+1)& (0+255),b
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;Test.c: 467: IR_signal = (res > 800) ? 1 : 0;
 15771  002CE6  0100               	movlb	0	; () banked
 15772  002CE8  BFB0               	btfsc	(PlatformTest@res_1797+1)& (0+255),7,b
 15773  002CEA  D00A               	goto	u8400
 15774  002CEC  0E21               	movlw	33
 15775  002CEE  0100               	movlb	0	; () banked
 15776  002CF0  5DAF               	subwf	PlatformTest@res_1797& (0+255),w,b
 15777  002CF2  0E03               	movlw	3
 15778  002CF4  0100               	movlb	0	; () banked
 15779  002CF6  59B0               	subwfb	(PlatformTest@res_1797+1)& (0+255),w,b
 15780  002CF8  A0D8               	btfss	status,0,c
 15781  002CFA  D002               	goto	u8400
 15782  002CFC  0E01               	movlw	1
 15783  002CFE  D001               	goto	u8410
 15784  002D00                     u8400:
 15785  002D00  0E00               	movlw	0
 15786  002D02                     u8410:
 15787  002D02  0100               	movlb	0	; () banked
 15788  002D04  6FE0               	movwf	_IR_signal& (0+255),b
 15789  002D06  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15790                           
 15791                           ;Test.c: 469: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15792  002D08  0E01               	movlw	1
 15793  002D0A  EC3A  F02F         	call	_lcdInst
 15794  002D0E  0E68               	movlw	104
 15795  002D10  0100               	movlb	0	; () banked
 15796  002D12  6FAB               	movwf	??_PlatformTest& (0+255),b
 15797  002D14  0EE4               	movlw	228
 15798  002D16                     u11557:
 15799  002D16  2EE8               	decfsz	wreg,f,c
 15800  002D18  D7FE               	bra	u11557
 15801  002D1A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15802  002D1C  D7FC               	bra	u11557
 15803  002D1E  F000               	nop	
 15804  002D20  0E80               	movlw	128
 15805  002D22  EC3A  F02F         	call	_lcdInst
 15806                           
 15807                           ;Test.c: 470: printf("1: DC | A: ARM  ");
 15808  002D26  0E0E               	movlw	low STR_113
 15809  002D28  0100               	movlb	0	; () banked
 15810  002D2A  6F8E               	movwf	printf@f& (0+255),b
 15811  002D2C  0EFC               	movlw	high STR_113
 15812  002D2E  0100               	movlb	0	; () banked
 15813  002D30  6F8F               	movwf	(printf@f+1)& (0+255),b
 15814  002D32  EC67  F00E         	call	_printf	;wreg free
 15815                           
 15816                           ;Test.c: 471: lcdInst(0b11000000);;
 15817  002D36  0EC0               	movlw	192
 15818  002D38  EC3A  F02F         	call	_lcdInst
 15819                           
 15820                           ;Test.c: 472: printf("5:H|6:L|IR:%d   ", res);
 15821  002D3C  0EFD               	movlw	low STR_115
 15822  002D3E  0100               	movlb	0	; () banked
 15823  002D40  6F8E               	movwf	printf@f& (0+255),b
 15824  002D42  0EFB               	movlw	high STR_115
 15825  002D44  0100               	movlb	0	; () banked
 15826  002D46  6F8F               	movwf	(printf@f+1)& (0+255),b
 15827  002D48  C0AF  F090         	movff	PlatformTest@res_1797,?_printf+2
 15828  002D4C  C0B0  F091         	movff	PlatformTest@res_1797+1,?_printf+3
 15829  002D50  EC67  F00E         	call	_printf	;wreg free
 15830                           
 15831                           ;Test.c: 473: _delay((unsigned long)((100)*(32000000/4000.0)));
 15832  002D54  0E05               	movlw	5
 15833  002D56  0100               	movlb	0	; () banked
 15834  002D58  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15835  002D5A  0E0F               	movlw	15
 15836  002D5C  0100               	movlb	0	; () banked
 15837  002D5E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15838  002D60  0EF1               	movlw	241
 15839  002D62                     u11567:
 15840  002D62  2EE8               	decfsz	wreg,f,c
 15841  002D64  D7FE               	bra	u11567
 15842  002D66  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15843  002D68  D7FC               	bra	u11567
 15844  002D6A  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15845  002D6C  D7FA               	bra	u11567
 15846  002D6E                     l9088:
 15847  002D6E  A281               	btfss	3969,1,c	;volatile
 15848  002D70  D7A6               	goto	l9070
 15849                           
 15850                           ;Test.c: 474: }
 15851                           ;Test.c: 475: if(PORTB >> 4 == 0b1111){
 15852  002D72  3881               	swapf	3969,w,c	;volatile
 15853  002D74  0B0F               	andlw	15
 15854  002D76  0A0F               	xorlw	15
 15855  002D78  B4D8               	btfsc	status,2,c
 15856  002D7A  D09A               	goto	l1412
 15857                           
 15858                           ;Test.c: 478: else if(PORTB >> 4 == 0b0000){
 15859                           
 15860                           ;Test.c: 477: }
 15861                           
 15862                           ;Test.c: 476: break;
 15863  002D7C  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15864  002D80  0100               	movlb	0	; () banked
 15865  002D82  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15866  002D84  0E0F               	movlw	15
 15867  002D86  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15868  002D88  A4D8               	btfss	status,2,c
 15869  002D8A  D012               	goto	l9100
 15870                           
 15871                           ; BSR set to: 0
 15872                           ;Test.c: 479: LATBbits.LATB2 = !LATBbits.LATB2;
 15873  002D8C  B48A               	btfsc	3978,2,c	;volatile
 15874  002D8E  D004               	goto	u8450
 15875  002D90  0100               	movlb	0	; () banked
 15876  002D92  6BAB               	clrf	??_PlatformTest& (0+255),b
 15877  002D94  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15878  002D96  D002               	goto	u8468
 15879  002D98                     u8450:
 15880  002D98  0100               	movlb	0	; () banked
 15881  002D9A  6BAB               	clrf	??_PlatformTest& (0+255),b
 15882  002D9C                     u8468:
 15883  002D9C  0100               	movlb	0	; () banked
 15884  002D9E  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15885  002DA0  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15886  002DA2  508A               	movf	3978,w,c	;volatile
 15887  002DA4  0100               	movlb	0	; () banked
 15888  002DA6  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15889  002DA8  0BFB               	andlw	-5
 15890  002DAA  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15891  002DAC  6E8A               	movwf	3978,c	;volatile
 15892                           
 15893                           ;Test.c: 480: }
 15894  002DAE  D07D               	goto	l1427
 15895  002DB0                     l9100:
 15896                           
 15897                           ; BSR set to: 0
 15898                           ;Test.c: 481: else if(PORTB >> 4 == 0b0011){
 15899  002DB0  3881               	swapf	3969,w,c	;volatile
 15900  002DB2  0B0F               	andlw	15
 15901  002DB4  0A03               	xorlw	3
 15902  002DB6  A4D8               	btfss	status,2,c
 15903  002DB8  D020               	goto	l9112
 15904                           
 15905                           ; BSR set to: 0
 15906                           ;Test.c: 482: if(on){
 15907  002DBA  0100               	movlb	0	; () banked
 15908  002DBC  51B5               	movf	PlatformTest@on& (0+255),w,b
 15909  002DBE  0100               	movlb	0	; () banked
 15910  002DC0  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15911  002DC2  B4D8               	btfsc	status,2,c
 15912  002DC4  D010               	goto	l9108
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;Test.c: 483: f_arm_position = 1;
 15916  002DC6  0E00               	movlw	0
 15917  002DC8  0100               	movlb	0	; () banked
 15918  002DCA  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15919  002DCC  0E01               	movlw	1
 15920  002DCE  D00F               	goto	L14
 15921  002DD0                     l9106:
 15922                           
 15923                           ; BSR set to: 0
 15924                           ;Test.c: 484: on = !on;
 15925  002DD0  0100               	movlb	0	; () banked
 15926  002DD2  51B5               	movf	PlatformTest@on& (0+255),w,b
 15927  002DD4  0100               	movlb	0	; () banked
 15928  002DD6  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15929  002DD8  A4D8               	btfss	status,2,c
 15930  002DDA  D00D               	goto	u8510
 15931  002DDC  D00A               	goto	u8511
 15932  002DDE                     u8500:
 15933  002DDE  0100               	movlb	0	; () banked
 15934  002DE0  6FB5               	movwf	PlatformTest@on& (0+255),b
 15935  002DE2  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15936                           
 15937                           ;Test.c: 485: }
 15938  002DE4  D062               	goto	l1427
 15939  002DE6                     l9108:
 15940                           
 15941                           ; BSR set to: 0
 15942                           ;Test.c: 486: else{
 15943                           ;Test.c: 487: f_arm_position = 0;
 15944  002DE6  0E00               	movlw	0
 15945  002DE8  0100               	movlb	0	; () banked
 15946  002DEA  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15947  002DEC  0E00               	movlw	0
 15948  002DEE                     L14:
 15949  002DEE  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15950  002DF0  D7EF               	goto	l9106
 15951  002DF2                     u8511:
 15952  002DF2  0E01               	movlw	1
 15953  002DF4  D7F4               	goto	u8500
 15954  002DF6                     u8510:
 15955  002DF6  0E00               	movlw	0
 15956  002DF8  D7F2               	goto	u8500
 15957  002DFA                     l9112:
 15958                           
 15959                           ; BSR set to: 0
 15960                           ;Test.c: 491: else if(PORTB >> 4 == 0b0101){
 15961  002DFA  3881               	swapf	3969,w,c	;volatile
 15962  002DFC  0B0F               	andlw	15
 15963  002DFE  0A05               	xorlw	5
 15964  002E00  A4D8               	btfss	status,2,c
 15965  002E02  D027               	goto	l9126
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;Test.c: 493: for(int i = 0; i<30; i++){
 15969  002E04  0E00               	movlw	0
 15970  002E06  0100               	movlb	0	; () banked
 15971  002E08  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15972  002E0A  0E00               	movlw	0
 15973  002E0C  6FB1               	movwf	PlatformTest@i& (0+255),b
 15974  002E0E                     l9116:
 15975                           
 15976                           ; BSR set to: 0
 15977  002E0E  0100               	movlb	0	; () banked
 15978  002E10  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15979  002E12  D008               	goto	l1421
 15980  002E14  0100               	movlb	0	; () banked
 15981  002E16  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15982  002E18  E148               	bnz	l1427
 15983  002E1A  0E1E               	movlw	30
 15984  002E1C  0100               	movlb	0	; () banked
 15985  002E1E  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15986  002E20  B0D8               	btfsc	status,0,c
 15987  002E22  D043               	goto	l1427
 15988  002E24                     l1421:
 15989                           
 15990                           ; BSR set to: 0
 15991                           ;Test.c: 494: LATAbits.LATA4 = 1;
 15992  002E24  8889               	bsf	3977,4,c	;volatile
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;Test.c: 495: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15996  002E26  0E4E               	movlw	78
 15997  002E28  0100               	movlb	0	; () banked
 15998  002E2A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15999  002E2C  0EEB               	movlw	235
 16000  002E2E                     u11577:
 16001  002E2E  2EE8               	decfsz	wreg,f,c
 16002  002E30  D7FE               	bra	u11577
 16003  002E32  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16004  002E34  D7FC               	bra	u11577
 16005                           
 16006                           ;Test.c: 496: LATAbits.LATA4 = 0;
 16007  002E36  9889               	bcf	3977,4,c	;volatile
 16008                           
 16009                           ;Test.c: 497: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 16010  002E38  0E1A               	movlw	26
 16011  002E3A  0100               	movlb	0	; () banked
 16012  002E3C  6FAB               	movwf	??_PlatformTest& (0+255),b
 16013  002E3E  0EF8               	movlw	248
 16014  002E40                     u11587:
 16015  002E40  2EE8               	decfsz	wreg,f,c
 16016  002E42  D7FE               	bra	u11587
 16017  002E44  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16018  002E46  D7FC               	bra	u11587
 16019  002E48  F000               	nop	
 16020  002E4A  0100               	movlb	0	; () banked
 16021  002E4C  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 16022  002E4E  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 16023  002E50  D7DE               	goto	l9116
 16024  002E52                     l9126:
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;Test.c: 500: else if (PORTB >> 4 == 0b0110){
 16028  002E52  3881               	swapf	3969,w,c	;volatile
 16029  002E54  0B0F               	andlw	15
 16030  002E56  0A06               	xorlw	6
 16031  002E58  A4D8               	btfss	status,2,c
 16032  002E5A  D027               	goto	l1427
 16033                           
 16034                           ; BSR set to: 0
 16035                           ;Test.c: 502: for(int i = 0; i<30; i++){
 16036  002E5C  0E00               	movlw	0
 16037  002E5E  0100               	movlb	0	; () banked
 16038  002E60  6FB4               	movwf	(PlatformTest@i_1801+1)& (0+255),b
 16039  002E62  0E00               	movlw	0
 16040  002E64  6FB3               	movwf	PlatformTest@i_1801& (0+255),b
 16041  002E66                     l9130:
 16042                           
 16043                           ; BSR set to: 0
 16044  002E66  0100               	movlb	0	; () banked
 16045  002E68  BFB4               	btfsc	(PlatformTest@i_1801+1)& (0+255),7,b
 16046  002E6A  D008               	goto	l1425
 16047  002E6C  0100               	movlb	0	; () banked
 16048  002E6E  51B4               	movf	(PlatformTest@i_1801+1)& (0+255),w,b
 16049  002E70  E11C               	bnz	l1427
 16050  002E72  0E1E               	movlw	30
 16051  002E74  0100               	movlb	0	; () banked
 16052  002E76  5DB3               	subwf	PlatformTest@i_1801& (0+255),w,b
 16053  002E78  B0D8               	btfsc	status,0,c
 16054  002E7A  D017               	goto	l1427
 16055  002E7C                     l1425:
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;Test.c: 503: LATAbits.LATA4 = 1;
 16059  002E7C  8889               	bsf	3977,4,c	;volatile
 16060                           
 16061                           ; BSR set to: 0
 16062                           ;Test.c: 504: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 16063  002E7E  0E3D               	movlw	61
 16064  002E80  0100               	movlb	0	; () banked
 16065  002E82  6FAB               	movwf	??_PlatformTest& (0+255),b
 16066  002E84  0E41               	movlw	65
 16067  002E86                     u11597:
 16068  002E86  2EE8               	decfsz	wreg,f,c
 16069  002E88  D7FE               	bra	u11597
 16070  002E8A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16071  002E8C  D7FC               	bra	u11597
 16072                           
 16073                           ;Test.c: 505: LATAbits.LATA4 = 0;
 16074  002E8E  9889               	bcf	3977,4,c	;volatile
 16075                           
 16076                           ;Test.c: 506: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 16077  002E90  0E2C               	movlw	44
 16078  002E92  0100               	movlb	0	; () banked
 16079  002E94  6FAB               	movwf	??_PlatformTest& (0+255),b
 16080  002E96  0EA1               	movlw	161
 16081  002E98                     u11607:
 16082  002E98  2EE8               	decfsz	wreg,f,c
 16083  002E9A  D7FE               	bra	u11607
 16084  002E9C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16085  002E9E  D7FC               	bra	u11607
 16086  002EA0  D000               	nop2	
 16087  002EA2  0100               	movlb	0	; () banked
 16088  002EA4  4BB3               	infsnz	PlatformTest@i_1801& (0+255),f,b
 16089  002EA6  2BB4               	incf	(PlatformTest@i_1801+1)& (0+255),f,b
 16090  002EA8  D7DE               	goto	l9130
 16091  002EAA                     l1427:
 16092  002EAA  A281               	btfss	3969,1,c	;volatile
 16093  002EAC  D760               	goto	l9088
 16094  002EAE  D7FD               	goto	l1427
 16095  002EB0                     l1412:
 16096                           
 16097                           ;Test.c: 511: }
 16098                           ;Test.c: 513: LATCbits.LATC5 = 0;
 16099  002EB0  9A8B               	bcf	3979,5,c	;volatile
 16100                           
 16101                           ;Test.c: 514: stopSignals();
 16102  002EB2  ECE1  F02E         	call	_stopSignals	;wreg free
 16103                           
 16104                           ;Test.c: 515: machine_state = Testing_state;
 16105  002EB6  0E03               	movlw	3
 16106  002EB8  0100               	movlb	0	; () banked
 16107  002EBA  6FFC               	movwf	_machine_state& (0+255),b
 16108                           
 16109                           ; BSR set to: 0
 16110  002EBC  0012               	return		;funcret
 16111  002EBE                     __end_of_PlatformTest:
 16112                           	opt stack 0
 16113                           tblptru	equ	0xFF8
 16114                           tblptrh	equ	0xFF7
 16115                           tblptrl	equ	0xFF6
 16116                           tablat	equ	0xFF5
 16117                           prodh	equ	0xFF4
 16118                           prodl	equ	0xFF3
 16119                           intcon	equ	0xFF2
 16120                           intcon2	equ	0xFF1
 16121                           intcon3	equ	0xFF0
 16122                           postinc0	equ	0xFEE
 16123                           wreg	equ	0xFE8
 16124                           postdec1	equ	0xFE5
 16125                           fsr1l	equ	0xFE1
 16126                           indf2	equ	0xFDF
 16127                           postinc2	equ	0xFDE
 16128                           postdec2	equ	0xFDD
 16129                           fsr2h	equ	0xFDA
 16130                           fsr2l	equ	0xFD9
 16131                           status	equ	0xFD8
 16132                           
 16133 ;; *************** function _BothServos *****************
 16134 ;; Defined at:
 16135 ;;		line 350 in file "Test.c"
 16136 ;; Parameters:    Size  Location     Type
 16137 ;;		None
 16138 ;; Auto vars:     Size  Location     Type
 16139 ;;		None
 16140 ;; Return value:  Size  Location     Type
 16141 ;;                  1    wreg      void 
 16142 ;; Registers used:
 16143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16144 ;; Tracked objects:
 16145 ;;		On entry : 0/0
 16146 ;;		On exit  : 0/0
 16147 ;;		Unchanged: 0/0
 16148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16151 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16153 ;;Total ram usage:        2 bytes
 16154 ;; Hardware stack levels used:    1
 16155 ;; Hardware stack levels required when called:   10
 16156 ;; This function calls:
 16157 ;;		_initServos
 16158 ;;		_lcdInst
 16159 ;;		_printf
 16160 ;;		_stopSignals
 16161 ;;		_updateServoPosition
 16162 ;; This function is called by:
 16163 ;;		_Test
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           	psect	text50
 16168  002106                     __ptext50:
 16169                           	opt stack 0
 16170  002106                     _BothServos:
 16171                           	opt stack 19
 16172                           
 16173                           ;Test.c: 351: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16174                           
 16175                           ; BSR set to: 0
 16176                           ;incstack = 0
 16177  002106  0E01               	movlw	1
 16178  002108  EC3A  F02F         	call	_lcdInst
 16179  00210C  0E68               	movlw	104
 16180  00210E  0100               	movlb	0	; () banked
 16181  002110  6FAB               	movwf	??_BothServos& (0+255),b
 16182  002112  0EE4               	movlw	228
 16183  002114                     u11617:
 16184  002114  2EE8               	decfsz	wreg,f,c
 16185  002116  D7FE               	bra	u11617
 16186  002118  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16187  00211A  D7FC               	bra	u11617
 16188  00211C  F000               	nop	
 16189  00211E  0E80               	movlw	128
 16190  002120  EC3A  F02F         	call	_lcdInst
 16191                           
 16192                           ;Test.c: 352: printf("TST: BOTH SERVOS");
 16193  002124  0EA7               	movlw	low STR_110
 16194  002126  0100               	movlb	0	; () banked
 16195  002128  6F8E               	movwf	printf@f& (0+255),b
 16196  00212A  0EFC               	movlw	high STR_110
 16197  00212C  0100               	movlb	0	; () banked
 16198  00212E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16199  002130  EC67  F00E         	call	_printf	;wreg free
 16200                           
 16201                           ;Test.c: 353: TMR1ON = 1;
 16202  002134  80CD               	bsf	4045,0,c	;volatile
 16203                           
 16204                           ;Test.c: 354: TMR3ON = 1;
 16205  002136  80B1               	bsf	4017,0,c	;volatile
 16206                           
 16207                           ;Test.c: 355: machine_state = Sorting_state;
 16208  002138  0E01               	movlw	1
 16209  00213A  0100               	movlb	0	; () banked
 16210  00213C  6FFC               	movwf	_machine_state& (0+255),b
 16211                           
 16212                           ; BSR set to: 0
 16213                           ;Test.c: 356: was_low_1 = 0;
 16214  00213E  0E00               	movlw	0
 16215  002140  6E78               	movwf	_was_low_1+1,c	;volatile
 16216  002142  0E00               	movlw	0
 16217  002144  6E77               	movwf	_was_low_1,c	;volatile
 16218                           
 16219                           ; BSR set to: 0
 16220                           ;Test.c: 357: was_low_3 = 0;
 16221  002146  0E00               	movlw	0
 16222  002148  6E7C               	movwf	_was_low_3+1,c	;volatile
 16223  00214A  0E00               	movlw	0
 16224  00214C  6E7B               	movwf	_was_low_3,c	;volatile
 16225                           
 16226                           ; BSR set to: 0
 16227                           ;Test.c: 363: initServos();
 16228  00214E  ECF1  F028         	call	_initServos	;wreg free
 16229                           
 16230                           ;Test.c: 364: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16231  002152  0E3D               	movlw	61
 16232  002154  0100               	movlb	0	; () banked
 16233  002156  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16234  002158  0EE1               	movlw	225
 16235  00215A  0100               	movlb	0	; () banked
 16236  00215C  6FAB               	movwf	??_BothServos& (0+255),b
 16237  00215E  0E3F               	movlw	63
 16238  002160                     u11627:
 16239  002160  2EE8               	decfsz	wreg,f,c
 16240  002162  D7FE               	bra	u11627
 16241  002164  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16242  002166  D7FC               	bra	u11627
 16243  002168  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16244  00216A  D7FA               	bra	u11627
 16245  00216C  D000               	nop2	
 16246                           
 16247                           ;Test.c: 366: updateServoPosition(500, 1);
 16248  00216E  0E01               	movlw	1
 16249  002170  0100               	movlb	0	; () banked
 16250  002172  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16251  002174  0EF4               	movlw	244
 16252  002176  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16253  002178  0E00               	movlw	0
 16254  00217A  0100               	movlb	0	; () banked
 16255  00217C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16256  00217E  0E01               	movlw	1
 16257  002180  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16258  002182  ECB2  F028         	call	_updateServoPosition	;wreg free
 16259                           
 16260                           ;Test.c: 367: updateServoPosition(1050, 3);
 16261  002186  0E04               	movlw	4
 16262  002188  0100               	movlb	0	; () banked
 16263  00218A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16264  00218C  0E1A               	movlw	26
 16265  00218E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16266  002190  0E00               	movlw	0
 16267  002192  0100               	movlb	0	; () banked
 16268  002194  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16269  002196  0E03               	movlw	3
 16270  002198  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16271  00219A  ECB2  F028         	call	_updateServoPosition	;wreg free
 16272                           
 16273                           ;Test.c: 368: _delay((unsigned long)((750)*(32000000/4000.0)));
 16274  00219E  0E1F               	movlw	31
 16275  0021A0  0100               	movlb	0	; () banked
 16276  0021A2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16277  0021A4  0E71               	movlw	113
 16278  0021A6  0100               	movlb	0	; () banked
 16279  0021A8  6FAB               	movwf	??_BothServos& (0+255),b
 16280  0021AA  0E1E               	movlw	30
 16281  0021AC                     u11637:
 16282  0021AC  2EE8               	decfsz	wreg,f,c
 16283  0021AE  D7FE               	bra	u11637
 16284  0021B0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16285  0021B2  D7FC               	bra	u11637
 16286  0021B4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16287  0021B6  D7FA               	bra	u11637
 16288  0021B8  F000               	nop	
 16289                           
 16290                           ;Test.c: 369: updateServoPosition(1260, 3);
 16291  0021BA  0E04               	movlw	4
 16292  0021BC  0100               	movlb	0	; () banked
 16293  0021BE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16294  0021C0  0EEC               	movlw	236
 16295  0021C2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16296  0021C4  0E00               	movlw	0
 16297  0021C6  0100               	movlb	0	; () banked
 16298  0021C8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16299  0021CA  0E03               	movlw	3
 16300  0021CC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16301  0021CE  ECB2  F028         	call	_updateServoPosition	;wreg free
 16302                           
 16303                           ;Test.c: 370: _delay((unsigned long)((700)*(32000000/4000.0)));
 16304  0021D2  0E1D               	movlw	29
 16305  0021D4  0100               	movlb	0	; () banked
 16306  0021D6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16307  0021D8  0E69               	movlw	105
 16308  0021DA  0100               	movlb	0	; () banked
 16309  0021DC  6FAB               	movwf	??_BothServos& (0+255),b
 16310  0021DE  0EA5               	movlw	165
 16311  0021E0                     u11647:
 16312  0021E0  2EE8               	decfsz	wreg,f,c
 16313  0021E2  D7FE               	bra	u11647
 16314  0021E4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16315  0021E6  D7FC               	bra	u11647
 16316  0021E8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16317  0021EA  D7FA               	bra	u11647
 16318                           
 16319                           ;Test.c: 371: updateServoPosition(1050, 3);
 16320  0021EC  0E04               	movlw	4
 16321  0021EE  0100               	movlb	0	; () banked
 16322  0021F0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16323  0021F2  0E1A               	movlw	26
 16324  0021F4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16325  0021F6  0E00               	movlw	0
 16326  0021F8  0100               	movlb	0	; () banked
 16327  0021FA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16328  0021FC  0E03               	movlw	3
 16329  0021FE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16330  002200  ECB2  F028         	call	_updateServoPosition	;wreg free
 16331                           
 16332                           ;Test.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
 16333  002204  0E1F               	movlw	31
 16334  002206  0100               	movlb	0	; () banked
 16335  002208  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16336  00220A  0E71               	movlw	113
 16337  00220C  0100               	movlb	0	; () banked
 16338  00220E  6FAB               	movwf	??_BothServos& (0+255),b
 16339  002210  0E1E               	movlw	30
 16340  002212                     u11657:
 16341  002212  2EE8               	decfsz	wreg,f,c
 16342  002214  D7FE               	bra	u11657
 16343  002216  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16344  002218  D7FC               	bra	u11657
 16345  00221A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16346  00221C  D7FA               	bra	u11657
 16347  00221E  F000               	nop	
 16348                           
 16349                           ;Test.c: 374: updateServoPosition(850, 1);
 16350  002220  0E03               	movlw	3
 16351  002222  0100               	movlb	0	; () banked
 16352  002224  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16353  002226  0E52               	movlw	82
 16354  002228  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16355  00222A  0E00               	movlw	0
 16356  00222C  0100               	movlb	0	; () banked
 16357  00222E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16358  002230  0E01               	movlw	1
 16359  002232  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16360  002234  ECB2  F028         	call	_updateServoPosition	;wreg free
 16361                           
 16362                           ;Test.c: 375: updateServoPosition(1050, 3);
 16363  002238  0E04               	movlw	4
 16364  00223A  0100               	movlb	0	; () banked
 16365  00223C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16366  00223E  0E1A               	movlw	26
 16367  002240  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16368  002242  0E00               	movlw	0
 16369  002244  0100               	movlb	0	; () banked
 16370  002246  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16371  002248  0E03               	movlw	3
 16372  00224A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16373  00224C  ECB2  F028         	call	_updateServoPosition	;wreg free
 16374                           
 16375                           ;Test.c: 376: _delay((unsigned long)((750)*(32000000/4000.0)));
 16376  002250  0E1F               	movlw	31
 16377  002252  0100               	movlb	0	; () banked
 16378  002254  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16379  002256  0E71               	movlw	113
 16380  002258  0100               	movlb	0	; () banked
 16381  00225A  6FAB               	movwf	??_BothServos& (0+255),b
 16382  00225C  0E1E               	movlw	30
 16383  00225E                     u11667:
 16384  00225E  2EE8               	decfsz	wreg,f,c
 16385  002260  D7FE               	bra	u11667
 16386  002262  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16387  002264  D7FC               	bra	u11667
 16388  002266  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16389  002268  D7FA               	bra	u11667
 16390  00226A  F000               	nop	
 16391                           
 16392                           ;Test.c: 377: updateServoPosition(1260, 3);
 16393  00226C  0E04               	movlw	4
 16394  00226E  0100               	movlb	0	; () banked
 16395  002270  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16396  002272  0EEC               	movlw	236
 16397  002274  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16398  002276  0E00               	movlw	0
 16399  002278  0100               	movlb	0	; () banked
 16400  00227A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16401  00227C  0E03               	movlw	3
 16402  00227E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16403  002280  ECB2  F028         	call	_updateServoPosition	;wreg free
 16404                           
 16405                           ;Test.c: 378: _delay((unsigned long)((700)*(32000000/4000.0)));
 16406  002284  0E1D               	movlw	29
 16407  002286  0100               	movlb	0	; () banked
 16408  002288  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16409  00228A  0E69               	movlw	105
 16410  00228C  0100               	movlb	0	; () banked
 16411  00228E  6FAB               	movwf	??_BothServos& (0+255),b
 16412  002290  0EA5               	movlw	165
 16413  002292                     u11677:
 16414  002292  2EE8               	decfsz	wreg,f,c
 16415  002294  D7FE               	bra	u11677
 16416  002296  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16417  002298  D7FC               	bra	u11677
 16418  00229A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16419  00229C  D7FA               	bra	u11677
 16420                           
 16421                           ;Test.c: 379: updateServoPosition(1050, 3);
 16422  00229E  0E04               	movlw	4
 16423  0022A0  0100               	movlb	0	; () banked
 16424  0022A2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16425  0022A4  0E1A               	movlw	26
 16426  0022A6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16427  0022A8  0E00               	movlw	0
 16428  0022AA  0100               	movlb	0	; () banked
 16429  0022AC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16430  0022AE  0E03               	movlw	3
 16431  0022B0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16432  0022B2  ECB2  F028         	call	_updateServoPosition	;wreg free
 16433                           
 16434                           ;Test.c: 380: _delay((unsigned long)((750)*(32000000/4000.0)));
 16435  0022B6  0E1F               	movlw	31
 16436  0022B8  0100               	movlb	0	; () banked
 16437  0022BA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16438  0022BC  0E71               	movlw	113
 16439  0022BE  0100               	movlb	0	; () banked
 16440  0022C0  6FAB               	movwf	??_BothServos& (0+255),b
 16441  0022C2  0E1E               	movlw	30
 16442  0022C4                     u11687:
 16443  0022C4  2EE8               	decfsz	wreg,f,c
 16444  0022C6  D7FE               	bra	u11687
 16445  0022C8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16446  0022CA  D7FC               	bra	u11687
 16447  0022CC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16448  0022CE  D7FA               	bra	u11687
 16449  0022D0  F000               	nop	
 16450                           
 16451                           ;Test.c: 382: updateServoPosition(500, 1);
 16452  0022D2  0E01               	movlw	1
 16453  0022D4  0100               	movlb	0	; () banked
 16454  0022D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16455  0022D8  0EF4               	movlw	244
 16456  0022DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16457  0022DC  0E00               	movlw	0
 16458  0022DE  0100               	movlb	0	; () banked
 16459  0022E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16460  0022E2  0E01               	movlw	1
 16461  0022E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16462  0022E6  ECB2  F028         	call	_updateServoPosition	;wreg free
 16463                           
 16464                           ;Test.c: 383: updateServoPosition(1050, 3);
 16465  0022EA  0E04               	movlw	4
 16466  0022EC  0100               	movlb	0	; () banked
 16467  0022EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16468  0022F0  0E1A               	movlw	26
 16469  0022F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16470  0022F4  0E00               	movlw	0
 16471  0022F6  0100               	movlb	0	; () banked
 16472  0022F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16473  0022FA  0E03               	movlw	3
 16474  0022FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16475  0022FE  ECB2  F028         	call	_updateServoPosition	;wreg free
 16476                           
 16477                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 16478  002302  0E1F               	movlw	31
 16479  002304  0100               	movlb	0	; () banked
 16480  002306  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16481  002308  0E71               	movlw	113
 16482  00230A  0100               	movlb	0	; () banked
 16483  00230C  6FAB               	movwf	??_BothServos& (0+255),b
 16484  00230E  0E1E               	movlw	30
 16485  002310                     u11697:
 16486  002310  2EE8               	decfsz	wreg,f,c
 16487  002312  D7FE               	bra	u11697
 16488  002314  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16489  002316  D7FC               	bra	u11697
 16490  002318  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16491  00231A  D7FA               	bra	u11697
 16492  00231C  F000               	nop	
 16493                           
 16494                           ;Test.c: 385: updateServoPosition(1260, 3);
 16495  00231E  0E04               	movlw	4
 16496  002320  0100               	movlb	0	; () banked
 16497  002322  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16498  002324  0EEC               	movlw	236
 16499  002326  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16500  002328  0E00               	movlw	0
 16501  00232A  0100               	movlb	0	; () banked
 16502  00232C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16503  00232E  0E03               	movlw	3
 16504  002330  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16505  002332  ECB2  F028         	call	_updateServoPosition	;wreg free
 16506                           
 16507                           ;Test.c: 386: _delay((unsigned long)((700)*(32000000/4000.0)));
 16508  002336  0E1D               	movlw	29
 16509  002338  0100               	movlb	0	; () banked
 16510  00233A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16511  00233C  0E69               	movlw	105
 16512  00233E  0100               	movlb	0	; () banked
 16513  002340  6FAB               	movwf	??_BothServos& (0+255),b
 16514  002342  0EA5               	movlw	165
 16515  002344                     u11707:
 16516  002344  2EE8               	decfsz	wreg,f,c
 16517  002346  D7FE               	bra	u11707
 16518  002348  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16519  00234A  D7FC               	bra	u11707
 16520  00234C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16521  00234E  D7FA               	bra	u11707
 16522                           
 16523                           ;Test.c: 387: updateServoPosition(1050, 3);
 16524  002350  0E04               	movlw	4
 16525  002352  0100               	movlb	0	; () banked
 16526  002354  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16527  002356  0E1A               	movlw	26
 16528  002358  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16529  00235A  0E00               	movlw	0
 16530  00235C  0100               	movlb	0	; () banked
 16531  00235E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16532  002360  0E03               	movlw	3
 16533  002362  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16534  002364  ECB2  F028         	call	_updateServoPosition	;wreg free
 16535                           
 16536                           ;Test.c: 388: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16537  002368  0E3D               	movlw	61
 16538  00236A  0100               	movlb	0	; () banked
 16539  00236C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16540  00236E  0EE1               	movlw	225
 16541  002370  0100               	movlb	0	; () banked
 16542  002372  6FAB               	movwf	??_BothServos& (0+255),b
 16543  002374  0E3F               	movlw	63
 16544  002376                     u11717:
 16545  002376  2EE8               	decfsz	wreg,f,c
 16546  002378  D7FE               	bra	u11717
 16547  00237A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16548  00237C  D7FC               	bra	u11717
 16549  00237E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16550  002380  D7FA               	bra	u11717
 16551  002382  D000               	nop2	
 16552                           
 16553                           ;Test.c: 390: updateServoPosition(1670, 1);
 16554  002384  0E06               	movlw	6
 16555  002386  0100               	movlb	0	; () banked
 16556  002388  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16557  00238A  0E86               	movlw	134
 16558  00238C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16559  00238E  0E00               	movlw	0
 16560  002390  0100               	movlb	0	; () banked
 16561  002392  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16562  002394  0E01               	movlw	1
 16563  002396  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16564  002398  ECB2  F028         	call	_updateServoPosition	;wreg free
 16565                           
 16566                           ;Test.c: 391: updateServoPosition(1050, 3);
 16567  00239C  0E04               	movlw	4
 16568  00239E  0100               	movlb	0	; () banked
 16569  0023A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16570  0023A2  0E1A               	movlw	26
 16571  0023A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16572  0023A6  0E00               	movlw	0
 16573  0023A8  0100               	movlb	0	; () banked
 16574  0023AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16575  0023AC  0E03               	movlw	3
 16576  0023AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16577  0023B0  ECB2  F028         	call	_updateServoPosition	;wreg free
 16578                           
 16579                           ;Test.c: 392: _delay((unsigned long)((750)*(32000000/4000.0)));
 16580  0023B4  0E1F               	movlw	31
 16581  0023B6  0100               	movlb	0	; () banked
 16582  0023B8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16583  0023BA  0E71               	movlw	113
 16584  0023BC  0100               	movlb	0	; () banked
 16585  0023BE  6FAB               	movwf	??_BothServos& (0+255),b
 16586  0023C0  0E1E               	movlw	30
 16587  0023C2                     u11727:
 16588  0023C2  2EE8               	decfsz	wreg,f,c
 16589  0023C4  D7FE               	bra	u11727
 16590  0023C6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16591  0023C8  D7FC               	bra	u11727
 16592  0023CA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16593  0023CC  D7FA               	bra	u11727
 16594  0023CE  F000               	nop	
 16595                           
 16596                           ;Test.c: 393: updateServoPosition(1390, 3);
 16597  0023D0  0E05               	movlw	5
 16598  0023D2  0100               	movlb	0	; () banked
 16599  0023D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16600  0023D6  0E6E               	movlw	110
 16601  0023D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16602  0023DA  0E00               	movlw	0
 16603  0023DC  0100               	movlb	0	; () banked
 16604  0023DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16605  0023E0  0E03               	movlw	3
 16606  0023E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16607  0023E4  ECB2  F028         	call	_updateServoPosition	;wreg free
 16608                           
 16609                           ;Test.c: 394: _delay((unsigned long)((700)*(32000000/4000.0)));
 16610  0023E8  0E1D               	movlw	29
 16611  0023EA  0100               	movlb	0	; () banked
 16612  0023EC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16613  0023EE  0E69               	movlw	105
 16614  0023F0  0100               	movlb	0	; () banked
 16615  0023F2  6FAB               	movwf	??_BothServos& (0+255),b
 16616  0023F4  0EA5               	movlw	165
 16617  0023F6                     u11737:
 16618  0023F6  2EE8               	decfsz	wreg,f,c
 16619  0023F8  D7FE               	bra	u11737
 16620  0023FA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16621  0023FC  D7FC               	bra	u11737
 16622  0023FE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16623  002400  D7FA               	bra	u11737
 16624                           
 16625                           ;Test.c: 395: updateServoPosition(1050, 3);
 16626  002402  0E04               	movlw	4
 16627  002404  0100               	movlb	0	; () banked
 16628  002406  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16629  002408  0E1A               	movlw	26
 16630  00240A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16631  00240C  0E00               	movlw	0
 16632  00240E  0100               	movlb	0	; () banked
 16633  002410  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16634  002412  0E03               	movlw	3
 16635  002414  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16636  002416  ECB2  F028         	call	_updateServoPosition	;wreg free
 16637                           
 16638                           ;Test.c: 396: _delay((unsigned long)((750)*(32000000/4000.0)));
 16639  00241A  0E1F               	movlw	31
 16640  00241C  0100               	movlb	0	; () banked
 16641  00241E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16642  002420  0E71               	movlw	113
 16643  002422  0100               	movlb	0	; () banked
 16644  002424  6FAB               	movwf	??_BothServos& (0+255),b
 16645  002426  0E1E               	movlw	30
 16646  002428                     u11747:
 16647  002428  2EE8               	decfsz	wreg,f,c
 16648  00242A  D7FE               	bra	u11747
 16649  00242C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16650  00242E  D7FC               	bra	u11747
 16651  002430  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16652  002432  D7FA               	bra	u11747
 16653  002434  F000               	nop	
 16654                           
 16655                           ;Test.c: 398: updateServoPosition(2400, 1);
 16656  002436  0E09               	movlw	9
 16657  002438  0100               	movlb	0	; () banked
 16658  00243A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16659  00243C  0E60               	movlw	96
 16660  00243E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16661  002440  0E00               	movlw	0
 16662  002442  0100               	movlb	0	; () banked
 16663  002444  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16664  002446  0E01               	movlw	1
 16665  002448  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16666  00244A  ECB2  F028         	call	_updateServoPosition	;wreg free
 16667                           
 16668                           ;Test.c: 399: updateServoPosition(1050, 3);
 16669  00244E  0E04               	movlw	4
 16670  002450  0100               	movlb	0	; () banked
 16671  002452  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16672  002454  0E1A               	movlw	26
 16673  002456  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16674  002458  0E00               	movlw	0
 16675  00245A  0100               	movlb	0	; () banked
 16676  00245C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16677  00245E  0E03               	movlw	3
 16678  002460  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16679  002462  ECB2  F028         	call	_updateServoPosition	;wreg free
 16680                           
 16681                           ;Test.c: 400: _delay((unsigned long)((750)*(32000000/4000.0)));
 16682  002466  0E1F               	movlw	31
 16683  002468  0100               	movlb	0	; () banked
 16684  00246A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16685  00246C  0E71               	movlw	113
 16686  00246E  0100               	movlb	0	; () banked
 16687  002470  6FAB               	movwf	??_BothServos& (0+255),b
 16688  002472  0E1E               	movlw	30
 16689  002474                     u11757:
 16690  002474  2EE8               	decfsz	wreg,f,c
 16691  002476  D7FE               	bra	u11757
 16692  002478  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16693  00247A  D7FC               	bra	u11757
 16694  00247C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16695  00247E  D7FA               	bra	u11757
 16696  002480  F000               	nop	
 16697                           
 16698                           ;Test.c: 401: updateServoPosition(1390, 3);
 16699  002482  0E05               	movlw	5
 16700  002484  0100               	movlb	0	; () banked
 16701  002486  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16702  002488  0E6E               	movlw	110
 16703  00248A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16704  00248C  0E00               	movlw	0
 16705  00248E  0100               	movlb	0	; () banked
 16706  002490  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16707  002492  0E03               	movlw	3
 16708  002494  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16709  002496  ECB2  F028         	call	_updateServoPosition	;wreg free
 16710                           
 16711                           ;Test.c: 402: _delay((unsigned long)((700)*(32000000/4000.0)));
 16712  00249A  0E1D               	movlw	29
 16713  00249C  0100               	movlb	0	; () banked
 16714  00249E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16715  0024A0  0E69               	movlw	105
 16716  0024A2  0100               	movlb	0	; () banked
 16717  0024A4  6FAB               	movwf	??_BothServos& (0+255),b
 16718  0024A6  0EA5               	movlw	165
 16719  0024A8                     u11767:
 16720  0024A8  2EE8               	decfsz	wreg,f,c
 16721  0024AA  D7FE               	bra	u11767
 16722  0024AC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16723  0024AE  D7FC               	bra	u11767
 16724  0024B0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16725  0024B2  D7FA               	bra	u11767
 16726                           
 16727                           ;Test.c: 403: updateServoPosition(1050, 3);
 16728  0024B4  0E04               	movlw	4
 16729  0024B6  0100               	movlb	0	; () banked
 16730  0024B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16731  0024BA  0E1A               	movlw	26
 16732  0024BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16733  0024BE  0E00               	movlw	0
 16734  0024C0  0100               	movlb	0	; () banked
 16735  0024C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16736  0024C4  0E03               	movlw	3
 16737  0024C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16738  0024C8  ECB2  F028         	call	_updateServoPosition	;wreg free
 16739                           
 16740                           ;Test.c: 404: _delay((unsigned long)((750)*(32000000/4000.0)));
 16741  0024CC  0E1F               	movlw	31
 16742  0024CE  0100               	movlb	0	; () banked
 16743  0024D0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16744  0024D2  0E71               	movlw	113
 16745  0024D4  0100               	movlb	0	; () banked
 16746  0024D6  6FAB               	movwf	??_BothServos& (0+255),b
 16747  0024D8  0E1E               	movlw	30
 16748  0024DA                     u11777:
 16749  0024DA  2EE8               	decfsz	wreg,f,c
 16750  0024DC  D7FE               	bra	u11777
 16751  0024DE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16752  0024E0  D7FC               	bra	u11777
 16753  0024E2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16754  0024E4  D7FA               	bra	u11777
 16755  0024E6  F000               	nop	
 16756                           
 16757                           ;Test.c: 406: stopSignals();
 16758  0024E8  ECE1  F02E         	call	_stopSignals	;wreg free
 16759                           
 16760                           ;Test.c: 407: machine_state = Testing_state;
 16761  0024EC  0E03               	movlw	3
 16762  0024EE  0100               	movlb	0	; () banked
 16763  0024F0  6FFC               	movwf	_machine_state& (0+255),b
 16764                           
 16765                           ; BSR set to: 0
 16766  0024F2  0012               	return		;funcret
 16767  0024F4                     __end_of_BothServos:
 16768                           	opt stack 0
 16769                           tblptru	equ	0xFF8
 16770                           tblptrh	equ	0xFF7
 16771                           tblptrl	equ	0xFF6
 16772                           tablat	equ	0xFF5
 16773                           prodh	equ	0xFF4
 16774                           prodl	equ	0xFF3
 16775                           intcon	equ	0xFF2
 16776                           intcon2	equ	0xFF1
 16777                           intcon3	equ	0xFF0
 16778                           postinc0	equ	0xFEE
 16779                           wreg	equ	0xFE8
 16780                           postdec1	equ	0xFE5
 16781                           fsr1l	equ	0xFE1
 16782                           indf2	equ	0xFDF
 16783                           postinc2	equ	0xFDE
 16784                           postdec2	equ	0xFDD
 16785                           fsr2h	equ	0xFDA
 16786                           fsr2l	equ	0xFD9
 16787                           status	equ	0xFD8
 16788                           
 16789 ;; *************** function _stopSignals *****************
 16790 ;; Defined at:
 16791 ;;		line 71 in file "main.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;		None
 16794 ;; Auto vars:     Size  Location     Type
 16795 ;;		None
 16796 ;; Return value:  Size  Location     Type
 16797 ;;                  1    wreg      void 
 16798 ;; Registers used:
 16799 ;;		wreg, status,2
 16800 ;; Tracked objects:
 16801 ;;		On entry : 0/0
 16802 ;;		On exit  : 0/0
 16803 ;;		Unchanged: 0/0
 16804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;Total ram usage:        0 bytes
 16810 ;; Hardware stack levels used:    1
 16811 ;; Hardware stack levels required when called:    7
 16812 ;; This function calls:
 16813 ;;		Nothing
 16814 ;; This function is called by:
 16815 ;;		_main
 16816 ;;		_BothServos
 16817 ;;		_PlatformTest
 16818 ;;		_arm
 16819 ;; This function uses a non-reentrant model
 16820 ;;
 16821                           
 16822                           	psect	text51
 16823  005DC2                     __ptext51:
 16824                           	opt stack 0
 16825  005DC2                     _stopSignals:
 16826                           	opt stack 23
 16827                           
 16828                           ;main.c: 72: LATA = 0x00;
 16829                           
 16830                           ; BSR set to: 0
 16831                           ;incstack = 0
 16832  005DC2  0E00               	movlw	0
 16833  005DC4  6E89               	movwf	3977,c	;volatile
 16834                           
 16835                           ;main.c: 73: LATB = 0x00;
 16836  005DC6  0E00               	movlw	0
 16837  005DC8  6E8A               	movwf	3978,c	;volatile
 16838                           
 16839                           ;main.c: 74: LATC = 0x00;
 16840  005DCA  0E00               	movlw	0
 16841  005DCC  6E8B               	movwf	3979,c	;volatile
 16842                           
 16843                           ;main.c: 75: LATD = 0x00;
 16844  005DCE  0E00               	movlw	0
 16845  005DD0  6E8C               	movwf	3980,c	;volatile
 16846                           
 16847                           ;main.c: 76: LATE = 0x00;
 16848  005DD2  0E00               	movlw	0
 16849  005DD4  6E8D               	movwf	3981,c	;volatile
 16850                           
 16851                           ;main.c: 77: TMR1IE = 0;
 16852  005DD6  909D               	bcf	3997,0,c	;volatile
 16853                           
 16854                           ;main.c: 78: TMR2IE = 0;
 16855  005DD8  929D               	bcf	3997,1,c	;volatile
 16856                           
 16857                           ;main.c: 79: TMR3IE = 0;
 16858  005DDA  92A0               	bcf	4000,1,c	;volatile
 16859  005DDC  0012               	return		;funcret
 16860  005DDE                     __end_of_stopSignals:
 16861                           	opt stack 0
 16862                           tblptru	equ	0xFF8
 16863                           tblptrh	equ	0xFF7
 16864                           tblptrl	equ	0xFF6
 16865                           tablat	equ	0xFF5
 16866                           prodh	equ	0xFF4
 16867                           prodl	equ	0xFF3
 16868                           intcon	equ	0xFF2
 16869                           intcon2	equ	0xFF1
 16870                           intcon3	equ	0xFF0
 16871                           postinc0	equ	0xFEE
 16872                           wreg	equ	0xFE8
 16873                           postdec1	equ	0xFE5
 16874                           fsr1l	equ	0xFE1
 16875                           indf2	equ	0xFDF
 16876                           postinc2	equ	0xFDE
 16877                           postdec2	equ	0xFDD
 16878                           fsr2h	equ	0xFDA
 16879                           fsr2l	equ	0xFD9
 16880                           status	equ	0xFD8
 16881                           
 16882 ;; *************** function _initServos *****************
 16883 ;; Defined at:
 16884 ;;		line 498 in file "sort.c"
 16885 ;; Parameters:    Size  Location     Type
 16886 ;;		None
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;		None
 16889 ;; Return value:  Size  Location     Type
 16890 ;;                  1    wreg      void 
 16891 ;; Registers used:
 16892 ;;		wreg, status,2, status,0, cstack
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/0
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;Total ram usage:        1 bytes
 16903 ;; Hardware stack levels used:    1
 16904 ;; Hardware stack levels required when called:    8
 16905 ;; This function calls:
 16906 ;;		_updateServoPosition
 16907 ;; This function is called by:
 16908 ;;		_Loading
 16909 ;;		_BothServos
 16910 ;; This function uses a non-reentrant model
 16911 ;;
 16912                           
 16913                           	psect	text52
 16914  0051E2                     __ptext52:
 16915                           	opt stack 0
 16916  0051E2                     _initServos:
 16917                           	opt stack 20
 16918                           
 16919                           ;sort.c: 500: updateServoPosition(1200, 1);
 16920                           
 16921                           ;incstack = 0
 16922  0051E2  0E04               	movlw	4
 16923  0051E4  0100               	movlb	0	; () banked
 16924  0051E6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16925  0051E8  0EB0               	movlw	176
 16926  0051EA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16927  0051EC  0E00               	movlw	0
 16928  0051EE  0100               	movlb	0	; () banked
 16929  0051F0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16930  0051F2  0E01               	movlw	1
 16931  0051F4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16932  0051F6  ECB2  F028         	call	_updateServoPosition	;wreg free
 16933                           
 16934                           ;sort.c: 501: updateServoPosition(1050, 3);
 16935  0051FA  0E04               	movlw	4
 16936  0051FC  0100               	movlb	0	; () banked
 16937  0051FE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16938  005200  0E1A               	movlw	26
 16939  005202  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16940  005204  0E00               	movlw	0
 16941  005206  0100               	movlb	0	; () banked
 16942  005208  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16943  00520A  0E03               	movlw	3
 16944  00520C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16945  00520E  ECB2  F028         	call	_updateServoPosition	;wreg free
 16946                           
 16947                           ;sort.c: 502: TMR1ON = 1;
 16948  005212  80CD               	bsf	4045,0,c	;volatile
 16949                           
 16950                           ;sort.c: 503: was_low_1 = 0;
 16951  005214  0E00               	movlw	0
 16952  005216  6E78               	movwf	_was_low_1+1,c	;volatile
 16953  005218  0E00               	movlw	0
 16954  00521A  6E77               	movwf	_was_low_1,c	;volatile
 16955                           
 16956                           ;sort.c: 505: _delay((unsigned long)((5)*(32000000/4000.0)));
 16957  00521C  0E34               	movlw	52
 16958  00521E  0100               	movlb	0	; () banked
 16959  005220  6F88               	movwf	??_initServos& (0+255),b
 16960  005222  0EF1               	movlw	241
 16961  005224                     u11787:
 16962  005224  2EE8               	decfsz	wreg,f,c
 16963  005226  D7FE               	bra	u11787
 16964  005228  2F88               	decfsz	??_initServos& (0+255),f,b
 16965  00522A  D7FC               	bra	u11787
 16966  00522C  D000               	nop2	
 16967                           
 16968                           ;sort.c: 507: TMR3ON = 1;
 16969  00522E  80B1               	bsf	4017,0,c	;volatile
 16970                           
 16971                           ;sort.c: 508: was_low_3 = 0;
 16972  005230  0E00               	movlw	0
 16973  005232  6E7C               	movwf	_was_low_3+1,c	;volatile
 16974  005234  0E00               	movlw	0
 16975  005236  6E7B               	movwf	_was_low_3,c	;volatile
 16976                           
 16977                           ;sort.c: 511: _delay((unsigned long)((1)*(32000000/4000.0)));
 16978  005238  0E0B               	movlw	11
 16979  00523A  0100               	movlb	0	; () banked
 16980  00523C  6F88               	movwf	??_initServos& (0+255),b
 16981  00523E  0E62               	movlw	98
 16982  005240                     u11797:
 16983  005240  2EE8               	decfsz	wreg,f,c
 16984  005242  D7FE               	bra	u11797
 16985  005244  2F88               	decfsz	??_initServos& (0+255),f,b
 16986  005246  D7FC               	bra	u11797
 16987  005248  F000               	nop	
 16988                           
 16989                           ;sort.c: 512: LATBbits.LATB3 = 0;
 16990  00524A  968A               	bcf	3978,3,c	;volatile
 16991                           
 16992                           ;sort.c: 513: TMR2ON = 1;
 16993  00524C  84CA               	bsf	4042,2,c	;volatile
 16994                           
 16995                           ;sort.c: 514: was_low_2 = 0;
 16996  00524E  0E00               	movlw	0
 16997  005250  6E7A               	movwf	_was_low_2+1,c	;volatile
 16998  005252  0E00               	movlw	0
 16999  005254  6E79               	movwf	_was_low_2,c	;volatile
 17000                           
 17001                           ;sort.c: 516: LATCbits.LATC0 = 1;
 17002  005256  808B               	bsf	3979,0,c	;volatile
 17003  005258  0012               	return		;funcret
 17004  00525A                     __end_of_initServos:
 17005                           	opt stack 0
 17006                           tblptru	equ	0xFF8
 17007                           tblptrh	equ	0xFF7
 17008                           tblptrl	equ	0xFF6
 17009                           tablat	equ	0xFF5
 17010                           prodh	equ	0xFF4
 17011                           prodl	equ	0xFF3
 17012                           intcon	equ	0xFF2
 17013                           intcon2	equ	0xFF1
 17014                           intcon3	equ	0xFF0
 17015                           postinc0	equ	0xFEE
 17016                           wreg	equ	0xFE8
 17017                           postdec1	equ	0xFE5
 17018                           fsr1l	equ	0xFE1
 17019                           indf2	equ	0xFDF
 17020                           postinc2	equ	0xFDE
 17021                           postdec2	equ	0xFDD
 17022                           fsr2h	equ	0xFDA
 17023                           fsr2l	equ	0xFD9
 17024                           status	equ	0xFD8
 17025                           
 17026 ;; *************** function _updateServoPosition *****************
 17027 ;; Defined at:
 17028 ;;		line 607 in file "sort.c"
 17029 ;; Parameters:    Size  Location     Type
 17030 ;;  time_us         2    0[BANK0 ] int 
 17031 ;;  timer           2    2[BANK0 ] int 
 17032 ;; Auto vars:     Size  Location     Type
 17033 ;;  my_time         2    6[BANK0 ] unsigned int 
 17034 ;; Return value:  Size  Location     Type
 17035 ;;                  1    wreg      void 
 17036 ;; Registers used:
 17037 ;;		wreg, status,2, status,0
 17038 ;; Tracked objects:
 17039 ;;		On entry : 0/0
 17040 ;;		On exit  : 0/0
 17041 ;;		Unchanged: 0/0
 17042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17043 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17044 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17046 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17047 ;;Total ram usage:        8 bytes
 17048 ;; Hardware stack levels used:    1
 17049 ;; Hardware stack levels required when called:    7
 17050 ;; This function calls:
 17051 ;;		Nothing
 17052 ;; This function is called by:
 17053 ;;		_Distribution
 17054 ;;		_initServos
 17055 ;;		_actuatorTest
 17056 ;;		_BothServos
 17057 ;; This function uses a non-reentrant model
 17058 ;;
 17059                           
 17060                           	psect	text53
 17061  005164                     __ptext53:
 17062                           	opt stack 0
 17063  005164                     _updateServoPosition:
 17064                           	opt stack 20
 17065                           
 17066                           ;sort.c: 608: unsigned int my_time = 65535 - time_us;
 17067                           
 17068                           ;incstack = 0
 17069  005164  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 17070  005168  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 17071  00516C  0100               	movlb	0	; () banked
 17072  00516E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 17073  005170  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 17074  005172  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 17075  005174  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 17076  005176  0EFF               	movlw	255
 17077  005178  0100               	movlb	0	; () banked
 17078  00517A  2584               	addwf	??_updateServoPosition& (0+255),w,b
 17079  00517C  0100               	movlb	0	; () banked
 17080  00517E  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 17081  005180  0EFF               	movlw	255
 17082  005182  0100               	movlb	0	; () banked
 17083  005184  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 17084  005186  0100               	movlb	0	; () banked
 17085  005188  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 17086                           
 17087                           ;sort.c: 609: switch(timer){
 17088  00518A  D019               	goto	l6994
 17089  00518C                     l6988:
 17090                           
 17091                           ; BSR set to: 0
 17092                           ;sort.c: 611: servoTimes[0] = my_time >> 8;
 17093  00518C  0100               	movlb	0	; () banked
 17094  00518E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17095  005190  6E5B               	movwf	_servoTimes,c
 17096  005192  6A5C               	clrf	_servoTimes+1,c
 17097                           
 17098                           ;sort.c: 612: servoTimes[1] = my_time & 0xFF;
 17099  005194  0100               	movlb	0	; () banked
 17100  005196  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17101  005198  6E5D               	movwf	_servoTimes+2,c
 17102  00519A  6A5E               	clrf	_servoTimes+3,c
 17103                           
 17104                           ; BSR set to: 0
 17105                           ;sort.c: 614: pan_servo_state = time_us;
 17106  00519C  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 17107  0051A0  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 17108  0051A4                     l952:
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;sort.c: 616: servoTimes[2] = my_time >> 8;
 17112  0051A4  0100               	movlb	0	; () banked
 17113  0051A6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17114  0051A8  6E5F               	movwf	_servoTimes+4,c
 17115  0051AA  6A60               	clrf	_servoTimes+5,c
 17116                           
 17117                           ;sort.c: 617: servoTimes[3] = my_time & 0xFF;
 17118  0051AC  0100               	movlb	0	; () banked
 17119  0051AE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17120  0051B0  6E61               	movwf	_servoTimes+6,c
 17121  0051B2  6A62               	clrf	_servoTimes+7,c
 17122                           
 17123                           ; BSR set to: 0
 17124                           ;sort.c: 619: tilt_servo_state = time_us;
 17125  0051B4  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 17126  0051B8  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 17127                           
 17128                           ;sort.c: 620: }
 17129  0051BC  0012               	return	
 17130  0051BE                     l6994:
 17131                           
 17132                           ; BSR set to: 0
 17133  0051BE  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 17134  0051C2  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 17135                           
 17136                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17137                           ; Switch size 1, requested type "space"
 17138                           ; Number of cases is 1, Range of values is 0 to 0
 17139                           ; switch strategies available:
 17140                           ; Name         Instructions Cycles
 17141                           ; simple_byte            4     3 (average)
 17142                           ;	Chosen strategy is simple_byte
 17143  0051C6  0100               	movlb	0	; () banked
 17144  0051C8  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 17145  0051CA  0A00               	xorlw	0	; case 0
 17146  0051CC  A4D8               	btfss	status,2,c
 17147  0051CE  0012               	return	
 17148                           
 17149                           ; BSR set to: 0
 17150                           ; Switch size 1, requested type "space"
 17151                           ; Number of cases is 2, Range of values is 1 to 3
 17152                           ; switch strategies available:
 17153                           ; Name         Instructions Cycles
 17154                           ; simple_byte            7     4 (average)
 17155                           ;	Chosen strategy is simple_byte
 17156  0051D0  0100               	movlb	0	; () banked
 17157  0051D2  5184               	movf	??_updateServoPosition& (0+255),w,b
 17158  0051D4  0A01               	xorlw	1	; case 1
 17159  0051D6  B4D8               	btfsc	status,2,c
 17160  0051D8  D7D9               	goto	l6988
 17161  0051DA  0A02               	xorlw	2	; case 3
 17162  0051DC  A4D8               	btfss	status,2,c
 17163  0051DE  0012               	return	
 17164  0051E0  D7E1               	goto	l952
 17165  0051E2                     __end_of_updateServoPosition:
 17166                           	opt stack 0
 17167                           tblptru	equ	0xFF8
 17168                           tblptrh	equ	0xFF7
 17169                           tblptrl	equ	0xFF6
 17170                           tablat	equ	0xFF5
 17171                           prodh	equ	0xFF4
 17172                           prodl	equ	0xFF3
 17173                           intcon	equ	0xFF2
 17174                           intcon2	equ	0xFF1
 17175                           intcon3	equ	0xFF0
 17176                           postinc0	equ	0xFEE
 17177                           wreg	equ	0xFE8
 17178                           postdec1	equ	0xFE5
 17179                           fsr1l	equ	0xFE1
 17180                           indf2	equ	0xFDF
 17181                           postinc2	equ	0xFDE
 17182                           postdec2	equ	0xFDD
 17183                           fsr2h	equ	0xFDA
 17184                           fsr2l	equ	0xFD9
 17185                           status	equ	0xFD8
 17186                           
 17187 ;; *************** function _BlockerTest *****************
 17188 ;; Defined at:
 17189 ;;		line 558 in file "Test.c"
 17190 ;; Parameters:    Size  Location     Type
 17191 ;;		None
 17192 ;; Auto vars:     Size  Location     Type
 17193 ;;  i               2   45[BANK0 ] int 
 17194 ;;  cond_flag       2   51[BANK0 ] int 
 17195 ;;  cam_flag        2   49[BANK0 ] int 
 17196 ;;  res             2   47[BANK0 ] int 
 17197 ;; Return value:  Size  Location     Type
 17198 ;;                  1    wreg      void 
 17199 ;; Registers used:
 17200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17201 ;; Tracked objects:
 17202 ;;		On entry : 0/0
 17203 ;;		On exit  : 0/0
 17204 ;;		Unchanged: 0/0
 17205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17209 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17210 ;;Total ram usage:       10 bytes
 17211 ;; Hardware stack levels used:    1
 17212 ;; Hardware stack levels required when called:   10
 17213 ;; This function calls:
 17214 ;;		_lcdInst
 17215 ;;		_printf
 17216 ;;		_readADC
 17217 ;; This function is called by:
 17218 ;;		_Test
 17219 ;; This function uses a non-reentrant model
 17220 ;;
 17221                           
 17222                           	psect	text54
 17223  003F1A                     __ptext54:
 17224                           	opt stack 0
 17225  003F1A                     _BlockerTest:
 17226                           	opt stack 19
 17227                           
 17228                           ;Test.c: 559: readADC(2);
 17229                           
 17230                           ; BSR set to: 0
 17231                           ;incstack = 0
 17232  003F1A  0E02               	movlw	2
 17233  003F1C  EC25  F02E         	call	_readADC
 17234                           
 17235                           ;Test.c: 560: int res = ADRESH<<8 | ADRESL;
 17236  003F20  50C3               	movf	4035,w,c	;volatile
 17237  003F22  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17238  003F26  0100               	movlb	0	; () banked
 17239  003F28  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17240  003F2A  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17241  003F2E  0100               	movlb	0	; () banked
 17242  003F30  6BAB               	clrf	??_BlockerTest& (0+255),b
 17243  003F32  0100               	movlb	0	; () banked
 17244  003F34  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17245  003F36  0100               	movlb	0	; () banked
 17246  003F38  6FAF               	movwf	BlockerTest@res& (0+255),b
 17247  003F3A  0100               	movlb	0	; () banked
 17248  003F3C  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17249  003F3E  0100               	movlb	0	; () banked
 17250  003F40  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17251                           
 17252                           ; BSR set to: 0
 17253                           ;Test.c: 562: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17254  003F42  0E01               	movlw	1
 17255  003F44  EC3A  F02F         	call	_lcdInst
 17256  003F48  0E68               	movlw	104
 17257  003F4A  0100               	movlb	0	; () banked
 17258  003F4C  6FAB               	movwf	??_BlockerTest& (0+255),b
 17259  003F4E  0EE4               	movlw	228
 17260  003F50                     u11807:
 17261  003F50  2EE8               	decfsz	wreg,f,c
 17262  003F52  D7FE               	bra	u11807
 17263  003F54  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 17264  003F56  D7FC               	bra	u11807
 17265  003F58  F000               	nop	
 17266  003F5A  0E80               	movlw	128
 17267  003F5C  EC3A  F02F         	call	_lcdInst
 17268                           
 17269                           ;Test.c: 563: printf("D:RET|2:C %d  ", res);
 17270  003F60  0E6D               	movlw	low STR_120
 17271  003F62  0100               	movlb	0	; () banked
 17272  003F64  6F8E               	movwf	printf@f& (0+255),b
 17273  003F66  0EFE               	movlw	high STR_120
 17274  003F68  0100               	movlb	0	; () banked
 17275  003F6A  6F8F               	movwf	(printf@f+1)& (0+255),b
 17276  003F6C  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17277  003F70  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17278  003F74  EC67  F00E         	call	_printf	;wreg free
 17279                           
 17280                           ;Test.c: 564: lcdInst(0b11000000);;
 17281  003F78  0EC0               	movlw	192
 17282  003F7A  EC3A  F02F         	call	_lcdInst
 17283                           
 17284                           ;Test.c: 565: printf("OTHER: CAM TOGGLE");
 17285  003F7E  0E2D               	movlw	low STR_121
 17286  003F80  0100               	movlb	0	; () banked
 17287  003F82  6F8E               	movwf	printf@f& (0+255),b
 17288  003F84  0EFB               	movlw	high STR_121
 17289  003F86  0100               	movlb	0	; () banked
 17290  003F88  6F8F               	movwf	(printf@f+1)& (0+255),b
 17291  003F8A  EC67  F00E         	call	_printf	;wreg free
 17292                           
 17293                           ;Test.c: 566: int cam_flag = 1;
 17294  003F8E  0E00               	movlw	0
 17295  003F90  0100               	movlb	0	; () banked
 17296  003F92  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17297  003F94  0E01               	movlw	1
 17298  003F96  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17299                           
 17300                           ; BSR set to: 0
 17301                           ;Test.c: 567: int cond_flag = 0;
 17302  003F98  0E00               	movlw	0
 17303  003F9A  0100               	movlb	0	; () banked
 17304  003F9C  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17305  003F9E  0E00               	movlw	0
 17306  003FA0  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;Test.c: 570: while(PORTBbits.RB1 == 0){
 17310                           
 17311                           ;Test.c: 569: while(1){
 17312  003FA2  D023               	goto	l9268
 17313  003FA4                     l9260:
 17314                           
 17315                           ;Test.c: 571: readADC(2);
 17316  003FA4  0E02               	movlw	2
 17317  003FA6  EC25  F02E         	call	_readADC
 17318                           
 17319                           ;Test.c: 572: res = ADRESH<<8 | ADRESL;
 17320  003FAA  50C3               	movf	4035,w,c	;volatile
 17321  003FAC  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17322  003FB0  0100               	movlb	0	; () banked
 17323  003FB2  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17324  003FB4  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17325  003FB8  0100               	movlb	0	; () banked
 17326  003FBA  6BAB               	clrf	??_BlockerTest& (0+255),b
 17327  003FBC  0100               	movlb	0	; () banked
 17328  003FBE  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17329  003FC0  0100               	movlb	0	; () banked
 17330  003FC2  6FAF               	movwf	BlockerTest@res& (0+255),b
 17331  003FC4  0100               	movlb	0	; () banked
 17332  003FC6  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17333  003FC8  0100               	movlb	0	; () banked
 17334  003FCA  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17335                           
 17336                           ; BSR set to: 0
 17337                           ;Test.c: 573: lcdInst(0b10000000);;
 17338  003FCC  0E80               	movlw	128
 17339  003FCE  EC3A  F02F         	call	_lcdInst
 17340                           
 17341                           ;Test.c: 574: printf("D:RET|2:C %d  ", res);
 17342  003FD2  0E6D               	movlw	low STR_120
 17343  003FD4  0100               	movlb	0	; () banked
 17344  003FD6  6F8E               	movwf	printf@f& (0+255),b
 17345  003FD8  0EFE               	movlw	high STR_120
 17346  003FDA  0100               	movlb	0	; () banked
 17347  003FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 17348  003FDE  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17349  003FE2  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17350  003FE6  EC67  F00E         	call	_printf	;wreg free
 17351  003FEA                     l9268:
 17352  003FEA  A281               	btfss	3969,1,c	;volatile
 17353  003FEC  D7DB               	goto	l9260
 17354                           
 17355                           ;Test.c: 575: }
 17356                           ;Test.c: 576: if(PORTB >> 4 == 0b1111){
 17357  003FEE  3881               	swapf	3969,w,c	;volatile
 17358  003FF0  0B0F               	andlw	15
 17359  003FF2  0A0F               	xorlw	15
 17360  003FF4  B4D8               	btfsc	status,2,c
 17361  003FF6  0012               	return	
 17362                           
 17363                           ;Test.c: 579: else if(PORTB >> 4 == 0b0001){
 17364                           
 17365                           ;Test.c: 578: }
 17366                           
 17367                           ;Test.c: 577: break;
 17368  003FF8  3881               	swapf	3969,w,c	;volatile
 17369  003FFA  0B0F               	andlw	15
 17370  003FFC  06E8               	decf	wreg,f,c
 17371  003FFE  A4D8               	btfss	status,2,c
 17372  004000  D016               	goto	l9286
 17373                           
 17374                           ;Test.c: 580: if(cond_flag){
 17375  004002  0100               	movlb	0	; () banked
 17376  004004  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17377  004006  0100               	movlb	0	; () banked
 17378  004008  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17379  00400A  B4D8               	btfsc	status,2,c
 17380  00400C  D007               	goto	l1459
 17381                           
 17382                           ; BSR set to: 0
 17383                           ;Test.c: 581: LATCbits.LATC7 = 1;
 17384  00400E  8E8B               	bsf	3979,7,c	;volatile
 17385  004010  D006               	goto	l9284
 17386  004012                     u8641:
 17387  004012  0E01               	movlw	1
 17388  004014                     u8650:
 17389  004014  0100               	movlb	0	; () banked
 17390  004016  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17391  004018  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17392                           
 17393                           ;Test.c: 583: }
 17394  00401A  D05F               	goto	l9314
 17395  00401C                     l1459:
 17396                           
 17397                           ; BSR set to: 0
 17398                           ;Test.c: 584: else{
 17399                           ;Test.c: 585: LATCbits.LATC7 = 0;
 17400  00401C  9E8B               	bcf	3979,7,c	;volatile
 17401  00401E                     l9284:
 17402                           
 17403                           ; BSR set to: 0
 17404                           ;Test.c: 586: cond_flag = !cond_flag;
 17405  00401E  0100               	movlb	0	; () banked
 17406  004020  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17407  004022  0100               	movlb	0	; () banked
 17408  004024  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17409  004026  B4D8               	btfsc	status,2,c
 17410  004028  D7F4               	goto	u8641
 17411  00402A  0E00               	movlw	0
 17412  00402C  D7F3               	goto	u8650
 17413  00402E                     l9286:
 17414                           
 17415                           ;Test.c: 589: else{
 17416                           ;Test.c: 590: if(cam_flag){
 17417  00402E  0100               	movlb	0	; () banked
 17418  004030  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17419  004032  0100               	movlb	0	; () banked
 17420  004034  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17421  004036  B4D8               	btfsc	status,2,c
 17422  004038  D007               	goto	l9292
 17423                           
 17424                           ; BSR set to: 0
 17425                           ;Test.c: 591: LATCbits.LATC0 = 1;
 17426  00403A  808B               	bsf	3979,0,c	;volatile
 17427  00403C  D023               	goto	l9304
 17428  00403E                     u8691:
 17429  00403E  0E01               	movlw	1
 17430  004040                     u8700:
 17431  004040  0100               	movlb	0	; () banked
 17432  004042  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17433  004044  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17434                           
 17435                           ;Test.c: 593: }
 17436  004046  D049               	goto	l9314
 17437  004048                     l9292:
 17438                           
 17439                           ; BSR set to: 0
 17440                           ;Test.c: 594: else{
 17441                           ;Test.c: 595: for(int i=0;i<5000;i++)
 17442  004048  0E00               	movlw	0
 17443  00404A  0100               	movlb	0	; () banked
 17444  00404C  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17445  00404E  0E00               	movlw	0
 17446  004050  6FAD               	movwf	BlockerTest@i& (0+255),b
 17447  004052                     l9294:
 17448                           
 17449                           ; BSR set to: 0
 17450  004052  0100               	movlb	0	; () banked
 17451  004054  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17452  004056  D008               	goto	l1464
 17453  004058  0E88               	movlw	136
 17454  00405A  0100               	movlb	0	; () banked
 17455  00405C  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17456  00405E  0E13               	movlw	19
 17457  004060  0100               	movlb	0	; () banked
 17458  004062  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17459  004064  B0D8               	btfsc	status,0,c
 17460  004066  D00D               	goto	l1465
 17461  004068                     l1464:
 17462                           
 17463                           ; BSR set to: 0
 17464                           ;Test.c: 596: {
 17465                           ;Test.c: 597: LATCbits.LATC0 = 1;
 17466  004068  808B               	bsf	3979,0,c	;volatile
 17467                           
 17468                           ; BSR set to: 0
 17469                           ;Test.c: 598: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17470  00406A  0E1A               	movlw	26
 17471  00406C                     u11817:
 17472  00406C  2EE8               	decfsz	wreg,f,c
 17473  00406E  D7FE               	bra	u11817
 17474  004070  D000               	nop2	
 17475                           
 17476                           ;Test.c: 599: LATCbits.LATC0 = 0;
 17477  004072  908B               	bcf	3979,0,c	;volatile
 17478                           
 17479                           ;Test.c: 600: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17480  004074  0EF0               	movlw	240
 17481  004076                     u11827:
 17482  004076  2EE8               	decfsz	wreg,f,c
 17483  004078  D7FE               	bra	u11827
 17484  00407A  0100               	movlb	0	; () banked
 17485  00407C  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17486  00407E  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17487  004080  D7E8               	goto	l9294
 17488  004082                     l1465:
 17489                           
 17490                           ; BSR set to: 0
 17491                           ;Test.c: 601: }
 17492                           ;Test.c: 602: LATCbits.LATC0 = 0;
 17493  004082  908B               	bcf	3979,0,c	;volatile
 17494  004084                     l9304:
 17495                           
 17496                           ; BSR set to: 0
 17497                           ;Test.c: 603: cam_flag = !cam_flag;
 17498  004084  0100               	movlb	0	; () banked
 17499  004086  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17500  004088  0100               	movlb	0	; () banked
 17501  00408A  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17502  00408C  B4D8               	btfsc	status,2,c
 17503  00408E  D7D7               	goto	u8691
 17504  004090  0E00               	movlw	0
 17505  004092  D7D6               	goto	u8700
 17506  004094                     l9306:
 17507                           
 17508                           ;Test.c: 608: readADC(2);
 17509  004094  0E02               	movlw	2
 17510  004096  EC25  F02E         	call	_readADC
 17511                           
 17512                           ;Test.c: 609: res = ADRESH<<8 | ADRESL;
 17513  00409A  50C3               	movf	4035,w,c	;volatile
 17514  00409C  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17515  0040A0  0100               	movlb	0	; () banked
 17516  0040A2  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17517  0040A4  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17518  0040A8  0100               	movlb	0	; () banked
 17519  0040AA  6BAB               	clrf	??_BlockerTest& (0+255),b
 17520  0040AC  0100               	movlb	0	; () banked
 17521  0040AE  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17522  0040B0  0100               	movlb	0	; () banked
 17523  0040B2  6FAF               	movwf	BlockerTest@res& (0+255),b
 17524  0040B4  0100               	movlb	0	; () banked
 17525  0040B6  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17526  0040B8  0100               	movlb	0	; () banked
 17527  0040BA  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;Test.c: 610: lcdInst(0b10000000);;
 17531  0040BC  0E80               	movlw	128
 17532  0040BE  EC3A  F02F         	call	_lcdInst
 17533                           
 17534                           ;Test.c: 611: printf("D:RET|2:C %d  ", res);
 17535  0040C2  0E6D               	movlw	low STR_120
 17536  0040C4  0100               	movlb	0	; () banked
 17537  0040C6  6F8E               	movwf	printf@f& (0+255),b
 17538  0040C8  0EFE               	movlw	high STR_120
 17539  0040CA  0100               	movlb	0	; () banked
 17540  0040CC  6F8F               	movwf	(printf@f+1)& (0+255),b
 17541  0040CE  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17542  0040D2  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17543  0040D6  EC67  F00E         	call	_printf	;wreg free
 17544  0040DA                     l9314:
 17545  0040DA  A281               	btfss	3969,1,c	;volatile
 17546  0040DC  D786               	goto	l9268
 17547  0040DE  D7DA               	goto	l9306
 17548  0040E0                     __end_of_BlockerTest:
 17549                           	opt stack 0
 17550                           tblptru	equ	0xFF8
 17551                           tblptrh	equ	0xFF7
 17552                           tblptrl	equ	0xFF6
 17553                           tablat	equ	0xFF5
 17554                           prodh	equ	0xFF4
 17555                           prodl	equ	0xFF3
 17556                           intcon	equ	0xFF2
 17557                           intcon2	equ	0xFF1
 17558                           intcon3	equ	0xFF0
 17559                           postinc0	equ	0xFEE
 17560                           wreg	equ	0xFE8
 17561                           postdec1	equ	0xFE5
 17562                           fsr1l	equ	0xFE1
 17563                           indf2	equ	0xFDF
 17564                           postinc2	equ	0xFDE
 17565                           postdec2	equ	0xFDD
 17566                           fsr2h	equ	0xFDA
 17567                           fsr2l	equ	0xFD9
 17568                           status	equ	0xFD8
 17569                           
 17570 ;; *************** function _readADC *****************
 17571 ;; Defined at:
 17572 ;;		line 15 in file "ADCFunctionality.c"
 17573 ;; Parameters:    Size  Location     Type
 17574 ;;  channel         1    wreg     unsigned char 
 17575 ;; Auto vars:     Size  Location     Type
 17576 ;;  channel         1    1[BANK0 ] unsigned char 
 17577 ;; Return value:  Size  Location     Type
 17578 ;;                  1    wreg      void 
 17579 ;; Registers used:
 17580 ;;		wreg, status,2, status,0, cstack
 17581 ;; Tracked objects:
 17582 ;;		On entry : 0/0
 17583 ;;		On exit  : 0/0
 17584 ;;		Unchanged: 0/0
 17585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17590 ;;Total ram usage:        2 bytes
 17591 ;; Hardware stack levels used:    1
 17592 ;; Hardware stack levels required when called:    7
 17593 ;; This function calls:
 17594 ;;		Nothing
 17595 ;; This function is called by:
 17596 ;;		_readIR
 17597 ;;		_readMAG
 17598 ;;		_readCOND
 17599 ;;		_sensorTest
 17600 ;;		_PlatformTest
 17601 ;;		_BlockerTest
 17602 ;; This function uses a non-reentrant model
 17603 ;;
 17604                           
 17605                           	psect	text55
 17606  005C4A                     __ptext55:
 17607                           	opt stack 0
 17608  005C4A                     _readADC:
 17609                           	opt stack 20
 17610                           
 17611                           ;incstack = 0
 17612                           ;readADC@channel stored from wreg
 17613  005C4A  0100               	movlb	0	; () banked
 17614  005C4C  6F81               	movwf	readADC@channel& (0+255),b
 17615                           
 17616                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17617  005C4E  0100               	movlb	0	; () banked
 17618  005C50  4581               	rlncf	readADC@channel& (0+255),w,b
 17619  005C52  46E8               	rlncf	wreg,f,c
 17620  005C54  0BFC               	andlw	252
 17621  005C56  6EC2               	movwf	4034,c	;volatile
 17622                           
 17623                           ; BSR set to: 0
 17624                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17625  005C58  80C2               	bsf	4034,0,c	;volatile
 17626                           
 17627                           ; BSR set to: 0
 17628                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17629  005C5A  82C2               	bsf	4034,1,c	;volatile
 17630                           
 17631                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17632  005C5C  D009               	goto	l6616
 17633  005C5E                     l6614:
 17634  005C5E  0E34               	movlw	52
 17635  005C60  0100               	movlb	0	; () banked
 17636  005C62  6F80               	movwf	??_readADC& (0+255),b
 17637  005C64  0EF1               	movlw	241
 17638  005C66                     u11837:
 17639  005C66  2EE8               	decfsz	wreg,f,c
 17640  005C68  D7FE               	bra	u11837
 17641  005C6A  2F80               	decfsz	??_readADC& (0+255),f,b
 17642  005C6C  D7FC               	bra	u11837
 17643  005C6E  D000               	nop2	
 17644  005C70                     l6616:
 17645  005C70  A2C2               	btfss	4034,1,c	;volatile
 17646  005C72  0012               	return	
 17647  005C74  D7F4               	goto	l6614
 17648  005C76                     __end_of_readADC:
 17649                           	opt stack 0
 17650                           tblptru	equ	0xFF8
 17651                           tblptrh	equ	0xFF7
 17652                           tblptrl	equ	0xFF6
 17653                           tablat	equ	0xFF5
 17654                           prodh	equ	0xFF4
 17655                           prodl	equ	0xFF3
 17656                           intcon	equ	0xFF2
 17657                           intcon2	equ	0xFF1
 17658                           intcon3	equ	0xFF0
 17659                           postinc0	equ	0xFEE
 17660                           wreg	equ	0xFE8
 17661                           postdec1	equ	0xFE5
 17662                           fsr1l	equ	0xFE1
 17663                           indf2	equ	0xFDF
 17664                           postinc2	equ	0xFDE
 17665                           postdec2	equ	0xFDD
 17666                           fsr2h	equ	0xFDA
 17667                           fsr2l	equ	0xFD9
 17668                           status	equ	0xFD8
 17669                           
 17670 ;; *************** function _printf *****************
 17671 ;; Defined at:
 17672 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17673 ;; Parameters:    Size  Location     Type
 17674 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17675 ;;		 -> STR_127(18), STR_126(18), STR_125(17), STR_124(17), 
 17676 ;;		 -> STR_123(15), STR_122(15), STR_121(18), STR_120(15), 
 17677 ;;		 -> STR_119(18), STR_118(18), STR_117(17), STR_116(17), 
 17678 ;;		 -> STR_115(17), STR_114(17), STR_113(17), STR_112(17), 
 17679 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 17680 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 17681 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 17682 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 17683 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 17684 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 17685 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 17686 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 17687 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 17688 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 17689 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 17690 ;;		 -> STR_67(7), STR_66(21), STR_65(16), STR_64(16), 
 17691 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 17692 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 17693 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 17694 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 17695 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 17696 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 17697 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 17698 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 17699 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 17700 ;;		 -> STR_2(14), STR_1(18), 
 17701 ;; Auto vars:     Size  Location     Type
 17702 ;;  tmpval          4    0        struct .
 17703 ;;  width           2   41[BANK0 ] int 
 17704 ;;  val             2   37[BANK0 ] unsigned int 
 17705 ;;  len             2   35[BANK0 ] unsigned int 
 17706 ;;  ap              2   33[BANK0 ] PTR void [1]
 17707 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17708 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17709 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 17710 ;;  c               1   40[BANK0 ] char 
 17711 ;;  flag            1   39[BANK0 ] unsigned char 
 17712 ;;  prec            1   30[BANK0 ] char 
 17713 ;; Return value:  Size  Location     Type
 17714 ;;                  2   14[BANK0 ] int 
 17715 ;; Registers used:
 17716 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17717 ;; Tracked objects:
 17718 ;;		On entry : 0/0
 17719 ;;		On exit  : 0/0
 17720 ;;		Unchanged: 0/0
 17721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17722 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17723 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17724 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17725 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17726 ;;Total ram usage:       29 bytes
 17727 ;; Hardware stack levels used:    1
 17728 ;; Hardware stack levels required when called:    9
 17729 ;; This function calls:
 17730 ;;		___lwdiv
 17731 ;;		___lwmod
 17732 ;;		___wmul
 17733 ;;		_isdigit
 17734 ;;		_putch
 17735 ;; This function is called by:
 17736 ;;		_UI
 17737 ;;		_change_state_to_menu_start
 17738 ;;		_change_state_to_menu_12
 17739 ;;		_change_state_to_menu_22
 17740 ;;		_printRTC
 17741 ;;		_EEPROM_write
 17742 ;;		_Test
 17743 ;;		_algorithmTest
 17744 ;;		_sensorTest
 17745 ;;		_actuatorTest
 17746 ;;		_BothServos
 17747 ;;		_PortTestDC
 17748 ;;		_PlatformTest
 17749 ;;		_SpeedTest
 17750 ;;		_BlockerTest
 17751 ;;		_arm
 17752 ;;		_PortTestPusher
 17753 ;; This function uses a non-reentrant model
 17754 ;;
 17755                           
 17756                           	psect	text56
 17757  001CCE                     __ptext56:
 17758                           	opt stack 0
 17759  001CCE                     _printf:
 17760                           	opt stack 18
 17761                           
 17762                           ;doprnt.c: 466: va_list ap;
 17763                           ;doprnt.c: 499: signed char c;
 17764                           ;doprnt.c: 501: int width;
 17765                           ;doprnt.c: 506: signed char prec;
 17766                           ;doprnt.c: 508: unsigned char flag;
 17767                           ;doprnt.c: 523: union {
 17768                           ;doprnt.c: 524: unsigned long vd;
 17769                           ;doprnt.c: 525: double integ;
 17770                           ;doprnt.c: 526: } tmpval;
 17771                           ;doprnt.c: 528: unsigned int val;
 17772                           ;doprnt.c: 529: unsigned len;
 17773                           ;doprnt.c: 530: const char * cp;
 17774                           ;doprnt.c: 533: *ap = __va_start();
 17775                           
 17776                           ;incstack = 0
 17777  001CCE  0E90               	movlw	low (?_printf+2)
 17778  001CD0  0100               	movlb	0	; () banked
 17779  001CD2  6FA1               	movwf	printf@ap& (0+255),b
 17780  001CD4  0E00               	movlw	high (?_printf+2)
 17781  001CD6  0100               	movlb	0	; () banked
 17782  001CD8  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17783                           
 17784                           ;doprnt.c: 536: while(c = *f++) {
 17785  001CDA  D205               	goto	l6948
 17786  001CDC                     l6818:
 17787                           
 17788                           ; BSR set to: 0
 17789                           ;doprnt.c: 538: if(c != '%')
 17790  001CDC  0E25               	movlw	37
 17791  001CDE  0100               	movlb	0	; () banked
 17792  001CE0  19A8               	xorwf	printf@c& (0+255),w,b
 17793  001CE2  B4D8               	btfsc	status,2,c
 17794  001CE4  D005               	goto	l6822
 17795                           
 17796                           ; BSR set to: 0
 17797                           ;doprnt.c: 540: {
 17798                           ;doprnt.c: 541: (putch(c) );
 17799  001CE6  0100               	movlb	0	; () banked
 17800  001CE8  51A8               	movf	printf@c& (0+255),w,b
 17801  001CEA  EC32  F02F         	call	_putch
 17802                           
 17803                           ;doprnt.c: 542: continue;
 17804  001CEE  D1FB               	goto	l6948
 17805  001CF0                     l6822:
 17806                           
 17807                           ;doprnt.c: 543: }
 17808                           ;doprnt.c: 546: width = 0;
 17809  001CF0  0E00               	movlw	0
 17810  001CF2  0100               	movlb	0	; () banked
 17811  001CF4  6FAA               	movwf	(printf@width+1)& (0+255),b
 17812  001CF6  0E00               	movlw	0
 17813  001CF8  6FA9               	movwf	printf@width& (0+255),b
 17814                           
 17815                           ;doprnt.c: 548: flag = 0;
 17816  001CFA  0E00               	movlw	0
 17817  001CFC  0100               	movlb	0	; () banked
 17818  001CFE  6FA7               	movwf	printf@flag& (0+255),b
 17819                           
 17820                           ; BSR set to: 0
 17821                           ;doprnt.c: 551: switch(*f) {
 17822                           
 17823                           ;doprnt.c: 550: for(;;) {
 17824  001D00  D005               	goto	l6828
 17825  001D02                     l6824:
 17826                           
 17827                           ;doprnt.c: 580: flag |= 0x04;
 17828  001D02  0100               	movlb	0	; () banked
 17829  001D04  85A7               	bsf	printf@flag& (0+255),2,b
 17830                           
 17831                           ;doprnt.c: 581: f++;
 17832  001D06  0100               	movlb	0	; () banked
 17833  001D08  4B8E               	infsnz	printf@f& (0+255),f,b
 17834  001D0A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17835  001D0C                     l6828:
 17836  001D0C  C08E  FFF6         	movff	printf@f,tblptrl
 17837  001D10  C08F  FFF7         	movff	printf@f+1,tblptrh
 17838  001D14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17839  001D14  6AF8               	clrf	tblptru,c
 17840  001D16                     	endif
 17841  001D16                     	if	0	;tblptru may be non-zero
 17842  001D16                     	endif
 17843  001D16  0008               	tblrd		*
 17844  001D18  50F5               	movf	tablat,w,c
 17845                           
 17846                           ; Switch size 1, requested type "space"
 17847                           ; Number of cases is 1, Range of values is 48 to 48
 17848                           ; switch strategies available:
 17849                           ; Name         Instructions Cycles
 17850                           ; simple_byte            4     3 (average)
 17851                           ;	Chosen strategy is simple_byte
 17852  001D1A  0A30               	xorlw	48	; case 48
 17853  001D1C  B4D8               	btfsc	status,2,c
 17854  001D1E  D7F1               	goto	l6824
 17855                           
 17856                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17857                           
 17858                           ;doprnt.c: 586: }
 17859                           
 17860                           ;doprnt.c: 585: break;
 17861  001D20  C08E  FFF6         	movff	printf@f,tblptrl
 17862  001D24  C08F  FFF7         	movff	printf@f+1,tblptrh
 17863  001D28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17864  001D28  6AF8               	clrf	tblptru,c
 17865  001D2A                     	endif
 17866  001D2A                     	if	0	;tblptru may be non-zero
 17867  001D2A                     	endif
 17868  001D2A  0008               	tblrd		*
 17869  001D2C  50F5               	movf	tablat,w,c
 17870  001D2E  EC3B  F02E         	call	_isdigit
 17871  001D32  A0D8               	btfss	status,0,c
 17872  001D34  D0D2               	goto	l6876
 17873                           
 17874                           ;doprnt.c: 598: width = 0;
 17875  001D36  0E00               	movlw	0
 17876  001D38  0100               	movlb	0	; () banked
 17877  001D3A  6FAA               	movwf	(printf@width+1)& (0+255),b
 17878  001D3C  0E00               	movlw	0
 17879  001D3E  6FA9               	movwf	printf@width& (0+255),b
 17880  001D40                     l6834:
 17881                           
 17882                           ;doprnt.c: 600: width *= 10;
 17883  001D40  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17884  001D44  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17885  001D48  0E00               	movlw	0
 17886  001D4A  0100               	movlb	0	; () banked
 17887  001D4C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17888  001D4E  0E0A               	movlw	10
 17889  001D50  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17890  001D52  ECA4  F02C         	call	___wmul	;wreg free
 17891  001D56  C080  F0A9         	movff	?___wmul,printf@width
 17892  001D5A  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17893                           
 17894                           ;doprnt.c: 601: width += *f++ - '0';
 17895  001D5E  0ED0               	movlw	208
 17896  001D60  0100               	movlb	0	; () banked
 17897  001D62  6F9A               	movwf	??_printf& (0+255),b
 17898  001D64  0EFF               	movlw	255
 17899  001D66  0100               	movlb	0	; () banked
 17900  001D68  6F9B               	movwf	(??_printf+1)& (0+255),b
 17901  001D6A  C08E  FFF6         	movff	printf@f,tblptrl
 17902  001D6E  C08F  FFF7         	movff	printf@f+1,tblptrh
 17903  001D72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17904  001D72  6AF8               	clrf	tblptru,c
 17905  001D74                     	endif
 17906  001D74                     	if	0	;tblptru may be non-zero
 17907  001D74                     	endif
 17908  001D74  0008               	tblrd		*
 17909  001D76  50F5               	movf	tablat,w,c
 17910  001D78  0100               	movlb	0	; () banked
 17911  001D7A  6F9C               	movwf	(??_printf+2)& (0+255),b
 17912  001D7C  6B9D               	clrf	(??_printf+3)& (0+255),b
 17913  001D7E  0100               	movlb	0	; () banked
 17914  001D80  519A               	movf	??_printf& (0+255),w,b
 17915  001D82  0100               	movlb	0	; () banked
 17916  001D84  279C               	addwf	(??_printf+2)& (0+255),f,b
 17917  001D86  0100               	movlb	0	; () banked
 17918  001D88  519B               	movf	(??_printf+1)& (0+255),w,b
 17919  001D8A  0100               	movlb	0	; () banked
 17920  001D8C  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17921  001D8E  0100               	movlb	0	; () banked
 17922  001D90  519C               	movf	(??_printf+2)& (0+255),w,b
 17923  001D92  0100               	movlb	0	; () banked
 17924  001D94  27A9               	addwf	printf@width& (0+255),f,b
 17925  001D96  0100               	movlb	0	; () banked
 17926  001D98  519D               	movf	(??_printf+3)& (0+255),w,b
 17927  001D9A  0100               	movlb	0	; () banked
 17928  001D9C  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17929                           
 17930                           ; BSR set to: 0
 17931  001D9E  0100               	movlb	0	; () banked
 17932  001DA0  4B8E               	infsnz	printf@f& (0+255),f,b
 17933  001DA2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17937  001DA4  C08E  FFF6         	movff	printf@f,tblptrl
 17938  001DA8  C08F  FFF7         	movff	printf@f+1,tblptrh
 17939  001DAC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17940  001DAC  6AF8               	clrf	tblptru,c
 17941  001DAE                     	endif
 17942  001DAE                     	if	0	;tblptru may be non-zero
 17943  001DAE                     	endif
 17944  001DAE  0008               	tblrd		*
 17945  001DB0  50F5               	movf	tablat,w,c
 17946  001DB2  EC3B  F02E         	call	_isdigit
 17947  001DB6  A0D8               	btfss	status,0,c
 17948  001DB8  D090               	goto	l6876
 17949  001DBA  D7C2               	goto	l6834
 17950  001DBC                     l6842:
 17951                           
 17952                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17953  001DBC  C0A1  FFD9         	movff	printf@ap,fsr2l
 17954  001DC0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17955  001DC4  CFDE F09F          	movff	postinc2,printf@cp
 17956  001DC8  CFDD F0A0          	movff	postdec2,printf@cp+1
 17957  001DCC  0E02               	movlw	2
 17958  001DCE  0100               	movlb	0	; () banked
 17959  001DD0  27A1               	addwf	printf@ap& (0+255),f,b
 17960  001DD2  0E00               	movlw	0
 17961  001DD4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;doprnt.c: 740: if(!cp)
 17965  001DD6  0100               	movlb	0	; () banked
 17966  001DD8  519F               	movf	printf@cp& (0+255),w,b
 17967  001DDA  0100               	movlb	0	; () banked
 17968  001DDC  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17969  001DDE  A4D8               	btfss	status,2,c
 17970  001DE0  D006               	goto	l6850
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;doprnt.c: 741: cp = "(null)";
 17974  001DE2  0EB5               	movlw	low STR_128
 17975  001DE4  0100               	movlb	0	; () banked
 17976  001DE6  6F9F               	movwf	printf@cp& (0+255),b
 17977  001DE8  0EFF               	movlw	high STR_128
 17978  001DEA  0100               	movlb	0	; () banked
 17979  001DEC  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17980  001DEE                     l6850:
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;doprnt.c: 745: len = 0;
 17984  001DEE  0E00               	movlw	0
 17985  001DF0  0100               	movlb	0	; () banked
 17986  001DF2  6FA4               	movwf	(printf@len+1)& (0+255),b
 17987  001DF4  0E00               	movlw	0
 17988  001DF6  6FA3               	movwf	printf@len& (0+255),b
 17989                           
 17990                           ;doprnt.c: 746: while(cp[len])
 17991  001DF8  D003               	goto	l6854
 17992  001DFA                     l6852:
 17993                           
 17994                           ;doprnt.c: 747: len++;
 17995  001DFA  0100               	movlb	0	; () banked
 17996  001DFC  4BA3               	infsnz	printf@len& (0+255),f,b
 17997  001DFE  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17998  001E00                     l6854:
 17999                           
 18000                           ; BSR set to: 0
 18001  001E00  0100               	movlb	0	; () banked
 18002  001E02  51A3               	movf	printf@len& (0+255),w,b
 18003  001E04  0100               	movlb	0	; () banked
 18004  001E06  259F               	addwf	printf@cp& (0+255),w,b
 18005  001E08  0100               	movlb	0	; () banked
 18006  001E0A  6F9A               	movwf	??_printf& (0+255),b
 18007  001E0C  0100               	movlb	0	; () banked
 18008  001E0E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18009  001E10  0100               	movlb	0	; () banked
 18010  001E12  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 18011  001E14  0100               	movlb	0	; () banked
 18012  001E16  6F9B               	movwf	(??_printf+1)& (0+255),b
 18013  001E18  C09A  FFF6         	movff	??_printf,tblptrl
 18014  001E1C  C09B  FFF7         	movff	??_printf+1,tblptrh
 18015  001E20  0E00               	movlw	low (__mediumconst shr (0+16))
 18016  001E22  6EF8               	movwf	tblptru,c
 18017  001E24  0E0F               	movlw	(high __ramtop+-1)
 18018  001E26  64F7               	cpfsgt	tblptrh,c
 18019  001E28  D003               	bra	u5507
 18020  001E2A  0008               	tblrd		*
 18021  001E2C  50F5               	movf	tablat,w,c
 18022  001E2E  D005               	bra	u5500
 18023  001E30                     u5507:
 18024  001E30  CFF6 FFE9          	movff	tblptrl,fsr0l
 18025  001E34  CFF7 FFEA          	movff	tblptrh,fsr0h
 18026  001E38  50EF               	movf	indf0,w,c
 18027  001E3A                     u5500:
 18028  001E3A  0900               	iorlw	0
 18029  001E3C  A4D8               	btfss	status,2,c
 18030  001E3E  D7DD               	goto	l6852
 18031                           
 18032                           ;doprnt.c: 757: if(width > len)
 18033  001E40  0100               	movlb	0	; () banked
 18034  001E42  51A9               	movf	printf@width& (0+255),w,b
 18035  001E44  0100               	movlb	0	; () banked
 18036  001E46  5DA3               	subwf	printf@len& (0+255),w,b
 18037  001E48  0100               	movlb	0	; () banked
 18038  001E4A  51AA               	movf	(printf@width+1)& (0+255),w,b
 18039  001E4C  0100               	movlb	0	; () banked
 18040  001E4E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 18041  001E50  B0D8               	btfsc	status,0,c
 18042  001E52  D009               	goto	l6860
 18043                           
 18044                           ; BSR set to: 0
 18045                           ;doprnt.c: 758: width -= len;
 18046  001E54  0100               	movlb	0	; () banked
 18047  001E56  51A3               	movf	printf@len& (0+255),w,b
 18048  001E58  0100               	movlb	0	; () banked
 18049  001E5A  5FA9               	subwf	printf@width& (0+255),f,b
 18050  001E5C  0100               	movlb	0	; () banked
 18051  001E5E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18052  001E60  0100               	movlb	0	; () banked
 18053  001E62  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18054  001E64  D009               	goto	l6864
 18055  001E66                     l6860:
 18056                           
 18057                           ; BSR set to: 0
 18058                           ;doprnt.c: 759: else
 18059                           ;doprnt.c: 760: width = 0;
 18060  001E66  0E00               	movlw	0
 18061  001E68  0100               	movlb	0	; () banked
 18062  001E6A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18063  001E6C  0E00               	movlw	0
 18064  001E6E  6FA9               	movwf	printf@width& (0+255),b
 18065                           
 18066                           ; BSR set to: 0
 18067                           ;doprnt.c: 764: while(width--)
 18068  001E70  D003               	goto	l6864
 18069  001E72                     l6862:
 18070                           
 18071                           ; BSR set to: 0
 18072                           ;doprnt.c: 765: (putch(' ') );
 18073  001E72  0E20               	movlw	32
 18074  001E74  EC32  F02F         	call	_putch
 18075  001E78                     l6864:
 18076  001E78  0100               	movlb	0	; () banked
 18077  001E7A  07A9               	decf	printf@width& (0+255),f,b
 18078  001E7C  A0D8               	btfss	status,0,c
 18079  001E7E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18080  001E80  0100               	movlb	0	; () banked
 18081  001E82  29A9               	incf	printf@width& (0+255),w,b
 18082  001E84  E1F6               	bnz	l6862
 18083  001E86  0100               	movlb	0	; () banked
 18084  001E88  29AA               	incf	(printf@width+1)& (0+255),w,b
 18085  001E8A  B4D8               	btfsc	status,2,c
 18086  001E8C  D017               	goto	l6870
 18087  001E8E  D7F1               	goto	l6862
 18088  001E90                     l6866:
 18089                           
 18090                           ; BSR set to: 0
 18091                           ;doprnt.c: 768: (putch(*cp++) );
 18092  001E90  C09F  FFF6         	movff	printf@cp,tblptrl
 18093  001E94  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 18094  001E98  0E00               	movlw	low (__mediumconst shr (0+16))
 18095  001E9A  6EF8               	movwf	tblptru,c
 18096  001E9C  0E0F               	movlw	(high __ramtop+-1)
 18097  001E9E  64F7               	cpfsgt	tblptrh,c
 18098  001EA0  D003               	bra	u5547
 18099  001EA2  0008               	tblrd		*
 18100  001EA4  50F5               	movf	tablat,w,c
 18101  001EA6  D005               	bra	u5540
 18102  001EA8                     u5547:
 18103  001EA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 18104  001EAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 18105  001EB0  50EF               	movf	indf0,w,c
 18106  001EB2                     u5540:
 18107  001EB2  EC32  F02F         	call	_putch
 18108  001EB6  0100               	movlb	0	; () banked
 18109  001EB8  4B9F               	infsnz	printf@cp& (0+255),f,b
 18110  001EBA  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 18111  001EBC                     l6870:
 18112                           
 18113                           ; BSR set to: 0
 18114  001EBC  0100               	movlb	0	; () banked
 18115  001EBE  07A3               	decf	printf@len& (0+255),f,b
 18116  001EC0  A0D8               	btfss	status,0,c
 18117  001EC2  07A4               	decf	(printf@len+1)& (0+255),f,b
 18118  001EC4  0100               	movlb	0	; () banked
 18119  001EC6  29A3               	incf	printf@len& (0+255),w,b
 18120  001EC8  E1E3               	bnz	l6866
 18121  001ECA  0100               	movlb	0	; () banked
 18122  001ECC  29A4               	incf	(printf@len+1)& (0+255),w,b
 18123  001ECE  B4D8               	btfsc	status,2,c
 18124  001ED0  D10A               	goto	l6948
 18125  001ED2  D7DE               	goto	l6866
 18126  001ED4                     l6872:
 18127                           
 18128                           ; BSR set to: 0
 18129                           ;doprnt.c: 818: flag |= 0x40;
 18130  001ED4  0100               	movlb	0	; () banked
 18131  001ED6  8DA7               	bsf	printf@flag& (0+255),6,b
 18132                           
 18133                           ; BSR set to: 0
 18134                           ;doprnt.c: 822: }
 18135                           
 18136                           ;doprnt.c: 819: break;
 18137  001ED8  D01D               	goto	l1536
 18138  001EDA                     l6876:
 18139  001EDA  C08E  FFF6         	movff	printf@f,tblptrl
 18140  001EDE  C08F  FFF7         	movff	printf@f+1,tblptrh
 18141  001EE2  0100               	movlb	0	; () banked
 18142  001EE4  4B8E               	infsnz	printf@f& (0+255),f,b
 18143  001EE6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18144  001EE8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18145  001EE8  6AF8               	clrf	tblptru,c
 18146  001EEA                     	endif
 18147  001EEA                     	if	0	;tblptru may be non-zero
 18148  001EEA                     	endif
 18149  001EEA  0008               	tblrd		*
 18150  001EEC  CFF5 F0A8          	movff	tablat,printf@c
 18151  001EF0  0100               	movlb	0	; () banked
 18152  001EF2  51A8               	movf	printf@c& (0+255),w,b
 18153                           
 18154                           ; Switch size 1, requested type "space"
 18155                           ; Number of cases is 5, Range of values is 0 to 117
 18156                           ; switch strategies available:
 18157                           ; Name         Instructions Cycles
 18158                           ; simple_byte           16     9 (average)
 18159                           ;	Chosen strategy is simple_byte
 18160  001EF4  0A00               	xorlw	0	; case 0
 18161  001EF6  B4D8               	btfsc	status,2,c
 18162  001EF8  0012               	return	
 18163  001EFA  0A64               	xorlw	100	; case 100
 18164  001EFC  B4D8               	btfsc	status,2,c
 18165  001EFE  D00A               	goto	l1536
 18166  001F00  0A0D               	xorlw	13	; case 105
 18167  001F02  B4D8               	btfsc	status,2,c
 18168  001F04  D007               	goto	l1536
 18169  001F06  0A1A               	xorlw	26	; case 115
 18170  001F08  B4D8               	btfsc	status,2,c
 18171  001F0A  D758               	goto	l6842
 18172  001F0C  0A06               	xorlw	6	; case 117
 18173  001F0E  B4D8               	btfsc	status,2,c
 18174  001F10  D7E1               	goto	l6872
 18175  001F12  D0E9               	goto	l6948
 18176  001F14                     l1536:
 18177                           
 18178                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18179  001F14  0100               	movlb	0	; () banked
 18180  001F16  BDA7               	btfsc	printf@flag& (0+255),6,b
 18181  001F18  D019               	goto	l6888
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;doprnt.c: 1253: {
 18185                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18186  001F1A  C0A1  FFD9         	movff	printf@ap,fsr2l
 18187  001F1E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18188  001F22  CFDE F0A5          	movff	postinc2,printf@val
 18189  001F26  CFDD F0A6          	movff	postdec2,printf@val+1
 18190                           
 18191                           ; BSR set to: 0
 18192  001F2A  0E02               	movlw	2
 18193  001F2C  0100               	movlb	0	; () banked
 18194  001F2E  27A1               	addwf	printf@ap& (0+255),f,b
 18195  001F30  0E00               	movlw	0
 18196  001F32  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18197                           
 18198                           ; BSR set to: 0
 18199                           ;doprnt.c: 1261: if((int)val < 0) {
 18200  001F34  0100               	movlb	0	; () banked
 18201  001F36  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 18202  001F38  D016               	goto	l6892
 18203                           
 18204                           ; BSR set to: 0
 18205                           ;doprnt.c: 1262: flag |= 0x03;
 18206  001F3A  0E03               	movlw	3
 18207  001F3C  0100               	movlb	0	; () banked
 18208  001F3E  13A7               	iorwf	printf@flag& (0+255),f,b
 18209                           
 18210                           ; BSR set to: 0
 18211                           ;doprnt.c: 1263: val = -val;
 18212  001F40  0100               	movlb	0	; () banked
 18213  001F42  6DA5               	negf	printf@val& (0+255),b
 18214  001F44  1FA6               	comf	(printf@val+1)& (0+255),f,b
 18215  001F46  B0D8               	btfsc	status,0,c
 18216  001F48  2BA6               	incf	(printf@val+1)& (0+255),f,b
 18217                           
 18218                           ; BSR set to: 0
 18219                           ;doprnt.c: 1264: }
 18220                           ;doprnt.c: 1266: }
 18221  001F4A  D00D               	goto	l6892
 18222  001F4C                     l6888:
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;doprnt.c: 1268: else
 18226                           ;doprnt.c: 1273: {
 18227                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18228  001F4C  C0A1  FFD9         	movff	printf@ap,fsr2l
 18229  001F50  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18230  001F54  CFDE F0A5          	movff	postinc2,printf@val
 18231  001F58  CFDD F0A6          	movff	postdec2,printf@val+1
 18232                           
 18233                           ; BSR set to: 0
 18234  001F5C  0E02               	movlw	2
 18235  001F5E  0100               	movlb	0	; () banked
 18236  001F60  27A1               	addwf	printf@ap& (0+255),f,b
 18237  001F62  0E00               	movlw	0
 18238  001F64  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18239  001F66                     l6892:
 18240                           
 18241                           ; BSR set to: 0
 18242                           ;doprnt.c: 1287: }
 18243                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18244  001F66  0E01               	movlw	1
 18245  001F68  0100               	movlb	0	; () banked
 18246  001F6A  6FA8               	movwf	printf@c& (0+255),b
 18247  001F6C                     l6894:
 18248                           
 18249                           ; BSR set to: 0
 18250  001F6C  0E05               	movlw	5
 18251  001F6E  0100               	movlb	0	; () banked
 18252  001F70  19A8               	xorwf	printf@c& (0+255),w,b
 18253  001F72  B4D8               	btfsc	status,2,c
 18254  001F74  D019               	goto	l6906
 18255                           
 18256                           ; BSR set to: 0
 18257                           ;doprnt.c: 1306: if(val < dpowers[c])
 18258                           
 18259                           ; BSR set to: 0
 18260                           
 18261                           ; BSR set to: 0
 18262  001F76  0100               	movlb	0	; () banked
 18263  001F78  51A8               	movf	printf@c& (0+255),w,b
 18264  001F7A  0D02               	mullw	2
 18265  001F7C  0EC0               	movlw	low _dpowers
 18266  001F7E  24F3               	addwf	prodl,w,c
 18267  001F80  6EF6               	movwf	tblptrl,c
 18268  001F82  0EFA               	movlw	high _dpowers
 18269  001F84  20F4               	addwfc	prodh,w,c
 18270  001F86  6EF7               	movwf	tblptrh,c
 18271  001F88                     	if	1	;There are 3 active tblptr bytes
 18272  001F88  6AF8               	clrf	tblptru,c
 18273  001F8A  0E00               	movlw	low (__mediumconst shr (0+16))
 18274  001F8C  22F8               	addwfc	tblptru,f,c
 18275  001F8E                     	endif
 18276  001F8E  0009               	tblrd		*+
 18277  001F90  50F5               	movf	tablat,w,c
 18278  001F92  0100               	movlb	0	; () banked
 18279  001F94  5DA5               	subwf	printf@val& (0+255),w,b
 18280  001F96  0009               	tblrd		*+
 18281  001F98  50F5               	movf	tablat,w,c
 18282  001F9A  0100               	movlb	0	; () banked
 18283  001F9C  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18284  001F9E  A0D8               	btfss	status,0,c
 18285  001FA0  D003               	goto	l6906
 18286                           
 18287                           ; BSR set to: 0
 18288                           
 18289                           ; BSR set to: 0
 18290                           
 18291                           ; BSR set to: 0
 18292                           ;doprnt.c: 1307: break;
 18293  001FA2  0100               	movlb	0	; () banked
 18294  001FA4  2BA8               	incf	printf@c& (0+255),f,b
 18295  001FA6  D7E2               	goto	l6894
 18296  001FA8                     l6906:
 18297                           
 18298                           ; BSR set to: 0
 18299                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18300  001FA8  0100               	movlb	0	; () banked
 18301  001FAA  51A9               	movf	printf@width& (0+255),w,b
 18302  001FAC  0100               	movlb	0	; () banked
 18303  001FAE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18304  001FB0  B4D8               	btfsc	status,2,c
 18305  001FB2  D00B               	goto	l6912
 18306                           
 18307                           ; BSR set to: 0
 18308  001FB4  C0A7  F09A         	movff	printf@flag,??_printf
 18309  001FB8  0E03               	movlw	3
 18310  001FBA  0100               	movlb	0	; () banked
 18311  001FBC  179A               	andwf	??_printf& (0+255),f,b
 18312  001FBE  B4D8               	btfsc	status,2,c
 18313  001FC0  D004               	goto	l6912
 18314                           
 18315                           ; BSR set to: 0
 18316                           ;doprnt.c: 1346: width--;
 18317  001FC2  0100               	movlb	0	; () banked
 18318  001FC4  07A9               	decf	printf@width& (0+255),f,b
 18319  001FC6  A0D8               	btfss	status,0,c
 18320  001FC8  07AA               	decf	(printf@width+1)& (0+255),f,b
 18321  001FCA                     l6912:
 18322                           
 18323                           ; BSR set to: 0
 18324                           ;doprnt.c: 1381: if(width > c)
 18325  001FCA  0E80               	movlw	128
 18326  001FCC  0100               	movlb	0	; () banked
 18327  001FCE  BFA8               	btfsc	printf@c& (0+255),7,b
 18328  001FD0  0E7F               	movlw	127
 18329  001FD2  0100               	movlb	0	; () banked
 18330  001FD4  6F9A               	movwf	??_printf& (0+255),b
 18331  001FD6  0100               	movlb	0	; () banked
 18332  001FD8  51A9               	movf	printf@width& (0+255),w,b
 18333  001FDA  0100               	movlb	0	; () banked
 18334  001FDC  5DA8               	subwf	printf@c& (0+255),w,b
 18335  001FDE  0100               	movlb	0	; () banked
 18336  001FE0  51AA               	movf	(printf@width+1)& (0+255),w,b
 18337  001FE2  0A80               	xorlw	128
 18338  001FE4  0100               	movlb	0	; () banked
 18339  001FE6  599A               	subwfb	??_printf& (0+255),w,b
 18340  001FE8  B0D8               	btfsc	status,0,c
 18341  001FEA  D00B               	goto	l6916
 18342                           
 18343                           ; BSR set to: 0
 18344                           ;doprnt.c: 1382: width -= c;
 18345  001FEC  0100               	movlb	0	; () banked
 18346  001FEE  51A8               	movf	printf@c& (0+255),w,b
 18347  001FF0  0100               	movlb	0	; () banked
 18348  001FF2  5FA9               	subwf	printf@width& (0+255),f,b
 18349  001FF4  0E00               	movlw	0
 18350  001FF6  0100               	movlb	0	; () banked
 18351  001FF8  BFA8               	btfsc	printf@c& (0+255),7,b
 18352  001FFA  0EFF               	movlw	255
 18353  001FFC  0100               	movlb	0	; () banked
 18354  001FFE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18355  002000  D005               	goto	l6918
 18356  002002                     l6916:
 18357                           
 18358                           ; BSR set to: 0
 18359                           ;doprnt.c: 1383: else
 18360                           ;doprnt.c: 1384: width = 0;
 18361  002002  0E00               	movlw	0
 18362  002004  0100               	movlb	0	; () banked
 18363  002006  6FAA               	movwf	(printf@width+1)& (0+255),b
 18364  002008  0E00               	movlw	0
 18365  00200A  6FA9               	movwf	printf@width& (0+255),b
 18366  00200C                     l6918:
 18367                           
 18368                           ; BSR set to: 0
 18369                           ;doprnt.c: 1387: if(flag & 0x04) {
 18370  00200C  0100               	movlb	0	; () banked
 18371  00200E  A5A7               	btfss	printf@flag& (0+255),2,b
 18372  002010  D018               	goto	l6930
 18373                           
 18374                           ; BSR set to: 0
 18375                           ;doprnt.c: 1392: if(flag & 0x03)
 18376  002012  C0A7  F09A         	movff	printf@flag,??_printf
 18377  002016  0E03               	movlw	3
 18378  002018  0100               	movlb	0	; () banked
 18379  00201A  179A               	andwf	??_printf& (0+255),f,b
 18380  00201C  B4D8               	btfsc	status,2,c
 18381  00201E  D003               	goto	l6924
 18382                           
 18383                           ; BSR set to: 0
 18384                           ;doprnt.c: 1393: (putch('-') );
 18385  002020  0E2D               	movlw	45
 18386  002022  EC32  F02F         	call	_putch
 18387  002026                     l6924:
 18388                           
 18389                           ;doprnt.c: 1415: if(width)
 18390  002026  0100               	movlb	0	; () banked
 18391  002028  51A9               	movf	printf@width& (0+255),w,b
 18392  00202A  0100               	movlb	0	; () banked
 18393  00202C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18394  00202E  B4D8               	btfsc	status,2,c
 18395  002030  D025               	goto	l6940
 18396                           
 18397                           ; BSR set to: 0
 18398                           ;doprnt.c: 1417: (putch('0') );
 18399                           
 18400                           ; BSR set to: 0
 18401                           
 18402                           ;doprnt.c: 1416: do
 18403  002032  0E30               	movlw	48
 18404  002034  EC32  F02F         	call	_putch
 18405                           
 18406                           ;doprnt.c: 1418: while(--width);
 18407  002038  0100               	movlb	0	; () banked
 18408  00203A  07A9               	decf	printf@width& (0+255),f,b
 18409  00203C  A0D8               	btfss	status,0,c
 18410  00203E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18411  002040  D7F2               	goto	l6924
 18412  002042                     l6930:
 18413                           
 18414                           ; BSR set to: 0
 18415                           ;doprnt.c: 1422: {
 18416                           ;doprnt.c: 1424: if(width
 18417                           ;doprnt.c: 1428: )
 18418  002042  0100               	movlb	0	; () banked
 18419  002044  51A9               	movf	printf@width& (0+255),w,b
 18420  002046  0100               	movlb	0	; () banked
 18421  002048  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18422  00204A  B4D8               	btfsc	status,2,c
 18423  00204C  D00D               	goto	l6936
 18424  00204E                     l6932:
 18425                           
 18426                           ; BSR set to: 0
 18427                           ;doprnt.c: 1430: (putch(' ') );
 18428  00204E  0E20               	movlw	32
 18429  002050  EC32  F02F         	call	_putch
 18430                           
 18431                           ;doprnt.c: 1431: while(--width);
 18432  002054  0100               	movlb	0	; () banked
 18433  002056  07A9               	decf	printf@width& (0+255),f,b
 18434  002058  A0D8               	btfss	status,0,c
 18435  00205A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18436  00205C  0100               	movlb	0	; () banked
 18437  00205E  51A9               	movf	printf@width& (0+255),w,b
 18438  002060  0100               	movlb	0	; () banked
 18439  002062  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18440  002064  A4D8               	btfss	status,2,c
 18441  002066  D7F3               	goto	l6932
 18442  002068                     l6936:
 18443                           
 18444                           ; BSR set to: 0
 18445                           ;doprnt.c: 1438: if(flag & 0x03)
 18446  002068  C0A7  F09A         	movff	printf@flag,??_printf
 18447  00206C  0E03               	movlw	3
 18448  00206E  0100               	movlb	0	; () banked
 18449  002070  179A               	andwf	??_printf& (0+255),f,b
 18450  002072  B4D8               	btfsc	status,2,c
 18451  002074  D003               	goto	l6940
 18452                           
 18453                           ; BSR set to: 0
 18454                           ;doprnt.c: 1439: (putch('-') );
 18455  002076  0E2D               	movlw	45
 18456  002078  EC32  F02F         	call	_putch
 18457  00207C                     l6940:
 18458                           
 18459                           ;doprnt.c: 1469: }
 18460                           ;doprnt.c: 1472: prec = c;
 18461  00207C  C0A8  F09E         	movff	printf@c,printf@prec
 18462                           
 18463                           ;doprnt.c: 1474: while(prec--) {
 18464  002080  D02C               	goto	l6946
 18465  002082                     l6942:
 18466                           
 18467                           ;doprnt.c: 1478: {
 18468                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18469  002082  0100               	movlb	0	; () banked
 18470  002084  519E               	movf	printf@prec& (0+255),w,b
 18471  002086  0D02               	mullw	2
 18472  002088  0EC0               	movlw	low _dpowers
 18473  00208A  24F3               	addwf	prodl,w,c
 18474  00208C  6EF6               	movwf	tblptrl,c
 18475  00208E  0EFA               	movlw	high _dpowers
 18476  002090  20F4               	addwfc	prodh,w,c
 18477  002092  6EF7               	movwf	tblptrh,c
 18478  002094                     	if	1	;There are 3 active tblptr bytes
 18479  002094  6AF8               	clrf	tblptru,c
 18480  002096  0E00               	movlw	low (__mediumconst shr (0+16))
 18481  002098  22F8               	addwfc	tblptru,f,c
 18482  00209A                     	endif
 18483  00209A  0009               	tblrd		*+
 18484  00209C  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18485  0020A0  000A               	tblrd		*-
 18486  0020A2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18487  0020A6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18488  0020AA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18489  0020AE  EC2D  F029         	call	___lwdiv	;wreg free
 18490  0020B2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18491  0020B6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18492  0020BA  0E00               	movlw	0
 18493  0020BC  0100               	movlb	0	; () banked
 18494  0020BE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18495  0020C0  0E0A               	movlw	10
 18496  0020C2  6F89               	movwf	___lwmod@divisor& (0+255),b
 18497  0020C4  EC76  F02A         	call	___lwmod	;wreg free
 18498  0020C8  0100               	movlb	0	; () banked
 18499  0020CA  5187               	movf	?___lwmod& (0+255),w,b
 18500  0020CC  0F30               	addlw	48
 18501  0020CE  0100               	movlb	0	; () banked
 18502  0020D0  6FA8               	movwf	printf@c& (0+255),b
 18503                           
 18504                           ; BSR set to: 0
 18505                           ;doprnt.c: 1523: }
 18506                           ;doprnt.c: 1524: (putch(c) );
 18507  0020D2  0100               	movlb	0	; () banked
 18508  0020D4  51A8               	movf	printf@c& (0+255),w,b
 18509  0020D6  EC32  F02F         	call	_putch
 18510  0020DA                     l6946:
 18511  0020DA  0100               	movlb	0	; () banked
 18512  0020DC  079E               	decf	printf@prec& (0+255),f,b
 18513  0020DE  0100               	movlb	0	; () banked
 18514  0020E0  299E               	incf	printf@prec& (0+255),w,b
 18515  0020E2  A4D8               	btfss	status,2,c
 18516  0020E4  D7CE               	goto	l6942
 18517  0020E6                     l6948:
 18518  0020E6  C08E  FFF6         	movff	printf@f,tblptrl
 18519  0020EA  C08F  FFF7         	movff	printf@f+1,tblptrh
 18520  0020EE  0100               	movlb	0	; () banked
 18521  0020F0  4B8E               	infsnz	printf@f& (0+255),f,b
 18522  0020F2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18523  0020F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18524  0020F4  6AF8               	clrf	tblptru,c
 18525  0020F6                     	endif
 18526  0020F6                     	if	0	;tblptru may be non-zero
 18527  0020F6                     	endif
 18528  0020F6  0008               	tblrd		*
 18529  0020F8  CFF5 F0A8          	movff	tablat,printf@c
 18530  0020FC  0100               	movlb	0	; () banked
 18531  0020FE  51A8               	movf	printf@c& (0+255),w,b
 18532  002100  B4D8               	btfsc	status,2,c
 18533  002102  0012               	return	
 18534  002104  D5EB               	goto	l6818
 18535  002106                     __end_of_printf:
 18536                           	opt stack 0
 18537                           tblptru	equ	0xFF8
 18538                           tblptrh	equ	0xFF7
 18539                           tblptrl	equ	0xFF6
 18540                           tablat	equ	0xFF5
 18541                           prodh	equ	0xFF4
 18542                           prodl	equ	0xFF3
 18543                           intcon	equ	0xFF2
 18544                           intcon2	equ	0xFF1
 18545                           intcon3	equ	0xFF0
 18546                           indf0	equ	0xFEF
 18547                           postinc0	equ	0xFEE
 18548                           fsr0h	equ	0xFEA
 18549                           fsr0l	equ	0xFE9
 18550                           wreg	equ	0xFE8
 18551                           postdec1	equ	0xFE5
 18552                           fsr1l	equ	0xFE1
 18553                           indf2	equ	0xFDF
 18554                           postinc2	equ	0xFDE
 18555                           postdec2	equ	0xFDD
 18556                           fsr2h	equ	0xFDA
 18557                           fsr2l	equ	0xFD9
 18558                           status	equ	0xFD8
 18559                           
 18560 ;; *************** function _putch *****************
 18561 ;; Defined at:
 18562 ;;		line 20 in file "lcd.c"
 18563 ;; Parameters:    Size  Location     Type
 18564 ;;  data            1    wreg     unsigned char 
 18565 ;; Auto vars:     Size  Location     Type
 18566 ;;  data            1    2[BANK0 ] unsigned char 
 18567 ;; Return value:  Size  Location     Type
 18568 ;;                  1    wreg      void 
 18569 ;; Registers used:
 18570 ;;		wreg, status,2, status,0, cstack
 18571 ;; Tracked objects:
 18572 ;;		On entry : 0/0
 18573 ;;		On exit  : 0/0
 18574 ;;		Unchanged: 0/0
 18575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18579 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18580 ;;Total ram usage:        1 bytes
 18581 ;; Hardware stack levels used:    1
 18582 ;; Hardware stack levels required when called:    8
 18583 ;; This function calls:
 18584 ;;		_lcdNibble
 18585 ;; This function is called by:
 18586 ;;		_printf
 18587 ;; This function uses a non-reentrant model
 18588 ;;
 18589                           
 18590                           	psect	text57
 18591  005E64                     __ptext57:
 18592                           	opt stack 0
 18593  005E64                     _putch:
 18594                           	opt stack 18
 18595                           
 18596                           ;incstack = 0
 18597                           ;putch@data stored from wreg
 18598  005E64  0100               	movlb	0	; () banked
 18599  005E66  6F82               	movwf	putch@data& (0+255),b
 18600                           
 18601                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18602  005E68  848C               	bsf	3980,2,c	;volatile
 18603                           
 18604                           ;lcd.c: 22: lcdNibble(data);
 18605  005E6A  0100               	movlb	0	; () banked
 18606  005E6C  5182               	movf	putch@data& (0+255),w,b
 18607  005E6E  ECDA  F029         	call	_lcdNibble
 18608  005E72  0012               	return		;funcret
 18609  005E74                     __end_of_putch:
 18610                           	opt stack 0
 18611                           tblptru	equ	0xFF8
 18612                           tblptrh	equ	0xFF7
 18613                           tblptrl	equ	0xFF6
 18614                           tablat	equ	0xFF5
 18615                           prodh	equ	0xFF4
 18616                           prodl	equ	0xFF3
 18617                           intcon	equ	0xFF2
 18618                           intcon2	equ	0xFF1
 18619                           intcon3	equ	0xFF0
 18620                           indf0	equ	0xFEF
 18621                           postinc0	equ	0xFEE
 18622                           fsr0h	equ	0xFEA
 18623                           fsr0l	equ	0xFE9
 18624                           wreg	equ	0xFE8
 18625                           postdec1	equ	0xFE5
 18626                           fsr1l	equ	0xFE1
 18627                           indf2	equ	0xFDF
 18628                           postinc2	equ	0xFDE
 18629                           postdec2	equ	0xFDD
 18630                           fsr2h	equ	0xFDA
 18631                           fsr2l	equ	0xFD9
 18632                           status	equ	0xFD8
 18633                           
 18634 ;; *************** function _isdigit *****************
 18635 ;; Defined at:
 18636 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18637 ;; Parameters:    Size  Location     Type
 18638 ;;  c               1    wreg     unsigned char 
 18639 ;; Auto vars:     Size  Location     Type
 18640 ;;  c               1    2[BANK0 ] unsigned char 
 18641 ;; Return value:  Size  Location     Type
 18642 ;;		None               void
 18643 ;; Registers used:
 18644 ;;		wreg, status,2, status,0
 18645 ;; Tracked objects:
 18646 ;;		On entry : 0/0
 18647 ;;		On exit  : 0/0
 18648 ;;		Unchanged: 0/0
 18649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18651 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18653 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18654 ;;Total ram usage:        3 bytes
 18655 ;; Hardware stack levels used:    1
 18656 ;; Hardware stack levels required when called:    7
 18657 ;; This function calls:
 18658 ;;		Nothing
 18659 ;; This function is called by:
 18660 ;;		_printf
 18661 ;; This function uses a non-reentrant model
 18662 ;;
 18663                           
 18664                           	psect	text58
 18665  005C76                     __ptext58:
 18666                           	opt stack 0
 18667  005C76                     _isdigit:
 18668                           	opt stack 19
 18669                           
 18670                           ;incstack = 0
 18671                           ;isdigit@c stored from wreg
 18672  005C76  0100               	movlb	0	; () banked
 18673  005C78  6F82               	movwf	isdigit@c& (0+255),b
 18674  005C7A  0E00               	movlw	0
 18675  005C7C  0100               	movlb	0	; () banked
 18676  005C7E  6F81               	movwf	_isdigit$2070& (0+255),b
 18677                           
 18678                           ; BSR set to: 0
 18679  005C80  0E3A               	movlw	58
 18680  005C82  0100               	movlb	0	; () banked
 18681  005C84  6182               	cpfslt	isdigit@c& (0+255),b
 18682  005C86  D007               	goto	l6656
 18683                           
 18684                           ; BSR set to: 0
 18685  005C88  0E2F               	movlw	47
 18686  005C8A  0100               	movlb	0	; () banked
 18687  005C8C  6582               	cpfsgt	isdigit@c& (0+255),b
 18688  005C8E  D003               	goto	l6656
 18689                           
 18690                           ; BSR set to: 0
 18691  005C90  0E01               	movlw	1
 18692  005C92  0100               	movlb	0	; () banked
 18693  005C94  6F81               	movwf	_isdigit$2070& (0+255),b
 18694  005C96                     l6656:
 18695                           
 18696                           ; BSR set to: 0
 18697  005C96  C081  F080         	movff	_isdigit$2070,??_isdigit
 18698  005C9A  0100               	movlb	0	; () banked
 18699  005C9C  3180               	rrcf	??_isdigit& (0+255),w,b
 18700  005C9E  0012               	return	
 18701  005CA0                     __end_of_isdigit:
 18702                           	opt stack 0
 18703                           tblptru	equ	0xFF8
 18704                           tblptrh	equ	0xFF7
 18705                           tblptrl	equ	0xFF6
 18706                           tablat	equ	0xFF5
 18707                           prodh	equ	0xFF4
 18708                           prodl	equ	0xFF3
 18709                           intcon	equ	0xFF2
 18710                           intcon2	equ	0xFF1
 18711                           intcon3	equ	0xFF0
 18712                           indf0	equ	0xFEF
 18713                           postinc0	equ	0xFEE
 18714                           fsr0h	equ	0xFEA
 18715                           fsr0l	equ	0xFE9
 18716                           wreg	equ	0xFE8
 18717                           postdec1	equ	0xFE5
 18718                           fsr1l	equ	0xFE1
 18719                           indf2	equ	0xFDF
 18720                           postinc2	equ	0xFDE
 18721                           postdec2	equ	0xFDD
 18722                           fsr2h	equ	0xFDA
 18723                           fsr2l	equ	0xFD9
 18724                           status	equ	0xFD8
 18725                           
 18726 ;; *************** function ___wmul *****************
 18727 ;; Defined at:
 18728 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18729 ;; Parameters:    Size  Location     Type
 18730 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18731 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18732 ;; Auto vars:     Size  Location     Type
 18733 ;;  product         2    4[BANK0 ] unsigned int 
 18734 ;; Return value:  Size  Location     Type
 18735 ;;                  2    0[BANK0 ] unsigned int 
 18736 ;; Registers used:
 18737 ;;		wreg, status,2, status,0, prodl, prodh
 18738 ;; Tracked objects:
 18739 ;;		On entry : 0/0
 18740 ;;		On exit  : 0/0
 18741 ;;		Unchanged: 0/0
 18742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18743 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18744 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18746 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18747 ;;Total ram usage:        6 bytes
 18748 ;; Hardware stack levels used:    1
 18749 ;; Hardware stack levels required when called:    7
 18750 ;; This function calls:
 18751 ;;		Nothing
 18752 ;; This function is called by:
 18753 ;;		_printf
 18754 ;; This function uses a non-reentrant model
 18755 ;;
 18756                           
 18757                           	psect	text59
 18758  005948                     __ptext59:
 18759                           	opt stack 0
 18760  005948                     ___wmul:
 18761                           	opt stack 19
 18762                           
 18763                           ; BSR set to: 0
 18764                           ;incstack = 0
 18765  005948  0100               	movlb	0	; () banked
 18766  00594A  5180               	movf	___wmul@multiplier& (0+255),w,b
 18767  00594C  0100               	movlb	0	; () banked
 18768  00594E  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18769  005950  CFF3 F084          	movff	prodl,___wmul@product
 18770  005954  CFF4 F085          	movff	prodh,___wmul@product+1
 18771  005958  0100               	movlb	0	; () banked
 18772  00595A  5180               	movf	___wmul@multiplier& (0+255),w,b
 18773  00595C  0100               	movlb	0	; () banked
 18774  00595E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18775  005960  50F3               	movf	prodl,w,c
 18776  005962  0100               	movlb	0	; () banked
 18777  005964  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18778  005966  0100               	movlb	0	; () banked
 18779  005968  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18780  00596A  0100               	movlb	0	; () banked
 18781  00596C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18782  00596E  50F3               	movf	prodl,w,c
 18783  005970  0100               	movlb	0	; () banked
 18784  005972  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18785                           
 18786                           ; BSR set to: 0
 18787  005974  C084  F080         	movff	___wmul@product,?___wmul
 18788  005978  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18789  00597C  0012               	return	
 18790  00597E                     __end_of___wmul:
 18791                           	opt stack 0
 18792                           tblptru	equ	0xFF8
 18793                           tblptrh	equ	0xFF7
 18794                           tblptrl	equ	0xFF6
 18795                           tablat	equ	0xFF5
 18796                           prodh	equ	0xFF4
 18797                           prodl	equ	0xFF3
 18798                           intcon	equ	0xFF2
 18799                           intcon2	equ	0xFF1
 18800                           intcon3	equ	0xFF0
 18801                           indf0	equ	0xFEF
 18802                           postinc0	equ	0xFEE
 18803                           fsr0h	equ	0xFEA
 18804                           fsr0l	equ	0xFE9
 18805                           wreg	equ	0xFE8
 18806                           postdec1	equ	0xFE5
 18807                           fsr1l	equ	0xFE1
 18808                           indf2	equ	0xFDF
 18809                           postinc2	equ	0xFDE
 18810                           postdec2	equ	0xFDD
 18811                           fsr2h	equ	0xFDA
 18812                           fsr2l	equ	0xFD9
 18813                           status	equ	0xFD8
 18814                           
 18815 ;; *************** function ___lwmod *****************
 18816 ;; Defined at:
 18817 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;  dividend        2    7[BANK0 ] unsigned int 
 18820 ;;  divisor         2    9[BANK0 ] unsigned int 
 18821 ;; Auto vars:     Size  Location     Type
 18822 ;;  counter         1   11[BANK0 ] unsigned char 
 18823 ;; Return value:  Size  Location     Type
 18824 ;;                  2    7[BANK0 ] unsigned int 
 18825 ;; Registers used:
 18826 ;;		wreg, status,2, status,0
 18827 ;; Tracked objects:
 18828 ;;		On entry : 0/0
 18829 ;;		On exit  : 0/0
 18830 ;;		Unchanged: 0/0
 18831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18835 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18836 ;;Total ram usage:        5 bytes
 18837 ;; Hardware stack levels used:    1
 18838 ;; Hardware stack levels required when called:    7
 18839 ;; This function calls:
 18840 ;;		Nothing
 18841 ;; This function is called by:
 18842 ;;		_printf
 18843 ;; This function uses a non-reentrant model
 18844 ;;
 18845                           
 18846                           	psect	text60
 18847  0054EC                     __ptext60:
 18848                           	opt stack 0
 18849  0054EC                     ___lwmod:
 18850                           	opt stack 19
 18851                           
 18852                           ; BSR set to: 0
 18853                           ;incstack = 0
 18854  0054EC  0100               	movlb	0	; () banked
 18855  0054EE  5189               	movf	___lwmod@divisor& (0+255),w,b
 18856  0054F0  0100               	movlb	0	; () banked
 18857  0054F2  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18858  0054F4  B4D8               	btfsc	status,2,c
 18859  0054F6  D026               	goto	l1993
 18860                           
 18861                           ; BSR set to: 0
 18862  0054F8  0E01               	movlw	1
 18863  0054FA  0100               	movlb	0	; () banked
 18864  0054FC  6F8B               	movwf	___lwmod@counter& (0+255),b
 18865  0054FE  D006               	goto	l6694
 18866  005500                     l6692:
 18867                           
 18868                           ; BSR set to: 0
 18869  005500  0100               	movlb	0	; () banked
 18870  005502  90D8               	bcf	status,0,c
 18871  005504  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18872  005506  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18873  005508  0100               	movlb	0	; () banked
 18874  00550A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18875  00550C                     l6694:
 18876                           
 18877                           ; BSR set to: 0
 18878  00550C  0100               	movlb	0	; () banked
 18879  00550E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18880  005510  D7F7               	goto	l6692
 18881  005512                     l6696:
 18882                           
 18883                           ; BSR set to: 0
 18884  005512  0100               	movlb	0	; () banked
 18885  005514  5189               	movf	___lwmod@divisor& (0+255),w,b
 18886  005516  0100               	movlb	0	; () banked
 18887  005518  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18888  00551A  0100               	movlb	0	; () banked
 18889  00551C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18890  00551E  0100               	movlb	0	; () banked
 18891  005520  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18892  005522  A0D8               	btfss	status,0,c
 18893  005524  D008               	goto	l6700
 18894                           
 18895                           ; BSR set to: 0
 18896  005526  0100               	movlb	0	; () banked
 18897  005528  5189               	movf	___lwmod@divisor& (0+255),w,b
 18898  00552A  0100               	movlb	0	; () banked
 18899  00552C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18900  00552E  0100               	movlb	0	; () banked
 18901  005530  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18902  005532  0100               	movlb	0	; () banked
 18903  005534  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18904  005536                     l6700:
 18905                           
 18906                           ; BSR set to: 0
 18907  005536  0100               	movlb	0	; () banked
 18908  005538  90D8               	bcf	status,0,c
 18909  00553A  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18910  00553C  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18911                           
 18912                           ; BSR set to: 0
 18913  00553E  0100               	movlb	0	; () banked
 18914  005540  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18915  005542  D7E7               	goto	l6696
 18916  005544                     l1993:
 18917                           
 18918                           ; BSR set to: 0
 18919  005544  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18920  005548  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18921                           
 18922                           ; BSR set to: 0
 18923  00554C  0012               	return		;funcret
 18924  00554E                     __end_of___lwmod:
 18925                           	opt stack 0
 18926                           tblptru	equ	0xFF8
 18927                           tblptrh	equ	0xFF7
 18928                           tblptrl	equ	0xFF6
 18929                           tablat	equ	0xFF5
 18930                           prodh	equ	0xFF4
 18931                           prodl	equ	0xFF3
 18932                           intcon	equ	0xFF2
 18933                           intcon2	equ	0xFF1
 18934                           intcon3	equ	0xFF0
 18935                           indf0	equ	0xFEF
 18936                           postinc0	equ	0xFEE
 18937                           fsr0h	equ	0xFEA
 18938                           fsr0l	equ	0xFE9
 18939                           wreg	equ	0xFE8
 18940                           postdec1	equ	0xFE5
 18941                           fsr1l	equ	0xFE1
 18942                           indf2	equ	0xFDF
 18943                           postinc2	equ	0xFDE
 18944                           postdec2	equ	0xFDD
 18945                           fsr2h	equ	0xFDA
 18946                           fsr2l	equ	0xFD9
 18947                           status	equ	0xFD8
 18948                           
 18949 ;; *************** function ___lwdiv *****************
 18950 ;; Defined at:
 18951 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18952 ;; Parameters:    Size  Location     Type
 18953 ;;  dividend        2    0[BANK0 ] unsigned int 
 18954 ;;  divisor         2    2[BANK0 ] unsigned int 
 18955 ;; Auto vars:     Size  Location     Type
 18956 ;;  quotient        2    4[BANK0 ] unsigned int 
 18957 ;;  counter         1    6[BANK0 ] unsigned char 
 18958 ;; Return value:  Size  Location     Type
 18959 ;;                  2    0[BANK0 ] unsigned int 
 18960 ;; Registers used:
 18961 ;;		wreg, status,2, status,0
 18962 ;; Tracked objects:
 18963 ;;		On entry : 0/0
 18964 ;;		On exit  : 0/0
 18965 ;;		Unchanged: 0/0
 18966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18968 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18970 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18971 ;;Total ram usage:        7 bytes
 18972 ;; Hardware stack levels used:    1
 18973 ;; Hardware stack levels required when called:    7
 18974 ;; This function calls:
 18975 ;;		Nothing
 18976 ;; This function is called by:
 18977 ;;		_printf
 18978 ;; This function uses a non-reentrant model
 18979 ;;
 18980                           
 18981                           	psect	text61
 18982  00525A                     __ptext61:
 18983                           	opt stack 0
 18984  00525A                     ___lwdiv:
 18985                           	opt stack 19
 18986                           
 18987                           ; BSR set to: 0
 18988                           ;incstack = 0
 18989  00525A  0E00               	movlw	0
 18990  00525C  0100               	movlb	0	; () banked
 18991  00525E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18992  005260  0E00               	movlw	0
 18993  005262  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18994                           
 18995                           ; BSR set to: 0
 18996  005264  0100               	movlb	0	; () banked
 18997  005266  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18998  005268  0100               	movlb	0	; () banked
 18999  00526A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19000  00526C  B4D8               	btfsc	status,2,c
 19001  00526E  D02C               	goto	l1983
 19002                           
 19003                           ; BSR set to: 0
 19004  005270  0E01               	movlw	1
 19005  005272  0100               	movlb	0	; () banked
 19006  005274  6F86               	movwf	___lwdiv@counter& (0+255),b
 19007  005276  D006               	goto	l6674
 19008  005278                     l6672:
 19009                           
 19010                           ; BSR set to: 0
 19011  005278  0100               	movlb	0	; () banked
 19012  00527A  90D8               	bcf	status,0,c
 19013  00527C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 19014  00527E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19015  005280  0100               	movlb	0	; () banked
 19016  005282  2B86               	incf	___lwdiv@counter& (0+255),f,b
 19017  005284                     l6674:
 19018                           
 19019                           ; BSR set to: 0
 19020  005284  0100               	movlb	0	; () banked
 19021  005286  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19022  005288  D7F7               	goto	l6672
 19023  00528A                     l6676:
 19024                           
 19025                           ; BSR set to: 0
 19026  00528A  0100               	movlb	0	; () banked
 19027  00528C  90D8               	bcf	status,0,c
 19028  00528E  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 19029  005290  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19030                           
 19031                           ; BSR set to: 0
 19032  005292  0100               	movlb	0	; () banked
 19033  005294  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19034  005296  0100               	movlb	0	; () banked
 19035  005298  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 19036  00529A  0100               	movlb	0	; () banked
 19037  00529C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19038  00529E  0100               	movlb	0	; () banked
 19039  0052A0  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19040  0052A2  A0D8               	btfss	status,0,c
 19041  0052A4  D00A               	goto	l6684
 19042                           
 19043                           ; BSR set to: 0
 19044  0052A6  0100               	movlb	0	; () banked
 19045  0052A8  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19046  0052AA  0100               	movlb	0	; () banked
 19047  0052AC  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 19048  0052AE  0100               	movlb	0	; () banked
 19049  0052B0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19050  0052B2  0100               	movlb	0	; () banked
 19051  0052B4  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19052                           
 19053                           ; BSR set to: 0
 19054  0052B6  0100               	movlb	0	; () banked
 19055  0052B8  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 19056  0052BA                     l6684:
 19057                           
 19058                           ; BSR set to: 0
 19059  0052BA  0100               	movlb	0	; () banked
 19060  0052BC  90D8               	bcf	status,0,c
 19061  0052BE  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19062  0052C0  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 19063                           
 19064                           ; BSR set to: 0
 19065  0052C2  0100               	movlb	0	; () banked
 19066  0052C4  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 19067  0052C6  D7E1               	goto	l6676
 19068  0052C8                     l1983:
 19069                           
 19070                           ; BSR set to: 0
 19071  0052C8  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 19072  0052CC  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19073                           
 19074                           ; BSR set to: 0
 19075  0052D0  0012               	return		;funcret
 19076  0052D2                     __end_of___lwdiv:
 19077                           	opt stack 0
 19078                           tblptru	equ	0xFF8
 19079                           tblptrh	equ	0xFF7
 19080                           tblptrl	equ	0xFF6
 19081                           tablat	equ	0xFF5
 19082                           prodh	equ	0xFF4
 19083                           prodl	equ	0xFF3
 19084                           intcon	equ	0xFF2
 19085                           intcon2	equ	0xFF1
 19086                           intcon3	equ	0xFF0
 19087                           indf0	equ	0xFEF
 19088                           postinc0	equ	0xFEE
 19089                           fsr0h	equ	0xFEA
 19090                           fsr0l	equ	0xFE9
 19091                           wreg	equ	0xFE8
 19092                           postdec1	equ	0xFE5
 19093                           fsr1l	equ	0xFE1
 19094                           indf2	equ	0xFDF
 19095                           postinc2	equ	0xFDE
 19096                           postdec2	equ	0xFDD
 19097                           fsr2h	equ	0xFDA
 19098                           fsr2l	equ	0xFD9
 19099                           status	equ	0xFD8
 19100                           
 19101 ;; *************** function _lcdInst *****************
 19102 ;; Defined at:
 19103 ;;		line 15 in file "lcd.c"
 19104 ;; Parameters:    Size  Location     Type
 19105 ;;  data            1    wreg     unsigned char 
 19106 ;; Auto vars:     Size  Location     Type
 19107 ;;  data            1    2[BANK0 ] unsigned char 
 19108 ;; Return value:  Size  Location     Type
 19109 ;;                  1    wreg      void 
 19110 ;; Registers used:
 19111 ;;		wreg, status,2, status,0, cstack
 19112 ;; Tracked objects:
 19113 ;;		On entry : 0/0
 19114 ;;		On exit  : 0/0
 19115 ;;		Unchanged: 0/0
 19116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19118 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19120 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19121 ;;Total ram usage:        1 bytes
 19122 ;; Hardware stack levels used:    1
 19123 ;; Hardware stack levels required when called:    8
 19124 ;; This function calls:
 19125 ;;		_lcdNibble
 19126 ;; This function is called by:
 19127 ;;		_UI
 19128 ;;		_change_state_to_menu_start
 19129 ;;		_change_state_to_menu_12
 19130 ;;		_change_state_to_menu_22
 19131 ;;		_initLCD
 19132 ;;		_printRTC
 19133 ;;		_Loading
 19134 ;;		_EEPROM_write
 19135 ;;		_Test
 19136 ;;		_algorithmTest
 19137 ;;		_sensorTest
 19138 ;;		_actuatorTest
 19139 ;;		_BothServos
 19140 ;;		_PortTestDC
 19141 ;;		_PlatformTest
 19142 ;;		_SpeedTest
 19143 ;;		_BlockerTest
 19144 ;;		_arm
 19145 ;;		_PortTestPusher
 19146 ;; This function uses a non-reentrant model
 19147 ;;
 19148                           
 19149                           	psect	text62
 19150  005E74                     __ptext62:
 19151                           	opt stack 0
 19152  005E74                     _lcdInst:
 19153                           	opt stack 20
 19154                           
 19155                           ; BSR set to: 0
 19156                           ;incstack = 0
 19157                           ;lcdInst@data stored from wreg
 19158  005E74  0100               	movlb	0	; () banked
 19159  005E76  6F82               	movwf	lcdInst@data& (0+255),b
 19160                           
 19161                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19162  005E78  948C               	bcf	3980,2,c	;volatile
 19163                           
 19164                           ;lcd.c: 17: lcdNibble(data);
 19165  005E7A  0100               	movlb	0	; () banked
 19166  005E7C  5182               	movf	lcdInst@data& (0+255),w,b
 19167  005E7E  ECDA  F029         	call	_lcdNibble
 19168  005E82  0012               	return		;funcret
 19169  005E84                     __end_of_lcdInst:
 19170                           	opt stack 0
 19171                           tblptru	equ	0xFF8
 19172                           tblptrh	equ	0xFF7
 19173                           tblptrl	equ	0xFF6
 19174                           tablat	equ	0xFF5
 19175                           prodh	equ	0xFF4
 19176                           prodl	equ	0xFF3
 19177                           intcon	equ	0xFF2
 19178                           intcon2	equ	0xFF1
 19179                           intcon3	equ	0xFF0
 19180                           indf0	equ	0xFEF
 19181                           postinc0	equ	0xFEE
 19182                           fsr0h	equ	0xFEA
 19183                           fsr0l	equ	0xFE9
 19184                           wreg	equ	0xFE8
 19185                           postdec1	equ	0xFE5
 19186                           fsr1l	equ	0xFE1
 19187                           indf2	equ	0xFDF
 19188                           postinc2	equ	0xFDE
 19189                           postdec2	equ	0xFDD
 19190                           fsr2h	equ	0xFDA
 19191                           fsr2l	equ	0xFD9
 19192                           status	equ	0xFD8
 19193                           
 19194 ;; *************** function _lcdNibble *****************
 19195 ;; Defined at:
 19196 ;;		line 25 in file "lcd.c"
 19197 ;; Parameters:    Size  Location     Type
 19198 ;;  data            1    wreg     unsigned char 
 19199 ;; Auto vars:     Size  Location     Type
 19200 ;;  data            1    1[BANK0 ] unsigned char 
 19201 ;;  temp            1    0[BANK0 ] unsigned char 
 19202 ;; Return value:  Size  Location     Type
 19203 ;;                  1    wreg      void 
 19204 ;; Registers used:
 19205 ;;		wreg, status,2, status,0
 19206 ;; Tracked objects:
 19207 ;;		On entry : 0/0
 19208 ;;		On exit  : 0/0
 19209 ;;		Unchanged: 0/0
 19210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19215 ;;Total ram usage:        2 bytes
 19216 ;; Hardware stack levels used:    1
 19217 ;; Hardware stack levels required when called:    7
 19218 ;; This function calls:
 19219 ;;		Nothing
 19220 ;; This function is called by:
 19221 ;;		_lcdInst
 19222 ;;		_putch
 19223 ;; This function uses a non-reentrant model
 19224 ;;
 19225                           
 19226                           	psect	text63
 19227  0053B4                     __ptext63:
 19228                           	opt stack 0
 19229  0053B4                     _lcdNibble:
 19230                           	opt stack 20
 19231                           
 19232                           ;incstack = 0
 19233                           ;lcdNibble@data stored from wreg
 19234  0053B4  0100               	movlb	0	; () banked
 19235  0053B6  6F81               	movwf	lcdNibble@data& (0+255),b
 19236                           
 19237                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 19238  0053B8  9EF2               	bcf	intcon,7,c	;volatile
 19239                           
 19240                           ;lcd.c: 28: char temp = data & 0xF0;
 19241  0053BA  0100               	movlb	0	; () banked
 19242  0053BC  5181               	movf	lcdNibble@data& (0+255),w,b
 19243  0053BE  0BF0               	andlw	240
 19244  0053C0  0100               	movlb	0	; () banked
 19245  0053C2  6F80               	movwf	lcdNibble@temp& (0+255),b
 19246                           
 19247                           ;lcd.c: 29: LATD = LATD & 0x0F;
 19248  0053C4  508C               	movf	3980,w,c	;volatile
 19249  0053C6  0B0F               	andlw	15
 19250  0053C8  6E8C               	movwf	3980,c	;volatile
 19251                           
 19252                           ;lcd.c: 30: LATD = temp | LATD;
 19253  0053CA  0100               	movlb	0	; () banked
 19254  0053CC  5180               	movf	lcdNibble@temp& (0+255),w,b
 19255  0053CE  108C               	iorwf	3980,w,c	;volatile
 19256  0053D0  6E8C               	movwf	3980,c	;volatile
 19257                           
 19258                           ; BSR set to: 0
 19259                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 19260  0053D2  868C               	bsf	3980,3,c	;volatile
 19261                           
 19262                           ; BSR set to: 0
 19263                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19264  0053D4  0E42               	movlw	66
 19265  0053D6                     u11847:
 19266  0053D6  2EE8               	decfsz	wreg,f,c
 19267  0053D8  D7FE               	bra	u11847
 19268  0053DA  D000               	nop2	
 19269                           
 19270                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19271  0053DC  968C               	bcf	3980,3,c	;volatile
 19272                           
 19273                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19274  0053DE  0E42               	movlw	66
 19275  0053E0                     u11857:
 19276  0053E0  2EE8               	decfsz	wreg,f,c
 19277  0053E2  D7FE               	bra	u11857
 19278  0053E4  D000               	nop2	
 19279                           
 19280                           ;lcd.c: 37: data = data << 4;
 19281  0053E6  0100               	movlb	0	; () banked
 19282  0053E8  3981               	swapf	lcdNibble@data& (0+255),w,b
 19283  0053EA  0BF0               	andlw	240
 19284  0053EC  0100               	movlb	0	; () banked
 19285  0053EE  6F81               	movwf	lcdNibble@data& (0+255),b
 19286                           
 19287                           ;lcd.c: 39: temp = data & 0xF0;
 19288  0053F0  0100               	movlb	0	; () banked
 19289  0053F2  5181               	movf	lcdNibble@data& (0+255),w,b
 19290  0053F4  0BF0               	andlw	240
 19291  0053F6  0100               	movlb	0	; () banked
 19292  0053F8  6F80               	movwf	lcdNibble@temp& (0+255),b
 19293                           
 19294                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19295  0053FA  508C               	movf	3980,w,c	;volatile
 19296  0053FC  0B0F               	andlw	15
 19297  0053FE  6E8C               	movwf	3980,c	;volatile
 19298                           
 19299                           ;lcd.c: 41: LATD = temp | LATD;
 19300  005400  0100               	movlb	0	; () banked
 19301  005402  5180               	movf	lcdNibble@temp& (0+255),w,b
 19302  005404  108C               	iorwf	3980,w,c	;volatile
 19303  005406  6E8C               	movwf	3980,c	;volatile
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19307  005408  868C               	bsf	3980,3,c	;volatile
 19308                           
 19309                           ; BSR set to: 0
 19310                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19311  00540A  0E42               	movlw	66
 19312  00540C                     u11867:
 19313  00540C  2EE8               	decfsz	wreg,f,c
 19314  00540E  D7FE               	bra	u11867
 19315  005410  D000               	nop2	
 19316                           
 19317                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19318  005412  968C               	bcf	3980,3,c	;volatile
 19319                           
 19320                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19321  005414  0E42               	movlw	66
 19322  005416                     u11877:
 19323  005416  2EE8               	decfsz	wreg,f,c
 19324  005418  D7FE               	bra	u11877
 19325  00541A  D000               	nop2	
 19326                           
 19327                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19328  00541C  8EF2               	bsf	intcon,7,c	;volatile
 19329  00541E  0012               	return		;funcret
 19330  005420                     __end_of_lcdNibble:
 19331                           	opt stack 0
 19332                           tblptru	equ	0xFF8
 19333                           tblptrh	equ	0xFF7
 19334                           tblptrl	equ	0xFF6
 19335                           tablat	equ	0xFF5
 19336                           prodh	equ	0xFF4
 19337                           prodl	equ	0xFF3
 19338                           intcon	equ	0xFF2
 19339                           intcon2	equ	0xFF1
 19340                           intcon3	equ	0xFF0
 19341                           indf0	equ	0xFEF
 19342                           postinc0	equ	0xFEE
 19343                           fsr0h	equ	0xFEA
 19344                           fsr0l	equ	0xFE9
 19345                           wreg	equ	0xFE8
 19346                           postdec1	equ	0xFE5
 19347                           fsr1l	equ	0xFE1
 19348                           indf2	equ	0xFDF
 19349                           postinc2	equ	0xFDE
 19350                           postdec2	equ	0xFDD
 19351                           fsr2h	equ	0xFDA
 19352                           fsr2l	equ	0xFD9
 19353                           status	equ	0xFD8
 19354                           
 19355 ;; *************** function _handler *****************
 19356 ;; Defined at:
 19357 ;;		line 16 in file "interruptHandler.c"
 19358 ;; Parameters:    Size  Location     Type
 19359 ;;		None
 19360 ;; Auto vars:     Size  Location     Type
 19361 ;;		None
 19362 ;; Return value:  Size  Location     Type
 19363 ;;                  1    wreg      void 
 19364 ;; Registers used:
 19365 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19366 ;; Tracked objects:
 19367 ;;		On entry : 0/0
 19368 ;;		On exit  : 0/0
 19369 ;;		Unchanged: 0/0
 19370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19373 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19374 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19375 ;;Total ram usage:       16 bytes
 19376 ;; Hardware stack levels used:    1
 19377 ;; Hardware stack levels required when called:    6
 19378 ;; This function calls:
 19379 ;;		_printSortTimer
 19380 ;;		_updateArmState
 19381 ;;		_updateMenu
 19382 ;;		_updateServoStates
 19383 ;;		i2_change_state_to_menu_start
 19384 ;; This function is called by:
 19385 ;;		Interrupt level 2
 19386 ;; This function uses a non-reentrant model
 19387 ;;
 19388                           
 19389                           	psect	intcode
 19390  000008                     __pintcode:
 19391                           	opt stack 0
 19392  000008                     _handler:
 19393                           	opt stack 18
 19394                           
 19395                           ;incstack = 0
 19396  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19397  00000A  EDB4  F01D         	call	int_func,f	;refresh shadow registers
 19398                           tblptru	equ	0xFF8
 19399                           tblptrh	equ	0xFF7
 19400                           tblptrl	equ	0xFF6
 19401                           tablat	equ	0xFF5
 19402                           prodh	equ	0xFF4
 19403                           prodl	equ	0xFF3
 19404                           intcon	equ	0xFF2
 19405                           intcon2	equ	0xFF1
 19406                           intcon3	equ	0xFF0
 19407                           indf0	equ	0xFEF
 19408                           postinc0	equ	0xFEE
 19409                           fsr0h	equ	0xFEA
 19410                           fsr0l	equ	0xFE9
 19411                           wreg	equ	0xFE8
 19412                           postdec1	equ	0xFE5
 19413                           fsr1l	equ	0xFE1
 19414                           indf2	equ	0xFDF
 19415                           postinc2	equ	0xFDE
 19416                           postdec2	equ	0xFDD
 19417                           fsr2h	equ	0xFDA
 19418                           fsr2l	equ	0xFD9
 19419                           status	equ	0xFD8
 19420                           
 19421                           	psect	intcode_body
 19422  003B68                     __pintcode_body:
 19423                           	opt stack 18
 19424  003B68                     int_func:
 19425                           	opt stack 18
 19426  003B68  0006               	pop		; remove dummy address from shadow register refresh
 19427  003B6A  CFFA F04D          	movff	pclath,??_handler+2
 19428  003B6E  CFFB F04E          	movff	pclatu,??_handler+3
 19429  003B72  CFE9 F04F          	movff	fsr0l,??_handler+4
 19430  003B76  CFEA F050          	movff	fsr0h,??_handler+5
 19431  003B7A  CFE1 F051          	movff	fsr1l,??_handler+6
 19432  003B7E  CFE2 F052          	movff	fsr1h,??_handler+7
 19433  003B82  CFD9 F053          	movff	fsr2l,??_handler+8
 19434  003B86  CFDA F054          	movff	fsr2h,??_handler+9
 19435  003B8A  CFF3 F055          	movff	prodl,??_handler+10
 19436  003B8E  CFF4 F056          	movff	prodh,??_handler+11
 19437  003B92  CFF6 F057          	movff	tblptrl,??_handler+12
 19438  003B96  CFF7 F058          	movff	tblptrh,??_handler+13
 19439  003B9A  CFF8 F059          	movff	tblptru,??_handler+14
 19440  003B9E  CFF5 F05A          	movff	tablat,??_handler+15
 19441                           
 19442                           ;interruptHandler.c: 18: if(INT1IF){
 19443  003BA2  A0F0               	btfss	intcon3,0,c	;volatile
 19444  003BA4  D034               	goto	i2l10374
 19445                           
 19446                           ;interruptHandler.c: 19: INT1IF = 0;
 19447  003BA6  90F0               	bcf	intcon3,0,c	;volatile
 19448                           
 19449                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19450  003BA8  3881               	swapf	3969,w,c	;volatile
 19451  003BAA  0B0F               	andlw	15
 19452  003BAC  0B0F               	andlw	15
 19453  003BAE  6E4B               	movwf	??_handler& (0+255),c
 19454  003BB0  6A4C               	clrf	(??_handler+1)& (0+255),c
 19455  003BB2  0EAF               	movlw	low _keys
 19456  003BB4  244B               	addwf	??_handler,w,c
 19457  003BB6  6EF6               	movwf	tblptrl,c
 19458  003BB8  0EFA               	movlw	high _keys
 19459  003BBA  204C               	addwfc	??_handler+1,w,c
 19460  003BBC  6EF7               	movwf	tblptrh,c
 19461  003BBE                     	if	1	;There are 3 active tblptr bytes
 19462  003BBE  6AF8               	clrf	tblptru,c
 19463  003BC0  0E00               	movlw	low (__mediumconst shr (0+16))
 19464  003BC2  22F8               	addwfc	tblptru,f,c
 19465  003BC4                     	endif
 19466  003BC4  0008               	tblrd		*
 19467  003BC6  CFF5 F07D          	movff	tablat,_input	;volatile
 19468                           
 19469                           ;interruptHandler.c: 21: if(input == '*'){
 19470  003BCA  0E2A               	movlw	42
 19471  003BCC  187D               	xorwf	_input,w,c	;volatile
 19472  003BCE  B4D8               	btfsc	status,2,c
 19473  003BD0  D00D               	goto	i2l10368
 19474  003BD2  D018               	goto	i2l10370
 19475  003BD4                     i2l10358:
 19476                           
 19477                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19478  003BD4  0E03               	movlw	3
 19479  003BD6  D007               	goto	L15
 19480  003BD8                     i2l10360:
 19481                           
 19482                           ; BSR set to: 0
 19483                           ;interruptHandler.c: 27: machine_state = UI_state;
 19484  003BD8  0E00               	movlw	0
 19485  003BDA  0100               	movlb	0	; () banked
 19486  003BDC  6FFC               	movwf	_machine_state& (0+255),b
 19487                           
 19488                           ; BSR set to: 0
 19489                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19490  003BDE  EC64  F02E         	call	i2_change_state_to_menu_start	;wreg free
 19491                           
 19492                           ;interruptHandler.c: 29: break;
 19493  003BE2  D015               	goto	i2l10374
 19494  003BE4                     i2l10364:
 19495                           
 19496                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19497  003BE4  0E02               	movlw	2
 19498  003BE6                     L15:
 19499  003BE6  0100               	movlb	0	; () banked
 19500  003BE8  6FFC               	movwf	_machine_state& (0+255),b
 19501                           
 19502                           ; BSR set to: 0
 19503                           ;interruptHandler.c: 33: }
 19504                           
 19505                           ;interruptHandler.c: 32: break;
 19506  003BEA  D011               	goto	i2l10374
 19507  003BEC                     i2l10368:
 19508  003BEC  0100               	movlb	0	; () banked
 19509  003BEE  51FC               	movf	_machine_state& (0+255),w,b
 19510                           
 19511                           ; Switch size 1, requested type "space"
 19512                           ; Number of cases is 3, Range of values is 0 to 3
 19513                           ; switch strategies available:
 19514                           ; Name         Instructions Cycles
 19515                           ; simple_byte           10     6 (average)
 19516                           ;	Chosen strategy is simple_byte
 19517  003BF0  0A00               	xorlw	0	; case 0
 19518  003BF2  B4D8               	btfsc	status,2,c
 19519  003BF4  D7EF               	goto	i2l10358
 19520  003BF6  0A01               	xorlw	1	; case 1
 19521  003BF8  B4D8               	btfsc	status,2,c
 19522  003BFA  D7F4               	goto	i2l10364
 19523  003BFC  0A02               	xorlw	2	; case 3
 19524  003BFE  B4D8               	btfsc	status,2,c
 19525  003C00  D7EB               	goto	i2l10360
 19526                           
 19527                           ; BSR set to: 0
 19528                           ;interruptHandler.c: 34: }
 19529  003C02  D005               	goto	i2l10374
 19530  003C04                     i2l10370:
 19531                           
 19532                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19533  003C04  0100               	movlb	0	; () banked
 19534  003C06  51FC               	movf	_machine_state& (0+255),w,b
 19535  003C08  B4D8               	btfsc	status,2,c
 19536                           
 19537                           ; BSR set to: 0
 19538                           ;interruptHandler.c: 36: updateMenu();
 19539  003C0A  EC43  F01A         	call	_updateMenu	;wreg free
 19540  003C0E                     i2l10374:
 19541                           
 19542                           ;interruptHandler.c: 37: }
 19543                           ;interruptHandler.c: 38: }
 19544                           ;interruptHandler.c: 41: if(TMR0IF){
 19545  003C0E  A4F2               	btfss	intcon,2,c	;volatile
 19546  003C10  D00C               	goto	i2l10388
 19547                           
 19548                           ;interruptHandler.c: 42: TMR0IF = 0;
 19549  003C12  94F2               	bcf	intcon,2,c	;volatile
 19550                           
 19551                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19552  003C14  0100               	movlb	0	; () banked
 19553  003C16  05FC               	decf	_machine_state& (0+255),w,b
 19554  003C18  A4D8               	btfss	status,2,c
 19555  003C1A  D007               	goto	i2l10388
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;interruptHandler.c: 44: printSortTimer();
 19559  003C1C  EC31  F014         	call	_printSortTimer	;wreg free
 19560                           
 19561                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19562  003C20  0E85               	movlw	133
 19563  003C22  6ED7               	movwf	4055,c	;volatile
 19564                           
 19565                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19566  003C24  0EEE               	movlw	238
 19567  003C26  6ED6               	movwf	4054,c	;volatile
 19568                           
 19569                           ;interruptHandler.c: 48: TMR0ON = 1;
 19570  003C28  8ED5               	bsf	4053,7,c	;volatile
 19571  003C2A                     i2l10388:
 19572                           
 19573                           ;interruptHandler.c: 49: }
 19574                           ;interruptHandler.c: 50: }
 19575                           ;interruptHandler.c: 53: if(TMR1IF){
 19576  003C2A  A09E               	btfss	3998,0,c	;volatile
 19577  003C2C  D028               	goto	i2l10416
 19578                           
 19579                           ;interruptHandler.c: 54: TMR1IF = 0;
 19580  003C2E  909E               	bcf	3998,0,c	;volatile
 19581                           
 19582                           ;interruptHandler.c: 55: TMR1ON = 0;
 19583  003C30  90CD               	bcf	4045,0,c	;volatile
 19584                           
 19585                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19586  003C32  0100               	movlb	0	; () banked
 19587  003C34  05FC               	decf	_machine_state& (0+255),w,b
 19588  003C36  A4D8               	btfss	status,2,c
 19589  003C38  D022               	goto	i2l10416
 19590                           
 19591                           ; BSR set to: 0
 19592                           ;interruptHandler.c: 57: if(was_low_1){
 19593  003C3A  5077               	movf	_was_low_1,w,c	;volatile
 19594  003C3C  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19595  003C3E  B4D8               	btfsc	status,2,c
 19596  003C40  D00A               	goto	i2l1071
 19597                           
 19598                           ; BSR set to: 0
 19599                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19600  003C42  828B               	bsf	3979,1,c	;volatile
 19601                           
 19602                           ; BSR set to: 0
 19603                           ;interruptHandler.c: 59: was_low_1 = 0;
 19604  003C44  0E00               	movlw	0
 19605  003C46  6E78               	movwf	_was_low_1+1,c	;volatile
 19606  003C48  0E00               	movlw	0
 19607  003C4A  6E77               	movwf	_was_low_1,c	;volatile
 19608                           
 19609                           ; BSR set to: 0
 19610                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19611  003C4C  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19612                           
 19613                           ; BSR set to: 0
 19614                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19615  003C50  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19616                           
 19617                           ;interruptHandler.c: 62: }
 19618  003C54  D00D               	goto	i2l10410
 19619  003C56                     i2l1071:
 19620                           
 19621                           ; BSR set to: 0
 19622                           ;interruptHandler.c: 63: else{
 19623                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19624  003C56  928B               	bcf	3979,1,c	;volatile
 19625                           
 19626                           ; BSR set to: 0
 19627                           ;interruptHandler.c: 65: was_low_1 = 1;
 19628  003C58  0E00               	movlw	0
 19629  003C5A  6E78               	movwf	_was_low_1+1,c	;volatile
 19630  003C5C  0E01               	movlw	1
 19631  003C5E  6E77               	movwf	_was_low_1,c	;volatile
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19635  003C60  505B               	movf	_servoTimes,w,c
 19636  003C62  0800               	sublw	0
 19637  003C64  0F20               	addlw	32
 19638  003C66  6ECF               	movwf	4047,c	;volatile
 19639                           
 19640                           ; BSR set to: 0
 19641                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19642  003C68  505D               	movf	_servoTimes+2,w,c
 19643  003C6A  0800               	sublw	0
 19644  003C6C  0F20               	addlw	32
 19645  003C6E  6ECE               	movwf	4046,c	;volatile
 19646  003C70                     i2l10410:
 19647                           
 19648                           ; BSR set to: 0
 19649                           ;interruptHandler.c: 68: }
 19650                           ;interruptHandler.c: 69: TMR1ON = 1;
 19651  003C70  80CD               	bsf	4045,0,c	;volatile
 19652                           
 19653                           ; BSR set to: 0
 19654                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19655  003C72  0E0A               	movlw	10
 19656  003C74  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19657  003C76  0E00               	movlw	0
 19658  003C78  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19659                           
 19660                           ; BSR set to: 0
 19661                           ;interruptHandler.c: 72: updateServoStates();
 19662  003C7A  ECA9  F01E         	call	_updateServoStates	;wreg free
 19663  003C7E                     i2l10416:
 19664                           
 19665                           ;interruptHandler.c: 73: }
 19666                           ;interruptHandler.c: 74: }
 19667                           ;interruptHandler.c: 77: if(TMR2IF){
 19668  003C7E  A29E               	btfss	3998,1,c	;volatile
 19669  003C80  D026               	goto	i2l10442
 19670                           
 19671                           ;interruptHandler.c: 80: TMR2IF = 0;
 19672  003C82  929E               	bcf	3998,1,c	;volatile
 19673                           
 19674                           ;interruptHandler.c: 81: TMR2ON = 0;
 19675  003C84  94CA               	bcf	4042,2,c	;volatile
 19676                           
 19677                           ;interruptHandler.c: 82: timer2_counter++;
 19678  003C86  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19679  003C88  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19680                           
 19681                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19682  003C8A  0100               	movlb	0	; () banked
 19683  003C8C  05FC               	decf	_machine_state& (0+255),w,b
 19684  003C8E  A4D8               	btfss	status,2,c
 19685  003C90  D01E               	goto	i2l10442
 19686                           
 19687                           ; BSR set to: 0
 19688                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19689  003C92  5079               	movf	_was_low_2,w,c	;volatile
 19690  003C94  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19691  003C96  B4D8               	btfsc	status,2,c
 19692  003C98  D00A               	goto	i2l10432
 19693                           
 19694                           ; BSR set to: 0
 19695  003C9A  0E02               	movlw	2
 19696  003C9C  1873               	xorwf	_timer2_counter,w,c	;volatile
 19697  003C9E  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19698  003CA0  A4D8               	btfss	status,2,c
 19699  003CA2  D005               	goto	i2l10432
 19700                           
 19701                           ; BSR set to: 0
 19702                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19703  003CA4  868A               	bsf	3978,3,c	;volatile
 19704                           
 19705                           ; BSR set to: 0
 19706                           ;interruptHandler.c: 87: was_low_2 = 0;
 19707  003CA6  0E00               	movlw	0
 19708  003CA8  6E7A               	movwf	_was_low_2+1,c	;volatile
 19709  003CAA  0E00               	movlw	0
 19710  003CAC  D008               	goto	L16
 19711  003CAE                     i2l10432:
 19712                           
 19713                           ; BSR set to: 0
 19714                           ;interruptHandler.c: 90: else if(!was_low_2){
 19715  003CAE  5079               	movf	_was_low_2,w,c	;volatile
 19716  003CB0  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19717  003CB2  A4D8               	btfss	status,2,c
 19718  003CB4  D009               	goto	i2l10438
 19719                           
 19720                           ; BSR set to: 0
 19721                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19722  003CB6  968A               	bcf	3978,3,c	;volatile
 19723                           
 19724                           ; BSR set to: 0
 19725                           ;interruptHandler.c: 92: was_low_2 = 1;
 19726  003CB8  0E00               	movlw	0
 19727  003CBA  6E7A               	movwf	_was_low_2+1,c	;volatile
 19728  003CBC  0E01               	movlw	1
 19729  003CBE                     L16:
 19730  003CBE  6E79               	movwf	_was_low_2,c	;volatile
 19731                           
 19732                           ;interruptHandler.c: 93: timer2_counter = 0;
 19733  003CC0  0E00               	movlw	0
 19734  003CC2  6E74               	movwf	_timer2_counter+1,c	;volatile
 19735  003CC4  0E00               	movlw	0
 19736  003CC6  6E73               	movwf	_timer2_counter,c	;volatile
 19737  003CC8                     i2l10438:
 19738                           
 19739                           ; BSR set to: 0
 19740                           ;interruptHandler.c: 94: }
 19741                           ;interruptHandler.c: 95: updateArmState();
 19742  003CC8  EC34  F02C         	call	_updateArmState	;wreg free
 19743                           
 19744                           ;interruptHandler.c: 96: TMR2ON = 1;
 19745  003CCC  84CA               	bsf	4042,2,c	;volatile
 19746  003CCE                     i2l10442:
 19747                           
 19748                           ;interruptHandler.c: 97: }
 19749                           ;interruptHandler.c: 98: }
 19750                           ;interruptHandler.c: 101: if(TMR3IF){
 19751  003CCE  A2A1               	btfss	4001,1,c	;volatile
 19752  003CD0  D022               	goto	i2l1082
 19753                           
 19754                           ;interruptHandler.c: 102: TMR3IF = 0;
 19755  003CD2  92A1               	bcf	4001,1,c	;volatile
 19756                           
 19757                           ;interruptHandler.c: 103: TMR3ON = 0;
 19758  003CD4  90B1               	bcf	4017,0,c	;volatile
 19759                           
 19760                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19761  003CD6  0100               	movlb	0	; () banked
 19762  003CD8  05FC               	decf	_machine_state& (0+255),w,b
 19763  003CDA  A4D8               	btfss	status,2,c
 19764  003CDC  D01C               	goto	i2l1082
 19765                           
 19766                           ; BSR set to: 0
 19767                           ;interruptHandler.c: 105: if(was_low_3){
 19768  003CDE  507B               	movf	_was_low_3,w,c	;volatile
 19769  003CE0  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19770  003CE2  B4D8               	btfsc	status,2,c
 19771  003CE4  D00A               	goto	i2l1080
 19772                           
 19773                           ; BSR set to: 0
 19774                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19775  003CE6  848B               	bsf	3979,2,c	;volatile
 19776                           
 19777                           ; BSR set to: 0
 19778                           ;interruptHandler.c: 107: was_low_3 = 0;
 19779  003CE8  0E00               	movlw	0
 19780  003CEA  6E7C               	movwf	_was_low_3+1,c	;volatile
 19781  003CEC  0E00               	movlw	0
 19782  003CEE  6E7B               	movwf	_was_low_3,c	;volatile
 19783                           
 19784                           ; BSR set to: 0
 19785                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19786  003CF0  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 19787                           
 19788                           ; BSR set to: 0
 19789                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19790  003CF4  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 19791                           
 19792                           ;interruptHandler.c: 110: }
 19793  003CF8  D00D               	goto	i2l10464
 19794  003CFA                     i2l1080:
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;interruptHandler.c: 111: else{
 19798                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19799  003CFA  948B               	bcf	3979,2,c	;volatile
 19800                           
 19801                           ; BSR set to: 0
 19802                           ;interruptHandler.c: 113: was_low_3 = 1;
 19803  003CFC  0E00               	movlw	0
 19804  003CFE  6E7C               	movwf	_was_low_3+1,c	;volatile
 19805  003D00  0E01               	movlw	1
 19806  003D02  6E7B               	movwf	_was_low_3,c	;volatile
 19807                           
 19808                           ; BSR set to: 0
 19809                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19810  003D04  505F               	movf	_servoTimes+4,w,c
 19811  003D06  0800               	sublw	0
 19812  003D08  0F20               	addlw	32
 19813  003D0A  6EB3               	movwf	4019,c	;volatile
 19814                           
 19815                           ; BSR set to: 0
 19816                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19817  003D0C  5061               	movf	_servoTimes+6,w,c
 19818  003D0E  0800               	sublw	0
 19819  003D10  0F20               	addlw	32
 19820  003D12  6EB2               	movwf	4018,c	;volatile
 19821  003D14                     i2l10464:
 19822                           
 19823                           ; BSR set to: 0
 19824                           ;interruptHandler.c: 116: }
 19825                           ;interruptHandler.c: 117: TMR3ON = 1;
 19826  003D14  80B1               	bsf	4017,0,c	;volatile
 19827  003D16                     i2l1082:
 19828  003D16  C05A  FFF5         	movff	??_handler+15,tablat
 19829  003D1A  C059  FFF8         	movff	??_handler+14,tblptru
 19830  003D1E  C058  FFF7         	movff	??_handler+13,tblptrh
 19831  003D22  C057  FFF6         	movff	??_handler+12,tblptrl
 19832  003D26  C056  FFF4         	movff	??_handler+11,prodh
 19833  003D2A  C055  FFF3         	movff	??_handler+10,prodl
 19834  003D2E  C054  FFDA         	movff	??_handler+9,fsr2h
 19835  003D32  C053  FFD9         	movff	??_handler+8,fsr2l
 19836  003D36  C052  FFE2         	movff	??_handler+7,fsr1h
 19837  003D3A  C051  FFE1         	movff	??_handler+6,fsr1l
 19838  003D3E  C050  FFEA         	movff	??_handler+5,fsr0h
 19839  003D42  C04F  FFE9         	movff	??_handler+4,fsr0l
 19840  003D46  C04E  FFFB         	movff	??_handler+3,pclatu
 19841  003D4A  C04D  FFFA         	movff	??_handler+2,pclath
 19842  003D4E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19843  003D50  0011               	retfie		f
 19844  003D52                     __end_of_handler:
 19845                           	opt stack 0
 19846                           pclatu	equ	0xFFB
 19847                           pclath	equ	0xFFA
 19848                           tblptru	equ	0xFF8
 19849                           tblptrh	equ	0xFF7
 19850                           tblptrl	equ	0xFF6
 19851                           tablat	equ	0xFF5
 19852                           prodh	equ	0xFF4
 19853                           prodl	equ	0xFF3
 19854                           intcon	equ	0xFF2
 19855                           intcon2	equ	0xFF1
 19856                           intcon3	equ	0xFF0
 19857                           indf0	equ	0xFEF
 19858                           postinc0	equ	0xFEE
 19859                           fsr0h	equ	0xFEA
 19860                           fsr0l	equ	0xFE9
 19861                           wreg	equ	0xFE8
 19862                           postdec1	equ	0xFE5
 19863                           fsr1h	equ	0xFE2
 19864                           fsr1l	equ	0xFE1
 19865                           indf2	equ	0xFDF
 19866                           postinc2	equ	0xFDE
 19867                           postdec2	equ	0xFDD
 19868                           fsr2h	equ	0xFDA
 19869                           fsr2l	equ	0xFD9
 19870                           status	equ	0xFD8
 19871                           
 19872 ;; *************** function _updateServoStates *****************
 19873 ;; Defined at:
 19874 ;;		line 622 in file "sort.c"
 19875 ;; Parameters:    Size  Location     Type
 19876 ;;		None
 19877 ;; Auto vars:     Size  Location     Type
 19878 ;;		None
 19879 ;; Return value:  Size  Location     Type
 19880 ;;                  1    wreg      void 
 19881 ;; Registers used:
 19882 ;;		wreg, status,2, status,0, cstack
 19883 ;; Tracked objects:
 19884 ;;		On entry : 0/0
 19885 ;;		On exit  : 0/0
 19886 ;;		Unchanged: 0/0
 19887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19890 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19891 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19892 ;;Total ram usage:        2 bytes
 19893 ;; Hardware stack levels used:    1
 19894 ;; Hardware stack levels required when called:    1
 19895 ;; This function calls:
 19896 ;;		i2_updateServoPosition
 19897 ;; This function is called by:
 19898 ;;		_handler
 19899 ;; This function uses a non-reentrant model
 19900 ;;
 19901                           
 19902                           	psect	text65
 19903  003D52                     __ptext65:
 19904                           	opt stack 0
 19905  003D52                     _updateServoStates:
 19906                           	opt stack 22
 19907                           
 19908                           ;sort.c: 624: if(servo_timer_counter >= servo_timer_target){
 19909                           
 19910                           ;incstack = 0
 19911  003D52  506F               	movf	_servo_timer_target,w,c	;volatile
 19912  003D54  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19913  003D56  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19914  003D58  0A80               	xorlw	128
 19915  003D5A  6E09               	movwf	??_updateServoStates& (0+255),c
 19916  003D5C  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19917  003D5E  0A80               	xorlw	128
 19918  003D60  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19919  003D62  A0D8               	btfss	status,0,c
 19920  003D64  0012               	return	
 19921                           
 19922                           ;sort.c: 626: if(f_panning_to_bin){
 19923  003D66  5069               	movf	_f_panning_to_bin,w,c	;volatile
 19924  003D68  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19925  003D6A  A4D8               	btfss	status,2,c
 19926  003D6C  D036               	goto	i2l10232
 19927  003D6E  D05F               	goto	i2l10236
 19928  003D70                     i2l10206:
 19929                           
 19930                           ;sort.c: 630: updateServoPosition(1260, 3);
 19931  003D70  0E04               	movlw	4
 19932  003D72  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19933  003D74  0EEC               	movlw	236
 19934  003D76  6E01               	movwf	i2updateServoPosition@time_us,c
 19935  003D78  0E00               	movlw	0
 19936  003D7A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19937  003D7C  0E03               	movlw	3
 19938  003D7E  6E03               	movwf	i2updateServoPosition@timer,c
 19939  003D80  EC10  F02A         	call	i2_updateServoPosition	;wreg free
 19940  003D84  D025               	goto	i2l10226
 19941  003D86                     i2l10210:
 19942                           
 19943                           ;sort.c: 632: servo_timer_target = 700;
 19944  003D86  0E02               	movlw	2
 19945  003D88  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19946  003D8A  0EBC               	movlw	188
 19947  003D8C  6E6F               	movwf	_servo_timer_target,c	;volatile
 19948                           
 19949                           ;sort.c: 633: break;
 19950  003D8E  D04A               	goto	i2l10234
 19951  003D90                     i2l10212:
 19952                           
 19953                           ;sort.c: 635: updateServoPosition(1260, 3);
 19954  003D90  0E04               	movlw	4
 19955  003D92  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19956  003D94  0EEC               	movlw	236
 19957  003D96  6E01               	movwf	i2updateServoPosition@time_us,c
 19958  003D98  0E00               	movlw	0
 19959  003D9A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19960  003D9C  0E03               	movlw	3
 19961  003D9E  6E03               	movwf	i2updateServoPosition@timer,c
 19962  003DA0  EC10  F02A         	call	i2_updateServoPosition	;wreg free
 19963  003DA4  D015               	goto	i2l10226
 19964  003DA6                     i2l10218:
 19965                           
 19966                           ;sort.c: 641: updateServoPosition(1390, 3);
 19967  003DA6  0E05               	movlw	5
 19968  003DA8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19969  003DAA  0E6E               	movlw	110
 19970  003DAC  6E01               	movwf	i2updateServoPosition@time_us,c
 19971  003DAE  0E00               	movlw	0
 19972  003DB0  6E04               	movwf	i2updateServoPosition@timer+1,c
 19973  003DB2  0E03               	movlw	3
 19974  003DB4  6E03               	movwf	i2updateServoPosition@timer,c
 19975  003DB6  EC10  F02A         	call	i2_updateServoPosition	;wreg free
 19976  003DBA  D00A               	goto	i2l10226
 19977  003DBC                     i2l10224:
 19978                           
 19979                           ;sort.c: 646: updateServoPosition(1390, 3);
 19980  003DBC  0E05               	movlw	5
 19981  003DBE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19982  003DC0  0E6E               	movlw	110
 19983  003DC2  6E01               	movwf	i2updateServoPosition@time_us,c
 19984  003DC4  0E00               	movlw	0
 19985  003DC6  6E04               	movwf	i2updateServoPosition@timer+1,c
 19986  003DC8  0E03               	movlw	3
 19987  003DCA  6E03               	movwf	i2updateServoPosition@timer,c
 19988  003DCC  EC10  F02A         	call	i2_updateServoPosition	;wreg free
 19989  003DD0                     i2l10226:
 19990                           
 19991                           ;sort.c: 647: servo_timer_counter = 0;
 19992  003DD0  0E00               	movlw	0
 19993  003DD2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19994  003DD4  0E00               	movlw	0
 19995  003DD6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19996  003DD8  D7D6               	goto	i2l10210
 19997  003DDA                     i2l10232:
 19998  003DDA  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19999  003DDE  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 20000                           
 20001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 20002                           ; Switch size 1, requested type "space"
 20003                           ; Number of cases is 4, Range of values is 1 to 9
 20004                           ; switch strategies available:
 20005                           ; Name         Instructions Cycles
 20006                           ; simple_byte           13     7 (average)
 20007                           ;	Chosen strategy is simple_byte
 20008  003DE2  500A               	movf	??_updateServoStates+1,w,c
 20009  003DE4  0A01               	xorlw	1	; case 1
 20010  003DE6  B4D8               	btfsc	status,2,c
 20011  003DE8  D00A               	goto	i2l10910
 20012  003DEA  0A02               	xorlw	2	; case 3
 20013  003DEC  B4D8               	btfsc	status,2,c
 20014  003DEE  D00C               	goto	i2l10912
 20015  003DF0  0A05               	xorlw	5	; case 6
 20016  003DF2  B4D8               	btfsc	status,2,c
 20017  003DF4  D00E               	goto	i2l10914
 20018  003DF6  0A0F               	xorlw	15	; case 9
 20019  003DF8  B4D8               	btfsc	status,2,c
 20020  003DFA  D010               	goto	i2l10916
 20021  003DFC  D013               	goto	i2l10234
 20022  003DFE                     i2l10910:
 20023                           
 20024                           ; Switch size 1, requested type "space"
 20025                           ; Number of cases is 1, Range of values is 244 to 244
 20026                           ; switch strategies available:
 20027                           ; Name         Instructions Cycles
 20028                           ; simple_byte            4     3 (average)
 20029                           ;	Chosen strategy is simple_byte
 20030  003DFE  5009               	movf	??_updateServoStates,w,c
 20031  003E00  0AF4               	xorlw	244	; case 244
 20032  003E02  B4D8               	btfsc	status,2,c
 20033  003E04  D7B5               	goto	i2l10206
 20034  003E06  D00E               	goto	i2l10234
 20035  003E08                     i2l10912:
 20036                           
 20037                           ; Switch size 1, requested type "space"
 20038                           ; Number of cases is 1, Range of values is 82 to 82
 20039                           ; switch strategies available:
 20040                           ; Name         Instructions Cycles
 20041                           ; simple_byte            4     3 (average)
 20042                           ;	Chosen strategy is simple_byte
 20043  003E08  5009               	movf	??_updateServoStates,w,c
 20044  003E0A  0A52               	xorlw	82	; case 82
 20045  003E0C  B4D8               	btfsc	status,2,c
 20046  003E0E  D7C0               	goto	i2l10212
 20047  003E10  D009               	goto	i2l10234
 20048  003E12                     i2l10914:
 20049                           
 20050                           ; Switch size 1, requested type "space"
 20051                           ; Number of cases is 1, Range of values is 134 to 134
 20052                           ; switch strategies available:
 20053                           ; Name         Instructions Cycles
 20054                           ; simple_byte            4     3 (average)
 20055                           ;	Chosen strategy is simple_byte
 20056  003E12  5009               	movf	??_updateServoStates,w,c
 20057  003E14  0A86               	xorlw	134	; case 134
 20058  003E16  B4D8               	btfsc	status,2,c
 20059  003E18  D7C6               	goto	i2l10218
 20060  003E1A  D004               	goto	i2l10234
 20061  003E1C                     i2l10916:
 20062                           
 20063                           ; Switch size 1, requested type "space"
 20064                           ; Number of cases is 1, Range of values is 96 to 96
 20065                           ; switch strategies available:
 20066                           ; Name         Instructions Cycles
 20067                           ; simple_byte            4     3 (average)
 20068                           ;	Chosen strategy is simple_byte
 20069  003E1C  5009               	movf	??_updateServoStates,w,c
 20070  003E1E  0A60               	xorlw	96	; case 96
 20071  003E20  B4D8               	btfsc	status,2,c
 20072  003E22  D7CC               	goto	i2l10224
 20073  003E24                     i2l10234:
 20074                           
 20075                           ;sort.c: 653: f_panning_to_bin = 0;
 20076  003E24  0E00               	movlw	0
 20077  003E26  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 20078  003E28  0E00               	movlw	0
 20079  003E2A  6E69               	movwf	_f_panning_to_bin,c	;volatile
 20080                           
 20081                           ;sort.c: 654: }
 20082  003E2C  0012               	return	
 20083  003E2E                     i2l10236:
 20084                           
 20085                           ;sort.c: 655: else if(pan_servo_state == 1200){
 20086  003E2E  0EB0               	movlw	176
 20087  003E30  186B               	xorwf	_pan_servo_state,w,c	;volatile
 20088  003E32  E15A               	bnz	i2l10266
 20089  003E34  0E04               	movlw	4
 20090  003E36  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 20091  003E38  A4D8               	btfss	status,2,c
 20092  003E3A  D056               	goto	i2l10266
 20093                           
 20094                           ;sort.c: 657: servo_timer_counter = 0;
 20095  003E3C  0E00               	movlw	0
 20096  003E3E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20097  003E40  0E00               	movlw	0
 20098  003E42  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20099                           
 20100                           ;sort.c: 658: }
 20101  003E44  0012               	return	
 20102  003E46                     i2l10240:
 20103                           
 20104                           ;sort.c: 663: updateServoPosition(1050, 3);
 20105  003E46  0E04               	movlw	4
 20106  003E48  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20107  003E4A  0E1A               	movlw	26
 20108  003E4C  6E01               	movwf	i2updateServoPosition@time_us,c
 20109  003E4E  0E00               	movlw	0
 20110  003E50  6E04               	movwf	i2updateServoPosition@timer+1,c
 20111  003E52  0E03               	movlw	3
 20112  003E54  6E03               	movwf	i2updateServoPosition@timer,c
 20113  003E56  EC10  F02A         	call	i2_updateServoPosition	;wreg free
 20114                           
 20115                           ;sort.c: 664: servo_timer_counter = 0;
 20116  003E5A  0E00               	movlw	0
 20117  003E5C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20118  003E5E  0E00               	movlw	0
 20119  003E60  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20120                           
 20121                           ;sort.c: 665: servo_timer_target = 750;
 20122  003E62  0E02               	movlw	2
 20123  003E64  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20124  003E66  0EEE               	movlw	238
 20125  003E68  6E6F               	movwf	_servo_timer_target,c	;volatile
 20126                           
 20127                           ;sort.c: 666: break;
 20128  003E6A  0012               	return	
 20129  003E6C                     i2l10246:
 20130                           
 20131                           ;sort.c: 668: updateServoPosition(1050, 3);
 20132  003E6C  0E04               	movlw	4
 20133  003E6E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20134  003E70  0E1A               	movlw	26
 20135  003E72  6E01               	movwf	i2updateServoPosition@time_us,c
 20136  003E74  0E00               	movlw	0
 20137  003E76  6E04               	movwf	i2updateServoPosition@timer+1,c
 20138  003E78  0E03               	movlw	3
 20139  003E7A  6E03               	movwf	i2updateServoPosition@timer,c
 20140  003E7C  EC10  F02A         	call	i2_updateServoPosition	;wreg free
 20141                           
 20142                           ;sort.c: 669: servo_timer_counter = 0;
 20143  003E80  0E00               	movlw	0
 20144  003E82  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20145  003E84  0E00               	movlw	0
 20146  003E86  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20147                           
 20148                           ;sort.c: 670: servo_timer_target = 750;
 20149  003E88  0E02               	movlw	2
 20150  003E8A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20151  003E8C  0EEE               	movlw	238
 20152  003E8E  6E6F               	movwf	_servo_timer_target,c	;volatile
 20153                           
 20154                           ;sort.c: 671: break;
 20155  003E90  0012               	return	
 20156  003E92                     i2l10252:
 20157                           
 20158                           ;sort.c: 674: updateServoPosition(1200, 1);
 20159  003E92  0E04               	movlw	4
 20160  003E94  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20161  003E96  0EB0               	movlw	176
 20162  003E98  6E01               	movwf	i2updateServoPosition@time_us,c
 20163  003E9A  0E00               	movlw	0
 20164  003E9C  6E04               	movwf	i2updateServoPosition@timer+1,c
 20165  003E9E  0E01               	movlw	1
 20166  003EA0  6E03               	movwf	i2updateServoPosition@timer,c
 20167  003EA2  EC10  F02A         	call	i2_updateServoPosition	;wreg free
 20168                           
 20169                           ;sort.c: 675: updateServoPosition(1050, 3);
 20170  003EA6  0E04               	movlw	4
 20171  003EA8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20172  003EAA  0E1A               	movlw	26
 20173  003EAC  6E01               	movwf	i2updateServoPosition@time_us,c
 20174  003EAE  0E00               	movlw	0
 20175  003EB0  6E04               	movwf	i2updateServoPosition@timer+1,c
 20176  003EB2  0E03               	movlw	3
 20177  003EB4  6E03               	movwf	i2updateServoPosition@timer,c
 20178  003EB6  EC10  F02A         	call	i2_updateServoPosition	;wreg free
 20179                           
 20180                           ;sort.c: 676: servo_timer_counter = 0;
 20181  003EBA  0E00               	movlw	0
 20182  003EBC  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20183  003EBE  0E00               	movlw	0
 20184  003EC0  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20185                           
 20186                           ;sort.c: 677: servo_timer_target = 9999;
 20187  003EC2  0E27               	movlw	39
 20188  003EC4  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20189  003EC6  0E0F               	movlw	15
 20190  003EC8  6E6F               	movwf	_servo_timer_target,c	;volatile
 20191                           
 20192                           ;sort.c: 679: f_can_distributed = 1;
 20193  003ECA  0E00               	movlw	0
 20194  003ECC  0101               	movlb	1	; () banked
 20195  003ECE  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
 20196  003ED0  0E01               	movlw	1
 20197  003ED2  6F37               	movwf	_f_can_distributed& (0+255),b
 20198                           
 20199                           ; BSR set to: 1
 20200                           ;sort.c: 680: if(f_lastCan == 1){
 20201  003ED4  0100               	movlb	0	; () banked
 20202  003ED6  05EA               	decf	_f_lastCan& (0+255),w,b
 20203  003ED8  0100               	movlb	0	; () banked
 20204  003EDA  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
 20205  003EDC  A4D8               	btfss	status,2,c
 20206  003EDE  0012               	return	
 20207                           
 20208                           ; BSR set to: 0
 20209                           ;sort.c: 681: machine_state = DoneSorting_state;
 20210  003EE0  0E02               	movlw	2
 20211  003EE2  0100               	movlb	0	; () banked
 20212  003EE4  6FFC               	movwf	_machine_state& (0+255),b
 20213                           
 20214                           ; BSR set to: 0
 20215                           ;sort.c: 687: }
 20216                           
 20217                           ; BSR set to: 0
 20218                           ;sort.c: 686: break;
 20219                           
 20220                           ;sort.c: 685: default:
 20221                           
 20222                           ; BSR set to: 0
 20223                           ;sort.c: 682: }
 20224                           ;sort.c: 683: break;
 20225  003EE6  0012               	return	
 20226  003EE8                     i2l10266:
 20227  003EE8  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 20228  003EEC  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 20229                           
 20230                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20231                           ; Switch size 1, requested type "space"
 20232                           ; Number of cases is 2, Range of values is 4 to 5
 20233                           ; switch strategies available:
 20234                           ; Name         Instructions Cycles
 20235                           ; simple_byte            7     4 (average)
 20236                           ;	Chosen strategy is simple_byte
 20237  003EF0  500A               	movf	??_updateServoStates+1,w,c
 20238  003EF2  0A04               	xorlw	4	; case 4
 20239  003EF4  B4D8               	btfsc	status,2,c
 20240  003EF6  D004               	goto	i2l10918
 20241  003EF8  0A01               	xorlw	1	; case 5
 20242  003EFA  A4D8               	btfss	status,2,c
 20243  003EFC  0012               	return	
 20244  003EFE  D008               	goto	i2l10920
 20245  003F00                     i2l10918:
 20246                           
 20247                           ; Switch size 1, requested type "space"
 20248                           ; Number of cases is 2, Range of values is 26 to 236
 20249                           ; switch strategies available:
 20250                           ; Name         Instructions Cycles
 20251                           ; simple_byte            7     4 (average)
 20252                           ;	Chosen strategy is simple_byte
 20253  003F00  5009               	movf	??_updateServoStates,w,c
 20254  003F02  0A1A               	xorlw	26	; case 26
 20255  003F04  B4D8               	btfsc	status,2,c
 20256  003F06  D7C5               	goto	i2l10252
 20257  003F08  0AF6               	xorlw	246	; case 236
 20258  003F0A  A4D8               	btfss	status,2,c
 20259  003F0C  0012               	return	
 20260  003F0E  D79B               	goto	i2l10240
 20261  003F10                     i2l10920:
 20262                           
 20263                           ; Switch size 1, requested type "space"
 20264                           ; Number of cases is 1, Range of values is 110 to 110
 20265                           ; switch strategies available:
 20266                           ; Name         Instructions Cycles
 20267                           ; simple_byte            4     3 (average)
 20268                           ;	Chosen strategy is simple_byte
 20269  003F10  5009               	movf	??_updateServoStates,w,c
 20270  003F12  0A6E               	xorlw	110	; case 110
 20271  003F14  A4D8               	btfss	status,2,c
 20272  003F16  0012               	return	
 20273  003F18  D7A9               	goto	i2l10246
 20274  003F1A                     __end_of_updateServoStates:
 20275                           	opt stack 0
 20276                           pclatu	equ	0xFFB
 20277                           pclath	equ	0xFFA
 20278                           tblptru	equ	0xFF8
 20279                           tblptrh	equ	0xFF7
 20280                           tblptrl	equ	0xFF6
 20281                           tablat	equ	0xFF5
 20282                           prodh	equ	0xFF4
 20283                           prodl	equ	0xFF3
 20284                           intcon	equ	0xFF2
 20285                           intcon2	equ	0xFF1
 20286                           intcon3	equ	0xFF0
 20287                           indf0	equ	0xFEF
 20288                           postinc0	equ	0xFEE
 20289                           fsr0h	equ	0xFEA
 20290                           fsr0l	equ	0xFE9
 20291                           wreg	equ	0xFE8
 20292                           postdec1	equ	0xFE5
 20293                           fsr1h	equ	0xFE2
 20294                           fsr1l	equ	0xFE1
 20295                           indf2	equ	0xFDF
 20296                           postinc2	equ	0xFDE
 20297                           postdec2	equ	0xFDD
 20298                           fsr2h	equ	0xFDA
 20299                           fsr2l	equ	0xFD9
 20300                           status	equ	0xFD8
 20301                           
 20302 ;; *************** function i2_updateServoPosition *****************
 20303 ;; Defined at:
 20304 ;;		line 607 in file "sort.c"
 20305 ;; Parameters:    Size  Location     Type
 20306 ;;  time_us         2    0[COMRAM] int 
 20307 ;;  timer           2    2[COMRAM] int 
 20308 ;; Auto vars:     Size  Location     Type
 20309 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20310 ;; Return value:  Size  Location     Type
 20311 ;;                  1    wreg      void 
 20312 ;; Registers used:
 20313 ;;		wreg, status,2, status,0
 20314 ;; Tracked objects:
 20315 ;;		On entry : 0/0
 20316 ;;		On exit  : 0/0
 20317 ;;		Unchanged: 0/0
 20318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20322 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20323 ;;Total ram usage:        8 bytes
 20324 ;; Hardware stack levels used:    1
 20325 ;; This function calls:
 20326 ;;		Nothing
 20327 ;; This function is called by:
 20328 ;;		_updateServoStates
 20329 ;; This function uses a non-reentrant model
 20330 ;;
 20331                           
 20332                           	psect	text66
 20333  005420                     __ptext66:
 20334                           	opt stack 0
 20335  005420                     i2_updateServoPosition:
 20336                           	opt stack 22
 20337                           
 20338                           ;sort.c: 608: unsigned int my_time = 65535 - time_us;
 20339                           
 20340                           ;incstack = 0
 20341  005420  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20342  005424  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20343  005428  1E05               	comf	??i2_updateServoPosition,f,c
 20344  00542A  1E06               	comf	??i2_updateServoPosition+1,f,c
 20345  00542C  4A05               	infsnz	??i2_updateServoPosition,f,c
 20346  00542E  2A06               	incf	??i2_updateServoPosition+1,f,c
 20347  005430  0EFF               	movlw	255
 20348  005432  2405               	addwf	??i2_updateServoPosition,w,c
 20349  005434  6E07               	movwf	i2updateServoPosition@my_time,c
 20350  005436  0EFF               	movlw	255
 20351  005438  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20352  00543A  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20353                           
 20354                           ;sort.c: 609: switch(timer){
 20355  00543C  D015               	goto	i2l9370
 20356  00543E                     i2l9364:
 20357                           
 20358                           ;sort.c: 611: servoTimes[0] = my_time >> 8;
 20359  00543E  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20360  005440  6E5B               	movwf	_servoTimes,c
 20361  005442  6A5C               	clrf	_servoTimes+1,c
 20362                           
 20363                           ;sort.c: 612: servoTimes[1] = my_time & 0xFF;
 20364  005444  5007               	movf	i2updateServoPosition@my_time,w,c
 20365  005446  6E5D               	movwf	_servoTimes+2,c
 20366  005448  6A5E               	clrf	_servoTimes+3,c
 20367                           
 20368                           ;sort.c: 614: pan_servo_state = time_us;
 20369  00544A  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20370  00544E  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20371  005452                     i2l952:
 20372                           
 20373                           ;sort.c: 616: servoTimes[2] = my_time >> 8;
 20374  005452  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20375  005454  6E5F               	movwf	_servoTimes+4,c
 20376  005456  6A60               	clrf	_servoTimes+5,c
 20377                           
 20378                           ;sort.c: 617: servoTimes[3] = my_time & 0xFF;
 20379  005458  5007               	movf	i2updateServoPosition@my_time,w,c
 20380  00545A  6E61               	movwf	_servoTimes+6,c
 20381  00545C  6A62               	clrf	_servoTimes+7,c
 20382                           
 20383                           ;sort.c: 619: tilt_servo_state = time_us;
 20384  00545E  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20385  005462  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20386                           
 20387                           ;sort.c: 620: }
 20388  005466  0012               	return	
 20389  005468                     i2l9370:
 20390  005468  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20391  00546C  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20392                           
 20393                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20394                           ; Switch size 1, requested type "space"
 20395                           ; Number of cases is 1, Range of values is 0 to 0
 20396                           ; switch strategies available:
 20397                           ; Name         Instructions Cycles
 20398                           ; simple_byte            4     3 (average)
 20399                           ;	Chosen strategy is simple_byte
 20400  005470  5006               	movf	??i2_updateServoPosition+1,w,c
 20401  005472  0A00               	xorlw	0	; case 0
 20402  005474  A4D8               	btfss	status,2,c
 20403  005476  0012               	return	
 20404                           
 20405                           ; Switch size 1, requested type "space"
 20406                           ; Number of cases is 2, Range of values is 1 to 3
 20407                           ; switch strategies available:
 20408                           ; Name         Instructions Cycles
 20409                           ; simple_byte            7     4 (average)
 20410                           ;	Chosen strategy is simple_byte
 20411  005478  5005               	movf	??i2_updateServoPosition,w,c
 20412  00547A  0A01               	xorlw	1	; case 1
 20413  00547C  B4D8               	btfsc	status,2,c
 20414  00547E  D7DF               	goto	i2l9364
 20415  005480  0A02               	xorlw	2	; case 3
 20416  005482  A4D8               	btfss	status,2,c
 20417  005484  0012               	return	
 20418  005486  D7E5               	goto	i2l952
 20419  005488                     __end_ofi2_updateServoPosition:
 20420                           	opt stack 0
 20421                           pclatu	equ	0xFFB
 20422                           pclath	equ	0xFFA
 20423                           tblptru	equ	0xFF8
 20424                           tblptrh	equ	0xFF7
 20425                           tblptrl	equ	0xFF6
 20426                           tablat	equ	0xFF5
 20427                           prodh	equ	0xFF4
 20428                           prodl	equ	0xFF3
 20429                           intcon	equ	0xFF2
 20430                           intcon2	equ	0xFF1
 20431                           intcon3	equ	0xFF0
 20432                           indf0	equ	0xFEF
 20433                           postinc0	equ	0xFEE
 20434                           fsr0h	equ	0xFEA
 20435                           fsr0l	equ	0xFE9
 20436                           wreg	equ	0xFE8
 20437                           postdec1	equ	0xFE5
 20438                           fsr1h	equ	0xFE2
 20439                           fsr1l	equ	0xFE1
 20440                           indf2	equ	0xFDF
 20441                           postinc2	equ	0xFDE
 20442                           postdec2	equ	0xFDD
 20443                           fsr2h	equ	0xFDA
 20444                           fsr2l	equ	0xFD9
 20445                           status	equ	0xFD8
 20446                           
 20447 ;; *************** function _updateMenu *****************
 20448 ;; Defined at:
 20449 ;;		line 216 in file "UI.c"
 20450 ;; Parameters:    Size  Location     Type
 20451 ;;		None
 20452 ;; Auto vars:     Size  Location     Type
 20453 ;;		None
 20454 ;; Return value:  Size  Location     Type
 20455 ;;                  1    wreg      void 
 20456 ;; Registers used:
 20457 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20458 ;; Tracked objects:
 20459 ;;		On entry : 0/0
 20460 ;;		On exit  : 0/0
 20461 ;;		Unchanged: 0/0
 20462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20465 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20466 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20467 ;;Total ram usage:        2 bytes
 20468 ;; Hardware stack levels used:    1
 20469 ;; Hardware stack levels required when called:    5
 20470 ;; This function calls:
 20471 ;;		_change_state_to_logs_11
 20472 ;;		_change_state_to_logs_12
 20473 ;;		_change_state_to_logs_22
 20474 ;;		_change_state_to_logs_23
 20475 ;;		_change_state_to_logs_33
 20476 ;;		_change_state_to_logs_34
 20477 ;;		_change_state_to_menu_11
 20478 ;;		_change_state_to_menu_23
 20479 ;;		_dispLogs
 20480 ;;		_inputHandler
 20481 ;;		i2_change_state_to_menu_12
 20482 ;;		i2_change_state_to_menu_22
 20483 ;;		i2_change_state_to_menu_start
 20484 ;; This function is called by:
 20485 ;;		_handler
 20486 ;; This function uses a non-reentrant model
 20487 ;;
 20488                           
 20489                           	psect	text67
 20490  003486                     __ptext67:
 20491                           	opt stack 0
 20492  003486                     _updateMenu:
 20493                           	opt stack 18
 20494                           
 20495                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20496                           
 20497                           ;incstack = 0
 20498  003486  0E00               	movlw	0
 20499  003488  6E76               	movwf	_up+1,c
 20500  00348A  0E00               	movlw	0
 20501  00348C  6E75               	movwf	_up,c
 20502  00348E  0E00               	movlw	0
 20503  003490  6E66               	movwf	_down+1,c
 20504  003492  0E00               	movlw	0
 20505  003494  6E65               	movwf	_down,c
 20506  003496  0E00               	movlw	0
 20507  003498  6E68               	movwf	_enter+1,c
 20508  00349A  0E00               	movlw	0
 20509  00349C  6E67               	movwf	_enter,c
 20510  00349E  0E00               	movlw	0
 20511  0034A0  6E64               	movwf	_back+1,c
 20512  0034A2  0E00               	movlw	0
 20513  0034A4  6E63               	movwf	_back,c
 20514                           
 20515                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20516  0034A6  9EF2               	bcf	intcon,7,c	;volatile
 20517                           
 20518                           ;UI.c: 220: if (inputHandler()
 20519                           ;UI.c: 223: ){
 20520  0034A8  ECBE  F01C         	call	_inputHandler	;wreg free
 20521  0034AC  502A               	movf	?_inputHandler,w,c
 20522  0034AE  102B               	iorwf	?_inputHandler+1,w,c
 20523  0034B0  A4D8               	btfss	status,2,c
 20524  0034B2  D112               	goto	i2l9940
 20525  0034B4  D146               	goto	i2l273
 20526  0034B6                     i2l9792:
 20527                           
 20528                           ;UI.c: 227: change_state_to_menu_11();
 20529  0034B6  EC51  F02D         	call	_change_state_to_menu_11	;wreg free
 20530                           
 20531                           ;UI.c: 228: break;
 20532  0034BA  D143               	goto	i2l273
 20533  0034BC                     i2l9794:
 20534                           
 20535                           ;UI.c: 231: if(up){
 20536  0034BC  5075               	movf	_up,w,c
 20537  0034BE  1076               	iorwf	_up+1,w,c
 20538  0034C0  B4D8               	btfsc	status,2,c
 20539  0034C2  D003               	goto	i2l9798
 20540                           
 20541                           ;UI.c: 232: change_state_to_menu_23();
 20542  0034C4  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 20543                           
 20544                           ;UI.c: 233: }
 20545  0034C8  D13C               	goto	i2l273
 20546  0034CA                     i2l9798:
 20547                           
 20548                           ;UI.c: 234: else if(down){
 20549  0034CA  5065               	movf	_down,w,c
 20550  0034CC  1066               	iorwf	_down+1,w,c
 20551  0034CE  B4D8               	btfsc	status,2,c
 20552  0034D0  D003               	goto	i2l9802
 20553                           
 20554                           ;UI.c: 235: change_state_to_menu_12();
 20555  0034D2  EC21  F02D         	call	i2_change_state_to_menu_12	;wreg free
 20556                           
 20557                           ;UI.c: 236: }
 20558  0034D6  D135               	goto	i2l273
 20559  0034D8                     i2l9802:
 20560                           
 20561                           ;UI.c: 237: else if(enter){
 20562  0034D8  5067               	movf	_enter,w,c
 20563  0034DA  1068               	iorwf	_enter+1,w,c
 20564  0034DC  B4D8               	btfsc	status,2,c
 20565  0034DE  D131               	goto	i2l273
 20566                           
 20567                           ;UI.c: 238: change_state_to_menu_start();
 20568  0034E0  EC64  F02E         	call	i2_change_state_to_menu_start	;wreg free
 20569                           
 20570                           ;UI.c: 239: }
 20571                           ;UI.c: 240: break;
 20572  0034E4  D12E               	goto	i2l273
 20573  0034E6                     i2l9806:
 20574                           
 20575                           ;UI.c: 243: if(up){
 20576  0034E6  5075               	movf	_up,w,c
 20577  0034E8  1076               	iorwf	_up+1,w,c
 20578  0034EA  B4D8               	btfsc	status,2,c
 20579  0034EC  D003               	goto	i2l9810
 20580                           
 20581                           ;UI.c: 244: change_state_to_menu_11();
 20582  0034EE  EC51  F02D         	call	_change_state_to_menu_11	;wreg free
 20583                           
 20584                           ;UI.c: 245: }
 20585  0034F2  D127               	goto	i2l273
 20586  0034F4                     i2l9810:
 20587                           
 20588                           ;UI.c: 246: else if(down){
 20589  0034F4  5065               	movf	_down,w,c
 20590  0034F6  1066               	iorwf	_down+1,w,c
 20591  0034F8  B4D8               	btfsc	status,2,c
 20592  0034FA  D011               	goto	i2l9826
 20593                           
 20594                           ;UI.c: 247: change_state_to_menu_23();
 20595  0034FC  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 20596                           
 20597                           ;UI.c: 248: }
 20598  003500  D120               	goto	i2l273
 20599  003502                     i2l9818:
 20600                           
 20601                           ;UI.c: 255: if(up){
 20602  003502  5075               	movf	_up,w,c
 20603  003504  1076               	iorwf	_up+1,w,c
 20604  003506  B4D8               	btfsc	status,2,c
 20605  003508  D003               	goto	i2l9822
 20606                           
 20607                           ;UI.c: 256: change_state_to_menu_11();
 20608  00350A  EC51  F02D         	call	_change_state_to_menu_11	;wreg free
 20609                           
 20610                           ;UI.c: 257: }
 20611  00350E  D119               	goto	i2l273
 20612  003510                     i2l9822:
 20613                           
 20614                           ;UI.c: 258: else if(down){
 20615  003510  5065               	movf	_down,w,c
 20616  003512  1066               	iorwf	_down+1,w,c
 20617  003514  B4D8               	btfsc	status,2,c
 20618  003516  D003               	goto	i2l9826
 20619                           
 20620                           ;UI.c: 259: change_state_to_menu_23();
 20621  003518  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 20622                           
 20623                           ;UI.c: 260: }
 20624  00351C  D112               	goto	i2l273
 20625  00351E                     i2l9826:
 20626                           
 20627                           ;UI.c: 261: else if(enter){
 20628  00351E  5067               	movf	_enter,w,c
 20629  003520  1068               	iorwf	_enter+1,w,c
 20630  003522  B4D8               	btfsc	status,2,c
 20631  003524  D10E               	goto	i2l273
 20632                           
 20633                           ;UI.c: 262: machine_state = Sorting_state;
 20634  003526  0E01               	movlw	1
 20635  003528  0100               	movlb	0	; () banked
 20636  00352A  6FFC               	movwf	_machine_state& (0+255),b
 20637                           
 20638                           ; BSR set to: 0
 20639                           ;UI.c: 263: }
 20640                           ;UI.c: 264: break;
 20641                           
 20642                           ; BSR set to: 0
 20643                           
 20644                           ; BSR set to: 0
 20645  00352C  D10A               	goto	i2l273
 20646  00352E                     i2l9830:
 20647                           
 20648                           ;UI.c: 267: if(up){
 20649  00352E  5075               	movf	_up,w,c
 20650  003530  1076               	iorwf	_up+1,w,c
 20651  003532  B4D8               	btfsc	status,2,c
 20652  003534  D003               	goto	i2l9834
 20653                           
 20654                           ;UI.c: 268: change_state_to_menu_22();
 20655  003536  EC09  F02D         	call	i2_change_state_to_menu_22	;wreg free
 20656                           
 20657                           ;UI.c: 269: }
 20658  00353A  D103               	goto	i2l273
 20659  00353C                     i2l9834:
 20660                           
 20661                           ;UI.c: 270: else if(down){
 20662  00353C  5065               	movf	_down,w,c
 20663  00353E  1066               	iorwf	_down+1,w,c
 20664  003540  B4D8               	btfsc	status,2,c
 20665  003542  D003               	goto	i2l9838
 20666                           
 20667                           ;UI.c: 271: change_state_to_menu_11();
 20668  003544  EC51  F02D         	call	_change_state_to_menu_11	;wreg free
 20669                           
 20670                           ;UI.c: 272: }
 20671  003548  D0FC               	goto	i2l273
 20672  00354A                     i2l9838:
 20673                           
 20674                           ;UI.c: 273: else if(enter){
 20675  00354A  5067               	movf	_enter,w,c
 20676  00354C  1068               	iorwf	_enter+1,w,c
 20677  00354E  B4D8               	btfsc	status,2,c
 20678  003550  D0F8               	goto	i2l273
 20679                           
 20680                           ;UI.c: 274: change_state_to_logs_11();
 20681  003552  ECC9  F02D         	call	_change_state_to_logs_11	;wreg free
 20682                           
 20683                           ;UI.c: 275: }
 20684                           ;UI.c: 276: break;
 20685  003556  D0F5               	goto	i2l273
 20686  003558                     i2l9842:
 20687                           
 20688                           ;UI.c: 279: if(up){
 20689  003558  5075               	movf	_up,w,c
 20690  00355A  1076               	iorwf	_up+1,w,c
 20691  00355C  B4D8               	btfsc	status,2,c
 20692  00355E  D003               	goto	i2l9846
 20693                           
 20694                           ;UI.c: 280: change_state_to_logs_34();
 20695  003560  EC69  F02D         	call	_change_state_to_logs_34	;wreg free
 20696                           
 20697                           ;UI.c: 281: }
 20698  003564  D0EE               	goto	i2l273
 20699  003566                     i2l9846:
 20700                           
 20701                           ;UI.c: 282: else if(down){
 20702  003566  5065               	movf	_down,w,c
 20703  003568  1066               	iorwf	_down+1,w,c
 20704  00356A  B4D8               	btfsc	status,2,c
 20705  00356C  D003               	goto	i2l9850
 20706                           
 20707                           ;UI.c: 283: change_state_to_logs_12();
 20708  00356E  ECB1  F02D         	call	_change_state_to_logs_12	;wreg free
 20709                           
 20710                           ;UI.c: 284: }
 20711  003572  D0E7               	goto	i2l273
 20712  003574                     i2l9850:
 20713                           
 20714                           ;UI.c: 285: else if(enter){
 20715  003574  5067               	movf	_enter,w,c
 20716  003576  1068               	iorwf	_enter+1,w,c
 20717  003578  B4D8               	btfsc	status,2,c
 20718  00357A  D007               	goto	i2l9854
 20719                           
 20720                           ;UI.c: 286: dispLogs(1);
 20721  00357C  0E00               	movlw	0
 20722  00357E  6E13               	movwf	dispLogs@myLog+1,c
 20723  003580  0E01               	movlw	1
 20724  003582  6E12               	movwf	dispLogs@myLog,c
 20725  003584  EC9E  F02E         	call	_dispLogs	;wreg free
 20726                           
 20727                           ;UI.c: 287: }
 20728  003588  D0DC               	goto	i2l273
 20729  00358A                     i2l9854:
 20730                           
 20731                           ;UI.c: 288: else if(back){
 20732  00358A  5063               	movf	_back,w,c
 20733  00358C  1064               	iorwf	_back+1,w,c
 20734  00358E  B4D8               	btfsc	status,2,c
 20735  003590  D0D8               	goto	i2l273
 20736                           
 20737                           ;UI.c: 289: change_state_to_menu_23();
 20738  003592  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 20739                           
 20740                           ;UI.c: 290: }
 20741                           ;UI.c: 291: break;
 20742  003596  D0D5               	goto	i2l273
 20743  003598                     i2l9858:
 20744                           
 20745                           ;UI.c: 294: if(up){
 20746  003598  5075               	movf	_up,w,c
 20747  00359A  1076               	iorwf	_up+1,w,c
 20748  00359C  B4D8               	btfsc	status,2,c
 20749  00359E  D003               	goto	i2l9862
 20750                           
 20751                           ;UI.c: 295: change_state_to_logs_11();
 20752  0035A0  ECC9  F02D         	call	_change_state_to_logs_11	;wreg free
 20753                           
 20754                           ;UI.c: 296: }
 20755  0035A4  D0CE               	goto	i2l273
 20756  0035A6                     i2l9862:
 20757                           
 20758                           ;UI.c: 297: else if(down){
 20759  0035A6  5065               	movf	_down,w,c
 20760  0035A8  1066               	iorwf	_down+1,w,c
 20761  0035AA  B4D8               	btfsc	status,2,c
 20762  0035AC  D003               	goto	i2l9866
 20763                           
 20764                           ;UI.c: 298: change_state_to_logs_23();
 20765  0035AE  ECF8  F02D         	call	_change_state_to_logs_23	;wreg free
 20766                           
 20767                           ;UI.c: 299: }
 20768  0035B2  D0C7               	goto	i2l273
 20769  0035B4                     i2l9866:
 20770                           
 20771                           ;UI.c: 300: else if(enter){
 20772  0035B4  5067               	movf	_enter,w,c
 20773  0035B6  1068               	iorwf	_enter+1,w,c
 20774  0035B8  B4D8               	btfsc	status,2,c
 20775  0035BA  D007               	goto	i2l9870
 20776                           
 20777                           ;UI.c: 301: dispLogs(2);
 20778  0035BC  0E00               	movlw	0
 20779  0035BE  6E13               	movwf	dispLogs@myLog+1,c
 20780  0035C0  0E02               	movlw	2
 20781  0035C2  6E12               	movwf	dispLogs@myLog,c
 20782  0035C4  EC9E  F02E         	call	_dispLogs	;wreg free
 20783                           
 20784                           ;UI.c: 302: }
 20785  0035C8  D0BC               	goto	i2l273
 20786  0035CA                     i2l9870:
 20787                           
 20788                           ;UI.c: 303: else if(back){
 20789  0035CA  5063               	movf	_back,w,c
 20790  0035CC  1064               	iorwf	_back+1,w,c
 20791  0035CE  B4D8               	btfsc	status,2,c
 20792  0035D0  D0B8               	goto	i2l273
 20793                           
 20794                           ;UI.c: 304: change_state_to_menu_23();
 20795  0035D2  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 20796                           
 20797                           ;UI.c: 305: }
 20798                           ;UI.c: 306: break;
 20799  0035D6  D0B5               	goto	i2l273
 20800  0035D8                     i2l9874:
 20801                           
 20802                           ;UI.c: 309: if(up){
 20803  0035D8  5075               	movf	_up,w,c
 20804  0035DA  1076               	iorwf	_up+1,w,c
 20805  0035DC  B4D8               	btfsc	status,2,c
 20806  0035DE  D003               	goto	i2l9878
 20807                           
 20808                           ;UI.c: 310: change_state_to_logs_11();
 20809  0035E0  ECC9  F02D         	call	_change_state_to_logs_11	;wreg free
 20810                           
 20811                           ;UI.c: 311: }
 20812  0035E4  D0AE               	goto	i2l273
 20813  0035E6                     i2l9878:
 20814                           
 20815                           ;UI.c: 312: else if(down){
 20816  0035E6  5065               	movf	_down,w,c
 20817  0035E8  1066               	iorwf	_down+1,w,c
 20818  0035EA  B4D8               	btfsc	status,2,c
 20819  0035EC  D003               	goto	i2l9882
 20820                           
 20821                           ;UI.c: 313: change_state_to_logs_23();
 20822  0035EE  ECF8  F02D         	call	_change_state_to_logs_23	;wreg free
 20823                           
 20824                           ;UI.c: 314: }
 20825  0035F2  D0A7               	goto	i2l273
 20826  0035F4                     i2l9882:
 20827                           
 20828                           ;UI.c: 315: else if(enter){
 20829  0035F4  5067               	movf	_enter,w,c
 20830  0035F6  1068               	iorwf	_enter+1,w,c
 20831  0035F8  B4D8               	btfsc	status,2,c
 20832  0035FA  D007               	goto	i2l9886
 20833                           
 20834                           ;UI.c: 316: dispLogs(2);
 20835  0035FC  0E00               	movlw	0
 20836  0035FE  6E13               	movwf	dispLogs@myLog+1,c
 20837  003600  0E02               	movlw	2
 20838  003602  6E12               	movwf	dispLogs@myLog,c
 20839  003604  EC9E  F02E         	call	_dispLogs	;wreg free
 20840                           
 20841                           ;UI.c: 317: }
 20842  003608  D09C               	goto	i2l273
 20843  00360A                     i2l9886:
 20844                           
 20845                           ;UI.c: 318: else if(back){
 20846  00360A  5063               	movf	_back,w,c
 20847  00360C  1064               	iorwf	_back+1,w,c
 20848  00360E  B4D8               	btfsc	status,2,c
 20849  003610  D098               	goto	i2l273
 20850                           
 20851                           ;UI.c: 319: change_state_to_menu_23();
 20852  003612  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 20853                           
 20854                           ;UI.c: 320: }
 20855                           ;UI.c: 321: break;
 20856  003616  D095               	goto	i2l273
 20857  003618                     i2l9890:
 20858                           
 20859                           ;UI.c: 324: if(up){
 20860  003618  5075               	movf	_up,w,c
 20861  00361A  1076               	iorwf	_up+1,w,c
 20862  00361C  B4D8               	btfsc	status,2,c
 20863  00361E  D003               	goto	i2l9894
 20864                           
 20865                           ;UI.c: 325: change_state_to_logs_22();
 20866  003620  EC99  F02D         	call	_change_state_to_logs_22	;wreg free
 20867                           
 20868                           ;UI.c: 326: }
 20869  003624  D08E               	goto	i2l273
 20870  003626                     i2l9894:
 20871                           
 20872                           ;UI.c: 327: else if(down){
 20873  003626  5065               	movf	_down,w,c
 20874  003628  1066               	iorwf	_down+1,w,c
 20875  00362A  B4D8               	btfsc	status,2,c
 20876  00362C  D003               	goto	i2l9898
 20877                           
 20878                           ;UI.c: 328: change_state_to_logs_34();
 20879  00362E  EC69  F02D         	call	_change_state_to_logs_34	;wreg free
 20880                           
 20881                           ;UI.c: 329: }
 20882  003632  D087               	goto	i2l273
 20883  003634                     i2l9898:
 20884                           
 20885                           ;UI.c: 330: else if(enter){
 20886  003634  5067               	movf	_enter,w,c
 20887  003636  1068               	iorwf	_enter+1,w,c
 20888  003638  B4D8               	btfsc	status,2,c
 20889  00363A  D007               	goto	i2l9902
 20890                           
 20891                           ;UI.c: 331: dispLogs(3);
 20892  00363C  0E00               	movlw	0
 20893  00363E  6E13               	movwf	dispLogs@myLog+1,c
 20894  003640  0E03               	movlw	3
 20895  003642  6E12               	movwf	dispLogs@myLog,c
 20896  003644  EC9E  F02E         	call	_dispLogs	;wreg free
 20897                           
 20898                           ;UI.c: 332: }
 20899  003648  D07C               	goto	i2l273
 20900  00364A                     i2l9902:
 20901                           
 20902                           ;UI.c: 333: else if(back){
 20903  00364A  5063               	movf	_back,w,c
 20904  00364C  1064               	iorwf	_back+1,w,c
 20905  00364E  B4D8               	btfsc	status,2,c
 20906  003650  D078               	goto	i2l273
 20907                           
 20908                           ;UI.c: 334: change_state_to_menu_23();
 20909  003652  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 20910                           
 20911                           ;UI.c: 335: }
 20912                           ;UI.c: 336: break;
 20913  003656  D075               	goto	i2l273
 20914  003658                     i2l9906:
 20915                           
 20916                           ;UI.c: 339: if(up){
 20917  003658  5075               	movf	_up,w,c
 20918  00365A  1076               	iorwf	_up+1,w,c
 20919  00365C  B4D8               	btfsc	status,2,c
 20920  00365E  D003               	goto	i2l9910
 20921                           
 20922                           ;UI.c: 340: change_state_to_logs_22();
 20923  003660  EC99  F02D         	call	_change_state_to_logs_22	;wreg free
 20924                           
 20925                           ;UI.c: 341: }
 20926  003664  D06E               	goto	i2l273
 20927  003666                     i2l9910:
 20928                           
 20929                           ;UI.c: 342: else if(down){
 20930  003666  5065               	movf	_down,w,c
 20931  003668  1066               	iorwf	_down+1,w,c
 20932  00366A  B4D8               	btfsc	status,2,c
 20933  00366C  D003               	goto	i2l9914
 20934                           
 20935                           ;UI.c: 343: change_state_to_logs_34();
 20936  00366E  EC69  F02D         	call	_change_state_to_logs_34	;wreg free
 20937                           
 20938                           ;UI.c: 344: }
 20939  003672  D067               	goto	i2l273
 20940  003674                     i2l9914:
 20941                           
 20942                           ;UI.c: 345: else if(enter){
 20943  003674  5067               	movf	_enter,w,c
 20944  003676  1068               	iorwf	_enter+1,w,c
 20945  003678  B4D8               	btfsc	status,2,c
 20946  00367A  D007               	goto	i2l9918
 20947                           
 20948                           ;UI.c: 346: dispLogs(3);
 20949  00367C  0E00               	movlw	0
 20950  00367E  6E13               	movwf	dispLogs@myLog+1,c
 20951  003680  0E03               	movlw	3
 20952  003682  6E12               	movwf	dispLogs@myLog,c
 20953  003684  EC9E  F02E         	call	_dispLogs	;wreg free
 20954                           
 20955                           ;UI.c: 347: }
 20956  003688  D05C               	goto	i2l273
 20957  00368A                     i2l9918:
 20958                           
 20959                           ;UI.c: 348: else if(back){
 20960  00368A  5063               	movf	_back,w,c
 20961  00368C  1064               	iorwf	_back+1,w,c
 20962  00368E  B4D8               	btfsc	status,2,c
 20963  003690  D058               	goto	i2l273
 20964                           
 20965                           ;UI.c: 349: change_state_to_menu_23();
 20966  003692  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 20967                           
 20968                           ;UI.c: 350: }
 20969                           ;UI.c: 351: break;
 20970  003696  D055               	goto	i2l273
 20971  003698                     i2l9922:
 20972                           
 20973                           ;UI.c: 354: if(up){
 20974  003698  5075               	movf	_up,w,c
 20975  00369A  1076               	iorwf	_up+1,w,c
 20976  00369C  B4D8               	btfsc	status,2,c
 20977  00369E  D003               	goto	i2l9926
 20978                           
 20979                           ;UI.c: 355: change_state_to_logs_33();
 20980  0036A0  EC81  F02D         	call	_change_state_to_logs_33	;wreg free
 20981                           
 20982                           ;UI.c: 356: }
 20983  0036A4  D04E               	goto	i2l273
 20984  0036A6                     i2l9926:
 20985                           
 20986                           ;UI.c: 357: else if(down){
 20987  0036A6  5065               	movf	_down,w,c
 20988  0036A8  1066               	iorwf	_down+1,w,c
 20989  0036AA  B4D8               	btfsc	status,2,c
 20990  0036AC  D003               	goto	i2l9930
 20991                           
 20992                           ;UI.c: 358: change_state_to_logs_11();
 20993  0036AE  ECC9  F02D         	call	_change_state_to_logs_11	;wreg free
 20994                           
 20995                           ;UI.c: 359: }
 20996  0036B2  D047               	goto	i2l273
 20997  0036B4                     i2l9930:
 20998                           
 20999                           ;UI.c: 360: else if(enter){
 21000  0036B4  5067               	movf	_enter,w,c
 21001  0036B6  1068               	iorwf	_enter+1,w,c
 21002  0036B8  B4D8               	btfsc	status,2,c
 21003  0036BA  D007               	goto	i2l9934
 21004                           
 21005                           ;UI.c: 361: dispLogs(4);
 21006  0036BC  0E00               	movlw	0
 21007  0036BE  6E13               	movwf	dispLogs@myLog+1,c
 21008  0036C0  0E04               	movlw	4
 21009  0036C2  6E12               	movwf	dispLogs@myLog,c
 21010  0036C4  EC9E  F02E         	call	_dispLogs	;wreg free
 21011                           
 21012                           ;UI.c: 362: }
 21013  0036C8  D03C               	goto	i2l273
 21014  0036CA                     i2l9934:
 21015                           
 21016                           ;UI.c: 363: else if(back){
 21017  0036CA  5063               	movf	_back,w,c
 21018  0036CC  1064               	iorwf	_back+1,w,c
 21019  0036CE  B4D8               	btfsc	status,2,c
 21020  0036D0  D038               	goto	i2l273
 21021                           
 21022                           ;UI.c: 364: change_state_to_menu_23();
 21023  0036D2  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 21024                           
 21025                           ;UI.c: 370: }
 21026                           
 21027                           ;UI.c: 369: break;
 21028                           
 21029                           ;UI.c: 368: default:
 21030                           
 21031                           ;UI.c: 365: }
 21032                           ;UI.c: 366: break;
 21033  0036D6  D035               	goto	i2l273
 21034  0036D8                     i2l9940:
 21035  0036D8  C0E6  F043         	movff	_cur_state,??_updateMenu
 21036  0036DC  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 21037                           
 21038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 21039                           ; Switch size 1, requested type "space"
 21040                           ; Number of cases is 3, Range of values is 0 to 4
 21041                           ; switch strategies available:
 21042                           ; Name         Instructions Cycles
 21043                           ; simple_byte           10     6 (average)
 21044                           ;	Chosen strategy is simple_byte
 21045  0036E0  5044               	movf	??_updateMenu+1,w,c
 21046  0036E2  0A00               	xorlw	0	; case 0
 21047  0036E4  B4D8               	btfsc	status,2,c
 21048  0036E6  D007               	goto	i2l10924
 21049  0036E8  0A03               	xorlw	3	; case 3
 21050  0036EA  B4D8               	btfsc	status,2,c
 21051  0036EC  D015               	goto	i2l10926
 21052  0036EE  0A07               	xorlw	7	; case 4
 21053  0036F0  B4D8               	btfsc	status,2,c
 21054  0036F2  D020               	goto	i2l10928
 21055  0036F4  D026               	goto	i2l273
 21056  0036F6                     i2l10924:
 21057                           
 21058                           ; Switch size 1, requested type "space"
 21059                           ; Number of cases is 5, Range of values is 0 to 23
 21060                           ; switch strategies available:
 21061                           ; Name         Instructions Cycles
 21062                           ; simple_byte           16     9 (average)
 21063                           ;	Chosen strategy is simple_byte
 21064  0036F6  5043               	movf	??_updateMenu,w,c
 21065  0036F8  0A00               	xorlw	0	; case 0
 21066  0036FA  B4D8               	btfsc	status,2,c
 21067  0036FC  D6DC               	goto	i2l9792
 21068  0036FE  0A0B               	xorlw	11	; case 11
 21069  003700  B4D8               	btfsc	status,2,c
 21070  003702  D6DC               	goto	i2l9794
 21071  003704  0A07               	xorlw	7	; case 12
 21072  003706  B4D8               	btfsc	status,2,c
 21073  003708  D6EE               	goto	i2l9806
 21074  00370A  0A1A               	xorlw	26	; case 22
 21075  00370C  B4D8               	btfsc	status,2,c
 21076  00370E  D6F9               	goto	i2l9818
 21077  003710  0A01               	xorlw	1	; case 23
 21078  003712  B4D8               	btfsc	status,2,c
 21079  003714  D70C               	goto	i2l9830
 21080  003716  D015               	goto	i2l273
 21081  003718                     i2l10926:
 21082                           
 21083                           ; Switch size 1, requested type "space"
 21084                           ; Number of cases is 4, Range of values is 243 to 255
 21085                           ; switch strategies available:
 21086                           ; Name         Instructions Cycles
 21087                           ; simple_byte           13     7 (average)
 21088                           ;	Chosen strategy is simple_byte
 21089  003718  5043               	movf	??_updateMenu,w,c
 21090  00371A  0AF3               	xorlw	243	; case 243
 21091  00371C  B4D8               	btfsc	status,2,c
 21092  00371E  D71C               	goto	i2l9842
 21093  003720  0A07               	xorlw	7	; case 244
 21094  003722  B4D8               	btfsc	status,2,c
 21095  003724  D739               	goto	i2l9858
 21096  003726  0A0A               	xorlw	10	; case 254
 21097  003728  B4D8               	btfsc	status,2,c
 21098  00372A  D756               	goto	i2l9874
 21099  00372C  0A01               	xorlw	1	; case 255
 21100  00372E  B4D8               	btfsc	status,2,c
 21101  003730  D773               	goto	i2l9890
 21102  003732  D007               	goto	i2l273
 21103  003734                     i2l10928:
 21104                           
 21105                           ; Switch size 1, requested type "space"
 21106                           ; Number of cases is 2, Range of values is 9 to 10
 21107                           ; switch strategies available:
 21108                           ; Name         Instructions Cycles
 21109                           ; simple_byte            7     4 (average)
 21110                           ;	Chosen strategy is simple_byte
 21111  003734  5043               	movf	??_updateMenu,w,c
 21112  003736  0A09               	xorlw	9	; case 9
 21113  003738  B4D8               	btfsc	status,2,c
 21114  00373A  D78E               	goto	i2l9906
 21115  00373C  0A03               	xorlw	3	; case 10
 21116  00373E  B4D8               	btfsc	status,2,c
 21117  003740  D7AB               	goto	i2l9922
 21118  003742                     i2l273:
 21119                           
 21120                           ;UI.c: 371: }
 21121                           ;UI.c: 372: (INTCONbits.GIE = 1);
 21122  003742  8EF2               	bsf	intcon,7,c	;volatile
 21123  003744  0012               	return		;funcret
 21124  003746                     __end_of_updateMenu:
 21125                           	opt stack 0
 21126                           pclatu	equ	0xFFB
 21127                           pclath	equ	0xFFA
 21128                           tblptru	equ	0xFF8
 21129                           tblptrh	equ	0xFF7
 21130                           tblptrl	equ	0xFF6
 21131                           tablat	equ	0xFF5
 21132                           prodh	equ	0xFF4
 21133                           prodl	equ	0xFF3
 21134                           intcon	equ	0xFF2
 21135                           intcon2	equ	0xFF1
 21136                           intcon3	equ	0xFF0
 21137                           indf0	equ	0xFEF
 21138                           postinc0	equ	0xFEE
 21139                           fsr0h	equ	0xFEA
 21140                           fsr0l	equ	0xFE9
 21141                           wreg	equ	0xFE8
 21142                           postdec1	equ	0xFE5
 21143                           fsr1h	equ	0xFE2
 21144                           fsr1l	equ	0xFE1
 21145                           indf2	equ	0xFDF
 21146                           postinc2	equ	0xFDE
 21147                           postdec2	equ	0xFDD
 21148                           fsr2h	equ	0xFDA
 21149                           fsr2l	equ	0xFD9
 21150                           status	equ	0xFD8
 21151                           
 21152 ;; *************** function i2_change_state_to_menu_start *****************
 21153 ;; Defined at:
 21154 ;;		line 477 in file "UI.c"
 21155 ;; Parameters:    Size  Location     Type
 21156 ;;		None
 21157 ;; Auto vars:     Size  Location     Type
 21158 ;;		None
 21159 ;; Return value:  Size  Location     Type
 21160 ;;                  1    wreg      void 
 21161 ;; Registers used:
 21162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21163 ;; Tracked objects:
 21164 ;;		On entry : 0/0
 21165 ;;		On exit  : 0/0
 21166 ;;		Unchanged: 0/0
 21167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21172 ;;Total ram usage:        0 bytes
 21173 ;; Hardware stack levels used:    1
 21174 ;; Hardware stack levels required when called:    4
 21175 ;; This function calls:
 21176 ;;		i2_lcdInst
 21177 ;;		i2_printRTC
 21178 ;;		i2_printf
 21179 ;; This function is called by:
 21180 ;;		_updateMenu
 21181 ;;		_handler
 21182 ;; This function uses a non-reentrant model
 21183 ;;
 21184                           
 21185                           	psect	text68
 21186  005CC8                     __ptext68:
 21187                           	opt stack 0
 21188  005CC8                     i2_change_state_to_menu_start:
 21189                           	opt stack 19
 21190                           
 21191                           ;UI.c: 478: cur_state = 0;
 21192                           
 21193                           ;incstack = 0
 21194  005CC8  0E00               	movlw	0
 21195  005CCA  0100               	movlb	0	; () banked
 21196  005CCC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21197  005CCE  0E00               	movlw	0
 21198  005CD0  6FE6               	movwf	_cur_state& (0+255),b
 21199                           
 21200                           ; BSR set to: 0
 21201                           ;UI.c: 480: lcdInst(0b10000000);;
 21202  005CD2  0E80               	movlw	128
 21203  005CD4  EC48  F02F         	call	i2_lcdInst
 21204                           
 21205                           ;UI.c: 481: printRTC();
 21206  005CD8  ECA3  F01B         	call	i2_printRTC	;wreg free
 21207                           
 21208                           ;UI.c: 482: lcdInst(0b11000000);;
 21209  005CDC  0EC0               	movlw	192
 21210  005CDE  EC48  F02F         	call	i2_lcdInst
 21211                           
 21212                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 21213  005CE2  0EEA               	movlw	low STR_30
 21214  005CE4  6E0D               	movwf	i2printf@f,c
 21215  005CE6  0EFD               	movlw	high STR_30
 21216  005CE8  6E0E               	movwf	i2printf@f+1,c
 21217  005CEA  EC7A  F012         	call	i2_printf	;wreg free
 21218  005CEE  0012               	return		;funcret
 21219  005CF0                     __end_ofi2_change_state_to_menu_start:
 21220                           	opt stack 0
 21221                           pclatu	equ	0xFFB
 21222                           pclath	equ	0xFFA
 21223                           tblptru	equ	0xFF8
 21224                           tblptrh	equ	0xFF7
 21225                           tblptrl	equ	0xFF6
 21226                           tablat	equ	0xFF5
 21227                           prodh	equ	0xFF4
 21228                           prodl	equ	0xFF3
 21229                           intcon	equ	0xFF2
 21230                           intcon2	equ	0xFF1
 21231                           intcon3	equ	0xFF0
 21232                           indf0	equ	0xFEF
 21233                           postinc0	equ	0xFEE
 21234                           fsr0h	equ	0xFEA
 21235                           fsr0l	equ	0xFE9
 21236                           wreg	equ	0xFE8
 21237                           postdec1	equ	0xFE5
 21238                           fsr1h	equ	0xFE2
 21239                           fsr1l	equ	0xFE1
 21240                           indf2	equ	0xFDF
 21241                           postinc2	equ	0xFDE
 21242                           postdec2	equ	0xFDD
 21243                           fsr2h	equ	0xFDA
 21244                           fsr2l	equ	0xFD9
 21245                           status	equ	0xFD8
 21246                           
 21247 ;; *************** function i2_printRTC *****************
 21248 ;; Defined at:
 21249 ;;		line 63 in file "RTC.c"
 21250 ;; Parameters:    Size  Location     Type
 21251 ;;		None
 21252 ;; Auto vars:     Size  Location     Type
 21253 ;;  printRTC       14   44[COMRAM] int [7]
 21254 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 21255 ;;  printRTC        2   64[COMRAM] int 
 21256 ;;  printRTC        2   58[COMRAM] int 
 21257 ;; Return value:  Size  Location     Type
 21258 ;;                  1    wreg      void 
 21259 ;; Registers used:
 21260 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21261 ;; Tracked objects:
 21262 ;;		On entry : 0/0
 21263 ;;		On exit  : 0/0
 21264 ;;		Unchanged: 0/0
 21265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21267 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21268 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21269 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21270 ;;Total ram usage:       25 bytes
 21271 ;; Hardware stack levels used:    1
 21272 ;; Hardware stack levels required when called:    3
 21273 ;; This function calls:
 21274 ;;		i2_getRTC
 21275 ;;		i2_lcdInst
 21276 ;;		i2_printf
 21277 ;;		i2_strcpy
 21278 ;; This function is called by:
 21279 ;;		i2_change_state_to_menu_start
 21280 ;; This function uses a non-reentrant model
 21281 ;;
 21282                           
 21283                           	psect	text69
 21284  003746                     __ptext69:
 21285                           	opt stack 0
 21286  003746                     i2_printRTC:
 21287                           	opt stack 19
 21288                           
 21289                           ;RTC.c: 64: getRTC();
 21290                           
 21291                           ;incstack = 0
 21292  003746  EC69  F029         	call	i2_getRTC	;wreg free
 21293                           
 21294                           ;RTC.c: 65: char month[] = "MMM";
 21295  00374A  C151  F03D         	movff	printRTC@F3240,i2printRTC@month
 21296  00374E  C152  F03E         	movff	printRTC@F3240+1,i2printRTC@month+1
 21297  003752  C153  F03F         	movff	printRTC@F3240+2,i2printRTC@month+2
 21298  003756  C154  F040         	movff	printRTC@F3240+3,i2printRTC@month+3
 21299                           
 21300                           ;RTC.c: 66: int INT_time[7];
 21301                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21302  00375A  0E00               	movlw	0
 21303  00375C  6E42               	movwf	i2printRTC@i+1,c
 21304  00375E  0E00               	movlw	0
 21305  003760  6E41               	movwf	i2printRTC@i,c
 21306  003762  BE42               	btfsc	i2printRTC@i+1,7,c
 21307  003764  D006               	goto	i2l7672
 21308  003766  5042               	movf	i2printRTC@i+1,w,c
 21309  003768  E135               	bnz	i2l632
 21310  00376A  0E07               	movlw	7
 21311  00376C  5C41               	subwf	i2printRTC@i,w,c
 21312  00376E  B0D8               	btfsc	status,0,c
 21313  003770  D031               	goto	i2l632
 21314  003772                     i2l7672:
 21315                           
 21316                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21317  003772  0E1C               	movlw	low _time
 21318  003774  2441               	addwf	i2printRTC@i,w,c
 21319  003776  6ED9               	movwf	fsr2l,c
 21320  003778  0E01               	movlw	high _time
 21321  00377A  2042               	addwfc	i2printRTC@i+1,w,c
 21322  00377C  6EDA               	movwf	fsr2h,c
 21323  00377E  50DF               	movf	indf2,w,c
 21324  003780  6E2A               	movwf	??i2_printRTC& (0+255),c
 21325  003782  3A2A               	swapf	??i2_printRTC,f,c
 21326  003784  0E0F               	movlw	15
 21327  003786  162A               	andwf	??i2_printRTC,f,c
 21328  003788  0E0F               	movlw	15
 21329  00378A  162A               	andwf	??i2_printRTC,f,c
 21330  00378C  502A               	movf	??i2_printRTC,w,c
 21331  00378E  0D0A               	mullw	10
 21332  003790  0E1C               	movlw	low _time
 21333  003792  2441               	addwf	i2printRTC@i,w,c
 21334  003794  6ED9               	movwf	fsr2l,c
 21335  003796  0E01               	movlw	high _time
 21336  003798  2042               	addwfc	i2printRTC@i+1,w,c
 21337  00379A  6EDA               	movwf	fsr2h,c
 21338  00379C  50DF               	movf	indf2,w,c
 21339  00379E  0B0F               	andlw	15
 21340  0037A0  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21341  0037A2  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21342  0037A4  50F3               	movf	prodl,w,c
 21343  0037A6  262B               	addwf	??i2_printRTC+1,f,c
 21344  0037A8  50F4               	movf	prodh,w,c
 21345  0037AA  222C               	addwfc	??i2_printRTC+2,f,c
 21346  0037AC  90D8               	bcf	status,0,c
 21347  0037AE  3441               	rlcf	i2printRTC@i,w,c
 21348  0037B0  6ED9               	movwf	fsr2l,c
 21349  0037B2  3442               	rlcf	i2printRTC@i+1,w,c
 21350  0037B4  6EDA               	movwf	fsr2h,c
 21351  0037B6  0E2D               	movlw	low i2printRTC@INT_time
 21352  0037B8  26D9               	addwf	fsr2l,f,c
 21353  0037BA  0E00               	movlw	high i2printRTC@INT_time
 21354  0037BC  22DA               	addwfc	fsr2h,f,c
 21355  0037BE  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21356  0037C2  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21357  0037C6  4A41               	infsnz	i2printRTC@i,f,c
 21358  0037C8  2A42               	incf	i2printRTC@i+1,f,c
 21359  0037CA  BE42               	btfsc	i2printRTC@i+1,7,c
 21360  0037CC  D7D2               	goto	i2l7672
 21361  0037CE  5042               	movf	i2printRTC@i+1,w,c
 21362  0037D0  E101               	bnz	i2u652_40
 21363  0037D2  D7CB               	goto	L17
 21364  0037D4                     i2u652_40:
 21365  0037D4                     i2l632:
 21366                           
 21367                           ;RTC.c: 69: }
 21368                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21369  0037D4  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21370  0037D8  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21371                           
 21372                           ;RTC.c: 72: switch(RTC_month){
 21373  0037DC  D084               	goto	i2l7704
 21374  0037DE                     i2l7678:
 21375                           
 21376                           ;RTC.c: 74: strcpy(month, "JAN");
 21377  0037DE  0E3D               	movlw	low i2printRTC@month
 21378  0037E0  6E01               	movwf	i2strcpy@to,c
 21379  0037E2  0E00               	movlw	high i2printRTC@month
 21380  0037E4  6E02               	movwf	i2strcpy@to+1,c
 21381  0037E6  0EDA               	movlw	low STR_8
 21382  0037E8  6E03               	movwf	i2strcpy@from,c
 21383  0037EA  0EFF               	movlw	high STR_8
 21384  0037EC  6E04               	movwf	i2strcpy@from+1,c
 21385  0037EE  ECD8  F02C         	call	i2_strcpy	;wreg free
 21386                           
 21387                           ;RTC.c: 75: break;
 21388  0037F2  D0A6               	goto	i2l7706
 21389  0037F4                     i2l7680:
 21390                           
 21391                           ;RTC.c: 77: strcpy(month, "FEB");
 21392  0037F4  0E3D               	movlw	low i2printRTC@month
 21393  0037F6  6E01               	movwf	i2strcpy@to,c
 21394  0037F8  0E00               	movlw	high i2printRTC@month
 21395  0037FA  6E02               	movwf	i2strcpy@to+1,c
 21396  0037FC  0ECA               	movlw	low STR_9
 21397  0037FE  6E03               	movwf	i2strcpy@from,c
 21398  003800  0EFF               	movlw	high STR_9
 21399  003802  6E04               	movwf	i2strcpy@from+1,c
 21400  003804  ECD8  F02C         	call	i2_strcpy	;wreg free
 21401                           
 21402                           ;RTC.c: 78: break;
 21403  003808  D09B               	goto	i2l7706
 21404  00380A                     i2l7682:
 21405                           
 21406                           ;RTC.c: 80: strcpy(month, "MAR");
 21407  00380A  0E3D               	movlw	low i2printRTC@month
 21408  00380C  6E01               	movwf	i2strcpy@to,c
 21409  00380E  0E00               	movlw	high i2printRTC@month
 21410  003810  6E02               	movwf	i2strcpy@to+1,c
 21411  003812  0EE6               	movlw	low STR_10
 21412  003814  6E03               	movwf	i2strcpy@from,c
 21413  003816  0EFF               	movlw	high STR_10
 21414  003818  6E04               	movwf	i2strcpy@from+1,c
 21415  00381A  ECD8  F02C         	call	i2_strcpy	;wreg free
 21416                           
 21417                           ;RTC.c: 81: break;
 21418  00381E  D090               	goto	i2l7706
 21419  003820                     i2l7684:
 21420                           
 21421                           ;RTC.c: 83: strcpy(month, "APR");
 21422  003820  0E3D               	movlw	low i2printRTC@month
 21423  003822  6E01               	movwf	i2strcpy@to,c
 21424  003824  0E00               	movlw	high i2printRTC@month
 21425  003826  6E02               	movwf	i2strcpy@to+1,c
 21426  003828  0EEA               	movlw	low STR_11
 21427  00382A  6E03               	movwf	i2strcpy@from,c
 21428  00382C  0EFF               	movlw	high STR_11
 21429  00382E  6E04               	movwf	i2strcpy@from+1,c
 21430  003830  ECD8  F02C         	call	i2_strcpy	;wreg free
 21431                           
 21432                           ;RTC.c: 84: break;
 21433  003834  D085               	goto	i2l7706
 21434  003836                     i2l7686:
 21435                           
 21436                           ;RTC.c: 86: strcpy(month, "MAY");
 21437  003836  0E3D               	movlw	low i2printRTC@month
 21438  003838  6E01               	movwf	i2strcpy@to,c
 21439  00383A  0E00               	movlw	high i2printRTC@month
 21440  00383C  6E02               	movwf	i2strcpy@to+1,c
 21441  00383E  0EFA               	movlw	low STR_12
 21442  003840  6E03               	movwf	i2strcpy@from,c
 21443  003842  0EFF               	movlw	high STR_12
 21444  003844  6E04               	movwf	i2strcpy@from+1,c
 21445  003846  ECD8  F02C         	call	i2_strcpy	;wreg free
 21446                           
 21447                           ;RTC.c: 87: break;
 21448  00384A  D07A               	goto	i2l7706
 21449  00384C                     i2l7688:
 21450                           
 21451                           ;RTC.c: 89: strcpy(month, "JUN");
 21452  00384C  0E3D               	movlw	low i2printRTC@month
 21453  00384E  6E01               	movwf	i2strcpy@to,c
 21454  003850  0E00               	movlw	high i2printRTC@month
 21455  003852  6E02               	movwf	i2strcpy@to+1,c
 21456  003854  0EDE               	movlw	low STR_13
 21457  003856  6E03               	movwf	i2strcpy@from,c
 21458  003858  0EFF               	movlw	high STR_13
 21459  00385A  6E04               	movwf	i2strcpy@from+1,c
 21460  00385C  ECD8  F02C         	call	i2_strcpy	;wreg free
 21461                           
 21462                           ;RTC.c: 90: break;
 21463  003860  D06F               	goto	i2l7706
 21464  003862                     i2l7690:
 21465                           
 21466                           ;RTC.c: 92: strcpy(month, "JUL");
 21467  003862  0E3D               	movlw	low i2printRTC@month
 21468  003864  6E01               	movwf	i2strcpy@to,c
 21469  003866  0E00               	movlw	high i2printRTC@month
 21470  003868  6E02               	movwf	i2strcpy@to+1,c
 21471  00386A  0ED6               	movlw	low STR_14
 21472  00386C  6E03               	movwf	i2strcpy@from,c
 21473  00386E  0EFF               	movlw	high STR_14
 21474  003870  6E04               	movwf	i2strcpy@from+1,c
 21475  003872  ECD8  F02C         	call	i2_strcpy	;wreg free
 21476                           
 21477                           ;RTC.c: 93: break;
 21478  003876  D064               	goto	i2l7706
 21479  003878                     i2l7692:
 21480                           
 21481                           ;RTC.c: 95: strcpy(month, "AUG");
 21482  003878  0E3D               	movlw	low i2printRTC@month
 21483  00387A  6E01               	movwf	i2strcpy@to,c
 21484  00387C  0E00               	movlw	high i2printRTC@month
 21485  00387E  6E02               	movwf	i2strcpy@to+1,c
 21486  003880  0ED2               	movlw	low STR_15
 21487  003882  6E03               	movwf	i2strcpy@from,c
 21488  003884  0EFF               	movlw	high STR_15
 21489  003886  6E04               	movwf	i2strcpy@from+1,c
 21490  003888  ECD8  F02C         	call	i2_strcpy	;wreg free
 21491                           
 21492                           ;RTC.c: 96: break;
 21493  00388C  D059               	goto	i2l7706
 21494  00388E                     i2l7694:
 21495                           
 21496                           ;RTC.c: 98: strcpy(month, "SEP");
 21497  00388E  0E3D               	movlw	low i2printRTC@month
 21498  003890  6E01               	movwf	i2strcpy@to,c
 21499  003892  0E00               	movlw	high i2printRTC@month
 21500  003894  6E02               	movwf	i2strcpy@to+1,c
 21501  003896  0EE2               	movlw	low STR_16
 21502  003898  6E03               	movwf	i2strcpy@from,c
 21503  00389A  0EFF               	movlw	high STR_16
 21504  00389C  6E04               	movwf	i2strcpy@from+1,c
 21505  00389E  ECD8  F02C         	call	i2_strcpy	;wreg free
 21506                           
 21507                           ;RTC.c: 99: break;
 21508  0038A2  D04E               	goto	i2l7706
 21509  0038A4                     i2l7696:
 21510                           
 21511                           ;RTC.c: 101: strcpy(month, "OCT");
 21512  0038A4  0E3D               	movlw	low i2printRTC@month
 21513  0038A6  6E01               	movwf	i2strcpy@to,c
 21514  0038A8  0E00               	movlw	high i2printRTC@month
 21515  0038AA  6E02               	movwf	i2strcpy@to+1,c
 21516  0038AC  0EF2               	movlw	low STR_17
 21517  0038AE  6E03               	movwf	i2strcpy@from,c
 21518  0038B0  0EFF               	movlw	high STR_17
 21519  0038B2  6E04               	movwf	i2strcpy@from+1,c
 21520  0038B4  ECD8  F02C         	call	i2_strcpy	;wreg free
 21521                           
 21522                           ;RTC.c: 102: break;
 21523  0038B8  D043               	goto	i2l7706
 21524  0038BA                     i2l7698:
 21525                           
 21526                           ;RTC.c: 104: strcpy(month, "NOV");
 21527  0038BA  0E3D               	movlw	low i2printRTC@month
 21528  0038BC  6E01               	movwf	i2strcpy@to,c
 21529  0038BE  0E00               	movlw	high i2printRTC@month
 21530  0038C0  6E02               	movwf	i2strcpy@to+1,c
 21531  0038C2  0EF6               	movlw	low STR_18
 21532  0038C4  6E03               	movwf	i2strcpy@from,c
 21533  0038C6  0EFF               	movlw	high STR_18
 21534  0038C8  6E04               	movwf	i2strcpy@from+1,c
 21535  0038CA  ECD8  F02C         	call	i2_strcpy	;wreg free
 21536                           
 21537                           ;RTC.c: 105: break;
 21538  0038CE  D038               	goto	i2l7706
 21539  0038D0                     i2l7700:
 21540                           
 21541                           ;RTC.c: 107: strcpy(month, "DEC");
 21542  0038D0  0E3D               	movlw	low i2printRTC@month
 21543  0038D2  6E01               	movwf	i2strcpy@to,c
 21544  0038D4  0E00               	movlw	high i2printRTC@month
 21545  0038D6  6E02               	movwf	i2strcpy@to+1,c
 21546  0038D8  0ECE               	movlw	low STR_19
 21547  0038DA  6E03               	movwf	i2strcpy@from,c
 21548  0038DC  0EFF               	movlw	high STR_19
 21549  0038DE  6E04               	movwf	i2strcpy@from+1,c
 21550  0038E0  ECD8  F02C         	call	i2_strcpy	;wreg free
 21551                           
 21552                           ;RTC.c: 109: }
 21553                           
 21554                           ;RTC.c: 108: break;
 21555  0038E4  D02D               	goto	i2l7706
 21556  0038E6                     i2l7704:
 21557  0038E6  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21558  0038EA  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21559                           
 21560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21561                           ; Switch size 1, requested type "space"
 21562                           ; Number of cases is 1, Range of values is 0 to 0
 21563                           ; switch strategies available:
 21564                           ; Name         Instructions Cycles
 21565                           ; simple_byte            4     3 (average)
 21566                           ;	Chosen strategy is simple_byte
 21567  0038EE  502B               	movf	??i2_printRTC+1,w,c
 21568  0038F0  0A00               	xorlw	0	; case 0
 21569  0038F2  A4D8               	btfss	status,2,c
 21570  0038F4  D025               	goto	i2l7706
 21571                           
 21572                           ; Switch size 1, requested type "space"
 21573                           ; Number of cases is 12, Range of values is 1 to 12
 21574                           ; switch strategies available:
 21575                           ; Name         Instructions Cycles
 21576                           ; simple_byte           37    19 (average)
 21577                           ;	Chosen strategy is simple_byte
 21578  0038F6  502A               	movf	??i2_printRTC,w,c
 21579  0038F8  0A01               	xorlw	1	; case 1
 21580  0038FA  B4D8               	btfsc	status,2,c
 21581  0038FC  D770               	goto	i2l7678
 21582  0038FE  0A03               	xorlw	3	; case 2
 21583  003900  B4D8               	btfsc	status,2,c
 21584  003902  D778               	goto	i2l7680
 21585  003904  0A01               	xorlw	1	; case 3
 21586  003906  B4D8               	btfsc	status,2,c
 21587  003908  D780               	goto	i2l7682
 21588  00390A  0A07               	xorlw	7	; case 4
 21589  00390C  B4D8               	btfsc	status,2,c
 21590  00390E  D788               	goto	i2l7684
 21591  003910  0A01               	xorlw	1	; case 5
 21592  003912  B4D8               	btfsc	status,2,c
 21593  003914  D790               	goto	i2l7686
 21594  003916  0A03               	xorlw	3	; case 6
 21595  003918  B4D8               	btfsc	status,2,c
 21596  00391A  D798               	goto	i2l7688
 21597  00391C  0A01               	xorlw	1	; case 7
 21598  00391E  B4D8               	btfsc	status,2,c
 21599  003920  D7A0               	goto	i2l7690
 21600  003922  0A0F               	xorlw	15	; case 8
 21601  003924  B4D8               	btfsc	status,2,c
 21602  003926  D7A8               	goto	i2l7692
 21603  003928  0A01               	xorlw	1	; case 9
 21604  00392A  B4D8               	btfsc	status,2,c
 21605  00392C  D7B0               	goto	i2l7694
 21606  00392E  0A03               	xorlw	3	; case 10
 21607  003930  B4D8               	btfsc	status,2,c
 21608  003932  D7B8               	goto	i2l7696
 21609  003934  0A01               	xorlw	1	; case 11
 21610  003936  B4D8               	btfsc	status,2,c
 21611  003938  D7C0               	goto	i2l7698
 21612  00393A  0A07               	xorlw	7	; case 12
 21613  00393C  B4D8               	btfsc	status,2,c
 21614  00393E  D7C8               	goto	i2l7700
 21615  003940                     i2l7706:
 21616                           
 21617                           ;RTC.c: 110: lcdInst(0b10000000);;
 21618  003940  0E80               	movlw	128
 21619  003942  EC48  F02F         	call	i2_lcdInst
 21620                           
 21621                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21622  003946  0ECA               	movlw	low STR_21
 21623  003948  6E0D               	movwf	i2printf@f,c
 21624  00394A  0EFA               	movlw	high STR_21
 21625  00394C  6E0E               	movwf	i2printf@f+1,c
 21626  00394E  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21627  003952  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21628  003956  0E3D               	movlw	low i2printRTC@month
 21629  003958  6E11               	movwf	?i2_printf+4,c
 21630  00395A  0E00               	movlw	high i2printRTC@month
 21631  00395C  6E12               	movwf	?i2_printf+5,c
 21632  00395E  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21633  003962  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21634  003966  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21635  00396A  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21636  00396E  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21637  003972  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21638  003976  EC7A  F012         	call	i2_printf	;wreg free
 21639  00397A  0012               	return		;funcret
 21640  00397C                     __end_ofi2_printRTC:
 21641                           	opt stack 0
 21642                           pclatu	equ	0xFFB
 21643                           pclath	equ	0xFFA
 21644                           tblptru	equ	0xFF8
 21645                           tblptrh	equ	0xFF7
 21646                           tblptrl	equ	0xFF6
 21647                           tablat	equ	0xFF5
 21648                           prodh	equ	0xFF4
 21649                           prodl	equ	0xFF3
 21650                           intcon	equ	0xFF2
 21651                           intcon2	equ	0xFF1
 21652                           intcon3	equ	0xFF0
 21653                           indf0	equ	0xFEF
 21654                           postinc0	equ	0xFEE
 21655                           fsr0h	equ	0xFEA
 21656                           fsr0l	equ	0xFE9
 21657                           wreg	equ	0xFE8
 21658                           postdec1	equ	0xFE5
 21659                           fsr1h	equ	0xFE2
 21660                           fsr1l	equ	0xFE1
 21661                           indf2	equ	0xFDF
 21662                           postinc2	equ	0xFDE
 21663                           postdec2	equ	0xFDD
 21664                           fsr2h	equ	0xFDA
 21665                           fsr2l	equ	0xFD9
 21666                           status	equ	0xFD8
 21667                           
 21668 ;; *************** function i2_strcpy *****************
 21669 ;; Defined at:
 21670 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21671 ;; Parameters:    Size  Location     Type
 21672 ;;  to              2    0[COMRAM] PTR unsigned char 
 21673 ;;		 -> printRTC@month(4), UI@month(4), 
 21674 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21675 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21676 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21677 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21678 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21679 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21680 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21681 ;;		 -> STR_8(4), 
 21682 ;; Auto vars:     Size  Location     Type
 21683 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21684 ;;		 -> printRTC@month(4), UI@month(4), 
 21685 ;; Return value:  Size  Location     Type
 21686 ;;                  2    0[COMRAM] PTR unsigned char 
 21687 ;; Registers used:
 21688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21689 ;; Tracked objects:
 21690 ;;		On entry : 0/0
 21691 ;;		On exit  : 0/0
 21692 ;;		Unchanged: 0/0
 21693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21694 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21697 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21698 ;;Total ram usage:        6 bytes
 21699 ;; Hardware stack levels used:    1
 21700 ;; This function calls:
 21701 ;;		Nothing
 21702 ;; This function is called by:
 21703 ;;		i2_printRTC
 21704 ;; This function uses a non-reentrant model
 21705 ;;
 21706                           
 21707                           	psect	text70
 21708  0059B0                     __ptext70:
 21709                           	opt stack 0
 21710  0059B0                     i2_strcpy:
 21711                           	opt stack 21
 21712                           
 21713                           ;incstack = 0
 21714  0059B0  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21715  0059B4  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21716  0059B8  D004               	goto	i2l7230
 21717  0059BA                     i2l7228:
 21718  0059BA  4A05               	infsnz	i2strcpy@cp,f,c
 21719  0059BC  2A06               	incf	i2strcpy@cp+1,f,c
 21720  0059BE  4A03               	infsnz	i2strcpy@from,f,c
 21721  0059C0  2A04               	incf	i2strcpy@from+1,f,c
 21722  0059C2                     i2l7230:
 21723  0059C2  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21724  0059C6  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21725  0059CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21726  0059CA  6AF8               	clrf	tblptru,c
 21727  0059CC                     	endif
 21728  0059CC                     	if	0	;tblptru may be non-zero
 21729  0059CC                     	endif
 21730  0059CC  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21731  0059D0  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21732  0059D4  0008               	tblrd		*
 21733  0059D6  CFF5 FFDF          	movff	tablat,indf2
 21734  0059DA  50DF               	movf	indf2,w,c
 21735  0059DC  B4D8               	btfsc	status,2,c
 21736  0059DE  0012               	return	
 21737  0059E0  D7EC               	goto	i2l7228
 21738  0059E2                     __end_ofi2_strcpy:
 21739                           	opt stack 0
 21740                           pclatu	equ	0xFFB
 21741                           pclath	equ	0xFFA
 21742                           tblptru	equ	0xFF8
 21743                           tblptrh	equ	0xFF7
 21744                           tblptrl	equ	0xFF6
 21745                           tablat	equ	0xFF5
 21746                           prodh	equ	0xFF4
 21747                           prodl	equ	0xFF3
 21748                           intcon	equ	0xFF2
 21749                           intcon2	equ	0xFF1
 21750                           intcon3	equ	0xFF0
 21751                           indf0	equ	0xFEF
 21752                           postinc0	equ	0xFEE
 21753                           fsr0h	equ	0xFEA
 21754                           fsr0l	equ	0xFE9
 21755                           wreg	equ	0xFE8
 21756                           postdec1	equ	0xFE5
 21757                           fsr1h	equ	0xFE2
 21758                           fsr1l	equ	0xFE1
 21759                           indf2	equ	0xFDF
 21760                           postinc2	equ	0xFDE
 21761                           postdec2	equ	0xFDD
 21762                           fsr2h	equ	0xFDA
 21763                           fsr2l	equ	0xFD9
 21764                           status	equ	0xFD8
 21765                           
 21766 ;; *************** function _inputHandler *****************
 21767 ;; Defined at:
 21768 ;;		line 375 in file "UI.c"
 21769 ;; Parameters:    Size  Location     Type
 21770 ;;		None
 21771 ;; Auto vars:     Size  Location     Type
 21772 ;;		None
 21773 ;; Return value:  Size  Location     Type
 21774 ;;                  2   41[COMRAM] int 
 21775 ;; Registers used:
 21776 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21777 ;; Tracked objects:
 21778 ;;		On entry : 0/0
 21779 ;;		On exit  : 0/0
 21780 ;;		Unchanged: 0/0
 21781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21784 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21785 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21786 ;;Total ram usage:        4 bytes
 21787 ;; Hardware stack levels used:    1
 21788 ;; Hardware stack levels required when called:    4
 21789 ;; This function calls:
 21790 ;;		_change_state_to_logs_11
 21791 ;;		_change_state_to_logs_12
 21792 ;;		_change_state_to_logs_22
 21793 ;;		_change_state_to_logs_23
 21794 ;;		_change_state_to_logs_33
 21795 ;;		_change_state_to_logs_34
 21796 ;;		_change_state_to_menu_11
 21797 ;;		_change_state_to_menu_23
 21798 ;;		i2_change_state_to_menu_12
 21799 ;;		i2_change_state_to_menu_22
 21800 ;; This function is called by:
 21801 ;;		_updateMenu
 21802 ;; This function uses a non-reentrant model
 21803 ;;
 21804                           
 21805                           	psect	text71
 21806  00397C                     __ptext71:
 21807                           	opt stack 0
 21808  00397C                     _inputHandler:
 21809                           	opt stack 18
 21810                           
 21811                           ;UI.c: 380: if(firstboot){
 21812                           
 21813                           ;incstack = 0
 21814  00397C  0101               	movlb	1	; () banked
 21815  00397E  513D               	movf	_firstboot& (0+255),w,b
 21816  003980  0101               	movlb	1	; () banked
 21817  003982  113E               	iorwf	(_firstboot+1)& (0+255),w,b
 21818  003984  B4D8               	btfsc	status,2,c
 21819  003986  D00C               	goto	i2l7774
 21820                           
 21821                           ; BSR set to: 1
 21822                           ;UI.c: 381: change_state_to_menu_11();
 21823  003988  EC51  F02D         	call	_change_state_to_menu_11	;wreg free
 21824                           
 21825                           ;UI.c: 382: firstboot = 0;
 21826  00398C  0E00               	movlw	0
 21827  00398E  0101               	movlb	1	; () banked
 21828  003990  6F3E               	movwf	(_firstboot+1)& (0+255),b
 21829  003992  0E00               	movlw	0
 21830  003994  6F3D               	movwf	_firstboot& (0+255),b
 21831                           
 21832                           ; BSR set to: 1
 21833                           ;UI.c: 383: return 0;
 21834  003996  0E00               	movlw	0
 21835  003998  6E2B               	movwf	?_inputHandler+1,c
 21836  00399A  0E00               	movlw	0
 21837  00399C  6E2A               	movwf	?_inputHandler,c
 21838                           
 21839                           ; BSR set to: 1
 21840  00399E  0012               	return	
 21841  0039A0                     i2l7774:
 21842                           
 21843                           ; BSR set to: 1
 21844                           ;UI.c: 384: }
 21845                           ;UI.c: 385: if (logstate){
 21846  0039A0  0100               	movlb	0	; () banked
 21847  0039A2  51F8               	movf	_logstate& (0+255),w,b
 21848  0039A4  0100               	movlb	0	; () banked
 21849  0039A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21850  0039A8  B4D8               	btfsc	status,2,c
 21851  0039AA  D0C7               	goto	i2l7892
 21852                           
 21853                           ; BSR set to: 0
 21854                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21855  0039AC  0E43               	movlw	67
 21856  0039AE  187D               	xorwf	_input,w,c	;volatile
 21857  0039B0  A4D8               	btfss	status,2,c
 21858  0039B2  D012               	goto	i2l7792
 21859                           
 21860                           ; BSR set to: 0
 21861  0039B4  B281               	btfsc	3969,1,c	;volatile
 21862  0039B6  D009               	goto	i2l7784
 21863  0039B8  D00F               	goto	i2l7792
 21864  0039BA                     i2l7782:
 21865                           
 21866                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21867  0039BA  0E68               	movlw	104
 21868  0039BC  6E2C               	movwf	??_inputHandler& (0+255),c
 21869  0039BE  0EE4               	movlw	228
 21870  0039C0                     i2u1188_47:
 21871  0039C0  2EE8               	decfsz	wreg,f,c
 21872  0039C2  D7FE               	bra	i2u1188_47
 21873  0039C4  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21874  0039C6  D7FC               	bra	i2u1188_47
 21875  0039C8  D000               	nop2	
 21876  0039CA                     i2l7784:
 21877  0039CA  B281               	btfsc	3969,1,c	;volatile
 21878  0039CC  D7F6               	goto	i2l7782
 21879  0039CE                     i2l7786:
 21880                           
 21881                           ;UI.c: 390: }
 21882                           ;UI.c: 391: return 0;
 21883  0039CE  0E00               	movlw	0
 21884  0039D0  6E2B               	movwf	?_inputHandler+1,c
 21885  0039D2  0E00               	movlw	0
 21886  0039D4  6E2A               	movwf	?_inputHandler,c
 21887  0039D6  0012               	return	
 21888  0039D8                     i2l7792:
 21889                           
 21890                           ;UI.c: 393: else if (input == 'D'){
 21891  0039D8  0E44               	movlw	68
 21892  0039DA  187D               	xorwf	_input,w,c	;volatile
 21893  0039DC  A4D8               	btfss	status,2,c
 21894  0039DE  D7F7               	goto	i2l7786
 21895                           
 21896                           ;UI.c: 395: logstate = 0;
 21897  0039E0  0E00               	movlw	0
 21898  0039E2  0100               	movlb	0	; () banked
 21899  0039E4  6FF9               	movwf	(_logstate+1)& (0+255),b
 21900  0039E6  0E00               	movlw	0
 21901  0039E8  6FF8               	movwf	_logstate& (0+255),b
 21902                           
 21903                           ;UI.c: 396: switch(cur_state){
 21904  0039EA  D012               	goto	i2l7810
 21905  0039EC                     i2l7796:
 21906                           
 21907                           ;UI.c: 398: change_state_to_logs_11();
 21908  0039EC  ECC9  F02D         	call	_change_state_to_logs_11	;wreg free
 21909                           
 21910                           ;UI.c: 399: break;
 21911  0039F0  D7EE               	goto	i2l7786
 21912  0039F2                     i2l7798:
 21913                           
 21914                           ;UI.c: 401: change_state_to_logs_12();
 21915  0039F2  ECB1  F02D         	call	_change_state_to_logs_12	;wreg free
 21916                           
 21917                           ;UI.c: 402: break;
 21918  0039F6  D7EB               	goto	i2l7786
 21919  0039F8                     i2l7800:
 21920                           
 21921                           ;UI.c: 404: change_state_to_logs_22();
 21922  0039F8  EC99  F02D         	call	_change_state_to_logs_22	;wreg free
 21923                           
 21924                           ;UI.c: 405: break;
 21925  0039FC  D7E8               	goto	i2l7786
 21926  0039FE                     i2l7802:
 21927                           
 21928                           ;UI.c: 407: change_state_to_logs_23();
 21929  0039FE  ECF8  F02D         	call	_change_state_to_logs_23	;wreg free
 21930                           
 21931                           ;UI.c: 408: break;
 21932  003A02  D7E5               	goto	i2l7786
 21933  003A04                     i2l7804:
 21934                           
 21935                           ;UI.c: 410: change_state_to_logs_33();
 21936  003A04  EC81  F02D         	call	_change_state_to_logs_33	;wreg free
 21937                           
 21938                           ;UI.c: 411: break;
 21939  003A08  D7E2               	goto	i2l7786
 21940  003A0A                     i2l7806:
 21941                           
 21942                           ;UI.c: 413: change_state_to_logs_34();
 21943  003A0A  EC69  F02D         	call	_change_state_to_logs_34	;wreg free
 21944                           
 21945                           ;UI.c: 415: }
 21946                           
 21947                           ;UI.c: 414: break;
 21948  003A0E  D7DF               	goto	i2l7786
 21949  003A10                     i2l7810:
 21950  003A10  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21951  003A14  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21952                           
 21953                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21954                           ; Switch size 1, requested type "space"
 21955                           ; Number of cases is 2, Range of values is 3 to 4
 21956                           ; switch strategies available:
 21957                           ; Name         Instructions Cycles
 21958                           ; simple_byte            7     4 (average)
 21959                           ;	Chosen strategy is simple_byte
 21960  003A18  502D               	movf	??_inputHandler+1,w,c
 21961  003A1A  0A03               	xorlw	3	; case 3
 21962  003A1C  B4D8               	btfsc	status,2,c
 21963  003A1E  D004               	goto	i2l10932
 21964  003A20  0A07               	xorlw	7	; case 4
 21965  003A22  B4D8               	btfsc	status,2,c
 21966  003A24  D00F               	goto	i2l10934
 21967  003A26  D7D3               	goto	i2l7786
 21968  003A28                     i2l10932:
 21969                           
 21970                           ; Switch size 1, requested type "space"
 21971                           ; Number of cases is 4, Range of values is 243 to 255
 21972                           ; switch strategies available:
 21973                           ; Name         Instructions Cycles
 21974                           ; simple_byte           13     7 (average)
 21975                           ;	Chosen strategy is simple_byte
 21976  003A28  502C               	movf	??_inputHandler,w,c
 21977  003A2A  0AF3               	xorlw	243	; case 243
 21978  003A2C  B4D8               	btfsc	status,2,c
 21979  003A2E  D7DE               	goto	i2l7796
 21980  003A30  0A07               	xorlw	7	; case 244
 21981  003A32  B4D8               	btfsc	status,2,c
 21982  003A34  D7DE               	goto	i2l7798
 21983  003A36  0A0A               	xorlw	10	; case 254
 21984  003A38  B4D8               	btfsc	status,2,c
 21985  003A3A  D7DE               	goto	i2l7800
 21986  003A3C  0A01               	xorlw	1	; case 255
 21987  003A3E  B4D8               	btfsc	status,2,c
 21988  003A40  D7DE               	goto	i2l7802
 21989  003A42  D7C5               	goto	i2l7786
 21990  003A44                     i2l10934:
 21991                           
 21992                           ; Switch size 1, requested type "space"
 21993                           ; Number of cases is 2, Range of values is 9 to 10
 21994                           ; switch strategies available:
 21995                           ; Name         Instructions Cycles
 21996                           ; simple_byte            7     4 (average)
 21997                           ;	Chosen strategy is simple_byte
 21998  003A44  502C               	movf	??_inputHandler,w,c
 21999  003A46  0A09               	xorlw	9	; case 9
 22000  003A48  B4D8               	btfsc	status,2,c
 22001  003A4A  D7DC               	goto	i2l7804
 22002  003A4C  0A03               	xorlw	3	; case 10
 22003  003A4E  B4D8               	btfsc	status,2,c
 22004  003A50  D7DC               	goto	i2l7806
 22005  003A52  D7BD               	goto	i2l7786
 22006  003A54                     i2l7822:
 22007                           
 22008                           ;UI.c: 425: if(cur_state == 11){
 22009  003A54  0E0B               	movlw	11
 22010  003A56  0100               	movlb	0	; () banked
 22011  003A58  19E6               	xorwf	_cur_state& (0+255),w,b
 22012  003A5A  0100               	movlb	0	; () banked
 22013  003A5C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22014  003A5E  A4D8               	btfss	status,2,c
 22015  003A60  D005               	goto	i2l7830
 22016                           
 22017                           ; BSR set to: 0
 22018                           ;UI.c: 426: return 0;
 22019  003A62  0E00               	movlw	0
 22020  003A64  6E2B               	movwf	?_inputHandler+1,c
 22021  003A66  0E00               	movlw	0
 22022  003A68  6E2A               	movwf	?_inputHandler,c
 22023                           
 22024                           ; BSR set to: 0
 22025  003A6A  0012               	return	
 22026  003A6C                     i2l7830:
 22027                           
 22028                           ; BSR set to: 0
 22029                           ;UI.c: 428: else{
 22030                           ;UI.c: 429: change_state_to_menu_11();
 22031  003A6C  EC51  F02D         	call	_change_state_to_menu_11	;wreg free
 22032                           
 22033                           ;UI.c: 430: }
 22034                           ;UI.c: 431: return 0;
 22035  003A70  0E00               	movlw	0
 22036  003A72  6E2B               	movwf	?_inputHandler+1,c
 22037  003A74  0E00               	movlw	0
 22038  003A76  6E2A               	movwf	?_inputHandler,c
 22039  003A78  0012               	return	
 22040  003A7A                     i2l7836:
 22041                           
 22042                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 22043  003A7A  0E16               	movlw	22
 22044  003A7C  0100               	movlb	0	; () banked
 22045  003A7E  19E6               	xorwf	_cur_state& (0+255),w,b
 22046  003A80  0100               	movlb	0	; () banked
 22047  003A82  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22048  003A84  B4D8               	btfsc	status,2,c
 22049  003A86  D007               	goto	i2l7840
 22050                           
 22051                           ; BSR set to: 0
 22052  003A88  0E0C               	movlw	12
 22053  003A8A  0100               	movlb	0	; () banked
 22054  003A8C  19E6               	xorwf	_cur_state& (0+255),w,b
 22055  003A8E  0100               	movlb	0	; () banked
 22056  003A90  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22057  003A92  A4D8               	btfss	status,2,c
 22058  003A94  D005               	goto	i2l7846
 22059  003A96                     i2l7840:
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;UI.c: 434: return 0;
 22063  003A96  0E00               	movlw	0
 22064  003A98  6E2B               	movwf	?_inputHandler+1,c
 22065  003A9A  0E00               	movlw	0
 22066  003A9C  6E2A               	movwf	?_inputHandler,c
 22067                           
 22068                           ; BSR set to: 0
 22069  003A9E  0012               	return	
 22070  003AA0                     i2l7846:
 22071                           
 22072                           ; BSR set to: 0
 22073                           ;UI.c: 436: else if(cur_state == 23){
 22074  003AA0  0E17               	movlw	23
 22075  003AA2  0100               	movlb	0	; () banked
 22076  003AA4  19E6               	xorwf	_cur_state& (0+255),w,b
 22077  003AA6  0100               	movlb	0	; () banked
 22078  003AA8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22079  003AAA  A4D8               	btfss	status,2,c
 22080  003AAC  D003               	goto	i2l7850
 22081                           
 22082                           ; BSR set to: 0
 22083                           ;UI.c: 437: change_state_to_menu_22();
 22084  003AAE  EC09  F02D         	call	i2_change_state_to_menu_22	;wreg free
 22085                           
 22086                           ;UI.c: 438: }
 22087  003AB2  D002               	goto	i2l7852
 22088  003AB4                     i2l7850:
 22089                           
 22090                           ;UI.c: 439: else{
 22091                           ;UI.c: 440: change_state_to_menu_12();
 22092  003AB4  EC21  F02D         	call	i2_change_state_to_menu_12	;wreg free
 22093  003AB8                     i2l7852:
 22094                           
 22095                           ;UI.c: 441: }
 22096                           ;UI.c: 442: return 0;
 22097  003AB8  0E00               	movlw	0
 22098  003ABA  6E2B               	movwf	?_inputHandler+1,c
 22099  003ABC  0E00               	movlw	0
 22100  003ABE  6E2A               	movwf	?_inputHandler,c
 22101  003AC0  0012               	return	
 22102  003AC2                     i2l7856:
 22103                           
 22104                           ;UI.c: 444: if(cur_state == 23){
 22105  003AC2  0E17               	movlw	23
 22106  003AC4  0100               	movlb	0	; () banked
 22107  003AC6  19E6               	xorwf	_cur_state& (0+255),w,b
 22108  003AC8  0100               	movlb	0	; () banked
 22109  003ACA  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22110  003ACC  A4D8               	btfss	status,2,c
 22111  003ACE  D005               	goto	i2l7864
 22112                           
 22113                           ; BSR set to: 0
 22114                           ;UI.c: 445: return 0;
 22115  003AD0  0E00               	movlw	0
 22116  003AD2  6E2B               	movwf	?_inputHandler+1,c
 22117  003AD4  0E00               	movlw	0
 22118  003AD6  6E2A               	movwf	?_inputHandler,c
 22119                           
 22120                           ; BSR set to: 0
 22121  003AD8  0012               	return	
 22122  003ADA                     i2l7864:
 22123                           
 22124                           ; BSR set to: 0
 22125                           ;UI.c: 447: else{
 22126                           ;UI.c: 448: change_state_to_menu_23();
 22127  003ADA  EC39  F02D         	call	_change_state_to_menu_23	;wreg free
 22128                           
 22129                           ;UI.c: 449: }
 22130                           ;UI.c: 450: return 0;
 22131  003ADE  0E00               	movlw	0
 22132  003AE0  6E2B               	movwf	?_inputHandler+1,c
 22133  003AE2  0E00               	movlw	0
 22134  003AE4  6E2A               	movwf	?_inputHandler,c
 22135  003AE6  0012               	return	
 22136  003AE8                     i2l7870:
 22137                           
 22138                           ;UI.c: 453: up = 1;
 22139  003AE8  0E00               	movlw	0
 22140  003AEA  6E76               	movwf	_up+1,c
 22141  003AEC  0E01               	movlw	1
 22142  003AEE  6E75               	movwf	_up,c
 22143                           
 22144                           ;UI.c: 454: return 1;
 22145  003AF0  0E00               	movlw	0
 22146  003AF2  6E2B               	movwf	?_inputHandler+1,c
 22147  003AF4  0E01               	movlw	1
 22148  003AF6  6E2A               	movwf	?_inputHandler,c
 22149  003AF8  0012               	return	
 22150  003AFA                     i2l7874:
 22151                           
 22152                           ;UI.c: 456: down = 1;
 22153  003AFA  0E00               	movlw	0
 22154  003AFC  6E66               	movwf	_down+1,c
 22155  003AFE  0E01               	movlw	1
 22156  003B00  6E65               	movwf	_down,c
 22157                           
 22158                           ;UI.c: 457: return 1;
 22159  003B02  0E00               	movlw	0
 22160  003B04  6E2B               	movwf	?_inputHandler+1,c
 22161  003B06  0E01               	movlw	1
 22162  003B08  6E2A               	movwf	?_inputHandler,c
 22163  003B0A  0012               	return	
 22164  003B0C                     i2l7878:
 22165                           
 22166                           ;UI.c: 459: enter = 1;
 22167  003B0C  0E00               	movlw	0
 22168  003B0E  6E68               	movwf	_enter+1,c
 22169  003B10  0E01               	movlw	1
 22170  003B12  6E67               	movwf	_enter,c
 22171                           
 22172                           ;UI.c: 460: return 1;
 22173  003B14  0E00               	movlw	0
 22174  003B16  6E2B               	movwf	?_inputHandler+1,c
 22175  003B18  0E01               	movlw	1
 22176  003B1A  6E2A               	movwf	?_inputHandler,c
 22177  003B1C  0012               	return	
 22178  003B1E                     i2l7882:
 22179                           
 22180                           ;UI.c: 462: back = 1;
 22181  003B1E  0E00               	movlw	0
 22182  003B20  6E64               	movwf	_back+1,c
 22183  003B22  0E01               	movlw	1
 22184  003B24  6E63               	movwf	_back,c
 22185                           
 22186                           ;UI.c: 463: return 1;
 22187  003B26  0E00               	movlw	0
 22188  003B28  6E2B               	movwf	?_inputHandler+1,c
 22189  003B2A  0E01               	movlw	1
 22190  003B2C  6E2A               	movwf	?_inputHandler,c
 22191  003B2E  0012               	return	
 22192  003B30                     i2l7886:
 22193                           
 22194                           ;UI.c: 466: return 1;
 22195  003B30  0E00               	movlw	0
 22196  003B32  6E2B               	movwf	?_inputHandler+1,c
 22197  003B34  0E01               	movlw	1
 22198  003B36  6E2A               	movwf	?_inputHandler,c
 22199                           
 22200                           ;UI.c: 467: }
 22201  003B38  0012               	return	
 22202  003B3A                     i2l7892:
 22203  003B3A  507D               	movf	_input,w,c	;volatile
 22204                           
 22205                           ; Switch size 1, requested type "space"
 22206                           ; Number of cases is 7, Range of values is 49 to 68
 22207                           ; switch strategies available:
 22208                           ; Name         Instructions Cycles
 22209                           ; simple_byte           22    12 (average)
 22210                           ;	Chosen strategy is simple_byte
 22211  003B3C  0A31               	xorlw	49	; case 49
 22212  003B3E  B4D8               	btfsc	status,2,c
 22213  003B40  D789               	goto	i2l7822
 22214  003B42  0A03               	xorlw	3	; case 50
 22215  003B44  B4D8               	btfsc	status,2,c
 22216  003B46  D799               	goto	i2l7836
 22217  003B48  0A01               	xorlw	1	; case 51
 22218  003B4A  B4D8               	btfsc	status,2,c
 22219  003B4C  D7BA               	goto	i2l7856
 22220  003B4E  0A72               	xorlw	114	; case 65
 22221  003B50  B4D8               	btfsc	status,2,c
 22222  003B52  D7CA               	goto	i2l7870
 22223  003B54  0A03               	xorlw	3	; case 66
 22224  003B56  B4D8               	btfsc	status,2,c
 22225  003B58  D7D0               	goto	i2l7874
 22226  003B5A  0A01               	xorlw	1	; case 67
 22227  003B5C  B4D8               	btfsc	status,2,c
 22228  003B5E  D7D6               	goto	i2l7878
 22229  003B60  0A07               	xorlw	7	; case 68
 22230  003B62  B4D8               	btfsc	status,2,c
 22231  003B64  D7DC               	goto	i2l7882
 22232  003B66  D7E4               	goto	i2l7886
 22233  003B68                     __end_of_inputHandler:
 22234                           	opt stack 0
 22235                           pclatu	equ	0xFFB
 22236                           pclath	equ	0xFFA
 22237                           tblptru	equ	0xFF8
 22238                           tblptrh	equ	0xFF7
 22239                           tblptrl	equ	0xFF6
 22240                           tablat	equ	0xFF5
 22241                           prodh	equ	0xFF4
 22242                           prodl	equ	0xFF3
 22243                           intcon	equ	0xFF2
 22244                           intcon2	equ	0xFF1
 22245                           intcon3	equ	0xFF0
 22246                           indf0	equ	0xFEF
 22247                           postinc0	equ	0xFEE
 22248                           fsr0h	equ	0xFEA
 22249                           fsr0l	equ	0xFE9
 22250                           wreg	equ	0xFE8
 22251                           postdec1	equ	0xFE5
 22252                           fsr1h	equ	0xFE2
 22253                           fsr1l	equ	0xFE1
 22254                           indf2	equ	0xFDF
 22255                           postinc2	equ	0xFDE
 22256                           postdec2	equ	0xFDD
 22257                           fsr2h	equ	0xFDA
 22258                           fsr2l	equ	0xFD9
 22259                           status	equ	0xFD8
 22260                           
 22261 ;; *************** function i2_change_state_to_menu_22 *****************
 22262 ;; Defined at:
 22263 ;;		line 501 in file "UI.c"
 22264 ;; Parameters:    Size  Location     Type
 22265 ;;		None
 22266 ;; Auto vars:     Size  Location     Type
 22267 ;;		None
 22268 ;; Return value:  Size  Location     Type
 22269 ;;                  1    wreg      void 
 22270 ;; Registers used:
 22271 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22272 ;; Tracked objects:
 22273 ;;		On entry : 0/0
 22274 ;;		On exit  : 0/0
 22275 ;;		Unchanged: 0/0
 22276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22281 ;;Total ram usage:        0 bytes
 22282 ;; Hardware stack levels used:    1
 22283 ;; Hardware stack levels required when called:    3
 22284 ;; This function calls:
 22285 ;;		i2_lcdInst
 22286 ;;		i2_printf
 22287 ;; This function is called by:
 22288 ;;		_updateMenu
 22289 ;;		_inputHandler
 22290 ;; This function uses a non-reentrant model
 22291 ;;
 22292                           
 22293                           	psect	text72
 22294  005A12                     __ptext72:
 22295                           	opt stack 0
 22296  005A12                     i2_change_state_to_menu_22:
 22297                           	opt stack 19
 22298                           
 22299                           ;UI.c: 502: cur_state = 22;
 22300                           
 22301                           ;incstack = 0
 22302  005A12  0E00               	movlw	0
 22303  005A14  0100               	movlb	0	; () banked
 22304  005A16  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22305  005A18  0E16               	movlw	22
 22306  005A1A  6FE6               	movwf	_cur_state& (0+255),b
 22307                           
 22308                           ; BSR set to: 0
 22309                           ;UI.c: 504: lcdInst(0b10000000);;
 22310  005A1C  0E80               	movlw	128
 22311  005A1E  EC48  F02F         	call	i2_lcdInst
 22312                           
 22313                           ;UI.c: 505: printf("2. SORT        <");
 22314  005A22  0EB7               	movlw	low STR_34
 22315  005A24  6E0D               	movwf	i2printf@f,c
 22316  005A26  0EFD               	movlw	high STR_34
 22317  005A28  6E0E               	movwf	i2printf@f+1,c
 22318  005A2A  EC7A  F012         	call	i2_printf	;wreg free
 22319                           
 22320                           ;UI.c: 506: lcdInst(0b11000000);;
 22321  005A2E  0EC0               	movlw	192
 22322  005A30  EC48  F02F         	call	i2_lcdInst
 22323                           
 22324                           ;UI.c: 507: printf("3. LOGS         ");
 22325  005A34  0EFC               	movlw	low STR_36
 22326  005A36  6E0D               	movwf	i2printf@f,c
 22327  005A38  0EFC               	movlw	high STR_36
 22328  005A3A  6E0E               	movwf	i2printf@f+1,c
 22329  005A3C  EC7A  F012         	call	i2_printf	;wreg free
 22330  005A40  0012               	return		;funcret
 22331  005A42                     __end_ofi2_change_state_to_menu_22:
 22332                           	opt stack 0
 22333                           pclatu	equ	0xFFB
 22334                           pclath	equ	0xFFA
 22335                           tblptru	equ	0xFF8
 22336                           tblptrh	equ	0xFF7
 22337                           tblptrl	equ	0xFF6
 22338                           tablat	equ	0xFF5
 22339                           prodh	equ	0xFF4
 22340                           prodl	equ	0xFF3
 22341                           intcon	equ	0xFF2
 22342                           intcon2	equ	0xFF1
 22343                           intcon3	equ	0xFF0
 22344                           indf0	equ	0xFEF
 22345                           postinc0	equ	0xFEE
 22346                           fsr0h	equ	0xFEA
 22347                           fsr0l	equ	0xFE9
 22348                           wreg	equ	0xFE8
 22349                           postdec1	equ	0xFE5
 22350                           fsr1h	equ	0xFE2
 22351                           fsr1l	equ	0xFE1
 22352                           indf2	equ	0xFDF
 22353                           postinc2	equ	0xFDE
 22354                           postdec2	equ	0xFDD
 22355                           fsr2h	equ	0xFDA
 22356                           fsr2l	equ	0xFD9
 22357                           status	equ	0xFD8
 22358                           
 22359 ;; *************** function i2_change_state_to_menu_12 *****************
 22360 ;; Defined at:
 22361 ;;		line 493 in file "UI.c"
 22362 ;; Parameters:    Size  Location     Type
 22363 ;;		None
 22364 ;; Auto vars:     Size  Location     Type
 22365 ;;		None
 22366 ;; Return value:  Size  Location     Type
 22367 ;;                  1    wreg      void 
 22368 ;; Registers used:
 22369 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22370 ;; Tracked objects:
 22371 ;;		On entry : 0/0
 22372 ;;		On exit  : 0/0
 22373 ;;		Unchanged: 0/0
 22374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22379 ;;Total ram usage:        0 bytes
 22380 ;; Hardware stack levels used:    1
 22381 ;; Hardware stack levels required when called:    3
 22382 ;; This function calls:
 22383 ;;		i2_lcdInst
 22384 ;;		i2_printf
 22385 ;; This function is called by:
 22386 ;;		_updateMenu
 22387 ;;		_inputHandler
 22388 ;; This function uses a non-reentrant model
 22389 ;;
 22390                           
 22391                           	psect	text73
 22392  005A42                     __ptext73:
 22393                           	opt stack 0
 22394  005A42                     i2_change_state_to_menu_12:
 22395                           	opt stack 19
 22396                           
 22397                           ;UI.c: 494: cur_state = 12;
 22398                           
 22399                           ;incstack = 0
 22400  005A42  0E00               	movlw	0
 22401  005A44  0100               	movlb	0	; () banked
 22402  005A46  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22403  005A48  0E0C               	movlw	12
 22404  005A4A  6FE6               	movwf	_cur_state& (0+255),b
 22405                           
 22406                           ; BSR set to: 0
 22407                           ;UI.c: 496: lcdInst(0b10000000);;
 22408  005A4C  0E80               	movlw	128
 22409  005A4E  EC48  F02F         	call	i2_lcdInst
 22410                           
 22411                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22412  005A52  0E1E               	movlw	low STR_33
 22413  005A54  6E0D               	movwf	i2printf@f,c
 22414  005A56  0EFD               	movlw	high STR_33
 22415  005A58  6E0E               	movwf	i2printf@f+1,c
 22416  005A5A  EC7A  F012         	call	i2_printf	;wreg free
 22417                           
 22418                           ;UI.c: 498: lcdInst(0b11000000);;
 22419  005A5E  0EC0               	movlw	192
 22420  005A60  EC48  F02F         	call	i2_lcdInst
 22421                           
 22422                           ;UI.c: 499: printf("2. SORT        <");
 22423  005A64  0EB7               	movlw	low STR_34
 22424  005A66  6E0D               	movwf	i2printf@f,c
 22425  005A68  0EFD               	movlw	high STR_34
 22426  005A6A  6E0E               	movwf	i2printf@f+1,c
 22427  005A6C  EC7A  F012         	call	i2_printf	;wreg free
 22428  005A70  0012               	return		;funcret
 22429  005A72                     __end_ofi2_change_state_to_menu_12:
 22430                           	opt stack 0
 22431                           pclatu	equ	0xFFB
 22432                           pclath	equ	0xFFA
 22433                           tblptru	equ	0xFF8
 22434                           tblptrh	equ	0xFF7
 22435                           tblptrl	equ	0xFF6
 22436                           tablat	equ	0xFF5
 22437                           prodh	equ	0xFF4
 22438                           prodl	equ	0xFF3
 22439                           intcon	equ	0xFF2
 22440                           intcon2	equ	0xFF1
 22441                           intcon3	equ	0xFF0
 22442                           indf0	equ	0xFEF
 22443                           postinc0	equ	0xFEE
 22444                           fsr0h	equ	0xFEA
 22445                           fsr0l	equ	0xFE9
 22446                           wreg	equ	0xFE8
 22447                           postdec1	equ	0xFE5
 22448                           fsr1h	equ	0xFE2
 22449                           fsr1l	equ	0xFE1
 22450                           indf2	equ	0xFDF
 22451                           postinc2	equ	0xFDE
 22452                           postdec2	equ	0xFDD
 22453                           fsr2h	equ	0xFDA
 22454                           fsr2l	equ	0xFD9
 22455                           status	equ	0xFD8
 22456                           
 22457 ;; *************** function _change_state_to_menu_23 *****************
 22458 ;; Defined at:
 22459 ;;		line 509 in file "UI.c"
 22460 ;; Parameters:    Size  Location     Type
 22461 ;;		None
 22462 ;; Auto vars:     Size  Location     Type
 22463 ;;		None
 22464 ;; Return value:  Size  Location     Type
 22465 ;;                  1    wreg      void 
 22466 ;; Registers used:
 22467 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22468 ;; Tracked objects:
 22469 ;;		On entry : 0/0
 22470 ;;		On exit  : 0/0
 22471 ;;		Unchanged: 0/0
 22472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22477 ;;Total ram usage:        0 bytes
 22478 ;; Hardware stack levels used:    1
 22479 ;; Hardware stack levels required when called:    3
 22480 ;; This function calls:
 22481 ;;		i2_lcdInst
 22482 ;;		i2_printf
 22483 ;; This function is called by:
 22484 ;;		_updateMenu
 22485 ;;		_inputHandler
 22486 ;; This function uses a non-reentrant model
 22487 ;;
 22488                           
 22489                           	psect	text74
 22490  005A72                     __ptext74:
 22491                           	opt stack 0
 22492  005A72                     _change_state_to_menu_23:
 22493                           	opt stack 18
 22494                           
 22495                           ;UI.c: 510: cur_state = 23;
 22496                           
 22497                           ;incstack = 0
 22498  005A72  0E00               	movlw	0
 22499  005A74  0100               	movlb	0	; () banked
 22500  005A76  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22501  005A78  0E17               	movlw	23
 22502  005A7A  6FE6               	movwf	_cur_state& (0+255),b
 22503                           
 22504                           ; BSR set to: 0
 22505                           ;UI.c: 512: lcdInst(0b10000000);;
 22506  005A7C  0E80               	movlw	128
 22507  005A7E  EC48  F02F         	call	i2_lcdInst
 22508                           
 22509                           ;UI.c: 513: printf("2. SORT         ");
 22510  005A82  0E0D               	movlw	low STR_32
 22511  005A84  6E0D               	movwf	i2printf@f,c
 22512  005A86  0EFD               	movlw	high STR_32
 22513  005A88  6E0E               	movwf	i2printf@f+1,c
 22514  005A8A  EC7A  F012         	call	i2_printf	;wreg free
 22515                           
 22516                           ;UI.c: 514: lcdInst(0b11000000);;
 22517  005A8E  0EC0               	movlw	192
 22518  005A90  EC48  F02F         	call	i2_lcdInst
 22519                           
 22520                           ;UI.c: 515: printf("3. LOGS        <");
 22521  005A94  0EA6               	movlw	low STR_38
 22522  005A96  6E0D               	movwf	i2printf@f,c
 22523  005A98  0EFD               	movlw	high STR_38
 22524  005A9A  6E0E               	movwf	i2printf@f+1,c
 22525  005A9C  EC7A  F012         	call	i2_printf	;wreg free
 22526  005AA0  0012               	return		;funcret
 22527  005AA2                     __end_of_change_state_to_menu_23:
 22528                           	opt stack 0
 22529                           pclatu	equ	0xFFB
 22530                           pclath	equ	0xFFA
 22531                           tblptru	equ	0xFF8
 22532                           tblptrh	equ	0xFF7
 22533                           tblptrl	equ	0xFF6
 22534                           tablat	equ	0xFF5
 22535                           prodh	equ	0xFF4
 22536                           prodl	equ	0xFF3
 22537                           intcon	equ	0xFF2
 22538                           intcon2	equ	0xFF1
 22539                           intcon3	equ	0xFF0
 22540                           indf0	equ	0xFEF
 22541                           postinc0	equ	0xFEE
 22542                           fsr0h	equ	0xFEA
 22543                           fsr0l	equ	0xFE9
 22544                           wreg	equ	0xFE8
 22545                           postdec1	equ	0xFE5
 22546                           fsr1h	equ	0xFE2
 22547                           fsr1l	equ	0xFE1
 22548                           indf2	equ	0xFDF
 22549                           postinc2	equ	0xFDE
 22550                           postdec2	equ	0xFDD
 22551                           fsr2h	equ	0xFDA
 22552                           fsr2l	equ	0xFD9
 22553                           status	equ	0xFD8
 22554                           
 22555 ;; *************** function _change_state_to_menu_11 *****************
 22556 ;; Defined at:
 22557 ;;		line 485 in file "UI.c"
 22558 ;; Parameters:    Size  Location     Type
 22559 ;;		None
 22560 ;; Auto vars:     Size  Location     Type
 22561 ;;		None
 22562 ;; Return value:  Size  Location     Type
 22563 ;;                  1    wreg      void 
 22564 ;; Registers used:
 22565 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22566 ;; Tracked objects:
 22567 ;;		On entry : 0/0
 22568 ;;		On exit  : 0/0
 22569 ;;		Unchanged: 0/0
 22570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22575 ;;Total ram usage:        0 bytes
 22576 ;; Hardware stack levels used:    1
 22577 ;; Hardware stack levels required when called:    3
 22578 ;; This function calls:
 22579 ;;		i2_lcdInst
 22580 ;;		i2_printf
 22581 ;; This function is called by:
 22582 ;;		_updateMenu
 22583 ;;		_inputHandler
 22584 ;; This function uses a non-reentrant model
 22585 ;;
 22586                           
 22587                           	psect	text75
 22588  005AA2                     __ptext75:
 22589                           	opt stack 0
 22590  005AA2                     _change_state_to_menu_11:
 22591                           	opt stack 18
 22592                           
 22593                           ;UI.c: 486: cur_state = 11;
 22594                           
 22595                           ;incstack = 0
 22596  005AA2  0E00               	movlw	0
 22597  005AA4  0100               	movlb	0	; () banked
 22598  005AA6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22599  005AA8  0E0B               	movlw	11
 22600  005AAA  6FE6               	movwf	_cur_state& (0+255),b
 22601                           
 22602                           ; BSR set to: 0
 22603                           ;UI.c: 488: lcdInst(0b10000000);;
 22604  005AAC  0E80               	movlw	128
 22605  005AAE  EC48  F02F         	call	i2_lcdInst
 22606                           
 22607                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22608  005AB2  0EC8               	movlw	low STR_31
 22609  005AB4  6E0D               	movwf	i2printf@f,c
 22610  005AB6  0EFD               	movlw	high STR_31
 22611  005AB8  6E0E               	movwf	i2printf@f+1,c
 22612  005ABA  EC7A  F012         	call	i2_printf	;wreg free
 22613                           
 22614                           ;UI.c: 490: lcdInst(0b11000000);;
 22615  005ABE  0EC0               	movlw	192
 22616  005AC0  EC48  F02F         	call	i2_lcdInst
 22617                           
 22618                           ;UI.c: 491: printf("2. SORT         ");
 22619  005AC4  0E0D               	movlw	low STR_32
 22620  005AC6  6E0D               	movwf	i2printf@f,c
 22621  005AC8  0EFD               	movlw	high STR_32
 22622  005ACA  6E0E               	movwf	i2printf@f+1,c
 22623  005ACC  EC7A  F012         	call	i2_printf	;wreg free
 22624  005AD0  0012               	return		;funcret
 22625  005AD2                     __end_of_change_state_to_menu_11:
 22626                           	opt stack 0
 22627                           pclatu	equ	0xFFB
 22628                           pclath	equ	0xFFA
 22629                           tblptru	equ	0xFF8
 22630                           tblptrh	equ	0xFF7
 22631                           tblptrl	equ	0xFF6
 22632                           tablat	equ	0xFF5
 22633                           prodh	equ	0xFF4
 22634                           prodl	equ	0xFF3
 22635                           intcon	equ	0xFF2
 22636                           intcon2	equ	0xFF1
 22637                           intcon3	equ	0xFF0
 22638                           indf0	equ	0xFEF
 22639                           postinc0	equ	0xFEE
 22640                           fsr0h	equ	0xFEA
 22641                           fsr0l	equ	0xFE9
 22642                           wreg	equ	0xFE8
 22643                           postdec1	equ	0xFE5
 22644                           fsr1h	equ	0xFE2
 22645                           fsr1l	equ	0xFE1
 22646                           indf2	equ	0xFDF
 22647                           postinc2	equ	0xFDE
 22648                           postdec2	equ	0xFDD
 22649                           fsr2h	equ	0xFDA
 22650                           fsr2l	equ	0xFD9
 22651                           status	equ	0xFD8
 22652                           
 22653 ;; *************** function _change_state_to_logs_34 *****************
 22654 ;; Defined at:
 22655 ;;		line 552 in file "UI.c"
 22656 ;; Parameters:    Size  Location     Type
 22657 ;;		None
 22658 ;; Auto vars:     Size  Location     Type
 22659 ;;		None
 22660 ;; Return value:  Size  Location     Type
 22661 ;;                  1    wreg      void 
 22662 ;; Registers used:
 22663 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22664 ;; Tracked objects:
 22665 ;;		On entry : 0/0
 22666 ;;		On exit  : 0/0
 22667 ;;		Unchanged: 0/0
 22668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22673 ;;Total ram usage:        0 bytes
 22674 ;; Hardware stack levels used:    1
 22675 ;; Hardware stack levels required when called:    3
 22676 ;; This function calls:
 22677 ;;		i2_lcdInst
 22678 ;;		i2_printf
 22679 ;; This function is called by:
 22680 ;;		_updateMenu
 22681 ;;		_inputHandler
 22682 ;; This function uses a non-reentrant model
 22683 ;;
 22684                           
 22685                           	psect	text76
 22686  005AD2                     __ptext76:
 22687                           	opt stack 0
 22688  005AD2                     _change_state_to_logs_34:
 22689                           	opt stack 18
 22690                           
 22691                           ;UI.c: 553: cur_state = 1034;
 22692                           
 22693                           ;incstack = 0
 22694  005AD2  0E04               	movlw	4
 22695  005AD4  0100               	movlb	0	; () banked
 22696  005AD6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22697  005AD8  0E0A               	movlw	10
 22698  005ADA  6FE6               	movwf	_cur_state& (0+255),b
 22699                           
 22700                           ; BSR set to: 0
 22701                           ;UI.c: 554: lcdInst(0b10000000);;
 22702  005ADC  0E80               	movlw	128
 22703  005ADE  EC48  F02F         	call	i2_lcdInst
 22704                           
 22705                           ;UI.c: 555: printf("LOG 3           ");
 22706  005AE2  0EDA               	movlw	low STR_44
 22707  005AE4  6E0D               	movwf	i2printf@f,c
 22708  005AE6  0EFC               	movlw	high STR_44
 22709  005AE8  6E0E               	movwf	i2printf@f+1,c
 22710  005AEA  EC7A  F012         	call	i2_printf	;wreg free
 22711                           
 22712                           ;UI.c: 556: lcdInst(0b11000000);;
 22713  005AEE  0EC0               	movlw	192
 22714  005AF0  EC48  F02F         	call	i2_lcdInst
 22715                           
 22716                           ;UI.c: 557: printf("LOG 4          <");
 22717  005AF4  0E95               	movlw	low STR_50
 22718  005AF6  6E0D               	movwf	i2printf@f,c
 22719  005AF8  0EFD               	movlw	high STR_50
 22720  005AFA  6E0E               	movwf	i2printf@f+1,c
 22721  005AFC  EC7A  F012         	call	i2_printf	;wreg free
 22722  005B00  0012               	return		;funcret
 22723  005B02                     __end_of_change_state_to_logs_34:
 22724                           	opt stack 0
 22725                           pclatu	equ	0xFFB
 22726                           pclath	equ	0xFFA
 22727                           tblptru	equ	0xFF8
 22728                           tblptrh	equ	0xFF7
 22729                           tblptrl	equ	0xFF6
 22730                           tablat	equ	0xFF5
 22731                           prodh	equ	0xFF4
 22732                           prodl	equ	0xFF3
 22733                           intcon	equ	0xFF2
 22734                           intcon2	equ	0xFF1
 22735                           intcon3	equ	0xFF0
 22736                           indf0	equ	0xFEF
 22737                           postinc0	equ	0xFEE
 22738                           fsr0h	equ	0xFEA
 22739                           fsr0l	equ	0xFE9
 22740                           wreg	equ	0xFE8
 22741                           postdec1	equ	0xFE5
 22742                           fsr1h	equ	0xFE2
 22743                           fsr1l	equ	0xFE1
 22744                           indf2	equ	0xFDF
 22745                           postinc2	equ	0xFDE
 22746                           postdec2	equ	0xFDD
 22747                           fsr2h	equ	0xFDA
 22748                           fsr2l	equ	0xFD9
 22749                           status	equ	0xFD8
 22750                           
 22751 ;; *************** function _change_state_to_logs_33 *****************
 22752 ;; Defined at:
 22753 ;;		line 545 in file "UI.c"
 22754 ;; Parameters:    Size  Location     Type
 22755 ;;		None
 22756 ;; Auto vars:     Size  Location     Type
 22757 ;;		None
 22758 ;; Return value:  Size  Location     Type
 22759 ;;                  1    wreg      void 
 22760 ;; Registers used:
 22761 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22762 ;; Tracked objects:
 22763 ;;		On entry : 0/0
 22764 ;;		On exit  : 0/0
 22765 ;;		Unchanged: 0/0
 22766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22771 ;;Total ram usage:        0 bytes
 22772 ;; Hardware stack levels used:    1
 22773 ;; Hardware stack levels required when called:    3
 22774 ;; This function calls:
 22775 ;;		i2_lcdInst
 22776 ;;		i2_printf
 22777 ;; This function is called by:
 22778 ;;		_updateMenu
 22779 ;;		_inputHandler
 22780 ;; This function uses a non-reentrant model
 22781 ;;
 22782                           
 22783                           	psect	text77
 22784  005B02                     __ptext77:
 22785                           	opt stack 0
 22786  005B02                     _change_state_to_logs_33:
 22787                           	opt stack 18
 22788                           
 22789                           ;UI.c: 546: cur_state = 1033;
 22790                           
 22791                           ;incstack = 0
 22792  005B02  0E04               	movlw	4
 22793  005B04  0100               	movlb	0	; () banked
 22794  005B06  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22795  005B08  0E09               	movlw	9
 22796  005B0A  6FE6               	movwf	_cur_state& (0+255),b
 22797                           
 22798                           ; BSR set to: 0
 22799                           ;UI.c: 547: lcdInst(0b10000000);;
 22800  005B0C  0E80               	movlw	128
 22801  005B0E  EC48  F02F         	call	i2_lcdInst
 22802                           
 22803                           ;UI.c: 548: printf("LOG 3          <");
 22804  005B12  0E84               	movlw	low STR_46
 22805  005B14  6E0D               	movwf	i2printf@f,c
 22806  005B16  0EFD               	movlw	high STR_46
 22807  005B18  6E0E               	movwf	i2printf@f+1,c
 22808  005B1A  EC7A  F012         	call	i2_printf	;wreg free
 22809                           
 22810                           ;UI.c: 549: lcdInst(0b11000000);;
 22811  005B1E  0EC0               	movlw	192
 22812  005B20  EC48  F02F         	call	i2_lcdInst
 22813                           
 22814                           ;UI.c: 550: printf("LOG 4           ");
 22815  005B24  0EEB               	movlw	low STR_48
 22816  005B26  6E0D               	movwf	i2printf@f,c
 22817  005B28  0EFC               	movlw	high STR_48
 22818  005B2A  6E0E               	movwf	i2printf@f+1,c
 22819  005B2C  EC7A  F012         	call	i2_printf	;wreg free
 22820  005B30  0012               	return		;funcret
 22821  005B32                     __end_of_change_state_to_logs_33:
 22822                           	opt stack 0
 22823                           pclatu	equ	0xFFB
 22824                           pclath	equ	0xFFA
 22825                           tblptru	equ	0xFF8
 22826                           tblptrh	equ	0xFF7
 22827                           tblptrl	equ	0xFF6
 22828                           tablat	equ	0xFF5
 22829                           prodh	equ	0xFF4
 22830                           prodl	equ	0xFF3
 22831                           intcon	equ	0xFF2
 22832                           intcon2	equ	0xFF1
 22833                           intcon3	equ	0xFF0
 22834                           indf0	equ	0xFEF
 22835                           postinc0	equ	0xFEE
 22836                           fsr0h	equ	0xFEA
 22837                           fsr0l	equ	0xFE9
 22838                           wreg	equ	0xFE8
 22839                           postdec1	equ	0xFE5
 22840                           fsr1h	equ	0xFE2
 22841                           fsr1l	equ	0xFE1
 22842                           indf2	equ	0xFDF
 22843                           postinc2	equ	0xFDE
 22844                           postdec2	equ	0xFDD
 22845                           fsr2h	equ	0xFDA
 22846                           fsr2l	equ	0xFD9
 22847                           status	equ	0xFD8
 22848                           
 22849 ;; *************** function _change_state_to_logs_23 *****************
 22850 ;; Defined at:
 22851 ;;		line 538 in file "UI.c"
 22852 ;; Parameters:    Size  Location     Type
 22853 ;;		None
 22854 ;; Auto vars:     Size  Location     Type
 22855 ;;		None
 22856 ;; Return value:  Size  Location     Type
 22857 ;;                  1    wreg      void 
 22858 ;; Registers used:
 22859 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22860 ;; Tracked objects:
 22861 ;;		On entry : 0/0
 22862 ;;		On exit  : 0/0
 22863 ;;		Unchanged: 0/0
 22864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22869 ;;Total ram usage:        0 bytes
 22870 ;; Hardware stack levels used:    1
 22871 ;; Hardware stack levels required when called:    3
 22872 ;; This function calls:
 22873 ;;		i2_lcdInst
 22874 ;;		i2_printf
 22875 ;; This function is called by:
 22876 ;;		_updateMenu
 22877 ;;		_inputHandler
 22878 ;; This function uses a non-reentrant model
 22879 ;;
 22880                           
 22881                           	psect	text78
 22882  005BF0                     __ptext78:
 22883                           	opt stack 0
 22884  005BF0                     _change_state_to_logs_23:
 22885                           	opt stack 18
 22886                           
 22887                           ;UI.c: 539: cur_state = 1023;
 22888                           
 22889                           ;incstack = 0
 22890  005BF0  0E03               	movlw	3
 22891  005BF2  0100               	movlb	0	; () banked
 22892  005BF4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22893  005BF6  69E6               	setf	_cur_state& (0+255),b
 22894                           
 22895                           ; BSR set to: 0
 22896                           ;UI.c: 540: lcdInst(0b10000000);;
 22897  005BF8  0E80               	movlw	128
 22898  005BFA  EC48  F02F         	call	i2_lcdInst
 22899                           
 22900                           ;UI.c: 541: printf("LOG 2           ");
 22901  005BFE  0EC9               	movlw	low STR_40
 22902  005C00  6E0D               	movwf	i2printf@f,c
 22903  005C02  0EFC               	movlw	high STR_40
 22904  005C04  6E0E               	movwf	i2printf@f+1,c
 22905  005C06  EC7A  F012         	call	i2_printf	;wreg free
 22906                           
 22907                           ;UI.c: 542: lcdInst(0b11000000);;
 22908  005C0A  0EC0               	movlw	192
 22909  005C0C  EC48  F02F         	call	i2_lcdInst
 22910                           
 22911                           ;UI.c: 543: printf("LOG 3          <");
 22912  005C10  0E84               	movlw	low STR_46
 22913  005C12  6E0D               	movwf	i2printf@f,c
 22914  005C14  0EFD               	movlw	high STR_46
 22915  005C16  6E0E               	movwf	i2printf@f+1,c
 22916  005C18  EC7A  F012         	call	i2_printf	;wreg free
 22917  005C1C  0012               	return		;funcret
 22918  005C1E                     __end_of_change_state_to_logs_23:
 22919                           	opt stack 0
 22920                           pclatu	equ	0xFFB
 22921                           pclath	equ	0xFFA
 22922                           tblptru	equ	0xFF8
 22923                           tblptrh	equ	0xFF7
 22924                           tblptrl	equ	0xFF6
 22925                           tablat	equ	0xFF5
 22926                           prodh	equ	0xFF4
 22927                           prodl	equ	0xFF3
 22928                           intcon	equ	0xFF2
 22929                           intcon2	equ	0xFF1
 22930                           intcon3	equ	0xFF0
 22931                           indf0	equ	0xFEF
 22932                           postinc0	equ	0xFEE
 22933                           fsr0h	equ	0xFEA
 22934                           fsr0l	equ	0xFE9
 22935                           wreg	equ	0xFE8
 22936                           postdec1	equ	0xFE5
 22937                           fsr1h	equ	0xFE2
 22938                           fsr1l	equ	0xFE1
 22939                           indf2	equ	0xFDF
 22940                           postinc2	equ	0xFDE
 22941                           postdec2	equ	0xFDD
 22942                           fsr2h	equ	0xFDA
 22943                           fsr2l	equ	0xFD9
 22944                           status	equ	0xFD8
 22945                           
 22946 ;; *************** function _change_state_to_logs_22 *****************
 22947 ;; Defined at:
 22948 ;;		line 531 in file "UI.c"
 22949 ;; Parameters:    Size  Location     Type
 22950 ;;		None
 22951 ;; Auto vars:     Size  Location     Type
 22952 ;;		None
 22953 ;; Return value:  Size  Location     Type
 22954 ;;                  1    wreg      void 
 22955 ;; Registers used:
 22956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22957 ;; Tracked objects:
 22958 ;;		On entry : 0/0
 22959 ;;		On exit  : 0/0
 22960 ;;		Unchanged: 0/0
 22961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22966 ;;Total ram usage:        0 bytes
 22967 ;; Hardware stack levels used:    1
 22968 ;; Hardware stack levels required when called:    3
 22969 ;; This function calls:
 22970 ;;		i2_lcdInst
 22971 ;;		i2_printf
 22972 ;; This function is called by:
 22973 ;;		_updateMenu
 22974 ;;		_inputHandler
 22975 ;; This function uses a non-reentrant model
 22976 ;;
 22977                           
 22978                           	psect	text79
 22979  005B32                     __ptext79:
 22980                           	opt stack 0
 22981  005B32                     _change_state_to_logs_22:
 22982                           	opt stack 18
 22983                           
 22984                           ;UI.c: 532: cur_state = 1022;
 22985                           
 22986                           ;incstack = 0
 22987  005B32  0E03               	movlw	3
 22988  005B34  0100               	movlb	0	; () banked
 22989  005B36  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22990  005B38  0EFE               	movlw	254
 22991  005B3A  6FE6               	movwf	_cur_state& (0+255),b
 22992                           
 22993                           ; BSR set to: 0
 22994                           ;UI.c: 533: lcdInst(0b10000000);;
 22995  005B3C  0E80               	movlw	128
 22996  005B3E  EC48  F02F         	call	i2_lcdInst
 22997                           
 22998                           ;UI.c: 534: printf("LOG 2          <");
 22999  005B42  0E73               	movlw	low STR_42
 23000  005B44  6E0D               	movwf	i2printf@f,c
 23001  005B46  0EFD               	movlw	high STR_42
 23002  005B48  6E0E               	movwf	i2printf@f+1,c
 23003  005B4A  EC7A  F012         	call	i2_printf	;wreg free
 23004                           
 23005                           ;UI.c: 535: lcdInst(0b11000000);;
 23006  005B4E  0EC0               	movlw	192
 23007  005B50  EC48  F02F         	call	i2_lcdInst
 23008                           
 23009                           ;UI.c: 536: printf("LOG 3           ");
 23010  005B54  0EDA               	movlw	low STR_44
 23011  005B56  6E0D               	movwf	i2printf@f,c
 23012  005B58  0EFC               	movlw	high STR_44
 23013  005B5A  6E0E               	movwf	i2printf@f+1,c
 23014  005B5C  EC7A  F012         	call	i2_printf	;wreg free
 23015  005B60  0012               	return		;funcret
 23016  005B62                     __end_of_change_state_to_logs_22:
 23017                           	opt stack 0
 23018                           pclatu	equ	0xFFB
 23019                           pclath	equ	0xFFA
 23020                           tblptru	equ	0xFF8
 23021                           tblptrh	equ	0xFF7
 23022                           tblptrl	equ	0xFF6
 23023                           tablat	equ	0xFF5
 23024                           prodh	equ	0xFF4
 23025                           prodl	equ	0xFF3
 23026                           intcon	equ	0xFF2
 23027                           intcon2	equ	0xFF1
 23028                           intcon3	equ	0xFF0
 23029                           indf0	equ	0xFEF
 23030                           postinc0	equ	0xFEE
 23031                           fsr0h	equ	0xFEA
 23032                           fsr0l	equ	0xFE9
 23033                           wreg	equ	0xFE8
 23034                           postdec1	equ	0xFE5
 23035                           fsr1h	equ	0xFE2
 23036                           fsr1l	equ	0xFE1
 23037                           indf2	equ	0xFDF
 23038                           postinc2	equ	0xFDE
 23039                           postdec2	equ	0xFDD
 23040                           fsr2h	equ	0xFDA
 23041                           fsr2l	equ	0xFD9
 23042                           status	equ	0xFD8
 23043                           
 23044 ;; *************** function _change_state_to_logs_12 *****************
 23045 ;; Defined at:
 23046 ;;		line 524 in file "UI.c"
 23047 ;; Parameters:    Size  Location     Type
 23048 ;;		None
 23049 ;; Auto vars:     Size  Location     Type
 23050 ;;		None
 23051 ;; Return value:  Size  Location     Type
 23052 ;;                  1    wreg      void 
 23053 ;; Registers used:
 23054 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23055 ;; Tracked objects:
 23056 ;;		On entry : 0/0
 23057 ;;		On exit  : 0/0
 23058 ;;		Unchanged: 0/0
 23059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23064 ;;Total ram usage:        0 bytes
 23065 ;; Hardware stack levels used:    1
 23066 ;; Hardware stack levels required when called:    3
 23067 ;; This function calls:
 23068 ;;		i2_lcdInst
 23069 ;;		i2_printf
 23070 ;; This function is called by:
 23071 ;;		_updateMenu
 23072 ;;		_inputHandler
 23073 ;; This function uses a non-reentrant model
 23074 ;;
 23075                           
 23076                           	psect	text80
 23077  005B62                     __ptext80:
 23078                           	opt stack 0
 23079  005B62                     _change_state_to_logs_12:
 23080                           	opt stack 18
 23081                           
 23082                           ;UI.c: 525: cur_state = 1012;
 23083                           
 23084                           ;incstack = 0
 23085  005B62  0E03               	movlw	3
 23086  005B64  0100               	movlb	0	; () banked
 23087  005B66  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23088  005B68  0EF4               	movlw	244
 23089  005B6A  6FE6               	movwf	_cur_state& (0+255),b
 23090                           
 23091                           ; BSR set to: 0
 23092                           ;UI.c: 526: lcdInst(0b10000000);;
 23093  005B6C  0E80               	movlw	128
 23094  005B6E  EC48  F02F         	call	i2_lcdInst
 23095                           
 23096                           ;UI.c: 527: printf("LOG 1           ");
 23097  005B72  0EB8               	movlw	low STR_41
 23098  005B74  6E0D               	movwf	i2printf@f,c
 23099  005B76  0EFC               	movlw	high STR_41
 23100  005B78  6E0E               	movwf	i2printf@f+1,c
 23101  005B7A  EC7A  F012         	call	i2_printf	;wreg free
 23102                           
 23103                           ;UI.c: 528: lcdInst(0b11000000);;
 23104  005B7E  0EC0               	movlw	192
 23105  005B80  EC48  F02F         	call	i2_lcdInst
 23106                           
 23107                           ;UI.c: 529: printf("LOG 2          <");
 23108  005B84  0E73               	movlw	low STR_42
 23109  005B86  6E0D               	movwf	i2printf@f,c
 23110  005B88  0EFD               	movlw	high STR_42
 23111  005B8A  6E0E               	movwf	i2printf@f+1,c
 23112  005B8C  EC7A  F012         	call	i2_printf	;wreg free
 23113  005B90  0012               	return		;funcret
 23114  005B92                     __end_of_change_state_to_logs_12:
 23115                           	opt stack 0
 23116                           pclatu	equ	0xFFB
 23117                           pclath	equ	0xFFA
 23118                           tblptru	equ	0xFF8
 23119                           tblptrh	equ	0xFF7
 23120                           tblptrl	equ	0xFF6
 23121                           tablat	equ	0xFF5
 23122                           prodh	equ	0xFF4
 23123                           prodl	equ	0xFF3
 23124                           intcon	equ	0xFF2
 23125                           intcon2	equ	0xFF1
 23126                           intcon3	equ	0xFF0
 23127                           indf0	equ	0xFEF
 23128                           postinc0	equ	0xFEE
 23129                           fsr0h	equ	0xFEA
 23130                           fsr0l	equ	0xFE9
 23131                           wreg	equ	0xFE8
 23132                           postdec1	equ	0xFE5
 23133                           fsr1h	equ	0xFE2
 23134                           fsr1l	equ	0xFE1
 23135                           indf2	equ	0xFDF
 23136                           postinc2	equ	0xFDE
 23137                           postdec2	equ	0xFDD
 23138                           fsr2h	equ	0xFDA
 23139                           fsr2l	equ	0xFD9
 23140                           status	equ	0xFD8
 23141                           
 23142 ;; *************** function _change_state_to_logs_11 *****************
 23143 ;; Defined at:
 23144 ;;		line 517 in file "UI.c"
 23145 ;; Parameters:    Size  Location     Type
 23146 ;;		None
 23147 ;; Auto vars:     Size  Location     Type
 23148 ;;		None
 23149 ;; Return value:  Size  Location     Type
 23150 ;;                  1    wreg      void 
 23151 ;; Registers used:
 23152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23153 ;; Tracked objects:
 23154 ;;		On entry : 0/0
 23155 ;;		On exit  : 0/0
 23156 ;;		Unchanged: 0/0
 23157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23162 ;;Total ram usage:        0 bytes
 23163 ;; Hardware stack levels used:    1
 23164 ;; Hardware stack levels required when called:    3
 23165 ;; This function calls:
 23166 ;;		i2_lcdInst
 23167 ;;		i2_printf
 23168 ;; This function is called by:
 23169 ;;		_updateMenu
 23170 ;;		_inputHandler
 23171 ;; This function uses a non-reentrant model
 23172 ;;
 23173                           
 23174                           	psect	text81
 23175  005B92                     __ptext81:
 23176                           	opt stack 0
 23177  005B92                     _change_state_to_logs_11:
 23178                           	opt stack 18
 23179                           
 23180                           ;UI.c: 518: cur_state = 1011;
 23181                           
 23182                           ;incstack = 0
 23183  005B92  0E03               	movlw	3
 23184  005B94  0100               	movlb	0	; () banked
 23185  005B96  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23186  005B98  0EF3               	movlw	243
 23187  005B9A  6FE6               	movwf	_cur_state& (0+255),b
 23188                           
 23189                           ; BSR set to: 0
 23190                           ;UI.c: 519: lcdInst(0b10000000);;
 23191  005B9C  0E80               	movlw	128
 23192  005B9E  EC48  F02F         	call	i2_lcdInst
 23193                           
 23194                           ;UI.c: 520: printf("LOG 1          <");
 23195  005BA2  0E62               	movlw	low STR_39
 23196  005BA4  6E0D               	movwf	i2printf@f,c
 23197  005BA6  0EFD               	movlw	high STR_39
 23198  005BA8  6E0E               	movwf	i2printf@f+1,c
 23199  005BAA  EC7A  F012         	call	i2_printf	;wreg free
 23200                           
 23201                           ;UI.c: 521: lcdInst(0b11000000);;
 23202  005BAE  0EC0               	movlw	192
 23203  005BB0  EC48  F02F         	call	i2_lcdInst
 23204                           
 23205                           ;UI.c: 522: printf("LOG 2           ");
 23206  005BB4  0EC9               	movlw	low STR_40
 23207  005BB6  6E0D               	movwf	i2printf@f,c
 23208  005BB8  0EFC               	movlw	high STR_40
 23209  005BBA  6E0E               	movwf	i2printf@f+1,c
 23210  005BBC  EC7A  F012         	call	i2_printf	;wreg free
 23211  005BC0  0012               	return		;funcret
 23212  005BC2                     __end_of_change_state_to_logs_11:
 23213                           	opt stack 0
 23214                           pclatu	equ	0xFFB
 23215                           pclath	equ	0xFFA
 23216                           tblptru	equ	0xFF8
 23217                           tblptrh	equ	0xFF7
 23218                           tblptrl	equ	0xFF6
 23219                           tablat	equ	0xFF5
 23220                           prodh	equ	0xFF4
 23221                           prodl	equ	0xFF3
 23222                           intcon	equ	0xFF2
 23223                           intcon2	equ	0xFF1
 23224                           intcon3	equ	0xFF0
 23225                           indf0	equ	0xFEF
 23226                           postinc0	equ	0xFEE
 23227                           fsr0h	equ	0xFEA
 23228                           fsr0l	equ	0xFE9
 23229                           wreg	equ	0xFE8
 23230                           postdec1	equ	0xFE5
 23231                           fsr1h	equ	0xFE2
 23232                           fsr1l	equ	0xFE1
 23233                           indf2	equ	0xFDF
 23234                           postinc2	equ	0xFDE
 23235                           postdec2	equ	0xFDD
 23236                           fsr2h	equ	0xFDA
 23237                           fsr2l	equ	0xFD9
 23238                           status	equ	0xFD8
 23239                           
 23240 ;; *************** function _dispLogs *****************
 23241 ;; Defined at:
 23242 ;;		line 470 in file "UI.c"
 23243 ;; Parameters:    Size  Location     Type
 23244 ;;  myLog           2   17[COMRAM] int 
 23245 ;; Auto vars:     Size  Location     Type
 23246 ;;		None
 23247 ;; Return value:  Size  Location     Type
 23248 ;;                  1    wreg      void 
 23249 ;; Registers used:
 23250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23251 ;; Tracked objects:
 23252 ;;		On entry : 0/0
 23253 ;;		On exit  : 0/0
 23254 ;;		Unchanged: 0/0
 23255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23256 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23260 ;;Total ram usage:        2 bytes
 23261 ;; Hardware stack levels used:    1
 23262 ;; Hardware stack levels required when called:    2
 23263 ;; This function calls:
 23264 ;;		_retrieveLog
 23265 ;; This function is called by:
 23266 ;;		_updateMenu
 23267 ;; This function uses a non-reentrant model
 23268 ;;
 23269                           
 23270                           	psect	text82
 23271  005D3C                     __ptext82:
 23272                           	opt stack 0
 23273  005D3C                     _dispLogs:
 23274                           	opt stack 20
 23275                           
 23276                           ;UI.c: 471: logstate = 1;
 23277                           
 23278                           ;incstack = 0
 23279  005D3C  0E00               	movlw	0
 23280  005D3E  0100               	movlb	0	; () banked
 23281  005D40  6FF9               	movwf	(_logstate+1)& (0+255),b
 23282  005D42  0E01               	movlw	1
 23283  005D44  6FF8               	movwf	_logstate& (0+255),b
 23284                           
 23285                           ; BSR set to: 0
 23286                           ;UI.c: 472: log = myLog;
 23287  005D46  C012  F0EE         	movff	dispLogs@myLog,_log
 23288  005D4A  C013  F0EF         	movff	dispLogs@myLog+1,_log+1
 23289                           
 23290                           ; BSR set to: 0
 23291                           ;UI.c: 473: retrieveLog(myLog - 1);
 23292  005D4E  0EFF               	movlw	255
 23293  005D50  2412               	addwf	dispLogs@myLog,w,c
 23294  005D52  6E07               	movwf	retrieveLog@logNum,c
 23295  005D54  0EFF               	movlw	255
 23296  005D56  2013               	addwfc	dispLogs@myLog+1,w,c
 23297  005D58  6E08               	movwf	retrieveLog@logNum+1,c
 23298  005D5A  EC12  F021         	call	_retrieveLog	;wreg free
 23299  005D5E  0012               	return		;funcret
 23300  005D60                     __end_of_dispLogs:
 23301                           	opt stack 0
 23302                           pclatu	equ	0xFFB
 23303                           pclath	equ	0xFFA
 23304                           tblptru	equ	0xFF8
 23305                           tblptrh	equ	0xFF7
 23306                           tblptrl	equ	0xFF6
 23307                           tablat	equ	0xFF5
 23308                           prodh	equ	0xFF4
 23309                           prodl	equ	0xFF3
 23310                           intcon	equ	0xFF2
 23311                           intcon2	equ	0xFF1
 23312                           intcon3	equ	0xFF0
 23313                           indf0	equ	0xFEF
 23314                           postinc0	equ	0xFEE
 23315                           fsr0h	equ	0xFEA
 23316                           fsr0l	equ	0xFE9
 23317                           wreg	equ	0xFE8
 23318                           postdec1	equ	0xFE5
 23319                           fsr1h	equ	0xFE2
 23320                           fsr1l	equ	0xFE1
 23321                           indf2	equ	0xFDF
 23322                           postinc2	equ	0xFDE
 23323                           postdec2	equ	0xFDD
 23324                           fsr2h	equ	0xFDA
 23325                           fsr2l	equ	0xFD9
 23326                           status	equ	0xFD8
 23327                           
 23328 ;; *************** function _retrieveLog *****************
 23329 ;; Defined at:
 23330 ;;		line 138 in file "EEPROM.c"
 23331 ;; Parameters:    Size  Location     Type
 23332 ;;  logNum          2    6[COMRAM] int 
 23333 ;; Auto vars:     Size  Location     Type
 23334 ;;  i               2   13[COMRAM] int 
 23335 ;;  addr            2   15[COMRAM] unsigned short 
 23336 ;;  byte3           1   12[COMRAM] unsigned char 
 23337 ;;  byte2           1   11[COMRAM] unsigned char 
 23338 ;;  byte1           1   10[COMRAM] unsigned char 
 23339 ;; Return value:  Size  Location     Type
 23340 ;;                  1    wreg      void 
 23341 ;; Registers used:
 23342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23343 ;; Tracked objects:
 23344 ;;		On entry : 0/0
 23345 ;;		On exit  : 0/0
 23346 ;;		Unchanged: 0/0
 23347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23349 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23351 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23352 ;;Total ram usage:       11 bytes
 23353 ;; Hardware stack levels used:    1
 23354 ;; Hardware stack levels required when called:    1
 23355 ;; This function calls:
 23356 ;;		i2_EEPROM_read
 23357 ;;		i2___wmul
 23358 ;; This function is called by:
 23359 ;;		_dispLogs
 23360 ;; This function uses a non-reentrant model
 23361 ;;
 23362                           
 23363                           	psect	text83
 23364  004224                     __ptext83:
 23365                           	opt stack 0
 23366  004224                     _retrieveLog:
 23367                           	opt stack 20
 23368                           
 23369                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23370                           
 23371                           ;incstack = 0
 23372  004224  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23373  004228  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23374  00422C  0E00               	movlw	0
 23375  00422E  6E04               	movwf	i2___wmul@multiplicand+1,c
 23376  004230  0E0B               	movlw	11
 23377  004232  6E03               	movwf	i2___wmul@multiplicand,c
 23378  004234  EC78  F02E         	call	i2___wmul	;wreg free
 23379  004238  0E01               	movlw	1
 23380  00423A  2401               	addwf	?i2___wmul,w,c
 23381  00423C  6E10               	movwf	retrieveLog@addr,c
 23382  00423E  0E00               	movlw	0
 23383  004240  2002               	addwfc	?i2___wmul+1,w,c
 23384  004242  6E11               	movwf	retrieveLog@addr+1,c
 23385                           
 23386                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23387  004244  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23388  004248  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23389  00424C  EC14  F02F         	call	i2_EEPROM_read	;wreg free
 23390  004250  6E0B               	movwf	retrieveLog@byte1,c
 23391                           
 23392                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23393  004252  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23394  004256  0E80               	movlw	128
 23395  004258  1609               	andwf	??_retrieveLog,f,c
 23396  00425A  5009               	movf	??_retrieveLog,w,c
 23397  00425C  0100               	movlb	0	; () banked
 23398  00425E  6FF0               	movwf	_log_completion& (0+255),b
 23399  004260  6BF1               	clrf	(_log_completion+1)& (0+255),b
 23400                           
 23401                           ; BSR set to: 0
 23402                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23403  004262  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23404  004266  0E0F               	movlw	15
 23405  004268  1609               	andwf	??_retrieveLog,f,c
 23406  00426A  5009               	movf	??_retrieveLog,w,c
 23407  00426C  0101               	movlb	1	; () banked
 23408  00426E  6F45               	movwf	_log_count_total& (0+255),b
 23409  004270  6B46               	clrf	(_log_count_total+1)& (0+255),b
 23410                           
 23411                           ; BSR set to: 1
 23412                           ;EEPROM.c: 150: addr++;
 23413  004272  4A10               	infsnz	retrieveLog@addr,f,c
 23414  004274  2A11               	incf	retrieveLog@addr+1,f,c
 23415                           
 23416                           ; BSR set to: 1
 23417                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23418  004276  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23419  00427A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23420  00427E  EC14  F02F         	call	i2_EEPROM_read	;wreg free
 23421  004282  6E0C               	movwf	retrieveLog@byte2,c
 23422                           
 23423                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23424  004284  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23425  004288  3A09               	swapf	??_retrieveLog,f,c
 23426  00428A  0E0F               	movlw	15
 23427  00428C  1609               	andwf	??_retrieveLog,f,c
 23428  00428E  0E0F               	movlw	15
 23429  004290  1609               	andwf	??_retrieveLog,f,c
 23430  004292  5009               	movf	??_retrieveLog,w,c
 23431  004294  0100               	movlb	0	; () banked
 23432  004296  6FF2               	movwf	_log_count_pop_no_tab& (0+255),b
 23433  004298  6BF3               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23434                           
 23435                           ; BSR set to: 0
 23436                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23437  00429A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23438  00429E  0E0F               	movlw	15
 23439  0042A0  1609               	andwf	??_retrieveLog,f,c
 23440  0042A2  5009               	movf	??_retrieveLog,w,c
 23441  0042A4  0100               	movlb	0	; () banked
 23442  0042A6  6FF4               	movwf	_log_count_pop_w_tab& (0+255),b
 23443  0042A8  6BF5               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23444                           
 23445                           ; BSR set to: 0
 23446                           ;EEPROM.c: 156: addr++;
 23447  0042AA  4A10               	infsnz	retrieveLog@addr,f,c
 23448  0042AC  2A11               	incf	retrieveLog@addr+1,f,c
 23449                           
 23450                           ; BSR set to: 0
 23451                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23452  0042AE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23453  0042B2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23454  0042B6  EC14  F02F         	call	i2_EEPROM_read	;wreg free
 23455  0042BA  6E0D               	movwf	retrieveLog@byte3,c
 23456                           
 23457                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23458  0042BC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23459  0042C0  3A09               	swapf	??_retrieveLog,f,c
 23460  0042C2  0E0F               	movlw	15
 23461  0042C4  1609               	andwf	??_retrieveLog,f,c
 23462  0042C6  0E0F               	movlw	15
 23463  0042C8  1609               	andwf	??_retrieveLog,f,c
 23464  0042CA  5009               	movf	??_retrieveLog,w,c
 23465  0042CC  0101               	movlb	1	; () banked
 23466  0042CE  6F43               	movwf	_log_count_can_w_lab& (0+255),b
 23467  0042D0  6B44               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23468                           
 23469                           ; BSR set to: 1
 23470                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23471  0042D2  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23472  0042D6  0E0F               	movlw	15
 23473  0042D8  1609               	andwf	??_retrieveLog,f,c
 23474  0042DA  5009               	movf	??_retrieveLog,w,c
 23475  0042DC  0101               	movlb	1	; () banked
 23476  0042DE  6F41               	movwf	_log_count_can_no_lab& (0+255),b
 23477  0042E0  6B42               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23478                           
 23479                           ; BSR set to: 1
 23480                           ;EEPROM.c: 160: addr++;
 23481  0042E2  4A10               	infsnz	retrieveLog@addr,f,c
 23482  0042E4  2A11               	incf	retrieveLog@addr+1,f,c
 23483                           
 23484                           ; BSR set to: 1
 23485                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23486  0042E6  0E00               	movlw	0
 23487  0042E8  6E0F               	movwf	retrieveLog@i+1,c
 23488  0042EA  0E00               	movlw	0
 23489  0042EC  6E0E               	movwf	retrieveLog@i,c
 23490  0042EE                     i2l7406:
 23491                           
 23492                           ; BSR set to: 1
 23493  0042EE  BE0F               	btfsc	retrieveLog@i+1,7,c
 23494  0042F0  D006               	goto	i2l7410
 23495  0042F2  500F               	movf	retrieveLog@i+1,w,c
 23496  0042F4  E11E               	bnz	i2l7418
 23497  0042F6  0E07               	movlw	7
 23498  0042F8  5C0E               	subwf	retrieveLog@i,w,c
 23499  0042FA  B0D8               	btfsc	status,0,c
 23500  0042FC  D01A               	goto	i2l7418
 23501  0042FE                     i2l7410:
 23502                           
 23503                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23504  0042FE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23505  004302  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23506  004306  EC14  F02F         	call	i2_EEPROM_read	;wreg free
 23507  00430A  6E09               	movwf	??_retrieveLog& (0+255),c
 23508  00430C  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23509  00430E  90D8               	bcf	status,0,c
 23510  004310  340E               	rlcf	retrieveLog@i,w,c
 23511  004312  6ED9               	movwf	fsr2l,c
 23512  004314  340F               	rlcf	retrieveLog@i+1,w,c
 23513  004316  6EDA               	movwf	fsr2h,c
 23514  004318  0E00               	movlw	low _log_startTime
 23515  00431A  26D9               	addwf	fsr2l,f,c
 23516  00431C  0E01               	movlw	high _log_startTime
 23517  00431E  22DA               	addwfc	fsr2h,f,c
 23518  004320  C009  FFDE         	movff	??_retrieveLog,postinc2
 23519  004324  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23520                           
 23521                           ;EEPROM.c: 165: addr++;
 23522  004328  4A10               	infsnz	retrieveLog@addr,f,c
 23523  00432A  2A11               	incf	retrieveLog@addr+1,f,c
 23524  00432C  4A0E               	infsnz	retrieveLog@i,f,c
 23525  00432E  2A0F               	incf	retrieveLog@i+1,f,c
 23526  004330  D7DE               	goto	i2l7406
 23527  004332                     i2l7418:
 23528                           
 23529                           ;EEPROM.c: 166: }
 23530                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23531  004332  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23532  004336  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23533  00433A  EC14  F02F         	call	i2_EEPROM_read	;wreg free
 23534  00433E  6E09               	movwf	??_retrieveLog& (0+255),c
 23535  004340  5009               	movf	??_retrieveLog,w,c
 23536  004342  0100               	movlb	0	; () banked
 23537  004344  6FF6               	movwf	_log_total_time& (0+255),b
 23538  004346  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23539                           
 23540                           ; BSR set to: 0
 23541  004348  0012               	return		;funcret
 23542  00434A                     __end_of_retrieveLog:
 23543                           	opt stack 0
 23544                           pclatu	equ	0xFFB
 23545                           pclath	equ	0xFFA
 23546                           tblptru	equ	0xFF8
 23547                           tblptrh	equ	0xFF7
 23548                           tblptrl	equ	0xFF6
 23549                           tablat	equ	0xFF5
 23550                           prodh	equ	0xFF4
 23551                           prodl	equ	0xFF3
 23552                           intcon	equ	0xFF2
 23553                           intcon2	equ	0xFF1
 23554                           intcon3	equ	0xFF0
 23555                           indf0	equ	0xFEF
 23556                           postinc0	equ	0xFEE
 23557                           fsr0h	equ	0xFEA
 23558                           fsr0l	equ	0xFE9
 23559                           wreg	equ	0xFE8
 23560                           postdec1	equ	0xFE5
 23561                           fsr1h	equ	0xFE2
 23562                           fsr1l	equ	0xFE1
 23563                           indf2	equ	0xFDF
 23564                           postinc2	equ	0xFDE
 23565                           postdec2	equ	0xFDD
 23566                           fsr2h	equ	0xFDA
 23567                           fsr2l	equ	0xFD9
 23568                           status	equ	0xFD8
 23569                           
 23570 ;; *************** function i2_EEPROM_read *****************
 23571 ;; Defined at:
 23572 ;;		line 72 in file "EEPROM.c"
 23573 ;; Parameters:    Size  Location     Type
 23574 ;;  address         2    0[COMRAM] unsigned short 
 23575 ;; Auto vars:     Size  Location     Type
 23576 ;;		None
 23577 ;; Return value:  Size  Location     Type
 23578 ;;                  1    wreg      unsigned char 
 23579 ;; Registers used:
 23580 ;;		wreg, status,2
 23581 ;; Tracked objects:
 23582 ;;		On entry : 0/0
 23583 ;;		On exit  : 0/0
 23584 ;;		Unchanged: 0/0
 23585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23586 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23589 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23590 ;;Total ram usage:        2 bytes
 23591 ;; Hardware stack levels used:    1
 23592 ;; This function calls:
 23593 ;;		Nothing
 23594 ;; This function is called by:
 23595 ;;		_retrieveLog
 23596 ;; This function uses a non-reentrant model
 23597 ;;
 23598                           
 23599                           	psect	text84
 23600  005E28                     __ptext84:
 23601                           	opt stack 0
 23602  005E28                     i2_EEPROM_read:
 23603                           	opt stack 20
 23604                           
 23605                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23606                           
 23607                           ; BSR set to: 0
 23608                           ;incstack = 0
 23609  005E28  5002               	movf	i2EEPROM_read@address+1,w,c
 23610  005E2A  6EAA               	movwf	4010,c	;volatile
 23611                           
 23612                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23613  005E2C  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23614                           
 23615                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23616  005E30  9EA6               	bcf	4006,7,c	;volatile
 23617                           
 23618                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23619  005E32  9CA6               	bcf	4006,6,c	;volatile
 23620                           
 23621                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23622  005E34  80A6               	bsf	4006,0,c	;volatile
 23623  005E36                     i2l1163:
 23624  005E36  B0A6               	btfsc	4006,0,c	;volatile
 23625  005E38  D7FE               	goto	i2l1163
 23626                           
 23627                           ;EEPROM.c: 85: return EEDATA;
 23628  005E3A  50A8               	movf	4008,w,c	;volatile
 23629  005E3C  0012               	return	
 23630  005E3E                     __end_ofi2_EEPROM_read:
 23631                           	opt stack 0
 23632                           pclatu	equ	0xFFB
 23633                           pclath	equ	0xFFA
 23634                           tblptru	equ	0xFF8
 23635                           tblptrh	equ	0xFF7
 23636                           tblptrl	equ	0xFF6
 23637                           tablat	equ	0xFF5
 23638                           prodh	equ	0xFF4
 23639                           prodl	equ	0xFF3
 23640                           intcon	equ	0xFF2
 23641                           intcon2	equ	0xFF1
 23642                           intcon3	equ	0xFF0
 23643                           indf0	equ	0xFEF
 23644                           postinc0	equ	0xFEE
 23645                           fsr0h	equ	0xFEA
 23646                           fsr0l	equ	0xFE9
 23647                           wreg	equ	0xFE8
 23648                           postdec1	equ	0xFE5
 23649                           fsr1h	equ	0xFE2
 23650                           fsr1l	equ	0xFE1
 23651                           indf2	equ	0xFDF
 23652                           postinc2	equ	0xFDE
 23653                           postdec2	equ	0xFDD
 23654                           fsr2h	equ	0xFDA
 23655                           fsr2l	equ	0xFD9
 23656                           status	equ	0xFD8
 23657                           
 23658 ;; *************** function _updateArmState *****************
 23659 ;; Defined at:
 23660 ;;		line 691 in file "sort.c"
 23661 ;; Parameters:    Size  Location     Type
 23662 ;;		None
 23663 ;; Auto vars:     Size  Location     Type
 23664 ;;		None
 23665 ;; Return value:  Size  Location     Type
 23666 ;;                  1    wreg      void 
 23667 ;; Registers used:
 23668 ;;		wreg, status,2, status,0
 23669 ;; Tracked objects:
 23670 ;;		On entry : 0/0
 23671 ;;		On exit  : 0/0
 23672 ;;		Unchanged: 0/0
 23673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23678 ;;Total ram usage:        2 bytes
 23679 ;; Hardware stack levels used:    1
 23680 ;; This function calls:
 23681 ;;		Nothing
 23682 ;; This function is called by:
 23683 ;;		_handler
 23684 ;; This function uses a non-reentrant model
 23685 ;;
 23686                           
 23687                           	psect	text85
 23688  005868                     __ptext85:
 23689                           	opt stack 0
 23690  005868                     _updateArmState:
 23691                           	opt stack 23
 23692                           
 23693                           ;sort.c: 698: if(!was_low_2){
 23694                           
 23695                           ;incstack = 0
 23696  005868  5079               	movf	_was_low_2,w,c	;volatile
 23697  00586A  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23698  00586C  B4D8               	btfsc	status,2,c
 23699  00586E  D007               	goto	i2l10302
 23700  005870  D016               	goto	i2l979
 23701  005872                     i2l10296:
 23702                           
 23703                           ;sort.c: 703: PR2 = 0x20;
 23704  005872  0E20               	movlw	32
 23705  005874  6ECB               	movwf	4043,c	;volatile
 23706                           
 23707                           ;sort.c: 704: break;
 23708  005876  0012               	return	
 23709  005878                     i2l10298:
 23710                           
 23711                           ;sort.c: 707: PR2 = 0x40;
 23712  005878  0E40               	movlw	64
 23713  00587A  6ECB               	movwf	4043,c	;volatile
 23714                           
 23715                           ;sort.c: 709: }
 23716                           
 23717                           ;sort.c: 708: break;
 23718  00587C  0012               	return	
 23719  00587E                     i2l10302:
 23720  00587E  C0E8  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23721  005882  C0E9  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23722                           
 23723                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23724                           ; Switch size 1, requested type "space"
 23725                           ; Number of cases is 1, Range of values is 0 to 0
 23726                           ; switch strategies available:
 23727                           ; Name         Instructions Cycles
 23728                           ; simple_byte            4     3 (average)
 23729                           ;	Chosen strategy is simple_byte
 23730  005886  5002               	movf	??_updateArmState+1,w,c
 23731  005888  0A00               	xorlw	0	; case 0
 23732  00588A  A4D8               	btfss	status,2,c
 23733  00588C  0012               	return	
 23734                           
 23735                           ; Switch size 1, requested type "space"
 23736                           ; Number of cases is 2, Range of values is 0 to 1
 23737                           ; switch strategies available:
 23738                           ; Name         Instructions Cycles
 23739                           ; simple_byte            7     4 (average)
 23740                           ;	Chosen strategy is simple_byte
 23741  00588E  5001               	movf	??_updateArmState,w,c
 23742  005890  0A00               	xorlw	0	; case 0
 23743  005892  B4D8               	btfsc	status,2,c
 23744  005894  D7EE               	goto	i2l10296
 23745  005896  0A01               	xorlw	1	; case 1
 23746  005898  A4D8               	btfss	status,2,c
 23747                           
 23748                           ;sort.c: 710: }
 23749  00589A  0012               	return	
 23750  00589C  D7ED               	goto	i2l10298
 23751  00589E                     i2l979:
 23752                           
 23753                           ;sort.c: 711: else{
 23754                           ;sort.c: 713: PR2 = 0xFF;
 23755  00589E  68CB               	setf	4043,c	;volatile
 23756  0058A0  0012               	return	
 23757  0058A2                     __end_of_updateArmState:
 23758                           	opt stack 0
 23759                           pclatu	equ	0xFFB
 23760                           pclath	equ	0xFFA
 23761                           tblptru	equ	0xFF8
 23762                           tblptrh	equ	0xFF7
 23763                           tblptrl	equ	0xFF6
 23764                           tablat	equ	0xFF5
 23765                           prodh	equ	0xFF4
 23766                           prodl	equ	0xFF3
 23767                           intcon	equ	0xFF2
 23768                           intcon2	equ	0xFF1
 23769                           intcon3	equ	0xFF0
 23770                           indf0	equ	0xFEF
 23771                           postinc0	equ	0xFEE
 23772                           fsr0h	equ	0xFEA
 23773                           fsr0l	equ	0xFE9
 23774                           wreg	equ	0xFE8
 23775                           postdec1	equ	0xFE5
 23776                           fsr1h	equ	0xFE2
 23777                           fsr1l	equ	0xFE1
 23778                           indf2	equ	0xFDF
 23779                           postinc2	equ	0xFDE
 23780                           postdec2	equ	0xFDD
 23781                           fsr2h	equ	0xFDA
 23782                           fsr2l	equ	0xFD9
 23783                           status	equ	0xFD8
 23784                           
 23785 ;; *************** function _printSortTimer *****************
 23786 ;; Defined at:
 23787 ;;		line 518 in file "sort.c"
 23788 ;; Parameters:    Size  Location     Type
 23789 ;;		None
 23790 ;; Auto vars:     Size  Location     Type
 23791 ;;  i               2   70[COMRAM] int 
 23792 ;;  i               2   72[COMRAM] int 
 23793 ;;  curTime        14   44[COMRAM] int [7]
 23794 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23795 ;;  sec             2   64[COMRAM] int 
 23796 ;;  min             2   62[COMRAM] int 
 23797 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23798 ;;  start_sec       2   58[COMRAM] unsigned int 
 23799 ;; Return value:  Size  Location     Type
 23800 ;;                  1    wreg      void 
 23801 ;; Registers used:
 23802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23803 ;; Tracked objects:
 23804 ;;		On entry : 0/0
 23805 ;;		On exit  : 0/0
 23806 ;;		Unchanged: 0/0
 23807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23809 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23810 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23811 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23812 ;;Total ram usage:       33 bytes
 23813 ;; Hardware stack levels used:    1
 23814 ;; Hardware stack levels required when called:    3
 23815 ;; This function calls:
 23816 ;;		i2___awmod
 23817 ;;		i2___lwdiv
 23818 ;;		i2___lwmod
 23819 ;;		i2___wmul
 23820 ;;		i2_delay_ms
 23821 ;;		i2_getRTC
 23822 ;;		i2_lcdInst
 23823 ;;		i2_printf
 23824 ;; This function is called by:
 23825 ;;		_handler
 23826 ;; This function uses a non-reentrant model
 23827 ;;
 23828                           
 23829                           	psect	text86
 23830  002862                     __ptext86:
 23831                           	opt stack 0
 23832  002862                     _printSortTimer:
 23833                           	opt stack 20
 23834                           
 23835                           ;sort.c: 519: getRTC();
 23836                           
 23837                           ;incstack = 0
 23838  002862  EC69  F029         	call	i2_getRTC	;wreg free
 23839                           
 23840                           ;sort.c: 520: int curTime[7];
 23841                           ;sort.c: 521: for(int i = 0; i < 7; i++){
 23842  002866  0E00               	movlw	0
 23843  002868  6E4A               	movwf	printSortTimer@i+1,c
 23844  00286A  0E00               	movlw	0
 23845  00286C  6E49               	movwf	printSortTimer@i,c
 23846  00286E                     i2l10120:
 23847  00286E  BE4A               	btfsc	printSortTimer@i+1,7,c
 23848  002870  D006               	goto	i2l10124
 23849  002872  504A               	movf	printSortTimer@i+1,w,c
 23850  002874  E131               	bnz	i2l10130
 23851  002876  0E07               	movlw	7
 23852  002878  5C49               	subwf	printSortTimer@i,w,c
 23853  00287A  B0D8               	btfsc	status,0,c
 23854  00287C  D02D               	goto	i2l10130
 23855  00287E                     i2l10124:
 23856                           
 23857                           ;sort.c: 522: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23858  00287E  0E1C               	movlw	low _time
 23859  002880  2449               	addwf	printSortTimer@i,w,c
 23860  002882  6ED9               	movwf	fsr2l,c
 23861  002884  0E01               	movlw	high _time
 23862  002886  204A               	addwfc	printSortTimer@i+1,w,c
 23863  002888  6EDA               	movwf	fsr2h,c
 23864  00288A  50DF               	movf	indf2,w,c
 23865  00288C  6E2A               	movwf	??_printSortTimer& (0+255),c
 23866  00288E  3A2A               	swapf	??_printSortTimer,f,c
 23867  002890  0E0F               	movlw	15
 23868  002892  162A               	andwf	??_printSortTimer,f,c
 23869  002894  0E0F               	movlw	15
 23870  002896  162A               	andwf	??_printSortTimer,f,c
 23871  002898  502A               	movf	??_printSortTimer,w,c
 23872  00289A  0D0A               	mullw	10
 23873  00289C  0E1C               	movlw	low _time
 23874  00289E  2449               	addwf	printSortTimer@i,w,c
 23875  0028A0  6ED9               	movwf	fsr2l,c
 23876  0028A2  0E01               	movlw	high _time
 23877  0028A4  204A               	addwfc	printSortTimer@i+1,w,c
 23878  0028A6  6EDA               	movwf	fsr2h,c
 23879  0028A8  50DF               	movf	indf2,w,c
 23880  0028AA  0B0F               	andlw	15
 23881  0028AC  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23882  0028AE  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23883  0028B0  50F3               	movf	prodl,w,c
 23884  0028B2  262B               	addwf	??_printSortTimer+1,f,c
 23885  0028B4  50F4               	movf	prodh,w,c
 23886  0028B6  222C               	addwfc	??_printSortTimer+2,f,c
 23887  0028B8  90D8               	bcf	status,0,c
 23888  0028BA  3449               	rlcf	printSortTimer@i,w,c
 23889  0028BC  6ED9               	movwf	fsr2l,c
 23890  0028BE  344A               	rlcf	printSortTimer@i+1,w,c
 23891  0028C0  6EDA               	movwf	fsr2h,c
 23892  0028C2  0E2D               	movlw	low printSortTimer@curTime
 23893  0028C4  26D9               	addwf	fsr2l,f,c
 23894  0028C6  0E00               	movlw	high printSortTimer@curTime
 23895  0028C8  22DA               	addwfc	fsr2h,f,c
 23896  0028CA  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23897  0028CE  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23898  0028D2  4A49               	infsnz	printSortTimer@i,f,c
 23899  0028D4  2A4A               	incf	printSortTimer@i+1,f,c
 23900  0028D6  D7CB               	goto	i2l10120
 23901  0028D8                     i2l10130:
 23902                           
 23903                           ;sort.c: 523: }
 23904                           ;sort.c: 524: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23905  0028D8  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23906  0028DC  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23907  0028E0  0E00               	movlw	0
 23908  0028E2  6E04               	movwf	i2___wmul@multiplicand+1,c
 23909  0028E4  0E3C               	movlw	60
 23910  0028E6  6E03               	movwf	i2___wmul@multiplicand,c
 23911  0028E8  EC78  F02E         	call	i2___wmul	;wreg free
 23912  0028EC  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23913  0028F0  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23914  0028F4  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23915  0028F8  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23916  0028FC  0E0E               	movlw	14
 23917  0028FE  6E04               	movwf	i2___wmul@multiplicand+1,c
 23918  002900  0E10               	movlw	16
 23919  002902  6E03               	movwf	i2___wmul@multiplicand,c
 23920  002904  EC78  F02E         	call	i2___wmul	;wreg free
 23921  002908  5001               	movf	?i2___wmul,w,c
 23922  00290A  262A               	addwf	??_printSortTimer,f,c
 23923  00290C  5002               	movf	?i2___wmul+1,w,c
 23924  00290E  222B               	addwfc	??_printSortTimer+1,f,c
 23925  002910  0101               	movlb	1	; () banked
 23926  002912  510E               	movf	_startTime& (0+255),w,b
 23927  002914  242A               	addwf	??_printSortTimer,w,c
 23928  002916  6E3B               	movwf	printSortTimer@start_sec,c
 23929  002918  0101               	movlb	1	; () banked
 23930  00291A  510F               	movf	(_startTime+1)& (0+255),w,b
 23931  00291C  202B               	addwfc	??_printSortTimer+1,w,c
 23932  00291E  6E3C               	movwf	printSortTimer@start_sec+1,c
 23933                           
 23934                           ;sort.c: 525: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23935  002920  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23936  002924  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23937  002928  0E00               	movlw	0
 23938  00292A  6E04               	movwf	i2___wmul@multiplicand+1,c
 23939  00292C  0E3C               	movlw	60
 23940  00292E  6E03               	movwf	i2___wmul@multiplicand,c
 23941  002930  EC78  F02E         	call	i2___wmul	;wreg free
 23942  002934  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23943  002938  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23944  00293C  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23945  002940  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23946  002944  0E0E               	movlw	14
 23947  002946  6E04               	movwf	i2___wmul@multiplicand+1,c
 23948  002948  0E10               	movlw	16
 23949  00294A  6E03               	movwf	i2___wmul@multiplicand,c
 23950  00294C  EC78  F02E         	call	i2___wmul	;wreg free
 23951  002950  5001               	movf	?i2___wmul,w,c
 23952  002952  262A               	addwf	??_printSortTimer,f,c
 23953  002954  5002               	movf	?i2___wmul+1,w,c
 23954  002956  222B               	addwfc	??_printSortTimer+1,f,c
 23955  002958  502D               	movf	printSortTimer@curTime,w,c
 23956  00295A  242A               	addwf	??_printSortTimer,w,c
 23957  00295C  6E3D               	movwf	printSortTimer@cur_sec,c
 23958  00295E  502E               	movf	printSortTimer@curTime+1,w,c
 23959  002960  202B               	addwfc	??_printSortTimer+1,w,c
 23960  002962  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23961                           
 23962                           ;sort.c: 526: unsigned int timeDiff = cur_sec - start_sec;
 23963  002964  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23964  002968  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23965  00296C  1E2A               	comf	??_printSortTimer,f,c
 23966  00296E  1E2B               	comf	??_printSortTimer+1,f,c
 23967  002970  4A2A               	infsnz	??_printSortTimer,f,c
 23968  002972  2A2B               	incf	??_printSortTimer+1,f,c
 23969  002974  503D               	movf	printSortTimer@cur_sec,w,c
 23970  002976  242A               	addwf	??_printSortTimer,w,c
 23971  002978  6E45               	movwf	printSortTimer@timeDiff,c
 23972  00297A  503E               	movf	printSortTimer@cur_sec+1,w,c
 23973  00297C  202B               	addwfc	??_printSortTimer+1,w,c
 23974  00297E  6E46               	movwf	printSortTimer@timeDiff+1,c
 23975                           
 23976                           ;sort.c: 528: total_time = timeDiff;
 23977  002980  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23978  002984  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23979                           
 23980                           ;sort.c: 530: if(f_most_recent_sort_time){
 23981  002988  0101               	movlb	1	; () banked
 23982  00298A  5139               	movf	_f_most_recent_sort_time& (0+255),w,b
 23983  00298C  0101               	movlb	1	; () banked
 23984  00298E  113A               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23985  002990  B4D8               	btfsc	status,2,c
 23986  002992  D009               	goto	i2l10142
 23987                           
 23988                           ; BSR set to: 1
 23989                           ;sort.c: 531: most_recent_sort_time = total_time;
 23990  002994  C0FA  F147         	movff	_total_time,_most_recent_sort_time
 23991  002998  C0FB  F148         	movff	_total_time+1,_most_recent_sort_time+1
 23992                           
 23993                           ; BSR set to: 1
 23994                           ;sort.c: 532: f_most_recent_sort_time = 0;
 23995  00299C  0E00               	movlw	0
 23996  00299E  0101               	movlb	1	; () banked
 23997  0029A0  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23998  0029A2  0E00               	movlw	0
 23999  0029A4  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
 24000  0029A6                     i2l10142:
 24001                           
 24002                           ; BSR set to: 1
 24003                           ;sort.c: 533: }
 24004                           ;sort.c: 536: if(total_time >= 20){
 24005  0029A6  0100               	movlb	0	; () banked
 24006  0029A8  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24007  0029AA  D05B               	goto	i2l920
 24008  0029AC  0100               	movlb	0	; () banked
 24009  0029AE  51FB               	movf	(_total_time+1)& (0+255),w,b
 24010  0029B0  E105               	bnz	i2u989_40
 24011  0029B2  0E14               	movlw	20
 24012  0029B4  0100               	movlb	0	; () banked
 24013  0029B6  5DFA               	subwf	_total_time& (0+255),w,b
 24014  0029B8  A0D8               	btfss	status,0,c
 24015  0029BA  D053               	goto	i2l920
 24016  0029BC                     i2u989_40:
 24017                           
 24018                           ; BSR set to: 0
 24019                           ;sort.c: 537: if(LATBbits.LATB2 == 0){
 24020  0029BC  B48A               	btfsc	3978,2,c	;volatile
 24021  0029BE  D036               	goto	i2l10164
 24022                           
 24023                           ; BSR set to: 0
 24024                           ;sort.c: 538: motor_toggle_count++;
 24025  0029C0  0101               	movlb	1	; () banked
 24026  0029C2  4B49               	infsnz	_motor_toggle_count& (0+255),f,b
 24027  0029C4  2B4A               	incf	(_motor_toggle_count+1)& (0+255),f,b
 24028                           
 24029                           ; BSR set to: 1
 24030                           ;sort.c: 539: if(motor_toggle_count == 2){
 24031  0029C6  0E02               	movlw	2
 24032  0029C8  0101               	movlb	1	; () banked
 24033  0029CA  1949               	xorwf	_motor_toggle_count& (0+255),w,b
 24034  0029CC  0101               	movlb	1	; () banked
 24035  0029CE  114A               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 24036  0029D0  A4D8               	btfss	status,2,c
 24037  0029D2  D047               	goto	i2l920
 24038                           
 24039                           ; BSR set to: 1
 24040                           ;sort.c: 540: motor_toggle_count = 0;
 24041  0029D4  0E00               	movlw	0
 24042  0029D6  0101               	movlb	1	; () banked
 24043  0029D8  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
 24044  0029DA  0E00               	movlw	0
 24045  0029DC  6F49               	movwf	_motor_toggle_count& (0+255),b
 24046                           
 24047                           ;sort.c: 541: for(int i=0; i<46; i++){
 24048  0029DE  0E00               	movlw	0
 24049  0029E0  6E48               	movwf	printSortTimer@i_1168+1,c
 24050  0029E2  0E00               	movlw	0
 24051  0029E4  6E47               	movwf	printSortTimer@i_1168,c
 24052                           
 24053                           ; BSR set to: 1
 24054  0029E6  BE48               	btfsc	printSortTimer@i_1168+1,7,c
 24055  0029E8  D006               	goto	i2l10156
 24056  0029EA  5048               	movf	printSortTimer@i_1168+1,w,c
 24057  0029EC  E11D               	bnz	i2l924
 24058  0029EE  0E2E               	movlw	46
 24059  0029F0  5C47               	subwf	printSortTimer@i_1168,w,c
 24060  0029F2  B0D8               	btfsc	status,0,c
 24061  0029F4  D019               	goto	i2l924
 24062  0029F6                     i2l10156:
 24063                           
 24064                           ;sort.c: 542: LATBbits.LATB2 = !LATBbits.LATB2;
 24065  0029F6  B48A               	btfsc	3978,2,c	;volatile
 24066  0029F8  D003               	goto	i2u993_40
 24067  0029FA  6A2A               	clrf	??_printSortTimer& (0+255),c
 24068  0029FC  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24069  0029FE  D001               	goto	i2u994_48
 24070  002A00                     i2u993_40:
 24071  002A00  6A2A               	clrf	??_printSortTimer& (0+255),c
 24072  002A02                     i2u994_48:
 24073  002A02  462A               	rlncf	??_printSortTimer,f,c
 24074  002A04  462A               	rlncf	??_printSortTimer,f,c
 24075  002A06  508A               	movf	3978,w,c	;volatile
 24076  002A08  182A               	xorwf	??_printSortTimer,w,c
 24077  002A0A  0BFB               	andlw	-5
 24078  002A0C  182A               	xorwf	??_printSortTimer,w,c
 24079  002A0E  6E8A               	movwf	3978,c	;volatile
 24080                           
 24081                           ;sort.c: 543: delay_ms(45-i);
 24082  002A10  5047               	movf	printSortTimer@i_1168,w,c
 24083  002A12  0800               	sublw	0
 24084  002A14  0F2D               	addlw	45
 24085  002A16  ECEF  F02E         	call	i2_delay_ms
 24086  002A1A  4A47               	infsnz	printSortTimer@i_1168,f,c
 24087  002A1C  2A48               	incf	printSortTimer@i_1168+1,f,c
 24088  002A1E  BE48               	btfsc	printSortTimer@i_1168+1,7,c
 24089  002A20  D7EA               	goto	i2l10156
 24090  002A22  5048               	movf	printSortTimer@i_1168+1,w,c
 24091  002A24  E101               	bnz	i2u995_40
 24092  002A26  D7E3               	goto	L18
 24093  002A28                     i2u995_40:
 24094  002A28                     i2l924:
 24095                           
 24096                           ;sort.c: 544: }
 24097                           ;sort.c: 545: LATBbits.LATB2 = 1;
 24098  002A28  848A               	bsf	3978,2,c	;volatile
 24099                           
 24100                           ;sort.c: 546: }
 24101                           ;sort.c: 547: }
 24102  002A2A  D01B               	goto	i2l920
 24103  002A2C                     i2l10164:
 24104                           
 24105                           ;sort.c: 548: else if(total_time % 20 == 0){
 24106  002A2C  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24107  002A30  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24108  002A34  0E00               	movlw	0
 24109  002A36  6E04               	movwf	i2___awmod@divisor+1,c
 24110  002A38  0E14               	movlw	20
 24111  002A3A  6E03               	movwf	i2___awmod@divisor,c
 24112  002A3C  ECA2  F029         	call	i2___awmod	;wreg free
 24113  002A40  5001               	movf	?i2___awmod,w,c
 24114  002A42  1002               	iorwf	?i2___awmod+1,w,c
 24115  002A44  A4D8               	btfss	status,2,c
 24116  002A46  D00D               	goto	i2l920
 24117                           
 24118                           ;sort.c: 549: LATBbits.LATB2 = !LATBbits.LATB2;
 24119  002A48  B48A               	btfsc	3978,2,c	;volatile
 24120  002A4A  D003               	goto	i2u997_40
 24121  002A4C  6A2A               	clrf	??_printSortTimer& (0+255),c
 24122  002A4E  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24123  002A50  D001               	goto	i2u998_48
 24124  002A52                     i2u997_40:
 24125  002A52  6A2A               	clrf	??_printSortTimer& (0+255),c
 24126  002A54                     i2u998_48:
 24127  002A54  462A               	rlncf	??_printSortTimer,f,c
 24128  002A56  462A               	rlncf	??_printSortTimer,f,c
 24129  002A58  508A               	movf	3978,w,c	;volatile
 24130  002A5A  182A               	xorwf	??_printSortTimer,w,c
 24131  002A5C  0BFB               	andlw	-5
 24132  002A5E  182A               	xorwf	??_printSortTimer,w,c
 24133  002A60  6E8A               	movwf	3978,c	;volatile
 24134  002A62                     i2l920:
 24135                           
 24136                           ;sort.c: 550: }
 24137                           ;sort.c: 551: }
 24138                           ;sort.c: 554: if(total_time >= 30){
 24139  002A62  0100               	movlb	0	; () banked
 24140  002A64  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24141  002A66  D034               	goto	i2l927
 24142  002A68  0100               	movlb	0	; () banked
 24143  002A6A  51FB               	movf	(_total_time+1)& (0+255),w,b
 24144  002A6C  E105               	bnz	i2u999_40
 24145  002A6E  0E1E               	movlw	30
 24146  002A70  0100               	movlb	0	; () banked
 24147  002A72  5DFA               	subwf	_total_time& (0+255),w,b
 24148  002A74  A0D8               	btfss	status,0,c
 24149  002A76  D02C               	goto	i2l927
 24150  002A78                     i2u999_40:
 24151                           
 24152                           ; BSR set to: 0
 24153                           ;sort.c: 555: if(LATBbits.LATB0 == 1){
 24154  002A78  A08A               	btfss	3978,0,c	;volatile
 24155  002A7A  D011               	goto	i2l10178
 24156                           
 24157                           ; BSR set to: 0
 24158                           ;sort.c: 556: agitator_toggle_count++;
 24159  002A7C  0101               	movlb	1	; () banked
 24160  002A7E  4B23               	infsnz	_agitator_toggle_count& (0+255),f,b
 24161  002A80  2B24               	incf	(_agitator_toggle_count+1)& (0+255),f,b
 24162                           
 24163                           ; BSR set to: 1
 24164                           ;sort.c: 557: if(agitator_toggle_count == 2){
 24165  002A82  0E02               	movlw	2
 24166  002A84  0101               	movlb	1	; () banked
 24167  002A86  1923               	xorwf	_agitator_toggle_count& (0+255),w,b
 24168  002A88  0101               	movlb	1	; () banked
 24169  002A8A  1124               	iorwf	(_agitator_toggle_count+1)& (0+255),w,b
 24170  002A8C  A4D8               	btfss	status,2,c
 24171  002A8E  D020               	goto	i2l927
 24172                           
 24173                           ; BSR set to: 1
 24174                           ;sort.c: 558: agitator_toggle_count = 0;
 24175  002A90  0E00               	movlw	0
 24176  002A92  0101               	movlb	1	; () banked
 24177  002A94  6F24               	movwf	(_agitator_toggle_count+1)& (0+255),b
 24178  002A96  0E00               	movlw	0
 24179  002A98  6F23               	movwf	_agitator_toggle_count& (0+255),b
 24180                           
 24181                           ; BSR set to: 1
 24182                           ;sort.c: 559: LATBbits.LATB0 = 0;
 24183  002A9A  908A               	bcf	3978,0,c	;volatile
 24184                           
 24185                           ; BSR set to: 1
 24186                           ;sort.c: 560: }
 24187                           ;sort.c: 561: }
 24188  002A9C  D019               	goto	i2l927
 24189  002A9E                     i2l10178:
 24190                           
 24191                           ;sort.c: 562: else if(total_time % 30 == 0){
 24192  002A9E  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24193  002AA2  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24194  002AA6  0E00               	movlw	0
 24195  002AA8  6E04               	movwf	i2___awmod@divisor+1,c
 24196  002AAA  0E1E               	movlw	30
 24197  002AAC  6E03               	movwf	i2___awmod@divisor,c
 24198  002AAE  ECA2  F029         	call	i2___awmod	;wreg free
 24199  002AB2  5001               	movf	?i2___awmod,w,c
 24200  002AB4  1002               	iorwf	?i2___awmod+1,w,c
 24201  002AB6  A4D8               	btfss	status,2,c
 24202  002AB8  D00B               	goto	i2l927
 24203                           
 24204                           ;sort.c: 563: LATBbits.LATB0 = !LATBbits.LATB0;
 24205  002ABA  B08A               	btfsc	3978,0,c	;volatile
 24206  002ABC  D003               	goto	i2u1003_40
 24207  002ABE  6A2A               	clrf	??_printSortTimer& (0+255),c
 24208  002AC0  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24209  002AC2  D001               	goto	i2u1004_48
 24210  002AC4                     i2u1003_40:
 24211  002AC4  6A2A               	clrf	??_printSortTimer& (0+255),c
 24212  002AC6                     i2u1004_48:
 24213  002AC6  508A               	movf	3978,w,c	;volatile
 24214  002AC8  182A               	xorwf	??_printSortTimer,w,c
 24215  002ACA  0BFE               	andlw	-2
 24216  002ACC  182A               	xorwf	??_printSortTimer,w,c
 24217  002ACE  6E8A               	movwf	3978,c	;volatile
 24218  002AD0                     i2l927:
 24219                           
 24220                           ;sort.c: 564: }
 24221                           ;sort.c: 565: }
 24222                           ;sort.c: 567: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 24223  002AD0  C147  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 24224  002AD4  C148  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 24225  002AD8  1E2A               	comf	??_printSortTimer,f,c
 24226  002ADA  1E2B               	comf	??_printSortTimer+1,f,c
 24227  002ADC  4A2A               	infsnz	??_printSortTimer,f,c
 24228  002ADE  2A2B               	incf	??_printSortTimer+1,f,c
 24229  002AE0  0100               	movlb	0	; () banked
 24230  002AE2  51FA               	movf	_total_time& (0+255),w,b
 24231  002AE4  262A               	addwf	??_printSortTimer,f,c
 24232  002AE6  0100               	movlb	0	; () banked
 24233  002AE8  51FB               	movf	(_total_time+1)& (0+255),w,b
 24234  002AEA  222B               	addwfc	??_printSortTimer+1,f,c
 24235  002AEC  0E2A               	movlw	42
 24236  002AEE  182A               	xorwf	??_printSortTimer,w,c
 24237  002AF0  102B               	iorwf	??_printSortTimer+1,w,c
 24238  002AF2  B4D8               	btfsc	status,2,c
 24239  002AF4  D007               	goto	i2l10184
 24240                           
 24241                           ; BSR set to: 0
 24242  002AF6  0EB3               	movlw	179
 24243  002AF8  0100               	movlb	0	; () banked
 24244  002AFA  19FA               	xorwf	_total_time& (0+255),w,b
 24245  002AFC  0100               	movlb	0	; () banked
 24246  002AFE  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 24247  002B00  A4D8               	btfss	status,2,c
 24248  002B02  D003               	goto	i2l10186
 24249  002B04                     i2l10184:
 24250                           
 24251                           ; BSR set to: 0
 24252                           ;sort.c: 568: machine_state = DoneSorting_state;
 24253  002B04  0E02               	movlw	2
 24254  002B06  0100               	movlb	0	; () banked
 24255  002B08  6FFC               	movwf	_machine_state& (0+255),b
 24256  002B0A                     i2l10186:
 24257                           
 24258                           ; BSR set to: 0
 24259                           ;sort.c: 570: }
 24260                           ;sort.c: 572: int min = (timeDiff % 3600) / 60;
 24261  002B0A  0E0E               	movlw	14
 24262  002B0C  6E04               	movwf	i2___lwmod@divisor+1,c
 24263  002B0E  0E10               	movlw	16
 24264  002B10  6E03               	movwf	i2___lwmod@divisor,c
 24265  002B12  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24266  002B16  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24267  002B1A  EC13  F02C         	call	i2___lwmod	;wreg free
 24268  002B1E  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 24269  002B22  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 24270  002B26  0E00               	movlw	0
 24271  002B28  6E09               	movwf	i2___lwdiv@divisor+1,c
 24272  002B2A  0E3C               	movlw	60
 24273  002B2C  6E08               	movwf	i2___lwdiv@divisor,c
 24274  002B2E  EC32  F02B         	call	i2___lwdiv	;wreg free
 24275  002B32  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 24276  002B36  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 24277                           
 24278                           ;sort.c: 573: int sec = (timeDiff % 3600) % 60;
 24279  002B3A  0E0E               	movlw	14
 24280  002B3C  6E04               	movwf	i2___lwmod@divisor+1,c
 24281  002B3E  0E10               	movlw	16
 24282  002B40  6E03               	movwf	i2___lwmod@divisor,c
 24283  002B42  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24284  002B46  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24285  002B4A  EC13  F02C         	call	i2___lwmod	;wreg free
 24286  002B4E  C001  F043         	movff	?i2___lwmod,_printSortTimer$2572
 24287  002B52  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2572+1
 24288                           
 24289                           ;sort.c: 573: int sec = (timeDiff % 3600) % 60;
 24290  002B56  C043  F001         	movff	_printSortTimer$2572,i2___lwmod@dividend
 24291  002B5A  C044  F002         	movff	_printSortTimer$2572+1,i2___lwmod@dividend+1
 24292  002B5E  0E00               	movlw	0
 24293  002B60  6E04               	movwf	i2___lwmod@divisor+1,c
 24294  002B62  0E3C               	movlw	60
 24295  002B64  6E03               	movwf	i2___lwmod@divisor,c
 24296  002B66  EC13  F02C         	call	i2___lwmod	;wreg free
 24297  002B6A  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 24298  002B6E  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 24299                           
 24300                           ;sort.c: 575: lcdInst(0b10000000);;
 24301  002B72  0E80               	movlw	128
 24302  002B74  EC48  F02F         	call	i2_lcdInst
 24303                           
 24304                           ;sort.c: 576: printf("SORTING...     ");
 24305  002B78  0E3D               	movlw	low STR_64
 24306  002B7A  6E0D               	movwf	i2printf@f,c
 24307  002B7C  0EFE               	movlw	high STR_64
 24308  002B7E  6E0E               	movwf	i2printf@f+1,c
 24309  002B80  EC7A  F012         	call	i2_printf	;wreg free
 24310                           
 24311                           ;sort.c: 577: lcdInst(0b11000000);;
 24312  002B84  0EC0               	movlw	192
 24313  002B86  EC48  F02F         	call	i2_lcdInst
 24314                           
 24315                           ;sort.c: 578: printf("TIME %d:%02d   ", min, sec);
 24316  002B8A  0E4D               	movlw	low STR_65
 24317  002B8C  6E0D               	movwf	i2printf@f,c
 24318  002B8E  0EFE               	movlw	high STR_65
 24319  002B90  6E0E               	movwf	i2printf@f+1,c
 24320  002B92  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 24321  002B96  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 24322  002B9A  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 24323  002B9E  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 24324  002BA2  EC7A  F012         	call	i2_printf	;wreg free
 24325  002BA6  0012               	return		;funcret
 24326  002BA8                     __end_of_printSortTimer:
 24327                           	opt stack 0
 24328                           pclatu	equ	0xFFB
 24329                           pclath	equ	0xFFA
 24330                           tblptru	equ	0xFF8
 24331                           tblptrh	equ	0xFF7
 24332                           tblptrl	equ	0xFF6
 24333                           tablat	equ	0xFF5
 24334                           prodh	equ	0xFF4
 24335                           prodl	equ	0xFF3
 24336                           intcon	equ	0xFF2
 24337                           intcon2	equ	0xFF1
 24338                           intcon3	equ	0xFF0
 24339                           indf0	equ	0xFEF
 24340                           postinc0	equ	0xFEE
 24341                           fsr0h	equ	0xFEA
 24342                           fsr0l	equ	0xFE9
 24343                           wreg	equ	0xFE8
 24344                           postdec1	equ	0xFE5
 24345                           fsr1h	equ	0xFE2
 24346                           fsr1l	equ	0xFE1
 24347                           indf2	equ	0xFDF
 24348                           postinc2	equ	0xFDE
 24349                           postdec2	equ	0xFDD
 24350                           fsr2h	equ	0xFDA
 24351                           fsr2l	equ	0xFD9
 24352                           status	equ	0xFD8
 24353                           
 24354 ;; *************** function i2_printf *****************
 24355 ;; Defined at:
 24356 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 24357 ;; Parameters:    Size  Location     Type
 24358 ;;  f               2   12[COMRAM] PTR const unsigned char 
 24359 ;;		 -> STR_127(18), STR_126(18), STR_125(17), STR_124(17), 
 24360 ;;		 -> STR_123(15), STR_122(15), STR_121(18), STR_120(15), 
 24361 ;;		 -> STR_119(18), STR_118(18), STR_117(17), STR_116(17), 
 24362 ;;		 -> STR_115(17), STR_114(17), STR_113(17), STR_112(17), 
 24363 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 24364 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 24365 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 24366 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 24367 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 24368 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 24369 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 24370 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 24371 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 24372 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 24373 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 24374 ;;		 -> STR_67(7), STR_66(21), STR_65(16), STR_64(16), 
 24375 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 24376 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 24377 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 24378 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 24379 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 24380 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 24381 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 24382 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 24383 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 24384 ;;		 -> STR_2(14), STR_1(18), 
 24385 ;; Auto vars:     Size  Location     Type
 24386 ;;  printf          4    0        struct .
 24387 ;;  printf          2   39[COMRAM] int 
 24388 ;;  printf          2   35[COMRAM] unsigned int 
 24389 ;;  printf          2   33[COMRAM] unsigned int 
 24390 ;;  printf          2   31[COMRAM] PTR void [1]
 24391 ;;		 -> ?i2_printf(2), ?_printf(2), 
 24392 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24393 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 24394 ;;  printf          1   38[COMRAM] char 
 24395 ;;  printf          1   37[COMRAM] unsigned char 
 24396 ;;  printf          1   28[COMRAM] char 
 24397 ;; Return value:  Size  Location     Type
 24398 ;;                  2   12[COMRAM] int 
 24399 ;; Registers used:
 24400 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24401 ;; Tracked objects:
 24402 ;;		On entry : 0/0
 24403 ;;		On exit  : 0/0
 24404 ;;		Unchanged: 0/0
 24405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24406 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24407 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24408 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24409 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24410 ;;Total ram usage:       29 bytes
 24411 ;; Hardware stack levels used:    1
 24412 ;; Hardware stack levels required when called:    2
 24413 ;; This function calls:
 24414 ;;		i2___lwdiv
 24415 ;;		i2___lwmod
 24416 ;;		i2___wmul
 24417 ;;		i2_isdigit
 24418 ;;		i2_putch
 24419 ;; This function is called by:
 24420 ;;		_change_state_to_menu_11
 24421 ;;		_change_state_to_menu_23
 24422 ;;		_change_state_to_logs_11
 24423 ;;		_change_state_to_logs_12
 24424 ;;		_change_state_to_logs_22
 24425 ;;		_change_state_to_logs_23
 24426 ;;		_change_state_to_logs_33
 24427 ;;		_change_state_to_logs_34
 24428 ;;		_printSortTimer
 24429 ;;		i2_change_state_to_menu_start
 24430 ;;		i2_change_state_to_menu_12
 24431 ;;		i2_change_state_to_menu_22
 24432 ;;		i2_printRTC
 24433 ;; This function uses a non-reentrant model
 24434 ;;
 24435                           
 24436                           	psect	text87
 24437  0024F4                     __ptext87:
 24438                           	opt stack 0
 24439  0024F4                     i2_printf:
 24440                           	opt stack 20
 24441                           
 24442                           ;doprnt.c: 466: va_list ap;
 24443                           ;doprnt.c: 499: signed char c;
 24444                           ;doprnt.c: 501: int width;
 24445                           ;doprnt.c: 506: signed char prec;
 24446                           ;doprnt.c: 508: unsigned char flag;
 24447                           ;doprnt.c: 523: union {
 24448                           ;doprnt.c: 524: unsigned long vd;
 24449                           ;doprnt.c: 525: double integ;
 24450                           ;doprnt.c: 526: } tmpval;
 24451                           ;doprnt.c: 528: unsigned int val;
 24452                           ;doprnt.c: 529: unsigned len;
 24453                           ;doprnt.c: 530: const char * cp;
 24454                           ;doprnt.c: 533: *ap = __va_start();
 24455                           
 24456                           ;incstack = 0
 24457  0024F4  0E0F               	movlw	low (?i2_printf+2)
 24458  0024F6  6E20               	movwf	i2printf@ap,c
 24459  0024F8  0E00               	movlw	high (?i2_printf+2)
 24460  0024FA  6E21               	movwf	i2printf@ap+1,c
 24461                           
 24462                           ;doprnt.c: 536: while(c = *f++) {
 24463  0024FC  D1A4               	goto	i2l7224
 24464  0024FE                     i2l7094:
 24465                           
 24466                           ;doprnt.c: 538: if(c != '%')
 24467  0024FE  0E25               	movlw	37
 24468  002500  1827               	xorwf	i2printf@c,w,c
 24469  002502  B4D8               	btfsc	status,2,c
 24470  002504  D004               	goto	i2l7098
 24471                           
 24472                           ;doprnt.c: 540: {
 24473                           ;doprnt.c: 541: (putch(c) );
 24474  002506  5027               	movf	i2printf@c,w,c
 24475  002508  EC42  F02F         	call	i2_putch
 24476                           
 24477                           ;doprnt.c: 542: continue;
 24478  00250C  D19C               	goto	i2l7224
 24479  00250E                     i2l7098:
 24480                           
 24481                           ;doprnt.c: 543: }
 24482                           ;doprnt.c: 546: width = 0;
 24483  00250E  0E00               	movlw	0
 24484  002510  6E29               	movwf	i2printf@width+1,c
 24485  002512  0E00               	movlw	0
 24486  002514  6E28               	movwf	i2printf@width,c
 24487                           
 24488                           ;doprnt.c: 548: flag = 0;
 24489  002516  0E00               	movlw	0
 24490  002518  6E26               	movwf	i2printf@flag,c
 24491                           
 24492                           ;doprnt.c: 551: switch(*f) {
 24493                           
 24494                           ;doprnt.c: 550: for(;;) {
 24495  00251A  D003               	goto	i2l7104
 24496  00251C                     i2l7100:
 24497                           
 24498                           ;doprnt.c: 580: flag |= 0x04;
 24499  00251C  8426               	bsf	i2printf@flag,2,c
 24500                           
 24501                           ;doprnt.c: 581: f++;
 24502  00251E  4A0D               	infsnz	i2printf@f,f,c
 24503  002520  2A0E               	incf	i2printf@f+1,f,c
 24504  002522                     i2l7104:
 24505  002522  C00D  FFF6         	movff	i2printf@f,tblptrl
 24506  002526  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24507  00252A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24508  00252A  6AF8               	clrf	tblptru,c
 24509  00252C                     	endif
 24510  00252C                     	if	0	;tblptru may be non-zero
 24511  00252C                     	endif
 24512  00252C  0008               	tblrd		*
 24513  00252E  50F5               	movf	tablat,w,c
 24514                           
 24515                           ; Switch size 1, requested type "space"
 24516                           ; Number of cases is 1, Range of values is 48 to 48
 24517                           ; switch strategies available:
 24518                           ; Name         Instructions Cycles
 24519                           ; simple_byte            4     3 (average)
 24520                           ;	Chosen strategy is simple_byte
 24521  002530  0A30               	xorlw	48	; case 48
 24522  002532  B4D8               	btfsc	status,2,c
 24523  002534  D7F3               	goto	i2l7100
 24524                           
 24525                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24526                           
 24527                           ;doprnt.c: 586: }
 24528                           
 24529                           ;doprnt.c: 585: break;
 24530  002536  C00D  FFF6         	movff	i2printf@f,tblptrl
 24531  00253A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24532  00253E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24533  00253E  6AF8               	clrf	tblptru,c
 24534  002540                     	endif
 24535  002540                     	if	0	;tblptru may be non-zero
 24536  002540                     	endif
 24537  002540  0008               	tblrd		*
 24538  002542  50F5               	movf	tablat,w,c
 24539  002544  ECD2  F02E         	call	i2_isdigit
 24540  002548  A0D8               	btfss	status,0,c
 24541  00254A  D0A6               	goto	i2l7152
 24542                           
 24543                           ;doprnt.c: 598: width = 0;
 24544  00254C  0E00               	movlw	0
 24545  00254E  6E29               	movwf	i2printf@width+1,c
 24546  002550  0E00               	movlw	0
 24547  002552  6E28               	movwf	i2printf@width,c
 24548  002554                     i2l7110:
 24549                           
 24550                           ;doprnt.c: 600: width *= 10;
 24551  002554  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24552  002558  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24553  00255C  0E00               	movlw	0
 24554  00255E  6E04               	movwf	i2___wmul@multiplicand+1,c
 24555  002560  0E0A               	movlw	10
 24556  002562  6E03               	movwf	i2___wmul@multiplicand,c
 24557  002564  EC78  F02E         	call	i2___wmul	;wreg free
 24558  002568  C001  F028         	movff	?i2___wmul,i2printf@width
 24559  00256C  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24560                           
 24561                           ;doprnt.c: 601: width += *f++ - '0';
 24562  002570  0ED0               	movlw	208
 24563  002572  6E19               	movwf	??i2_printf& (0+255),c
 24564  002574  0EFF               	movlw	255
 24565  002576  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24566  002578  C00D  FFF6         	movff	i2printf@f,tblptrl
 24567  00257C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24568  002580                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24569  002580  6AF8               	clrf	tblptru,c
 24570  002582                     	endif
 24571  002582                     	if	0	;tblptru may be non-zero
 24572  002582                     	endif
 24573  002582  0008               	tblrd		*
 24574  002584  50F5               	movf	tablat,w,c
 24575  002586  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24576  002588  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24577  00258A  5019               	movf	??i2_printf,w,c
 24578  00258C  261B               	addwf	??i2_printf+2,f,c
 24579  00258E  501A               	movf	??i2_printf+1,w,c
 24580  002590  221C               	addwfc	??i2_printf+3,f,c
 24581  002592  501B               	movf	??i2_printf+2,w,c
 24582  002594  2628               	addwf	i2printf@width,f,c
 24583  002596  501C               	movf	??i2_printf+3,w,c
 24584  002598  2229               	addwfc	i2printf@width+1,f,c
 24585  00259A  4A0D               	infsnz	i2printf@f,f,c
 24586  00259C  2A0E               	incf	i2printf@f+1,f,c
 24587                           
 24588                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24589  00259E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24590  0025A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24591  0025A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24592  0025A6  6AF8               	clrf	tblptru,c
 24593  0025A8                     	endif
 24594  0025A8                     	if	0	;tblptru may be non-zero
 24595  0025A8                     	endif
 24596  0025A8  0008               	tblrd		*
 24597  0025AA  50F5               	movf	tablat,w,c
 24598  0025AC  ECD2  F02E         	call	i2_isdigit
 24599  0025B0  A0D8               	btfss	status,0,c
 24600  0025B2  D072               	goto	i2l7152
 24601  0025B4  D7CF               	goto	i2l7110
 24602  0025B6                     i2l7118:
 24603                           
 24604                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24605  0025B6  C020  FFD9         	movff	i2printf@ap,fsr2l
 24606  0025BA  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24607  0025BE  CFDE F01E          	movff	postinc2,i2printf@cp
 24608  0025C2  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24609  0025C6  0E02               	movlw	2
 24610  0025C8  2620               	addwf	i2printf@ap,f,c
 24611  0025CA  0E00               	movlw	0
 24612  0025CC  2221               	addwfc	i2printf@ap+1,f,c
 24613                           
 24614                           ;doprnt.c: 740: if(!cp)
 24615  0025CE  501E               	movf	i2printf@cp,w,c
 24616  0025D0  101F               	iorwf	i2printf@cp+1,w,c
 24617  0025D2  A4D8               	btfss	status,2,c
 24618  0025D4  D004               	goto	i2l7126
 24619                           
 24620                           ;doprnt.c: 741: cp = "(null)";
 24621  0025D6  0EB5               	movlw	low STR_128
 24622  0025D8  6E1E               	movwf	i2printf@cp,c
 24623  0025DA  0EFF               	movlw	high STR_128
 24624  0025DC  6E1F               	movwf	i2printf@cp+1,c
 24625  0025DE                     i2l7126:
 24626                           
 24627                           ;doprnt.c: 745: len = 0;
 24628  0025DE  0E00               	movlw	0
 24629  0025E0  6E23               	movwf	i2printf@len+1,c
 24630  0025E2  0E00               	movlw	0
 24631  0025E4  6E22               	movwf	i2printf@len,c
 24632                           
 24633                           ;doprnt.c: 746: while(cp[len])
 24634  0025E6  D002               	goto	i2l7130
 24635  0025E8                     i2l7128:
 24636                           
 24637                           ;doprnt.c: 747: len++;
 24638  0025E8  4A22               	infsnz	i2printf@len,f,c
 24639  0025EA  2A23               	incf	i2printf@len+1,f,c
 24640  0025EC                     i2l7130:
 24641  0025EC  5022               	movf	i2printf@len,w,c
 24642  0025EE  241E               	addwf	i2printf@cp,w,c
 24643  0025F0  6E19               	movwf	??i2_printf& (0+255),c
 24644  0025F2  5023               	movf	i2printf@len+1,w,c
 24645  0025F4  201F               	addwfc	i2printf@cp+1,w,c
 24646  0025F6  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24647  0025F8  C019  FFF6         	movff	??i2_printf,tblptrl
 24648  0025FC  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24649  002600  0E00               	movlw	low (__mediumconst shr (0+16))
 24650  002602  6EF8               	movwf	tblptru,c
 24651  002604  0E0F               	movlw	(high __ramtop+-1)
 24652  002606  64F7               	cpfsgt	tblptrh,c
 24653  002608  D003               	bra	i2u595_47
 24654  00260A  0008               	tblrd		*
 24655  00260C  50F5               	movf	tablat,w,c
 24656  00260E  D005               	bra	i2u595_40
 24657  002610                     i2u595_47:
 24658  002610  CFF6 FFE9          	movff	tblptrl,fsr0l
 24659  002614  CFF7 FFEA          	movff	tblptrh,fsr0h
 24660  002618  50EF               	movf	indf0,w,c
 24661  00261A                     i2u595_40:
 24662  00261A  0900               	iorlw	0
 24663  00261C  A4D8               	btfss	status,2,c
 24664  00261E  D7E4               	goto	i2l7128
 24665                           
 24666                           ;doprnt.c: 757: if(width > len)
 24667  002620  5028               	movf	i2printf@width,w,c
 24668  002622  5C22               	subwf	i2printf@len,w,c
 24669  002624  5029               	movf	i2printf@width+1,w,c
 24670  002626  5823               	subwfb	i2printf@len+1,w,c
 24671  002628  B0D8               	btfsc	status,0,c
 24672  00262A  D005               	goto	i2l7136
 24673                           
 24674                           ;doprnt.c: 758: width -= len;
 24675  00262C  5022               	movf	i2printf@len,w,c
 24676  00262E  5E28               	subwf	i2printf@width,f,c
 24677  002630  5023               	movf	i2printf@len+1,w,c
 24678  002632  5A29               	subwfb	i2printf@width+1,f,c
 24679  002634  D008               	goto	i2l7140
 24680  002636                     i2l7136:
 24681                           
 24682                           ;doprnt.c: 759: else
 24683                           ;doprnt.c: 760: width = 0;
 24684  002636  0E00               	movlw	0
 24685  002638  6E29               	movwf	i2printf@width+1,c
 24686  00263A  0E00               	movlw	0
 24687  00263C  6E28               	movwf	i2printf@width,c
 24688                           
 24689                           ;doprnt.c: 764: while(width--)
 24690  00263E  D003               	goto	i2l7140
 24691  002640                     i2l7138:
 24692                           
 24693                           ;doprnt.c: 765: (putch(' ') );
 24694  002640  0E20               	movlw	32
 24695  002642  EC42  F02F         	call	i2_putch
 24696  002646                     i2l7140:
 24697  002646  0628               	decf	i2printf@width,f,c
 24698  002648  A0D8               	btfss	status,0,c
 24699  00264A  0629               	decf	i2printf@width+1,f,c
 24700  00264C  2828               	incf	i2printf@width,w,c
 24701  00264E  E1F8               	bnz	i2l7138
 24702  002650  2829               	incf	i2printf@width+1,w,c
 24703  002652  B4D8               	btfsc	status,2,c
 24704  002654  D016               	goto	i2l7146
 24705  002656  D7F4               	goto	i2l7138
 24706  002658                     i2l7142:
 24707                           
 24708                           ;doprnt.c: 768: (putch(*cp++) );
 24709  002658  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24710  00265C  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24711  002660  0E00               	movlw	low (__mediumconst shr (0+16))
 24712  002662  6EF8               	movwf	tblptru,c
 24713  002664  0E0F               	movlw	(high __ramtop+-1)
 24714  002666  64F7               	cpfsgt	tblptrh,c
 24715  002668  D003               	bra	i2u599_47
 24716  00266A  0008               	tblrd		*
 24717  00266C  50F5               	movf	tablat,w,c
 24718  00266E  D005               	bra	i2u599_40
 24719  002670                     i2u599_47:
 24720  002670  CFF6 FFE9          	movff	tblptrl,fsr0l
 24721  002674  CFF7 FFEA          	movff	tblptrh,fsr0h
 24722  002678  50EF               	movf	indf0,w,c
 24723  00267A                     i2u599_40:
 24724  00267A  EC42  F02F         	call	i2_putch
 24725  00267E  4A1E               	infsnz	i2printf@cp,f,c
 24726  002680  2A1F               	incf	i2printf@cp+1,f,c
 24727  002682                     i2l7146:
 24728  002682  0622               	decf	i2printf@len,f,c
 24729  002684  A0D8               	btfss	status,0,c
 24730  002686  0623               	decf	i2printf@len+1,f,c
 24731  002688  2822               	incf	i2printf@len,w,c
 24732  00268A  E1E6               	bnz	i2l7142
 24733  00268C  2823               	incf	i2printf@len+1,w,c
 24734  00268E  B4D8               	btfsc	status,2,c
 24735  002690  D0DA               	goto	i2l7224
 24736  002692  D7E2               	goto	i2l7142
 24737  002694                     i2l7148:
 24738                           
 24739                           ;doprnt.c: 818: flag |= 0x40;
 24740  002694  8C26               	bsf	i2printf@flag,6,c
 24741                           
 24742                           ;doprnt.c: 822: }
 24743                           
 24744                           ;doprnt.c: 819: break;
 24745  002696  D01B               	goto	i2l1536
 24746  002698                     i2l7152:
 24747  002698  C00D  FFF6         	movff	i2printf@f,tblptrl
 24748  00269C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24749  0026A0  4A0D               	infsnz	i2printf@f,f,c
 24750  0026A2  2A0E               	incf	i2printf@f+1,f,c
 24751  0026A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24752  0026A4  6AF8               	clrf	tblptru,c
 24753  0026A6                     	endif
 24754  0026A6                     	if	0	;tblptru may be non-zero
 24755  0026A6                     	endif
 24756  0026A6  0008               	tblrd		*
 24757  0026A8  CFF5 F027          	movff	tablat,i2printf@c
 24758  0026AC  5027               	movf	i2printf@c,w,c
 24759                           
 24760                           ; Switch size 1, requested type "space"
 24761                           ; Number of cases is 5, Range of values is 0 to 117
 24762                           ; switch strategies available:
 24763                           ; Name         Instructions Cycles
 24764                           ; simple_byte           16     9 (average)
 24765                           ;	Chosen strategy is simple_byte
 24766  0026AE  0A00               	xorlw	0	; case 0
 24767  0026B0  B4D8               	btfsc	status,2,c
 24768  0026B2  0012               	return	
 24769  0026B4  0A64               	xorlw	100	; case 100
 24770  0026B6  B4D8               	btfsc	status,2,c
 24771  0026B8  D00A               	goto	i2l1536
 24772  0026BA  0A0D               	xorlw	13	; case 105
 24773  0026BC  B4D8               	btfsc	status,2,c
 24774  0026BE  D007               	goto	i2l1536
 24775  0026C0  0A1A               	xorlw	26	; case 115
 24776  0026C2  B4D8               	btfsc	status,2,c
 24777  0026C4  D778               	goto	i2l7118
 24778  0026C6  0A06               	xorlw	6	; case 117
 24779  0026C8  B4D8               	btfsc	status,2,c
 24780  0026CA  D7E4               	goto	i2l7148
 24781  0026CC  D0BC               	goto	i2l7224
 24782  0026CE                     i2l1536:
 24783                           
 24784                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24785  0026CE  BC26               	btfsc	i2printf@flag,6,c
 24786  0026D0  D015               	goto	i2l7164
 24787                           
 24788                           ;doprnt.c: 1253: {
 24789                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24790  0026D2  C020  FFD9         	movff	i2printf@ap,fsr2l
 24791  0026D6  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24792  0026DA  CFDE F024          	movff	postinc2,i2printf@val
 24793  0026DE  CFDD F025          	movff	postdec2,i2printf@val+1
 24794  0026E2  0E02               	movlw	2
 24795  0026E4  2620               	addwf	i2printf@ap,f,c
 24796  0026E6  0E00               	movlw	0
 24797  0026E8  2221               	addwfc	i2printf@ap+1,f,c
 24798                           
 24799                           ;doprnt.c: 1261: if((int)val < 0) {
 24800  0026EA  AE25               	btfss	i2printf@val+1,7,c
 24801  0026EC  D013               	goto	i2l7168
 24802                           
 24803                           ;doprnt.c: 1262: flag |= 0x03;
 24804  0026EE  0E03               	movlw	3
 24805  0026F0  1226               	iorwf	i2printf@flag,f,c
 24806                           
 24807                           ;doprnt.c: 1263: val = -val;
 24808  0026F2  6C24               	negf	i2printf@val,c
 24809  0026F4  1E25               	comf	i2printf@val+1,f,c
 24810  0026F6  B0D8               	btfsc	status,0,c
 24811  0026F8  2A25               	incf	i2printf@val+1,f,c
 24812                           
 24813                           ;doprnt.c: 1264: }
 24814                           ;doprnt.c: 1266: }
 24815  0026FA  D00C               	goto	i2l7168
 24816  0026FC                     i2l7164:
 24817                           
 24818                           ;doprnt.c: 1268: else
 24819                           ;doprnt.c: 1273: {
 24820                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24821  0026FC  C020  FFD9         	movff	i2printf@ap,fsr2l
 24822  002700  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24823  002704  CFDE F024          	movff	postinc2,i2printf@val
 24824  002708  CFDD F025          	movff	postdec2,i2printf@val+1
 24825  00270C  0E02               	movlw	2
 24826  00270E  2620               	addwf	i2printf@ap,f,c
 24827  002710  0E00               	movlw	0
 24828  002712  2221               	addwfc	i2printf@ap+1,f,c
 24829  002714                     i2l7168:
 24830                           
 24831                           ;doprnt.c: 1287: }
 24832                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24833  002714  0E01               	movlw	1
 24834  002716  6E27               	movwf	i2printf@c,c
 24835  002718                     i2l7170:
 24836  002718  0E05               	movlw	5
 24837  00271A  1827               	xorwf	i2printf@c,w,c
 24838  00271C  B4D8               	btfsc	status,2,c
 24839  00271E  D015               	goto	i2l7182
 24840                           
 24841                           ;doprnt.c: 1306: if(val < dpowers[c])
 24842  002720  5027               	movf	i2printf@c,w,c
 24843  002722  0D02               	mullw	2
 24844  002724  0EC0               	movlw	low _dpowers
 24845  002726  24F3               	addwf	prodl,w,c
 24846  002728  6EF6               	movwf	tblptrl,c
 24847  00272A  0EFA               	movlw	high _dpowers
 24848  00272C  20F4               	addwfc	prodh,w,c
 24849  00272E  6EF7               	movwf	tblptrh,c
 24850  002730                     	if	1	;There are 3 active tblptr bytes
 24851  002730  6AF8               	clrf	tblptru,c
 24852  002732  0E00               	movlw	low (__mediumconst shr (0+16))
 24853  002734  22F8               	addwfc	tblptru,f,c
 24854  002736                     	endif
 24855  002736  0009               	tblrd		*+
 24856  002738  50F5               	movf	tablat,w,c
 24857  00273A  5C24               	subwf	i2printf@val,w,c
 24858  00273C  0009               	tblrd		*+
 24859  00273E  50F5               	movf	tablat,w,c
 24860  002740  5825               	subwfb	i2printf@val+1,w,c
 24861  002742  A0D8               	btfss	status,0,c
 24862  002744  D002               	goto	i2l7182
 24863                           
 24864                           ;doprnt.c: 1307: break;
 24865  002746  2A27               	incf	i2printf@c,f,c
 24866  002748  D7E7               	goto	i2l7170
 24867  00274A                     i2l7182:
 24868                           
 24869                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24870  00274A  5028               	movf	i2printf@width,w,c
 24871  00274C  1029               	iorwf	i2printf@width+1,w,c
 24872  00274E  B4D8               	btfsc	status,2,c
 24873  002750  D009               	goto	i2l7188
 24874  002752  C026  F019         	movff	i2printf@flag,??i2_printf
 24875  002756  0E03               	movlw	3
 24876  002758  1619               	andwf	??i2_printf,f,c
 24877  00275A  B4D8               	btfsc	status,2,c
 24878  00275C  D003               	goto	i2l7188
 24879                           
 24880                           ;doprnt.c: 1346: width--;
 24881  00275E  0628               	decf	i2printf@width,f,c
 24882  002760  A0D8               	btfss	status,0,c
 24883  002762  0629               	decf	i2printf@width+1,f,c
 24884  002764                     i2l7188:
 24885                           
 24886                           ;doprnt.c: 1381: if(width > c)
 24887  002764  0E80               	movlw	128
 24888  002766  BE27               	btfsc	i2printf@c,7,c
 24889  002768  0E7F               	movlw	127
 24890  00276A  6E19               	movwf	??i2_printf& (0+255),c
 24891  00276C  5028               	movf	i2printf@width,w,c
 24892  00276E  5C27               	subwf	i2printf@c,w,c
 24893  002770  5029               	movf	i2printf@width+1,w,c
 24894  002772  0A80               	xorlw	128
 24895  002774  5819               	subwfb	??i2_printf& (0+255),w,c
 24896  002776  B0D8               	btfsc	status,0,c
 24897  002778  D007               	goto	i2l7192
 24898                           
 24899                           ;doprnt.c: 1382: width -= c;
 24900  00277A  5027               	movf	i2printf@c,w,c
 24901  00277C  5E28               	subwf	i2printf@width,f,c
 24902  00277E  0E00               	movlw	0
 24903  002780  BE27               	btfsc	i2printf@c,7,c
 24904  002782  0EFF               	movlw	255
 24905  002784  5A29               	subwfb	i2printf@width+1,f,c
 24906  002786  D004               	goto	i2l7194
 24907  002788                     i2l7192:
 24908                           
 24909                           ;doprnt.c: 1383: else
 24910                           ;doprnt.c: 1384: width = 0;
 24911  002788  0E00               	movlw	0
 24912  00278A  6E29               	movwf	i2printf@width+1,c
 24913  00278C  0E00               	movlw	0
 24914  00278E  6E28               	movwf	i2printf@width,c
 24915  002790                     i2l7194:
 24916                           
 24917                           ;doprnt.c: 1387: if(flag & 0x04) {
 24918  002790  A426               	btfss	i2printf@flag,2,c
 24919  002792  D014               	goto	i2l7206
 24920                           
 24921                           ;doprnt.c: 1392: if(flag & 0x03)
 24922  002794  C026  F019         	movff	i2printf@flag,??i2_printf
 24923  002798  0E03               	movlw	3
 24924  00279A  1619               	andwf	??i2_printf,f,c
 24925  00279C  B4D8               	btfsc	status,2,c
 24926  00279E  D003               	goto	i2l7200
 24927                           
 24928                           ;doprnt.c: 1393: (putch('-') );
 24929  0027A0  0E2D               	movlw	45
 24930  0027A2  EC42  F02F         	call	i2_putch
 24931  0027A6                     i2l7200:
 24932                           
 24933                           ;doprnt.c: 1415: if(width)
 24934  0027A6  5028               	movf	i2printf@width,w,c
 24935  0027A8  1029               	iorwf	i2printf@width+1,w,c
 24936  0027AA  B4D8               	btfsc	status,2,c
 24937  0027AC  D01E               	goto	i2l7216
 24938                           
 24939                           ;doprnt.c: 1417: (putch('0') );
 24940                           
 24941                           ;doprnt.c: 1416: do
 24942  0027AE  0E30               	movlw	48
 24943  0027B0  EC42  F02F         	call	i2_putch
 24944                           
 24945                           ;doprnt.c: 1418: while(--width);
 24946  0027B4  0628               	decf	i2printf@width,f,c
 24947  0027B6  A0D8               	btfss	status,0,c
 24948  0027B8  0629               	decf	i2printf@width+1,f,c
 24949  0027BA  D7F5               	goto	i2l7200
 24950  0027BC                     i2l7206:
 24951                           
 24952                           ;doprnt.c: 1422: {
 24953                           ;doprnt.c: 1424: if(width
 24954                           ;doprnt.c: 1428: )
 24955  0027BC  5028               	movf	i2printf@width,w,c
 24956  0027BE  1029               	iorwf	i2printf@width+1,w,c
 24957  0027C0  B4D8               	btfsc	status,2,c
 24958  0027C2  D00A               	goto	i2l7212
 24959  0027C4                     i2l7208:
 24960                           
 24961                           ;doprnt.c: 1430: (putch(' ') );
 24962  0027C4  0E20               	movlw	32
 24963  0027C6  EC42  F02F         	call	i2_putch
 24964                           
 24965                           ;doprnt.c: 1431: while(--width);
 24966  0027CA  0628               	decf	i2printf@width,f,c
 24967  0027CC  A0D8               	btfss	status,0,c
 24968  0027CE  0629               	decf	i2printf@width+1,f,c
 24969  0027D0  5028               	movf	i2printf@width,w,c
 24970  0027D2  1029               	iorwf	i2printf@width+1,w,c
 24971  0027D4  A4D8               	btfss	status,2,c
 24972  0027D6  D7F6               	goto	i2l7208
 24973  0027D8                     i2l7212:
 24974                           
 24975                           ;doprnt.c: 1438: if(flag & 0x03)
 24976  0027D8  C026  F019         	movff	i2printf@flag,??i2_printf
 24977  0027DC  0E03               	movlw	3
 24978  0027DE  1619               	andwf	??i2_printf,f,c
 24979  0027E0  B4D8               	btfsc	status,2,c
 24980  0027E2  D003               	goto	i2l7216
 24981                           
 24982                           ;doprnt.c: 1439: (putch('-') );
 24983  0027E4  0E2D               	movlw	45
 24984  0027E6  EC42  F02F         	call	i2_putch
 24985  0027EA                     i2l7216:
 24986                           
 24987                           ;doprnt.c: 1469: }
 24988                           ;doprnt.c: 1472: prec = c;
 24989  0027EA  C027  F01D         	movff	i2printf@c,i2printf@prec
 24990                           
 24991                           ;doprnt.c: 1474: while(prec--) {
 24992  0027EE  D027               	goto	i2l7222
 24993  0027F0                     i2l7218:
 24994                           
 24995                           ;doprnt.c: 1478: {
 24996                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24997  0027F0  501D               	movf	i2printf@prec,w,c
 24998  0027F2  0D02               	mullw	2
 24999  0027F4  0EC0               	movlw	low _dpowers
 25000  0027F6  24F3               	addwf	prodl,w,c
 25001  0027F8  6EF6               	movwf	tblptrl,c
 25002  0027FA  0EFA               	movlw	high _dpowers
 25003  0027FC  20F4               	addwfc	prodh,w,c
 25004  0027FE  6EF7               	movwf	tblptrh,c
 25005  002800                     	if	1	;There are 3 active tblptr bytes
 25006  002800  6AF8               	clrf	tblptru,c
 25007  002802  0E00               	movlw	low (__mediumconst shr (0+16))
 25008  002804  22F8               	addwfc	tblptru,f,c
 25009  002806                     	endif
 25010  002806  0009               	tblrd		*+
 25011  002808  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 25012  00280C  000A               	tblrd		*-
 25013  00280E  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 25014  002812  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 25015  002816  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 25016  00281A  EC32  F02B         	call	i2___lwdiv	;wreg free
 25017  00281E  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 25018  002822  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 25019  002826  0E00               	movlw	0
 25020  002828  6E04               	movwf	i2___lwmod@divisor+1,c
 25021  00282A  0E0A               	movlw	10
 25022  00282C  6E03               	movwf	i2___lwmod@divisor,c
 25023  00282E  EC13  F02C         	call	i2___lwmod	;wreg free
 25024  002832  5001               	movf	?i2___lwmod,w,c
 25025  002834  0F30               	addlw	48
 25026  002836  6E27               	movwf	i2printf@c,c
 25027                           
 25028                           ;doprnt.c: 1523: }
 25029                           ;doprnt.c: 1524: (putch(c) );
 25030  002838  5027               	movf	i2printf@c,w,c
 25031  00283A  EC42  F02F         	call	i2_putch
 25032  00283E                     i2l7222:
 25033  00283E  061D               	decf	i2printf@prec,f,c
 25034  002840  281D               	incf	i2printf@prec,w,c
 25035  002842  A4D8               	btfss	status,2,c
 25036  002844  D7D5               	goto	i2l7218
 25037  002846                     i2l7224:
 25038  002846  C00D  FFF6         	movff	i2printf@f,tblptrl
 25039  00284A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25040  00284E  4A0D               	infsnz	i2printf@f,f,c
 25041  002850  2A0E               	incf	i2printf@f+1,f,c
 25042  002852                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25043  002852  6AF8               	clrf	tblptru,c
 25044  002854                     	endif
 25045  002854                     	if	0	;tblptru may be non-zero
 25046  002854                     	endif
 25047  002854  0008               	tblrd		*
 25048  002856  CFF5 F027          	movff	tablat,i2printf@c
 25049  00285A  5027               	movf	i2printf@c,w,c
 25050  00285C  B4D8               	btfsc	status,2,c
 25051  00285E  0012               	return	
 25052  002860  D64E               	goto	i2l7094
 25053  002862                     __end_ofi2_printf:
 25054                           	opt stack 0
 25055                           pclatu	equ	0xFFB
 25056                           pclath	equ	0xFFA
 25057                           tblptru	equ	0xFF8
 25058                           tblptrh	equ	0xFF7
 25059                           tblptrl	equ	0xFF6
 25060                           tablat	equ	0xFF5
 25061                           prodh	equ	0xFF4
 25062                           prodl	equ	0xFF3
 25063                           intcon	equ	0xFF2
 25064                           intcon2	equ	0xFF1
 25065                           intcon3	equ	0xFF0
 25066                           indf0	equ	0xFEF
 25067                           postinc0	equ	0xFEE
 25068                           fsr0h	equ	0xFEA
 25069                           fsr0l	equ	0xFE9
 25070                           wreg	equ	0xFE8
 25071                           postdec1	equ	0xFE5
 25072                           fsr1h	equ	0xFE2
 25073                           fsr1l	equ	0xFE1
 25074                           indf2	equ	0xFDF
 25075                           postinc2	equ	0xFDE
 25076                           postdec2	equ	0xFDD
 25077                           fsr2h	equ	0xFDA
 25078                           fsr2l	equ	0xFD9
 25079                           status	equ	0xFD8
 25080                           
 25081 ;; *************** function i2_putch *****************
 25082 ;; Defined at:
 25083 ;;		line 20 in file "lcd.c"
 25084 ;; Parameters:    Size  Location     Type
 25085 ;;  data            1    wreg     unsigned char 
 25086 ;; Auto vars:     Size  Location     Type
 25087 ;;  data            1    2[COMRAM] unsigned char 
 25088 ;; Return value:  Size  Location     Type
 25089 ;;                  1    wreg      void 
 25090 ;; Registers used:
 25091 ;;		wreg, status,2, status,0, cstack
 25092 ;; Tracked objects:
 25093 ;;		On entry : 0/0
 25094 ;;		On exit  : 0/0
 25095 ;;		Unchanged: 0/0
 25096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25100 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25101 ;;Total ram usage:        1 bytes
 25102 ;; Hardware stack levels used:    1
 25103 ;; Hardware stack levels required when called:    1
 25104 ;; This function calls:
 25105 ;;		i2_lcdNibble
 25106 ;; This function is called by:
 25107 ;;		i2_printf
 25108 ;; This function uses a non-reentrant model
 25109 ;;
 25110                           
 25111                           	psect	text88
 25112  005E84                     __ptext88:
 25113                           	opt stack 0
 25114  005E84                     i2_putch:
 25115                           	opt stack 20
 25116                           
 25117                           ;incstack = 0
 25118                           ;i2putch@data stored from wreg
 25119  005E84  6E03               	movwf	i2putch@data,c
 25120                           
 25121                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 25122  005E86  848C               	bsf	3980,2,c	;volatile
 25123                           
 25124                           ;lcd.c: 22: lcdNibble(data);
 25125  005E88  5003               	movf	i2putch@data,w,c
 25126  005E8A  EC05  F02B         	call	i2_lcdNibble
 25127  005E8E  0012               	return		;funcret
 25128  005E90                     __end_ofi2_putch:
 25129                           	opt stack 0
 25130                           pclatu	equ	0xFFB
 25131                           pclath	equ	0xFFA
 25132                           tblptru	equ	0xFF8
 25133                           tblptrh	equ	0xFF7
 25134                           tblptrl	equ	0xFF6
 25135                           tablat	equ	0xFF5
 25136                           prodh	equ	0xFF4
 25137                           prodl	equ	0xFF3
 25138                           intcon	equ	0xFF2
 25139                           intcon2	equ	0xFF1
 25140                           intcon3	equ	0xFF0
 25141                           indf0	equ	0xFEF
 25142                           postinc0	equ	0xFEE
 25143                           fsr0h	equ	0xFEA
 25144                           fsr0l	equ	0xFE9
 25145                           wreg	equ	0xFE8
 25146                           postdec1	equ	0xFE5
 25147                           fsr1h	equ	0xFE2
 25148                           fsr1l	equ	0xFE1
 25149                           indf2	equ	0xFDF
 25150                           postinc2	equ	0xFDE
 25151                           postdec2	equ	0xFDD
 25152                           fsr2h	equ	0xFDA
 25153                           fsr2l	equ	0xFD9
 25154                           status	equ	0xFD8
 25155                           
 25156 ;; *************** function i2_isdigit *****************
 25157 ;; Defined at:
 25158 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 25159 ;; Parameters:    Size  Location     Type
 25160 ;;  c               1    wreg     unsigned char 
 25161 ;; Auto vars:     Size  Location     Type
 25162 ;;  c               1    2[COMRAM] unsigned char 
 25163 ;; Return value:  Size  Location     Type
 25164 ;;		None               void
 25165 ;; Registers used:
 25166 ;;		wreg, status,2, status,0
 25167 ;; Tracked objects:
 25168 ;;		On entry : 0/0
 25169 ;;		On exit  : 0/0
 25170 ;;		Unchanged: 0/0
 25171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25174 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25175 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25176 ;;Total ram usage:        3 bytes
 25177 ;; Hardware stack levels used:    1
 25178 ;; This function calls:
 25179 ;;		Nothing
 25180 ;; This function is called by:
 25181 ;;		i2_printf
 25182 ;; This function uses a non-reentrant model
 25183 ;;
 25184                           
 25185                           	psect	text89
 25186  005DA4                     __ptext89:
 25187                           	opt stack 0
 25188  005DA4                     i2_isdigit:
 25189                           	opt stack 21
 25190                           
 25191                           ;incstack = 0
 25192                           ;i2isdigit@c stored from wreg
 25193  005DA4  6E03               	movwf	i2isdigit@c,c
 25194  005DA6  0E00               	movlw	0
 25195  005DA8  6E02               	movwf	i2_isdigit$2070,c
 25196  005DAA  0E3A               	movlw	58
 25197  005DAC  6003               	cpfslt	i2isdigit@c,c
 25198  005DAE  D005               	goto	i2l6748
 25199  005DB0  0E2F               	movlw	47
 25200  005DB2  6403               	cpfsgt	i2isdigit@c,c
 25201  005DB4  D002               	goto	i2l6748
 25202  005DB6  0E01               	movlw	1
 25203  005DB8  6E02               	movwf	i2_isdigit$2070,c
 25204  005DBA                     i2l6748:
 25205  005DBA  C002  F001         	movff	i2_isdigit$2070,??i2_isdigit
 25206  005DBE  3001               	rrcf	??i2_isdigit,w,c
 25207  005DC0  0012               	return	
 25208  005DC2                     __end_ofi2_isdigit:
 25209                           	opt stack 0
 25210                           pclatu	equ	0xFFB
 25211                           pclath	equ	0xFFA
 25212                           tblptru	equ	0xFF8
 25213                           tblptrh	equ	0xFF7
 25214                           tblptrl	equ	0xFF6
 25215                           tablat	equ	0xFF5
 25216                           prodh	equ	0xFF4
 25217                           prodl	equ	0xFF3
 25218                           intcon	equ	0xFF2
 25219                           intcon2	equ	0xFF1
 25220                           intcon3	equ	0xFF0
 25221                           indf0	equ	0xFEF
 25222                           postinc0	equ	0xFEE
 25223                           fsr0h	equ	0xFEA
 25224                           fsr0l	equ	0xFE9
 25225                           wreg	equ	0xFE8
 25226                           postdec1	equ	0xFE5
 25227                           fsr1h	equ	0xFE2
 25228                           fsr1l	equ	0xFE1
 25229                           indf2	equ	0xFDF
 25230                           postinc2	equ	0xFDE
 25231                           postdec2	equ	0xFDD
 25232                           fsr2h	equ	0xFDA
 25233                           fsr2l	equ	0xFD9
 25234                           status	equ	0xFD8
 25235                           
 25236 ;; *************** function i2___wmul *****************
 25237 ;; Defined at:
 25238 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 25239 ;; Parameters:    Size  Location     Type
 25240 ;;  multiplier      2    0[COMRAM] unsigned int 
 25241 ;;  multiplicand    2    2[COMRAM] unsigned int 
 25242 ;; Auto vars:     Size  Location     Type
 25243 ;;  __wmul          2    4[COMRAM] unsigned int 
 25244 ;; Return value:  Size  Location     Type
 25245 ;;                  2    0[COMRAM] unsigned int 
 25246 ;; Registers used:
 25247 ;;		wreg, status,2, status,0, prodl, prodh
 25248 ;; Tracked objects:
 25249 ;;		On entry : 0/0
 25250 ;;		On exit  : 0/0
 25251 ;;		Unchanged: 0/0
 25252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25253 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25254 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25256 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25257 ;;Total ram usage:        6 bytes
 25258 ;; Hardware stack levels used:    1
 25259 ;; This function calls:
 25260 ;;		Nothing
 25261 ;; This function is called by:
 25262 ;;		_printSortTimer
 25263 ;;		_retrieveLog
 25264 ;;		i2_printf
 25265 ;; This function uses a non-reentrant model
 25266 ;;
 25267                           
 25268                           	psect	text90
 25269  005CF0                     __ptext90:
 25270                           	opt stack 0
 25271  005CF0                     i2___wmul:
 25272                           	opt stack 21
 25273                           
 25274                           ;incstack = 0
 25275  005CF0  5001               	movf	i2___wmul@multiplier,w,c
 25276  005CF2  0203               	mulwf	i2___wmul@multiplicand,c
 25277  005CF4  CFF3 F005          	movff	prodl,i2___wmul@product
 25278  005CF8  CFF4 F006          	movff	prodh,i2___wmul@product+1
 25279  005CFC  5001               	movf	i2___wmul@multiplier,w,c
 25280  005CFE  0204               	mulwf	i2___wmul@multiplicand+1,c
 25281  005D00  50F3               	movf	prodl,w,c
 25282  005D02  2606               	addwf	i2___wmul@product+1,f,c
 25283  005D04  5002               	movf	i2___wmul@multiplier+1,w,c
 25284  005D06  0203               	mulwf	i2___wmul@multiplicand,c
 25285  005D08  50F3               	movf	prodl,w,c
 25286  005D0A  2606               	addwf	i2___wmul@product+1,f,c
 25287  005D0C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 25288  005D10  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 25289  005D14  0012               	return	
 25290  005D16                     __end_ofi2___wmul:
 25291                           	opt stack 0
 25292                           pclatu	equ	0xFFB
 25293                           pclath	equ	0xFFA
 25294                           tblptru	equ	0xFF8
 25295                           tblptrh	equ	0xFF7
 25296                           tblptrl	equ	0xFF6
 25297                           tablat	equ	0xFF5
 25298                           prodh	equ	0xFF4
 25299                           prodl	equ	0xFF3
 25300                           intcon	equ	0xFF2
 25301                           intcon2	equ	0xFF1
 25302                           intcon3	equ	0xFF0
 25303                           indf0	equ	0xFEF
 25304                           postinc0	equ	0xFEE
 25305                           fsr0h	equ	0xFEA
 25306                           fsr0l	equ	0xFE9
 25307                           wreg	equ	0xFE8
 25308                           postdec1	equ	0xFE5
 25309                           fsr1h	equ	0xFE2
 25310                           fsr1l	equ	0xFE1
 25311                           indf2	equ	0xFDF
 25312                           postinc2	equ	0xFDE
 25313                           postdec2	equ	0xFDD
 25314                           fsr2h	equ	0xFDA
 25315                           fsr2l	equ	0xFD9
 25316                           status	equ	0xFD8
 25317                           
 25318 ;; *************** function i2___lwmod *****************
 25319 ;; Defined at:
 25320 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 25321 ;; Parameters:    Size  Location     Type
 25322 ;;  dividend        2    0[COMRAM] unsigned int 
 25323 ;;  divisor         2    2[COMRAM] unsigned int 
 25324 ;; Auto vars:     Size  Location     Type
 25325 ;;  __lwmod         1    4[COMRAM] unsigned char 
 25326 ;; Return value:  Size  Location     Type
 25327 ;;                  2    0[COMRAM] unsigned int 
 25328 ;; Registers used:
 25329 ;;		wreg, status,2, status,0
 25330 ;; Tracked objects:
 25331 ;;		On entry : 0/0
 25332 ;;		On exit  : 0/0
 25333 ;;		Unchanged: 0/0
 25334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25338 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25339 ;;Total ram usage:        5 bytes
 25340 ;; Hardware stack levels used:    1
 25341 ;; This function calls:
 25342 ;;		Nothing
 25343 ;; This function is called by:
 25344 ;;		_printSortTimer
 25345 ;;		i2_printf
 25346 ;; This function uses a non-reentrant model
 25347 ;;
 25348                           
 25349                           	psect	text91
 25350  005826                     __ptext91:
 25351                           	opt stack 0
 25352  005826                     i2___lwmod:
 25353                           	opt stack 21
 25354                           
 25355                           ;incstack = 0
 25356  005826  5003               	movf	i2___lwmod@divisor,w,c
 25357  005828  1004               	iorwf	i2___lwmod@divisor+1,w,c
 25358  00582A  B4D8               	btfsc	status,2,c
 25359  00582C  D018               	goto	i2l1993
 25360  00582E  0E01               	movlw	1
 25361  005830  6E05               	movwf	i2___lwmod@counter,c
 25362  005832  D004               	goto	i2l6780
 25363  005834                     i2l6778:
 25364  005834  90D8               	bcf	status,0,c
 25365  005836  3603               	rlcf	i2___lwmod@divisor,f,c
 25366  005838  3604               	rlcf	i2___lwmod@divisor+1,f,c
 25367  00583A  2A05               	incf	i2___lwmod@counter,f,c
 25368  00583C                     i2l6780:
 25369  00583C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 25370  00583E  D7FA               	goto	i2l6778
 25371  005840                     i2l6782:
 25372  005840  5003               	movf	i2___lwmod@divisor,w,c
 25373  005842  5C01               	subwf	i2___lwmod@dividend,w,c
 25374  005844  5004               	movf	i2___lwmod@divisor+1,w,c
 25375  005846  5802               	subwfb	i2___lwmod@dividend+1,w,c
 25376  005848  A0D8               	btfss	status,0,c
 25377  00584A  D004               	goto	i2l6786
 25378  00584C  5003               	movf	i2___lwmod@divisor,w,c
 25379  00584E  5E01               	subwf	i2___lwmod@dividend,f,c
 25380  005850  5004               	movf	i2___lwmod@divisor+1,w,c
 25381  005852  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 25382  005854                     i2l6786:
 25383  005854  90D8               	bcf	status,0,c
 25384  005856  3204               	rrcf	i2___lwmod@divisor+1,f,c
 25385  005858  3203               	rrcf	i2___lwmod@divisor,f,c
 25386  00585A  2E05               	decfsz	i2___lwmod@counter,f,c
 25387  00585C  D7F1               	goto	i2l6782
 25388  00585E                     i2l1993:
 25389  00585E  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 25390  005862  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 25391  005866  0012               	return		;funcret
 25392  005868                     __end_ofi2___lwmod:
 25393                           	opt stack 0
 25394                           pclatu	equ	0xFFB
 25395                           pclath	equ	0xFFA
 25396                           tblptru	equ	0xFF8
 25397                           tblptrh	equ	0xFF7
 25398                           tblptrl	equ	0xFF6
 25399                           tablat	equ	0xFF5
 25400                           prodh	equ	0xFF4
 25401                           prodl	equ	0xFF3
 25402                           intcon	equ	0xFF2
 25403                           intcon2	equ	0xFF1
 25404                           intcon3	equ	0xFF0
 25405                           indf0	equ	0xFEF
 25406                           postinc0	equ	0xFEE
 25407                           fsr0h	equ	0xFEA
 25408                           fsr0l	equ	0xFE9
 25409                           wreg	equ	0xFE8
 25410                           postdec1	equ	0xFE5
 25411                           fsr1h	equ	0xFE2
 25412                           fsr1l	equ	0xFE1
 25413                           indf2	equ	0xFDF
 25414                           postinc2	equ	0xFDE
 25415                           postdec2	equ	0xFDD
 25416                           fsr2h	equ	0xFDA
 25417                           fsr2l	equ	0xFD9
 25418                           status	equ	0xFD8
 25419                           
 25420 ;; *************** function i2___lwdiv *****************
 25421 ;; Defined at:
 25422 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25423 ;; Parameters:    Size  Location     Type
 25424 ;;  dividend        2    5[COMRAM] unsigned int 
 25425 ;;  divisor         2    7[COMRAM] unsigned int 
 25426 ;; Auto vars:     Size  Location     Type
 25427 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25428 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25429 ;; Return value:  Size  Location     Type
 25430 ;;                  2    5[COMRAM] unsigned int 
 25431 ;; Registers used:
 25432 ;;		wreg, status,2, status,0
 25433 ;; Tracked objects:
 25434 ;;		On entry : 0/0
 25435 ;;		On exit  : 0/0
 25436 ;;		Unchanged: 0/0
 25437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25439 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25441 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25442 ;;Total ram usage:        7 bytes
 25443 ;; Hardware stack levels used:    1
 25444 ;; This function calls:
 25445 ;;		Nothing
 25446 ;; This function is called by:
 25447 ;;		_printSortTimer
 25448 ;;		i2_printf
 25449 ;; This function uses a non-reentrant model
 25450 ;;
 25451                           
 25452                           	psect	text92
 25453  005664                     __ptext92:
 25454                           	opt stack 0
 25455  005664                     i2___lwdiv:
 25456                           	opt stack 21
 25457                           
 25458                           ;incstack = 0
 25459  005664  0E00               	movlw	0
 25460  005666  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25461  005668  0E00               	movlw	0
 25462  00566A  6E0A               	movwf	i2___lwdiv@quotient,c
 25463  00566C  5008               	movf	i2___lwdiv@divisor,w,c
 25464  00566E  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25465  005670  B4D8               	btfsc	status,2,c
 25466  005672  D01C               	goto	i2l1983
 25467  005674  0E01               	movlw	1
 25468  005676  6E0C               	movwf	i2___lwdiv@counter,c
 25469  005678  D004               	goto	i2l6760
 25470  00567A                     i2l6758:
 25471  00567A  90D8               	bcf	status,0,c
 25472  00567C  3608               	rlcf	i2___lwdiv@divisor,f,c
 25473  00567E  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25474  005680  2A0C               	incf	i2___lwdiv@counter,f,c
 25475  005682                     i2l6760:
 25476  005682  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25477  005684  D7FA               	goto	i2l6758
 25478  005686                     i2l6762:
 25479  005686  90D8               	bcf	status,0,c
 25480  005688  360A               	rlcf	i2___lwdiv@quotient,f,c
 25481  00568A  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25482  00568C  5008               	movf	i2___lwdiv@divisor,w,c
 25483  00568E  5C06               	subwf	i2___lwdiv@dividend,w,c
 25484  005690  5009               	movf	i2___lwdiv@divisor+1,w,c
 25485  005692  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25486  005694  A0D8               	btfss	status,0,c
 25487  005696  D005               	goto	i2l6770
 25488  005698  5008               	movf	i2___lwdiv@divisor,w,c
 25489  00569A  5E06               	subwf	i2___lwdiv@dividend,f,c
 25490  00569C  5009               	movf	i2___lwdiv@divisor+1,w,c
 25491  00569E  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25492  0056A0  800A               	bsf	i2___lwdiv@quotient,0,c
 25493  0056A2                     i2l6770:
 25494  0056A2  90D8               	bcf	status,0,c
 25495  0056A4  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25496  0056A6  3208               	rrcf	i2___lwdiv@divisor,f,c
 25497  0056A8  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25498  0056AA  D7ED               	goto	i2l6762
 25499  0056AC                     i2l1983:
 25500  0056AC  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25501  0056B0  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25502  0056B4  0012               	return		;funcret
 25503  0056B6                     __end_ofi2___lwdiv:
 25504                           	opt stack 0
 25505                           pclatu	equ	0xFFB
 25506                           pclath	equ	0xFFA
 25507                           tblptru	equ	0xFF8
 25508                           tblptrh	equ	0xFF7
 25509                           tblptrl	equ	0xFF6
 25510                           tablat	equ	0xFF5
 25511                           prodh	equ	0xFF4
 25512                           prodl	equ	0xFF3
 25513                           intcon	equ	0xFF2
 25514                           intcon2	equ	0xFF1
 25515                           intcon3	equ	0xFF0
 25516                           indf0	equ	0xFEF
 25517                           postinc0	equ	0xFEE
 25518                           fsr0h	equ	0xFEA
 25519                           fsr0l	equ	0xFE9
 25520                           wreg	equ	0xFE8
 25521                           postdec1	equ	0xFE5
 25522                           fsr1h	equ	0xFE2
 25523                           fsr1l	equ	0xFE1
 25524                           indf2	equ	0xFDF
 25525                           postinc2	equ	0xFDE
 25526                           postdec2	equ	0xFDD
 25527                           fsr2h	equ	0xFDA
 25528                           fsr2l	equ	0xFD9
 25529                           status	equ	0xFD8
 25530                           
 25531 ;; *************** function i2_lcdInst *****************
 25532 ;; Defined at:
 25533 ;;		line 15 in file "lcd.c"
 25534 ;; Parameters:    Size  Location     Type
 25535 ;;  data            1    wreg     unsigned char 
 25536 ;; Auto vars:     Size  Location     Type
 25537 ;;  data            1    2[COMRAM] unsigned char 
 25538 ;; Return value:  Size  Location     Type
 25539 ;;                  1    wreg      void 
 25540 ;; Registers used:
 25541 ;;		wreg, status,2, status,0, cstack
 25542 ;; Tracked objects:
 25543 ;;		On entry : 0/0
 25544 ;;		On exit  : 0/0
 25545 ;;		Unchanged: 0/0
 25546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25551 ;;Total ram usage:        1 bytes
 25552 ;; Hardware stack levels used:    1
 25553 ;; Hardware stack levels required when called:    1
 25554 ;; This function calls:
 25555 ;;		i2_lcdNibble
 25556 ;; This function is called by:
 25557 ;;		_change_state_to_menu_11
 25558 ;;		_change_state_to_menu_23
 25559 ;;		_change_state_to_logs_11
 25560 ;;		_change_state_to_logs_12
 25561 ;;		_change_state_to_logs_22
 25562 ;;		_change_state_to_logs_23
 25563 ;;		_change_state_to_logs_33
 25564 ;;		_change_state_to_logs_34
 25565 ;;		_printSortTimer
 25566 ;;		i2_change_state_to_menu_start
 25567 ;;		i2_change_state_to_menu_12
 25568 ;;		i2_change_state_to_menu_22
 25569 ;;		i2_printRTC
 25570 ;; This function uses a non-reentrant model
 25571 ;;
 25572                           
 25573                           	psect	text93
 25574  005E90                     __ptext93:
 25575                           	opt stack 0
 25576  005E90                     i2_lcdInst:
 25577                           	opt stack 20
 25578                           
 25579                           ;incstack = 0
 25580                           ;i2lcdInst@data stored from wreg
 25581  005E90  6E03               	movwf	i2lcdInst@data,c
 25582                           
 25583                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25584  005E92  948C               	bcf	3980,2,c	;volatile
 25585                           
 25586                           ;lcd.c: 17: lcdNibble(data);
 25587  005E94  5003               	movf	i2lcdInst@data,w,c
 25588  005E96  EC05  F02B         	call	i2_lcdNibble
 25589  005E9A  0012               	return		;funcret
 25590  005E9C                     __end_ofi2_lcdInst:
 25591                           	opt stack 0
 25592                           pclatu	equ	0xFFB
 25593                           pclath	equ	0xFFA
 25594                           tblptru	equ	0xFF8
 25595                           tblptrh	equ	0xFF7
 25596                           tblptrl	equ	0xFF6
 25597                           tablat	equ	0xFF5
 25598                           prodh	equ	0xFF4
 25599                           prodl	equ	0xFF3
 25600                           intcon	equ	0xFF2
 25601                           intcon2	equ	0xFF1
 25602                           intcon3	equ	0xFF0
 25603                           indf0	equ	0xFEF
 25604                           postinc0	equ	0xFEE
 25605                           fsr0h	equ	0xFEA
 25606                           fsr0l	equ	0xFE9
 25607                           wreg	equ	0xFE8
 25608                           postdec1	equ	0xFE5
 25609                           fsr1h	equ	0xFE2
 25610                           fsr1l	equ	0xFE1
 25611                           indf2	equ	0xFDF
 25612                           postinc2	equ	0xFDE
 25613                           postdec2	equ	0xFDD
 25614                           fsr2h	equ	0xFDA
 25615                           fsr2l	equ	0xFD9
 25616                           status	equ	0xFD8
 25617                           
 25618 ;; *************** function i2_lcdNibble *****************
 25619 ;; Defined at:
 25620 ;;		line 25 in file "lcd.c"
 25621 ;; Parameters:    Size  Location     Type
 25622 ;;  data            1    wreg     unsigned char 
 25623 ;; Auto vars:     Size  Location     Type
 25624 ;;  data            1    1[COMRAM] unsigned char 
 25625 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25626 ;; Return value:  Size  Location     Type
 25627 ;;                  1    wreg      void 
 25628 ;; Registers used:
 25629 ;;		wreg, status,2, status,0
 25630 ;; Tracked objects:
 25631 ;;		On entry : 0/0
 25632 ;;		On exit  : 0/0
 25633 ;;		Unchanged: 0/0
 25634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25638 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25639 ;;Total ram usage:        2 bytes
 25640 ;; Hardware stack levels used:    1
 25641 ;; This function calls:
 25642 ;;		Nothing
 25643 ;; This function is called by:
 25644 ;;		i2_lcdInst
 25645 ;;		i2_putch
 25646 ;; This function uses a non-reentrant model
 25647 ;;
 25648                           
 25649                           	psect	text94
 25650  00560A                     __ptext94:
 25651                           	opt stack 0
 25652  00560A                     i2_lcdNibble:
 25653                           	opt stack 20
 25654                           
 25655                           ;incstack = 0
 25656                           ;i2lcdNibble@data stored from wreg
 25657  00560A  6E02               	movwf	i2lcdNibble@data,c
 25658                           
 25659                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25660  00560C  9EF2               	bcf	intcon,7,c	;volatile
 25661                           
 25662                           ;lcd.c: 28: char temp = data & 0xF0;
 25663  00560E  5002               	movf	i2lcdNibble@data,w,c
 25664  005610  0BF0               	andlw	240
 25665  005612  6E01               	movwf	i2lcdNibble@temp,c
 25666                           
 25667                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25668  005614  508C               	movf	3980,w,c	;volatile
 25669  005616  0B0F               	andlw	15
 25670  005618  6E8C               	movwf	3980,c	;volatile
 25671                           
 25672                           ;lcd.c: 30: LATD = temp | LATD;
 25673  00561A  5001               	movf	i2lcdNibble@temp,w,c
 25674  00561C  108C               	iorwf	3980,w,c	;volatile
 25675  00561E  6E8C               	movwf	3980,c	;volatile
 25676                           
 25677                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25678  005620  868C               	bsf	3980,3,c	;volatile
 25679                           
 25680                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25681  005622  0E42               	movlw	66
 25682  005624                     i2u1189_47:
 25683  005624  2EE8               	decfsz	wreg,f,c
 25684  005626  D7FE               	bra	i2u1189_47
 25685  005628  D000               	nop2	
 25686                           
 25687                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25688  00562A  968C               	bcf	3980,3,c	;volatile
 25689                           
 25690                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25691  00562C  0E42               	movlw	66
 25692  00562E                     i2u1190_47:
 25693  00562E  2EE8               	decfsz	wreg,f,c
 25694  005630  D7FE               	bra	i2u1190_47
 25695  005632  D000               	nop2	
 25696                           
 25697                           ;lcd.c: 37: data = data << 4;
 25698  005634  3802               	swapf	i2lcdNibble@data,w,c
 25699  005636  0BF0               	andlw	240
 25700  005638  6E02               	movwf	i2lcdNibble@data,c
 25701                           
 25702                           ;lcd.c: 39: temp = data & 0xF0;
 25703  00563A  5002               	movf	i2lcdNibble@data,w,c
 25704  00563C  0BF0               	andlw	240
 25705  00563E  6E01               	movwf	i2lcdNibble@temp,c
 25706                           
 25707                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25708  005640  508C               	movf	3980,w,c	;volatile
 25709  005642  0B0F               	andlw	15
 25710  005644  6E8C               	movwf	3980,c	;volatile
 25711                           
 25712                           ;lcd.c: 41: LATD = temp | LATD;
 25713  005646  5001               	movf	i2lcdNibble@temp,w,c
 25714  005648  108C               	iorwf	3980,w,c	;volatile
 25715  00564A  6E8C               	movwf	3980,c	;volatile
 25716                           
 25717                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25718  00564C  868C               	bsf	3980,3,c	;volatile
 25719                           
 25720                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25721  00564E  0E42               	movlw	66
 25722  005650                     i2u1191_47:
 25723  005650  2EE8               	decfsz	wreg,f,c
 25724  005652  D7FE               	bra	i2u1191_47
 25725  005654  D000               	nop2	
 25726                           
 25727                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25728  005656  968C               	bcf	3980,3,c	;volatile
 25729                           
 25730                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25731  005658  0E42               	movlw	66
 25732  00565A                     i2u1192_47:
 25733  00565A  2EE8               	decfsz	wreg,f,c
 25734  00565C  D7FE               	bra	i2u1192_47
 25735  00565E  D000               	nop2	
 25736                           
 25737                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25738  005660  8EF2               	bsf	intcon,7,c	;volatile
 25739  005662  0012               	return		;funcret
 25740  005664                     __end_ofi2_lcdNibble:
 25741                           	opt stack 0
 25742                           pclatu	equ	0xFFB
 25743                           pclath	equ	0xFFA
 25744                           tblptru	equ	0xFF8
 25745                           tblptrh	equ	0xFF7
 25746                           tblptrl	equ	0xFF6
 25747                           tablat	equ	0xFF5
 25748                           prodh	equ	0xFF4
 25749                           prodl	equ	0xFF3
 25750                           intcon	equ	0xFF2
 25751                           intcon2	equ	0xFF1
 25752                           intcon3	equ	0xFF0
 25753                           indf0	equ	0xFEF
 25754                           postinc0	equ	0xFEE
 25755                           fsr0h	equ	0xFEA
 25756                           fsr0l	equ	0xFE9
 25757                           wreg	equ	0xFE8
 25758                           postdec1	equ	0xFE5
 25759                           fsr1h	equ	0xFE2
 25760                           fsr1l	equ	0xFE1
 25761                           indf2	equ	0xFDF
 25762                           postinc2	equ	0xFDE
 25763                           postdec2	equ	0xFDD
 25764                           fsr2h	equ	0xFDA
 25765                           fsr2l	equ	0xFD9
 25766                           status	equ	0xFD8
 25767                           
 25768 ;; *************** function i2_getRTC *****************
 25769 ;; Defined at:
 25770 ;;		line 44 in file "RTC.c"
 25771 ;; Parameters:    Size  Location     Type
 25772 ;;		None
 25773 ;; Auto vars:     Size  Location     Type
 25774 ;;  getRTC          2    3[COMRAM] int 
 25775 ;; Return value:  Size  Location     Type
 25776 ;;                  1    wreg      void 
 25777 ;; Registers used:
 25778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25779 ;; Tracked objects:
 25780 ;;		On entry : 0/0
 25781 ;;		On exit  : 0/0
 25782 ;;		Unchanged: 0/0
 25783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25785 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25787 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25788 ;;Total ram usage:        2 bytes
 25789 ;; Hardware stack levels used:    1
 25790 ;; Hardware stack levels required when called:    2
 25791 ;; This function calls:
 25792 ;;		i2_I2C_Master_Read
 25793 ;;		i2_I2C_Master_Start
 25794 ;;		i2_I2C_Master_Stop
 25795 ;;		i2_I2C_Master_Write
 25796 ;; This function is called by:
 25797 ;;		_printSortTimer
 25798 ;;		i2_printRTC
 25799 ;; This function uses a non-reentrant model
 25800 ;;
 25801                           
 25802                           	psect	text95
 25803  0052D2                     __ptext95:
 25804                           	opt stack 0
 25805  0052D2                     i2_getRTC:
 25806                           	opt stack 19
 25807                           
 25808                           ;RTC.c: 48: I2C_Master_Start();
 25809                           
 25810                           ;incstack = 0
 25811  0052D2  EC68  F02F         	call	i2_I2C_Master_Start	;wreg free
 25812                           
 25813                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25814  0052D6  0E00               	movlw	0
 25815  0052D8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25816  0052DA  0ED0               	movlw	208
 25817  0052DC  6E02               	movwf	i2I2C_Master_Write@d,c
 25818  0052DE  EC53  F02F         	call	i2_I2C_Master_Write	;wreg free
 25819                           
 25820                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25821  0052E2  0E00               	movlw	0
 25822  0052E4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25823  0052E6  0E00               	movlw	0
 25824  0052E8  6E02               	movwf	i2I2C_Master_Write@d,c
 25825  0052EA  EC53  F02F         	call	i2_I2C_Master_Write	;wreg free
 25826                           
 25827                           ;RTC.c: 51: I2C_Master_Stop();
 25828  0052EE  EC64  F02F         	call	i2_I2C_Master_Stop	;wreg free
 25829                           
 25830                           ;RTC.c: 54: I2C_Master_Start();
 25831  0052F2  EC68  F02F         	call	i2_I2C_Master_Start	;wreg free
 25832                           
 25833                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25834  0052F6  0E00               	movlw	0
 25835  0052F8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25836  0052FA  0ED1               	movlw	209
 25837  0052FC  6E02               	movwf	i2I2C_Master_Write@d,c
 25838  0052FE  EC53  F02F         	call	i2_I2C_Master_Write	;wreg free
 25839                           
 25840                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25841  005302  0E00               	movlw	0
 25842  005304  6E05               	movwf	i2getRTC@i+1,c
 25843  005306  0E00               	movlw	0
 25844  005308  6E04               	movwf	i2getRTC@i,c
 25845  00530A                     i2l7066:
 25846  00530A  BE05               	btfsc	i2getRTC@i+1,7,c
 25847  00530C  D006               	goto	i2l7070
 25848  00530E  5005               	movf	i2getRTC@i+1,w,c
 25849  005310  E111               	bnz	i2l7076
 25850  005312  0E06               	movlw	6
 25851  005314  5C04               	subwf	i2getRTC@i,w,c
 25852  005316  B0D8               	btfsc	status,0,c
 25853  005318  D00D               	goto	i2l7076
 25854  00531A                     i2l7070:
 25855                           
 25856                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25857  00531A  0E1C               	movlw	low _time
 25858  00531C  2404               	addwf	i2getRTC@i,w,c
 25859  00531E  6ED9               	movwf	fsr2l,c
 25860  005320  0E01               	movlw	high _time
 25861  005322  2005               	addwfc	i2getRTC@i+1,w,c
 25862  005324  6EDA               	movwf	fsr2h,c
 25863  005326  0E01               	movlw	1
 25864  005328  EC8B  F02E         	call	i2_I2C_Master_Read
 25865  00532C  6EDF               	movwf	indf2,c
 25866  00532E  4A04               	infsnz	i2getRTC@i,f,c
 25867  005330  2A05               	incf	i2getRTC@i+1,f,c
 25868  005332  D7EB               	goto	i2l7066
 25869  005334                     i2l7076:
 25870                           
 25871                           ;RTC.c: 58: }
 25872                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25873  005334  0E00               	movlw	0
 25874  005336  EC8B  F02E         	call	i2_I2C_Master_Read
 25875  00533A  0101               	movlb	1	; () banked
 25876  00533C  6F22               	movwf	(_time+6)& (0+255),b
 25877                           
 25878                           ;RTC.c: 60: I2C_Master_Stop();
 25879  00533E  EC64  F02F         	call	i2_I2C_Master_Stop	;wreg free
 25880  005342  0012               	return		;funcret
 25881  005344                     __end_ofi2_getRTC:
 25882                           	opt stack 0
 25883                           pclatu	equ	0xFFB
 25884                           pclath	equ	0xFFA
 25885                           tblptru	equ	0xFF8
 25886                           tblptrh	equ	0xFF7
 25887                           tblptrl	equ	0xFF6
 25888                           tablat	equ	0xFF5
 25889                           prodh	equ	0xFF4
 25890                           prodl	equ	0xFF3
 25891                           intcon	equ	0xFF2
 25892                           intcon2	equ	0xFF1
 25893                           intcon3	equ	0xFF0
 25894                           indf0	equ	0xFEF
 25895                           postinc0	equ	0xFEE
 25896                           fsr0h	equ	0xFEA
 25897                           fsr0l	equ	0xFE9
 25898                           wreg	equ	0xFE8
 25899                           postdec1	equ	0xFE5
 25900                           fsr1h	equ	0xFE2
 25901                           fsr1l	equ	0xFE1
 25902                           indf2	equ	0xFDF
 25903                           postinc2	equ	0xFDE
 25904                           postdec2	equ	0xFDD
 25905                           fsr2h	equ	0xFDA
 25906                           fsr2l	equ	0xFD9
 25907                           status	equ	0xFD8
 25908                           
 25909 ;; *************** function i2_I2C_Master_Write *****************
 25910 ;; Defined at:
 25911 ;;		line 49 in file "I2C.c"
 25912 ;; Parameters:    Size  Location     Type
 25913 ;;  d               2    1[COMRAM] unsigned int 
 25914 ;; Auto vars:     Size  Location     Type
 25915 ;;		None
 25916 ;; Return value:  Size  Location     Type
 25917 ;;                  1    wreg      void 
 25918 ;; Registers used:
 25919 ;;		wreg, status,2, status,0, cstack
 25920 ;; Tracked objects:
 25921 ;;		On entry : 0/0
 25922 ;;		On exit  : 0/0
 25923 ;;		Unchanged: 0/0
 25924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25929 ;;Total ram usage:        2 bytes
 25930 ;; Hardware stack levels used:    1
 25931 ;; Hardware stack levels required when called:    1
 25932 ;; This function calls:
 25933 ;;		i2_I2C_Master_Wait
 25934 ;; This function is called by:
 25935 ;;		i2_getRTC
 25936 ;; This function uses a non-reentrant model
 25937 ;;
 25938                           
 25939                           	psect	text96
 25940  005EA6                     __ptext96:
 25941                           	opt stack 0
 25942  005EA6                     i2_I2C_Master_Write:
 25943                           	opt stack 19
 25944                           
 25945                           ;I2C.c: 51: I2C_Master_Wait();
 25946                           
 25947                           ;incstack = 0
 25948  005EA6  EC29  F02F         	call	i2_I2C_Master_Wait	;wreg free
 25949                           
 25950                           ;I2C.c: 52: SSPBUF = d;
 25951  005EAA  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25952  005EAE  0012               	return		;funcret
 25953  005EB0                     __end_ofi2_I2C_Master_Write:
 25954                           	opt stack 0
 25955                           pclatu	equ	0xFFB
 25956                           pclath	equ	0xFFA
 25957                           tblptru	equ	0xFF8
 25958                           tblptrh	equ	0xFF7
 25959                           tblptrl	equ	0xFF6
 25960                           tablat	equ	0xFF5
 25961                           prodh	equ	0xFF4
 25962                           prodl	equ	0xFF3
 25963                           intcon	equ	0xFF2
 25964                           intcon2	equ	0xFF1
 25965                           intcon3	equ	0xFF0
 25966                           indf0	equ	0xFEF
 25967                           postinc0	equ	0xFEE
 25968                           fsr0h	equ	0xFEA
 25969                           fsr0l	equ	0xFE9
 25970                           wreg	equ	0xFE8
 25971                           postdec1	equ	0xFE5
 25972                           fsr1h	equ	0xFE2
 25973                           fsr1l	equ	0xFE1
 25974                           indf2	equ	0xFDF
 25975                           postinc2	equ	0xFDE
 25976                           postdec2	equ	0xFDD
 25977                           fsr2h	equ	0xFDA
 25978                           fsr2l	equ	0xFD9
 25979                           status	equ	0xFD8
 25980                           
 25981 ;; *************** function i2_I2C_Master_Stop *****************
 25982 ;; Defined at:
 25983 ;;		line 43 in file "I2C.c"
 25984 ;; Parameters:    Size  Location     Type
 25985 ;;		None
 25986 ;; Auto vars:     Size  Location     Type
 25987 ;;		None
 25988 ;; Return value:  Size  Location     Type
 25989 ;;                  1    wreg      void 
 25990 ;; Registers used:
 25991 ;;		wreg, status,2, status,0, cstack
 25992 ;; Tracked objects:
 25993 ;;		On entry : 0/0
 25994 ;;		On exit  : 0/0
 25995 ;;		Unchanged: 0/0
 25996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26001 ;;Total ram usage:        0 bytes
 26002 ;; Hardware stack levels used:    1
 26003 ;; Hardware stack levels required when called:    1
 26004 ;; This function calls:
 26005 ;;		i2_I2C_Master_Wait
 26006 ;; This function is called by:
 26007 ;;		i2_getRTC
 26008 ;; This function uses a non-reentrant model
 26009 ;;
 26010                           
 26011                           	psect	text97
 26012  005EC8                     __ptext97:
 26013                           	opt stack 0
 26014  005EC8                     i2_I2C_Master_Stop:
 26015                           	opt stack 19
 26016                           
 26017                           ;I2C.c: 45: I2C_Master_Wait();
 26018                           
 26019                           ;incstack = 0
 26020  005EC8  EC29  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26021                           
 26022                           ;I2C.c: 46: PEN = 1;
 26023  005ECC  84C5               	bsf	4037,2,c	;volatile
 26024  005ECE  0012               	return		;funcret
 26025  005ED0                     __end_ofi2_I2C_Master_Stop:
 26026                           	opt stack 0
 26027                           pclatu	equ	0xFFB
 26028                           pclath	equ	0xFFA
 26029                           tblptru	equ	0xFF8
 26030                           tblptrh	equ	0xFF7
 26031                           tblptrl	equ	0xFF6
 26032                           tablat	equ	0xFF5
 26033                           prodh	equ	0xFF4
 26034                           prodl	equ	0xFF3
 26035                           intcon	equ	0xFF2
 26036                           intcon2	equ	0xFF1
 26037                           intcon3	equ	0xFF0
 26038                           indf0	equ	0xFEF
 26039                           postinc0	equ	0xFEE
 26040                           fsr0h	equ	0xFEA
 26041                           fsr0l	equ	0xFE9
 26042                           wreg	equ	0xFE8
 26043                           postdec1	equ	0xFE5
 26044                           fsr1h	equ	0xFE2
 26045                           fsr1l	equ	0xFE1
 26046                           indf2	equ	0xFDF
 26047                           postinc2	equ	0xFDE
 26048                           postdec2	equ	0xFDD
 26049                           fsr2h	equ	0xFDA
 26050                           fsr2l	equ	0xFD9
 26051                           status	equ	0xFD8
 26052                           
 26053 ;; *************** function i2_I2C_Master_Start *****************
 26054 ;; Defined at:
 26055 ;;		line 31 in file "I2C.c"
 26056 ;; Parameters:    Size  Location     Type
 26057 ;;		None
 26058 ;; Auto vars:     Size  Location     Type
 26059 ;;		None
 26060 ;; Return value:  Size  Location     Type
 26061 ;;                  1    wreg      void 
 26062 ;; Registers used:
 26063 ;;		wreg, status,2, status,0, cstack
 26064 ;; Tracked objects:
 26065 ;;		On entry : 0/0
 26066 ;;		On exit  : 0/0
 26067 ;;		Unchanged: 0/0
 26068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26073 ;;Total ram usage:        0 bytes
 26074 ;; Hardware stack levels used:    1
 26075 ;; Hardware stack levels required when called:    1
 26076 ;; This function calls:
 26077 ;;		i2_I2C_Master_Wait
 26078 ;; This function is called by:
 26079 ;;		i2_getRTC
 26080 ;; This function uses a non-reentrant model
 26081 ;;
 26082                           
 26083                           	psect	text98
 26084  005ED0                     __ptext98:
 26085                           	opt stack 0
 26086  005ED0                     i2_I2C_Master_Start:
 26087                           	opt stack 19
 26088                           
 26089                           ;I2C.c: 33: I2C_Master_Wait();
 26090                           
 26091                           ;incstack = 0
 26092  005ED0  EC29  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26093                           
 26094                           ;I2C.c: 34: SEN = 1;
 26095  005ED4  80C5               	bsf	4037,0,c	;volatile
 26096  005ED6  0012               	return		;funcret
 26097  005ED8                     __end_ofi2_I2C_Master_Start:
 26098                           	opt stack 0
 26099                           pclatu	equ	0xFFB
 26100                           pclath	equ	0xFFA
 26101                           tblptru	equ	0xFF8
 26102                           tblptrh	equ	0xFF7
 26103                           tblptrl	equ	0xFF6
 26104                           tablat	equ	0xFF5
 26105                           prodh	equ	0xFF4
 26106                           prodl	equ	0xFF3
 26107                           intcon	equ	0xFF2
 26108                           intcon2	equ	0xFF1
 26109                           intcon3	equ	0xFF0
 26110                           indf0	equ	0xFEF
 26111                           postinc0	equ	0xFEE
 26112                           fsr0h	equ	0xFEA
 26113                           fsr0l	equ	0xFE9
 26114                           wreg	equ	0xFE8
 26115                           postdec1	equ	0xFE5
 26116                           fsr1h	equ	0xFE2
 26117                           fsr1l	equ	0xFE1
 26118                           indf2	equ	0xFDF
 26119                           postinc2	equ	0xFDE
 26120                           postdec2	equ	0xFDD
 26121                           fsr2h	equ	0xFDA
 26122                           fsr2l	equ	0xFD9
 26123                           status	equ	0xFD8
 26124                           
 26125 ;; *************** function i2_I2C_Master_Read *****************
 26126 ;; Defined at:
 26127 ;;		line 55 in file "I2C.c"
 26128 ;; Parameters:    Size  Location     Type
 26129 ;;  a               1    wreg     unsigned char 
 26130 ;; Auto vars:     Size  Location     Type
 26131 ;;  a               1    1[COMRAM] unsigned char 
 26132 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 26133 ;; Return value:  Size  Location     Type
 26134 ;;                  1    wreg      unsigned char 
 26135 ;; Registers used:
 26136 ;;		wreg, status,2, status,0, cstack
 26137 ;; Tracked objects:
 26138 ;;		On entry : 0/0
 26139 ;;		On exit  : 0/0
 26140 ;;		Unchanged: 0/0
 26141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26146 ;;Total ram usage:        2 bytes
 26147 ;; Hardware stack levels used:    1
 26148 ;; Hardware stack levels required when called:    1
 26149 ;; This function calls:
 26150 ;;		i2_I2C_Master_Wait
 26151 ;; This function is called by:
 26152 ;;		i2_getRTC
 26153 ;; This function uses a non-reentrant model
 26154 ;;
 26155                           
 26156                           	psect	text99
 26157  005D16                     __ptext99:
 26158                           	opt stack 0
 26159  005D16                     i2_I2C_Master_Read:
 26160                           	opt stack 19
 26161                           
 26162                           ;incstack = 0
 26163                           ;i2I2C_Master_Read@a stored from wreg
 26164  005D16  6E02               	movwf	i2I2C_Master_Read@a,c
 26165                           
 26166                           ;I2C.c: 57: unsigned char temp;
 26167                           ;I2C.c: 58: I2C_Master_Wait();
 26168  005D18  EC29  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26169                           
 26170                           ;I2C.c: 59: RCEN = 1;
 26171  005D1C  86C5               	bsf	4037,3,c	;volatile
 26172                           
 26173                           ;I2C.c: 60: I2C_Master_Wait();
 26174  005D1E  EC29  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26175                           
 26176                           ;I2C.c: 61: temp = SSPBUF;
 26177  005D22  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 26178                           
 26179                           ;I2C.c: 62: I2C_Master_Wait();
 26180  005D26  EC29  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26181                           
 26182                           ;I2C.c: 63: ACKDT = (a)?0:1;
 26183  005D2A  5002               	movf	i2I2C_Master_Read@a,w,c
 26184  005D2C  A4D8               	btfss	status,2,c
 26185  005D2E  D002               	goto	i2u530_40
 26186  005D30  8AC5               	bsf	4037,5,c	;volatile
 26187  005D32  D001               	goto	i2l6724
 26188  005D34                     i2u530_40:
 26189  005D34  9AC5               	bcf	4037,5,c	;volatile
 26190  005D36                     i2l6724:
 26191                           
 26192                           ;I2C.c: 64: ACKEN = 1;
 26193  005D36  88C5               	bsf	4037,4,c	;volatile
 26194                           
 26195                           ;I2C.c: 65: return temp;
 26196  005D38  5003               	movf	i2I2C_Master_Read@temp,w,c
 26197  005D3A  0012               	return	
 26198  005D3C                     __end_ofi2_I2C_Master_Read:
 26199                           	opt stack 0
 26200                           pclatu	equ	0xFFB
 26201                           pclath	equ	0xFFA
 26202                           tblptru	equ	0xFF8
 26203                           tblptrh	equ	0xFF7
 26204                           tblptrl	equ	0xFF6
 26205                           tablat	equ	0xFF5
 26206                           prodh	equ	0xFF4
 26207                           prodl	equ	0xFF3
 26208                           intcon	equ	0xFF2
 26209                           intcon2	equ	0xFF1
 26210                           intcon3	equ	0xFF0
 26211                           indf0	equ	0xFEF
 26212                           postinc0	equ	0xFEE
 26213                           fsr0h	equ	0xFEA
 26214                           fsr0l	equ	0xFE9
 26215                           wreg	equ	0xFE8
 26216                           postdec1	equ	0xFE5
 26217                           fsr1h	equ	0xFE2
 26218                           fsr1l	equ	0xFE1
 26219                           indf2	equ	0xFDF
 26220                           postinc2	equ	0xFDE
 26221                           postdec2	equ	0xFDD
 26222                           fsr2h	equ	0xFDA
 26223                           fsr2l	equ	0xFD9
 26224                           status	equ	0xFD8
 26225                           
 26226 ;; *************** function i2_I2C_Master_Wait *****************
 26227 ;; Defined at:
 26228 ;;		line 26 in file "I2C.c"
 26229 ;; Parameters:    Size  Location     Type
 26230 ;;		None
 26231 ;; Auto vars:     Size  Location     Type
 26232 ;;		None
 26233 ;; Return value:  Size  Location     Type
 26234 ;;                  1    wreg      void 
 26235 ;; Registers used:
 26236 ;;		wreg, status,2, status,0
 26237 ;; Tracked objects:
 26238 ;;		On entry : 0/0
 26239 ;;		On exit  : 0/0
 26240 ;;		Unchanged: 0/0
 26241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26244 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26245 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26246 ;;Total ram usage:        1 bytes
 26247 ;; Hardware stack levels used:    1
 26248 ;; This function calls:
 26249 ;;		Nothing
 26250 ;; This function is called by:
 26251 ;;		i2_I2C_Master_Start
 26252 ;;		i2_I2C_Master_Stop
 26253 ;;		i2_I2C_Master_Write
 26254 ;;		i2_I2C_Master_Read
 26255 ;; This function uses a non-reentrant model
 26256 ;;
 26257                           
 26258                           	psect	text100
 26259  005E52                     __ptext100:
 26260                           	opt stack 0
 26261  005E52                     i2_I2C_Master_Wait:
 26262                           	opt stack 19
 26263  005E52                     i2l76:
 26264  005E52  B4C7               	btfsc	4039,2,c	;volatile
 26265  005E54  D7FE               	goto	i2l76
 26266  005E56  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 26267  005E5A  0E1F               	movlw	31
 26268  005E5C  1601               	andwf	??i2_I2C_Master_Wait,f,c
 26269  005E5E  B4D8               	btfsc	status,2,c
 26270  005E60  0012               	return	
 26271  005E62  D7F7               	goto	i2l76
 26272  005E64                     __end_ofi2_I2C_Master_Wait:
 26273                           	opt stack 0
 26274                           pclatu	equ	0xFFB
 26275                           pclath	equ	0xFFA
 26276                           tblptru	equ	0xFF8
 26277                           tblptrh	equ	0xFF7
 26278                           tblptrl	equ	0xFF6
 26279                           tablat	equ	0xFF5
 26280                           prodh	equ	0xFF4
 26281                           prodl	equ	0xFF3
 26282                           intcon	equ	0xFF2
 26283                           intcon2	equ	0xFF1
 26284                           intcon3	equ	0xFF0
 26285                           indf0	equ	0xFEF
 26286                           postinc0	equ	0xFEE
 26287                           fsr0h	equ	0xFEA
 26288                           fsr0l	equ	0xFE9
 26289                           wreg	equ	0xFE8
 26290                           postdec1	equ	0xFE5
 26291                           fsr1h	equ	0xFE2
 26292                           fsr1l	equ	0xFE1
 26293                           indf2	equ	0xFDF
 26294                           postinc2	equ	0xFDE
 26295                           postdec2	equ	0xFDD
 26296                           fsr2h	equ	0xFDA
 26297                           fsr2l	equ	0xFD9
 26298                           status	equ	0xFD8
 26299                           
 26300 ;; *************** function i2_delay_ms *****************
 26301 ;; Defined at:
 26302 ;;		line 717 in file "sort.c"
 26303 ;; Parameters:    Size  Location     Type
 26304 ;;  milliseconds    1    wreg     unsigned char 
 26305 ;; Auto vars:     Size  Location     Type
 26306 ;;  milliseconds    1    1[COMRAM] unsigned char 
 26307 ;; Return value:  Size  Location     Type
 26308 ;;                  1    wreg      void 
 26309 ;; Registers used:
 26310 ;;		wreg, status,2, status,0, cstack
 26311 ;; Tracked objects:
 26312 ;;		On entry : 0/0
 26313 ;;		On exit  : 0/0
 26314 ;;		Unchanged: 0/0
 26315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26317 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26318 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26319 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26320 ;;Total ram usage:        2 bytes
 26321 ;; Hardware stack levels used:    1
 26322 ;; This function calls:
 26323 ;;		Nothing
 26324 ;; This function is called by:
 26325 ;;		_printSortTimer
 26326 ;; This function uses a non-reentrant model
 26327 ;;
 26328                           
 26329                           	psect	text101
 26330  005DDE                     __ptext101:
 26331                           	opt stack 0
 26332  005DDE                     i2_delay_ms:
 26333                           	opt stack 22
 26334                           
 26335                           ;incstack = 0
 26336                           ;i2delay_ms@milliseconds stored from wreg
 26337  005DDE  6E02               	movwf	i2delay_ms@milliseconds,c
 26338                           
 26339                           ;sort.c: 718: while(milliseconds > 0)
 26340  005DE0  D008               	goto	i2l9382
 26341  005DE2                     i2l9378:
 26342                           
 26343                           ;sort.c: 719: {
 26344                           ;sort.c: 720: milliseconds--;
 26345  005DE2  0602               	decf	i2delay_ms@milliseconds,f,c
 26346                           
 26347                           ;sort.c: 721: _delay((unsigned long)((990)*(32000000/4000000.0)));
 26348  005DE4  0E0B               	movlw	11
 26349  005DE6  6E01               	movwf	??i2_delay_ms& (0+255),c
 26350  005DE8  0E48               	movlw	72
 26351  005DEA                     i2u1193_47:
 26352  005DEA  2EE8               	decfsz	wreg,f,c
 26353  005DEC  D7FE               	bra	i2u1193_47
 26354  005DEE  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 26355  005DF0  D7FC               	bra	i2u1193_47
 26356  005DF2                     i2l9382:
 26357  005DF2  5002               	movf	i2delay_ms@milliseconds,w,c
 26358  005DF4  B4D8               	btfsc	status,2,c
 26359  005DF6  0012               	return	
 26360  005DF8  D7F4               	goto	i2l9378
 26361  005DFA                     __end_ofi2_delay_ms:
 26362                           	opt stack 0
 26363                           pclatu	equ	0xFFB
 26364                           pclath	equ	0xFFA
 26365                           tblptru	equ	0xFF8
 26366                           tblptrh	equ	0xFF7
 26367                           tblptrl	equ	0xFF6
 26368                           tablat	equ	0xFF5
 26369                           prodh	equ	0xFF4
 26370                           prodl	equ	0xFF3
 26371                           intcon	equ	0xFF2
 26372                           intcon2	equ	0xFF1
 26373                           intcon3	equ	0xFF0
 26374                           indf0	equ	0xFEF
 26375                           postinc0	equ	0xFEE
 26376                           fsr0h	equ	0xFEA
 26377                           fsr0l	equ	0xFE9
 26378                           wreg	equ	0xFE8
 26379                           postdec1	equ	0xFE5
 26380                           fsr1h	equ	0xFE2
 26381                           fsr1l	equ	0xFE1
 26382                           indf2	equ	0xFDF
 26383                           postinc2	equ	0xFDE
 26384                           postdec2	equ	0xFDD
 26385                           fsr2h	equ	0xFDA
 26386                           fsr2l	equ	0xFD9
 26387                           status	equ	0xFD8
 26388                           
 26389 ;; *************** function i2___awmod *****************
 26390 ;; Defined at:
 26391 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 26392 ;; Parameters:    Size  Location     Type
 26393 ;;  dividend        2    0[COMRAM] int 
 26394 ;;  divisor         2    2[COMRAM] int 
 26395 ;; Auto vars:     Size  Location     Type
 26396 ;;  __awmod         1    5[COMRAM] unsigned char 
 26397 ;;  __awmod         1    4[COMRAM] unsigned char 
 26398 ;; Return value:  Size  Location     Type
 26399 ;;                  2    0[COMRAM] int 
 26400 ;; Registers used:
 26401 ;;		wreg, status,2, status,0
 26402 ;; Tracked objects:
 26403 ;;		On entry : 0/0
 26404 ;;		On exit  : 0/0
 26405 ;;		Unchanged: 0/0
 26406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26407 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26410 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26411 ;;Total ram usage:        6 bytes
 26412 ;; Hardware stack levels used:    1
 26413 ;; This function calls:
 26414 ;;		Nothing
 26415 ;; This function is called by:
 26416 ;;		_printSortTimer
 26417 ;; This function uses a non-reentrant model
 26418 ;;
 26419                           
 26420                           	psect	text102
 26421  005344                     __ptext102:
 26422                           	opt stack 0
 26423  005344                     i2___awmod:
 26424                           	opt stack 22
 26425                           
 26426                           ;incstack = 0
 26427  005344  0E00               	movlw	0
 26428  005346  6E06               	movwf	i2___awmod@sign,c
 26429  005348  AE02               	btfss	i2___awmod@dividend+1,7,c
 26430  00534A  D006               	goto	i2l9392
 26431  00534C  6C01               	negf	i2___awmod@dividend,c
 26432  00534E  1E02               	comf	i2___awmod@dividend+1,f,c
 26433  005350  B0D8               	btfsc	status,0,c
 26434  005352  2A02               	incf	i2___awmod@dividend+1,f,c
 26435  005354  0E01               	movlw	1
 26436  005356  6E06               	movwf	i2___awmod@sign,c
 26437  005358                     i2l9392:
 26438  005358  AE04               	btfss	i2___awmod@divisor+1,7,c
 26439  00535A  D004               	goto	i2l9396
 26440  00535C  6C03               	negf	i2___awmod@divisor,c
 26441  00535E  1E04               	comf	i2___awmod@divisor+1,f,c
 26442  005360  B0D8               	btfsc	status,0,c
 26443  005362  2A04               	incf	i2___awmod@divisor+1,f,c
 26444  005364                     i2l9396:
 26445  005364  5003               	movf	i2___awmod@divisor,w,c
 26446  005366  1004               	iorwf	i2___awmod@divisor+1,w,c
 26447  005368  B4D8               	btfsc	status,2,c
 26448  00536A  D018               	goto	i2l9412
 26449  00536C  0E01               	movlw	1
 26450  00536E  6E05               	movwf	i2___awmod@counter,c
 26451  005370  D004               	goto	i2l9402
 26452  005372                     i2l9400:
 26453  005372  90D8               	bcf	status,0,c
 26454  005374  3603               	rlcf	i2___awmod@divisor,f,c
 26455  005376  3604               	rlcf	i2___awmod@divisor+1,f,c
 26456  005378  2A05               	incf	i2___awmod@counter,f,c
 26457  00537A                     i2l9402:
 26458  00537A  AE04               	btfss	i2___awmod@divisor+1,7,c
 26459  00537C  D7FA               	goto	i2l9400
 26460  00537E                     i2l9404:
 26461  00537E  5003               	movf	i2___awmod@divisor,w,c
 26462  005380  5C01               	subwf	i2___awmod@dividend,w,c
 26463  005382  5004               	movf	i2___awmod@divisor+1,w,c
 26464  005384  5802               	subwfb	i2___awmod@dividend+1,w,c
 26465  005386  A0D8               	btfss	status,0,c
 26466  005388  D004               	goto	i2l9408
 26467  00538A  5003               	movf	i2___awmod@divisor,w,c
 26468  00538C  5E01               	subwf	i2___awmod@dividend,f,c
 26469  00538E  5004               	movf	i2___awmod@divisor+1,w,c
 26470  005390  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26471  005392                     i2l9408:
 26472  005392  90D8               	bcf	status,0,c
 26473  005394  3204               	rrcf	i2___awmod@divisor+1,f,c
 26474  005396  3203               	rrcf	i2___awmod@divisor,f,c
 26475  005398  2E05               	decfsz	i2___awmod@counter,f,c
 26476  00539A  D7F1               	goto	i2l9404
 26477  00539C                     i2l9412:
 26478  00539C  5006               	movf	i2___awmod@sign,w,c
 26479  00539E  B4D8               	btfsc	status,2,c
 26480  0053A0  D004               	goto	i2l9416
 26481  0053A2  6C01               	negf	i2___awmod@dividend,c
 26482  0053A4  1E02               	comf	i2___awmod@dividend+1,f,c
 26483  0053A6  B0D8               	btfsc	status,0,c
 26484  0053A8  2A02               	incf	i2___awmod@dividend+1,f,c
 26485  0053AA                     i2l9416:
 26486  0053AA  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26487  0053AE  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26488  0053B2  0012               	return	
 26489  0053B4                     __end_ofi2___awmod:
 26490                           	opt stack 0
 26491                           pclatu	equ	0xFFB
 26492                           pclath	equ	0xFFA
 26493                           tblptru	equ	0xFF8
 26494                           tblptrh	equ	0xFF7
 26495                           tblptrl	equ	0xFF6
 26496                           tablat	equ	0xFF5
 26497                           prodh	equ	0xFF4
 26498                           prodl	equ	0xFF3
 26499                           intcon	equ	0xFF2
 26500                           intcon2	equ	0xFF1
 26501                           intcon3	equ	0xFF0
 26502                           indf0	equ	0xFEF
 26503                           postinc0	equ	0xFEE
 26504                           fsr0h	equ	0xFEA
 26505                           fsr0l	equ	0xFE9
 26506                           wreg	equ	0xFE8
 26507                           postdec1	equ	0xFE5
 26508                           fsr1h	equ	0xFE2
 26509                           fsr1l	equ	0xFE1
 26510                           indf2	equ	0xFDF
 26511                           postinc2	equ	0xFDE
 26512                           postdec2	equ	0xFDD
 26513                           fsr2h	equ	0xFDA
 26514                           fsr2l	equ	0xFD9
 26515                           status	equ	0xFD8
 26516                           pclatu	equ	0xFFB
 26517                           pclath	equ	0xFFA
 26518                           tblptru	equ	0xFF8
 26519                           tblptrh	equ	0xFF7
 26520                           tblptrl	equ	0xFF6
 26521                           tablat	equ	0xFF5
 26522                           prodh	equ	0xFF4
 26523                           prodl	equ	0xFF3
 26524                           intcon	equ	0xFF2
 26525                           intcon2	equ	0xFF1
 26526                           intcon3	equ	0xFF0
 26527                           indf0	equ	0xFEF
 26528                           postinc0	equ	0xFEE
 26529                           fsr0h	equ	0xFEA
 26530                           fsr0l	equ	0xFE9
 26531                           wreg	equ	0xFE8
 26532                           postdec1	equ	0xFE5
 26533                           fsr1h	equ	0xFE2
 26534                           fsr1l	equ	0xFE1
 26535                           indf2	equ	0xFDF
 26536                           postinc2	equ	0xFDE
 26537                           postdec2	equ	0xFDD
 26538                           fsr2h	equ	0xFDA
 26539                           fsr2l	equ	0xFD9
 26540                           status	equ	0xFD8
 26541                           
 26542                           	psect	rparam
 26543  0000                     pclatu	equ	0xFFB
 26544                           pclath	equ	0xFFA
 26545                           tblptru	equ	0xFF8
 26546                           tblptrh	equ	0xFF7
 26547                           tblptrl	equ	0xFF6
 26548                           tablat	equ	0xFF5
 26549                           prodh	equ	0xFF4
 26550                           prodl	equ	0xFF3
 26551                           intcon	equ	0xFF2
 26552                           intcon2	equ	0xFF1
 26553                           intcon3	equ	0xFF0
 26554                           indf0	equ	0xFEF
 26555                           postinc0	equ	0xFEE
 26556                           fsr0h	equ	0xFEA
 26557                           fsr0l	equ	0xFE9
 26558                           wreg	equ	0xFE8
 26559                           postdec1	equ	0xFE5
 26560                           fsr1h	equ	0xFE2
 26561                           fsr1l	equ	0xFE1
 26562                           indf2	equ	0xFDF
 26563                           postinc2	equ	0xFDE
 26564                           postdec2	equ	0xFDD
 26565                           fsr2h	equ	0xFDA
 26566                           fsr2l	equ	0xFD9
 26567                           status	equ	0xFD8
 26568                           
 26569                           	psect	temp
 26570  00007E                     btemp:
 26571                           	opt stack 0
 26572  00007E                     	ds	1
 26573  0000                     int$flags	set	btemp
 26574                           pclatu	equ	0xFFB
 26575                           pclath	equ	0xFFA
 26576                           tblptru	equ	0xFF8
 26577                           tblptrh	equ	0xFF7
 26578                           tblptrl	equ	0xFF6
 26579                           tablat	equ	0xFF5
 26580                           prodh	equ	0xFF4
 26581                           prodl	equ	0xFF3
 26582                           intcon	equ	0xFF2
 26583                           intcon2	equ	0xFF1
 26584                           intcon3	equ	0xFF0
 26585                           indf0	equ	0xFEF
 26586                           postinc0	equ	0xFEE
 26587                           fsr0h	equ	0xFEA
 26588                           fsr0l	equ	0xFE9
 26589                           wreg	equ	0xFE8
 26590                           postdec1	equ	0xFE5
 26591                           fsr1h	equ	0xFE2
 26592                           fsr1l	equ	0xFE1
 26593                           indf2	equ	0xFDF
 26594                           postinc2	equ	0xFDE
 26595                           postdec2	equ	0xFDD
 26596                           fsr2h	equ	0xFDA
 26597                           fsr2l	equ	0xFD9
 26598                           status	equ	0xFD8


Data Sizes:
    Strings     1332
    Constant    27
    Data        8
    BSS         150
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      85
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_127(CODE[18]), STR_126(CODE[18]), STR_125(CODE[17]), STR_124(CODE[17]), 
		 -> STR_123(CODE[15]), STR_122(CODE[15]), STR_121(CODE[18]), STR_120(CODE[15]), 
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[17]), STR_116(CODE[17]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[17]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[16]), STR_64(CODE[16]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _ID->___ftge
    _readIR->_readADC
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  241164
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   30666
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   19542
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                5     3      2     841
                                              8 BANK0      5     3      2
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                  29    29      0    5731
                                             27 BANK0     29    29      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               6     4      2     687
                                              2 BANK0      6     4      2
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11542
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23224
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22310
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10795
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10795
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46992
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13339
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1216
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  116832
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9083
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9040
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8971
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15607
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9244
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19757
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9246
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8836
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84367
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    5279
                                             41 COMRAM    33    33      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
       _readIR
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      55       7       33.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 11 23:08:02 2017

                                    _i 013F                     i2_I2C_Master_Start 5ED0  
                   i2_I2C_Master_Write 5EA6                                     _ID 1192  
                                   l76 5E3E                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 58A2                                    ID@i 00A1  
                                  ID@j 00B4                                    ID@n 00B6  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l190 00E2  
                                  l193 00E6                                    l513 4A70  
                                  l198 0102                                    l632 3272  
                                  l800 1812                                    l810 18E6  
                                  l812 193C                                    l821 1A0E  
                                  l813 1920                                    l831 1AA0  
                                  l840 1B96                                    l833 1AE8  
                                  l850 1C08                                    l818 19D4  
                                  l851 1C1E                                    l843 1C68  
                                  l828 1B28                                    l845 1BBA  
                                  l870 145A                                    l855 1CC0  
                                  l847 1BCC                                    l839 1C6A  
                                  l952 51A4                                    l864 12D2  
                                  l848 1BE0                                    l873 14BA  
                                  l849 1BF4                                    l866 1340  
                                  l891 172C                                    l887 167A  
                                  l888 1694                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3F1A                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 455C  
                                  _log 00EE                                    _sel 00FD  
                                  _var 014B                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 40E0                    _log_count_can_w_lab 0143  
                           i2_delay_ms 5DDE        __end_of_change_state_to_menu_11 5AD2  
      __end_of_change_state_to_menu_12 5912        __end_of_change_state_to_menu_22 58DA  
      __end_of_change_state_to_menu_23 5AA2           _f_can_coming_to_distribution 0135  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5BC2  
      __end_of_change_state_to_logs_12 5B92        __end_of_change_state_to_logs_22 5B62  
      __end_of_change_state_to_logs_23 5C1E        __end_of_change_state_to_logs_33 5B32  
      __end_of_change_state_to_logs_34 5B02                                   ??_ID 009B  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1300 2F20  
                                 l1150 467C                                   l1330 09EE  
                                 l1323 0944                                   l1163 5E0A  
                                 l1412 2EB0                                   l1172 420E  
                                 l1421 2E24                                   l1333 0A54  
                                 l1502 5602                                   l1334 0AA2  
                                 l1326 0948                                   l1335 0B08  
                                 l1360 0EB0                                   l1336 0B56  
                                 l1425 2E7C                                   l1265 449C  
                                 l1442 50B2                                   l1427 2EAA  
                                 l1435 50A2                                   l1291 4886  
                                 l1372 104A                                   l1268 44BC  
                                 l1390 4F00                                   l1536 1F14  
                                 l1464 4068                                   l1288 4882  
                                 l1480 460E                                   l1800 4422  
                                 l1465 4082                                   l1377 1120  
                                 l1297 2F1C                                   l1459 401C  
                                 l1395 4F42                                   l1397 4F44  
                                 ?_arm 0001                                   l1479 464C  
                                 l1496 55F2                                   l1488 4646  
                                 l1930 4CC6                                   l7010 4386  
                                 l7020 4414                                   l7012 43B6  
                                 l7004 4364                                   l1983 52C8  
                                 l7032 4448                                   l7016 43D6  
                                 l7008 4378                                   l8000 190A  
                                 l1993 5544                                   l7042 4C4A  
                                 l7026 442C                                   l7018 4406  
                                 l7044 4C5A                                   l7054 4CB4  
                                 l7046 4C60                                   l8120 1C2A  
                                 l8122 1C60                                   l8026 19BE  
                                 l6700 5536                                   l9100 2DB0  
                                 l7500 472A                                   l8060 1A84  
                                 l8052 1A50                                   l8140 1CB4  
                                 l8036 19EE                                   l6614 5C5E  
                                 l9014 50DA                                   l7270 32F4  
                                 l7262 327C                                   l7510 5CBC  
                                 l8302 1664                                   l8206 12FC  
                                 l8230 1418                                   l8038 19F8  
                                 l8142 1CC2                                   _ADIE 007CEE  
                                 l6616 5C70                                   l9112 2DFA  
                                 l7600 4BF0                                   l7280 338A  
                                 l7272 3312                                   l7264 329A  
                                 l7256 31F0                                   l6800 4E98  
                                 l8240 1466                                   l8128 1C72  
                                 l8072 1ADC                                   l8064 1AA4  
                                 l8048 1A2A                                   l9130 2E66  
                                 l9106 2DD0                                   l9050 2C08  
                                 l7282 33A8                                   l7274 3330  
                                 l7266 32B8                                   l7290 3442  
                                 l7506 5CA6                                   l7442 4CFC  
                                 l8058 1A7A                                   l9116 2E0E  
                                 l9108 2DE6                                   l8420 2F70  
                                 l7604 4BFE                                   l7284 33C6  
                                 l7276 334E                                   l7268 32D6  
                                 l8340 475A                                   l7620 57FE  
                                 l8260 158C                                   l8228 140E  
                                 l8092 1BA2                                   l6822 1CF0  
                                 l9126 2E52                                   l9070 2CBE  
                                 l6638 5BE8                                   l7278 336C  
                                 l8342 4774                                   l8350 47C2  
                                 l8326 16EA                                   l8334 172E  
                                 l8270 15CA                                   l8174 1232  
                                 l7542 510E                                   l7438 4CE6  
                                 l6672 5278                                   l6656 5C96  
                                 l6912 1FCA                                   l6824 1D02  
                                 l9304 4084                                   l7608 4C12  
                                 l7288 33E4                                   l7720 4F8E  
                                 l8344 478E                                   l8352 47F0  
                                 l7632 4B16                                   l8176 123A  
                                 l7448 4D72                                   l6674 5284  
                                 l6930 2042                                   l6906 1FA8  
                                 l6850 1DEE                                   l6842 1DBC  
                                 l6834 1D40                                   l6818 1CDC  
                                 l9306 4094                                   l9314 40DA  
                                 l8450 3078                                   l7730 4FD0  
                                 l8346 47A8                                   l8282 1606  
                                 l8274 15DE                                   l7554 5140  
                                 l7538 50F8                                   l6684 52BA  
                                 l6676 528A                                   l6692 5500  
                                 l6932 204E                                   l6940 207C  
                                 l6924 2026                                   l6916 2002  
                                 l6860 1E66                                   l6852 1DFA  
                                 l6828 1D0C                                   l9260 3FA4  
                                 l9068 2CB8                                   l8700 0D68  
                                 l8532 09B2                                   l9340 4DF8  
                                 l9332 4DC2                                   l9324 4D9E  
                                 l7484 46E8                                   l7492 470A  
                                 l7724 4FA4                                   l7628 4AD6  
                                 l8268 15C2                                   l8188 128E  
                                 l6694 550C                                   l6942 2082  
                                 l6918 200C                                   l6870 1EBC  
                                 l6862 1E72                                   l6854 1E00  
                                 l8710 0D90                                   l8622 0BDC  
                                 l8542 09DA                                   l8534 09B8  
                                 l8438 3028                                   l7590 4BBA  
                                 l7582 4B90                                   l9334 4DCE  
                                 l7638 4B5A                                   l8294 163E  
                                 l8286 1616                                   l7558 5158  
                                 l6696 5512                                   l6936 2068  
                                 l6872 1ED4                                   l6864 1E78  
                                 l9088 2D6E                                   l8704 0D80  
                                 l8632 0C04                                   l8480 316C  
                                 l8456 30BA                                   l7592 4BC0  
                                 l7576 4B7A                                   l9336 4DD4  
                                 l9344 4E06                                   l9328 4DAE  
                                 l6960 5018                                   l6952 591C  
                                 l9504 01FC                                   l7496 4720  
                                 l7488 46F2                                   l6946 20DA  
                                 l6866 1E90                                   l8810 0F9E  
                                 l8802 0F7C                                   l8730 0E04  
                                 l8722 0DE2                                   l8714 0DA8  
                                 l8706 0D86                                   l8626 0BF4  
                                 l8618 0BD2                                   l8538 09C2  
                                 l6970 504E                                   l6954 5928  
                                 l9522 0258                                   l6794 4E50  
                                 l8298 164E                                   l6892 1F66  
                                 l6876 1EDA                                   l6948 20E6  
                                 l9292 4048                                   l9284 401E  
                                 l9268 3FEA                                   l8820 0FC6  
                                 l8812 0FA4                                   l8740 0E2C  
                                 l8732 0E0A                                   l8652 0C78  
                                 l8644 0C56                                   l8636 0C1C  
                                 l8628 0BFA                                   l8492 31B4  
                                 l8476 3136                                   l8468 3106  
                                 l7588 4BAE                                   l9348 4E1A  
                                 l6964 502E                                   l9612 0578  
                                 l9604 0556                                   l9540 02A4  
                                 l9532 0282                                   l9452 00FE  
                                 l6796 4E74                                   l7940 17D0  
                                 l6894 1F6C                                   l9294 4052  
                                 l9286 402E                                   l8902 114A  
                                 l8806 0F86                                   l8726 0DEC  
                                 l8670 0CDA                                   l8662 0CA0  
                                 l8654 0C7E                                   l9526 0270  
                                 l9518 024E                                   l9470 015C  
                                 l9462 013A                                   l7950 181A  
                                 l6888 1F4C                                   l8912 1172  
                                 l8832 100A                                   l8816 0FAE  
                                 l8752 0E70                                   l8736 0E14  
                                 l8680 0D02                                   l8648 0C60  
                                 l8488 317E                                   l9720 07D8  
                                 l9712 07B6                                   l9640 0660  
                                 l9632 063E                                   l9608 0560  
                                 l9560 0332                                   l9536 028C  
                                 l6994 51BE                                   l8906 1162  
                                 l8842 1032                                   l8762 0E98  
                                 l8674 0CE4                                   l8658 0C88  
                                 l9730 07F4                                   l9650 067C  
                                 l9570 03C8                                   l9562 0350  
                                 l9490 01CC                                   l9474 016E  
                                 l9466 0144                                   l9458 0128  
                                 l6988 518C                                   l8916 118A  
                                 l8908 1168                                   l8836 1022  
                                 l8828 1000                                   l8780 0F02  
                                 l8756 0E88                                   l8748 0E66  
                                 l8684 0D0C                                   l9716 07C0  
                                 l9636 0648                                   l9580 045E  
                                 l9572 03E6                                   l9564 036E  
                                 l9556 02F6                                   l8870 10BC  
                                 l8862 109A                                   l8838 1028  
                                 l8790 0F2A                                   l8758 0E8E  
                                 l8678 0CFC                                   l8950 45F6  
                                 l9734 080C                                   l9726 07EA  
                                 l9654 0694                                   l9646 0672  
                                 l9590 0522                                   l9574 0404  
                                 l9566 038C                                   l9558 0314  
                                 l9494 01D6                                   l7966 1860  
                                 l8880 10E4                                   l8872 10C2  
                                 l8784 0F1A                                   l8776 0EF8  
                                 l8696 0D5E                                   l8688 0D24  
                                 l8960 462E                                   l8952 4600  
                                 l9760 088C                                   l9752 086A  
                                 l9680 071C                                   l9672 06FA  
                                 l9576 0422                                   l9568 03AA  
                                 l9584 047C                                   l9488 01C6  
                                 l8866 10A4                                   l8794 0F42  
                                 l8786 0F20                                   l8962 4638  
                                 l8946 45D0                                   l9770 08A8  
                                 l9690 0738                                   l9594 052C  
                                 l9578 0440                                   l9586 04E0  
                                 l9498 01EE                                   l8876 10CC  
                                 l9756 0874                                   l9676 0704  
                                 l7988 18D0                                   l8886 110A  
                                 l8958 4614                                   l9774 08C0  
                                 l9766 089E                                   l9694 0750  
                                 l9686 072E                                   l9598 0544  
                                 l7998 1900                                   STR_1 FB63  
                                 l8896 113A                                   STR_2 FF49  
                                 STR_3 FB51                                   l8898 1140  
                                 l9778 08CC                                   STR_4 FE5D  
                                 STR_5 FB51                                   STR_6 FDD9  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5200 5BE6  
                                 u6200 5748                                   u5400 4E6A  
                                 u5410 4E6C                                   _PEIE 007F96  
                                 u5500 1E3A                                   u5420 4E8E  
                                 u6230 3272                                   u5430 4E90  
                                 u6215 557E                                   u5440 5792  
                                 u7200 13E4                                   u5441 578E  
                                 u5450 5794                                   u5507 1E30  
                                 u5540 1EB2                                   _RCEN 007E2B  
                                 u6190 5746                                   u7230 1458  
                                 u8200 4624                                   u8210 4626  
                                 u7410 16F6                                   u7170 138E  
                                 u5547 1EA8                                   u7500 2FB4  
                                 u7260 153A                                   u7180 1390  
                                 u6700 1812                                   u8150 45EC  
                                 u7430 172C                                   u7270 153C  
                                 u7190 13E2                                   u8400 2D00  
                                 u8160 45EE                                   u8410 2D02  
                                 u7530 315A                                   i2l76 5E52  
                                 u8500 2DDE                                   u7428 16FA  
                                 u8510 2DF6                                   u7630 09EE  
                                 u8511 2DF2                                   u8280 4F2A  
                                 u7560 31A2                                   u6680 17DC  
                                 u8450 2D98                                   u8370 2C4A  
                                 u7650 0AA2                                   u7538 315E  
                                 u7490 2FB2                                   u8700 4040  
                                 u8380 2C4C                                   u7670 0B56  
                                 u7568 31A6                                   u6960 1AFA  
                                 u8641 4012                                   u8650 4014  
                                 u8298 4F2E                                   u6698 17E0  
                                 u8468 2D9C                                   u6980 1B20  
                                 u6990 1B22                                   u6978 1AFE  
                                 u8691 403E                                   u9820 420E  
                                 _RSEN 007E29                            _stopSignals 5DC2  
                                 _Test 4456                                   _back 0063  
                                 _main 49CE                                   _down 0065  
                         ___ftpack@arg 0080                                   _keys FAAF  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5D60  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0141  
                      __end_ofi2_putch 5E90                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3746  
                          i2_lcdNibble 560A                        __end_of_Loading 1CCE  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
                                ID@res 00AE             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10100 44EC  
                                l10102 44F2                                  l10110 4550  
                                l10030 412C                                  l10104 44F8  
                                l10032 4140                                  l10108 44FE  
                                l10070 4458                                  l10056 41C8  
                                l10320 4A18                                  l10090 44CE  
                                l10330 4A48                                  l10322 4A2E  
                                l10092 44D4                                  l10340 4A66  
                                l10332 4A4E                                  l10094 44DA  
                                l10086 44C2                                  l10342 4A6C  
                                l10096 44E0                                  l10088 44C8  
                                l10328 4A42                                  l10098 44E6  
                                l10346 4A72                   __end_of_EEPROM_write 4742  
                          ID@time_1150 009D                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 4C1C                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FACA                                  STR_14 FFD6  
                                STR_22 FF9A                                  STR_30 FDEA  
                                STR_15 FFD2                                  STR_23 FF3B  
                                STR_31 FDC8                                  STR_16 FFE2  
                                STR_24 FD2F                                  STR_32 FD0D  
                                STR_40 FCC9                                  STR_17 FFF2  
                                STR_25 FE0C                                  STR_33 FD1E  
                                STR_41 FCB8                                  STR_18 FFF6  
                                STR_34 FDB7                                  STR_50 FD95  
                                STR_42 FD73                                  STR_26 FD40  
                                STR_43 FD73                                  STR_35 FDB7  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FDFB                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD51  
                                STR_36 FCFC                                  STR_44 FCDA  
                      __end_of___awmod 4E24                                  STR_45 FCC9  
                                STR_37 FD0D                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FE09  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FEF4                                  STR_38 FDA6  
                                STR_46 FD84                                  STR_47 FD84  
                                STR_55 FFFA                                  STR_63 FACA  
                                STR_71 FF2D                                  STR_39 FD62  
                                STR_56 FFDE                                  STR_80 FE7C  
                                STR_64 FE3D                                  STR_48 FCEB  
                                STR_72 FC41                                  STR_49 FCDA  
                                STR_57 FFD6                                  STR_81 FE09  
                                STR_73 FF11                                  STR_65 FE4D  
                                STR_58 FFD2                                  STR_74 FF64  
                                STR_90 FEE5                                  STR_82 FEA9  
                                STR_66 FAE2                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_91 FF03  
                                STR_75 FED6                                  STR_83 FE1D  
                                STR_84 FF86                                  STR_76 FF1F  
                                STR_68 FC74                                  STR_92 FC52  
                                STR_85 FF86                                  STR_77 FFAD  
                                STR_93 FF70                                  STR_69 FC85  
                                STR_78 FF2D                                  STR_86 FFA4  
                                STR_94 FC63                                  STR_87 FFA4  
                                STR_95 FF7B                                  STR_79 FF57  
                                STR_88 FF90                                  STR_96 FEC7  
                                STR_89 FF2D                                  STR_97 FBCA  
                                STR_98 FBB9                                  STR_99 FB97  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4CD8           i2updateServoPosition@time_us 0001  
                                u11007 301C                                  u11017 303C  
                                u11107 4898                                  u11027 306A  
                                u10307 188E                                  u11117 08F4  
                                u11037 30AE                                  u10317 18EA  
                                u11207 0B36                                  u11127 0938  
                                u11047 30CC                                  u10407 1A1C  
                                u10327 18F2                                  _T0CON 000FD5  
                                u11217 0B66                                  u11137 095A  
                                u11057 30FA                                  u10417 1A38  
                                u10337 1924                                  u11307 0DF4  
                                u11227 0BE4                                  u11147 09CA  
                                u11067 3114                                  u10507 1BF8  
                                u10427 1B42                                  u10347 192E  
                      ___awdiv@divisor 0088                                  u11317 0E1C  
                                u11237 0C0C                                  u11157 09FE  
                                u11077 456A                                  u10517 1C00  
                                u10437 1B84                                  u10357 194C  
                                u11407 105C                                  u11327 0E78  
                                u11247 0C68                                  u11167 0A64  
                                u11087 4832                                  u10607 12E2  
                                u10527 1C0C                                  u10447 1BBE  
                                u10367 1980                                  _T1CON 000FCD  
                                u11417 10AC                                  u11337 0EA0  
                                u11257 0C90                                  u11177 0A82  
                                u11097 4876                                  u10617 14CA  
                                u10537 1C16                                  u10457 1BC6  
                                u10377 19D8                                  u10297 175E  
                                u11507 55BC                                  u11427 10D4  
                                u11347 0F0A                                  u11267 0CEC  
                                u11187 0AB2                                  u10707 4732  
                                u10627 167E                                  u10547 1C22  
                                u10467 1BD0                                  u10387 19E0  
                                u11517 4ECA                                  u11437 1124  
                                u11357 0F32                                  u11277 0D14  
                                u11197 0B18                                  u10717 002A  
                                u10637 1688                                  u10557 1C8C  
                                u10477 1BDA                                  u10397 1A12  
                                u11607 2E98                                  u11527 2BE6  
                                u11447 112E                                  u11367 0F8E  
                                u11287 0D70                                  u10807 0534  
                                u10727 0114                                  u10647 16AE  
                                u10567 599C                                  u10487 1BE4  
                                _T2CON 000FCA                                  u11617 2114  
                                u11537 2C60                                  u11457 1152  
                                u11377 0FB6                                  u11297 0D98  
                                u10817 0568                                  u10737 014C  
                                u10657 5CB2                                  u10577 5116  
                                u10497 1BEE                                  u11707 2344  
                                u11627 2160                                  u11547 2CAC  
                                u11467 117A                                  u11387 1012  
                                u10907 07FC                                  u10827 0592  
                                u10747 0188                                  u10667 57A4  
                                u10587 11AC                                  u11717 2376  
                                u11637 21AC                                  u11557 2D16  
                                u11477 506C                                  u11397 103A  
                                u10917 0826                                  u10837 0650  
                                u10757 01DE                                  u10677 57D8  
                                u10597 11F2                                  u11807 3F50  
                                u11727 23C2                                  u11647 21E0  
                                u11567 2D62                                  u11487 50BC  
                                u10927 087C                                  u10847 0684  
                                u10767 020A                                  u10687 469E  
                                _T3CON 000FB1                                  u11817 406C  
                                u11737 23F6                                  u11657 2212  
                                u11577 2E2E                                  u11497 50D0  
                                u10937 08B0                                  u10857 06AE  
                                u10777 0260                                  u10697 46FA  
                                u11827 4076                                  u11747 2428  
                                u11667 225E                                  u11587 2E40  
                                u10947 4466                                  u10867 070C  
                                u10787 0294                                  u11837 5C66  
                                u11757 2474                                  u11677 2292  
                                u11597 2E86                                  u10957 2ECC  
                                u10877 0740                                  u10797 02BE  
                                u11847 53D6                                  u11767 24A8  
                                u11687 22C4                                  u10967 2F10  
                                u10887 076A                                  u11857 53E0  
                                u11777 24DA                                  u11697 2310  
                                u10977 2F32                                  u10897 07C8  
                                u11867 540C                                  u11787 5224  
                                u10987 2F60                                  u11877 5416  
                                u11797 5240                                  u10997 2FC8  
                      __end_of___lwdiv 52D2                        __end_of___lwmod 554E  
                                i2l273 3742                                  i2l632 37D4  
                                i2l920 2A62                                  i2l924 2A28  
                                i2l927 2AD0                                  i2l952 5452  
                      ___awdiv@counter 008A                                  i2l979 589E  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 2106                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5E84                        __end_of_handler 3D52  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5C76  
                      __end_of_initLCD 57E2                         __CFG_EBTRB$OFF 000000  
                                _debug 012F                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 50E2  
                      __end_of_loadRTC 4FD8                        __end_of_readMAG 579C  
                      __end_of_dpowers FACA                                  _first 013B  
                                _enter 0067                                  arm@on 00AC  
                      __end_of_isdigit 5CA0                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 5E64  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5D16                       __end_ofi2_getRTC 5344  
                  _log_count_pop_w_tab 00F4                                  status 000FD8  
                          readCOND@res 0084                     __size_ofi2___awmod 0070  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2862                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 59E2  
                          Loading@addr 00B3                       _count_can_no_lab 0125  
                 printSortTimer@i_1168 0047                   __size_of_EEPROM_read 0018  
                      __initialization 56B6                         readIR@ana_port 0082  
                         __end_of_Test 455C                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4A96                           __end_of_keys FAC0  
                         __end_of_sort 5D82                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 3F1A                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003                                 ID@res1 00AA  
                               ID@res2 00AC             __size_of_updateServoStates 01C8  
                               ID@time 00A9             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0088                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC1F                                 STR_101 FC30  
                               STR_110 FCA7                                 STR_102 FB75  
                               STR_103 FE2D                                 STR_111 FAF7  
                               STR_120 FE6D                                 STR_112 FBDB  
                               STR_104 FBA8                                 STR_113 FC0E  
                               STR_105 FB86                                 STR_121 FB2D  
                               STR_106 FBA8                                 STR_114 FC0E  
                               STR_122 FE6D                                 _ADRESH 000FC4  
                               STR_123 FE6D                                 STR_107 FEB8  
                               STR_115 FBFD                                 STR_116 FC0E  
                               STR_108 FE9A                                 STR_124 FBEC  
                               _EEADRH 000FAA                                 STR_117 FBFD  
                               STR_109 FE8B                                 STR_125 FC96  
                               STR_126 FAF7                                 STR_118 FB1B  
                               _ADRESL 000FC3                                 STR_127 FB3F  
                               STR_119 FB09                                 STR_128 FFB5  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                     __end_of___awtoft 5826                                 ?_putch 0001  
                     __end_of___ftpack 4456                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 5A42  
            i2_change_state_to_menu_22 5A12                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1071 3C56                                 i2l1080 3CFA  
                               i2l1082 3D16                                 i2l1163 5E36  
                               i2l1536 26CE                                 i2l7100 251C  
                               i2l7110 2554                                 i2l1983 56AC  
                               i2l7200 27A6                                 i2l7104 2522  
                               i2l1993 585E                                 i2l7130 25EC  
                               i2l7212 27D8                                 i2l7140 2646  
                               i2l7070 531A                                 i2l7222 283E  
                               i2l7206 27BC                                 i2l7142 2658  
                               i2l7126 25DE                                 i2l7118 25B6  
                               i2l7230 59C2                                 i2l7208 27C4  
                               i2l7216 27EA                                 i2l7136 2636  
                               i2l7128 25E8                                 i2l7152 2698  
                               i2l7224 2846                                 i2l7066 530A  
                               i2l7218 27F0                                 i2l7170 2718  
                               i2l7146 2682                                 i2l7138 2640  
                               i2l7410 42FE                                 i2l7076 5334  
                               i2l7164 26FC                                 i2l7148 2694  
                               i2l7228 59BA                                 i2l7182 274A  
                               i2l7094 24FE                                 i2l7406 42EE  
                               i2l7192 2788                                 i2l7168 2714  
                               i2l7194 2790                                 i2l7098 250E  
                               i2l7418 4332                                 i2l6724 5D36  
                               i2l7188 2764                                 i2l7700 38D0  
                               i2l9400 5372                                 i2l6760 5682  
                               i2l7800 39F8                                 i2l7704 38E6  
                               i2l9402 537A                                 i2l6770 56A2  
                               i2l6762 5686                                 i2l7802 39FE  
                               i2l7810 3A10                                 i2l7706 3940  
                               i2l9404 537E                                 i2l9412 539C  
                               i2l6780 583C                                 i2l6748 5DBA  
                               i2l7804 3A04                                 i2l6758 567A  
                               i2l6782 5840                                 i2l7830 3A6C  
                               i2l7822 3A54                                 i2l7806 3A0A  
                               i2l9416 53AA                                 i2l9408 5392  
                               i2l7840 3A96                                 i2l7680 37F4  
                               i2l7672 3772                                 i2l6786 5854  
                               i2l6778 5834                                 i2l7850 3AB4  
                               i2l7690 3862                                 i2l7682 380A  
                               i2l9370 5468                                 i2l7852 3AB8  
                               i2l7836 3A7A                                 i2l7692 3878  
                               i2l7684 3820                                 i2l9364 543E  
                               i2l9382 5DF2                                 i2l7870 3AE8  
                               i2l7846 3AA0                                 i2l7782 39BA  
                               i2l7774 39A0                                 i2l7694 388E  
                               i2l7686 3836                                 i2l7678 37DE  
                               i2l9392 5358                                 i2l7864 3ADA  
                               i2l7856 3AC2                                 i2l7784 39CA  
                               i2l7792 39D8                                 i2l7696 38A4  
                               i2l7688 384C                                 i2l9378 5DE2  
                               i2l7882 3B1E                                 i2l7874 3AFA  
                               i2l7786 39CE                                 i2l7698 38BA  
                               i2l9810 34F4                                 i2l9802 34D8  
                               i2l9396 5364                                 i2l7796 39EC  
                               i2l7892 3B3A                                 i2l7886 3B30  
                               i2l7878 3B0C                                 i2l7798 39F2  
                               i2l9910 3666                                 i2l9902 364A  
                               i2l9830 352E                                 i2l9822 3510  
                               i2l9806 34E6                                 i2l9930 36B4  
                               i2l9922 3698                                 i2l9914 3674  
                               i2l9906 3658                                 i2l9850 3574  
                               i2l9842 3558                                 i2l9834 353C  
                               i2l9826 351E                                 i2l9818 3502  
                               i2l9940 36D8                                 i2l9934 36CA  
                               i2l9926 36A6                                 i2l9918 368A  
                               i2l9870 35CA                                 i2l9862 35A6  
                               i2l9854 358A                                 i2l9846 3566  
                               i2l9838 354A                                 i2l9792 34B6  
                               i2l9890 3618                                 i2l9882 35F4  
                               i2l9874 35D8                                 i2l9866 35B4  
                               i2l9858 3598                                 i2l9794 34BC  
                               i2l9894 3626                                 i2l9886 360A  
                               i2l9878 35E6                                 i2l9798 34CA  
                               i2l9898 3634                _f_most_recent_sort_time 0139  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 5CC8                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5D60  
                               ___ftge 4A96                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4824  
                               ___wmul 5948                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 597E  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                     __end_of_readCOND 5750                                 _getRTC 4FD8  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5DA4                                 _initUI 59E2  
                               _readIR 4E24                                 _logRun 40E0  
                               getIR@i 008B                                 clear_0 56DC  
                               clear_1 56E8                                 clear_2 56F4  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 4EBC                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1CCE  
                            ??_handler 004B                __size_of_initGlobalVars 00D4  
                         ?_retrieveLog 0007                                 _strcpy 5912  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5CF0  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5CC8  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___awmod 53B4                      __end_ofi2___lwdiv 56B6  
                     __end_of_printRTC 3486                           __mediumconst FAAE  
                    __end_ofi2___lwmod 5868                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F2                         i2___awmod@sign 0006  
                __end_of_algorithmTest 48FA                      __end_ofi2_lcdInst 5E9C  
                    __end_ofi2_isdigit 5DC2                             __accesstop 0080  
              __end_of__initialization 56FA                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0147                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 5E28                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                _agitator_toggle_count 0123                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5EB0  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 5164  
                          i2printRTC@i 0041                          _initSortTimer 4CD8  
          __end_of_updateServoPosition 51E2                          __end_of_putch 5E74  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 173A                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5C4A  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 5C1E  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 008A                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0129                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 5488                           _EEPROM_write 465A  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
                              UI@F3250 014D               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 50E2                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1141 009E  
                              _ID$1154 00A0                                _ID$1149 009F  
                         ?i2_lcdNibble 0001                                UI@i_413 00C9  
                              UI@i_440 00CF                                UI@i_416 00CA  
                              UI@i_417 00CB                                UI@i_451 00D4  
                              UI@i_443 00D0                                UI@i_435 00CC  
                              UI@i_452 00D5                                UI@i_444 00D1  
                              UI@i_436 00CD                                UI@i_447 00D2  
                              UI@i_439 00CE                                UI@i_448 00D3  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0082                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2432 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10120 286E  
                              i2l10130 28D8                                i2l10210 3D86  
                              i2l10124 287E                                i2l10212 3D90  
                              i2l10142 29A6                                i2l10302 587E  
                              i2l10206 3D70                                i2l10240 3E46  
                              i2l10224 3DBC                                i2l10232 3DDA  
                              i2l10226 3DD0                                i2l10218 3DA6  
                              i2l10234 3E24                                i2l10410 3C70  
                              i2l10156 29F6                                i2l10164 2A2C  
                              i2l10252 3E92                                i2l10236 3E2E  
                              i2l10246 3E6C                                i2l10184 2B04  
                              i2l10432 3CAE                                i2l10416 3C7E  
                              i2l10360 3BD8                                i2l10186 2B0A  
                              i2l10178 2A9E                                i2l10266 3EE8  
                              i2l10442 3CCE                                i2l10370 3C04  
                              i2l10364 3BE4                                i2l10438 3CC8  
                              i2l10358 3BD4                                i2l10374 3C0E  
                              i2l10296 5872                                i2l10464 3D14  
                              i2l10368 3BEC                                i2l10298 5878  
                              i2l10388 3C2A                                i2l10910 3DFE  
                              i2l10920 3F10                                i2l10912 3E08  
                              i2l10914 3E12                                i2l10932 3A28  
                              i2l10924 36F6                                i2l10916 3E1C  
                              i2l10934 3A44                                i2l10926 3718  
                              i2l10918 3F00                                i2l10928 3734  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00E4                              ?_readCOND 0001  
                           _initEEPROM 5E12                                i2_putch 5E84  
                            ?_initTime 0080                        _f_loadingNewCan 00EC  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 5420  
                              _Loading 173A            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 4B5E  
                              ___awmod 4D82                             _initServos 51E2  
                              ___lldiv 4C1C                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 525A  
                              ___lwmod 54EC                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 0098                                __pcinit 56B6  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 48FA                                _lcdInst 5E74  
                              _handler 0008                                __ptext0 49CE  
                              __ptext1 5D60                                __ptext2 173A  
                              __ptext3 4CD8                                __ptext4 48FA  
                              __ptext5 597E                                __ptext6 50E2  
                              __ptext7 1192                                __ptext8 4E24  
                              __ptext9 5704                        __size_of_printf 0438  
                              _readADC 5C4A                        __size_of_strcpy 0036  
                              _initLCD 579C                                _cur_can 012D  
                              _loadRTC 4F4C                                _readMAG 5750  
                              _dpowers FAC0                     actuatorTest@i_1752 00AE  
                   actuatorTest@i_1761 00B4                     actuatorTest@i_1753 00AF  
                   actuatorTest@i_1745 00AD                     actuatorTest@i_1762 00B5  
                   actuatorTest@i_1771 00BA                     actuatorTest@i_1755 00B0  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00BB  
                   actuatorTest@i_1764 00B6                     actuatorTest@i_1756 00B1  
                   actuatorTest@i_1781 00C0                     actuatorTest@i_1765 00B7  
                   actuatorTest@i_1782 00C1                     actuatorTest@i_1774 00BC  
                   actuatorTest@i_1758 00B2                     actuatorTest@i_1775 00BD  
                   actuatorTest@i_1767 00B8                     actuatorTest@i_1759 00B3  
                   actuatorTest@i_1784 00C2                     actuatorTest@i_1768 00B9  
                   actuatorTest@i_1785 00C3                     actuatorTest@i_1777 00BE  
                   actuatorTest@i_1778 00BF                                _isdigit 5C76  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0126                     _motor_toggle_count 0149  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 4742                         __pintcode_body 3B68  
                 PlatformTest@res_1797 00AF                   end_of_initialization 56FA  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3B68                    i2___wmul@multiplier 0001  
                            i2u1003_40 2AC4                              i2u1004_48 2AC6  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 0090  
                            i2u1190_47 562E                              i2u1191_47 5650  
                            i2u1192_47 565A                              i2u1193_47 5DEA  
                            i2u1188_47 39C0                              i2u1189_47 5624  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 5DFA  
               __end_of_initGlobalVars 49CE                             _sensorTest 2EBE  
                           _servoTimes 005B                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3B68  
                         ??_BothServos 00AB                  __end_of_machineConfig 54EC  
                 __end_of_PlatformTest 2EBE                             _updateMenu 3486  
                    i2_I2C_Master_Read 5D16                              _IR_signal 00E0  
                    i2_I2C_Master_Wait 5E52                      i2_I2C_Master_Stop 5EC8  
                            i2___awmod 5344                      i2___lwdiv@divisor 0008  
                      _log_count_total 0145                         _PortTestPusher 55AE  
                            i2___lwdiv 5664                              i2___lwmod 5826  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 397C  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 5E90                          Loading@i_1125 00B6  
                        Loading@i_1134 00B8                          Loading@i_1136 00BA  
                        Loading@i_1137 00BC                          Loading@i_1139 00BE  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5DA4                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 24F4                    __end_of_EEPROM_read 5E12  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 4B5E                         __end_of___wmul 597E  
                       __end_of_getMAG 59B0                         __end_of_getRTC 505E  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5A12                         __end_of_readIR 4EBC  
                       __end_of_logRun 4224                       i2___wmul@product 0005  
                       __end_of_printf 2106                           i2printf@flag 0026  
                       __end_of_strcpy 5948              __end_ofi2_I2C_Master_Read 5D3C  
            __end_ofi2_I2C_Master_Wait 5E64                           i2printf@prec 001D  
                  start_initialization 56B6              __end_ofi2_I2C_Master_Stop 5ED0  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0127            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 560A  
                          __end_of_arm 465A                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1413 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___awmod 0001  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 505E                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 014D                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0084  
                             ??_logRun 00B1                               ID@i_1153 00A5  
                             ID@i_1155 00A7                               ID@i_1156 00B2  
                             ID@i_1148 00A3                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                 __size_of_BlockerTest 01C6                    _printSortTimer$2572 0043  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 0346  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2070 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 012B  
                    __size_of_readCOND 004C                            _EEPROM_read 5DFA  
                     _I2C_Master_Start 5EC0                     __end_of_PortTestDC 4F4C  
                            _f_lastCan 00EA                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5E9C  
                    __size_of_initTime 0022                  i2_updateServoPosition 5420  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAAE                              _lcdNibble 53B4  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 5E52                              __ptext101 5DDE  
                            __ptext102 5344                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013D                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0082  
                          ??i2___awmod 0005                          _algorithmTest 4824  
                          ??i2___lwdiv 000A                            _COND_signal 00DE  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 05A8                              getIR@port 0088  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5ED8             __end_ofi2_I2C_Master_Write 5EB0  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 397C                            ??i2_isdigit 0001  
                         _PlatformTest 2BA8                           BlockerTest@i 00AD  
                             i2u530_40 5D34                               _PIR2bits 000FA1  
                      PlatformTest@res 00AD                               i2u652_40 37D4  
                             i2u595_40 261A                               i2u595_47 2610  
                             i2u599_40 267A                               i2u599_47 2670  
                             i2u993_40 2A00                    __size_of_updateMenu 02C0  
                       _log_completion 00F0                               i2u995_40 2A28  
                             i2u994_48 2A02                               i2u997_40 2A52  
                             i2u989_40 29BC                       __CFG_WDTPS$32768 000000  
                             i2u999_40 2A78                               i2u998_48 2A54  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5CF0                          lcdNibble@data 0081  
                             i2_getRTC 52D2                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C0  
                             Loading@j 00C2                               i2_printf 24F4  
                             i2_strcpy 59B0                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 56CA  
                   i2___awmod@dividend 0001                           ??_initEEPROM 00B1  
                            readIR@res 0086                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5E3E                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 0594  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4D82                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 5AA2             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 58DA             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 58A2                _change_state_to_menu_23 5A72  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 5B92  
              _change_state_to_logs_12 5B62                _change_state_to_logs_22 5B32  
              _change_state_to_logs_23 5BF0                _change_state_to_logs_33 5B02  
              _change_state_to_logs_34 5AD2                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 57E2  
                             ___ftpack 434A                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3D4A  
                   __end_of_initEEPROM 5E28                        _I2C_Master_Init 554E  
                     __size_of_readADC 002C                        _I2C_Master_Read 5BC2  
                     __size_of_initLCD 0046                           _f_ID_receive 0131  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 5E3E                        _I2C_Master_Stop 5EB8  
                     __size_of_isdigit 002A                               _delay_ms 5CA0  
                       _printSortTimer 2862                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 434A  
                             __ptext10 5CA0                               __ptext11 4A96  
                             __ptext20 4C1C                               __ptext12 57E2  
                             __ptext21 5C1E                               __ptext13 434A  
                             __ptext30 4FD8                               __ptext22 5D82  
                             __ptext14 4742                               __ptext31 5E9C  
                             __ptext23 579C                               __ptext15 5488  
                             __ptext40 4456                               __ptext32 5EB8  
                             __ptext24 5E12                               __ptext16 40E0  
                             __ptext41 2EBE                               __ptext33 5EC0  
                             __ptext25 465A                               __ptext17 59E2  
                             __ptext50 2106                               __ptext42 5750  
                             __ptext34 5BC2                               __ptext26 5DFA  
                             __ptext18 4F4C                               __ptext51 5DC2  
                             __ptext43 455C                               __ptext35 5E3E  
                             __ptext27 0012                               __ptext19 554E  
                             __ptext60 54EC                               __ptext52 51E2  
                             __ptext44 4824                               __ptext36 58A2  
                             __ptext28 31BC                               __ptext61 525A  
                             __ptext53 5164                               __ptext45 08DA  
                             __ptext37 58DA                               __ptext29 5912  
                             __ptext70 59B0                               __ptext62 5E74  
                             __ptext54 3F1A                               __ptext46 505E  
                             __ptext38 4D82                               __ptext71 397C  
                             __ptext63 53B4                               __ptext55 5C4A  
                             __ptext47 55AE                               __ptext39 4B5E  
                             __ptext80 5B62                               __ptext72 5A12  
                             __ptext56 1CCE                               __ptext48 4EBC  
                             __ptext81 5B92                               __ptext73 5A42  
                             __ptext65 3D52                               __ptext57 5E64  
                             __ptext49 2BA8                               __ptext90 5CF0  
                             __ptext82 5D3C                               __ptext74 5A72  
                             __ptext66 5420                               __ptext58 5C76  
                             __ptext91 5826                               __ptext83 4224  
                             __ptext75 5AA2                               __ptext67 3486  
                             __ptext59 5948                               __ptext92 5664  
                             __ptext84 5E28                               __ptext76 5AD2  
                             __ptext68 5CC8                               __ptext93 5E90  
                             __ptext85 5868                               __ptext77 5B02  
                             __ptext69 3746                               __ptext94 560A  
                             __ptext86 2862                               __ptext78 5BF0  
                             __ptext95 52D2                               __ptext87 24F4  
                             __ptext79 5B32                               __ptext96 5EA6  
                             __ptext88 5E84                               __ptext97 5EC8  
                             __ptext89 5DA4                               __ptext98 5ED0  
                             __ptext99 5D16                               _dispLogs 5D3C  
                        ?_actuatorTest 0001                     PlatformTest@i_1801 00B3  
                             _readCOND 5704                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2070 0002  
                   __end_of_initServos 525A                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5D82  
                        __size_of_main 00C8                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 5164                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 31BC  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 0133  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 5A72      __end_ofi2_change_state_to_menu_22 5A42  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
                    i2___awmod@divisor 0003                 __end_of_printSortTimer 2BA8  
                            putch@data 0082                      i2___awmod@counter 0005  
             __end_of_I2C_Master_Start 5EC8                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5EA6                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E2  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                       BlockerTest@res 00AF                     __end_of_sensorTest 31BC  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5DDE  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 3746                __end_of_I2C_Master_Init 55AE  
              __end_of_I2C_Master_Read 5BF0                __end_of_I2C_Master_Wait 5E52  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5EC0  
                          lcdInst@data 0082                          printRTC@F3240 0151  
                         retrieveLog@i 000E                            _retrieveLog 4224  
                  __end_ofi2_lcdNibble 5664                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 5868  
                    _f_can_distributed 0137                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 5488  
                      ___lwmod@counter 008B                      _updateServoStates 3D52  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00E8  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
