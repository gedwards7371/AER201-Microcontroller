

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 04 12:57:03 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   104                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   105                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   106  0000                     
   107                           ; Version 1.40
   108                           ; Generated 01/12/2016 GMT
   109                           ; 
   110                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   111                           ; All rights reserved.
   112                           ; 
   113                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   114                           ; 
   115                           ; Redistribution and use in source and binary forms, with or without modification, are
   116                           ; permitted provided that the following conditions are met:
   117                           ; 
   118                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   119                           ;        conditions and the following disclaimer.
   120                           ; 
   121                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   122                           ;        of conditions and the following disclaimer in the documentation and/or other
   123                           ;        materials provided with the distribution.
   124                           ; 
   125                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   126                           ;        software without specific prior written permission.
   127                           ; 
   128                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   129                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   130                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   131                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   132                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   133                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   134                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   135                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   136                           ; 
   137                           ; 
   138                           ; Code-generator required, PIC18F4620 Definitions
   139                           ; 
   140                           ; SFR Addresses
   141  0000                     
   142                           	psect	idataBANK1
   143  004108                     __pidataBANK1:
   144                           	opt stack 0
   145                           
   146                           ;initializer for UI@F3220
   147  004108  4D                 	db	77
   148  004109  4D                 	db	77
   149  00410A  4D                 	db	77
   150  00410B  00                 	db	0
   151                           
   152                           ;initializer for printRTC@F3211
   153  00410C  4D                 	db	77
   154  00410D  4D                 	db	77
   155  00410E  4D                 	db	77
   156  00410F  00                 	db	0
   157                           
   158                           	psect	mediumconst
   159  00FB4E                     __pmediumconst:
   160                           	opt stack 0
   161  00FB4E  00                 	db	0
   162  00FB4F                     _keys:
   163                           	opt stack 0
   164  00FB4F  31                 	db	49
   165  00FB50  32                 	db	50
   166  00FB51  33                 	db	51
   167  00FB52  41                 	db	65
   168  00FB53  34                 	db	52
   169  00FB54  35                 	db	53
   170  00FB55  36                 	db	54
   171  00FB56  42                 	db	66
   172  00FB57  37                 	db	55
   173  00FB58  38                 	db	56
   174  00FB59  39                 	db	57
   175  00FB5A  43                 	db	67
   176  00FB5B  2A                 	db	42
   177  00FB5C  30                 	db	48
   178  00FB5D  23                 	db	35
   179  00FB5E  44                 	db	68
   180  00FB5F  00                 	db	0
   181  00FB60                     __end_of_keys:
   182                           	opt stack 0
   183  00FB60                     _dpowers:
   184                           	opt stack 0
   185  00FB60  0001               	dw	1
   186  00FB62  000A               	dw	10
   187  00FB64  0064               	dw	100
   188  00FB66  03E8               	dw	1000
   189  00FB68  2710               	dw	10000
   190  00FB6A                     __end_of_dpowers:
   191                           	opt stack 0
   192  0000                     _ADCON0	set	4034
   193  0000                     _ADCON0bits	set	4034
   194  0000                     _ADCON1	set	4033
   195  0000                     _ADCON2	set	4032
   196  0000                     _ADRESH	set	4036
   197  0000                     _ADRESL	set	4035
   198  0000                     _CMCONbits	set	4020
   199  0000                     _CVRCON	set	4021
   200  0000                     _EEADR	set	4009
   201  0000                     _EEADRH	set	4010
   202  0000                     _EECON1bits	set	4006
   203  0000                     _EECON2	set	4007
   204  0000                     _EEDATA	set	4008
   205  0000                     _INTCONbits	set	4082
   206  0000                     _LATA	set	3977
   207  0000                     _LATAbits	set	3977
   208  0000                     _LATB	set	3978
   209  0000                     _LATC	set	3979
   210  0000                     _LATCbits	set	3979
   211  0000                     _LATD	set	3980
   212  0000                     _LATDbits	set	3980
   213  0000                     _LATE	set	3981
   214  0000                     _LATEbits	set	3981
   215  0000                     _OSCCON	set	4051
   216  0000                     _OSCTUNEbits	set	3995
   217  0000                     _PIR2bits	set	4001
   218  0000                     _PORTAbits	set	3968
   219  0000                     _PORTB	set	3969
   220  0000                     _PORTBbits	set	3969
   221  0000                     _SSPADD	set	4040
   222  0000                     _SSPBUF	set	4041
   223  0000                     _SSPCON1	set	4038
   224  0000                     _SSPCON2	set	4037
   225  0000                     _SSPSTAT	set	4039
   226  0000                     _T0CON	set	4053
   227  0000                     _T1CON	set	4045
   228  0000                     _TMR0H	set	4055
   229  0000                     _TMR0L	set	4054
   230  0000                     _TMR1H	set	4047
   231  0000                     _TMR1L	set	4046
   232  0000                     _TMR3H	set	4019
   233  0000                     _TMR3L	set	4018
   234  0000                     _TRISA	set	3986
   235  0000                     _TRISB	set	3987
   236  0000                     _TRISC	set	3988
   237  0000                     _TRISD	set	3989
   238  0000                     _TRISE	set	3990
   239  0000                     _ACKDT	set	32301
   240  0000                     _ACKEN	set	32300
   241  0000                     _ADIE	set	31982
   242  0000                     _INT1IE	set	32643
   243  0000                     _INT1IF	set	32640
   244  0000                     _PEIE	set	32662
   245  0000                     _PEN	set	32298
   246  0000                     _RCEN	set	32299
   247  0000                     _RSEN	set	32297
   248  0000                     _SEN	set	32296
   249  0000                     _TMR0IE	set	32661
   250  0000                     _TMR0IF	set	32658
   251  0000                     _TMR0ON	set	32431
   252  0000                     _TMR1IE	set	31976
   253  0000                     _TMR1IF	set	31984
   254  0000                     _TMR1ON	set	32360
   255  0000                     _TMR2IE	set	31977
   256  0000                     _TMR3IE	set	32001
   257  0000                     _TMR3IF	set	32009
   258  0000                     _TMR3ON	set	32136
   259  0000                     _TRISC3	set	31907
   260  0000                     _TRISC4	set	31908
   261  0000                     _nRBPU	set	32655
   262  00FB6A                     STR_21:
   263  00FB6A  25                 	db	37
   264  00FB6B  30                 	db	48	;'0'
   265  00FB6C  32                 	db	50	;'2'
   266  00FB6D  64                 	db	100	;'d'
   267  00FB6E  25                 	db	37
   268  00FB6F  73                 	db	115	;'s'
   269  00FB70  20                 	db	32
   270  00FB71  7C                 	db	124
   271  00FB72  20                 	db	32
   272  00FB73  25                 	db	37
   273  00FB74  30                 	db	48	;'0'
   274  00FB75  32                 	db	50	;'2'
   275  00FB76  64                 	db	100	;'d'
   276  00FB77  3A                 	db	58	;':'
   277  00FB78  25                 	db	37
   278  00FB79  30                 	db	48	;'0'
   279  00FB7A  32                 	db	50	;'2'
   280  00FB7B  64                 	db	100	;'d'
   281  00FB7C  3A                 	db	58	;':'
   282  00FB7D  25                 	db	37
   283  00FB7E  30                 	db	48	;'0'
   284  00FB7F  32                 	db	50	;'2'
   285  00FB80  64                 	db	100	;'d'
   286  00FB81  00                 	db	0
   287  00FB82                     STR_66:
   288  00FB82  28                 	db	40
   289  00FB83  64                 	db	100	;'d'
   290  00FB84  61                 	db	97	;'a'
   291  00FB85  74                 	db	116	;'t'
   292  00FB86  61                 	db	97	;'a'
   293  00FB87  3A                 	db	58	;':'
   294  00FB88  20                 	db	32
   295  00FB89  25                 	db	37
   296  00FB8A  75                 	db	117	;'u'
   297  00FB8B  2C                 	db	44
   298  00FB8C  20                 	db	32
   299  00FB8D  61                 	db	97	;'a'
   300  00FB8E  64                 	db	100	;'d'
   301  00FB8F  64                 	db	100	;'d'
   302  00FB90  72                 	db	114	;'r'
   303  00FB91  3A                 	db	58	;':'
   304  00FB92  20                 	db	32
   305  00FB93  25                 	db	37
   306  00FB94  75                 	db	117	;'u'
   307  00FB95  29                 	db	41
   308  00FB96  00                 	db	0
   309  00FB97                     STR_27:
   310  00FB97  4E                 	db	78	;'N'
   311  00FB98  4F                 	db	79	;'O'
   312  00FB99  20                 	db	32
   313  00FB9A  4C                 	db	76	;'L'
   314  00FB9B  41                 	db	65	;'A'
   315  00FB9C  42                 	db	66	;'B'
   316  00FB9D  3A                 	db	58	;':'
   317  00FB9E  20                 	db	32
   318  00FB9F  25                 	db	37
   319  00FBA0  64                 	db	100	;'d'
   320  00FBA1  7C                 	db	124
   321  00FBA2  4C                 	db	76	;'L'
   322  00FBA3  41                 	db	65	;'A'
   323  00FBA4  42                 	db	66	;'B'
   324  00FBA5  3A                 	db	58	;':'
   325  00FBA6  20                 	db	32
   326  00FBA7  25                 	db	37
   327  00FBA8  64                 	db	100	;'d'
   328  00FBA9  00                 	db	0
   329  00FBAA                     STR_25:
   330  00FBAA  4E                 	db	78	;'N'
   331  00FBAB  4F                 	db	79	;'O'
   332  00FBAC  20                 	db	32
   333  00FBAD  54                 	db	84	;'T'
   334  00FBAE  41                 	db	65	;'A'
   335  00FBAF  42                 	db	66	;'B'
   336  00FBB0  3A                 	db	58	;':'
   337  00FBB1  20                 	db	32
   338  00FBB2  25                 	db	37
   339  00FBB3  64                 	db	100	;'d'
   340  00FBB4  7C                 	db	124
   341  00FBB5  54                 	db	84	;'T'
   342  00FBB6  41                 	db	65	;'A'
   343  00FBB7  42                 	db	66	;'B'
   344  00FBB8  3A                 	db	58	;':'
   345  00FBB9  20                 	db	32
   346  00FBBA  25                 	db	37
   347  00FBBB  64                 	db	100	;'d'
   348  00FBBC  00                 	db	0
   349  00FBBD                     STR_105:
   350  00FBBD  44                 	db	68	;'D'
   351  00FBBE  20                 	db	32
   352  00FBBF  57                 	db	87	;'W'
   353  00FBC0  49                 	db	73	;'I'
   354  00FBC1  4C                 	db	76	;'L'
   355  00FBC2  4C                 	db	76	;'L'
   356  00FBC3  20                 	db	32
   357  00FBC4  52                 	db	82	;'R'
   358  00FBC5  45                 	db	69	;'E'
   359  00FBC6  54                 	db	84	;'T'
   360  00FBC7  55                 	db	85	;'U'
   361  00FBC8  52                 	db	82	;'R'
   362  00FBC9  4E                 	db	78	;'N'
   363  00FBCA  20                 	db	32
   364  00FBCB  20                 	db	32
   365  00FBCC  20                 	db	32
   366  00FBCD  20                 	db	32
   367  00FBCE  00                 	db	0
   368  00FBCF                     STR_106:
   369  00FBCF  4F                 	db	79	;'O'
   370  00FBD0  54                 	db	84	;'T'
   371  00FBD1  48                 	db	72	;'H'
   372  00FBD2  45                 	db	69	;'E'
   373  00FBD3  52                 	db	82	;'R'
   374  00FBD4  20                 	db	32
   375  00FBD5  53                 	db	83	;'S'
   376  00FBD6  45                 	db	69	;'E'
   377  00FBD7  54                 	db	84	;'T'
   378  00FBD8  53                 	db	83	;'S'
   379  00FBD9  20                 	db	32
   380  00FBDA  52                 	db	82	;'R'
   381  00FBDB  41                 	db	65	;'A'
   382  00FBDC  35                 	db	53	;'5'
   383  00FBDD  20                 	db	32
   384  00FBDE  20                 	db	32
   385  00FBDF  20                 	db	32
   386  00FBE0  00                 	db	0
   387  00FBE1                     STR_3:
   388  00FBE1  2D                 	db	45
   389  00FBE2  2D                 	db	45
   390  00FBE3  20                 	db	32
   391  00FBE4  4C                 	db	76	;'L'
   392  00FBE5  4F                 	db	79	;'O'
   393  00FBE6  47                 	db	71	;'G'
   394  00FBE7  20                 	db	32
   395  00FBE8  25                 	db	37
   396  00FBE9  32                 	db	50	;'2'
   397  00FBEA  64                 	db	100	;'d'
   398  00FBEB  20                 	db	32
   399  00FBEC  48                 	db	72	;'H'
   400  00FBED  45                 	db	69	;'E'
   401  00FBEE  52                 	db	82	;'R'
   402  00FBEF  45                 	db	69	;'E'
   403  00FBF0  2D                 	db	45
   404  00FBF1  2D                 	db	45
   405  00FBF2  00                 	db	0
   406  00FBF3                     STR_1:
   407  00FBF3  52                 	db	82	;'R'
   408  00FBF4  45                 	db	69	;'E'
   409  00FBF5  53                 	db	83	;'S'
   410  00FBF6  55                 	db	85	;'U'
   411  00FBF7  4C                 	db	76	;'L'
   412  00FBF8  54                 	db	84	;'T'
   413  00FBF9  53                 	db	83	;'S'
   414  00FBFA  20                 	db	32
   415  00FBFB  49                 	db	73	;'I'
   416  00FBFC  4E                 	db	78	;'N'
   417  00FBFD  20                 	db	32
   418  00FBFE  4C                 	db	76	;'L'
   419  00FBFF  4F                 	db	79	;'O'
   420  00FC00  47                 	db	71	;'G'
   421  00FC01  20                 	db	32
   422  00FC02  25                 	db	37
   423  00FC03  64                 	db	100	;'d'
   424  00FC04  00                 	db	0
   425  00FC05                     STR_97:
   426  00FC05  4D                 	db	77	;'M'
   427  00FC06  49                 	db	73	;'I'
   428  00FC07  44                 	db	68	;'D'
   429  00FC08  20                 	db	32
   430  00FC09  2D                 	db	45
   431  00FC0A  2D                 	db	45
   432  00FC0B  20                 	db	32
   433  00FC0C  32                 	db	50	;'2'
   434  00FC0D  73                 	db	115	;'s'
   435  00FC0E  20                 	db	32
   436  00FC0F  20                 	db	32
   437  00FC10  20                 	db	32
   438  00FC11  20                 	db	32
   439  00FC12  20                 	db	32
   440  00FC13  20                 	db	32
   441  00FC14  20                 	db	32
   442  00FC15  00                 	db	0
   443  00FC16                     STR_100:
   444  00FC16  44                 	db	68	;'D'
   445  00FC17  52                 	db	82	;'R'
   446  00FC18  4F                 	db	79	;'O'
   447  00FC19  50                 	db	80	;'P'
   448  00FC1A  20                 	db	32
   449  00FC1B  2D                 	db	45
   450  00FC1C  2D                 	db	45
   451  00FC1D  20                 	db	32
   452  00FC1E  32                 	db	50	;'2'
   453  00FC1F  73                 	db	115	;'s'
   454  00FC20  20                 	db	32
   455  00FC21  20                 	db	32
   456  00FC22  20                 	db	32
   457  00FC23  20                 	db	32
   458  00FC24  20                 	db	32
   459  00FC25  20                 	db	32
   460  00FC26  00                 	db	0
   461  00FC27                     STR_94:
   462  00FC27  4C                 	db	76	;'L'
   463  00FC28  45                 	db	69	;'E'
   464  00FC29  46                 	db	70	;'F'
   465  00FC2A  54                 	db	84	;'T'
   466  00FC2B  20                 	db	32
   467  00FC2C  2D                 	db	45
   468  00FC2D  2D                 	db	45
   469  00FC2E  20                 	db	32
   470  00FC2F  32                 	db	50	;'2'
   471  00FC30  73                 	db	115	;'s'
   472  00FC31  20                 	db	32
   473  00FC32  20                 	db	32
   474  00FC33  20                 	db	32
   475  00FC34  20                 	db	32
   476  00FC35  20                 	db	32
   477  00FC36  20                 	db	32
   478  00FC37  00                 	db	0
   479  00FC38                     STR_99:
   480  00FC38  4C                 	db	76	;'L'
   481  00FC39  45                 	db	69	;'E'
   482  00FC3A  56                 	db	86	;'V'
   483  00FC3B  45                 	db	69	;'E'
   484  00FC3C  4C                 	db	76	;'L'
   485  00FC3D  20                 	db	32
   486  00FC3E  2D                 	db	45
   487  00FC3F  2D                 	db	45
   488  00FC40  20                 	db	32
   489  00FC41  32                 	db	50	;'2'
   490  00FC42  73                 	db	115	;'s'
   491  00FC43  20                 	db	32
   492  00FC44  20                 	db	32
   493  00FC45  20                 	db	32
   494  00FC46  20                 	db	32
   495  00FC47  20                 	db	32
   496  00FC48  00                 	db	0
   497  00FC49                     STR_93:
   498  00FC49  52                 	db	82	;'R'
   499  00FC4A  49                 	db	73	;'I'
   500  00FC4B  47                 	db	71	;'G'
   501  00FC4C  48                 	db	72	;'H'
   502  00FC4D  54                 	db	84	;'T'
   503  00FC4E  20                 	db	32
   504  00FC4F  2D                 	db	45
   505  00FC50  2D                 	db	45
   506  00FC51  20                 	db	32
   507  00FC52  32                 	db	50	;'2'
   508  00FC53  73                 	db	115	;'s'
   509  00FC54  20                 	db	32
   510  00FC55  20                 	db	32
   511  00FC56  20                 	db	32
   512  00FC57  20                 	db	32
   513  00FC58  20                 	db	32
   514  00FC59  00                 	db	0
   515  00FC5A                     STR_92:
   516  00FC5A  4D                 	db	77	;'M'
   517  00FC5B  49                 	db	73	;'I'
   518  00FC5C  44                 	db	68	;'D'
   519  00FC5D  44                 	db	68	;'D'
   520  00FC5E  4C                 	db	76	;'L'
   521  00FC5F  45                 	db	69	;'E'
   522  00FC60  20                 	db	32
   523  00FC61  2D                 	db	45
   524  00FC62  2D                 	db	45
   525  00FC63  20                 	db	32
   526  00FC64  32                 	db	50	;'2'
   527  00FC65  73                 	db	115	;'s'
   528  00FC66  20                 	db	32
   529  00FC67  20                 	db	32
   530  00FC68  20                 	db	32
   531  00FC69  20                 	db	32
   532  00FC6A  00                 	db	0
   533  00FC6B                     STR_107:
   534  00FC6B  44                 	db	68	;'D'
   535  00FC6C  20                 	db	32
   536  00FC6D  57                 	db	87	;'W'
   537  00FC6E  49                 	db	73	;'I'
   538  00FC6F  4C                 	db	76	;'L'
   539  00FC70  4C                 	db	76	;'L'
   540  00FC71  20                 	db	32
   541  00FC72  52                 	db	82	;'R'
   542  00FC73  45                 	db	69	;'E'
   543  00FC74  54                 	db	84	;'T'
   544  00FC75  55                 	db	85	;'U'
   545  00FC76  52                 	db	82	;'R'
   546  00FC77  4E                 	db	78	;'N'
   547  00FC78  20                 	db	32
   548  00FC79  20                 	db	32
   549  00FC7A  20                 	db	32
   550  00FC7B  00                 	db	0
   551  00FC7C                     STR_95:
   552  00FC7C  4D                 	db	77	;'M'
   553  00FC7D  49                 	db	73	;'I'
   554  00FC7E  44                 	db	68	;'D'
   555  00FC7F  2D                 	db	45
   556  00FC80  4C                 	db	76	;'L'
   557  00FC81  45                 	db	69	;'E'
   558  00FC82  46                 	db	70	;'F'
   559  00FC83  54                 	db	84	;'T'
   560  00FC84  20                 	db	32
   561  00FC85  2D                 	db	45
   562  00FC86  2D                 	db	45
   563  00FC87  20                 	db	32
   564  00FC88  32                 	db	50	;'2'
   565  00FC89  73                 	db	115	;'s'
   566  00FC8A  20                 	db	32
   567  00FC8B  20                 	db	32
   568  00FC8C  00                 	db	0
   569  00FC8D                     STR_96:
   570  00FC8D  4D                 	db	77	;'M'
   571  00FC8E  49                 	db	73	;'I'
   572  00FC8F  44                 	db	68	;'D'
   573  00FC90  2D                 	db	45
   574  00FC91  52                 	db	82	;'R'
   575  00FC92  49                 	db	73	;'I'
   576  00FC93  47                 	db	71	;'G'
   577  00FC94  48                 	db	72	;'H'
   578  00FC95  54                 	db	84	;'T'
   579  00FC96  20                 	db	32
   580  00FC97  2D                 	db	45
   581  00FC98  2D                 	db	45
   582  00FC99  20                 	db	32
   583  00FC9A  32                 	db	50	;'2'
   584  00FC9B  73                 	db	115	;'s'
   585  00FC9C  20                 	db	32
   586  00FC9D  00                 	db	0
   587  00FC9E                     STR_108:
   588  00FC9E  45                 	db	69	;'E'
   589  00FC9F  4C                 	db	76	;'L'
   590  00FCA0  53                 	db	83	;'S'
   591  00FCA1  45                 	db	69	;'E'
   592  00FCA2  20                 	db	32
   593  00FCA3  54                 	db	84	;'T'
   594  00FCA4  4F                 	db	79	;'O'
   595  00FCA5  47                 	db	71	;'G'
   596  00FCA6  47                 	db	71	;'G'
   597  00FCA7  4C                 	db	76	;'L'
   598  00FCA8  45                 	db	69	;'E'
   599  00FCA9  53                 	db	83	;'S'
   600  00FCAA  20                 	db	32
   601  00FCAB  52                 	db	82	;'R'
   602  00FCAC  41                 	db	65	;'A'
   603  00FCAD  35                 	db	53	;'5'
   604  00FCAE  00                 	db	0
   605  00FCAF                     STR_72:
   606  00FCAF  41                 	db	65	;'A'
   607  00FCB0  4C                 	db	76	;'L'
   608  00FCB1  47                 	db	71	;'G'
   609  00FCB2  31                 	db	49	;'1'
   610  00FCB3  3A                 	db	58	;':'
   611  00FCB4  20                 	db	32
   612  00FCB5  39                 	db	57	;'9'
   613  00FCB6  20                 	db	32
   614  00FCB7  50                 	db	80	;'P'
   615  00FCB8  4F                 	db	79	;'O'
   616  00FCB9  50                 	db	80	;'P'
   617  00FCBA  4E                 	db	78	;'N'
   618  00FCBB  4F                 	db	79	;'O'
   619  00FCBC  54                 	db	84	;'T'
   620  00FCBD  41                 	db	65	;'A'
   621  00FCBE  42                 	db	66	;'B'
   622  00FCBF  00                 	db	0
   623  00FCC0                     STR_68:
   624  00FCC0  31                 	db	49	;'1'
   625  00FCC1  2E                 	db	46
   626  00FCC2  41                 	db	65	;'A'
   627  00FCC3  4C                 	db	76	;'L'
   628  00FCC4  47                 	db	71	;'G'
   629  00FCC5  7C                 	db	124
   630  00FCC6  32                 	db	50	;'2'
   631  00FCC7  2E                 	db	46
   632  00FCC8  53                 	db	83	;'S'
   633  00FCC9  4E                 	db	78	;'N'
   634  00FCCA  52                 	db	82	;'R'
   635  00FCCB  7C                 	db	124
   636  00FCCC  33                 	db	51	;'3'
   637  00FCCD  2E                 	db	46
   638  00FCCE  41                 	db	65	;'A'
   639  00FCCF  43                 	db	67	;'C'
   640  00FCD0  00                 	db	0
   641  00FCD1                     STR_87:
   642  00FCD1  54                 	db	84	;'T'
   643  00FCD2  53                 	db	83	;'S'
   644  00FCD3  54                 	db	84	;'T'
   645  00FCD4  3A                 	db	58	;':'
   646  00FCD5  20                 	db	32
   647  00FCD6  43                 	db	67	;'C'
   648  00FCD7  4F                 	db	79	;'O'
   649  00FCD8  4E                 	db	78	;'N'
   650  00FCD9  44                 	db	68	;'D'
   651  00FCDA  20                 	db	32
   652  00FCDB  53                 	db	83	;'S'
   653  00FCDC  4F                 	db	79	;'O'
   654  00FCDD  4C                 	db	76	;'L'
   655  00FCDE  4E                 	db	78	;'N'
   656  00FCDF  27                 	db	39
   657  00FCE0  44                 	db	68	;'D'
   658  00FCE1  00                 	db	0
   659  00FCE2                     STR_89:
   660  00FCE2  54                 	db	84	;'T'
   661  00FCE3  53                 	db	83	;'S'
   662  00FCE4  54                 	db	84	;'T'
   663  00FCE5  3A                 	db	58	;':'
   664  00FCE6  20                 	db	32
   665  00FCE7  50                 	db	80	;'P'
   666  00FCE8  55                 	db	85	;'U'
   667  00FCE9  53                 	db	83	;'S'
   668  00FCEA  48                 	db	72	;'H'
   669  00FCEB  20                 	db	32
   670  00FCEC  53                 	db	83	;'S'
   671  00FCED  4F                 	db	79	;'O'
   672  00FCEE  4C                 	db	76	;'L'
   673  00FCEF  4E                 	db	78	;'N'
   674  00FCF0  27                 	db	39
   675  00FCF1  44                 	db	68	;'D'
   676  00FCF2  00                 	db	0
   677  00FCF3                     STR_69:
   678  00FCF3  34                 	db	52	;'4'
   679  00FCF4  2E                 	db	46
   680  00FCF5  48                 	db	72	;'H'
   681  00FCF6  49                 	db	73	;'I'
   682  00FCF7  7C                 	db	124
   683  00FCF8  35                 	db	53	;'5'
   684  00FCF9  2E                 	db	46
   685  00FCFA  54                 	db	84	;'T'
   686  00FCFB  4F                 	db	79	;'O'
   687  00FCFC  47                 	db	71	;'G'
   688  00FCFD  7C                 	db	124
   689  00FCFE  36                 	db	54	;'6'
   690  00FCFF  2E                 	db	46
   691  00FD00  45                 	db	69	;'E'
   692  00FD01  45                 	db	69	;'E'
   693  00FD02  50                 	db	80	;'P'
   694  00FD03  00                 	db	0
   695  00FD04                     STR_41:
   696  00FD04  4C                 	db	76	;'L'
   697  00FD05  4F                 	db	79	;'O'
   698  00FD06  47                 	db	71	;'G'
   699  00FD07  20                 	db	32
   700  00FD08  31                 	db	49	;'1'
   701  00FD09  20                 	db	32
   702  00FD0A  20                 	db	32
   703  00FD0B  20                 	db	32
   704  00FD0C  20                 	db	32
   705  00FD0D  20                 	db	32
   706  00FD0E  20                 	db	32
   707  00FD0F  20                 	db	32
   708  00FD10  20                 	db	32
   709  00FD11  20                 	db	32
   710  00FD12  20                 	db	32
   711  00FD13  20                 	db	32
   712  00FD14  00                 	db	0
   713  00FD15                     STR_40:
   714  00FD15  4C                 	db	76	;'L'
   715  00FD16  4F                 	db	79	;'O'
   716  00FD17  47                 	db	71	;'G'
   717  00FD18  20                 	db	32
   718  00FD19  32                 	db	50	;'2'
   719  00FD1A  20                 	db	32
   720  00FD1B  20                 	db	32
   721  00FD1C  20                 	db	32
   722  00FD1D  20                 	db	32
   723  00FD1E  20                 	db	32
   724  00FD1F  20                 	db	32
   725  00FD20  20                 	db	32
   726  00FD21  20                 	db	32
   727  00FD22  20                 	db	32
   728  00FD23  20                 	db	32
   729  00FD24  20                 	db	32
   730  00FD25  00                 	db	0
   731  00FD26                     STR_44:
   732  00FD26  4C                 	db	76	;'L'
   733  00FD27  4F                 	db	79	;'O'
   734  00FD28  47                 	db	71	;'G'
   735  00FD29  20                 	db	32
   736  00FD2A  33                 	db	51	;'3'
   737  00FD2B  20                 	db	32
   738  00FD2C  20                 	db	32
   739  00FD2D  20                 	db	32
   740  00FD2E  20                 	db	32
   741  00FD2F  20                 	db	32
   742  00FD30  20                 	db	32
   743  00FD31  20                 	db	32
   744  00FD32  20                 	db	32
   745  00FD33  20                 	db	32
   746  00FD34  20                 	db	32
   747  00FD35  20                 	db	32
   748  00FD36  00                 	db	0
   749  00FD37                     STR_48:
   750  00FD37  4C                 	db	76	;'L'
   751  00FD38  4F                 	db	79	;'O'
   752  00FD39  47                 	db	71	;'G'
   753  00FD3A  20                 	db	32
   754  00FD3B  34                 	db	52	;'4'
   755  00FD3C  20                 	db	32
   756  00FD3D  20                 	db	32
   757  00FD3E  20                 	db	32
   758  00FD3F  20                 	db	32
   759  00FD40  20                 	db	32
   760  00FD41  20                 	db	32
   761  00FD42  20                 	db	32
   762  00FD43  20                 	db	32
   763  00FD44  20                 	db	32
   764  00FD45  20                 	db	32
   765  00FD46  20                 	db	32
   766  00FD47  00                 	db	0
   767  00FD48                     STR_36:
   768  00FD48  33                 	db	51	;'3'
   769  00FD49  2E                 	db	46
   770  00FD4A  20                 	db	32
   771  00FD4B  4C                 	db	76	;'L'
   772  00FD4C  4F                 	db	79	;'O'
   773  00FD4D  47                 	db	71	;'G'
   774  00FD4E  53                 	db	83	;'S'
   775  00FD4F  20                 	db	32
   776  00FD50  20                 	db	32
   777  00FD51  20                 	db	32
   778  00FD52  20                 	db	32
   779  00FD53  20                 	db	32
   780  00FD54  20                 	db	32
   781  00FD55  20                 	db	32
   782  00FD56  20                 	db	32
   783  00FD57  20                 	db	32
   784  00FD58  00                 	db	0
   785  00FD59                     STR_32:
   786  00FD59  32                 	db	50	;'2'
   787  00FD5A  2E                 	db	46
   788  00FD5B  20                 	db	32
   789  00FD5C  53                 	db	83	;'S'
   790  00FD5D  4F                 	db	79	;'O'
   791  00FD5E  52                 	db	82	;'R'
   792  00FD5F  54                 	db	84	;'T'
   793  00FD60  20                 	db	32
   794  00FD61  20                 	db	32
   795  00FD62  20                 	db	32
   796  00FD63  20                 	db	32
   797  00FD64  20                 	db	32
   798  00FD65  20                 	db	32
   799  00FD66  20                 	db	32
   800  00FD67  20                 	db	32
   801  00FD68  20                 	db	32
   802  00FD69  00                 	db	0
   803  00FD6A                     STR_33:
   804  00FD6A  31                 	db	49	;'1'
   805  00FD6B  2E                 	db	46
   806  00FD6C  20                 	db	32
   807  00FD6D  44                 	db	68	;'D'
   808  00FD6E  41                 	db	65	;'A'
   809  00FD6F  54                 	db	84	;'T'
   810  00FD70  45                 	db	69	;'E'
   811  00FD71  2F                 	db	47
   812  00FD72  54                 	db	84	;'T'
   813  00FD73  49                 	db	73	;'I'
   814  00FD74  4D                 	db	77	;'M'
   815  00FD75  45                 	db	69	;'E'
   816  00FD76  20                 	db	32
   817  00FD77  20                 	db	32
   818  00FD78  20                 	db	32
   819  00FD79  20                 	db	32
   820  00FD7A  00                 	db	0
   821  00FD7B                     STR_24:
   822  00FD7B  20                 	db	32
   823  00FD7C  2D                 	db	45
   824  00FD7D  2D                 	db	45
   825  00FD7E  20                 	db	32
   826  00FD7F  50                 	db	80	;'P'
   827  00FD80  4F                 	db	79	;'O'
   828  00FD81  50                 	db	80	;'P'
   829  00FD82  20                 	db	32
   830  00FD83  20                 	db	32
   831  00FD84  43                 	db	67	;'C'
   832  00FD85  41                 	db	65	;'A'
   833  00FD86  4E                 	db	78	;'N'
   834  00FD87  20                 	db	32
   835  00FD88  2D                 	db	45
   836  00FD89  2D                 	db	45
   837  00FD8A  20                 	db	32
   838  00FD8B  00                 	db	0
   839  00FD8C                     STR_26:
   840  00FD8C  20                 	db	32
   841  00FD8D  2D                 	db	45
   842  00FD8E  2D                 	db	45
   843  00FD8F  20                 	db	32
   844  00FD90  53                 	db	83	;'S'
   845  00FD91  4F                 	db	79	;'O'
   846  00FD92  55                 	db	85	;'U'
   847  00FD93  50                 	db	80	;'P'
   848  00FD94  20                 	db	32
   849  00FD95  43                 	db	67	;'C'
   850  00FD96  41                 	db	65	;'A'
   851  00FD97  4E                 	db	78	;'N'
   852  00FD98  20                 	db	32
   853  00FD99  2D                 	db	45
   854  00FD9A  2D                 	db	45
   855  00FD9B  20                 	db	32
   856  00FD9C  00                 	db	0
   857  00FD9D                     STR_28:
   858  00FD9D  2D                 	db	45
   859  00FD9E  2D                 	db	45
   860  00FD9F  20                 	db	32
   861  00FDA0  54                 	db	84	;'T'
   862  00FDA1  4F                 	db	79	;'O'
   863  00FDA2  54                 	db	84	;'T'
   864  00FDA3  41                 	db	65	;'A'
   865  00FDA4  4C                 	db	76	;'L'
   866  00FDA5  20                 	db	32
   867  00FDA6  43                 	db	67	;'C'
   868  00FDA7  41                 	db	65	;'A'
   869  00FDA8  4E                 	db	78	;'N'
   870  00FDA9  53                 	db	83	;'S'
   871  00FDAA  20                 	db	32
   872  00FDAB  2D                 	db	45
   873  00FDAC  2D                 	db	45
   874  00FDAD  00                 	db	0
   875  00FDAE                     STR_39:
   876  00FDAE  4C                 	db	76	;'L'
   877  00FDAF  4F                 	db	79	;'O'
   878  00FDB0  47                 	db	71	;'G'
   879  00FDB1  20                 	db	32
   880  00FDB2  31                 	db	49	;'1'
   881  00FDB3  20                 	db	32
   882  00FDB4  20                 	db	32
   883  00FDB5  20                 	db	32
   884  00FDB6  20                 	db	32
   885  00FDB7  20                 	db	32
   886  00FDB8  20                 	db	32
   887  00FDB9  20                 	db	32
   888  00FDBA  20                 	db	32
   889  00FDBB  20                 	db	32
   890  00FDBC  20                 	db	32
   891  00FDBD  3C                 	db	60	;'<'
   892  00FDBE  00                 	db	0
   893  00FDBF                     STR_42:
   894  00FDBF  4C                 	db	76	;'L'
   895  00FDC0  4F                 	db	79	;'O'
   896  00FDC1  47                 	db	71	;'G'
   897  00FDC2  20                 	db	32
   898  00FDC3  32                 	db	50	;'2'
   899  00FDC4  20                 	db	32
   900  00FDC5  20                 	db	32
   901  00FDC6  20                 	db	32
   902  00FDC7  20                 	db	32
   903  00FDC8  20                 	db	32
   904  00FDC9  20                 	db	32
   905  00FDCA  20                 	db	32
   906  00FDCB  20                 	db	32
   907  00FDCC  20                 	db	32
   908  00FDCD  20                 	db	32
   909  00FDCE  3C                 	db	60	;'<'
   910  00FDCF  00                 	db	0
   911  00FDD0                     STR_46:
   912  00FDD0  4C                 	db	76	;'L'
   913  00FDD1  4F                 	db	79	;'O'
   914  00FDD2  47                 	db	71	;'G'
   915  00FDD3  20                 	db	32
   916  00FDD4  33                 	db	51	;'3'
   917  00FDD5  20                 	db	32
   918  00FDD6  20                 	db	32
   919  00FDD7  20                 	db	32
   920  00FDD8  20                 	db	32
   921  00FDD9  20                 	db	32
   922  00FDDA  20                 	db	32
   923  00FDDB  20                 	db	32
   924  00FDDC  20                 	db	32
   925  00FDDD  20                 	db	32
   926  00FDDE  20                 	db	32
   927  00FDDF  3C                 	db	60	;'<'
   928  00FDE0  00                 	db	0
   929  00FDE1                     STR_50:
   930  00FDE1  4C                 	db	76	;'L'
   931  00FDE2  4F                 	db	79	;'O'
   932  00FDE3  47                 	db	71	;'G'
   933  00FDE4  20                 	db	32
   934  00FDE5  34                 	db	52	;'4'
   935  00FDE6  20                 	db	32
   936  00FDE7  20                 	db	32
   937  00FDE8  20                 	db	32
   938  00FDE9  20                 	db	32
   939  00FDEA  20                 	db	32
   940  00FDEB  20                 	db	32
   941  00FDEC  20                 	db	32
   942  00FDED  20                 	db	32
   943  00FDEE  20                 	db	32
   944  00FDEF  20                 	db	32
   945  00FDF0  3C                 	db	60	;'<'
   946  00FDF1  00                 	db	0
   947  00FDF2                     STR_38:
   948  00FDF2  33                 	db	51	;'3'
   949  00FDF3  2E                 	db	46
   950  00FDF4  20                 	db	32
   951  00FDF5  4C                 	db	76	;'L'
   952  00FDF6  4F                 	db	79	;'O'
   953  00FDF7  47                 	db	71	;'G'
   954  00FDF8  53                 	db	83	;'S'
   955  00FDF9  20                 	db	32
   956  00FDFA  20                 	db	32
   957  00FDFB  20                 	db	32
   958  00FDFC  20                 	db	32
   959  00FDFD  20                 	db	32
   960  00FDFE  20                 	db	32
   961  00FDFF  20                 	db	32
   962  00FE00  20                 	db	32
   963  00FE01  3C                 	db	60	;'<'
   964  00FE02  00                 	db	0
   965  00FE03                     STR_34:
   966  00FE03  32                 	db	50	;'2'
   967  00FE04  2E                 	db	46
   968  00FE05  20                 	db	32
   969  00FE06  53                 	db	83	;'S'
   970  00FE07  4F                 	db	79	;'O'
   971  00FE08  52                 	db	82	;'R'
   972  00FE09  54                 	db	84	;'T'
   973  00FE0A  20                 	db	32
   974  00FE0B  20                 	db	32
   975  00FE0C  20                 	db	32
   976  00FE0D  20                 	db	32
   977  00FE0E  20                 	db	32
   978  00FE0F  20                 	db	32
   979  00FE10  20                 	db	32
   980  00FE11  20                 	db	32
   981  00FE12  3C                 	db	60	;'<'
   982  00FE13  00                 	db	0
   983  00FE14                     STR_31:
   984  00FE14  31                 	db	49	;'1'
   985  00FE15  2E                 	db	46
   986  00FE16  20                 	db	32
   987  00FE17  44                 	db	68	;'D'
   988  00FE18  41                 	db	65	;'A'
   989  00FE19  54                 	db	84	;'T'
   990  00FE1A  45                 	db	69	;'E'
   991  00FE1B  2F                 	db	47
   992  00FE1C  54                 	db	84	;'T'
   993  00FE1D  49                 	db	73	;'I'
   994  00FE1E  4D                 	db	77	;'M'
   995  00FE1F  45                 	db	69	;'E'
   996  00FE20  20                 	db	32
   997  00FE21  20                 	db	32
   998  00FE22  20                 	db	32
   999  00FE23  3C                 	db	60	;'<'
  1000  00FE24  00                 	db	0
  1001  00FE25                     STR_6:
  1002  00FE25  50                 	db	80	;'P'
  1003  00FE26  41                 	db	65	;'A'
  1004  00FE27  55                 	db	85	;'U'
  1005  00FE28  53                 	db	83	;'S'
  1006  00FE29  45                 	db	69	;'E'
  1007  00FE2A  20                 	db	32
  1008  00FE2B  3C                 	db	60	;'<'
  1009  00FE2C  20                 	db	32
  1010  00FE2D  7C                 	db	124
  1011  00FE2E  20                 	db	32
  1012  00FE2F  42                 	db	66	;'B'
  1013  00FE30  41                 	db	65	;'A'
  1014  00FE31  43                 	db	67	;'C'
  1015  00FE32  4B                 	db	75	;'K'
  1016  00FE33  20                 	db	32
  1017  00FE34  3E                 	db	62	;'>'
  1018  00FE35  00                 	db	0
  1019  00FE36                     STR_30:
  1020  00FE36  50                 	db	80	;'P'
  1021  00FE37  55                 	db	85	;'U'
  1022  00FE38  53                 	db	83	;'S'
  1023  00FE39  48                 	db	72	;'H'
  1024  00FE3A  20                 	db	32
  1025  00FE3B  54                 	db	84	;'T'
  1026  00FE3C  4F                 	db	79	;'O'
  1027  00FE3D  20                 	db	32
  1028  00FE3E  43                 	db	67	;'C'
  1029  00FE3F  4F                 	db	79	;'O'
  1030  00FE40  4E                 	db	78	;'N'
  1031  00FE41  54                 	db	84	;'T'
  1032  00FE42  49                 	db	73	;'I'
  1033  00FE43  4E                 	db	78	;'N'
  1034  00FE44  55                 	db	85	;'U'
  1035  00FE45  45                 	db	69	;'E'
  1036  00FE46  00                 	db	0
  1037  00FE47                     STR_82:
  1038  00FE47  4D                 	db	77	;'M'
  1039  00FE48  41                 	db	65	;'A'
  1040  00FE49  47                 	db	71	;'G'
  1041  00FE4A  5F                 	db	95	;'_'
  1042  00FE4B  73                 	db	115	;'s'
  1043  00FE4C  69                 	db	105	;'i'
  1044  00FE4D  67                 	db	103	;'g'
  1045  00FE4E  6E                 	db	110	;'n'
  1046  00FE4F  61                 	db	97	;'a'
  1047  00FE50  6C                 	db	108	;'l'
  1048  00FE51  3A                 	db	58	;':'
  1049  00FE52  20                 	db	32
  1050  00FE53  25                 	db	37
  1051  00FE54  64                 	db	100	;'d'
  1052  00FE55  20                 	db	32
  1053  00FE56  00                 	db	0
  1054  00FE57                     STR_98:
  1055  00FE57  54                 	db	84	;'T'
  1056  00FE58  53                 	db	83	;'S'
  1057  00FE59  54                 	db	84	;'T'
  1058  00FE5A  3A                 	db	58	;':'
  1059  00FE5B  20                 	db	32
  1060  00FE5C  54                 	db	84	;'T'
  1061  00FE5D  49                 	db	73	;'I'
  1062  00FE5E  4C                 	db	76	;'L'
  1063  00FE5F  54                 	db	84	;'T'
  1064  00FE60  20                 	db	32
  1065  00FE61  53                 	db	83	;'S'
  1066  00FE62  45                 	db	69	;'E'
  1067  00FE63  52                 	db	82	;'R'
  1068  00FE64  56                 	db	86	;'V'
  1069  00FE65  4F                 	db	79	;'O'
  1070  00FE66  00                 	db	0
  1071  00FE67                     STR_4:
  1072  00FE67  44                 	db	68	;'D'
  1073  00FE68  49                 	db	73	;'I'
  1074  00FE69  44                 	db	68	;'D'
  1075  00FE6A  4E                 	db	78	;'N'
  1076  00FE6B  27                 	db	39
  1077  00FE6C  54                 	db	84	;'T'
  1078  00FE6D  20                 	db	32
  1079  00FE6E  43                 	db	67	;'C'
  1080  00FE6F  4F                 	db	79	;'O'
  1081  00FE70  4D                 	db	77	;'M'
  1082  00FE71  50                 	db	80	;'P'
  1083  00FE72  4C                 	db	76	;'L'
  1084  00FE73  45                 	db	69	;'E'
  1085  00FE74  54                 	db	84	;'T'
  1086  00FE75  45                 	db	69	;'E'
  1087  00FE76  00                 	db	0
  1088  00FE77                     STR_80:
  1089  00FE77  49                 	db	73	;'I'
  1090  00FE78  52                 	db	82	;'R'
  1091  00FE79  5F                 	db	95	;'_'
  1092  00FE7A  73                 	db	115	;'s'
  1093  00FE7B  69                 	db	105	;'i'
  1094  00FE7C  67                 	db	103	;'g'
  1095  00FE7D  6E                 	db	110	;'n'
  1096  00FE7E  61                 	db	97	;'a'
  1097  00FE7F  6C                 	db	108	;'l'
  1098  00FE80  3A                 	db	58	;':'
  1099  00FE81  20                 	db	32
  1100  00FE82  25                 	db	37
  1101  00FE83  64                 	db	100	;'d'
  1102  00FE84  20                 	db	32
  1103  00FE85  00                 	db	0
  1104  00FE86                     STR_104:
  1105  00FE86  43                 	db	67	;'C'
  1106  00FE87  41                 	db	65	;'A'
  1107  00FE88  4D                 	db	77	;'M'
  1108  00FE89  20                 	db	32
  1109  00FE8A  44                 	db	68	;'D'
  1110  00FE8B  57                 	db	87	;'W'
  1111  00FE8C  4E                 	db	78	;'N'
  1112  00FE8D  20                 	db	32
  1113  00FE8E  7C                 	db	124
  1114  00FE8F  52                 	db	82	;'R'
  1115  00FE90  43                 	db	67	;'C'
  1116  00FE91  30                 	db	48	;'0'
  1117  00FE92  3D                 	db	61	;'='
  1118  00FE93  30                 	db	48	;'0'
  1119  00FE94  00                 	db	0
  1120  00FE95                     STR_103:
  1121  00FE95  43                 	db	67	;'C'
  1122  00FE96  41                 	db	65	;'A'
  1123  00FE97  4D                 	db	77	;'M'
  1124  00FE98  20                 	db	32
  1125  00FE99  55                 	db	85	;'U'
  1126  00FE9A  50                 	db	80	;'P'
  1127  00FE9B  20                 	db	32
  1128  00FE9C  20                 	db	32
  1129  00FE9D  7C                 	db	124
  1130  00FE9E  52                 	db	82	;'R'
  1131  00FE9F  43                 	db	67	;'C'
  1132  00FEA0  30                 	db	48	;'0'
  1133  00FEA1  3D                 	db	61	;'='
  1134  00FEA2  31                 	db	49	;'1'
  1135  00FEA3  00                 	db	0
  1136  00FEA4                     STR_81:
  1137  00FEA4  54                 	db	84	;'T'
  1138  00FEA5  53                 	db	83	;'S'
  1139  00FEA6  54                 	db	84	;'T'
  1140  00FEA7  3A                 	db	58	;':'
  1141  00FEA8  20                 	db	32
  1142  00FEA9  4D                 	db	77	;'M'
  1143  00FEAA  41                 	db	65	;'A'
  1144  00FEAB  47                 	db	71	;'G'
  1145  00FEAC  4E                 	db	78	;'N'
  1146  00FEAD  45                 	db	69	;'E'
  1147  00FEAE  54                 	db	84	;'T'
  1148  00FEAF  49                 	db	73	;'I'
  1149  00FEB0  53                 	db	83	;'S'
  1150  00FEB1  4D                 	db	77	;'M'
  1151  00FEB2  00                 	db	0
  1152  00FEB3                     STR_102:
  1153  00FEB3  54                 	db	84	;'T'
  1154  00FEB4  53                 	db	83	;'S'
  1155  00FEB5  54                 	db	84	;'T'
  1156  00FEB6  3A                 	db	58	;':'
  1157  00FEB7  20                 	db	32
  1158  00FEB8  43                 	db	67	;'C'
  1159  00FEB9  41                 	db	65	;'A'
  1160  00FEBA  4D                 	db	77	;'M'
  1161  00FEBB  20                 	db	32
  1162  00FEBC  53                 	db	83	;'S'
  1163  00FEBD  45                 	db	69	;'E'
  1164  00FEBE  52                 	db	82	;'R'
  1165  00FEBF  56                 	db	86	;'V'
  1166  00FEC0  4F                 	db	79	;'O'
  1167  00FEC1  00                 	db	0
  1168  00FEC2                     STR_91:
  1169  00FEC2  54                 	db	84	;'T'
  1170  00FEC3  53                 	db	83	;'S'
  1171  00FEC4  54                 	db	84	;'T'
  1172  00FEC5  3A                 	db	58	;':'
  1173  00FEC6  20                 	db	32
  1174  00FEC7  50                 	db	80	;'P'
  1175  00FEC8  41                 	db	65	;'A'
  1176  00FEC9  4E                 	db	78	;'N'
  1177  00FECA  20                 	db	32
  1178  00FECB  53                 	db	83	;'S'
  1179  00FECC  45                 	db	69	;'E'
  1180  00FECD  52                 	db	82	;'R'
  1181  00FECE  56                 	db	86	;'V'
  1182  00FECF  4F                 	db	79	;'O'
  1183  00FED0  00                 	db	0
  1184  00FED1                     STR_75:
  1185  00FED1  41                 	db	65	;'A'
  1186  00FED2  4C                 	db	76	;'L'
  1187  00FED3  47                 	db	71	;'G'
  1188  00FED4  34                 	db	52	;'4'
  1189  00FED5  3A                 	db	58	;':'
  1190  00FED6  20                 	db	32
  1191  00FED7  41                 	db	65	;'A'
  1192  00FED8  4C                 	db	76	;'L'
  1193  00FED9  4C                 	db	76	;'L'
  1194  00FEDA  20                 	db	32
  1195  00FEDB  43                 	db	67	;'C'
  1196  00FEDC  41                 	db	65	;'A'
  1197  00FEDD  4E                 	db	78	;'N'
  1198  00FEDE  53                 	db	83	;'S'
  1199  00FEDF  00                 	db	0
  1200  00FEE0                     STR_85:
  1201  00FEE0  54                 	db	84	;'T'
  1202  00FEE1  53                 	db	83	;'S'
  1203  00FEE2  54                 	db	84	;'T'
  1204  00FEE3  3A                 	db	58	;':'
  1205  00FEE4  20                 	db	32
  1206  00FEE5  44                 	db	68	;'D'
  1207  00FEE6  43                 	db	67	;'C'
  1208  00FEE7  20                 	db	32
  1209  00FEE8  4D                 	db	77	;'M'
  1210  00FEE9  4F                 	db	79	;'O'
  1211  00FEEA  54                 	db	84	;'T'
  1212  00FEEB  4F                 	db	79	;'O'
  1213  00FEEC  52                 	db	82	;'R'
  1214  00FEED  53                 	db	83	;'S'
  1215  00FEEE  00                 	db	0
  1216  00FEEF                     STR_70:
  1217  00FEEF  41                 	db	65	;'A'
  1218  00FEF0  4C                 	db	76	;'L'
  1219  00FEF1  47                 	db	71	;'G'
  1220  00FEF2  4F                 	db	79	;'O'
  1221  00FEF3  52                 	db	82	;'R'
  1222  00FEF4  49                 	db	73	;'I'
  1223  00FEF5  54                 	db	84	;'T'
  1224  00FEF6  48                 	db	72	;'H'
  1225  00FEF7  4D                 	db	77	;'M'
  1226  00FEF8  20                 	db	32
  1227  00FEF9  54                 	db	84	;'T'
  1228  00FEFA  45                 	db	69	;'E'
  1229  00FEFB  53                 	db	83	;'S'
  1230  00FEFC  54                 	db	84	;'T'
  1231  00FEFD  00                 	db	0
  1232  00FEFE                     STR_86:
  1233  00FEFE  50                 	db	80	;'P'
  1234  00FEFF  49                 	db	73	;'I'
  1235  00FF00  4E                 	db	78	;'N'
  1236  00FF01  20                 	db	32
  1237  00FF02  52                 	db	82	;'R'
  1238  00FF03  41                 	db	65	;'A'
  1239  00FF04  35                 	db	53	;'5'
  1240  00FF05  20                 	db	32
  1241  00FF06  48                 	db	72	;'H'
  1242  00FF07  49                 	db	73	;'I'
  1243  00FF08  47                 	db	71	;'G'
  1244  00FF09  48                 	db	72	;'H'
  1245  00FF0A  2E                 	db	46
  1246  00FF0B  00                 	db	0
  1247  00FF0C                     STR_73:
  1248  00FF0C  41                 	db	65	;'A'
  1249  00FF0D  4C                 	db	76	;'L'
  1250  00FF0E  47                 	db	71	;'G'
  1251  00FF0F  32                 	db	50	;'2'
  1252  00FF10  3A                 	db	58	;':'
  1253  00FF11  20                 	db	32
  1254  00FF12  31                 	db	49	;'1'
  1255  00FF13  32                 	db	50	;'2'
  1256  00FF14  20                 	db	32
  1257  00FF15  43                 	db	67	;'C'
  1258  00FF16  41                 	db	65	;'A'
  1259  00FF17  4E                 	db	78	;'N'
  1260  00FF18  53                 	db	83	;'S'
  1261  00FF19  00                 	db	0
  1262  00FF1A                     STR_76:
  1263  00FF1A  41                 	db	65	;'A'
  1264  00FF1B  4C                 	db	76	;'L'
  1265  00FF1C  47                 	db	71	;'G'
  1266  00FF1D  35                 	db	53	;'5'
  1267  00FF1E  3A                 	db	58	;':'
  1268  00FF1F  20                 	db	32
  1269  00FF20  4E                 	db	78	;'N'
  1270  00FF21  4F                 	db	79	;'O'
  1271  00FF22  20                 	db	32
  1272  00FF23  43                 	db	67	;'C'
  1273  00FF24  41                 	db	65	;'A'
  1274  00FF25  4E                 	db	78	;'N'
  1275  00FF26  53                 	db	83	;'S'
  1276  00FF27  00                 	db	0
  1277  00FF28                     STR_71:
  1278  00FF28  50                 	db	80	;'P'
  1279  00FF29  55                 	db	85	;'U'
  1280  00FF2A  53                 	db	83	;'S'
  1281  00FF2B  48                 	db	72	;'H'
  1282  00FF2C  20                 	db	32
  1283  00FF2D  54                 	db	84	;'T'
  1284  00FF2E  4F                 	db	79	;'O'
  1285  00FF2F  20                 	db	32
  1286  00FF30  53                 	db	83	;'S'
  1287  00FF31  54                 	db	84	;'T'
  1288  00FF32  41                 	db	65	;'A'
  1289  00FF33  52                 	db	82	;'R'
  1290  00FF34  54                 	db	84	;'T'
  1291  00FF35  00                 	db	0
  1292  00FF36                     STR_23:
  1293  00FF36  25                 	db	37
  1294  00FF37  64                 	db	100	;'d'
  1295  00FF38  20                 	db	32
  1296  00FF39  4D                 	db	77	;'M'
  1297  00FF3A  49                 	db	73	;'I'
  1298  00FF3B  4E                 	db	78	;'N'
  1299  00FF3C  20                 	db	32
  1300  00FF3D  25                 	db	37
  1301  00FF3E  64                 	db	100	;'d'
  1302  00FF3F  20                 	db	32
  1303  00FF40  53                 	db	83	;'S'
  1304  00FF41  45                 	db	69	;'E'
  1305  00FF42  43                 	db	67	;'C'
  1306  00FF43  00                 	db	0
  1307  00FF44                     STR_2:
  1308  00FF44  54                 	db	84	;'T'
  1309  00FF45  49                 	db	73	;'I'
  1310  00FF46  4D                 	db	77	;'M'
  1311  00FF47  45                 	db	69	;'E'
  1312  00FF48  3A                 	db	58	;':'
  1313  00FF49  20                 	db	32
  1314  00FF4A  25                 	db	37
  1315  00FF4B  64                 	db	100	;'d'
  1316  00FF4C  3A                 	db	58	;':'
  1317  00FF4D  25                 	db	37
  1318  00FF4E  30                 	db	48	;'0'
  1319  00FF4F  32                 	db	50	;'2'
  1320  00FF50  64                 	db	100	;'d'
  1321  00FF51  00                 	db	0
  1322  00FF52                     STR_79:
  1323  00FF52  54                 	db	84	;'T'
  1324  00FF53  53                 	db	83	;'S'
  1325  00FF54  54                 	db	84	;'T'
  1326  00FF55  3A                 	db	58	;':'
  1327  00FF56  20                 	db	32
  1328  00FF57  49                 	db	73	;'I'
  1329  00FF58  52                 	db	82	;'R'
  1330  00FF59  20                 	db	32
  1331  00FF5A  53                 	db	83	;'S'
  1332  00FF5B  4E                 	db	78	;'N'
  1333  00FF5C  53                 	db	83	;'S'
  1334  00FF5D  52                 	db	82	;'R'
  1335  00FF5E  00                 	db	0
  1336  00FF5F                     STR_65:
  1337  00FF5F  54                 	db	84	;'T'
  1338  00FF60  49                 	db	73	;'I'
  1339  00FF61  4D                 	db	77	;'M'
  1340  00FF62  45                 	db	69	;'E'
  1341  00FF63  20                 	db	32
  1342  00FF64  25                 	db	37
  1343  00FF65  64                 	db	100	;'d'
  1344  00FF66  3A                 	db	58	;':'
  1345  00FF67  25                 	db	37
  1346  00FF68  30                 	db	48	;'0'
  1347  00FF69  32                 	db	50	;'2'
  1348  00FF6A  64                 	db	100	;'d'
  1349  00FF6B  00                 	db	0
  1350  00FF6C                     STR_74:
  1351  00FF6C  41                 	db	65	;'A'
  1352  00FF6D  4C                 	db	76	;'L'
  1353  00FF6E  47                 	db	71	;'G'
  1354  00FF6F  33                 	db	51	;'3'
  1355  00FF70  3A                 	db	58	;':'
  1356  00FF71  20                 	db	32
  1357  00FF72  31                 	db	49	;'1'
  1358  00FF73  20                 	db	32
  1359  00FF74  43                 	db	67	;'C'
  1360  00FF75  41                 	db	65	;'A'
  1361  00FF76  4E                 	db	78	;'N'
  1362  00FF77  00                 	db	0
  1363  00FF78                     STR_88:
  1364  00FF78  50                 	db	80	;'P'
  1365  00FF79  49                 	db	73	;'I'
  1366  00FF7A  4E                 	db	78	;'N'
  1367  00FF7B  20                 	db	32
  1368  00FF7C  52                 	db	82	;'R'
  1369  00FF7D  41                 	db	65	;'A'
  1370  00FF7E  33                 	db	51	;'3'
  1371  00FF7F  2E                 	db	46
  1372  00FF80  2E                 	db	46
  1373  00FF81  2E                 	db	46
  1374  00FF82  00                 	db	0
  1375  00FF83                     STR_90:
  1376  00FF83  50                 	db	80	;'P'
  1377  00FF84  49                 	db	73	;'I'
  1378  00FF85  4E                 	db	78	;'N'
  1379  00FF86  20                 	db	32
  1380  00FF87  52                 	db	82	;'R'
  1381  00FF88  41                 	db	65	;'A'
  1382  00FF89  34                 	db	52	;'4'
  1383  00FF8A  2E                 	db	46
  1384  00FF8B  2E                 	db	46
  1385  00FF8C  2E                 	db	46
  1386  00FF8D  00                 	db	0
  1387  00FF8E                     STR_64:
  1388  00FF8E  53                 	db	83	;'S'
  1389  00FF8F  4F                 	db	79	;'O'
  1390  00FF90  52                 	db	82	;'R'
  1391  00FF91  54                 	db	84	;'T'
  1392  00FF92  49                 	db	73	;'I'
  1393  00FF93  4E                 	db	78	;'N'
  1394  00FF94  47                 	db	71	;'G'
  1395  00FF95  2E                 	db	46
  1396  00FF96  2E                 	db	46
  1397  00FF97  2E                 	db	46
  1398  00FF98  00                 	db	0
  1399  00FF99                     STR_83:
  1400  00FF99  41                 	db	65	;'A'
  1401  00FF9A  43                 	db	67	;'C'
  1402  00FF9B  54                 	db	84	;'T'
  1403  00FF9C  55                 	db	85	;'U'
  1404  00FF9D  41                 	db	65	;'A'
  1405  00FF9E  54                 	db	84	;'T'
  1406  00FF9F  4F                 	db	79	;'O'
  1407  00FFA0  52                 	db	82	;'R'
  1408  00FFA1  53                 	db	83	;'S'
  1409  00FFA2  00                 	db	0
  1410  00FFA3                     STR_22:
  1411  00FFA3  44                 	db	68	;'D'
  1412  00FFA4  55                 	db	85	;'U'
  1413  00FFA5  52                 	db	82	;'R'
  1414  00FFA6  41                 	db	65	;'A'
  1415  00FFA7  54                 	db	84	;'T'
  1416  00FFA8  49                 	db	73	;'I'
  1417  00FFA9  4F                 	db	79	;'O'
  1418  00FFAA  4E                 	db	78	;'N'
  1419  00FFAB  3A                 	db	58	;':'
  1420  00FFAC  00                 	db	0
  1421  00FFAD                     STR_77:
  1422  00FFAD  53                 	db	83	;'S'
  1423  00FFAE  45                 	db	69	;'E'
  1424  00FFAF  4E                 	db	78	;'N'
  1425  00FFB0  53                 	db	83	;'S'
  1426  00FFB1  4F                 	db	79	;'O'
  1427  00FFB2  52                 	db	82	;'R'
  1428  00FFB3  53                 	db	83	;'S'
  1429  00FFB4  00                 	db	0
  1430  00FFB5                     STR_109:
  1431  00FFB5  28                 	db	40
  1432  00FFB6  6E                 	db	110	;'n'
  1433  00FFB7  75                 	db	117	;'u'
  1434  00FFB8  6C                 	db	108	;'l'
  1435  00FFB9  6C                 	db	108	;'l'
  1436  00FFBA  29                 	db	41
  1437  00FFBB  00                 	db	0
  1438  00FFBC                     STR_67:
  1439  00FFBC  46                 	db	70	;'F'
  1440  00FFBD  41                 	db	65	;'A'
  1441  00FFBE  49                 	db	73	;'I'
  1442  00FFBF  4C                 	db	76	;'L'
  1443  00FFC0  45                 	db	69	;'E'
  1444  00FFC1  44                 	db	68	;'D'
  1445  00FFC2  00                 	db	0
  1446  00FFC3                     STR_7:
  1447  00FFC3  53                 	db	83	;'S'
  1448  00FFC4  54                 	db	84	;'T'
  1449  00FFC5  41                 	db	65	;'A'
  1450  00FFC6  52                 	db	82	;'R'
  1451  00FFC7  54                 	db	84	;'T'
  1452  00FFC8  3A                 	db	58	;':'
  1453  00FFC9  00                 	db	0
  1454  00FFCA                     STR_9:
  1455  00FFCA  46                 	db	70	;'F'
  1456  00FFCB  45                 	db	69	;'E'
  1457  00FFCC  42                 	db	66	;'B'
  1458  00FFCD  00                 	db	0
  1459  00FFCE                     STR_19:
  1460  00FFCE  44                 	db	68	;'D'
  1461  00FFCF  45                 	db	69	;'E'
  1462  00FFD0  43                 	db	67	;'C'
  1463  00FFD1  00                 	db	0
  1464  00FFD2                     STR_15:
  1465  00FFD2  41                 	db	65	;'A'
  1466  00FFD3  55                 	db	85	;'U'
  1467  00FFD4  47                 	db	71	;'G'
  1468  00FFD5  00                 	db	0
  1469  00FFD6                     STR_14:
  1470  00FFD6  4A                 	db	74	;'J'
  1471  00FFD7  55                 	db	85	;'U'
  1472  00FFD8  4C                 	db	76	;'L'
  1473  00FFD9  00                 	db	0
  1474  00FFDA                     STR_8:
  1475  00FFDA  4A                 	db	74	;'J'
  1476  00FFDB  41                 	db	65	;'A'
  1477  00FFDC  4E                 	db	78	;'N'
  1478  00FFDD  00                 	db	0
  1479  00FFDE                     STR_13:
  1480  00FFDE  4A                 	db	74	;'J'
  1481  00FFDF  55                 	db	85	;'U'
  1482  00FFE0  4E                 	db	78	;'N'
  1483  00FFE1  00                 	db	0
  1484  00FFE2                     STR_16:
  1485  00FFE2  53                 	db	83	;'S'
  1486  00FFE3  45                 	db	69	;'E'
  1487  00FFE4  50                 	db	80	;'P'
  1488  00FFE5  00                 	db	0
  1489  00FFE6                     STR_10:
  1490  00FFE6  4D                 	db	77	;'M'
  1491  00FFE7  41                 	db	65	;'A'
  1492  00FFE8  52                 	db	82	;'R'
  1493  00FFE9  00                 	db	0
  1494  00FFEA                     STR_11:
  1495  00FFEA  41                 	db	65	;'A'
  1496  00FFEB  50                 	db	80	;'P'
  1497  00FFEC  52                 	db	82	;'R'
  1498  00FFED  00                 	db	0
  1499  00FFEE                     STR_20:
  1500  00FFEE  45                 	db	69	;'E'
  1501  00FFEF  52                 	db	82	;'R'
  1502  00FFF0  52                 	db	82	;'R'
  1503  00FFF1  00                 	db	0
  1504  00FFF2                     STR_17:
  1505  00FFF2  4F                 	db	79	;'O'
  1506  00FFF3  43                 	db	67	;'C'
  1507  00FFF4  54                 	db	84	;'T'
  1508  00FFF5  00                 	db	0
  1509  00FFF6                     STR_18:
  1510  00FFF6  4E                 	db	78	;'N'
  1511  00FFF7  4F                 	db	79	;'O'
  1512  00FFF8  56                 	db	86	;'V'
  1513  00FFF9  00                 	db	0
  1514  00FFFA                     STR_12:
  1515  00FFFA  4D                 	db	77	;'M'
  1516  00FFFB  41                 	db	65	;'A'
  1517  00FFFC  59                 	db	89	;'Y'
  1518  00FFFD  00                 	db	0
  1519  0000                     
  1520                           ; #config settings
  1521  00FFFE  00                 	db	0	; dummy byte at the end
  1522  0000                     
  1523                           	psect	cinit
  1524  0039DC                     __pcinit:
  1525                           	opt stack 0
  1526  0039DC                     start_initialization:
  1527                           	opt stack 0
  1528  0039DC                     __initialization:
  1529                           	opt stack 0
  1530                           
  1531                           ; Initialize objects allocated to BANK1 (8 bytes)
  1532                           ; load TBLPTR registers with __pidataBANK1
  1533  0039DC  0E08               	movlw	low __pidataBANK1
  1534  0039DE  6EF6               	movwf	tblptrl,c
  1535  0039E0  0E41               	movlw	high __pidataBANK1
  1536  0039E2  6EF7               	movwf	tblptrh,c
  1537  0039E4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1538  0039E6  6EF8               	movwf	tblptru,c
  1539  0039E8  EE01  F02D         	lfsr	0,__pdataBANK1
  1540  0039EC  EE10 F008          	lfsr	1,8
  1541  0039F0                     copy_data0:
  1542  0039F0  0009               	tblrd		*+
  1543  0039F2  CFF5 FFEE          	movff	tablat,postinc0
  1544  0039F6  50E5               	movf	postdec1,w,c
  1545  0039F8  50E1               	movf	fsr1l,w,c
  1546  0039FA  E1FA               	bnz	copy_data0
  1547                           
  1548                           ; Clear objects allocated to BANK1 (45 bytes)
  1549  0039FC  EE01  F000         	lfsr	0,__pbssBANK1
  1550  003A00  0E2D               	movlw	45
  1551  003A02                     clear_0:
  1552  003A02  6AEE               	clrf	postinc0,c
  1553  003A04  06E8               	decf	wreg,f,c
  1554  003A06  E1FD               	bnz	clear_0
  1555                           
  1556                           ; Clear objects allocated to BANK0 (38 bytes)
  1557  003A08  EE00  F0DA         	lfsr	0,__pbssBANK0
  1558  003A0C  0E26               	movlw	38
  1559  003A0E                     clear_1:
  1560  003A0E  6AEE               	clrf	postinc0,c
  1561  003A10  06E8               	decf	wreg,f,c
  1562  003A12  E1FD               	bnz	clear_1
  1563                           
  1564                           ; Clear objects allocated to COMRAM (35 bytes)
  1565  003A14  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1566  003A18  0E23               	movlw	35
  1567  003A1A                     clear_2:
  1568  003A1A  6AEE               	clrf	postinc0,c
  1569  003A1C  06E8               	decf	wreg,f,c
  1570  003A1E  E1FD               	bnz	clear_2
  1571  003A20                     end_of_initialization:
  1572                           	opt stack 0
  1573  003A20                     __end_of__initialization:
  1574                           	opt stack 0
  1575  003A20  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1576  003A22  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1577  003A24  0100               	movlb	0
  1578  003A26  EF40  F019         	goto	_main	;jump to C main() function
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postdec1	equ	0xFE5
  1586                           fsr1l	equ	0xFE1
  1587                           
  1588                           	psect	bssCOMRAM
  1589  00005B                     __pbssCOMRAM:
  1590                           	opt stack 0
  1591  00005B                     _back:
  1592                           	opt stack 0
  1593  00005B                     	ds	2
  1594  00005D                     _count_can_no_lab:
  1595                           	opt stack 0
  1596  00005D                     	ds	2
  1597  00005F                     _count_can_w_lab:
  1598                           	opt stack 0
  1599  00005F                     	ds	2
  1600  000061                     _count_pop_no_tab:
  1601                           	opt stack 0
  1602  000061                     	ds	2
  1603  000063                     _count_pop_w_tab:
  1604                           	opt stack 0
  1605  000063                     	ds	2
  1606  000065                     _cur_can:
  1607                           	opt stack 0
  1608  000065                     	ds	2
  1609  000067                     _down:
  1610                           	opt stack 0
  1611  000067                     	ds	2
  1612  000069                     _enter:
  1613                           	opt stack 0
  1614  000069                     	ds	2
  1615  00006B                     _f_ID_receive:
  1616                           	opt stack 0
  1617  00006B                     	ds	2
  1618  00006D                     _f_can_coming_to_ID:
  1619                           	opt stack 0
  1620  00006D                     	ds	2
  1621  00006F                     _f_can_coming_to_distribution:
  1622                           	opt stack 0
  1623  00006F                     	ds	2
  1624  000071                     _f_can_distributed:
  1625                           	opt stack 0
  1626  000071                     	ds	2
  1627  000073                     _f_lastCan:
  1628                           	opt stack 0
  1629  000073                     	ds	2
  1630  000075                     _firstboot:
  1631                           	opt stack 0
  1632  000075                     	ds	2
  1633  000077                     _up:
  1634                           	opt stack 0
  1635  000077                     	ds	2
  1636  000079                     _was_low_1:
  1637                           	opt stack 0
  1638  000079                     	ds	2
  1639  00007B                     _was_low_3:
  1640                           	opt stack 0
  1641  00007B                     	ds	2
  1642  00007D                     _input:
  1643                           	opt stack 0
  1644  00007D                     	ds	1
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           postinc0	equ	0xFEE
  1650                           wreg	equ	0xFE8
  1651                           postdec1	equ	0xFE5
  1652                           fsr1l	equ	0xFE1
  1653                           
  1654                           	psect	bssBANK0
  1655  0000DA                     __pbssBANK0:
  1656                           	opt stack 0
  1657  0000DA                     _IR_signal:
  1658                           	opt stack 0
  1659  0000DA                     	ds	2
  1660  0000DC                     _MAG_signal:
  1661                           	opt stack 0
  1662  0000DC                     	ds	2
  1663  0000DE                     _cur_state:
  1664                           	opt stack 0
  1665  0000DE                     	ds	2
  1666  0000E0                     _debug:
  1667                           	opt stack 0
  1668  0000E0                     	ds	2
  1669  0000E2                     _f_loadingNewCan:
  1670                           	opt stack 0
  1671  0000E2                     	ds	2
  1672  0000E4                     _first:
  1673                           	opt stack 0
  1674  0000E4                     	ds	2
  1675  0000E6                     _log:
  1676                           	opt stack 0
  1677  0000E6                     	ds	2
  1678  0000E8                     _log_completion:
  1679                           	opt stack 0
  1680  0000E8                     	ds	2
  1681  0000EA                     _log_count_can_no_lab:
  1682                           	opt stack 0
  1683  0000EA                     	ds	2
  1684  0000EC                     _log_count_can_w_lab:
  1685                           	opt stack 0
  1686  0000EC                     	ds	2
  1687  0000EE                     _log_count_pop_no_tab:
  1688                           	opt stack 0
  1689  0000EE                     	ds	2
  1690  0000F0                     _log_count_pop_w_tab:
  1691                           	opt stack 0
  1692  0000F0                     	ds	2
  1693  0000F2                     _log_count_total:
  1694                           	opt stack 0
  1695  0000F2                     	ds	2
  1696  0000F4                     _log_total_time:
  1697                           	opt stack 0
  1698  0000F4                     	ds	2
  1699  0000F6                     _logstate:
  1700                           	opt stack 0
  1701  0000F6                     	ds	2
  1702  0000F8                     _total_time:
  1703                           	opt stack 0
  1704  0000F8                     	ds	2
  1705  0000FA                     _var:
  1706                           	opt stack 0
  1707  0000FA                     	ds	2
  1708  0000FC                     _machine_state:
  1709                           	opt stack 0
  1710  0000FC                     	ds	1
  1711  0000FD                     _sel:
  1712                           	opt stack 0
  1713  0000FD                     	ds	1
  1714  0000FE                     _count_total:
  1715                           	opt stack 0
  1716  0000FE                     	ds	2
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           postdec1	equ	0xFE5
  1724                           fsr1l	equ	0xFE1
  1725                           
  1726                           	psect	bssBANK1
  1727  000100                     __pbssBANK1:
  1728                           	opt stack 0
  1729  000100                     _log_startTime:
  1730                           	opt stack 0
  1731  000100                     	ds	14
  1732  00010E                     _startTime:
  1733                           	opt stack 0
  1734  00010E                     	ds	14
  1735  00011C                     _servoTimes:
  1736                           	opt stack 0
  1737  00011C                     	ds	8
  1738  000124                     _time:
  1739                           	opt stack 0
  1740  000124                     	ds	7
  1741  00012B                     _i:
  1742                           	opt stack 0
  1743  00012B                     	ds	2
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1l	equ	0xFE1
  1752                           
  1753                           	psect	dataBANK1
  1754  00012D                     __pdataBANK1:
  1755                           	opt stack 0
  1756  00012D                     UI@F3220:
  1757                           	opt stack 0
  1758  00012D                     	ds	4
  1759  000131                     printRTC@F3211:
  1760                           	opt stack 0
  1761  000131                     	ds	4
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           
  1771                           	psect	cstackBANK0
  1772  000080                     __pcstackBANK0:
  1773                           	opt stack 0
  1774  000080                     ??_PortTests:
  1775  000080                     ??_isdigit:
  1776  000080                     ??_readADC:
  1777  000080                     ??_I2C_Master_Wait:
  1778  000080                     ?___wmul:
  1779                           	opt stack 0
  1780  000080                     ?___awmod:
  1781                           	opt stack 0
  1782  000080                     ?___lwdiv:
  1783                           	opt stack 0
  1784  000080                     ?___lldiv:
  1785                           	opt stack 0
  1786  000080                     lcdNibble@temp:
  1787                           	opt stack 0
  1788  000080                     initTime@m:
  1789                           	opt stack 0
  1790  000080                     updateServoPosition@time_us:
  1791                           	opt stack 0
  1792  000080                     EEPROM_read@address:
  1793                           	opt stack 0
  1794  000080                     ___wmul@multiplier:
  1795                           	opt stack 0
  1796  000080                     ___awmod@dividend:
  1797                           	opt stack 0
  1798  000080                     ___lwdiv@dividend:
  1799                           	opt stack 0
  1800  000080                     strcpy@to:
  1801                           	opt stack 0
  1802  000080                     ___lldiv@dividend:
  1803                           	opt stack 0
  1804                           
  1805                           ; 4 bytes @ 0x0
  1806  000080                     	ds	1
  1807  000081                     readADC@channel:
  1808                           	opt stack 0
  1809  000081                     I2C_Master_Read@a:
  1810                           	opt stack 0
  1811  000081                     lcdNibble@data:
  1812                           	opt stack 0
  1813  000081                     initTime@h:
  1814                           	opt stack 0
  1815  000081                     _isdigit$1861:
  1816                           	opt stack 0
  1817  000081                     I2C_Master_Write@d:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x1
  1821  000081                     	ds	1
  1822  000082                     ??_readIR:
  1823  000082                     ??_readMAG:
  1824  000082                     I2C_Master_Read@temp:
  1825                           	opt stack 0
  1826  000082                     lcdInst@data:
  1827                           	opt stack 0
  1828  000082                     putch@data:
  1829                           	opt stack 0
  1830  000082                     initTime@w:
  1831                           	opt stack 0
  1832  000082                     isdigit@c:
  1833                           	opt stack 0
  1834  000082                     updateServoPosition@timer:
  1835                           	opt stack 0
  1836  000082                     ___wmul@multiplicand:
  1837                           	opt stack 0
  1838  000082                     ___awmod@divisor:
  1839                           	opt stack 0
  1840  000082                     ___lwdiv@divisor:
  1841                           	opt stack 0
  1842  000082                     strcpy@from:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x2
  1846  000082                     	ds	1
  1847  000083                     ??_initLCD:
  1848  000083                     initTime@DD:
  1849                           	opt stack 0
  1850  000083                     getRTC@i:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x3
  1854  000083                     	ds	1
  1855  000084                     ??_updateServoPosition:
  1856  000084                     initTime@MM:
  1857                           	opt stack 0
  1858  000084                     ___awmod@counter:
  1859                           	opt stack 0
  1860  000084                     readIR@res:
  1861                           	opt stack 0
  1862  000084                     readMAG@res:
  1863                           	opt stack 0
  1864  000084                     ___wmul@product:
  1865                           	opt stack 0
  1866  000084                     ___lwdiv@quotient:
  1867                           	opt stack 0
  1868  000084                     strcpy@cp:
  1869                           	opt stack 0
  1870  000084                     ___lldiv@divisor:
  1871                           	opt stack 0
  1872                           
  1873                           ; 4 bytes @ 0x4
  1874  000084                     	ds	1
  1875  000085                     ??_initSortTimer:
  1876  000085                     initTime@YY:
  1877                           	opt stack 0
  1878  000085                     ___awmod@sign:
  1879                           	opt stack 0
  1880                           
  1881                           ; 1 bytes @ 0x5
  1882  000085                     	ds	1
  1883  000086                     ??_ID:
  1884  000086                     ??_getIR:
  1885  000086                     ?___awdiv:
  1886                           	opt stack 0
  1887  000086                     initTime@s:
  1888                           	opt stack 0
  1889  000086                     ___lwdiv@counter:
  1890                           	opt stack 0
  1891  000086                     updateServoPosition@my_time:
  1892                           	opt stack 0
  1893  000086                     ___awdiv@dividend:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x6
  1897  000086                     	ds	1
  1898  000087                     ?___lwmod:
  1899                           	opt stack 0
  1900  000087                     ___lwmod@dividend:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x7
  1904  000087                     	ds	1
  1905  000088                     ??_Distribution:
  1906  000088                     ??_initServos:
  1907  000088                     initSortTimer@i:
  1908                           	opt stack 0
  1909  000088                     ___awdiv@divisor:
  1910                           	opt stack 0
  1911  000088                     ___lldiv@quotient:
  1912                           	opt stack 0
  1913  000088                     ID@sensor_outputs:
  1914                           	opt stack 0
  1915                           
  1916                           ; 6 bytes @ 0x8
  1917  000088                     	ds	1
  1918  000089                     ___lwmod@divisor:
  1919                           	opt stack 0
  1920                           
  1921                           ; 2 bytes @ 0x9
  1922  000089                     	ds	1
  1923  00008A                     ___awdiv@counter:
  1924                           	opt stack 0
  1925                           
  1926                           ; 1 bytes @ 0xA
  1927  00008A                     	ds	1
  1928  00008B                     ___awdiv@sign:
  1929                           	opt stack 0
  1930  00008B                     ___lwmod@counter:
  1931                           	opt stack 0
  1932                           
  1933                           ; 1 bytes @ 0xB
  1934  00008B                     	ds	1
  1935  00008C                     ___lldiv@counter:
  1936                           	opt stack 0
  1937  00008C                     ___awdiv@quotient:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0xC
  1941  00008C                     	ds	1
  1942  00008D                     I2C_Master_Init@c:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0xD
  1946  00008D                     	ds	1
  1947  00008E                     ?_printf:
  1948                           	opt stack 0
  1949  00008E                     printf@f:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0xE
  1953  00008E                     	ds	3
  1954  000091                     ??_I2C_Master_Init:
  1955                           
  1956                           ; 1 bytes @ 0x11
  1957  000091                     	ds	4
  1958  000095                     ??_loadRTC:
  1959                           
  1960                           ; 1 bytes @ 0x15
  1961  000095                     	ds	1
  1962  000096                     loadRTC@i:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x16
  1966  000096                     	ds	4
  1967  00009A                     ??_printf:
  1968                           
  1969                           ; 1 bytes @ 0x1A
  1970  00009A                     	ds	4
  1971  00009E                     printf@prec:
  1972                           	opt stack 0
  1973                           
  1974                           ; 1 bytes @ 0x1E
  1975  00009E                     	ds	1
  1976  00009F                     printf@cp:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x1F
  1980  00009F                     	ds	2
  1981  0000A1                     printf@ap:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x21
  1985  0000A1                     	ds	2
  1986  0000A3                     printf@len:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0x23
  1990  0000A3                     	ds	2
  1991  0000A5                     printf@val:
  1992                           	opt stack 0
  1993                           
  1994                           ; 2 bytes @ 0x25
  1995  0000A5                     	ds	2
  1996  0000A7                     printf@flag:
  1997                           	opt stack 0
  1998                           
  1999                           ; 1 bytes @ 0x27
  2000  0000A7                     	ds	1
  2001  0000A8                     printf@c:
  2002                           	opt stack 0
  2003                           
  2004                           ; 1 bytes @ 0x28
  2005  0000A8                     	ds	1
  2006  0000A9                     printf@width:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x29
  2010  0000A9                     	ds	2
  2011  0000AB                     ??_printRTC:
  2012  0000AB                     ??_algorithmTest:
  2013  0000AB                     ??_sensorTest:
  2014  0000AB                     ??_actuatorTest:
  2015  0000AB                     ??_PortTestA5:
  2016  0000AB                     ??_ToggleTestA5:
  2017  0000AB                     EEPROM_write@address:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x2B
  2021  0000AB                     	ds	1
  2022  0000AC                     ToggleTestA5@on:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x2C
  2026  0000AC                     	ds	1
  2027  0000AD                     EEPROM_write@data:
  2028                           	opt stack 0
  2029  0000AD                     actuatorTest@i_1560:
  2030                           	opt stack 0
  2031                           
  2032                           ; 1 bytes @ 0x2D
  2033  0000AD                     	ds	1
  2034  0000AE                     ??_EEPROM_write:
  2035  0000AE                     actuatorTest@i_1567:
  2036                           	opt stack 0
  2037  0000AE                     printRTC@INT_time:
  2038                           	opt stack 0
  2039                           
  2040                           ; 14 bytes @ 0x2E
  2041  0000AE                     	ds	1
  2042  0000AF                     EEPROM_write@i:
  2043                           	opt stack 0
  2044  0000AF                     actuatorTest@i_1568:
  2045                           	opt stack 0
  2046                           
  2047                           ; 1 bytes @ 0x2F
  2048  0000AF                     	ds	1
  2049  0000B0                     EEPROM_write@i_1310:
  2050                           	opt stack 0
  2051  0000B0                     actuatorTest@i_1570:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x30
  2055  0000B0                     	ds	1
  2056  0000B1                     ??_Loading:
  2057  0000B1                     logRun@num:
  2058                           	opt stack 0
  2059  0000B1                     actuatorTest@i_1571:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x31
  2063  0000B1                     	ds	1
  2064  0000B2                     logRun@byte1:
  2065                           	opt stack 0
  2066  0000B2                     actuatorTest@i_1573:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x32
  2070  0000B2                     	ds	1
  2071  0000B3                     logRun@byte2:
  2072                           	opt stack 0
  2073  0000B3                     actuatorTest@i_1574:
  2074                           	opt stack 0
  2075  0000B3                     Loading@addr:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x33
  2079  0000B3                     	ds	1
  2080  0000B4                     logRun@byte3:
  2081                           	opt stack 0
  2082  0000B4                     actuatorTest@i_1576:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0x34
  2086  0000B4                     	ds	1
  2087  0000B5                     Loading@byte1:
  2088                           	opt stack 0
  2089  0000B5                     logRun@byte_i:
  2090                           	opt stack 0
  2091  0000B5                     actuatorTest@i_1577:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x35
  2095  0000B5                     	ds	1
  2096  0000B6                     logRun@byte11:
  2097                           	opt stack 0
  2098  0000B6                     actuatorTest@i_1579:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x36
  2102  0000B6                     	ds	1
  2103  0000B7                     actuatorTest@i_1580:
  2104                           	opt stack 0
  2105  0000B7                     logRun@i:
  2106                           	opt stack 0
  2107                           
  2108                           ; 2 bytes @ 0x37
  2109  0000B7                     	ds	1
  2110  0000B8                     actuatorTest@i_1582:
  2111                           	opt stack 0
  2112                           
  2113                           ; 1 bytes @ 0x38
  2114  0000B8                     	ds	1
  2115  0000B9                     actuatorTest@i_1583:
  2116                           	opt stack 0
  2117  0000B9                     logRun@addr:
  2118                           	opt stack 0
  2119                           
  2120                           ; 2 bytes @ 0x39
  2121  0000B9                     	ds	1
  2122  0000BA                     actuatorTest@i_1586:
  2123                           	opt stack 0
  2124                           
  2125                           ; 1 bytes @ 0x3A
  2126  0000BA                     	ds	1
  2127  0000BB                     actuatorTest@i_1587:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x3B
  2131  0000BB                     	ds	1
  2132  0000BC                     actuatorTest@i_1589:
  2133                           	opt stack 0
  2134  0000BC                     printRTC@RTC_month:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x3C
  2138  0000BC                     	ds	1
  2139  0000BD                     actuatorTest@i_1590:
  2140                           	opt stack 0
  2141                           
  2142                           ; 1 bytes @ 0x3D
  2143  0000BD                     	ds	1
  2144  0000BE                     actuatorTest@i_1592:
  2145                           	opt stack 0
  2146  0000BE                     printRTC@month:
  2147                           	opt stack 0
  2148                           
  2149                           ; 4 bytes @ 0x3E
  2150  0000BE                     	ds	1
  2151  0000BF                     actuatorTest@i_1593:
  2152                           	opt stack 0
  2153                           
  2154                           ; 1 bytes @ 0x3F
  2155  0000BF                     	ds	1
  2156  0000C0                     actuatorTest@i_1596:
  2157                           	opt stack 0
  2158                           
  2159                           ; 1 bytes @ 0x40
  2160  0000C0                     	ds	1
  2161  0000C1                     actuatorTest@i_1597:
  2162                           	opt stack 0
  2163                           
  2164                           ; 1 bytes @ 0x41
  2165  0000C1                     	ds	1
  2166  0000C2                     actuatorTest@i_1599:
  2167                           	opt stack 0
  2168  0000C2                     printRTC@i:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x42
  2172  0000C2                     	ds	1
  2173  0000C3                     actuatorTest@i_1600:
  2174                           	opt stack 0
  2175                           
  2176                           ; 1 bytes @ 0x43
  2177  0000C3                     	ds	1
  2178  0000C4                     ??_UI:
  2179  0000C4                     actuatorTest@i:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x44
  2183  0000C4                     	ds	2
  2184  0000C6                     ??_Test:
  2185  0000C6                     _UI$2214:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x46
  2189  0000C6                     	ds	2
  2190  0000C8                     UI@i:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x48
  2194  0000C8                     	ds	1
  2195  0000C9                     UI@i_408:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x49
  2199  0000C9                     	ds	1
  2200  0000CA                     UI@i_411:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x4A
  2204  0000CA                     	ds	1
  2205  0000CB                     UI@i_412:
  2206                           	opt stack 0
  2207                           
  2208                           ; 1 bytes @ 0x4B
  2209  0000CB                     	ds	1
  2210  0000CC                     UI@i_430:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x4C
  2214  0000CC                     	ds	1
  2215  0000CD                     UI@i_431:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x4D
  2219  0000CD                     	ds	1
  2220  0000CE                     UI@i_434:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x4E
  2224  0000CE                     	ds	1
  2225  0000CF                     UI@i_435:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x4F
  2229  0000CF                     	ds	1
  2230  0000D0                     UI@i_438:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x50
  2234  0000D0                     	ds	1
  2235  0000D1                     UI@i_439:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x51
  2239  0000D1                     	ds	1
  2240  0000D2                     UI@i_442:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x52
  2244  0000D2                     	ds	1
  2245  0000D3                     UI@i_443:
  2246                           	opt stack 0
  2247                           
  2248                           ; 1 bytes @ 0x53
  2249  0000D3                     	ds	1
  2250  0000D4                     UI@i_446:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x54
  2254  0000D4                     	ds	1
  2255  0000D5                     UI@i_447:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x55
  2259  0000D5                     	ds	1
  2260  0000D6                     UI@month:
  2261                           	opt stack 0
  2262                           
  2263                           ; 4 bytes @ 0x56
  2264  0000D6                     	ds	4
  2265  0000DA                     tblptru	equ	0xFF8
  2266                           tblptrh	equ	0xFF7
  2267                           tblptrl	equ	0xFF6
  2268                           tablat	equ	0xFF5
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           postdec1	equ	0xFE5
  2272                           fsr1l	equ	0xFE1
  2273                           
  2274                           ; 1 bytes @ 0x5A
  2275                           
  2276                           	psect	cstackCOMRAM
  2277  000001                     __pcstackCOMRAM:
  2278                           	opt stack 0
  2279  000001                     ??i2_I2C_Master_Wait:
  2280  000001                     ??i2_isdigit:
  2281  000001                     ?i2___wmul:
  2282                           	opt stack 0
  2283  000001                     ?i2___lwmod:
  2284                           	opt stack 0
  2285  000001                     i2lcdNibble@temp:
  2286                           	opt stack 0
  2287  000001                     i2EEPROM_read@address:
  2288                           	opt stack 0
  2289  000001                     i2___wmul@multiplier:
  2290                           	opt stack 0
  2291  000001                     i2___lwmod@dividend:
  2292                           	opt stack 0
  2293  000001                     i2strcpy@to:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x0
  2297  000001                     	ds	1
  2298  000002                     i2I2C_Master_Read@a:
  2299                           	opt stack 0
  2300  000002                     i2lcdNibble@data:
  2301                           	opt stack 0
  2302  000002                     i2_isdigit$1861:
  2303                           	opt stack 0
  2304  000002                     i2I2C_Master_Write@d:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x1
  2308  000002                     	ds	1
  2309  000003                     i2I2C_Master_Read@temp:
  2310                           	opt stack 0
  2311  000003                     i2lcdInst@data:
  2312                           	opt stack 0
  2313  000003                     i2putch@data:
  2314                           	opt stack 0
  2315  000003                     i2isdigit@c:
  2316                           	opt stack 0
  2317  000003                     i2___wmul@multiplicand:
  2318                           	opt stack 0
  2319  000003                     i2___lwmod@divisor:
  2320                           	opt stack 0
  2321  000003                     i2strcpy@from:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x2
  2325  000003                     	ds	1
  2326  000004                     i2getRTC@i:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x3
  2330  000004                     	ds	1
  2331  000005                     i2___lwmod@counter:
  2332                           	opt stack 0
  2333  000005                     i2___wmul@product:
  2334                           	opt stack 0
  2335  000005                     i2strcpy@cp:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x4
  2339  000005                     	ds	1
  2340  000006                     ?i2___lwdiv:
  2341                           	opt stack 0
  2342  000006                     i2___lwdiv@dividend:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0x5
  2346  000006                     	ds	1
  2347  000007                     retrieveLog@logNum:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x6
  2351  000007                     	ds	1
  2352  000008                     i2___lwdiv@divisor:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x7
  2356  000008                     	ds	1
  2357  000009                     ??_retrieveLog:
  2358                           
  2359                           ; 1 bytes @ 0x8
  2360  000009                     	ds	1
  2361  00000A                     i2___lwdiv@quotient:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x9
  2365  00000A                     	ds	1
  2366  00000B                     retrieveLog@byte1:
  2367                           	opt stack 0
  2368                           
  2369                           ; 1 bytes @ 0xA
  2370  00000B                     	ds	1
  2371  00000C                     retrieveLog@byte2:
  2372                           	opt stack 0
  2373  00000C                     i2___lwdiv@counter:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0xB
  2377  00000C                     	ds	1
  2378  00000D                     ?i2_printf:
  2379                           	opt stack 0
  2380  00000D                     retrieveLog@byte3:
  2381                           	opt stack 0
  2382  00000D                     i2printf@f:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0xC
  2386  00000D                     	ds	1
  2387  00000E                     retrieveLog@i:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0xD
  2391  00000E                     	ds	2
  2392  000010                     retrieveLog@addr:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0xF
  2396  000010                     	ds	2
  2397  000012                     dispLogs@myLog:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x11
  2401  000012                     	ds	2
  2402  000014                     
  2403                           ; 1 bytes @ 0x13
  2404  000014                     	ds	5
  2405  000019                     ??i2_printf:
  2406                           
  2407                           ; 1 bytes @ 0x18
  2408  000019                     	ds	4
  2409  00001D                     i2printf@prec:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x1C
  2413  00001D                     	ds	1
  2414  00001E                     i2printf@cp:
  2415                           	opt stack 0
  2416                           
  2417                           ; 2 bytes @ 0x1D
  2418  00001E                     	ds	2
  2419  000020                     i2printf@ap:
  2420                           	opt stack 0
  2421                           
  2422                           ; 2 bytes @ 0x1F
  2423  000020                     	ds	2
  2424  000022                     i2printf@len:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0x21
  2428  000022                     	ds	2
  2429  000024                     i2printf@val:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x23
  2433  000024                     	ds	2
  2434  000026                     i2printf@flag:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x25
  2438  000026                     	ds	1
  2439  000027                     i2printf@c:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0x26
  2443  000027                     	ds	1
  2444  000028                     i2printf@width:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x27
  2448  000028                     	ds	2
  2449  00002A                     ??_printSortTimer:
  2450  00002A                     ??i2_printRTC:
  2451  00002A                     ?_inputHandler:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x29
  2455  00002A                     	ds	2
  2456  00002C                     ??_inputHandler:
  2457                           
  2458                           ; 1 bytes @ 0x2B
  2459  00002C                     	ds	1
  2460  00002D                     printSortTimer@hour:
  2461                           	opt stack 0
  2462  00002D                     i2printRTC@INT_time:
  2463                           	opt stack 0
  2464                           
  2465                           ; 14 bytes @ 0x2C
  2466  00002D                     	ds	2
  2467  00002F                     printSortTimer@curTime:
  2468                           	opt stack 0
  2469                           
  2470                           ; 14 bytes @ 0x2E
  2471  00002F                     	ds	12
  2472  00003B                     i2printRTC@RTC_month:
  2473                           	opt stack 0
  2474                           
  2475                           ; 2 bytes @ 0x3A
  2476  00003B                     	ds	2
  2477  00003D                     printSortTimer@start_sec:
  2478                           	opt stack 0
  2479  00003D                     i2printRTC@month:
  2480                           	opt stack 0
  2481                           
  2482                           ; 4 bytes @ 0x3C
  2483  00003D                     	ds	2
  2484  00003F                     printSortTimer@cur_sec:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x3E
  2488  00003F                     	ds	2
  2489  000041                     printSortTimer@min:
  2490                           	opt stack 0
  2491  000041                     i2printRTC@i:
  2492                           	opt stack 0
  2493                           
  2494                           ; 2 bytes @ 0x40
  2495  000041                     	ds	2
  2496  000043                     ??_updateMenu:
  2497  000043                     printSortTimer@sec:
  2498                           	opt stack 0
  2499                           
  2500                           ; 2 bytes @ 0x42
  2501  000043                     	ds	2
  2502  000045                     _printSortTimer$2334:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0x44
  2506  000045                     	ds	2
  2507  000047                     printSortTimer@timeDiff:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x46
  2511  000047                     	ds	2
  2512  000049                     printSortTimer@i:
  2513                           	opt stack 0
  2514                           
  2515                           ; 2 bytes @ 0x48
  2516  000049                     	ds	2
  2517  00004B                     ??_handler:
  2518                           
  2519                           ; 1 bytes @ 0x4A
  2520  00004B                     	ds	16
  2521                           tblptru	equ	0xFF8
  2522                           tblptrh	equ	0xFF7
  2523                           tblptrl	equ	0xFF6
  2524                           tablat	equ	0xFF5
  2525                           postinc0	equ	0xFEE
  2526                           wreg	equ	0xFE8
  2527                           postdec1	equ	0xFE5
  2528                           fsr1l	equ	0xFE1
  2529                           
  2530 ;;
  2531 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2532 ;;
  2533 ;; *************** function _main *****************
  2534 ;; Defined at:
  2535 ;;		line 18 in file "main.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;Total ram usage:        0 bytes
  2554 ;; Hardware stack levels required when called:   13
  2555 ;; This function calls:
  2556 ;;		_Test
  2557 ;;		_UI
  2558 ;;		_initLCD
  2559 ;;		_initTime
  2560 ;;		_initUI
  2561 ;;		_logRun
  2562 ;;		_machineConfig
  2563 ;;		_sort
  2564 ;;		_stopSignals
  2565 ;; This function is called by:
  2566 ;;		Startup code after reset
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text0
  2571  003280                     __ptext0:
  2572                           	opt stack 0
  2573  003280                     _main:
  2574                           	opt stack 18
  2575                           
  2576                           ;main.c: 19: machineConfig();
  2577                           
  2578                           ;incstack = 0
  2579  003280  EC6E  F01C         	call	_machineConfig	;wreg free
  2580                           
  2581                           ;main.c: 20: initLCD();
  2582  003284  EC88  F01D         	call	_initLCD	;wreg free
  2583                           
  2584                           ;main.c: 21: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2585  003288  0E20               	movlw	32
  2586  00328A  0100               	movlb	0	; () banked
  2587  00328C  6F80               	movwf	initTime@m& (0+255),b
  2588  00328E  0E13               	movlw	19
  2589  003290  0100               	movlb	0	; () banked
  2590  003292  6F81               	movwf	initTime@h& (0+255),b
  2591  003294  0E04               	movlw	4
  2592  003296  0100               	movlb	0	; () banked
  2593  003298  6F82               	movwf	initTime@w& (0+255),b
  2594  00329A  0E01               	movlw	1
  2595  00329C  0100               	movlb	0	; () banked
  2596  00329E  6F83               	movwf	initTime@DD& (0+255),b
  2597  0032A0  0E03               	movlw	3
  2598  0032A2  0100               	movlb	0	; () banked
  2599  0032A4  6F84               	movwf	initTime@MM& (0+255),b
  2600  0032A6  0E17               	movlw	23
  2601  0032A8  0100               	movlb	0	; () banked
  2602  0032AA  6F85               	movwf	initTime@YY& (0+255),b
  2603  0032AC  0E42               	movlw	66
  2604  0032AE  EC09  F020         	call	_initTime
  2605                           
  2606                           ;main.c: 22: initUI();
  2607  0032B2  ECD4  F01F         	call	_initUI	;wreg free
  2608                           
  2609                           ;main.c: 23: first = 1;
  2610  0032B6  0E00               	movlw	0
  2611  0032B8  0100               	movlb	0	; () banked
  2612  0032BA  6FE5               	movwf	(_first+1)& (0+255),b
  2613  0032BC  0E01               	movlw	1
  2614  0032BE  6FE4               	movwf	_first& (0+255),b
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;main.c: 34: switch(machine_state){
  2618                           
  2619                           ;main.c: 33: while(1){
  2620  0032C0  D018               	goto	l7585
  2621  0032C2                     l7567:
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 36: UI();
  2625  0032C2  EC09  F000         	call	_UI	;wreg free
  2626                           
  2627                           ;main.c: 37: break;
  2628  0032C6  D015               	goto	l7585
  2629  0032C8                     l7569:
  2630                           
  2631                           ;main.c: 39: sort();
  2632  0032C8  ECF8  F01F         	call	_sort	;wreg free
  2633                           
  2634                           ;main.c: 40: break;
  2635  0032CC  D012               	goto	l7585
  2636  0032CE                     l7571:
  2637                           
  2638                           ;main.c: 42: stopSignals();
  2639  0032CE  EC35  F020         	call	_stopSignals	;wreg free
  2640                           
  2641                           ;main.c: 43: logRun();
  2642  0032D2  EC58  F014         	call	_logRun	;wreg free
  2643                           
  2644                           ;main.c: 44: first = 1;
  2645  0032D6  0E00               	movlw	0
  2646  0032D8  0100               	movlb	0	; () banked
  2647  0032DA  6FE5               	movwf	(_first+1)& (0+255),b
  2648  0032DC  0E01               	movlw	1
  2649  0032DE  6FE4               	movwf	_first& (0+255),b
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 45: UI();
  2653  0032E0  EC09  F000         	call	_UI	;wreg free
  2654                           
  2655                           ;main.c: 46: break;
  2656  0032E4  D006               	goto	l7585
  2657  0032E6                     l7579:
  2658                           
  2659                           ;main.c: 48: Test();
  2660  0032E6  EC13  F016         	call	_Test	;wreg free
  2661                           
  2662                           ;main.c: 49: break;
  2663  0032EA  D003               	goto	l7585
  2664  0032EC                     l7581:
  2665                           
  2666                           ;main.c: 51: stopSignals();
  2667  0032EC  EC35  F020         	call	_stopSignals	;wreg free
  2668  0032F0                     l478:
  2669  0032F0  D7FF               	goto	l478
  2670  0032F2                     l7585:
  2671  0032F2  0100               	movlb	0	; () banked
  2672  0032F4  51FC               	movf	_machine_state& (0+255),w,b
  2673                           
  2674                           ; Switch size 1, requested type "space"
  2675                           ; Number of cases is 5, Range of values is 0 to 4
  2676                           ; switch strategies available:
  2677                           ; Name         Instructions Cycles
  2678                           ; simple_byte           16     9 (average)
  2679                           ;	Chosen strategy is simple_byte
  2680  0032F6  0A00               	xorlw	0	; case 0
  2681  0032F8  B4D8               	btfsc	status,2,c
  2682  0032FA  D7E3               	goto	l7567
  2683  0032FC  0A01               	xorlw	1	; case 1
  2684  0032FE  B4D8               	btfsc	status,2,c
  2685  003300  D7E3               	goto	l7569
  2686  003302  0A03               	xorlw	3	; case 2
  2687  003304  B4D8               	btfsc	status,2,c
  2688  003306  D7E3               	goto	l7571
  2689  003308  0A01               	xorlw	1	; case 3
  2690  00330A  B4D8               	btfsc	status,2,c
  2691  00330C  D7EC               	goto	l7579
  2692  00330E  0A07               	xorlw	7	; case 4
  2693  003310  B4D8               	btfsc	status,2,c
  2694  003312  D7EC               	goto	l7581
  2695                           
  2696                           ; BSR set to: 0
  2697                           
  2698                           ; BSR set to: 0
  2699  003314  D7EE               	goto	l7585
  2700  003316                     __end_of_main:
  2701                           	opt stack 0
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           postdec1	equ	0xFE5
  2709                           fsr1l	equ	0xFE1
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _stopSignals *****************
  2713 ;; Defined at:
  2714 ;;		line 60 in file "main.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    7
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_main
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           	psect	text1
  2743  00406A                     __ptext1:
  2744                           	opt stack 0
  2745  00406A                     _stopSignals:
  2746                           	opt stack 23
  2747                           
  2748                           ;main.c: 61: LATA = 0x00;
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;incstack = 0
  2752  00406A  0E00               	movlw	0
  2753  00406C  6E89               	movwf	3977,c	;volatile
  2754                           
  2755                           ;main.c: 62: LATB = 0x00;
  2756  00406E  0E00               	movlw	0
  2757  004070  6E8A               	movwf	3978,c	;volatile
  2758                           
  2759                           ;main.c: 63: LATC = 0x00;
  2760  004072  0E00               	movlw	0
  2761  004074  6E8B               	movwf	3979,c	;volatile
  2762                           
  2763                           ;main.c: 64: LATD = 0x00;
  2764  004076  0E00               	movlw	0
  2765  004078  6E8C               	movwf	3980,c	;volatile
  2766                           
  2767                           ;main.c: 65: LATE = 0x00;
  2768  00407A  0E00               	movlw	0
  2769  00407C  6E8D               	movwf	3981,c	;volatile
  2770  00407E  0012               	return		;funcret
  2771  004080                     __end_of_stopSignals:
  2772                           	opt stack 0
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           postinc0	equ	0xFEE
  2778                           wreg	equ	0xFE8
  2779                           postdec1	equ	0xFE5
  2780                           fsr1l	equ	0xFE1
  2781                           status	equ	0xFD8
  2782                           
  2783 ;; *************** function _sort *****************
  2784 ;; Defined at:
  2785 ;;		line 55 in file "sort.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;		None
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;Total ram usage:        0 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:   12
  2806 ;; This function calls:
  2807 ;;		_Distribution
  2808 ;;		_ID
  2809 ;;		_Loading
  2810 ;; This function is called by:
  2811 ;;		_main
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text2
  2816  003FF0                     __ptext2:
  2817                           	opt stack 0
  2818  003FF0                     _sort:
  2819                           	opt stack 18
  2820                           
  2821                           ;sort.c: 56: if(machine_state == Sorting_state){
  2822                           
  2823                           ;incstack = 0
  2824  003FF0  0100               	movlb	0	; () banked
  2825  003FF2  05FC               	decf	_machine_state& (0+255),w,b
  2826  003FF4  B4D8               	btfsc	status,2,c
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;sort.c: 57: Loading();
  2830  003FF6  ECFF  F016         	call	_Loading	;wreg free
  2831                           
  2832                           ;sort.c: 58: }
  2833                           ;sort.c: 59: if(machine_state == Sorting_state){
  2834  003FFA  0100               	movlb	0	; () banked
  2835  003FFC  05FC               	decf	_machine_state& (0+255),w,b
  2836  003FFE  B4D8               	btfsc	status,2,c
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;sort.c: 60: ID();
  2840  004000  ECF6  F014         	call	_ID	;wreg free
  2841                           
  2842                           ;sort.c: 61: }
  2843                           ;sort.c: 62: if(machine_state == Sorting_state){
  2844  004004  0100               	movlb	0	; () banked
  2845  004006  05FC               	decf	_machine_state& (0+255),w,b
  2846  004008  A4D8               	btfss	status,2,c
  2847  00400A  0012               	return	
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;sort.c: 63: Distribution();
  2851  00400C  ECB8  F013         	call	_Distribution	;wreg free
  2852  004010  0012               	return	
  2853  004012                     __end_of_sort:
  2854                           	opt stack 0
  2855                           tblptru	equ	0xFF8
  2856                           tblptrh	equ	0xFF7
  2857                           tblptrl	equ	0xFF6
  2858                           tablat	equ	0xFF5
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           postdec1	equ	0xFE5
  2862                           fsr1l	equ	0xFE1
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function _Loading *****************
  2866 ;; Defined at:
  2867 ;;		line 67 in file "sort.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;		None
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  addr            2   51[BANK0 ] unsigned short 
  2872 ;;  byte1           1   53[BANK0 ] unsigned char 
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;Total ram usage:        5 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:   11
  2889 ;; This function calls:
  2890 ;;		_EEPROM_read
  2891 ;;		_EEPROM_write
  2892 ;;		_getIR
  2893 ;;		_initGlobalVars
  2894 ;;		_initServos
  2895 ;;		_initSortTimer
  2896 ;;		_lcdInst
  2897 ;; This function is called by:
  2898 ;;		_sort
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text3
  2903  002DFE                     __ptext3:
  2904                           	opt stack 0
  2905  002DFE                     _Loading:
  2906                           	opt stack 18
  2907                           
  2908                           ;sort.c: 68: if(first){
  2909                           
  2910                           ;incstack = 0
  2911  002DFE  0100               	movlb	0	; () banked
  2912  002E00  51E4               	movf	_first& (0+255),w,b
  2913  002E02  0100               	movlb	0	; () banked
  2914  002E04  11E5               	iorwf	(_first+1)& (0+255),w,b
  2915  002E06  B4D8               	btfsc	status,2,c
  2916  002E08  D033               	goto	l6069
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;sort.c: 69: initGlobalVars();
  2920  002E0A  EC4A  F01B         	call	_initGlobalVars	;wreg free
  2921                           
  2922                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2923  002E0E  0E01               	movlw	1
  2924  002E10  EC66  F020         	call	_lcdInst
  2925  002E14  0E68               	movlw	104
  2926  002E16  0100               	movlb	0	; () banked
  2927  002E18  6FB1               	movwf	??_Loading& (0+255),b
  2928  002E1A  0EE4               	movlw	228
  2929  002E1C                     u6597:
  2930  002E1C  2EE8               	decfsz	wreg,f,c
  2931  002E1E  D7FE               	bra	u6597
  2932  002E20  2FB1               	decfsz	??_Loading& (0+255),f,b
  2933  002E22  D7FC               	bra	u6597
  2934  002E24  F000               	nop	
  2935                           
  2936                           ;sort.c: 71: initSortTimer();
  2937  002E26  EC9A  F018         	call	_initSortTimer	;wreg free
  2938                           
  2939                           ;sort.c: 76: sel = EEPROM_read(0);
  2940  002E2A  0E00               	movlw	0
  2941  002E2C  0100               	movlb	0	; () banked
  2942  002E2E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2943  002E30  0E00               	movlw	0
  2944  002E32  6F80               	movwf	EEPROM_read@address& (0+255),b
  2945  002E34  EC29  F020         	call	_EEPROM_read	;wreg free
  2946  002E38  0100               	movlb	0	; () banked
  2947  002E3A  6FFD               	movwf	_sel& (0+255),b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2951  002E3C  0100               	movlb	0	; () banked
  2952  002E3E  51FD               	movf	_sel& (0+255),w,b
  2953  002E40  0D0B               	mullw	11
  2954  002E42  0E01               	movlw	1
  2955  002E44  24F3               	addwf	prodl,w,c
  2956  002E46  0100               	movlb	0	; () banked
  2957  002E48  6FB3               	movwf	Loading@addr& (0+255),b
  2958  002E4A  0E00               	movlw	0
  2959  002E4C  20F4               	addwfc	prodh,w,c
  2960  002E4E  0100               	movlb	0	; () banked
  2961  002E50  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  2965  002E52  0E7F               	movlw	127
  2966  002E54  0100               	movlb	0	; () banked
  2967  002E56  6FB5               	movwf	Loading@byte1& (0+255),b
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;sort.c: 79: EEPROM_write(addr, byte1);
  2971  002E58  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  2972  002E5C  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  2973  002E60  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  2974  002E64  EC8B  F016         	call	_EEPROM_write	;wreg free
  2975                           
  2976                           ;sort.c: 82: LATAbits.LATA5 = 1;
  2977  002E68  8A89               	bsf	3977,5,c	;volatile
  2978                           
  2979                           ;sort.c: 85: initServos();
  2980  002E6A  EC41  F01C         	call	_initServos	;wreg free
  2981                           
  2982                           ;sort.c: 86: }
  2983  002E6E  0012               	return	
  2984  002E70                     l6069:
  2985                           
  2986                           ;sort.c: 87: else{
  2987                           ;sort.c: 90: if(!f_loadingNewCan){
  2988  002E70  0100               	movlb	0	; () banked
  2989  002E72  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  2990  002E74  0100               	movlb	0	; () banked
  2991  002E76  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2992  002E78  A4D8               	btfss	status,2,c
  2993  002E7A  D017               	goto	l6085
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;sort.c: 92: getIR();
  2997  002E7C  EC15  F01D         	call	_getIR	;wreg free
  2998                           
  2999                           ;sort.c: 94: if(!f_loadingNewCan){
  3000  002E80  0100               	movlb	0	; () banked
  3001  002E82  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3002  002E84  0100               	movlb	0	; () banked
  3003  002E86  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3004  002E88  B4D8               	btfsc	status,2,c
  3005  002E8A  0012               	return	
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;sort.c: 98: else{
  3009                           ;sort.c: 99: count_total++;
  3010                           
  3011                           ; BSR set to: 0
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;sort.c: 96: }
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;sort.c: 95: return;
  3018  002E8C  0100               	movlb	0	; () banked
  3019  002E8E  4BFE               	infsnz	_count_total& (0+255),f,b
  3020  002E90  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;sort.c: 100: if(count_total == 12){
  3024  002E92  0E0C               	movlw	12
  3025  002E94  0100               	movlb	0	; () banked
  3026  002E96  19FE               	xorwf	_count_total& (0+255),w,b
  3027  002E98  0100               	movlb	0	; () banked
  3028  002E9A  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3029  002E9C  A4D8               	btfss	status,2,c
  3030  002E9E  0012               	return	
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;sort.c: 101: f_lastCan = 1;
  3034  002EA0  0E00               	movlw	0
  3035  002EA2  6E74               	movwf	_f_lastCan+1,c
  3036  002EA4  0E01               	movlw	1
  3037  002EA6  6E73               	movwf	_f_lastCan,c
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;sort.c: 102: }
  3041                           ;sort.c: 103: }
  3042                           ;sort.c: 104: }
  3043                           
  3044                           ; BSR set to: 0
  3045  002EA8  0012               	return	
  3046  002EAA                     l6085:
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;sort.c: 107: else if(f_ID_receive){
  3050  002EAA  506B               	movf	_f_ID_receive,w,c
  3051  002EAC  106C               	iorwf	_f_ID_receive+1,w,c
  3052  002EAE  B4D8               	btfsc	status,2,c
  3053  002EB0  0012               	return	
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;sort.c: 108: f_loadingNewCan = 0;
  3057  002EB2  0E00               	movlw	0
  3058  002EB4  0100               	movlb	0	; () banked
  3059  002EB6  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3060  002EB8  0E00               	movlw	0
  3061  002EBA  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;sort.c: 109: LATAbits.LATA4 = 1;
  3065  002EBC  8889               	bsf	3977,4,c	;volatile
  3066                           
  3067                           ;sort.c: 110: f_can_coming_to_ID = 1;
  3068  002EBE  0E00               	movlw	0
  3069  002EC0  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3070  002EC2  0E01               	movlw	1
  3071  002EC4  6E6D               	movwf	_f_can_coming_to_ID,c
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;sort.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  3075  002EC6  0E05               	movlw	5
  3076  002EC8  0100               	movlb	0	; () banked
  3077  002ECA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3078  002ECC  0E0F               	movlw	15
  3079  002ECE  0100               	movlb	0	; () banked
  3080  002ED0  6FB1               	movwf	??_Loading& (0+255),b
  3081  002ED2  0EF1               	movlw	241
  3082  002ED4                     u6607:
  3083  002ED4  2EE8               	decfsz	wreg,f,c
  3084  002ED6  D7FE               	bra	u6607
  3085  002ED8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3086  002EDA  D7FC               	bra	u6607
  3087  002EDC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3088  002EDE  D7FA               	bra	u6607
  3089                           
  3090                           ;sort.c: 112: LATAbits.LATA4 = 0;
  3091  002EE0  9889               	bcf	3977,4,c	;volatile
  3092  002EE2  0012               	return	
  3093  002EE4                     __end_of_Loading:
  3094                           	opt stack 0
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           prodh	equ	0xFF4
  3100                           prodl	equ	0xFF3
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           postdec1	equ	0xFE5
  3104                           fsr1l	equ	0xFE1
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function _initSortTimer *****************
  3108 ;; Defined at:
  3109 ;;		line 228 in file "sort.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;		None
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  i               2    8[BANK0 ] int 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      void 
  3116 ;; Registers used:
  3117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;Total ram usage:        5 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:   10
  3130 ;; This function calls:
  3131 ;;		_getRTC
  3132 ;; This function is called by:
  3133 ;;		_Loading
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text4
  3138  003134                     __ptext4:
  3139                           	opt stack 0
  3140  003134                     _initSortTimer:
  3141                           	opt stack 18
  3142                           
  3143                           ;sort.c: 230: getRTC();
  3144                           
  3145                           ;incstack = 0
  3146  003134  EC15  F01A         	call	_getRTC	;wreg free
  3147                           
  3148                           ;sort.c: 231: for(int i = 0; i < 7; i++){
  3149  003138  0E00               	movlw	0
  3150  00313A  0100               	movlb	0	; () banked
  3151  00313C  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3152  00313E  0E00               	movlw	0
  3153  003140  6F88               	movwf	initSortTimer@i& (0+255),b
  3154  003142                     l5689:
  3155                           
  3156                           ; BSR set to: 0
  3157  003142  0100               	movlb	0	; () banked
  3158  003144  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3159  003146  D008               	goto	l5693
  3160  003148  0100               	movlb	0	; () banked
  3161  00314A  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3162  00314C  E140               	bnz	l5699
  3163  00314E  0E07               	movlw	7
  3164  003150  0100               	movlb	0	; () banked
  3165  003152  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3166  003154  B0D8               	btfsc	status,0,c
  3167  003156  D03B               	goto	l5699
  3168  003158                     l5693:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;sort.c: 232: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3172  003158  0E24               	movlw	low _time
  3173  00315A  0100               	movlb	0	; () banked
  3174  00315C  2588               	addwf	initSortTimer@i& (0+255),w,b
  3175  00315E  6ED9               	movwf	fsr2l,c
  3176  003160  0E01               	movlw	high _time
  3177  003162  0100               	movlb	0	; () banked
  3178  003164  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3179  003166  6EDA               	movwf	fsr2h,c
  3180  003168  50DF               	movf	indf2,w,c
  3181  00316A  0100               	movlb	0	; () banked
  3182  00316C  6F85               	movwf	??_initSortTimer& (0+255),b
  3183  00316E  0100               	movlb	0	; () banked
  3184  003170  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3185  003172  0E0F               	movlw	15
  3186  003174  1785               	andwf	??_initSortTimer& (0+255),f,b
  3187  003176  0E0F               	movlw	15
  3188  003178  0100               	movlb	0	; () banked
  3189  00317A  1785               	andwf	??_initSortTimer& (0+255),f,b
  3190  00317C  0100               	movlb	0	; () banked
  3191  00317E  5185               	movf	??_initSortTimer& (0+255),w,b
  3192  003180  0D0A               	mullw	10
  3193  003182  0E24               	movlw	low _time
  3194  003184  0100               	movlb	0	; () banked
  3195  003186  2588               	addwf	initSortTimer@i& (0+255),w,b
  3196  003188  6ED9               	movwf	fsr2l,c
  3197  00318A  0E01               	movlw	high _time
  3198  00318C  0100               	movlb	0	; () banked
  3199  00318E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3200  003190  6EDA               	movwf	fsr2h,c
  3201  003192  50DF               	movf	indf2,w,c
  3202  003194  0B0F               	andlw	15
  3203  003196  0100               	movlb	0	; () banked
  3204  003198  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3205  00319A  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3206  00319C  50F3               	movf	prodl,w,c
  3207  00319E  0100               	movlb	0	; () banked
  3208  0031A0  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3209  0031A2  50F4               	movf	prodh,w,c
  3210  0031A4  0100               	movlb	0	; () banked
  3211  0031A6  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3212  0031A8  90D8               	bcf	status,0,c
  3213  0031AA  0100               	movlb	0	; () banked
  3214  0031AC  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3215  0031AE  6ED9               	movwf	fsr2l,c
  3216  0031B0  0100               	movlb	0	; () banked
  3217  0031B2  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3218  0031B4  6EDA               	movwf	fsr2h,c
  3219  0031B6  0E0E               	movlw	low _startTime
  3220  0031B8  26D9               	addwf	fsr2l,f,c
  3221  0031BA  0E01               	movlw	high _startTime
  3222  0031BC  22DA               	addwfc	fsr2h,f,c
  3223  0031BE  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3224  0031C2  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3225                           
  3226                           ; BSR set to: 0
  3227  0031C6  0100               	movlb	0	; () banked
  3228  0031C8  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3229  0031CA  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3230  0031CC  D7BA               	goto	l5689
  3231  0031CE                     l5699:
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;sort.c: 233: }
  3235                           ;sort.c: 235: T0CON = 0b00010111;
  3236  0031CE  0E17               	movlw	23
  3237  0031D0  6ED5               	movwf	4053,c	;volatile
  3238                           
  3239                           ;sort.c: 244: TMR0H = 0b10000101;
  3240  0031D2  0E85               	movlw	133
  3241  0031D4  6ED7               	movwf	4055,c	;volatile
  3242                           
  3243                           ;sort.c: 245: TMR0L = 0b11101110;
  3244  0031D6  0EEE               	movlw	238
  3245  0031D8  6ED6               	movwf	4054,c	;volatile
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;sort.c: 246: TMR0ON = 1;
  3249  0031DA  8ED5               	bsf	4053,7,c	;volatile
  3250                           
  3251                           ; BSR set to: 0
  3252  0031DC  0012               	return		;funcret
  3253  0031DE                     __end_of_initSortTimer:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           postinc0	equ	0xFEE
  3262                           wreg	equ	0xFE8
  3263                           postdec1	equ	0xFE5
  3264                           fsr1l	equ	0xFE1
  3265                           indf2	equ	0xFDF
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _initServos *****************
  3273 ;; Defined at:
  3274 ;;		line 248 in file "sort.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2, status,0, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;Total ram usage:        1 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    8
  3295 ;; This function calls:
  3296 ;;		_updateServoPosition
  3297 ;; This function is called by:
  3298 ;;		_Loading
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text5
  3303  003882                     __ptext5:
  3304                           	opt stack 0
  3305  003882                     _initServos:
  3306                           	opt stack 20
  3307                           
  3308                           ;sort.c: 249: updateServoPosition(1500, 1);
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;incstack = 0
  3312  003882  0E05               	movlw	5
  3313  003884  0100               	movlb	0	; () banked
  3314  003886  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3315  003888  0EDC               	movlw	220
  3316  00388A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3317  00388C  0E00               	movlw	0
  3318  00388E  0100               	movlb	0	; () banked
  3319  003890  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3320  003892  0E01               	movlw	1
  3321  003894  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3322  003896  ECD6  F01A         	call	_updateServoPosition	;wreg free
  3323                           
  3324                           ;sort.c: 250: updateServoPosition(1000, 3);
  3325  00389A  0E03               	movlw	3
  3326  00389C  0100               	movlb	0	; () banked
  3327  00389E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3328  0038A0  0EE8               	movlw	232
  3329  0038A2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3330  0038A4  0E00               	movlw	0
  3331  0038A6  0100               	movlb	0	; () banked
  3332  0038A8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3333  0038AA  0E03               	movlw	3
  3334  0038AC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3335  0038AE  ECD6  F01A         	call	_updateServoPosition	;wreg free
  3336                           
  3337                           ;sort.c: 251: TMR1ON = 1;
  3338  0038B2  80CD               	bsf	4045,0,c	;volatile
  3339                           
  3340                           ;sort.c: 252: was_low_1 = 0;
  3341  0038B4  0E00               	movlw	0
  3342  0038B6  6E7A               	movwf	_was_low_1+1,c	;volatile
  3343  0038B8  0E00               	movlw	0
  3344  0038BA  6E79               	movwf	_was_low_1,c	;volatile
  3345                           
  3346                           ;sort.c: 253: _delay((unsigned long)((5)*(32000000/4000.0)));
  3347  0038BC  0E34               	movlw	52
  3348  0038BE  0100               	movlb	0	; () banked
  3349  0038C0  6F88               	movwf	??_initServos& (0+255),b
  3350  0038C2  0EF1               	movlw	241
  3351  0038C4                     u6617:
  3352  0038C4  2EE8               	decfsz	wreg,f,c
  3353  0038C6  D7FE               	bra	u6617
  3354  0038C8  2F88               	decfsz	??_initServos& (0+255),f,b
  3355  0038CA  D7FC               	bra	u6617
  3356  0038CC  D000               	nop2	
  3357                           
  3358                           ;sort.c: 254: TMR3ON = 1;
  3359  0038CE  80B1               	bsf	4017,0,c	;volatile
  3360                           
  3361                           ;sort.c: 255: was_low_3 = 0;
  3362  0038D0  0E00               	movlw	0
  3363  0038D2  6E7C               	movwf	_was_low_3+1,c	;volatile
  3364  0038D4  0E00               	movlw	0
  3365  0038D6  6E7B               	movwf	_was_low_3,c	;volatile
  3366                           
  3367                           ;sort.c: 256: LATCbits.LATC0 = 0;
  3368  0038D8  908B               	bcf	3979,0,c	;volatile
  3369  0038DA  0012               	return		;funcret
  3370  0038DC                     __end_of_initServos:
  3371                           	opt stack 0
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           postdec1	equ	0xFE5
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           postdec2	equ	0xFDD
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _initGlobalVars *****************
  3390 ;; Defined at:
  3391 ;;		line 209 in file "sort.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    7
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_Loading
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text6
  3420  003694                     __ptext6:
  3421                           	opt stack 0
  3422  003694                     _initGlobalVars:
  3423                           	opt stack 21
  3424                           
  3425                           ;sort.c: 211: first = 0;
  3426                           
  3427                           ;incstack = 0
  3428  003694  0E00               	movlw	0
  3429  003696  0100               	movlb	0	; () banked
  3430  003698  6FE5               	movwf	(_first+1)& (0+255),b
  3431  00369A  0E00               	movlw	0
  3432  00369C  6FE4               	movwf	_first& (0+255),b
  3433                           
  3434                           ;sort.c: 214: f_loadingNewCan = 0;
  3435  00369E  0E00               	movlw	0
  3436  0036A0  0100               	movlb	0	; () banked
  3437  0036A2  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3438  0036A4  0E00               	movlw	0
  3439  0036A6  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3440                           
  3441                           ;sort.c: 215: f_lastCan = 0;
  3442  0036A8  0E00               	movlw	0
  3443  0036AA  6E74               	movwf	_f_lastCan+1,c
  3444  0036AC  0E00               	movlw	0
  3445  0036AE  6E73               	movwf	_f_lastCan,c
  3446                           
  3447                           ;sort.c: 216: f_ID_receive = 1;
  3448  0036B0  0E00               	movlw	0
  3449  0036B2  6E6C               	movwf	_f_ID_receive+1,c
  3450  0036B4  0E01               	movlw	1
  3451  0036B6  6E6B               	movwf	_f_ID_receive,c
  3452                           
  3453                           ;sort.c: 217: f_can_coming_to_ID = 0;
  3454  0036B8  0E00               	movlw	0
  3455  0036BA  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3456  0036BC  0E00               	movlw	0
  3457  0036BE  6E6D               	movwf	_f_can_coming_to_ID,c
  3458                           
  3459                           ;sort.c: 218: f_can_coming_to_distribution = 0;
  3460  0036C0  0E00               	movlw	0
  3461  0036C2  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3462  0036C4  0E00               	movlw	0
  3463  0036C6  6E6F               	movwf	_f_can_coming_to_distribution,c
  3464                           
  3465                           ;sort.c: 219: f_can_distributed = 0;
  3466  0036C8  0E00               	movlw	0
  3467  0036CA  6E72               	movwf	_f_can_distributed+1,c
  3468  0036CC  0E00               	movlw	0
  3469  0036CE  6E71               	movwf	_f_can_distributed,c
  3470                           
  3471                           ;sort.c: 222: count_total = 0;
  3472  0036D0  0E00               	movlw	0
  3473  0036D2  0100               	movlb	0	; () banked
  3474  0036D4  6FFF               	movwf	(_count_total+1)& (0+255),b
  3475  0036D6  0E00               	movlw	0
  3476  0036D8  6FFE               	movwf	_count_total& (0+255),b
  3477                           
  3478                           ;sort.c: 223: count_pop_no_tab = 0;
  3479  0036DA  0E00               	movlw	0
  3480  0036DC  6E62               	movwf	_count_pop_no_tab+1,c
  3481  0036DE  0E00               	movlw	0
  3482  0036E0  6E61               	movwf	_count_pop_no_tab,c
  3483                           
  3484                           ;sort.c: 224: count_pop_w_tab = 0;
  3485  0036E2  0E00               	movlw	0
  3486  0036E4  6E64               	movwf	_count_pop_w_tab+1,c
  3487  0036E6  0E00               	movlw	0
  3488  0036E8  6E63               	movwf	_count_pop_w_tab,c
  3489                           
  3490                           ;sort.c: 225: count_can_w_lab = 0;
  3491  0036EA  0E00               	movlw	0
  3492  0036EC  6E60               	movwf	_count_can_w_lab+1,c
  3493  0036EE  0E00               	movlw	0
  3494  0036F0  6E5F               	movwf	_count_can_w_lab,c
  3495                           
  3496                           ;sort.c: 226: count_can_no_lab = 0;
  3497  0036F2  0E00               	movlw	0
  3498  0036F4  6E5E               	movwf	_count_can_no_lab+1,c
  3499  0036F6  0E00               	movlw	0
  3500  0036F8  6E5D               	movwf	_count_can_no_lab,c
  3501                           
  3502                           ; BSR set to: 0
  3503  0036FA  0012               	return		;funcret
  3504  0036FC                     __end_of_initGlobalVars:
  3505                           	opt stack 0
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postdec1	equ	0xFE5
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           postinc2	equ	0xFDE
  3518                           postdec2	equ	0xFDD
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _getIR *****************
  3524 ;; Defined at:
  3525 ;;		line 285 in file "sort.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;		None
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;Total ram usage:        2 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    9
  3546 ;; This function calls:
  3547 ;;		_readIR
  3548 ;; This function is called by:
  3549 ;;		_Loading
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text7
  3554  003A2A                     __ptext7:
  3555                           	opt stack 0
  3556  003A2A                     _getIR:
  3557                           	opt stack 19
  3558                           
  3559                           ;sort.c: 286: readIR();
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;incstack = 0
  3563  003A2A  EC62  F01D         	call	_readIR	;wreg free
  3564                           
  3565                           ;sort.c: 287: if(IR_signal==1){
  3566  003A2E  0100               	movlb	0	; () banked
  3567  003A30  05DA               	decf	_IR_signal& (0+255),w,b
  3568  003A32  0100               	movlb	0	; () banked
  3569  003A34  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3570  003A36  A4D8               	btfss	status,2,c
  3571  003A38  0012               	return	
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;sort.c: 288: _delay((unsigned long)((100)*(32000000/4000.0)));
  3575  003A3A  0E05               	movlw	5
  3576  003A3C  0100               	movlb	0	; () banked
  3577  003A3E  6F87               	movwf	(??_getIR+1)& (0+255),b
  3578  003A40  0E0F               	movlw	15
  3579  003A42  0100               	movlb	0	; () banked
  3580  003A44  6F86               	movwf	??_getIR& (0+255),b
  3581  003A46  0EF1               	movlw	241
  3582  003A48                     u6627:
  3583  003A48  2EE8               	decfsz	wreg,f,c
  3584  003A4A  D7FE               	bra	u6627
  3585  003A4C  2F86               	decfsz	??_getIR& (0+255),f,b
  3586  003A4E  D7FC               	bra	u6627
  3587  003A50  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3588  003A52  D7FA               	bra	u6627
  3589                           
  3590                           ;sort.c: 289: if(IR_signal==1){
  3591  003A54  0100               	movlb	0	; () banked
  3592  003A56  05DA               	decf	_IR_signal& (0+255),w,b
  3593  003A58  0100               	movlb	0	; () banked
  3594  003A5A  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3595  003A5C  A4D8               	btfss	status,2,c
  3596  003A5E  D006               	goto	l5779
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;sort.c: 290: f_loadingNewCan = 1;
  3600  003A60  0E00               	movlw	0
  3601  003A62  0100               	movlb	0	; () banked
  3602  003A64  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3603  003A66  0E01               	movlw	1
  3604  003A68  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3605                           
  3606                           ;sort.c: 291: }
  3607  003A6A  0012               	return	
  3608  003A6C                     l5779:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;sort.c: 292: else{
  3612                           ;sort.c: 293: f_loadingNewCan = 0;
  3613  003A6C  0E00               	movlw	0
  3614  003A6E  0100               	movlb	0	; () banked
  3615  003A70  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3616  003A72  0E00               	movlw	0
  3617  003A74  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3618                           
  3619                           ; BSR set to: 0
  3620  003A76  0012               	return	
  3621  003A78                     __end_of_getIR:
  3622                           	opt stack 0
  3623                           tblptru	equ	0xFF8
  3624                           tblptrh	equ	0xFF7
  3625                           tblptrl	equ	0xFF6
  3626                           tablat	equ	0xFF5
  3627                           prodh	equ	0xFF4
  3628                           prodl	equ	0xFF3
  3629                           postinc0	equ	0xFEE
  3630                           wreg	equ	0xFE8
  3631                           postdec1	equ	0xFE5
  3632                           fsr1l	equ	0xFE1
  3633                           indf2	equ	0xFDF
  3634                           postinc2	equ	0xFDE
  3635                           postdec2	equ	0xFDD
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function _ID *****************
  3641 ;; Defined at:
  3642 ;;		line 116 in file "sort.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;Total ram usage:        8 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    9
  3663 ;; This function calls:
  3664 ;;		_readMAG
  3665 ;; This function is called by:
  3666 ;;		_sort
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text8
  3671  0029EC                     __ptext8:
  3672                           	opt stack 0
  3673  0029EC                     _ID:
  3674                           	opt stack 20
  3675                           
  3676                           ;sort.c: 117: if(f_can_coming_to_ID){
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;incstack = 0
  3680  0029EC  506D               	movf	_f_can_coming_to_ID,w,c
  3681  0029EE  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3682  0029F0  B4D8               	btfsc	status,2,c
  3683  0029F2  0012               	return	
  3684                           
  3685                           ;sort.c: 119: _delay((unsigned long)((500)*(32000000/4000.0)));
  3686  0029F4  0E15               	movlw	21
  3687  0029F6  0100               	movlb	0	; () banked
  3688  0029F8  6F87               	movwf	(??_ID+1)& (0+255),b
  3689  0029FA  0E4B               	movlw	75
  3690  0029FC  0100               	movlb	0	; () banked
  3691  0029FE  6F86               	movwf	??_ID& (0+255),b
  3692  002A00  0EBE               	movlw	190
  3693  002A02                     u6637:
  3694  002A02  2EE8               	decfsz	wreg,f,c
  3695  002A04  D7FE               	bra	u6637
  3696  002A06  2F86               	decfsz	??_ID& (0+255),f,b
  3697  002A08  D7FC               	bra	u6637
  3698  002A0A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3699  002A0C  D7FA               	bra	u6637
  3700  002A0E  F000               	nop	
  3701                           
  3702                           ;sort.c: 124: int sensor_outputs[3];
  3703                           ;sort.c: 128: sensor_outputs[0] = PORTAbits.RA2;
  3704  002A10  A480               	btfss	3968,2,c	;volatile
  3705  002A12  D004               	goto	u4610
  3706  002A14  0100               	movlb	0	; () banked
  3707  002A16  6B86               	clrf	??_ID& (0+255),b
  3708  002A18  2B86               	incf	??_ID& (0+255),f,b
  3709  002A1A  D002               	goto	u4618
  3710  002A1C                     u4610:
  3711  002A1C  0100               	movlb	0	; () banked
  3712  002A1E  6B86               	clrf	??_ID& (0+255),b
  3713  002A20                     u4618:
  3714  002A20  0100               	movlb	0	; () banked
  3715  002A22  5186               	movf	??_ID& (0+255),w,b
  3716  002A24  0100               	movlb	0	; () banked
  3717  002A26  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3718  002A28  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;sort.c: 130: if(!sensor_outputs[0]){
  3722  002A2A  0100               	movlb	0	; () banked
  3723  002A2C  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3724  002A2E  0100               	movlb	0	; () banked
  3725  002A30  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3726  002A32  A4D8               	btfss	status,2,c
  3727  002A34  D028               	goto	l6117
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;sort.c: 131: readMAG();
  3731  002A36  EC3C  F01D         	call	_readMAG	;wreg free
  3732                           
  3733                           ;sort.c: 132: sensor_outputs[1] = MAG_signal;
  3734  002A3A  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3735  002A3E  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3736                           
  3737                           ;sort.c: 133: if(!sensor_outputs[1]){
  3738  002A42  0100               	movlb	0	; () banked
  3739  002A44  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3740  002A46  0100               	movlb	0	; () banked
  3741  002A48  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3742  002A4A  A4D8               	btfss	status,2,c
  3743  002A4C  D01C               	goto	l6117
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;sort.c: 134: LATAbits.LATA3 = 1;
  3747  002A4E  8689               	bsf	3977,3,c	;volatile
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;sort.c: 136: _delay((unsigned long)((100)*(32000000/4000.0)));
  3751  002A50  0E05               	movlw	5
  3752  002A52  0100               	movlb	0	; () banked
  3753  002A54  6F87               	movwf	(??_ID+1)& (0+255),b
  3754  002A56  0E0F               	movlw	15
  3755  002A58  0100               	movlb	0	; () banked
  3756  002A5A  6F86               	movwf	??_ID& (0+255),b
  3757  002A5C  0EF1               	movlw	241
  3758  002A5E                     u6647:
  3759  002A5E  2EE8               	decfsz	wreg,f,c
  3760  002A60  D7FE               	bra	u6647
  3761  002A62  2F86               	decfsz	??_ID& (0+255),f,b
  3762  002A64  D7FC               	bra	u6647
  3763  002A66  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3764  002A68  D7FA               	bra	u6647
  3765                           
  3766                           ;sort.c: 137: sensor_outputs[2] = PORTAbits.RA2;
  3767  002A6A  A480               	btfss	3968,2,c	;volatile
  3768  002A6C  D004               	goto	u4640
  3769  002A6E  0100               	movlb	0	; () banked
  3770  002A70  6B86               	clrf	??_ID& (0+255),b
  3771  002A72  2B86               	incf	??_ID& (0+255),f,b
  3772  002A74  D002               	goto	u4648
  3773  002A76                     u4640:
  3774  002A76  0100               	movlb	0	; () banked
  3775  002A78  6B86               	clrf	??_ID& (0+255),b
  3776  002A7A                     u4648:
  3777  002A7A  0100               	movlb	0	; () banked
  3778  002A7C  5186               	movf	??_ID& (0+255),w,b
  3779  002A7E  0100               	movlb	0	; () banked
  3780  002A80  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3781  002A82  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;sort.c: 138: LATAbits.LATA3 = 0;
  3785  002A84  9689               	bcf	3977,3,c	;volatile
  3786  002A86                     l6117:
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;sort.c: 139: }
  3790                           ;sort.c: 140: }
  3791                           ;sort.c: 143: if(!sensor_outputs[0]){
  3792  002A86  0100               	movlb	0	; () banked
  3793  002A88  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3794  002A8A  0100               	movlb	0	; () banked
  3795  002A8C  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3796  002A8E  A4D8               	btfss	status,2,c
  3797  002A90  D01E               	goto	l6135
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;sort.c: 144: if(!sensor_outputs[1]){
  3801  002A92  0100               	movlb	0	; () banked
  3802  002A94  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3803  002A96  0100               	movlb	0	; () banked
  3804  002A98  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3805  002A9A  A4D8               	btfss	status,2,c
  3806  002A9C  D012               	goto	l6131
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;sort.c: 145: if(!sensor_outputs[2]){
  3810  002A9E  0100               	movlb	0	; () banked
  3811  002AA0  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3812  002AA2  0100               	movlb	0	; () banked
  3813  002AA4  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3814  002AA6  A4D8               	btfss	status,2,c
  3815  002AA8  D006               	goto	l6127
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;sort.c: 146: count_pop_no_tab++;
  3819  002AAA  4A61               	infsnz	_count_pop_no_tab,f,c
  3820  002AAC  2A62               	incf	_count_pop_no_tab+1,f,c
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;sort.c: 147: cur_can = 0;
  3824  002AAE  0E00               	movlw	0
  3825  002AB0  6E66               	movwf	_cur_can+1,c
  3826  002AB2  0E00               	movlw	0
  3827  002AB4  D011               	goto	L3
  3828  002AB6                     l6127:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;sort.c: 149: else{
  3832                           ;sort.c: 150: count_pop_w_tab++;
  3833  002AB6  4A63               	infsnz	_count_pop_w_tab,f,c
  3834  002AB8  2A64               	incf	_count_pop_w_tab+1,f,c
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;sort.c: 151: cur_can = 1;
  3838  002ABA  0E00               	movlw	0
  3839  002ABC  6E66               	movwf	_cur_can+1,c
  3840  002ABE  0E01               	movlw	1
  3841  002AC0  D00B               	goto	L3
  3842  002AC2                     l6131:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;sort.c: 154: else{
  3846                           ;sort.c: 155: count_can_w_lab++;
  3847  002AC2  4A5F               	infsnz	_count_can_w_lab,f,c
  3848  002AC4  2A60               	incf	_count_can_w_lab+1,f,c
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;sort.c: 156: cur_can = 2;
  3852  002AC6  0E00               	movlw	0
  3853  002AC8  6E66               	movwf	_cur_can+1,c
  3854  002ACA  0E02               	movlw	2
  3855  002ACC  D005               	goto	L3
  3856  002ACE                     l6135:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;sort.c: 159: else{
  3860                           ;sort.c: 160: count_can_no_lab++;
  3861  002ACE  4A5D               	infsnz	_count_can_no_lab,f,c
  3862  002AD0  2A5E               	incf	_count_can_no_lab+1,f,c
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;sort.c: 161: cur_can = 3;
  3866  002AD2  0E00               	movlw	0
  3867  002AD4  6E66               	movwf	_cur_can+1,c
  3868  002AD6  0E03               	movlw	3
  3869  002AD8                     L3:
  3870  002AD8  6E65               	movwf	_cur_can,c
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;sort.c: 162: }
  3874                           ;sort.c: 164: LATCbits.LATC0 = 1;
  3875                           
  3876                           ; BSR set to: 0
  3877  002ADA  808B               	bsf	3979,0,c	;volatile
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;sort.c: 165: f_can_coming_to_distribution = 1;
  3881  002ADC  0E00               	movlw	0
  3882  002ADE  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3883  002AE0  0E01               	movlw	1
  3884  002AE2  6E6F               	movwf	_f_can_coming_to_distribution,c
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;sort.c: 166: _delay((unsigned long)((500)*(32000000/4000.0)));
  3888  002AE4  0E15               	movlw	21
  3889  002AE6  0100               	movlb	0	; () banked
  3890  002AE8  6F87               	movwf	(??_ID+1)& (0+255),b
  3891  002AEA  0E4B               	movlw	75
  3892  002AEC  0100               	movlb	0	; () banked
  3893  002AEE  6F86               	movwf	??_ID& (0+255),b
  3894  002AF0  0EBE               	movlw	190
  3895  002AF2                     u6657:
  3896  002AF2  2EE8               	decfsz	wreg,f,c
  3897  002AF4  D7FE               	bra	u6657
  3898  002AF6  2F86               	decfsz	??_ID& (0+255),f,b
  3899  002AF8  D7FC               	bra	u6657
  3900  002AFA  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3901  002AFC  D7FA               	bra	u6657
  3902  002AFE  F000               	nop	
  3903                           
  3904                           ;sort.c: 167: LATCbits.LATC0 = 0;
  3905  002B00  908B               	bcf	3979,0,c	;volatile
  3906                           
  3907                           ;sort.c: 169: f_can_coming_to_ID = 0;
  3908  002B02  0E00               	movlw	0
  3909  002B04  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3910  002B06  0E00               	movlw	0
  3911  002B08  6E6D               	movwf	_f_can_coming_to_ID,c
  3912  002B0A  0012               	return	
  3913  002B0C                     __end_of_ID:
  3914                           	opt stack 0
  3915                           tblptru	equ	0xFF8
  3916                           tblptrh	equ	0xFF7
  3917                           tblptrl	equ	0xFF6
  3918                           tablat	equ	0xFF5
  3919                           prodh	equ	0xFF4
  3920                           prodl	equ	0xFF3
  3921                           postinc0	equ	0xFEE
  3922                           wreg	equ	0xFE8
  3923                           postdec1	equ	0xFE5
  3924                           fsr1l	equ	0xFE1
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _Distribution *****************
  3933 ;; Defined at:
  3934 ;;		line 172 in file "sort.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;Total ram usage:        2 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    8
  3955 ;; This function calls:
  3956 ;;		_updateServoPosition
  3957 ;; This function is called by:
  3958 ;;		_sort
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text9
  3963  002770                     __ptext9:
  3964                           	opt stack 0
  3965  002770                     _Distribution:
  3966                           	opt stack 21
  3967                           
  3968                           ;sort.c: 173: if(f_can_coming_to_distribution){
  3969                           
  3970                           ;incstack = 0
  3971  002770  506F               	movf	_f_can_coming_to_distribution,w,c
  3972  002772  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  3973  002774  B4D8               	btfsc	status,2,c
  3974  002776  0012               	return	
  3975  002778  D034               	goto	l6163
  3976  00277A                     l6153:
  3977                           
  3978                           ;sort.c: 178: updateServoPosition(1000, 1);
  3979  00277A  0E03               	movlw	3
  3980  00277C  0100               	movlb	0	; () banked
  3981  00277E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3982  002780  0EE8               	movlw	232
  3983  002782  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3984  002784  0E00               	movlw	0
  3985  002786  0100               	movlb	0	; () banked
  3986  002788  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3987  00278A  0E01               	movlw	1
  3988  00278C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3989  00278E  ECD6  F01A         	call	_updateServoPosition	;wreg free
  3990                           
  3991                           ;sort.c: 179: break;
  3992  002792  D03E               	goto	l6165
  3993  002794                     l6155:
  3994                           
  3995                           ;sort.c: 181: updateServoPosition(1333, 1);
  3996  002794  0E05               	movlw	5
  3997  002796  0100               	movlb	0	; () banked
  3998  002798  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3999  00279A  0E35               	movlw	53
  4000  00279C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4001  00279E  0E00               	movlw	0
  4002  0027A0  0100               	movlb	0	; () banked
  4003  0027A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4004  0027A4  0E01               	movlw	1
  4005  0027A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4006  0027A8  ECD6  F01A         	call	_updateServoPosition	;wreg free
  4007                           
  4008                           ;sort.c: 182: break;
  4009  0027AC  D031               	goto	l6165
  4010  0027AE                     l6157:
  4011                           
  4012                           ;sort.c: 184: updateServoPosition(1666, 1);
  4013  0027AE  0E06               	movlw	6
  4014  0027B0  0100               	movlb	0	; () banked
  4015  0027B2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4016  0027B4  0E82               	movlw	130
  4017  0027B6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4018  0027B8  0E00               	movlw	0
  4019  0027BA  0100               	movlb	0	; () banked
  4020  0027BC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4021  0027BE  0E01               	movlw	1
  4022  0027C0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4023  0027C2  ECD6  F01A         	call	_updateServoPosition	;wreg free
  4024                           
  4025                           ;sort.c: 185: break;
  4026  0027C6  D024               	goto	l6165
  4027  0027C8                     l6159:
  4028                           
  4029                           ;sort.c: 187: updateServoPosition(2000, 1);
  4030  0027C8  0E07               	movlw	7
  4031  0027CA  0100               	movlb	0	; () banked
  4032  0027CC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4033  0027CE  0ED0               	movlw	208
  4034  0027D0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4035  0027D2  0E00               	movlw	0
  4036  0027D4  0100               	movlb	0	; () banked
  4037  0027D6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4038  0027D8  0E01               	movlw	1
  4039  0027DA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4040  0027DC  ECD6  F01A         	call	_updateServoPosition	;wreg free
  4041                           
  4042                           ;sort.c: 191: }
  4043                           
  4044                           ;sort.c: 190: break;
  4045                           
  4046                           ;sort.c: 189: default:
  4047                           
  4048                           ;sort.c: 188: break;
  4049  0027E0  D017               	goto	l6165
  4050  0027E2                     l6163:
  4051  0027E2  C065  F088         	movff	_cur_can,??_Distribution
  4052  0027E6  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4053                           
  4054                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4055                           ; Switch size 1, requested type "space"
  4056                           ; Number of cases is 1, Range of values is 0 to 0
  4057                           ; switch strategies available:
  4058                           ; Name         Instructions Cycles
  4059                           ; simple_byte            4     3 (average)
  4060                           ;	Chosen strategy is simple_byte
  4061  0027EA  0100               	movlb	0	; () banked
  4062  0027EC  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4063  0027EE  0A00               	xorlw	0	; case 0
  4064  0027F0  A4D8               	btfss	status,2,c
  4065  0027F2  D00E               	goto	l6165
  4066                           
  4067                           ; BSR set to: 0
  4068                           ; Switch size 1, requested type "space"
  4069                           ; Number of cases is 4, Range of values is 0 to 3
  4070                           ; switch strategies available:
  4071                           ; Name         Instructions Cycles
  4072                           ; simple_byte           13     7 (average)
  4073                           ;	Chosen strategy is simple_byte
  4074  0027F4  0100               	movlb	0	; () banked
  4075  0027F6  5188               	movf	??_Distribution& (0+255),w,b
  4076  0027F8  0A00               	xorlw	0	; case 0
  4077  0027FA  B4D8               	btfsc	status,2,c
  4078  0027FC  D7BE               	goto	l6153
  4079  0027FE  0A01               	xorlw	1	; case 1
  4080  002800  B4D8               	btfsc	status,2,c
  4081  002802  D7C8               	goto	l6155
  4082  002804  0A03               	xorlw	3	; case 2
  4083  002806  B4D8               	btfsc	status,2,c
  4084  002808  D7D2               	goto	l6157
  4085  00280A  0A01               	xorlw	1	; case 3
  4086  00280C  B4D8               	btfsc	status,2,c
  4087  00280E  D7DC               	goto	l6159
  4088  002810                     l6165:
  4089                           
  4090                           ;sort.c: 192: _delay((unsigned long)((500)*(32000000/4000.0)));
  4091  002810  0E15               	movlw	21
  4092  002812  0100               	movlb	0	; () banked
  4093  002814  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4094  002816  0E4B               	movlw	75
  4095  002818  0100               	movlb	0	; () banked
  4096  00281A  6F88               	movwf	??_Distribution& (0+255),b
  4097  00281C  0EBE               	movlw	190
  4098  00281E                     u6667:
  4099  00281E  2EE8               	decfsz	wreg,f,c
  4100  002820  D7FE               	bra	u6667
  4101  002822  2F88               	decfsz	??_Distribution& (0+255),f,b
  4102  002824  D7FC               	bra	u6667
  4103  002826  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4104  002828  D7FA               	bra	u6667
  4105  00282A  F000               	nop	
  4106                           
  4107                           ;sort.c: 195: updateServoPosition(1500, 3);
  4108  00282C  0E05               	movlw	5
  4109  00282E  0100               	movlb	0	; () banked
  4110  002830  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4111  002832  0EDC               	movlw	220
  4112  002834  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4113  002836  0E00               	movlw	0
  4114  002838  0100               	movlb	0	; () banked
  4115  00283A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4116  00283C  0E03               	movlw	3
  4117  00283E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4118  002840  ECD6  F01A         	call	_updateServoPosition	;wreg free
  4119                           
  4120                           ;sort.c: 196: _delay((unsigned long)((500)*(32000000/4000.0)));
  4121  002844  0E15               	movlw	21
  4122  002846  0100               	movlb	0	; () banked
  4123  002848  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4124  00284A  0E4B               	movlw	75
  4125  00284C  0100               	movlb	0	; () banked
  4126  00284E  6F88               	movwf	??_Distribution& (0+255),b
  4127  002850  0EBE               	movlw	190
  4128  002852                     u6677:
  4129  002852  2EE8               	decfsz	wreg,f,c
  4130  002854  D7FE               	bra	u6677
  4131  002856  2F88               	decfsz	??_Distribution& (0+255),f,b
  4132  002858  D7FC               	bra	u6677
  4133  00285A  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4134  00285C  D7FA               	bra	u6677
  4135  00285E  F000               	nop	
  4136                           
  4137                           ;sort.c: 199: updateServoPosition(1500, 1);
  4138  002860  0E05               	movlw	5
  4139  002862  0100               	movlb	0	; () banked
  4140  002864  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4141  002866  0EDC               	movlw	220
  4142  002868  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4143  00286A  0E00               	movlw	0
  4144  00286C  0100               	movlb	0	; () banked
  4145  00286E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4146  002870  0E01               	movlw	1
  4147  002872  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4148  002874  ECD6  F01A         	call	_updateServoPosition	;wreg free
  4149                           
  4150                           ;sort.c: 200: updateServoPosition(1000, 3);
  4151  002878  0E03               	movlw	3
  4152  00287A  0100               	movlb	0	; () banked
  4153  00287C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4154  00287E  0EE8               	movlw	232
  4155  002880  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4156  002882  0E00               	movlw	0
  4157  002884  0100               	movlb	0	; () banked
  4158  002886  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4159  002888  0E03               	movlw	3
  4160  00288A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4161  00288C  ECD6  F01A         	call	_updateServoPosition	;wreg free
  4162                           
  4163                           ;sort.c: 201: f_can_coming_to_distribution = 0;
  4164  002890  0E00               	movlw	0
  4165  002892  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4166  002894  0E00               	movlw	0
  4167  002896  6E6F               	movwf	_f_can_coming_to_distribution,c
  4168                           
  4169                           ;sort.c: 202: f_can_distributed = 1;
  4170  002898  0E00               	movlw	0
  4171  00289A  6E72               	movwf	_f_can_distributed+1,c
  4172  00289C  0E01               	movlw	1
  4173  00289E  6E71               	movwf	_f_can_distributed,c
  4174                           
  4175                           ;sort.c: 203: if(f_lastCan == 1){
  4176  0028A0  0473               	decf	_f_lastCan,w,c
  4177  0028A2  1074               	iorwf	_f_lastCan+1,w,c
  4178  0028A4  A4D8               	btfss	status,2,c
  4179  0028A6  0012               	return	
  4180                           
  4181                           ;sort.c: 204: machine_state = DoneSorting_state;
  4182  0028A8  0E02               	movlw	2
  4183  0028AA  0100               	movlb	0	; () banked
  4184  0028AC  6FFC               	movwf	_machine_state& (0+255),b
  4185                           
  4186                           ; BSR set to: 0
  4187  0028AE  0012               	return	
  4188  0028B0                     __end_of_Distribution:
  4189                           	opt stack 0
  4190                           tblptru	equ	0xFF8
  4191                           tblptrh	equ	0xFF7
  4192                           tblptrl	equ	0xFF6
  4193                           tablat	equ	0xFF5
  4194                           prodh	equ	0xFF4
  4195                           prodl	equ	0xFF3
  4196                           postinc0	equ	0xFEE
  4197                           wreg	equ	0xFE8
  4198                           postdec1	equ	0xFE5
  4199                           fsr1l	equ	0xFE1
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           fsr2h	equ	0xFDA
  4204                           fsr2l	equ	0xFD9
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function _machineConfig *****************
  4208 ;; Defined at:
  4209 ;;		line 15 in file "MachineConfig.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    7
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text10
  4238  0038DC                     __ptext10:
  4239                           	opt stack 0
  4240  0038DC                     _machineConfig:
  4241                           	opt stack 23
  4242                           
  4243                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4244                           
  4245                           ;incstack = 0
  4246  0038DC  0EF0               	movlw	240
  4247  0038DE  6ED3               	movwf	4051,c	;volatile
  4248                           
  4249                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4250  0038E0  8C9B               	bsf	3995,6,c	;volatile
  4251                           
  4252                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4253  0038E2  0E47               	movlw	71
  4254  0038E4  6E92               	movwf	3986,c	;volatile
  4255                           
  4256                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4257  0038E6  0EF2               	movlw	242
  4258  0038E8  6E93               	movwf	3987,c	;volatile
  4259                           
  4260                           ;MachineConfig.c: 27: TRISC = 0x00;
  4261  0038EA  0E00               	movlw	0
  4262  0038EC  6E94               	movwf	3988,c	;volatile
  4263                           
  4264                           ;MachineConfig.c: 31: TRISD = 0x00;
  4265  0038EE  0E00               	movlw	0
  4266  0038F0  6E95               	movwf	3989,c	;volatile
  4267                           
  4268                           ;MachineConfig.c: 34: TRISE = 0x00;
  4269  0038F2  0E00               	movlw	0
  4270  0038F4  6E96               	movwf	3990,c	;volatile
  4271                           
  4272                           ;MachineConfig.c: 37: LATA = 0x00;
  4273  0038F6  0E00               	movlw	0
  4274  0038F8  6E89               	movwf	3977,c	;volatile
  4275                           
  4276                           ;MachineConfig.c: 38: LATB = 0x00;
  4277  0038FA  0E00               	movlw	0
  4278  0038FC  6E8A               	movwf	3978,c	;volatile
  4279                           
  4280                           ;MachineConfig.c: 39: LATC = 0x00;
  4281  0038FE  0E00               	movlw	0
  4282  003900  6E8B               	movwf	3979,c	;volatile
  4283                           
  4284                           ;MachineConfig.c: 40: LATD = 0x00;
  4285  003902  0E00               	movlw	0
  4286  003904  6E8C               	movwf	3980,c	;volatile
  4287                           
  4288                           ;MachineConfig.c: 41: LATE = 0x00;
  4289  003906  0E00               	movlw	0
  4290  003908  6E8D               	movwf	3981,c	;volatile
  4291                           
  4292                           ;MachineConfig.c: 43: nRBPU = 0;
  4293  00390A  9EF1               	bcf	intcon2,7,c	;volatile
  4294                           
  4295                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4296  00390C  0E00               	movlw	0
  4297  00390E  6EC2               	movwf	4034,c	;volatile
  4298                           
  4299                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4300  003910  0E0D               	movlw	13
  4301  003912  6EC1               	movwf	4033,c	;volatile
  4302                           
  4303                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4304  003914  0E00               	movlw	0
  4305  003916  6EB5               	movwf	4021,c	;volatile
  4306                           
  4307                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4308  003918  96B4               	bcf	4020,3,c	;volatile
  4309                           
  4310                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4311  00391A  0EB1               	movlw	177
  4312  00391C  6EC0               	movwf	4032,c	;volatile
  4313                           
  4314                           ;MachineConfig.c: 55: INT1IE = 1;
  4315  00391E  86F0               	bsf	intcon3,3,c	;volatile
  4316                           
  4317                           ;MachineConfig.c: 57: TMR0IE = 1;
  4318  003920  8AF2               	bsf	intcon,5,c	;volatile
  4319                           
  4320                           ;MachineConfig.c: 58: TMR1IE = 1;
  4321  003922  809D               	bsf	3997,0,c	;volatile
  4322                           
  4323                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4324  003924  0EB0               	movlw	176
  4325  003926  6ECD               	movwf	4045,c	;volatile
  4326                           
  4327                           ;MachineConfig.c: 60: TMR2IE = 1;
  4328  003928  829D               	bsf	3997,1,c	;volatile
  4329                           
  4330                           ;MachineConfig.c: 61: TMR3IE = 1;
  4331  00392A  82A0               	bsf	4000,1,c	;volatile
  4332                           
  4333                           ;MachineConfig.c: 62: PEIE = 1;
  4334  00392C  8CF2               	bsf	intcon,6,c	;volatile
  4335                           
  4336                           ;MachineConfig.c: 63: ADIE = 0;
  4337  00392E  9C9D               	bcf	3997,6,c	;volatile
  4338                           
  4339                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  4340  003930  9EF2               	bcf	intcon,7,c	;volatile
  4341  003932  0012               	return		;funcret
  4342  003934                     __end_of_machineConfig:
  4343                           	opt stack 0
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           intcon	equ	0xFF2
  4351                           intcon2	equ	0xFF1
  4352                           intcon3	equ	0xFF0
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           postdec1	equ	0xFE5
  4356                           fsr1l	equ	0xFE1
  4357                           indf2	equ	0xFDF
  4358                           postinc2	equ	0xFDE
  4359                           postdec2	equ	0xFDD
  4360                           fsr2h	equ	0xFDA
  4361                           fsr2l	equ	0xFD9
  4362                           status	equ	0xFD8
  4363                           
  4364 ;; *************** function _logRun *****************
  4365 ;; Defined at:
  4366 ;;		line 84 in file "EEPROM.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;		None
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4371 ;;  i               2   55[BANK0 ] int 
  4372 ;;  num             1   49[BANK0 ] unsigned char 
  4373 ;;  addr            2   57[BANK0 ] unsigned short 
  4374 ;;  byte11          1   54[BANK0 ] unsigned char 
  4375 ;;  byte3           1   52[BANK0 ] unsigned char 
  4376 ;;  byte2           1   51[BANK0 ] unsigned char 
  4377 ;;  byte1           1   50[BANK0 ] unsigned char 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  1    wreg      void 
  4380 ;; Registers used:
  4381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;Total ram usage:       10 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:   11
  4394 ;; This function calls:
  4395 ;;		_EEPROM_read
  4396 ;;		_EEPROM_write
  4397 ;; This function is called by:
  4398 ;;		_main
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text11
  4403  0028B0                     __ptext11:
  4404                           	opt stack 0
  4405  0028B0                     _logRun:
  4406                           	opt stack 19
  4407                           
  4408                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4409                           
  4410                           ;incstack = 0
  4411  0028B0  0E00               	movlw	0
  4412  0028B2  0100               	movlb	0	; () banked
  4413  0028B4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4414  0028B6  0E00               	movlw	0
  4415  0028B8  6F80               	movwf	EEPROM_read@address& (0+255),b
  4416  0028BA  EC29  F020         	call	_EEPROM_read	;wreg free
  4417  0028BE  0100               	movlb	0	; () banked
  4418  0028C0  6FFD               	movwf	_sel& (0+255),b
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4422  0028C2  0100               	movlb	0	; () banked
  4423  0028C4  51FD               	movf	_sel& (0+255),w,b
  4424  0028C6  0D0B               	mullw	11
  4425  0028C8  0E01               	movlw	1
  4426  0028CA  24F3               	addwf	prodl,w,c
  4427  0028CC  0100               	movlb	0	; () banked
  4428  0028CE  6FB9               	movwf	logRun@addr& (0+255),b
  4429  0028D0  0E00               	movlw	0
  4430  0028D2  20F4               	addwfc	prodh,w,c
  4431  0028D4  0100               	movlb	0	; () banked
  4432  0028D6  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;EEPROM.c: 101: if (sel < 3){
  4436  0028D8  0E03               	movlw	3
  4437  0028DA  0100               	movlb	0	; () banked
  4438  0028DC  61FD               	cpfslt	_sel& (0+255),b
  4439  0028DE  D00E               	goto	l7435
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4443  0028E0  0100               	movlb	0	; () banked
  4444  0028E2  29FD               	incf	_sel& (0+255),w,b
  4445  0028E4  0100               	movlb	0	; () banked
  4446  0028E6  6FB1               	movwf	logRun@num& (0+255),b
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4450  0028E8  0E00               	movlw	0
  4451  0028EA  0100               	movlb	0	; () banked
  4452  0028EC  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4453  0028EE  0E00               	movlw	0
  4454  0028F0  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4455  0028F2  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4456  0028F6  EC8B  F016         	call	_EEPROM_write	;wreg free
  4457                           
  4458                           ;EEPROM.c: 104: }
  4459  0028FA  D00A               	goto	l7437
  4460  0028FC                     l7435:
  4461                           
  4462                           ;EEPROM.c: 105: else{
  4463                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4464  0028FC  0E00               	movlw	0
  4465  0028FE  0100               	movlb	0	; () banked
  4466  002900  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4467  002902  0E00               	movlw	0
  4468  002904  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4469  002906  0E00               	movlw	0
  4470  002908  0100               	movlb	0	; () banked
  4471  00290A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4472  00290C  EC8B  F016         	call	_EEPROM_write	;wreg free
  4473  002910                     l7437:
  4474                           
  4475                           ;EEPROM.c: 107: }
  4476                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4477  002910  0100               	movlb	0	; () banked
  4478  002912  51FE               	movf	_count_total& (0+255),w,b
  4479  002914  0980               	iorlw	128
  4480  002916  0100               	movlb	0	; () banked
  4481  002918  6FB2               	movwf	logRun@byte1& (0+255),b
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4485  00291A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4486  00291E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4487  002922  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4488  002926  EC8B  F016         	call	_EEPROM_write	;wreg free
  4489                           
  4490                           ;EEPROM.c: 112: addr++;
  4491  00292A  0100               	movlb	0	; () banked
  4492  00292C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4493  00292E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4497  002930  3861               	swapf	_count_pop_no_tab,w,c
  4498  002932  0BF0               	andlw	240
  4499  002934  1063               	iorwf	_count_pop_w_tab,w,c
  4500  002936  0100               	movlb	0	; () banked
  4501  002938  6FB3               	movwf	logRun@byte2& (0+255),b
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4505  00293A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4506  00293E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4507  002942  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4508  002946  EC8B  F016         	call	_EEPROM_write	;wreg free
  4509                           
  4510                           ;EEPROM.c: 117: addr++;
  4511  00294A  0100               	movlb	0	; () banked
  4512  00294C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4513  00294E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4517  002950  385F               	swapf	_count_can_w_lab,w,c
  4518  002952  0BF0               	andlw	240
  4519  002954  105D               	iorwf	_count_can_no_lab,w,c
  4520  002956  0100               	movlb	0	; () banked
  4521  002958  6FB4               	movwf	logRun@byte3& (0+255),b
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4525  00295A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4526  00295E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4527  002962  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4528  002966  EC8B  F016         	call	_EEPROM_write	;wreg free
  4529                           
  4530                           ;EEPROM.c: 120: addr++;
  4531  00296A  0100               	movlb	0	; () banked
  4532  00296C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4533  00296E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4537  002970  0E00               	movlw	0
  4538  002972  0100               	movlb	0	; () banked
  4539  002974  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4540  002976  0E00               	movlw	0
  4541  002978  6FB7               	movwf	logRun@i& (0+255),b
  4542                           
  4543                           ; BSR set to: 0
  4544  00297A  0100               	movlb	0	; () banked
  4545  00297C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4546  00297E  D008               	goto	l7461
  4547  002980  0100               	movlb	0	; () banked
  4548  002982  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4549  002984  E128               	bnz	l923
  4550  002986  0E07               	movlw	7
  4551  002988  0100               	movlb	0	; () banked
  4552  00298A  5DB7               	subwf	logRun@i& (0+255),w,b
  4553  00298C  B0D8               	btfsc	status,0,c
  4554  00298E  D023               	goto	l923
  4555  002990                     l7461:
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4559  002990  90D8               	bcf	status,0,c
  4560  002992  0100               	movlb	0	; () banked
  4561  002994  35B7               	rlcf	logRun@i& (0+255),w,b
  4562  002996  6ED9               	movwf	fsr2l,c
  4563  002998  0100               	movlb	0	; () banked
  4564  00299A  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4565  00299C  6EDA               	movwf	fsr2h,c
  4566  00299E  0E0E               	movlw	low _startTime
  4567  0029A0  26D9               	addwf	fsr2l,f,c
  4568  0029A2  0E01               	movlw	high _startTime
  4569  0029A4  22DA               	addwfc	fsr2h,f,c
  4570  0029A6  50DF               	movf	indf2,w,c
  4571  0029A8  0100               	movlb	0	; () banked
  4572  0029AA  6FB5               	movwf	logRun@byte_i& (0+255),b
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4576  0029AC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4577  0029B0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4578  0029B4  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4579  0029B8  EC8B  F016         	call	_EEPROM_write	;wreg free
  4580                           
  4581                           ;EEPROM.c: 126: addr++;
  4582  0029BC  0100               	movlb	0	; () banked
  4583  0029BE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4584  0029C0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4585                           
  4586                           ; BSR set to: 0
  4587  0029C2  0100               	movlb	0	; () banked
  4588  0029C4  4BB7               	infsnz	logRun@i& (0+255),f,b
  4589  0029C6  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4590                           
  4591                           ; BSR set to: 0
  4592  0029C8  0100               	movlb	0	; () banked
  4593  0029CA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4594  0029CC  D7E1               	goto	l7461
  4595  0029CE  0100               	movlb	0	; () banked
  4596  0029D0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4597  0029D2  E101               	bnz	u6420
  4598  0029D4  D7D8               	goto	L4
  4599  0029D6                     u6420:
  4600  0029D6                     l923:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;EEPROM.c: 127: }
  4604                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4605  0029D6  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4609  0029DA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4610  0029DE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4611  0029E2  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4612  0029E6  EC8B  F016         	call	_EEPROM_write	;wreg free
  4613  0029EA  0012               	return		;funcret
  4614  0029EC                     __end_of_logRun:
  4615                           	opt stack 0
  4616                           tblptru	equ	0xFF8
  4617                           tblptrh	equ	0xFF7
  4618                           tblptrl	equ	0xFF6
  4619                           tablat	equ	0xFF5
  4620                           prodh	equ	0xFF4
  4621                           prodl	equ	0xFF3
  4622                           intcon	equ	0xFF2
  4623                           intcon2	equ	0xFF1
  4624                           intcon3	equ	0xFF0
  4625                           postinc0	equ	0xFEE
  4626                           wreg	equ	0xFE8
  4627                           postdec1	equ	0xFE5
  4628                           fsr1l	equ	0xFE1
  4629                           indf2	equ	0xFDF
  4630                           postinc2	equ	0xFDE
  4631                           postdec2	equ	0xFDD
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function _EEPROM_write *****************
  4637 ;; Defined at:
  4638 ;;		line 32 in file "EEPROM.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  address         2   43[BANK0 ] unsigned short 
  4641 ;;  data            1   45[BANK0 ] unsigned char 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  i               1   48[BANK0 ] unsigned char 
  4644 ;;  i               1   47[BANK0 ] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:        6 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:   10
  4661 ;; This function calls:
  4662 ;;		_EEPROM_read
  4663 ;;		_lcdInst
  4664 ;;		_printf
  4665 ;; This function is called by:
  4666 ;;		_Loading
  4667 ;;		_logRun
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text12
  4672  002D16                     __ptext12:
  4673                           	opt stack 0
  4674  002D16                     _EEPROM_write:
  4675                           	opt stack 18
  4676                           
  4677                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4678                           
  4679                           ;incstack = 0
  4680  002D16  84A6               	bsf	4006,2,c	;volatile
  4681                           
  4682                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4683  002D18  0100               	movlb	0	; () banked
  4684  002D1A  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4685  002D1C  6EAA               	movwf	4010,c	;volatile
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4689  002D1E  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;EEPROM.c: 39: EEDATA = data;
  4693  002D22  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4697  002D26  9EA6               	bcf	4006,7,c	;volatile
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4701  002D28  9CA6               	bcf	4006,6,c	;volatile
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4705  002D2A  9EF2               	bcf	intcon,7,c	;volatile
  4706                           
  4707                           ;EEPROM.c: 45: EECON2 = 0x55;
  4708  002D2C  0E55               	movlw	85
  4709  002D2E  6EA7               	movwf	4007,c	;volatile
  4710                           
  4711                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4712  002D30  0EAA               	movlw	170
  4713  002D32  6EA7               	movwf	4007,c	;volatile
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4717  002D34  82A6               	bsf	4006,1,c	;volatile
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4721  002D36  8EF2               	bsf	intcon,7,c	;volatile
  4722  002D38                     l901:
  4723  002D38  A8A1               	btfss	4001,4,c	;volatile
  4724  002D3A  D7FE               	goto	l901
  4725                           
  4726                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4727  002D3C  98A1               	bcf	4001,4,c	;volatile
  4728                           
  4729                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4730  002D3E  94A6               	bcf	4006,2,c	;volatile
  4731                           
  4732                           ;EEPROM.c: 57: if(debug){
  4733  002D40  0100               	movlb	0	; () banked
  4734  002D42  51E0               	movf	_debug& (0+255),w,b
  4735  002D44  0100               	movlb	0	; () banked
  4736  002D46  11E1               	iorwf	(_debug+1)& (0+255),w,b
  4737  002D48  B4D8               	btfsc	status,2,c
  4738  002D4A  0012               	return	
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4742  002D4C  0E01               	movlw	1
  4743  002D4E  EC66  F020         	call	_lcdInst
  4744  002D52  0E68               	movlw	104
  4745  002D54  0100               	movlb	0	; () banked
  4746  002D56  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4747  002D58  0EE4               	movlw	228
  4748  002D5A                     u6687:
  4749  002D5A  2EE8               	decfsz	wreg,f,c
  4750  002D5C  D7FE               	bra	u6687
  4751  002D5E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4752  002D60  D7FC               	bra	u6687
  4753  002D62  F000               	nop	
  4754                           
  4755                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4756  002D64  0E80               	movlw	128
  4757  002D66  EC66  F020         	call	_lcdInst
  4758                           
  4759                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4760  002D6A  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4761  002D6E  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4762  002D72  EC29  F020         	call	_EEPROM_read	;wreg free
  4763  002D76  0100               	movlb	0	; () banked
  4764  002D78  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4765  002D7A  A4D8               	btfss	status,2,c
  4766  002D7C  D024               	goto	l5743
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4770  002D7E  0E82               	movlw	low STR_66
  4771  002D80  0100               	movlb	0	; () banked
  4772  002D82  6F8E               	movwf	printf@f& (0+255),b
  4773  002D84  0EFB               	movlw	high STR_66
  4774  002D86  0100               	movlb	0	; () banked
  4775  002D88  6F8F               	movwf	(printf@f+1)& (0+255),b
  4776  002D8A  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4777  002D8E  0100               	movlb	0	; () banked
  4778  002D90  6B91               	clrf	(?_printf+3)& (0+255),b
  4779  002D92  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4780  002D96  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4781  002D9A  EC9C  F008         	call	_printf	;wreg free
  4782                           
  4783                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4784  002D9E  0E00               	movlw	0
  4785  002DA0  0100               	movlb	0	; () banked
  4786  002DA2  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4787  002DA4                     l5735:
  4788                           
  4789                           ; BSR set to: 0
  4790  002DA4  0E63               	movlw	99
  4791  002DA6  0100               	movlb	0	; () banked
  4792  002DA8  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4793  002DAA  D001               	goto	l5739
  4794  002DAC  0012               	return	
  4795  002DAE                     l5739:
  4796                           
  4797                           ; BSR set to: 0
  4798  002DAE  0E68               	movlw	104
  4799  002DB0  0100               	movlb	0	; () banked
  4800  002DB2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4801  002DB4  0EE4               	movlw	228
  4802  002DB6                     u6697:
  4803  002DB6  2EE8               	decfsz	wreg,f,c
  4804  002DB8  D7FE               	bra	u6697
  4805  002DBA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4806  002DBC  D7FC               	bra	u6697
  4807  002DBE  F000               	nop	
  4808  002DC0  0100               	movlb	0	; () banked
  4809  002DC2  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4810  002DC4  D7EF               	goto	l5735
  4811  002DC6                     l5743:
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4815  002DC6  0EBC               	movlw	low STR_67
  4816  002DC8  0100               	movlb	0	; () banked
  4817  002DCA  6F8E               	movwf	printf@f& (0+255),b
  4818  002DCC  0EFF               	movlw	high STR_67
  4819  002DCE  0100               	movlb	0	; () banked
  4820  002DD0  6F8F               	movwf	(printf@f+1)& (0+255),b
  4821  002DD2  EC9C  F008         	call	_printf	;wreg free
  4822  002DD6  0E00               	movlw	0
  4823  002DD8  0100               	movlb	0	; () banked
  4824  002DDA  6FB0               	movwf	EEPROM_write@i_1310& (0+255),b
  4825  002DDC                     l5747:
  4826                           
  4827                           ; BSR set to: 0
  4828  002DDC  0E63               	movlw	99
  4829  002DDE  0100               	movlb	0	; () banked
  4830  002DE0  65B0               	cpfsgt	EEPROM_write@i_1310& (0+255),b
  4831  002DE2  D001               	goto	l5751
  4832  002DE4  0012               	return	
  4833  002DE6                     l5751:
  4834                           
  4835                           ; BSR set to: 0
  4836  002DE6  0E68               	movlw	104
  4837  002DE8  0100               	movlb	0	; () banked
  4838  002DEA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4839  002DEC  0EE4               	movlw	228
  4840  002DEE                     u6707:
  4841  002DEE  2EE8               	decfsz	wreg,f,c
  4842  002DF0  D7FE               	bra	u6707
  4843  002DF2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4844  002DF4  D7FC               	bra	u6707
  4845  002DF6  F000               	nop	
  4846  002DF8  0100               	movlb	0	; () banked
  4847  002DFA  2BB0               	incf	EEPROM_write@i_1310& (0+255),f,b
  4848  002DFC  D7EF               	goto	l5747
  4849  002DFE                     __end_of_EEPROM_write:
  4850                           	opt stack 0
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           intcon	equ	0xFF2
  4858                           intcon2	equ	0xFF1
  4859                           intcon3	equ	0xFF0
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           postdec1	equ	0xFE5
  4863                           fsr1l	equ	0xFE1
  4864                           indf2	equ	0xFDF
  4865                           postinc2	equ	0xFDE
  4866                           postdec2	equ	0xFDD
  4867                           fsr2h	equ	0xFDA
  4868                           fsr2l	equ	0xFD9
  4869                           status	equ	0xFD8
  4870                           
  4871 ;; *************** function _EEPROM_read *****************
  4872 ;; Defined at:
  4873 ;;		line 68 in file "EEPROM.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  address         2    0[BANK0 ] unsigned short 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;		None
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      unsigned char 
  4880 ;; Registers used:
  4881 ;;		wreg, status,2
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4887 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;Total ram usage:        2 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    7
  4894 ;; This function calls:
  4895 ;;		Nothing
  4896 ;; This function is called by:
  4897 ;;		_Loading
  4898 ;;		_EEPROM_write
  4899 ;;		_logRun
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           	psect	text13
  4904  004052                     __ptext13:
  4905                           	opt stack 0
  4906  004052                     _EEPROM_read:
  4907                           	opt stack 20
  4908                           
  4909                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;incstack = 0
  4913  004052  0100               	movlb	0	; () banked
  4914  004054  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4915  004056  6EAA               	movwf	4010,c	;volatile
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4919  004058  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4923  00405C  9EA6               	bcf	4006,7,c	;volatile
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4927  00405E  9CA6               	bcf	4006,6,c	;volatile
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4931  004060  80A6               	bsf	4006,0,c	;volatile
  4932  004062                     l914:
  4933  004062  B0A6               	btfsc	4006,0,c	;volatile
  4934  004064  D7FE               	goto	l914
  4935                           
  4936                           ;EEPROM.c: 81: return EEDATA;
  4937  004066  50A8               	movf	4008,w,c	;volatile
  4938  004068  0012               	return	
  4939  00406A                     __end_of_EEPROM_read:
  4940                           	opt stack 0
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           prodh	equ	0xFF4
  4946                           prodl	equ	0xFF3
  4947                           intcon	equ	0xFF2
  4948                           intcon2	equ	0xFF1
  4949                           intcon3	equ	0xFF0
  4950                           postinc0	equ	0xFEE
  4951                           wreg	equ	0xFE8
  4952                           postdec1	equ	0xFE5
  4953                           fsr1l	equ	0xFE1
  4954                           indf2	equ	0xFDF
  4955                           postinc2	equ	0xFDE
  4956                           postdec2	equ	0xFDD
  4957                           fsr2h	equ	0xFDA
  4958                           fsr2l	equ	0xFD9
  4959                           status	equ	0xFD8
  4960                           
  4961 ;; *************** function _initUI *****************
  4962 ;; Defined at:
  4963 ;;		line 62 in file "UI.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      void 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;Total ram usage:        0 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:   12
  4984 ;; This function calls:
  4985 ;;		_change_state_to_menu_start
  4986 ;;		_loadRTC
  4987 ;; This function is called by:
  4988 ;;		_main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           	psect	text14
  4993  003FA8                     __ptext14:
  4994                           	opt stack 0
  4995  003FA8                     _initUI:
  4996                           	opt stack 18
  4997                           
  4998                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4999                           
  5000                           ;incstack = 0
  5001  003FA8  8EF2               	bsf	intcon,7,c	;volatile
  5002                           
  5003                           ;UI.c: 64: machine_state = UI_state;
  5004  003FAA  0E00               	movlw	0
  5005  003FAC  0100               	movlb	0	; () banked
  5006  003FAE  6FFC               	movwf	_machine_state& (0+255),b
  5007                           
  5008                           ;UI.c: 65: logstate = 0;
  5009  003FB0  0E00               	movlw	0
  5010  003FB2  0100               	movlb	0	; () banked
  5011  003FB4  6FF7               	movwf	(_logstate+1)& (0+255),b
  5012  003FB6  0E00               	movlw	0
  5013  003FB8  6FF6               	movwf	_logstate& (0+255),b
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;UI.c: 67: loadRTC();
  5017  003FBA  EC8B  F019         	call	_loadRTC	;wreg free
  5018                           
  5019                           ;UI.c: 69: change_state_to_menu_start();
  5020  003FBE  EC59  F01F         	call	_change_state_to_menu_start	;wreg free
  5021                           
  5022                           ;UI.c: 70: firstboot = 1;
  5023  003FC2  0E00               	movlw	0
  5024  003FC4  6E76               	movwf	_firstboot+1,c
  5025  003FC6  0E01               	movlw	1
  5026  003FC8  6E75               	movwf	_firstboot,c
  5027  003FCA  0012               	return		;funcret
  5028  003FCC                     __end_of_initUI:
  5029                           	opt stack 0
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           intcon	equ	0xFF2
  5037                           intcon2	equ	0xFF1
  5038                           intcon3	equ	0xFF0
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           postdec1	equ	0xFE5
  5042                           fsr1l	equ	0xFE1
  5043                           indf2	equ	0xFDF
  5044                           postinc2	equ	0xFDE
  5045                           postdec2	equ	0xFDD
  5046                           fsr2h	equ	0xFDA
  5047                           fsr2l	equ	0xFD9
  5048                           status	equ	0xFD8
  5049                           
  5050 ;; *************** function _loadRTC *****************
  5051 ;; Defined at:
  5052 ;;		line 28 in file "RTC.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;		None
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  i               2   22[BANK0 ] int 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  1    wreg      void 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;Total ram usage:        3 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    9
  5073 ;; This function calls:
  5074 ;;		_I2C_Master_Init
  5075 ;;		_I2C_Master_Start
  5076 ;;		_I2C_Master_Stop
  5077 ;;		_I2C_Master_Write
  5078 ;; This function is called by:
  5079 ;;		_initUI
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text15
  5084  003316                     __ptext15:
  5085                           	opt stack 0
  5086  003316                     _loadRTC:
  5087                           	opt stack 20
  5088                           
  5089                           ;RTC.c: 30: I2C_Master_Init(10000);
  5090                           
  5091                           ;incstack = 0
  5092  003316  0E10               	movlw	16
  5093  003318  0100               	movlb	0	; () banked
  5094  00331A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5095  00331C  0E27               	movlw	39
  5096  00331E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5097  003320  0E00               	movlw	0
  5098  003322  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5099  003324  0E00               	movlw	0
  5100  003326  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5101  003328  ECE3  F01B         	call	_I2C_Master_Init	;wreg free
  5102                           
  5103                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5104  00332C  9EF2               	bcf	intcon,7,c	;volatile
  5105                           
  5106                           ;RTC.c: 34: I2C_Master_Start();
  5107  00332E  EC8C  F020         	call	_I2C_Master_Start	;wreg free
  5108                           
  5109                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5110  003332  0E00               	movlw	0
  5111  003334  0100               	movlb	0	; () banked
  5112  003336  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5113  003338  0ED0               	movlw	208
  5114  00333A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5115  00333C  EC7A  F020         	call	_I2C_Master_Write	;wreg free
  5116                           
  5117                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5118  003340  0E00               	movlw	0
  5119  003342  0100               	movlb	0	; () banked
  5120  003344  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5121  003346  0E00               	movlw	0
  5122  003348  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5123  00334A  EC7A  F020         	call	_I2C_Master_Write	;wreg free
  5124                           
  5125                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5126  00334E  0E00               	movlw	0
  5127  003350  0100               	movlb	0	; () banked
  5128  003352  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5129  003354  0E00               	movlw	0
  5130  003356  6F96               	movwf	loadRTC@i& (0+255),b
  5131  003358                     l5859:
  5132                           
  5133                           ; BSR set to: 0
  5134  003358  0100               	movlb	0	; () banked
  5135  00335A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5136  00335C  D008               	goto	l5863
  5137  00335E  0100               	movlb	0	; () banked
  5138  003360  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5139  003362  E11B               	bnz	l5869
  5140  003364  0E07               	movlw	7
  5141  003366  0100               	movlb	0	; () banked
  5142  003368  5D96               	subwf	loadRTC@i& (0+255),w,b
  5143  00336A  B0D8               	btfsc	status,0,c
  5144  00336C  D016               	goto	l5869
  5145  00336E                     l5863:
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5149  00336E  0E24               	movlw	low _time
  5150  003370  0100               	movlb	0	; () banked
  5151  003372  2596               	addwf	loadRTC@i& (0+255),w,b
  5152  003374  6ED9               	movwf	fsr2l,c
  5153  003376  0E01               	movlw	high _time
  5154  003378  0100               	movlb	0	; () banked
  5155  00337A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5156  00337C  6EDA               	movwf	fsr2h,c
  5157  00337E  50DF               	movf	indf2,w,c
  5158  003380  0100               	movlb	0	; () banked
  5159  003382  6F95               	movwf	??_loadRTC& (0+255),b
  5160  003384  0100               	movlb	0	; () banked
  5161  003386  5195               	movf	??_loadRTC& (0+255),w,b
  5162  003388  0100               	movlb	0	; () banked
  5163  00338A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5164  00338C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5165  00338E  EC7A  F020         	call	_I2C_Master_Write	;wreg free
  5166  003392  0100               	movlb	0	; () banked
  5167  003394  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5168  003396  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5169  003398  D7DF               	goto	l5859
  5170  00339A                     l5869:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;RTC.c: 39: }
  5174                           ;RTC.c: 40: I2C_Master_Stop();
  5175  00339A  EC88  F020         	call	_I2C_Master_Stop	;wreg free
  5176                           
  5177                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5178  00339E  8EF2               	bsf	intcon,7,c	;volatile
  5179  0033A0  0012               	return		;funcret
  5180  0033A2                     __end_of_loadRTC:
  5181                           	opt stack 0
  5182                           tblptru	equ	0xFF8
  5183                           tblptrh	equ	0xFF7
  5184                           tblptrl	equ	0xFF6
  5185                           tablat	equ	0xFF5
  5186                           prodh	equ	0xFF4
  5187                           prodl	equ	0xFF3
  5188                           intcon	equ	0xFF2
  5189                           intcon2	equ	0xFF1
  5190                           intcon3	equ	0xFF0
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           postdec1	equ	0xFE5
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function _I2C_Master_Init *****************
  5203 ;; Defined at:
  5204 ;;		line 15 in file "I2C.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  c               4   13[BANK0 ] const unsigned long 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg, status,2, status,0, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5218 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;Total ram usage:        8 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:    8
  5225 ;; This function calls:
  5226 ;;		___lldiv
  5227 ;; This function is called by:
  5228 ;;		_loadRTC
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text16
  5233  0037C6                     __ptext16:
  5234                           	opt stack 0
  5235  0037C6                     _I2C_Master_Init:
  5236                           	opt stack 20
  5237                           
  5238                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5239                           
  5240                           ;incstack = 0
  5241  0037C6  0E00               	movlw	0
  5242  0037C8  6EC7               	movwf	4039,c	;volatile
  5243                           
  5244                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5245  0037CA  0E28               	movlw	40
  5246  0037CC  6EC6               	movwf	4038,c	;volatile
  5247                           
  5248                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5249  0037CE  0E00               	movlw	0
  5250  0037D0  6EC5               	movwf	4037,c	;volatile
  5251                           
  5252                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5253  0037D2  0E00               	movlw	0
  5254  0037D4  0100               	movlb	0	; () banked
  5255  0037D6  6F80               	movwf	___lldiv@dividend& (0+255),b
  5256  0037D8  0E48               	movlw	72
  5257  0037DA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5258  0037DC  0EE8               	movlw	232
  5259  0037DE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5260  0037E0  0E01               	movlw	1
  5261  0037E2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5262  0037E4  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5263  0037E8  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5264  0037EC  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5265  0037F0  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5266  0037F4  0E02               	movlw	2
  5267  0037F6                     u4245:
  5268  0037F6  90D8               	bcf	status,0,c
  5269  0037F8  0100               	movlb	0	; () banked
  5270  0037FA  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5271  0037FC  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5272  0037FE  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5273  003800  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5274  003802  2EE8               	decfsz	wreg,f,c
  5275  003804  D7F8               	goto	u4245
  5276  003806  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5277  00380A  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5278  00380E  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5279  003812  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5280  003816  EC3C  F018         	call	___lldiv	;wreg free
  5281  00381A  0100               	movlb	0	; () banked
  5282  00381C  0580               	decf	?___lldiv& (0+255),w,b
  5283  00381E  6EC8               	movwf	4040,c	;volatile
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;I2C.c: 22: TRISC3 = 1;
  5287  003820  8694               	bsf	3988,3,c	;volatile
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;I2C.c: 23: TRISC4 = 1;
  5291  003822  8894               	bsf	3988,4,c	;volatile
  5292                           
  5293                           ; BSR set to: 0
  5294  003824  0012               	return		;funcret
  5295  003826                     __end_of_I2C_Master_Init:
  5296                           	opt stack 0
  5297                           tblptru	equ	0xFF8
  5298                           tblptrh	equ	0xFF7
  5299                           tblptrl	equ	0xFF6
  5300                           tablat	equ	0xFF5
  5301                           prodh	equ	0xFF4
  5302                           prodl	equ	0xFF3
  5303                           intcon	equ	0xFF2
  5304                           intcon2	equ	0xFF1
  5305                           intcon3	equ	0xFF0
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           postdec1	equ	0xFE5
  5309                           fsr1l	equ	0xFE1
  5310                           indf2	equ	0xFDF
  5311                           postinc2	equ	0xFDE
  5312                           postdec2	equ	0xFDD
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function ___lldiv *****************
  5318 ;; Defined at:
  5319 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  dividend        4    0[BANK0 ] unsigned long 
  5322 ;;  divisor         4    4[BANK0 ] unsigned long 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  quotient        4    8[BANK0 ] unsigned long 
  5325 ;;  counter         1   12[BANK0 ] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  4    0[BANK0 ] unsigned long 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, status,0
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5335 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;Total ram usage:       13 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    7
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_I2C_Master_Init
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text17
  5350  003078                     __ptext17:
  5351                           	opt stack 0
  5352  003078                     ___lldiv:
  5353                           	opt stack 20
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;incstack = 0
  5357  003078  0E00               	movlw	0
  5358  00307A  0100               	movlb	0	; () banked
  5359  00307C  6F88               	movwf	___lldiv@quotient& (0+255),b
  5360  00307E  0E00               	movlw	0
  5361  003080  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5362  003082  0E00               	movlw	0
  5363  003084  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5364  003086  0E00               	movlw	0
  5365  003088  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5366                           
  5367                           ; BSR set to: 0
  5368  00308A  0100               	movlb	0	; () banked
  5369  00308C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5370  00308E  0100               	movlb	0	; () banked
  5371  003090  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5372  003092  0100               	movlb	0	; () banked
  5373  003094  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5374  003096  0100               	movlb	0	; () banked
  5375  003098  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5376  00309A  B4D8               	btfsc	status,2,c
  5377  00309C  D042               	goto	l1583
  5378                           
  5379                           ; BSR set to: 0
  5380  00309E  0E01               	movlw	1
  5381  0030A0  0100               	movlb	0	; () banked
  5382  0030A2  6F8C               	movwf	___lldiv@counter& (0+255),b
  5383  0030A4  D008               	goto	l5307
  5384  0030A6                     l5305:
  5385                           
  5386                           ; BSR set to: 0
  5387  0030A6  0100               	movlb	0	; () banked
  5388  0030A8  90D8               	bcf	status,0,c
  5389  0030AA  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5390  0030AC  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5391  0030AE  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5392  0030B0  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5393  0030B2  0100               	movlb	0	; () banked
  5394  0030B4  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5395  0030B6                     l5307:
  5396                           
  5397                           ; BSR set to: 0
  5398  0030B6  0100               	movlb	0	; () banked
  5399  0030B8  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5400  0030BA  D7F5               	goto	l5305
  5401  0030BC                     l5309:
  5402                           
  5403                           ; BSR set to: 0
  5404  0030BC  0100               	movlb	0	; () banked
  5405  0030BE  90D8               	bcf	status,0,c
  5406  0030C0  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5407  0030C2  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5408  0030C4  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5409  0030C6  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5410                           
  5411                           ; BSR set to: 0
  5412  0030C8  0100               	movlb	0	; () banked
  5413  0030CA  5184               	movf	___lldiv@divisor& (0+255),w,b
  5414  0030CC  0100               	movlb	0	; () banked
  5415  0030CE  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5416  0030D0  0100               	movlb	0	; () banked
  5417  0030D2  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5418  0030D4  0100               	movlb	0	; () banked
  5419  0030D6  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5420  0030D8  0100               	movlb	0	; () banked
  5421  0030DA  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5422  0030DC  0100               	movlb	0	; () banked
  5423  0030DE  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5424  0030E0  0100               	movlb	0	; () banked
  5425  0030E2  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5426  0030E4  0100               	movlb	0	; () banked
  5427  0030E6  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5428  0030E8  A0D8               	btfss	status,0,c
  5429  0030EA  D012               	goto	l5317
  5430                           
  5431                           ; BSR set to: 0
  5432  0030EC  0100               	movlb	0	; () banked
  5433  0030EE  5184               	movf	___lldiv@divisor& (0+255),w,b
  5434  0030F0  0100               	movlb	0	; () banked
  5435  0030F2  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5436  0030F4  0100               	movlb	0	; () banked
  5437  0030F6  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5438  0030F8  0100               	movlb	0	; () banked
  5439  0030FA  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5440  0030FC  0100               	movlb	0	; () banked
  5441  0030FE  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5442  003100  0100               	movlb	0	; () banked
  5443  003102  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5444  003104  0100               	movlb	0	; () banked
  5445  003106  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5446  003108  0100               	movlb	0	; () banked
  5447  00310A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5448                           
  5449                           ; BSR set to: 0
  5450  00310C  0100               	movlb	0	; () banked
  5451  00310E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5452  003110                     l5317:
  5453                           
  5454                           ; BSR set to: 0
  5455  003110  0100               	movlb	0	; () banked
  5456  003112  90D8               	bcf	status,0,c
  5457  003114  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5458  003116  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5459  003118  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5460  00311A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5461                           
  5462                           ; BSR set to: 0
  5463  00311C  0100               	movlb	0	; () banked
  5464  00311E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5465  003120  D7CD               	goto	l5309
  5466  003122                     l1583:
  5467                           
  5468                           ; BSR set to: 0
  5469  003122  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5470  003126  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5471  00312A  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5472  00312E  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5473                           
  5474                           ; BSR set to: 0
  5475  003132  0012               	return		;funcret
  5476  003134                     __end_of___lldiv:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           intcon	equ	0xFF2
  5485                           intcon2	equ	0xFF1
  5486                           intcon3	equ	0xFF0
  5487                           postinc0	equ	0xFEE
  5488                           wreg	equ	0xFE8
  5489                           postdec1	equ	0xFE5
  5490                           fsr1l	equ	0xFE1
  5491                           indf2	equ	0xFDF
  5492                           postinc2	equ	0xFDE
  5493                           postdec2	equ	0xFDD
  5494                           fsr2h	equ	0xFDA
  5495                           fsr2l	equ	0xFD9
  5496                           status	equ	0xFD8
  5497                           
  5498 ;; *************** function _change_state_to_menu_start *****************
  5499 ;; Defined at:
  5500 ;;		line 472 in file "UI.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;		None
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;		None
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5509 ;; Tracked objects:
  5510 ;;		On entry : 0/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;Total ram usage:        0 bytes
  5519 ;; Hardware stack levels used:    1
  5520 ;; Hardware stack levels required when called:   11
  5521 ;; This function calls:
  5522 ;;		_lcdInst
  5523 ;;		_printRTC
  5524 ;;		_printf
  5525 ;; This function is called by:
  5526 ;;		_initUI
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           	psect	text18
  5531  003EB2                     __ptext18:
  5532                           	opt stack 0
  5533  003EB2                     _change_state_to_menu_start:
  5534                           	opt stack 18
  5535                           
  5536                           ;UI.c: 473: cur_state = 0;
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;incstack = 0
  5540  003EB2  0E00               	movlw	0
  5541  003EB4  0100               	movlb	0	; () banked
  5542  003EB6  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5543  003EB8  0E00               	movlw	0
  5544  003EBA  6FDE               	movwf	_cur_state& (0+255),b
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;UI.c: 475: lcdInst(0b10000000);;
  5548  003EBC  0E80               	movlw	128
  5549  003EBE  EC66  F020         	call	_lcdInst
  5550                           
  5551                           ;UI.c: 476: printRTC();
  5552  003EC2  EC6F  F00C         	call	_printRTC	;wreg free
  5553                           
  5554                           ;UI.c: 477: lcdInst(0b11000000);;
  5555  003EC6  0EC0               	movlw	192
  5556  003EC8  EC66  F020         	call	_lcdInst
  5557                           
  5558                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5559  003ECC  0E36               	movlw	low STR_30
  5560  003ECE  0100               	movlb	0	; () banked
  5561  003ED0  6F8E               	movwf	printf@f& (0+255),b
  5562  003ED2  0EFE               	movlw	high STR_30
  5563  003ED4  0100               	movlb	0	; () banked
  5564  003ED6  6F8F               	movwf	(printf@f+1)& (0+255),b
  5565  003ED8  EC9C  F008         	call	_printf	;wreg free
  5566  003EDC  0012               	return		;funcret
  5567  003EDE                     __end_of_change_state_to_menu_start:
  5568                           	opt stack 0
  5569                           tblptru	equ	0xFF8
  5570                           tblptrh	equ	0xFF7
  5571                           tblptrl	equ	0xFF6
  5572                           tablat	equ	0xFF5
  5573                           prodh	equ	0xFF4
  5574                           prodl	equ	0xFF3
  5575                           intcon	equ	0xFF2
  5576                           intcon2	equ	0xFF1
  5577                           intcon3	equ	0xFF0
  5578                           postinc0	equ	0xFEE
  5579                           wreg	equ	0xFE8
  5580                           postdec1	equ	0xFE5
  5581                           fsr1l	equ	0xFE1
  5582                           indf2	equ	0xFDF
  5583                           postinc2	equ	0xFDE
  5584                           postdec2	equ	0xFDD
  5585                           fsr2h	equ	0xFDA
  5586                           fsr2l	equ	0xFD9
  5587                           status	equ	0xFD8
  5588                           
  5589 ;; *************** function _initTime *****************
  5590 ;; Defined at:
  5591 ;;		line 17 in file "RTC.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  s               1    wreg     unsigned char 
  5594 ;;  m               1    0[BANK0 ] unsigned char 
  5595 ;;  h               1    1[BANK0 ] unsigned char 
  5596 ;;  w               1    2[BANK0 ] unsigned char 
  5597 ;;  DD              1    3[BANK0 ] unsigned char 
  5598 ;;  MM              1    4[BANK0 ] unsigned char 
  5599 ;;  YY              1    5[BANK0 ] unsigned char 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  s               1    6[BANK0 ] unsigned char 
  5602 ;; Return value:  Size  Location     Type
  5603 ;;                  1    wreg      void 
  5604 ;; Registers used:
  5605 ;;		wreg
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5611 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5614 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5615 ;;Total ram usage:        7 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; Hardware stack levels required when called:    7
  5618 ;; This function calls:
  5619 ;;		Nothing
  5620 ;; This function is called by:
  5621 ;;		_main
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text19
  5626  004012                     __ptext19:
  5627                           	opt stack 0
  5628  004012                     _initTime:
  5629                           	opt stack 23
  5630                           
  5631                           ;incstack = 0
  5632                           ;initTime@s stored from wreg
  5633  004012  0100               	movlb	0	; () banked
  5634  004014  6F86               	movwf	initTime@s& (0+255),b
  5635                           
  5636                           ;RTC.c: 19: time[0] = s;
  5637  004016  C086  F124         	movff	initTime@s,_time
  5638                           
  5639                           ;RTC.c: 20: time[1] = m;
  5640  00401A  C080  F125         	movff	initTime@m,_time+1
  5641                           
  5642                           ;RTC.c: 21: time[2] = h;
  5643  00401E  C081  F126         	movff	initTime@h,_time+2
  5644                           
  5645                           ;RTC.c: 22: time[3] = w;
  5646  004022  C082  F127         	movff	initTime@w,_time+3
  5647                           
  5648                           ;RTC.c: 23: time[4] = DD;
  5649  004026  C083  F128         	movff	initTime@DD,_time+4
  5650                           
  5651                           ;RTC.c: 24: time[5] = MM;
  5652  00402A  C084  F129         	movff	initTime@MM,_time+5
  5653                           
  5654                           ;RTC.c: 25: time[6] = YY;
  5655  00402E  C085  F12A         	movff	initTime@YY,_time+6
  5656  004032  0012               	return		;funcret
  5657  004034                     __end_of_initTime:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           intcon2	equ	0xFF1
  5667                           intcon3	equ	0xFF0
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           postdec1	equ	0xFE5
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _initLCD *****************
  5680 ;; Defined at:
  5681 ;;		line 48 in file "lcd.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;Total ram usage:        1 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    9
  5702 ;; This function calls:
  5703 ;;		_lcdInst
  5704 ;; This function is called by:
  5705 ;;		_main
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text20
  5710  003B10                     __ptext20:
  5711                           	opt stack 0
  5712  003B10                     _initLCD:
  5713                           	opt stack 21
  5714                           
  5715                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5716                           
  5717                           ;incstack = 0
  5718  003B10  0E9C               	movlw	156
  5719  003B12  0100               	movlb	0	; () banked
  5720  003B14  6F83               	movwf	??_initLCD& (0+255),b
  5721  003B16  0ED7               	movlw	215
  5722  003B18                     u6717:
  5723  003B18  2EE8               	decfsz	wreg,f,c
  5724  003B1A  D7FE               	bra	u6717
  5725  003B1C  2F83               	decfsz	??_initLCD& (0+255),f,b
  5726  003B1E  D7FC               	bra	u6717
  5727                           
  5728                           ;lcd.c: 50: lcdInst(0b00110011);
  5729  003B20  0E33               	movlw	51
  5730  003B22  EC66  F020         	call	_lcdInst
  5731                           
  5732                           ;lcd.c: 51: lcdInst(0b00110010);
  5733  003B26  0E32               	movlw	50
  5734  003B28  EC66  F020         	call	_lcdInst
  5735                           
  5736                           ;lcd.c: 53: lcdInst(0b00101000);
  5737  003B2C  0E28               	movlw	40
  5738  003B2E  EC66  F020         	call	_lcdInst
  5739                           
  5740                           ;lcd.c: 54: lcdInst(0b00001100);
  5741  003B32  0E0C               	movlw	12
  5742  003B34  EC66  F020         	call	_lcdInst
  5743                           
  5744                           ;lcd.c: 55: lcdInst(0b00000110);
  5745  003B38  0E06               	movlw	6
  5746  003B3A  EC66  F020         	call	_lcdInst
  5747                           
  5748                           ;lcd.c: 56: lcdInst(0b00000001);
  5749  003B3E  0E01               	movlw	1
  5750  003B40  EC66  F020         	call	_lcdInst
  5751                           
  5752                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5753  003B44  0E9C               	movlw	156
  5754  003B46  0100               	movlb	0	; () banked
  5755  003B48  6F83               	movwf	??_initLCD& (0+255),b
  5756  003B4A  0ED7               	movlw	215
  5757  003B4C                     u6727:
  5758  003B4C  2EE8               	decfsz	wreg,f,c
  5759  003B4E  D7FE               	bra	u6727
  5760  003B50  2F83               	decfsz	??_initLCD& (0+255),f,b
  5761  003B52  D7FC               	bra	u6727
  5762  003B54  0012               	return		;funcret
  5763  003B56                     __end_of_initLCD:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           intcon	equ	0xFF2
  5772                           intcon2	equ	0xFF1
  5773                           intcon3	equ	0xFF0
  5774                           postinc0	equ	0xFEE
  5775                           wreg	equ	0xFE8
  5776                           postdec1	equ	0xFE5
  5777                           fsr1l	equ	0xFE1
  5778                           indf2	equ	0xFDF
  5779                           postinc2	equ	0xFDE
  5780                           postdec2	equ	0xFDD
  5781                           fsr2h	equ	0xFDA
  5782                           fsr2l	equ	0xFD9
  5783                           status	equ	0xFD8
  5784                           
  5785 ;; *************** function _UI *****************
  5786 ;; Defined at:
  5787 ;;		line 74 in file "UI.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;  i               1   73[BANK0 ] unsigned char 
  5792 ;;  i               1   85[BANK0 ] unsigned char 
  5793 ;;  i               1   84[BANK0 ] unsigned char 
  5794 ;;  i               1   83[BANK0 ] unsigned char 
  5795 ;;  i               1   82[BANK0 ] unsigned char 
  5796 ;;  i               1   81[BANK0 ] unsigned char 
  5797 ;;  i               1   80[BANK0 ] unsigned char 
  5798 ;;  i               1   79[BANK0 ] unsigned char 
  5799 ;;  i               1   78[BANK0 ] unsigned char 
  5800 ;;  i               1   77[BANK0 ] unsigned char 
  5801 ;;  i               1   76[BANK0 ] unsigned char 
  5802 ;;  i               1   75[BANK0 ] unsigned char 
  5803 ;;  i               1   74[BANK0 ] unsigned char 
  5804 ;;  month           4   86[BANK0 ] unsigned char [4]
  5805 ;;  i               1   72[BANK0 ] unsigned char 
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  1    wreg      void 
  5808 ;; Registers used:
  5809 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;Total ram usage:       22 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:   11
  5822 ;; This function calls:
  5823 ;;		___awdiv
  5824 ;;		___awmod
  5825 ;;		_change_state_to_menu_12
  5826 ;;		_change_state_to_menu_22
  5827 ;;		_lcdInst
  5828 ;;		_printRTC
  5829 ;;		_printf
  5830 ;;		_strcpy
  5831 ;; This function is called by:
  5832 ;;		_main
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           	psect	text21
  5837  000012                     __ptext21:
  5838                           	opt stack 0
  5839  000012                     _UI:
  5840                           	opt stack 19
  5841                           
  5842                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5843                           
  5844                           ;incstack = 0
  5845  000012  0E02               	movlw	2
  5846  000014  0100               	movlb	0	; () banked
  5847  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5848  000018  A4D8               	btfss	status,2,c
  5849  00001A  D075               	goto	l6863
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5853  00001C  0E01               	movlw	1
  5854  00001E  EC66  F020         	call	_lcdInst
  5855  000022  0E68               	movlw	104
  5856  000024  0100               	movlb	0	; () banked
  5857  000026  6FC4               	movwf	??_UI& (0+255),b
  5858  000028  0EE4               	movlw	228
  5859  00002A                     u6737:
  5860  00002A  2EE8               	decfsz	wreg,f,c
  5861  00002C  D7FE               	bra	u6737
  5862  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5863  000030  D7FC               	bra	u6737
  5864  000032  F000               	nop	
  5865                           
  5866                           ;UI.c: 77: lcdInst(0b10000000);;
  5867  000034  0E80               	movlw	128
  5868  000036  EC66  F020         	call	_lcdInst
  5869                           
  5870                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5871  00003A  0EF3               	movlw	low STR_1
  5872  00003C  0100               	movlb	0	; () banked
  5873  00003E  6F8E               	movwf	printf@f& (0+255),b
  5874  000040  0EFB               	movlw	high STR_1
  5875  000042  0100               	movlb	0	; () banked
  5876  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5877  000046  0E01               	movlw	1
  5878  000048  0100               	movlb	0	; () banked
  5879  00004A  25FD               	addwf	_sel& (0+255),w,b
  5880  00004C  0100               	movlb	0	; () banked
  5881  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5882  000050  0100               	movlb	0	; () banked
  5883  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5884  000054  0E00               	movlw	0
  5885  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5886  000058  EC9C  F008         	call	_printf	;wreg free
  5887                           
  5888                           ;UI.c: 79: lcdInst(0b11000000);;
  5889  00005C  0EC0               	movlw	192
  5890  00005E  EC66  F020         	call	_lcdInst
  5891                           
  5892                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5893  000062  0E0E               	movlw	14
  5894  000064  0100               	movlb	0	; () banked
  5895  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5896  000068  0E10               	movlw	16
  5897  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5898  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  5899  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5900  000074  ECEF  F018         	call	___awmod	;wreg free
  5901  000078  C080  F0C6         	movff	?___awmod,_UI$2214
  5902  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2214+1
  5903                           
  5904                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5905  000080  0E44               	movlw	low STR_2
  5906  000082  0100               	movlb	0	; () banked
  5907  000084  6F8E               	movwf	printf@f& (0+255),b
  5908  000086  0EFF               	movlw	high STR_2
  5909  000088  0100               	movlb	0	; () banked
  5910  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5911  00008C  0E0E               	movlw	14
  5912  00008E  0100               	movlb	0	; () banked
  5913  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5914  000092  0E10               	movlw	16
  5915  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5916  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  5917  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5918  00009E  ECEF  F018         	call	___awmod	;wreg free
  5919  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5920  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5921  0000AA  0E00               	movlw	0
  5922  0000AC  0100               	movlb	0	; () banked
  5923  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5924  0000B0  0E3C               	movlw	60
  5925  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5926  0000B4  ECDD  F017         	call	___awdiv	;wreg free
  5927  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5928  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5929  0000C0  C0C6  F080         	movff	_UI$2214,___awmod@dividend
  5930  0000C4  C0C7  F081         	movff	_UI$2214+1,___awmod@dividend+1
  5931  0000C8  0E00               	movlw	0
  5932  0000CA  0100               	movlb	0	; () banked
  5933  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5934  0000CE  0E3C               	movlw	60
  5935  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5936  0000D2  ECEF  F018         	call	___awmod	;wreg free
  5937  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5938  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5939  0000DE  EC9C  F008         	call	_printf	;wreg free
  5940                           
  5941                           ;UI.c: 81: machine_state = UI_state;
  5942  0000E2  0E00               	movlw	0
  5943  0000E4  0100               	movlb	0	; () banked
  5944  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  5945  0000E8                     l177:
  5946  0000E8  A281               	btfss	3969,1,c	;volatile
  5947  0000EA  D7FE               	goto	l177
  5948                           
  5949                           ;UI.c: 84: }
  5950                           ;UI.c: 85: if(cur_state==12){
  5951  0000EC  0E0C               	movlw	12
  5952  0000EE  0100               	movlb	0	; () banked
  5953  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  5954  0000F2  0100               	movlb	0	; () banked
  5955  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5956  0000F6  A4D8               	btfss	status,2,c
  5957  0000F8  D003               	goto	l6861
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;UI.c: 86: change_state_to_menu_12();
  5961  0000FA  ECE8  F01D         	call	_change_state_to_menu_12	;wreg free
  5962                           
  5963                           ;UI.c: 87: }
  5964  0000FE  D3D5               	goto	l7183
  5965  000100                     l6861:
  5966                           
  5967                           ;UI.c: 88: else{
  5968                           ;UI.c: 89: change_state_to_menu_22();
  5969  000100  ECCC  F01D         	call	_change_state_to_menu_22	;wreg free
  5970                           
  5971                           ;UI.c: 90: }
  5972                           ;UI.c: 91: }
  5973  000104  D3D2               	goto	l7183
  5974  000106                     l6863:
  5975                           
  5976                           ;UI.c: 92: else if(cur_state == 0){
  5977  000106  0100               	movlb	0	; () banked
  5978  000108  51DE               	movf	_cur_state& (0+255),w,b
  5979  00010A  0100               	movlb	0	; () banked
  5980  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5981  00010E  A4D8               	btfss	status,2,c
  5982  000110  D3CC               	goto	l7183
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5986  000112  0E00               	movlw	0
  5987  000114  0100               	movlb	0	; () banked
  5988  000116  6FC8               	movwf	UI@i& (0+255),b
  5989  000118                     l6867:
  5990                           
  5991                           ; BSR set to: 0
  5992  000118  0E63               	movlw	99
  5993  00011A  0100               	movlb	0	; () banked
  5994  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  5995  00011E  D001               	goto	l6871
  5996  000120  D00C               	goto	l6875
  5997  000122                     l6871:
  5998                           
  5999                           ; BSR set to: 0
  6000  000122  0E68               	movlw	104
  6001  000124  0100               	movlb	0	; () banked
  6002  000126  6FC4               	movwf	??_UI& (0+255),b
  6003  000128  0EE4               	movlw	228
  6004  00012A                     u6747:
  6005  00012A  2EE8               	decfsz	wreg,f,c
  6006  00012C  D7FE               	bra	u6747
  6007  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6008  000130  D7FC               	bra	u6747
  6009  000132  F000               	nop	
  6010  000134  0100               	movlb	0	; () banked
  6011  000136  2BC8               	incf	UI@i& (0+255),f,b
  6012  000138  D7EF               	goto	l6867
  6013  00013A                     l6875:
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;UI.c: 94: if(cur_state == 0){
  6017  00013A  0100               	movlb	0	; () banked
  6018  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6019  00013E  0100               	movlb	0	; () banked
  6020  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6021  000142  A4D8               	btfss	status,2,c
  6022  000144  D3B2               	goto	l7183
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;UI.c: 95: printRTC();
  6026  000146  EC6F  F00C         	call	_printRTC	;wreg free
  6027                           
  6028                           ;UI.c: 96: }
  6029                           ;UI.c: 97: }
  6030                           ;UI.c: 98: while(logstate){
  6031  00014A  D3AF               	goto	l7183
  6032  00014C                     l6879:
  6033                           
  6034                           ;UI.c: 100: if(!log_completion){
  6035  00014C  0100               	movlb	0	; () banked
  6036  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6037  000150  0100               	movlb	0	; () banked
  6038  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6039  000154  A4D8               	btfss	status,2,c
  6040  000156  D041               	goto	l6909
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6044  000158  0E01               	movlw	1
  6045  00015A  EC66  F020         	call	_lcdInst
  6046  00015E  0E68               	movlw	104
  6047  000160  0100               	movlb	0	; () banked
  6048  000162  6FC4               	movwf	??_UI& (0+255),b
  6049  000164  0EE4               	movlw	228
  6050  000166                     u6757:
  6051  000166  2EE8               	decfsz	wreg,f,c
  6052  000168  D7FE               	bra	u6757
  6053  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6054  00016C  D7FC               	bra	u6757
  6055  00016E  F000               	nop	
  6056                           
  6057                           ;UI.c: 102: lcdInst(0b10000000);;
  6058  000170  0E80               	movlw	128
  6059  000172  EC66  F020         	call	_lcdInst
  6060                           
  6061                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6062  000176  0EE1               	movlw	low STR_3
  6063  000178  0100               	movlb	0	; () banked
  6064  00017A  6F8E               	movwf	printf@f& (0+255),b
  6065  00017C  0EFB               	movlw	high STR_3
  6066  00017E  0100               	movlb	0	; () banked
  6067  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6068  000182  C0E6  F090         	movff	_log,?_printf+2
  6069  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6070  00018A  EC9C  F008         	call	_printf	;wreg free
  6071                           
  6072                           ;UI.c: 104: lcdInst(0b11000000);;
  6073  00018E  0EC0               	movlw	192
  6074  000190  EC66  F020         	call	_lcdInst
  6075                           
  6076                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6077  000194  0E67               	movlw	low STR_4
  6078  000196  0100               	movlb	0	; () banked
  6079  000198  6F8E               	movwf	printf@f& (0+255),b
  6080  00019A  0EFE               	movlw	high STR_4
  6081  00019C  0100               	movlb	0	; () banked
  6082  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6083  0001A0  EC9C  F008         	call	_printf	;wreg free
  6084  0001A4                     l6893:
  6085  0001A4  0E00               	movlw	0
  6086  0001A6  0100               	movlb	0	; () banked
  6087  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6088  0001AA                     l6895:
  6089                           
  6090                           ; BSR set to: 0
  6091  0001AA  0E63               	movlw	99
  6092  0001AC  0100               	movlb	0	; () banked
  6093  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6094  0001B0  D001               	goto	l6899
  6095  0001B2  D00C               	goto	l6903
  6096  0001B4                     l6899:
  6097                           
  6098                           ; BSR set to: 0
  6099  0001B4  0E68               	movlw	104
  6100  0001B6  0100               	movlb	0	; () banked
  6101  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6102  0001BA  0EE4               	movlw	228
  6103  0001BC                     u6767:
  6104  0001BC  2EE8               	decfsz	wreg,f,c
  6105  0001BE  D7FE               	bra	u6767
  6106  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6107  0001C2  D7FC               	bra	u6767
  6108  0001C4  F000               	nop	
  6109  0001C6  0100               	movlb	0	; () banked
  6110  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6111  0001CA  D7EF               	goto	l6895
  6112  0001CC                     l6903:
  6113                           
  6114                           ; BSR set to: 0
  6115  0001CC  0100               	movlb	0	; () banked
  6116  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6117  0001D0  0100               	movlb	0	; () banked
  6118  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6119  0001D4  B4D8               	btfsc	status,2,c
  6120  0001D6  0012               	return	
  6121  0001D8  D7E5               	goto	l6893
  6122  0001DA                     l6909:
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;UI.c: 109: else{
  6126                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6127  0001DA  0E01               	movlw	1
  6128  0001DC  EC66  F020         	call	_lcdInst
  6129  0001E0  0E68               	movlw	104
  6130  0001E2  0100               	movlb	0	; () banked
  6131  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6132  0001E6  0EE4               	movlw	228
  6133  0001E8                     u6777:
  6134  0001E8  2EE8               	decfsz	wreg,f,c
  6135  0001EA  D7FE               	bra	u6777
  6136  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6137  0001EE  D7FC               	bra	u6777
  6138  0001F0  F000               	nop	
  6139                           
  6140                           ;UI.c: 111: lcdInst(0b10000000);;
  6141  0001F2  0E80               	movlw	128
  6142  0001F4  EC66  F020         	call	_lcdInst
  6143                           
  6144                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6145  0001F8  0EE1               	movlw	low STR_3
  6146  0001FA  0100               	movlb	0	; () banked
  6147  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6148  0001FE  0EFB               	movlw	high STR_3
  6149  000200  0100               	movlb	0	; () banked
  6150  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6151  000204  C0E6  F090         	movff	_log,?_printf+2
  6152  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6153  00020C  EC9C  F008         	call	_printf	;wreg free
  6154                           
  6155                           ;UI.c: 113: lcdInst(0b11000000);;
  6156  000210  0EC0               	movlw	192
  6157  000212  EC66  F020         	call	_lcdInst
  6158                           
  6159                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6160  000216  0E25               	movlw	low STR_6
  6161  000218  0100               	movlb	0	; () banked
  6162  00021A  6F8E               	movwf	printf@f& (0+255),b
  6163  00021C  0EFE               	movlw	high STR_6
  6164  00021E  0100               	movlb	0	; () banked
  6165  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6166  000222  EC9C  F008         	call	_printf	;wreg free
  6167                           
  6168                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6169  000226  0E00               	movlw	0
  6170  000228  0100               	movlb	0	; () banked
  6171  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6172  00022C                     l6923:
  6173                           
  6174                           ; BSR set to: 0
  6175  00022C  0E63               	movlw	99
  6176  00022E  0100               	movlb	0	; () banked
  6177  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6178  000232  D001               	goto	l6927
  6179  000234  D00C               	goto	l6931
  6180  000236                     l6927:
  6181                           
  6182                           ; BSR set to: 0
  6183  000236  0E68               	movlw	104
  6184  000238  0100               	movlb	0	; () banked
  6185  00023A  6FC4               	movwf	??_UI& (0+255),b
  6186  00023C  0EE4               	movlw	228
  6187  00023E                     u6787:
  6188  00023E  2EE8               	decfsz	wreg,f,c
  6189  000240  D7FE               	bra	u6787
  6190  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6191  000244  D7FC               	bra	u6787
  6192  000246  F000               	nop	
  6193  000248  0100               	movlb	0	; () banked
  6194  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6195  00024C  D7EF               	goto	l6923
  6196  00024E                     l6931:
  6197                           
  6198                           ; BSR set to: 0
  6199  00024E  0100               	movlb	0	; () banked
  6200  000250  51F6               	movf	_logstate& (0+255),w,b
  6201  000252  0100               	movlb	0	; () banked
  6202  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6203  000256  B4D8               	btfsc	status,2,c
  6204  000258  0012               	return	
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6208                           
  6209                           ; BSR set to: 0
  6210                           
  6211                           ; BSR set to: 0
  6212  00025A  0E00               	movlw	0
  6213  00025C  0100               	movlb	0	; () banked
  6214  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6215  000260                     l6937:
  6216                           
  6217                           ; BSR set to: 0
  6218  000260  0E63               	movlw	99
  6219  000262  0100               	movlb	0	; () banked
  6220  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6221  000266  D001               	goto	l6941
  6222  000268  D00C               	goto	l6945
  6223  00026A                     l6941:
  6224                           
  6225                           ; BSR set to: 0
  6226  00026A  0E68               	movlw	104
  6227  00026C  0100               	movlb	0	; () banked
  6228  00026E  6FC4               	movwf	??_UI& (0+255),b
  6229  000270  0EE4               	movlw	228
  6230  000272                     u6797:
  6231  000272  2EE8               	decfsz	wreg,f,c
  6232  000274  D7FE               	bra	u6797
  6233  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6234  000278  D7FC               	bra	u6797
  6235  00027A  F000               	nop	
  6236  00027C  0100               	movlb	0	; () banked
  6237  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6238  000280  D7EF               	goto	l6937
  6239  000282                     l6945:
  6240                           
  6241                           ; BSR set to: 0
  6242  000282  0100               	movlb	0	; () banked
  6243  000284  51F6               	movf	_logstate& (0+255),w,b
  6244  000286  0100               	movlb	0	; () banked
  6245  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6246  00028A  B4D8               	btfsc	status,2,c
  6247  00028C  0012               	return	
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6251                           
  6252                           ; BSR set to: 0
  6253                           
  6254                           ; BSR set to: 0
  6255  00028E  0E01               	movlw	1
  6256  000290  EC66  F020         	call	_lcdInst
  6257  000294  0E68               	movlw	104
  6258  000296  0100               	movlb	0	; () banked
  6259  000298  6FC4               	movwf	??_UI& (0+255),b
  6260  00029A  0EE4               	movlw	228
  6261  00029C                     u6807:
  6262  00029C  2EE8               	decfsz	wreg,f,c
  6263  00029E  D7FE               	bra	u6807
  6264  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6265  0002A2  D7FC               	bra	u6807
  6266  0002A4  F000               	nop	
  6267                           
  6268                           ;UI.c: 120: lcdInst(0b10000000);;
  6269  0002A6  0E80               	movlw	128
  6270  0002A8  EC66  F020         	call	_lcdInst
  6271                           
  6272                           ;UI.c: 121: printf("START:");
  6273  0002AC  0EC3               	movlw	low STR_7
  6274  0002AE  0100               	movlb	0	; () banked
  6275  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6276  0002B2  0EFF               	movlw	high STR_7
  6277  0002B4  0100               	movlb	0	; () banked
  6278  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6279  0002B8  EC9C  F008         	call	_printf	;wreg free
  6280                           
  6281                           ;UI.c: 122: lcdInst(0b11000000);;
  6282  0002BC  0EC0               	movlw	192
  6283  0002BE  EC66  F020         	call	_lcdInst
  6284                           
  6285                           ;UI.c: 123: char month[] = "MMM";
  6286  0002C2  C12D  F0D6         	movff	UI@F3220,UI@month
  6287  0002C6  C12E  F0D7         	movff	UI@F3220+1,UI@month+1
  6288  0002CA  C12F  F0D8         	movff	UI@F3220+2,UI@month+2
  6289  0002CE  C130  F0D9         	movff	UI@F3220+3,UI@month+3
  6290                           
  6291                           ;UI.c: 124: switch(log_startTime[5]){
  6292  0002D2  D0C3               	goto	l6989
  6293  0002D4                     l6961:
  6294                           
  6295                           ;UI.c: 126: strcpy(month, "JAN");
  6296  0002D4  0ED6               	movlw	low UI@month
  6297  0002D6  0100               	movlb	0	; () banked
  6298  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6299  0002DA  0E00               	movlw	high UI@month
  6300  0002DC  0100               	movlb	0	; () banked
  6301  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6302  0002E0  0EDA               	movlw	low STR_8
  6303  0002E2  0100               	movlb	0	; () banked
  6304  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6305  0002E6  0EFF               	movlw	high STR_8
  6306  0002E8  0100               	movlb	0	; () banked
  6307  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6308  0002EC  EC04  F01E         	call	_strcpy	;wreg free
  6309                           
  6310                           ;UI.c: 127: break;
  6311  0002F0  D0E6               	goto	l6991
  6312  0002F2                     l6963:
  6313                           
  6314                           ;UI.c: 129: strcpy(month, "FEB");
  6315  0002F2  0ED6               	movlw	low UI@month
  6316  0002F4  0100               	movlb	0	; () banked
  6317  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6318  0002F8  0E00               	movlw	high UI@month
  6319  0002FA  0100               	movlb	0	; () banked
  6320  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6321  0002FE  0ECA               	movlw	low STR_9
  6322  000300  0100               	movlb	0	; () banked
  6323  000302  6F82               	movwf	strcpy@from& (0+255),b
  6324  000304  0EFF               	movlw	high STR_9
  6325  000306  0100               	movlb	0	; () banked
  6326  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6327  00030A  EC04  F01E         	call	_strcpy	;wreg free
  6328                           
  6329                           ;UI.c: 130: break;
  6330  00030E  D0D7               	goto	l6991
  6331  000310                     l6965:
  6332                           
  6333                           ;UI.c: 132: strcpy(month, "MAR");
  6334  000310  0ED6               	movlw	low UI@month
  6335  000312  0100               	movlb	0	; () banked
  6336  000314  6F80               	movwf	strcpy@to& (0+255),b
  6337  000316  0E00               	movlw	high UI@month
  6338  000318  0100               	movlb	0	; () banked
  6339  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6340  00031C  0EE6               	movlw	low STR_10
  6341  00031E  0100               	movlb	0	; () banked
  6342  000320  6F82               	movwf	strcpy@from& (0+255),b
  6343  000322  0EFF               	movlw	high STR_10
  6344  000324  0100               	movlb	0	; () banked
  6345  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6346  000328  EC04  F01E         	call	_strcpy	;wreg free
  6347                           
  6348                           ;UI.c: 133: break;
  6349  00032C  D0C8               	goto	l6991
  6350  00032E                     l6967:
  6351                           
  6352                           ;UI.c: 135: strcpy(month, "APR");
  6353  00032E  0ED6               	movlw	low UI@month
  6354  000330  0100               	movlb	0	; () banked
  6355  000332  6F80               	movwf	strcpy@to& (0+255),b
  6356  000334  0E00               	movlw	high UI@month
  6357  000336  0100               	movlb	0	; () banked
  6358  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6359  00033A  0EEA               	movlw	low STR_11
  6360  00033C  0100               	movlb	0	; () banked
  6361  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6362  000340  0EFF               	movlw	high STR_11
  6363  000342  0100               	movlb	0	; () banked
  6364  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6365  000346  EC04  F01E         	call	_strcpy	;wreg free
  6366                           
  6367                           ;UI.c: 136: break;
  6368  00034A  D0B9               	goto	l6991
  6369  00034C                     l6969:
  6370                           
  6371                           ;UI.c: 138: strcpy(month, "MAY");
  6372  00034C  0ED6               	movlw	low UI@month
  6373  00034E  0100               	movlb	0	; () banked
  6374  000350  6F80               	movwf	strcpy@to& (0+255),b
  6375  000352  0E00               	movlw	high UI@month
  6376  000354  0100               	movlb	0	; () banked
  6377  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6378  000358  0EFA               	movlw	low STR_12
  6379  00035A  0100               	movlb	0	; () banked
  6380  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6381  00035E  0EFF               	movlw	high STR_12
  6382  000360  0100               	movlb	0	; () banked
  6383  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6384  000364  EC04  F01E         	call	_strcpy	;wreg free
  6385                           
  6386                           ;UI.c: 139: break;
  6387  000368  D0AA               	goto	l6991
  6388  00036A                     l6971:
  6389                           
  6390                           ;UI.c: 141: strcpy(month, "JUN");
  6391  00036A  0ED6               	movlw	low UI@month
  6392  00036C  0100               	movlb	0	; () banked
  6393  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6394  000370  0E00               	movlw	high UI@month
  6395  000372  0100               	movlb	0	; () banked
  6396  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6397  000376  0EDE               	movlw	low STR_13
  6398  000378  0100               	movlb	0	; () banked
  6399  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6400  00037C  0EFF               	movlw	high STR_13
  6401  00037E  0100               	movlb	0	; () banked
  6402  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6403  000382  EC04  F01E         	call	_strcpy	;wreg free
  6404                           
  6405                           ;UI.c: 142: break;
  6406  000386  D09B               	goto	l6991
  6407  000388                     l6973:
  6408                           
  6409                           ;UI.c: 144: strcpy(month, "JUL");
  6410  000388  0ED6               	movlw	low UI@month
  6411  00038A  0100               	movlb	0	; () banked
  6412  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6413  00038E  0E00               	movlw	high UI@month
  6414  000390  0100               	movlb	0	; () banked
  6415  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6416  000394  0ED6               	movlw	low STR_14
  6417  000396  0100               	movlb	0	; () banked
  6418  000398  6F82               	movwf	strcpy@from& (0+255),b
  6419  00039A  0EFF               	movlw	high STR_14
  6420  00039C  0100               	movlb	0	; () banked
  6421  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6422  0003A0  EC04  F01E         	call	_strcpy	;wreg free
  6423                           
  6424                           ;UI.c: 145: break;
  6425  0003A4  D08C               	goto	l6991
  6426  0003A6                     l6975:
  6427                           
  6428                           ;UI.c: 147: strcpy(month, "AUG");
  6429  0003A6  0ED6               	movlw	low UI@month
  6430  0003A8  0100               	movlb	0	; () banked
  6431  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6432  0003AC  0E00               	movlw	high UI@month
  6433  0003AE  0100               	movlb	0	; () banked
  6434  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6435  0003B2  0ED2               	movlw	low STR_15
  6436  0003B4  0100               	movlb	0	; () banked
  6437  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6438  0003B8  0EFF               	movlw	high STR_15
  6439  0003BA  0100               	movlb	0	; () banked
  6440  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6441  0003BE  EC04  F01E         	call	_strcpy	;wreg free
  6442                           
  6443                           ;UI.c: 148: break;
  6444  0003C2  D07D               	goto	l6991
  6445  0003C4                     l6977:
  6446                           
  6447                           ;UI.c: 150: strcpy(month, "SEP");
  6448  0003C4  0ED6               	movlw	low UI@month
  6449  0003C6  0100               	movlb	0	; () banked
  6450  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6451  0003CA  0E00               	movlw	high UI@month
  6452  0003CC  0100               	movlb	0	; () banked
  6453  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6454  0003D0  0EE2               	movlw	low STR_16
  6455  0003D2  0100               	movlb	0	; () banked
  6456  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6457  0003D6  0EFF               	movlw	high STR_16
  6458  0003D8  0100               	movlb	0	; () banked
  6459  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6460  0003DC  EC04  F01E         	call	_strcpy	;wreg free
  6461                           
  6462                           ;UI.c: 151: break;
  6463  0003E0  D06E               	goto	l6991
  6464  0003E2                     l6979:
  6465                           
  6466                           ;UI.c: 153: strcpy(month, "OCT");
  6467  0003E2  0ED6               	movlw	low UI@month
  6468  0003E4  0100               	movlb	0	; () banked
  6469  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6470  0003E8  0E00               	movlw	high UI@month
  6471  0003EA  0100               	movlb	0	; () banked
  6472  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6473  0003EE  0EF2               	movlw	low STR_17
  6474  0003F0  0100               	movlb	0	; () banked
  6475  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6476  0003F4  0EFF               	movlw	high STR_17
  6477  0003F6  0100               	movlb	0	; () banked
  6478  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6479  0003FA  EC04  F01E         	call	_strcpy	;wreg free
  6480                           
  6481                           ;UI.c: 154: break;
  6482  0003FE  D05F               	goto	l6991
  6483  000400                     l6981:
  6484                           
  6485                           ;UI.c: 156: strcpy(month, "NOV");
  6486  000400  0ED6               	movlw	low UI@month
  6487  000402  0100               	movlb	0	; () banked
  6488  000404  6F80               	movwf	strcpy@to& (0+255),b
  6489  000406  0E00               	movlw	high UI@month
  6490  000408  0100               	movlb	0	; () banked
  6491  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6492  00040C  0EF6               	movlw	low STR_18
  6493  00040E  0100               	movlb	0	; () banked
  6494  000410  6F82               	movwf	strcpy@from& (0+255),b
  6495  000412  0EFF               	movlw	high STR_18
  6496  000414  0100               	movlb	0	; () banked
  6497  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6498  000418  EC04  F01E         	call	_strcpy	;wreg free
  6499                           
  6500                           ;UI.c: 157: break;
  6501  00041C  D050               	goto	l6991
  6502  00041E                     l6983:
  6503                           
  6504                           ;UI.c: 159: strcpy(month, "DEC");
  6505  00041E  0ED6               	movlw	low UI@month
  6506  000420  0100               	movlb	0	; () banked
  6507  000422  6F80               	movwf	strcpy@to& (0+255),b
  6508  000424  0E00               	movlw	high UI@month
  6509  000426  0100               	movlb	0	; () banked
  6510  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6511  00042A  0ECE               	movlw	low STR_19
  6512  00042C  0100               	movlb	0	; () banked
  6513  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6514  000430  0EFF               	movlw	high STR_19
  6515  000432  0100               	movlb	0	; () banked
  6516  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6517  000436  EC04  F01E         	call	_strcpy	;wreg free
  6518                           
  6519                           ;UI.c: 160: break;
  6520  00043A  D041               	goto	l6991
  6521  00043C                     l6985:
  6522                           
  6523                           ;UI.c: 162: strcpy(month, "ERR");
  6524  00043C  0ED6               	movlw	low UI@month
  6525  00043E  0100               	movlb	0	; () banked
  6526  000440  6F80               	movwf	strcpy@to& (0+255),b
  6527  000442  0E00               	movlw	high UI@month
  6528  000444  0100               	movlb	0	; () banked
  6529  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6530  000448  0EEE               	movlw	low STR_20
  6531  00044A  0100               	movlb	0	; () banked
  6532  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6533  00044E  0EFF               	movlw	high STR_20
  6534  000450  0100               	movlb	0	; () banked
  6535  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6536  000454  EC04  F01E         	call	_strcpy	;wreg free
  6537                           
  6538                           ;UI.c: 164: }
  6539                           
  6540                           ;UI.c: 163: break;
  6541  000458  D032               	goto	l6991
  6542  00045A                     l6989:
  6543  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6544  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6545  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6546                           
  6547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6548                           ; Switch size 1, requested type "space"
  6549                           ; Number of cases is 1, Range of values is 0 to 0
  6550                           ; switch strategies available:
  6551                           ; Name         Instructions Cycles
  6552                           ; simple_byte            4     3 (average)
  6553                           ;	Chosen strategy is simple_byte
  6554  000466  0100               	movlb	0	; () banked
  6555  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6556  00046A  0A00               	xorlw	0	; case 0
  6557  00046C  A4D8               	btfss	status,2,c
  6558  00046E  D7E6               	goto	l6985
  6559                           
  6560                           ; BSR set to: 0
  6561                           ; Switch size 1, requested type "space"
  6562                           ; Number of cases is 12, Range of values is 1 to 12
  6563                           ; switch strategies available:
  6564                           ; Name         Instructions Cycles
  6565                           ; simple_byte           37    19 (average)
  6566                           ;	Chosen strategy is simple_byte
  6567  000470  0100               	movlb	0	; () banked
  6568  000472  51C4               	movf	??_UI& (0+255),w,b
  6569  000474  0A01               	xorlw	1	; case 1
  6570  000476  B4D8               	btfsc	status,2,c
  6571  000478  D72D               	goto	l6961
  6572  00047A  0A03               	xorlw	3	; case 2
  6573  00047C  B4D8               	btfsc	status,2,c
  6574  00047E  D739               	goto	l6963
  6575  000480  0A01               	xorlw	1	; case 3
  6576  000482  B4D8               	btfsc	status,2,c
  6577  000484  D745               	goto	l6965
  6578  000486  0A07               	xorlw	7	; case 4
  6579  000488  B4D8               	btfsc	status,2,c
  6580  00048A  D751               	goto	l6967
  6581  00048C  0A01               	xorlw	1	; case 5
  6582  00048E  B4D8               	btfsc	status,2,c
  6583  000490  D75D               	goto	l6969
  6584  000492  0A03               	xorlw	3	; case 6
  6585  000494  B4D8               	btfsc	status,2,c
  6586  000496  D769               	goto	l6971
  6587  000498  0A01               	xorlw	1	; case 7
  6588  00049A  B4D8               	btfsc	status,2,c
  6589  00049C  D775               	goto	l6973
  6590  00049E  0A0F               	xorlw	15	; case 8
  6591  0004A0  B4D8               	btfsc	status,2,c
  6592  0004A2  D781               	goto	l6975
  6593  0004A4  0A01               	xorlw	1	; case 9
  6594  0004A6  B4D8               	btfsc	status,2,c
  6595  0004A8  D78D               	goto	l6977
  6596  0004AA  0A03               	xorlw	3	; case 10
  6597  0004AC  B4D8               	btfsc	status,2,c
  6598  0004AE  D799               	goto	l6979
  6599  0004B0  0A01               	xorlw	1	; case 11
  6600  0004B2  B4D8               	btfsc	status,2,c
  6601  0004B4  D7A5               	goto	l6981
  6602  0004B6  0A07               	xorlw	7	; case 12
  6603  0004B8  B4D8               	btfsc	status,2,c
  6604  0004BA  D7B1               	goto	l6983
  6605  0004BC  D7BF               	goto	l6985
  6606  0004BE                     l6991:
  6607                           
  6608                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6609  0004BE  0E6A               	movlw	low STR_21
  6610  0004C0  0100               	movlb	0	; () banked
  6611  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6612  0004C4  0EFB               	movlw	high STR_21
  6613  0004C6  0100               	movlb	0	; () banked
  6614  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6615  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6616  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6617  0004D2  0ED6               	movlw	low UI@month
  6618  0004D4  0100               	movlb	0	; () banked
  6619  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6620  0004D8  0E00               	movlw	high UI@month
  6621  0004DA  0100               	movlb	0	; () banked
  6622  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6623  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6624  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6625  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6626  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6627  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6628  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6629  0004F6  EC9C  F008         	call	_printf	;wreg free
  6630                           
  6631                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6632  0004FA  0E00               	movlw	0
  6633  0004FC  0100               	movlb	0	; () banked
  6634  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6635  000500                     l6995:
  6636                           
  6637                           ; BSR set to: 0
  6638  000500  0E63               	movlw	99
  6639  000502  0100               	movlb	0	; () banked
  6640  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6641  000506  D001               	goto	l6999
  6642  000508  D00C               	goto	l7003
  6643  00050A                     l6999:
  6644                           
  6645                           ; BSR set to: 0
  6646  00050A  0E68               	movlw	104
  6647  00050C  0100               	movlb	0	; () banked
  6648  00050E  6FC4               	movwf	??_UI& (0+255),b
  6649  000510  0EE4               	movlw	228
  6650  000512                     u6817:
  6651  000512  2EE8               	decfsz	wreg,f,c
  6652  000514  D7FE               	bra	u6817
  6653  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6654  000518  D7FC               	bra	u6817
  6655  00051A  F000               	nop	
  6656  00051C  0100               	movlb	0	; () banked
  6657  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6658  000520  D7EF               	goto	l6995
  6659  000522                     l7003:
  6660                           
  6661                           ; BSR set to: 0
  6662  000522  0100               	movlb	0	; () banked
  6663  000524  51F6               	movf	_logstate& (0+255),w,b
  6664  000526  0100               	movlb	0	; () banked
  6665  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6666  00052A  B4D8               	btfsc	status,2,c
  6667  00052C  0012               	return	
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6671                           
  6672                           ; BSR set to: 0
  6673                           
  6674                           ; BSR set to: 0
  6675  00052E  0E00               	movlw	0
  6676  000530  0100               	movlb	0	; () banked
  6677  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6678  000534                     l7009:
  6679                           
  6680                           ; BSR set to: 0
  6681  000534  0E63               	movlw	99
  6682  000536  0100               	movlb	0	; () banked
  6683  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6684  00053A  D001               	goto	l7013
  6685  00053C  D00C               	goto	l7017
  6686  00053E                     l7013:
  6687                           
  6688                           ; BSR set to: 0
  6689  00053E  0E68               	movlw	104
  6690  000540  0100               	movlb	0	; () banked
  6691  000542  6FC4               	movwf	??_UI& (0+255),b
  6692  000544  0EE4               	movlw	228
  6693  000546                     u6827:
  6694  000546  2EE8               	decfsz	wreg,f,c
  6695  000548  D7FE               	bra	u6827
  6696  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6697  00054C  D7FC               	bra	u6827
  6698  00054E  F000               	nop	
  6699  000550  0100               	movlb	0	; () banked
  6700  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6701  000554  D7EF               	goto	l7009
  6702  000556                     l7017:
  6703                           
  6704                           ; BSR set to: 0
  6705  000556  0100               	movlb	0	; () banked
  6706  000558  51F6               	movf	_logstate& (0+255),w,b
  6707  00055A  0100               	movlb	0	; () banked
  6708  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6709  00055E  B4D8               	btfsc	status,2,c
  6710  000560  0012               	return	
  6711                           
  6712                           ; BSR set to: 0
  6713                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6714                           
  6715                           ; BSR set to: 0
  6716                           
  6717                           ; BSR set to: 0
  6718  000562  0E01               	movlw	1
  6719  000564  EC66  F020         	call	_lcdInst
  6720  000568  0E68               	movlw	104
  6721  00056A  0100               	movlb	0	; () banked
  6722  00056C  6FC4               	movwf	??_UI& (0+255),b
  6723  00056E  0EE4               	movlw	228
  6724  000570                     u6837:
  6725  000570  2EE8               	decfsz	wreg,f,c
  6726  000572  D7FE               	bra	u6837
  6727  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6728  000576  D7FC               	bra	u6837
  6729  000578  F000               	nop	
  6730                           
  6731                           ;UI.c: 171: lcdInst(0b10000000);;
  6732  00057A  0E80               	movlw	128
  6733  00057C  EC66  F020         	call	_lcdInst
  6734                           
  6735                           ;UI.c: 172: printf("DURATION:");
  6736  000580  0EA3               	movlw	low STR_22
  6737  000582  0100               	movlb	0	; () banked
  6738  000584  6F8E               	movwf	printf@f& (0+255),b
  6739  000586  0EFF               	movlw	high STR_22
  6740  000588  0100               	movlb	0	; () banked
  6741  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6742  00058C  EC9C  F008         	call	_printf	;wreg free
  6743                           
  6744                           ;UI.c: 173: lcdInst(0b11000000);;
  6745  000590  0EC0               	movlw	192
  6746  000592  EC66  F020         	call	_lcdInst
  6747                           
  6748                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6749  000596  0E0E               	movlw	14
  6750  000598  0100               	movlb	0	; () banked
  6751  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6752  00059C  0E10               	movlw	16
  6753  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6754  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6755  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6756  0005A8  ECEF  F018         	call	___awmod	;wreg free
  6757  0005AC  C080  F0C6         	movff	?___awmod,_UI$2214
  6758  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2214+1
  6759                           
  6760                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6761  0005B4  0E36               	movlw	low STR_23
  6762  0005B6  0100               	movlb	0	; () banked
  6763  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6764  0005BA  0EFF               	movlw	high STR_23
  6765  0005BC  0100               	movlb	0	; () banked
  6766  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6767  0005C0  0E0E               	movlw	14
  6768  0005C2  0100               	movlb	0	; () banked
  6769  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6770  0005C6  0E10               	movlw	16
  6771  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6772  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6773  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6774  0005D2  ECEF  F018         	call	___awmod	;wreg free
  6775  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6776  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6777  0005DE  0E00               	movlw	0
  6778  0005E0  0100               	movlb	0	; () banked
  6779  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6780  0005E4  0E3C               	movlw	60
  6781  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6782  0005E8  ECDD  F017         	call	___awdiv	;wreg free
  6783  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6784  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6785  0005F4  C0C6  F080         	movff	_UI$2214,___awmod@dividend
  6786  0005F8  C0C7  F081         	movff	_UI$2214+1,___awmod@dividend+1
  6787  0005FC  0E00               	movlw	0
  6788  0005FE  0100               	movlb	0	; () banked
  6789  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6790  000602  0E3C               	movlw	60
  6791  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6792  000606  ECEF  F018         	call	___awmod	;wreg free
  6793  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6794  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6795  000612  EC9C  F008         	call	_printf	;wreg free
  6796                           
  6797                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6798  000616  0E00               	movlw	0
  6799  000618  0100               	movlb	0	; () banked
  6800  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6801  00061C                     l7037:
  6802                           
  6803                           ; BSR set to: 0
  6804  00061C  0E63               	movlw	99
  6805  00061E  0100               	movlb	0	; () banked
  6806  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6807  000622  D001               	goto	l7041
  6808  000624  D00C               	goto	l7045
  6809  000626                     l7041:
  6810                           
  6811                           ; BSR set to: 0
  6812  000626  0E68               	movlw	104
  6813  000628  0100               	movlb	0	; () banked
  6814  00062A  6FC4               	movwf	??_UI& (0+255),b
  6815  00062C  0EE4               	movlw	228
  6816  00062E                     u6847:
  6817  00062E  2EE8               	decfsz	wreg,f,c
  6818  000630  D7FE               	bra	u6847
  6819  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6820  000634  D7FC               	bra	u6847
  6821  000636  F000               	nop	
  6822  000638  0100               	movlb	0	; () banked
  6823  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6824  00063C  D7EF               	goto	l7037
  6825  00063E                     l7045:
  6826                           
  6827                           ; BSR set to: 0
  6828  00063E  0100               	movlb	0	; () banked
  6829  000640  51F6               	movf	_logstate& (0+255),w,b
  6830  000642  0100               	movlb	0	; () banked
  6831  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6832  000646  B4D8               	btfsc	status,2,c
  6833  000648  0012               	return	
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6837                           
  6838                           ; BSR set to: 0
  6839                           
  6840                           ; BSR set to: 0
  6841  00064A  0E00               	movlw	0
  6842  00064C  0100               	movlb	0	; () banked
  6843  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6844  000650                     l7051:
  6845                           
  6846                           ; BSR set to: 0
  6847  000650  0E63               	movlw	99
  6848  000652  0100               	movlb	0	; () banked
  6849  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6850  000656  D001               	goto	l7055
  6851  000658  D00C               	goto	l7059
  6852  00065A                     l7055:
  6853                           
  6854                           ; BSR set to: 0
  6855  00065A  0E68               	movlw	104
  6856  00065C  0100               	movlb	0	; () banked
  6857  00065E  6FC4               	movwf	??_UI& (0+255),b
  6858  000660  0EE4               	movlw	228
  6859  000662                     u6857:
  6860  000662  2EE8               	decfsz	wreg,f,c
  6861  000664  D7FE               	bra	u6857
  6862  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6863  000668  D7FC               	bra	u6857
  6864  00066A  F000               	nop	
  6865  00066C  0100               	movlb	0	; () banked
  6866  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6867  000670  D7EF               	goto	l7051
  6868  000672                     l7059:
  6869                           
  6870                           ; BSR set to: 0
  6871  000672  0100               	movlb	0	; () banked
  6872  000674  51F6               	movf	_logstate& (0+255),w,b
  6873  000676  0100               	movlb	0	; () banked
  6874  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6875  00067A  B4D8               	btfsc	status,2,c
  6876  00067C  0012               	return	
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6880                           
  6881                           ; BSR set to: 0
  6882                           
  6883                           ; BSR set to: 0
  6884  00067E  0E01               	movlw	1
  6885  000680  EC66  F020         	call	_lcdInst
  6886  000684  0E68               	movlw	104
  6887  000686  0100               	movlb	0	; () banked
  6888  000688  6FC4               	movwf	??_UI& (0+255),b
  6889  00068A  0EE4               	movlw	228
  6890  00068C                     u6867:
  6891  00068C  2EE8               	decfsz	wreg,f,c
  6892  00068E  D7FE               	bra	u6867
  6893  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6894  000692  D7FC               	bra	u6867
  6895  000694  F000               	nop	
  6896                           
  6897                           ;UI.c: 180: lcdInst(0b10000000);;
  6898  000696  0E80               	movlw	128
  6899  000698  EC66  F020         	call	_lcdInst
  6900                           
  6901                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6902  00069C  0E7B               	movlw	low STR_24
  6903  00069E  0100               	movlb	0	; () banked
  6904  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6905  0006A2  0EFD               	movlw	high STR_24
  6906  0006A4  0100               	movlb	0	; () banked
  6907  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6908  0006A8  EC9C  F008         	call	_printf	;wreg free
  6909                           
  6910                           ;UI.c: 182: lcdInst(0b11000000);;
  6911  0006AC  0EC0               	movlw	192
  6912  0006AE  EC66  F020         	call	_lcdInst
  6913                           
  6914                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6915  0006B2  0EAA               	movlw	low STR_25
  6916  0006B4  0100               	movlb	0	; () banked
  6917  0006B6  6F8E               	movwf	printf@f& (0+255),b
  6918  0006B8  0EFB               	movlw	high STR_25
  6919  0006BA  0100               	movlb	0	; () banked
  6920  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6921  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6922  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6923  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6924  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6925  0006CE  EC9C  F008         	call	_printf	;wreg free
  6926                           
  6927                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6928  0006D2  0E00               	movlw	0
  6929  0006D4  0100               	movlb	0	; () banked
  6930  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  6931  0006D8                     l7077:
  6932                           
  6933                           ; BSR set to: 0
  6934  0006D8  0E63               	movlw	99
  6935  0006DA  0100               	movlb	0	; () banked
  6936  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  6937  0006DE  D001               	goto	l7081
  6938  0006E0  D00C               	goto	l7085
  6939  0006E2                     l7081:
  6940                           
  6941                           ; BSR set to: 0
  6942  0006E2  0E68               	movlw	104
  6943  0006E4  0100               	movlb	0	; () banked
  6944  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6945  0006E8  0EE4               	movlw	228
  6946  0006EA                     u6877:
  6947  0006EA  2EE8               	decfsz	wreg,f,c
  6948  0006EC  D7FE               	bra	u6877
  6949  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6950  0006F0  D7FC               	bra	u6877
  6951  0006F2  F000               	nop	
  6952  0006F4  0100               	movlb	0	; () banked
  6953  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  6954  0006F8  D7EF               	goto	l7077
  6955  0006FA                     l7085:
  6956                           
  6957                           ; BSR set to: 0
  6958  0006FA  0100               	movlb	0	; () banked
  6959  0006FC  51F6               	movf	_logstate& (0+255),w,b
  6960  0006FE  0100               	movlb	0	; () banked
  6961  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6962  000702  B4D8               	btfsc	status,2,c
  6963  000704  0012               	return	
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6967                           
  6968                           ; BSR set to: 0
  6969                           
  6970                           ; BSR set to: 0
  6971  000706  0E00               	movlw	0
  6972  000708  0100               	movlb	0	; () banked
  6973  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  6974  00070C                     l7091:
  6975                           
  6976                           ; BSR set to: 0
  6977  00070C  0E63               	movlw	99
  6978  00070E  0100               	movlb	0	; () banked
  6979  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  6980  000712  D001               	goto	l7095
  6981  000714  D00C               	goto	l7099
  6982  000716                     l7095:
  6983                           
  6984                           ; BSR set to: 0
  6985  000716  0E68               	movlw	104
  6986  000718  0100               	movlb	0	; () banked
  6987  00071A  6FC4               	movwf	??_UI& (0+255),b
  6988  00071C  0EE4               	movlw	228
  6989  00071E                     u6887:
  6990  00071E  2EE8               	decfsz	wreg,f,c
  6991  000720  D7FE               	bra	u6887
  6992  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  6993  000724  D7FC               	bra	u6887
  6994  000726  F000               	nop	
  6995  000728  0100               	movlb	0	; () banked
  6996  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  6997  00072C  D7EF               	goto	l7091
  6998  00072E                     l7099:
  6999                           
  7000                           ; BSR set to: 0
  7001  00072E  0100               	movlb	0	; () banked
  7002  000730  51F6               	movf	_logstate& (0+255),w,b
  7003  000732  0100               	movlb	0	; () banked
  7004  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7005  000736  B4D8               	btfsc	status,2,c
  7006  000738  0012               	return	
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7010                           
  7011                           ; BSR set to: 0
  7012                           
  7013                           ; BSR set to: 0
  7014  00073A  0E01               	movlw	1
  7015  00073C  EC66  F020         	call	_lcdInst
  7016  000740  0E68               	movlw	104
  7017  000742  0100               	movlb	0	; () banked
  7018  000744  6FC4               	movwf	??_UI& (0+255),b
  7019  000746  0EE4               	movlw	228
  7020  000748                     u6897:
  7021  000748  2EE8               	decfsz	wreg,f,c
  7022  00074A  D7FE               	bra	u6897
  7023  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7024  00074E  D7FC               	bra	u6897
  7025  000750  F000               	nop	
  7026                           
  7027                           ;UI.c: 189: lcdInst(0b10000000);;
  7028  000752  0E80               	movlw	128
  7029  000754  EC66  F020         	call	_lcdInst
  7030                           
  7031                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7032  000758  0E8C               	movlw	low STR_26
  7033  00075A  0100               	movlb	0	; () banked
  7034  00075C  6F8E               	movwf	printf@f& (0+255),b
  7035  00075E  0EFD               	movlw	high STR_26
  7036  000760  0100               	movlb	0	; () banked
  7037  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7038  000764  EC9C  F008         	call	_printf	;wreg free
  7039                           
  7040                           ;UI.c: 191: lcdInst(0b11000000);;
  7041  000768  0EC0               	movlw	192
  7042  00076A  EC66  F020         	call	_lcdInst
  7043                           
  7044                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7045  00076E  0E97               	movlw	low STR_27
  7046  000770  0100               	movlb	0	; () banked
  7047  000772  6F8E               	movwf	printf@f& (0+255),b
  7048  000774  0EFB               	movlw	high STR_27
  7049  000776  0100               	movlb	0	; () banked
  7050  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7051  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7052  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7053  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7054  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7055  00078A  EC9C  F008         	call	_printf	;wreg free
  7056                           
  7057                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7058  00078E  0E00               	movlw	0
  7059  000790  0100               	movlb	0	; () banked
  7060  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7061  000794                     l7117:
  7062                           
  7063                           ; BSR set to: 0
  7064  000794  0E63               	movlw	99
  7065  000796  0100               	movlb	0	; () banked
  7066  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7067  00079A  D001               	goto	l7121
  7068  00079C  D00C               	goto	l7125
  7069  00079E                     l7121:
  7070                           
  7071                           ; BSR set to: 0
  7072  00079E  0E68               	movlw	104
  7073  0007A0  0100               	movlb	0	; () banked
  7074  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7075  0007A4  0EE4               	movlw	228
  7076  0007A6                     u6907:
  7077  0007A6  2EE8               	decfsz	wreg,f,c
  7078  0007A8  D7FE               	bra	u6907
  7079  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7080  0007AC  D7FC               	bra	u6907
  7081  0007AE  F000               	nop	
  7082  0007B0  0100               	movlb	0	; () banked
  7083  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7084  0007B4  D7EF               	goto	l7117
  7085  0007B6                     l7125:
  7086                           
  7087                           ; BSR set to: 0
  7088  0007B6  0100               	movlb	0	; () banked
  7089  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7090  0007BA  0100               	movlb	0	; () banked
  7091  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7092  0007BE  B4D8               	btfsc	status,2,c
  7093  0007C0  0012               	return	
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7097                           
  7098                           ; BSR set to: 0
  7099                           
  7100                           ; BSR set to: 0
  7101  0007C2  0E00               	movlw	0
  7102  0007C4  0100               	movlb	0	; () banked
  7103  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7104  0007C8                     l7131:
  7105                           
  7106                           ; BSR set to: 0
  7107  0007C8  0E63               	movlw	99
  7108  0007CA  0100               	movlb	0	; () banked
  7109  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7110  0007CE  D001               	goto	l7135
  7111  0007D0  D00C               	goto	l7139
  7112  0007D2                     l7135:
  7113                           
  7114                           ; BSR set to: 0
  7115  0007D2  0E68               	movlw	104
  7116  0007D4  0100               	movlb	0	; () banked
  7117  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7118  0007D8  0EE4               	movlw	228
  7119  0007DA                     u6917:
  7120  0007DA  2EE8               	decfsz	wreg,f,c
  7121  0007DC  D7FE               	bra	u6917
  7122  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7123  0007E0  D7FC               	bra	u6917
  7124  0007E2  F000               	nop	
  7125  0007E4  0100               	movlb	0	; () banked
  7126  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7127  0007E8  D7EF               	goto	l7131
  7128  0007EA                     l7139:
  7129                           
  7130                           ; BSR set to: 0
  7131  0007EA  0100               	movlb	0	; () banked
  7132  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7133  0007EE  0100               	movlb	0	; () banked
  7134  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7135  0007F2  B4D8               	btfsc	status,2,c
  7136  0007F4  0012               	return	
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7140                           
  7141                           ; BSR set to: 0
  7142                           
  7143                           ; BSR set to: 0
  7144  0007F6  0E01               	movlw	1
  7145  0007F8  EC66  F020         	call	_lcdInst
  7146  0007FC  0E68               	movlw	104
  7147  0007FE  0100               	movlb	0	; () banked
  7148  000800  6FC4               	movwf	??_UI& (0+255),b
  7149  000802  0EE4               	movlw	228
  7150  000804                     u6927:
  7151  000804  2EE8               	decfsz	wreg,f,c
  7152  000806  D7FE               	bra	u6927
  7153  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7154  00080A  D7FC               	bra	u6927
  7155  00080C  F000               	nop	
  7156                           
  7157                           ;UI.c: 198: lcdInst(0b10000000);;
  7158  00080E  0E80               	movlw	128
  7159  000810  EC66  F020         	call	_lcdInst
  7160                           
  7161                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7162  000814  0E9D               	movlw	low STR_28
  7163  000816  0100               	movlb	0	; () banked
  7164  000818  6F8E               	movwf	printf@f& (0+255),b
  7165  00081A  0EFD               	movlw	high STR_28
  7166  00081C  0100               	movlb	0	; () banked
  7167  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7168  000820  EC9C  F008         	call	_printf	;wreg free
  7169                           
  7170                           ;UI.c: 200: lcdInst(0b11000000);;
  7171  000824  0EC0               	movlw	192
  7172  000826  EC66  F020         	call	_lcdInst
  7173                           
  7174                           ;UI.c: 201: printf("%d", log_count_total);
  7175  00082A  0EA7               	movlw	low (STR_27+16)
  7176  00082C  0100               	movlb	0	; () banked
  7177  00082E  6F8E               	movwf	printf@f& (0+255),b
  7178  000830  0EFB               	movlw	high (STR_27+16)
  7179  000832  0100               	movlb	0	; () banked
  7180  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7181  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7182  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7183  00083E  EC9C  F008         	call	_printf	;wreg free
  7184                           
  7185                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7186  000842  0E00               	movlw	0
  7187  000844  0100               	movlb	0	; () banked
  7188  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7189  000848                     l7157:
  7190                           
  7191                           ; BSR set to: 0
  7192  000848  0E63               	movlw	99
  7193  00084A  0100               	movlb	0	; () banked
  7194  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7195  00084E  D001               	goto	l7161
  7196  000850  D00C               	goto	l7165
  7197  000852                     l7161:
  7198                           
  7199                           ; BSR set to: 0
  7200  000852  0E68               	movlw	104
  7201  000854  0100               	movlb	0	; () banked
  7202  000856  6FC4               	movwf	??_UI& (0+255),b
  7203  000858  0EE4               	movlw	228
  7204  00085A                     u6937:
  7205  00085A  2EE8               	decfsz	wreg,f,c
  7206  00085C  D7FE               	bra	u6937
  7207  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7208  000860  D7FC               	bra	u6937
  7209  000862  F000               	nop	
  7210  000864  0100               	movlb	0	; () banked
  7211  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7212  000868  D7EF               	goto	l7157
  7213  00086A                     l7165:
  7214                           
  7215                           ; BSR set to: 0
  7216  00086A  0100               	movlb	0	; () banked
  7217  00086C  51F6               	movf	_logstate& (0+255),w,b
  7218  00086E  0100               	movlb	0	; () banked
  7219  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7220  000872  B4D8               	btfsc	status,2,c
  7221  000874  0012               	return	
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7225                           
  7226                           ; BSR set to: 0
  7227                           
  7228                           ; BSR set to: 0
  7229  000876  0E00               	movlw	0
  7230  000878  0100               	movlb	0	; () banked
  7231  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7232  00087C                     l7171:
  7233                           
  7234                           ; BSR set to: 0
  7235  00087C  0E63               	movlw	99
  7236  00087E  0100               	movlb	0	; () banked
  7237  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7238  000882  D001               	goto	l7175
  7239  000884  D00C               	goto	l7179
  7240  000886                     l7175:
  7241                           
  7242                           ; BSR set to: 0
  7243  000886  0E68               	movlw	104
  7244  000888  0100               	movlb	0	; () banked
  7245  00088A  6FC4               	movwf	??_UI& (0+255),b
  7246  00088C  0EE4               	movlw	228
  7247  00088E                     u6947:
  7248  00088E  2EE8               	decfsz	wreg,f,c
  7249  000890  D7FE               	bra	u6947
  7250  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7251  000894  D7FC               	bra	u6947
  7252  000896  F000               	nop	
  7253  000898  0100               	movlb	0	; () banked
  7254  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7255  00089C  D7EF               	goto	l7171
  7256  00089E                     l7179:
  7257                           
  7258                           ; BSR set to: 0
  7259  00089E  0100               	movlb	0	; () banked
  7260  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7261  0008A2  0100               	movlb	0	; () banked
  7262  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7263  0008A6  B4D8               	btfsc	status,2,c
  7264  0008A8  0012               	return	
  7265  0008AA                     l7183:
  7266  0008AA  0100               	movlb	0	; () banked
  7267  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7268  0008AE  0100               	movlb	0	; () banked
  7269  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7270  0008B2  B4D8               	btfsc	status,2,c
  7271  0008B4  0012               	return	
  7272  0008B6  D44A               	goto	l6879
  7273  0008B8                     __end_of_UI:
  7274                           	opt stack 0
  7275                           tblptru	equ	0xFF8
  7276                           tblptrh	equ	0xFF7
  7277                           tblptrl	equ	0xFF6
  7278                           tablat	equ	0xFF5
  7279                           prodh	equ	0xFF4
  7280                           prodl	equ	0xFF3
  7281                           intcon	equ	0xFF2
  7282                           intcon2	equ	0xFF1
  7283                           intcon3	equ	0xFF0
  7284                           postinc0	equ	0xFEE
  7285                           wreg	equ	0xFE8
  7286                           postdec1	equ	0xFE5
  7287                           fsr1l	equ	0xFE1
  7288                           indf2	equ	0xFDF
  7289                           postinc2	equ	0xFDE
  7290                           postdec2	equ	0xFDD
  7291                           fsr2h	equ	0xFDA
  7292                           fsr2l	equ	0xFD9
  7293                           status	equ	0xFD8
  7294                           
  7295 ;; *************** function _printRTC *****************
  7296 ;; Defined at:
  7297 ;;		line 63 in file "RTC.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;		None
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  i               2   66[BANK0 ] int 
  7302 ;;  INT_time       14   46[BANK0 ] int [7]
  7303 ;;  month           4   62[BANK0 ] unsigned char [4]
  7304 ;;  RTC_month       2   60[BANK0 ] int 
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  1    wreg      void 
  7307 ;; Registers used:
  7308 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;Total ram usage:       25 bytes
  7319 ;; Hardware stack levels used:    1
  7320 ;; Hardware stack levels required when called:   10
  7321 ;; This function calls:
  7322 ;;		_getRTC
  7323 ;;		_lcdInst
  7324 ;;		_printf
  7325 ;;		_strcpy
  7326 ;; This function is called by:
  7327 ;;		_UI
  7328 ;;		_change_state_to_menu_start
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           	psect	text22
  7333  0018DE                     __ptext22:
  7334                           	opt stack 0
  7335  0018DE                     _printRTC:
  7336                           	opt stack 18
  7337                           
  7338                           ;RTC.c: 64: getRTC();
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;incstack = 0
  7342  0018DE  EC15  F01A         	call	_getRTC	;wreg free
  7343                           
  7344                           ;RTC.c: 65: char month[] = "MMM";
  7345  0018E2  C131  F0BE         	movff	printRTC@F3211,printRTC@month
  7346  0018E6  C132  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  7347  0018EA  C133  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  7348  0018EE  C134  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  7349                           
  7350                           ;RTC.c: 66: int INT_time[7];
  7351                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7352  0018F2  0E00               	movlw	0
  7353  0018F4  0100               	movlb	0	; () banked
  7354  0018F6  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7355  0018F8  0E00               	movlw	0
  7356  0018FA  6FC2               	movwf	printRTC@i& (0+255),b
  7357                           
  7358                           ; BSR set to: 0
  7359  0018FC  0100               	movlb	0	; () banked
  7360  0018FE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7361  001900  D008               	goto	l5519
  7362  001902  0100               	movlb	0	; () banked
  7363  001904  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7364  001906  E146               	bnz	l591
  7365  001908  0E07               	movlw	7
  7366  00190A  0100               	movlb	0	; () banked
  7367  00190C  5DC2               	subwf	printRTC@i& (0+255),w,b
  7368  00190E  B0D8               	btfsc	status,0,c
  7369  001910  D041               	goto	l591
  7370  001912                     l5519:
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7374  001912  0E24               	movlw	low _time
  7375  001914  0100               	movlb	0	; () banked
  7376  001916  25C2               	addwf	printRTC@i& (0+255),w,b
  7377  001918  6ED9               	movwf	fsr2l,c
  7378  00191A  0E01               	movlw	high _time
  7379  00191C  0100               	movlb	0	; () banked
  7380  00191E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7381  001920  6EDA               	movwf	fsr2h,c
  7382  001922  50DF               	movf	indf2,w,c
  7383  001924  0100               	movlb	0	; () banked
  7384  001926  6FAB               	movwf	??_printRTC& (0+255),b
  7385  001928  0100               	movlb	0	; () banked
  7386  00192A  3BAB               	swapf	??_printRTC& (0+255),f,b
  7387  00192C  0E0F               	movlw	15
  7388  00192E  17AB               	andwf	??_printRTC& (0+255),f,b
  7389  001930  0E0F               	movlw	15
  7390  001932  0100               	movlb	0	; () banked
  7391  001934  17AB               	andwf	??_printRTC& (0+255),f,b
  7392  001936  0100               	movlb	0	; () banked
  7393  001938  51AB               	movf	??_printRTC& (0+255),w,b
  7394  00193A  0D0A               	mullw	10
  7395  00193C  0E24               	movlw	low _time
  7396  00193E  0100               	movlb	0	; () banked
  7397  001940  25C2               	addwf	printRTC@i& (0+255),w,b
  7398  001942  6ED9               	movwf	fsr2l,c
  7399  001944  0E01               	movlw	high _time
  7400  001946  0100               	movlb	0	; () banked
  7401  001948  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7402  00194A  6EDA               	movwf	fsr2h,c
  7403  00194C  50DF               	movf	indf2,w,c
  7404  00194E  0B0F               	andlw	15
  7405  001950  0100               	movlb	0	; () banked
  7406  001952  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7407  001954  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7408  001956  50F3               	movf	prodl,w,c
  7409  001958  0100               	movlb	0	; () banked
  7410  00195A  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7411  00195C  50F4               	movf	prodh,w,c
  7412  00195E  0100               	movlb	0	; () banked
  7413  001960  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7414  001962  90D8               	bcf	status,0,c
  7415  001964  0100               	movlb	0	; () banked
  7416  001966  35C2               	rlcf	printRTC@i& (0+255),w,b
  7417  001968  6ED9               	movwf	fsr2l,c
  7418  00196A  0100               	movlb	0	; () banked
  7419  00196C  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7420  00196E  6EDA               	movwf	fsr2h,c
  7421  001970  0EAE               	movlw	low printRTC@INT_time
  7422  001972  26D9               	addwf	fsr2l,f,c
  7423  001974  0E00               	movlw	high printRTC@INT_time
  7424  001976  22DA               	addwfc	fsr2h,f,c
  7425  001978  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7426  00197C  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7427                           
  7428                           ; BSR set to: 0
  7429  001980  0100               	movlb	0	; () banked
  7430  001982  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7431  001984  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7432                           
  7433                           ; BSR set to: 0
  7434  001986  0100               	movlb	0	; () banked
  7435  001988  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7436  00198A  D7C3               	goto	l5519
  7437  00198C  0100               	movlb	0	; () banked
  7438  00198E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7439  001990  E101               	bnz	u4260
  7440  001992  D7BA               	goto	L5
  7441  001994                     u4260:
  7442  001994                     l591:
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;RTC.c: 69: }
  7446                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7447  001994  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7448  001998  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7449                           
  7450                           ;RTC.c: 71: switch(RTC_month){
  7451  00199C  D0B4               	goto	l5551
  7452  00199E                     l5525:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;RTC.c: 73: strcpy(month, "JAN");
  7456  00199E  0EBE               	movlw	low printRTC@month
  7457  0019A0  0100               	movlb	0	; () banked
  7458  0019A2  6F80               	movwf	strcpy@to& (0+255),b
  7459  0019A4  0E00               	movlw	high printRTC@month
  7460  0019A6  0100               	movlb	0	; () banked
  7461  0019A8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7462  0019AA  0EDA               	movlw	low STR_8
  7463  0019AC  0100               	movlb	0	; () banked
  7464  0019AE  6F82               	movwf	strcpy@from& (0+255),b
  7465  0019B0  0EFF               	movlw	high STR_8
  7466  0019B2  0100               	movlb	0	; () banked
  7467  0019B4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7468  0019B6  EC04  F01E         	call	_strcpy	;wreg free
  7469                           
  7470                           ;RTC.c: 74: break;
  7471  0019BA  D0D4               	goto	l5553
  7472  0019BC                     l5527:
  7473                           
  7474                           ;RTC.c: 76: strcpy(month, "FEB");
  7475  0019BC  0EBE               	movlw	low printRTC@month
  7476  0019BE  0100               	movlb	0	; () banked
  7477  0019C0  6F80               	movwf	strcpy@to& (0+255),b
  7478  0019C2  0E00               	movlw	high printRTC@month
  7479  0019C4  0100               	movlb	0	; () banked
  7480  0019C6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7481  0019C8  0ECA               	movlw	low STR_9
  7482  0019CA  0100               	movlb	0	; () banked
  7483  0019CC  6F82               	movwf	strcpy@from& (0+255),b
  7484  0019CE  0EFF               	movlw	high STR_9
  7485  0019D0  0100               	movlb	0	; () banked
  7486  0019D2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7487  0019D4  EC04  F01E         	call	_strcpy	;wreg free
  7488                           
  7489                           ;RTC.c: 77: break;
  7490  0019D8  D0C5               	goto	l5553
  7491  0019DA                     l5529:
  7492                           
  7493                           ;RTC.c: 79: strcpy(month, "MAR");
  7494  0019DA  0EBE               	movlw	low printRTC@month
  7495  0019DC  0100               	movlb	0	; () banked
  7496  0019DE  6F80               	movwf	strcpy@to& (0+255),b
  7497  0019E0  0E00               	movlw	high printRTC@month
  7498  0019E2  0100               	movlb	0	; () banked
  7499  0019E4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7500  0019E6  0EE6               	movlw	low STR_10
  7501  0019E8  0100               	movlb	0	; () banked
  7502  0019EA  6F82               	movwf	strcpy@from& (0+255),b
  7503  0019EC  0EFF               	movlw	high STR_10
  7504  0019EE  0100               	movlb	0	; () banked
  7505  0019F0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7506  0019F2  EC04  F01E         	call	_strcpy	;wreg free
  7507                           
  7508                           ;RTC.c: 80: break;
  7509  0019F6  D0B6               	goto	l5553
  7510  0019F8                     l5531:
  7511                           
  7512                           ;RTC.c: 82: strcpy(month, "APR");
  7513  0019F8  0EBE               	movlw	low printRTC@month
  7514  0019FA  0100               	movlb	0	; () banked
  7515  0019FC  6F80               	movwf	strcpy@to& (0+255),b
  7516  0019FE  0E00               	movlw	high printRTC@month
  7517  001A00  0100               	movlb	0	; () banked
  7518  001A02  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7519  001A04  0EEA               	movlw	low STR_11
  7520  001A06  0100               	movlb	0	; () banked
  7521  001A08  6F82               	movwf	strcpy@from& (0+255),b
  7522  001A0A  0EFF               	movlw	high STR_11
  7523  001A0C  0100               	movlb	0	; () banked
  7524  001A0E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7525  001A10  EC04  F01E         	call	_strcpy	;wreg free
  7526                           
  7527                           ;RTC.c: 83: break;
  7528  001A14  D0A7               	goto	l5553
  7529  001A16                     l5533:
  7530                           
  7531                           ;RTC.c: 85: strcpy(month, "MAY");
  7532  001A16  0EBE               	movlw	low printRTC@month
  7533  001A18  0100               	movlb	0	; () banked
  7534  001A1A  6F80               	movwf	strcpy@to& (0+255),b
  7535  001A1C  0E00               	movlw	high printRTC@month
  7536  001A1E  0100               	movlb	0	; () banked
  7537  001A20  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7538  001A22  0EFA               	movlw	low STR_12
  7539  001A24  0100               	movlb	0	; () banked
  7540  001A26  6F82               	movwf	strcpy@from& (0+255),b
  7541  001A28  0EFF               	movlw	high STR_12
  7542  001A2A  0100               	movlb	0	; () banked
  7543  001A2C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7544  001A2E  EC04  F01E         	call	_strcpy	;wreg free
  7545                           
  7546                           ;RTC.c: 86: break;
  7547  001A32  D098               	goto	l5553
  7548  001A34                     l5535:
  7549                           
  7550                           ;RTC.c: 88: strcpy(month, "JUN");
  7551  001A34  0EBE               	movlw	low printRTC@month
  7552  001A36  0100               	movlb	0	; () banked
  7553  001A38  6F80               	movwf	strcpy@to& (0+255),b
  7554  001A3A  0E00               	movlw	high printRTC@month
  7555  001A3C  0100               	movlb	0	; () banked
  7556  001A3E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7557  001A40  0EDE               	movlw	low STR_13
  7558  001A42  0100               	movlb	0	; () banked
  7559  001A44  6F82               	movwf	strcpy@from& (0+255),b
  7560  001A46  0EFF               	movlw	high STR_13
  7561  001A48  0100               	movlb	0	; () banked
  7562  001A4A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7563  001A4C  EC04  F01E         	call	_strcpy	;wreg free
  7564                           
  7565                           ;RTC.c: 89: break;
  7566  001A50  D089               	goto	l5553
  7567  001A52                     l5537:
  7568                           
  7569                           ;RTC.c: 91: strcpy(month, "JUL");
  7570  001A52  0EBE               	movlw	low printRTC@month
  7571  001A54  0100               	movlb	0	; () banked
  7572  001A56  6F80               	movwf	strcpy@to& (0+255),b
  7573  001A58  0E00               	movlw	high printRTC@month
  7574  001A5A  0100               	movlb	0	; () banked
  7575  001A5C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7576  001A5E  0ED6               	movlw	low STR_14
  7577  001A60  0100               	movlb	0	; () banked
  7578  001A62  6F82               	movwf	strcpy@from& (0+255),b
  7579  001A64  0EFF               	movlw	high STR_14
  7580  001A66  0100               	movlb	0	; () banked
  7581  001A68  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7582  001A6A  EC04  F01E         	call	_strcpy	;wreg free
  7583                           
  7584                           ;RTC.c: 92: break;
  7585  001A6E  D07A               	goto	l5553
  7586  001A70                     l5539:
  7587                           
  7588                           ;RTC.c: 94: strcpy(month, "AUG");
  7589  001A70  0EBE               	movlw	low printRTC@month
  7590  001A72  0100               	movlb	0	; () banked
  7591  001A74  6F80               	movwf	strcpy@to& (0+255),b
  7592  001A76  0E00               	movlw	high printRTC@month
  7593  001A78  0100               	movlb	0	; () banked
  7594  001A7A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7595  001A7C  0ED2               	movlw	low STR_15
  7596  001A7E  0100               	movlb	0	; () banked
  7597  001A80  6F82               	movwf	strcpy@from& (0+255),b
  7598  001A82  0EFF               	movlw	high STR_15
  7599  001A84  0100               	movlb	0	; () banked
  7600  001A86  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7601  001A88  EC04  F01E         	call	_strcpy	;wreg free
  7602                           
  7603                           ;RTC.c: 95: break;
  7604  001A8C  D06B               	goto	l5553
  7605  001A8E                     l5541:
  7606                           
  7607                           ;RTC.c: 97: strcpy(month, "SEP");
  7608  001A8E  0EBE               	movlw	low printRTC@month
  7609  001A90  0100               	movlb	0	; () banked
  7610  001A92  6F80               	movwf	strcpy@to& (0+255),b
  7611  001A94  0E00               	movlw	high printRTC@month
  7612  001A96  0100               	movlb	0	; () banked
  7613  001A98  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7614  001A9A  0EE2               	movlw	low STR_16
  7615  001A9C  0100               	movlb	0	; () banked
  7616  001A9E  6F82               	movwf	strcpy@from& (0+255),b
  7617  001AA0  0EFF               	movlw	high STR_16
  7618  001AA2  0100               	movlb	0	; () banked
  7619  001AA4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7620  001AA6  EC04  F01E         	call	_strcpy	;wreg free
  7621                           
  7622                           ;RTC.c: 98: break;
  7623  001AAA  D05C               	goto	l5553
  7624  001AAC                     l5543:
  7625                           
  7626                           ;RTC.c: 100: strcpy(month, "OCT");
  7627  001AAC  0EBE               	movlw	low printRTC@month
  7628  001AAE  0100               	movlb	0	; () banked
  7629  001AB0  6F80               	movwf	strcpy@to& (0+255),b
  7630  001AB2  0E00               	movlw	high printRTC@month
  7631  001AB4  0100               	movlb	0	; () banked
  7632  001AB6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7633  001AB8  0EF2               	movlw	low STR_17
  7634  001ABA  0100               	movlb	0	; () banked
  7635  001ABC  6F82               	movwf	strcpy@from& (0+255),b
  7636  001ABE  0EFF               	movlw	high STR_17
  7637  001AC0  0100               	movlb	0	; () banked
  7638  001AC2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7639  001AC4  EC04  F01E         	call	_strcpy	;wreg free
  7640                           
  7641                           ;RTC.c: 101: break;
  7642  001AC8  D04D               	goto	l5553
  7643  001ACA                     l5545:
  7644                           
  7645                           ;RTC.c: 103: strcpy(month, "NOV");
  7646  001ACA  0EBE               	movlw	low printRTC@month
  7647  001ACC  0100               	movlb	0	; () banked
  7648  001ACE  6F80               	movwf	strcpy@to& (0+255),b
  7649  001AD0  0E00               	movlw	high printRTC@month
  7650  001AD2  0100               	movlb	0	; () banked
  7651  001AD4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7652  001AD6  0EF6               	movlw	low STR_18
  7653  001AD8  0100               	movlb	0	; () banked
  7654  001ADA  6F82               	movwf	strcpy@from& (0+255),b
  7655  001ADC  0EFF               	movlw	high STR_18
  7656  001ADE  0100               	movlb	0	; () banked
  7657  001AE0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7658  001AE2  EC04  F01E         	call	_strcpy	;wreg free
  7659                           
  7660                           ;RTC.c: 104: break;
  7661  001AE6  D03E               	goto	l5553
  7662  001AE8                     l5547:
  7663                           
  7664                           ;RTC.c: 106: strcpy(month, "DEC");
  7665  001AE8  0EBE               	movlw	low printRTC@month
  7666  001AEA  0100               	movlb	0	; () banked
  7667  001AEC  6F80               	movwf	strcpy@to& (0+255),b
  7668  001AEE  0E00               	movlw	high printRTC@month
  7669  001AF0  0100               	movlb	0	; () banked
  7670  001AF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7671  001AF4  0ECE               	movlw	low STR_19
  7672  001AF6  0100               	movlb	0	; () banked
  7673  001AF8  6F82               	movwf	strcpy@from& (0+255),b
  7674  001AFA  0EFF               	movlw	high STR_19
  7675  001AFC  0100               	movlb	0	; () banked
  7676  001AFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7677  001B00  EC04  F01E         	call	_strcpy	;wreg free
  7678                           
  7679                           ;RTC.c: 108: }
  7680                           
  7681                           ;RTC.c: 107: break;
  7682  001B04  D02F               	goto	l5553
  7683  001B06                     l5551:
  7684  001B06  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7685  001B0A  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7686                           
  7687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7688                           ; Switch size 1, requested type "space"
  7689                           ; Number of cases is 1, Range of values is 0 to 0
  7690                           ; switch strategies available:
  7691                           ; Name         Instructions Cycles
  7692                           ; simple_byte            4     3 (average)
  7693                           ;	Chosen strategy is simple_byte
  7694  001B0E  0100               	movlb	0	; () banked
  7695  001B10  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7696  001B12  0A00               	xorlw	0	; case 0
  7697  001B14  A4D8               	btfss	status,2,c
  7698  001B16  D026               	goto	l5553
  7699                           
  7700                           ; BSR set to: 0
  7701                           ; Switch size 1, requested type "space"
  7702                           ; Number of cases is 12, Range of values is 1 to 12
  7703                           ; switch strategies available:
  7704                           ; Name         Instructions Cycles
  7705                           ; simple_byte           37    19 (average)
  7706                           ;	Chosen strategy is simple_byte
  7707  001B18  0100               	movlb	0	; () banked
  7708  001B1A  51AB               	movf	??_printRTC& (0+255),w,b
  7709  001B1C  0A01               	xorlw	1	; case 1
  7710  001B1E  B4D8               	btfsc	status,2,c
  7711  001B20  D73E               	goto	l5525
  7712  001B22  0A03               	xorlw	3	; case 2
  7713  001B24  B4D8               	btfsc	status,2,c
  7714  001B26  D74A               	goto	l5527
  7715  001B28  0A01               	xorlw	1	; case 3
  7716  001B2A  B4D8               	btfsc	status,2,c
  7717  001B2C  D756               	goto	l5529
  7718  001B2E  0A07               	xorlw	7	; case 4
  7719  001B30  B4D8               	btfsc	status,2,c
  7720  001B32  D762               	goto	l5531
  7721  001B34  0A01               	xorlw	1	; case 5
  7722  001B36  B4D8               	btfsc	status,2,c
  7723  001B38  D76E               	goto	l5533
  7724  001B3A  0A03               	xorlw	3	; case 6
  7725  001B3C  B4D8               	btfsc	status,2,c
  7726  001B3E  D77A               	goto	l5535
  7727  001B40  0A01               	xorlw	1	; case 7
  7728  001B42  B4D8               	btfsc	status,2,c
  7729  001B44  D786               	goto	l5537
  7730  001B46  0A0F               	xorlw	15	; case 8
  7731  001B48  B4D8               	btfsc	status,2,c
  7732  001B4A  D792               	goto	l5539
  7733  001B4C  0A01               	xorlw	1	; case 9
  7734  001B4E  B4D8               	btfsc	status,2,c
  7735  001B50  D79E               	goto	l5541
  7736  001B52  0A03               	xorlw	3	; case 10
  7737  001B54  B4D8               	btfsc	status,2,c
  7738  001B56  D7AA               	goto	l5543
  7739  001B58  0A01               	xorlw	1	; case 11
  7740  001B5A  B4D8               	btfsc	status,2,c
  7741  001B5C  D7B6               	goto	l5545
  7742  001B5E  0A07               	xorlw	7	; case 12
  7743  001B60  B4D8               	btfsc	status,2,c
  7744  001B62  D7C2               	goto	l5547
  7745  001B64                     l5553:
  7746                           
  7747                           ;RTC.c: 109: lcdInst(0b10000000);;
  7748  001B64  0E80               	movlw	128
  7749  001B66  EC66  F020         	call	_lcdInst
  7750                           
  7751                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7752  001B6A  0E6A               	movlw	low STR_21
  7753  001B6C  0100               	movlb	0	; () banked
  7754  001B6E  6F8E               	movwf	printf@f& (0+255),b
  7755  001B70  0EFB               	movlw	high STR_21
  7756  001B72  0100               	movlb	0	; () banked
  7757  001B74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7758  001B76  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7759  001B7A  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7760  001B7E  0EBE               	movlw	low printRTC@month
  7761  001B80  0100               	movlb	0	; () banked
  7762  001B82  6F92               	movwf	(?_printf+4)& (0+255),b
  7763  001B84  0E00               	movlw	high printRTC@month
  7764  001B86  0100               	movlb	0	; () banked
  7765  001B88  6F93               	movwf	(?_printf+5)& (0+255),b
  7766  001B8A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7767  001B8E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7768  001B92  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7769  001B96  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7770  001B9A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7771  001B9E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7772  001BA2  EC9C  F008         	call	_printf	;wreg free
  7773  001BA6  0012               	return		;funcret
  7774  001BA8                     __end_of_printRTC:
  7775                           	opt stack 0
  7776                           tblptru	equ	0xFF8
  7777                           tblptrh	equ	0xFF7
  7778                           tblptrl	equ	0xFF6
  7779                           tablat	equ	0xFF5
  7780                           prodh	equ	0xFF4
  7781                           prodl	equ	0xFF3
  7782                           intcon	equ	0xFF2
  7783                           intcon2	equ	0xFF1
  7784                           intcon3	equ	0xFF0
  7785                           postinc0	equ	0xFEE
  7786                           wreg	equ	0xFE8
  7787                           postdec1	equ	0xFE5
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           
  7796 ;; *************** function _strcpy *****************
  7797 ;; Defined at:
  7798 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7801 ;;		 -> printRTC@month(4), UI@month(4), 
  7802 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7803 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7804 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7805 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7806 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7807 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7808 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7809 ;;		 -> STR_8(4), 
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7812 ;;		 -> printRTC@month(4), UI@month(4), 
  7813 ;; Return value:  Size  Location     Type
  7814 ;;                  2    0[BANK0 ] PTR unsigned char 
  7815 ;; Registers used:
  7816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7817 ;; Tracked objects:
  7818 ;;		On entry : 0/0
  7819 ;;		On exit  : 0/0
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7822 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;Total ram usage:        6 bytes
  7827 ;; Hardware stack levels used:    1
  7828 ;; Hardware stack levels required when called:    7
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_UI
  7833 ;;		_printRTC
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           	psect	text23
  7838  003C08                     __ptext23:
  7839                           	opt stack 0
  7840  003C08                     _strcpy:
  7841                           	opt stack 20
  7842                           
  7843                           ;incstack = 0
  7844  003C08  C080  F084         	movff	strcpy@to,strcpy@cp
  7845  003C0C  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7846  003C10  D006               	goto	l5257
  7847  003C12                     l5255:
  7848  003C12  0100               	movlb	0	; () banked
  7849  003C14  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7850  003C16  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7851  003C18  0100               	movlb	0	; () banked
  7852  003C1A  4B82               	infsnz	strcpy@from& (0+255),f,b
  7853  003C1C  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7854  003C1E                     l5257:
  7855  003C1E  C082  FFF6         	movff	strcpy@from,tblptrl
  7856  003C22  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7857  003C26                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7858  003C26  6AF8               	clrf	tblptru,c
  7859  003C28                     	endif
  7860  003C28                     	if	0	;tblptru may be non-zero
  7861  003C28                     	endif
  7862  003C28  C084  FFD9         	movff	strcpy@cp,fsr2l
  7863  003C2C  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7864  003C30  0008               	tblrd		*
  7865  003C32  CFF5 FFDF          	movff	tablat,indf2
  7866  003C36  50DF               	movf	indf2,w,c
  7867  003C38  B4D8               	btfsc	status,2,c
  7868  003C3A  0012               	return	
  7869  003C3C  D7EA               	goto	l5255
  7870  003C3E                     __end_of_strcpy:
  7871                           	opt stack 0
  7872                           tblptru	equ	0xFF8
  7873                           tblptrh	equ	0xFF7
  7874                           tblptrl	equ	0xFF6
  7875                           tablat	equ	0xFF5
  7876                           prodh	equ	0xFF4
  7877                           prodl	equ	0xFF3
  7878                           intcon	equ	0xFF2
  7879                           intcon2	equ	0xFF1
  7880                           intcon3	equ	0xFF0
  7881                           postinc0	equ	0xFEE
  7882                           wreg	equ	0xFE8
  7883                           postdec1	equ	0xFE5
  7884                           fsr1l	equ	0xFE1
  7885                           indf2	equ	0xFDF
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           fsr2h	equ	0xFDA
  7889                           fsr2l	equ	0xFD9
  7890                           status	equ	0xFD8
  7891                           
  7892 ;; *************** function _getRTC *****************
  7893 ;; Defined at:
  7894 ;;		line 44 in file "RTC.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;		None
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  i               2    3[BANK0 ] int 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  1    wreg      void 
  7901 ;; Registers used:
  7902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;Total ram usage:        2 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    9
  7915 ;; This function calls:
  7916 ;;		_I2C_Master_Read
  7917 ;;		_I2C_Master_Start
  7918 ;;		_I2C_Master_Stop
  7919 ;;		_I2C_Master_Write
  7920 ;; This function is called by:
  7921 ;;		_printRTC
  7922 ;;		_initSortTimer
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text24
  7927  00342A                     __ptext24:
  7928                           	opt stack 0
  7929  00342A                     _getRTC:
  7930                           	opt stack 18
  7931                           
  7932                           ;RTC.c: 48: I2C_Master_Start();
  7933                           
  7934                           ;incstack = 0
  7935  00342A  EC8C  F020         	call	_I2C_Master_Start	;wreg free
  7936                           
  7937                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7938  00342E  0E00               	movlw	0
  7939  003430  0100               	movlb	0	; () banked
  7940  003432  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7941  003434  0ED0               	movlw	208
  7942  003436  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7943  003438  EC7A  F020         	call	_I2C_Master_Write	;wreg free
  7944                           
  7945                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7946  00343C  0E00               	movlw	0
  7947  00343E  0100               	movlb	0	; () banked
  7948  003440  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7949  003442  0E00               	movlw	0
  7950  003444  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7951  003446  EC7A  F020         	call	_I2C_Master_Write	;wreg free
  7952                           
  7953                           ;RTC.c: 51: I2C_Master_Stop();
  7954  00344A  EC88  F020         	call	_I2C_Master_Stop	;wreg free
  7955                           
  7956                           ;RTC.c: 54: I2C_Master_Start();
  7957  00344E  EC8C  F020         	call	_I2C_Master_Start	;wreg free
  7958                           
  7959                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7960  003452  0E00               	movlw	0
  7961  003454  0100               	movlb	0	; () banked
  7962  003456  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7963  003458  0ED1               	movlw	209
  7964  00345A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7965  00345C  EC7A  F020         	call	_I2C_Master_Write	;wreg free
  7966                           
  7967                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7968  003460  0E00               	movlw	0
  7969  003462  0100               	movlb	0	; () banked
  7970  003464  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7971  003466  0E00               	movlw	0
  7972  003468  6F83               	movwf	getRTC@i& (0+255),b
  7973  00346A                     l5263:
  7974                           
  7975                           ; BSR set to: 0
  7976  00346A  0100               	movlb	0	; () banked
  7977  00346C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7978  00346E  D008               	goto	l5267
  7979  003470  0100               	movlb	0	; () banked
  7980  003472  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7981  003474  E115               	bnz	l5273
  7982  003476  0E06               	movlw	6
  7983  003478  0100               	movlb	0	; () banked
  7984  00347A  5D83               	subwf	getRTC@i& (0+255),w,b
  7985  00347C  B0D8               	btfsc	status,0,c
  7986  00347E  D010               	goto	l5273
  7987  003480                     l5267:
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7991  003480  0E24               	movlw	low _time
  7992  003482  0100               	movlb	0	; () banked
  7993  003484  2583               	addwf	getRTC@i& (0+255),w,b
  7994  003486  6ED9               	movwf	fsr2l,c
  7995  003488  0E01               	movlw	high _time
  7996  00348A  0100               	movlb	0	; () banked
  7997  00348C  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7998  00348E  6EDA               	movwf	fsr2h,c
  7999  003490  0E01               	movlw	1
  8000  003492  EC2B  F01F         	call	_I2C_Master_Read
  8001  003496  6EDF               	movwf	indf2,c
  8002  003498  0100               	movlb	0	; () banked
  8003  00349A  4B83               	infsnz	getRTC@i& (0+255),f,b
  8004  00349C  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8005  00349E  D7E5               	goto	l5263
  8006  0034A0                     l5273:
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;RTC.c: 58: }
  8010                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8011  0034A0  0E00               	movlw	0
  8012  0034A2  EC2B  F01F         	call	_I2C_Master_Read
  8013  0034A6  0101               	movlb	1	; () banked
  8014  0034A8  6F2A               	movwf	(_time+6)& (0+255),b
  8015                           
  8016                           ;RTC.c: 60: I2C_Master_Stop();
  8017  0034AA  EC88  F020         	call	_I2C_Master_Stop	;wreg free
  8018  0034AE  0012               	return		;funcret
  8019  0034B0                     __end_of_getRTC:
  8020                           	opt stack 0
  8021                           tblptru	equ	0xFF8
  8022                           tblptrh	equ	0xFF7
  8023                           tblptrl	equ	0xFF6
  8024                           tablat	equ	0xFF5
  8025                           prodh	equ	0xFF4
  8026                           prodl	equ	0xFF3
  8027                           intcon	equ	0xFF2
  8028                           intcon2	equ	0xFF1
  8029                           intcon3	equ	0xFF0
  8030                           postinc0	equ	0xFEE
  8031                           wreg	equ	0xFE8
  8032                           postdec1	equ	0xFE5
  8033                           fsr1l	equ	0xFE1
  8034                           indf2	equ	0xFDF
  8035                           postinc2	equ	0xFDE
  8036                           postdec2	equ	0xFDD
  8037                           fsr2h	equ	0xFDA
  8038                           fsr2l	equ	0xFD9
  8039                           status	equ	0xFD8
  8040                           
  8041 ;; *************** function _I2C_Master_Write *****************
  8042 ;; Defined at:
  8043 ;;		line 49 in file "I2C.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;  d               2    1[BANK0 ] unsigned int 
  8046 ;; Auto vars:     Size  Location     Type
  8047 ;;		None
  8048 ;; Return value:  Size  Location     Type
  8049 ;;                  1    wreg      void 
  8050 ;; Registers used:
  8051 ;;		wreg, status,2, status,0, cstack
  8052 ;; Tracked objects:
  8053 ;;		On entry : 0/0
  8054 ;;		On exit  : 0/0
  8055 ;;		Unchanged: 0/0
  8056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8057 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8061 ;;Total ram usage:        2 bytes
  8062 ;; Hardware stack levels used:    1
  8063 ;; Hardware stack levels required when called:    8
  8064 ;; This function calls:
  8065 ;;		_I2C_Master_Wait
  8066 ;; This function is called by:
  8067 ;;		_loadRTC
  8068 ;;		_getRTC
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text25
  8073  0040F4                     __ptext25:
  8074                           	opt stack 0
  8075  0040F4                     _I2C_Master_Write:
  8076                           	opt stack 18
  8077                           
  8078                           ;I2C.c: 51: I2C_Master_Wait();
  8079                           
  8080                           ;incstack = 0
  8081  0040F4  EC4B  F020         	call	_I2C_Master_Wait	;wreg free
  8082                           
  8083                           ;I2C.c: 52: SSPBUF = d;
  8084  0040F8  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8085  0040FC  0012               	return		;funcret
  8086  0040FE                     __end_of_I2C_Master_Write:
  8087                           	opt stack 0
  8088                           tblptru	equ	0xFF8
  8089                           tblptrh	equ	0xFF7
  8090                           tblptrl	equ	0xFF6
  8091                           tablat	equ	0xFF5
  8092                           prodh	equ	0xFF4
  8093                           prodl	equ	0xFF3
  8094                           intcon	equ	0xFF2
  8095                           intcon2	equ	0xFF1
  8096                           intcon3	equ	0xFF0
  8097                           postinc0	equ	0xFEE
  8098                           wreg	equ	0xFE8
  8099                           postdec1	equ	0xFE5
  8100                           fsr1l	equ	0xFE1
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function _I2C_Master_Stop *****************
  8109 ;; Defined at:
  8110 ;;		line 43 in file "I2C.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;		None
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, status,2, status,0, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;Total ram usage:        0 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    8
  8131 ;; This function calls:
  8132 ;;		_I2C_Master_Wait
  8133 ;; This function is called by:
  8134 ;;		_loadRTC
  8135 ;;		_getRTC
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	text26
  8140  004110                     __ptext26:
  8141                           	opt stack 0
  8142  004110                     _I2C_Master_Stop:
  8143                           	opt stack 18
  8144                           
  8145                           ;I2C.c: 45: I2C_Master_Wait();
  8146                           
  8147                           ;incstack = 0
  8148  004110  EC4B  F020         	call	_I2C_Master_Wait	;wreg free
  8149                           
  8150                           ;I2C.c: 46: PEN = 1;
  8151  004114  84C5               	bsf	4037,2,c	;volatile
  8152  004116  0012               	return		;funcret
  8153  004118                     __end_of_I2C_Master_Stop:
  8154                           	opt stack 0
  8155                           tblptru	equ	0xFF8
  8156                           tblptrh	equ	0xFF7
  8157                           tblptrl	equ	0xFF6
  8158                           tablat	equ	0xFF5
  8159                           prodh	equ	0xFF4
  8160                           prodl	equ	0xFF3
  8161                           intcon	equ	0xFF2
  8162                           intcon2	equ	0xFF1
  8163                           intcon3	equ	0xFF0
  8164                           postinc0	equ	0xFEE
  8165                           wreg	equ	0xFE8
  8166                           postdec1	equ	0xFE5
  8167                           fsr1l	equ	0xFE1
  8168                           indf2	equ	0xFDF
  8169                           postinc2	equ	0xFDE
  8170                           postdec2	equ	0xFDD
  8171                           fsr2h	equ	0xFDA
  8172                           fsr2l	equ	0xFD9
  8173                           status	equ	0xFD8
  8174                           
  8175 ;; *************** function _I2C_Master_Start *****************
  8176 ;; Defined at:
  8177 ;;		line 31 in file "I2C.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;		None
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;		None
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  1    wreg      void 
  8184 ;; Registers used:
  8185 ;;		wreg, status,2, status,0, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;Total ram usage:        0 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; Hardware stack levels required when called:    8
  8198 ;; This function calls:
  8199 ;;		_I2C_Master_Wait
  8200 ;; This function is called by:
  8201 ;;		_loadRTC
  8202 ;;		_getRTC
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206                           	psect	text27
  8207  004118                     __ptext27:
  8208                           	opt stack 0
  8209  004118                     _I2C_Master_Start:
  8210                           	opt stack 18
  8211                           
  8212                           ;I2C.c: 33: I2C_Master_Wait();
  8213                           
  8214                           ;incstack = 0
  8215  004118  EC4B  F020         	call	_I2C_Master_Wait	;wreg free
  8216                           
  8217                           ;I2C.c: 34: SEN = 1;
  8218  00411C  80C5               	bsf	4037,0,c	;volatile
  8219  00411E  0012               	return		;funcret
  8220  004120                     __end_of_I2C_Master_Start:
  8221                           	opt stack 0
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           intcon2	equ	0xFF1
  8230                           intcon3	equ	0xFF0
  8231                           postinc0	equ	0xFEE
  8232                           wreg	equ	0xFE8
  8233                           postdec1	equ	0xFE5
  8234                           fsr1l	equ	0xFE1
  8235                           indf2	equ	0xFDF
  8236                           postinc2	equ	0xFDE
  8237                           postdec2	equ	0xFDD
  8238                           fsr2h	equ	0xFDA
  8239                           fsr2l	equ	0xFD9
  8240                           status	equ	0xFD8
  8241                           
  8242 ;; *************** function _I2C_Master_Read *****************
  8243 ;; Defined at:
  8244 ;;		line 55 in file "I2C.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  a               1    wreg     unsigned char 
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  a               1    1[BANK0 ] unsigned char 
  8249 ;;  temp            1    2[BANK0 ] unsigned char 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  1    wreg      unsigned char 
  8252 ;; Registers used:
  8253 ;;		wreg, status,2, status,0, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;Total ram usage:        2 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    8
  8266 ;; This function calls:
  8267 ;;		_I2C_Master_Wait
  8268 ;; This function is called by:
  8269 ;;		_getRTC
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text28
  8274  003E56                     __ptext28:
  8275                           	opt stack 0
  8276  003E56                     _I2C_Master_Read:
  8277                           	opt stack 18
  8278                           
  8279                           ;incstack = 0
  8280                           ;I2C_Master_Read@a stored from wreg
  8281  003E56  0100               	movlb	0	; () banked
  8282  003E58  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8283                           
  8284                           ;I2C.c: 57: unsigned char temp;
  8285                           ;I2C.c: 58: I2C_Master_Wait();
  8286  003E5A  EC4B  F020         	call	_I2C_Master_Wait	;wreg free
  8287                           
  8288                           ;I2C.c: 59: RCEN = 1;
  8289  003E5E  86C5               	bsf	4037,3,c	;volatile
  8290                           
  8291                           ;I2C.c: 60: I2C_Master_Wait();
  8292  003E60  EC4B  F020         	call	_I2C_Master_Wait	;wreg free
  8293                           
  8294                           ;I2C.c: 61: temp = SSPBUF;
  8295  003E64  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8296                           
  8297                           ;I2C.c: 62: I2C_Master_Wait();
  8298  003E68  EC4B  F020         	call	_I2C_Master_Wait	;wreg free
  8299                           
  8300                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8301  003E6C  0100               	movlb	0	; () banked
  8302  003E6E  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8303  003E70  0100               	movlb	0	; () banked
  8304  003E72  A4D8               	btfss	status,2,c
  8305  003E74  D002               	goto	u3350
  8306  003E76  8AC5               	bsf	4037,5,c	;volatile
  8307  003E78  D001               	goto	l4957
  8308  003E7A                     u3350:
  8309  003E7A  9AC5               	bcf	4037,5,c	;volatile
  8310  003E7C                     l4957:
  8311                           
  8312                           ;I2C.c: 64: ACKEN = 1;
  8313  003E7C  88C5               	bsf	4037,4,c	;volatile
  8314                           
  8315                           ;I2C.c: 65: return temp;
  8316  003E7E  0100               	movlb	0	; () banked
  8317  003E80  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8318  003E82  0012               	return	
  8319  003E84                     __end_of_I2C_Master_Read:
  8320                           	opt stack 0
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodh	equ	0xFF4
  8326                           prodl	equ	0xFF3
  8327                           intcon	equ	0xFF2
  8328                           intcon2	equ	0xFF1
  8329                           intcon3	equ	0xFF0
  8330                           postinc0	equ	0xFEE
  8331                           wreg	equ	0xFE8
  8332                           postdec1	equ	0xFE5
  8333                           fsr1l	equ	0xFE1
  8334                           indf2	equ	0xFDF
  8335                           postinc2	equ	0xFDE
  8336                           postdec2	equ	0xFDD
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           
  8341 ;; *************** function _I2C_Master_Wait *****************
  8342 ;; Defined at:
  8343 ;;		line 26 in file "I2C.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;		None
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  1    wreg      void 
  8350 ;; Registers used:
  8351 ;;		wreg, status,2, status,0
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8361 ;;Total ram usage:        1 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:    7
  8364 ;; This function calls:
  8365 ;;		Nothing
  8366 ;; This function is called by:
  8367 ;;		_I2C_Master_Start
  8368 ;;		_I2C_Master_Stop
  8369 ;;		_I2C_Master_Write
  8370 ;;		_I2C_Master_Read
  8371 ;;		_I2C_Master_RepeatedStart
  8372 ;; This function uses a non-reentrant model
  8373 ;;
  8374                           
  8375                           	psect	text29
  8376  004096                     __ptext29:
  8377                           	opt stack 0
  8378  004096                     _I2C_Master_Wait:
  8379                           	opt stack 18
  8380  004096                     l66:
  8381  004096  B4C7               	btfsc	4039,2,c	;volatile
  8382  004098  D7FE               	goto	l66
  8383  00409A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8384  00409E  0E1F               	movlw	31
  8385  0040A0  0100               	movlb	0	; () banked
  8386  0040A2  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8387  0040A4  B4D8               	btfsc	status,2,c
  8388  0040A6  0012               	return	
  8389  0040A8  D7F6               	goto	l66
  8390  0040AA                     __end_of_I2C_Master_Wait:
  8391                           	opt stack 0
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           intcon2	equ	0xFF1
  8400                           intcon3	equ	0xFF0
  8401                           postinc0	equ	0xFEE
  8402                           wreg	equ	0xFE8
  8403                           postdec1	equ	0xFE5
  8404                           fsr1l	equ	0xFE1
  8405                           indf2	equ	0xFDF
  8406                           postinc2	equ	0xFDE
  8407                           postdec2	equ	0xFDD
  8408                           fsr2h	equ	0xFDA
  8409                           fsr2l	equ	0xFD9
  8410                           status	equ	0xFD8
  8411                           
  8412 ;; *************** function _change_state_to_menu_22 *****************
  8413 ;; Defined at:
  8414 ;;		line 496 in file "UI.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;		None
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;		None
  8419 ;; Return value:  Size  Location     Type
  8420 ;;                  1    wreg      void 
  8421 ;; Registers used:
  8422 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8423 ;; Tracked objects:
  8424 ;;		On entry : 0/0
  8425 ;;		On exit  : 0/0
  8426 ;;		Unchanged: 0/0
  8427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;Total ram usage:        0 bytes
  8433 ;; Hardware stack levels used:    1
  8434 ;; Hardware stack levels required when called:   10
  8435 ;; This function calls:
  8436 ;;		_lcdInst
  8437 ;;		_printf
  8438 ;; This function is called by:
  8439 ;;		_UI
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text30
  8444  003B98                     __ptext30:
  8445                           	opt stack 0
  8446  003B98                     _change_state_to_menu_22:
  8447                           	opt stack 19
  8448                           
  8449                           ;UI.c: 497: cur_state = 22;
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;incstack = 0
  8453  003B98  0E00               	movlw	0
  8454  003B9A  0100               	movlb	0	; () banked
  8455  003B9C  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8456  003B9E  0E16               	movlw	22
  8457  003BA0  6FDE               	movwf	_cur_state& (0+255),b
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;UI.c: 499: lcdInst(0b10000000);;
  8461  003BA2  0E80               	movlw	128
  8462  003BA4  EC66  F020         	call	_lcdInst
  8463                           
  8464                           ;UI.c: 500: printf("2. SORT        <");
  8465  003BA8  0E03               	movlw	low STR_34
  8466  003BAA  0100               	movlb	0	; () banked
  8467  003BAC  6F8E               	movwf	printf@f& (0+255),b
  8468  003BAE  0EFE               	movlw	high STR_34
  8469  003BB0  0100               	movlb	0	; () banked
  8470  003BB2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8471  003BB4  EC9C  F008         	call	_printf	;wreg free
  8472                           
  8473                           ;UI.c: 501: lcdInst(0b11000000);;
  8474  003BB8  0EC0               	movlw	192
  8475  003BBA  EC66  F020         	call	_lcdInst
  8476                           
  8477                           ;UI.c: 502: printf("3. LOGS         ");
  8478  003BBE  0E48               	movlw	low STR_36
  8479  003BC0  0100               	movlb	0	; () banked
  8480  003BC2  6F8E               	movwf	printf@f& (0+255),b
  8481  003BC4  0EFD               	movlw	high STR_36
  8482  003BC6  0100               	movlb	0	; () banked
  8483  003BC8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8484  003BCA  EC9C  F008         	call	_printf	;wreg free
  8485  003BCE  0012               	return		;funcret
  8486  003BD0                     __end_of_change_state_to_menu_22:
  8487                           	opt stack 0
  8488                           tblptru	equ	0xFF8
  8489                           tblptrh	equ	0xFF7
  8490                           tblptrl	equ	0xFF6
  8491                           tablat	equ	0xFF5
  8492                           prodh	equ	0xFF4
  8493                           prodl	equ	0xFF3
  8494                           intcon	equ	0xFF2
  8495                           intcon2	equ	0xFF1
  8496                           intcon3	equ	0xFF0
  8497                           postinc0	equ	0xFEE
  8498                           wreg	equ	0xFE8
  8499                           postdec1	equ	0xFE5
  8500                           fsr1l	equ	0xFE1
  8501                           indf2	equ	0xFDF
  8502                           postinc2	equ	0xFDE
  8503                           postdec2	equ	0xFDD
  8504                           fsr2h	equ	0xFDA
  8505                           fsr2l	equ	0xFD9
  8506                           status	equ	0xFD8
  8507                           
  8508 ;; *************** function _change_state_to_menu_12 *****************
  8509 ;; Defined at:
  8510 ;;		line 488 in file "UI.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;		None
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;		None
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  1    wreg      void 
  8517 ;; Registers used:
  8518 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;Total ram usage:        0 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:   10
  8531 ;; This function calls:
  8532 ;;		_lcdInst
  8533 ;;		_printf
  8534 ;; This function is called by:
  8535 ;;		_UI
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text31
  8540  003BD0                     __ptext31:
  8541                           	opt stack 0
  8542  003BD0                     _change_state_to_menu_12:
  8543                           	opt stack 19
  8544                           
  8545                           ;UI.c: 489: cur_state = 12;
  8546                           
  8547                           ;incstack = 0
  8548  003BD0  0E00               	movlw	0
  8549  003BD2  0100               	movlb	0	; () banked
  8550  003BD4  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8551  003BD6  0E0C               	movlw	12
  8552  003BD8  6FDE               	movwf	_cur_state& (0+255),b
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;UI.c: 491: lcdInst(0b10000000);;
  8556  003BDA  0E80               	movlw	128
  8557  003BDC  EC66  F020         	call	_lcdInst
  8558                           
  8559                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8560  003BE0  0E6A               	movlw	low STR_33
  8561  003BE2  0100               	movlb	0	; () banked
  8562  003BE4  6F8E               	movwf	printf@f& (0+255),b
  8563  003BE6  0EFD               	movlw	high STR_33
  8564  003BE8  0100               	movlb	0	; () banked
  8565  003BEA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8566  003BEC  EC9C  F008         	call	_printf	;wreg free
  8567                           
  8568                           ;UI.c: 493: lcdInst(0b11000000);;
  8569  003BF0  0EC0               	movlw	192
  8570  003BF2  EC66  F020         	call	_lcdInst
  8571                           
  8572                           ;UI.c: 494: printf("2. SORT        <");
  8573  003BF6  0E03               	movlw	low STR_34
  8574  003BF8  0100               	movlb	0	; () banked
  8575  003BFA  6F8E               	movwf	printf@f& (0+255),b
  8576  003BFC  0EFE               	movlw	high STR_34
  8577  003BFE  0100               	movlb	0	; () banked
  8578  003C00  6F8F               	movwf	(printf@f+1)& (0+255),b
  8579  003C02  EC9C  F008         	call	_printf	;wreg free
  8580  003C06  0012               	return		;funcret
  8581  003C08                     __end_of_change_state_to_menu_12:
  8582                           	opt stack 0
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           prodh	equ	0xFF4
  8588                           prodl	equ	0xFF3
  8589                           intcon	equ	0xFF2
  8590                           intcon2	equ	0xFF1
  8591                           intcon3	equ	0xFF0
  8592                           postinc0	equ	0xFEE
  8593                           wreg	equ	0xFE8
  8594                           postdec1	equ	0xFE5
  8595                           fsr1l	equ	0xFE1
  8596                           indf2	equ	0xFDF
  8597                           postinc2	equ	0xFDE
  8598                           postdec2	equ	0xFDD
  8599                           fsr2h	equ	0xFDA
  8600                           fsr2l	equ	0xFD9
  8601                           status	equ	0xFD8
  8602                           
  8603 ;; *************** function ___awmod *****************
  8604 ;; Defined at:
  8605 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  dividend        2    0[BANK0 ] int 
  8608 ;;  divisor         2    2[BANK0 ] int 
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  sign            1    5[BANK0 ] unsigned char 
  8611 ;;  counter         1    4[BANK0 ] unsigned char 
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  2    0[BANK0 ] int 
  8614 ;; Registers used:
  8615 ;;		wreg, status,2, status,0
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8621 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;Total ram usage:        6 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    7
  8628 ;; This function calls:
  8629 ;;		Nothing
  8630 ;; This function is called by:
  8631 ;;		_UI
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           	psect	text32
  8636  0031DE                     __ptext32:
  8637                           	opt stack 0
  8638  0031DE                     ___awmod:
  8639                           	opt stack 22
  8640                           
  8641                           ;incstack = 0
  8642  0031DE  0E00               	movlw	0
  8643  0031E0  0100               	movlb	0	; () banked
  8644  0031E2  6F85               	movwf	___awmod@sign& (0+255),b
  8645                           
  8646                           ; BSR set to: 0
  8647  0031E4  0100               	movlb	0	; () banked
  8648  0031E6  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8649  0031E8  D008               	goto	l6791
  8650                           
  8651                           ; BSR set to: 0
  8652  0031EA  0100               	movlb	0	; () banked
  8653  0031EC  6D80               	negf	___awmod@dividend& (0+255),b
  8654  0031EE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8655  0031F0  B0D8               	btfsc	status,0,c
  8656  0031F2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8657                           
  8658                           ; BSR set to: 0
  8659  0031F4  0E01               	movlw	1
  8660  0031F6  0100               	movlb	0	; () banked
  8661  0031F8  6F85               	movwf	___awmod@sign& (0+255),b
  8662  0031FA                     l6791:
  8663                           
  8664                           ; BSR set to: 0
  8665  0031FA  0100               	movlb	0	; () banked
  8666  0031FC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8667  0031FE  D005               	goto	l6795
  8668                           
  8669                           ; BSR set to: 0
  8670  003200  0100               	movlb	0	; () banked
  8671  003202  6D82               	negf	___awmod@divisor& (0+255),b
  8672  003204  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8673  003206  B0D8               	btfsc	status,0,c
  8674  003208  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8675  00320A                     l6795:
  8676                           
  8677                           ; BSR set to: 0
  8678  00320A  0100               	movlb	0	; () banked
  8679  00320C  5182               	movf	___awmod@divisor& (0+255),w,b
  8680  00320E  0100               	movlb	0	; () banked
  8681  003210  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8682  003212  B4D8               	btfsc	status,2,c
  8683  003214  D026               	goto	l6811
  8684                           
  8685                           ; BSR set to: 0
  8686  003216  0E01               	movlw	1
  8687  003218  0100               	movlb	0	; () banked
  8688  00321A  6F84               	movwf	___awmod@counter& (0+255),b
  8689  00321C  D006               	goto	l6801
  8690  00321E                     l6799:
  8691                           
  8692                           ; BSR set to: 0
  8693  00321E  0100               	movlb	0	; () banked
  8694  003220  90D8               	bcf	status,0,c
  8695  003222  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8696  003224  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8697  003226  0100               	movlb	0	; () banked
  8698  003228  2B84               	incf	___awmod@counter& (0+255),f,b
  8699  00322A                     l6801:
  8700                           
  8701                           ; BSR set to: 0
  8702  00322A  0100               	movlb	0	; () banked
  8703  00322C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8704  00322E  D7F7               	goto	l6799
  8705  003230                     l6803:
  8706                           
  8707                           ; BSR set to: 0
  8708  003230  0100               	movlb	0	; () banked
  8709  003232  5182               	movf	___awmod@divisor& (0+255),w,b
  8710  003234  0100               	movlb	0	; () banked
  8711  003236  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8712  003238  0100               	movlb	0	; () banked
  8713  00323A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8714  00323C  0100               	movlb	0	; () banked
  8715  00323E  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8716  003240  A0D8               	btfss	status,0,c
  8717  003242  D008               	goto	l6807
  8718                           
  8719                           ; BSR set to: 0
  8720  003244  0100               	movlb	0	; () banked
  8721  003246  5182               	movf	___awmod@divisor& (0+255),w,b
  8722  003248  0100               	movlb	0	; () banked
  8723  00324A  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8724  00324C  0100               	movlb	0	; () banked
  8725  00324E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8726  003250  0100               	movlb	0	; () banked
  8727  003252  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8728  003254                     l6807:
  8729                           
  8730                           ; BSR set to: 0
  8731  003254  0100               	movlb	0	; () banked
  8732  003256  90D8               	bcf	status,0,c
  8733  003258  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8734  00325A  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8735                           
  8736                           ; BSR set to: 0
  8737  00325C  0100               	movlb	0	; () banked
  8738  00325E  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8739  003260  D7E7               	goto	l6803
  8740  003262                     l6811:
  8741                           
  8742                           ; BSR set to: 0
  8743  003262  0100               	movlb	0	; () banked
  8744  003264  5185               	movf	___awmod@sign& (0+255),w,b
  8745  003266  0100               	movlb	0	; () banked
  8746  003268  B4D8               	btfsc	status,2,c
  8747  00326A  D005               	goto	l6815
  8748                           
  8749                           ; BSR set to: 0
  8750  00326C  0100               	movlb	0	; () banked
  8751  00326E  6D80               	negf	___awmod@dividend& (0+255),b
  8752  003270  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8753  003272  B0D8               	btfsc	status,0,c
  8754  003274  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8755  003276                     l6815:
  8756                           
  8757                           ; BSR set to: 0
  8758  003276  C080  F080         	movff	___awmod@dividend,?___awmod
  8759  00327A  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8760  00327E  0012               	return	
  8761  003280                     __end_of___awmod:
  8762                           	opt stack 0
  8763                           tblptru	equ	0xFF8
  8764                           tblptrh	equ	0xFF7
  8765                           tblptrl	equ	0xFF6
  8766                           tablat	equ	0xFF5
  8767                           prodh	equ	0xFF4
  8768                           prodl	equ	0xFF3
  8769                           intcon	equ	0xFF2
  8770                           intcon2	equ	0xFF1
  8771                           intcon3	equ	0xFF0
  8772                           postinc0	equ	0xFEE
  8773                           wreg	equ	0xFE8
  8774                           postdec1	equ	0xFE5
  8775                           fsr1l	equ	0xFE1
  8776                           indf2	equ	0xFDF
  8777                           postinc2	equ	0xFDE
  8778                           postdec2	equ	0xFDD
  8779                           fsr2h	equ	0xFDA
  8780                           fsr2l	equ	0xFD9
  8781                           status	equ	0xFD8
  8782                           
  8783 ;; *************** function ___awdiv *****************
  8784 ;; Defined at:
  8785 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;  dividend        2    6[BANK0 ] int 
  8788 ;;  divisor         2    8[BANK0 ] int 
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;  quotient        2   12[BANK0 ] int 
  8791 ;;  sign            1   11[BANK0 ] unsigned char 
  8792 ;;  counter         1   10[BANK0 ] unsigned char 
  8793 ;; Return value:  Size  Location     Type
  8794 ;;                  2    6[BANK0 ] int 
  8795 ;; Registers used:
  8796 ;;		wreg, status,2, status,0
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8802 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;Total ram usage:        8 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    7
  8809 ;; This function calls:
  8810 ;;		Nothing
  8811 ;; This function is called by:
  8812 ;;		_UI
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           	psect	text33
  8817  002FBA                     __ptext33:
  8818                           	opt stack 0
  8819  002FBA                     ___awdiv:
  8820                           	opt stack 22
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;incstack = 0
  8824  002FBA  0E00               	movlw	0
  8825  002FBC  0100               	movlb	0	; () banked
  8826  002FBE  6F8B               	movwf	___awdiv@sign& (0+255),b
  8827                           
  8828                           ; BSR set to: 0
  8829  002FC0  0100               	movlb	0	; () banked
  8830  002FC2  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8831  002FC4  D008               	goto	l6747
  8832                           
  8833                           ; BSR set to: 0
  8834  002FC6  0100               	movlb	0	; () banked
  8835  002FC8  6D88               	negf	___awdiv@divisor& (0+255),b
  8836  002FCA  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8837  002FCC  B0D8               	btfsc	status,0,c
  8838  002FCE  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8839                           
  8840                           ; BSR set to: 0
  8841  002FD0  0E01               	movlw	1
  8842  002FD2  0100               	movlb	0	; () banked
  8843  002FD4  6F8B               	movwf	___awdiv@sign& (0+255),b
  8844  002FD6                     l6747:
  8845                           
  8846                           ; BSR set to: 0
  8847  002FD6  0100               	movlb	0	; () banked
  8848  002FD8  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8849  002FDA  D008               	goto	l6753
  8850                           
  8851                           ; BSR set to: 0
  8852  002FDC  0100               	movlb	0	; () banked
  8853  002FDE  6D86               	negf	___awdiv@dividend& (0+255),b
  8854  002FE0  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8855  002FE2  B0D8               	btfsc	status,0,c
  8856  002FE4  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8857                           
  8858                           ; BSR set to: 0
  8859  002FE6  0E01               	movlw	1
  8860  002FE8  0100               	movlb	0	; () banked
  8861  002FEA  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8862  002FEC                     l6753:
  8863                           
  8864                           ; BSR set to: 0
  8865  002FEC  0E00               	movlw	0
  8866  002FEE  0100               	movlb	0	; () banked
  8867  002FF0  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8868  002FF2  0E00               	movlw	0
  8869  002FF4  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8870                           
  8871                           ; BSR set to: 0
  8872  002FF6  0100               	movlb	0	; () banked
  8873  002FF8  5188               	movf	___awdiv@divisor& (0+255),w,b
  8874  002FFA  0100               	movlb	0	; () banked
  8875  002FFC  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8876  002FFE  B4D8               	btfsc	status,2,c
  8877  003000  D02C               	goto	l6775
  8878                           
  8879                           ; BSR set to: 0
  8880  003002  0E01               	movlw	1
  8881  003004  0100               	movlb	0	; () banked
  8882  003006  6F8A               	movwf	___awdiv@counter& (0+255),b
  8883  003008  D006               	goto	l6761
  8884  00300A                     l6759:
  8885                           
  8886                           ; BSR set to: 0
  8887  00300A  0100               	movlb	0	; () banked
  8888  00300C  90D8               	bcf	status,0,c
  8889  00300E  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8890  003010  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8891  003012  0100               	movlb	0	; () banked
  8892  003014  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8893  003016                     l6761:
  8894                           
  8895                           ; BSR set to: 0
  8896  003016  0100               	movlb	0	; () banked
  8897  003018  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8898  00301A  D7F7               	goto	l6759
  8899  00301C                     l6763:
  8900                           
  8901                           ; BSR set to: 0
  8902  00301C  0100               	movlb	0	; () banked
  8903  00301E  90D8               	bcf	status,0,c
  8904  003020  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8905  003022  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8906                           
  8907                           ; BSR set to: 0
  8908  003024  0100               	movlb	0	; () banked
  8909  003026  5188               	movf	___awdiv@divisor& (0+255),w,b
  8910  003028  0100               	movlb	0	; () banked
  8911  00302A  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8912  00302C  0100               	movlb	0	; () banked
  8913  00302E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8914  003030  0100               	movlb	0	; () banked
  8915  003032  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8916  003034  A0D8               	btfss	status,0,c
  8917  003036  D00A               	goto	l6771
  8918                           
  8919                           ; BSR set to: 0
  8920  003038  0100               	movlb	0	; () banked
  8921  00303A  5188               	movf	___awdiv@divisor& (0+255),w,b
  8922  00303C  0100               	movlb	0	; () banked
  8923  00303E  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8924  003040  0100               	movlb	0	; () banked
  8925  003042  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8926  003044  0100               	movlb	0	; () banked
  8927  003046  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8928                           
  8929                           ; BSR set to: 0
  8930  003048  0100               	movlb	0	; () banked
  8931  00304A  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8932  00304C                     l6771:
  8933                           
  8934                           ; BSR set to: 0
  8935  00304C  0100               	movlb	0	; () banked
  8936  00304E  90D8               	bcf	status,0,c
  8937  003050  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8938  003052  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8939                           
  8940                           ; BSR set to: 0
  8941  003054  0100               	movlb	0	; () banked
  8942  003056  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8943  003058  D7E1               	goto	l6763
  8944  00305A                     l6775:
  8945                           
  8946                           ; BSR set to: 0
  8947  00305A  0100               	movlb	0	; () banked
  8948  00305C  518B               	movf	___awdiv@sign& (0+255),w,b
  8949  00305E  0100               	movlb	0	; () banked
  8950  003060  B4D8               	btfsc	status,2,c
  8951  003062  D005               	goto	l6779
  8952                           
  8953                           ; BSR set to: 0
  8954  003064  0100               	movlb	0	; () banked
  8955  003066  6D8C               	negf	___awdiv@quotient& (0+255),b
  8956  003068  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8957  00306A  B0D8               	btfsc	status,0,c
  8958  00306C  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8959  00306E                     l6779:
  8960                           
  8961                           ; BSR set to: 0
  8962  00306E  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8963  003072  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8964  003076  0012               	return	
  8965  003078                     __end_of___awdiv:
  8966                           	opt stack 0
  8967                           tblptru	equ	0xFF8
  8968                           tblptrh	equ	0xFF7
  8969                           tblptrl	equ	0xFF6
  8970                           tablat	equ	0xFF5
  8971                           prodh	equ	0xFF4
  8972                           prodl	equ	0xFF3
  8973                           intcon	equ	0xFF2
  8974                           intcon2	equ	0xFF1
  8975                           intcon3	equ	0xFF0
  8976                           postinc0	equ	0xFEE
  8977                           wreg	equ	0xFE8
  8978                           postdec1	equ	0xFE5
  8979                           fsr1l	equ	0xFE1
  8980                           indf2	equ	0xFDF
  8981                           postinc2	equ	0xFDE
  8982                           postdec2	equ	0xFDD
  8983                           fsr2h	equ	0xFDA
  8984                           fsr2l	equ	0xFD9
  8985                           status	equ	0xFD8
  8986                           
  8987 ;; *************** function _Test *****************
  8988 ;; Defined at:
  8989 ;;		line 26 in file "Test.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;		None
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;		None
  8994 ;; Return value:  Size  Location     Type
  8995 ;;                  1    wreg      void 
  8996 ;; Registers used:
  8997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9007 ;;Total ram usage:        2 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; Hardware stack levels required when called:   11
  9010 ;; This function calls:
  9011 ;;		_EEPROMTest
  9012 ;;		_PortTestA5
  9013 ;;		_PortTests
  9014 ;;		_ToggleTestA5
  9015 ;;		_actuatorTest
  9016 ;;		_algorithmTest
  9017 ;;		_lcdInst
  9018 ;;		_printf
  9019 ;;		_sensorTest
  9020 ;; This function is called by:
  9021 ;;		_main
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text34
  9026  002C26                     __ptext34:
  9027                           	opt stack 0
  9028  002C26                     _Test:
  9029                           	opt stack 19
  9030  002C26                     
  9031                           ;Test.c: 29: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9032  002C26  0E01               	movlw	1
  9033  002C28  EC66  F020         	call	_lcdInst
  9034  002C2C  0E68               	movlw	104
  9035  002C2E  0100               	movlb	0	; () banked
  9036  002C30  6FC6               	movwf	??_Test& (0+255),b
  9037  002C32  0EE4               	movlw	228
  9038  002C34                     u6957:
  9039  002C34  2EE8               	decfsz	wreg,f,c
  9040  002C36  D7FE               	bra	u6957
  9041  002C38  2FC6               	decfsz	??_Test& (0+255),f,b
  9042  002C3A  D7FC               	bra	u6957
  9043  002C3C  F000               	nop	
  9044  002C3E  0E80               	movlw	128
  9045  002C40  EC66  F020         	call	_lcdInst
  9046                           
  9047                           ;Test.c: 30: printf("1.ALG|2.SNR|3.AC");
  9048  002C44  0EC0               	movlw	low STR_68
  9049  002C46  0100               	movlb	0	; () banked
  9050  002C48  6F8E               	movwf	printf@f& (0+255),b
  9051  002C4A  0EFC               	movlw	high STR_68
  9052  002C4C  0100               	movlb	0	; () banked
  9053  002C4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9054  002C50  EC9C  F008         	call	_printf	;wreg free
  9055                           
  9056                           ;Test.c: 31: lcdInst(0b11000000);;
  9057  002C54  0EC0               	movlw	192
  9058  002C56  EC66  F020         	call	_lcdInst
  9059                           
  9060                           ;Test.c: 32: printf("4.HI|5.TOG|6.EEP");
  9061  002C5A  0EF3               	movlw	low STR_69
  9062  002C5C  0100               	movlb	0	; () banked
  9063  002C5E  6F8E               	movwf	printf@f& (0+255),b
  9064  002C60  0EFC               	movlw	high STR_69
  9065  002C62  0100               	movlb	0	; () banked
  9066  002C64  6F8F               	movwf	(printf@f+1)& (0+255),b
  9067  002C66  EC9C  F008         	call	_printf	;wreg free
  9068                           
  9069                           ;Test.c: 33: _delay((unsigned long)((100)*(32000000/4000.0)));
  9070  002C6A  0E05               	movlw	5
  9071  002C6C  0100               	movlb	0	; () banked
  9072  002C6E  6FC7               	movwf	(??_Test+1)& (0+255),b
  9073  002C70  0E0F               	movlw	15
  9074  002C72  0100               	movlb	0	; () banked
  9075  002C74  6FC6               	movwf	??_Test& (0+255),b
  9076  002C76  0EF1               	movlw	241
  9077  002C78                     u6967:
  9078  002C78  2EE8               	decfsz	wreg,f,c
  9079  002C7A  D7FE               	bra	u6967
  9080  002C7C  2FC6               	decfsz	??_Test& (0+255),f,b
  9081  002C7E  D7FC               	bra	u6967
  9082  002C80  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9083  002C82  D7FA               	bra	u6967
  9084  002C84                     l999:
  9085  002C84  A281               	btfss	3969,1,c	;volatile
  9086  002C86  D7FE               	goto	l999
  9087                           
  9088                           ;Test.c: 35: var = PORTB >> 4;
  9089  002C88  CF81 F0C6          	movff	3969,??_Test	;volatile
  9090  002C8C  0100               	movlb	0	; () banked
  9091  002C8E  3BC6               	swapf	??_Test& (0+255),f,b
  9092  002C90  0E0F               	movlw	15
  9093  002C92  17C6               	andwf	??_Test& (0+255),f,b
  9094  002C94  0100               	movlb	0	; () banked
  9095  002C96  51C6               	movf	??_Test& (0+255),w,b
  9096  002C98  0100               	movlb	0	; () banked
  9097  002C9A  6FFA               	movwf	_var& (0+255),b
  9098  002C9C  6BFB               	clrf	(_var+1)& (0+255),b
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;Test.c: 36: var++;
  9102  002C9E  0100               	movlb	0	; () banked
  9103  002CA0  4BFA               	infsnz	_var& (0+255),f,b
  9104  002CA2  2BFB               	incf	(_var+1)& (0+255),f,b
  9105  002CA4                     l1002:
  9106  002CA4  A281               	btfss	3969,1,c	;volatile
  9107  002CA6  D016               	goto	l7507
  9108  002CA8  D7FD               	goto	l1002
  9109  002CAA                     l7491:
  9110                           
  9111                           ;Test.c: 40: algorithmTest();
  9112  002CAA  EC72  F017         	call	_algorithmTest	;wreg free
  9113                           
  9114                           ;Test.c: 41: break;
  9115  002CAE  D7BB               	goto	l7473
  9116  002CB0                     l7493:
  9117                           
  9118                           ;Test.c: 43: sensorTest();
  9119  002CB0  EC3B  F012         	call	_sensorTest	;wreg free
  9120                           
  9121                           ;Test.c: 44: break;
  9122  002CB4  D7B8               	goto	l7473
  9123  002CB6                     l7495:
  9124                           
  9125                           ;Test.c: 46: actuatorTest();
  9126  002CB6  EC5C  F004         	call	_actuatorTest	;wreg free
  9127                           
  9128                           ;Test.c: 47: break;
  9129  002CBA  D7B5               	goto	l7473
  9130  002CBC                     l7497:
  9131                           
  9132                           ;Test.c: 49: PortTestA5();
  9133  002CBC  EC13  F01C         	call	_PortTestA5	;wreg free
  9134                           
  9135                           ;Test.c: 50: break;
  9136  002CC0  D7B2               	goto	l7473
  9137  002CC2                     l7499:
  9138                           
  9139                           ;Test.c: 52: ToggleTestA5();
  9140  002CC2  ECD1  F019         	call	_ToggleTestA5	;wreg free
  9141                           
  9142                           ;Test.c: 53: break;
  9143  002CC6  D7AF               	goto	l7473
  9144  002CC8                     l7501:
  9145                           
  9146                           ;Test.c: 55: EEPROMTest();
  9147  002CC8  EC98  F020         	call	_EEPROMTest	;wreg free
  9148                           
  9149                           ;Test.c: 56: break;
  9150  002CCC  D7AC               	goto	l7473
  9151  002CCE                     l7503:
  9152                           
  9153                           ;Test.c: 58: PortTests();
  9154  002CCE  EC58  F01A         	call	_PortTests	;wreg free
  9155                           
  9156                           ;Test.c: 62: }
  9157                           
  9158                           ;Test.c: 61: break;
  9159                           
  9160                           ;Test.c: 60: default:
  9161                           
  9162                           ;Test.c: 59: break;
  9163  002CD2  D7A9               	goto	l7473
  9164  002CD4                     l7507:
  9165  002CD4  C0FA  F0C6         	movff	_var,??_Test
  9166  002CD8  C0FB  F0C7         	movff	_var+1,??_Test+1
  9167                           
  9168                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9169                           ; Switch size 1, requested type "space"
  9170                           ; Number of cases is 1, Range of values is 0 to 0
  9171                           ; switch strategies available:
  9172                           ; Name         Instructions Cycles
  9173                           ; simple_byte            4     3 (average)
  9174                           ;	Chosen strategy is simple_byte
  9175  002CDC  0100               	movlb	0	; () banked
  9176  002CDE  51C7               	movf	(??_Test+1)& (0+255),w,b
  9177  002CE0  0A00               	xorlw	0	; case 0
  9178  002CE2  A4D8               	btfss	status,2,c
  9179  002CE4  D7A0               	goto	l7473
  9180                           
  9181                           ; BSR set to: 0
  9182                           ; Switch size 1, requested type "space"
  9183                           ; Number of cases is 7, Range of values is 1 to 8
  9184                           ; switch strategies available:
  9185                           ; Name         Instructions Cycles
  9186                           ; simple_byte           22    12 (average)
  9187                           ;	Chosen strategy is simple_byte
  9188  002CE6  0100               	movlb	0	; () banked
  9189  002CE8  51C6               	movf	??_Test& (0+255),w,b
  9190  002CEA  0A01               	xorlw	1	; case 1
  9191  002CEC  B4D8               	btfsc	status,2,c
  9192  002CEE  D7DD               	goto	l7491
  9193  002CF0  0A03               	xorlw	3	; case 2
  9194  002CF2  B4D8               	btfsc	status,2,c
  9195  002CF4  D7DD               	goto	l7493
  9196  002CF6  0A01               	xorlw	1	; case 3
  9197  002CF8  B4D8               	btfsc	status,2,c
  9198  002CFA  D7DD               	goto	l7495
  9199  002CFC  0A06               	xorlw	6	; case 5
  9200  002CFE  B4D8               	btfsc	status,2,c
  9201  002D00  D7DD               	goto	l7497
  9202  002D02  0A03               	xorlw	3	; case 6
  9203  002D04  B4D8               	btfsc	status,2,c
  9204  002D06  D7DD               	goto	l7499
  9205  002D08  0A01               	xorlw	1	; case 7
  9206  002D0A  B4D8               	btfsc	status,2,c
  9207  002D0C  D7DD               	goto	l7501
  9208  002D0E  0A0F               	xorlw	15	; case 8
  9209  002D10  B4D8               	btfsc	status,2,c
  9210  002D12  D7DD               	goto	l7503
  9211                           
  9212                           ; BSR set to: 0
  9213                           
  9214                           ; BSR set to: 0
  9215  002D14  D788               	goto	l7473
  9216  002D16                     __end_of_Test:
  9217                           	opt stack 0
  9218                           tblptru	equ	0xFF8
  9219                           tblptrh	equ	0xFF7
  9220                           tblptrl	equ	0xFF6
  9221                           tablat	equ	0xFF5
  9222                           prodh	equ	0xFF4
  9223                           prodl	equ	0xFF3
  9224                           intcon	equ	0xFF2
  9225                           intcon2	equ	0xFF1
  9226                           intcon3	equ	0xFF0
  9227                           postinc0	equ	0xFEE
  9228                           wreg	equ	0xFE8
  9229                           postdec1	equ	0xFE5
  9230                           fsr1l	equ	0xFE1
  9231                           indf2	equ	0xFDF
  9232                           postinc2	equ	0xFDE
  9233                           postdec2	equ	0xFDD
  9234                           fsr2h	equ	0xFDA
  9235                           fsr2l	equ	0xFD9
  9236                           status	equ	0xFD8
  9237                           
  9238 ;; *************** function _sensorTest *****************
  9239 ;; Defined at:
  9240 ;;		line 110 in file "Test.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;		None
  9243 ;; Auto vars:     Size  Location     Type
  9244 ;;		None
  9245 ;; Return value:  Size  Location     Type
  9246 ;;                  1    wreg      void 
  9247 ;; Registers used:
  9248 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9249 ;; Tracked objects:
  9250 ;;		On entry : 0/0
  9251 ;;		On exit  : 0/0
  9252 ;;		Unchanged: 0/0
  9253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;Total ram usage:        2 bytes
  9259 ;; Hardware stack levels used:    1
  9260 ;; Hardware stack levels required when called:   10
  9261 ;; This function calls:
  9262 ;;		_lcdInst
  9263 ;;		_printf
  9264 ;;		_readIR
  9265 ;;		_readMAG
  9266 ;; This function is called by:
  9267 ;;		_Test
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           	psect	text35
  9272  002476                     __ptext35:
  9273                           	opt stack 0
  9274  002476                     _sensorTest:
  9275                           	opt stack 19
  9276                           
  9277                           ;Test.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;incstack = 0
  9281  002476  0E01               	movlw	1
  9282  002478  EC66  F020         	call	_lcdInst
  9283  00247C  0E68               	movlw	104
  9284  00247E  0100               	movlb	0	; () banked
  9285  002480  6FAB               	movwf	??_sensorTest& (0+255),b
  9286  002482  0EE4               	movlw	228
  9287  002484                     u6977:
  9288  002484  2EE8               	decfsz	wreg,f,c
  9289  002486  D7FE               	bra	u6977
  9290  002488  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9291  00248A  D7FC               	bra	u6977
  9292  00248C  F000               	nop	
  9293  00248E  0E80               	movlw	128
  9294  002490  EC66  F020         	call	_lcdInst
  9295                           
  9296                           ;Test.c: 113: printf("SENSORS");
  9297  002494  0EAD               	movlw	low STR_77
  9298  002496  0100               	movlb	0	; () banked
  9299  002498  6F8E               	movwf	printf@f& (0+255),b
  9300  00249A  0EFF               	movlw	high STR_77
  9301  00249C  0100               	movlb	0	; () banked
  9302  00249E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9303  0024A0  EC9C  F008         	call	_printf	;wreg free
  9304                           
  9305                           ;Test.c: 114: lcdInst(0b11000000);;
  9306  0024A4  0EC0               	movlw	192
  9307  0024A6  EC66  F020         	call	_lcdInst
  9308                           
  9309                           ;Test.c: 115: printf("PUSH TO START");
  9310  0024AA  0E28               	movlw	low STR_71
  9311  0024AC  0100               	movlb	0	; () banked
  9312  0024AE  6F8E               	movwf	printf@f& (0+255),b
  9313  0024B0  0EFF               	movlw	high STR_71
  9314  0024B2  0100               	movlb	0	; () banked
  9315  0024B4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9316  0024B6  EC9C  F008         	call	_printf	;wreg free
  9317                           
  9318                           ;Test.c: 116: _delay((unsigned long)((100)*(32000000/4000.0)));
  9319  0024BA  0E05               	movlw	5
  9320  0024BC  0100               	movlb	0	; () banked
  9321  0024BE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9322  0024C0  0E0F               	movlw	15
  9323  0024C2  0100               	movlb	0	; () banked
  9324  0024C4  6FAB               	movwf	??_sensorTest& (0+255),b
  9325  0024C6  0EF1               	movlw	241
  9326  0024C8                     u6987:
  9327  0024C8  2EE8               	decfsz	wreg,f,c
  9328  0024CA  D7FE               	bra	u6987
  9329  0024CC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9330  0024CE  D7FC               	bra	u6987
  9331  0024D0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9332  0024D2  D7FA               	bra	u6987
  9333  0024D4                     l1029:
  9334  0024D4  A281               	btfss	3969,1,c	;volatile
  9335  0024D6  D7FE               	goto	l1029
  9336  0024D8                     l1032:
  9337  0024D8  B281               	btfsc	3969,1,c	;volatile
  9338  0024DA  D7FE               	goto	l1032
  9339                           
  9340                           ;Test.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9341  0024DC  0E01               	movlw	1
  9342  0024DE  EC66  F020         	call	_lcdInst
  9343  0024E2  0E68               	movlw	104
  9344  0024E4  0100               	movlb	0	; () banked
  9345  0024E6  6FAB               	movwf	??_sensorTest& (0+255),b
  9346  0024E8  0EE4               	movlw	228
  9347  0024EA                     u6997:
  9348  0024EA  2EE8               	decfsz	wreg,f,c
  9349  0024EC  D7FE               	bra	u6997
  9350  0024EE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9351  0024F0  D7FC               	bra	u6997
  9352  0024F2  F000               	nop	
  9353  0024F4  0E80               	movlw	128
  9354  0024F6  EC66  F020         	call	_lcdInst
  9355                           
  9356                           ;Test.c: 124: printf("TST: IR SNSR");
  9357  0024FA  0E52               	movlw	low STR_79
  9358  0024FC  0100               	movlb	0	; () banked
  9359  0024FE  6F8E               	movwf	printf@f& (0+255),b
  9360  002500  0EFF               	movlw	high STR_79
  9361  002502  0100               	movlb	0	; () banked
  9362  002504  6F8F               	movwf	(printf@f+1)& (0+255),b
  9363  002506  EC9C  F008         	call	_printf	;wreg free
  9364                           
  9365                           ;Test.c: 125: _delay((unsigned long)((100)*(32000000/4000.0)));
  9366  00250A  0E05               	movlw	5
  9367  00250C  0100               	movlb	0	; () banked
  9368  00250E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9369  002510  0E0F               	movlw	15
  9370  002512  0100               	movlb	0	; () banked
  9371  002514  6FAB               	movwf	??_sensorTest& (0+255),b
  9372  002516  0EF1               	movlw	241
  9373  002518                     u7007:
  9374  002518  2EE8               	decfsz	wreg,f,c
  9375  00251A  D7FE               	bra	u7007
  9376  00251C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9377  00251E  D7FC               	bra	u7007
  9378  002520  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9379  002522  D7FA               	bra	u7007
  9380                           
  9381                           ;Test.c: 126: while(PORTBbits.RB1 == 0){
  9382  002524  D021               	goto	l6243
  9383  002526                     l6237:
  9384                           
  9385                           ;Test.c: 127: readIR();
  9386  002526  EC62  F01D         	call	_readIR	;wreg free
  9387                           
  9388                           ;Test.c: 128: lcdInst(0b10000000);;
  9389  00252A  0E80               	movlw	128
  9390  00252C  EC66  F020         	call	_lcdInst
  9391                           
  9392                           ;Test.c: 129: lcdInst(0b11000000);;
  9393  002530  0EC0               	movlw	192
  9394  002532  EC66  F020         	call	_lcdInst
  9395                           
  9396                           ;Test.c: 130: printf("IR_signal: %d ", IR_signal);
  9397  002536  0E77               	movlw	low STR_80
  9398  002538  0100               	movlb	0	; () banked
  9399  00253A  6F8E               	movwf	printf@f& (0+255),b
  9400  00253C  0EFE               	movlw	high STR_80
  9401  00253E  0100               	movlb	0	; () banked
  9402  002540  6F8F               	movwf	(printf@f+1)& (0+255),b
  9403  002542  C0DA  F090         	movff	_IR_signal,?_printf+2
  9404  002546  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9405  00254A  EC9C  F008         	call	_printf	;wreg free
  9406                           
  9407                           ;Test.c: 131: _delay((unsigned long)((100)*(32000000/4000.0)));
  9408  00254E  0E05               	movlw	5
  9409  002550  0100               	movlb	0	; () banked
  9410  002552  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9411  002554  0E0F               	movlw	15
  9412  002556  0100               	movlb	0	; () banked
  9413  002558  6FAB               	movwf	??_sensorTest& (0+255),b
  9414  00255A  0EF1               	movlw	241
  9415  00255C                     u7017:
  9416  00255C  2EE8               	decfsz	wreg,f,c
  9417  00255E  D7FE               	bra	u7017
  9418  002560  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9419  002562  D7FC               	bra	u7017
  9420  002564  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9421  002566  D7FA               	bra	u7017
  9422  002568                     l6243:
  9423  002568  A281               	btfss	3969,1,c	;volatile
  9424  00256A  D7DD               	goto	l6237
  9425                           
  9426                           ;Test.c: 132: }
  9427                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9428  00256C  0E01               	movlw	1
  9429  00256E  EC66  F020         	call	_lcdInst
  9430  002572  0E68               	movlw	104
  9431  002574  0100               	movlb	0	; () banked
  9432  002576  6FAB               	movwf	??_sensorTest& (0+255),b
  9433  002578  0EE4               	movlw	228
  9434  00257A                     u7027:
  9435  00257A  2EE8               	decfsz	wreg,f,c
  9436  00257C  D7FE               	bra	u7027
  9437  00257E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9438  002580  D7FC               	bra	u7027
  9439  002582  F000               	nop	
  9440  002584  0E80               	movlw	128
  9441  002586  EC66  F020         	call	_lcdInst
  9442  00258A                     l1038:
  9443  00258A  B281               	btfsc	3969,1,c	;volatile
  9444  00258C  D7FE               	goto	l1038
  9445                           
  9446                           ;Test.c: 141: printf("TST: MAGNETISM");
  9447  00258E  0EA4               	movlw	low STR_81
  9448  002590  0100               	movlb	0	; () banked
  9449  002592  6F8E               	movwf	printf@f& (0+255),b
  9450  002594  0EFE               	movlw	high STR_81
  9451  002596  0100               	movlb	0	; () banked
  9452  002598  6F8F               	movwf	(printf@f+1)& (0+255),b
  9453  00259A  EC9C  F008         	call	_printf	;wreg free
  9454                           
  9455                           ;Test.c: 142: _delay((unsigned long)((100)*(32000000/4000.0)));
  9456  00259E  0E05               	movlw	5
  9457  0025A0  0100               	movlb	0	; () banked
  9458  0025A2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9459  0025A4  0E0F               	movlw	15
  9460  0025A6  0100               	movlb	0	; () banked
  9461  0025A8  6FAB               	movwf	??_sensorTest& (0+255),b
  9462  0025AA  0EF1               	movlw	241
  9463  0025AC                     u7037:
  9464  0025AC  2EE8               	decfsz	wreg,f,c
  9465  0025AE  D7FE               	bra	u7037
  9466  0025B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9467  0025B2  D7FC               	bra	u7037
  9468  0025B4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9469  0025B6  D7FA               	bra	u7037
  9470                           
  9471                           ;Test.c: 143: while(PORTBbits.RB1 == 0){
  9472  0025B8  D021               	goto	l6261
  9473  0025BA                     l6255:
  9474                           
  9475                           ;Test.c: 144: readMAG();
  9476  0025BA  EC3C  F01D         	call	_readMAG	;wreg free
  9477                           
  9478                           ;Test.c: 145: lcdInst(0b10000000);;
  9479  0025BE  0E80               	movlw	128
  9480  0025C0  EC66  F020         	call	_lcdInst
  9481                           
  9482                           ;Test.c: 146: lcdInst(0b11000000);;
  9483  0025C4  0EC0               	movlw	192
  9484  0025C6  EC66  F020         	call	_lcdInst
  9485                           
  9486                           ;Test.c: 147: printf("MAG_signal: %d ", MAG_signal);
  9487  0025CA  0E47               	movlw	low STR_82
  9488  0025CC  0100               	movlb	0	; () banked
  9489  0025CE  6F8E               	movwf	printf@f& (0+255),b
  9490  0025D0  0EFE               	movlw	high STR_82
  9491  0025D2  0100               	movlb	0	; () banked
  9492  0025D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9493  0025D6  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9494  0025DA  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9495  0025DE  EC9C  F008         	call	_printf	;wreg free
  9496                           
  9497                           ;Test.c: 148: _delay((unsigned long)((100)*(32000000/4000.0)));
  9498  0025E2  0E05               	movlw	5
  9499  0025E4  0100               	movlb	0	; () banked
  9500  0025E6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9501  0025E8  0E0F               	movlw	15
  9502  0025EA  0100               	movlb	0	; () banked
  9503  0025EC  6FAB               	movwf	??_sensorTest& (0+255),b
  9504  0025EE  0EF1               	movlw	241
  9505  0025F0                     u7047:
  9506  0025F0  2EE8               	decfsz	wreg,f,c
  9507  0025F2  D7FE               	bra	u7047
  9508  0025F4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9509  0025F6  D7FC               	bra	u7047
  9510  0025F8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9511  0025FA  D7FA               	bra	u7047
  9512  0025FC                     l6261:
  9513  0025FC  B281               	btfsc	3969,1,c	;volatile
  9514  0025FE  0012               	return	
  9515  002600  D7DC               	goto	l6255
  9516  002602                     __end_of_sensorTest:
  9517                           	opt stack 0
  9518                           tblptru	equ	0xFF8
  9519                           tblptrh	equ	0xFF7
  9520                           tblptrl	equ	0xFF6
  9521                           tablat	equ	0xFF5
  9522                           prodh	equ	0xFF4
  9523                           prodl	equ	0xFF3
  9524                           intcon	equ	0xFF2
  9525                           intcon2	equ	0xFF1
  9526                           intcon3	equ	0xFF0
  9527                           postinc0	equ	0xFEE
  9528                           wreg	equ	0xFE8
  9529                           postdec1	equ	0xFE5
  9530                           fsr1l	equ	0xFE1
  9531                           indf2	equ	0xFDF
  9532                           postinc2	equ	0xFDE
  9533                           postdec2	equ	0xFDD
  9534                           fsr2h	equ	0xFDA
  9535                           fsr2l	equ	0xFD9
  9536                           status	equ	0xFD8
  9537                           
  9538 ;; *************** function _readMAG *****************
  9539 ;; Defined at:
  9540 ;;		line 29 in file "ADCFunctionality.c"
  9541 ;; Parameters:    Size  Location     Type
  9542 ;;		None
  9543 ;; Auto vars:     Size  Location     Type
  9544 ;;  res             2    4[BANK0 ] int 
  9545 ;; Return value:  Size  Location     Type
  9546 ;;                  1    wreg      void 
  9547 ;; Registers used:
  9548 ;;		wreg, status,2, status,0, cstack
  9549 ;; Tracked objects:
  9550 ;;		On entry : 0/0
  9551 ;;		On exit  : 0/0
  9552 ;;		Unchanged: 0/0
  9553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;Total ram usage:        4 bytes
  9559 ;; Hardware stack levels used:    1
  9560 ;; Hardware stack levels required when called:    8
  9561 ;; This function calls:
  9562 ;;		_readADC
  9563 ;; This function is called by:
  9564 ;;		_ID
  9565 ;;		_sensorTest
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           	psect	text36
  9570  003A78                     __ptext36:
  9571                           	opt stack 0
  9572  003A78                     _readMAG:
  9573                           	opt stack 20
  9574                           
  9575                           ;ADCFunctionality.c: 30: readADC(1);
  9576                           
  9577                           ;incstack = 0
  9578  003A78  0E01               	movlw	1
  9579  003A7A  EC6F  F01F         	call	_readADC
  9580                           
  9581                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9582  003A7E  50C3               	movf	4035,w,c	;volatile
  9583  003A80  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9584  003A84  0100               	movlb	0	; () banked
  9585  003A86  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9586  003A88  C082  F083         	movff	??_readMAG,??_readMAG+1
  9587  003A8C  0100               	movlb	0	; () banked
  9588  003A8E  6B82               	clrf	??_readMAG& (0+255),b
  9589  003A90  0100               	movlb	0	; () banked
  9590  003A92  1182               	iorwf	??_readMAG& (0+255),w,b
  9591  003A94  0100               	movlb	0	; () banked
  9592  003A96  6F84               	movwf	readMAG@res& (0+255),b
  9593  003A98  0100               	movlb	0	; () banked
  9594  003A9A  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9595  003A9C  0100               	movlb	0	; () banked
  9596  003A9E  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9600  003AA0  0100               	movlb	0	; () banked
  9601  003AA2  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9602  003AA4  D008               	goto	u4221
  9603  003AA6  0100               	movlb	0	; () banked
  9604  003AA8  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9605  003AAA  E107               	bnz	u4220
  9606  003AAC  0E96               	movlw	150
  9607  003AAE  0100               	movlb	0	; () banked
  9608  003AB0  5D84               	subwf	readMAG@res& (0+255),w,b
  9609  003AB2  B0D8               	btfsc	status,0,c
  9610  003AB4  D002               	goto	u4220
  9611  003AB6                     u4221:
  9612  003AB6  0E01               	movlw	1
  9613  003AB8  D001               	goto	u4230
  9614  003ABA                     u4220:
  9615  003ABA  0E00               	movlw	0
  9616  003ABC                     u4230:
  9617  003ABC  0100               	movlb	0	; () banked
  9618  003ABE  6FDC               	movwf	_MAG_signal& (0+255),b
  9619  003AC0  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9620                           
  9621                           ; BSR set to: 0
  9622  003AC2  0012               	return		;funcret
  9623  003AC4                     __end_of_readMAG:
  9624                           	opt stack 0
  9625                           tblptru	equ	0xFF8
  9626                           tblptrh	equ	0xFF7
  9627                           tblptrl	equ	0xFF6
  9628                           tablat	equ	0xFF5
  9629                           prodh	equ	0xFF4
  9630                           prodl	equ	0xFF3
  9631                           intcon	equ	0xFF2
  9632                           intcon2	equ	0xFF1
  9633                           intcon3	equ	0xFF0
  9634                           postinc0	equ	0xFEE
  9635                           wreg	equ	0xFE8
  9636                           postdec1	equ	0xFE5
  9637                           fsr1l	equ	0xFE1
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           fsr2h	equ	0xFDA
  9642                           fsr2l	equ	0xFD9
  9643                           status	equ	0xFD8
  9644                           
  9645 ;; *************** function _readIR *****************
  9646 ;; Defined at:
  9647 ;;		line 23 in file "ADCFunctionality.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;  res             2    4[BANK0 ] int 
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		wreg, status,2, status,0, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;Total ram usage:        4 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    8
  9668 ;; This function calls:
  9669 ;;		_readADC
  9670 ;; This function is called by:
  9671 ;;		_getIR
  9672 ;;		_sensorTest
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           	psect	text37
  9677  003AC4                     __ptext37:
  9678                           	opt stack 0
  9679  003AC4                     _readIR:
  9680                           	opt stack 19
  9681                           
  9682                           ;ADCFunctionality.c: 24: readADC(0);
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;incstack = 0
  9686  003AC4  0E00               	movlw	0
  9687  003AC6  EC6F  F01F         	call	_readADC
  9688                           
  9689                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9690  003ACA  50C3               	movf	4035,w,c	;volatile
  9691  003ACC  CFC4 F082          	movff	4036,??_readIR	;volatile
  9692  003AD0  0100               	movlb	0	; () banked
  9693  003AD2  6B83               	clrf	(??_readIR+1)& (0+255),b
  9694  003AD4  C082  F083         	movff	??_readIR,??_readIR+1
  9695  003AD8  0100               	movlb	0	; () banked
  9696  003ADA  6B82               	clrf	??_readIR& (0+255),b
  9697  003ADC  0100               	movlb	0	; () banked
  9698  003ADE  1182               	iorwf	??_readIR& (0+255),w,b
  9699  003AE0  0100               	movlb	0	; () banked
  9700  003AE2  6F84               	movwf	readIR@res& (0+255),b
  9701  003AE4  0100               	movlb	0	; () banked
  9702  003AE6  5183               	movf	(??_readIR+1)& (0+255),w,b
  9703  003AE8  0100               	movlb	0	; () banked
  9704  003AEA  6F85               	movwf	(readIR@res+1)& (0+255),b
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;ADCFunctionality.c: 26: IR_signal = (res < 150) ? 1 : 0;
  9708  003AEC  0100               	movlb	0	; () banked
  9709  003AEE  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9710  003AF0  D008               	goto	u3551
  9711  003AF2  0100               	movlb	0	; () banked
  9712  003AF4  5185               	movf	(readIR@res+1)& (0+255),w,b
  9713  003AF6  E107               	bnz	u3550
  9714  003AF8  0E96               	movlw	150
  9715  003AFA  0100               	movlb	0	; () banked
  9716  003AFC  5D84               	subwf	readIR@res& (0+255),w,b
  9717  003AFE  B0D8               	btfsc	status,0,c
  9718  003B00  D002               	goto	u3550
  9719  003B02                     u3551:
  9720  003B02  0E01               	movlw	1
  9721  003B04  D001               	goto	u3560
  9722  003B06                     u3550:
  9723  003B06  0E00               	movlw	0
  9724  003B08                     u3560:
  9725  003B08  0100               	movlb	0	; () banked
  9726  003B0A  6FDA               	movwf	_IR_signal& (0+255),b
  9727  003B0C  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9728                           
  9729                           ; BSR set to: 0
  9730  003B0E  0012               	return		;funcret
  9731  003B10                     __end_of_readIR:
  9732                           	opt stack 0
  9733                           tblptru	equ	0xFF8
  9734                           tblptrh	equ	0xFF7
  9735                           tblptrl	equ	0xFF6
  9736                           tablat	equ	0xFF5
  9737                           prodh	equ	0xFF4
  9738                           prodl	equ	0xFF3
  9739                           intcon	equ	0xFF2
  9740                           intcon2	equ	0xFF1
  9741                           intcon3	equ	0xFF0
  9742                           postinc0	equ	0xFEE
  9743                           wreg	equ	0xFE8
  9744                           postdec1	equ	0xFE5
  9745                           fsr1l	equ	0xFE1
  9746                           indf2	equ	0xFDF
  9747                           postinc2	equ	0xFDE
  9748                           postdec2	equ	0xFDD
  9749                           fsr2h	equ	0xFDA
  9750                           fsr2l	equ	0xFD9
  9751                           status	equ	0xFD8
  9752                           
  9753 ;; *************** function _readADC *****************
  9754 ;; Defined at:
  9755 ;;		line 15 in file "ADCFunctionality.c"
  9756 ;; Parameters:    Size  Location     Type
  9757 ;;  channel         1    wreg     unsigned char 
  9758 ;; Auto vars:     Size  Location     Type
  9759 ;;  channel         1    1[BANK0 ] unsigned char 
  9760 ;; Return value:  Size  Location     Type
  9761 ;;                  1    wreg      void 
  9762 ;; Registers used:
  9763 ;;		wreg, status,2, status,0, cstack
  9764 ;; Tracked objects:
  9765 ;;		On entry : 0/0
  9766 ;;		On exit  : 0/0
  9767 ;;		Unchanged: 0/0
  9768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9773 ;;Total ram usage:        2 bytes
  9774 ;; Hardware stack levels used:    1
  9775 ;; Hardware stack levels required when called:    7
  9776 ;; This function calls:
  9777 ;;		Nothing
  9778 ;; This function is called by:
  9779 ;;		_readIR
  9780 ;;		_readMAG
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           	psect	text38
  9785  003EDE                     __ptext38:
  9786                           	opt stack 0
  9787  003EDE                     _readADC:
  9788                           	opt stack 19
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;incstack = 0
  9792                           ;readADC@channel stored from wreg
  9793  003EDE  0100               	movlb	0	; () banked
  9794  003EE0  6F81               	movwf	readADC@channel& (0+255),b
  9795                           
  9796                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9797  003EE2  0100               	movlb	0	; () banked
  9798  003EE4  4581               	rlncf	readADC@channel& (0+255),w,b
  9799  003EE6  46E8               	rlncf	wreg,f,c
  9800  003EE8  0BFC               	andlw	252
  9801  003EEA  6EC2               	movwf	4034,c	;volatile
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9805  003EEC  80C2               	bsf	4034,0,c	;volatile
  9806                           
  9807                           ; BSR set to: 0
  9808                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9809  003EEE  82C2               	bsf	4034,1,c	;volatile
  9810                           
  9811                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9812  003EF0  D009               	goto	l4935
  9813  003EF2                     l4933:
  9814  003EF2  0E34               	movlw	52
  9815  003EF4  0100               	movlb	0	; () banked
  9816  003EF6  6F80               	movwf	??_readADC& (0+255),b
  9817  003EF8  0EF1               	movlw	241
  9818  003EFA                     u7057:
  9819  003EFA  2EE8               	decfsz	wreg,f,c
  9820  003EFC  D7FE               	bra	u7057
  9821  003EFE  2F80               	decfsz	??_readADC& (0+255),f,b
  9822  003F00  D7FC               	bra	u7057
  9823  003F02  D000               	nop2	
  9824  003F04                     l4935:
  9825  003F04  A2C2               	btfss	4034,1,c	;volatile
  9826  003F06  0012               	return	
  9827  003F08  D7F4               	goto	l4933
  9828  003F0A                     __end_of_readADC:
  9829                           	opt stack 0
  9830                           tblptru	equ	0xFF8
  9831                           tblptrh	equ	0xFF7
  9832                           tblptrl	equ	0xFF6
  9833                           tablat	equ	0xFF5
  9834                           prodh	equ	0xFF4
  9835                           prodl	equ	0xFF3
  9836                           intcon	equ	0xFF2
  9837                           intcon2	equ	0xFF1
  9838                           intcon3	equ	0xFF0
  9839                           postinc0	equ	0xFEE
  9840                           wreg	equ	0xFE8
  9841                           postdec1	equ	0xFE5
  9842                           fsr1l	equ	0xFE1
  9843                           indf2	equ	0xFDF
  9844                           postinc2	equ	0xFDE
  9845                           postdec2	equ	0xFDD
  9846                           fsr2h	equ	0xFDA
  9847                           fsr2l	equ	0xFD9
  9848                           status	equ	0xFD8
  9849                           
  9850 ;; *************** function _algorithmTest *****************
  9851 ;; Defined at:
  9852 ;;		line 66 in file "Test.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;		None
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;		None
  9857 ;; Return value:  Size  Location     Type
  9858 ;;                  1    wreg      void 
  9859 ;; Registers used:
  9860 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9861 ;; Tracked objects:
  9862 ;;		On entry : 0/0
  9863 ;;		On exit  : 0/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9870 ;;Total ram usage:        2 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:   10
  9873 ;; This function calls:
  9874 ;;		_lcdInst
  9875 ;;		_printf
  9876 ;; This function is called by:
  9877 ;;		_Test
  9878 ;; This function uses a non-reentrant model
  9879 ;;
  9880                           
  9881                           	psect	text39
  9882  002EE4                     __ptext39:
  9883                           	opt stack 0
  9884  002EE4                     _algorithmTest:
  9885                           	opt stack 19
  9886                           
  9887                           ;Test.c: 68: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9888                           
  9889                           ;incstack = 0
  9890  002EE4  0E01               	movlw	1
  9891  002EE6  EC66  F020         	call	_lcdInst
  9892  002EEA  0E68               	movlw	104
  9893  002EEC  0100               	movlb	0	; () banked
  9894  002EEE  6FAB               	movwf	??_algorithmTest& (0+255),b
  9895  002EF0  0EE4               	movlw	228
  9896  002EF2                     u7067:
  9897  002EF2  2EE8               	decfsz	wreg,f,c
  9898  002EF4  D7FE               	bra	u7067
  9899  002EF6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9900  002EF8  D7FC               	bra	u7067
  9901  002EFA  F000               	nop	
  9902  002EFC  0E80               	movlw	128
  9903  002EFE  EC66  F020         	call	_lcdInst
  9904                           
  9905                           ;Test.c: 69: printf("ALGORITHM TEST");
  9906  002F02  0EEF               	movlw	low STR_70
  9907  002F04  0100               	movlb	0	; () banked
  9908  002F06  6F8E               	movwf	printf@f& (0+255),b
  9909  002F08  0EFE               	movlw	high STR_70
  9910  002F0A  0100               	movlb	0	; () banked
  9911  002F0C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9912  002F0E  EC9C  F008         	call	_printf	;wreg free
  9913                           
  9914                           ;Test.c: 70: lcdInst(0b11000000);;
  9915  002F12  0EC0               	movlw	192
  9916  002F14  EC66  F020         	call	_lcdInst
  9917                           
  9918                           ;Test.c: 71: printf("PUSH TO START");
  9919  002F18  0E28               	movlw	low STR_71
  9920  002F1A  0100               	movlb	0	; () banked
  9921  002F1C  6F8E               	movwf	printf@f& (0+255),b
  9922  002F1E  0EFF               	movlw	high STR_71
  9923  002F20  0100               	movlb	0	; () banked
  9924  002F22  6F8F               	movwf	(printf@f+1)& (0+255),b
  9925  002F24  EC9C  F008         	call	_printf	;wreg free
  9926                           
  9927                           ;Test.c: 72: _delay((unsigned long)((100)*(32000000/4000.0)));
  9928  002F28  0E05               	movlw	5
  9929  002F2A  0100               	movlb	0	; () banked
  9930  002F2C  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
  9931  002F2E  0E0F               	movlw	15
  9932  002F30  0100               	movlb	0	; () banked
  9933  002F32  6FAB               	movwf	??_algorithmTest& (0+255),b
  9934  002F34  0EF1               	movlw	241
  9935  002F36                     u7077:
  9936  002F36  2EE8               	decfsz	wreg,f,c
  9937  002F38  D7FE               	bra	u7077
  9938  002F3A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9939  002F3C  D7FC               	bra	u7077
  9940  002F3E  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
  9941  002F40  D7FA               	bra	u7077
  9942  002F42                     l1020:
  9943  002F42  A281               	btfss	3969,1,c	;volatile
  9944  002F44  D7FE               	goto	l1020
  9945  002F46                     l1023:
  9946  002F46  B281               	btfsc	3969,1,c	;volatile
  9947  002F48  D7FE               	goto	l1023
  9948                           
  9949                           ;Test.c: 75: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9950  002F4A  0E01               	movlw	1
  9951  002F4C  EC66  F020         	call	_lcdInst
  9952  002F50  0E68               	movlw	104
  9953  002F52  0100               	movlb	0	; () banked
  9954  002F54  6FAB               	movwf	??_algorithmTest& (0+255),b
  9955  002F56  0EE4               	movlw	228
  9956  002F58                     u7087:
  9957  002F58  2EE8               	decfsz	wreg,f,c
  9958  002F5A  D7FE               	bra	u7087
  9959  002F5C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9960  002F5E  D7FC               	bra	u7087
  9961  002F60  F000               	nop	
  9962  002F62  0E80               	movlw	128
  9963  002F64  EC66  F020         	call	_lcdInst
  9964                           
  9965                           ;Test.c: 80: printf("ALG1: 9 POPNOTAB");
  9966  002F68  0EAF               	movlw	low STR_72
  9967  002F6A  0100               	movlb	0	; () banked
  9968  002F6C  6F8E               	movwf	printf@f& (0+255),b
  9969  002F6E  0EFC               	movlw	high STR_72
  9970  002F70  0100               	movlb	0	; () banked
  9971  002F72  6F8F               	movwf	(printf@f+1)& (0+255),b
  9972  002F74  EC9C  F008         	call	_printf	;wreg free
  9973                           
  9974                           ;Test.c: 87: printf("ALG2: 12 CANS");
  9975  002F78  0E0C               	movlw	low STR_73
  9976  002F7A  0100               	movlb	0	; () banked
  9977  002F7C  6F8E               	movwf	printf@f& (0+255),b
  9978  002F7E  0EFF               	movlw	high STR_73
  9979  002F80  0100               	movlb	0	; () banked
  9980  002F82  6F8F               	movwf	(printf@f+1)& (0+255),b
  9981  002F84  EC9C  F008         	call	_printf	;wreg free
  9982                           
  9983                           ;Test.c: 96: printf("ALG3: 1 CAN");
  9984  002F88  0E6C               	movlw	low STR_74
  9985  002F8A  0100               	movlb	0	; () banked
  9986  002F8C  6F8E               	movwf	printf@f& (0+255),b
  9987  002F8E  0EFF               	movlw	high STR_74
  9988  002F90  0100               	movlb	0	; () banked
  9989  002F92  6F8F               	movwf	(printf@f+1)& (0+255),b
  9990  002F94  EC9C  F008         	call	_printf	;wreg free
  9991                           
  9992                           ;Test.c: 102: printf("ALG4: ALL CANS");
  9993  002F98  0ED1               	movlw	low STR_75
  9994  002F9A  0100               	movlb	0	; () banked
  9995  002F9C  6F8E               	movwf	printf@f& (0+255),b
  9996  002F9E  0EFE               	movlw	high STR_75
  9997  002FA0  0100               	movlb	0	; () banked
  9998  002FA2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9999  002FA4  EC9C  F008         	call	_printf	;wreg free
 10000                           
 10001                           ;Test.c: 107: printf("ALG5: NO CANS");
 10002  002FA8  0E1A               	movlw	low STR_76
 10003  002FAA  0100               	movlb	0	; () banked
 10004  002FAC  6F8E               	movwf	printf@f& (0+255),b
 10005  002FAE  0EFF               	movlw	high STR_76
 10006  002FB0  0100               	movlb	0	; () banked
 10007  002FB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10008  002FB4  EC9C  F008         	call	_printf	;wreg free
 10009  002FB8  0012               	return		;funcret
 10010  002FBA                     __end_of_algorithmTest:
 10011                           	opt stack 0
 10012                           tblptru	equ	0xFF8
 10013                           tblptrh	equ	0xFF7
 10014                           tblptrl	equ	0xFF6
 10015                           tablat	equ	0xFF5
 10016                           prodh	equ	0xFF4
 10017                           prodl	equ	0xFF3
 10018                           intcon	equ	0xFF2
 10019                           intcon2	equ	0xFF1
 10020                           intcon3	equ	0xFF0
 10021                           postinc0	equ	0xFEE
 10022                           wreg	equ	0xFE8
 10023                           postdec1	equ	0xFE5
 10024                           fsr1l	equ	0xFE1
 10025                           indf2	equ	0xFDF
 10026                           postinc2	equ	0xFDE
 10027                           postdec2	equ	0xFDD
 10028                           fsr2h	equ	0xFDA
 10029                           fsr2l	equ	0xFD9
 10030                           status	equ	0xFD8
 10031                           
 10032 ;; *************** function _actuatorTest *****************
 10033 ;; Defined at:
 10034 ;;		line 152 in file "Test.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;		None
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;  i               1   45[BANK0 ] unsigned char 
 10039 ;;  i               1   67[BANK0 ] unsigned char 
 10040 ;;  i               1   66[BANK0 ] unsigned char 
 10041 ;;  i               1   65[BANK0 ] unsigned char 
 10042 ;;  i               1   64[BANK0 ] unsigned char 
 10043 ;;  i               1   63[BANK0 ] unsigned char 
 10044 ;;  i               1   62[BANK0 ] unsigned char 
 10045 ;;  i               1   61[BANK0 ] unsigned char 
 10046 ;;  i               1   60[BANK0 ] unsigned char 
 10047 ;;  i               1   59[BANK0 ] unsigned char 
 10048 ;;  i               1   58[BANK0 ] unsigned char 
 10049 ;;  i               1   57[BANK0 ] unsigned char 
 10050 ;;  i               1   56[BANK0 ] unsigned char 
 10051 ;;  i               1   55[BANK0 ] unsigned char 
 10052 ;;  i               1   54[BANK0 ] unsigned char 
 10053 ;;  i               1   53[BANK0 ] unsigned char 
 10054 ;;  i               1   52[BANK0 ] unsigned char 
 10055 ;;  i               1   51[BANK0 ] unsigned char 
 10056 ;;  i               1   50[BANK0 ] unsigned char 
 10057 ;;  i               1   49[BANK0 ] unsigned char 
 10058 ;;  i               1   48[BANK0 ] unsigned char 
 10059 ;;  i               1   47[BANK0 ] unsigned char 
 10060 ;;  i               1   46[BANK0 ] unsigned char 
 10061 ;;  i               2   68[BANK0 ] int 
 10062 ;; Return value:  Size  Location     Type
 10063 ;;                  1    wreg      void 
 10064 ;; Registers used:
 10065 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10066 ;; Tracked objects:
 10067 ;;		On entry : 0/0
 10068 ;;		On exit  : 0/0
 10069 ;;		Unchanged: 0/0
 10070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10072 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10074 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10075 ;;Total ram usage:       27 bytes
 10076 ;; Hardware stack levels used:    1
 10077 ;; Hardware stack levels required when called:   10
 10078 ;; This function calls:
 10079 ;;		_lcdInst
 10080 ;;		_printf
 10081 ;;		_updateServoPosition
 10082 ;; This function is called by:
 10083 ;;		_Test
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           	psect	text40
 10088  0008B8                     __ptext40:
 10089                           	opt stack 0
 10090  0008B8                     _actuatorTest:
 10091                           	opt stack 19
 10092                           
 10093                           ;Test.c: 154: int i = 0;
 10094                           
 10095                           ;incstack = 0
 10096  0008B8  0E00               	movlw	0
 10097  0008BA  0100               	movlb	0	; () banked
 10098  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10099  0008BE  0E00               	movlw	0
 10100  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;Test.c: 156: (INTCONbits.GIE = 1);
 10104  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10105                           
 10106                           ; BSR set to: 0
 10107                           ;Test.c: 157: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10108  0008C4  0E01               	movlw	1
 10109  0008C6  EC66  F020         	call	_lcdInst
 10110  0008CA  0E68               	movlw	104
 10111  0008CC  0100               	movlb	0	; () banked
 10112  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10113  0008D0  0EE4               	movlw	228
 10114  0008D2                     u7097:
 10115  0008D2  2EE8               	decfsz	wreg,f,c
 10116  0008D4  D7FE               	bra	u7097
 10117  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10118  0008D8  D7FC               	bra	u7097
 10119  0008DA  F000               	nop	
 10120  0008DC  0E80               	movlw	128
 10121  0008DE  EC66  F020         	call	_lcdInst
 10122                           
 10123                           ;Test.c: 158: printf("ACTUATORS");
 10124  0008E2  0E99               	movlw	low STR_83
 10125  0008E4  0100               	movlb	0	; () banked
 10126  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10127  0008E8  0EFF               	movlw	high STR_83
 10128  0008EA  0100               	movlb	0	; () banked
 10129  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10130  0008EE  EC9C  F008         	call	_printf	;wreg free
 10131                           
 10132                           ;Test.c: 159: lcdInst(0b11000000);;
 10133  0008F2  0EC0               	movlw	192
 10134  0008F4  EC66  F020         	call	_lcdInst
 10135                           
 10136                           ;Test.c: 160: printf("PUSH TO START");
 10137  0008F8  0E28               	movlw	low STR_71
 10138  0008FA  0100               	movlb	0	; () banked
 10139  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10140  0008FE  0EFF               	movlw	high STR_71
 10141  000900  0100               	movlb	0	; () banked
 10142  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10143  000904  EC9C  F008         	call	_printf	;wreg free
 10144                           
 10145                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10146  000908  0E05               	movlw	5
 10147  00090A  0100               	movlb	0	; () banked
 10148  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10149  00090E  0E0F               	movlw	15
 10150  000910  0100               	movlb	0	; () banked
 10151  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10152  000914  0EF1               	movlw	241
 10153  000916                     u7107:
 10154  000916  2EE8               	decfsz	wreg,f,c
 10155  000918  D7FE               	bra	u7107
 10156  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10157  00091C  D7FC               	bra	u7107
 10158  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10159  000920  D7FA               	bra	u7107
 10160  000922                     l1047:
 10161  000922  A281               	btfss	3969,1,c	;volatile
 10162  000924  D7FE               	goto	l1047
 10163  000926                     l1050:
 10164  000926  B281               	btfsc	3969,1,c	;volatile
 10165  000928  D7FE               	goto	l1050
 10166                           
 10167                           ;Test.c: 164: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10168  00092A  0E01               	movlw	1
 10169  00092C  EC66  F020         	call	_lcdInst
 10170  000930  0E68               	movlw	104
 10171  000932  0100               	movlb	0	; () banked
 10172  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10173  000936  0EE4               	movlw	228
 10174  000938                     u7117:
 10175  000938  2EE8               	decfsz	wreg,f,c
 10176  00093A  D7FE               	bra	u7117
 10177  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10178  00093E  D7FC               	bra	u7117
 10179  000940  F000               	nop	
 10180  000942  0E80               	movlw	128
 10181  000944  EC66  F020         	call	_lcdInst
 10182                           
 10183                           ;Test.c: 169: printf("TST: DC MOTORS");
 10184  000948  0EE0               	movlw	low STR_85
 10185  00094A  0100               	movlb	0	; () banked
 10186  00094C  6F8E               	movwf	printf@f& (0+255),b
 10187  00094E  0EFE               	movlw	high STR_85
 10188  000950  0100               	movlb	0	; () banked
 10189  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10190  000954  EC9C  F008         	call	_printf	;wreg free
 10191                           
 10192                           ;Test.c: 170: lcdInst(0b11000000);;
 10193  000958  0EC0               	movlw	192
 10194  00095A  EC66  F020         	call	_lcdInst
 10195                           
 10196                           ;Test.c: 171: printf("PIN RA5 HIGH.");
 10197  00095E  0EFE               	movlw	low STR_86
 10198  000960  0100               	movlb	0	; () banked
 10199  000962  6F8E               	movwf	printf@f& (0+255),b
 10200  000964  0EFE               	movlw	high STR_86
 10201  000966  0100               	movlb	0	; () banked
 10202  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10203  00096A  EC9C  F008         	call	_printf	;wreg free
 10204                           
 10205                           ;Test.c: 172: LATAbits.LATA5 = 1;
 10206  00096E  8A89               	bsf	3977,5,c	;volatile
 10207                           
 10208                           ;Test.c: 173: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10209  000970  0E00               	movlw	0
 10210  000972  0100               	movlb	0	; () banked
 10211  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10212  000976  0E00               	movlw	0
 10213  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10214                           
 10215                           ; BSR set to: 0
 10216  00097A  0100               	movlb	0	; () banked
 10217  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10218  00097E  D008               	goto	l6301
 10219  000980  0100               	movlb	0	; () banked
 10220  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10221  000984  E123               	bnz	l1054
 10222  000986  0E05               	movlw	5
 10223  000988  0100               	movlb	0	; () banked
 10224  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10225  00098C  B0D8               	btfsc	status,0,c
 10226  00098E  D01E               	goto	l1054
 10227  000990                     l6301:
 10228                           
 10229                           ; BSR set to: 0
 10230  000990  0E00               	movlw	0
 10231  000992  0100               	movlb	0	; () banked
 10232  000994  6FAD               	movwf	actuatorTest@i_1560& (0+255),b
 10233  000996                     l6303:
 10234                           
 10235                           ; BSR set to: 0
 10236  000996  0E63               	movlw	99
 10237  000998  0100               	movlb	0	; () banked
 10238  00099A  65AD               	cpfsgt	actuatorTest@i_1560& (0+255),b
 10239  00099C  D001               	goto	l6307
 10240  00099E  D00C               	goto	l6311
 10241  0009A0                     l6307:
 10242                           
 10243                           ; BSR set to: 0
 10244  0009A0  0E68               	movlw	104
 10245  0009A2  0100               	movlb	0	; () banked
 10246  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10247  0009A6  0EE4               	movlw	228
 10248  0009A8                     u7127:
 10249  0009A8  2EE8               	decfsz	wreg,f,c
 10250  0009AA  D7FE               	bra	u7127
 10251  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10252  0009AE  D7FC               	bra	u7127
 10253  0009B0  F000               	nop	
 10254  0009B2  0100               	movlb	0	; () banked
 10255  0009B4  2BAD               	incf	actuatorTest@i_1560& (0+255),f,b
 10256  0009B6  D7EF               	goto	l6303
 10257  0009B8                     l6311:
 10258                           
 10259                           ; BSR set to: 0
 10260  0009B8  0100               	movlb	0	; () banked
 10261  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10262  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10263                           
 10264                           ; BSR set to: 0
 10265  0009BE  0100               	movlb	0	; () banked
 10266  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10267  0009C2  D7E6               	goto	l6301
 10268  0009C4  0100               	movlb	0	; () banked
 10269  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10270  0009C8  E101               	bnz	u4820
 10271  0009CA  D7DD               	goto	L6
 10272  0009CC                     u4820:
 10273  0009CC                     l1054:
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;Test.c: 174: LATAbits.LATA5 = 0;
 10277  0009CC  9A89               	bcf	3977,5,c	;volatile
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10281  0009CE  0E01               	movlw	1
 10282  0009D0  EC66  F020         	call	_lcdInst
 10283  0009D4  0E68               	movlw	104
 10284  0009D6  0100               	movlb	0	; () banked
 10285  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10286  0009DA  0EE4               	movlw	228
 10287  0009DC                     u7137:
 10288  0009DC  2EE8               	decfsz	wreg,f,c
 10289  0009DE  D7FE               	bra	u7137
 10290  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10291  0009E2  D7FC               	bra	u7137
 10292  0009E4  F000               	nop	
 10293  0009E6  0E80               	movlw	128
 10294  0009E8  EC66  F020         	call	_lcdInst
 10295                           
 10296                           ;Test.c: 181: printf("TST: COND SOLN'D");
 10297  0009EC  0ED1               	movlw	low STR_87
 10298  0009EE  0100               	movlb	0	; () banked
 10299  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10300  0009F2  0EFC               	movlw	high STR_87
 10301  0009F4  0100               	movlb	0	; () banked
 10302  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10303  0009F8  EC9C  F008         	call	_printf	;wreg free
 10304                           
 10305                           ;Test.c: 182: lcdInst(0b11000000);;
 10306  0009FC  0EC0               	movlw	192
 10307  0009FE  EC66  F020         	call	_lcdInst
 10308                           
 10309                           ;Test.c: 183: printf("PIN RA3...");
 10310  000A02  0E78               	movlw	low STR_88
 10311  000A04  0100               	movlb	0	; () banked
 10312  000A06  6F8E               	movwf	printf@f& (0+255),b
 10313  000A08  0EFF               	movlw	high STR_88
 10314  000A0A  0100               	movlb	0	; () banked
 10315  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10316  000A0E  EC9C  F008         	call	_printf	;wreg free
 10317                           
 10318                           ;Test.c: 184: for(i=0;i<5;i++){
 10319  000A12  0E00               	movlw	0
 10320  000A14  0100               	movlb	0	; () banked
 10321  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10322  000A18  0E00               	movlw	0
 10323  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10324                           
 10325                           ; BSR set to: 0
 10326  000A1C  0100               	movlb	0	; () banked
 10327  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10328  000A20  D008               	goto	l1057
 10329  000A22  0100               	movlb	0	; () banked
 10330  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10331  000A26  E12C               	bnz	l1058
 10332  000A28  0E05               	movlw	5
 10333  000A2A  0100               	movlb	0	; () banked
 10334  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10335  000A2E  B0D8               	btfsc	status,0,c
 10336  000A30  D027               	goto	l1058
 10337  000A32                     l1057:
 10338                           
 10339                           ; BSR set to: 0
 10340                           ;Test.c: 185: LATAbits.LATA3 = 0;
 10341  000A32  9689               	bcf	3977,3,c	;volatile
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;Test.c: 186: _delay((unsigned long)((100)*(32000000/4000.0)));
 10345  000A34  0E05               	movlw	5
 10346  000A36  0100               	movlb	0	; () banked
 10347  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10348  000A3A  0E0F               	movlw	15
 10349  000A3C  0100               	movlb	0	; () banked
 10350  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10351  000A40  0EF1               	movlw	241
 10352  000A42                     u7147:
 10353  000A42  2EE8               	decfsz	wreg,f,c
 10354  000A44  D7FE               	bra	u7147
 10355  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10356  000A48  D7FC               	bra	u7147
 10357  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10358  000A4C  D7FA               	bra	u7147
 10359                           
 10360                           ;Test.c: 187: LATAbits.LATA3 = ~0;
 10361  000A4E  8689               	bsf	3977,3,c	;volatile
 10362                           
 10363                           ;Test.c: 188: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10364  000A50  0E25               	movlw	37
 10365  000A52  0100               	movlb	0	; () banked
 10366  000A54  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10367  000A56  0E87               	movlw	135
 10368  000A58  0100               	movlb	0	; () banked
 10369  000A5A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10370  000A5C  0E8B               	movlw	139
 10371  000A5E                     u7157:
 10372  000A5E  2EE8               	decfsz	wreg,f,c
 10373  000A60  D7FE               	bra	u7157
 10374  000A62  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10375  000A64  D7FC               	bra	u7157
 10376  000A66  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10377  000A68  D7FA               	bra	u7157
 10378  000A6A  D000               	nop2	
 10379  000A6C  0100               	movlb	0	; () banked
 10380  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10381  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10382  000A72  0100               	movlb	0	; () banked
 10383  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10384  000A76  D7DD               	goto	l1057
 10385  000A78  0100               	movlb	0	; () banked
 10386  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10387  000A7C  E101               	bnz	u4840
 10388  000A7E  D7D4               	goto	L7
 10389  000A80                     u4840:
 10390  000A80                     l1058:
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;Test.c: 189: }
 10394                           ;Test.c: 190: LATAbits.LATA3 = ~0;
 10395  000A80  8689               	bsf	3977,3,c	;volatile
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;Test.c: 191: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10399  000A82  0E01               	movlw	1
 10400  000A84  EC66  F020         	call	_lcdInst
 10401  000A88  0E68               	movlw	104
 10402  000A8A  0100               	movlb	0	; () banked
 10403  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10404  000A8E  0EE4               	movlw	228
 10405  000A90                     u7167:
 10406  000A90  2EE8               	decfsz	wreg,f,c
 10407  000A92  D7FE               	bra	u7167
 10408  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10409  000A96  D7FC               	bra	u7167
 10410  000A98  F000               	nop	
 10411  000A9A  0E80               	movlw	128
 10412  000A9C  EC66  F020         	call	_lcdInst
 10413                           
 10414                           ;Test.c: 197: printf("TST: PUSH SOLN'D");
 10415  000AA0  0EE2               	movlw	low STR_89
 10416  000AA2  0100               	movlb	0	; () banked
 10417  000AA4  6F8E               	movwf	printf@f& (0+255),b
 10418  000AA6  0EFC               	movlw	high STR_89
 10419  000AA8  0100               	movlb	0	; () banked
 10420  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10421  000AAC  EC9C  F008         	call	_printf	;wreg free
 10422                           
 10423                           ;Test.c: 198: lcdInst(0b11000000);;
 10424  000AB0  0EC0               	movlw	192
 10425  000AB2  EC66  F020         	call	_lcdInst
 10426                           
 10427                           ;Test.c: 199: printf("PIN RA4...");
 10428  000AB6  0E83               	movlw	low STR_90
 10429  000AB8  0100               	movlb	0	; () banked
 10430  000ABA  6F8E               	movwf	printf@f& (0+255),b
 10431  000ABC  0EFF               	movlw	high STR_90
 10432  000ABE  0100               	movlb	0	; () banked
 10433  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10434  000AC2  EC9C  F008         	call	_printf	;wreg free
 10435                           
 10436                           ;Test.c: 200: for(i=0;i<5;i++){
 10437  000AC6  0E00               	movlw	0
 10438  000AC8  0100               	movlb	0	; () banked
 10439  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10440  000ACC  0E00               	movlw	0
 10441  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 10442                           
 10443                           ; BSR set to: 0
 10444  000AD0  0100               	movlb	0	; () banked
 10445  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10446  000AD4  D008               	goto	l1059
 10447  000AD6  0100               	movlb	0	; () banked
 10448  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10449  000ADA  E12C               	bnz	l1060
 10450  000ADC  0E05               	movlw	5
 10451  000ADE  0100               	movlb	0	; () banked
 10452  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10453  000AE2  B0D8               	btfsc	status,0,c
 10454  000AE4  D027               	goto	l1060
 10455  000AE6                     l1059:
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;Test.c: 201: LATAbits.LATA4 = 0;
 10459  000AE6  9889               	bcf	3977,4,c	;volatile
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;Test.c: 202: _delay((unsigned long)((100)*(32000000/4000.0)));
 10463  000AE8  0E05               	movlw	5
 10464  000AEA  0100               	movlb	0	; () banked
 10465  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10466  000AEE  0E0F               	movlw	15
 10467  000AF0  0100               	movlb	0	; () banked
 10468  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 10469  000AF4  0EF1               	movlw	241
 10470  000AF6                     u7177:
 10471  000AF6  2EE8               	decfsz	wreg,f,c
 10472  000AF8  D7FE               	bra	u7177
 10473  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10474  000AFC  D7FC               	bra	u7177
 10475  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10476  000B00  D7FA               	bra	u7177
 10477                           
 10478                           ;Test.c: 203: LATAbits.LATA4 = ~0;
 10479  000B02  8889               	bsf	3977,4,c	;volatile
 10480                           
 10481                           ;Test.c: 204: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10482  000B04  0E25               	movlw	37
 10483  000B06  0100               	movlb	0	; () banked
 10484  000B08  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10485  000B0A  0E87               	movlw	135
 10486  000B0C  0100               	movlb	0	; () banked
 10487  000B0E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10488  000B10  0E8B               	movlw	139
 10489  000B12                     u7187:
 10490  000B12  2EE8               	decfsz	wreg,f,c
 10491  000B14  D7FE               	bra	u7187
 10492  000B16  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10493  000B18  D7FC               	bra	u7187
 10494  000B1A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10495  000B1C  D7FA               	bra	u7187
 10496  000B1E  D000               	nop2	
 10497  000B20  0100               	movlb	0	; () banked
 10498  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10499  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10500  000B26  0100               	movlb	0	; () banked
 10501  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10502  000B2A  D7DD               	goto	l1059
 10503  000B2C  0100               	movlb	0	; () banked
 10504  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10505  000B30  E101               	bnz	u4860
 10506  000B32  D7D4               	goto	L8
 10507  000B34                     u4860:
 10508  000B34                     l1060:
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;Test.c: 205: }
 10512                           ;Test.c: 206: LATAbits.LATA4 = ~0;
 10513  000B34  8889               	bsf	3977,4,c	;volatile
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10517  000B36  0E01               	movlw	1
 10518  000B38  EC66  F020         	call	_lcdInst
 10519  000B3C  0E68               	movlw	104
 10520  000B3E  0100               	movlb	0	; () banked
 10521  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10522  000B42  0EE4               	movlw	228
 10523  000B44                     u7197:
 10524  000B44  2EE8               	decfsz	wreg,f,c
 10525  000B46  D7FE               	bra	u7197
 10526  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10527  000B4A  D7FC               	bra	u7197
 10528  000B4C  F000               	nop	
 10529  000B4E  0E80               	movlw	128
 10530  000B50  EC66  F020         	call	_lcdInst
 10531                           
 10532                           ;Test.c: 210: machine_state = Sorting_state;
 10533  000B54  0E01               	movlw	1
 10534  000B56  0100               	movlb	0	; () banked
 10535  000B58  6FFC               	movwf	_machine_state& (0+255),b
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;Test.c: 211: was_low_1 = 0;
 10539  000B5A  0E00               	movlw	0
 10540  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 10541  000B5E  0E00               	movlw	0
 10542  000B60  6E79               	movwf	_was_low_1,c	;volatile
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;Test.c: 212: was_low_1 = 0;
 10546  000B62  0E00               	movlw	0
 10547  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 10548  000B66  0E00               	movlw	0
 10549  000B68  6E79               	movwf	_was_low_1,c	;volatile
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;Test.c: 219: printf("TST: PAN SERVO");
 10553  000B6A  0EC2               	movlw	low STR_91
 10554  000B6C  0100               	movlb	0	; () banked
 10555  000B6E  6F8E               	movwf	printf@f& (0+255),b
 10556  000B70  0EFE               	movlw	high STR_91
 10557  000B72  0100               	movlb	0	; () banked
 10558  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 10559  000B76  EC9C  F008         	call	_printf	;wreg free
 10560                           
 10561                           ;Test.c: 220: lcdInst(0b11000000);;
 10562  000B7A  0EC0               	movlw	192
 10563  000B7C  EC66  F020         	call	_lcdInst
 10564                           
 10565                           ;Test.c: 221: printf("MIDDLE -- 2s    ");
 10566  000B80  0E5A               	movlw	low STR_92
 10567  000B82  0100               	movlb	0	; () banked
 10568  000B84  6F8E               	movwf	printf@f& (0+255),b
 10569  000B86  0EFC               	movlw	high STR_92
 10570  000B88  0100               	movlb	0	; () banked
 10571  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10572  000B8C  EC9C  F008         	call	_printf	;wreg free
 10573                           
 10574                           ;Test.c: 222: updateServoPosition(1500, 1);
 10575  000B90  0E05               	movlw	5
 10576  000B92  0100               	movlb	0	; () banked
 10577  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10578  000B96  0EDC               	movlw	220
 10579  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10580  000B9A  0E00               	movlw	0
 10581  000B9C  0100               	movlb	0	; () banked
 10582  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10583  000BA0  0E01               	movlw	1
 10584  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10585  000BA4  ECD6  F01A         	call	_updateServoPosition	;wreg free
 10586                           
 10587                           ;Test.c: 223: TMR1ON = 1;
 10588  000BA8  80CD               	bsf	4045,0,c	;volatile
 10589                           
 10590                           ;Test.c: 224: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10591  000BAA  0E00               	movlw	0
 10592  000BAC  0100               	movlb	0	; () banked
 10593  000BAE  6FAE               	movwf	actuatorTest@i_1567& (0+255),b
 10594  000BB0                     l6387:
 10595                           
 10596                           ; BSR set to: 0
 10597  000BB0  0E63               	movlw	99
 10598  000BB2  0100               	movlb	0	; () banked
 10599  000BB4  65AE               	cpfsgt	actuatorTest@i_1567& (0+255),b
 10600  000BB6  D001               	goto	l6391
 10601  000BB8  D00C               	goto	l6395
 10602  000BBA                     l6391:
 10603                           
 10604                           ; BSR set to: 0
 10605  000BBA  0E68               	movlw	104
 10606  000BBC  0100               	movlb	0	; () banked
 10607  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10608  000BC0  0EE4               	movlw	228
 10609  000BC2                     u7207:
 10610  000BC2  2EE8               	decfsz	wreg,f,c
 10611  000BC4  D7FE               	bra	u7207
 10612  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10613  000BC8  D7FC               	bra	u7207
 10614  000BCA  F000               	nop	
 10615  000BCC  0100               	movlb	0	; () banked
 10616  000BCE  2BAE               	incf	actuatorTest@i_1567& (0+255),f,b
 10617  000BD0  D7EF               	goto	l6387
 10618  000BD2                     l6395:
 10619                           
 10620                           ; BSR set to: 0
 10621  000BD2  0E00               	movlw	0
 10622  000BD4  0100               	movlb	0	; () banked
 10623  000BD6  6FAF               	movwf	actuatorTest@i_1568& (0+255),b
 10624  000BD8                     l6397:
 10625                           
 10626                           ; BSR set to: 0
 10627  000BD8  0E63               	movlw	99
 10628  000BDA  0100               	movlb	0	; () banked
 10629  000BDC  65AF               	cpfsgt	actuatorTest@i_1568& (0+255),b
 10630  000BDE  D001               	goto	l6401
 10631  000BE0  D00C               	goto	l6405
 10632  000BE2                     l6401:
 10633                           
 10634                           ; BSR set to: 0
 10635  000BE2  0E68               	movlw	104
 10636  000BE4  0100               	movlb	0	; () banked
 10637  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10638  000BE8  0EE4               	movlw	228
 10639  000BEA                     u7217:
 10640  000BEA  2EE8               	decfsz	wreg,f,c
 10641  000BEC  D7FE               	bra	u7217
 10642  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10643  000BF0  D7FC               	bra	u7217
 10644  000BF2  F000               	nop	
 10645  000BF4  0100               	movlb	0	; () banked
 10646  000BF6  2BAF               	incf	actuatorTest@i_1568& (0+255),f,b
 10647  000BF8  D7EF               	goto	l6397
 10648  000BFA                     l6405:
 10649                           
 10650                           ; BSR set to: 0
 10651                           ;Test.c: 226: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10652  000BFA  0E80               	movlw	128
 10653  000BFC  EC66  F020         	call	_lcdInst
 10654  000C00  0EC0               	movlw	192
 10655  000C02  EC66  F020         	call	_lcdInst
 10656                           
 10657                           ;Test.c: 227: printf("RIGHT -- 2s     ");
 10658  000C06  0E49               	movlw	low STR_93
 10659  000C08  0100               	movlb	0	; () banked
 10660  000C0A  6F8E               	movwf	printf@f& (0+255),b
 10661  000C0C  0EFC               	movlw	high STR_93
 10662  000C0E  0100               	movlb	0	; () banked
 10663  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 10664  000C12  EC9C  F008         	call	_printf	;wreg free
 10665                           
 10666                           ;Test.c: 228: updateServoPosition(1000, 1);
 10667  000C16  0E03               	movlw	3
 10668  000C18  0100               	movlb	0	; () banked
 10669  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10670  000C1C  0EE8               	movlw	232
 10671  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10672  000C20  0E00               	movlw	0
 10673  000C22  0100               	movlb	0	; () banked
 10674  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10675  000C26  0E01               	movlw	1
 10676  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10677  000C2A  ECD6  F01A         	call	_updateServoPosition	;wreg free
 10678                           
 10679                           ;Test.c: 229: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10680  000C2E  0E00               	movlw	0
 10681  000C30  0100               	movlb	0	; () banked
 10682  000C32  6FB0               	movwf	actuatorTest@i_1570& (0+255),b
 10683  000C34                     l6413:
 10684                           
 10685                           ; BSR set to: 0
 10686  000C34  0E63               	movlw	99
 10687  000C36  0100               	movlb	0	; () banked
 10688  000C38  65B0               	cpfsgt	actuatorTest@i_1570& (0+255),b
 10689  000C3A  D001               	goto	l6417
 10690  000C3C  D00C               	goto	l6421
 10691  000C3E                     l6417:
 10692                           
 10693                           ; BSR set to: 0
 10694  000C3E  0E68               	movlw	104
 10695  000C40  0100               	movlb	0	; () banked
 10696  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 10697  000C44  0EE4               	movlw	228
 10698  000C46                     u7227:
 10699  000C46  2EE8               	decfsz	wreg,f,c
 10700  000C48  D7FE               	bra	u7227
 10701  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10702  000C4C  D7FC               	bra	u7227
 10703  000C4E  F000               	nop	
 10704  000C50  0100               	movlb	0	; () banked
 10705  000C52  2BB0               	incf	actuatorTest@i_1570& (0+255),f,b
 10706  000C54  D7EF               	goto	l6413
 10707  000C56                     l6421:
 10708                           
 10709                           ; BSR set to: 0
 10710  000C56  0E00               	movlw	0
 10711  000C58  0100               	movlb	0	; () banked
 10712  000C5A  6FB1               	movwf	actuatorTest@i_1571& (0+255),b
 10713  000C5C                     l6423:
 10714                           
 10715                           ; BSR set to: 0
 10716  000C5C  0E63               	movlw	99
 10717  000C5E  0100               	movlb	0	; () banked
 10718  000C60  65B1               	cpfsgt	actuatorTest@i_1571& (0+255),b
 10719  000C62  D001               	goto	l6427
 10720  000C64  D00C               	goto	l6431
 10721  000C66                     l6427:
 10722                           
 10723                           ; BSR set to: 0
 10724  000C66  0E68               	movlw	104
 10725  000C68  0100               	movlb	0	; () banked
 10726  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10727  000C6C  0EE4               	movlw	228
 10728  000C6E                     u7237:
 10729  000C6E  2EE8               	decfsz	wreg,f,c
 10730  000C70  D7FE               	bra	u7237
 10731  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10732  000C74  D7FC               	bra	u7237
 10733  000C76  F000               	nop	
 10734  000C78  0100               	movlb	0	; () banked
 10735  000C7A  2BB1               	incf	actuatorTest@i_1571& (0+255),f,b
 10736  000C7C  D7EF               	goto	l6423
 10737  000C7E                     l6431:
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;Test.c: 231: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10741  000C7E  0E80               	movlw	128
 10742  000C80  EC66  F020         	call	_lcdInst
 10743  000C84  0EC0               	movlw	192
 10744  000C86  EC66  F020         	call	_lcdInst
 10745                           
 10746                           ;Test.c: 232: printf("LEFT -- 2s      ");
 10747  000C8A  0E27               	movlw	low STR_94
 10748  000C8C  0100               	movlb	0	; () banked
 10749  000C8E  6F8E               	movwf	printf@f& (0+255),b
 10750  000C90  0EFC               	movlw	high STR_94
 10751  000C92  0100               	movlb	0	; () banked
 10752  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10753  000C96  EC9C  F008         	call	_printf	;wreg free
 10754                           
 10755                           ;Test.c: 233: updateServoPosition(2000, 1);
 10756  000C9A  0E07               	movlw	7
 10757  000C9C  0100               	movlb	0	; () banked
 10758  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10759  000CA0  0ED0               	movlw	208
 10760  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10761  000CA4  0E00               	movlw	0
 10762  000CA6  0100               	movlb	0	; () banked
 10763  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10764  000CAA  0E01               	movlw	1
 10765  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10766  000CAE  ECD6  F01A         	call	_updateServoPosition	;wreg free
 10767                           
 10768                           ;Test.c: 234: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10769  000CB2  0E00               	movlw	0
 10770  000CB4  0100               	movlb	0	; () banked
 10771  000CB6  6FB2               	movwf	actuatorTest@i_1573& (0+255),b
 10772  000CB8                     l6439:
 10773                           
 10774                           ; BSR set to: 0
 10775  000CB8  0E63               	movlw	99
 10776  000CBA  0100               	movlb	0	; () banked
 10777  000CBC  65B2               	cpfsgt	actuatorTest@i_1573& (0+255),b
 10778  000CBE  D001               	goto	l6443
 10779  000CC0  D00C               	goto	l6447
 10780  000CC2                     l6443:
 10781                           
 10782                           ; BSR set to: 0
 10783  000CC2  0E68               	movlw	104
 10784  000CC4  0100               	movlb	0	; () banked
 10785  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10786  000CC8  0EE4               	movlw	228
 10787  000CCA                     u7247:
 10788  000CCA  2EE8               	decfsz	wreg,f,c
 10789  000CCC  D7FE               	bra	u7247
 10790  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10791  000CD0  D7FC               	bra	u7247
 10792  000CD2  F000               	nop	
 10793  000CD4  0100               	movlb	0	; () banked
 10794  000CD6  2BB2               	incf	actuatorTest@i_1573& (0+255),f,b
 10795  000CD8  D7EF               	goto	l6439
 10796  000CDA                     l6447:
 10797                           
 10798                           ; BSR set to: 0
 10799  000CDA  0E00               	movlw	0
 10800  000CDC  0100               	movlb	0	; () banked
 10801  000CDE  6FB3               	movwf	actuatorTest@i_1574& (0+255),b
 10802  000CE0                     l6449:
 10803                           
 10804                           ; BSR set to: 0
 10805  000CE0  0E63               	movlw	99
 10806  000CE2  0100               	movlb	0	; () banked
 10807  000CE4  65B3               	cpfsgt	actuatorTest@i_1574& (0+255),b
 10808  000CE6  D001               	goto	l6453
 10809  000CE8  D00C               	goto	l6457
 10810  000CEA                     l6453:
 10811                           
 10812                           ; BSR set to: 0
 10813  000CEA  0E68               	movlw	104
 10814  000CEC  0100               	movlb	0	; () banked
 10815  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10816  000CF0  0EE4               	movlw	228
 10817  000CF2                     u7257:
 10818  000CF2  2EE8               	decfsz	wreg,f,c
 10819  000CF4  D7FE               	bra	u7257
 10820  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10821  000CF8  D7FC               	bra	u7257
 10822  000CFA  F000               	nop	
 10823  000CFC  0100               	movlb	0	; () banked
 10824  000CFE  2BB3               	incf	actuatorTest@i_1574& (0+255),f,b
 10825  000D00  D7EF               	goto	l6449
 10826  000D02                     l6457:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;Test.c: 236: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10830  000D02  0E80               	movlw	128
 10831  000D04  EC66  F020         	call	_lcdInst
 10832  000D08  0EC0               	movlw	192
 10833  000D0A  EC66  F020         	call	_lcdInst
 10834                           
 10835                           ;Test.c: 237: printf("MID-LEFT -- 2s  ");
 10836  000D0E  0E7C               	movlw	low STR_95
 10837  000D10  0100               	movlb	0	; () banked
 10838  000D12  6F8E               	movwf	printf@f& (0+255),b
 10839  000D14  0EFC               	movlw	high STR_95
 10840  000D16  0100               	movlb	0	; () banked
 10841  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 10842  000D1A  EC9C  F008         	call	_printf	;wreg free
 10843                           
 10844                           ;Test.c: 238: updateServoPosition(1666, 1);
 10845  000D1E  0E06               	movlw	6
 10846  000D20  0100               	movlb	0	; () banked
 10847  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10848  000D24  0E82               	movlw	130
 10849  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10850  000D28  0E00               	movlw	0
 10851  000D2A  0100               	movlb	0	; () banked
 10852  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10853  000D2E  0E01               	movlw	1
 10854  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10855  000D32  ECD6  F01A         	call	_updateServoPosition	;wreg free
 10856                           
 10857                           ;Test.c: 239: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10858  000D36  0E00               	movlw	0
 10859  000D38  0100               	movlb	0	; () banked
 10860  000D3A  6FB4               	movwf	actuatorTest@i_1576& (0+255),b
 10861  000D3C                     l6465:
 10862                           
 10863                           ; BSR set to: 0
 10864  000D3C  0E63               	movlw	99
 10865  000D3E  0100               	movlb	0	; () banked
 10866  000D40  65B4               	cpfsgt	actuatorTest@i_1576& (0+255),b
 10867  000D42  D001               	goto	l6469
 10868  000D44  D00C               	goto	l6473
 10869  000D46                     l6469:
 10870                           
 10871                           ; BSR set to: 0
 10872  000D46  0E68               	movlw	104
 10873  000D48  0100               	movlb	0	; () banked
 10874  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10875  000D4C  0EE4               	movlw	228
 10876  000D4E                     u7267:
 10877  000D4E  2EE8               	decfsz	wreg,f,c
 10878  000D50  D7FE               	bra	u7267
 10879  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10880  000D54  D7FC               	bra	u7267
 10881  000D56  F000               	nop	
 10882  000D58  0100               	movlb	0	; () banked
 10883  000D5A  2BB4               	incf	actuatorTest@i_1576& (0+255),f,b
 10884  000D5C  D7EF               	goto	l6465
 10885  000D5E                     l6473:
 10886                           
 10887                           ; BSR set to: 0
 10888  000D5E  0E00               	movlw	0
 10889  000D60  0100               	movlb	0	; () banked
 10890  000D62  6FB5               	movwf	actuatorTest@i_1577& (0+255),b
 10891  000D64                     l6475:
 10892                           
 10893                           ; BSR set to: 0
 10894  000D64  0E63               	movlw	99
 10895  000D66  0100               	movlb	0	; () banked
 10896  000D68  65B5               	cpfsgt	actuatorTest@i_1577& (0+255),b
 10897  000D6A  D001               	goto	l6479
 10898  000D6C  D00C               	goto	l6483
 10899  000D6E                     l6479:
 10900                           
 10901                           ; BSR set to: 0
 10902  000D6E  0E68               	movlw	104
 10903  000D70  0100               	movlb	0	; () banked
 10904  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 10905  000D74  0EE4               	movlw	228
 10906  000D76                     u7277:
 10907  000D76  2EE8               	decfsz	wreg,f,c
 10908  000D78  D7FE               	bra	u7277
 10909  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10910  000D7C  D7FC               	bra	u7277
 10911  000D7E  F000               	nop	
 10912  000D80  0100               	movlb	0	; () banked
 10913  000D82  2BB5               	incf	actuatorTest@i_1577& (0+255),f,b
 10914  000D84  D7EF               	goto	l6475
 10915  000D86                     l6483:
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;Test.c: 241: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10919  000D86  0E80               	movlw	128
 10920  000D88  EC66  F020         	call	_lcdInst
 10921  000D8C  0EC0               	movlw	192
 10922  000D8E  EC66  F020         	call	_lcdInst
 10923                           
 10924                           ;Test.c: 242: printf("MID-RIGHT -- 2s ");
 10925  000D92  0E8D               	movlw	low STR_96
 10926  000D94  0100               	movlb	0	; () banked
 10927  000D96  6F8E               	movwf	printf@f& (0+255),b
 10928  000D98  0EFC               	movlw	high STR_96
 10929  000D9A  0100               	movlb	0	; () banked
 10930  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10931  000D9E  EC9C  F008         	call	_printf	;wreg free
 10932                           
 10933                           ;Test.c: 243: updateServoPosition(1333, 1);
 10934  000DA2  0E05               	movlw	5
 10935  000DA4  0100               	movlb	0	; () banked
 10936  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10937  000DA8  0E35               	movlw	53
 10938  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10939  000DAC  0E00               	movlw	0
 10940  000DAE  0100               	movlb	0	; () banked
 10941  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10942  000DB2  0E01               	movlw	1
 10943  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10944  000DB6  ECD6  F01A         	call	_updateServoPosition	;wreg free
 10945                           
 10946                           ;Test.c: 244: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10947  000DBA  0E00               	movlw	0
 10948  000DBC  0100               	movlb	0	; () banked
 10949  000DBE  6FB6               	movwf	actuatorTest@i_1579& (0+255),b
 10950  000DC0                     l6491:
 10951                           
 10952                           ; BSR set to: 0
 10953  000DC0  0E63               	movlw	99
 10954  000DC2  0100               	movlb	0	; () banked
 10955  000DC4  65B6               	cpfsgt	actuatorTest@i_1579& (0+255),b
 10956  000DC6  D001               	goto	l6495
 10957  000DC8  D00C               	goto	l6499
 10958  000DCA                     l6495:
 10959                           
 10960                           ; BSR set to: 0
 10961  000DCA  0E68               	movlw	104
 10962  000DCC  0100               	movlb	0	; () banked
 10963  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10964  000DD0  0EE4               	movlw	228
 10965  000DD2                     u7287:
 10966  000DD2  2EE8               	decfsz	wreg,f,c
 10967  000DD4  D7FE               	bra	u7287
 10968  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10969  000DD8  D7FC               	bra	u7287
 10970  000DDA  F000               	nop	
 10971  000DDC  0100               	movlb	0	; () banked
 10972  000DDE  2BB6               	incf	actuatorTest@i_1579& (0+255),f,b
 10973  000DE0  D7EF               	goto	l6491
 10974  000DE2                     l6499:
 10975                           
 10976                           ; BSR set to: 0
 10977  000DE2  0E00               	movlw	0
 10978  000DE4  0100               	movlb	0	; () banked
 10979  000DE6  6FB7               	movwf	actuatorTest@i_1580& (0+255),b
 10980  000DE8                     l6501:
 10981                           
 10982                           ; BSR set to: 0
 10983  000DE8  0E63               	movlw	99
 10984  000DEA  0100               	movlb	0	; () banked
 10985  000DEC  65B7               	cpfsgt	actuatorTest@i_1580& (0+255),b
 10986  000DEE  D001               	goto	l6505
 10987  000DF0  D00C               	goto	l6509
 10988  000DF2                     l6505:
 10989                           
 10990                           ; BSR set to: 0
 10991  000DF2  0E68               	movlw	104
 10992  000DF4  0100               	movlb	0	; () banked
 10993  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10994  000DF8  0EE4               	movlw	228
 10995  000DFA                     u7297:
 10996  000DFA  2EE8               	decfsz	wreg,f,c
 10997  000DFC  D7FE               	bra	u7297
 10998  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10999  000E00  D7FC               	bra	u7297
 11000  000E02  F000               	nop	
 11001  000E04  0100               	movlb	0	; () banked
 11002  000E06  2BB7               	incf	actuatorTest@i_1580& (0+255),f,b
 11003  000E08  D7EF               	goto	l6501
 11004  000E0A                     l6509:
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;Test.c: 246: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11008  000E0A  0E80               	movlw	128
 11009  000E0C  EC66  F020         	call	_lcdInst
 11010  000E10  0EC0               	movlw	192
 11011  000E12  EC66  F020         	call	_lcdInst
 11012                           
 11013                           ;Test.c: 247: printf("MID -- 2s       ");
 11014  000E16  0E05               	movlw	low STR_97
 11015  000E18  0100               	movlb	0	; () banked
 11016  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11017  000E1C  0EFC               	movlw	high STR_97
 11018  000E1E  0100               	movlb	0	; () banked
 11019  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11020  000E22  EC9C  F008         	call	_printf	;wreg free
 11021                           
 11022                           ;Test.c: 248: updateServoPosition(1500, 1);
 11023  000E26  0E05               	movlw	5
 11024  000E28  0100               	movlb	0	; () banked
 11025  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11026  000E2C  0EDC               	movlw	220
 11027  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11028  000E30  0E00               	movlw	0
 11029  000E32  0100               	movlb	0	; () banked
 11030  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11031  000E36  0E01               	movlw	1
 11032  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11033  000E3A  ECD6  F01A         	call	_updateServoPosition	;wreg free
 11034                           
 11035                           ;Test.c: 249: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11036  000E3E  0E00               	movlw	0
 11037  000E40  0100               	movlb	0	; () banked
 11038  000E42  6FB8               	movwf	actuatorTest@i_1582& (0+255),b
 11039  000E44                     l6517:
 11040                           
 11041                           ; BSR set to: 0
 11042  000E44  0E63               	movlw	99
 11043  000E46  0100               	movlb	0	; () banked
 11044  000E48  65B8               	cpfsgt	actuatorTest@i_1582& (0+255),b
 11045  000E4A  D001               	goto	l6521
 11046  000E4C  D00C               	goto	l6525
 11047  000E4E                     l6521:
 11048                           
 11049                           ; BSR set to: 0
 11050  000E4E  0E68               	movlw	104
 11051  000E50  0100               	movlb	0	; () banked
 11052  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11053  000E54  0EE4               	movlw	228
 11054  000E56                     u7307:
 11055  000E56  2EE8               	decfsz	wreg,f,c
 11056  000E58  D7FE               	bra	u7307
 11057  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11058  000E5C  D7FC               	bra	u7307
 11059  000E5E  F000               	nop	
 11060  000E60  0100               	movlb	0	; () banked
 11061  000E62  2BB8               	incf	actuatorTest@i_1582& (0+255),f,b
 11062  000E64  D7EF               	goto	l6517
 11063  000E66                     l6525:
 11064                           
 11065                           ; BSR set to: 0
 11066  000E66  0E00               	movlw	0
 11067  000E68  0100               	movlb	0	; () banked
 11068  000E6A  6FB9               	movwf	actuatorTest@i_1583& (0+255),b
 11069  000E6C                     l6527:
 11070                           
 11071                           ; BSR set to: 0
 11072  000E6C  0E63               	movlw	99
 11073  000E6E  0100               	movlb	0	; () banked
 11074  000E70  65B9               	cpfsgt	actuatorTest@i_1583& (0+255),b
 11075  000E72  D001               	goto	l6531
 11076  000E74  D00C               	goto	l1084
 11077  000E76                     l6531:
 11078                           
 11079                           ; BSR set to: 0
 11080  000E76  0E68               	movlw	104
 11081  000E78  0100               	movlb	0	; () banked
 11082  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11083  000E7C  0EE4               	movlw	228
 11084  000E7E                     u7317:
 11085  000E7E  2EE8               	decfsz	wreg,f,c
 11086  000E80  D7FE               	bra	u7317
 11087  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11088  000E84  D7FC               	bra	u7317
 11089  000E86  F000               	nop	
 11090  000E88  0100               	movlb	0	; () banked
 11091  000E8A  2BB9               	incf	actuatorTest@i_1583& (0+255),f,b
 11092  000E8C  D7EF               	goto	l6527
 11093  000E8E                     l1084:
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;Test.c: 250: TMR1ON = 0;
 11097  000E8E  90CD               	bcf	4045,0,c	;volatile
 11098                           
 11099                           ; BSR set to: 0
 11100                           ;Test.c: 257: printf("TST: TILT SERVO");
 11101  000E90  0E57               	movlw	low STR_98
 11102  000E92  0100               	movlb	0	; () banked
 11103  000E94  6F8E               	movwf	printf@f& (0+255),b
 11104  000E96  0EFE               	movlw	high STR_98
 11105  000E98  0100               	movlb	0	; () banked
 11106  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11107  000E9C  EC9C  F008         	call	_printf	;wreg free
 11108                           
 11109                           ;Test.c: 258: lcdInst(0b11000000);;
 11110  000EA0  0EC0               	movlw	192
 11111  000EA2  EC66  F020         	call	_lcdInst
 11112                           
 11113                           ;Test.c: 259: printf("LEVEL -- 2s     ");
 11114  000EA6  0E38               	movlw	low STR_99
 11115  000EA8  0100               	movlb	0	; () banked
 11116  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11117  000EAC  0EFC               	movlw	high STR_99
 11118  000EAE  0100               	movlb	0	; () banked
 11119  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11120  000EB2  EC9C  F008         	call	_printf	;wreg free
 11121                           
 11122                           ;Test.c: 260: updateServoPosition(1000, 3);
 11123  000EB6  0E03               	movlw	3
 11124  000EB8  0100               	movlb	0	; () banked
 11125  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11126  000EBC  0EE8               	movlw	232
 11127  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11128  000EC0  0E00               	movlw	0
 11129  000EC2  0100               	movlb	0	; () banked
 11130  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11131  000EC6  0E03               	movlw	3
 11132  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11133  000ECA  ECD6  F01A         	call	_updateServoPosition	;wreg free
 11134                           
 11135                           ;Test.c: 261: TMR3ON = 1;
 11136  000ECE  80B1               	bsf	4017,0,c	;volatile
 11137                           
 11138                           ;Test.c: 262: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11139  000ED0  0E00               	movlw	0
 11140  000ED2  0100               	movlb	0	; () banked
 11141  000ED4  6FBA               	movwf	actuatorTest@i_1586& (0+255),b
 11142  000ED6                     l6545:
 11143                           
 11144                           ; BSR set to: 0
 11145  000ED6  0E63               	movlw	99
 11146  000ED8  0100               	movlb	0	; () banked
 11147  000EDA  65BA               	cpfsgt	actuatorTest@i_1586& (0+255),b
 11148  000EDC  D001               	goto	l6549
 11149  000EDE  D00C               	goto	l6553
 11150  000EE0                     l6549:
 11151                           
 11152                           ; BSR set to: 0
 11153  000EE0  0E68               	movlw	104
 11154  000EE2  0100               	movlb	0	; () banked
 11155  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11156  000EE6  0EE4               	movlw	228
 11157  000EE8                     u7327:
 11158  000EE8  2EE8               	decfsz	wreg,f,c
 11159  000EEA  D7FE               	bra	u7327
 11160  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11161  000EEE  D7FC               	bra	u7327
 11162  000EF0  F000               	nop	
 11163  000EF2  0100               	movlb	0	; () banked
 11164  000EF4  2BBA               	incf	actuatorTest@i_1586& (0+255),f,b
 11165  000EF6  D7EF               	goto	l6545
 11166  000EF8                     l6553:
 11167                           
 11168                           ; BSR set to: 0
 11169  000EF8  0E00               	movlw	0
 11170  000EFA  0100               	movlb	0	; () banked
 11171  000EFC  6FBB               	movwf	actuatorTest@i_1587& (0+255),b
 11172  000EFE                     l6555:
 11173                           
 11174                           ; BSR set to: 0
 11175  000EFE  0E63               	movlw	99
 11176  000F00  0100               	movlb	0	; () banked
 11177  000F02  65BB               	cpfsgt	actuatorTest@i_1587& (0+255),b
 11178  000F04  D001               	goto	l6559
 11179  000F06  D00C               	goto	l6563
 11180  000F08                     l6559:
 11181                           
 11182                           ; BSR set to: 0
 11183  000F08  0E68               	movlw	104
 11184  000F0A  0100               	movlb	0	; () banked
 11185  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11186  000F0E  0EE4               	movlw	228
 11187  000F10                     u7337:
 11188  000F10  2EE8               	decfsz	wreg,f,c
 11189  000F12  D7FE               	bra	u7337
 11190  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11191  000F16  D7FC               	bra	u7337
 11192  000F18  F000               	nop	
 11193  000F1A  0100               	movlb	0	; () banked
 11194  000F1C  2BBB               	incf	actuatorTest@i_1587& (0+255),f,b
 11195  000F1E  D7EF               	goto	l6555
 11196  000F20                     l6563:
 11197                           
 11198                           ; BSR set to: 0
 11199                           ;Test.c: 264: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11200  000F20  0E80               	movlw	128
 11201  000F22  EC66  F020         	call	_lcdInst
 11202  000F26  0EC0               	movlw	192
 11203  000F28  EC66  F020         	call	_lcdInst
 11204                           
 11205                           ;Test.c: 265: printf("DROP -- 2s      ");
 11206  000F2C  0E16               	movlw	low STR_100
 11207  000F2E  0100               	movlb	0	; () banked
 11208  000F30  6F8E               	movwf	printf@f& (0+255),b
 11209  000F32  0EFC               	movlw	high STR_100
 11210  000F34  0100               	movlb	0	; () banked
 11211  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11212  000F38  EC9C  F008         	call	_printf	;wreg free
 11213                           
 11214                           ;Test.c: 266: updateServoPosition(1500, 3);
 11215  000F3C  0E05               	movlw	5
 11216  000F3E  0100               	movlb	0	; () banked
 11217  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11218  000F42  0EDC               	movlw	220
 11219  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11220  000F46  0E00               	movlw	0
 11221  000F48  0100               	movlb	0	; () banked
 11222  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11223  000F4C  0E03               	movlw	3
 11224  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11225  000F50  ECD6  F01A         	call	_updateServoPosition	;wreg free
 11226                           
 11227                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11228  000F54  0E00               	movlw	0
 11229  000F56  0100               	movlb	0	; () banked
 11230  000F58  6FBC               	movwf	actuatorTest@i_1589& (0+255),b
 11231  000F5A                     l6571:
 11232                           
 11233                           ; BSR set to: 0
 11234  000F5A  0E63               	movlw	99
 11235  000F5C  0100               	movlb	0	; () banked
 11236  000F5E  65BC               	cpfsgt	actuatorTest@i_1589& (0+255),b
 11237  000F60  D001               	goto	l6575
 11238  000F62  D00C               	goto	l6579
 11239  000F64                     l6575:
 11240                           
 11241                           ; BSR set to: 0
 11242  000F64  0E68               	movlw	104
 11243  000F66  0100               	movlb	0	; () banked
 11244  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11245  000F6A  0EE4               	movlw	228
 11246  000F6C                     u7347:
 11247  000F6C  2EE8               	decfsz	wreg,f,c
 11248  000F6E  D7FE               	bra	u7347
 11249  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11250  000F72  D7FC               	bra	u7347
 11251  000F74  F000               	nop	
 11252  000F76  0100               	movlb	0	; () banked
 11253  000F78  2BBC               	incf	actuatorTest@i_1589& (0+255),f,b
 11254  000F7A  D7EF               	goto	l6571
 11255  000F7C                     l6579:
 11256                           
 11257                           ; BSR set to: 0
 11258  000F7C  0E00               	movlw	0
 11259  000F7E  0100               	movlb	0	; () banked
 11260  000F80  6FBD               	movwf	actuatorTest@i_1590& (0+255),b
 11261  000F82                     l6581:
 11262                           
 11263                           ; BSR set to: 0
 11264  000F82  0E63               	movlw	99
 11265  000F84  0100               	movlb	0	; () banked
 11266  000F86  65BD               	cpfsgt	actuatorTest@i_1590& (0+255),b
 11267  000F88  D001               	goto	l6585
 11268  000F8A  D00C               	goto	l6589
 11269  000F8C                     l6585:
 11270                           
 11271                           ; BSR set to: 0
 11272  000F8C  0E68               	movlw	104
 11273  000F8E  0100               	movlb	0	; () banked
 11274  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11275  000F92  0EE4               	movlw	228
 11276  000F94                     u7357:
 11277  000F94  2EE8               	decfsz	wreg,f,c
 11278  000F96  D7FE               	bra	u7357
 11279  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11280  000F9A  D7FC               	bra	u7357
 11281  000F9C  F000               	nop	
 11282  000F9E  0100               	movlb	0	; () banked
 11283  000FA0  2BBD               	incf	actuatorTest@i_1590& (0+255),f,b
 11284  000FA2  D7EF               	goto	l6581
 11285  000FA4                     l6589:
 11286                           
 11287                           ; BSR set to: 0
 11288                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11289  000FA4  0E80               	movlw	128
 11290  000FA6  EC66  F020         	call	_lcdInst
 11291  000FAA  0EC0               	movlw	192
 11292  000FAC  EC66  F020         	call	_lcdInst
 11293                           
 11294                           ;Test.c: 270: printf("LEVEL -- 2s     ");
 11295  000FB0  0E38               	movlw	low STR_99
 11296  000FB2  0100               	movlb	0	; () banked
 11297  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11298  000FB6  0EFC               	movlw	high STR_99
 11299  000FB8  0100               	movlb	0	; () banked
 11300  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11301  000FBC  EC9C  F008         	call	_printf	;wreg free
 11302                           
 11303                           ;Test.c: 271: updateServoPosition(1000, 3);
 11304  000FC0  0E03               	movlw	3
 11305  000FC2  0100               	movlb	0	; () banked
 11306  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11307  000FC6  0EE8               	movlw	232
 11308  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11309  000FCA  0E00               	movlw	0
 11310  000FCC  0100               	movlb	0	; () banked
 11311  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11312  000FD0  0E03               	movlw	3
 11313  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11314  000FD4  ECD6  F01A         	call	_updateServoPosition	;wreg free
 11315                           
 11316                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11317  000FD8  0E00               	movlw	0
 11318  000FDA  0100               	movlb	0	; () banked
 11319  000FDC  6FBE               	movwf	actuatorTest@i_1592& (0+255),b
 11320  000FDE                     l6597:
 11321                           
 11322                           ; BSR set to: 0
 11323  000FDE  0E63               	movlw	99
 11324  000FE0  0100               	movlb	0	; () banked
 11325  000FE2  65BE               	cpfsgt	actuatorTest@i_1592& (0+255),b
 11326  000FE4  D001               	goto	l6601
 11327  000FE6  D00C               	goto	l6605
 11328  000FE8                     l6601:
 11329                           
 11330                           ; BSR set to: 0
 11331  000FE8  0E68               	movlw	104
 11332  000FEA  0100               	movlb	0	; () banked
 11333  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11334  000FEE  0EE4               	movlw	228
 11335  000FF0                     u7367:
 11336  000FF0  2EE8               	decfsz	wreg,f,c
 11337  000FF2  D7FE               	bra	u7367
 11338  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11339  000FF6  D7FC               	bra	u7367
 11340  000FF8  F000               	nop	
 11341  000FFA  0100               	movlb	0	; () banked
 11342  000FFC  2BBE               	incf	actuatorTest@i_1592& (0+255),f,b
 11343  000FFE  D7EF               	goto	l6597
 11344  001000                     l6605:
 11345                           
 11346                           ; BSR set to: 0
 11347  001000  0E00               	movlw	0
 11348  001002  0100               	movlb	0	; () banked
 11349  001004  6FBF               	movwf	actuatorTest@i_1593& (0+255),b
 11350  001006                     l6607:
 11351                           
 11352                           ; BSR set to: 0
 11353  001006  0E63               	movlw	99
 11354  001008  0100               	movlb	0	; () banked
 11355  00100A  65BF               	cpfsgt	actuatorTest@i_1593& (0+255),b
 11356  00100C  D001               	goto	l6611
 11357  00100E  D00C               	goto	l1096
 11358  001010                     l6611:
 11359                           
 11360                           ; BSR set to: 0
 11361  001010  0E68               	movlw	104
 11362  001012  0100               	movlb	0	; () banked
 11363  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11364  001016  0EE4               	movlw	228
 11365  001018                     u7377:
 11366  001018  2EE8               	decfsz	wreg,f,c
 11367  00101A  D7FE               	bra	u7377
 11368  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11369  00101E  D7FC               	bra	u7377
 11370  001020  F000               	nop	
 11371  001022  0100               	movlb	0	; () banked
 11372  001024  2BBF               	incf	actuatorTest@i_1593& (0+255),f,b
 11373  001026  D7EF               	goto	l6607
 11374  001028                     l1096:
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;Test.c: 274: TMR3ON = 0;
 11378  001028  90B1               	bcf	4017,0,c	;volatile
 11379                           
 11380                           ;Test.c: 275: (INTCONbits.GIE = 0);
 11381  00102A  9EF2               	bcf	intcon,7,c	;volatile
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;Test.c: 280: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11385  00102C  0E01               	movlw	1
 11386  00102E  EC66  F020         	call	_lcdInst
 11387  001032  0E68               	movlw	104
 11388  001034  0100               	movlb	0	; () banked
 11389  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 11390  001038  0EE4               	movlw	228
 11391  00103A                     u7387:
 11392  00103A  2EE8               	decfsz	wreg,f,c
 11393  00103C  D7FE               	bra	u7387
 11394  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11395  001040  D7FC               	bra	u7387
 11396  001042  F000               	nop	
 11397  001044  0E80               	movlw	128
 11398  001046  EC66  F020         	call	_lcdInst
 11399                           
 11400                           ;Test.c: 281: printf("TST: CAM SERVO");
 11401  00104A  0EB3               	movlw	low STR_102
 11402  00104C  0100               	movlb	0	; () banked
 11403  00104E  6F8E               	movwf	printf@f& (0+255),b
 11404  001050  0EFE               	movlw	high STR_102
 11405  001052  0100               	movlb	0	; () banked
 11406  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 11407  001056  EC9C  F008         	call	_printf	;wreg free
 11408                           
 11409                           ;Test.c: 282: lcdInst(0b11000000);;
 11410  00105A  0EC0               	movlw	192
 11411  00105C  EC66  F020         	call	_lcdInst
 11412                           
 11413                           ;Test.c: 283: printf("CAM UP  |RC0=1");
 11414  001060  0E95               	movlw	low STR_103
 11415  001062  0100               	movlb	0	; () banked
 11416  001064  6F8E               	movwf	printf@f& (0+255),b
 11417  001066  0EFE               	movlw	high STR_103
 11418  001068  0100               	movlb	0	; () banked
 11419  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11420  00106C  EC9C  F008         	call	_printf	;wreg free
 11421                           
 11422                           ;Test.c: 284: LATCbits.LATC0 = 0;
 11423  001070  908B               	bcf	3979,0,c	;volatile
 11424                           
 11425                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11426  001072  0E00               	movlw	0
 11427  001074  0100               	movlb	0	; () banked
 11428  001076  6FC0               	movwf	actuatorTest@i_1596& (0+255),b
 11429  001078                     l6631:
 11430                           
 11431                           ; BSR set to: 0
 11432  001078  0E63               	movlw	99
 11433  00107A  0100               	movlb	0	; () banked
 11434  00107C  65C0               	cpfsgt	actuatorTest@i_1596& (0+255),b
 11435  00107E  D001               	goto	l6635
 11436  001080  D00C               	goto	l6639
 11437  001082                     l6635:
 11438                           
 11439                           ; BSR set to: 0
 11440  001082  0E68               	movlw	104
 11441  001084  0100               	movlb	0	; () banked
 11442  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 11443  001088  0EE4               	movlw	228
 11444  00108A                     u7397:
 11445  00108A  2EE8               	decfsz	wreg,f,c
 11446  00108C  D7FE               	bra	u7397
 11447  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11448  001090  D7FC               	bra	u7397
 11449  001092  F000               	nop	
 11450  001094  0100               	movlb	0	; () banked
 11451  001096  2BC0               	incf	actuatorTest@i_1596& (0+255),f,b
 11452  001098  D7EF               	goto	l6631
 11453  00109A                     l6639:
 11454                           
 11455                           ; BSR set to: 0
 11456  00109A  0E00               	movlw	0
 11457  00109C  0100               	movlb	0	; () banked
 11458  00109E  6FC1               	movwf	actuatorTest@i_1597& (0+255),b
 11459  0010A0                     l6641:
 11460                           
 11461                           ; BSR set to: 0
 11462  0010A0  0E63               	movlw	99
 11463  0010A2  0100               	movlb	0	; () banked
 11464  0010A4  65C1               	cpfsgt	actuatorTest@i_1597& (0+255),b
 11465  0010A6  D001               	goto	l6645
 11466  0010A8  D00C               	goto	l6649
 11467  0010AA                     l6645:
 11468                           
 11469                           ; BSR set to: 0
 11470  0010AA  0E68               	movlw	104
 11471  0010AC  0100               	movlb	0	; () banked
 11472  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11473  0010B0  0EE4               	movlw	228
 11474  0010B2                     u7407:
 11475  0010B2  2EE8               	decfsz	wreg,f,c
 11476  0010B4  D7FE               	bra	u7407
 11477  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11478  0010B8  D7FC               	bra	u7407
 11479  0010BA  F000               	nop	
 11480  0010BC  0100               	movlb	0	; () banked
 11481  0010BE  2BC1               	incf	actuatorTest@i_1597& (0+255),f,b
 11482  0010C0  D7EF               	goto	l6641
 11483  0010C2                     l6649:
 11484                           
 11485                           ; BSR set to: 0
 11486                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11487  0010C2  0E80               	movlw	128
 11488  0010C4  EC66  F020         	call	_lcdInst
 11489  0010C8  0EC0               	movlw	192
 11490  0010CA  EC66  F020         	call	_lcdInst
 11491                           
 11492                           ;Test.c: 287: LATCbits.LATC0 = 1;
 11493  0010CE  808B               	bsf	3979,0,c	;volatile
 11494                           
 11495                           ;Test.c: 288: printf("CAM DWN |RC0=0");
 11496  0010D0  0E86               	movlw	low STR_104
 11497  0010D2  0100               	movlb	0	; () banked
 11498  0010D4  6F8E               	movwf	printf@f& (0+255),b
 11499  0010D6  0EFE               	movlw	high STR_104
 11500  0010D8  0100               	movlb	0	; () banked
 11501  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11502  0010DC  EC9C  F008         	call	_printf	;wreg free
 11503                           
 11504                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11505  0010E0  0E00               	movlw	0
 11506  0010E2  0100               	movlb	0	; () banked
 11507  0010E4  6FC2               	movwf	actuatorTest@i_1599& (0+255),b
 11508  0010E6                     l6657:
 11509                           
 11510                           ; BSR set to: 0
 11511  0010E6  0E63               	movlw	99
 11512  0010E8  0100               	movlb	0	; () banked
 11513  0010EA  65C2               	cpfsgt	actuatorTest@i_1599& (0+255),b
 11514  0010EC  D001               	goto	l6661
 11515  0010EE  D00C               	goto	l6665
 11516  0010F0                     l6661:
 11517                           
 11518                           ; BSR set to: 0
 11519  0010F0  0E68               	movlw	104
 11520  0010F2  0100               	movlb	0	; () banked
 11521  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11522  0010F6  0EE4               	movlw	228
 11523  0010F8                     u7417:
 11524  0010F8  2EE8               	decfsz	wreg,f,c
 11525  0010FA  D7FE               	bra	u7417
 11526  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11527  0010FE  D7FC               	bra	u7417
 11528  001100  F000               	nop	
 11529  001102  0100               	movlb	0	; () banked
 11530  001104  2BC2               	incf	actuatorTest@i_1599& (0+255),f,b
 11531  001106  D7EF               	goto	l6657
 11532  001108                     l6665:
 11533                           
 11534                           ; BSR set to: 0
 11535  001108  0E00               	movlw	0
 11536  00110A  0100               	movlb	0	; () banked
 11537  00110C  6FC3               	movwf	actuatorTest@i_1600& (0+255),b
 11538  00110E                     l6667:
 11539                           
 11540                           ; BSR set to: 0
 11541  00110E  0E63               	movlw	99
 11542  001110  0100               	movlb	0	; () banked
 11543  001112  65C3               	cpfsgt	actuatorTest@i_1600& (0+255),b
 11544  001114  D001               	goto	l6671
 11545  001116  D00C               	goto	l6675
 11546  001118                     l6671:
 11547                           
 11548                           ; BSR set to: 0
 11549  001118  0E68               	movlw	104
 11550  00111A  0100               	movlb	0	; () banked
 11551  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11552  00111E  0EE4               	movlw	228
 11553  001120                     u7427:
 11554  001120  2EE8               	decfsz	wreg,f,c
 11555  001122  D7FE               	bra	u7427
 11556  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11557  001126  D7FC               	bra	u7427
 11558  001128  F000               	nop	
 11559  00112A  0100               	movlb	0	; () banked
 11560  00112C  2BC3               	incf	actuatorTest@i_1600& (0+255),f,b
 11561  00112E  D7EF               	goto	l6667
 11562  001130                     l6675:
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;Test.c: 290: machine_state = Testing_state;
 11566  001130  0E03               	movlw	3
 11567  001132  0100               	movlb	0	; () banked
 11568  001134  6FFC               	movwf	_machine_state& (0+255),b
 11569                           
 11570                           ; BSR set to: 0
 11571  001136  0012               	return		;funcret
 11572  001138                     __end_of_actuatorTest:
 11573                           	opt stack 0
 11574                           tblptru	equ	0xFF8
 11575                           tblptrh	equ	0xFF7
 11576                           tblptrl	equ	0xFF6
 11577                           tablat	equ	0xFF5
 11578                           prodh	equ	0xFF4
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           intcon2	equ	0xFF1
 11582                           intcon3	equ	0xFF0
 11583                           postinc0	equ	0xFEE
 11584                           wreg	equ	0xFE8
 11585                           postdec1	equ	0xFE5
 11586                           fsr1l	equ	0xFE1
 11587                           indf2	equ	0xFDF
 11588                           postinc2	equ	0xFDE
 11589                           postdec2	equ	0xFDD
 11590                           fsr2h	equ	0xFDA
 11591                           fsr2l	equ	0xFD9
 11592                           status	equ	0xFD8
 11593                           
 11594 ;; *************** function _updateServoPosition *****************
 11595 ;; Defined at:
 11596 ;;		line 298 in file "sort.c"
 11597 ;; Parameters:    Size  Location     Type
 11598 ;;  time_us         2    0[BANK0 ] int 
 11599 ;;  timer           2    2[BANK0 ] int 
 11600 ;; Auto vars:     Size  Location     Type
 11601 ;;  my_time         2    6[BANK0 ] unsigned int 
 11602 ;; Return value:  Size  Location     Type
 11603 ;;                  1    wreg      void 
 11604 ;; Registers used:
 11605 ;;		wreg, status,2, status,0
 11606 ;; Tracked objects:
 11607 ;;		On entry : 0/0
 11608 ;;		On exit  : 0/0
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11611 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;Total ram usage:        8 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; Hardware stack levels required when called:    7
 11618 ;; This function calls:
 11619 ;;		Nothing
 11620 ;; This function is called by:
 11621 ;;		_Distribution
 11622 ;;		_initServos
 11623 ;;		_actuatorTest
 11624 ;; This function uses a non-reentrant model
 11625 ;;
 11626                           
 11627                           	psect	text41
 11628  0035AC                     __ptext41:
 11629                           	opt stack 0
 11630  0035AC                     _updateServoPosition:
 11631                           	opt stack 20
 11632                           
 11633                           ;sort.c: 299: unsigned int my_time = 65535 - time_us;
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;incstack = 0
 11637  0035AC  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 11638  0035B0  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 11639  0035B4  0100               	movlb	0	; () banked
 11640  0035B6  1F84               	comf	??_updateServoPosition& (0+255),f,b
 11641  0035B8  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 11642  0035BA  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 11643  0035BC  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 11644  0035BE  0EFF               	movlw	255
 11645  0035C0  0100               	movlb	0	; () banked
 11646  0035C2  2584               	addwf	??_updateServoPosition& (0+255),w,b
 11647  0035C4  0100               	movlb	0	; () banked
 11648  0035C6  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 11649  0035C8  0EFF               	movlw	255
 11650  0035CA  0100               	movlb	0	; () banked
 11651  0035CC  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 11652  0035CE  0100               	movlb	0	; () banked
 11653  0035D0  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 11654                           
 11655                           ;sort.c: 300: switch(timer){
 11656  0035D2  D015               	goto	l5293
 11657  0035D4                     l5291:
 11658                           
 11659                           ; BSR set to: 0
 11660                           ;sort.c: 302: servoTimes[0] = my_time >> 8;
 11661  0035D4  0100               	movlb	0	; () banked
 11662  0035D6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11663  0035D8  0101               	movlb	1	; () banked
 11664  0035DA  6F1C               	movwf	_servoTimes& (0+255),b
 11665  0035DC  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 11666                           
 11667                           ;sort.c: 303: servoTimes[1] = my_time & 0xFF;
 11668  0035DE  0100               	movlb	0	; () banked
 11669  0035E0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11670  0035E2  0101               	movlb	1	; () banked
 11671  0035E4  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 11672  0035E6  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 11673  0035E8                     l773:
 11674                           
 11675                           ;sort.c: 305: servoTimes[2] = my_time >> 8;
 11676  0035E8  0100               	movlb	0	; () banked
 11677  0035EA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11678  0035EC  0101               	movlb	1	; () banked
 11679  0035EE  6F20               	movwf	(_servoTimes+4)& (0+255),b
 11680  0035F0  6B21               	clrf	(_servoTimes+5)& (0+255),b
 11681                           
 11682                           ;sort.c: 306: servoTimes[3] = my_time & 0xFF;
 11683  0035F2  0100               	movlb	0	; () banked
 11684  0035F4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11685  0035F6  0101               	movlb	1	; () banked
 11686  0035F8  6F22               	movwf	(_servoTimes+6)& (0+255),b
 11687  0035FA  6B23               	clrf	(_servoTimes+7)& (0+255),b
 11688                           
 11689                           ;sort.c: 307: }
 11690  0035FC  0012               	return	
 11691  0035FE                     l5293:
 11692  0035FE  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 11693  003602  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 11694                           
 11695                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11696                           ; Switch size 1, requested type "space"
 11697                           ; Number of cases is 1, Range of values is 0 to 0
 11698                           ; switch strategies available:
 11699                           ; Name         Instructions Cycles
 11700                           ; simple_byte            4     3 (average)
 11701                           ;	Chosen strategy is simple_byte
 11702  003606  0100               	movlb	0	; () banked
 11703  003608  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 11704  00360A  0A00               	xorlw	0	; case 0
 11705  00360C  A4D8               	btfss	status,2,c
 11706  00360E  0012               	return	
 11707                           
 11708                           ; BSR set to: 0
 11709                           ; Switch size 1, requested type "space"
 11710                           ; Number of cases is 2, Range of values is 1 to 3
 11711                           ; switch strategies available:
 11712                           ; Name         Instructions Cycles
 11713                           ; simple_byte            7     4 (average)
 11714                           ;	Chosen strategy is simple_byte
 11715  003610  0100               	movlb	0	; () banked
 11716  003612  5184               	movf	??_updateServoPosition& (0+255),w,b
 11717  003614  0A01               	xorlw	1	; case 1
 11718  003616  B4D8               	btfsc	status,2,c
 11719  003618  D7DD               	goto	l5291
 11720  00361A  0A02               	xorlw	2	; case 3
 11721  00361C  A4D8               	btfss	status,2,c
 11722  00361E  0012               	return	
 11723  003620  D7E3               	goto	l773
 11724  003622                     __end_of_updateServoPosition:
 11725                           	opt stack 0
 11726                           tblptru	equ	0xFF8
 11727                           tblptrh	equ	0xFF7
 11728                           tblptrl	equ	0xFF6
 11729                           tablat	equ	0xFF5
 11730                           prodh	equ	0xFF4
 11731                           prodl	equ	0xFF3
 11732                           intcon	equ	0xFF2
 11733                           intcon2	equ	0xFF1
 11734                           intcon3	equ	0xFF0
 11735                           postinc0	equ	0xFEE
 11736                           wreg	equ	0xFE8
 11737                           postdec1	equ	0xFE5
 11738                           fsr1l	equ	0xFE1
 11739                           indf2	equ	0xFDF
 11740                           postinc2	equ	0xFDE
 11741                           postdec2	equ	0xFDD
 11742                           fsr2h	equ	0xFDA
 11743                           fsr2l	equ	0xFD9
 11744                           status	equ	0xFD8
 11745                           
 11746 ;; *************** function _ToggleTestA5 *****************
 11747 ;; Defined at:
 11748 ;;		line 362 in file "Test.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;		None
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;  on              2   44[BANK0 ] int 
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      void 
 11755 ;; Registers used:
 11756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11765 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11766 ;;Total ram usage:        3 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:   10
 11769 ;; This function calls:
 11770 ;;		_lcdInst
 11771 ;;		_printf
 11772 ;; This function is called by:
 11773 ;;		_Test
 11774 ;; This function uses a non-reentrant model
 11775 ;;
 11776                           
 11777                           	psect	text42
 11778  0033A2                     __ptext42:
 11779                           	opt stack 0
 11780  0033A2                     _ToggleTestA5:
 11781                           	opt stack 19
 11782                           
 11783                           ;Test.c: 363: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11784                           
 11785                           ;incstack = 0
 11786  0033A2  0E01               	movlw	1
 11787  0033A4  EC66  F020         	call	_lcdInst
 11788  0033A8  0E68               	movlw	104
 11789  0033AA  0100               	movlb	0	; () banked
 11790  0033AC  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11791  0033AE  0EE4               	movlw	228
 11792  0033B0                     u7437:
 11793  0033B0  2EE8               	decfsz	wreg,f,c
 11794  0033B2  D7FE               	bra	u7437
 11795  0033B4  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11796  0033B6  D7FC               	bra	u7437
 11797  0033B8  F000               	nop	
 11798  0033BA  0E80               	movlw	128
 11799  0033BC  EC66  F020         	call	_lcdInst
 11800                           
 11801                           ;Test.c: 364: printf("D WILL RETURN   ");
 11802  0033C0  0E6B               	movlw	low STR_107
 11803  0033C2  0100               	movlb	0	; () banked
 11804  0033C4  6F8E               	movwf	printf@f& (0+255),b
 11805  0033C6  0EFC               	movlw	high STR_107
 11806  0033C8  0100               	movlb	0	; () banked
 11807  0033CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11808  0033CC  EC9C  F008         	call	_printf	;wreg free
 11809                           
 11810                           ;Test.c: 365: lcdInst(0b11000000);;
 11811  0033D0  0EC0               	movlw	192
 11812  0033D2  EC66  F020         	call	_lcdInst
 11813                           
 11814                           ;Test.c: 366: printf("ELSE TOGGLES RA5");
 11815  0033D6  0E9E               	movlw	low STR_108
 11816  0033D8  0100               	movlb	0	; () banked
 11817  0033DA  6F8E               	movwf	printf@f& (0+255),b
 11818  0033DC  0EFC               	movlw	high STR_108
 11819  0033DE  0100               	movlb	0	; () banked
 11820  0033E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11821  0033E2  EC9C  F008         	call	_printf	;wreg free
 11822                           
 11823                           ;Test.c: 367: int on = 0;
 11824  0033E6  0E00               	movlw	0
 11825  0033E8  0100               	movlb	0	; () banked
 11826  0033EA  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11827  0033EC  0E00               	movlw	0
 11828  0033EE  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11829  0033F0                     l1144:
 11830  0033F0  A281               	btfss	3969,1,c	;volatile
 11831  0033F2  D7FE               	goto	l1144
 11832                           
 11833                           ;Test.c: 372: }
 11834                           ;Test.c: 373: if(PORTB >> 4 == 0b1111){
 11835  0033F4  3881               	swapf	3969,w,c	;volatile
 11836  0033F6  0B0F               	andlw	15
 11837  0033F8  0A0F               	xorlw	15
 11838  0033FA  B4D8               	btfsc	status,2,c
 11839  0033FC  0012               	return	
 11840                           
 11841                           ;Test.c: 376: else{
 11842                           ;Test.c: 377: if(on == 0){
 11843                           
 11844                           ;Test.c: 375: }
 11845                           
 11846                           ;Test.c: 374: break;
 11847  0033FE  0100               	movlb	0	; () banked
 11848  003400  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11849  003402  0100               	movlb	0	; () banked
 11850  003404  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11851  003406  A4D8               	btfss	status,2,c
 11852  003408  D007               	goto	l6721
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;Test.c: 378: on = 1;
 11856  00340A  0E00               	movlw	0
 11857  00340C  0100               	movlb	0	; () banked
 11858  00340E  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11859  003410  0E01               	movlw	1
 11860  003412  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;Test.c: 379: LATAbits.LATA5 = 1;
 11864  003414  8A89               	bsf	3977,5,c	;volatile
 11865                           
 11866                           ;Test.c: 380: }
 11867  003416  D006               	goto	l1152
 11868  003418                     l6721:
 11869                           
 11870                           ; BSR set to: 0
 11871                           ;Test.c: 381: else{
 11872                           ;Test.c: 382: on = 0;
 11873  003418  0E00               	movlw	0
 11874  00341A  0100               	movlb	0	; () banked
 11875  00341C  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11876  00341E  0E00               	movlw	0
 11877  003420  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;Test.c: 383: LATAbits.LATA5 = 0;
 11881  003422  9A89               	bcf	3977,5,c	;volatile
 11882  003424                     l1152:
 11883  003424  A281               	btfss	3969,1,c	;volatile
 11884  003426  D7E4               	goto	l1144
 11885  003428  D7FD               	goto	l1152
 11886  00342A                     __end_of_ToggleTestA5:
 11887                           	opt stack 0
 11888                           tblptru	equ	0xFF8
 11889                           tblptrh	equ	0xFF7
 11890                           tblptrl	equ	0xFF6
 11891                           tablat	equ	0xFF5
 11892                           prodh	equ	0xFF4
 11893                           prodl	equ	0xFF3
 11894                           intcon	equ	0xFF2
 11895                           intcon2	equ	0xFF1
 11896                           intcon3	equ	0xFF0
 11897                           postinc0	equ	0xFEE
 11898                           wreg	equ	0xFE8
 11899                           postdec1	equ	0xFE5
 11900                           fsr1l	equ	0xFE1
 11901                           indf2	equ	0xFDF
 11902                           postinc2	equ	0xFDE
 11903                           postdec2	equ	0xFDD
 11904                           fsr2h	equ	0xFDA
 11905                           fsr2l	equ	0xFD9
 11906                           status	equ	0xFD8
 11907                           
 11908 ;; *************** function _PortTests *****************
 11909 ;; Defined at:
 11910 ;;		line 293 in file "Test.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;		None
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;		None
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  1    wreg      void 
 11917 ;; Registers used:
 11918 ;;		wreg, status,2, status,0
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11928 ;;Total ram usage:        2 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    7
 11931 ;; This function calls:
 11932 ;;		Nothing
 11933 ;; This function is called by:
 11934 ;;		_Test
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           	psect	text43
 11939  0034B0                     __ptext43:
 11940                           	opt stack 0
 11941  0034B0                     _PortTests:
 11942                           	opt stack 22
 11943  0034B0                     l1109:
 11944  0034B0  A281               	btfss	3969,1,c	;volatile
 11945  0034B2  D7FE               	goto	l1109
 11946                           
 11947                           ;Test.c: 297: var = PORTB >> 4;
 11948  0034B4  CF81 F080          	movff	3969,??_PortTests	;volatile
 11949  0034B8  0100               	movlb	0	; () banked
 11950  0034BA  3B80               	swapf	??_PortTests& (0+255),f,b
 11951  0034BC  0E0F               	movlw	15
 11952  0034BE  1780               	andwf	??_PortTests& (0+255),f,b
 11953  0034C0  0100               	movlb	0	; () banked
 11954  0034C2  5180               	movf	??_PortTests& (0+255),w,b
 11955  0034C4  0100               	movlb	0	; () banked
 11956  0034C6  6FFA               	movwf	_var& (0+255),b
 11957  0034C8  6BFB               	clrf	(_var+1)& (0+255),b
 11958                           
 11959                           ;Test.c: 298: switch(var){
 11960  0034CA  D00C               	goto	l6729
 11961  0034CC                     l1113:
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;Test.c: 300: LATEbits.LATE0 = 1;
 11965  0034CC  808D               	bsf	3981,0,c	;volatile
 11966                           
 11967                           ;Test.c: 301: break;
 11968  0034CE  D027               	goto	l1121
 11969  0034D0                     l1115:
 11970                           
 11971                           ; BSR set to: 0
 11972                           ;Test.c: 303: LATEbits.LATE1 = 1;
 11973  0034D0  828D               	bsf	3981,1,c	;volatile
 11974                           
 11975                           ;Test.c: 304: break;
 11976  0034D2  D025               	goto	l1121
 11977  0034D4                     l1116:
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;Test.c: 306: LATDbits.LATD0 = 1;
 11981  0034D4  808C               	bsf	3980,0,c	;volatile
 11982                           
 11983                           ;Test.c: 307: break;
 11984  0034D6  D023               	goto	l1121
 11985  0034D8                     l1117:
 11986                           
 11987                           ; BSR set to: 0
 11988                           ;Test.c: 309: LATAbits.LATA3 = 1;
 11989  0034D8  8689               	bsf	3977,3,c	;volatile
 11990                           
 11991                           ;Test.c: 310: break;
 11992  0034DA  D021               	goto	l1121
 11993  0034DC                     l1118:
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;Test.c: 312: LATAbits.LATA4 = 1;
 11997  0034DC  8889               	bsf	3977,4,c	;volatile
 11998                           
 11999                           ;Test.c: 313: break;
 12000  0034DE  D01F               	goto	l1121
 12001  0034E0                     l1119:
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;Test.c: 315: LATAbits.LATA5 = 1;
 12005  0034E0  8A89               	bsf	3977,5,c	;volatile
 12006                           
 12007                           ; BSR set to: 0
 12008                           ;Test.c: 319: }
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;Test.c: 318: break;
 12012                           
 12013                           ;Test.c: 317: default:
 12014                           
 12015                           ;Test.c: 316: break;
 12016  0034E2  D01D               	goto	l1121
 12017  0034E4                     l6729:
 12018                           
 12019                           ; BSR set to: 0
 12020  0034E4  C0FA  F080         	movff	_var,??_PortTests
 12021  0034E8  C0FB  F081         	movff	_var+1,??_PortTests+1
 12022                           
 12023                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12024                           ; Switch size 1, requested type "space"
 12025                           ; Number of cases is 1, Range of values is 0 to 0
 12026                           ; switch strategies available:
 12027                           ; Name         Instructions Cycles
 12028                           ; simple_byte            4     3 (average)
 12029                           ;	Chosen strategy is simple_byte
 12030  0034EC  0100               	movlb	0	; () banked
 12031  0034EE  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12032  0034F0  0A00               	xorlw	0	; case 0
 12033  0034F2  A4D8               	btfss	status,2,c
 12034  0034F4  D014               	goto	l1121
 12035                           
 12036                           ; BSR set to: 0
 12037                           ; Switch size 1, requested type "space"
 12038                           ; Number of cases is 6, Range of values is 0 to 5
 12039                           ; switch strategies available:
 12040                           ; Name         Instructions Cycles
 12041                           ; simple_byte           19    10 (average)
 12042                           ;	Chosen strategy is simple_byte
 12043  0034F6  0100               	movlb	0	; () banked
 12044  0034F8  5180               	movf	??_PortTests& (0+255),w,b
 12045  0034FA  0A00               	xorlw	0	; case 0
 12046  0034FC  B4D8               	btfsc	status,2,c
 12047  0034FE  D7E6               	goto	l1113
 12048  003500  0A01               	xorlw	1	; case 1
 12049  003502  B4D8               	btfsc	status,2,c
 12050  003504  D7E5               	goto	l1115
 12051  003506  0A03               	xorlw	3	; case 2
 12052  003508  B4D8               	btfsc	status,2,c
 12053  00350A  D7E4               	goto	l1116
 12054  00350C  0A01               	xorlw	1	; case 3
 12055  00350E  B4D8               	btfsc	status,2,c
 12056  003510  D7E3               	goto	l1117
 12057  003512  0A07               	xorlw	7	; case 4
 12058  003514  B4D8               	btfsc	status,2,c
 12059  003516  D7E2               	goto	l1118
 12060  003518  0A01               	xorlw	1	; case 5
 12061  00351A  B4D8               	btfsc	status,2,c
 12062  00351C  D7E1               	goto	l1119
 12063  00351E                     l1121:
 12064  00351E  B281               	btfsc	3969,1,c	;volatile
 12065  003520  D7FE               	goto	l1121
 12066                           
 12067                           ;Test.c: 321: __nop();
 12068  003522  F000               	nop	
 12069                           
 12070                           ;Test.c: 322: __nop();
 12071  003524  F000               	nop	
 12072                           
 12073                           ;Test.c: 323: LATA = 0x00;
 12074  003526  0E00               	movlw	0
 12075  003528  6E89               	movwf	3977,c	;volatile
 12076                           
 12077                           ;Test.c: 324: LATE = 0x00;
 12078  00352A  0E00               	movlw	0
 12079  00352C  6E8D               	movwf	3981,c	;volatile
 12080                           
 12081                           ;Test.c: 325: LATD = 0x00; }
 12082  00352E  0E00               	movlw	0
 12083  003530  6E8C               	movwf	3980,c	;volatile
 12084  003532  D7BE               	goto	l1109
 12085  003534                     __end_of_PortTests:
 12086                           	opt stack 0
 12087                           tblptru	equ	0xFF8
 12088                           tblptrh	equ	0xFF7
 12089                           tblptrl	equ	0xFF6
 12090                           tablat	equ	0xFF5
 12091                           prodh	equ	0xFF4
 12092                           prodl	equ	0xFF3
 12093                           intcon	equ	0xFF2
 12094                           intcon2	equ	0xFF1
 12095                           intcon3	equ	0xFF0
 12096                           postinc0	equ	0xFEE
 12097                           wreg	equ	0xFE8
 12098                           postdec1	equ	0xFE5
 12099                           fsr1l	equ	0xFE1
 12100                           indf2	equ	0xFDF
 12101                           postinc2	equ	0xFDE
 12102                           postdec2	equ	0xFDD
 12103                           fsr2h	equ	0xFDA
 12104                           fsr2l	equ	0xFD9
 12105                           status	equ	0xFD8
 12106                           
 12107 ;; *************** function _PortTestA5 *****************
 12108 ;; Defined at:
 12109 ;;		line 328 in file "Test.c"
 12110 ;; Parameters:    Size  Location     Type
 12111 ;;		None
 12112 ;; Auto vars:     Size  Location     Type
 12113 ;;		None
 12114 ;; Return value:  Size  Location     Type
 12115 ;;                  1    wreg      void 
 12116 ;; Registers used:
 12117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12118 ;; Tracked objects:
 12119 ;;		On entry : 0/0
 12120 ;;		On exit  : 0/0
 12121 ;;		Unchanged: 0/0
 12122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12126 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;Total ram usage:        1 bytes
 12128 ;; Hardware stack levels used:    1
 12129 ;; Hardware stack levels required when called:   10
 12130 ;; This function calls:
 12131 ;;		_lcdInst
 12132 ;;		_printf
 12133 ;; This function is called by:
 12134 ;;		_Test
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           	psect	text44
 12139  003826                     __ptext44:
 12140                           	opt stack 0
 12141  003826                     _PortTestA5:
 12142                           	opt stack 19
 12143                           
 12144                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12145                           
 12146                           ;incstack = 0
 12147  003826  0E01               	movlw	1
 12148  003828  EC66  F020         	call	_lcdInst
 12149  00382C  0E68               	movlw	104
 12150  00382E  0100               	movlb	0	; () banked
 12151  003830  6FAB               	movwf	??_PortTestA5& (0+255),b
 12152  003832  0EE4               	movlw	228
 12153  003834                     u7447:
 12154  003834  2EE8               	decfsz	wreg,f,c
 12155  003836  D7FE               	bra	u7447
 12156  003838  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12157  00383A  D7FC               	bra	u7447
 12158  00383C  F000               	nop	
 12159  00383E  0E80               	movlw	128
 12160  003840  EC66  F020         	call	_lcdInst
 12161                           
 12162                           ;Test.c: 330: printf("D WILL RETURN    ");
 12163  003844  0EBD               	movlw	low STR_105
 12164  003846  0100               	movlb	0	; () banked
 12165  003848  6F8E               	movwf	printf@f& (0+255),b
 12166  00384A  0EFB               	movlw	high STR_105
 12167  00384C  0100               	movlb	0	; () banked
 12168  00384E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12169  003850  EC9C  F008         	call	_printf	;wreg free
 12170                           
 12171                           ;Test.c: 331: lcdInst(0b11000000);;
 12172  003854  0EC0               	movlw	192
 12173  003856  EC66  F020         	call	_lcdInst
 12174                           
 12175                           ;Test.c: 332: printf("OTHER SETS RA5   ");
 12176  00385A  0ECF               	movlw	low STR_106
 12177  00385C  0100               	movlb	0	; () banked
 12178  00385E  6F8E               	movwf	printf@f& (0+255),b
 12179  003860  0EFB               	movlw	high STR_106
 12180  003862  0100               	movlb	0	; () banked
 12181  003864  6F8F               	movwf	(printf@f+1)& (0+255),b
 12182  003866  EC9C  F008         	call	_printf	;wreg free
 12183  00386A                     l1130:
 12184  00386A  A281               	btfss	3969,1,c	;volatile
 12185  00386C  D7FE               	goto	l1130
 12186                           
 12187                           ;Test.c: 337: }
 12188                           ;Test.c: 338: if(PORTB >> 4 == 0b1111){
 12189  00386E  3881               	swapf	3969,w,c	;volatile
 12190  003870  0B0F               	andlw	15
 12191  003872  0A0F               	xorlw	15
 12192  003874  B4D8               	btfsc	status,2,c
 12193  003876  0012               	return	
 12194                           
 12195                           ;Test.c: 341: else{
 12196                           ;Test.c: 342: LATAbits.LATA5 = 1;
 12197                           
 12198                           ;Test.c: 340: }
 12199                           
 12200                           ;Test.c: 339: break;
 12201  003878  8A89               	bsf	3977,5,c	;volatile
 12202  00387A                     l1136:
 12203  00387A  B281               	btfsc	3969,1,c	;volatile
 12204  00387C  D7FE               	goto	l1136
 12205                           
 12206                           ;Test.c: 345: }
 12207                           ;Test.c: 357: LATAbits.LATA5 = 0;
 12208  00387E  9A89               	bcf	3977,5,c	;volatile
 12209  003880  D7F4               	goto	l1130
 12210  003882                     __end_of_PortTestA5:
 12211                           	opt stack 0
 12212                           tblptru	equ	0xFF8
 12213                           tblptrh	equ	0xFF7
 12214                           tblptrl	equ	0xFF6
 12215                           tablat	equ	0xFF5
 12216                           prodh	equ	0xFF4
 12217                           prodl	equ	0xFF3
 12218                           intcon	equ	0xFF2
 12219                           intcon2	equ	0xFF1
 12220                           intcon3	equ	0xFF0
 12221                           postinc0	equ	0xFEE
 12222                           wreg	equ	0xFE8
 12223                           postdec1	equ	0xFE5
 12224                           fsr1l	equ	0xFE1
 12225                           indf2	equ	0xFDF
 12226                           postinc2	equ	0xFDE
 12227                           postdec2	equ	0xFDD
 12228                           fsr2h	equ	0xFDA
 12229                           fsr2l	equ	0xFD9
 12230                           status	equ	0xFD8
 12231                           
 12232 ;; *************** function _printf *****************
 12233 ;; Defined at:
 12234 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12237 ;;		 -> STR_108(17), STR_107(17), STR_106(18), STR_105(18), 
 12238 ;;		 -> STR_104(15), STR_103(15), STR_102(15), STR_101(17), 
 12239 ;;		 -> STR_100(17), STR_99(17), STR_98(16), STR_97(17), 
 12240 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 12241 ;;		 -> STR_92(17), STR_91(15), STR_90(11), STR_89(17), 
 12242 ;;		 -> STR_88(11), STR_87(17), STR_86(14), STR_85(15), 
 12243 ;;		 -> STR_84(14), STR_83(10), STR_82(16), STR_81(15), 
 12244 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 12245 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 12246 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 12247 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 12248 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 12249 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 12250 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 12251 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 12252 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 12253 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 12254 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 12255 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 12256 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 12257 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 12258 ;; Auto vars:     Size  Location     Type
 12259 ;;  tmpval          4    0        struct .
 12260 ;;  width           2   41[BANK0 ] int 
 12261 ;;  val             2   37[BANK0 ] unsigned int 
 12262 ;;  len             2   35[BANK0 ] unsigned int 
 12263 ;;  ap              2   33[BANK0 ] PTR void [1]
 12264 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12265 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 12266 ;;		 -> STR_109(7), count_total(2), printRTC@month(4), UI@month(4), 
 12267 ;;  c               1   40[BANK0 ] char 
 12268 ;;  flag            1   39[BANK0 ] unsigned char 
 12269 ;;  prec            1   30[BANK0 ] char 
 12270 ;; Return value:  Size  Location     Type
 12271 ;;                  2   14[BANK0 ] int 
 12272 ;; Registers used:
 12273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12274 ;; Tracked objects:
 12275 ;;		On entry : 0/0
 12276 ;;		On exit  : 0/0
 12277 ;;		Unchanged: 0/0
 12278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12279 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12280 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12281 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12282 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12283 ;;Total ram usage:       29 bytes
 12284 ;; Hardware stack levels used:    1
 12285 ;; Hardware stack levels required when called:    9
 12286 ;; This function calls:
 12287 ;;		___lwdiv
 12288 ;;		___lwmod
 12289 ;;		___wmul
 12290 ;;		_isdigit
 12291 ;;		_putch
 12292 ;; This function is called by:
 12293 ;;		_UI
 12294 ;;		_change_state_to_menu_start
 12295 ;;		_change_state_to_menu_12
 12296 ;;		_change_state_to_menu_22
 12297 ;;		_printRTC
 12298 ;;		_EEPROM_write
 12299 ;;		_Test
 12300 ;;		_algorithmTest
 12301 ;;		_sensorTest
 12302 ;;		_actuatorTest
 12303 ;;		_PortTestA5
 12304 ;;		_ToggleTestA5
 12305 ;; This function uses a non-reentrant model
 12306 ;;
 12307                           
 12308                           	psect	text45
 12309  001138                     __ptext45:
 12310                           	opt stack 0
 12311  001138                     _printf:
 12312                           	opt stack 18
 12313                           
 12314                           ;doprnt.c: 466: va_list ap;
 12315                           ;doprnt.c: 499: signed char c;
 12316                           ;doprnt.c: 501: int width;
 12317                           ;doprnt.c: 506: signed char prec;
 12318                           ;doprnt.c: 508: unsigned char flag;
 12319                           ;doprnt.c: 523: union {
 12320                           ;doprnt.c: 524: unsigned long vd;
 12321                           ;doprnt.c: 525: double integ;
 12322                           ;doprnt.c: 526: } tmpval;
 12323                           ;doprnt.c: 528: unsigned int val;
 12324                           ;doprnt.c: 529: unsigned len;
 12325                           ;doprnt.c: 530: const char * cp;
 12326                           ;doprnt.c: 533: *ap = __va_start();
 12327                           
 12328                           ;incstack = 0
 12329  001138  0E90               	movlw	low (?_printf+2)
 12330  00113A  0100               	movlb	0	; () banked
 12331  00113C  6FA1               	movwf	printf@ap& (0+255),b
 12332  00113E  0E00               	movlw	high (?_printf+2)
 12333  001140  0100               	movlb	0	; () banked
 12334  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 12335                           
 12336                           ;doprnt.c: 536: while(c = *f++) {
 12337  001144  D205               	goto	l5251
 12338  001146                     l5121:
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;doprnt.c: 538: if(c != '%')
 12342  001146  0E25               	movlw	37
 12343  001148  0100               	movlb	0	; () banked
 12344  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 12345  00114C  B4D8               	btfsc	status,2,c
 12346  00114E  D005               	goto	l5125
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;doprnt.c: 540: {
 12350                           ;doprnt.c: 541: (putch(c) );
 12351  001150  0100               	movlb	0	; () banked
 12352  001152  51A8               	movf	printf@c& (0+255),w,b
 12353  001154  EC5E  F020         	call	_putch
 12354                           
 12355                           ;doprnt.c: 542: continue;
 12356  001158  D1FB               	goto	l5251
 12357  00115A                     l5125:
 12358                           
 12359                           ;doprnt.c: 543: }
 12360                           ;doprnt.c: 546: width = 0;
 12361  00115A  0E00               	movlw	0
 12362  00115C  0100               	movlb	0	; () banked
 12363  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 12364  001160  0E00               	movlw	0
 12365  001162  6FA9               	movwf	printf@width& (0+255),b
 12366                           
 12367                           ;doprnt.c: 548: flag = 0;
 12368  001164  0E00               	movlw	0
 12369  001166  0100               	movlb	0	; () banked
 12370  001168  6FA7               	movwf	printf@flag& (0+255),b
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;doprnt.c: 551: switch(*f) {
 12374                           
 12375                           ;doprnt.c: 550: for(;;) {
 12376  00116A  D005               	goto	l5131
 12377  00116C                     l5127:
 12378                           
 12379                           ;doprnt.c: 580: flag |= 0x04;
 12380  00116C  0100               	movlb	0	; () banked
 12381  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 12382                           
 12383                           ;doprnt.c: 581: f++;
 12384  001170  0100               	movlb	0	; () banked
 12385  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 12386  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12387  001176                     l5131:
 12388  001176  C08E  FFF6         	movff	printf@f,tblptrl
 12389  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 12390  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12391  00117E  6AF8               	clrf	tblptru,c
 12392  001180                     	endif
 12393  001180                     	if	0	;tblptru may be non-zero
 12394  001180                     	endif
 12395  001180  0008               	tblrd		*
 12396  001182  50F5               	movf	tablat,w,c
 12397                           
 12398                           ; Switch size 1, requested type "space"
 12399                           ; Number of cases is 1, Range of values is 48 to 48
 12400                           ; switch strategies available:
 12401                           ; Name         Instructions Cycles
 12402                           ; simple_byte            4     3 (average)
 12403                           ;	Chosen strategy is simple_byte
 12404  001184  0A30               	xorlw	48	; case 48
 12405  001186  B4D8               	btfsc	status,2,c
 12406  001188  D7F1               	goto	l5127
 12407                           
 12408                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12409                           
 12410                           ;doprnt.c: 586: }
 12411                           
 12412                           ;doprnt.c: 585: break;
 12413  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 12414  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 12415  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12416  001192  6AF8               	clrf	tblptru,c
 12417  001194                     	endif
 12418  001194                     	if	0	;tblptru may be non-zero
 12419  001194                     	endif
 12420  001194  0008               	tblrd		*
 12421  001196  50F5               	movf	tablat,w,c
 12422  001198  EC85  F01F         	call	_isdigit
 12423  00119C  A0D8               	btfss	status,0,c
 12424  00119E  D0D2               	goto	l5179
 12425                           
 12426                           ;doprnt.c: 598: width = 0;
 12427  0011A0  0E00               	movlw	0
 12428  0011A2  0100               	movlb	0	; () banked
 12429  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 12430  0011A6  0E00               	movlw	0
 12431  0011A8  6FA9               	movwf	printf@width& (0+255),b
 12432  0011AA                     l5137:
 12433                           
 12434                           ;doprnt.c: 600: width *= 10;
 12435  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 12436  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 12437  0011B2  0E00               	movlw	0
 12438  0011B4  0100               	movlb	0	; () banked
 12439  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12440  0011B8  0E0A               	movlw	10
 12441  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 12442  0011BC  EC1F  F01E         	call	___wmul	;wreg free
 12443  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 12444  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 12445                           
 12446                           ;doprnt.c: 601: width += *f++ - '0';
 12447  0011C8  0ED0               	movlw	208
 12448  0011CA  0100               	movlb	0	; () banked
 12449  0011CC  6F9A               	movwf	??_printf& (0+255),b
 12450  0011CE  0EFF               	movlw	255
 12451  0011D0  0100               	movlb	0	; () banked
 12452  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 12453  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 12454  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 12455  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12456  0011DC  6AF8               	clrf	tblptru,c
 12457  0011DE                     	endif
 12458  0011DE                     	if	0	;tblptru may be non-zero
 12459  0011DE                     	endif
 12460  0011DE  0008               	tblrd		*
 12461  0011E0  50F5               	movf	tablat,w,c
 12462  0011E2  0100               	movlb	0	; () banked
 12463  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 12464  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 12465  0011E8  0100               	movlb	0	; () banked
 12466  0011EA  519A               	movf	??_printf& (0+255),w,b
 12467  0011EC  0100               	movlb	0	; () banked
 12468  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 12469  0011F0  0100               	movlb	0	; () banked
 12470  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 12471  0011F4  0100               	movlb	0	; () banked
 12472  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 12473  0011F8  0100               	movlb	0	; () banked
 12474  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 12475  0011FC  0100               	movlb	0	; () banked
 12476  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 12477  001200  0100               	movlb	0	; () banked
 12478  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 12479  001204  0100               	movlb	0	; () banked
 12480  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 12481                           
 12482                           ; BSR set to: 0
 12483  001208  0100               	movlb	0	; () banked
 12484  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 12485  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12489  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 12490  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 12491  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12492  001216  6AF8               	clrf	tblptru,c
 12493  001218                     	endif
 12494  001218                     	if	0	;tblptru may be non-zero
 12495  001218                     	endif
 12496  001218  0008               	tblrd		*
 12497  00121A  50F5               	movf	tablat,w,c
 12498  00121C  EC85  F01F         	call	_isdigit
 12499  001220  A0D8               	btfss	status,0,c
 12500  001222  D090               	goto	l5179
 12501  001224  D7C2               	goto	l5137
 12502  001226                     l5145:
 12503                           
 12504                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12505  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 12506  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12507  00122E  CFDE F09F          	movff	postinc2,printf@cp
 12508  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 12509  001236  0E02               	movlw	2
 12510  001238  0100               	movlb	0	; () banked
 12511  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 12512  00123C  0E00               	movlw	0
 12513  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;doprnt.c: 740: if(!cp)
 12517  001240  0100               	movlb	0	; () banked
 12518  001242  519F               	movf	printf@cp& (0+255),w,b
 12519  001244  0100               	movlb	0	; () banked
 12520  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 12521  001248  A4D8               	btfss	status,2,c
 12522  00124A  D006               	goto	l5153
 12523                           
 12524                           ; BSR set to: 0
 12525                           ;doprnt.c: 741: cp = "(null)";
 12526  00124C  0EB5               	movlw	low STR_109
 12527  00124E  0100               	movlb	0	; () banked
 12528  001250  6F9F               	movwf	printf@cp& (0+255),b
 12529  001252  0EFF               	movlw	high STR_109
 12530  001254  0100               	movlb	0	; () banked
 12531  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 12532  001258                     l5153:
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;doprnt.c: 745: len = 0;
 12536  001258  0E00               	movlw	0
 12537  00125A  0100               	movlb	0	; () banked
 12538  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 12539  00125E  0E00               	movlw	0
 12540  001260  6FA3               	movwf	printf@len& (0+255),b
 12541                           
 12542                           ;doprnt.c: 746: while(cp[len])
 12543  001262  D003               	goto	l5157
 12544  001264                     l5155:
 12545                           
 12546                           ;doprnt.c: 747: len++;
 12547  001264  0100               	movlb	0	; () banked
 12548  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 12549  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 12550  00126A                     l5157:
 12551                           
 12552                           ; BSR set to: 0
 12553  00126A  0100               	movlb	0	; () banked
 12554  00126C  51A3               	movf	printf@len& (0+255),w,b
 12555  00126E  0100               	movlb	0	; () banked
 12556  001270  259F               	addwf	printf@cp& (0+255),w,b
 12557  001272  0100               	movlb	0	; () banked
 12558  001274  6F9A               	movwf	??_printf& (0+255),b
 12559  001276  0100               	movlb	0	; () banked
 12560  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 12561  00127A  0100               	movlb	0	; () banked
 12562  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 12563  00127E  0100               	movlb	0	; () banked
 12564  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 12565  001282  C09A  FFF6         	movff	??_printf,tblptrl
 12566  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 12567  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 12568  00128C  6EF8               	movwf	tblptru,c
 12569  00128E  0E0F               	movlw	(high __ramtop+-1)
 12570  001290  64F7               	cpfsgt	tblptrh,c
 12571  001292  D003               	bra	u3617
 12572  001294  0008               	tblrd		*
 12573  001296  50F5               	movf	tablat,w,c
 12574  001298  D005               	bra	u3610
 12575  00129A                     u3617:
 12576  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12577  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12578  0012A2  50EF               	movf	indf0,w,c
 12579  0012A4                     u3610:
 12580  0012A4  0900               	iorlw	0
 12581  0012A6  A4D8               	btfss	status,2,c
 12582  0012A8  D7DD               	goto	l5155
 12583                           
 12584                           ;doprnt.c: 757: if(width > len)
 12585  0012AA  0100               	movlb	0	; () banked
 12586  0012AC  51A9               	movf	printf@width& (0+255),w,b
 12587  0012AE  0100               	movlb	0	; () banked
 12588  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 12589  0012B2  0100               	movlb	0	; () banked
 12590  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 12591  0012B6  0100               	movlb	0	; () banked
 12592  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 12593  0012BA  B0D8               	btfsc	status,0,c
 12594  0012BC  D009               	goto	l5163
 12595                           
 12596                           ; BSR set to: 0
 12597                           ;doprnt.c: 758: width -= len;
 12598  0012BE  0100               	movlb	0	; () banked
 12599  0012C0  51A3               	movf	printf@len& (0+255),w,b
 12600  0012C2  0100               	movlb	0	; () banked
 12601  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 12602  0012C6  0100               	movlb	0	; () banked
 12603  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 12604  0012CA  0100               	movlb	0	; () banked
 12605  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12606  0012CE  D009               	goto	l5167
 12607  0012D0                     l5163:
 12608                           
 12609                           ; BSR set to: 0
 12610                           ;doprnt.c: 759: else
 12611                           ;doprnt.c: 760: width = 0;
 12612  0012D0  0E00               	movlw	0
 12613  0012D2  0100               	movlb	0	; () banked
 12614  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 12615  0012D6  0E00               	movlw	0
 12616  0012D8  6FA9               	movwf	printf@width& (0+255),b
 12617                           
 12618                           ; BSR set to: 0
 12619                           ;doprnt.c: 764: while(width--)
 12620  0012DA  D003               	goto	l5167
 12621  0012DC                     l5165:
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;doprnt.c: 765: (putch(' ') );
 12625  0012DC  0E20               	movlw	32
 12626  0012DE  EC5E  F020         	call	_putch
 12627  0012E2                     l5167:
 12628  0012E2  0100               	movlb	0	; () banked
 12629  0012E4  07A9               	decf	printf@width& (0+255),f,b
 12630  0012E6  A0D8               	btfss	status,0,c
 12631  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 12632  0012EA  0100               	movlb	0	; () banked
 12633  0012EC  29A9               	incf	printf@width& (0+255),w,b
 12634  0012EE  E1F6               	bnz	l5165
 12635  0012F0  0100               	movlb	0	; () banked
 12636  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 12637  0012F4  B4D8               	btfsc	status,2,c
 12638  0012F6  D017               	goto	l5173
 12639  0012F8  D7F1               	goto	l5165
 12640  0012FA                     l5169:
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;doprnt.c: 768: (putch(*cp++) );
 12644  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 12645  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 12646  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 12647  001304  6EF8               	movwf	tblptru,c
 12648  001306  0E0F               	movlw	(high __ramtop+-1)
 12649  001308  64F7               	cpfsgt	tblptrh,c
 12650  00130A  D003               	bra	u3657
 12651  00130C  0008               	tblrd		*
 12652  00130E  50F5               	movf	tablat,w,c
 12653  001310  D005               	bra	u3650
 12654  001312                     u3657:
 12655  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 12656  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 12657  00131A  50EF               	movf	indf0,w,c
 12658  00131C                     u3650:
 12659  00131C  EC5E  F020         	call	_putch
 12660  001320  0100               	movlb	0	; () banked
 12661  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 12662  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 12663  001326                     l5173:
 12664                           
 12665                           ; BSR set to: 0
 12666  001326  0100               	movlb	0	; () banked
 12667  001328  07A3               	decf	printf@len& (0+255),f,b
 12668  00132A  A0D8               	btfss	status,0,c
 12669  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 12670  00132E  0100               	movlb	0	; () banked
 12671  001330  29A3               	incf	printf@len& (0+255),w,b
 12672  001332  E1E3               	bnz	l5169
 12673  001334  0100               	movlb	0	; () banked
 12674  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 12675  001338  B4D8               	btfsc	status,2,c
 12676  00133A  D10A               	goto	l5251
 12677  00133C  D7DE               	goto	l5169
 12678  00133E                     l5175:
 12679                           
 12680                           ; BSR set to: 0
 12681                           ;doprnt.c: 818: flag |= 0x40;
 12682  00133E  0100               	movlb	0	; () banked
 12683  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 12684                           
 12685                           ; BSR set to: 0
 12686                           ;doprnt.c: 822: }
 12687                           
 12688                           ;doprnt.c: 819: break;
 12689  001342  D01D               	goto	l1189
 12690  001344                     l5179:
 12691  001344  C08E  FFF6         	movff	printf@f,tblptrl
 12692  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 12693  00134C  0100               	movlb	0	; () banked
 12694  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 12695  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12696  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12697  001352  6AF8               	clrf	tblptru,c
 12698  001354                     	endif
 12699  001354                     	if	0	;tblptru may be non-zero
 12700  001354                     	endif
 12701  001354  0008               	tblrd		*
 12702  001356  CFF5 F0A8          	movff	tablat,printf@c
 12703  00135A  0100               	movlb	0	; () banked
 12704  00135C  51A8               	movf	printf@c& (0+255),w,b
 12705                           
 12706                           ; Switch size 1, requested type "space"
 12707                           ; Number of cases is 5, Range of values is 0 to 117
 12708                           ; switch strategies available:
 12709                           ; Name         Instructions Cycles
 12710                           ; simple_byte           16     9 (average)
 12711                           ;	Chosen strategy is simple_byte
 12712  00135E  0A00               	xorlw	0	; case 0
 12713  001360  B4D8               	btfsc	status,2,c
 12714  001362  0012               	return	
 12715  001364  0A64               	xorlw	100	; case 100
 12716  001366  B4D8               	btfsc	status,2,c
 12717  001368  D00A               	goto	l1189
 12718  00136A  0A0D               	xorlw	13	; case 105
 12719  00136C  B4D8               	btfsc	status,2,c
 12720  00136E  D007               	goto	l1189
 12721  001370  0A1A               	xorlw	26	; case 115
 12722  001372  B4D8               	btfsc	status,2,c
 12723  001374  D758               	goto	l5145
 12724  001376  0A06               	xorlw	6	; case 117
 12725  001378  B4D8               	btfsc	status,2,c
 12726  00137A  D7E1               	goto	l5175
 12727  00137C  D0E9               	goto	l5251
 12728  00137E                     l1189:
 12729                           
 12730                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 12731  00137E  0100               	movlb	0	; () banked
 12732  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 12733  001382  D019               	goto	l5191
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;doprnt.c: 1253: {
 12737                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12738  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 12739  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12740  00138C  CFDE F0A5          	movff	postinc2,printf@val
 12741  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 12742                           
 12743                           ; BSR set to: 0
 12744  001394  0E02               	movlw	2
 12745  001396  0100               	movlb	0	; () banked
 12746  001398  27A1               	addwf	printf@ap& (0+255),f,b
 12747  00139A  0E00               	movlw	0
 12748  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;doprnt.c: 1261: if((int)val < 0) {
 12752  00139E  0100               	movlb	0	; () banked
 12753  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 12754  0013A2  D016               	goto	l5195
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;doprnt.c: 1262: flag |= 0x03;
 12758  0013A4  0E03               	movlw	3
 12759  0013A6  0100               	movlb	0	; () banked
 12760  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;doprnt.c: 1263: val = -val;
 12764  0013AA  0100               	movlb	0	; () banked
 12765  0013AC  6DA5               	negf	printf@val& (0+255),b
 12766  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 12767  0013B0  B0D8               	btfsc	status,0,c
 12768  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 12769                           
 12770                           ; BSR set to: 0
 12771                           ;doprnt.c: 1264: }
 12772                           ;doprnt.c: 1266: }
 12773  0013B4  D00D               	goto	l5195
 12774  0013B6                     l5191:
 12775                           
 12776                           ; BSR set to: 0
 12777                           ;doprnt.c: 1268: else
 12778                           ;doprnt.c: 1273: {
 12779                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12780  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 12781  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12782  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 12783  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 12784                           
 12785                           ; BSR set to: 0
 12786  0013C6  0E02               	movlw	2
 12787  0013C8  0100               	movlb	0	; () banked
 12788  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 12789  0013CC  0E00               	movlw	0
 12790  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12791  0013D0                     l5195:
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;doprnt.c: 1287: }
 12795                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12796  0013D0  0E01               	movlw	1
 12797  0013D2  0100               	movlb	0	; () banked
 12798  0013D4  6FA8               	movwf	printf@c& (0+255),b
 12799  0013D6                     l5197:
 12800                           
 12801                           ; BSR set to: 0
 12802  0013D6  0E05               	movlw	5
 12803  0013D8  0100               	movlb	0	; () banked
 12804  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 12805  0013DC  B4D8               	btfsc	status,2,c
 12806  0013DE  D019               	goto	l5209
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;doprnt.c: 1306: if(val < dpowers[c])
 12810                           
 12811                           ; BSR set to: 0
 12812                           
 12813                           ; BSR set to: 0
 12814  0013E0  0100               	movlb	0	; () banked
 12815  0013E2  51A8               	movf	printf@c& (0+255),w,b
 12816  0013E4  0D02               	mullw	2
 12817  0013E6  0E60               	movlw	low _dpowers
 12818  0013E8  24F3               	addwf	prodl,w,c
 12819  0013EA  6EF6               	movwf	tblptrl,c
 12820  0013EC  0EFB               	movlw	high _dpowers
 12821  0013EE  20F4               	addwfc	prodh,w,c
 12822  0013F0  6EF7               	movwf	tblptrh,c
 12823  0013F2                     	if	1	;There are 3 active tblptr bytes
 12824  0013F2  6AF8               	clrf	tblptru,c
 12825  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 12826  0013F6  22F8               	addwfc	tblptru,f,c
 12827  0013F8                     	endif
 12828  0013F8  0009               	tblrd		*+
 12829  0013FA  50F5               	movf	tablat,w,c
 12830  0013FC  0100               	movlb	0	; () banked
 12831  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 12832  001400  0009               	tblrd		*+
 12833  001402  50F5               	movf	tablat,w,c
 12834  001404  0100               	movlb	0	; () banked
 12835  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 12836  001408  A0D8               	btfss	status,0,c
 12837  00140A  D003               	goto	l5209
 12838                           
 12839                           ; BSR set to: 0
 12840                           
 12841                           ; BSR set to: 0
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;doprnt.c: 1307: break;
 12845  00140C  0100               	movlb	0	; () banked
 12846  00140E  2BA8               	incf	printf@c& (0+255),f,b
 12847  001410  D7E2               	goto	l5197
 12848  001412                     l5209:
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12852  001412  0100               	movlb	0	; () banked
 12853  001414  51A9               	movf	printf@width& (0+255),w,b
 12854  001416  0100               	movlb	0	; () banked
 12855  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12856  00141A  B4D8               	btfsc	status,2,c
 12857  00141C  D00B               	goto	l5215
 12858                           
 12859                           ; BSR set to: 0
 12860  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 12861  001422  0E03               	movlw	3
 12862  001424  0100               	movlb	0	; () banked
 12863  001426  179A               	andwf	??_printf& (0+255),f,b
 12864  001428  B4D8               	btfsc	status,2,c
 12865  00142A  D004               	goto	l5215
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;doprnt.c: 1346: width--;
 12869  00142C  0100               	movlb	0	; () banked
 12870  00142E  07A9               	decf	printf@width& (0+255),f,b
 12871  001430  A0D8               	btfss	status,0,c
 12872  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 12873  001434                     l5215:
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;doprnt.c: 1381: if(width > c)
 12877  001434  0E80               	movlw	128
 12878  001436  0100               	movlb	0	; () banked
 12879  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 12880  00143A  0E7F               	movlw	127
 12881  00143C  0100               	movlb	0	; () banked
 12882  00143E  6F9A               	movwf	??_printf& (0+255),b
 12883  001440  0100               	movlb	0	; () banked
 12884  001442  51A9               	movf	printf@width& (0+255),w,b
 12885  001444  0100               	movlb	0	; () banked
 12886  001446  5DA8               	subwf	printf@c& (0+255),w,b
 12887  001448  0100               	movlb	0	; () banked
 12888  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 12889  00144C  0A80               	xorlw	128
 12890  00144E  0100               	movlb	0	; () banked
 12891  001450  599A               	subwfb	??_printf& (0+255),w,b
 12892  001452  B0D8               	btfsc	status,0,c
 12893  001454  D00B               	goto	l5219
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;doprnt.c: 1382: width -= c;
 12897  001456  0100               	movlb	0	; () banked
 12898  001458  51A8               	movf	printf@c& (0+255),w,b
 12899  00145A  0100               	movlb	0	; () banked
 12900  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 12901  00145E  0E00               	movlw	0
 12902  001460  0100               	movlb	0	; () banked
 12903  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 12904  001464  0EFF               	movlw	255
 12905  001466  0100               	movlb	0	; () banked
 12906  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12907  00146A  D005               	goto	l5221
 12908  00146C                     l5219:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;doprnt.c: 1383: else
 12912                           ;doprnt.c: 1384: width = 0;
 12913  00146C  0E00               	movlw	0
 12914  00146E  0100               	movlb	0	; () banked
 12915  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 12916  001472  0E00               	movlw	0
 12917  001474  6FA9               	movwf	printf@width& (0+255),b
 12918  001476                     l5221:
 12919                           
 12920                           ; BSR set to: 0
 12921                           ;doprnt.c: 1387: if(flag & 0x04) {
 12922  001476  0100               	movlb	0	; () banked
 12923  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 12924  00147A  D018               	goto	l5233
 12925                           
 12926                           ; BSR set to: 0
 12927                           ;doprnt.c: 1392: if(flag & 0x03)
 12928  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 12929  001480  0E03               	movlw	3
 12930  001482  0100               	movlb	0	; () banked
 12931  001484  179A               	andwf	??_printf& (0+255),f,b
 12932  001486  B4D8               	btfsc	status,2,c
 12933  001488  D003               	goto	l5227
 12934                           
 12935                           ; BSR set to: 0
 12936                           ;doprnt.c: 1393: (putch('-') );
 12937  00148A  0E2D               	movlw	45
 12938  00148C  EC5E  F020         	call	_putch
 12939  001490                     l5227:
 12940                           
 12941                           ;doprnt.c: 1415: if(width)
 12942  001490  0100               	movlb	0	; () banked
 12943  001492  51A9               	movf	printf@width& (0+255),w,b
 12944  001494  0100               	movlb	0	; () banked
 12945  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12946  001498  B4D8               	btfsc	status,2,c
 12947  00149A  D025               	goto	l5243
 12948                           
 12949                           ; BSR set to: 0
 12950                           ;doprnt.c: 1417: (putch('0') );
 12951                           
 12952                           ; BSR set to: 0
 12953                           
 12954                           ;doprnt.c: 1416: do
 12955  00149C  0E30               	movlw	48
 12956  00149E  EC5E  F020         	call	_putch
 12957                           
 12958                           ;doprnt.c: 1418: while(--width);
 12959  0014A2  0100               	movlb	0	; () banked
 12960  0014A4  07A9               	decf	printf@width& (0+255),f,b
 12961  0014A6  A0D8               	btfss	status,0,c
 12962  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 12963  0014AA  D7F2               	goto	l5227
 12964  0014AC                     l5233:
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;doprnt.c: 1422: {
 12968                           ;doprnt.c: 1424: if(width
 12969                           ;doprnt.c: 1428: )
 12970  0014AC  0100               	movlb	0	; () banked
 12971  0014AE  51A9               	movf	printf@width& (0+255),w,b
 12972  0014B0  0100               	movlb	0	; () banked
 12973  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12974  0014B4  B4D8               	btfsc	status,2,c
 12975  0014B6  D00D               	goto	l5239
 12976  0014B8                     l5235:
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;doprnt.c: 1430: (putch(' ') );
 12980  0014B8  0E20               	movlw	32
 12981  0014BA  EC5E  F020         	call	_putch
 12982                           
 12983                           ;doprnt.c: 1431: while(--width);
 12984  0014BE  0100               	movlb	0	; () banked
 12985  0014C0  07A9               	decf	printf@width& (0+255),f,b
 12986  0014C2  A0D8               	btfss	status,0,c
 12987  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 12988  0014C6  0100               	movlb	0	; () banked
 12989  0014C8  51A9               	movf	printf@width& (0+255),w,b
 12990  0014CA  0100               	movlb	0	; () banked
 12991  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12992  0014CE  A4D8               	btfss	status,2,c
 12993  0014D0  D7F3               	goto	l5235
 12994  0014D2                     l5239:
 12995                           
 12996                           ; BSR set to: 0
 12997                           ;doprnt.c: 1438: if(flag & 0x03)
 12998  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 12999  0014D6  0E03               	movlw	3
 13000  0014D8  0100               	movlb	0	; () banked
 13001  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13002  0014DC  B4D8               	btfsc	status,2,c
 13003  0014DE  D003               	goto	l5243
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;doprnt.c: 1439: (putch('-') );
 13007  0014E0  0E2D               	movlw	45
 13008  0014E2  EC5E  F020         	call	_putch
 13009  0014E6                     l5243:
 13010                           
 13011                           ;doprnt.c: 1469: }
 13012                           ;doprnt.c: 1472: prec = c;
 13013  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13014                           
 13015                           ;doprnt.c: 1474: while(prec--) {
 13016  0014EA  D02C               	goto	l5249
 13017  0014EC                     l5245:
 13018                           
 13019                           ;doprnt.c: 1478: {
 13020                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13021  0014EC  0100               	movlb	0	; () banked
 13022  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13023  0014F0  0D02               	mullw	2
 13024  0014F2  0E60               	movlw	low _dpowers
 13025  0014F4  24F3               	addwf	prodl,w,c
 13026  0014F6  6EF6               	movwf	tblptrl,c
 13027  0014F8  0EFB               	movlw	high _dpowers
 13028  0014FA  20F4               	addwfc	prodh,w,c
 13029  0014FC  6EF7               	movwf	tblptrh,c
 13030  0014FE                     	if	1	;There are 3 active tblptr bytes
 13031  0014FE  6AF8               	clrf	tblptru,c
 13032  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13033  001502  22F8               	addwfc	tblptru,f,c
 13034  001504                     	endif
 13035  001504  0009               	tblrd		*+
 13036  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13037  00150A  000A               	tblrd		*-
 13038  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13039  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13040  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13041  001518  EC9A  F01A         	call	___lwdiv	;wreg free
 13042  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13043  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13044  001524  0E00               	movlw	0
 13045  001526  0100               	movlb	0	; () banked
 13046  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13047  00152A  0E0A               	movlw	10
 13048  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13049  00152E  ECB2  F01B         	call	___lwmod	;wreg free
 13050  001532  0100               	movlb	0	; () banked
 13051  001534  5187               	movf	?___lwmod& (0+255),w,b
 13052  001536  0F30               	addlw	48
 13053  001538  0100               	movlb	0	; () banked
 13054  00153A  6FA8               	movwf	printf@c& (0+255),b
 13055                           
 13056                           ; BSR set to: 0
 13057                           ;doprnt.c: 1523: }
 13058                           ;doprnt.c: 1524: (putch(c) );
 13059  00153C  0100               	movlb	0	; () banked
 13060  00153E  51A8               	movf	printf@c& (0+255),w,b
 13061  001540  EC5E  F020         	call	_putch
 13062  001544                     l5249:
 13063  001544  0100               	movlb	0	; () banked
 13064  001546  079E               	decf	printf@prec& (0+255),f,b
 13065  001548  0100               	movlb	0	; () banked
 13066  00154A  299E               	incf	printf@prec& (0+255),w,b
 13067  00154C  A4D8               	btfss	status,2,c
 13068  00154E  D7CE               	goto	l5245
 13069  001550                     l5251:
 13070  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13071  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13072  001558  0100               	movlb	0	; () banked
 13073  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13074  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13075  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13076  00155E  6AF8               	clrf	tblptru,c
 13077  001560                     	endif
 13078  001560                     	if	0	;tblptru may be non-zero
 13079  001560                     	endif
 13080  001560  0008               	tblrd		*
 13081  001562  CFF5 F0A8          	movff	tablat,printf@c
 13082  001566  0100               	movlb	0	; () banked
 13083  001568  51A8               	movf	printf@c& (0+255),w,b
 13084  00156A  B4D8               	btfsc	status,2,c
 13085  00156C  0012               	return	
 13086  00156E  D5EB               	goto	l5121
 13087  001570                     __end_of_printf:
 13088                           	opt stack 0
 13089                           tblptru	equ	0xFF8
 13090                           tblptrh	equ	0xFF7
 13091                           tblptrl	equ	0xFF6
 13092                           tablat	equ	0xFF5
 13093                           prodh	equ	0xFF4
 13094                           prodl	equ	0xFF3
 13095                           intcon	equ	0xFF2
 13096                           intcon2	equ	0xFF1
 13097                           intcon3	equ	0xFF0
 13098                           indf0	equ	0xFEF
 13099                           postinc0	equ	0xFEE
 13100                           fsr0h	equ	0xFEA
 13101                           fsr0l	equ	0xFE9
 13102                           wreg	equ	0xFE8
 13103                           postdec1	equ	0xFE5
 13104                           fsr1l	equ	0xFE1
 13105                           indf2	equ	0xFDF
 13106                           postinc2	equ	0xFDE
 13107                           postdec2	equ	0xFDD
 13108                           fsr2h	equ	0xFDA
 13109                           fsr2l	equ	0xFD9
 13110                           status	equ	0xFD8
 13111                           
 13112 ;; *************** function _putch *****************
 13113 ;; Defined at:
 13114 ;;		line 20 in file "lcd.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;  data            1    wreg     unsigned char 
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;  data            1    2[BANK0 ] unsigned char 
 13119 ;; Return value:  Size  Location     Type
 13120 ;;                  1    wreg      void 
 13121 ;; Registers used:
 13122 ;;		wreg, status,2, status,0, cstack
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;Total ram usage:        1 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; Hardware stack levels required when called:    8
 13135 ;; This function calls:
 13136 ;;		_lcdNibble
 13137 ;; This function is called by:
 13138 ;;		_printf
 13139 ;; This function uses a non-reentrant model
 13140 ;;
 13141                           
 13142                           	psect	text46
 13143  0040BC                     __ptext46:
 13144                           	opt stack 0
 13145  0040BC                     _putch:
 13146                           	opt stack 18
 13147                           
 13148                           ;incstack = 0
 13149                           ;putch@data stored from wreg
 13150  0040BC  0100               	movlb	0	; () banked
 13151  0040BE  6F82               	movwf	putch@data& (0+255),b
 13152                           
 13153                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13154  0040C0  848C               	bsf	3980,2,c	;volatile
 13155                           
 13156                           ;lcd.c: 22: lcdNibble(data);
 13157  0040C2  0100               	movlb	0	; () banked
 13158  0040C4  5182               	movf	putch@data& (0+255),w,b
 13159  0040C6  EC7E  F01B         	call	_lcdNibble
 13160  0040CA  0012               	return		;funcret
 13161  0040CC                     __end_of_putch:
 13162                           	opt stack 0
 13163                           tblptru	equ	0xFF8
 13164                           tblptrh	equ	0xFF7
 13165                           tblptrl	equ	0xFF6
 13166                           tablat	equ	0xFF5
 13167                           prodh	equ	0xFF4
 13168                           prodl	equ	0xFF3
 13169                           intcon	equ	0xFF2
 13170                           intcon2	equ	0xFF1
 13171                           intcon3	equ	0xFF0
 13172                           indf0	equ	0xFEF
 13173                           postinc0	equ	0xFEE
 13174                           fsr0h	equ	0xFEA
 13175                           fsr0l	equ	0xFE9
 13176                           wreg	equ	0xFE8
 13177                           postdec1	equ	0xFE5
 13178                           fsr1l	equ	0xFE1
 13179                           indf2	equ	0xFDF
 13180                           postinc2	equ	0xFDE
 13181                           postdec2	equ	0xFDD
 13182                           fsr2h	equ	0xFDA
 13183                           fsr2l	equ	0xFD9
 13184                           status	equ	0xFD8
 13185                           
 13186 ;; *************** function _isdigit *****************
 13187 ;; Defined at:
 13188 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13189 ;; Parameters:    Size  Location     Type
 13190 ;;  c               1    wreg     unsigned char 
 13191 ;; Auto vars:     Size  Location     Type
 13192 ;;  c               1    2[BANK0 ] unsigned char 
 13193 ;; Return value:  Size  Location     Type
 13194 ;;		None               void
 13195 ;; Registers used:
 13196 ;;		wreg, status,2, status,0
 13197 ;; Tracked objects:
 13198 ;;		On entry : 0/0
 13199 ;;		On exit  : 0/0
 13200 ;;		Unchanged: 0/0
 13201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13203 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13206 ;;Total ram usage:        3 bytes
 13207 ;; Hardware stack levels used:    1
 13208 ;; Hardware stack levels required when called:    7
 13209 ;; This function calls:
 13210 ;;		Nothing
 13211 ;; This function is called by:
 13212 ;;		_printf
 13213 ;; This function uses a non-reentrant model
 13214 ;;
 13215                           
 13216                           	psect	text47
 13217  003F0A                     __ptext47:
 13218                           	opt stack 0
 13219  003F0A                     _isdigit:
 13220                           	opt stack 19
 13221                           
 13222                           ;incstack = 0
 13223                           ;isdigit@c stored from wreg
 13224  003F0A  0100               	movlb	0	; () banked
 13225  003F0C  6F82               	movwf	isdigit@c& (0+255),b
 13226  003F0E  0E00               	movlw	0
 13227  003F10  0100               	movlb	0	; () banked
 13228  003F12  6F81               	movwf	_isdigit$1861& (0+255),b
 13229                           
 13230                           ; BSR set to: 0
 13231  003F14  0E3A               	movlw	58
 13232  003F16  0100               	movlb	0	; () banked
 13233  003F18  6182               	cpfslt	isdigit@c& (0+255),b
 13234  003F1A  D007               	goto	l4975
 13235                           
 13236                           ; BSR set to: 0
 13237  003F1C  0E2F               	movlw	47
 13238  003F1E  0100               	movlb	0	; () banked
 13239  003F20  6582               	cpfsgt	isdigit@c& (0+255),b
 13240  003F22  D003               	goto	l4975
 13241                           
 13242                           ; BSR set to: 0
 13243  003F24  0E01               	movlw	1
 13244  003F26  0100               	movlb	0	; () banked
 13245  003F28  6F81               	movwf	_isdigit$1861& (0+255),b
 13246  003F2A                     l4975:
 13247                           
 13248                           ; BSR set to: 0
 13249  003F2A  C081  F080         	movff	_isdigit$1861,??_isdigit
 13250  003F2E  0100               	movlb	0	; () banked
 13251  003F30  3180               	rrcf	??_isdigit& (0+255),w,b
 13252  003F32  0012               	return	
 13253  003F34                     __end_of_isdigit:
 13254                           	opt stack 0
 13255                           tblptru	equ	0xFF8
 13256                           tblptrh	equ	0xFF7
 13257                           tblptrl	equ	0xFF6
 13258                           tablat	equ	0xFF5
 13259                           prodh	equ	0xFF4
 13260                           prodl	equ	0xFF3
 13261                           intcon	equ	0xFF2
 13262                           intcon2	equ	0xFF1
 13263                           intcon3	equ	0xFF0
 13264                           indf0	equ	0xFEF
 13265                           postinc0	equ	0xFEE
 13266                           fsr0h	equ	0xFEA
 13267                           fsr0l	equ	0xFE9
 13268                           wreg	equ	0xFE8
 13269                           postdec1	equ	0xFE5
 13270                           fsr1l	equ	0xFE1
 13271                           indf2	equ	0xFDF
 13272                           postinc2	equ	0xFDE
 13273                           postdec2	equ	0xFDD
 13274                           fsr2h	equ	0xFDA
 13275                           fsr2l	equ	0xFD9
 13276                           status	equ	0xFD8
 13277                           
 13278 ;; *************** function ___wmul *****************
 13279 ;; Defined at:
 13280 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13281 ;; Parameters:    Size  Location     Type
 13282 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13283 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13284 ;; Auto vars:     Size  Location     Type
 13285 ;;  product         2    4[BANK0 ] unsigned int 
 13286 ;; Return value:  Size  Location     Type
 13287 ;;                  2    0[BANK0 ] unsigned int 
 13288 ;; Registers used:
 13289 ;;		wreg, status,2, status,0, prodl, prodh
 13290 ;; Tracked objects:
 13291 ;;		On entry : 0/0
 13292 ;;		On exit  : 0/0
 13293 ;;		Unchanged: 0/0
 13294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13295 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13296 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13298 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13299 ;;Total ram usage:        6 bytes
 13300 ;; Hardware stack levels used:    1
 13301 ;; Hardware stack levels required when called:    7
 13302 ;; This function calls:
 13303 ;;		Nothing
 13304 ;; This function is called by:
 13305 ;;		_printf
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           	psect	text48
 13310  003C3E                     __ptext48:
 13311                           	opt stack 0
 13312  003C3E                     ___wmul:
 13313                           	opt stack 19
 13314                           
 13315                           ; BSR set to: 0
 13316                           ;incstack = 0
 13317  003C3E  0100               	movlb	0	; () banked
 13318  003C40  5180               	movf	___wmul@multiplier& (0+255),w,b
 13319  003C42  0100               	movlb	0	; () banked
 13320  003C44  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13321  003C46  CFF3 F084          	movff	prodl,___wmul@product
 13322  003C4A  CFF4 F085          	movff	prodh,___wmul@product+1
 13323  003C4E  0100               	movlb	0	; () banked
 13324  003C50  5180               	movf	___wmul@multiplier& (0+255),w,b
 13325  003C52  0100               	movlb	0	; () banked
 13326  003C54  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13327  003C56  50F3               	movf	prodl,w,c
 13328  003C58  0100               	movlb	0	; () banked
 13329  003C5A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13330  003C5C  0100               	movlb	0	; () banked
 13331  003C5E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13332  003C60  0100               	movlb	0	; () banked
 13333  003C62  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13334  003C64  50F3               	movf	prodl,w,c
 13335  003C66  0100               	movlb	0	; () banked
 13336  003C68  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13337                           
 13338                           ; BSR set to: 0
 13339  003C6A  C084  F080         	movff	___wmul@product,?___wmul
 13340  003C6E  C085  F081         	movff	___wmul@product+1,?___wmul+1
 13341  003C72  0012               	return	
 13342  003C74                     __end_of___wmul:
 13343                           	opt stack 0
 13344                           tblptru	equ	0xFF8
 13345                           tblptrh	equ	0xFF7
 13346                           tblptrl	equ	0xFF6
 13347                           tablat	equ	0xFF5
 13348                           prodh	equ	0xFF4
 13349                           prodl	equ	0xFF3
 13350                           intcon	equ	0xFF2
 13351                           intcon2	equ	0xFF1
 13352                           intcon3	equ	0xFF0
 13353                           indf0	equ	0xFEF
 13354                           postinc0	equ	0xFEE
 13355                           fsr0h	equ	0xFEA
 13356                           fsr0l	equ	0xFE9
 13357                           wreg	equ	0xFE8
 13358                           postdec1	equ	0xFE5
 13359                           fsr1l	equ	0xFE1
 13360                           indf2	equ	0xFDF
 13361                           postinc2	equ	0xFDE
 13362                           postdec2	equ	0xFDD
 13363                           fsr2h	equ	0xFDA
 13364                           fsr2l	equ	0xFD9
 13365                           status	equ	0xFD8
 13366                           
 13367 ;; *************** function ___lwmod *****************
 13368 ;; Defined at:
 13369 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13370 ;; Parameters:    Size  Location     Type
 13371 ;;  dividend        2    7[BANK0 ] unsigned int 
 13372 ;;  divisor         2    9[BANK0 ] unsigned int 
 13373 ;; Auto vars:     Size  Location     Type
 13374 ;;  counter         1   11[BANK0 ] unsigned char 
 13375 ;; Return value:  Size  Location     Type
 13376 ;;                  2    7[BANK0 ] unsigned int 
 13377 ;; Registers used:
 13378 ;;		wreg, status,2, status,0
 13379 ;; Tracked objects:
 13380 ;;		On entry : 0/0
 13381 ;;		On exit  : 0/0
 13382 ;;		Unchanged: 0/0
 13383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13384 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13387 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;Total ram usage:        5 bytes
 13389 ;; Hardware stack levels used:    1
 13390 ;; Hardware stack levels required when called:    7
 13391 ;; This function calls:
 13392 ;;		Nothing
 13393 ;; This function is called by:
 13394 ;;		_printf
 13395 ;; This function uses a non-reentrant model
 13396 ;;
 13397                           
 13398                           	psect	text49
 13399  003764                     __ptext49:
 13400                           	opt stack 0
 13401  003764                     ___lwmod:
 13402                           	opt stack 19
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;incstack = 0
 13406  003764  0100               	movlb	0	; () banked
 13407  003766  5189               	movf	___lwmod@divisor& (0+255),w,b
 13408  003768  0100               	movlb	0	; () banked
 13409  00376A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13410  00376C  B4D8               	btfsc	status,2,c
 13411  00376E  D026               	goto	l1646
 13412                           
 13413                           ; BSR set to: 0
 13414  003770  0E01               	movlw	1
 13415  003772  0100               	movlb	0	; () banked
 13416  003774  6F8B               	movwf	___lwmod@counter& (0+255),b
 13417  003776  D006               	goto	l5013
 13418  003778                     l5011:
 13419                           
 13420                           ; BSR set to: 0
 13421  003778  0100               	movlb	0	; () banked
 13422  00377A  90D8               	bcf	status,0,c
 13423  00377C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 13424  00377E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13425  003780  0100               	movlb	0	; () banked
 13426  003782  2B8B               	incf	___lwmod@counter& (0+255),f,b
 13427  003784                     l5013:
 13428                           
 13429                           ; BSR set to: 0
 13430  003784  0100               	movlb	0	; () banked
 13431  003786  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13432  003788  D7F7               	goto	l5011
 13433  00378A                     l5015:
 13434                           
 13435                           ; BSR set to: 0
 13436  00378A  0100               	movlb	0	; () banked
 13437  00378C  5189               	movf	___lwmod@divisor& (0+255),w,b
 13438  00378E  0100               	movlb	0	; () banked
 13439  003790  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 13440  003792  0100               	movlb	0	; () banked
 13441  003794  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13442  003796  0100               	movlb	0	; () banked
 13443  003798  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13444  00379A  A0D8               	btfss	status,0,c
 13445  00379C  D008               	goto	l5019
 13446                           
 13447                           ; BSR set to: 0
 13448  00379E  0100               	movlb	0	; () banked
 13449  0037A0  5189               	movf	___lwmod@divisor& (0+255),w,b
 13450  0037A2  0100               	movlb	0	; () banked
 13451  0037A4  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 13452  0037A6  0100               	movlb	0	; () banked
 13453  0037A8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13454  0037AA  0100               	movlb	0	; () banked
 13455  0037AC  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13456  0037AE                     l5019:
 13457                           
 13458                           ; BSR set to: 0
 13459  0037AE  0100               	movlb	0	; () banked
 13460  0037B0  90D8               	bcf	status,0,c
 13461  0037B2  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13462  0037B4  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 13463                           
 13464                           ; BSR set to: 0
 13465  0037B6  0100               	movlb	0	; () banked
 13466  0037B8  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 13467  0037BA  D7E7               	goto	l5015
 13468  0037BC                     l1646:
 13469                           
 13470                           ; BSR set to: 0
 13471  0037BC  C087  F087         	movff	___lwmod@dividend,?___lwmod
 13472  0037C0  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 13473                           
 13474                           ; BSR set to: 0
 13475  0037C4  0012               	return		;funcret
 13476  0037C6                     __end_of___lwmod:
 13477                           	opt stack 0
 13478                           tblptru	equ	0xFF8
 13479                           tblptrh	equ	0xFF7
 13480                           tblptrl	equ	0xFF6
 13481                           tablat	equ	0xFF5
 13482                           prodh	equ	0xFF4
 13483                           prodl	equ	0xFF3
 13484                           intcon	equ	0xFF2
 13485                           intcon2	equ	0xFF1
 13486                           intcon3	equ	0xFF0
 13487                           indf0	equ	0xFEF
 13488                           postinc0	equ	0xFEE
 13489                           fsr0h	equ	0xFEA
 13490                           fsr0l	equ	0xFE9
 13491                           wreg	equ	0xFE8
 13492                           postdec1	equ	0xFE5
 13493                           fsr1l	equ	0xFE1
 13494                           indf2	equ	0xFDF
 13495                           postinc2	equ	0xFDE
 13496                           postdec2	equ	0xFDD
 13497                           fsr2h	equ	0xFDA
 13498                           fsr2l	equ	0xFD9
 13499                           status	equ	0xFD8
 13500                           
 13501 ;; *************** function ___lwdiv *****************
 13502 ;; Defined at:
 13503 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13504 ;; Parameters:    Size  Location     Type
 13505 ;;  dividend        2    0[BANK0 ] unsigned int 
 13506 ;;  divisor         2    2[BANK0 ] unsigned int 
 13507 ;; Auto vars:     Size  Location     Type
 13508 ;;  quotient        2    4[BANK0 ] unsigned int 
 13509 ;;  counter         1    6[BANK0 ] unsigned char 
 13510 ;; Return value:  Size  Location     Type
 13511 ;;                  2    0[BANK0 ] unsigned int 
 13512 ;; Registers used:
 13513 ;;		wreg, status,2, status,0
 13514 ;; Tracked objects:
 13515 ;;		On entry : 0/0
 13516 ;;		On exit  : 0/0
 13517 ;;		Unchanged: 0/0
 13518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13519 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13520 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13522 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13523 ;;Total ram usage:        7 bytes
 13524 ;; Hardware stack levels used:    1
 13525 ;; Hardware stack levels required when called:    7
 13526 ;; This function calls:
 13527 ;;		Nothing
 13528 ;; This function is called by:
 13529 ;;		_printf
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           	psect	text50
 13534  003534                     __ptext50:
 13535                           	opt stack 0
 13536  003534                     ___lwdiv:
 13537                           	opt stack 19
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;incstack = 0
 13541  003534  0E00               	movlw	0
 13542  003536  0100               	movlb	0	; () banked
 13543  003538  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13544  00353A  0E00               	movlw	0
 13545  00353C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 13546                           
 13547                           ; BSR set to: 0
 13548  00353E  0100               	movlb	0	; () banked
 13549  003540  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13550  003542  0100               	movlb	0	; () banked
 13551  003544  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13552  003546  B4D8               	btfsc	status,2,c
 13553  003548  D02C               	goto	l1636
 13554                           
 13555                           ; BSR set to: 0
 13556  00354A  0E01               	movlw	1
 13557  00354C  0100               	movlb	0	; () banked
 13558  00354E  6F86               	movwf	___lwdiv@counter& (0+255),b
 13559  003550  D006               	goto	l4993
 13560  003552                     l4991:
 13561                           
 13562                           ; BSR set to: 0
 13563  003552  0100               	movlb	0	; () banked
 13564  003554  90D8               	bcf	status,0,c
 13565  003556  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 13566  003558  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13567  00355A  0100               	movlb	0	; () banked
 13568  00355C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 13569  00355E                     l4993:
 13570                           
 13571                           ; BSR set to: 0
 13572  00355E  0100               	movlb	0	; () banked
 13573  003560  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13574  003562  D7F7               	goto	l4991
 13575  003564                     l4995:
 13576                           
 13577                           ; BSR set to: 0
 13578  003564  0100               	movlb	0	; () banked
 13579  003566  90D8               	bcf	status,0,c
 13580  003568  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 13581  00356A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13582                           
 13583                           ; BSR set to: 0
 13584  00356C  0100               	movlb	0	; () banked
 13585  00356E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13586  003570  0100               	movlb	0	; () banked
 13587  003572  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 13588  003574  0100               	movlb	0	; () banked
 13589  003576  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13590  003578  0100               	movlb	0	; () banked
 13591  00357A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13592  00357C  A0D8               	btfss	status,0,c
 13593  00357E  D00A               	goto	l5003
 13594                           
 13595                           ; BSR set to: 0
 13596  003580  0100               	movlb	0	; () banked
 13597  003582  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13598  003584  0100               	movlb	0	; () banked
 13599  003586  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 13600  003588  0100               	movlb	0	; () banked
 13601  00358A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13602  00358C  0100               	movlb	0	; () banked
 13603  00358E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13604                           
 13605                           ; BSR set to: 0
 13606  003590  0100               	movlb	0	; () banked
 13607  003592  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 13608  003594                     l5003:
 13609                           
 13610                           ; BSR set to: 0
 13611  003594  0100               	movlb	0	; () banked
 13612  003596  90D8               	bcf	status,0,c
 13613  003598  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13614  00359A  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 13615                           
 13616                           ; BSR set to: 0
 13617  00359C  0100               	movlb	0	; () banked
 13618  00359E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 13619  0035A0  D7E1               	goto	l4995
 13620  0035A2                     l1636:
 13621                           
 13622                           ; BSR set to: 0
 13623  0035A2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 13624  0035A6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13625                           
 13626                           ; BSR set to: 0
 13627  0035AA  0012               	return		;funcret
 13628  0035AC                     __end_of___lwdiv:
 13629                           	opt stack 0
 13630                           tblptru	equ	0xFF8
 13631                           tblptrh	equ	0xFF7
 13632                           tblptrl	equ	0xFF6
 13633                           tablat	equ	0xFF5
 13634                           prodh	equ	0xFF4
 13635                           prodl	equ	0xFF3
 13636                           intcon	equ	0xFF2
 13637                           intcon2	equ	0xFF1
 13638                           intcon3	equ	0xFF0
 13639                           indf0	equ	0xFEF
 13640                           postinc0	equ	0xFEE
 13641                           fsr0h	equ	0xFEA
 13642                           fsr0l	equ	0xFE9
 13643                           wreg	equ	0xFE8
 13644                           postdec1	equ	0xFE5
 13645                           fsr1l	equ	0xFE1
 13646                           indf2	equ	0xFDF
 13647                           postinc2	equ	0xFDE
 13648                           postdec2	equ	0xFDD
 13649                           fsr2h	equ	0xFDA
 13650                           fsr2l	equ	0xFD9
 13651                           status	equ	0xFD8
 13652                           
 13653 ;; *************** function _lcdInst *****************
 13654 ;; Defined at:
 13655 ;;		line 15 in file "lcd.c"
 13656 ;; Parameters:    Size  Location     Type
 13657 ;;  data            1    wreg     unsigned char 
 13658 ;; Auto vars:     Size  Location     Type
 13659 ;;  data            1    2[BANK0 ] unsigned char 
 13660 ;; Return value:  Size  Location     Type
 13661 ;;                  1    wreg      void 
 13662 ;; Registers used:
 13663 ;;		wreg, status,2, status,0, cstack
 13664 ;; Tracked objects:
 13665 ;;		On entry : 0/0
 13666 ;;		On exit  : 0/0
 13667 ;;		Unchanged: 0/0
 13668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13672 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13673 ;;Total ram usage:        1 bytes
 13674 ;; Hardware stack levels used:    1
 13675 ;; Hardware stack levels required when called:    8
 13676 ;; This function calls:
 13677 ;;		_lcdNibble
 13678 ;; This function is called by:
 13679 ;;		_UI
 13680 ;;		_change_state_to_menu_start
 13681 ;;		_change_state_to_menu_12
 13682 ;;		_change_state_to_menu_22
 13683 ;;		_initLCD
 13684 ;;		_printRTC
 13685 ;;		_Loading
 13686 ;;		_EEPROM_write
 13687 ;;		_Test
 13688 ;;		_algorithmTest
 13689 ;;		_sensorTest
 13690 ;;		_actuatorTest
 13691 ;;		_PortTestA5
 13692 ;;		_ToggleTestA5
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           	psect	text51
 13697  0040CC                     __ptext51:
 13698                           	opt stack 0
 13699  0040CC                     _lcdInst:
 13700                           	opt stack 20
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;incstack = 0
 13704                           ;lcdInst@data stored from wreg
 13705  0040CC  0100               	movlb	0	; () banked
 13706  0040CE  6F82               	movwf	lcdInst@data& (0+255),b
 13707                           
 13708                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 13709  0040D0  948C               	bcf	3980,2,c	;volatile
 13710                           
 13711                           ;lcd.c: 17: lcdNibble(data);
 13712  0040D2  0100               	movlb	0	; () banked
 13713  0040D4  5182               	movf	lcdInst@data& (0+255),w,b
 13714  0040D6  EC7E  F01B         	call	_lcdNibble
 13715  0040DA  0012               	return		;funcret
 13716  0040DC                     __end_of_lcdInst:
 13717                           	opt stack 0
 13718                           tblptru	equ	0xFF8
 13719                           tblptrh	equ	0xFF7
 13720                           tblptrl	equ	0xFF6
 13721                           tablat	equ	0xFF5
 13722                           prodh	equ	0xFF4
 13723                           prodl	equ	0xFF3
 13724                           intcon	equ	0xFF2
 13725                           intcon2	equ	0xFF1
 13726                           intcon3	equ	0xFF0
 13727                           indf0	equ	0xFEF
 13728                           postinc0	equ	0xFEE
 13729                           fsr0h	equ	0xFEA
 13730                           fsr0l	equ	0xFE9
 13731                           wreg	equ	0xFE8
 13732                           postdec1	equ	0xFE5
 13733                           fsr1l	equ	0xFE1
 13734                           indf2	equ	0xFDF
 13735                           postinc2	equ	0xFDE
 13736                           postdec2	equ	0xFDD
 13737                           fsr2h	equ	0xFDA
 13738                           fsr2l	equ	0xFD9
 13739                           status	equ	0xFD8
 13740                           
 13741 ;; *************** function _lcdNibble *****************
 13742 ;; Defined at:
 13743 ;;		line 25 in file "lcd.c"
 13744 ;; Parameters:    Size  Location     Type
 13745 ;;  data            1    wreg     unsigned char 
 13746 ;; Auto vars:     Size  Location     Type
 13747 ;;  data            1    1[BANK0 ] unsigned char 
 13748 ;;  temp            1    0[BANK0 ] unsigned char 
 13749 ;; Return value:  Size  Location     Type
 13750 ;;                  1    wreg      void 
 13751 ;; Registers used:
 13752 ;;		wreg, status,2, status,0
 13753 ;; Tracked objects:
 13754 ;;		On entry : 0/0
 13755 ;;		On exit  : 0/0
 13756 ;;		Unchanged: 0/0
 13757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13762 ;;Total ram usage:        2 bytes
 13763 ;; Hardware stack levels used:    1
 13764 ;; Hardware stack levels required when called:    7
 13765 ;; This function calls:
 13766 ;;		Nothing
 13767 ;; This function is called by:
 13768 ;;		_lcdInst
 13769 ;;		_putch
 13770 ;; This function uses a non-reentrant model
 13771 ;;
 13772                           
 13773                           	psect	text52
 13774  0036FC                     __ptext52:
 13775                           	opt stack 0
 13776  0036FC                     _lcdNibble:
 13777                           	opt stack 20
 13778                           
 13779                           ;incstack = 0
 13780                           ;lcdNibble@data stored from wreg
 13781  0036FC  0100               	movlb	0	; () banked
 13782  0036FE  6F81               	movwf	lcdNibble@data& (0+255),b
 13783                           
 13784                           ;lcd.c: 27: char temp = data & 0xF0;
 13785  003700  0100               	movlb	0	; () banked
 13786  003702  5181               	movf	lcdNibble@data& (0+255),w,b
 13787  003704  0BF0               	andlw	240
 13788  003706  0100               	movlb	0	; () banked
 13789  003708  6F80               	movwf	lcdNibble@temp& (0+255),b
 13790                           
 13791                           ;lcd.c: 28: LATD = LATD & 0x0F;
 13792  00370A  508C               	movf	3980,w,c	;volatile
 13793  00370C  0B0F               	andlw	15
 13794  00370E  6E8C               	movwf	3980,c	;volatile
 13795                           
 13796                           ;lcd.c: 29: LATD = temp | LATD;
 13797  003710  0100               	movlb	0	; () banked
 13798  003712  5180               	movf	lcdNibble@temp& (0+255),w,b
 13799  003714  108C               	iorwf	3980,w,c	;volatile
 13800  003716  6E8C               	movwf	3980,c	;volatile
 13801                           
 13802                           ; BSR set to: 0
 13803                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 13804  003718  868C               	bsf	3980,3,c	;volatile
 13805                           
 13806                           ; BSR set to: 0
 13807                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13808  00371A  0E42               	movlw	66
 13809  00371C                     u7457:
 13810  00371C  2EE8               	decfsz	wreg,f,c
 13811  00371E  D7FE               	bra	u7457
 13812  003720  D000               	nop2	
 13813                           
 13814                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 13815  003722  968C               	bcf	3980,3,c	;volatile
 13816                           
 13817                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13818  003724  0E42               	movlw	66
 13819  003726                     u7467:
 13820  003726  2EE8               	decfsz	wreg,f,c
 13821  003728  D7FE               	bra	u7467
 13822  00372A  D000               	nop2	
 13823                           
 13824                           ;lcd.c: 36: data = data << 4;
 13825  00372C  0100               	movlb	0	; () banked
 13826  00372E  3981               	swapf	lcdNibble@data& (0+255),w,b
 13827  003730  0BF0               	andlw	240
 13828  003732  0100               	movlb	0	; () banked
 13829  003734  6F81               	movwf	lcdNibble@data& (0+255),b
 13830                           
 13831                           ;lcd.c: 38: temp = data & 0xF0;
 13832  003736  0100               	movlb	0	; () banked
 13833  003738  5181               	movf	lcdNibble@data& (0+255),w,b
 13834  00373A  0BF0               	andlw	240
 13835  00373C  0100               	movlb	0	; () banked
 13836  00373E  6F80               	movwf	lcdNibble@temp& (0+255),b
 13837                           
 13838                           ;lcd.c: 39: LATD = LATD & 0x0F;
 13839  003740  508C               	movf	3980,w,c	;volatile
 13840  003742  0B0F               	andlw	15
 13841  003744  6E8C               	movwf	3980,c	;volatile
 13842                           
 13843                           ;lcd.c: 40: LATD = temp | LATD;
 13844  003746  0100               	movlb	0	; () banked
 13845  003748  5180               	movf	lcdNibble@temp& (0+255),w,b
 13846  00374A  108C               	iorwf	3980,w,c	;volatile
 13847  00374C  6E8C               	movwf	3980,c	;volatile
 13848                           
 13849                           ; BSR set to: 0
 13850                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 13851  00374E  868C               	bsf	3980,3,c	;volatile
 13852                           
 13853                           ; BSR set to: 0
 13854                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13855  003750  0E42               	movlw	66
 13856  003752                     u7477:
 13857  003752  2EE8               	decfsz	wreg,f,c
 13858  003754  D7FE               	bra	u7477
 13859  003756  D000               	nop2	
 13860                           
 13861                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 13862  003758  968C               	bcf	3980,3,c	;volatile
 13863                           
 13864                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13865  00375A  0E42               	movlw	66
 13866  00375C                     u7487:
 13867  00375C  2EE8               	decfsz	wreg,f,c
 13868  00375E  D7FE               	bra	u7487
 13869  003760  D000               	nop2	
 13870  003762  0012               	return		;funcret
 13871  003764                     __end_of_lcdNibble:
 13872                           	opt stack 0
 13873                           tblptru	equ	0xFF8
 13874                           tblptrh	equ	0xFF7
 13875                           tblptrl	equ	0xFF6
 13876                           tablat	equ	0xFF5
 13877                           prodh	equ	0xFF4
 13878                           prodl	equ	0xFF3
 13879                           intcon	equ	0xFF2
 13880                           intcon2	equ	0xFF1
 13881                           intcon3	equ	0xFF0
 13882                           indf0	equ	0xFEF
 13883                           postinc0	equ	0xFEE
 13884                           fsr0h	equ	0xFEA
 13885                           fsr0l	equ	0xFE9
 13886                           wreg	equ	0xFE8
 13887                           postdec1	equ	0xFE5
 13888                           fsr1l	equ	0xFE1
 13889                           indf2	equ	0xFDF
 13890                           postinc2	equ	0xFDE
 13891                           postdec2	equ	0xFDD
 13892                           fsr2h	equ	0xFDA
 13893                           fsr2l	equ	0xFD9
 13894                           status	equ	0xFD8
 13895                           
 13896 ;; *************** function _EEPROMTest *****************
 13897 ;; Defined at:
 13898 ;;		line 390 in file "Test.c"
 13899 ;; Parameters:    Size  Location     Type
 13900 ;;		None
 13901 ;; Auto vars:     Size  Location     Type
 13902 ;;		None
 13903 ;; Return value:  Size  Location     Type
 13904 ;;                  1    wreg      void 
 13905 ;; Registers used:
 13906 ;;		None
 13907 ;; Tracked objects:
 13908 ;;		On entry : 0/0
 13909 ;;		On exit  : 0/0
 13910 ;;		Unchanged: 0/0
 13911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13916 ;;Total ram usage:        0 bytes
 13917 ;; Hardware stack levels used:    1
 13918 ;; Hardware stack levels required when called:    7
 13919 ;; This function calls:
 13920 ;;		Nothing
 13921 ;; This function is called by:
 13922 ;;		_Test
 13923 ;; This function uses a non-reentrant model
 13924 ;;
 13925                           
 13926                           	psect	text53
 13927  004130                     __ptext53:
 13928                           	opt stack 0
 13929  004130                     _EEPROMTest:
 13930                           	opt stack 22
 13931                           
 13932                           ;incstack = 0
 13933  004130  0012               	return		;funcret
 13934  004132                     __end_of_EEPROMTest:
 13935                           	opt stack 0
 13936                           tblptru	equ	0xFF8
 13937                           tblptrh	equ	0xFF7
 13938                           tblptrl	equ	0xFF6
 13939                           tablat	equ	0xFF5
 13940                           prodh	equ	0xFF4
 13941                           prodl	equ	0xFF3
 13942                           intcon	equ	0xFF2
 13943                           intcon2	equ	0xFF1
 13944                           intcon3	equ	0xFF0
 13945                           indf0	equ	0xFEF
 13946                           postinc0	equ	0xFEE
 13947                           fsr0h	equ	0xFEA
 13948                           fsr0l	equ	0xFE9
 13949                           wreg	equ	0xFE8
 13950                           postdec1	equ	0xFE5
 13951                           fsr1l	equ	0xFE1
 13952                           indf2	equ	0xFDF
 13953                           postinc2	equ	0xFDE
 13954                           postdec2	equ	0xFDD
 13955                           fsr2h	equ	0xFDA
 13956                           fsr2l	equ	0xFD9
 13957                           status	equ	0xFD8
 13958                           
 13959 ;; *************** function _handler *****************
 13960 ;; Defined at:
 13961 ;;		line 16 in file "interruptHandler.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;		None
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;		None
 13966 ;; Return value:  Size  Location     Type
 13967 ;;                  1    wreg      void 
 13968 ;; Registers used:
 13969 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13970 ;; Tracked objects:
 13971 ;;		On entry : 0/0
 13972 ;;		On exit  : 0/0
 13973 ;;		Unchanged: 0/0
 13974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13977 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13978 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13979 ;;Total ram usage:       16 bytes
 13980 ;; Hardware stack levels used:    1
 13981 ;; Hardware stack levels required when called:    6
 13982 ;; This function calls:
 13983 ;;		_printSortTimer
 13984 ;;		_updateMenu
 13985 ;; This function is called by:
 13986 ;;		Interrupt level 2
 13987 ;; This function uses a non-reentrant model
 13988 ;;
 13989                           
 13990                           	psect	intcode
 13991  000008                     __pintcode:
 13992                           	opt stack 0
 13993  000008                     _handler:
 13994                           	opt stack 18
 13995                           
 13996                           ;incstack = 0
 13997  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13998  00000A  ED01  F013         	call	int_func,f	;refresh shadow registers
 13999                           tblptru	equ	0xFF8
 14000                           tblptrh	equ	0xFF7
 14001                           tblptrl	equ	0xFF6
 14002                           tablat	equ	0xFF5
 14003                           prodh	equ	0xFF4
 14004                           prodl	equ	0xFF3
 14005                           intcon	equ	0xFF2
 14006                           intcon2	equ	0xFF1
 14007                           intcon3	equ	0xFF0
 14008                           indf0	equ	0xFEF
 14009                           postinc0	equ	0xFEE
 14010                           fsr0h	equ	0xFEA
 14011                           fsr0l	equ	0xFE9
 14012                           wreg	equ	0xFE8
 14013                           postdec1	equ	0xFE5
 14014                           fsr1l	equ	0xFE1
 14015                           indf2	equ	0xFDF
 14016                           postinc2	equ	0xFDE
 14017                           postdec2	equ	0xFDD
 14018                           fsr2h	equ	0xFDA
 14019                           fsr2l	equ	0xFD9
 14020                           status	equ	0xFD8
 14021                           
 14022                           	psect	intcode_body
 14023  002602                     __pintcode_body:
 14024                           	opt stack 18
 14025  002602                     int_func:
 14026                           	opt stack 18
 14027  002602  0006               	pop		; remove dummy address from shadow register refresh
 14028  002604  CFFA F04D          	movff	pclath,??_handler+2
 14029  002608  CFFB F04E          	movff	pclatu,??_handler+3
 14030  00260C  CFE9 F04F          	movff	fsr0l,??_handler+4
 14031  002610  CFEA F050          	movff	fsr0h,??_handler+5
 14032  002614  CFE1 F051          	movff	fsr1l,??_handler+6
 14033  002618  CFE2 F052          	movff	fsr1h,??_handler+7
 14034  00261C  CFD9 F053          	movff	fsr2l,??_handler+8
 14035  002620  CFDA F054          	movff	fsr2h,??_handler+9
 14036  002624  CFF3 F055          	movff	prodl,??_handler+10
 14037  002628  CFF4 F056          	movff	prodh,??_handler+11
 14038  00262C  CFF6 F057          	movff	tblptrl,??_handler+12
 14039  002630  CFF7 F058          	movff	tblptrh,??_handler+13
 14040  002634  CFF8 F059          	movff	tblptru,??_handler+14
 14041  002638  CFF5 F05A          	movff	tablat,??_handler+15
 14042                           
 14043                           ;interruptHandler.c: 18: if(INT1IF){
 14044  00263C  A0F0               	btfss	intcon3,0,c	;volatile
 14045  00263E  D020               	goto	i2l7601
 14046                           
 14047                           ;interruptHandler.c: 19: INT1IF = 0;
 14048  002640  90F0               	bcf	intcon3,0,c	;volatile
 14049                           
 14050                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 14051  002642  0100               	movlb	0	; () banked
 14052  002644  51FC               	movf	_machine_state& (0+255),w,b
 14053  002646  A4D8               	btfss	status,2,c
 14054  002648  D01B               	goto	i2l7601
 14055                           
 14056                           ; BSR set to: 0
 14057                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 14058  00264A  3881               	swapf	3969,w,c	;volatile
 14059  00264C  0B0F               	andlw	15
 14060  00264E  0B0F               	andlw	15
 14061  002650  6E4B               	movwf	??_handler& (0+255),c
 14062  002652  6A4C               	clrf	(??_handler+1)& (0+255),c
 14063  002654  0E4F               	movlw	low _keys
 14064  002656  244B               	addwf	??_handler,w,c
 14065  002658  6EF6               	movwf	tblptrl,c
 14066  00265A  0EFB               	movlw	high _keys
 14067  00265C  204C               	addwfc	??_handler+1,w,c
 14068  00265E  6EF7               	movwf	tblptrh,c
 14069  002660                     	if	1	;There are 3 active tblptr bytes
 14070  002660  6AF8               	clrf	tblptru,c
 14071  002662  0E00               	movlw	low (__mediumconst shr (0+16))
 14072  002664  22F8               	addwfc	tblptru,f,c
 14073  002666                     	endif
 14074  002666  0008               	tblrd		*
 14075  002668  CFF5 F07D          	movff	tablat,_input	;volatile
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;interruptHandler.c: 23: if(input == '*'){
 14079  00266C  0E2A               	movlw	42
 14080  00266E  187D               	xorwf	_input,w,c	;volatile
 14081  002670  A4D8               	btfss	status,2,c
 14082  002672  D004               	goto	i2l7599
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;interruptHandler.c: 24: machine_state = Testing_state;
 14086  002674  0E03               	movlw	3
 14087  002676  0100               	movlb	0	; () banked
 14088  002678  6FFC               	movwf	_machine_state& (0+255),b
 14089                           
 14090                           ;interruptHandler.c: 25: }
 14091  00267A  D002               	goto	i2l7601
 14092  00267C                     i2l7599:
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;interruptHandler.c: 26: else{
 14096                           ;interruptHandler.c: 27: updateMenu();
 14097  00267C  ECD4  F00D         	call	_updateMenu	;wreg free
 14098  002680                     i2l7601:
 14099                           
 14100                           ;interruptHandler.c: 28: }
 14101                           ;interruptHandler.c: 29: }
 14102                           ;interruptHandler.c: 30: }
 14103                           ;interruptHandler.c: 33: if(TMR0IF){
 14104  002680  A4F2               	btfss	intcon,2,c	;volatile
 14105  002682  D00C               	goto	i2l7615
 14106                           
 14107                           ;interruptHandler.c: 34: TMR0IF = 0;
 14108  002684  94F2               	bcf	intcon,2,c	;volatile
 14109                           
 14110                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 14111  002686  0100               	movlb	0	; () banked
 14112  002688  05FC               	decf	_machine_state& (0+255),w,b
 14113  00268A  A4D8               	btfss	status,2,c
 14114  00268C  D007               	goto	i2l7615
 14115                           
 14116                           ; BSR set to: 0
 14117                           ;interruptHandler.c: 36: printSortTimer();
 14118  00268E  EC4F  F010         	call	_printSortTimer	;wreg free
 14119                           
 14120                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 14121  002692  0E85               	movlw	133
 14122  002694  6ED7               	movwf	4055,c	;volatile
 14123                           
 14124                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 14125  002696  0EEE               	movlw	238
 14126  002698  6ED6               	movwf	4054,c	;volatile
 14127                           
 14128                           ;interruptHandler.c: 40: TMR0ON = 1;
 14129  00269A  8ED5               	bsf	4053,7,c	;volatile
 14130  00269C                     i2l7615:
 14131                           
 14132                           ;interruptHandler.c: 41: }
 14133                           ;interruptHandler.c: 42: }
 14134                           ;interruptHandler.c: 45: if(TMR1IF){
 14135  00269C  A09E               	btfss	3998,0,c	;volatile
 14136  00269E  D024               	goto	i2l7639
 14137                           
 14138                           ;interruptHandler.c: 46: TMR1IF = 0;
 14139  0026A0  909E               	bcf	3998,0,c	;volatile
 14140                           
 14141                           ;interruptHandler.c: 47: TMR1ON = 0;
 14142  0026A2  90CD               	bcf	4045,0,c	;volatile
 14143                           
 14144                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 14145  0026A4  0100               	movlb	0	; () banked
 14146  0026A6  05FC               	decf	_machine_state& (0+255),w,b
 14147  0026A8  A4D8               	btfss	status,2,c
 14148  0026AA  D01E               	goto	i2l7639
 14149                           
 14150                           ; BSR set to: 0
 14151                           ;interruptHandler.c: 49: if(was_low_1){
 14152  0026AC  5079               	movf	_was_low_1,w,c	;volatile
 14153  0026AE  107A               	iorwf	_was_low_1+1,w,c	;volatile
 14154  0026B0  B4D8               	btfsc	status,2,c
 14155  0026B2  D00A               	goto	i2l832
 14156                           
 14157                           ; BSR set to: 0
 14158                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 14159  0026B4  828B               	bsf	3979,1,c	;volatile
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;interruptHandler.c: 51: was_low_1 = 0;
 14163  0026B6  0E00               	movlw	0
 14164  0026B8  6E7A               	movwf	_was_low_1+1,c	;volatile
 14165  0026BA  0E00               	movlw	0
 14166  0026BC  6E79               	movwf	_was_low_1,c	;volatile
 14167                           
 14168                           ; BSR set to: 0
 14169                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 14170  0026BE  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 14171                           
 14172                           ; BSR set to: 0
 14173                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 14174  0026C2  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 14175                           
 14176                           ;interruptHandler.c: 54: }
 14177  0026C6  D00F               	goto	i2l7637
 14178  0026C8                     i2l832:
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;interruptHandler.c: 55: else{
 14182                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 14183  0026C8  928B               	bcf	3979,1,c	;volatile
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;interruptHandler.c: 57: was_low_1 = 1;
 14187  0026CA  0E00               	movlw	0
 14188  0026CC  6E7A               	movwf	_was_low_1+1,c	;volatile
 14189  0026CE  0E01               	movlw	1
 14190  0026D0  6E79               	movwf	_was_low_1,c	;volatile
 14191                           
 14192                           ; BSR set to: 0
 14193                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 14194  0026D2  0101               	movlb	1	; () banked
 14195  0026D4  511C               	movf	_servoTimes& (0+255),w,b
 14196  0026D6  0800               	sublw	0
 14197  0026D8  0F20               	addlw	32
 14198  0026DA  6ECF               	movwf	4047,c	;volatile
 14199                           
 14200                           ; BSR set to: 1
 14201                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 14202  0026DC  0101               	movlb	1	; () banked
 14203  0026DE  511E               	movf	(_servoTimes+2)& (0+255),w,b
 14204  0026E0  0800               	sublw	0
 14205  0026E2  0F20               	addlw	32
 14206  0026E4  6ECE               	movwf	4046,c	;volatile
 14207  0026E6                     i2l7637:
 14208                           
 14209                           ;interruptHandler.c: 60: }
 14210                           ;interruptHandler.c: 61: TMR1ON = 1;
 14211  0026E6  80CD               	bsf	4045,0,c	;volatile
 14212  0026E8                     i2l7639:
 14213                           
 14214                           ;interruptHandler.c: 62: }
 14215                           ;interruptHandler.c: 63: }
 14216                           ;interruptHandler.c: 65: if(TMR3IF){
 14217  0026E8  A2A1               	btfss	4001,1,c	;volatile
 14218  0026EA  D024               	goto	i2l838
 14219                           
 14220                           ;interruptHandler.c: 66: TMR3IF = 0;
 14221  0026EC  92A1               	bcf	4001,1,c	;volatile
 14222                           
 14223                           ;interruptHandler.c: 67: TMR3ON = 0;
 14224  0026EE  90B1               	bcf	4017,0,c	;volatile
 14225                           
 14226                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 14227  0026F0  0100               	movlb	0	; () banked
 14228  0026F2  05FC               	decf	_machine_state& (0+255),w,b
 14229  0026F4  A4D8               	btfss	status,2,c
 14230  0026F6  D01E               	goto	i2l838
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;interruptHandler.c: 69: if(was_low_3){
 14234  0026F8  507B               	movf	_was_low_3,w,c	;volatile
 14235  0026FA  107C               	iorwf	_was_low_3+1,w,c	;volatile
 14236  0026FC  B4D8               	btfsc	status,2,c
 14237  0026FE  D00A               	goto	i2l836
 14238                           
 14239                           ; BSR set to: 0
 14240                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 14241  002700  848B               	bsf	3979,2,c	;volatile
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;interruptHandler.c: 71: was_low_3 = 0;
 14245  002702  0E00               	movlw	0
 14246  002704  6E7C               	movwf	_was_low_3+1,c	;volatile
 14247  002706  0E00               	movlw	0
 14248  002708  6E7B               	movwf	_was_low_3,c	;volatile
 14249                           
 14250                           ; BSR set to: 0
 14251                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 14252  00270A  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 14253                           
 14254                           ; BSR set to: 0
 14255                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 14256  00270E  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 14257                           
 14258                           ;interruptHandler.c: 74: }
 14259  002712  D00F               	goto	i2l7661
 14260  002714                     i2l836:
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;interruptHandler.c: 75: else{
 14264                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 14265  002714  948B               	bcf	3979,2,c	;volatile
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;interruptHandler.c: 77: was_low_3 = 1;
 14269  002716  0E00               	movlw	0
 14270  002718  6E7C               	movwf	_was_low_3+1,c	;volatile
 14271  00271A  0E01               	movlw	1
 14272  00271C  6E7B               	movwf	_was_low_3,c	;volatile
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 14276  00271E  0101               	movlb	1	; () banked
 14277  002720  5120               	movf	(_servoTimes+4)& (0+255),w,b
 14278  002722  0800               	sublw	0
 14279  002724  0F20               	addlw	32
 14280  002726  6EB3               	movwf	4019,c	;volatile
 14281                           
 14282                           ; BSR set to: 1
 14283                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 14284  002728  0101               	movlb	1	; () banked
 14285  00272A  5122               	movf	(_servoTimes+6)& (0+255),w,b
 14286  00272C  0800               	sublw	0
 14287  00272E  0F20               	addlw	32
 14288  002730  6EB2               	movwf	4018,c	;volatile
 14289  002732                     i2l7661:
 14290                           
 14291                           ;interruptHandler.c: 80: }
 14292                           ;interruptHandler.c: 81: TMR3ON = 1;
 14293  002732  80B1               	bsf	4017,0,c	;volatile
 14294  002734                     i2l838:
 14295  002734  C05A  FFF5         	movff	??_handler+15,tablat
 14296  002738  C059  FFF8         	movff	??_handler+14,tblptru
 14297  00273C  C058  FFF7         	movff	??_handler+13,tblptrh
 14298  002740  C057  FFF6         	movff	??_handler+12,tblptrl
 14299  002744  C056  FFF4         	movff	??_handler+11,prodh
 14300  002748  C055  FFF3         	movff	??_handler+10,prodl
 14301  00274C  C054  FFDA         	movff	??_handler+9,fsr2h
 14302  002750  C053  FFD9         	movff	??_handler+8,fsr2l
 14303  002754  C052  FFE2         	movff	??_handler+7,fsr1h
 14304  002758  C051  FFE1         	movff	??_handler+6,fsr1l
 14305  00275C  C050  FFEA         	movff	??_handler+5,fsr0h
 14306  002760  C04F  FFE9         	movff	??_handler+4,fsr0l
 14307  002764  C04E  FFFB         	movff	??_handler+3,pclatu
 14308  002768  C04D  FFFA         	movff	??_handler+2,pclath
 14309  00276C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14310  00276E  0011               	retfie		f
 14311  002770                     __end_of_handler:
 14312                           	opt stack 0
 14313                           pclatu	equ	0xFFB
 14314                           pclath	equ	0xFFA
 14315                           tblptru	equ	0xFF8
 14316                           tblptrh	equ	0xFF7
 14317                           tblptrl	equ	0xFF6
 14318                           tablat	equ	0xFF5
 14319                           prodh	equ	0xFF4
 14320                           prodl	equ	0xFF3
 14321                           intcon	equ	0xFF2
 14322                           intcon2	equ	0xFF1
 14323                           intcon3	equ	0xFF0
 14324                           indf0	equ	0xFEF
 14325                           postinc0	equ	0xFEE
 14326                           fsr0h	equ	0xFEA
 14327                           fsr0l	equ	0xFE9
 14328                           wreg	equ	0xFE8
 14329                           postdec1	equ	0xFE5
 14330                           fsr1h	equ	0xFE2
 14331                           fsr1l	equ	0xFE1
 14332                           indf2	equ	0xFDF
 14333                           postinc2	equ	0xFDE
 14334                           postdec2	equ	0xFDD
 14335                           fsr2h	equ	0xFDA
 14336                           fsr2l	equ	0xFD9
 14337                           status	equ	0xFD8
 14338                           
 14339 ;; *************** function _updateMenu *****************
 14340 ;; Defined at:
 14341 ;;		line 211 in file "UI.c"
 14342 ;; Parameters:    Size  Location     Type
 14343 ;;		None
 14344 ;; Auto vars:     Size  Location     Type
 14345 ;;		None
 14346 ;; Return value:  Size  Location     Type
 14347 ;;                  1    wreg      void 
 14348 ;; Registers used:
 14349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14350 ;; Tracked objects:
 14351 ;;		On entry : 0/0
 14352 ;;		On exit  : 0/0
 14353 ;;		Unchanged: 0/0
 14354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14357 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14358 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14359 ;;Total ram usage:        2 bytes
 14360 ;; Hardware stack levels used:    1
 14361 ;; Hardware stack levels required when called:    5
 14362 ;; This function calls:
 14363 ;;		_change_state_to_logs_11
 14364 ;;		_change_state_to_logs_12
 14365 ;;		_change_state_to_logs_22
 14366 ;;		_change_state_to_logs_23
 14367 ;;		_change_state_to_logs_33
 14368 ;;		_change_state_to_logs_34
 14369 ;;		_change_state_to_menu_11
 14370 ;;		_change_state_to_menu_23
 14371 ;;		_dispLogs
 14372 ;;		_inputHandler
 14373 ;;		i2_change_state_to_menu_12
 14374 ;;		i2_change_state_to_menu_22
 14375 ;;		i2_change_state_to_menu_start
 14376 ;; This function is called by:
 14377 ;;		_handler
 14378 ;; This function uses a non-reentrant model
 14379 ;;
 14380                           
 14381                           	psect	text55
 14382  001BA8                     __ptext55:
 14383                           	opt stack 0
 14384  001BA8                     _updateMenu:
 14385                           	opt stack 18
 14386                           
 14387                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 14388                           
 14389                           ;incstack = 0
 14390  001BA8  0E00               	movlw	0
 14391  001BAA  6E78               	movwf	_up+1,c
 14392  001BAC  0E00               	movlw	0
 14393  001BAE  6E77               	movwf	_up,c
 14394  001BB0  0E00               	movlw	0
 14395  001BB2  6E68               	movwf	_down+1,c
 14396  001BB4  0E00               	movlw	0
 14397  001BB6  6E67               	movwf	_down,c
 14398  001BB8  0E00               	movlw	0
 14399  001BBA  6E6A               	movwf	_enter+1,c
 14400  001BBC  0E00               	movlw	0
 14401  001BBE  6E69               	movwf	_enter,c
 14402  001BC0  0E00               	movlw	0
 14403  001BC2  6E5C               	movwf	_back+1,c
 14404  001BC4  0E00               	movlw	0
 14405  001BC6  6E5B               	movwf	_back,c
 14406                           
 14407                           ;UI.c: 213: (INTCONbits.GIE = 0);
 14408  001BC8  9EF2               	bcf	intcon,7,c	;volatile
 14409                           
 14410                           ;UI.c: 215: if (inputHandler()
 14411                           ;UI.c: 218: ){
 14412  001BCA  EC48  F011         	call	_inputHandler	;wreg free
 14413  001BCE  502A               	movf	?_inputHandler,w,c
 14414  001BD0  102B               	iorwf	?_inputHandler+1,w,c
 14415  001BD2  A4D8               	btfss	status,2,c
 14416  001BD4  D112               	goto	i2l7345
 14417  001BD6  D146               	goto	i2l254
 14418  001BD8                     i2l7197:
 14419                           
 14420                           ;UI.c: 222: change_state_to_menu_11();
 14421  001BD8  EC9B  F01E         	call	_change_state_to_menu_11	;wreg free
 14422                           
 14423                           ;UI.c: 223: break;
 14424  001BDC  D143               	goto	i2l254
 14425  001BDE                     i2l7199:
 14426                           
 14427                           ;UI.c: 226: if(up){
 14428  001BDE  5077               	movf	_up,w,c
 14429  001BE0  1078               	iorwf	_up+1,w,c
 14430  001BE2  B4D8               	btfsc	status,2,c
 14431  001BE4  D003               	goto	i2l7203
 14432                           
 14433                           ;UI.c: 227: change_state_to_menu_23();
 14434  001BE6  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14435                           
 14436                           ;UI.c: 228: }
 14437  001BEA  D13C               	goto	i2l254
 14438  001BEC                     i2l7203:
 14439                           
 14440                           ;UI.c: 229: else if(down){
 14441  001BEC  5067               	movf	_down,w,c
 14442  001BEE  1068               	iorwf	_down+1,w,c
 14443  001BF0  B4D8               	btfsc	status,2,c
 14444  001BF2  D003               	goto	i2l7207
 14445                           
 14446                           ;UI.c: 230: change_state_to_menu_12();
 14447  001BF4  EC6B  F01E         	call	i2_change_state_to_menu_12	;wreg free
 14448                           
 14449                           ;UI.c: 231: }
 14450  001BF8  D135               	goto	i2l254
 14451  001BFA                     i2l7207:
 14452                           
 14453                           ;UI.c: 232: else if(enter){
 14454  001BFA  5069               	movf	_enter,w,c
 14455  001BFC  106A               	iorwf	_enter+1,w,c
 14456  001BFE  B4D8               	btfsc	status,2,c
 14457  001C00  D131               	goto	i2l254
 14458                           
 14459                           ;UI.c: 233: change_state_to_menu_start();
 14460  001C02  EC9A  F01F         	call	i2_change_state_to_menu_start	;wreg free
 14461                           
 14462                           ;UI.c: 234: }
 14463                           ;UI.c: 235: break;
 14464  001C06  D12E               	goto	i2l254
 14465  001C08                     i2l7211:
 14466                           
 14467                           ;UI.c: 238: if(up){
 14468  001C08  5077               	movf	_up,w,c
 14469  001C0A  1078               	iorwf	_up+1,w,c
 14470  001C0C  B4D8               	btfsc	status,2,c
 14471  001C0E  D003               	goto	i2l7215
 14472                           
 14473                           ;UI.c: 239: change_state_to_menu_11();
 14474  001C10  EC9B  F01E         	call	_change_state_to_menu_11	;wreg free
 14475                           
 14476                           ;UI.c: 240: }
 14477  001C14  D127               	goto	i2l254
 14478  001C16                     i2l7215:
 14479                           
 14480                           ;UI.c: 241: else if(down){
 14481  001C16  5067               	movf	_down,w,c
 14482  001C18  1068               	iorwf	_down+1,w,c
 14483  001C1A  B4D8               	btfsc	status,2,c
 14484  001C1C  D011               	goto	i2l7231
 14485                           
 14486                           ;UI.c: 242: change_state_to_menu_23();
 14487  001C1E  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14488                           
 14489                           ;UI.c: 243: }
 14490  001C22  D120               	goto	i2l254
 14491  001C24                     i2l7223:
 14492                           
 14493                           ;UI.c: 250: if(up){
 14494  001C24  5077               	movf	_up,w,c
 14495  001C26  1078               	iorwf	_up+1,w,c
 14496  001C28  B4D8               	btfsc	status,2,c
 14497  001C2A  D003               	goto	i2l7227
 14498                           
 14499                           ;UI.c: 251: change_state_to_menu_11();
 14500  001C2C  EC9B  F01E         	call	_change_state_to_menu_11	;wreg free
 14501                           
 14502                           ;UI.c: 252: }
 14503  001C30  D119               	goto	i2l254
 14504  001C32                     i2l7227:
 14505                           
 14506                           ;UI.c: 253: else if(down){
 14507  001C32  5067               	movf	_down,w,c
 14508  001C34  1068               	iorwf	_down+1,w,c
 14509  001C36  B4D8               	btfsc	status,2,c
 14510  001C38  D003               	goto	i2l7231
 14511                           
 14512                           ;UI.c: 254: change_state_to_menu_23();
 14513  001C3A  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14514                           
 14515                           ;UI.c: 255: }
 14516  001C3E  D112               	goto	i2l254
 14517  001C40                     i2l7231:
 14518                           
 14519                           ;UI.c: 256: else if(enter){
 14520  001C40  5069               	movf	_enter,w,c
 14521  001C42  106A               	iorwf	_enter+1,w,c
 14522  001C44  B4D8               	btfsc	status,2,c
 14523  001C46  D10E               	goto	i2l254
 14524                           
 14525                           ;UI.c: 257: machine_state = Sorting_state;
 14526  001C48  0E01               	movlw	1
 14527  001C4A  0100               	movlb	0	; () banked
 14528  001C4C  6FFC               	movwf	_machine_state& (0+255),b
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;UI.c: 258: }
 14532                           ;UI.c: 259: break;
 14533                           
 14534                           ; BSR set to: 0
 14535                           
 14536                           ; BSR set to: 0
 14537  001C4E  D10A               	goto	i2l254
 14538  001C50                     i2l7235:
 14539                           
 14540                           ;UI.c: 262: if(up){
 14541  001C50  5077               	movf	_up,w,c
 14542  001C52  1078               	iorwf	_up+1,w,c
 14543  001C54  B4D8               	btfsc	status,2,c
 14544  001C56  D003               	goto	i2l7239
 14545                           
 14546                           ;UI.c: 263: change_state_to_menu_22();
 14547  001C58  EC53  F01E         	call	i2_change_state_to_menu_22	;wreg free
 14548                           
 14549                           ;UI.c: 264: }
 14550  001C5C  D103               	goto	i2l254
 14551  001C5E                     i2l7239:
 14552                           
 14553                           ;UI.c: 265: else if(down){
 14554  001C5E  5067               	movf	_down,w,c
 14555  001C60  1068               	iorwf	_down+1,w,c
 14556  001C62  B4D8               	btfsc	status,2,c
 14557  001C64  D003               	goto	i2l7243
 14558                           
 14559                           ;UI.c: 266: change_state_to_menu_11();
 14560  001C66  EC9B  F01E         	call	_change_state_to_menu_11	;wreg free
 14561                           
 14562                           ;UI.c: 267: }
 14563  001C6A  D0FC               	goto	i2l254
 14564  001C6C                     i2l7243:
 14565                           
 14566                           ;UI.c: 268: else if(enter){
 14567  001C6C  5069               	movf	_enter,w,c
 14568  001C6E  106A               	iorwf	_enter+1,w,c
 14569  001C70  B4D8               	btfsc	status,2,c
 14570  001C72  D0F8               	goto	i2l254
 14571                           
 14572                           ;UI.c: 269: change_state_to_logs_11();
 14573  001C74  EC13  F01F         	call	_change_state_to_logs_11	;wreg free
 14574                           
 14575                           ;UI.c: 270: }
 14576                           ;UI.c: 271: break;
 14577  001C78  D0F5               	goto	i2l254
 14578  001C7A                     i2l7247:
 14579                           
 14580                           ;UI.c: 274: if(up){
 14581  001C7A  5077               	movf	_up,w,c
 14582  001C7C  1078               	iorwf	_up+1,w,c
 14583  001C7E  B4D8               	btfsc	status,2,c
 14584  001C80  D003               	goto	i2l7251
 14585                           
 14586                           ;UI.c: 275: change_state_to_logs_34();
 14587  001C82  ECB3  F01E         	call	_change_state_to_logs_34	;wreg free
 14588                           
 14589                           ;UI.c: 276: }
 14590  001C86  D0EE               	goto	i2l254
 14591  001C88                     i2l7251:
 14592                           
 14593                           ;UI.c: 277: else if(down){
 14594  001C88  5067               	movf	_down,w,c
 14595  001C8A  1068               	iorwf	_down+1,w,c
 14596  001C8C  B4D8               	btfsc	status,2,c
 14597  001C8E  D003               	goto	i2l7255
 14598                           
 14599                           ;UI.c: 278: change_state_to_logs_12();
 14600  001C90  ECFB  F01E         	call	_change_state_to_logs_12	;wreg free
 14601                           
 14602                           ;UI.c: 279: }
 14603  001C94  D0E7               	goto	i2l254
 14604  001C96                     i2l7255:
 14605                           
 14606                           ;UI.c: 280: else if(enter){
 14607  001C96  5069               	movf	_enter,w,c
 14608  001C98  106A               	iorwf	_enter+1,w,c
 14609  001C9A  B4D8               	btfsc	status,2,c
 14610  001C9C  D007               	goto	i2l7259
 14611                           
 14612                           ;UI.c: 281: dispLogs(1);
 14613  001C9E  0E00               	movlw	0
 14614  001CA0  6E13               	movwf	dispLogs@myLog+1,c
 14615  001CA2  0E01               	movlw	1
 14616  001CA4  6E12               	movwf	dispLogs@myLog,c
 14617  001CA6  ECE6  F01F         	call	_dispLogs	;wreg free
 14618                           
 14619                           ;UI.c: 282: }
 14620  001CAA  D0DC               	goto	i2l254
 14621  001CAC                     i2l7259:
 14622                           
 14623                           ;UI.c: 283: else if(back){
 14624  001CAC  505B               	movf	_back,w,c
 14625  001CAE  105C               	iorwf	_back+1,w,c
 14626  001CB0  B4D8               	btfsc	status,2,c
 14627  001CB2  D0D8               	goto	i2l254
 14628                           
 14629                           ;UI.c: 284: change_state_to_menu_23();
 14630  001CB4  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14631                           
 14632                           ;UI.c: 285: }
 14633                           ;UI.c: 286: break;
 14634  001CB8  D0D5               	goto	i2l254
 14635  001CBA                     i2l7263:
 14636                           
 14637                           ;UI.c: 289: if(up){
 14638  001CBA  5077               	movf	_up,w,c
 14639  001CBC  1078               	iorwf	_up+1,w,c
 14640  001CBE  B4D8               	btfsc	status,2,c
 14641  001CC0  D003               	goto	i2l7267
 14642                           
 14643                           ;UI.c: 290: change_state_to_logs_11();
 14644  001CC2  EC13  F01F         	call	_change_state_to_logs_11	;wreg free
 14645                           
 14646                           ;UI.c: 291: }
 14647  001CC6  D0CE               	goto	i2l254
 14648  001CC8                     i2l7267:
 14649                           
 14650                           ;UI.c: 292: else if(down){
 14651  001CC8  5067               	movf	_down,w,c
 14652  001CCA  1068               	iorwf	_down+1,w,c
 14653  001CCC  B4D8               	btfsc	status,2,c
 14654  001CCE  D003               	goto	i2l7271
 14655                           
 14656                           ;UI.c: 293: change_state_to_logs_23();
 14657  001CD0  EC42  F01F         	call	_change_state_to_logs_23	;wreg free
 14658                           
 14659                           ;UI.c: 294: }
 14660  001CD4  D0C7               	goto	i2l254
 14661  001CD6                     i2l7271:
 14662                           
 14663                           ;UI.c: 295: else if(enter){
 14664  001CD6  5069               	movf	_enter,w,c
 14665  001CD8  106A               	iorwf	_enter+1,w,c
 14666  001CDA  B4D8               	btfsc	status,2,c
 14667  001CDC  D007               	goto	i2l7275
 14668                           
 14669                           ;UI.c: 296: dispLogs(2);
 14670  001CDE  0E00               	movlw	0
 14671  001CE0  6E13               	movwf	dispLogs@myLog+1,c
 14672  001CE2  0E02               	movlw	2
 14673  001CE4  6E12               	movwf	dispLogs@myLog,c
 14674  001CE6  ECE6  F01F         	call	_dispLogs	;wreg free
 14675                           
 14676                           ;UI.c: 297: }
 14677  001CEA  D0BC               	goto	i2l254
 14678  001CEC                     i2l7275:
 14679                           
 14680                           ;UI.c: 298: else if(back){
 14681  001CEC  505B               	movf	_back,w,c
 14682  001CEE  105C               	iorwf	_back+1,w,c
 14683  001CF0  B4D8               	btfsc	status,2,c
 14684  001CF2  D0B8               	goto	i2l254
 14685                           
 14686                           ;UI.c: 299: change_state_to_menu_23();
 14687  001CF4  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14688                           
 14689                           ;UI.c: 300: }
 14690                           ;UI.c: 301: break;
 14691  001CF8  D0B5               	goto	i2l254
 14692  001CFA                     i2l7279:
 14693                           
 14694                           ;UI.c: 304: if(up){
 14695  001CFA  5077               	movf	_up,w,c
 14696  001CFC  1078               	iorwf	_up+1,w,c
 14697  001CFE  B4D8               	btfsc	status,2,c
 14698  001D00  D003               	goto	i2l7283
 14699                           
 14700                           ;UI.c: 305: change_state_to_logs_11();
 14701  001D02  EC13  F01F         	call	_change_state_to_logs_11	;wreg free
 14702                           
 14703                           ;UI.c: 306: }
 14704  001D06  D0AE               	goto	i2l254
 14705  001D08                     i2l7283:
 14706                           
 14707                           ;UI.c: 307: else if(down){
 14708  001D08  5067               	movf	_down,w,c
 14709  001D0A  1068               	iorwf	_down+1,w,c
 14710  001D0C  B4D8               	btfsc	status,2,c
 14711  001D0E  D003               	goto	i2l7287
 14712                           
 14713                           ;UI.c: 308: change_state_to_logs_23();
 14714  001D10  EC42  F01F         	call	_change_state_to_logs_23	;wreg free
 14715                           
 14716                           ;UI.c: 309: }
 14717  001D14  D0A7               	goto	i2l254
 14718  001D16                     i2l7287:
 14719                           
 14720                           ;UI.c: 310: else if(enter){
 14721  001D16  5069               	movf	_enter,w,c
 14722  001D18  106A               	iorwf	_enter+1,w,c
 14723  001D1A  B4D8               	btfsc	status,2,c
 14724  001D1C  D007               	goto	i2l7291
 14725                           
 14726                           ;UI.c: 311: dispLogs(2);
 14727  001D1E  0E00               	movlw	0
 14728  001D20  6E13               	movwf	dispLogs@myLog+1,c
 14729  001D22  0E02               	movlw	2
 14730  001D24  6E12               	movwf	dispLogs@myLog,c
 14731  001D26  ECE6  F01F         	call	_dispLogs	;wreg free
 14732                           
 14733                           ;UI.c: 312: }
 14734  001D2A  D09C               	goto	i2l254
 14735  001D2C                     i2l7291:
 14736                           
 14737                           ;UI.c: 313: else if(back){
 14738  001D2C  505B               	movf	_back,w,c
 14739  001D2E  105C               	iorwf	_back+1,w,c
 14740  001D30  B4D8               	btfsc	status,2,c
 14741  001D32  D098               	goto	i2l254
 14742                           
 14743                           ;UI.c: 314: change_state_to_menu_23();
 14744  001D34  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14745                           
 14746                           ;UI.c: 315: }
 14747                           ;UI.c: 316: break;
 14748  001D38  D095               	goto	i2l254
 14749  001D3A                     i2l7295:
 14750                           
 14751                           ;UI.c: 319: if(up){
 14752  001D3A  5077               	movf	_up,w,c
 14753  001D3C  1078               	iorwf	_up+1,w,c
 14754  001D3E  B4D8               	btfsc	status,2,c
 14755  001D40  D003               	goto	i2l7299
 14756                           
 14757                           ;UI.c: 320: change_state_to_logs_22();
 14758  001D42  ECE3  F01E         	call	_change_state_to_logs_22	;wreg free
 14759                           
 14760                           ;UI.c: 321: }
 14761  001D46  D08E               	goto	i2l254
 14762  001D48                     i2l7299:
 14763                           
 14764                           ;UI.c: 322: else if(down){
 14765  001D48  5067               	movf	_down,w,c
 14766  001D4A  1068               	iorwf	_down+1,w,c
 14767  001D4C  B4D8               	btfsc	status,2,c
 14768  001D4E  D003               	goto	i2l7303
 14769                           
 14770                           ;UI.c: 323: change_state_to_logs_34();
 14771  001D50  ECB3  F01E         	call	_change_state_to_logs_34	;wreg free
 14772                           
 14773                           ;UI.c: 324: }
 14774  001D54  D087               	goto	i2l254
 14775  001D56                     i2l7303:
 14776                           
 14777                           ;UI.c: 325: else if(enter){
 14778  001D56  5069               	movf	_enter,w,c
 14779  001D58  106A               	iorwf	_enter+1,w,c
 14780  001D5A  B4D8               	btfsc	status,2,c
 14781  001D5C  D007               	goto	i2l7307
 14782                           
 14783                           ;UI.c: 326: dispLogs(3);
 14784  001D5E  0E00               	movlw	0
 14785  001D60  6E13               	movwf	dispLogs@myLog+1,c
 14786  001D62  0E03               	movlw	3
 14787  001D64  6E12               	movwf	dispLogs@myLog,c
 14788  001D66  ECE6  F01F         	call	_dispLogs	;wreg free
 14789                           
 14790                           ;UI.c: 327: }
 14791  001D6A  D07C               	goto	i2l254
 14792  001D6C                     i2l7307:
 14793                           
 14794                           ;UI.c: 328: else if(back){
 14795  001D6C  505B               	movf	_back,w,c
 14796  001D6E  105C               	iorwf	_back+1,w,c
 14797  001D70  B4D8               	btfsc	status,2,c
 14798  001D72  D078               	goto	i2l254
 14799                           
 14800                           ;UI.c: 329: change_state_to_menu_23();
 14801  001D74  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14802                           
 14803                           ;UI.c: 330: }
 14804                           ;UI.c: 331: break;
 14805  001D78  D075               	goto	i2l254
 14806  001D7A                     i2l7311:
 14807                           
 14808                           ;UI.c: 334: if(up){
 14809  001D7A  5077               	movf	_up,w,c
 14810  001D7C  1078               	iorwf	_up+1,w,c
 14811  001D7E  B4D8               	btfsc	status,2,c
 14812  001D80  D003               	goto	i2l7315
 14813                           
 14814                           ;UI.c: 335: change_state_to_logs_22();
 14815  001D82  ECE3  F01E         	call	_change_state_to_logs_22	;wreg free
 14816                           
 14817                           ;UI.c: 336: }
 14818  001D86  D06E               	goto	i2l254
 14819  001D88                     i2l7315:
 14820                           
 14821                           ;UI.c: 337: else if(down){
 14822  001D88  5067               	movf	_down,w,c
 14823  001D8A  1068               	iorwf	_down+1,w,c
 14824  001D8C  B4D8               	btfsc	status,2,c
 14825  001D8E  D003               	goto	i2l7319
 14826                           
 14827                           ;UI.c: 338: change_state_to_logs_34();
 14828  001D90  ECB3  F01E         	call	_change_state_to_logs_34	;wreg free
 14829                           
 14830                           ;UI.c: 339: }
 14831  001D94  D067               	goto	i2l254
 14832  001D96                     i2l7319:
 14833                           
 14834                           ;UI.c: 340: else if(enter){
 14835  001D96  5069               	movf	_enter,w,c
 14836  001D98  106A               	iorwf	_enter+1,w,c
 14837  001D9A  B4D8               	btfsc	status,2,c
 14838  001D9C  D007               	goto	i2l7323
 14839                           
 14840                           ;UI.c: 341: dispLogs(3);
 14841  001D9E  0E00               	movlw	0
 14842  001DA0  6E13               	movwf	dispLogs@myLog+1,c
 14843  001DA2  0E03               	movlw	3
 14844  001DA4  6E12               	movwf	dispLogs@myLog,c
 14845  001DA6  ECE6  F01F         	call	_dispLogs	;wreg free
 14846                           
 14847                           ;UI.c: 342: }
 14848  001DAA  D05C               	goto	i2l254
 14849  001DAC                     i2l7323:
 14850                           
 14851                           ;UI.c: 343: else if(back){
 14852  001DAC  505B               	movf	_back,w,c
 14853  001DAE  105C               	iorwf	_back+1,w,c
 14854  001DB0  B4D8               	btfsc	status,2,c
 14855  001DB2  D058               	goto	i2l254
 14856                           
 14857                           ;UI.c: 344: change_state_to_menu_23();
 14858  001DB4  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14859                           
 14860                           ;UI.c: 345: }
 14861                           ;UI.c: 346: break;
 14862  001DB8  D055               	goto	i2l254
 14863  001DBA                     i2l7327:
 14864                           
 14865                           ;UI.c: 349: if(up){
 14866  001DBA  5077               	movf	_up,w,c
 14867  001DBC  1078               	iorwf	_up+1,w,c
 14868  001DBE  B4D8               	btfsc	status,2,c
 14869  001DC0  D003               	goto	i2l7331
 14870                           
 14871                           ;UI.c: 350: change_state_to_logs_33();
 14872  001DC2  ECCB  F01E         	call	_change_state_to_logs_33	;wreg free
 14873                           
 14874                           ;UI.c: 351: }
 14875  001DC6  D04E               	goto	i2l254
 14876  001DC8                     i2l7331:
 14877                           
 14878                           ;UI.c: 352: else if(down){
 14879  001DC8  5067               	movf	_down,w,c
 14880  001DCA  1068               	iorwf	_down+1,w,c
 14881  001DCC  B4D8               	btfsc	status,2,c
 14882  001DCE  D003               	goto	i2l7335
 14883                           
 14884                           ;UI.c: 353: change_state_to_logs_11();
 14885  001DD0  EC13  F01F         	call	_change_state_to_logs_11	;wreg free
 14886                           
 14887                           ;UI.c: 354: }
 14888  001DD4  D047               	goto	i2l254
 14889  001DD6                     i2l7335:
 14890                           
 14891                           ;UI.c: 355: else if(enter){
 14892  001DD6  5069               	movf	_enter,w,c
 14893  001DD8  106A               	iorwf	_enter+1,w,c
 14894  001DDA  B4D8               	btfsc	status,2,c
 14895  001DDC  D007               	goto	i2l7339
 14896                           
 14897                           ;UI.c: 356: dispLogs(4);
 14898  001DDE  0E00               	movlw	0
 14899  001DE0  6E13               	movwf	dispLogs@myLog+1,c
 14900  001DE2  0E04               	movlw	4
 14901  001DE4  6E12               	movwf	dispLogs@myLog,c
 14902  001DE6  ECE6  F01F         	call	_dispLogs	;wreg free
 14903                           
 14904                           ;UI.c: 357: }
 14905  001DEA  D03C               	goto	i2l254
 14906  001DEC                     i2l7339:
 14907                           
 14908                           ;UI.c: 358: else if(back){
 14909  001DEC  505B               	movf	_back,w,c
 14910  001DEE  105C               	iorwf	_back+1,w,c
 14911  001DF0  B4D8               	btfsc	status,2,c
 14912  001DF2  D038               	goto	i2l254
 14913                           
 14914                           ;UI.c: 359: change_state_to_menu_23();
 14915  001DF4  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 14916                           
 14917                           ;UI.c: 365: }
 14918                           
 14919                           ;UI.c: 364: break;
 14920                           
 14921                           ;UI.c: 363: default:
 14922                           
 14923                           ;UI.c: 360: }
 14924                           ;UI.c: 361: break;
 14925  001DF8  D035               	goto	i2l254
 14926  001DFA                     i2l7345:
 14927  001DFA  C0DE  F043         	movff	_cur_state,??_updateMenu
 14928  001DFE  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 14929                           
 14930                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 14931                           ; Switch size 1, requested type "space"
 14932                           ; Number of cases is 3, Range of values is 0 to 4
 14933                           ; switch strategies available:
 14934                           ; Name         Instructions Cycles
 14935                           ; simple_byte           10     6 (average)
 14936                           ;	Chosen strategy is simple_byte
 14937  001E02  5044               	movf	??_updateMenu+1,w,c
 14938  001E04  0A00               	xorlw	0	; case 0
 14939  001E06  B4D8               	btfsc	status,2,c
 14940  001E08  D007               	goto	i2l7925
 14941  001E0A  0A03               	xorlw	3	; case 3
 14942  001E0C  B4D8               	btfsc	status,2,c
 14943  001E0E  D015               	goto	i2l7927
 14944  001E10  0A07               	xorlw	7	; case 4
 14945  001E12  B4D8               	btfsc	status,2,c
 14946  001E14  D020               	goto	i2l7929
 14947  001E16  D026               	goto	i2l254
 14948  001E18                     i2l7925:
 14949                           
 14950                           ; Switch size 1, requested type "space"
 14951                           ; Number of cases is 5, Range of values is 0 to 23
 14952                           ; switch strategies available:
 14953                           ; Name         Instructions Cycles
 14954                           ; simple_byte           16     9 (average)
 14955                           ;	Chosen strategy is simple_byte
 14956  001E18  5043               	movf	??_updateMenu,w,c
 14957  001E1A  0A00               	xorlw	0	; case 0
 14958  001E1C  B4D8               	btfsc	status,2,c
 14959  001E1E  D6DC               	goto	i2l7197
 14960  001E20  0A0B               	xorlw	11	; case 11
 14961  001E22  B4D8               	btfsc	status,2,c
 14962  001E24  D6DC               	goto	i2l7199
 14963  001E26  0A07               	xorlw	7	; case 12
 14964  001E28  B4D8               	btfsc	status,2,c
 14965  001E2A  D6EE               	goto	i2l7211
 14966  001E2C  0A1A               	xorlw	26	; case 22
 14967  001E2E  B4D8               	btfsc	status,2,c
 14968  001E30  D6F9               	goto	i2l7223
 14969  001E32  0A01               	xorlw	1	; case 23
 14970  001E34  B4D8               	btfsc	status,2,c
 14971  001E36  D70C               	goto	i2l7235
 14972  001E38  D015               	goto	i2l254
 14973  001E3A                     i2l7927:
 14974                           
 14975                           ; Switch size 1, requested type "space"
 14976                           ; Number of cases is 4, Range of values is 243 to 255
 14977                           ; switch strategies available:
 14978                           ; Name         Instructions Cycles
 14979                           ; simple_byte           13     7 (average)
 14980                           ;	Chosen strategy is simple_byte
 14981  001E3A  5043               	movf	??_updateMenu,w,c
 14982  001E3C  0AF3               	xorlw	243	; case 243
 14983  001E3E  B4D8               	btfsc	status,2,c
 14984  001E40  D71C               	goto	i2l7247
 14985  001E42  0A07               	xorlw	7	; case 244
 14986  001E44  B4D8               	btfsc	status,2,c
 14987  001E46  D739               	goto	i2l7263
 14988  001E48  0A0A               	xorlw	10	; case 254
 14989  001E4A  B4D8               	btfsc	status,2,c
 14990  001E4C  D756               	goto	i2l7279
 14991  001E4E  0A01               	xorlw	1	; case 255
 14992  001E50  B4D8               	btfsc	status,2,c
 14993  001E52  D773               	goto	i2l7295
 14994  001E54  D007               	goto	i2l254
 14995  001E56                     i2l7929:
 14996                           
 14997                           ; Switch size 1, requested type "space"
 14998                           ; Number of cases is 2, Range of values is 9 to 10
 14999                           ; switch strategies available:
 15000                           ; Name         Instructions Cycles
 15001                           ; simple_byte            7     4 (average)
 15002                           ;	Chosen strategy is simple_byte
 15003  001E56  5043               	movf	??_updateMenu,w,c
 15004  001E58  0A09               	xorlw	9	; case 9
 15005  001E5A  B4D8               	btfsc	status,2,c
 15006  001E5C  D78E               	goto	i2l7311
 15007  001E5E  0A03               	xorlw	3	; case 10
 15008  001E60  B4D8               	btfsc	status,2,c
 15009  001E62  D7AB               	goto	i2l7327
 15010  001E64                     i2l254:
 15011                           
 15012                           ;UI.c: 366: }
 15013                           ;UI.c: 367: (INTCONbits.GIE = 1);
 15014  001E64  8EF2               	bsf	intcon,7,c	;volatile
 15015  001E66  0012               	return		;funcret
 15016  001E68                     __end_of_updateMenu:
 15017                           	opt stack 0
 15018                           pclatu	equ	0xFFB
 15019                           pclath	equ	0xFFA
 15020                           tblptru	equ	0xFF8
 15021                           tblptrh	equ	0xFF7
 15022                           tblptrl	equ	0xFF6
 15023                           tablat	equ	0xFF5
 15024                           prodh	equ	0xFF4
 15025                           prodl	equ	0xFF3
 15026                           intcon	equ	0xFF2
 15027                           intcon2	equ	0xFF1
 15028                           intcon3	equ	0xFF0
 15029                           indf0	equ	0xFEF
 15030                           postinc0	equ	0xFEE
 15031                           fsr0h	equ	0xFEA
 15032                           fsr0l	equ	0xFE9
 15033                           wreg	equ	0xFE8
 15034                           postdec1	equ	0xFE5
 15035                           fsr1h	equ	0xFE2
 15036                           fsr1l	equ	0xFE1
 15037                           indf2	equ	0xFDF
 15038                           postinc2	equ	0xFDE
 15039                           postdec2	equ	0xFDD
 15040                           fsr2h	equ	0xFDA
 15041                           fsr2l	equ	0xFD9
 15042                           status	equ	0xFD8
 15043                           
 15044 ;; *************** function i2_change_state_to_menu_start *****************
 15045 ;; Defined at:
 15046 ;;		line 472 in file "UI.c"
 15047 ;; Parameters:    Size  Location     Type
 15048 ;;		None
 15049 ;; Auto vars:     Size  Location     Type
 15050 ;;		None
 15051 ;; Return value:  Size  Location     Type
 15052 ;;                  1    wreg      void 
 15053 ;; Registers used:
 15054 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15055 ;; Tracked objects:
 15056 ;;		On entry : 0/0
 15057 ;;		On exit  : 0/0
 15058 ;;		Unchanged: 0/0
 15059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15064 ;;Total ram usage:        0 bytes
 15065 ;; Hardware stack levels used:    1
 15066 ;; Hardware stack levels required when called:    4
 15067 ;; This function calls:
 15068 ;;		i2_lcdInst
 15069 ;;		i2_printRTC
 15070 ;;		i2_printf
 15071 ;; This function is called by:
 15072 ;;		_updateMenu
 15073 ;; This function uses a non-reentrant model
 15074 ;;
 15075                           
 15076                           	psect	text56
 15077  003F34                     __ptext56:
 15078                           	opt stack 0
 15079  003F34                     i2_change_state_to_menu_start:
 15080                           	opt stack 18
 15081                           
 15082                           ;UI.c: 473: cur_state = 0;
 15083                           
 15084                           ;incstack = 0
 15085  003F34  0E00               	movlw	0
 15086  003F36  0100               	movlb	0	; () banked
 15087  003F38  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15088  003F3A  0E00               	movlw	0
 15089  003F3C  6FDE               	movwf	_cur_state& (0+255),b
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;UI.c: 475: lcdInst(0b10000000);;
 15093  003F3E  0E80               	movlw	128
 15094  003F40  EC74  F020         	call	i2_lcdInst
 15095                           
 15096                           ;UI.c: 476: printRTC();
 15097  003F44  EC34  F00F         	call	i2_printRTC	;wreg free
 15098                           
 15099                           ;UI.c: 477: lcdInst(0b11000000);;
 15100  003F48  0EC0               	movlw	192
 15101  003F4A  EC74  F020         	call	i2_lcdInst
 15102                           
 15103                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 15104  003F4E  0E36               	movlw	low STR_30
 15105  003F50  6E0D               	movwf	i2printf@f,c
 15106  003F52  0EFE               	movlw	high STR_30
 15107  003F54  6E0E               	movwf	i2printf@f+1,c
 15108  003F56  ECB8  F00A         	call	i2_printf	;wreg free
 15109  003F5A  0012               	return		;funcret
 15110  003F5C                     __end_ofi2_change_state_to_menu_start:
 15111                           	opt stack 0
 15112                           pclatu	equ	0xFFB
 15113                           pclath	equ	0xFFA
 15114                           tblptru	equ	0xFF8
 15115                           tblptrh	equ	0xFF7
 15116                           tblptrl	equ	0xFF6
 15117                           tablat	equ	0xFF5
 15118                           prodh	equ	0xFF4
 15119                           prodl	equ	0xFF3
 15120                           intcon	equ	0xFF2
 15121                           intcon2	equ	0xFF1
 15122                           intcon3	equ	0xFF0
 15123                           indf0	equ	0xFEF
 15124                           postinc0	equ	0xFEE
 15125                           fsr0h	equ	0xFEA
 15126                           fsr0l	equ	0xFE9
 15127                           wreg	equ	0xFE8
 15128                           postdec1	equ	0xFE5
 15129                           fsr1h	equ	0xFE2
 15130                           fsr1l	equ	0xFE1
 15131                           indf2	equ	0xFDF
 15132                           postinc2	equ	0xFDE
 15133                           postdec2	equ	0xFDD
 15134                           fsr2h	equ	0xFDA
 15135                           fsr2l	equ	0xFD9
 15136                           status	equ	0xFD8
 15137                           
 15138 ;; *************** function i2_printRTC *****************
 15139 ;; Defined at:
 15140 ;;		line 63 in file "RTC.c"
 15141 ;; Parameters:    Size  Location     Type
 15142 ;;		None
 15143 ;; Auto vars:     Size  Location     Type
 15144 ;;  printRTC       14   44[COMRAM] int [7]
 15145 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 15146 ;;  printRTC        2   64[COMRAM] int 
 15147 ;;  printRTC        2   58[COMRAM] int 
 15148 ;; Return value:  Size  Location     Type
 15149 ;;                  1    wreg      void 
 15150 ;; Registers used:
 15151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15152 ;; Tracked objects:
 15153 ;;		On entry : 0/0
 15154 ;;		On exit  : 0/0
 15155 ;;		Unchanged: 0/0
 15156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15158 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15159 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15160 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15161 ;;Total ram usage:       25 bytes
 15162 ;; Hardware stack levels used:    1
 15163 ;; Hardware stack levels required when called:    3
 15164 ;; This function calls:
 15165 ;;		i2_getRTC
 15166 ;;		i2_lcdInst
 15167 ;;		i2_printf
 15168 ;;		i2_strcpy
 15169 ;; This function is called by:
 15170 ;;		i2_change_state_to_menu_start
 15171 ;; This function uses a non-reentrant model
 15172 ;;
 15173                           
 15174                           	psect	text57
 15175  001E68                     __ptext57:
 15176                           	opt stack 0
 15177  001E68                     i2_printRTC:
 15178                           	opt stack 18
 15179                           
 15180                           ;RTC.c: 64: getRTC();
 15181                           
 15182                           ;incstack = 0
 15183  001E68  EC11  F01B         	call	i2_getRTC	;wreg free
 15184                           
 15185                           ;RTC.c: 65: char month[] = "MMM";
 15186  001E6C  C131  F03D         	movff	printRTC@F3211,i2printRTC@month
 15187  001E70  C132  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 15188  001E74  C133  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 15189  001E78  C134  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 15190                           
 15191                           ;RTC.c: 66: int INT_time[7];
 15192                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 15193  001E7C  0E00               	movlw	0
 15194  001E7E  6E42               	movwf	i2printRTC@i+1,c
 15195  001E80  0E00               	movlw	0
 15196  001E82  6E41               	movwf	i2printRTC@i,c
 15197  001E84  BE42               	btfsc	i2printRTC@i+1,7,c
 15198  001E86  D006               	goto	i2l5811
 15199  001E88  5042               	movf	i2printRTC@i+1,w,c
 15200  001E8A  E135               	bnz	i2l591
 15201  001E8C  0E07               	movlw	7
 15202  001E8E  5C41               	subwf	i2printRTC@i,w,c
 15203  001E90  B0D8               	btfsc	status,0,c
 15204  001E92  D031               	goto	i2l591
 15205  001E94                     i2l5811:
 15206                           
 15207                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 15208  001E94  0E24               	movlw	low _time
 15209  001E96  2441               	addwf	i2printRTC@i,w,c
 15210  001E98  6ED9               	movwf	fsr2l,c
 15211  001E9A  0E01               	movlw	high _time
 15212  001E9C  2042               	addwfc	i2printRTC@i+1,w,c
 15213  001E9E  6EDA               	movwf	fsr2h,c
 15214  001EA0  50DF               	movf	indf2,w,c
 15215  001EA2  6E2A               	movwf	??i2_printRTC& (0+255),c
 15216  001EA4  3A2A               	swapf	??i2_printRTC,f,c
 15217  001EA6  0E0F               	movlw	15
 15218  001EA8  162A               	andwf	??i2_printRTC,f,c
 15219  001EAA  0E0F               	movlw	15
 15220  001EAC  162A               	andwf	??i2_printRTC,f,c
 15221  001EAE  502A               	movf	??i2_printRTC,w,c
 15222  001EB0  0D0A               	mullw	10
 15223  001EB2  0E24               	movlw	low _time
 15224  001EB4  2441               	addwf	i2printRTC@i,w,c
 15225  001EB6  6ED9               	movwf	fsr2l,c
 15226  001EB8  0E01               	movlw	high _time
 15227  001EBA  2042               	addwfc	i2printRTC@i+1,w,c
 15228  001EBC  6EDA               	movwf	fsr2h,c
 15229  001EBE  50DF               	movf	indf2,w,c
 15230  001EC0  0B0F               	andlw	15
 15231  001EC2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 15232  001EC4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 15233  001EC6  50F3               	movf	prodl,w,c
 15234  001EC8  262B               	addwf	??i2_printRTC+1,f,c
 15235  001ECA  50F4               	movf	prodh,w,c
 15236  001ECC  222C               	addwfc	??i2_printRTC+2,f,c
 15237  001ECE  90D8               	bcf	status,0,c
 15238  001ED0  3441               	rlcf	i2printRTC@i,w,c
 15239  001ED2  6ED9               	movwf	fsr2l,c
 15240  001ED4  3442               	rlcf	i2printRTC@i+1,w,c
 15241  001ED6  6EDA               	movwf	fsr2h,c
 15242  001ED8  0E2D               	movlw	low i2printRTC@INT_time
 15243  001EDA  26D9               	addwf	fsr2l,f,c
 15244  001EDC  0E00               	movlw	high i2printRTC@INT_time
 15245  001EDE  22DA               	addwfc	fsr2h,f,c
 15246  001EE0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 15247  001EE4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 15248  001EE8  4A41               	infsnz	i2printRTC@i,f,c
 15249  001EEA  2A42               	incf	i2printRTC@i+1,f,c
 15250  001EEC  BE42               	btfsc	i2printRTC@i+1,7,c
 15251  001EEE  D7D2               	goto	i2l5811
 15252  001EF0  5042               	movf	i2printRTC@i+1,w,c
 15253  001EF2  E101               	bnz	i2u441_40
 15254  001EF4  D7CB               	goto	L9
 15255  001EF6                     i2u441_40:
 15256  001EF6                     i2l591:
 15257                           
 15258                           ;RTC.c: 69: }
 15259                           ;RTC.c: 70: int RTC_month = INT_time[5];
 15260  001EF6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 15261  001EFA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 15262                           
 15263                           ;RTC.c: 71: switch(RTC_month){
 15264  001EFE  D084               	goto	i2l5843
 15265  001F00                     i2l5817:
 15266                           
 15267                           ;RTC.c: 73: strcpy(month, "JAN");
 15268  001F00  0E3D               	movlw	low i2printRTC@month
 15269  001F02  6E01               	movwf	i2strcpy@to,c
 15270  001F04  0E00               	movlw	high i2printRTC@month
 15271  001F06  6E02               	movwf	i2strcpy@to+1,c
 15272  001F08  0EDA               	movlw	low STR_8
 15273  001F0A  6E03               	movwf	i2strcpy@from,c
 15274  001F0C  0EFF               	movlw	high STR_8
 15275  001F0E  6E04               	movwf	i2strcpy@from+1,c
 15276  001F10  EC3A  F01E         	call	i2_strcpy	;wreg free
 15277                           
 15278                           ;RTC.c: 74: break;
 15279  001F14  D0A6               	goto	i2l5845
 15280  001F16                     i2l5819:
 15281                           
 15282                           ;RTC.c: 76: strcpy(month, "FEB");
 15283  001F16  0E3D               	movlw	low i2printRTC@month
 15284  001F18  6E01               	movwf	i2strcpy@to,c
 15285  001F1A  0E00               	movlw	high i2printRTC@month
 15286  001F1C  6E02               	movwf	i2strcpy@to+1,c
 15287  001F1E  0ECA               	movlw	low STR_9
 15288  001F20  6E03               	movwf	i2strcpy@from,c
 15289  001F22  0EFF               	movlw	high STR_9
 15290  001F24  6E04               	movwf	i2strcpy@from+1,c
 15291  001F26  EC3A  F01E         	call	i2_strcpy	;wreg free
 15292                           
 15293                           ;RTC.c: 77: break;
 15294  001F2A  D09B               	goto	i2l5845
 15295  001F2C                     i2l5821:
 15296                           
 15297                           ;RTC.c: 79: strcpy(month, "MAR");
 15298  001F2C  0E3D               	movlw	low i2printRTC@month
 15299  001F2E  6E01               	movwf	i2strcpy@to,c
 15300  001F30  0E00               	movlw	high i2printRTC@month
 15301  001F32  6E02               	movwf	i2strcpy@to+1,c
 15302  001F34  0EE6               	movlw	low STR_10
 15303  001F36  6E03               	movwf	i2strcpy@from,c
 15304  001F38  0EFF               	movlw	high STR_10
 15305  001F3A  6E04               	movwf	i2strcpy@from+1,c
 15306  001F3C  EC3A  F01E         	call	i2_strcpy	;wreg free
 15307                           
 15308                           ;RTC.c: 80: break;
 15309  001F40  D090               	goto	i2l5845
 15310  001F42                     i2l5823:
 15311                           
 15312                           ;RTC.c: 82: strcpy(month, "APR");
 15313  001F42  0E3D               	movlw	low i2printRTC@month
 15314  001F44  6E01               	movwf	i2strcpy@to,c
 15315  001F46  0E00               	movlw	high i2printRTC@month
 15316  001F48  6E02               	movwf	i2strcpy@to+1,c
 15317  001F4A  0EEA               	movlw	low STR_11
 15318  001F4C  6E03               	movwf	i2strcpy@from,c
 15319  001F4E  0EFF               	movlw	high STR_11
 15320  001F50  6E04               	movwf	i2strcpy@from+1,c
 15321  001F52  EC3A  F01E         	call	i2_strcpy	;wreg free
 15322                           
 15323                           ;RTC.c: 83: break;
 15324  001F56  D085               	goto	i2l5845
 15325  001F58                     i2l5825:
 15326                           
 15327                           ;RTC.c: 85: strcpy(month, "MAY");
 15328  001F58  0E3D               	movlw	low i2printRTC@month
 15329  001F5A  6E01               	movwf	i2strcpy@to,c
 15330  001F5C  0E00               	movlw	high i2printRTC@month
 15331  001F5E  6E02               	movwf	i2strcpy@to+1,c
 15332  001F60  0EFA               	movlw	low STR_12
 15333  001F62  6E03               	movwf	i2strcpy@from,c
 15334  001F64  0EFF               	movlw	high STR_12
 15335  001F66  6E04               	movwf	i2strcpy@from+1,c
 15336  001F68  EC3A  F01E         	call	i2_strcpy	;wreg free
 15337                           
 15338                           ;RTC.c: 86: break;
 15339  001F6C  D07A               	goto	i2l5845
 15340  001F6E                     i2l5827:
 15341                           
 15342                           ;RTC.c: 88: strcpy(month, "JUN");
 15343  001F6E  0E3D               	movlw	low i2printRTC@month
 15344  001F70  6E01               	movwf	i2strcpy@to,c
 15345  001F72  0E00               	movlw	high i2printRTC@month
 15346  001F74  6E02               	movwf	i2strcpy@to+1,c
 15347  001F76  0EDE               	movlw	low STR_13
 15348  001F78  6E03               	movwf	i2strcpy@from,c
 15349  001F7A  0EFF               	movlw	high STR_13
 15350  001F7C  6E04               	movwf	i2strcpy@from+1,c
 15351  001F7E  EC3A  F01E         	call	i2_strcpy	;wreg free
 15352                           
 15353                           ;RTC.c: 89: break;
 15354  001F82  D06F               	goto	i2l5845
 15355  001F84                     i2l5829:
 15356                           
 15357                           ;RTC.c: 91: strcpy(month, "JUL");
 15358  001F84  0E3D               	movlw	low i2printRTC@month
 15359  001F86  6E01               	movwf	i2strcpy@to,c
 15360  001F88  0E00               	movlw	high i2printRTC@month
 15361  001F8A  6E02               	movwf	i2strcpy@to+1,c
 15362  001F8C  0ED6               	movlw	low STR_14
 15363  001F8E  6E03               	movwf	i2strcpy@from,c
 15364  001F90  0EFF               	movlw	high STR_14
 15365  001F92  6E04               	movwf	i2strcpy@from+1,c
 15366  001F94  EC3A  F01E         	call	i2_strcpy	;wreg free
 15367                           
 15368                           ;RTC.c: 92: break;
 15369  001F98  D064               	goto	i2l5845
 15370  001F9A                     i2l5831:
 15371                           
 15372                           ;RTC.c: 94: strcpy(month, "AUG");
 15373  001F9A  0E3D               	movlw	low i2printRTC@month
 15374  001F9C  6E01               	movwf	i2strcpy@to,c
 15375  001F9E  0E00               	movlw	high i2printRTC@month
 15376  001FA0  6E02               	movwf	i2strcpy@to+1,c
 15377  001FA2  0ED2               	movlw	low STR_15
 15378  001FA4  6E03               	movwf	i2strcpy@from,c
 15379  001FA6  0EFF               	movlw	high STR_15
 15380  001FA8  6E04               	movwf	i2strcpy@from+1,c
 15381  001FAA  EC3A  F01E         	call	i2_strcpy	;wreg free
 15382                           
 15383                           ;RTC.c: 95: break;
 15384  001FAE  D059               	goto	i2l5845
 15385  001FB0                     i2l5833:
 15386                           
 15387                           ;RTC.c: 97: strcpy(month, "SEP");
 15388  001FB0  0E3D               	movlw	low i2printRTC@month
 15389  001FB2  6E01               	movwf	i2strcpy@to,c
 15390  001FB4  0E00               	movlw	high i2printRTC@month
 15391  001FB6  6E02               	movwf	i2strcpy@to+1,c
 15392  001FB8  0EE2               	movlw	low STR_16
 15393  001FBA  6E03               	movwf	i2strcpy@from,c
 15394  001FBC  0EFF               	movlw	high STR_16
 15395  001FBE  6E04               	movwf	i2strcpy@from+1,c
 15396  001FC0  EC3A  F01E         	call	i2_strcpy	;wreg free
 15397                           
 15398                           ;RTC.c: 98: break;
 15399  001FC4  D04E               	goto	i2l5845
 15400  001FC6                     i2l5835:
 15401                           
 15402                           ;RTC.c: 100: strcpy(month, "OCT");
 15403  001FC6  0E3D               	movlw	low i2printRTC@month
 15404  001FC8  6E01               	movwf	i2strcpy@to,c
 15405  001FCA  0E00               	movlw	high i2printRTC@month
 15406  001FCC  6E02               	movwf	i2strcpy@to+1,c
 15407  001FCE  0EF2               	movlw	low STR_17
 15408  001FD0  6E03               	movwf	i2strcpy@from,c
 15409  001FD2  0EFF               	movlw	high STR_17
 15410  001FD4  6E04               	movwf	i2strcpy@from+1,c
 15411  001FD6  EC3A  F01E         	call	i2_strcpy	;wreg free
 15412                           
 15413                           ;RTC.c: 101: break;
 15414  001FDA  D043               	goto	i2l5845
 15415  001FDC                     i2l5837:
 15416                           
 15417                           ;RTC.c: 103: strcpy(month, "NOV");
 15418  001FDC  0E3D               	movlw	low i2printRTC@month
 15419  001FDE  6E01               	movwf	i2strcpy@to,c
 15420  001FE0  0E00               	movlw	high i2printRTC@month
 15421  001FE2  6E02               	movwf	i2strcpy@to+1,c
 15422  001FE4  0EF6               	movlw	low STR_18
 15423  001FE6  6E03               	movwf	i2strcpy@from,c
 15424  001FE8  0EFF               	movlw	high STR_18
 15425  001FEA  6E04               	movwf	i2strcpy@from+1,c
 15426  001FEC  EC3A  F01E         	call	i2_strcpy	;wreg free
 15427                           
 15428                           ;RTC.c: 104: break;
 15429  001FF0  D038               	goto	i2l5845
 15430  001FF2                     i2l5839:
 15431                           
 15432                           ;RTC.c: 106: strcpy(month, "DEC");
 15433  001FF2  0E3D               	movlw	low i2printRTC@month
 15434  001FF4  6E01               	movwf	i2strcpy@to,c
 15435  001FF6  0E00               	movlw	high i2printRTC@month
 15436  001FF8  6E02               	movwf	i2strcpy@to+1,c
 15437  001FFA  0ECE               	movlw	low STR_19
 15438  001FFC  6E03               	movwf	i2strcpy@from,c
 15439  001FFE  0EFF               	movlw	high STR_19
 15440  002000  6E04               	movwf	i2strcpy@from+1,c
 15441  002002  EC3A  F01E         	call	i2_strcpy	;wreg free
 15442                           
 15443                           ;RTC.c: 108: }
 15444                           
 15445                           ;RTC.c: 107: break;
 15446  002006  D02D               	goto	i2l5845
 15447  002008                     i2l5843:
 15448  002008  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 15449  00200C  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 15450                           
 15451                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15452                           ; Switch size 1, requested type "space"
 15453                           ; Number of cases is 1, Range of values is 0 to 0
 15454                           ; switch strategies available:
 15455                           ; Name         Instructions Cycles
 15456                           ; simple_byte            4     3 (average)
 15457                           ;	Chosen strategy is simple_byte
 15458  002010  502B               	movf	??i2_printRTC+1,w,c
 15459  002012  0A00               	xorlw	0	; case 0
 15460  002014  A4D8               	btfss	status,2,c
 15461  002016  D025               	goto	i2l5845
 15462                           
 15463                           ; Switch size 1, requested type "space"
 15464                           ; Number of cases is 12, Range of values is 1 to 12
 15465                           ; switch strategies available:
 15466                           ; Name         Instructions Cycles
 15467                           ; simple_byte           37    19 (average)
 15468                           ;	Chosen strategy is simple_byte
 15469  002018  502A               	movf	??i2_printRTC,w,c
 15470  00201A  0A01               	xorlw	1	; case 1
 15471  00201C  B4D8               	btfsc	status,2,c
 15472  00201E  D770               	goto	i2l5817
 15473  002020  0A03               	xorlw	3	; case 2
 15474  002022  B4D8               	btfsc	status,2,c
 15475  002024  D778               	goto	i2l5819
 15476  002026  0A01               	xorlw	1	; case 3
 15477  002028  B4D8               	btfsc	status,2,c
 15478  00202A  D780               	goto	i2l5821
 15479  00202C  0A07               	xorlw	7	; case 4
 15480  00202E  B4D8               	btfsc	status,2,c
 15481  002030  D788               	goto	i2l5823
 15482  002032  0A01               	xorlw	1	; case 5
 15483  002034  B4D8               	btfsc	status,2,c
 15484  002036  D790               	goto	i2l5825
 15485  002038  0A03               	xorlw	3	; case 6
 15486  00203A  B4D8               	btfsc	status,2,c
 15487  00203C  D798               	goto	i2l5827
 15488  00203E  0A01               	xorlw	1	; case 7
 15489  002040  B4D8               	btfsc	status,2,c
 15490  002042  D7A0               	goto	i2l5829
 15491  002044  0A0F               	xorlw	15	; case 8
 15492  002046  B4D8               	btfsc	status,2,c
 15493  002048  D7A8               	goto	i2l5831
 15494  00204A  0A01               	xorlw	1	; case 9
 15495  00204C  B4D8               	btfsc	status,2,c
 15496  00204E  D7B0               	goto	i2l5833
 15497  002050  0A03               	xorlw	3	; case 10
 15498  002052  B4D8               	btfsc	status,2,c
 15499  002054  D7B8               	goto	i2l5835
 15500  002056  0A01               	xorlw	1	; case 11
 15501  002058  B4D8               	btfsc	status,2,c
 15502  00205A  D7C0               	goto	i2l5837
 15503  00205C  0A07               	xorlw	7	; case 12
 15504  00205E  B4D8               	btfsc	status,2,c
 15505  002060  D7C8               	goto	i2l5839
 15506  002062                     i2l5845:
 15507                           
 15508                           ;RTC.c: 109: lcdInst(0b10000000);;
 15509  002062  0E80               	movlw	128
 15510  002064  EC74  F020         	call	i2_lcdInst
 15511                           
 15512                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 15513  002068  0E6A               	movlw	low STR_21
 15514  00206A  6E0D               	movwf	i2printf@f,c
 15515  00206C  0EFB               	movlw	high STR_21
 15516  00206E  6E0E               	movwf	i2printf@f+1,c
 15517  002070  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 15518  002074  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 15519  002078  0E3D               	movlw	low i2printRTC@month
 15520  00207A  6E11               	movwf	?i2_printf+4,c
 15521  00207C  0E00               	movlw	high i2printRTC@month
 15522  00207E  6E12               	movwf	?i2_printf+5,c
 15523  002080  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 15524  002084  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 15525  002088  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 15526  00208C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 15527  002090  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 15528  002094  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 15529  002098  ECB8  F00A         	call	i2_printf	;wreg free
 15530  00209C  0012               	return		;funcret
 15531  00209E                     __end_ofi2_printRTC:
 15532                           	opt stack 0
 15533                           pclatu	equ	0xFFB
 15534                           pclath	equ	0xFFA
 15535                           tblptru	equ	0xFF8
 15536                           tblptrh	equ	0xFF7
 15537                           tblptrl	equ	0xFF6
 15538                           tablat	equ	0xFF5
 15539                           prodh	equ	0xFF4
 15540                           prodl	equ	0xFF3
 15541                           intcon	equ	0xFF2
 15542                           intcon2	equ	0xFF1
 15543                           intcon3	equ	0xFF0
 15544                           indf0	equ	0xFEF
 15545                           postinc0	equ	0xFEE
 15546                           fsr0h	equ	0xFEA
 15547                           fsr0l	equ	0xFE9
 15548                           wreg	equ	0xFE8
 15549                           postdec1	equ	0xFE5
 15550                           fsr1h	equ	0xFE2
 15551                           fsr1l	equ	0xFE1
 15552                           indf2	equ	0xFDF
 15553                           postinc2	equ	0xFDE
 15554                           postdec2	equ	0xFDD
 15555                           fsr2h	equ	0xFDA
 15556                           fsr2l	equ	0xFD9
 15557                           status	equ	0xFD8
 15558                           
 15559 ;; *************** function i2_strcpy *****************
 15560 ;; Defined at:
 15561 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 15562 ;; Parameters:    Size  Location     Type
 15563 ;;  to              2    0[COMRAM] PTR unsigned char 
 15564 ;;		 -> printRTC@month(4), UI@month(4), 
 15565 ;;  from            2    2[COMRAM] PTR const unsigned char 
 15566 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 15567 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 15568 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 15569 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 15570 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 15571 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 15572 ;;		 -> STR_8(4), 
 15573 ;; Auto vars:     Size  Location     Type
 15574 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 15575 ;;		 -> printRTC@month(4), UI@month(4), 
 15576 ;; Return value:  Size  Location     Type
 15577 ;;                  2    0[COMRAM] PTR unsigned char 
 15578 ;; Registers used:
 15579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15580 ;; Tracked objects:
 15581 ;;		On entry : 0/0
 15582 ;;		On exit  : 0/0
 15583 ;;		Unchanged: 0/0
 15584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15585 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15586 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15588 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15589 ;;Total ram usage:        6 bytes
 15590 ;; Hardware stack levels used:    1
 15591 ;; This function calls:
 15592 ;;		Nothing
 15593 ;; This function is called by:
 15594 ;;		i2_printRTC
 15595 ;; This function uses a non-reentrant model
 15596 ;;
 15597                           
 15598                           	psect	text58
 15599  003C74                     __ptext58:
 15600                           	opt stack 0
 15601  003C74                     i2_strcpy:
 15602                           	opt stack 20
 15603                           
 15604                           ;incstack = 0
 15605  003C74  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 15606  003C78  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 15607  003C7C  D004               	goto	i2l5493
 15608  003C7E                     i2l5491:
 15609  003C7E  4A05               	infsnz	i2strcpy@cp,f,c
 15610  003C80  2A06               	incf	i2strcpy@cp+1,f,c
 15611  003C82  4A03               	infsnz	i2strcpy@from,f,c
 15612  003C84  2A04               	incf	i2strcpy@from+1,f,c
 15613  003C86                     i2l5493:
 15614  003C86  C003  FFF6         	movff	i2strcpy@from,tblptrl
 15615  003C8A  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 15616  003C8E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15617  003C8E  6AF8               	clrf	tblptru,c
 15618  003C90                     	endif
 15619  003C90                     	if	0	;tblptru may be non-zero
 15620  003C90                     	endif
 15621  003C90  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 15622  003C94  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 15623  003C98  0008               	tblrd		*
 15624  003C9A  CFF5 FFDF          	movff	tablat,indf2
 15625  003C9E  50DF               	movf	indf2,w,c
 15626  003CA0  B4D8               	btfsc	status,2,c
 15627  003CA2  0012               	return	
 15628  003CA4  D7EC               	goto	i2l5491
 15629  003CA6                     __end_ofi2_strcpy:
 15630                           	opt stack 0
 15631                           pclatu	equ	0xFFB
 15632                           pclath	equ	0xFFA
 15633                           tblptru	equ	0xFF8
 15634                           tblptrh	equ	0xFF7
 15635                           tblptrl	equ	0xFF6
 15636                           tablat	equ	0xFF5
 15637                           prodh	equ	0xFF4
 15638                           prodl	equ	0xFF3
 15639                           intcon	equ	0xFF2
 15640                           intcon2	equ	0xFF1
 15641                           intcon3	equ	0xFF0
 15642                           indf0	equ	0xFEF
 15643                           postinc0	equ	0xFEE
 15644                           fsr0h	equ	0xFEA
 15645                           fsr0l	equ	0xFE9
 15646                           wreg	equ	0xFE8
 15647                           postdec1	equ	0xFE5
 15648                           fsr1h	equ	0xFE2
 15649                           fsr1l	equ	0xFE1
 15650                           indf2	equ	0xFDF
 15651                           postinc2	equ	0xFDE
 15652                           postdec2	equ	0xFDD
 15653                           fsr2h	equ	0xFDA
 15654                           fsr2l	equ	0xFD9
 15655                           status	equ	0xFD8
 15656                           
 15657 ;; *************** function _inputHandler *****************
 15658 ;; Defined at:
 15659 ;;		line 370 in file "UI.c"
 15660 ;; Parameters:    Size  Location     Type
 15661 ;;		None
 15662 ;; Auto vars:     Size  Location     Type
 15663 ;;		None
 15664 ;; Return value:  Size  Location     Type
 15665 ;;                  2   41[COMRAM] int 
 15666 ;; Registers used:
 15667 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15668 ;; Tracked objects:
 15669 ;;		On entry : 0/0
 15670 ;;		On exit  : 0/0
 15671 ;;		Unchanged: 0/0
 15672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15673 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15675 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15676 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15677 ;;Total ram usage:        4 bytes
 15678 ;; Hardware stack levels used:    1
 15679 ;; Hardware stack levels required when called:    4
 15680 ;; This function calls:
 15681 ;;		_change_state_to_logs_11
 15682 ;;		_change_state_to_logs_12
 15683 ;;		_change_state_to_logs_22
 15684 ;;		_change_state_to_logs_23
 15685 ;;		_change_state_to_logs_33
 15686 ;;		_change_state_to_logs_34
 15687 ;;		_change_state_to_menu_11
 15688 ;;		_change_state_to_menu_23
 15689 ;;		i2_change_state_to_menu_12
 15690 ;;		i2_change_state_to_menu_22
 15691 ;; This function is called by:
 15692 ;;		_updateMenu
 15693 ;; This function uses a non-reentrant model
 15694 ;;
 15695                           
 15696                           	psect	text59
 15697  002290                     __ptext59:
 15698                           	opt stack 0
 15699  002290                     _inputHandler:
 15700                           	opt stack 18
 15701                           
 15702                           ;UI.c: 375: if(firstboot){
 15703                           
 15704                           ;incstack = 0
 15705  002290  5075               	movf	_firstboot,w,c
 15706  002292  1076               	iorwf	_firstboot+1,w,c
 15707  002294  B4D8               	btfsc	status,2,c
 15708  002296  D00B               	goto	i2l5913
 15709                           
 15710                           ;UI.c: 376: change_state_to_menu_11();
 15711  002298  EC9B  F01E         	call	_change_state_to_menu_11	;wreg free
 15712                           
 15713                           ;UI.c: 377: firstboot = 0;
 15714  00229C  0E00               	movlw	0
 15715  00229E  6E76               	movwf	_firstboot+1,c
 15716  0022A0  0E00               	movlw	0
 15717  0022A2  6E75               	movwf	_firstboot,c
 15718                           
 15719                           ;UI.c: 378: return 0;
 15720  0022A4  0E00               	movlw	0
 15721  0022A6  6E2B               	movwf	?_inputHandler+1,c
 15722  0022A8  0E00               	movlw	0
 15723  0022AA  6E2A               	movwf	?_inputHandler,c
 15724  0022AC  0012               	return	
 15725  0022AE                     i2l5913:
 15726                           
 15727                           ;UI.c: 379: }
 15728                           ;UI.c: 380: if (logstate){
 15729  0022AE  0100               	movlb	0	; () banked
 15730  0022B0  51F6               	movf	_logstate& (0+255),w,b
 15731  0022B2  0100               	movlb	0	; () banked
 15732  0022B4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 15733  0022B6  B4D8               	btfsc	status,2,c
 15734  0022B8  D0C7               	goto	i2l6031
 15735                           
 15736                           ; BSR set to: 0
 15737                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 15738  0022BA  0E43               	movlw	67
 15739  0022BC  187D               	xorwf	_input,w,c	;volatile
 15740  0022BE  A4D8               	btfss	status,2,c
 15741  0022C0  D012               	goto	i2l5931
 15742                           
 15743                           ; BSR set to: 0
 15744  0022C2  B281               	btfsc	3969,1,c	;volatile
 15745  0022C4  D009               	goto	i2l5923
 15746  0022C6  D00F               	goto	i2l5931
 15747  0022C8                     i2l5921:
 15748                           
 15749                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 15750  0022C8  0E68               	movlw	104
 15751  0022CA  6E2C               	movwf	??_inputHandler& (0+255),c
 15752  0022CC  0EE4               	movlw	228
 15753  0022CE                     i2u749_47:
 15754  0022CE  2EE8               	decfsz	wreg,f,c
 15755  0022D0  D7FE               	bra	i2u749_47
 15756  0022D2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 15757  0022D4  D7FC               	bra	i2u749_47
 15758  0022D6  D000               	nop2	
 15759  0022D8                     i2l5923:
 15760  0022D8  B281               	btfsc	3969,1,c	;volatile
 15761  0022DA  D7F6               	goto	i2l5921
 15762  0022DC                     i2l5925:
 15763                           
 15764                           ;UI.c: 385: }
 15765                           ;UI.c: 386: return 0;
 15766  0022DC  0E00               	movlw	0
 15767  0022DE  6E2B               	movwf	?_inputHandler+1,c
 15768  0022E0  0E00               	movlw	0
 15769  0022E2  6E2A               	movwf	?_inputHandler,c
 15770  0022E4  0012               	return	
 15771  0022E6                     i2l5931:
 15772                           
 15773                           ;UI.c: 388: else if (input == 'D'){
 15774  0022E6  0E44               	movlw	68
 15775  0022E8  187D               	xorwf	_input,w,c	;volatile
 15776  0022EA  A4D8               	btfss	status,2,c
 15777  0022EC  D7F7               	goto	i2l5925
 15778                           
 15779                           ;UI.c: 390: logstate = 0;
 15780  0022EE  0E00               	movlw	0
 15781  0022F0  0100               	movlb	0	; () banked
 15782  0022F2  6FF7               	movwf	(_logstate+1)& (0+255),b
 15783  0022F4  0E00               	movlw	0
 15784  0022F6  6FF6               	movwf	_logstate& (0+255),b
 15785                           
 15786                           ;UI.c: 391: switch(cur_state){
 15787  0022F8  D012               	goto	i2l5949
 15788  0022FA                     i2l5935:
 15789                           
 15790                           ;UI.c: 393: change_state_to_logs_11();
 15791  0022FA  EC13  F01F         	call	_change_state_to_logs_11	;wreg free
 15792                           
 15793                           ;UI.c: 394: break;
 15794  0022FE  D7EE               	goto	i2l5925
 15795  002300                     i2l5937:
 15796                           
 15797                           ;UI.c: 396: change_state_to_logs_12();
 15798  002300  ECFB  F01E         	call	_change_state_to_logs_12	;wreg free
 15799                           
 15800                           ;UI.c: 397: break;
 15801  002304  D7EB               	goto	i2l5925
 15802  002306                     i2l5939:
 15803                           
 15804                           ;UI.c: 399: change_state_to_logs_22();
 15805  002306  ECE3  F01E         	call	_change_state_to_logs_22	;wreg free
 15806                           
 15807                           ;UI.c: 400: break;
 15808  00230A  D7E8               	goto	i2l5925
 15809  00230C                     i2l5941:
 15810                           
 15811                           ;UI.c: 402: change_state_to_logs_23();
 15812  00230C  EC42  F01F         	call	_change_state_to_logs_23	;wreg free
 15813                           
 15814                           ;UI.c: 403: break;
 15815  002310  D7E5               	goto	i2l5925
 15816  002312                     i2l5943:
 15817                           
 15818                           ;UI.c: 405: change_state_to_logs_33();
 15819  002312  ECCB  F01E         	call	_change_state_to_logs_33	;wreg free
 15820                           
 15821                           ;UI.c: 406: break;
 15822  002316  D7E2               	goto	i2l5925
 15823  002318                     i2l5945:
 15824                           
 15825                           ;UI.c: 408: change_state_to_logs_34();
 15826  002318  ECB3  F01E         	call	_change_state_to_logs_34	;wreg free
 15827                           
 15828                           ;UI.c: 410: }
 15829                           
 15830                           ;UI.c: 409: break;
 15831  00231C  D7DF               	goto	i2l5925
 15832  00231E                     i2l5949:
 15833  00231E  C0DE  F02C         	movff	_cur_state,??_inputHandler
 15834  002322  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 15835                           
 15836                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 15837                           ; Switch size 1, requested type "space"
 15838                           ; Number of cases is 2, Range of values is 3 to 4
 15839                           ; switch strategies available:
 15840                           ; Name         Instructions Cycles
 15841                           ; simple_byte            7     4 (average)
 15842                           ;	Chosen strategy is simple_byte
 15843  002326  502D               	movf	??_inputHandler+1,w,c
 15844  002328  0A03               	xorlw	3	; case 3
 15845  00232A  B4D8               	btfsc	status,2,c
 15846  00232C  D004               	goto	i2l7933
 15847  00232E  0A07               	xorlw	7	; case 4
 15848  002330  B4D8               	btfsc	status,2,c
 15849  002332  D00F               	goto	i2l7935
 15850  002334  D7D3               	goto	i2l5925
 15851  002336                     i2l7933:
 15852                           
 15853                           ; Switch size 1, requested type "space"
 15854                           ; Number of cases is 4, Range of values is 243 to 255
 15855                           ; switch strategies available:
 15856                           ; Name         Instructions Cycles
 15857                           ; simple_byte           13     7 (average)
 15858                           ;	Chosen strategy is simple_byte
 15859  002336  502C               	movf	??_inputHandler,w,c
 15860  002338  0AF3               	xorlw	243	; case 243
 15861  00233A  B4D8               	btfsc	status,2,c
 15862  00233C  D7DE               	goto	i2l5935
 15863  00233E  0A07               	xorlw	7	; case 244
 15864  002340  B4D8               	btfsc	status,2,c
 15865  002342  D7DE               	goto	i2l5937
 15866  002344  0A0A               	xorlw	10	; case 254
 15867  002346  B4D8               	btfsc	status,2,c
 15868  002348  D7DE               	goto	i2l5939
 15869  00234A  0A01               	xorlw	1	; case 255
 15870  00234C  B4D8               	btfsc	status,2,c
 15871  00234E  D7DE               	goto	i2l5941
 15872  002350  D7C5               	goto	i2l5925
 15873  002352                     i2l7935:
 15874                           
 15875                           ; Switch size 1, requested type "space"
 15876                           ; Number of cases is 2, Range of values is 9 to 10
 15877                           ; switch strategies available:
 15878                           ; Name         Instructions Cycles
 15879                           ; simple_byte            7     4 (average)
 15880                           ;	Chosen strategy is simple_byte
 15881  002352  502C               	movf	??_inputHandler,w,c
 15882  002354  0A09               	xorlw	9	; case 9
 15883  002356  B4D8               	btfsc	status,2,c
 15884  002358  D7DC               	goto	i2l5943
 15885  00235A  0A03               	xorlw	3	; case 10
 15886  00235C  B4D8               	btfsc	status,2,c
 15887  00235E  D7DC               	goto	i2l5945
 15888  002360  D7BD               	goto	i2l5925
 15889  002362                     i2l5961:
 15890                           
 15891                           ;UI.c: 420: if(cur_state == 11){
 15892  002362  0E0B               	movlw	11
 15893  002364  0100               	movlb	0	; () banked
 15894  002366  19DE               	xorwf	_cur_state& (0+255),w,b
 15895  002368  0100               	movlb	0	; () banked
 15896  00236A  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15897  00236C  A4D8               	btfss	status,2,c
 15898  00236E  D005               	goto	i2l5969
 15899                           
 15900                           ; BSR set to: 0
 15901                           ;UI.c: 421: return 0;
 15902  002370  0E00               	movlw	0
 15903  002372  6E2B               	movwf	?_inputHandler+1,c
 15904  002374  0E00               	movlw	0
 15905  002376  6E2A               	movwf	?_inputHandler,c
 15906                           
 15907                           ; BSR set to: 0
 15908  002378  0012               	return	
 15909  00237A                     i2l5969:
 15910                           
 15911                           ; BSR set to: 0
 15912                           ;UI.c: 423: else{
 15913                           ;UI.c: 424: change_state_to_menu_11();
 15914  00237A  EC9B  F01E         	call	_change_state_to_menu_11	;wreg free
 15915                           
 15916                           ;UI.c: 425: }
 15917                           ;UI.c: 426: return 0;
 15918  00237E  0E00               	movlw	0
 15919  002380  6E2B               	movwf	?_inputHandler+1,c
 15920  002382  0E00               	movlw	0
 15921  002384  6E2A               	movwf	?_inputHandler,c
 15922  002386  0012               	return	
 15923  002388                     i2l5975:
 15924                           
 15925                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 15926  002388  0E16               	movlw	22
 15927  00238A  0100               	movlb	0	; () banked
 15928  00238C  19DE               	xorwf	_cur_state& (0+255),w,b
 15929  00238E  0100               	movlb	0	; () banked
 15930  002390  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15931  002392  B4D8               	btfsc	status,2,c
 15932  002394  D007               	goto	i2l5979
 15933                           
 15934                           ; BSR set to: 0
 15935  002396  0E0C               	movlw	12
 15936  002398  0100               	movlb	0	; () banked
 15937  00239A  19DE               	xorwf	_cur_state& (0+255),w,b
 15938  00239C  0100               	movlb	0	; () banked
 15939  00239E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15940  0023A0  A4D8               	btfss	status,2,c
 15941  0023A2  D005               	goto	i2l5985
 15942  0023A4                     i2l5979:
 15943                           
 15944                           ; BSR set to: 0
 15945                           ;UI.c: 429: return 0;
 15946  0023A4  0E00               	movlw	0
 15947  0023A6  6E2B               	movwf	?_inputHandler+1,c
 15948  0023A8  0E00               	movlw	0
 15949  0023AA  6E2A               	movwf	?_inputHandler,c
 15950                           
 15951                           ; BSR set to: 0
 15952  0023AC  0012               	return	
 15953  0023AE                     i2l5985:
 15954                           
 15955                           ; BSR set to: 0
 15956                           ;UI.c: 431: else if(cur_state == 23){
 15957  0023AE  0E17               	movlw	23
 15958  0023B0  0100               	movlb	0	; () banked
 15959  0023B2  19DE               	xorwf	_cur_state& (0+255),w,b
 15960  0023B4  0100               	movlb	0	; () banked
 15961  0023B6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15962  0023B8  A4D8               	btfss	status,2,c
 15963  0023BA  D003               	goto	i2l5989
 15964                           
 15965                           ; BSR set to: 0
 15966                           ;UI.c: 432: change_state_to_menu_22();
 15967  0023BC  EC53  F01E         	call	i2_change_state_to_menu_22	;wreg free
 15968                           
 15969                           ;UI.c: 433: }
 15970  0023C0  D002               	goto	i2l5991
 15971  0023C2                     i2l5989:
 15972                           
 15973                           ;UI.c: 434: else{
 15974                           ;UI.c: 435: change_state_to_menu_12();
 15975  0023C2  EC6B  F01E         	call	i2_change_state_to_menu_12	;wreg free
 15976  0023C6                     i2l5991:
 15977                           
 15978                           ;UI.c: 436: }
 15979                           ;UI.c: 437: return 0;
 15980  0023C6  0E00               	movlw	0
 15981  0023C8  6E2B               	movwf	?_inputHandler+1,c
 15982  0023CA  0E00               	movlw	0
 15983  0023CC  6E2A               	movwf	?_inputHandler,c
 15984  0023CE  0012               	return	
 15985  0023D0                     i2l5995:
 15986                           
 15987                           ;UI.c: 439: if(cur_state == 23){
 15988  0023D0  0E17               	movlw	23
 15989  0023D2  0100               	movlb	0	; () banked
 15990  0023D4  19DE               	xorwf	_cur_state& (0+255),w,b
 15991  0023D6  0100               	movlb	0	; () banked
 15992  0023D8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15993  0023DA  A4D8               	btfss	status,2,c
 15994  0023DC  D005               	goto	i2l6003
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;UI.c: 440: return 0;
 15998  0023DE  0E00               	movlw	0
 15999  0023E0  6E2B               	movwf	?_inputHandler+1,c
 16000  0023E2  0E00               	movlw	0
 16001  0023E4  6E2A               	movwf	?_inputHandler,c
 16002                           
 16003                           ; BSR set to: 0
 16004  0023E6  0012               	return	
 16005  0023E8                     i2l6003:
 16006                           
 16007                           ; BSR set to: 0
 16008                           ;UI.c: 442: else{
 16009                           ;UI.c: 443: change_state_to_menu_23();
 16010  0023E8  EC83  F01E         	call	_change_state_to_menu_23	;wreg free
 16011                           
 16012                           ;UI.c: 444: }
 16013                           ;UI.c: 445: return 0;
 16014  0023EC  0E00               	movlw	0
 16015  0023EE  6E2B               	movwf	?_inputHandler+1,c
 16016  0023F0  0E00               	movlw	0
 16017  0023F2  6E2A               	movwf	?_inputHandler,c
 16018  0023F4  0012               	return	
 16019  0023F6                     i2l6009:
 16020                           
 16021                           ;UI.c: 448: up = 1;
 16022  0023F6  0E00               	movlw	0
 16023  0023F8  6E78               	movwf	_up+1,c
 16024  0023FA  0E01               	movlw	1
 16025  0023FC  6E77               	movwf	_up,c
 16026                           
 16027                           ;UI.c: 449: return 1;
 16028  0023FE  0E00               	movlw	0
 16029  002400  6E2B               	movwf	?_inputHandler+1,c
 16030  002402  0E01               	movlw	1
 16031  002404  6E2A               	movwf	?_inputHandler,c
 16032  002406  0012               	return	
 16033  002408                     i2l6013:
 16034                           
 16035                           ;UI.c: 451: down = 1;
 16036  002408  0E00               	movlw	0
 16037  00240A  6E68               	movwf	_down+1,c
 16038  00240C  0E01               	movlw	1
 16039  00240E  6E67               	movwf	_down,c
 16040                           
 16041                           ;UI.c: 452: return 1;
 16042  002410  0E00               	movlw	0
 16043  002412  6E2B               	movwf	?_inputHandler+1,c
 16044  002414  0E01               	movlw	1
 16045  002416  6E2A               	movwf	?_inputHandler,c
 16046  002418  0012               	return	
 16047  00241A                     i2l6017:
 16048                           
 16049                           ;UI.c: 454: enter = 1;
 16050  00241A  0E00               	movlw	0
 16051  00241C  6E6A               	movwf	_enter+1,c
 16052  00241E  0E01               	movlw	1
 16053  002420  6E69               	movwf	_enter,c
 16054                           
 16055                           ;UI.c: 455: return 1;
 16056  002422  0E00               	movlw	0
 16057  002424  6E2B               	movwf	?_inputHandler+1,c
 16058  002426  0E01               	movlw	1
 16059  002428  6E2A               	movwf	?_inputHandler,c
 16060  00242A  0012               	return	
 16061  00242C                     i2l6021:
 16062                           
 16063                           ;UI.c: 457: back = 1;
 16064  00242C  0E00               	movlw	0
 16065  00242E  6E5C               	movwf	_back+1,c
 16066  002430  0E01               	movlw	1
 16067  002432  6E5B               	movwf	_back,c
 16068                           
 16069                           ;UI.c: 458: return 1;
 16070  002434  0E00               	movlw	0
 16071  002436  6E2B               	movwf	?_inputHandler+1,c
 16072  002438  0E01               	movlw	1
 16073  00243A  6E2A               	movwf	?_inputHandler,c
 16074  00243C  0012               	return	
 16075  00243E                     i2l6025:
 16076                           
 16077                           ;UI.c: 461: return 1;
 16078  00243E  0E00               	movlw	0
 16079  002440  6E2B               	movwf	?_inputHandler+1,c
 16080  002442  0E01               	movlw	1
 16081  002444  6E2A               	movwf	?_inputHandler,c
 16082                           
 16083                           ;UI.c: 462: }
 16084  002446  0012               	return	
 16085  002448                     i2l6031:
 16086  002448  507D               	movf	_input,w,c	;volatile
 16087                           
 16088                           ; Switch size 1, requested type "space"
 16089                           ; Number of cases is 7, Range of values is 49 to 68
 16090                           ; switch strategies available:
 16091                           ; Name         Instructions Cycles
 16092                           ; simple_byte           22    12 (average)
 16093                           ;	Chosen strategy is simple_byte
 16094  00244A  0A31               	xorlw	49	; case 49
 16095  00244C  B4D8               	btfsc	status,2,c
 16096  00244E  D789               	goto	i2l5961
 16097  002450  0A03               	xorlw	3	; case 50
 16098  002452  B4D8               	btfsc	status,2,c
 16099  002454  D799               	goto	i2l5975
 16100  002456  0A01               	xorlw	1	; case 51
 16101  002458  B4D8               	btfsc	status,2,c
 16102  00245A  D7BA               	goto	i2l5995
 16103  00245C  0A72               	xorlw	114	; case 65
 16104  00245E  B4D8               	btfsc	status,2,c
 16105  002460  D7CA               	goto	i2l6009
 16106  002462  0A03               	xorlw	3	; case 66
 16107  002464  B4D8               	btfsc	status,2,c
 16108  002466  D7D0               	goto	i2l6013
 16109  002468  0A01               	xorlw	1	; case 67
 16110  00246A  B4D8               	btfsc	status,2,c
 16111  00246C  D7D6               	goto	i2l6017
 16112  00246E  0A07               	xorlw	7	; case 68
 16113  002470  B4D8               	btfsc	status,2,c
 16114  002472  D7DC               	goto	i2l6021
 16115  002474  D7E4               	goto	i2l6025
 16116  002476                     __end_of_inputHandler:
 16117                           	opt stack 0
 16118                           pclatu	equ	0xFFB
 16119                           pclath	equ	0xFFA
 16120                           tblptru	equ	0xFF8
 16121                           tblptrh	equ	0xFF7
 16122                           tblptrl	equ	0xFF6
 16123                           tablat	equ	0xFF5
 16124                           prodh	equ	0xFF4
 16125                           prodl	equ	0xFF3
 16126                           intcon	equ	0xFF2
 16127                           intcon2	equ	0xFF1
 16128                           intcon3	equ	0xFF0
 16129                           indf0	equ	0xFEF
 16130                           postinc0	equ	0xFEE
 16131                           fsr0h	equ	0xFEA
 16132                           fsr0l	equ	0xFE9
 16133                           wreg	equ	0xFE8
 16134                           postdec1	equ	0xFE5
 16135                           fsr1h	equ	0xFE2
 16136                           fsr1l	equ	0xFE1
 16137                           indf2	equ	0xFDF
 16138                           postinc2	equ	0xFDE
 16139                           postdec2	equ	0xFDD
 16140                           fsr2h	equ	0xFDA
 16141                           fsr2l	equ	0xFD9
 16142                           status	equ	0xFD8
 16143                           
 16144 ;; *************** function i2_change_state_to_menu_22 *****************
 16145 ;; Defined at:
 16146 ;;		line 496 in file "UI.c"
 16147 ;; Parameters:    Size  Location     Type
 16148 ;;		None
 16149 ;; Auto vars:     Size  Location     Type
 16150 ;;		None
 16151 ;; Return value:  Size  Location     Type
 16152 ;;                  1    wreg      void 
 16153 ;; Registers used:
 16154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16155 ;; Tracked objects:
 16156 ;;		On entry : 0/0
 16157 ;;		On exit  : 0/0
 16158 ;;		Unchanged: 0/0
 16159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16164 ;;Total ram usage:        0 bytes
 16165 ;; Hardware stack levels used:    1
 16166 ;; Hardware stack levels required when called:    3
 16167 ;; This function calls:
 16168 ;;		i2_lcdInst
 16169 ;;		i2_printf
 16170 ;; This function is called by:
 16171 ;;		_updateMenu
 16172 ;;		_inputHandler
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176                           	psect	text60
 16177  003CA6                     __ptext60:
 16178                           	opt stack 0
 16179  003CA6                     i2_change_state_to_menu_22:
 16180                           	opt stack 19
 16181                           
 16182                           ;UI.c: 497: cur_state = 22;
 16183                           
 16184                           ;incstack = 0
 16185  003CA6  0E00               	movlw	0
 16186  003CA8  0100               	movlb	0	; () banked
 16187  003CAA  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16188  003CAC  0E16               	movlw	22
 16189  003CAE  6FDE               	movwf	_cur_state& (0+255),b
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;UI.c: 499: lcdInst(0b10000000);;
 16193  003CB0  0E80               	movlw	128
 16194  003CB2  EC74  F020         	call	i2_lcdInst
 16195                           
 16196                           ;UI.c: 500: printf("2. SORT        <");
 16197  003CB6  0E03               	movlw	low STR_34
 16198  003CB8  6E0D               	movwf	i2printf@f,c
 16199  003CBA  0EFE               	movlw	high STR_34
 16200  003CBC  6E0E               	movwf	i2printf@f+1,c
 16201  003CBE  ECB8  F00A         	call	i2_printf	;wreg free
 16202                           
 16203                           ;UI.c: 501: lcdInst(0b11000000);;
 16204  003CC2  0EC0               	movlw	192
 16205  003CC4  EC74  F020         	call	i2_lcdInst
 16206                           
 16207                           ;UI.c: 502: printf("3. LOGS         ");
 16208  003CC8  0E48               	movlw	low STR_36
 16209  003CCA  6E0D               	movwf	i2printf@f,c
 16210  003CCC  0EFD               	movlw	high STR_36
 16211  003CCE  6E0E               	movwf	i2printf@f+1,c
 16212  003CD0  ECB8  F00A         	call	i2_printf	;wreg free
 16213  003CD4  0012               	return		;funcret
 16214  003CD6                     __end_ofi2_change_state_to_menu_22:
 16215                           	opt stack 0
 16216                           pclatu	equ	0xFFB
 16217                           pclath	equ	0xFFA
 16218                           tblptru	equ	0xFF8
 16219                           tblptrh	equ	0xFF7
 16220                           tblptrl	equ	0xFF6
 16221                           tablat	equ	0xFF5
 16222                           prodh	equ	0xFF4
 16223                           prodl	equ	0xFF3
 16224                           intcon	equ	0xFF2
 16225                           intcon2	equ	0xFF1
 16226                           intcon3	equ	0xFF0
 16227                           indf0	equ	0xFEF
 16228                           postinc0	equ	0xFEE
 16229                           fsr0h	equ	0xFEA
 16230                           fsr0l	equ	0xFE9
 16231                           wreg	equ	0xFE8
 16232                           postdec1	equ	0xFE5
 16233                           fsr1h	equ	0xFE2
 16234                           fsr1l	equ	0xFE1
 16235                           indf2	equ	0xFDF
 16236                           postinc2	equ	0xFDE
 16237                           postdec2	equ	0xFDD
 16238                           fsr2h	equ	0xFDA
 16239                           fsr2l	equ	0xFD9
 16240                           status	equ	0xFD8
 16241                           
 16242 ;; *************** function i2_change_state_to_menu_12 *****************
 16243 ;; Defined at:
 16244 ;;		line 488 in file "UI.c"
 16245 ;; Parameters:    Size  Location     Type
 16246 ;;		None
 16247 ;; Auto vars:     Size  Location     Type
 16248 ;;		None
 16249 ;; Return value:  Size  Location     Type
 16250 ;;                  1    wreg      void 
 16251 ;; Registers used:
 16252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16253 ;; Tracked objects:
 16254 ;;		On entry : 0/0
 16255 ;;		On exit  : 0/0
 16256 ;;		Unchanged: 0/0
 16257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16262 ;;Total ram usage:        0 bytes
 16263 ;; Hardware stack levels used:    1
 16264 ;; Hardware stack levels required when called:    3
 16265 ;; This function calls:
 16266 ;;		i2_lcdInst
 16267 ;;		i2_printf
 16268 ;; This function is called by:
 16269 ;;		_updateMenu
 16270 ;;		_inputHandler
 16271 ;; This function uses a non-reentrant model
 16272 ;;
 16273                           
 16274                           	psect	text61
 16275  003CD6                     __ptext61:
 16276                           	opt stack 0
 16277  003CD6                     i2_change_state_to_menu_12:
 16278                           	opt stack 19
 16279                           
 16280                           ;UI.c: 489: cur_state = 12;
 16281                           
 16282                           ;incstack = 0
 16283  003CD6  0E00               	movlw	0
 16284  003CD8  0100               	movlb	0	; () banked
 16285  003CDA  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16286  003CDC  0E0C               	movlw	12
 16287  003CDE  6FDE               	movwf	_cur_state& (0+255),b
 16288                           
 16289                           ; BSR set to: 0
 16290                           ;UI.c: 491: lcdInst(0b10000000);;
 16291  003CE0  0E80               	movlw	128
 16292  003CE2  EC74  F020         	call	i2_lcdInst
 16293                           
 16294                           ;UI.c: 492: printf("1. DATE/TIME    ");
 16295  003CE6  0E6A               	movlw	low STR_33
 16296  003CE8  6E0D               	movwf	i2printf@f,c
 16297  003CEA  0EFD               	movlw	high STR_33
 16298  003CEC  6E0E               	movwf	i2printf@f+1,c
 16299  003CEE  ECB8  F00A         	call	i2_printf	;wreg free
 16300                           
 16301                           ;UI.c: 493: lcdInst(0b11000000);;
 16302  003CF2  0EC0               	movlw	192
 16303  003CF4  EC74  F020         	call	i2_lcdInst
 16304                           
 16305                           ;UI.c: 494: printf("2. SORT        <");
 16306  003CF8  0E03               	movlw	low STR_34
 16307  003CFA  6E0D               	movwf	i2printf@f,c
 16308  003CFC  0EFE               	movlw	high STR_34
 16309  003CFE  6E0E               	movwf	i2printf@f+1,c
 16310  003D00  ECB8  F00A         	call	i2_printf	;wreg free
 16311  003D04  0012               	return		;funcret
 16312  003D06                     __end_ofi2_change_state_to_menu_12:
 16313                           	opt stack 0
 16314                           pclatu	equ	0xFFB
 16315                           pclath	equ	0xFFA
 16316                           tblptru	equ	0xFF8
 16317                           tblptrh	equ	0xFF7
 16318                           tblptrl	equ	0xFF6
 16319                           tablat	equ	0xFF5
 16320                           prodh	equ	0xFF4
 16321                           prodl	equ	0xFF3
 16322                           intcon	equ	0xFF2
 16323                           intcon2	equ	0xFF1
 16324                           intcon3	equ	0xFF0
 16325                           indf0	equ	0xFEF
 16326                           postinc0	equ	0xFEE
 16327                           fsr0h	equ	0xFEA
 16328                           fsr0l	equ	0xFE9
 16329                           wreg	equ	0xFE8
 16330                           postdec1	equ	0xFE5
 16331                           fsr1h	equ	0xFE2
 16332                           fsr1l	equ	0xFE1
 16333                           indf2	equ	0xFDF
 16334                           postinc2	equ	0xFDE
 16335                           postdec2	equ	0xFDD
 16336                           fsr2h	equ	0xFDA
 16337                           fsr2l	equ	0xFD9
 16338                           status	equ	0xFD8
 16339                           
 16340 ;; *************** function _change_state_to_menu_23 *****************
 16341 ;; Defined at:
 16342 ;;		line 504 in file "UI.c"
 16343 ;; Parameters:    Size  Location     Type
 16344 ;;		None
 16345 ;; Auto vars:     Size  Location     Type
 16346 ;;		None
 16347 ;; Return value:  Size  Location     Type
 16348 ;;                  1    wreg      void 
 16349 ;; Registers used:
 16350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16351 ;; Tracked objects:
 16352 ;;		On entry : 0/0
 16353 ;;		On exit  : 0/0
 16354 ;;		Unchanged: 0/0
 16355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16360 ;;Total ram usage:        0 bytes
 16361 ;; Hardware stack levels used:    1
 16362 ;; Hardware stack levels required when called:    3
 16363 ;; This function calls:
 16364 ;;		i2_lcdInst
 16365 ;;		i2_printf
 16366 ;; This function is called by:
 16367 ;;		_updateMenu
 16368 ;;		_inputHandler
 16369 ;; This function uses a non-reentrant model
 16370 ;;
 16371                           
 16372                           	psect	text62
 16373  003D06                     __ptext62:
 16374                           	opt stack 0
 16375  003D06                     _change_state_to_menu_23:
 16376                           	opt stack 18
 16377                           
 16378                           ;UI.c: 505: cur_state = 23;
 16379                           
 16380                           ;incstack = 0
 16381  003D06  0E00               	movlw	0
 16382  003D08  0100               	movlb	0	; () banked
 16383  003D0A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16384  003D0C  0E17               	movlw	23
 16385  003D0E  6FDE               	movwf	_cur_state& (0+255),b
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;UI.c: 507: lcdInst(0b10000000);;
 16389  003D10  0E80               	movlw	128
 16390  003D12  EC74  F020         	call	i2_lcdInst
 16391                           
 16392                           ;UI.c: 508: printf("2. SORT         ");
 16393  003D16  0E59               	movlw	low STR_32
 16394  003D18  6E0D               	movwf	i2printf@f,c
 16395  003D1A  0EFD               	movlw	high STR_32
 16396  003D1C  6E0E               	movwf	i2printf@f+1,c
 16397  003D1E  ECB8  F00A         	call	i2_printf	;wreg free
 16398                           
 16399                           ;UI.c: 509: lcdInst(0b11000000);;
 16400  003D22  0EC0               	movlw	192
 16401  003D24  EC74  F020         	call	i2_lcdInst
 16402                           
 16403                           ;UI.c: 510: printf("3. LOGS        <");
 16404  003D28  0EF2               	movlw	low STR_38
 16405  003D2A  6E0D               	movwf	i2printf@f,c
 16406  003D2C  0EFD               	movlw	high STR_38
 16407  003D2E  6E0E               	movwf	i2printf@f+1,c
 16408  003D30  ECB8  F00A         	call	i2_printf	;wreg free
 16409  003D34  0012               	return		;funcret
 16410  003D36                     __end_of_change_state_to_menu_23:
 16411                           	opt stack 0
 16412                           pclatu	equ	0xFFB
 16413                           pclath	equ	0xFFA
 16414                           tblptru	equ	0xFF8
 16415                           tblptrh	equ	0xFF7
 16416                           tblptrl	equ	0xFF6
 16417                           tablat	equ	0xFF5
 16418                           prodh	equ	0xFF4
 16419                           prodl	equ	0xFF3
 16420                           intcon	equ	0xFF2
 16421                           intcon2	equ	0xFF1
 16422                           intcon3	equ	0xFF0
 16423                           indf0	equ	0xFEF
 16424                           postinc0	equ	0xFEE
 16425                           fsr0h	equ	0xFEA
 16426                           fsr0l	equ	0xFE9
 16427                           wreg	equ	0xFE8
 16428                           postdec1	equ	0xFE5
 16429                           fsr1h	equ	0xFE2
 16430                           fsr1l	equ	0xFE1
 16431                           indf2	equ	0xFDF
 16432                           postinc2	equ	0xFDE
 16433                           postdec2	equ	0xFDD
 16434                           fsr2h	equ	0xFDA
 16435                           fsr2l	equ	0xFD9
 16436                           status	equ	0xFD8
 16437                           
 16438 ;; *************** function _change_state_to_menu_11 *****************
 16439 ;; Defined at:
 16440 ;;		line 480 in file "UI.c"
 16441 ;; Parameters:    Size  Location     Type
 16442 ;;		None
 16443 ;; Auto vars:     Size  Location     Type
 16444 ;;		None
 16445 ;; Return value:  Size  Location     Type
 16446 ;;                  1    wreg      void 
 16447 ;; Registers used:
 16448 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16449 ;; Tracked objects:
 16450 ;;		On entry : 0/0
 16451 ;;		On exit  : 0/0
 16452 ;;		Unchanged: 0/0
 16453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16458 ;;Total ram usage:        0 bytes
 16459 ;; Hardware stack levels used:    1
 16460 ;; Hardware stack levels required when called:    3
 16461 ;; This function calls:
 16462 ;;		i2_lcdInst
 16463 ;;		i2_printf
 16464 ;; This function is called by:
 16465 ;;		_updateMenu
 16466 ;;		_inputHandler
 16467 ;; This function uses a non-reentrant model
 16468 ;;
 16469                           
 16470                           	psect	text63
 16471  003D36                     __ptext63:
 16472                           	opt stack 0
 16473  003D36                     _change_state_to_menu_11:
 16474                           	opt stack 18
 16475                           
 16476                           ;UI.c: 481: cur_state = 11;
 16477                           
 16478                           ;incstack = 0
 16479  003D36  0E00               	movlw	0
 16480  003D38  0100               	movlb	0	; () banked
 16481  003D3A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16482  003D3C  0E0B               	movlw	11
 16483  003D3E  6FDE               	movwf	_cur_state& (0+255),b
 16484                           
 16485                           ; BSR set to: 0
 16486                           ;UI.c: 483: lcdInst(0b10000000);;
 16487  003D40  0E80               	movlw	128
 16488  003D42  EC74  F020         	call	i2_lcdInst
 16489                           
 16490                           ;UI.c: 484: printf("1. DATE/TIME   <");
 16491  003D46  0E14               	movlw	low STR_31
 16492  003D48  6E0D               	movwf	i2printf@f,c
 16493  003D4A  0EFE               	movlw	high STR_31
 16494  003D4C  6E0E               	movwf	i2printf@f+1,c
 16495  003D4E  ECB8  F00A         	call	i2_printf	;wreg free
 16496                           
 16497                           ;UI.c: 485: lcdInst(0b11000000);;
 16498  003D52  0EC0               	movlw	192
 16499  003D54  EC74  F020         	call	i2_lcdInst
 16500                           
 16501                           ;UI.c: 486: printf("2. SORT         ");
 16502  003D58  0E59               	movlw	low STR_32
 16503  003D5A  6E0D               	movwf	i2printf@f,c
 16504  003D5C  0EFD               	movlw	high STR_32
 16505  003D5E  6E0E               	movwf	i2printf@f+1,c
 16506  003D60  ECB8  F00A         	call	i2_printf	;wreg free
 16507  003D64  0012               	return		;funcret
 16508  003D66                     __end_of_change_state_to_menu_11:
 16509                           	opt stack 0
 16510                           pclatu	equ	0xFFB
 16511                           pclath	equ	0xFFA
 16512                           tblptru	equ	0xFF8
 16513                           tblptrh	equ	0xFF7
 16514                           tblptrl	equ	0xFF6
 16515                           tablat	equ	0xFF5
 16516                           prodh	equ	0xFF4
 16517                           prodl	equ	0xFF3
 16518                           intcon	equ	0xFF2
 16519                           intcon2	equ	0xFF1
 16520                           intcon3	equ	0xFF0
 16521                           indf0	equ	0xFEF
 16522                           postinc0	equ	0xFEE
 16523                           fsr0h	equ	0xFEA
 16524                           fsr0l	equ	0xFE9
 16525                           wreg	equ	0xFE8
 16526                           postdec1	equ	0xFE5
 16527                           fsr1h	equ	0xFE2
 16528                           fsr1l	equ	0xFE1
 16529                           indf2	equ	0xFDF
 16530                           postinc2	equ	0xFDE
 16531                           postdec2	equ	0xFDD
 16532                           fsr2h	equ	0xFDA
 16533                           fsr2l	equ	0xFD9
 16534                           status	equ	0xFD8
 16535                           
 16536 ;; *************** function _change_state_to_logs_34 *****************
 16537 ;; Defined at:
 16538 ;;		line 547 in file "UI.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;		None
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;		None
 16543 ;; Return value:  Size  Location     Type
 16544 ;;                  1    wreg      void 
 16545 ;; Registers used:
 16546 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16547 ;; Tracked objects:
 16548 ;;		On entry : 0/0
 16549 ;;		On exit  : 0/0
 16550 ;;		Unchanged: 0/0
 16551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16556 ;;Total ram usage:        0 bytes
 16557 ;; Hardware stack levels used:    1
 16558 ;; Hardware stack levels required when called:    3
 16559 ;; This function calls:
 16560 ;;		i2_lcdInst
 16561 ;;		i2_printf
 16562 ;; This function is called by:
 16563 ;;		_updateMenu
 16564 ;;		_inputHandler
 16565 ;; This function uses a non-reentrant model
 16566 ;;
 16567                           
 16568                           	psect	text64
 16569  003D66                     __ptext64:
 16570                           	opt stack 0
 16571  003D66                     _change_state_to_logs_34:
 16572                           	opt stack 18
 16573                           
 16574                           ;UI.c: 548: cur_state = 1034;
 16575                           
 16576                           ;incstack = 0
 16577  003D66  0E04               	movlw	4
 16578  003D68  0100               	movlb	0	; () banked
 16579  003D6A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16580  003D6C  0E0A               	movlw	10
 16581  003D6E  6FDE               	movwf	_cur_state& (0+255),b
 16582                           
 16583                           ; BSR set to: 0
 16584                           ;UI.c: 549: lcdInst(0b10000000);;
 16585  003D70  0E80               	movlw	128
 16586  003D72  EC74  F020         	call	i2_lcdInst
 16587                           
 16588                           ;UI.c: 550: printf("LOG 3           ");
 16589  003D76  0E26               	movlw	low STR_44
 16590  003D78  6E0D               	movwf	i2printf@f,c
 16591  003D7A  0EFD               	movlw	high STR_44
 16592  003D7C  6E0E               	movwf	i2printf@f+1,c
 16593  003D7E  ECB8  F00A         	call	i2_printf	;wreg free
 16594                           
 16595                           ;UI.c: 551: lcdInst(0b11000000);;
 16596  003D82  0EC0               	movlw	192
 16597  003D84  EC74  F020         	call	i2_lcdInst
 16598                           
 16599                           ;UI.c: 552: printf("LOG 4          <");
 16600  003D88  0EE1               	movlw	low STR_50
 16601  003D8A  6E0D               	movwf	i2printf@f,c
 16602  003D8C  0EFD               	movlw	high STR_50
 16603  003D8E  6E0E               	movwf	i2printf@f+1,c
 16604  003D90  ECB8  F00A         	call	i2_printf	;wreg free
 16605  003D94  0012               	return		;funcret
 16606  003D96                     __end_of_change_state_to_logs_34:
 16607                           	opt stack 0
 16608                           pclatu	equ	0xFFB
 16609                           pclath	equ	0xFFA
 16610                           tblptru	equ	0xFF8
 16611                           tblptrh	equ	0xFF7
 16612                           tblptrl	equ	0xFF6
 16613                           tablat	equ	0xFF5
 16614                           prodh	equ	0xFF4
 16615                           prodl	equ	0xFF3
 16616                           intcon	equ	0xFF2
 16617                           intcon2	equ	0xFF1
 16618                           intcon3	equ	0xFF0
 16619                           indf0	equ	0xFEF
 16620                           postinc0	equ	0xFEE
 16621                           fsr0h	equ	0xFEA
 16622                           fsr0l	equ	0xFE9
 16623                           wreg	equ	0xFE8
 16624                           postdec1	equ	0xFE5
 16625                           fsr1h	equ	0xFE2
 16626                           fsr1l	equ	0xFE1
 16627                           indf2	equ	0xFDF
 16628                           postinc2	equ	0xFDE
 16629                           postdec2	equ	0xFDD
 16630                           fsr2h	equ	0xFDA
 16631                           fsr2l	equ	0xFD9
 16632                           status	equ	0xFD8
 16633                           
 16634 ;; *************** function _change_state_to_logs_33 *****************
 16635 ;; Defined at:
 16636 ;;		line 540 in file "UI.c"
 16637 ;; Parameters:    Size  Location     Type
 16638 ;;		None
 16639 ;; Auto vars:     Size  Location     Type
 16640 ;;		None
 16641 ;; Return value:  Size  Location     Type
 16642 ;;                  1    wreg      void 
 16643 ;; Registers used:
 16644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16645 ;; Tracked objects:
 16646 ;;		On entry : 0/0
 16647 ;;		On exit  : 0/0
 16648 ;;		Unchanged: 0/0
 16649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16654 ;;Total ram usage:        0 bytes
 16655 ;; Hardware stack levels used:    1
 16656 ;; Hardware stack levels required when called:    3
 16657 ;; This function calls:
 16658 ;;		i2_lcdInst
 16659 ;;		i2_printf
 16660 ;; This function is called by:
 16661 ;;		_updateMenu
 16662 ;;		_inputHandler
 16663 ;; This function uses a non-reentrant model
 16664 ;;
 16665                           
 16666                           	psect	text65
 16667  003D96                     __ptext65:
 16668                           	opt stack 0
 16669  003D96                     _change_state_to_logs_33:
 16670                           	opt stack 18
 16671                           
 16672                           ;UI.c: 541: cur_state = 1033;
 16673                           
 16674                           ;incstack = 0
 16675  003D96  0E04               	movlw	4
 16676  003D98  0100               	movlb	0	; () banked
 16677  003D9A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16678  003D9C  0E09               	movlw	9
 16679  003D9E  6FDE               	movwf	_cur_state& (0+255),b
 16680                           
 16681                           ; BSR set to: 0
 16682                           ;UI.c: 542: lcdInst(0b10000000);;
 16683  003DA0  0E80               	movlw	128
 16684  003DA2  EC74  F020         	call	i2_lcdInst
 16685                           
 16686                           ;UI.c: 543: printf("LOG 3          <");
 16687  003DA6  0ED0               	movlw	low STR_46
 16688  003DA8  6E0D               	movwf	i2printf@f,c
 16689  003DAA  0EFD               	movlw	high STR_46
 16690  003DAC  6E0E               	movwf	i2printf@f+1,c
 16691  003DAE  ECB8  F00A         	call	i2_printf	;wreg free
 16692                           
 16693                           ;UI.c: 544: lcdInst(0b11000000);;
 16694  003DB2  0EC0               	movlw	192
 16695  003DB4  EC74  F020         	call	i2_lcdInst
 16696                           
 16697                           ;UI.c: 545: printf("LOG 4           ");
 16698  003DB8  0E37               	movlw	low STR_48
 16699  003DBA  6E0D               	movwf	i2printf@f,c
 16700  003DBC  0EFD               	movlw	high STR_48
 16701  003DBE  6E0E               	movwf	i2printf@f+1,c
 16702  003DC0  ECB8  F00A         	call	i2_printf	;wreg free
 16703  003DC4  0012               	return		;funcret
 16704  003DC6                     __end_of_change_state_to_logs_33:
 16705                           	opt stack 0
 16706                           pclatu	equ	0xFFB
 16707                           pclath	equ	0xFFA
 16708                           tblptru	equ	0xFF8
 16709                           tblptrh	equ	0xFF7
 16710                           tblptrl	equ	0xFF6
 16711                           tablat	equ	0xFF5
 16712                           prodh	equ	0xFF4
 16713                           prodl	equ	0xFF3
 16714                           intcon	equ	0xFF2
 16715                           intcon2	equ	0xFF1
 16716                           intcon3	equ	0xFF0
 16717                           indf0	equ	0xFEF
 16718                           postinc0	equ	0xFEE
 16719                           fsr0h	equ	0xFEA
 16720                           fsr0l	equ	0xFE9
 16721                           wreg	equ	0xFE8
 16722                           postdec1	equ	0xFE5
 16723                           fsr1h	equ	0xFE2
 16724                           fsr1l	equ	0xFE1
 16725                           indf2	equ	0xFDF
 16726                           postinc2	equ	0xFDE
 16727                           postdec2	equ	0xFDD
 16728                           fsr2h	equ	0xFDA
 16729                           fsr2l	equ	0xFD9
 16730                           status	equ	0xFD8
 16731                           
 16732 ;; *************** function _change_state_to_logs_23 *****************
 16733 ;; Defined at:
 16734 ;;		line 533 in file "UI.c"
 16735 ;; Parameters:    Size  Location     Type
 16736 ;;		None
 16737 ;; Auto vars:     Size  Location     Type
 16738 ;;		None
 16739 ;; Return value:  Size  Location     Type
 16740 ;;                  1    wreg      void 
 16741 ;; Registers used:
 16742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16743 ;; Tracked objects:
 16744 ;;		On entry : 0/0
 16745 ;;		On exit  : 0/0
 16746 ;;		Unchanged: 0/0
 16747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16752 ;;Total ram usage:        0 bytes
 16753 ;; Hardware stack levels used:    1
 16754 ;; Hardware stack levels required when called:    3
 16755 ;; This function calls:
 16756 ;;		i2_lcdInst
 16757 ;;		i2_printf
 16758 ;; This function is called by:
 16759 ;;		_updateMenu
 16760 ;;		_inputHandler
 16761 ;; This function uses a non-reentrant model
 16762 ;;
 16763                           
 16764                           	psect	text66
 16765  003E84                     __ptext66:
 16766                           	opt stack 0
 16767  003E84                     _change_state_to_logs_23:
 16768                           	opt stack 18
 16769                           
 16770                           ;UI.c: 534: cur_state = 1023;
 16771                           
 16772                           ;incstack = 0
 16773  003E84  0E03               	movlw	3
 16774  003E86  0100               	movlb	0	; () banked
 16775  003E88  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16776  003E8A  69DE               	setf	_cur_state& (0+255),b
 16777                           
 16778                           ; BSR set to: 0
 16779                           ;UI.c: 535: lcdInst(0b10000000);;
 16780  003E8C  0E80               	movlw	128
 16781  003E8E  EC74  F020         	call	i2_lcdInst
 16782                           
 16783                           ;UI.c: 536: printf("LOG 2           ");
 16784  003E92  0E15               	movlw	low STR_40
 16785  003E94  6E0D               	movwf	i2printf@f,c
 16786  003E96  0EFD               	movlw	high STR_40
 16787  003E98  6E0E               	movwf	i2printf@f+1,c
 16788  003E9A  ECB8  F00A         	call	i2_printf	;wreg free
 16789                           
 16790                           ;UI.c: 537: lcdInst(0b11000000);;
 16791  003E9E  0EC0               	movlw	192
 16792  003EA0  EC74  F020         	call	i2_lcdInst
 16793                           
 16794                           ;UI.c: 538: printf("LOG 3          <");
 16795  003EA4  0ED0               	movlw	low STR_46
 16796  003EA6  6E0D               	movwf	i2printf@f,c
 16797  003EA8  0EFD               	movlw	high STR_46
 16798  003EAA  6E0E               	movwf	i2printf@f+1,c
 16799  003EAC  ECB8  F00A         	call	i2_printf	;wreg free
 16800  003EB0  0012               	return		;funcret
 16801  003EB2                     __end_of_change_state_to_logs_23:
 16802                           	opt stack 0
 16803                           pclatu	equ	0xFFB
 16804                           pclath	equ	0xFFA
 16805                           tblptru	equ	0xFF8
 16806                           tblptrh	equ	0xFF7
 16807                           tblptrl	equ	0xFF6
 16808                           tablat	equ	0xFF5
 16809                           prodh	equ	0xFF4
 16810                           prodl	equ	0xFF3
 16811                           intcon	equ	0xFF2
 16812                           intcon2	equ	0xFF1
 16813                           intcon3	equ	0xFF0
 16814                           indf0	equ	0xFEF
 16815                           postinc0	equ	0xFEE
 16816                           fsr0h	equ	0xFEA
 16817                           fsr0l	equ	0xFE9
 16818                           wreg	equ	0xFE8
 16819                           postdec1	equ	0xFE5
 16820                           fsr1h	equ	0xFE2
 16821                           fsr1l	equ	0xFE1
 16822                           indf2	equ	0xFDF
 16823                           postinc2	equ	0xFDE
 16824                           postdec2	equ	0xFDD
 16825                           fsr2h	equ	0xFDA
 16826                           fsr2l	equ	0xFD9
 16827                           status	equ	0xFD8
 16828                           
 16829 ;; *************** function _change_state_to_logs_22 *****************
 16830 ;; Defined at:
 16831 ;;		line 526 in file "UI.c"
 16832 ;; Parameters:    Size  Location     Type
 16833 ;;		None
 16834 ;; Auto vars:     Size  Location     Type
 16835 ;;		None
 16836 ;; Return value:  Size  Location     Type
 16837 ;;                  1    wreg      void 
 16838 ;; Registers used:
 16839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16840 ;; Tracked objects:
 16841 ;;		On entry : 0/0
 16842 ;;		On exit  : 0/0
 16843 ;;		Unchanged: 0/0
 16844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16849 ;;Total ram usage:        0 bytes
 16850 ;; Hardware stack levels used:    1
 16851 ;; Hardware stack levels required when called:    3
 16852 ;; This function calls:
 16853 ;;		i2_lcdInst
 16854 ;;		i2_printf
 16855 ;; This function is called by:
 16856 ;;		_updateMenu
 16857 ;;		_inputHandler
 16858 ;; This function uses a non-reentrant model
 16859 ;;
 16860                           
 16861                           	psect	text67
 16862  003DC6                     __ptext67:
 16863                           	opt stack 0
 16864  003DC6                     _change_state_to_logs_22:
 16865                           	opt stack 18
 16866                           
 16867                           ;UI.c: 527: cur_state = 1022;
 16868                           
 16869                           ;incstack = 0
 16870  003DC6  0E03               	movlw	3
 16871  003DC8  0100               	movlb	0	; () banked
 16872  003DCA  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16873  003DCC  0EFE               	movlw	254
 16874  003DCE  6FDE               	movwf	_cur_state& (0+255),b
 16875                           
 16876                           ; BSR set to: 0
 16877                           ;UI.c: 528: lcdInst(0b10000000);;
 16878  003DD0  0E80               	movlw	128
 16879  003DD2  EC74  F020         	call	i2_lcdInst
 16880                           
 16881                           ;UI.c: 529: printf("LOG 2          <");
 16882  003DD6  0EBF               	movlw	low STR_42
 16883  003DD8  6E0D               	movwf	i2printf@f,c
 16884  003DDA  0EFD               	movlw	high STR_42
 16885  003DDC  6E0E               	movwf	i2printf@f+1,c
 16886  003DDE  ECB8  F00A         	call	i2_printf	;wreg free
 16887                           
 16888                           ;UI.c: 530: lcdInst(0b11000000);;
 16889  003DE2  0EC0               	movlw	192
 16890  003DE4  EC74  F020         	call	i2_lcdInst
 16891                           
 16892                           ;UI.c: 531: printf("LOG 3           ");
 16893  003DE8  0E26               	movlw	low STR_44
 16894  003DEA  6E0D               	movwf	i2printf@f,c
 16895  003DEC  0EFD               	movlw	high STR_44
 16896  003DEE  6E0E               	movwf	i2printf@f+1,c
 16897  003DF0  ECB8  F00A         	call	i2_printf	;wreg free
 16898  003DF4  0012               	return		;funcret
 16899  003DF6                     __end_of_change_state_to_logs_22:
 16900                           	opt stack 0
 16901                           pclatu	equ	0xFFB
 16902                           pclath	equ	0xFFA
 16903                           tblptru	equ	0xFF8
 16904                           tblptrh	equ	0xFF7
 16905                           tblptrl	equ	0xFF6
 16906                           tablat	equ	0xFF5
 16907                           prodh	equ	0xFF4
 16908                           prodl	equ	0xFF3
 16909                           intcon	equ	0xFF2
 16910                           intcon2	equ	0xFF1
 16911                           intcon3	equ	0xFF0
 16912                           indf0	equ	0xFEF
 16913                           postinc0	equ	0xFEE
 16914                           fsr0h	equ	0xFEA
 16915                           fsr0l	equ	0xFE9
 16916                           wreg	equ	0xFE8
 16917                           postdec1	equ	0xFE5
 16918                           fsr1h	equ	0xFE2
 16919                           fsr1l	equ	0xFE1
 16920                           indf2	equ	0xFDF
 16921                           postinc2	equ	0xFDE
 16922                           postdec2	equ	0xFDD
 16923                           fsr2h	equ	0xFDA
 16924                           fsr2l	equ	0xFD9
 16925                           status	equ	0xFD8
 16926                           
 16927 ;; *************** function _change_state_to_logs_12 *****************
 16928 ;; Defined at:
 16929 ;;		line 519 in file "UI.c"
 16930 ;; Parameters:    Size  Location     Type
 16931 ;;		None
 16932 ;; Auto vars:     Size  Location     Type
 16933 ;;		None
 16934 ;; Return value:  Size  Location     Type
 16935 ;;                  1    wreg      void 
 16936 ;; Registers used:
 16937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16938 ;; Tracked objects:
 16939 ;;		On entry : 0/0
 16940 ;;		On exit  : 0/0
 16941 ;;		Unchanged: 0/0
 16942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16947 ;;Total ram usage:        0 bytes
 16948 ;; Hardware stack levels used:    1
 16949 ;; Hardware stack levels required when called:    3
 16950 ;; This function calls:
 16951 ;;		i2_lcdInst
 16952 ;;		i2_printf
 16953 ;; This function is called by:
 16954 ;;		_updateMenu
 16955 ;;		_inputHandler
 16956 ;; This function uses a non-reentrant model
 16957 ;;
 16958                           
 16959                           	psect	text68
 16960  003DF6                     __ptext68:
 16961                           	opt stack 0
 16962  003DF6                     _change_state_to_logs_12:
 16963                           	opt stack 18
 16964                           
 16965                           ;UI.c: 520: cur_state = 1012;
 16966                           
 16967                           ;incstack = 0
 16968  003DF6  0E03               	movlw	3
 16969  003DF8  0100               	movlb	0	; () banked
 16970  003DFA  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16971  003DFC  0EF4               	movlw	244
 16972  003DFE  6FDE               	movwf	_cur_state& (0+255),b
 16973                           
 16974                           ; BSR set to: 0
 16975                           ;UI.c: 521: lcdInst(0b10000000);;
 16976  003E00  0E80               	movlw	128
 16977  003E02  EC74  F020         	call	i2_lcdInst
 16978                           
 16979                           ;UI.c: 522: printf("LOG 1           ");
 16980  003E06  0E04               	movlw	low STR_41
 16981  003E08  6E0D               	movwf	i2printf@f,c
 16982  003E0A  0EFD               	movlw	high STR_41
 16983  003E0C  6E0E               	movwf	i2printf@f+1,c
 16984  003E0E  ECB8  F00A         	call	i2_printf	;wreg free
 16985                           
 16986                           ;UI.c: 523: lcdInst(0b11000000);;
 16987  003E12  0EC0               	movlw	192
 16988  003E14  EC74  F020         	call	i2_lcdInst
 16989                           
 16990                           ;UI.c: 524: printf("LOG 2          <");
 16991  003E18  0EBF               	movlw	low STR_42
 16992  003E1A  6E0D               	movwf	i2printf@f,c
 16993  003E1C  0EFD               	movlw	high STR_42
 16994  003E1E  6E0E               	movwf	i2printf@f+1,c
 16995  003E20  ECB8  F00A         	call	i2_printf	;wreg free
 16996  003E24  0012               	return		;funcret
 16997  003E26                     __end_of_change_state_to_logs_12:
 16998                           	opt stack 0
 16999                           pclatu	equ	0xFFB
 17000                           pclath	equ	0xFFA
 17001                           tblptru	equ	0xFF8
 17002                           tblptrh	equ	0xFF7
 17003                           tblptrl	equ	0xFF6
 17004                           tablat	equ	0xFF5
 17005                           prodh	equ	0xFF4
 17006                           prodl	equ	0xFF3
 17007                           intcon	equ	0xFF2
 17008                           intcon2	equ	0xFF1
 17009                           intcon3	equ	0xFF0
 17010                           indf0	equ	0xFEF
 17011                           postinc0	equ	0xFEE
 17012                           fsr0h	equ	0xFEA
 17013                           fsr0l	equ	0xFE9
 17014                           wreg	equ	0xFE8
 17015                           postdec1	equ	0xFE5
 17016                           fsr1h	equ	0xFE2
 17017                           fsr1l	equ	0xFE1
 17018                           indf2	equ	0xFDF
 17019                           postinc2	equ	0xFDE
 17020                           postdec2	equ	0xFDD
 17021                           fsr2h	equ	0xFDA
 17022                           fsr2l	equ	0xFD9
 17023                           status	equ	0xFD8
 17024                           
 17025 ;; *************** function _change_state_to_logs_11 *****************
 17026 ;; Defined at:
 17027 ;;		line 512 in file "UI.c"
 17028 ;; Parameters:    Size  Location     Type
 17029 ;;		None
 17030 ;; Auto vars:     Size  Location     Type
 17031 ;;		None
 17032 ;; Return value:  Size  Location     Type
 17033 ;;                  1    wreg      void 
 17034 ;; Registers used:
 17035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17036 ;; Tracked objects:
 17037 ;;		On entry : 0/0
 17038 ;;		On exit  : 0/0
 17039 ;;		Unchanged: 0/0
 17040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17045 ;;Total ram usage:        0 bytes
 17046 ;; Hardware stack levels used:    1
 17047 ;; Hardware stack levels required when called:    3
 17048 ;; This function calls:
 17049 ;;		i2_lcdInst
 17050 ;;		i2_printf
 17051 ;; This function is called by:
 17052 ;;		_updateMenu
 17053 ;;		_inputHandler
 17054 ;; This function uses a non-reentrant model
 17055 ;;
 17056                           
 17057                           	psect	text69
 17058  003E26                     __ptext69:
 17059                           	opt stack 0
 17060  003E26                     _change_state_to_logs_11:
 17061                           	opt stack 18
 17062                           
 17063                           ;UI.c: 513: cur_state = 1011;
 17064                           
 17065                           ;incstack = 0
 17066  003E26  0E03               	movlw	3
 17067  003E28  0100               	movlb	0	; () banked
 17068  003E2A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17069  003E2C  0EF3               	movlw	243
 17070  003E2E  6FDE               	movwf	_cur_state& (0+255),b
 17071                           
 17072                           ; BSR set to: 0
 17073                           ;UI.c: 514: lcdInst(0b10000000);;
 17074  003E30  0E80               	movlw	128
 17075  003E32  EC74  F020         	call	i2_lcdInst
 17076                           
 17077                           ;UI.c: 515: printf("LOG 1          <");
 17078  003E36  0EAE               	movlw	low STR_39
 17079  003E38  6E0D               	movwf	i2printf@f,c
 17080  003E3A  0EFD               	movlw	high STR_39
 17081  003E3C  6E0E               	movwf	i2printf@f+1,c
 17082  003E3E  ECB8  F00A         	call	i2_printf	;wreg free
 17083                           
 17084                           ;UI.c: 516: lcdInst(0b11000000);;
 17085  003E42  0EC0               	movlw	192
 17086  003E44  EC74  F020         	call	i2_lcdInst
 17087                           
 17088                           ;UI.c: 517: printf("LOG 2           ");
 17089  003E48  0E15               	movlw	low STR_40
 17090  003E4A  6E0D               	movwf	i2printf@f,c
 17091  003E4C  0EFD               	movlw	high STR_40
 17092  003E4E  6E0E               	movwf	i2printf@f+1,c
 17093  003E50  ECB8  F00A         	call	i2_printf	;wreg free
 17094  003E54  0012               	return		;funcret
 17095  003E56                     __end_of_change_state_to_logs_11:
 17096                           	opt stack 0
 17097                           pclatu	equ	0xFFB
 17098                           pclath	equ	0xFFA
 17099                           tblptru	equ	0xFF8
 17100                           tblptrh	equ	0xFF7
 17101                           tblptrl	equ	0xFF6
 17102                           tablat	equ	0xFF5
 17103                           prodh	equ	0xFF4
 17104                           prodl	equ	0xFF3
 17105                           intcon	equ	0xFF2
 17106                           intcon2	equ	0xFF1
 17107                           intcon3	equ	0xFF0
 17108                           indf0	equ	0xFEF
 17109                           postinc0	equ	0xFEE
 17110                           fsr0h	equ	0xFEA
 17111                           fsr0l	equ	0xFE9
 17112                           wreg	equ	0xFE8
 17113                           postdec1	equ	0xFE5
 17114                           fsr1h	equ	0xFE2
 17115                           fsr1l	equ	0xFE1
 17116                           indf2	equ	0xFDF
 17117                           postinc2	equ	0xFDE
 17118                           postdec2	equ	0xFDD
 17119                           fsr2h	equ	0xFDA
 17120                           fsr2l	equ	0xFD9
 17121                           status	equ	0xFD8
 17122                           
 17123 ;; *************** function _dispLogs *****************
 17124 ;; Defined at:
 17125 ;;		line 465 in file "UI.c"
 17126 ;; Parameters:    Size  Location     Type
 17127 ;;  myLog           2   17[COMRAM] int 
 17128 ;; Auto vars:     Size  Location     Type
 17129 ;;		None
 17130 ;; Return value:  Size  Location     Type
 17131 ;;                  1    wreg      void 
 17132 ;; Registers used:
 17133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17134 ;; Tracked objects:
 17135 ;;		On entry : 0/0
 17136 ;;		On exit  : 0/0
 17137 ;;		Unchanged: 0/0
 17138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17139 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17142 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17143 ;;Total ram usage:        2 bytes
 17144 ;; Hardware stack levels used:    1
 17145 ;; Hardware stack levels required when called:    2
 17146 ;; This function calls:
 17147 ;;		_retrieveLog
 17148 ;; This function is called by:
 17149 ;;		_updateMenu
 17150 ;; This function uses a non-reentrant model
 17151 ;;
 17152                           
 17153                           	psect	text70
 17154  003FCC                     __ptext70:
 17155                           	opt stack 0
 17156  003FCC                     _dispLogs:
 17157                           	opt stack 20
 17158                           
 17159                           ;UI.c: 466: logstate = 1;
 17160                           
 17161                           ;incstack = 0
 17162  003FCC  0E00               	movlw	0
 17163  003FCE  0100               	movlb	0	; () banked
 17164  003FD0  6FF7               	movwf	(_logstate+1)& (0+255),b
 17165  003FD2  0E01               	movlw	1
 17166  003FD4  6FF6               	movwf	_logstate& (0+255),b
 17167                           
 17168                           ; BSR set to: 0
 17169                           ;UI.c: 467: log = myLog;
 17170  003FD6  C012  F0E6         	movff	dispLogs@myLog,_log
 17171  003FDA  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 17172                           
 17173                           ; BSR set to: 0
 17174                           ;UI.c: 468: retrieveLog(myLog - 1);
 17175  003FDE  0EFF               	movlw	255
 17176  003FE0  2412               	addwf	dispLogs@myLog,w,c
 17177  003FE2  6E07               	movwf	retrieveLog@logNum,c
 17178  003FE4  0EFF               	movlw	255
 17179  003FE6  2013               	addwfc	dispLogs@myLog+1,w,c
 17180  003FE8  6E08               	movwf	retrieveLog@logNum+1,c
 17181  003FEA  EC86  F015         	call	_retrieveLog	;wreg free
 17182  003FEE  0012               	return		;funcret
 17183  003FF0                     __end_of_dispLogs:
 17184                           	opt stack 0
 17185                           pclatu	equ	0xFFB
 17186                           pclath	equ	0xFFA
 17187                           tblptru	equ	0xFF8
 17188                           tblptrh	equ	0xFF7
 17189                           tblptrl	equ	0xFF6
 17190                           tablat	equ	0xFF5
 17191                           prodh	equ	0xFF4
 17192                           prodl	equ	0xFF3
 17193                           intcon	equ	0xFF2
 17194                           intcon2	equ	0xFF1
 17195                           intcon3	equ	0xFF0
 17196                           indf0	equ	0xFEF
 17197                           postinc0	equ	0xFEE
 17198                           fsr0h	equ	0xFEA
 17199                           fsr0l	equ	0xFE9
 17200                           wreg	equ	0xFE8
 17201                           postdec1	equ	0xFE5
 17202                           fsr1h	equ	0xFE2
 17203                           fsr1l	equ	0xFE1
 17204                           indf2	equ	0xFDF
 17205                           postinc2	equ	0xFDE
 17206                           postdec2	equ	0xFDD
 17207                           fsr2h	equ	0xFDA
 17208                           fsr2l	equ	0xFD9
 17209                           status	equ	0xFD8
 17210                           
 17211 ;; *************** function _retrieveLog *****************
 17212 ;; Defined at:
 17213 ;;		line 134 in file "EEPROM.c"
 17214 ;; Parameters:    Size  Location     Type
 17215 ;;  logNum          2    6[COMRAM] int 
 17216 ;; Auto vars:     Size  Location     Type
 17217 ;;  i               2   13[COMRAM] int 
 17218 ;;  addr            2   15[COMRAM] unsigned short 
 17219 ;;  byte3           1   12[COMRAM] unsigned char 
 17220 ;;  byte2           1   11[COMRAM] unsigned char 
 17221 ;;  byte1           1   10[COMRAM] unsigned char 
 17222 ;; Return value:  Size  Location     Type
 17223 ;;                  1    wreg      void 
 17224 ;; Registers used:
 17225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17226 ;; Tracked objects:
 17227 ;;		On entry : 0/0
 17228 ;;		On exit  : 0/0
 17229 ;;		Unchanged: 0/0
 17230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17231 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17232 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17233 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17234 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17235 ;;Total ram usage:       11 bytes
 17236 ;; Hardware stack levels used:    1
 17237 ;; Hardware stack levels required when called:    1
 17238 ;; This function calls:
 17239 ;;		i2_EEPROM_read
 17240 ;;		i2___wmul
 17241 ;; This function is called by:
 17242 ;;		_dispLogs
 17243 ;; This function uses a non-reentrant model
 17244 ;;
 17245                           
 17246                           	psect	text71
 17247  002B0C                     __ptext71:
 17248                           	opt stack 0
 17249  002B0C                     _retrieveLog:
 17250                           	opt stack 20
 17251                           
 17252                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 17253                           
 17254                           ;incstack = 0
 17255  002B0C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 17256  002B10  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 17257  002B14  0E00               	movlw	0
 17258  002B16  6E04               	movwf	i2___wmul@multiplicand+1,c
 17259  002B18  0E0B               	movlw	11
 17260  002B1A  6E03               	movwf	i2___wmul@multiplicand,c
 17261  002B1C  ECAE  F01F         	call	i2___wmul	;wreg free
 17262  002B20  0E01               	movlw	1
 17263  002B22  2401               	addwf	?i2___wmul,w,c
 17264  002B24  6E10               	movwf	retrieveLog@addr,c
 17265  002B26  0E00               	movlw	0
 17266  002B28  2002               	addwfc	?i2___wmul+1,w,c
 17267  002B2A  6E11               	movwf	retrieveLog@addr+1,c
 17268                           
 17269                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 17270  002B2C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17271  002B30  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17272  002B34  EC40  F020         	call	i2_EEPROM_read	;wreg free
 17273  002B38  6E0B               	movwf	retrieveLog@byte1,c
 17274                           
 17275                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 17276  002B3A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17277  002B3E  0E80               	movlw	128
 17278  002B40  1609               	andwf	??_retrieveLog,f,c
 17279  002B42  5009               	movf	??_retrieveLog,w,c
 17280  002B44  0100               	movlb	0	; () banked
 17281  002B46  6FE8               	movwf	_log_completion& (0+255),b
 17282  002B48  6BE9               	clrf	(_log_completion+1)& (0+255),b
 17283                           
 17284                           ; BSR set to: 0
 17285                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 17286  002B4A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17287  002B4E  0E0F               	movlw	15
 17288  002B50  1609               	andwf	??_retrieveLog,f,c
 17289  002B52  5009               	movf	??_retrieveLog,w,c
 17290  002B54  0100               	movlb	0	; () banked
 17291  002B56  6FF2               	movwf	_log_count_total& (0+255),b
 17292  002B58  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 17293                           
 17294                           ; BSR set to: 0
 17295                           ;EEPROM.c: 146: addr++;
 17296  002B5A  4A10               	infsnz	retrieveLog@addr,f,c
 17297  002B5C  2A11               	incf	retrieveLog@addr+1,f,c
 17298                           
 17299                           ; BSR set to: 0
 17300                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 17301  002B5E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17302  002B62  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17303  002B66  EC40  F020         	call	i2_EEPROM_read	;wreg free
 17304  002B6A  6E0C               	movwf	retrieveLog@byte2,c
 17305                           
 17306                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 17307  002B6C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17308  002B70  0EF0               	movlw	240
 17309  002B72  1609               	andwf	??_retrieveLog,f,c
 17310  002B74  5009               	movf	??_retrieveLog,w,c
 17311  002B76  0100               	movlb	0	; () banked
 17312  002B78  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 17313  002B7A  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 17314                           
 17315                           ; BSR set to: 0
 17316                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 17317  002B7C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17318  002B80  0E0F               	movlw	15
 17319  002B82  1609               	andwf	??_retrieveLog,f,c
 17320  002B84  5009               	movf	??_retrieveLog,w,c
 17321  002B86  0100               	movlb	0	; () banked
 17322  002B88  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 17323  002B8A  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 17324                           
 17325                           ; BSR set to: 0
 17326                           ;EEPROM.c: 152: addr++;
 17327  002B8C  4A10               	infsnz	retrieveLog@addr,f,c
 17328  002B8E  2A11               	incf	retrieveLog@addr+1,f,c
 17329                           
 17330                           ; BSR set to: 0
 17331                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 17332  002B90  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17333  002B94  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17334  002B98  EC40  F020         	call	i2_EEPROM_read	;wreg free
 17335  002B9C  6E0D               	movwf	retrieveLog@byte3,c
 17336                           
 17337                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 17338  002B9E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17339  002BA2  0EF0               	movlw	240
 17340  002BA4  1609               	andwf	??_retrieveLog,f,c
 17341  002BA6  5009               	movf	??_retrieveLog,w,c
 17342  002BA8  0100               	movlb	0	; () banked
 17343  002BAA  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 17344  002BAC  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 17345                           
 17346                           ; BSR set to: 0
 17347                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 17348  002BAE  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17349  002BB2  0E0F               	movlw	15
 17350  002BB4  1609               	andwf	??_retrieveLog,f,c
 17351  002BB6  5009               	movf	??_retrieveLog,w,c
 17352  002BB8  0100               	movlb	0	; () banked
 17353  002BBA  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 17354  002BBC  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 17355                           
 17356                           ; BSR set to: 0
 17357                           ;EEPROM.c: 156: addr++;
 17358  002BBE  4A10               	infsnz	retrieveLog@addr,f,c
 17359  002BC0  2A11               	incf	retrieveLog@addr+1,f,c
 17360                           
 17361                           ; BSR set to: 0
 17362                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 17363  002BC2  0E00               	movlw	0
 17364  002BC4  6E0F               	movwf	retrieveLog@i+1,c
 17365  002BC6  0E00               	movlw	0
 17366  002BC8  6E0E               	movwf	retrieveLog@i,c
 17367  002BCA                     i2l5669:
 17368                           
 17369                           ; BSR set to: 0
 17370  002BCA  BE0F               	btfsc	retrieveLog@i+1,7,c
 17371  002BCC  D006               	goto	i2l5673
 17372  002BCE  500F               	movf	retrieveLog@i+1,w,c
 17373  002BD0  E11E               	bnz	i2l5681
 17374  002BD2  0E07               	movlw	7
 17375  002BD4  5C0E               	subwf	retrieveLog@i,w,c
 17376  002BD6  B0D8               	btfsc	status,0,c
 17377  002BD8  D01A               	goto	i2l5681
 17378  002BDA                     i2l5673:
 17379                           
 17380                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 17381  002BDA  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17382  002BDE  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17383  002BE2  EC40  F020         	call	i2_EEPROM_read	;wreg free
 17384  002BE6  6E09               	movwf	??_retrieveLog& (0+255),c
 17385  002BE8  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 17386  002BEA  90D8               	bcf	status,0,c
 17387  002BEC  340E               	rlcf	retrieveLog@i,w,c
 17388  002BEE  6ED9               	movwf	fsr2l,c
 17389  002BF0  340F               	rlcf	retrieveLog@i+1,w,c
 17390  002BF2  6EDA               	movwf	fsr2h,c
 17391  002BF4  0E00               	movlw	low _log_startTime
 17392  002BF6  26D9               	addwf	fsr2l,f,c
 17393  002BF8  0E01               	movlw	high _log_startTime
 17394  002BFA  22DA               	addwfc	fsr2h,f,c
 17395  002BFC  C009  FFDE         	movff	??_retrieveLog,postinc2
 17396  002C00  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 17397                           
 17398                           ;EEPROM.c: 161: addr++;
 17399  002C04  4A10               	infsnz	retrieveLog@addr,f,c
 17400  002C06  2A11               	incf	retrieveLog@addr+1,f,c
 17401  002C08  4A0E               	infsnz	retrieveLog@i,f,c
 17402  002C0A  2A0F               	incf	retrieveLog@i+1,f,c
 17403  002C0C  D7DE               	goto	i2l5669
 17404  002C0E                     i2l5681:
 17405                           
 17406                           ;EEPROM.c: 162: }
 17407                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 17408  002C0E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17409  002C12  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17410  002C16  EC40  F020         	call	i2_EEPROM_read	;wreg free
 17411  002C1A  6E09               	movwf	??_retrieveLog& (0+255),c
 17412  002C1C  5009               	movf	??_retrieveLog,w,c
 17413  002C1E  0100               	movlb	0	; () banked
 17414  002C20  6FF4               	movwf	_log_total_time& (0+255),b
 17415  002C22  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 17416                           
 17417                           ; BSR set to: 0
 17418  002C24  0012               	return		;funcret
 17419  002C26                     __end_of_retrieveLog:
 17420                           	opt stack 0
 17421                           pclatu	equ	0xFFB
 17422                           pclath	equ	0xFFA
 17423                           tblptru	equ	0xFF8
 17424                           tblptrh	equ	0xFF7
 17425                           tblptrl	equ	0xFF6
 17426                           tablat	equ	0xFF5
 17427                           prodh	equ	0xFF4
 17428                           prodl	equ	0xFF3
 17429                           intcon	equ	0xFF2
 17430                           intcon2	equ	0xFF1
 17431                           intcon3	equ	0xFF0
 17432                           indf0	equ	0xFEF
 17433                           postinc0	equ	0xFEE
 17434                           fsr0h	equ	0xFEA
 17435                           fsr0l	equ	0xFE9
 17436                           wreg	equ	0xFE8
 17437                           postdec1	equ	0xFE5
 17438                           fsr1h	equ	0xFE2
 17439                           fsr1l	equ	0xFE1
 17440                           indf2	equ	0xFDF
 17441                           postinc2	equ	0xFDE
 17442                           postdec2	equ	0xFDD
 17443                           fsr2h	equ	0xFDA
 17444                           fsr2l	equ	0xFD9
 17445                           status	equ	0xFD8
 17446                           
 17447 ;; *************** function i2_EEPROM_read *****************
 17448 ;; Defined at:
 17449 ;;		line 68 in file "EEPROM.c"
 17450 ;; Parameters:    Size  Location     Type
 17451 ;;  address         2    0[COMRAM] unsigned short 
 17452 ;; Auto vars:     Size  Location     Type
 17453 ;;		None
 17454 ;; Return value:  Size  Location     Type
 17455 ;;                  1    wreg      unsigned char 
 17456 ;; Registers used:
 17457 ;;		wreg, status,2
 17458 ;; Tracked objects:
 17459 ;;		On entry : 0/0
 17460 ;;		On exit  : 0/0
 17461 ;;		Unchanged: 0/0
 17462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17463 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17466 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17467 ;;Total ram usage:        2 bytes
 17468 ;; Hardware stack levels used:    1
 17469 ;; This function calls:
 17470 ;;		Nothing
 17471 ;; This function is called by:
 17472 ;;		_retrieveLog
 17473 ;; This function uses a non-reentrant model
 17474 ;;
 17475                           
 17476                           	psect	text72
 17477  004080                     __ptext72:
 17478                           	opt stack 0
 17479  004080                     i2_EEPROM_read:
 17480                           	opt stack 20
 17481                           
 17482                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 17483                           
 17484                           ; BSR set to: 0
 17485                           ;incstack = 0
 17486  004080  5002               	movf	i2EEPROM_read@address+1,w,c
 17487  004082  6EAA               	movwf	4010,c	;volatile
 17488                           
 17489                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 17490  004084  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 17491                           
 17492                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 17493  004088  9EA6               	bcf	4006,7,c	;volatile
 17494                           
 17495                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 17496  00408A  9CA6               	bcf	4006,6,c	;volatile
 17497                           
 17498                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 17499  00408C  80A6               	bsf	4006,0,c	;volatile
 17500  00408E                     i2l914:
 17501  00408E  B0A6               	btfsc	4006,0,c	;volatile
 17502  004090  D7FE               	goto	i2l914
 17503                           
 17504                           ;EEPROM.c: 81: return EEDATA;
 17505  004092  50A8               	movf	4008,w,c	;volatile
 17506  004094  0012               	return	
 17507  004096                     __end_ofi2_EEPROM_read:
 17508                           	opt stack 0
 17509                           pclatu	equ	0xFFB
 17510                           pclath	equ	0xFFA
 17511                           tblptru	equ	0xFF8
 17512                           tblptrh	equ	0xFF7
 17513                           tblptrl	equ	0xFF6
 17514                           tablat	equ	0xFF5
 17515                           prodh	equ	0xFF4
 17516                           prodl	equ	0xFF3
 17517                           intcon	equ	0xFF2
 17518                           intcon2	equ	0xFF1
 17519                           intcon3	equ	0xFF0
 17520                           indf0	equ	0xFEF
 17521                           postinc0	equ	0xFEE
 17522                           fsr0h	equ	0xFEA
 17523                           fsr0l	equ	0xFE9
 17524                           wreg	equ	0xFE8
 17525                           postdec1	equ	0xFE5
 17526                           fsr1h	equ	0xFE2
 17527                           fsr1l	equ	0xFE1
 17528                           indf2	equ	0xFDF
 17529                           postinc2	equ	0xFDE
 17530                           postdec2	equ	0xFDD
 17531                           fsr2h	equ	0xFDA
 17532                           fsr2l	equ	0xFD9
 17533                           status	equ	0xFD8
 17534                           
 17535 ;; *************** function _printSortTimer *****************
 17536 ;; Defined at:
 17537 ;;		line 258 in file "sort.c"
 17538 ;; Parameters:    Size  Location     Type
 17539 ;;		None
 17540 ;; Auto vars:     Size  Location     Type
 17541 ;;  i               2   72[COMRAM] int 
 17542 ;;  curTime        14   46[COMRAM] int [7]
 17543 ;;  timeDiff        2   70[COMRAM] unsigned int 
 17544 ;;  sec             2   66[COMRAM] int 
 17545 ;;  min             2   64[COMRAM] int 
 17546 ;;  cur_sec         2   62[COMRAM] unsigned int 
 17547 ;;  start_sec       2   60[COMRAM] unsigned int 
 17548 ;;  hour            2   44[COMRAM] int 
 17549 ;; Return value:  Size  Location     Type
 17550 ;;                  1    wreg      void 
 17551 ;; Registers used:
 17552 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17553 ;; Tracked objects:
 17554 ;;		On entry : 0/0
 17555 ;;		On exit  : 0/0
 17556 ;;		Unchanged: 0/0
 17557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17559 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17560 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17561 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17562 ;;Total ram usage:       33 bytes
 17563 ;; Hardware stack levels used:    1
 17564 ;; Hardware stack levels required when called:    3
 17565 ;; This function calls:
 17566 ;;		i2___lwdiv
 17567 ;;		i2___lwmod
 17568 ;;		i2___wmul
 17569 ;;		i2_getRTC
 17570 ;;		i2_lcdInst
 17571 ;;		i2_printf
 17572 ;; This function is called by:
 17573 ;;		_handler
 17574 ;; This function uses a non-reentrant model
 17575 ;;
 17576                           
 17577                           	psect	text73
 17578  00209E                     __ptext73:
 17579                           	opt stack 0
 17580  00209E                     _printSortTimer:
 17581                           	opt stack 20
 17582                           
 17583                           ;sort.c: 259: getRTC();
 17584                           
 17585                           ;incstack = 0
 17586  00209E  EC11  F01B         	call	i2_getRTC	;wreg free
 17587                           
 17588                           ;sort.c: 260: int curTime[7];
 17589                           ;sort.c: 261: for(int i = 0; i < 7; i++){
 17590  0020A2  0E00               	movlw	0
 17591  0020A4  6E4A               	movwf	printSortTimer@i+1,c
 17592  0020A6  0E00               	movlw	0
 17593  0020A8  6E49               	movwf	printSortTimer@i,c
 17594  0020AA                     i2l7517:
 17595  0020AA  BE4A               	btfsc	printSortTimer@i+1,7,c
 17596  0020AC  D006               	goto	i2l7521
 17597  0020AE  504A               	movf	printSortTimer@i+1,w,c
 17598  0020B0  E131               	bnz	i2l7527
 17599  0020B2  0E07               	movlw	7
 17600  0020B4  5C49               	subwf	printSortTimer@i,w,c
 17601  0020B6  B0D8               	btfsc	status,0,c
 17602  0020B8  D02D               	goto	i2l7527
 17603  0020BA                     i2l7521:
 17604                           
 17605                           ;sort.c: 262: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17606  0020BA  0E24               	movlw	low _time
 17607  0020BC  2449               	addwf	printSortTimer@i,w,c
 17608  0020BE  6ED9               	movwf	fsr2l,c
 17609  0020C0  0E01               	movlw	high _time
 17610  0020C2  204A               	addwfc	printSortTimer@i+1,w,c
 17611  0020C4  6EDA               	movwf	fsr2h,c
 17612  0020C6  50DF               	movf	indf2,w,c
 17613  0020C8  6E2A               	movwf	??_printSortTimer& (0+255),c
 17614  0020CA  3A2A               	swapf	??_printSortTimer,f,c
 17615  0020CC  0E0F               	movlw	15
 17616  0020CE  162A               	andwf	??_printSortTimer,f,c
 17617  0020D0  0E0F               	movlw	15
 17618  0020D2  162A               	andwf	??_printSortTimer,f,c
 17619  0020D4  502A               	movf	??_printSortTimer,w,c
 17620  0020D6  0D0A               	mullw	10
 17621  0020D8  0E24               	movlw	low _time
 17622  0020DA  2449               	addwf	printSortTimer@i,w,c
 17623  0020DC  6ED9               	movwf	fsr2l,c
 17624  0020DE  0E01               	movlw	high _time
 17625  0020E0  204A               	addwfc	printSortTimer@i+1,w,c
 17626  0020E2  6EDA               	movwf	fsr2h,c
 17627  0020E4  50DF               	movf	indf2,w,c
 17628  0020E6  0B0F               	andlw	15
 17629  0020E8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 17630  0020EA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 17631  0020EC  50F3               	movf	prodl,w,c
 17632  0020EE  262B               	addwf	??_printSortTimer+1,f,c
 17633  0020F0  50F4               	movf	prodh,w,c
 17634  0020F2  222C               	addwfc	??_printSortTimer+2,f,c
 17635  0020F4  90D8               	bcf	status,0,c
 17636  0020F6  3449               	rlcf	printSortTimer@i,w,c
 17637  0020F8  6ED9               	movwf	fsr2l,c
 17638  0020FA  344A               	rlcf	printSortTimer@i+1,w,c
 17639  0020FC  6EDA               	movwf	fsr2h,c
 17640  0020FE  0E2F               	movlw	low printSortTimer@curTime
 17641  002100  26D9               	addwf	fsr2l,f,c
 17642  002102  0E00               	movlw	high printSortTimer@curTime
 17643  002104  22DA               	addwfc	fsr2h,f,c
 17644  002106  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 17645  00210A  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 17646  00210E  4A49               	infsnz	printSortTimer@i,f,c
 17647  002110  2A4A               	incf	printSortTimer@i+1,f,c
 17648  002112  D7CB               	goto	i2l7517
 17649  002114                     i2l7527:
 17650                           
 17651                           ;sort.c: 263: }
 17652                           ;sort.c: 264: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 17653  002114  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 17654  002118  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 17655  00211C  0E00               	movlw	0
 17656  00211E  6E04               	movwf	i2___wmul@multiplicand+1,c
 17657  002120  0E3C               	movlw	60
 17658  002122  6E03               	movwf	i2___wmul@multiplicand,c
 17659  002124  ECAE  F01F         	call	i2___wmul	;wreg free
 17660  002128  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17661  00212C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17662  002130  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 17663  002134  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 17664  002138  0E0E               	movlw	14
 17665  00213A  6E04               	movwf	i2___wmul@multiplicand+1,c
 17666  00213C  0E10               	movlw	16
 17667  00213E  6E03               	movwf	i2___wmul@multiplicand,c
 17668  002140  ECAE  F01F         	call	i2___wmul	;wreg free
 17669  002144  5001               	movf	?i2___wmul,w,c
 17670  002146  262A               	addwf	??_printSortTimer,f,c
 17671  002148  5002               	movf	?i2___wmul+1,w,c
 17672  00214A  222B               	addwfc	??_printSortTimer+1,f,c
 17673  00214C  0101               	movlb	1	; () banked
 17674  00214E  510E               	movf	_startTime& (0+255),w,b
 17675  002150  242A               	addwf	??_printSortTimer,w,c
 17676  002152  6E3D               	movwf	printSortTimer@start_sec,c
 17677  002154  0101               	movlb	1	; () banked
 17678  002156  510F               	movf	(_startTime+1)& (0+255),w,b
 17679  002158  202B               	addwfc	??_printSortTimer+1,w,c
 17680  00215A  6E3E               	movwf	printSortTimer@start_sec+1,c
 17681                           
 17682                           ;sort.c: 265: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 17683  00215C  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 17684  002160  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 17685  002164  0E00               	movlw	0
 17686  002166  6E04               	movwf	i2___wmul@multiplicand+1,c
 17687  002168  0E3C               	movlw	60
 17688  00216A  6E03               	movwf	i2___wmul@multiplicand,c
 17689  00216C  ECAE  F01F         	call	i2___wmul	;wreg free
 17690  002170  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17691  002174  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17692  002178  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 17693  00217C  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 17694  002180  0E0E               	movlw	14
 17695  002182  6E04               	movwf	i2___wmul@multiplicand+1,c
 17696  002184  0E10               	movlw	16
 17697  002186  6E03               	movwf	i2___wmul@multiplicand,c
 17698  002188  ECAE  F01F         	call	i2___wmul	;wreg free
 17699  00218C  5001               	movf	?i2___wmul,w,c
 17700  00218E  262A               	addwf	??_printSortTimer,f,c
 17701  002190  5002               	movf	?i2___wmul+1,w,c
 17702  002192  222B               	addwfc	??_printSortTimer+1,f,c
 17703  002194  502F               	movf	printSortTimer@curTime,w,c
 17704  002196  242A               	addwf	??_printSortTimer,w,c
 17705  002198  6E3F               	movwf	printSortTimer@cur_sec,c
 17706  00219A  5030               	movf	printSortTimer@curTime+1,w,c
 17707  00219C  202B               	addwfc	??_printSortTimer+1,w,c
 17708  00219E  6E40               	movwf	printSortTimer@cur_sec+1,c
 17709                           
 17710                           ;sort.c: 266: unsigned int timeDiff = cur_sec - start_sec;
 17711  0021A0  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 17712  0021A4  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 17713  0021A8  1E2A               	comf	??_printSortTimer,f,c
 17714  0021AA  1E2B               	comf	??_printSortTimer+1,f,c
 17715  0021AC  4A2A               	infsnz	??_printSortTimer,f,c
 17716  0021AE  2A2B               	incf	??_printSortTimer+1,f,c
 17717  0021B0  503F               	movf	printSortTimer@cur_sec,w,c
 17718  0021B2  242A               	addwf	??_printSortTimer,w,c
 17719  0021B4  6E47               	movwf	printSortTimer@timeDiff,c
 17720  0021B6  5040               	movf	printSortTimer@cur_sec+1,w,c
 17721  0021B8  202B               	addwfc	??_printSortTimer+1,w,c
 17722  0021BA  6E48               	movwf	printSortTimer@timeDiff+1,c
 17723                           
 17724                           ;sort.c: 268: total_time = timeDiff;
 17725  0021BC  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 17726  0021C0  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 17727                           
 17728                           ;sort.c: 270: if(timeDiff >= 180){
 17729  0021C4  5048               	movf	printSortTimer@timeDiff+1,w,c
 17730  0021C6  E104               	bnz	i2u647_40
 17731  0021C8  0EB4               	movlw	180
 17732  0021CA  5C47               	subwf	printSortTimer@timeDiff,w,c
 17733  0021CC  A0D8               	btfss	status,0,c
 17734  0021CE  D003               	goto	i2l7537
 17735  0021D0                     i2u647_40:
 17736                           
 17737                           ;sort.c: 271: machine_state = DoneSorting_state;
 17738  0021D0  0E02               	movlw	2
 17739  0021D2  0100               	movlb	0	; () banked
 17740  0021D4  6FFC               	movwf	_machine_state& (0+255),b
 17741  0021D6                     i2l7537:
 17742                           
 17743                           ;sort.c: 273: }
 17744                           ;sort.c: 275: int hour = timeDiff / 3600;
 17745  0021D6  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 17746  0021DA  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 17747  0021DE  0E0E               	movlw	14
 17748  0021E0  6E09               	movwf	i2___lwdiv@divisor+1,c
 17749  0021E2  0E10               	movlw	16
 17750  0021E4  6E08               	movwf	i2___lwdiv@divisor,c
 17751  0021E6  ECC5  F01C         	call	i2___lwdiv	;wreg free
 17752  0021EA  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 17753  0021EE  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 17754                           
 17755                           ;sort.c: 276: int min = (timeDiff % 3600) / 60;
 17756  0021F2  0E0E               	movlw	14
 17757  0021F4  6E04               	movwf	i2___lwmod@divisor+1,c
 17758  0021F6  0E10               	movlw	16
 17759  0021F8  6E03               	movwf	i2___lwmod@divisor,c
 17760  0021FA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17761  0021FE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17762  002202  ECAB  F01D         	call	i2___lwmod	;wreg free
 17763  002206  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 17764  00220A  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 17765  00220E  0E00               	movlw	0
 17766  002210  6E09               	movwf	i2___lwdiv@divisor+1,c
 17767  002212  0E3C               	movlw	60
 17768  002214  6E08               	movwf	i2___lwdiv@divisor,c
 17769  002216  ECC5  F01C         	call	i2___lwdiv	;wreg free
 17770  00221A  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 17771  00221E  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 17772                           
 17773                           ;sort.c: 277: int sec = (timeDiff % 3600) % 60;
 17774  002222  0E0E               	movlw	14
 17775  002224  6E04               	movwf	i2___lwmod@divisor+1,c
 17776  002226  0E10               	movlw	16
 17777  002228  6E03               	movwf	i2___lwmod@divisor,c
 17778  00222A  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17779  00222E  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17780  002232  ECAB  F01D         	call	i2___lwmod	;wreg free
 17781  002236  C001  F045         	movff	?i2___lwmod,_printSortTimer$2334
 17782  00223A  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2334+1
 17783                           
 17784                           ;sort.c: 277: int sec = (timeDiff % 3600) % 60;
 17785  00223E  C045  F001         	movff	_printSortTimer$2334,i2___lwmod@dividend
 17786  002242  C046  F002         	movff	_printSortTimer$2334+1,i2___lwmod@dividend+1
 17787  002246  0E00               	movlw	0
 17788  002248  6E04               	movwf	i2___lwmod@divisor+1,c
 17789  00224A  0E3C               	movlw	60
 17790  00224C  6E03               	movwf	i2___lwmod@divisor,c
 17791  00224E  ECAB  F01D         	call	i2___lwmod	;wreg free
 17792  002252  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 17793  002256  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 17794                           
 17795                           ;sort.c: 279: lcdInst(0b10000000);;
 17796  00225A  0E80               	movlw	128
 17797  00225C  EC74  F020         	call	i2_lcdInst
 17798                           
 17799                           ;sort.c: 280: printf("SORTING...");
 17800  002260  0E8E               	movlw	low STR_64
 17801  002262  6E0D               	movwf	i2printf@f,c
 17802  002264  0EFF               	movlw	high STR_64
 17803  002266  6E0E               	movwf	i2printf@f+1,c
 17804  002268  ECB8  F00A         	call	i2_printf	;wreg free
 17805                           
 17806                           ;sort.c: 281: lcdInst(0b11000000);;
 17807  00226C  0EC0               	movlw	192
 17808  00226E  EC74  F020         	call	i2_lcdInst
 17809                           
 17810                           ;sort.c: 282: printf("TIME %d:%02d", min, sec);
 17811  002272  0E5F               	movlw	low STR_65
 17812  002274  6E0D               	movwf	i2printf@f,c
 17813  002276  0EFF               	movlw	high STR_65
 17814  002278  6E0E               	movwf	i2printf@f+1,c
 17815  00227A  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 17816  00227E  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 17817  002282  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 17818  002286  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 17819  00228A  ECB8  F00A         	call	i2_printf	;wreg free
 17820  00228E  0012               	return		;funcret
 17821  002290                     __end_of_printSortTimer:
 17822                           	opt stack 0
 17823                           pclatu	equ	0xFFB
 17824                           pclath	equ	0xFFA
 17825                           tblptru	equ	0xFF8
 17826                           tblptrh	equ	0xFF7
 17827                           tblptrl	equ	0xFF6
 17828                           tablat	equ	0xFF5
 17829                           prodh	equ	0xFF4
 17830                           prodl	equ	0xFF3
 17831                           intcon	equ	0xFF2
 17832                           intcon2	equ	0xFF1
 17833                           intcon3	equ	0xFF0
 17834                           indf0	equ	0xFEF
 17835                           postinc0	equ	0xFEE
 17836                           fsr0h	equ	0xFEA
 17837                           fsr0l	equ	0xFE9
 17838                           wreg	equ	0xFE8
 17839                           postdec1	equ	0xFE5
 17840                           fsr1h	equ	0xFE2
 17841                           fsr1l	equ	0xFE1
 17842                           indf2	equ	0xFDF
 17843                           postinc2	equ	0xFDE
 17844                           postdec2	equ	0xFDD
 17845                           fsr2h	equ	0xFDA
 17846                           fsr2l	equ	0xFD9
 17847                           status	equ	0xFD8
 17848                           
 17849 ;; *************** function i2_printf *****************
 17850 ;; Defined at:
 17851 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17852 ;; Parameters:    Size  Location     Type
 17853 ;;  f               2   12[COMRAM] PTR const unsigned char 
 17854 ;;		 -> STR_108(17), STR_107(17), STR_106(18), STR_105(18), 
 17855 ;;		 -> STR_104(15), STR_103(15), STR_102(15), STR_101(17), 
 17856 ;;		 -> STR_100(17), STR_99(17), STR_98(16), STR_97(17), 
 17857 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 17858 ;;		 -> STR_92(17), STR_91(15), STR_90(11), STR_89(17), 
 17859 ;;		 -> STR_88(11), STR_87(17), STR_86(14), STR_85(15), 
 17860 ;;		 -> STR_84(14), STR_83(10), STR_82(16), STR_81(15), 
 17861 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 17862 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 17863 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 17864 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 17865 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 17866 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 17867 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 17868 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 17869 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 17870 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 17871 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 17872 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 17873 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 17874 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 17875 ;; Auto vars:     Size  Location     Type
 17876 ;;  printf          4    0        struct .
 17877 ;;  printf          2   39[COMRAM] int 
 17878 ;;  printf          2   35[COMRAM] unsigned int 
 17879 ;;  printf          2   33[COMRAM] unsigned int 
 17880 ;;  printf          2   31[COMRAM] PTR void [1]
 17881 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17882 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 17883 ;;		 -> STR_109(7), count_total(2), printRTC@month(4), UI@month(4), 
 17884 ;;  printf          1   38[COMRAM] char 
 17885 ;;  printf          1   37[COMRAM] unsigned char 
 17886 ;;  printf          1   28[COMRAM] char 
 17887 ;; Return value:  Size  Location     Type
 17888 ;;                  2   12[COMRAM] int 
 17889 ;; Registers used:
 17890 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17891 ;; Tracked objects:
 17892 ;;		On entry : 0/0
 17893 ;;		On exit  : 0/0
 17894 ;;		Unchanged: 0/0
 17895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17896 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17897 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17898 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17899 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17900 ;;Total ram usage:       29 bytes
 17901 ;; Hardware stack levels used:    1
 17902 ;; Hardware stack levels required when called:    2
 17903 ;; This function calls:
 17904 ;;		i2___lwdiv
 17905 ;;		i2___lwmod
 17906 ;;		i2___wmul
 17907 ;;		i2_isdigit
 17908 ;;		i2_putch
 17909 ;; This function is called by:
 17910 ;;		_change_state_to_menu_11
 17911 ;;		_change_state_to_menu_23
 17912 ;;		_change_state_to_logs_11
 17913 ;;		_change_state_to_logs_12
 17914 ;;		_change_state_to_logs_22
 17915 ;;		_change_state_to_logs_23
 17916 ;;		_change_state_to_logs_33
 17917 ;;		_change_state_to_logs_34
 17918 ;;		_printSortTimer
 17919 ;;		i2_change_state_to_menu_start
 17920 ;;		i2_change_state_to_menu_12
 17921 ;;		i2_change_state_to_menu_22
 17922 ;;		i2_printRTC
 17923 ;; This function uses a non-reentrant model
 17924 ;;
 17925                           
 17926                           	psect	text74
 17927  001570                     __ptext74:
 17928                           	opt stack 0
 17929  001570                     i2_printf:
 17930                           	opt stack 19
 17931                           
 17932                           ;doprnt.c: 466: va_list ap;
 17933                           ;doprnt.c: 499: signed char c;
 17934                           ;doprnt.c: 501: int width;
 17935                           ;doprnt.c: 506: signed char prec;
 17936                           ;doprnt.c: 508: unsigned char flag;
 17937                           ;doprnt.c: 523: union {
 17938                           ;doprnt.c: 524: unsigned long vd;
 17939                           ;doprnt.c: 525: double integ;
 17940                           ;doprnt.c: 526: } tmpval;
 17941                           ;doprnt.c: 528: unsigned int val;
 17942                           ;doprnt.c: 529: unsigned len;
 17943                           ;doprnt.c: 530: const char * cp;
 17944                           ;doprnt.c: 533: *ap = __va_start();
 17945                           
 17946                           ;incstack = 0
 17947  001570  0E0F               	movlw	low (?i2_printf+2)
 17948  001572  6E20               	movwf	i2printf@ap,c
 17949  001574  0E00               	movlw	high (?i2_printf+2)
 17950  001576  6E21               	movwf	i2printf@ap+1,c
 17951                           
 17952                           ;doprnt.c: 536: while(c = *f++) {
 17953  001578  D1A4               	goto	i2l5487
 17954  00157A                     i2l5357:
 17955                           
 17956                           ;doprnt.c: 538: if(c != '%')
 17957  00157A  0E25               	movlw	37
 17958  00157C  1827               	xorwf	i2printf@c,w,c
 17959  00157E  B4D8               	btfsc	status,2,c
 17960  001580  D004               	goto	i2l5361
 17961                           
 17962                           ;doprnt.c: 540: {
 17963                           ;doprnt.c: 541: (putch(c) );
 17964  001582  5027               	movf	i2printf@c,w,c
 17965  001584  EC6E  F020         	call	i2_putch
 17966                           
 17967                           ;doprnt.c: 542: continue;
 17968  001588  D19C               	goto	i2l5487
 17969  00158A                     i2l5361:
 17970                           
 17971                           ;doprnt.c: 543: }
 17972                           ;doprnt.c: 546: width = 0;
 17973  00158A  0E00               	movlw	0
 17974  00158C  6E29               	movwf	i2printf@width+1,c
 17975  00158E  0E00               	movlw	0
 17976  001590  6E28               	movwf	i2printf@width,c
 17977                           
 17978                           ;doprnt.c: 548: flag = 0;
 17979  001592  0E00               	movlw	0
 17980  001594  6E26               	movwf	i2printf@flag,c
 17981                           
 17982                           ;doprnt.c: 551: switch(*f) {
 17983                           
 17984                           ;doprnt.c: 550: for(;;) {
 17985  001596  D003               	goto	i2l5367
 17986  001598                     i2l5363:
 17987                           
 17988                           ;doprnt.c: 580: flag |= 0x04;
 17989  001598  8426               	bsf	i2printf@flag,2,c
 17990                           
 17991                           ;doprnt.c: 581: f++;
 17992  00159A  4A0D               	infsnz	i2printf@f,f,c
 17993  00159C  2A0E               	incf	i2printf@f+1,f,c
 17994  00159E                     i2l5367:
 17995  00159E  C00D  FFF6         	movff	i2printf@f,tblptrl
 17996  0015A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17997  0015A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17998  0015A6  6AF8               	clrf	tblptru,c
 17999  0015A8                     	endif
 18000  0015A8                     	if	0	;tblptru may be non-zero
 18001  0015A8                     	endif
 18002  0015A8  0008               	tblrd		*
 18003  0015AA  50F5               	movf	tablat,w,c
 18004                           
 18005                           ; Switch size 1, requested type "space"
 18006                           ; Number of cases is 1, Range of values is 48 to 48
 18007                           ; switch strategies available:
 18008                           ; Name         Instructions Cycles
 18009                           ; simple_byte            4     3 (average)
 18010                           ;	Chosen strategy is simple_byte
 18011  0015AC  0A30               	xorlw	48	; case 48
 18012  0015AE  B4D8               	btfsc	status,2,c
 18013  0015B0  D7F3               	goto	i2l5363
 18014                           
 18015                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18016                           
 18017                           ;doprnt.c: 586: }
 18018                           
 18019                           ;doprnt.c: 585: break;
 18020  0015B2  C00D  FFF6         	movff	i2printf@f,tblptrl
 18021  0015B6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18022  0015BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18023  0015BA  6AF8               	clrf	tblptru,c
 18024  0015BC                     	endif
 18025  0015BC                     	if	0	;tblptru may be non-zero
 18026  0015BC                     	endif
 18027  0015BC  0008               	tblrd		*
 18028  0015BE  50F5               	movf	tablat,w,c
 18029  0015C0  EC1A  F020         	call	i2_isdigit
 18030  0015C4  A0D8               	btfss	status,0,c
 18031  0015C6  D0A6               	goto	i2l5415
 18032                           
 18033                           ;doprnt.c: 598: width = 0;
 18034  0015C8  0E00               	movlw	0
 18035  0015CA  6E29               	movwf	i2printf@width+1,c
 18036  0015CC  0E00               	movlw	0
 18037  0015CE  6E28               	movwf	i2printf@width,c
 18038  0015D0                     i2l5373:
 18039                           
 18040                           ;doprnt.c: 600: width *= 10;
 18041  0015D0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 18042  0015D4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 18043  0015D8  0E00               	movlw	0
 18044  0015DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 18045  0015DC  0E0A               	movlw	10
 18046  0015DE  6E03               	movwf	i2___wmul@multiplicand,c
 18047  0015E0  ECAE  F01F         	call	i2___wmul	;wreg free
 18048  0015E4  C001  F028         	movff	?i2___wmul,i2printf@width
 18049  0015E8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 18050                           
 18051                           ;doprnt.c: 601: width += *f++ - '0';
 18052  0015EC  0ED0               	movlw	208
 18053  0015EE  6E19               	movwf	??i2_printf& (0+255),c
 18054  0015F0  0EFF               	movlw	255
 18055  0015F2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18056  0015F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 18057  0015F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18058  0015FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18059  0015FC  6AF8               	clrf	tblptru,c
 18060  0015FE                     	endif
 18061  0015FE                     	if	0	;tblptru may be non-zero
 18062  0015FE                     	endif
 18063  0015FE  0008               	tblrd		*
 18064  001600  50F5               	movf	tablat,w,c
 18065  001602  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 18066  001604  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 18067  001606  5019               	movf	??i2_printf,w,c
 18068  001608  261B               	addwf	??i2_printf+2,f,c
 18069  00160A  501A               	movf	??i2_printf+1,w,c
 18070  00160C  221C               	addwfc	??i2_printf+3,f,c
 18071  00160E  501B               	movf	??i2_printf+2,w,c
 18072  001610  2628               	addwf	i2printf@width,f,c
 18073  001612  501C               	movf	??i2_printf+3,w,c
 18074  001614  2229               	addwfc	i2printf@width+1,f,c
 18075  001616  4A0D               	infsnz	i2printf@f,f,c
 18076  001618  2A0E               	incf	i2printf@f+1,f,c
 18077                           
 18078                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18079  00161A  C00D  FFF6         	movff	i2printf@f,tblptrl
 18080  00161E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18081  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18082  001622  6AF8               	clrf	tblptru,c
 18083  001624                     	endif
 18084  001624                     	if	0	;tblptru may be non-zero
 18085  001624                     	endif
 18086  001624  0008               	tblrd		*
 18087  001626  50F5               	movf	tablat,w,c
 18088  001628  EC1A  F020         	call	i2_isdigit
 18089  00162C  A0D8               	btfss	status,0,c
 18090  00162E  D072               	goto	i2l5415
 18091  001630  D7CF               	goto	i2l5373
 18092  001632                     i2l5381:
 18093                           
 18094                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18095  001632  C020  FFD9         	movff	i2printf@ap,fsr2l
 18096  001636  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18097  00163A  CFDE F01E          	movff	postinc2,i2printf@cp
 18098  00163E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 18099  001642  0E02               	movlw	2
 18100  001644  2620               	addwf	i2printf@ap,f,c
 18101  001646  0E00               	movlw	0
 18102  001648  2221               	addwfc	i2printf@ap+1,f,c
 18103                           
 18104                           ;doprnt.c: 740: if(!cp)
 18105  00164A  501E               	movf	i2printf@cp,w,c
 18106  00164C  101F               	iorwf	i2printf@cp+1,w,c
 18107  00164E  A4D8               	btfss	status,2,c
 18108  001650  D004               	goto	i2l5389
 18109                           
 18110                           ;doprnt.c: 741: cp = "(null)";
 18111  001652  0EB5               	movlw	low STR_109
 18112  001654  6E1E               	movwf	i2printf@cp,c
 18113  001656  0EFF               	movlw	high STR_109
 18114  001658  6E1F               	movwf	i2printf@cp+1,c
 18115  00165A                     i2l5389:
 18116                           
 18117                           ;doprnt.c: 745: len = 0;
 18118  00165A  0E00               	movlw	0
 18119  00165C  6E23               	movwf	i2printf@len+1,c
 18120  00165E  0E00               	movlw	0
 18121  001660  6E22               	movwf	i2printf@len,c
 18122                           
 18123                           ;doprnt.c: 746: while(cp[len])
 18124  001662  D002               	goto	i2l5393
 18125  001664                     i2l5391:
 18126                           
 18127                           ;doprnt.c: 747: len++;
 18128  001664  4A22               	infsnz	i2printf@len,f,c
 18129  001666  2A23               	incf	i2printf@len+1,f,c
 18130  001668                     i2l5393:
 18131  001668  5022               	movf	i2printf@len,w,c
 18132  00166A  241E               	addwf	i2printf@cp,w,c
 18133  00166C  6E19               	movwf	??i2_printf& (0+255),c
 18134  00166E  5023               	movf	i2printf@len+1,w,c
 18135  001670  201F               	addwfc	i2printf@cp+1,w,c
 18136  001672  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18137  001674  C019  FFF6         	movff	??i2_printf,tblptrl
 18138  001678  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 18139  00167C  0E00               	movlw	low (__mediumconst shr (0+16))
 18140  00167E  6EF8               	movwf	tblptru,c
 18141  001680  0E0F               	movlw	(high __ramtop+-1)
 18142  001682  64F7               	cpfsgt	tblptrh,c
 18143  001684  D003               	bra	i2u398_47
 18144  001686  0008               	tblrd		*
 18145  001688  50F5               	movf	tablat,w,c
 18146  00168A  D005               	bra	i2u398_40
 18147  00168C                     i2u398_47:
 18148  00168C  CFF6 FFE9          	movff	tblptrl,fsr0l
 18149  001690  CFF7 FFEA          	movff	tblptrh,fsr0h
 18150  001694  50EF               	movf	indf0,w,c
 18151  001696                     i2u398_40:
 18152  001696  0900               	iorlw	0
 18153  001698  A4D8               	btfss	status,2,c
 18154  00169A  D7E4               	goto	i2l5391
 18155                           
 18156                           ;doprnt.c: 757: if(width > len)
 18157  00169C  5028               	movf	i2printf@width,w,c
 18158  00169E  5C22               	subwf	i2printf@len,w,c
 18159  0016A0  5029               	movf	i2printf@width+1,w,c
 18160  0016A2  5823               	subwfb	i2printf@len+1,w,c
 18161  0016A4  B0D8               	btfsc	status,0,c
 18162  0016A6  D005               	goto	i2l5399
 18163                           
 18164                           ;doprnt.c: 758: width -= len;
 18165  0016A8  5022               	movf	i2printf@len,w,c
 18166  0016AA  5E28               	subwf	i2printf@width,f,c
 18167  0016AC  5023               	movf	i2printf@len+1,w,c
 18168  0016AE  5A29               	subwfb	i2printf@width+1,f,c
 18169  0016B0  D008               	goto	i2l5403
 18170  0016B2                     i2l5399:
 18171                           
 18172                           ;doprnt.c: 759: else
 18173                           ;doprnt.c: 760: width = 0;
 18174  0016B2  0E00               	movlw	0
 18175  0016B4  6E29               	movwf	i2printf@width+1,c
 18176  0016B6  0E00               	movlw	0
 18177  0016B8  6E28               	movwf	i2printf@width,c
 18178                           
 18179                           ;doprnt.c: 764: while(width--)
 18180  0016BA  D003               	goto	i2l5403
 18181  0016BC                     i2l5401:
 18182                           
 18183                           ;doprnt.c: 765: (putch(' ') );
 18184  0016BC  0E20               	movlw	32
 18185  0016BE  EC6E  F020         	call	i2_putch
 18186  0016C2                     i2l5403:
 18187  0016C2  0628               	decf	i2printf@width,f,c
 18188  0016C4  A0D8               	btfss	status,0,c
 18189  0016C6  0629               	decf	i2printf@width+1,f,c
 18190  0016C8  2828               	incf	i2printf@width,w,c
 18191  0016CA  E1F8               	bnz	i2l5401
 18192  0016CC  2829               	incf	i2printf@width+1,w,c
 18193  0016CE  B4D8               	btfsc	status,2,c
 18194  0016D0  D016               	goto	i2l5409
 18195  0016D2  D7F4               	goto	i2l5401
 18196  0016D4                     i2l5405:
 18197                           
 18198                           ;doprnt.c: 768: (putch(*cp++) );
 18199  0016D4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 18200  0016D8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 18201  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
 18202  0016DE  6EF8               	movwf	tblptru,c
 18203  0016E0  0E0F               	movlw	(high __ramtop+-1)
 18204  0016E2  64F7               	cpfsgt	tblptrh,c
 18205  0016E4  D003               	bra	i2u402_47
 18206  0016E6  0008               	tblrd		*
 18207  0016E8  50F5               	movf	tablat,w,c
 18208  0016EA  D005               	bra	i2u402_40
 18209  0016EC                     i2u402_47:
 18210  0016EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 18211  0016F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 18212  0016F4  50EF               	movf	indf0,w,c
 18213  0016F6                     i2u402_40:
 18214  0016F6  EC6E  F020         	call	i2_putch
 18215  0016FA  4A1E               	infsnz	i2printf@cp,f,c
 18216  0016FC  2A1F               	incf	i2printf@cp+1,f,c
 18217  0016FE                     i2l5409:
 18218  0016FE  0622               	decf	i2printf@len,f,c
 18219  001700  A0D8               	btfss	status,0,c
 18220  001702  0623               	decf	i2printf@len+1,f,c
 18221  001704  2822               	incf	i2printf@len,w,c
 18222  001706  E1E6               	bnz	i2l5405
 18223  001708  2823               	incf	i2printf@len+1,w,c
 18224  00170A  B4D8               	btfsc	status,2,c
 18225  00170C  D0DA               	goto	i2l5487
 18226  00170E  D7E2               	goto	i2l5405
 18227  001710                     i2l5411:
 18228                           
 18229                           ;doprnt.c: 818: flag |= 0x40;
 18230  001710  8C26               	bsf	i2printf@flag,6,c
 18231                           
 18232                           ;doprnt.c: 822: }
 18233                           
 18234                           ;doprnt.c: 819: break;
 18235  001712  D01B               	goto	i2l1189
 18236  001714                     i2l5415:
 18237  001714  C00D  FFF6         	movff	i2printf@f,tblptrl
 18238  001718  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18239  00171C  4A0D               	infsnz	i2printf@f,f,c
 18240  00171E  2A0E               	incf	i2printf@f+1,f,c
 18241  001720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18242  001720  6AF8               	clrf	tblptru,c
 18243  001722                     	endif
 18244  001722                     	if	0	;tblptru may be non-zero
 18245  001722                     	endif
 18246  001722  0008               	tblrd		*
 18247  001724  CFF5 F027          	movff	tablat,i2printf@c
 18248  001728  5027               	movf	i2printf@c,w,c
 18249                           
 18250                           ; Switch size 1, requested type "space"
 18251                           ; Number of cases is 5, Range of values is 0 to 117
 18252                           ; switch strategies available:
 18253                           ; Name         Instructions Cycles
 18254                           ; simple_byte           16     9 (average)
 18255                           ;	Chosen strategy is simple_byte
 18256  00172A  0A00               	xorlw	0	; case 0
 18257  00172C  B4D8               	btfsc	status,2,c
 18258  00172E  0012               	return	
 18259  001730  0A64               	xorlw	100	; case 100
 18260  001732  B4D8               	btfsc	status,2,c
 18261  001734  D00A               	goto	i2l1189
 18262  001736  0A0D               	xorlw	13	; case 105
 18263  001738  B4D8               	btfsc	status,2,c
 18264  00173A  D007               	goto	i2l1189
 18265  00173C  0A1A               	xorlw	26	; case 115
 18266  00173E  B4D8               	btfsc	status,2,c
 18267  001740  D778               	goto	i2l5381
 18268  001742  0A06               	xorlw	6	; case 117
 18269  001744  B4D8               	btfsc	status,2,c
 18270  001746  D7E4               	goto	i2l5411
 18271  001748  D0BC               	goto	i2l5487
 18272  00174A                     i2l1189:
 18273                           
 18274                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18275  00174A  BC26               	btfsc	i2printf@flag,6,c
 18276  00174C  D015               	goto	i2l5427
 18277                           
 18278                           ;doprnt.c: 1253: {
 18279                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18280  00174E  C020  FFD9         	movff	i2printf@ap,fsr2l
 18281  001752  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18282  001756  CFDE F024          	movff	postinc2,i2printf@val
 18283  00175A  CFDD F025          	movff	postdec2,i2printf@val+1
 18284  00175E  0E02               	movlw	2
 18285  001760  2620               	addwf	i2printf@ap,f,c
 18286  001762  0E00               	movlw	0
 18287  001764  2221               	addwfc	i2printf@ap+1,f,c
 18288                           
 18289                           ;doprnt.c: 1261: if((int)val < 0) {
 18290  001766  AE25               	btfss	i2printf@val+1,7,c
 18291  001768  D013               	goto	i2l5431
 18292                           
 18293                           ;doprnt.c: 1262: flag |= 0x03;
 18294  00176A  0E03               	movlw	3
 18295  00176C  1226               	iorwf	i2printf@flag,f,c
 18296                           
 18297                           ;doprnt.c: 1263: val = -val;
 18298  00176E  6C24               	negf	i2printf@val,c
 18299  001770  1E25               	comf	i2printf@val+1,f,c
 18300  001772  B0D8               	btfsc	status,0,c
 18301  001774  2A25               	incf	i2printf@val+1,f,c
 18302                           
 18303                           ;doprnt.c: 1264: }
 18304                           ;doprnt.c: 1266: }
 18305  001776  D00C               	goto	i2l5431
 18306  001778                     i2l5427:
 18307                           
 18308                           ;doprnt.c: 1268: else
 18309                           ;doprnt.c: 1273: {
 18310                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18311  001778  C020  FFD9         	movff	i2printf@ap,fsr2l
 18312  00177C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18313  001780  CFDE F024          	movff	postinc2,i2printf@val
 18314  001784  CFDD F025          	movff	postdec2,i2printf@val+1
 18315  001788  0E02               	movlw	2
 18316  00178A  2620               	addwf	i2printf@ap,f,c
 18317  00178C  0E00               	movlw	0
 18318  00178E  2221               	addwfc	i2printf@ap+1,f,c
 18319  001790                     i2l5431:
 18320                           
 18321                           ;doprnt.c: 1287: }
 18322                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18323  001790  0E01               	movlw	1
 18324  001792  6E27               	movwf	i2printf@c,c
 18325  001794                     i2l5433:
 18326  001794  0E05               	movlw	5
 18327  001796  1827               	xorwf	i2printf@c,w,c
 18328  001798  B4D8               	btfsc	status,2,c
 18329  00179A  D015               	goto	i2l5445
 18330                           
 18331                           ;doprnt.c: 1306: if(val < dpowers[c])
 18332  00179C  5027               	movf	i2printf@c,w,c
 18333  00179E  0D02               	mullw	2
 18334  0017A0  0E60               	movlw	low _dpowers
 18335  0017A2  24F3               	addwf	prodl,w,c
 18336  0017A4  6EF6               	movwf	tblptrl,c
 18337  0017A6  0EFB               	movlw	high _dpowers
 18338  0017A8  20F4               	addwfc	prodh,w,c
 18339  0017AA  6EF7               	movwf	tblptrh,c
 18340  0017AC                     	if	1	;There are 3 active tblptr bytes
 18341  0017AC  6AF8               	clrf	tblptru,c
 18342  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 18343  0017B0  22F8               	addwfc	tblptru,f,c
 18344  0017B2                     	endif
 18345  0017B2  0009               	tblrd		*+
 18346  0017B4  50F5               	movf	tablat,w,c
 18347  0017B6  5C24               	subwf	i2printf@val,w,c
 18348  0017B8  0009               	tblrd		*+
 18349  0017BA  50F5               	movf	tablat,w,c
 18350  0017BC  5825               	subwfb	i2printf@val+1,w,c
 18351  0017BE  A0D8               	btfss	status,0,c
 18352  0017C0  D002               	goto	i2l5445
 18353                           
 18354                           ;doprnt.c: 1307: break;
 18355  0017C2  2A27               	incf	i2printf@c,f,c
 18356  0017C4  D7E7               	goto	i2l5433
 18357  0017C6                     i2l5445:
 18358                           
 18359                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18360  0017C6  5028               	movf	i2printf@width,w,c
 18361  0017C8  1029               	iorwf	i2printf@width+1,w,c
 18362  0017CA  B4D8               	btfsc	status,2,c
 18363  0017CC  D009               	goto	i2l5451
 18364  0017CE  C026  F019         	movff	i2printf@flag,??i2_printf
 18365  0017D2  0E03               	movlw	3
 18366  0017D4  1619               	andwf	??i2_printf,f,c
 18367  0017D6  B4D8               	btfsc	status,2,c
 18368  0017D8  D003               	goto	i2l5451
 18369                           
 18370                           ;doprnt.c: 1346: width--;
 18371  0017DA  0628               	decf	i2printf@width,f,c
 18372  0017DC  A0D8               	btfss	status,0,c
 18373  0017DE  0629               	decf	i2printf@width+1,f,c
 18374  0017E0                     i2l5451:
 18375                           
 18376                           ;doprnt.c: 1381: if(width > c)
 18377  0017E0  0E80               	movlw	128
 18378  0017E2  BE27               	btfsc	i2printf@c,7,c
 18379  0017E4  0E7F               	movlw	127
 18380  0017E6  6E19               	movwf	??i2_printf& (0+255),c
 18381  0017E8  5028               	movf	i2printf@width,w,c
 18382  0017EA  5C27               	subwf	i2printf@c,w,c
 18383  0017EC  5029               	movf	i2printf@width+1,w,c
 18384  0017EE  0A80               	xorlw	128
 18385  0017F0  5819               	subwfb	??i2_printf& (0+255),w,c
 18386  0017F2  B0D8               	btfsc	status,0,c
 18387  0017F4  D007               	goto	i2l5455
 18388                           
 18389                           ;doprnt.c: 1382: width -= c;
 18390  0017F6  5027               	movf	i2printf@c,w,c
 18391  0017F8  5E28               	subwf	i2printf@width,f,c
 18392  0017FA  0E00               	movlw	0
 18393  0017FC  BE27               	btfsc	i2printf@c,7,c
 18394  0017FE  0EFF               	movlw	255
 18395  001800  5A29               	subwfb	i2printf@width+1,f,c
 18396  001802  D004               	goto	i2l5457
 18397  001804                     i2l5455:
 18398                           
 18399                           ;doprnt.c: 1383: else
 18400                           ;doprnt.c: 1384: width = 0;
 18401  001804  0E00               	movlw	0
 18402  001806  6E29               	movwf	i2printf@width+1,c
 18403  001808  0E00               	movlw	0
 18404  00180A  6E28               	movwf	i2printf@width,c
 18405  00180C                     i2l5457:
 18406                           
 18407                           ;doprnt.c: 1387: if(flag & 0x04) {
 18408  00180C  A426               	btfss	i2printf@flag,2,c
 18409  00180E  D014               	goto	i2l5469
 18410                           
 18411                           ;doprnt.c: 1392: if(flag & 0x03)
 18412  001810  C026  F019         	movff	i2printf@flag,??i2_printf
 18413  001814  0E03               	movlw	3
 18414  001816  1619               	andwf	??i2_printf,f,c
 18415  001818  B4D8               	btfsc	status,2,c
 18416  00181A  D003               	goto	i2l5463
 18417                           
 18418                           ;doprnt.c: 1393: (putch('-') );
 18419  00181C  0E2D               	movlw	45
 18420  00181E  EC6E  F020         	call	i2_putch
 18421  001822                     i2l5463:
 18422                           
 18423                           ;doprnt.c: 1415: if(width)
 18424  001822  5028               	movf	i2printf@width,w,c
 18425  001824  1029               	iorwf	i2printf@width+1,w,c
 18426  001826  B4D8               	btfsc	status,2,c
 18427  001828  D01E               	goto	i2l5479
 18428                           
 18429                           ;doprnt.c: 1417: (putch('0') );
 18430                           
 18431                           ;doprnt.c: 1416: do
 18432  00182A  0E30               	movlw	48
 18433  00182C  EC6E  F020         	call	i2_putch
 18434                           
 18435                           ;doprnt.c: 1418: while(--width);
 18436  001830  0628               	decf	i2printf@width,f,c
 18437  001832  A0D8               	btfss	status,0,c
 18438  001834  0629               	decf	i2printf@width+1,f,c
 18439  001836  D7F5               	goto	i2l5463
 18440  001838                     i2l5469:
 18441                           
 18442                           ;doprnt.c: 1422: {
 18443                           ;doprnt.c: 1424: if(width
 18444                           ;doprnt.c: 1428: )
 18445  001838  5028               	movf	i2printf@width,w,c
 18446  00183A  1029               	iorwf	i2printf@width+1,w,c
 18447  00183C  B4D8               	btfsc	status,2,c
 18448  00183E  D00A               	goto	i2l5475
 18449  001840                     i2l5471:
 18450                           
 18451                           ;doprnt.c: 1430: (putch(' ') );
 18452  001840  0E20               	movlw	32
 18453  001842  EC6E  F020         	call	i2_putch
 18454                           
 18455                           ;doprnt.c: 1431: while(--width);
 18456  001846  0628               	decf	i2printf@width,f,c
 18457  001848  A0D8               	btfss	status,0,c
 18458  00184A  0629               	decf	i2printf@width+1,f,c
 18459  00184C  5028               	movf	i2printf@width,w,c
 18460  00184E  1029               	iorwf	i2printf@width+1,w,c
 18461  001850  A4D8               	btfss	status,2,c
 18462  001852  D7F6               	goto	i2l5471
 18463  001854                     i2l5475:
 18464                           
 18465                           ;doprnt.c: 1438: if(flag & 0x03)
 18466  001854  C026  F019         	movff	i2printf@flag,??i2_printf
 18467  001858  0E03               	movlw	3
 18468  00185A  1619               	andwf	??i2_printf,f,c
 18469  00185C  B4D8               	btfsc	status,2,c
 18470  00185E  D003               	goto	i2l5479
 18471                           
 18472                           ;doprnt.c: 1439: (putch('-') );
 18473  001860  0E2D               	movlw	45
 18474  001862  EC6E  F020         	call	i2_putch
 18475  001866                     i2l5479:
 18476                           
 18477                           ;doprnt.c: 1469: }
 18478                           ;doprnt.c: 1472: prec = c;
 18479  001866  C027  F01D         	movff	i2printf@c,i2printf@prec
 18480                           
 18481                           ;doprnt.c: 1474: while(prec--) {
 18482  00186A  D027               	goto	i2l5485
 18483  00186C                     i2l5481:
 18484                           
 18485                           ;doprnt.c: 1478: {
 18486                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18487  00186C  501D               	movf	i2printf@prec,w,c
 18488  00186E  0D02               	mullw	2
 18489  001870  0E60               	movlw	low _dpowers
 18490  001872  24F3               	addwf	prodl,w,c
 18491  001874  6EF6               	movwf	tblptrl,c
 18492  001876  0EFB               	movlw	high _dpowers
 18493  001878  20F4               	addwfc	prodh,w,c
 18494  00187A  6EF7               	movwf	tblptrh,c
 18495  00187C                     	if	1	;There are 3 active tblptr bytes
 18496  00187C  6AF8               	clrf	tblptru,c
 18497  00187E  0E00               	movlw	low (__mediumconst shr (0+16))
 18498  001880  22F8               	addwfc	tblptru,f,c
 18499  001882                     	endif
 18500  001882  0009               	tblrd		*+
 18501  001884  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 18502  001888  000A               	tblrd		*-
 18503  00188A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 18504  00188E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 18505  001892  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 18506  001896  ECC5  F01C         	call	i2___lwdiv	;wreg free
 18507  00189A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 18508  00189E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 18509  0018A2  0E00               	movlw	0
 18510  0018A4  6E04               	movwf	i2___lwmod@divisor+1,c
 18511  0018A6  0E0A               	movlw	10
 18512  0018A8  6E03               	movwf	i2___lwmod@divisor,c
 18513  0018AA  ECAB  F01D         	call	i2___lwmod	;wreg free
 18514  0018AE  5001               	movf	?i2___lwmod,w,c
 18515  0018B0  0F30               	addlw	48
 18516  0018B2  6E27               	movwf	i2printf@c,c
 18517                           
 18518                           ;doprnt.c: 1523: }
 18519                           ;doprnt.c: 1524: (putch(c) );
 18520  0018B4  5027               	movf	i2printf@c,w,c
 18521  0018B6  EC6E  F020         	call	i2_putch
 18522  0018BA                     i2l5485:
 18523  0018BA  061D               	decf	i2printf@prec,f,c
 18524  0018BC  281D               	incf	i2printf@prec,w,c
 18525  0018BE  A4D8               	btfss	status,2,c
 18526  0018C0  D7D5               	goto	i2l5481
 18527  0018C2                     i2l5487:
 18528  0018C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 18529  0018C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18530  0018CA  4A0D               	infsnz	i2printf@f,f,c
 18531  0018CC  2A0E               	incf	i2printf@f+1,f,c
 18532  0018CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18533  0018CE  6AF8               	clrf	tblptru,c
 18534  0018D0                     	endif
 18535  0018D0                     	if	0	;tblptru may be non-zero
 18536  0018D0                     	endif
 18537  0018D0  0008               	tblrd		*
 18538  0018D2  CFF5 F027          	movff	tablat,i2printf@c
 18539  0018D6  5027               	movf	i2printf@c,w,c
 18540  0018D8  B4D8               	btfsc	status,2,c
 18541  0018DA  0012               	return	
 18542  0018DC  D64E               	goto	i2l5357
 18543  0018DE                     __end_ofi2_printf:
 18544                           	opt stack 0
 18545                           pclatu	equ	0xFFB
 18546                           pclath	equ	0xFFA
 18547                           tblptru	equ	0xFF8
 18548                           tblptrh	equ	0xFF7
 18549                           tblptrl	equ	0xFF6
 18550                           tablat	equ	0xFF5
 18551                           prodh	equ	0xFF4
 18552                           prodl	equ	0xFF3
 18553                           intcon	equ	0xFF2
 18554                           intcon2	equ	0xFF1
 18555                           intcon3	equ	0xFF0
 18556                           indf0	equ	0xFEF
 18557                           postinc0	equ	0xFEE
 18558                           fsr0h	equ	0xFEA
 18559                           fsr0l	equ	0xFE9
 18560                           wreg	equ	0xFE8
 18561                           postdec1	equ	0xFE5
 18562                           fsr1h	equ	0xFE2
 18563                           fsr1l	equ	0xFE1
 18564                           indf2	equ	0xFDF
 18565                           postinc2	equ	0xFDE
 18566                           postdec2	equ	0xFDD
 18567                           fsr2h	equ	0xFDA
 18568                           fsr2l	equ	0xFD9
 18569                           status	equ	0xFD8
 18570                           
 18571 ;; *************** function i2_putch *****************
 18572 ;; Defined at:
 18573 ;;		line 20 in file "lcd.c"
 18574 ;; Parameters:    Size  Location     Type
 18575 ;;  data            1    wreg     unsigned char 
 18576 ;; Auto vars:     Size  Location     Type
 18577 ;;  data            1    2[COMRAM] unsigned char 
 18578 ;; Return value:  Size  Location     Type
 18579 ;;                  1    wreg      void 
 18580 ;; Registers used:
 18581 ;;		wreg, status,2, status,0, cstack
 18582 ;; Tracked objects:
 18583 ;;		On entry : 0/0
 18584 ;;		On exit  : 0/0
 18585 ;;		Unchanged: 0/0
 18586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18591 ;;Total ram usage:        1 bytes
 18592 ;; Hardware stack levels used:    1
 18593 ;; Hardware stack levels required when called:    1
 18594 ;; This function calls:
 18595 ;;		i2_lcdNibble
 18596 ;; This function is called by:
 18597 ;;		i2_printf
 18598 ;; This function uses a non-reentrant model
 18599 ;;
 18600                           
 18601                           	psect	text75
 18602  0040DC                     __ptext75:
 18603                           	opt stack 0
 18604  0040DC                     i2_putch:
 18605                           	opt stack 19
 18606                           
 18607                           ;incstack = 0
 18608                           ;i2putch@data stored from wreg
 18609  0040DC  6E03               	movwf	i2putch@data,c
 18610                           
 18611                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18612  0040DE  848C               	bsf	3980,2,c	;volatile
 18613                           
 18614                           ;lcd.c: 22: lcdNibble(data);
 18615  0040E0  5003               	movf	i2putch@data,w,c
 18616  0040E2  EC9A  F01C         	call	i2_lcdNibble
 18617  0040E6  0012               	return		;funcret
 18618  0040E8                     __end_ofi2_putch:
 18619                           	opt stack 0
 18620                           pclatu	equ	0xFFB
 18621                           pclath	equ	0xFFA
 18622                           tblptru	equ	0xFF8
 18623                           tblptrh	equ	0xFF7
 18624                           tblptrl	equ	0xFF6
 18625                           tablat	equ	0xFF5
 18626                           prodh	equ	0xFF4
 18627                           prodl	equ	0xFF3
 18628                           intcon	equ	0xFF2
 18629                           intcon2	equ	0xFF1
 18630                           intcon3	equ	0xFF0
 18631                           indf0	equ	0xFEF
 18632                           postinc0	equ	0xFEE
 18633                           fsr0h	equ	0xFEA
 18634                           fsr0l	equ	0xFE9
 18635                           wreg	equ	0xFE8
 18636                           postdec1	equ	0xFE5
 18637                           fsr1h	equ	0xFE2
 18638                           fsr1l	equ	0xFE1
 18639                           indf2	equ	0xFDF
 18640                           postinc2	equ	0xFDE
 18641                           postdec2	equ	0xFDD
 18642                           fsr2h	equ	0xFDA
 18643                           fsr2l	equ	0xFD9
 18644                           status	equ	0xFD8
 18645                           
 18646 ;; *************** function i2_isdigit *****************
 18647 ;; Defined at:
 18648 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18649 ;; Parameters:    Size  Location     Type
 18650 ;;  c               1    wreg     unsigned char 
 18651 ;; Auto vars:     Size  Location     Type
 18652 ;;  c               1    2[COMRAM] unsigned char 
 18653 ;; Return value:  Size  Location     Type
 18654 ;;		None               void
 18655 ;; Registers used:
 18656 ;;		wreg, status,2, status,0
 18657 ;; Tracked objects:
 18658 ;;		On entry : 0/0
 18659 ;;		On exit  : 0/0
 18660 ;;		Unchanged: 0/0
 18661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18663 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18664 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18665 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18666 ;;Total ram usage:        3 bytes
 18667 ;; Hardware stack levels used:    1
 18668 ;; This function calls:
 18669 ;;		Nothing
 18670 ;; This function is called by:
 18671 ;;		i2_printf
 18672 ;; This function uses a non-reentrant model
 18673 ;;
 18674                           
 18675                           	psect	text76
 18676  004034                     __ptext76:
 18677                           	opt stack 0
 18678  004034                     i2_isdigit:
 18679                           	opt stack 20
 18680                           
 18681                           ;incstack = 0
 18682                           ;i2isdigit@c stored from wreg
 18683  004034  6E03               	movwf	i2isdigit@c,c
 18684  004036  0E00               	movlw	0
 18685  004038  6E02               	movwf	i2_isdigit$1861,c
 18686  00403A  0E3A               	movlw	58
 18687  00403C  6003               	cpfslt	i2isdigit@c,c
 18688  00403E  D005               	goto	i2l5067
 18689  004040  0E2F               	movlw	47
 18690  004042  6403               	cpfsgt	i2isdigit@c,c
 18691  004044  D002               	goto	i2l5067
 18692  004046  0E01               	movlw	1
 18693  004048  6E02               	movwf	i2_isdigit$1861,c
 18694  00404A                     i2l5067:
 18695  00404A  C002  F001         	movff	i2_isdigit$1861,??i2_isdigit
 18696  00404E  3001               	rrcf	??i2_isdigit,w,c
 18697  004050  0012               	return	
 18698  004052                     __end_ofi2_isdigit:
 18699                           	opt stack 0
 18700                           pclatu	equ	0xFFB
 18701                           pclath	equ	0xFFA
 18702                           tblptru	equ	0xFF8
 18703                           tblptrh	equ	0xFF7
 18704                           tblptrl	equ	0xFF6
 18705                           tablat	equ	0xFF5
 18706                           prodh	equ	0xFF4
 18707                           prodl	equ	0xFF3
 18708                           intcon	equ	0xFF2
 18709                           intcon2	equ	0xFF1
 18710                           intcon3	equ	0xFF0
 18711                           indf0	equ	0xFEF
 18712                           postinc0	equ	0xFEE
 18713                           fsr0h	equ	0xFEA
 18714                           fsr0l	equ	0xFE9
 18715                           wreg	equ	0xFE8
 18716                           postdec1	equ	0xFE5
 18717                           fsr1h	equ	0xFE2
 18718                           fsr1l	equ	0xFE1
 18719                           indf2	equ	0xFDF
 18720                           postinc2	equ	0xFDE
 18721                           postdec2	equ	0xFDD
 18722                           fsr2h	equ	0xFDA
 18723                           fsr2l	equ	0xFD9
 18724                           status	equ	0xFD8
 18725                           
 18726 ;; *************** function i2___wmul *****************
 18727 ;; Defined at:
 18728 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18729 ;; Parameters:    Size  Location     Type
 18730 ;;  multiplier      2    0[COMRAM] unsigned int 
 18731 ;;  multiplicand    2    2[COMRAM] unsigned int 
 18732 ;; Auto vars:     Size  Location     Type
 18733 ;;  __wmul          2    4[COMRAM] unsigned int 
 18734 ;; Return value:  Size  Location     Type
 18735 ;;                  2    0[COMRAM] unsigned int 
 18736 ;; Registers used:
 18737 ;;		wreg, status,2, status,0, prodl, prodh
 18738 ;; Tracked objects:
 18739 ;;		On entry : 0/0
 18740 ;;		On exit  : 0/0
 18741 ;;		Unchanged: 0/0
 18742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18743 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18744 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18746 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18747 ;;Total ram usage:        6 bytes
 18748 ;; Hardware stack levels used:    1
 18749 ;; This function calls:
 18750 ;;		Nothing
 18751 ;; This function is called by:
 18752 ;;		_printSortTimer
 18753 ;;		_retrieveLog
 18754 ;;		i2_printf
 18755 ;; This function uses a non-reentrant model
 18756 ;;
 18757                           
 18758                           	psect	text77
 18759  003F5C                     __ptext77:
 18760                           	opt stack 0
 18761  003F5C                     i2___wmul:
 18762                           	opt stack 20
 18763                           
 18764                           ;incstack = 0
 18765  003F5C  5001               	movf	i2___wmul@multiplier,w,c
 18766  003F5E  0203               	mulwf	i2___wmul@multiplicand,c
 18767  003F60  CFF3 F005          	movff	prodl,i2___wmul@product
 18768  003F64  CFF4 F006          	movff	prodh,i2___wmul@product+1
 18769  003F68  5001               	movf	i2___wmul@multiplier,w,c
 18770  003F6A  0204               	mulwf	i2___wmul@multiplicand+1,c
 18771  003F6C  50F3               	movf	prodl,w,c
 18772  003F6E  2606               	addwf	i2___wmul@product+1,f,c
 18773  003F70  5002               	movf	i2___wmul@multiplier+1,w,c
 18774  003F72  0203               	mulwf	i2___wmul@multiplicand,c
 18775  003F74  50F3               	movf	prodl,w,c
 18776  003F76  2606               	addwf	i2___wmul@product+1,f,c
 18777  003F78  C005  F001         	movff	i2___wmul@product,?i2___wmul
 18778  003F7C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 18779  003F80  0012               	return	
 18780  003F82                     __end_ofi2___wmul:
 18781                           	opt stack 0
 18782                           pclatu	equ	0xFFB
 18783                           pclath	equ	0xFFA
 18784                           tblptru	equ	0xFF8
 18785                           tblptrh	equ	0xFF7
 18786                           tblptrl	equ	0xFF6
 18787                           tablat	equ	0xFF5
 18788                           prodh	equ	0xFF4
 18789                           prodl	equ	0xFF3
 18790                           intcon	equ	0xFF2
 18791                           intcon2	equ	0xFF1
 18792                           intcon3	equ	0xFF0
 18793                           indf0	equ	0xFEF
 18794                           postinc0	equ	0xFEE
 18795                           fsr0h	equ	0xFEA
 18796                           fsr0l	equ	0xFE9
 18797                           wreg	equ	0xFE8
 18798                           postdec1	equ	0xFE5
 18799                           fsr1h	equ	0xFE2
 18800                           fsr1l	equ	0xFE1
 18801                           indf2	equ	0xFDF
 18802                           postinc2	equ	0xFDE
 18803                           postdec2	equ	0xFDD
 18804                           fsr2h	equ	0xFDA
 18805                           fsr2l	equ	0xFD9
 18806                           status	equ	0xFD8
 18807                           
 18808 ;; *************** function i2___lwmod *****************
 18809 ;; Defined at:
 18810 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18811 ;; Parameters:    Size  Location     Type
 18812 ;;  dividend        2    0[COMRAM] unsigned int 
 18813 ;;  divisor         2    2[COMRAM] unsigned int 
 18814 ;; Auto vars:     Size  Location     Type
 18815 ;;  __lwmod         1    4[COMRAM] unsigned char 
 18816 ;; Return value:  Size  Location     Type
 18817 ;;                  2    0[COMRAM] unsigned int 
 18818 ;; Registers used:
 18819 ;;		wreg, status,2, status,0
 18820 ;; Tracked objects:
 18821 ;;		On entry : 0/0
 18822 ;;		On exit  : 0/0
 18823 ;;		Unchanged: 0/0
 18824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18825 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18828 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18829 ;;Total ram usage:        5 bytes
 18830 ;; Hardware stack levels used:    1
 18831 ;; This function calls:
 18832 ;;		Nothing
 18833 ;; This function is called by:
 18834 ;;		_printSortTimer
 18835 ;;		i2_printf
 18836 ;; This function uses a non-reentrant model
 18837 ;;
 18838                           
 18839                           	psect	text78
 18840  003B56                     __ptext78:
 18841                           	opt stack 0
 18842  003B56                     i2___lwmod:
 18843                           	opt stack 20
 18844                           
 18845                           ;incstack = 0
 18846  003B56  5003               	movf	i2___lwmod@divisor,w,c
 18847  003B58  1004               	iorwf	i2___lwmod@divisor+1,w,c
 18848  003B5A  B4D8               	btfsc	status,2,c
 18849  003B5C  D018               	goto	i2l1646
 18850  003B5E  0E01               	movlw	1
 18851  003B60  6E05               	movwf	i2___lwmod@counter,c
 18852  003B62  D004               	goto	i2l5099
 18853  003B64                     i2l5097:
 18854  003B64  90D8               	bcf	status,0,c
 18855  003B66  3603               	rlcf	i2___lwmod@divisor,f,c
 18856  003B68  3604               	rlcf	i2___lwmod@divisor+1,f,c
 18857  003B6A  2A05               	incf	i2___lwmod@counter,f,c
 18858  003B6C                     i2l5099:
 18859  003B6C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 18860  003B6E  D7FA               	goto	i2l5097
 18861  003B70                     i2l5101:
 18862  003B70  5003               	movf	i2___lwmod@divisor,w,c
 18863  003B72  5C01               	subwf	i2___lwmod@dividend,w,c
 18864  003B74  5004               	movf	i2___lwmod@divisor+1,w,c
 18865  003B76  5802               	subwfb	i2___lwmod@dividend+1,w,c
 18866  003B78  A0D8               	btfss	status,0,c
 18867  003B7A  D004               	goto	i2l5105
 18868  003B7C  5003               	movf	i2___lwmod@divisor,w,c
 18869  003B7E  5E01               	subwf	i2___lwmod@dividend,f,c
 18870  003B80  5004               	movf	i2___lwmod@divisor+1,w,c
 18871  003B82  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 18872  003B84                     i2l5105:
 18873  003B84  90D8               	bcf	status,0,c
 18874  003B86  3204               	rrcf	i2___lwmod@divisor+1,f,c
 18875  003B88  3203               	rrcf	i2___lwmod@divisor,f,c
 18876  003B8A  2E05               	decfsz	i2___lwmod@counter,f,c
 18877  003B8C  D7F1               	goto	i2l5101
 18878  003B8E                     i2l1646:
 18879  003B8E  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 18880  003B92  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18881  003B96  0012               	return		;funcret
 18882  003B98                     __end_ofi2___lwmod:
 18883                           	opt stack 0
 18884                           pclatu	equ	0xFFB
 18885                           pclath	equ	0xFFA
 18886                           tblptru	equ	0xFF8
 18887                           tblptrh	equ	0xFF7
 18888                           tblptrl	equ	0xFF6
 18889                           tablat	equ	0xFF5
 18890                           prodh	equ	0xFF4
 18891                           prodl	equ	0xFF3
 18892                           intcon	equ	0xFF2
 18893                           intcon2	equ	0xFF1
 18894                           intcon3	equ	0xFF0
 18895                           indf0	equ	0xFEF
 18896                           postinc0	equ	0xFEE
 18897                           fsr0h	equ	0xFEA
 18898                           fsr0l	equ	0xFE9
 18899                           wreg	equ	0xFE8
 18900                           postdec1	equ	0xFE5
 18901                           fsr1h	equ	0xFE2
 18902                           fsr1l	equ	0xFE1
 18903                           indf2	equ	0xFDF
 18904                           postinc2	equ	0xFDE
 18905                           postdec2	equ	0xFDD
 18906                           fsr2h	equ	0xFDA
 18907                           fsr2l	equ	0xFD9
 18908                           status	equ	0xFD8
 18909                           
 18910 ;; *************** function i2___lwdiv *****************
 18911 ;; Defined at:
 18912 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18913 ;; Parameters:    Size  Location     Type
 18914 ;;  dividend        2    5[COMRAM] unsigned int 
 18915 ;;  divisor         2    7[COMRAM] unsigned int 
 18916 ;; Auto vars:     Size  Location     Type
 18917 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 18918 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 18919 ;; Return value:  Size  Location     Type
 18920 ;;                  2    5[COMRAM] unsigned int 
 18921 ;; Registers used:
 18922 ;;		wreg, status,2, status,0
 18923 ;; Tracked objects:
 18924 ;;		On entry : 0/0
 18925 ;;		On exit  : 0/0
 18926 ;;		Unchanged: 0/0
 18927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18929 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18931 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18932 ;;Total ram usage:        7 bytes
 18933 ;; Hardware stack levels used:    1
 18934 ;; This function calls:
 18935 ;;		Nothing
 18936 ;; This function is called by:
 18937 ;;		_printSortTimer
 18938 ;;		i2_printf
 18939 ;; This function uses a non-reentrant model
 18940 ;;
 18941                           
 18942                           	psect	text79
 18943  00398A                     __ptext79:
 18944                           	opt stack 0
 18945  00398A                     i2___lwdiv:
 18946                           	opt stack 20
 18947                           
 18948                           ;incstack = 0
 18949  00398A  0E00               	movlw	0
 18950  00398C  6E0B               	movwf	i2___lwdiv@quotient+1,c
 18951  00398E  0E00               	movlw	0
 18952  003990  6E0A               	movwf	i2___lwdiv@quotient,c
 18953  003992  5008               	movf	i2___lwdiv@divisor,w,c
 18954  003994  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 18955  003996  B4D8               	btfsc	status,2,c
 18956  003998  D01C               	goto	i2l1636
 18957  00399A  0E01               	movlw	1
 18958  00399C  6E0C               	movwf	i2___lwdiv@counter,c
 18959  00399E  D004               	goto	i2l5079
 18960  0039A0                     i2l5077:
 18961  0039A0  90D8               	bcf	status,0,c
 18962  0039A2  3608               	rlcf	i2___lwdiv@divisor,f,c
 18963  0039A4  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 18964  0039A6  2A0C               	incf	i2___lwdiv@counter,f,c
 18965  0039A8                     i2l5079:
 18966  0039A8  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 18967  0039AA  D7FA               	goto	i2l5077
 18968  0039AC                     i2l5081:
 18969  0039AC  90D8               	bcf	status,0,c
 18970  0039AE  360A               	rlcf	i2___lwdiv@quotient,f,c
 18971  0039B0  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 18972  0039B2  5008               	movf	i2___lwdiv@divisor,w,c
 18973  0039B4  5C06               	subwf	i2___lwdiv@dividend,w,c
 18974  0039B6  5009               	movf	i2___lwdiv@divisor+1,w,c
 18975  0039B8  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 18976  0039BA  A0D8               	btfss	status,0,c
 18977  0039BC  D005               	goto	i2l5089
 18978  0039BE  5008               	movf	i2___lwdiv@divisor,w,c
 18979  0039C0  5E06               	subwf	i2___lwdiv@dividend,f,c
 18980  0039C2  5009               	movf	i2___lwdiv@divisor+1,w,c
 18981  0039C4  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 18982  0039C6  800A               	bsf	i2___lwdiv@quotient,0,c
 18983  0039C8                     i2l5089:
 18984  0039C8  90D8               	bcf	status,0,c
 18985  0039CA  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 18986  0039CC  3208               	rrcf	i2___lwdiv@divisor,f,c
 18987  0039CE  2E0C               	decfsz	i2___lwdiv@counter,f,c
 18988  0039D0  D7ED               	goto	i2l5081
 18989  0039D2                     i2l1636:
 18990  0039D2  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18991  0039D6  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18992  0039DA  0012               	return		;funcret
 18993  0039DC                     __end_ofi2___lwdiv:
 18994                           	opt stack 0
 18995                           pclatu	equ	0xFFB
 18996                           pclath	equ	0xFFA
 18997                           tblptru	equ	0xFF8
 18998                           tblptrh	equ	0xFF7
 18999                           tblptrl	equ	0xFF6
 19000                           tablat	equ	0xFF5
 19001                           prodh	equ	0xFF4
 19002                           prodl	equ	0xFF3
 19003                           intcon	equ	0xFF2
 19004                           intcon2	equ	0xFF1
 19005                           intcon3	equ	0xFF0
 19006                           indf0	equ	0xFEF
 19007                           postinc0	equ	0xFEE
 19008                           fsr0h	equ	0xFEA
 19009                           fsr0l	equ	0xFE9
 19010                           wreg	equ	0xFE8
 19011                           postdec1	equ	0xFE5
 19012                           fsr1h	equ	0xFE2
 19013                           fsr1l	equ	0xFE1
 19014                           indf2	equ	0xFDF
 19015                           postinc2	equ	0xFDE
 19016                           postdec2	equ	0xFDD
 19017                           fsr2h	equ	0xFDA
 19018                           fsr2l	equ	0xFD9
 19019                           status	equ	0xFD8
 19020                           
 19021 ;; *************** function i2_lcdInst *****************
 19022 ;; Defined at:
 19023 ;;		line 15 in file "lcd.c"
 19024 ;; Parameters:    Size  Location     Type
 19025 ;;  data            1    wreg     unsigned char 
 19026 ;; Auto vars:     Size  Location     Type
 19027 ;;  data            1    2[COMRAM] unsigned char 
 19028 ;; Return value:  Size  Location     Type
 19029 ;;                  1    wreg      void 
 19030 ;; Registers used:
 19031 ;;		wreg, status,2, status,0, cstack
 19032 ;; Tracked objects:
 19033 ;;		On entry : 0/0
 19034 ;;		On exit  : 0/0
 19035 ;;		Unchanged: 0/0
 19036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19040 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19041 ;;Total ram usage:        1 bytes
 19042 ;; Hardware stack levels used:    1
 19043 ;; Hardware stack levels required when called:    1
 19044 ;; This function calls:
 19045 ;;		i2_lcdNibble
 19046 ;; This function is called by:
 19047 ;;		_change_state_to_menu_11
 19048 ;;		_change_state_to_menu_23
 19049 ;;		_change_state_to_logs_11
 19050 ;;		_change_state_to_logs_12
 19051 ;;		_change_state_to_logs_22
 19052 ;;		_change_state_to_logs_23
 19053 ;;		_change_state_to_logs_33
 19054 ;;		_change_state_to_logs_34
 19055 ;;		_printSortTimer
 19056 ;;		i2_change_state_to_menu_start
 19057 ;;		i2_change_state_to_menu_12
 19058 ;;		i2_change_state_to_menu_22
 19059 ;;		i2_printRTC
 19060 ;; This function uses a non-reentrant model
 19061 ;;
 19062                           
 19063                           	psect	text80
 19064  0040E8                     __ptext80:
 19065                           	opt stack 0
 19066  0040E8                     i2_lcdInst:
 19067                           	opt stack 19
 19068                           
 19069                           ;incstack = 0
 19070                           ;i2lcdInst@data stored from wreg
 19071  0040E8  6E03               	movwf	i2lcdInst@data,c
 19072                           
 19073                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19074  0040EA  948C               	bcf	3980,2,c	;volatile
 19075                           
 19076                           ;lcd.c: 17: lcdNibble(data);
 19077  0040EC  5003               	movf	i2lcdInst@data,w,c
 19078  0040EE  EC9A  F01C         	call	i2_lcdNibble
 19079  0040F2  0012               	return		;funcret
 19080  0040F4                     __end_ofi2_lcdInst:
 19081                           	opt stack 0
 19082                           pclatu	equ	0xFFB
 19083                           pclath	equ	0xFFA
 19084                           tblptru	equ	0xFF8
 19085                           tblptrh	equ	0xFF7
 19086                           tblptrl	equ	0xFF6
 19087                           tablat	equ	0xFF5
 19088                           prodh	equ	0xFF4
 19089                           prodl	equ	0xFF3
 19090                           intcon	equ	0xFF2
 19091                           intcon2	equ	0xFF1
 19092                           intcon3	equ	0xFF0
 19093                           indf0	equ	0xFEF
 19094                           postinc0	equ	0xFEE
 19095                           fsr0h	equ	0xFEA
 19096                           fsr0l	equ	0xFE9
 19097                           wreg	equ	0xFE8
 19098                           postdec1	equ	0xFE5
 19099                           fsr1h	equ	0xFE2
 19100                           fsr1l	equ	0xFE1
 19101                           indf2	equ	0xFDF
 19102                           postinc2	equ	0xFDE
 19103                           postdec2	equ	0xFDD
 19104                           fsr2h	equ	0xFDA
 19105                           fsr2l	equ	0xFD9
 19106                           status	equ	0xFD8
 19107                           
 19108 ;; *************** function i2_lcdNibble *****************
 19109 ;; Defined at:
 19110 ;;		line 25 in file "lcd.c"
 19111 ;; Parameters:    Size  Location     Type
 19112 ;;  data            1    wreg     unsigned char 
 19113 ;; Auto vars:     Size  Location     Type
 19114 ;;  data            1    1[COMRAM] unsigned char 
 19115 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19116 ;; Return value:  Size  Location     Type
 19117 ;;                  1    wreg      void 
 19118 ;; Registers used:
 19119 ;;		wreg, status,2, status,0
 19120 ;; Tracked objects:
 19121 ;;		On entry : 0/0
 19122 ;;		On exit  : 0/0
 19123 ;;		Unchanged: 0/0
 19124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19128 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19129 ;;Total ram usage:        2 bytes
 19130 ;; Hardware stack levels used:    1
 19131 ;; This function calls:
 19132 ;;		Nothing
 19133 ;; This function is called by:
 19134 ;;		i2_lcdInst
 19135 ;;		i2_putch
 19136 ;; This function uses a non-reentrant model
 19137 ;;
 19138                           
 19139                           	psect	text81
 19140  003934                     __ptext81:
 19141                           	opt stack 0
 19142  003934                     i2_lcdNibble:
 19143                           	opt stack 19
 19144                           
 19145                           ;incstack = 0
 19146                           ;i2lcdNibble@data stored from wreg
 19147  003934  6E02               	movwf	i2lcdNibble@data,c
 19148                           
 19149                           ;lcd.c: 27: char temp = data & 0xF0;
 19150  003936  5002               	movf	i2lcdNibble@data,w,c
 19151  003938  0BF0               	andlw	240
 19152  00393A  6E01               	movwf	i2lcdNibble@temp,c
 19153                           
 19154                           ;lcd.c: 28: LATD = LATD & 0x0F;
 19155  00393C  508C               	movf	3980,w,c	;volatile
 19156  00393E  0B0F               	andlw	15
 19157  003940  6E8C               	movwf	3980,c	;volatile
 19158                           
 19159                           ;lcd.c: 29: LATD = temp | LATD;
 19160  003942  5001               	movf	i2lcdNibble@temp,w,c
 19161  003944  108C               	iorwf	3980,w,c	;volatile
 19162  003946  6E8C               	movwf	3980,c	;volatile
 19163                           
 19164                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 19165  003948  868C               	bsf	3980,3,c	;volatile
 19166                           
 19167                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19168  00394A  0E42               	movlw	66
 19169  00394C                     i2u750_47:
 19170  00394C  2EE8               	decfsz	wreg,f,c
 19171  00394E  D7FE               	bra	i2u750_47
 19172  003950  D000               	nop2	
 19173                           
 19174                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 19175  003952  968C               	bcf	3980,3,c	;volatile
 19176                           
 19177                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19178  003954  0E42               	movlw	66
 19179  003956                     i2u751_47:
 19180  003956  2EE8               	decfsz	wreg,f,c
 19181  003958  D7FE               	bra	i2u751_47
 19182  00395A  D000               	nop2	
 19183                           
 19184                           ;lcd.c: 36: data = data << 4;
 19185  00395C  3802               	swapf	i2lcdNibble@data,w,c
 19186  00395E  0BF0               	andlw	240
 19187  003960  6E02               	movwf	i2lcdNibble@data,c
 19188                           
 19189                           ;lcd.c: 38: temp = data & 0xF0;
 19190  003962  5002               	movf	i2lcdNibble@data,w,c
 19191  003964  0BF0               	andlw	240
 19192  003966  6E01               	movwf	i2lcdNibble@temp,c
 19193                           
 19194                           ;lcd.c: 39: LATD = LATD & 0x0F;
 19195  003968  508C               	movf	3980,w,c	;volatile
 19196  00396A  0B0F               	andlw	15
 19197  00396C  6E8C               	movwf	3980,c	;volatile
 19198                           
 19199                           ;lcd.c: 40: LATD = temp | LATD;
 19200  00396E  5001               	movf	i2lcdNibble@temp,w,c
 19201  003970  108C               	iorwf	3980,w,c	;volatile
 19202  003972  6E8C               	movwf	3980,c	;volatile
 19203                           
 19204                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 19205  003974  868C               	bsf	3980,3,c	;volatile
 19206                           
 19207                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19208  003976  0E42               	movlw	66
 19209  003978                     i2u752_47:
 19210  003978  2EE8               	decfsz	wreg,f,c
 19211  00397A  D7FE               	bra	i2u752_47
 19212  00397C  D000               	nop2	
 19213                           
 19214                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 19215  00397E  968C               	bcf	3980,3,c	;volatile
 19216                           
 19217                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19218  003980  0E42               	movlw	66
 19219  003982                     i2u753_47:
 19220  003982  2EE8               	decfsz	wreg,f,c
 19221  003984  D7FE               	bra	i2u753_47
 19222  003986  D000               	nop2	
 19223  003988  0012               	return		;funcret
 19224  00398A                     __end_ofi2_lcdNibble:
 19225                           	opt stack 0
 19226                           pclatu	equ	0xFFB
 19227                           pclath	equ	0xFFA
 19228                           tblptru	equ	0xFF8
 19229                           tblptrh	equ	0xFF7
 19230                           tblptrl	equ	0xFF6
 19231                           tablat	equ	0xFF5
 19232                           prodh	equ	0xFF4
 19233                           prodl	equ	0xFF3
 19234                           intcon	equ	0xFF2
 19235                           intcon2	equ	0xFF1
 19236                           intcon3	equ	0xFF0
 19237                           indf0	equ	0xFEF
 19238                           postinc0	equ	0xFEE
 19239                           fsr0h	equ	0xFEA
 19240                           fsr0l	equ	0xFE9
 19241                           wreg	equ	0xFE8
 19242                           postdec1	equ	0xFE5
 19243                           fsr1h	equ	0xFE2
 19244                           fsr1l	equ	0xFE1
 19245                           indf2	equ	0xFDF
 19246                           postinc2	equ	0xFDE
 19247                           postdec2	equ	0xFDD
 19248                           fsr2h	equ	0xFDA
 19249                           fsr2l	equ	0xFD9
 19250                           status	equ	0xFD8
 19251                           
 19252 ;; *************** function i2_getRTC *****************
 19253 ;; Defined at:
 19254 ;;		line 44 in file "RTC.c"
 19255 ;; Parameters:    Size  Location     Type
 19256 ;;		None
 19257 ;; Auto vars:     Size  Location     Type
 19258 ;;  getRTC          2    3[COMRAM] int 
 19259 ;; Return value:  Size  Location     Type
 19260 ;;                  1    wreg      void 
 19261 ;; Registers used:
 19262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19263 ;; Tracked objects:
 19264 ;;		On entry : 0/0
 19265 ;;		On exit  : 0/0
 19266 ;;		Unchanged: 0/0
 19267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19269 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19271 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19272 ;;Total ram usage:        2 bytes
 19273 ;; Hardware stack levels used:    1
 19274 ;; Hardware stack levels required when called:    2
 19275 ;; This function calls:
 19276 ;;		i2_I2C_Master_Read
 19277 ;;		i2_I2C_Master_Start
 19278 ;;		i2_I2C_Master_Stop
 19279 ;;		i2_I2C_Master_Write
 19280 ;; This function is called by:
 19281 ;;		_printSortTimer
 19282 ;;		i2_printRTC
 19283 ;; This function uses a non-reentrant model
 19284 ;;
 19285                           
 19286                           	psect	text82
 19287  003622                     __ptext82:
 19288                           	opt stack 0
 19289  003622                     i2_getRTC:
 19290                           	opt stack 18
 19291                           
 19292                           ;RTC.c: 48: I2C_Master_Start();
 19293                           
 19294                           ;incstack = 0
 19295  003622  EC94  F020         	call	i2_I2C_Master_Start	;wreg free
 19296                           
 19297                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 19298  003626  0E00               	movlw	0
 19299  003628  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19300  00362A  0ED0               	movlw	208
 19301  00362C  6E02               	movwf	i2I2C_Master_Write@d,c
 19302  00362E  EC7F  F020         	call	i2_I2C_Master_Write	;wreg free
 19303                           
 19304                           ;RTC.c: 50: I2C_Master_Write(0x00);
 19305  003632  0E00               	movlw	0
 19306  003634  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19307  003636  0E00               	movlw	0
 19308  003638  6E02               	movwf	i2I2C_Master_Write@d,c
 19309  00363A  EC7F  F020         	call	i2_I2C_Master_Write	;wreg free
 19310                           
 19311                           ;RTC.c: 51: I2C_Master_Stop();
 19312  00363E  EC90  F020         	call	i2_I2C_Master_Stop	;wreg free
 19313                           
 19314                           ;RTC.c: 54: I2C_Master_Start();
 19315  003642  EC94  F020         	call	i2_I2C_Master_Start	;wreg free
 19316                           
 19317                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 19318  003646  0E00               	movlw	0
 19319  003648  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19320  00364A  0ED1               	movlw	209
 19321  00364C  6E02               	movwf	i2I2C_Master_Write@d,c
 19322  00364E  EC7F  F020         	call	i2_I2C_Master_Write	;wreg free
 19323                           
 19324                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 19325  003652  0E00               	movlw	0
 19326  003654  6E05               	movwf	i2getRTC@i+1,c
 19327  003656  0E00               	movlw	0
 19328  003658  6E04               	movwf	i2getRTC@i,c
 19329  00365A                     i2l5329:
 19330  00365A  BE05               	btfsc	i2getRTC@i+1,7,c
 19331  00365C  D006               	goto	i2l5333
 19332  00365E  5005               	movf	i2getRTC@i+1,w,c
 19333  003660  E111               	bnz	i2l5339
 19334  003662  0E06               	movlw	6
 19335  003664  5C04               	subwf	i2getRTC@i,w,c
 19336  003666  B0D8               	btfsc	status,0,c
 19337  003668  D00D               	goto	i2l5339
 19338  00366A                     i2l5333:
 19339                           
 19340                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 19341  00366A  0E24               	movlw	low _time
 19342  00366C  2404               	addwf	i2getRTC@i,w,c
 19343  00366E  6ED9               	movwf	fsr2l,c
 19344  003670  0E01               	movlw	high _time
 19345  003672  2005               	addwfc	i2getRTC@i+1,w,c
 19346  003674  6EDA               	movwf	fsr2h,c
 19347  003676  0E01               	movlw	1
 19348  003678  ECC1  F01F         	call	i2_I2C_Master_Read
 19349  00367C  6EDF               	movwf	indf2,c
 19350  00367E  4A04               	infsnz	i2getRTC@i,f,c
 19351  003680  2A05               	incf	i2getRTC@i+1,f,c
 19352  003682  D7EB               	goto	i2l5329
 19353  003684                     i2l5339:
 19354                           
 19355                           ;RTC.c: 58: }
 19356                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 19357  003684  0E00               	movlw	0
 19358  003686  ECC1  F01F         	call	i2_I2C_Master_Read
 19359  00368A  0101               	movlb	1	; () banked
 19360  00368C  6F2A               	movwf	(_time+6)& (0+255),b
 19361                           
 19362                           ;RTC.c: 60: I2C_Master_Stop();
 19363  00368E  EC90  F020         	call	i2_I2C_Master_Stop	;wreg free
 19364  003692  0012               	return		;funcret
 19365  003694                     __end_ofi2_getRTC:
 19366                           	opt stack 0
 19367                           pclatu	equ	0xFFB
 19368                           pclath	equ	0xFFA
 19369                           tblptru	equ	0xFF8
 19370                           tblptrh	equ	0xFF7
 19371                           tblptrl	equ	0xFF6
 19372                           tablat	equ	0xFF5
 19373                           prodh	equ	0xFF4
 19374                           prodl	equ	0xFF3
 19375                           intcon	equ	0xFF2
 19376                           intcon2	equ	0xFF1
 19377                           intcon3	equ	0xFF0
 19378                           indf0	equ	0xFEF
 19379                           postinc0	equ	0xFEE
 19380                           fsr0h	equ	0xFEA
 19381                           fsr0l	equ	0xFE9
 19382                           wreg	equ	0xFE8
 19383                           postdec1	equ	0xFE5
 19384                           fsr1h	equ	0xFE2
 19385                           fsr1l	equ	0xFE1
 19386                           indf2	equ	0xFDF
 19387                           postinc2	equ	0xFDE
 19388                           postdec2	equ	0xFDD
 19389                           fsr2h	equ	0xFDA
 19390                           fsr2l	equ	0xFD9
 19391                           status	equ	0xFD8
 19392                           
 19393 ;; *************** function i2_I2C_Master_Write *****************
 19394 ;; Defined at:
 19395 ;;		line 49 in file "I2C.c"
 19396 ;; Parameters:    Size  Location     Type
 19397 ;;  d               2    1[COMRAM] unsigned int 
 19398 ;; Auto vars:     Size  Location     Type
 19399 ;;		None
 19400 ;; Return value:  Size  Location     Type
 19401 ;;                  1    wreg      void 
 19402 ;; Registers used:
 19403 ;;		wreg, status,2, status,0, cstack
 19404 ;; Tracked objects:
 19405 ;;		On entry : 0/0
 19406 ;;		On exit  : 0/0
 19407 ;;		Unchanged: 0/0
 19408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19409 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19412 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19413 ;;Total ram usage:        2 bytes
 19414 ;; Hardware stack levels used:    1
 19415 ;; Hardware stack levels required when called:    1
 19416 ;; This function calls:
 19417 ;;		i2_I2C_Master_Wait
 19418 ;; This function is called by:
 19419 ;;		i2_getRTC
 19420 ;; This function uses a non-reentrant model
 19421 ;;
 19422                           
 19423                           	psect	text83
 19424  0040FE                     __ptext83:
 19425                           	opt stack 0
 19426  0040FE                     i2_I2C_Master_Write:
 19427                           	opt stack 18
 19428                           
 19429                           ;I2C.c: 51: I2C_Master_Wait();
 19430                           
 19431                           ;incstack = 0
 19432  0040FE  EC55  F020         	call	i2_I2C_Master_Wait	;wreg free
 19433                           
 19434                           ;I2C.c: 52: SSPBUF = d;
 19435  004102  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 19436  004106  0012               	return		;funcret
 19437  004108                     __end_ofi2_I2C_Master_Write:
 19438                           	opt stack 0
 19439                           pclatu	equ	0xFFB
 19440                           pclath	equ	0xFFA
 19441                           tblptru	equ	0xFF8
 19442                           tblptrh	equ	0xFF7
 19443                           tblptrl	equ	0xFF6
 19444                           tablat	equ	0xFF5
 19445                           prodh	equ	0xFF4
 19446                           prodl	equ	0xFF3
 19447                           intcon	equ	0xFF2
 19448                           intcon2	equ	0xFF1
 19449                           intcon3	equ	0xFF0
 19450                           indf0	equ	0xFEF
 19451                           postinc0	equ	0xFEE
 19452                           fsr0h	equ	0xFEA
 19453                           fsr0l	equ	0xFE9
 19454                           wreg	equ	0xFE8
 19455                           postdec1	equ	0xFE5
 19456                           fsr1h	equ	0xFE2
 19457                           fsr1l	equ	0xFE1
 19458                           indf2	equ	0xFDF
 19459                           postinc2	equ	0xFDE
 19460                           postdec2	equ	0xFDD
 19461                           fsr2h	equ	0xFDA
 19462                           fsr2l	equ	0xFD9
 19463                           status	equ	0xFD8
 19464                           
 19465 ;; *************** function i2_I2C_Master_Stop *****************
 19466 ;; Defined at:
 19467 ;;		line 43 in file "I2C.c"
 19468 ;; Parameters:    Size  Location     Type
 19469 ;;		None
 19470 ;; Auto vars:     Size  Location     Type
 19471 ;;		None
 19472 ;; Return value:  Size  Location     Type
 19473 ;;                  1    wreg      void 
 19474 ;; Registers used:
 19475 ;;		wreg, status,2, status,0, cstack
 19476 ;; Tracked objects:
 19477 ;;		On entry : 0/0
 19478 ;;		On exit  : 0/0
 19479 ;;		Unchanged: 0/0
 19480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19485 ;;Total ram usage:        0 bytes
 19486 ;; Hardware stack levels used:    1
 19487 ;; Hardware stack levels required when called:    1
 19488 ;; This function calls:
 19489 ;;		i2_I2C_Master_Wait
 19490 ;; This function is called by:
 19491 ;;		i2_getRTC
 19492 ;; This function uses a non-reentrant model
 19493 ;;
 19494                           
 19495                           	psect	text84
 19496  004120                     __ptext84:
 19497                           	opt stack 0
 19498  004120                     i2_I2C_Master_Stop:
 19499                           	opt stack 18
 19500                           
 19501                           ;I2C.c: 45: I2C_Master_Wait();
 19502                           
 19503                           ;incstack = 0
 19504  004120  EC55  F020         	call	i2_I2C_Master_Wait	;wreg free
 19505                           
 19506                           ;I2C.c: 46: PEN = 1;
 19507  004124  84C5               	bsf	4037,2,c	;volatile
 19508  004126  0012               	return		;funcret
 19509  004128                     __end_ofi2_I2C_Master_Stop:
 19510                           	opt stack 0
 19511                           pclatu	equ	0xFFB
 19512                           pclath	equ	0xFFA
 19513                           tblptru	equ	0xFF8
 19514                           tblptrh	equ	0xFF7
 19515                           tblptrl	equ	0xFF6
 19516                           tablat	equ	0xFF5
 19517                           prodh	equ	0xFF4
 19518                           prodl	equ	0xFF3
 19519                           intcon	equ	0xFF2
 19520                           intcon2	equ	0xFF1
 19521                           intcon3	equ	0xFF0
 19522                           indf0	equ	0xFEF
 19523                           postinc0	equ	0xFEE
 19524                           fsr0h	equ	0xFEA
 19525                           fsr0l	equ	0xFE9
 19526                           wreg	equ	0xFE8
 19527                           postdec1	equ	0xFE5
 19528                           fsr1h	equ	0xFE2
 19529                           fsr1l	equ	0xFE1
 19530                           indf2	equ	0xFDF
 19531                           postinc2	equ	0xFDE
 19532                           postdec2	equ	0xFDD
 19533                           fsr2h	equ	0xFDA
 19534                           fsr2l	equ	0xFD9
 19535                           status	equ	0xFD8
 19536                           
 19537 ;; *************** function i2_I2C_Master_Start *****************
 19538 ;; Defined at:
 19539 ;;		line 31 in file "I2C.c"
 19540 ;; Parameters:    Size  Location     Type
 19541 ;;		None
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;		None
 19544 ;; Return value:  Size  Location     Type
 19545 ;;                  1    wreg      void 
 19546 ;; Registers used:
 19547 ;;		wreg, status,2, status,0, cstack
 19548 ;; Tracked objects:
 19549 ;;		On entry : 0/0
 19550 ;;		On exit  : 0/0
 19551 ;;		Unchanged: 0/0
 19552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19557 ;;Total ram usage:        0 bytes
 19558 ;; Hardware stack levels used:    1
 19559 ;; Hardware stack levels required when called:    1
 19560 ;; This function calls:
 19561 ;;		i2_I2C_Master_Wait
 19562 ;; This function is called by:
 19563 ;;		i2_getRTC
 19564 ;; This function uses a non-reentrant model
 19565 ;;
 19566                           
 19567                           	psect	text85
 19568  004128                     __ptext85:
 19569                           	opt stack 0
 19570  004128                     i2_I2C_Master_Start:
 19571                           	opt stack 18
 19572                           
 19573                           ;I2C.c: 33: I2C_Master_Wait();
 19574                           
 19575                           ;incstack = 0
 19576  004128  EC55  F020         	call	i2_I2C_Master_Wait	;wreg free
 19577                           
 19578                           ;I2C.c: 34: SEN = 1;
 19579  00412C  80C5               	bsf	4037,0,c	;volatile
 19580  00412E  0012               	return		;funcret
 19581  004130                     __end_ofi2_I2C_Master_Start:
 19582                           	opt stack 0
 19583                           pclatu	equ	0xFFB
 19584                           pclath	equ	0xFFA
 19585                           tblptru	equ	0xFF8
 19586                           tblptrh	equ	0xFF7
 19587                           tblptrl	equ	0xFF6
 19588                           tablat	equ	0xFF5
 19589                           prodh	equ	0xFF4
 19590                           prodl	equ	0xFF3
 19591                           intcon	equ	0xFF2
 19592                           intcon2	equ	0xFF1
 19593                           intcon3	equ	0xFF0
 19594                           indf0	equ	0xFEF
 19595                           postinc0	equ	0xFEE
 19596                           fsr0h	equ	0xFEA
 19597                           fsr0l	equ	0xFE9
 19598                           wreg	equ	0xFE8
 19599                           postdec1	equ	0xFE5
 19600                           fsr1h	equ	0xFE2
 19601                           fsr1l	equ	0xFE1
 19602                           indf2	equ	0xFDF
 19603                           postinc2	equ	0xFDE
 19604                           postdec2	equ	0xFDD
 19605                           fsr2h	equ	0xFDA
 19606                           fsr2l	equ	0xFD9
 19607                           status	equ	0xFD8
 19608                           
 19609 ;; *************** function i2_I2C_Master_Read *****************
 19610 ;; Defined at:
 19611 ;;		line 55 in file "I2C.c"
 19612 ;; Parameters:    Size  Location     Type
 19613 ;;  a               1    wreg     unsigned char 
 19614 ;; Auto vars:     Size  Location     Type
 19615 ;;  a               1    1[COMRAM] unsigned char 
 19616 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 19617 ;; Return value:  Size  Location     Type
 19618 ;;                  1    wreg      unsigned char 
 19619 ;; Registers used:
 19620 ;;		wreg, status,2, status,0, cstack
 19621 ;; Tracked objects:
 19622 ;;		On entry : 0/0
 19623 ;;		On exit  : 0/0
 19624 ;;		Unchanged: 0/0
 19625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19627 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19629 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19630 ;;Total ram usage:        2 bytes
 19631 ;; Hardware stack levels used:    1
 19632 ;; Hardware stack levels required when called:    1
 19633 ;; This function calls:
 19634 ;;		i2_I2C_Master_Wait
 19635 ;; This function is called by:
 19636 ;;		i2_getRTC
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           	psect	text86
 19641  003F82                     __ptext86:
 19642                           	opt stack 0
 19643  003F82                     i2_I2C_Master_Read:
 19644                           	opt stack 18
 19645                           
 19646                           ;incstack = 0
 19647                           ;i2I2C_Master_Read@a stored from wreg
 19648  003F82  6E02               	movwf	i2I2C_Master_Read@a,c
 19649                           
 19650                           ;I2C.c: 57: unsigned char temp;
 19651                           ;I2C.c: 58: I2C_Master_Wait();
 19652  003F84  EC55  F020         	call	i2_I2C_Master_Wait	;wreg free
 19653                           
 19654                           ;I2C.c: 59: RCEN = 1;
 19655  003F88  86C5               	bsf	4037,3,c	;volatile
 19656                           
 19657                           ;I2C.c: 60: I2C_Master_Wait();
 19658  003F8A  EC55  F020         	call	i2_I2C_Master_Wait	;wreg free
 19659                           
 19660                           ;I2C.c: 61: temp = SSPBUF;
 19661  003F8E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 19662                           
 19663                           ;I2C.c: 62: I2C_Master_Wait();
 19664  003F92  EC55  F020         	call	i2_I2C_Master_Wait	;wreg free
 19665                           
 19666                           ;I2C.c: 63: ACKDT = (a)?0:1;
 19667  003F96  5002               	movf	i2I2C_Master_Read@a,w,c
 19668  003F98  A4D8               	btfss	status,2,c
 19669  003F9A  D002               	goto	i2u345_40
 19670  003F9C  8AC5               	bsf	4037,5,c	;volatile
 19671  003F9E  D001               	goto	i2l5043
 19672  003FA0                     i2u345_40:
 19673  003FA0  9AC5               	bcf	4037,5,c	;volatile
 19674  003FA2                     i2l5043:
 19675                           
 19676                           ;I2C.c: 64: ACKEN = 1;
 19677  003FA2  88C5               	bsf	4037,4,c	;volatile
 19678                           
 19679                           ;I2C.c: 65: return temp;
 19680  003FA4  5003               	movf	i2I2C_Master_Read@temp,w,c
 19681  003FA6  0012               	return	
 19682  003FA8                     __end_ofi2_I2C_Master_Read:
 19683                           	opt stack 0
 19684                           pclatu	equ	0xFFB
 19685                           pclath	equ	0xFFA
 19686                           tblptru	equ	0xFF8
 19687                           tblptrh	equ	0xFF7
 19688                           tblptrl	equ	0xFF6
 19689                           tablat	equ	0xFF5
 19690                           prodh	equ	0xFF4
 19691                           prodl	equ	0xFF3
 19692                           intcon	equ	0xFF2
 19693                           intcon2	equ	0xFF1
 19694                           intcon3	equ	0xFF0
 19695                           indf0	equ	0xFEF
 19696                           postinc0	equ	0xFEE
 19697                           fsr0h	equ	0xFEA
 19698                           fsr0l	equ	0xFE9
 19699                           wreg	equ	0xFE8
 19700                           postdec1	equ	0xFE5
 19701                           fsr1h	equ	0xFE2
 19702                           fsr1l	equ	0xFE1
 19703                           indf2	equ	0xFDF
 19704                           postinc2	equ	0xFDE
 19705                           postdec2	equ	0xFDD
 19706                           fsr2h	equ	0xFDA
 19707                           fsr2l	equ	0xFD9
 19708                           status	equ	0xFD8
 19709                           
 19710 ;; *************** function i2_I2C_Master_Wait *****************
 19711 ;; Defined at:
 19712 ;;		line 26 in file "I2C.c"
 19713 ;; Parameters:    Size  Location     Type
 19714 ;;		None
 19715 ;; Auto vars:     Size  Location     Type
 19716 ;;		None
 19717 ;; Return value:  Size  Location     Type
 19718 ;;                  1    wreg      void 
 19719 ;; Registers used:
 19720 ;;		wreg, status,2, status,0
 19721 ;; Tracked objects:
 19722 ;;		On entry : 0/0
 19723 ;;		On exit  : 0/0
 19724 ;;		Unchanged: 0/0
 19725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19728 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19729 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19730 ;;Total ram usage:        1 bytes
 19731 ;; Hardware stack levels used:    1
 19732 ;; This function calls:
 19733 ;;		Nothing
 19734 ;; This function is called by:
 19735 ;;		i2_I2C_Master_Start
 19736 ;;		i2_I2C_Master_Stop
 19737 ;;		i2_I2C_Master_Write
 19738 ;;		i2_I2C_Master_Read
 19739 ;; This function uses a non-reentrant model
 19740 ;;
 19741                           
 19742                           	psect	text87
 19743  0040AA                     __ptext87:
 19744                           	opt stack 0
 19745  0040AA                     i2_I2C_Master_Wait:
 19746                           	opt stack 18
 19747  0040AA                     i2l66:
 19748  0040AA  B4C7               	btfsc	4039,2,c	;volatile
 19749  0040AC  D7FE               	goto	i2l66
 19750  0040AE  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 19751  0040B2  0E1F               	movlw	31
 19752  0040B4  1601               	andwf	??i2_I2C_Master_Wait,f,c
 19753  0040B6  B4D8               	btfsc	status,2,c
 19754  0040B8  0012               	return	
 19755  0040BA  D7F7               	goto	i2l66
 19756  0040BC                     __end_ofi2_I2C_Master_Wait:
 19757                           	opt stack 0
 19758                           pclatu	equ	0xFFB
 19759                           pclath	equ	0xFFA
 19760                           tblptru	equ	0xFF8
 19761                           tblptrh	equ	0xFF7
 19762                           tblptrl	equ	0xFF6
 19763                           tablat	equ	0xFF5
 19764                           prodh	equ	0xFF4
 19765                           prodl	equ	0xFF3
 19766                           intcon	equ	0xFF2
 19767                           intcon2	equ	0xFF1
 19768                           intcon3	equ	0xFF0
 19769                           indf0	equ	0xFEF
 19770                           postinc0	equ	0xFEE
 19771                           fsr0h	equ	0xFEA
 19772                           fsr0l	equ	0xFE9
 19773                           wreg	equ	0xFE8
 19774                           postdec1	equ	0xFE5
 19775                           fsr1h	equ	0xFE2
 19776                           fsr1l	equ	0xFE1
 19777                           indf2	equ	0xFDF
 19778                           postinc2	equ	0xFDE
 19779                           postdec2	equ	0xFDD
 19780                           fsr2h	equ	0xFDA
 19781                           fsr2l	equ	0xFD9
 19782                           status	equ	0xFD8
 19783                           pclatu	equ	0xFFB
 19784                           pclath	equ	0xFFA
 19785                           tblptru	equ	0xFF8
 19786                           tblptrh	equ	0xFF7
 19787                           tblptrl	equ	0xFF6
 19788                           tablat	equ	0xFF5
 19789                           prodh	equ	0xFF4
 19790                           prodl	equ	0xFF3
 19791                           intcon	equ	0xFF2
 19792                           intcon2	equ	0xFF1
 19793                           intcon3	equ	0xFF0
 19794                           indf0	equ	0xFEF
 19795                           postinc0	equ	0xFEE
 19796                           fsr0h	equ	0xFEA
 19797                           fsr0l	equ	0xFE9
 19798                           wreg	equ	0xFE8
 19799                           postdec1	equ	0xFE5
 19800                           fsr1h	equ	0xFE2
 19801                           fsr1l	equ	0xFE1
 19802                           indf2	equ	0xFDF
 19803                           postinc2	equ	0xFDE
 19804                           postdec2	equ	0xFDD
 19805                           fsr2h	equ	0xFDA
 19806                           fsr2l	equ	0xFD9
 19807                           status	equ	0xFD8
 19808                           
 19809                           	psect	rparam
 19810  0000                     pclatu	equ	0xFFB
 19811                           pclath	equ	0xFFA
 19812                           tblptru	equ	0xFF8
 19813                           tblptrh	equ	0xFF7
 19814                           tblptrl	equ	0xFF6
 19815                           tablat	equ	0xFF5
 19816                           prodh	equ	0xFF4
 19817                           prodl	equ	0xFF3
 19818                           intcon	equ	0xFF2
 19819                           intcon2	equ	0xFF1
 19820                           intcon3	equ	0xFF0
 19821                           indf0	equ	0xFEF
 19822                           postinc0	equ	0xFEE
 19823                           fsr0h	equ	0xFEA
 19824                           fsr0l	equ	0xFE9
 19825                           wreg	equ	0xFE8
 19826                           postdec1	equ	0xFE5
 19827                           fsr1h	equ	0xFE2
 19828                           fsr1l	equ	0xFE1
 19829                           indf2	equ	0xFDF
 19830                           postinc2	equ	0xFDE
 19831                           postdec2	equ	0xFDD
 19832                           fsr2h	equ	0xFDA
 19833                           fsr2l	equ	0xFD9
 19834                           status	equ	0xFD8
 19835                           
 19836                           	psect	temp
 19837  00007E                     btemp:
 19838                           	opt stack 0
 19839  00007E                     	ds	1
 19840  0000                     int$flags	set	btemp
 19841                           pclatu	equ	0xFFB
 19842                           pclath	equ	0xFFA
 19843                           tblptru	equ	0xFF8
 19844                           tblptrh	equ	0xFF7
 19845                           tblptrl	equ	0xFF6
 19846                           tablat	equ	0xFF5
 19847                           prodh	equ	0xFF4
 19848                           prodl	equ	0xFF3
 19849                           intcon	equ	0xFF2
 19850                           intcon2	equ	0xFF1
 19851                           intcon3	equ	0xFF0
 19852                           indf0	equ	0xFEF
 19853                           postinc0	equ	0xFEE
 19854                           fsr0h	equ	0xFEA
 19855                           fsr0l	equ	0xFE9
 19856                           wreg	equ	0xFE8
 19857                           postdec1	equ	0xFE5
 19858                           fsr1h	equ	0xFE2
 19859                           fsr1l	equ	0xFE1
 19860                           indf2	equ	0xFDF
 19861                           postinc2	equ	0xFDE
 19862                           postdec2	equ	0xFDD
 19863                           fsr2h	equ	0xFDA
 19864                           fsr2l	equ	0xFD9
 19865                           status	equ	0xFD8


Data Sizes:
    Strings     1172
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_109(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_108(CODE[17]), STR_107(CODE[17]), STR_106(CODE[18]), STR_105(CODE[18]), 
		 -> STR_104(CODE[15]), STR_103(CODE[15]), STR_102(CODE[15]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[16]), STR_97(CODE[17]), 
		 -> STR_96(CODE[17]), STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), 
		 -> STR_92(CODE[17]), STR_91(CODE[15]), STR_90(CODE[11]), STR_89(CODE[17]), 
		 -> STR_88(CODE[11]), STR_87(CODE[17]), STR_86(CODE[14]), STR_85(CODE[15]), 
		 -> STR_84(CODE[14]), STR_83(CODE[10]), STR_82(CODE[16]), STR_81(CODE[15]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _PortTestA5->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  140093
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   15891
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   13247
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    2437
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    2437
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10274
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9527
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   20880
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20030
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   41640
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12199
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7831
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7831
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   50735
                                             70 BANK0      2     2      0
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           2     2      0    7921
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7831
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   11465
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    2437
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    7856
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    7831
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7696
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 04 12:57:03 2017

                                    _i 012B                     i2_I2C_Master_Start 4128  
                   i2_I2C_Master_Write 40FE                                     l66 4096  
                                   _ID 29EC                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l901 2D38                                    l478 32F0  
                                  l591 1994                                    l914 4062  
                                  l923 29D6                                    l773 35E8  
                                  l999 2C84                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 3D66  
      __end_of_change_state_to_menu_12 3C08        __end_of_change_state_to_menu_22 3BD0  
      __end_of_change_state_to_menu_23 3D36           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 3E56  
      __end_of_change_state_to_logs_12 3E26        __end_of_change_state_to_logs_22 3DF6  
      __end_of_change_state_to_logs_23 3EB2        __end_of_change_state_to_logs_33 3DC6  
      __end_of_change_state_to_logs_34 3D96                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1002 2CA4  
                                 l1020 2F42                                   l1023 2F46  
                                 l1032 24D8                                   l1121 351E  
                                 l1113 34CC                                   l1130 386A  
                                 l1050 0926                                   l1115 34D0  
                                 l1116 34D4                                   l1060 0B34  
                                 l1117 34D8                                   l1109 34B0  
                                 l1029 24D4                                   l1118 34DC  
                                 l1054 09CC                                   l1038 258A  
                                 l1119 34E0                                   l1047 0922  
                                 l1136 387A                                   l1152 3424  
                                 l1144 33F0                                   l1057 0A32  
                                 l1058 0A80                                   l1059 0AE6  
                                 l1084 0E8E                                   l1096 1028  
                                 l1189 137E                                   l5003 3594  
                                 l5011 3778                                   l1636 35A2  
                                 l5013 3784                                   l1646 37BC  
                                 l5015 378A                                   l1583 3122  
                                 l5121 1146                                   l5019 37AE  
                                 l5131 1176                                   l5221 1476  
                                 l5125 115A                                   l5215 1434  
                                 l5127 116C                                   l5233 14AC  
                                 l5209 1412                                   l5153 1258  
                                 l5145 1226                                   l5137 11AA  
                                 l5305 30A6                                   l5235 14B8  
                                 l5243 14E6                                   l5227 1490  
                                 l5219 146C                                   l5163 12D0  
                                 l5155 1264                                   l5251 1550  
                                 l7003 0522                                   l5307 30B6  
                                 l6131 2AC2                                   l5245 14EC  
                                 l5173 1326                                   l5165 12DC  
                                 l5157 126A                                   l6301 0990  
                                 l7013 053E                                   l5317 3110  
                                 l5309 30BC                                   l6117 2A86  
                                 l5239 14D2                                   l5191 13B6  
                                 l5175 133E                                   l5167 12E2  
                                 l6311 09B8                                   l6303 0996  
                                 l5263 346A                                   l5255 3C12  
                                 l6127 2AB6                                   l6135 2ACE  
                                 l5249 1544                                   l5169 12FA  
                                 l6401 0BE2                                   l5273 34A0  
                                 l5257 3C1E                                   l7121 079E  
                                 l7041 0626                                   l7017 0556  
                                 l7009 0534                                   l6153 277A  
                                 l5195 13D0                                   l5179 1344  
                                 l5291 35D4                                   l6307 09A0  
                                 l6243 2568                                   l5267 3480  
                                 l5531 19F8                                   l7131 07C8  
                                 l7051 0650                                   l6155 2794  
                                 l6163 27E2                                   l5197 13D6  
                                 l5293 35FE                                   l6501 0DE8  
                                 l6421 0C56                                   l6413 0C34  
                                 l6405 0BFA                                   l6261 25FC  
                                 l6237 2526                                   l5541 1A8E  
                                 l5533 1A16                                   l5525 199E  
                                 l7125 07B6                                   l7117 0794  
                                 l7045 063E                                   l7037 061C  
                                 l6157 27AE                                   l6165 2810  
                                 l6085 2EAA                                   l6069 2E70  
                                 l6431 0C7E                                   l6423 0C5C  
                                 l6255 25BA                                   l5543 1AAC  
                                 l5535 1A34                                   l5527 19BC  
                                 l5551 1B06                                   l5519 1912  
                                 l7135 07D2                                   l7055 065A  
                                 l6159 27C8                                   l6601 0FE8  
                                 l6521 0E4E                                   l6505 0DF2  
                                 l6417 0C3E                                   l5545 1ACA  
                                 l5537 1A52                                   l5529 19DA  
                                 l5553 1B64                                   l7161 0852  
                                 l7081 06E2                                   l6611 1010  
                                 l6531 0E76                                   l6443 0CC2  
                                 l6427 0C66                                   l5547 1AE8  
                                 l5539 1A70                                   l7171 087C  
                                 l7139 07EA                                   l7091 070C  
                                 l7059 0672                                   l6605 1000  
                                 l6525 0E66                                   l6517 0E44  
                                 l6509 0E0A                                   l6453 0CEA  
                                 l4933 3EF2                                   l7501 2CC8  
                                 l7165 086A                                   l7157 0848  
                                 l7085 06FA                                   l7077 06D8  
                                 l6631 1078                                   l6607 1006  
                                 l6527 0E6C                                   l6447 0CDA  
                                 l6439 0CB8                                   l6391 0BBA  
                                 l4935 3F04                                   l7503 2CCE  
                                 l7175 0886                                   l7095 0716  
                                 l7183 08AA                                   l5751 2DE6  
                                 l5735 2DA4                                   l5743 2DC6  
                                 _ADIE 007CEE                                   l6721 3418  
                                 l6641 10A0                                   l6553 0EF8  
                                 l6545 0ED6                                   l6473 0D5E  
                                 l6465 0D3C                                   l6457 0D02  
                                 l6449 0CE0                                   l6801 322A  
                                 l6635 1082                                   l6571 0F5A  
                                 l6563 0F20                                   l6555 0EFE  
                                 l6491 0DC0                                   l6483 0D86  
                                 l6475 0D64                                   l6395 0BD2  
                                 l6387 0BB0                                   l7507 2CD4  
                                 l6803 3230                                   l6811 3262  
                                 l7179 089E                                   l7099 072E  
                                 l5747 2DDC                                   l5739 2DAE  
                                 l7435 28FC                                   l6661 10F0  
                                 l6645 10AA                                   l6581 0F82  
                                 l6549 0EE0                                   l6469 0D46  
                                 l6397 0BD8                                   l4957 3E7C  
                                 l7461 2990                                   l7437 2910  
                                 l5693 3158                                   l4991 3552  
                                 l4975 3F2A                                   l6671 1118  
                                 l6639 109A                                   l6575 0F64  
                                 l6559 0F08                                   l6495 0DCA  
                                 l6479 0D6E                                   l6815 3276  
                                 l6807 3254                                   l6903 01CC  
                                 l5863 336E                                   l4993 355E  
                                 l6729 34E4                                   l6665 1108  
                                 l6657 10E6                                   l6649 10C2  
                                 l6585 0F8C                                   l7473 2C26  
                                 l6761 3016                                   l6753 2FEC  
                                 l5689 3142                                   l4995 3564  
                                 l6675 1130                                   l6667 110E  
                                 l6579 0F7C                                   l6499 0DE2  
                                 l7491 2CAA                                   l6771 304C  
                                 l6763 301C                                   l6747 2FD6  
                                 l6931 024E                                   l6923 022C  
                                 l5859 3358                                   l5779 3A6C  
                                 l5699 31CE                                   l7571 32CE  
                                 l6597 0FDE                                   l6589 0FA4  
                                 l7493 2CB0                                   l6941 026A  
                                 l6909 01DA                                   l6861 0100  
                                 l5869 339A                                   l7581 32EC  
                                 l7495 2CB6                                   l6759 300A  
                                 l6775 305A                                   l6791 31FA  
                                 l6927 0236                                   l6871 0122  
                                 l6863 0106                                   l7567 32C2  
                                 l7497 2CBC                                   l6961 02D4  
                                 l6945 0282                                   l6937 0260  
                                 l7569 32C8                                   l7585 32F2  
                                 l7499 2CC2                                   l6779 306E  
                                 l6795 320A                                   l6971 036A  
                                 l6963 02F2                                   l6875 013A  
                                 l6867 0118                                   l7579 32E6  
                                 l6981 0400                                   l6973 0388  
                                 l6965 0310                                   l6893 01A4  
                                 l6799 321E                                   l6983 041E  
                                 l6975 03A6                                   l6967 032E  
                                 l6991 04BE                                   l6895 01AA  
                                 l6879 014C                                   l6985 043C  
                                 l6977 03C4                                   l6969 034C  
                                 l6995 0500                                   l6979 03E2  
                                 l6899 01B4                                   l6989 045A  
                                 l6999 050A                                   STR_1 FBF3  
                                 STR_2 FF44                                   STR_3 FBE1  
                                 STR_4 FE67                                   STR_5 FBE1  
                                 STR_6 FE25                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4220 3ABA  
                                 u4221 3AB6                                   u4230 3ABC  
                                 u3350 3E7A                                   u3610 12A4  
                                 u4260 1994                                   u4245 37F6  
                                 u3550 3B06                                   u3551 3B02  
                                 u3560 3B08                                   u3617 129A  
                                 u3650 131C                                   u4610 2A1C  
                                 _PEIE 007F96                                   u7007 2518  
                                 u4640 2A76                                   u3657 1312  
                                 u7017 255C                                   u4618 2A20  
                                 u7107 0916                                   u7027 257A  
                                 u4820 09CC                                   u6420 29D6  
                                 _RCEN 007E2B                                   u7117 0938  
                                 u7037 25AC                                   u7207 0BC2  
                                 u7127 09A8                                   u7047 25F0  
                                 u4840 0A80                                   u4648 2A7A  
                                 u7217 0BEA                                   u7137 09DC  
                                 u7057 3EFA                                   u7307 0E56  
                                 u7227 0C46                                   u7147 0A42  
                                 u7067 2EF2                                   u4860 0B34  
                                 u7317 0E7E                                   u7237 0C6E  
                                 u7157 0A5E                                   u7077 2F36  
                                 u7407 10B2                                   u7327 0EE8  
                                 u7247 0CCA                                   u7167 0A90  
                                 u7087 2F58                                   u6607 2ED4  
                                 u7417 10F8                                   u7337 0F10  
                                 u7257 0CF2                                   u7177 0AF6  
                                 u7097 08D2                                   u6617 38C4  
                                 i2l66 40AA                                   u7427 1120  
                                 u7347 0F6C                                   u7267 0D4E  
                                 u7187 0B12                                   u6707 2DEE  
                                 u6627 3A48                                   u7437 33B0  
                                 u7357 0F94                                   u7277 0D76  
                                 u7197 0B44                                   u6717 3B18  
                                 u6637 2A02                                   u7447 3834  
                                 u7367 0FF0                                   u7287 0DD2  
                                 u6807 029C                                   u6727 3B4C  
                                 u6647 2A5E                                   u7457 371C  
                                 u7377 1018                                   u7297 0DFA  
                                 u6817 0512                                   u6737 002A  
                                 u6657 2AF2                                   u7467 3726  
                                 u7387 103A                                   u6907 07A6  
                                 u6827 0546                                   u6747 012A  
                                 u6667 281E                                   u7477 3752  
                                 u7397 108A                                   u6917 07DA  
                                 u6837 0570                                   u6757 0166  
                                 u6677 2852                                   u6597 2E1C  
                                 u7487 375C                                   u6927 0804  
                                 u6847 062E                                   u6767 01BC  
                                 u6687 2D5A                                   u6937 085A  
                                 u6857 0662                                   u6777 01E8  
                                 u6697 2DB6                                   u6947 088E  
                                 u6867 068C                                   u6787 023E  
                                 u6957 2C34                                   u6877 06EA  
                                 u6797 0272                                   u6967 2C78  
                                 u6887 071E                                   u6977 2484  
                                 u6897 0748                                   u6987 24C8  
                                 u6997 24EA                                   _RSEN 007E29  
                          _stopSignals 406A                                   _Test 2C26  
                                 _back 005B                                   _main 3280  
                                 _down 0067                                   _keys FB4F  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 3FF0                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 40E8  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1E68  
                          i2_lcdNibble 3934                        __end_of_Loading 2EE4  
                 __end_of_actuatorTest 1138                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 2DFE                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3078                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FB6A  
                                STR_14 FFD6                                  STR_22 FFA3  
                                STR_30 FE36                                  STR_15 FFD2  
                                STR_23 FF36                                  STR_31 FE14  
                                STR_16 FFE2                                  STR_24 FD7B  
                                STR_32 FD59                                  STR_40 FD15  
                                STR_17 FFF2                                  STR_33 FD6A  
                                STR_41 FD04                                  STR_25 FBAA  
                                STR_18 FFF6                                  STR_34 FE03  
                                STR_50 FDE1                                  STR_42 FDBF  
                                STR_26 FD8C                                  STR_43 FDBF  
                                STR_35 FE03                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FB97  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD9D                                  STR_36 FD48  
                                STR_44 FD26                        __end_of___awmod 3280  
                                STR_45 FD15                                  STR_37 FD59  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FBA7                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEEF  
                                STR_38 FDF2                                  STR_46 FDD0  
                                STR_47 FDD0                                  STR_55 FFFA  
                                STR_63 FB6A                                  STR_71 FF28  
                                STR_39 FDAE                                  STR_56 FFDE  
                                STR_64 FF8E                                  STR_80 FE77  
                                STR_48 FD37                                  STR_72 FCAF  
                                STR_49 FD26                                  STR_57 FFD6  
                                STR_65 FF5F                                  STR_73 FF0C  
                                STR_81 FEA4                                  STR_58 FFD2  
                                STR_90 FF83                                  STR_74 FF6C  
                                STR_82 FE47                                  STR_66 FB82  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_83 FF99                                  STR_75 FED1  
                                STR_91 FEC2                                  STR_84 FF28  
                                STR_76 FF1A                                  STR_68 FCC0  
                                STR_92 FC5A                                  STR_77 FFAD  
                                STR_85 FEE0                                  STR_69 FCF3  
                                STR_93 FC49                                  STR_78 FF28  
                                STR_86 FEFE                                  STR_94 FC27  
                                STR_79 FF52                                  STR_87 FCD1  
                                STR_95 FC7C                                  STR_88 FF78  
                                STR_96 FC8D                                  STR_89 FCE2  
                                STR_97 FC05                                  STR_98 FE57  
                                STR_99 FC38                                  ?_sort 0001  
                      __end_of___lldiv 3134                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 35AC                        __end_of___lwmod 37C6  
                                i2l254 1E64                                  i2l591 1EF6  
                                i2l832 26C8                                  i2l914 408E  
                                i2l836 2714                                  i2l838 2734  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 40DC                        __end_of_handler 2770  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 3F0A  
                      __end_of_initLCD 3B56                         __CFG_EBTRB$OFF 000000  
                                _debug 00E0                             i2isdigit@c 0003  
                                _getIR 3A2A                        __end_of_loadRTC 33A2  
                      __end_of_readMAG 3AC4                        __end_of_dpowers FB6A  
                                _first 00E4                                  _enter 0069  
                      __end_of_isdigit 3F34                                  _input 007D  
                                _putch 40BC                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 3F82  
                     __end_ofi2_getRTC 3694                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 18DE  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 3CA6                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 39DC                           __end_of_Test 2D16  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3316  
                         __end_of_keys FB60                           __end_of_sort 4012  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B6  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC16  
                               STR_101 FC38                                 STR_102 FEB3  
                               STR_103 FE95                                 STR_104 FE86  
                               STR_105 FBBD                                 STR_106 FBCF  
                               _ADRESH 000FC4                                 STR_107 FC6B  
                               STR_108 FC9E                                 _EEADRH 000FAA  
                               STR_109 FFB5                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 3CD6  
            i2_change_state_to_menu_22 3CA6                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1189 174A                                 i2l1636 39D2  
                               i2l5101 3B70                                 i2l1646 3B8E  
                               i2l5105 3B84                                 i2l5043 3FA2  
                               i2l6003 23E8                                 i2l6021 242C  
                               i2l6013 2408                                 i2l6031 2448  
                               i2l5081 39AC                                 i2l5401 16BC  
                               i2l6025 243E                                 i2l6017 241A  
                               i2l6009 23F6                                 i2l5067 404A  
                               i2l5411 1710                                 i2l5403 16C2  
                               i2l5333 366A                                 i2l5077 39A0  
                               i2l5405 16D4                                 i2l5079 39A8  
                               i2l5431 1790                                 i2l5415 1714  
                               i2l5329 365A                                 i2l5089 39C8  
                               i2l5097 3B64                                 i2l5433 1794  
                               i2l5409 16FE                                 i2l5361 158A  
                               i2l5339 3684                                 i2l5099 3B6C  
                               i2l5451 17E0                                 i2l5427 1778  
                               i2l5363 1598                                 i2l7211 1C08  
                               i2l7203 1BEC                                 i2l5445 17C6  
                               i2l5381 1632                                 i2l5373 15D0  
                               i2l5357 157A                                 i2l5471 1840  
                               i2l5463 1822                                 i2l5455 1804  
                               i2l5391 1664                                 i2l5367 159E  
                               i2l7311 1D7A                                 i2l7303 1D56  
                               i2l7231 1C40                                 i2l7223 1C24  
                               i2l7215 1C16                                 i2l7207 1BFA  
                               i2l5481 186C                                 i2l5457 180C  
                               i2l5393 1668                                 i2l5475 1854  
                               i2l5491 3C7E                                 i2l5811 1E94  
                               i2l7331 1DC8                                 i2l7323 1DAC  
                               i2l7315 1D88                                 i2l7307 1D6C  
                               i2l7251 1C88                                 i2l7243 1C6C  
                               i2l7235 1C50                                 i2l7227 1C32  
                               i2l5485 18BA                                 i2l5469 1838  
                               i2l5389 165A                                 i2l5493 3C86  
                               i2l5821 1F2C                                 i2l5479 1866  
                               i2l5399 16B2                                 i2l5487 18C2  
                               i2l5831 1F9A                                 i2l5823 1F42  
                               i2l7335 1DD6                                 i2l7327 1DBA  
                               i2l7319 1D96                                 i2l7271 1CD6  
                               i2l7263 1CBA                                 i2l7255 1C96  
                               i2l7247 1C7A                                 i2l7239 1C5E  
                               i2l7521 20BA                                 i2l5681 2C0E  
                               i2l5673 2BDA                                 i2l5921 22C8  
                               i2l5913 22AE                                 i2l5833 1FB0  
                               i2l5825 1F58                                 i2l5817 1F00  
                               i2l7345 1DFA                                 i2l7601 2680  
                               i2l5923 22D8                                 i2l5931 22E6  
                               i2l5835 1FC6                                 i2l5827 1F6E  
                               i2l5819 1F16                                 i2l5843 2008  
                               i2l7339 1DEC                                 i2l7291 1D2C  
                               i2l7283 1D08                                 i2l7275 1CEC  
                               i2l7267 1CC8                                 i2l7259 1CAC  
                               i2l7517 20AA                                 i2l5669 2BCA  
                               i2l5941 230C                                 i2l5925 22DC  
                               i2l5837 1FDC                                 i2l5829 1F84  
                               i2l5845 2062                                 i2l7197 1BD8  
                               i2l7527 2114                                 i2l5943 2312  
                               i2l5935 22FA                                 i2l5839 1FF2  
                               i2l7295 1D3A                                 i2l7287 1D16  
                               i2l7279 1CFA                                 i2l7199 1BDE  
                               i2l7615 269C                                 i2l7537 21D6  
                               i2l5961 2362                                 i2l5945 2318  
                               i2l5937 2300                                 i2l5939 2306  
                               i2l7299 1D48                                 i2l5949 231E  
                               i2l7661 2732                                 i2l7637 26E6  
                               i2l5991 23C6                                 i2l5975 2388  
                               i2l7639 26E8                                 i2l5985 23AE  
                               i2l5969 237A                                 i2l5995 23D0  
                               i2l5979 23A4                                 i2l5989 23C2  
                               i2l7933 2336                                 i2l7925 1E18  
                               i2l7935 2352                                 i2l7927 1E3A  
                               i2l7599 267C                                 i2l7929 1E56  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 3FF0  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 28B0                                 ___wmul 3C3E  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 342A                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4034  
                               _initUI 3FA8                                 _readIR 3AC4  
                               _logRun 28B0                                 clear_0 3A02  
                               clear_1 3A0E                                 clear_2 3A1A  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3826                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1138  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 3C08  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 3F5C  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 3F34                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 39DC                       __end_of_printRTC 1BA8  
                         __mediumconst FB4E                      __end_ofi2___lwmod 3B98  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 2FBA                      __end_ofi2_lcdInst 40F4  
                    __end_ofi2_isdigit 4052                             __accesstop 0080  
              __end_of__initialization 3A20                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0880                          i2_EEPROM_read 4080  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 4132                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 4108  
                        __end_of_getIR 3A78                            i2printRTC@i 0041  
                        _initSortTimer 3134            __end_of_updateServoPosition 3622  
                        __end_of_putch 40CC                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2B0C  
                           __end_of_UI 08B8                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 3EDE  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 3EB2  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 2D16                                UI@F3220 012D  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      __end_of_PortTests 3534  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2214 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 40DC  
                            ?_initTime 0080                        _f_loadingNewCan 00E2  
                      i2printRTC@month 003D                  __size_of_Distribution 0140  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3764  
                              _Loading 2DFE            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 2FBA                                ___awmod 31DE  
                           _initServos 3882                                ___lldiv 3078  
                      __size_of___wmul 0036                                ___lwdiv 3534  
                              ___lwmod 3764                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                        __size_of_readIR 004C  
                              __pcinit 39DC                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3694  
                              _lcdInst 40CC                                _handler 0008  
                              __ptext0 3280                                __ptext1 406A  
                              __ptext2 3FF0                                __ptext3 2DFE  
                              __ptext4 3134                                __ptext5 3882  
                              __ptext6 3694                                __ptext7 3A2A  
                              __ptext8 29EC                                __ptext9 2770  
                      __size_of_printf 0438                                _readADC 3EDE  
                      __size_of_strcpy 0036                                _initLCD 3B10  
                              _cur_can 0065                                _loadRTC 3316  
                              _readMAG 3A78                                _dpowers FB60  
                   actuatorTest@i_1600 00C3                     actuatorTest@i_1560 00AD  
                   actuatorTest@i_1570 00B0                     actuatorTest@i_1571 00B1  
                   actuatorTest@i_1580 00B7                     actuatorTest@i_1573 00B2  
                   actuatorTest@i_1590 00BD                     actuatorTest@i_1582 00B8  
                   actuatorTest@i_1574 00B3                     actuatorTest@i_1583 00B9  
                   actuatorTest@i_1567 00AE                     actuatorTest@i_1592 00BE  
                   actuatorTest@i_1576 00B4                     actuatorTest@i_1568 00AF  
                   actuatorTest@i_1593 00BF                     actuatorTest@i_1577 00B5  
                   actuatorTest@i_1586 00BA                     actuatorTest@i_1587 00BB  
                   actuatorTest@i_1579 00B6                     actuatorTest@i_1596 00C0  
                   actuatorTest@i_1597 00C1                     actuatorTest@i_1589 00BC  
                   actuatorTest@i_1599 00C2                                _isdigit 3F0A  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2770                         __pintcode_body 2602  
                 end_of_initialization 3A20                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 2602                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 36FC  
                           _sensorTest 2476                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2476                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3934                             _updateMenu 1BA8  
                    i2_I2C_Master_Read 3F82                              _IR_signal 00DA  
                    i2_I2C_Master_Wait 40AA                      i2_I2C_Master_Stop 4120  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F2  
                            i2___lwdiv 398A                              i2___lwmod 3B56  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 209E  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 40E8  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4034                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                  __end_of_EEPROM_read 406A                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 3C74  
                       __end_of_getRTC 34B0                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 3FCC                         __end_of_readIR 3B10  
                       __end_of_logRun 29EC                       i2___wmul@product 0005  
                       __end_of_printf 1570                           i2printf@flag 0026  
                       __end_of_strcpy 3C3E              __end_ofi2_I2C_Master_Read 3FA8  
            __end_ofi2_I2C_Master_Wait 40BC                           i2printf@prec 001D  
                  start_initialization 39DC              __end_ofi2_I2C_Master_Stop 4128  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1310 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 34B0                            ?_sensorTest 0001  
                          __pdataBANK1 012D                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2334 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1861 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 4052  
                   __end_of_PortTestA5 3882                       _I2C_Master_Start 4118  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 40F4  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 342A  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB4E  
                            _lcdNibble 36FC                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00DE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 004E                          _algorithmTest 2EE4  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0120  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 018C             __end_ofi2_I2C_Master_Start 4130  
           __end_ofi2_I2C_Master_Write 4108                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2290  
                          ??i2_isdigit 0001                               i2u402_40 16F6  
                             i2u402_47 16EC                               i2u345_40 3FA0  
                             i2u441_40 1EF6                               _PIR2bits 000FA1  
                             i2u398_40 1696                               i2u750_47 394C  
                             i2u398_47 168C                               i2u647_40 21D0  
                             i2u751_47 3956                               i2u752_47 3978  
                             i2u753_47 3982                               i2u749_47 22CE  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 3F5C                          lcdNibble@data 0081  
                             i2_getRTC 3622                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 1570                               i2_strcpy 3C74  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 39F0                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4096                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 00E6                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 31DE                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 3D36  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 3BD0  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 3B98  
              _change_state_to_menu_23 3D06                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 3E26                _change_state_to_logs_12 3DF6  
              _change_state_to_logs_22 3DC6                _change_state_to_logs_23 3E84  
              _change_state_to_logs_33 3D96                _change_state_to_logs_34 3D66  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2768                             _EEPROMTest 4130  
                      _I2C_Master_Init 37C6                       __size_of_readADC 002C  
                      _I2C_Master_Read 3E56                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4096  
                      _I2C_Master_Stop 4110                       __size_of_isdigit 002A  
                       _printSortTimer 209E                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 2C26  
                             __ptext10 38DC                               __ptext11 28B0  
                             __ptext20 3B10                               __ptext12 2D16  
                             __ptext21 0012                               __ptext13 4052  
                             __ptext30 3B98                               __ptext22 18DE  
                             __ptext14 3FA8                               __ptext31 3BD0  
                             __ptext23 3C08                               __ptext15 3316  
                             __ptext40 08B8                               __ptext32 31DE  
                             __ptext24 342A                               __ptext16 37C6  
                             __ptext41 35AC                               __ptext33 2FBA  
                             __ptext25 40F4                               __ptext17 3078  
                             __ptext50 3534                               __ptext42 33A2  
                             __ptext34 2C26                               __ptext26 4110  
                             __ptext18 3EB2                               __ptext51 40CC  
                             __ptext43 34B0                               __ptext35 2476  
                             __ptext27 4118                               __ptext19 4012  
                             __ptext60 3CA6                               __ptext52 36FC  
                             __ptext44 3826                               __ptext36 3A78  
                             __ptext28 3E56                               __ptext61 3CD6  
                             __ptext53 4130                               __ptext45 1138  
                             __ptext37 3AC4                               __ptext29 4096  
                             __ptext70 3FCC                               __ptext62 3D06  
                             __ptext46 40BC                               __ptext38 3EDE  
                             __ptext71 2B0C                               __ptext63 3D36  
                             __ptext55 1BA8                               __ptext47 3F0A  
                             __ptext39 2EE4                               __ptext80 40E8  
                             __ptext72 4080                               __ptext64 3D66  
                             __ptext56 3F34                               __ptext48 3C3E  
                             __ptext81 3934                               __ptext73 209E  
                             __ptext65 3D96                               __ptext57 1E68  
                             __ptext49 3764                               __ptext82 3622  
                             __ptext74 1570                               __ptext66 3E84  
                             __ptext58 3C74                               __ptext83 40FE  
                             __ptext75 40DC                               __ptext67 3DC6  
                             __ptext59 2290                               __ptext84 4120  
                             __ptext76 4034                               __ptext68 3DF6  
                             __ptext85 4128                               __ptext77 3F5C  
                             __ptext69 3E26                               __ptext86 3F82  
                             __ptext78 3B56                               __ptext87 40AA  
                             __ptext79 398A                               _dispLogs 3FCC  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                __size_of_ToggleTestA5 0088                             strcpy@from 0082  
                       i2_isdigit$1861 0002                     __end_of_initServos 38DC  
                        __size_of_Test 00F0                          ?_EEPROM_write 00AB  
                             _initTime 4012                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 35AC  
               __size_of_machineConfig 0058                          ??i2_lcdNibble 0001  
                             _printRTC 18DE                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006D                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 3D06  
    __end_ofi2_change_state_to_menu_22 3CD6                               loadRTC@i 0096  
               __end_of_printSortTimer 2290                              putch@data 0082  
             __end_of_I2C_Master_Start 4120                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 40FE                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           _ToggleTestA5 33A2  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2602  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 4080  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 1E68                __end_of_I2C_Master_Init 3826  
              __end_of_I2C_Master_Read 3E84                __end_of_I2C_Master_Wait 40AA  
              __end_of_I2C_Master_Stop 4118                          printRTC@F3211 0131  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                          _retrieveLog 2B0C                    __end_ofi2_lcdNibble 398A  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 0071                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 38DC  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
