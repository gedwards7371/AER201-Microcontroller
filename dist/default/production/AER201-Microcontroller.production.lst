

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 31 17:44:25 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.40
   116                           ; Generated 01/12/2016 GMT
   117                           ; 
   118                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4620 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataBANK1
   151  0052F4                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for UI@F3235
   155  0052F4  4D                 	db	77
   156  0052F5  4D                 	db	77
   157  0052F6  4D                 	db	77
   158  0052F7  00                 	db	0
   159                           
   160                           ;initializer for printRTC@F3226
   161  0052F8  4D                 	db	77
   162  0052F9  4D                 	db	77
   163  0052FA  4D                 	db	77
   164  0052FB  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FAEA                     __pmediumconst:
   168                           	opt stack 0
   169  00FAEA  00                 	db	0
   170  00FAEB                     _keys:
   171                           	opt stack 0
   172  00FAEB  31                 	db	49
   173  00FAEC  32                 	db	50
   174  00FAED  33                 	db	51
   175  00FAEE  41                 	db	65
   176  00FAEF  34                 	db	52
   177  00FAF0  35                 	db	53
   178  00FAF1  36                 	db	54
   179  00FAF2  42                 	db	66
   180  00FAF3  37                 	db	55
   181  00FAF4  38                 	db	56
   182  00FAF5  39                 	db	57
   183  00FAF6  43                 	db	67
   184  00FAF7  2A                 	db	42
   185  00FAF8  30                 	db	48
   186  00FAF9  23                 	db	35
   187  00FAFA  44                 	db	68
   188  00FAFB  00                 	db	0
   189  00FAFC                     __end_of_keys:
   190                           	opt stack 0
   191  00FAFC                     _dpowers:
   192                           	opt stack 0
   193  00FAFC  0001               	dw	1
   194  00FAFE  000A               	dw	10
   195  00FB00  0064               	dw	100
   196  00FB02  03E8               	dw	1000
   197  00FB04  2710               	dw	10000
   198  00FB06                     __end_of_dpowers:
   199                           	opt stack 0
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADRESH	set	4036
   205  0000                     _ADRESL	set	4035
   206  0000                     _CMCONbits	set	4020
   207  0000                     _CVRCON	set	4021
   208  0000                     _EEADR	set	4009
   209  0000                     _EEADRH	set	4010
   210  0000                     _EECON1bits	set	4006
   211  0000                     _EECON2	set	4007
   212  0000                     _EEDATA	set	4008
   213  0000                     _INTCONbits	set	4082
   214  0000                     _LATA	set	3977
   215  0000                     _LATAbits	set	3977
   216  0000                     _LATB	set	3978
   217  0000                     _LATBbits	set	3978
   218  0000                     _LATC	set	3979
   219  0000                     _LATCbits	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATDbits	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _LATEbits	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _SSPADD	set	4040
   231  0000                     _SSPBUF	set	4041
   232  0000                     _SSPCON1	set	4038
   233  0000                     _SSPCON2	set	4037
   234  0000                     _SSPSTAT	set	4039
   235  0000                     _T0CON	set	4053
   236  0000                     _T1CON	set	4045
   237  0000                     _T3CON	set	4017
   238  0000                     _TMR0H	set	4055
   239  0000                     _TMR0L	set	4054
   240  0000                     _TMR1H	set	4047
   241  0000                     _TMR1L	set	4046
   242  0000                     _TMR3H	set	4019
   243  0000                     _TMR3L	set	4018
   244  0000                     _TRISA	set	3986
   245  0000                     _TRISB	set	3987
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISD	set	3989
   248  0000                     _TRISE	set	3990
   249  0000                     _ACKDT	set	32301
   250  0000                     _ACKEN	set	32300
   251  0000                     _ADIE	set	31982
   252  0000                     _INT1IE	set	32643
   253  0000                     _INT1IF	set	32640
   254  0000                     _PEIE	set	32662
   255  0000                     _PEN	set	32298
   256  0000                     _RCEN	set	32299
   257  0000                     _RSEN	set	32297
   258  0000                     _SEN	set	32296
   259  0000                     _TMR0IE	set	32661
   260  0000                     _TMR0IF	set	32658
   261  0000                     _TMR0ON	set	32431
   262  0000                     _TMR1IE	set	31976
   263  0000                     _TMR1IF	set	31984
   264  0000                     _TMR1ON	set	32360
   265  0000                     _TMR2IE	set	31977
   266  0000                     _TMR3IE	set	32001
   267  0000                     _TMR3IF	set	32009
   268  0000                     _TMR3ON	set	32136
   269  0000                     _TRISC3	set	31907
   270  0000                     _TRISC4	set	31908
   271  0000                     _nRBPU	set	32655
   272  00FB06                     STR_21:
   273  00FB06  25                 	db	37
   274  00FB07  30                 	db	48	;'0'
   275  00FB08  32                 	db	50	;'2'
   276  00FB09  64                 	db	100	;'d'
   277  00FB0A  25                 	db	37
   278  00FB0B  73                 	db	115	;'s'
   279  00FB0C  20                 	db	32
   280  00FB0D  7C                 	db	124
   281  00FB0E  20                 	db	32
   282  00FB0F  25                 	db	37
   283  00FB10  30                 	db	48	;'0'
   284  00FB11  32                 	db	50	;'2'
   285  00FB12  64                 	db	100	;'d'
   286  00FB13  3A                 	db	58	;':'
   287  00FB14  25                 	db	37
   288  00FB15  30                 	db	48	;'0'
   289  00FB16  32                 	db	50	;'2'
   290  00FB17  64                 	db	100	;'d'
   291  00FB18  3A                 	db	58	;':'
   292  00FB19  25                 	db	37
   293  00FB1A  30                 	db	48	;'0'
   294  00FB1B  32                 	db	50	;'2'
   295  00FB1C  64                 	db	100	;'d'
   296  00FB1D  00                 	db	0
   297  00FB1E                     STR_67:
   298  00FB1E  28                 	db	40
   299  00FB1F  64                 	db	100	;'d'
   300  00FB20  61                 	db	97	;'a'
   301  00FB21  74                 	db	116	;'t'
   302  00FB22  61                 	db	97	;'a'
   303  00FB23  3A                 	db	58	;':'
   304  00FB24  20                 	db	32
   305  00FB25  25                 	db	37
   306  00FB26  75                 	db	117	;'u'
   307  00FB27  2C                 	db	44
   308  00FB28  20                 	db	32
   309  00FB29  61                 	db	97	;'a'
   310  00FB2A  64                 	db	100	;'d'
   311  00FB2B  64                 	db	100	;'d'
   312  00FB2C  72                 	db	114	;'r'
   313  00FB2D  3A                 	db	58	;':'
   314  00FB2E  20                 	db	32
   315  00FB2F  25                 	db	37
   316  00FB30  75                 	db	117	;'u'
   317  00FB31  29                 	db	41
   318  00FB32  00                 	db	0
   319  00FB33                     STR_112:
   320  00FB33  44                 	db	68	;'D'
   321  00FB34  20                 	db	32
   322  00FB35  57                 	db	87	;'W'
   323  00FB36  49                 	db	73	;'I'
   324  00FB37  4C                 	db	76	;'L'
   325  00FB38  4C                 	db	76	;'L'
   326  00FB39  20                 	db	32
   327  00FB3A  52                 	db	82	;'R'
   328  00FB3B  45                 	db	69	;'E'
   329  00FB3C  54                 	db	84	;'T'
   330  00FB3D  55                 	db	85	;'U'
   331  00FB3E  52                 	db	82	;'R'
   332  00FB3F  4E                 	db	78	;'N'
   333  00FB40  20                 	db	32
   334  00FB41  20                 	db	32
   335  00FB42  20                 	db	32
   336  00FB43  20                 	db	32
   337  00FB44  00                 	db	0
   338  00FB45                     STR_113:
   339  00FB45  4F                 	db	79	;'O'
   340  00FB46  54                 	db	84	;'T'
   341  00FB47  48                 	db	72	;'H'
   342  00FB48  45                 	db	69	;'E'
   343  00FB49  52                 	db	82	;'R'
   344  00FB4A  20                 	db	32
   345  00FB4B  53                 	db	83	;'S'
   346  00FB4C  45                 	db	69	;'E'
   347  00FB4D  54                 	db	84	;'T'
   348  00FB4E  53                 	db	83	;'S'
   349  00FB4F  20                 	db	32
   350  00FB50  52                 	db	82	;'R'
   351  00FB51  41                 	db	65	;'A'
   352  00FB52  35                 	db	53	;'5'
   353  00FB53  20                 	db	32
   354  00FB54  20                 	db	32
   355  00FB55  20                 	db	32
   356  00FB56  00                 	db	0
   357  00FB57                     STR_121:
   358  00FB57  53                 	db	83	;'S'
   359  00FB58  3A                 	db	58	;':'
   360  00FB59  20                 	db	32
   361  00FB5A  44                 	db	68	;'D'
   362  00FB5B  20                 	db	32
   363  00FB5C  57                 	db	87	;'W'
   364  00FB5D  49                 	db	73	;'I'
   365  00FB5E  4C                 	db	76	;'L'
   366  00FB5F  4C                 	db	76	;'L'
   367  00FB60  20                 	db	32
   368  00FB61  52                 	db	82	;'R'
   369  00FB62  45                 	db	69	;'E'
   370  00FB63  54                 	db	84	;'T'
   371  00FB64  55                 	db	85	;'U'
   372  00FB65  52                 	db	82	;'R'
   373  00FB66  4E                 	db	78	;'N'
   374  00FB67  20                 	db	32
   375  00FB68  00                 	db	0
   376  00FB69                     STR_124:
   377  00FB69  4F                 	db	79	;'O'
   378  00FB6A  54                 	db	84	;'T'
   379  00FB6B  48                 	db	72	;'H'
   380  00FB6C  45                 	db	69	;'E'
   381  00FB6D  52                 	db	82	;'R'
   382  00FB6E  3A                 	db	58	;':'
   383  00FB6F  20                 	db	32
   384  00FB70  43                 	db	67	;'C'
   385  00FB71  41                 	db	65	;'A'
   386  00FB72  4D                 	db	77	;'M'
   387  00FB73  20                 	db	32
   388  00FB74  54                 	db	84	;'T'
   389  00FB75  4F                 	db	79	;'O'
   390  00FB76  47                 	db	71	;'G'
   391  00FB77  47                 	db	71	;'G'
   392  00FB78  4C                 	db	76	;'L'
   393  00FB79  45                 	db	69	;'E'
   394  00FB7A  00                 	db	0
   395  00FB7B                     STR_123:
   396  00FB7B  44                 	db	68	;'D'
   397  00FB7C  3A                 	db	58	;':'
   398  00FB7D  20                 	db	32
   399  00FB7E  52                 	db	82	;'R'
   400  00FB7F  45                 	db	69	;'E'
   401  00FB80  54                 	db	84	;'T'
   402  00FB81  7C                 	db	124
   403  00FB82  32                 	db	50	;'2'
   404  00FB83  3A                 	db	58	;':'
   405  00FB84  20                 	db	32
   406  00FB85  43                 	db	67	;'C'
   407  00FB86  4F                 	db	79	;'O'
   408  00FB87  4E                 	db	78	;'N'
   409  00FB88  44                 	db	68	;'D'
   410  00FB89  20                 	db	32
   411  00FB8A  25                 	db	37
   412  00FB8B  64                 	db	100	;'d'
   413  00FB8C  00                 	db	0
   414  00FB8D                     STR_3:
   415  00FB8D  2D                 	db	45
   416  00FB8E  2D                 	db	45
   417  00FB8F  20                 	db	32
   418  00FB90  4C                 	db	76	;'L'
   419  00FB91  4F                 	db	79	;'O'
   420  00FB92  47                 	db	71	;'G'
   421  00FB93  20                 	db	32
   422  00FB94  25                 	db	37
   423  00FB95  32                 	db	50	;'2'
   424  00FB96  64                 	db	100	;'d'
   425  00FB97  20                 	db	32
   426  00FB98  48                 	db	72	;'H'
   427  00FB99  45                 	db	69	;'E'
   428  00FB9A  52                 	db	82	;'R'
   429  00FB9B  45                 	db	69	;'E'
   430  00FB9C  2D                 	db	45
   431  00FB9D  2D                 	db	45
   432  00FB9E  00                 	db	0
   433  00FB9F                     STR_1:
   434  00FB9F  52                 	db	82	;'R'
   435  00FBA0  45                 	db	69	;'E'
   436  00FBA1  53                 	db	83	;'S'
   437  00FBA2  55                 	db	85	;'U'
   438  00FBA3  4C                 	db	76	;'L'
   439  00FBA4  54                 	db	84	;'T'
   440  00FBA5  53                 	db	83	;'S'
   441  00FBA6  20                 	db	32
   442  00FBA7  49                 	db	73	;'I'
   443  00FBA8  4E                 	db	78	;'N'
   444  00FBA9  20                 	db	32
   445  00FBAA  4C                 	db	76	;'L'
   446  00FBAB  4F                 	db	79	;'O'
   447  00FBAC  47                 	db	71	;'G'
   448  00FBAD  20                 	db	32
   449  00FBAE  25                 	db	37
   450  00FBAF  64                 	db	100	;'d'
   451  00FBB0  00                 	db	0
   452  00FBB1                     STR_103:
   453  00FBB1  4D                 	db	77	;'M'
   454  00FBB2  49                 	db	73	;'I'
   455  00FBB3  44                 	db	68	;'D'
   456  00FBB4  20                 	db	32
   457  00FBB5  2D                 	db	45
   458  00FBB6  2D                 	db	45
   459  00FBB7  20                 	db	32
   460  00FBB8  32                 	db	50	;'2'
   461  00FBB9  73                 	db	115	;'s'
   462  00FBBA  20                 	db	32
   463  00FBBB  20                 	db	32
   464  00FBBC  20                 	db	32
   465  00FBBD  20                 	db	32
   466  00FBBE  20                 	db	32
   467  00FBBF  20                 	db	32
   468  00FBC0  20                 	db	32
   469  00FBC1  00                 	db	0
   470  00FBC2                     STR_106:
   471  00FBC2  44                 	db	68	;'D'
   472  00FBC3  52                 	db	82	;'R'
   473  00FBC4  4F                 	db	79	;'O'
   474  00FBC5  50                 	db	80	;'P'
   475  00FBC6  20                 	db	32
   476  00FBC7  2D                 	db	45
   477  00FBC8  2D                 	db	45
   478  00FBC9  20                 	db	32
   479  00FBCA  32                 	db	50	;'2'
   480  00FBCB  73                 	db	115	;'s'
   481  00FBCC  20                 	db	32
   482  00FBCD  20                 	db	32
   483  00FBCE  20                 	db	32
   484  00FBCF  20                 	db	32
   485  00FBD0  20                 	db	32
   486  00FBD1  20                 	db	32
   487  00FBD2  00                 	db	0
   488  00FBD3                     STR_100:
   489  00FBD3  4C                 	db	76	;'L'
   490  00FBD4  45                 	db	69	;'E'
   491  00FBD5  46                 	db	70	;'F'
   492  00FBD6  54                 	db	84	;'T'
   493  00FBD7  20                 	db	32
   494  00FBD8  2D                 	db	45
   495  00FBD9  2D                 	db	45
   496  00FBDA  20                 	db	32
   497  00FBDB  32                 	db	50	;'2'
   498  00FBDC  73                 	db	115	;'s'
   499  00FBDD  20                 	db	32
   500  00FBDE  20                 	db	32
   501  00FBDF  20                 	db	32
   502  00FBE0  20                 	db	32
   503  00FBE1  20                 	db	32
   504  00FBE2  20                 	db	32
   505  00FBE3  00                 	db	0
   506  00FBE4                     STR_105:
   507  00FBE4  4C                 	db	76	;'L'
   508  00FBE5  45                 	db	69	;'E'
   509  00FBE6  56                 	db	86	;'V'
   510  00FBE7  45                 	db	69	;'E'
   511  00FBE8  4C                 	db	76	;'L'
   512  00FBE9  20                 	db	32
   513  00FBEA  2D                 	db	45
   514  00FBEB  2D                 	db	45
   515  00FBEC  20                 	db	32
   516  00FBED  32                 	db	50	;'2'
   517  00FBEE  73                 	db	115	;'s'
   518  00FBEF  20                 	db	32
   519  00FBF0  20                 	db	32
   520  00FBF1  20                 	db	32
   521  00FBF2  20                 	db	32
   522  00FBF3  20                 	db	32
   523  00FBF4  00                 	db	0
   524  00FBF5                     STR_99:
   525  00FBF5  52                 	db	82	;'R'
   526  00FBF6  49                 	db	73	;'I'
   527  00FBF7  47                 	db	71	;'G'
   528  00FBF8  48                 	db	72	;'H'
   529  00FBF9  54                 	db	84	;'T'
   530  00FBFA  20                 	db	32
   531  00FBFB  2D                 	db	45
   532  00FBFC  2D                 	db	45
   533  00FBFD  20                 	db	32
   534  00FBFE  32                 	db	50	;'2'
   535  00FBFF  73                 	db	115	;'s'
   536  00FC00  20                 	db	32
   537  00FC01  20                 	db	32
   538  00FC02  20                 	db	32
   539  00FC03  20                 	db	32
   540  00FC04  20                 	db	32
   541  00FC05  00                 	db	0
   542  00FC06                     STR_98:
   543  00FC06  4D                 	db	77	;'M'
   544  00FC07  49                 	db	73	;'I'
   545  00FC08  44                 	db	68	;'D'
   546  00FC09  44                 	db	68	;'D'
   547  00FC0A  4C                 	db	76	;'L'
   548  00FC0B  45                 	db	69	;'E'
   549  00FC0C  20                 	db	32
   550  00FC0D  2D                 	db	45
   551  00FC0E  2D                 	db	45
   552  00FC0F  20                 	db	32
   553  00FC10  32                 	db	50	;'2'
   554  00FC11  73                 	db	115	;'s'
   555  00FC12  20                 	db	32
   556  00FC13  20                 	db	32
   557  00FC14  20                 	db	32
   558  00FC15  20                 	db	32
   559  00FC16  00                 	db	0
   560  00FC17  44                 	db	68	;'D'
   561  00FC18  20                 	db	32
   562  00FC19  57                 	db	87	;'W'
   563  00FC1A  49                 	db	73	;'I'
   564  00FC1B  4C                 	db	76	;'L'
   565  00FC1C  4C                 	db	76	;'L'
   566  00FC1D  20                 	db	32
   567  00FC1E  52                 	db	82	;'R'
   568  00FC1F  45                 	db	69	;'E'
   569  00FC20  54                 	db	84	;'T'
   570  00FC21  55                 	db	85	;'U'
   571  00FC22  52                 	db	82	;'R'
   572  00FC23  4E                 	db	78	;'N'
   573  00FC24  20                 	db	32
   574  00FC25  20                 	db	32
   575  00FC26  20                 	db	32
   576  00FC27  00                 	db	0
   577  00FC28                     STR_101:
   578  00FC28  4D                 	db	77	;'M'
   579  00FC29  49                 	db	73	;'I'
   580  00FC2A  44                 	db	68	;'D'
   581  00FC2B  2D                 	db	45
   582  00FC2C  4C                 	db	76	;'L'
   583  00FC2D  45                 	db	69	;'E'
   584  00FC2E  46                 	db	70	;'F'
   585  00FC2F  54                 	db	84	;'T'
   586  00FC30  20                 	db	32
   587  00FC31  2D                 	db	45
   588  00FC32  2D                 	db	45
   589  00FC33  20                 	db	32
   590  00FC34  32                 	db	50	;'2'
   591  00FC35  73                 	db	115	;'s'
   592  00FC36  20                 	db	32
   593  00FC37  20                 	db	32
   594  00FC38  00                 	db	0
   595  00FC39                     STR_102:
   596  00FC39  4D                 	db	77	;'M'
   597  00FC3A  49                 	db	73	;'I'
   598  00FC3B  44                 	db	68	;'D'
   599  00FC3C  2D                 	db	45
   600  00FC3D  52                 	db	82	;'R'
   601  00FC3E  49                 	db	73	;'I'
   602  00FC3F  47                 	db	71	;'G'
   603  00FC40  48                 	db	72	;'H'
   604  00FC41  54                 	db	84	;'T'
   605  00FC42  20                 	db	32
   606  00FC43  2D                 	db	45
   607  00FC44  2D                 	db	45
   608  00FC45  20                 	db	32
   609  00FC46  32                 	db	50	;'2'
   610  00FC47  73                 	db	115	;'s'
   611  00FC48  20                 	db	32
   612  00FC49  00                 	db	0
   613  00FC4A  45                 	db	69	;'E'
   614  00FC4B  4C                 	db	76	;'L'
   615  00FC4C  53                 	db	83	;'S'
   616  00FC4D  45                 	db	69	;'E'
   617  00FC4E  20                 	db	32
   618  00FC4F  54                 	db	84	;'T'
   619  00FC50  4F                 	db	79	;'O'
   620  00FC51  47                 	db	71	;'G'
   621  00FC52  47                 	db	71	;'G'
   622  00FC53  4C                 	db	76	;'L'
   623  00FC54  45                 	db	69	;'E'
   624  00FC55  53                 	db	83	;'S'
   625  00FC56  20                 	db	32
   626  00FC57  52                 	db	82	;'R'
   627  00FC58  41                 	db	65	;'A'
   628  00FC59  35                 	db	53	;'5'
   629  00FC5A  00                 	db	0
   630  00FC5B                     STR_73:
   631  00FC5B  41                 	db	65	;'A'
   632  00FC5C  4C                 	db	76	;'L'
   633  00FC5D  47                 	db	71	;'G'
   634  00FC5E  31                 	db	49	;'1'
   635  00FC5F  3A                 	db	58	;':'
   636  00FC60  20                 	db	32
   637  00FC61  39                 	db	57	;'9'
   638  00FC62  20                 	db	32
   639  00FC63  50                 	db	80	;'P'
   640  00FC64  4F                 	db	79	;'O'
   641  00FC65  50                 	db	80	;'P'
   642  00FC66  4E                 	db	78	;'N'
   643  00FC67  4F                 	db	79	;'O'
   644  00FC68  54                 	db	84	;'T'
   645  00FC69  41                 	db	65	;'A'
   646  00FC6A  42                 	db	66	;'B'
   647  00FC6B  00                 	db	0
   648  00FC6C                     STR_93:
   649  00FC6C  54                 	db	84	;'T'
   650  00FC6D  53                 	db	83	;'S'
   651  00FC6E  54                 	db	84	;'T'
   652  00FC6F  3A                 	db	58	;':'
   653  00FC70  20                 	db	32
   654  00FC71  43                 	db	67	;'C'
   655  00FC72  4F                 	db	79	;'O'
   656  00FC73  4E                 	db	78	;'N'
   657  00FC74  44                 	db	68	;'D'
   658  00FC75  20                 	db	32
   659  00FC76  53                 	db	83	;'S'
   660  00FC77  4F                 	db	79	;'O'
   661  00FC78  4C                 	db	76	;'L'
   662  00FC79  4E                 	db	78	;'N'
   663  00FC7A  27                 	db	39
   664  00FC7B  44                 	db	68	;'D'
   665  00FC7C  00                 	db	0
   666  00FC7D                     STR_95:
   667  00FC7D  54                 	db	84	;'T'
   668  00FC7E  53                 	db	83	;'S'
   669  00FC7F  54                 	db	84	;'T'
   670  00FC80  3A                 	db	58	;':'
   671  00FC81  20                 	db	32
   672  00FC82  50                 	db	80	;'P'
   673  00FC83  55                 	db	85	;'U'
   674  00FC84  53                 	db	83	;'S'
   675  00FC85  48                 	db	72	;'H'
   676  00FC86  20                 	db	32
   677  00FC87  53                 	db	83	;'S'
   678  00FC88  4F                 	db	79	;'O'
   679  00FC89  4C                 	db	76	;'L'
   680  00FC8A  4E                 	db	78	;'N'
   681  00FC8B  27                 	db	39
   682  00FC8C  44                 	db	68	;'D'
   683  00FC8D  00                 	db	0
   684  00FC8E                     STR_69:
   685  00FC8E  32                 	db	50	;'2'
   686  00FC8F  2E                 	db	46
   687  00FC90  53                 	db	83	;'S'
   688  00FC91  4E                 	db	78	;'N'
   689  00FC92  52                 	db	82	;'R'
   690  00FC93  7C                 	db	124
   691  00FC94  34                 	db	52	;'4'
   692  00FC95  2E                 	db	46
   693  00FC96  48                 	db	72	;'H'
   694  00FC97  49                 	db	73	;'I'
   695  00FC98  7C                 	db	124
   696  00FC99  35                 	db	53	;'5'
   697  00FC9A  2E                 	db	46
   698  00FC9B  4D                 	db	77	;'M'
   699  00FC9C  45                 	db	69	;'E'
   700  00FC9D  44                 	db	68	;'D'
   701  00FC9E  00                 	db	0
   702  00FC9F                     STR_70:
   703  00FC9F  42                 	db	66	;'B'
   704  00FCA0  2E                 	db	46
   705  00FCA1  50                 	db	80	;'P'
   706  00FCA2  53                 	db	83	;'S'
   707  00FCA3  48                 	db	72	;'H'
   708  00FCA4  7C                 	db	124
   709  00FCA5  38                 	db	56	;'8'
   710  00FCA6  2E                 	db	46
   711  00FCA7  53                 	db	83	;'S'
   712  00FCA8  56                 	db	86	;'V'
   713  00FCA9  7C                 	db	124
   714  00FCAA  39                 	db	57	;'9'
   715  00FCAB  2E                 	db	46
   716  00FCAC  42                 	db	66	;'B'
   717  00FCAD  4C                 	db	76	;'L'
   718  00FCAE  4B                 	db	75	;'K'
   719  00FCAF  00                 	db	0
   720  00FCB0                     STR_111:
   721  00FCB0  54                 	db	84	;'T'
   722  00FCB1  53                 	db	83	;'S'
   723  00FCB2  54                 	db	84	;'T'
   724  00FCB3  3A                 	db	58	;':'
   725  00FCB4  20                 	db	32
   726  00FCB5  42                 	db	66	;'B'
   727  00FCB6  4F                 	db	79	;'O'
   728  00FCB7  54                 	db	84	;'T'
   729  00FCB8  48                 	db	72	;'H'
   730  00FCB9  20                 	db	32
   731  00FCBA  53                 	db	83	;'S'
   732  00FCBB  45                 	db	69	;'E'
   733  00FCBC  52                 	db	82	;'R'
   734  00FCBD  56                 	db	86	;'V'
   735  00FCBE  4F                 	db	79	;'O'
   736  00FCBF  53                 	db	83	;'S'
   737  00FCC0  00                 	db	0
   738  00FCC1                     STR_41:
   739  00FCC1  4C                 	db	76	;'L'
   740  00FCC2  4F                 	db	79	;'O'
   741  00FCC3  47                 	db	71	;'G'
   742  00FCC4  20                 	db	32
   743  00FCC5  31                 	db	49	;'1'
   744  00FCC6  20                 	db	32
   745  00FCC7  20                 	db	32
   746  00FCC8  20                 	db	32
   747  00FCC9  20                 	db	32
   748  00FCCA  20                 	db	32
   749  00FCCB  20                 	db	32
   750  00FCCC  20                 	db	32
   751  00FCCD  20                 	db	32
   752  00FCCE  20                 	db	32
   753  00FCCF  20                 	db	32
   754  00FCD0  20                 	db	32
   755  00FCD1  00                 	db	0
   756  00FCD2                     STR_40:
   757  00FCD2  4C                 	db	76	;'L'
   758  00FCD3  4F                 	db	79	;'O'
   759  00FCD4  47                 	db	71	;'G'
   760  00FCD5  20                 	db	32
   761  00FCD6  32                 	db	50	;'2'
   762  00FCD7  20                 	db	32
   763  00FCD8  20                 	db	32
   764  00FCD9  20                 	db	32
   765  00FCDA  20                 	db	32
   766  00FCDB  20                 	db	32
   767  00FCDC  20                 	db	32
   768  00FCDD  20                 	db	32
   769  00FCDE  20                 	db	32
   770  00FCDF  20                 	db	32
   771  00FCE0  20                 	db	32
   772  00FCE1  20                 	db	32
   773  00FCE2  00                 	db	0
   774  00FCE3                     STR_44:
   775  00FCE3  4C                 	db	76	;'L'
   776  00FCE4  4F                 	db	79	;'O'
   777  00FCE5  47                 	db	71	;'G'
   778  00FCE6  20                 	db	32
   779  00FCE7  33                 	db	51	;'3'
   780  00FCE8  20                 	db	32
   781  00FCE9  20                 	db	32
   782  00FCEA  20                 	db	32
   783  00FCEB  20                 	db	32
   784  00FCEC  20                 	db	32
   785  00FCED  20                 	db	32
   786  00FCEE  20                 	db	32
   787  00FCEF  20                 	db	32
   788  00FCF0  20                 	db	32
   789  00FCF1  20                 	db	32
   790  00FCF2  20                 	db	32
   791  00FCF3  00                 	db	0
   792  00FCF4                     STR_48:
   793  00FCF4  4C                 	db	76	;'L'
   794  00FCF5  4F                 	db	79	;'O'
   795  00FCF6  47                 	db	71	;'G'
   796  00FCF7  20                 	db	32
   797  00FCF8  34                 	db	52	;'4'
   798  00FCF9  20                 	db	32
   799  00FCFA  20                 	db	32
   800  00FCFB  20                 	db	32
   801  00FCFC  20                 	db	32
   802  00FCFD  20                 	db	32
   803  00FCFE  20                 	db	32
   804  00FCFF  20                 	db	32
   805  00FD00  20                 	db	32
   806  00FD01  20                 	db	32
   807  00FD02  20                 	db	32
   808  00FD03  20                 	db	32
   809  00FD04  00                 	db	0
   810  00FD05                     STR_36:
   811  00FD05  33                 	db	51	;'3'
   812  00FD06  2E                 	db	46
   813  00FD07  20                 	db	32
   814  00FD08  4C                 	db	76	;'L'
   815  00FD09  4F                 	db	79	;'O'
   816  00FD0A  47                 	db	71	;'G'
   817  00FD0B  53                 	db	83	;'S'
   818  00FD0C  20                 	db	32
   819  00FD0D  20                 	db	32
   820  00FD0E  20                 	db	32
   821  00FD0F  20                 	db	32
   822  00FD10  20                 	db	32
   823  00FD11  20                 	db	32
   824  00FD12  20                 	db	32
   825  00FD13  20                 	db	32
   826  00FD14  20                 	db	32
   827  00FD15  00                 	db	0
   828  00FD16                     STR_32:
   829  00FD16  32                 	db	50	;'2'
   830  00FD17  2E                 	db	46
   831  00FD18  20                 	db	32
   832  00FD19  53                 	db	83	;'S'
   833  00FD1A  4F                 	db	79	;'O'
   834  00FD1B  52                 	db	82	;'R'
   835  00FD1C  54                 	db	84	;'T'
   836  00FD1D  20                 	db	32
   837  00FD1E  20                 	db	32
   838  00FD1F  20                 	db	32
   839  00FD20  20                 	db	32
   840  00FD21  20                 	db	32
   841  00FD22  20                 	db	32
   842  00FD23  20                 	db	32
   843  00FD24  20                 	db	32
   844  00FD25  20                 	db	32
   845  00FD26  00                 	db	0
   846  00FD27                     STR_33:
   847  00FD27  31                 	db	49	;'1'
   848  00FD28  2E                 	db	46
   849  00FD29  20                 	db	32
   850  00FD2A  44                 	db	68	;'D'
   851  00FD2B  41                 	db	65	;'A'
   852  00FD2C  54                 	db	84	;'T'
   853  00FD2D  45                 	db	69	;'E'
   854  00FD2E  2F                 	db	47
   855  00FD2F  54                 	db	84	;'T'
   856  00FD30  49                 	db	73	;'I'
   857  00FD31  4D                 	db	77	;'M'
   858  00FD32  45                 	db	69	;'E'
   859  00FD33  20                 	db	32
   860  00FD34  20                 	db	32
   861  00FD35  20                 	db	32
   862  00FD36  20                 	db	32
   863  00FD37  00                 	db	0
   864  00FD38                     STR_24:
   865  00FD38  20                 	db	32
   866  00FD39  2D                 	db	45
   867  00FD3A  2D                 	db	45
   868  00FD3B  20                 	db	32
   869  00FD3C  50                 	db	80	;'P'
   870  00FD3D  4F                 	db	79	;'O'
   871  00FD3E  50                 	db	80	;'P'
   872  00FD3F  20                 	db	32
   873  00FD40  20                 	db	32
   874  00FD41  43                 	db	67	;'C'
   875  00FD42  41                 	db	65	;'A'
   876  00FD43  4E                 	db	78	;'N'
   877  00FD44  20                 	db	32
   878  00FD45  2D                 	db	45
   879  00FD46  2D                 	db	45
   880  00FD47  20                 	db	32
   881  00FD48  00                 	db	0
   882  00FD49                     STR_26:
   883  00FD49  20                 	db	32
   884  00FD4A  2D                 	db	45
   885  00FD4B  2D                 	db	45
   886  00FD4C  20                 	db	32
   887  00FD4D  53                 	db	83	;'S'
   888  00FD4E  4F                 	db	79	;'O'
   889  00FD4F  55                 	db	85	;'U'
   890  00FD50  50                 	db	80	;'P'
   891  00FD51  20                 	db	32
   892  00FD52  43                 	db	67	;'C'
   893  00FD53  41                 	db	65	;'A'
   894  00FD54  4E                 	db	78	;'N'
   895  00FD55  20                 	db	32
   896  00FD56  2D                 	db	45
   897  00FD57  2D                 	db	45
   898  00FD58  20                 	db	32
   899  00FD59  00                 	db	0
   900  00FD5A                     STR_28:
   901  00FD5A  2D                 	db	45
   902  00FD5B  2D                 	db	45
   903  00FD5C  20                 	db	32
   904  00FD5D  54                 	db	84	;'T'
   905  00FD5E  4F                 	db	79	;'O'
   906  00FD5F  54                 	db	84	;'T'
   907  00FD60  41                 	db	65	;'A'
   908  00FD61  4C                 	db	76	;'L'
   909  00FD62  20                 	db	32
   910  00FD63  43                 	db	67	;'C'
   911  00FD64  41                 	db	65	;'A'
   912  00FD65  4E                 	db	78	;'N'
   913  00FD66  53                 	db	83	;'S'
   914  00FD67  20                 	db	32
   915  00FD68  2D                 	db	45
   916  00FD69  2D                 	db	45
   917  00FD6A  00                 	db	0
   918  00FD6B                     STR_39:
   919  00FD6B  4C                 	db	76	;'L'
   920  00FD6C  4F                 	db	79	;'O'
   921  00FD6D  47                 	db	71	;'G'
   922  00FD6E  20                 	db	32
   923  00FD6F  31                 	db	49	;'1'
   924  00FD70  20                 	db	32
   925  00FD71  20                 	db	32
   926  00FD72  20                 	db	32
   927  00FD73  20                 	db	32
   928  00FD74  20                 	db	32
   929  00FD75  20                 	db	32
   930  00FD76  20                 	db	32
   931  00FD77  20                 	db	32
   932  00FD78  20                 	db	32
   933  00FD79  20                 	db	32
   934  00FD7A  3C                 	db	60	;'<'
   935  00FD7B  00                 	db	0
   936  00FD7C                     STR_42:
   937  00FD7C  4C                 	db	76	;'L'
   938  00FD7D  4F                 	db	79	;'O'
   939  00FD7E  47                 	db	71	;'G'
   940  00FD7F  20                 	db	32
   941  00FD80  32                 	db	50	;'2'
   942  00FD81  20                 	db	32
   943  00FD82  20                 	db	32
   944  00FD83  20                 	db	32
   945  00FD84  20                 	db	32
   946  00FD85  20                 	db	32
   947  00FD86  20                 	db	32
   948  00FD87  20                 	db	32
   949  00FD88  20                 	db	32
   950  00FD89  20                 	db	32
   951  00FD8A  20                 	db	32
   952  00FD8B  3C                 	db	60	;'<'
   953  00FD8C  00                 	db	0
   954  00FD8D                     STR_46:
   955  00FD8D  4C                 	db	76	;'L'
   956  00FD8E  4F                 	db	79	;'O'
   957  00FD8F  47                 	db	71	;'G'
   958  00FD90  20                 	db	32
   959  00FD91  33                 	db	51	;'3'
   960  00FD92  20                 	db	32
   961  00FD93  20                 	db	32
   962  00FD94  20                 	db	32
   963  00FD95  20                 	db	32
   964  00FD96  20                 	db	32
   965  00FD97  20                 	db	32
   966  00FD98  20                 	db	32
   967  00FD99  20                 	db	32
   968  00FD9A  20                 	db	32
   969  00FD9B  20                 	db	32
   970  00FD9C  3C                 	db	60	;'<'
   971  00FD9D  00                 	db	0
   972  00FD9E                     STR_50:
   973  00FD9E  4C                 	db	76	;'L'
   974  00FD9F  4F                 	db	79	;'O'
   975  00FDA0  47                 	db	71	;'G'
   976  00FDA1  20                 	db	32
   977  00FDA2  34                 	db	52	;'4'
   978  00FDA3  20                 	db	32
   979  00FDA4  20                 	db	32
   980  00FDA5  20                 	db	32
   981  00FDA6  20                 	db	32
   982  00FDA7  20                 	db	32
   983  00FDA8  20                 	db	32
   984  00FDA9  20                 	db	32
   985  00FDAA  20                 	db	32
   986  00FDAB  20                 	db	32
   987  00FDAC  20                 	db	32
   988  00FDAD  3C                 	db	60	;'<'
   989  00FDAE  00                 	db	0
   990  00FDAF                     STR_38:
   991  00FDAF  33                 	db	51	;'3'
   992  00FDB0  2E                 	db	46
   993  00FDB1  20                 	db	32
   994  00FDB2  4C                 	db	76	;'L'
   995  00FDB3  4F                 	db	79	;'O'
   996  00FDB4  47                 	db	71	;'G'
   997  00FDB5  53                 	db	83	;'S'
   998  00FDB6  20                 	db	32
   999  00FDB7  20                 	db	32
  1000  00FDB8  20                 	db	32
  1001  00FDB9  20                 	db	32
  1002  00FDBA  20                 	db	32
  1003  00FDBB  20                 	db	32
  1004  00FDBC  20                 	db	32
  1005  00FDBD  20                 	db	32
  1006  00FDBE  3C                 	db	60	;'<'
  1007  00FDBF  00                 	db	0
  1008  00FDC0                     STR_34:
  1009  00FDC0  32                 	db	50	;'2'
  1010  00FDC1  2E                 	db	46
  1011  00FDC2  20                 	db	32
  1012  00FDC3  53                 	db	83	;'S'
  1013  00FDC4  4F                 	db	79	;'O'
  1014  00FDC5  52                 	db	82	;'R'
  1015  00FDC6  54                 	db	84	;'T'
  1016  00FDC7  20                 	db	32
  1017  00FDC8  20                 	db	32
  1018  00FDC9  20                 	db	32
  1019  00FDCA  20                 	db	32
  1020  00FDCB  20                 	db	32
  1021  00FDCC  20                 	db	32
  1022  00FDCD  20                 	db	32
  1023  00FDCE  20                 	db	32
  1024  00FDCF  3C                 	db	60	;'<'
  1025  00FDD0  00                 	db	0
  1026  00FDD1                     STR_31:
  1027  00FDD1  31                 	db	49	;'1'
  1028  00FDD2  2E                 	db	46
  1029  00FDD3  20                 	db	32
  1030  00FDD4  44                 	db	68	;'D'
  1031  00FDD5  41                 	db	65	;'A'
  1032  00FDD6  54                 	db	84	;'T'
  1033  00FDD7  45                 	db	69	;'E'
  1034  00FDD8  2F                 	db	47
  1035  00FDD9  54                 	db	84	;'T'
  1036  00FDDA  49                 	db	73	;'I'
  1037  00FDDB  4D                 	db	77	;'M'
  1038  00FDDC  45                 	db	69	;'E'
  1039  00FDDD  20                 	db	32
  1040  00FDDE  20                 	db	32
  1041  00FDDF  20                 	db	32
  1042  00FDE0  3C                 	db	60	;'<'
  1043  00FDE1  00                 	db	0
  1044  00FDE2                     STR_6:
  1045  00FDE2  50                 	db	80	;'P'
  1046  00FDE3  41                 	db	65	;'A'
  1047  00FDE4  55                 	db	85	;'U'
  1048  00FDE5  53                 	db	83	;'S'
  1049  00FDE6  45                 	db	69	;'E'
  1050  00FDE7  20                 	db	32
  1051  00FDE8  3C                 	db	60	;'<'
  1052  00FDE9  20                 	db	32
  1053  00FDEA  7C                 	db	124
  1054  00FDEB  20                 	db	32
  1055  00FDEC  42                 	db	66	;'B'
  1056  00FDED  41                 	db	65	;'A'
  1057  00FDEE  43                 	db	67	;'C'
  1058  00FDEF  4B                 	db	75	;'K'
  1059  00FDF0  20                 	db	32
  1060  00FDF1  3E                 	db	62	;'>'
  1061  00FDF2  00                 	db	0
  1062  00FDF3                     STR_30:
  1063  00FDF3  50                 	db	80	;'P'
  1064  00FDF4  55                 	db	85	;'U'
  1065  00FDF5  53                 	db	83	;'S'
  1066  00FDF6  48                 	db	72	;'H'
  1067  00FDF7  20                 	db	32
  1068  00FDF8  54                 	db	84	;'T'
  1069  00FDF9  4F                 	db	79	;'O'
  1070  00FDFA  20                 	db	32
  1071  00FDFB  43                 	db	67	;'C'
  1072  00FDFC  4F                 	db	79	;'O'
  1073  00FDFD  4E                 	db	78	;'N'
  1074  00FDFE  54                 	db	84	;'T'
  1075  00FDFF  49                 	db	73	;'I'
  1076  00FE00  4E                 	db	78	;'N'
  1077  00FE01  55                 	db	85	;'U'
  1078  00FE02  45                 	db	69	;'E'
  1079  00FE03  00                 	db	0
  1080  00FE04                     STR_27:
  1081  00FE04  4E                 	db	78	;'N'
  1082  00FE05  4C                 	db	76	;'L'
  1083  00FE06  41                 	db	65	;'A'
  1084  00FE07  42                 	db	66	;'B'
  1085  00FE08  3A                 	db	58	;':'
  1086  00FE09  20                 	db	32
  1087  00FE0A  25                 	db	37
  1088  00FE0B  64                 	db	100	;'d'
  1089  00FE0C  7C                 	db	124
  1090  00FE0D  4C                 	db	76	;'L'
  1091  00FE0E  41                 	db	65	;'A'
  1092  00FE0F  42                 	db	66	;'B'
  1093  00FE10  3A                 	db	58	;':'
  1094  00FE11  20                 	db	32
  1095  00FE12  25                 	db	37
  1096  00FE13  64                 	db	100	;'d'
  1097  00FE14  00                 	db	0
  1098  00FE15                     STR_25:
  1099  00FE15  4E                 	db	78	;'N'
  1100  00FE16  54                 	db	84	;'T'
  1101  00FE17  41                 	db	65	;'A'
  1102  00FE18  42                 	db	66	;'B'
  1103  00FE19  3A                 	db	58	;':'
  1104  00FE1A  20                 	db	32
  1105  00FE1B  25                 	db	37
  1106  00FE1C  64                 	db	100	;'d'
  1107  00FE1D  7C                 	db	124
  1108  00FE1E  54                 	db	84	;'T'
  1109  00FE1F  41                 	db	65	;'A'
  1110  00FE20  42                 	db	66	;'B'
  1111  00FE21  3A                 	db	58	;':'
  1112  00FE22  20                 	db	32
  1113  00FE23  25                 	db	37
  1114  00FE24  64                 	db	100	;'d'
  1115  00FE25  00                 	db	0
  1116  00FE26                     STR_84:
  1117  00FE26  4D                 	db	77	;'M'
  1118  00FE27  41                 	db	65	;'A'
  1119  00FE28  47                 	db	71	;'G'
  1120  00FE29  5F                 	db	95	;'_'
  1121  00FE2A  73                 	db	115	;'s'
  1122  00FE2B  69                 	db	105	;'i'
  1123  00FE2C  67                 	db	103	;'g'
  1124  00FE2D  6E                 	db	110	;'n'
  1125  00FE2E  61                 	db	97	;'a'
  1126  00FE2F  6C                 	db	108	;'l'
  1127  00FE30  3A                 	db	58	;':'
  1128  00FE31  20                 	db	32
  1129  00FE32  25                 	db	37
  1130  00FE33  64                 	db	100	;'d'
  1131  00FE34  20                 	db	32
  1132  00FE35  00                 	db	0
  1133  00FE36                     STR_104:
  1134  00FE36  54                 	db	84	;'T'
  1135  00FE37  53                 	db	83	;'S'
  1136  00FE38  54                 	db	84	;'T'
  1137  00FE39  3A                 	db	58	;':'
  1138  00FE3A  20                 	db	32
  1139  00FE3B  54                 	db	84	;'T'
  1140  00FE3C  49                 	db	73	;'I'
  1141  00FE3D  4C                 	db	76	;'L'
  1142  00FE3E  54                 	db	84	;'T'
  1143  00FE3F  20                 	db	32
  1144  00FE40  53                 	db	83	;'S'
  1145  00FE41  45                 	db	69	;'E'
  1146  00FE42  52                 	db	82	;'R'
  1147  00FE43  56                 	db	86	;'V'
  1148  00FE44  4F                 	db	79	;'O'
  1149  00FE45  00                 	db	0
  1150  00FE46                     STR_4:
  1151  00FE46  44                 	db	68	;'D'
  1152  00FE47  49                 	db	73	;'I'
  1153  00FE48  44                 	db	68	;'D'
  1154  00FE49  4E                 	db	78	;'N'
  1155  00FE4A  27                 	db	39
  1156  00FE4B  54                 	db	84	;'T'
  1157  00FE4C  20                 	db	32
  1158  00FE4D  43                 	db	67	;'C'
  1159  00FE4E  4F                 	db	79	;'O'
  1160  00FE4F  4D                 	db	77	;'M'
  1161  00FE50  50                 	db	80	;'P'
  1162  00FE51  4C                 	db	76	;'L'
  1163  00FE52  45                 	db	69	;'E'
  1164  00FE53  54                 	db	84	;'T'
  1165  00FE54  45                 	db	69	;'E'
  1166  00FE55  00                 	db	0
  1167  00FE56                     STR_81:
  1168  00FE56  49                 	db	73	;'I'
  1169  00FE57  52                 	db	82	;'R'
  1170  00FE58  5F                 	db	95	;'_'
  1171  00FE59  73                 	db	115	;'s'
  1172  00FE5A  69                 	db	105	;'i'
  1173  00FE5B  67                 	db	103	;'g'
  1174  00FE5C  6E                 	db	110	;'n'
  1175  00FE5D  61                 	db	97	;'a'
  1176  00FE5E  6C                 	db	108	;'l'
  1177  00FE5F  3A                 	db	58	;':'
  1178  00FE60  20                 	db	32
  1179  00FE61  25                 	db	37
  1180  00FE62  64                 	db	100	;'d'
  1181  00FE63  20                 	db	32
  1182  00FE64  00                 	db	0
  1183  00FE65                     STR_110:
  1184  00FE65  43                 	db	67	;'C'
  1185  00FE66  41                 	db	65	;'A'
  1186  00FE67  4D                 	db	77	;'M'
  1187  00FE68  20                 	db	32
  1188  00FE69  44                 	db	68	;'D'
  1189  00FE6A  57                 	db	87	;'W'
  1190  00FE6B  4E                 	db	78	;'N'
  1191  00FE6C  20                 	db	32
  1192  00FE6D  7C                 	db	124
  1193  00FE6E  52                 	db	82	;'R'
  1194  00FE6F  43                 	db	67	;'C'
  1195  00FE70  30                 	db	48	;'0'
  1196  00FE71  3D                 	db	61	;'='
  1197  00FE72  30                 	db	48	;'0'
  1198  00FE73  00                 	db	0
  1199  00FE74                     STR_109:
  1200  00FE74  43                 	db	67	;'C'
  1201  00FE75  41                 	db	65	;'A'
  1202  00FE76  4D                 	db	77	;'M'
  1203  00FE77  20                 	db	32
  1204  00FE78  55                 	db	85	;'U'
  1205  00FE79  50                 	db	80	;'P'
  1206  00FE7A  20                 	db	32
  1207  00FE7B  20                 	db	32
  1208  00FE7C  7C                 	db	124
  1209  00FE7D  52                 	db	82	;'R'
  1210  00FE7E  43                 	db	67	;'C'
  1211  00FE7F  30                 	db	48	;'0'
  1212  00FE80  3D                 	db	61	;'='
  1213  00FE81  31                 	db	49	;'1'
  1214  00FE82  00                 	db	0
  1215  00FE83                     STR_83:
  1216  00FE83  54                 	db	84	;'T'
  1217  00FE84  53                 	db	83	;'S'
  1218  00FE85  54                 	db	84	;'T'
  1219  00FE86  3A                 	db	58	;':'
  1220  00FE87  20                 	db	32
  1221  00FE88  4D                 	db	77	;'M'
  1222  00FE89  41                 	db	65	;'A'
  1223  00FE8A  47                 	db	71	;'G'
  1224  00FE8B  4E                 	db	78	;'N'
  1225  00FE8C  45                 	db	69	;'E'
  1226  00FE8D  54                 	db	84	;'T'
  1227  00FE8E  49                 	db	73	;'I'
  1228  00FE8F  53                 	db	83	;'S'
  1229  00FE90  4D                 	db	77	;'M'
  1230  00FE91  00                 	db	0
  1231  00FE92                     STR_108:
  1232  00FE92  54                 	db	84	;'T'
  1233  00FE93  53                 	db	83	;'S'
  1234  00FE94  54                 	db	84	;'T'
  1235  00FE95  3A                 	db	58	;':'
  1236  00FE96  20                 	db	32
  1237  00FE97  43                 	db	67	;'C'
  1238  00FE98  41                 	db	65	;'A'
  1239  00FE99  4D                 	db	77	;'M'
  1240  00FE9A  20                 	db	32
  1241  00FE9B  53                 	db	83	;'S'
  1242  00FE9C  45                 	db	69	;'E'
  1243  00FE9D  52                 	db	82	;'R'
  1244  00FE9E  56                 	db	86	;'V'
  1245  00FE9F  4F                 	db	79	;'O'
  1246  00FEA0  00                 	db	0
  1247  00FEA1                     STR_97:
  1248  00FEA1  54                 	db	84	;'T'
  1249  00FEA2  53                 	db	83	;'S'
  1250  00FEA3  54                 	db	84	;'T'
  1251  00FEA4  3A                 	db	58	;':'
  1252  00FEA5  20                 	db	32
  1253  00FEA6  50                 	db	80	;'P'
  1254  00FEA7  41                 	db	65	;'A'
  1255  00FEA8  4E                 	db	78	;'N'
  1256  00FEA9  20                 	db	32
  1257  00FEAA  53                 	db	83	;'S'
  1258  00FEAB  45                 	db	69	;'E'
  1259  00FEAC  52                 	db	82	;'R'
  1260  00FEAD  56                 	db	86	;'V'
  1261  00FEAE  4F                 	db	79	;'O'
  1262  00FEAF  00                 	db	0
  1263  00FEB0                     STR_76:
  1264  00FEB0  41                 	db	65	;'A'
  1265  00FEB1  4C                 	db	76	;'L'
  1266  00FEB2  47                 	db	71	;'G'
  1267  00FEB3  34                 	db	52	;'4'
  1268  00FEB4  3A                 	db	58	;':'
  1269  00FEB5  20                 	db	32
  1270  00FEB6  41                 	db	65	;'A'
  1271  00FEB7  4C                 	db	76	;'L'
  1272  00FEB8  4C                 	db	76	;'L'
  1273  00FEB9  20                 	db	32
  1274  00FEBA  43                 	db	67	;'C'
  1275  00FEBB  41                 	db	65	;'A'
  1276  00FEBC  4E                 	db	78	;'N'
  1277  00FEBD  53                 	db	83	;'S'
  1278  00FEBE  00                 	db	0
  1279  00FEBF                     STR_91:
  1280  00FEBF  54                 	db	84	;'T'
  1281  00FEC0  53                 	db	83	;'S'
  1282  00FEC1  54                 	db	84	;'T'
  1283  00FEC2  3A                 	db	58	;':'
  1284  00FEC3  20                 	db	32
  1285  00FEC4  44                 	db	68	;'D'
  1286  00FEC5  43                 	db	67	;'C'
  1287  00FEC6  20                 	db	32
  1288  00FEC7  4D                 	db	77	;'M'
  1289  00FEC8  4F                 	db	79	;'O'
  1290  00FEC9  54                 	db	84	;'T'
  1291  00FECA  4F                 	db	79	;'O'
  1292  00FECB  52                 	db	82	;'R'
  1293  00FECC  53                 	db	83	;'S'
  1294  00FECD  00                 	db	0
  1295  00FECE                     STR_71:
  1296  00FECE  41                 	db	65	;'A'
  1297  00FECF  4C                 	db	76	;'L'
  1298  00FED0  47                 	db	71	;'G'
  1299  00FED1  4F                 	db	79	;'O'
  1300  00FED2  52                 	db	82	;'R'
  1301  00FED3  49                 	db	73	;'I'
  1302  00FED4  54                 	db	84	;'T'
  1303  00FED5  48                 	db	72	;'H'
  1304  00FED6  4D                 	db	77	;'M'
  1305  00FED7  20                 	db	32
  1306  00FED8  54                 	db	84	;'T'
  1307  00FED9  45                 	db	69	;'E'
  1308  00FEDA  53                 	db	83	;'S'
  1309  00FEDB  54                 	db	84	;'T'
  1310  00FEDC  00                 	db	0
  1311  00FEDD                     STR_92:
  1312  00FEDD  50                 	db	80	;'P'
  1313  00FEDE  49                 	db	73	;'I'
  1314  00FEDF  4E                 	db	78	;'N'
  1315  00FEE0  20                 	db	32
  1316  00FEE1  52                 	db	82	;'R'
  1317  00FEE2  41                 	db	65	;'A'
  1318  00FEE3  35                 	db	53	;'5'
  1319  00FEE4  20                 	db	32
  1320  00FEE5  48                 	db	72	;'H'
  1321  00FEE6  49                 	db	73	;'I'
  1322  00FEE7  47                 	db	71	;'G'
  1323  00FEE8  48                 	db	72	;'H'
  1324  00FEE9  2E                 	db	46
  1325  00FEEA  00                 	db	0
  1326  00FEEB                     STR_74:
  1327  00FEEB  41                 	db	65	;'A'
  1328  00FEEC  4C                 	db	76	;'L'
  1329  00FEED  47                 	db	71	;'G'
  1330  00FEEE  32                 	db	50	;'2'
  1331  00FEEF  3A                 	db	58	;':'
  1332  00FEF0  20                 	db	32
  1333  00FEF1  31                 	db	49	;'1'
  1334  00FEF2  32                 	db	50	;'2'
  1335  00FEF3  20                 	db	32
  1336  00FEF4  43                 	db	67	;'C'
  1337  00FEF5  41                 	db	65	;'A'
  1338  00FEF6  4E                 	db	78	;'N'
  1339  00FEF7  53                 	db	83	;'S'
  1340  00FEF8  00                 	db	0
  1341  00FEF9                     STR_77:
  1342  00FEF9  41                 	db	65	;'A'
  1343  00FEFA  4C                 	db	76	;'L'
  1344  00FEFB  47                 	db	71	;'G'
  1345  00FEFC  35                 	db	53	;'5'
  1346  00FEFD  3A                 	db	58	;':'
  1347  00FEFE  20                 	db	32
  1348  00FEFF  4E                 	db	78	;'N'
  1349  00FF00  4F                 	db	79	;'O'
  1350  00FF01  20                 	db	32
  1351  00FF02  43                 	db	67	;'C'
  1352  00FF03  41                 	db	65	;'A'
  1353  00FF04  4E                 	db	78	;'N'
  1354  00FF05  53                 	db	83	;'S'
  1355  00FF06  00                 	db	0
  1356  00FF07                     STR_72:
  1357  00FF07  50                 	db	80	;'P'
  1358  00FF08  55                 	db	85	;'U'
  1359  00FF09  53                 	db	83	;'S'
  1360  00FF0A  48                 	db	72	;'H'
  1361  00FF0B  20                 	db	32
  1362  00FF0C  54                 	db	84	;'T'
  1363  00FF0D  4F                 	db	79	;'O'
  1364  00FF0E  20                 	db	32
  1365  00FF0F  53                 	db	83	;'S'
  1366  00FF10  54                 	db	84	;'T'
  1367  00FF11  41                 	db	65	;'A'
  1368  00FF12  52                 	db	82	;'R'
  1369  00FF13  54                 	db	84	;'T'
  1370  00FF14  00                 	db	0
  1371  00FF15                     STR_23:
  1372  00FF15  25                 	db	37
  1373  00FF16  64                 	db	100	;'d'
  1374  00FF17  20                 	db	32
  1375  00FF18  4D                 	db	77	;'M'
  1376  00FF19  49                 	db	73	;'I'
  1377  00FF1A  4E                 	db	78	;'N'
  1378  00FF1B  20                 	db	32
  1379  00FF1C  25                 	db	37
  1380  00FF1D  64                 	db	100	;'d'
  1381  00FF1E  20                 	db	32
  1382  00FF1F  53                 	db	83	;'S'
  1383  00FF20  45                 	db	69	;'E'
  1384  00FF21  43                 	db	67	;'C'
  1385  00FF22  00                 	db	0
  1386  00FF23                     STR_2:
  1387  00FF23  54                 	db	84	;'T'
  1388  00FF24  49                 	db	73	;'I'
  1389  00FF25  4D                 	db	77	;'M'
  1390  00FF26  45                 	db	69	;'E'
  1391  00FF27  3A                 	db	58	;':'
  1392  00FF28  20                 	db	32
  1393  00FF29  25                 	db	37
  1394  00FF2A  64                 	db	100	;'d'
  1395  00FF2B  3A                 	db	58	;':'
  1396  00FF2C  25                 	db	37
  1397  00FF2D  30                 	db	48	;'0'
  1398  00FF2E  32                 	db	50	;'2'
  1399  00FF2F  64                 	db	100	;'d'
  1400  00FF30  00                 	db	0
  1401  00FF31                     STR_80:
  1402  00FF31  54                 	db	84	;'T'
  1403  00FF32  53                 	db	83	;'S'
  1404  00FF33  54                 	db	84	;'T'
  1405  00FF34  3A                 	db	58	;':'
  1406  00FF35  20                 	db	32
  1407  00FF36  49                 	db	73	;'I'
  1408  00FF37  52                 	db	82	;'R'
  1409  00FF38  20                 	db	32
  1410  00FF39  53                 	db	83	;'S'
  1411  00FF3A  4E                 	db	78	;'N'
  1412  00FF3B  53                 	db	83	;'S'
  1413  00FF3C  52                 	db	82	;'R'
  1414  00FF3D  00                 	db	0
  1415  00FF3E                     STR_65:
  1416  00FF3E  54                 	db	84	;'T'
  1417  00FF3F  49                 	db	73	;'I'
  1418  00FF40  4D                 	db	77	;'M'
  1419  00FF41  45                 	db	69	;'E'
  1420  00FF42  20                 	db	32
  1421  00FF43  25                 	db	37
  1422  00FF44  64                 	db	100	;'d'
  1423  00FF45  3A                 	db	58	;':'
  1424  00FF46  25                 	db	37
  1425  00FF47  30                 	db	48	;'0'
  1426  00FF48  32                 	db	50	;'2'
  1427  00FF49  64                 	db	100	;'d'
  1428  00FF4A  00                 	db	0
  1429  00FF4B                     STR_75:
  1430  00FF4B  41                 	db	65	;'A'
  1431  00FF4C  4C                 	db	76	;'L'
  1432  00FF4D  47                 	db	71	;'G'
  1433  00FF4E  33                 	db	51	;'3'
  1434  00FF4F  3A                 	db	58	;':'
  1435  00FF50  20                 	db	32
  1436  00FF51  31                 	db	49	;'1'
  1437  00FF52  20                 	db	32
  1438  00FF53  43                 	db	67	;'C'
  1439  00FF54  41                 	db	65	;'A'
  1440  00FF55  4E                 	db	78	;'N'
  1441  00FF56  00                 	db	0
  1442  00FF57                     STR_94:
  1443  00FF57  50                 	db	80	;'P'
  1444  00FF58  49                 	db	73	;'I'
  1445  00FF59  4E                 	db	78	;'N'
  1446  00FF5A  20                 	db	32
  1447  00FF5B  52                 	db	82	;'R'
  1448  00FF5C  41                 	db	65	;'A'
  1449  00FF5D  33                 	db	51	;'3'
  1450  00FF5E  2E                 	db	46
  1451  00FF5F  2E                 	db	46
  1452  00FF60  2E                 	db	46
  1453  00FF61  00                 	db	0
  1454  00FF62                     STR_96:
  1455  00FF62  50                 	db	80	;'P'
  1456  00FF63  49                 	db	73	;'I'
  1457  00FF64  4E                 	db	78	;'N'
  1458  00FF65  20                 	db	32
  1459  00FF66  52                 	db	82	;'R'
  1460  00FF67  41                 	db	65	;'A'
  1461  00FF68  34                 	db	52	;'4'
  1462  00FF69  2E                 	db	46
  1463  00FF6A  2E                 	db	46
  1464  00FF6B  2E                 	db	46
  1465  00FF6C  00                 	db	0
  1466  00FF6D                     STR_114:
  1467  00FF6D  50                 	db	80	;'P'
  1468  00FF6E  55                 	db	85	;'U'
  1469  00FF6F  53                 	db	83	;'S'
  1470  00FF70  48                 	db	72	;'H'
  1471  00FF71  45                 	db	69	;'E'
  1472  00FF72  52                 	db	82	;'R'
  1473  00FF73  20                 	db	32
  1474  00FF74  54                 	db	84	;'T'
  1475  00FF75  53                 	db	83	;'S'
  1476  00FF76  54                 	db	84	;'T'
  1477  00FF77  00                 	db	0
  1478  00FF78                     STR_64:
  1479  00FF78  53                 	db	83	;'S'
  1480  00FF79  4F                 	db	79	;'O'
  1481  00FF7A  52                 	db	82	;'R'
  1482  00FF7B  54                 	db	84	;'T'
  1483  00FF7C  49                 	db	73	;'I'
  1484  00FF7D  4E                 	db	78	;'N'
  1485  00FF7E  47                 	db	71	;'G'
  1486  00FF7F  2E                 	db	46
  1487  00FF80  2E                 	db	46
  1488  00FF81  2E                 	db	46
  1489  00FF82  00                 	db	0
  1490  00FF83                     STR_85:
  1491  00FF83  54                 	db	84	;'T'
  1492  00FF84  53                 	db	83	;'S'
  1493  00FF85  54                 	db	84	;'T'
  1494  00FF86  3A                 	db	58	;':'
  1495  00FF87  20                 	db	32
  1496  00FF88  43                 	db	67	;'C'
  1497  00FF89  4F                 	db	79	;'O'
  1498  00FF8A  4E                 	db	78	;'N'
  1499  00FF8B  44                 	db	68	;'D'
  1500  00FF8C  00                 	db	0
  1501  00FF8D                     STR_89:
  1502  00FF8D  41                 	db	65	;'A'
  1503  00FF8E  43                 	db	67	;'C'
  1504  00FF8F  54                 	db	84	;'T'
  1505  00FF90  55                 	db	85	;'U'
  1506  00FF91  41                 	db	65	;'A'
  1507  00FF92  54                 	db	84	;'T'
  1508  00FF93  4F                 	db	79	;'O'
  1509  00FF94  52                 	db	82	;'R'
  1510  00FF95  53                 	db	83	;'S'
  1511  00FF96  00                 	db	0
  1512  00FF97                     STR_22:
  1513  00FF97  44                 	db	68	;'D'
  1514  00FF98  55                 	db	85	;'U'
  1515  00FF99  52                 	db	82	;'R'
  1516  00FF9A  41                 	db	65	;'A'
  1517  00FF9B  54                 	db	84	;'T'
  1518  00FF9C  49                 	db	73	;'I'
  1519  00FF9D  4F                 	db	79	;'O'
  1520  00FF9E  4E                 	db	78	;'N'
  1521  00FF9F  3A                 	db	58	;':'
  1522  00FFA0  00                 	db	0
  1523  00FFA1                     STR_87:
  1524  00FFA1  43                 	db	67	;'C'
  1525  00FFA2  4F                 	db	79	;'O'
  1526  00FFA3  4E                 	db	78	;'N'
  1527  00FFA4  44                 	db	68	;'D'
  1528  00FFA5  3A                 	db	58	;':'
  1529  00FFA6  20                 	db	32
  1530  00FFA7  25                 	db	37
  1531  00FFA8  64                 	db	100	;'d'
  1532  00FFA9  00                 	db	0
  1533  00FFAA                     STR_78:
  1534  00FFAA  53                 	db	83	;'S'
  1535  00FFAB  45                 	db	69	;'E'
  1536  00FFAC  4E                 	db	78	;'N'
  1537  00FFAD  53                 	db	83	;'S'
  1538  00FFAE  4F                 	db	79	;'O'
  1539  00FFAF  52                 	db	82	;'R'
  1540  00FFB0  53                 	db	83	;'S'
  1541  00FFB1  00                 	db	0
  1542  00FFB2                     STR_127:
  1543  00FFB2  28                 	db	40
  1544  00FFB3  6E                 	db	110	;'n'
  1545  00FFB4  75                 	db	117	;'u'
  1546  00FFB5  6C                 	db	108	;'l'
  1547  00FFB6  6C                 	db	108	;'l'
  1548  00FFB7  29                 	db	41
  1549  00FFB8  00                 	db	0
  1550  00FFB9                     STR_68:
  1551  00FFB9  46                 	db	70	;'F'
  1552  00FFBA  41                 	db	65	;'A'
  1553  00FFBB  49                 	db	73	;'I'
  1554  00FFBC  4C                 	db	76	;'L'
  1555  00FFBD  45                 	db	69	;'E'
  1556  00FFBE  44                 	db	68	;'D'
  1557  00FFBF  00                 	db	0
  1558  00FFC0                     STR_7:
  1559  00FFC0  53                 	db	83	;'S'
  1560  00FFC1  54                 	db	84	;'T'
  1561  00FFC2  41                 	db	65	;'A'
  1562  00FFC3  52                 	db	82	;'R'
  1563  00FFC4  54                 	db	84	;'T'
  1564  00FFC5  3A                 	db	58	;':'
  1565  00FFC6  00                 	db	0
  1566  00FFC7                     STR_66:
  1567  00FFC7  45                 	db	69	;'E'
  1568  00FFC8  4E                 	db	78	;'N'
  1569  00FFC9  54                 	db	84	;'T'
  1570  00FFCA  00                 	db	0
  1571  00FFCB                     STR_9:
  1572  00FFCB  46                 	db	70	;'F'
  1573  00FFCC  45                 	db	69	;'E'
  1574  00FFCD  42                 	db	66	;'B'
  1575  00FFCE  00                 	db	0
  1576  00FFCF                     STR_19:
  1577  00FFCF  44                 	db	68	;'D'
  1578  00FFD0  45                 	db	69	;'E'
  1579  00FFD1  43                 	db	67	;'C'
  1580  00FFD2  00                 	db	0
  1581  00FFD3                     STR_15:
  1582  00FFD3  41                 	db	65	;'A'
  1583  00FFD4  55                 	db	85	;'U'
  1584  00FFD5  47                 	db	71	;'G'
  1585  00FFD6  00                 	db	0
  1586  00FFD7                     STR_14:
  1587  00FFD7  4A                 	db	74	;'J'
  1588  00FFD8  55                 	db	85	;'U'
  1589  00FFD9  4C                 	db	76	;'L'
  1590  00FFDA  00                 	db	0
  1591  00FFDB                     STR_8:
  1592  00FFDB  4A                 	db	74	;'J'
  1593  00FFDC  41                 	db	65	;'A'
  1594  00FFDD  4E                 	db	78	;'N'
  1595  00FFDE  00                 	db	0
  1596  00FFDF                     STR_13:
  1597  00FFDF  4A                 	db	74	;'J'
  1598  00FFE0  55                 	db	85	;'U'
  1599  00FFE1  4E                 	db	78	;'N'
  1600  00FFE2  00                 	db	0
  1601  00FFE3                     STR_16:
  1602  00FFE3  53                 	db	83	;'S'
  1603  00FFE4  45                 	db	69	;'E'
  1604  00FFE5  50                 	db	80	;'P'
  1605  00FFE6  00                 	db	0
  1606  00FFE7                     STR_10:
  1607  00FFE7  4D                 	db	77	;'M'
  1608  00FFE8  41                 	db	65	;'A'
  1609  00FFE9  52                 	db	82	;'R'
  1610  00FFEA  00                 	db	0
  1611  00FFEB                     STR_11:
  1612  00FFEB  41                 	db	65	;'A'
  1613  00FFEC  50                 	db	80	;'P'
  1614  00FFED  52                 	db	82	;'R'
  1615  00FFEE  00                 	db	0
  1616  00FFEF                     STR_20:
  1617  00FFEF  45                 	db	69	;'E'
  1618  00FFF0  52                 	db	82	;'R'
  1619  00FFF1  52                 	db	82	;'R'
  1620  00FFF2  00                 	db	0
  1621  00FFF3                     STR_17:
  1622  00FFF3  4F                 	db	79	;'O'
  1623  00FFF4  43                 	db	67	;'C'
  1624  00FFF5  54                 	db	84	;'T'
  1625  00FFF6  00                 	db	0
  1626  00FFF7                     STR_18:
  1627  00FFF7  4E                 	db	78	;'N'
  1628  00FFF8  4F                 	db	79	;'O'
  1629  00FFF9  56                 	db	86	;'V'
  1630  00FFFA  00                 	db	0
  1631  00FFFB                     STR_12:
  1632  00FFFB  4D                 	db	77	;'M'
  1633  00FFFC  41                 	db	65	;'A'
  1634  00FFFD  59                 	db	89	;'Y'
  1635  00FFFE  00                 	db	0
  1636  0000                     
  1637                           ; #config settings
  1638  00FFFF  00                 	db	0	; dummy byte at the end
  1639  0000                     
  1640                           	psect	cinit
  1641  004B90                     __pcinit:
  1642                           	opt stack 0
  1643  004B90                     start_initialization:
  1644                           	opt stack 0
  1645  004B90                     __initialization:
  1646                           	opt stack 0
  1647                           
  1648                           ; Initialize objects allocated to BANK1 (8 bytes)
  1649                           ; load TBLPTR registers with __pidataBANK1
  1650  004B90  0EF4               	movlw	low __pidataBANK1
  1651  004B92  6EF6               	movwf	tblptrl,c
  1652  004B94  0E52               	movlw	high __pidataBANK1
  1653  004B96  6EF7               	movwf	tblptrh,c
  1654  004B98  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1655  004B9A  6EF8               	movwf	tblptru,c
  1656  004B9C  EE01  F041         	lfsr	0,__pdataBANK1
  1657  004BA0  EE10 F008          	lfsr	1,8
  1658  004BA4                     copy_data0:
  1659  004BA4  0009               	tblrd		*+
  1660  004BA6  CFF5 FFEE          	movff	tablat,postinc0
  1661  004BAA  50E5               	movf	postdec1,w,c
  1662  004BAC  50E1               	movf	fsr1l,w,c
  1663  004BAE  E1FA               	bnz	copy_data0
  1664                           
  1665                           ; Clear objects allocated to BANK1 (65 bytes)
  1666  004BB0  EE01  F000         	lfsr	0,__pbssBANK1
  1667  004BB4  0E41               	movlw	65
  1668  004BB6                     clear_0:
  1669  004BB6  6AEE               	clrf	postinc0,c
  1670  004BB8  06E8               	decf	wreg,f,c
  1671  004BBA  E1FD               	bnz	clear_0
  1672                           
  1673                           ; Clear objects allocated to BANK0 (38 bytes)
  1674  004BBC  EE00  F0DA         	lfsr	0,__pbssBANK0
  1675  004BC0  0E26               	movlw	38
  1676  004BC2                     clear_1:
  1677  004BC2  6AEE               	clrf	postinc0,c
  1678  004BC4  06E8               	decf	wreg,f,c
  1679  004BC6  E1FD               	bnz	clear_1
  1680                           
  1681                           ; Clear objects allocated to COMRAM (35 bytes)
  1682  004BC8  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1683  004BCC  0E23               	movlw	35
  1684  004BCE                     clear_2:
  1685  004BCE  6AEE               	clrf	postinc0,c
  1686  004BD0  06E8               	decf	wreg,f,c
  1687  004BD2  E1FD               	bnz	clear_2
  1688  004BD4                     end_of_initialization:
  1689                           	opt stack 0
  1690  004BD4                     __end_of__initialization:
  1691                           	opt stack 0
  1692  004BD4  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1693  004BD6  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1694  004BD8  0100               	movlb	0
  1695  004BDA  EF05  F020         	goto	_main	;jump to C main() function
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           postdec1	equ	0xFE5
  1703                           fsr1l	equ	0xFE1
  1704                           
  1705                           	psect	bssCOMRAM
  1706  00005B                     __pbssCOMRAM:
  1707                           	opt stack 0
  1708  00005B                     _back:
  1709                           	opt stack 0
  1710  00005B                     	ds	2
  1711  00005D                     _down:
  1712                           	opt stack 0
  1713  00005D                     	ds	2
  1714  00005F                     _enter:
  1715                           	opt stack 0
  1716  00005F                     	ds	2
  1717  000061                     _f_panning_to_bin:
  1718                           	opt stack 0
  1719  000061                     	ds	2
  1720  000063                     _log_completion:
  1721                           	opt stack 0
  1722  000063                     	ds	2
  1723  000065                     _log_count_can_no_lab:
  1724                           	opt stack 0
  1725  000065                     	ds	2
  1726  000067                     _log_count_can_w_lab:
  1727                           	opt stack 0
  1728  000067                     	ds	2
  1729  000069                     _log_count_pop_no_tab:
  1730                           	opt stack 0
  1731  000069                     	ds	2
  1732  00006B                     _log_count_pop_w_tab:
  1733                           	opt stack 0
  1734  00006B                     	ds	2
  1735  00006D                     _most_recent_sort_time:
  1736                           	opt stack 0
  1737  00006D                     	ds	2
  1738  00006F                     _pan_servo_state:
  1739                           	opt stack 0
  1740  00006F                     	ds	2
  1741  000071                     _servo_timer_counter:
  1742                           	opt stack 0
  1743  000071                     	ds	2
  1744  000073                     _servo_timer_target:
  1745                           	opt stack 0
  1746  000073                     	ds	2
  1747  000075                     _tilt_servo_state:
  1748                           	opt stack 0
  1749  000075                     	ds	2
  1750  000077                     _up:
  1751                           	opt stack 0
  1752  000077                     	ds	2
  1753  000079                     _was_low_1:
  1754                           	opt stack 0
  1755  000079                     	ds	2
  1756  00007B                     _was_low_3:
  1757                           	opt stack 0
  1758  00007B                     	ds	2
  1759  00007D                     _input:
  1760                           	opt stack 0
  1761  00007D                     	ds	1
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           
  1771                           	psect	bssBANK0
  1772  0000DA                     __pbssBANK0:
  1773                           	opt stack 0
  1774  0000DA                     _servoTimes:
  1775                           	opt stack 0
  1776  0000DA                     	ds	8
  1777  0000E2                     _sensor_outputs:
  1778                           	opt stack 0
  1779  0000E2                     	ds	4
  1780  0000E6                     _IR_signal:
  1781                           	opt stack 0
  1782  0000E6                     	ds	2
  1783  0000E8                     _MAG_signal:
  1784                           	opt stack 0
  1785  0000E8                     	ds	2
  1786  0000EA                     _RTCflag:
  1787                           	opt stack 0
  1788  0000EA                     	ds	2
  1789  0000EC                     _cur_state:
  1790                           	opt stack 0
  1791  0000EC                     	ds	2
  1792  0000EE                     _f_lastCan:
  1793                           	opt stack 0
  1794  0000EE                     	ds	2
  1795  0000F0                     _f_loadingNewCan:
  1796                           	opt stack 0
  1797  0000F0                     	ds	2
  1798  0000F2                     _log:
  1799                           	opt stack 0
  1800  0000F2                     	ds	2
  1801  0000F4                     _log_total_time:
  1802                           	opt stack 0
  1803  0000F4                     	ds	2
  1804  0000F6                     _logstate:
  1805                           	opt stack 0
  1806  0000F6                     	ds	2
  1807  0000F8                     _total_time:
  1808                           	opt stack 0
  1809  0000F8                     	ds	2
  1810  0000FA                     _var:
  1811                           	opt stack 0
  1812  0000FA                     	ds	2
  1813  0000FC                     _machine_state:
  1814                           	opt stack 0
  1815  0000FC                     	ds	1
  1816  0000FD                     _sel:
  1817                           	opt stack 0
  1818  0000FD                     	ds	1
  1819  0000FE                     _count_total:
  1820                           	opt stack 0
  1821  0000FE                     	ds	2
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           postdec1	equ	0xFE5
  1829                           fsr1l	equ	0xFE1
  1830                           
  1831                           	psect	bssBANK1
  1832  000100                     __pbssBANK1:
  1833                           	opt stack 0
  1834  000100                     _log_startTime:
  1835                           	opt stack 0
  1836  000100                     	ds	14
  1837  00010E                     _startTime:
  1838                           	opt stack 0
  1839  00010E                     	ds	14
  1840  00011C                     _time:
  1841                           	opt stack 0
  1842  00011C                     	ds	7
  1843  000123                     _count_can_no_lab:
  1844                           	opt stack 0
  1845  000123                     	ds	2
  1846  000125                     _count_can_w_lab:
  1847                           	opt stack 0
  1848  000125                     	ds	2
  1849  000127                     _count_pop_no_tab:
  1850                           	opt stack 0
  1851  000127                     	ds	2
  1852  000129                     _count_pop_w_tab:
  1853                           	opt stack 0
  1854  000129                     	ds	2
  1855  00012B                     _cur_can:
  1856                           	opt stack 0
  1857  00012B                     	ds	2
  1858  00012D                     _debug:
  1859                           	opt stack 0
  1860  00012D                     	ds	2
  1861  00012F                     _f_ID_receive:
  1862                           	opt stack 0
  1863  00012F                     	ds	2
  1864  000131                     _f_can_coming_to_ID:
  1865                           	opt stack 0
  1866  000131                     	ds	2
  1867  000133                     _f_can_coming_to_distribution:
  1868                           	opt stack 0
  1869  000133                     	ds	2
  1870  000135                     _f_can_distributed:
  1871                           	opt stack 0
  1872  000135                     	ds	2
  1873  000137                     _f_most_recent_sort_time:
  1874                           	opt stack 0
  1875  000137                     	ds	2
  1876  000139                     _first:
  1877                           	opt stack 0
  1878  000139                     	ds	2
  1879  00013B                     _firstboot:
  1880                           	opt stack 0
  1881  00013B                     	ds	2
  1882  00013D                     _i:
  1883                           	opt stack 0
  1884  00013D                     	ds	2
  1885  00013F                     _log_count_total:
  1886                           	opt stack 0
  1887  00013F                     	ds	2
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           
  1897                           	psect	dataBANK1
  1898  000141                     __pdataBANK1:
  1899                           	opt stack 0
  1900  000141                     UI@F3235:
  1901                           	opt stack 0
  1902  000141                     	ds	4
  1903  000145                     printRTC@F3226:
  1904                           	opt stack 0
  1905  000145                     	ds	4
  1906                           tblptru	equ	0xFF8
  1907                           tblptrh	equ	0xFF7
  1908                           tblptrl	equ	0xFF6
  1909                           tablat	equ	0xFF5
  1910                           postinc0	equ	0xFEE
  1911                           wreg	equ	0xFE8
  1912                           postdec1	equ	0xFE5
  1913                           fsr1l	equ	0xFE1
  1914                           
  1915                           	psect	cstackBANK0
  1916  000080                     __pcstackBANK0:
  1917                           	opt stack 0
  1918  000080                     ??_delay_ms:
  1919  000080                     ??_PortTests:
  1920  000080                     ??_isdigit:
  1921  000080                     ??_readADC:
  1922  000080                     ??_I2C_Master_Wait:
  1923  000080                     ?___wmul:
  1924                           	opt stack 0
  1925  000080                     ?___awmod:
  1926                           	opt stack 0
  1927  000080                     ?___lwdiv:
  1928                           	opt stack 0
  1929  000080                     ?___lldiv:
  1930                           	opt stack 0
  1931  000080                     lcdNibble@temp:
  1932                           	opt stack 0
  1933  000080                     initTime@m:
  1934                           	opt stack 0
  1935  000080                     updateServoPosition@time_us:
  1936                           	opt stack 0
  1937  000080                     EEPROM_read@address:
  1938                           	opt stack 0
  1939  000080                     ___wmul@multiplier:
  1940                           	opt stack 0
  1941  000080                     ___awmod@dividend:
  1942                           	opt stack 0
  1943  000080                     ___lwdiv@dividend:
  1944                           	opt stack 0
  1945  000080                     strcpy@to:
  1946                           	opt stack 0
  1947  000080                     ___lldiv@dividend:
  1948                           	opt stack 0
  1949                           
  1950                           ; 4 bytes @ 0x0
  1951  000080                     	ds	1
  1952  000081                     readADC@channel:
  1953                           	opt stack 0
  1954  000081                     I2C_Master_Read@a:
  1955                           	opt stack 0
  1956  000081                     lcdNibble@data:
  1957                           	opt stack 0
  1958  000081                     initTime@h:
  1959                           	opt stack 0
  1960  000081                     delay_ms@milliseconds:
  1961                           	opt stack 0
  1962  000081                     _isdigit$2058:
  1963                           	opt stack 0
  1964  000081                     I2C_Master_Write@d:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x1
  1968  000081                     	ds	1
  1969  000082                     ??_ID:
  1970  000082                     ??_readIR:
  1971  000082                     ??_readMAG:
  1972  000082                     I2C_Master_Read@temp:
  1973                           	opt stack 0
  1974  000082                     lcdInst@data:
  1975                           	opt stack 0
  1976  000082                     putch@data:
  1977                           	opt stack 0
  1978  000082                     initTime@w:
  1979                           	opt stack 0
  1980  000082                     isdigit@c:
  1981                           	opt stack 0
  1982  000082                     updateServoPosition@timer:
  1983                           	opt stack 0
  1984  000082                     ___wmul@multiplicand:
  1985                           	opt stack 0
  1986  000082                     ___awmod@divisor:
  1987                           	opt stack 0
  1988  000082                     ___lwdiv@divisor:
  1989                           	opt stack 0
  1990  000082                     strcpy@from:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x2
  1994  000082                     	ds	1
  1995  000083                     ??_initLCD:
  1996  000083                     initTime@DD:
  1997                           	opt stack 0
  1998  000083                     getRTC@i:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x3
  2002  000083                     	ds	1
  2003  000084                     ??_updateServoPosition:
  2004  000084                     initTime@MM:
  2005                           	opt stack 0
  2006  000084                     ___awmod@counter:
  2007                           	opt stack 0
  2008  000084                     readIR@res:
  2009                           	opt stack 0
  2010  000084                     readMAG@res:
  2011                           	opt stack 0
  2012  000084                     ID@i:
  2013                           	opt stack 0
  2014  000084                     ___wmul@product:
  2015                           	opt stack 0
  2016  000084                     ___lwdiv@quotient:
  2017                           	opt stack 0
  2018  000084                     strcpy@cp:
  2019                           	opt stack 0
  2020  000084                     ___lldiv@divisor:
  2021                           	opt stack 0
  2022                           
  2023                           ; 4 bytes @ 0x4
  2024  000084                     	ds	1
  2025  000085                     ??_initSortTimer:
  2026  000085                     initTime@YY:
  2027                           	opt stack 0
  2028  000085                     ___awmod@sign:
  2029                           	opt stack 0
  2030                           
  2031                           ; 1 bytes @ 0x5
  2032  000085                     	ds	1
  2033  000086                     ??_getIR:
  2034  000086                     ??_getMAG:
  2035  000086                     ?___awdiv:
  2036                           	opt stack 0
  2037  000086                     initTime@s:
  2038                           	opt stack 0
  2039  000086                     ___lwdiv@counter:
  2040                           	opt stack 0
  2041  000086                     ID@i_1173:
  2042                           	opt stack 0
  2043  000086                     updateServoPosition@my_time:
  2044                           	opt stack 0
  2045  000086                     ___awdiv@dividend:
  2046                           	opt stack 0
  2047                           
  2048                           ; 2 bytes @ 0x6
  2049  000086                     	ds	1
  2050  000087                     ?___lwmod:
  2051                           	opt stack 0
  2052  000087                     getIR@i:
  2053                           	opt stack 0
  2054  000087                     ___lwmod@dividend:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x7
  2058  000087                     	ds	1
  2059  000088                     ??_Distribution:
  2060  000088                     ??_initServos:
  2061  000088                     initSortTimer@i:
  2062                           	opt stack 0
  2063  000088                     ___awdiv@divisor:
  2064                           	opt stack 0
  2065  000088                     ___lldiv@quotient:
  2066                           	opt stack 0
  2067                           
  2068                           ; 4 bytes @ 0x8
  2069  000088                     	ds	1
  2070  000089                     ___lwmod@divisor:
  2071                           	opt stack 0
  2072                           
  2073                           ; 2 bytes @ 0x9
  2074  000089                     	ds	1
  2075  00008A                     ___awdiv@counter:
  2076                           	opt stack 0
  2077                           
  2078                           ; 1 bytes @ 0xA
  2079  00008A                     	ds	1
  2080  00008B                     ___awdiv@sign:
  2081                           	opt stack 0
  2082  00008B                     ___lwmod@counter:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0xB
  2086  00008B                     	ds	1
  2087  00008C                     ___lldiv@counter:
  2088                           	opt stack 0
  2089  00008C                     ___awdiv@quotient:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0xC
  2093  00008C                     	ds	1
  2094  00008D                     I2C_Master_Init@c:
  2095                           	opt stack 0
  2096                           
  2097                           ; 4 bytes @ 0xD
  2098  00008D                     	ds	1
  2099  00008E                     ?_printf:
  2100                           	opt stack 0
  2101  00008E                     printf@f:
  2102                           	opt stack 0
  2103                           
  2104                           ; 2 bytes @ 0xE
  2105  00008E                     	ds	3
  2106  000091                     ??_I2C_Master_Init:
  2107                           
  2108                           ; 1 bytes @ 0x11
  2109  000091                     	ds	4
  2110  000095                     ??_loadRTC:
  2111                           
  2112                           ; 1 bytes @ 0x15
  2113  000095                     	ds	1
  2114  000096                     loadRTC@i:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x16
  2118  000096                     	ds	4
  2119  00009A                     ??_printf:
  2120                           
  2121                           ; 1 bytes @ 0x1A
  2122  00009A                     	ds	4
  2123  00009E                     printf@prec:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x1E
  2127  00009E                     	ds	1
  2128  00009F                     printf@cp:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x1F
  2132  00009F                     	ds	2
  2133  0000A1                     printf@ap:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x21
  2137  0000A1                     	ds	2
  2138  0000A3                     printf@len:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x23
  2142  0000A3                     	ds	2
  2143  0000A5                     printf@val:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0x25
  2147  0000A5                     	ds	2
  2148  0000A7                     printf@flag:
  2149                           	opt stack 0
  2150                           
  2151                           ; 1 bytes @ 0x27
  2152  0000A7                     	ds	1
  2153  0000A8                     printf@c:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x28
  2157  0000A8                     	ds	1
  2158  0000A9                     printf@width:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x29
  2162  0000A9                     	ds	2
  2163  0000AB                     ??_printRTC:
  2164  0000AB                     ??_algorithmTest:
  2165  0000AB                     ??_sensorTest:
  2166  0000AB                     ??_actuatorTest:
  2167  0000AB                     ??_PortTestA5:
  2168  0000AB                     ??_SpeedTest:
  2169  0000AB                     ??_PusherTest:
  2170  0000AB                     ??_BothServos:
  2171  0000AB                     ??_BlockerTest:
  2172  0000AB                     EEPROM_write@address:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x2B
  2176  0000AB                     	ds	1
  2177  0000AC                     BlockerTest@i:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x2C
  2181  0000AC                     	ds	1
  2182  0000AD                     EEPROM_write@data:
  2183                           	opt stack 0
  2184  0000AD                     actuatorTest@i_1734:
  2185                           	opt stack 0
  2186  0000AD                     sensorTest@res:
  2187                           	opt stack 0
  2188  0000AD                     PusherTest@res:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x2D
  2192  0000AD                     	ds	1
  2193  0000AE                     ??_EEPROM_write:
  2194  0000AE                     actuatorTest@i_1741:
  2195                           	opt stack 0
  2196  0000AE                     BlockerTest@cam_flag:
  2197                           	opt stack 0
  2198  0000AE                     printRTC@INT_time:
  2199                           	opt stack 0
  2200                           
  2201                           ; 14 bytes @ 0x2E
  2202  0000AE                     	ds	1
  2203  0000AF                     EEPROM_write@i:
  2204                           	opt stack 0
  2205  0000AF                     actuatorTest@i_1742:
  2206                           	opt stack 0
  2207  0000AF                     PusherTest@res_1789:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x2F
  2211  0000AF                     	ds	1
  2212  0000B0                     EEPROM_write@i_1398:
  2213                           	opt stack 0
  2214  0000B0                     actuatorTest@i_1744:
  2215                           	opt stack 0
  2216  0000B0                     BlockerTest@cond_flag:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0x30
  2220  0000B0                     	ds	1
  2221  0000B1                     ??_Loading:
  2222  0000B1                     logRun@num:
  2223                           	opt stack 0
  2224  0000B1                     actuatorTest@i_1745:
  2225                           	opt stack 0
  2226  0000B1                     PusherTest@i:
  2227                           	opt stack 0
  2228                           
  2229                           ; 2 bytes @ 0x31
  2230  0000B1                     	ds	1
  2231  0000B2                     logRun@byte1:
  2232                           	opt stack 0
  2233  0000B2                     actuatorTest@i_1747:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x32
  2237  0000B2                     	ds	1
  2238  0000B3                     logRun@byte2:
  2239                           	opt stack 0
  2240  0000B3                     actuatorTest@i_1748:
  2241                           	opt stack 0
  2242  0000B3                     Loading@addr:
  2243                           	opt stack 0
  2244  0000B3                     PusherTest@i_1793:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x33
  2248  0000B3                     	ds	1
  2249  0000B4                     logRun@byte3:
  2250                           	opt stack 0
  2251  0000B4                     actuatorTest@i_1750:
  2252                           	opt stack 0
  2253                           
  2254                           ; 1 bytes @ 0x34
  2255  0000B4                     	ds	1
  2256  0000B5                     Loading@byte1:
  2257                           	opt stack 0
  2258  0000B5                     logRun@byte_i:
  2259                           	opt stack 0
  2260  0000B5                     actuatorTest@i_1751:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x35
  2264  0000B5                     	ds	1
  2265  0000B6                     logRun@byte11:
  2266                           	opt stack 0
  2267  0000B6                     actuatorTest@i_1753:
  2268                           	opt stack 0
  2269  0000B6                     Loading@i_1148:
  2270                           	opt stack 0
  2271                           
  2272                           ; 2 bytes @ 0x36
  2273  0000B6                     	ds	1
  2274  0000B7                     actuatorTest@i_1754:
  2275                           	opt stack 0
  2276  0000B7                     logRun@i:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x37
  2280  0000B7                     	ds	1
  2281  0000B8                     actuatorTest@i_1756:
  2282                           	opt stack 0
  2283  0000B8                     Loading@i_1157:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x38
  2287  0000B8                     	ds	1
  2288  0000B9                     actuatorTest@i_1757:
  2289                           	opt stack 0
  2290  0000B9                     logRun@addr:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x39
  2294  0000B9                     	ds	1
  2295  0000BA                     actuatorTest@i_1760:
  2296                           	opt stack 0
  2297  0000BA                     Loading@i_1159:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x3A
  2301  0000BA                     	ds	1
  2302  0000BB                     actuatorTest@i_1761:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x3B
  2306  0000BB                     	ds	1
  2307  0000BC                     actuatorTest@i_1763:
  2308                           	opt stack 0
  2309  0000BC                     printRTC@RTC_month:
  2310                           	opt stack 0
  2311  0000BC                     Loading@i_1160:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x3C
  2315  0000BC                     	ds	1
  2316  0000BD                     actuatorTest@i_1764:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x3D
  2320  0000BD                     	ds	1
  2321  0000BE                     actuatorTest@i_1766:
  2322                           	opt stack 0
  2323  0000BE                     Loading@i_1162:
  2324                           	opt stack 0
  2325  0000BE                     printRTC@month:
  2326                           	opt stack 0
  2327                           
  2328                           ; 4 bytes @ 0x3E
  2329  0000BE                     	ds	1
  2330  0000BF                     actuatorTest@i_1767:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x3F
  2334  0000BF                     	ds	1
  2335  0000C0                     actuatorTest@i_1770:
  2336                           	opt stack 0
  2337  0000C0                     Loading@j:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x40
  2341  0000C0                     	ds	1
  2342  0000C1                     actuatorTest@i_1771:
  2343                           	opt stack 0
  2344                           
  2345                           ; 1 bytes @ 0x41
  2346  0000C1                     	ds	1
  2347  0000C2                     actuatorTest@i_1773:
  2348                           	opt stack 0
  2349  0000C2                     printRTC@i:
  2350                           	opt stack 0
  2351  0000C2                     Loading@i:
  2352                           	opt stack 0
  2353                           
  2354                           ; 2 bytes @ 0x42
  2355  0000C2                     	ds	1
  2356  0000C3                     actuatorTest@i_1774:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x43
  2360  0000C3                     	ds	1
  2361  0000C4                     ??_UI:
  2362  0000C4                     actuatorTest@i:
  2363                           	opt stack 0
  2364                           
  2365                           ; 2 bytes @ 0x44
  2366  0000C4                     	ds	2
  2367  0000C6                     ??_Test:
  2368  0000C6                     _UI$2416:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x46
  2372  0000C6                     	ds	2
  2373  0000C8                     UI@i:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x48
  2377  0000C8                     	ds	1
  2378  0000C9                     UI@i_409:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x49
  2382  0000C9                     	ds	1
  2383  0000CA                     UI@i_412:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x4A
  2387  0000CA                     	ds	1
  2388  0000CB                     UI@i_413:
  2389                           	opt stack 0
  2390                           
  2391                           ; 1 bytes @ 0x4B
  2392  0000CB                     	ds	1
  2393  0000CC                     UI@i_431:
  2394                           	opt stack 0
  2395                           
  2396                           ; 1 bytes @ 0x4C
  2397  0000CC                     	ds	1
  2398  0000CD                     UI@i_432:
  2399                           	opt stack 0
  2400                           
  2401                           ; 1 bytes @ 0x4D
  2402  0000CD                     	ds	1
  2403  0000CE                     UI@i_435:
  2404                           	opt stack 0
  2405                           
  2406                           ; 1 bytes @ 0x4E
  2407  0000CE                     	ds	1
  2408  0000CF                     UI@i_436:
  2409                           	opt stack 0
  2410                           
  2411                           ; 1 bytes @ 0x4F
  2412  0000CF                     	ds	1
  2413  0000D0                     UI@i_439:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x50
  2417  0000D0                     	ds	1
  2418  0000D1                     UI@i_440:
  2419                           	opt stack 0
  2420                           
  2421                           ; 1 bytes @ 0x51
  2422  0000D1                     	ds	1
  2423  0000D2                     UI@i_443:
  2424                           	opt stack 0
  2425                           
  2426                           ; 1 bytes @ 0x52
  2427  0000D2                     	ds	1
  2428  0000D3                     UI@i_444:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0x53
  2432  0000D3                     	ds	1
  2433  0000D4                     UI@i_447:
  2434                           	opt stack 0
  2435                           
  2436                           ; 1 bytes @ 0x54
  2437  0000D4                     	ds	1
  2438  0000D5                     UI@i_448:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x55
  2442  0000D5                     	ds	1
  2443  0000D6                     UI@month:
  2444                           	opt stack 0
  2445                           
  2446                           ; 4 bytes @ 0x56
  2447  0000D6                     	ds	4
  2448  0000DA                     tblptru	equ	0xFF8
  2449                           tblptrh	equ	0xFF7
  2450                           tblptrl	equ	0xFF6
  2451                           tablat	equ	0xFF5
  2452                           postinc0	equ	0xFEE
  2453                           wreg	equ	0xFE8
  2454                           postdec1	equ	0xFE5
  2455                           fsr1l	equ	0xFE1
  2456                           
  2457                           ; 1 bytes @ 0x5A
  2458                           
  2459                           	psect	cstackCOMRAM
  2460  000001                     __pcstackCOMRAM:
  2461                           	opt stack 0
  2462  000001                     ??i2_I2C_Master_Wait:
  2463  000001                     ??i2_delay_ms:
  2464  000001                     ??i2_isdigit:
  2465  000001                     ?i2___wmul:
  2466                           	opt stack 0
  2467  000001                     ?i2___lwmod:
  2468                           	opt stack 0
  2469  000001                     i2lcdNibble@temp:
  2470                           	opt stack 0
  2471  000001                     i2updateServoPosition@time_us:
  2472                           	opt stack 0
  2473  000001                     i2EEPROM_read@address:
  2474                           	opt stack 0
  2475  000001                     i2___wmul@multiplier:
  2476                           	opt stack 0
  2477  000001                     i2___lwmod@dividend:
  2478                           	opt stack 0
  2479  000001                     i2strcpy@to:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x0
  2483  000001                     	ds	1
  2484  000002                     i2I2C_Master_Read@a:
  2485                           	opt stack 0
  2486  000002                     i2lcdNibble@data:
  2487                           	opt stack 0
  2488  000002                     i2delay_ms@milliseconds:
  2489                           	opt stack 0
  2490  000002                     i2_isdigit$2058:
  2491                           	opt stack 0
  2492  000002                     i2I2C_Master_Write@d:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x1
  2496  000002                     	ds	1
  2497  000003                     i2I2C_Master_Read@temp:
  2498                           	opt stack 0
  2499  000003                     i2lcdInst@data:
  2500                           	opt stack 0
  2501  000003                     i2putch@data:
  2502                           	opt stack 0
  2503  000003                     i2isdigit@c:
  2504                           	opt stack 0
  2505  000003                     i2updateServoPosition@timer:
  2506                           	opt stack 0
  2507  000003                     i2___wmul@multiplicand:
  2508                           	opt stack 0
  2509  000003                     i2___lwmod@divisor:
  2510                           	opt stack 0
  2511  000003                     i2strcpy@from:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x2
  2515  000003                     	ds	1
  2516  000004                     i2getRTC@i:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x3
  2520  000004                     	ds	1
  2521  000005                     ??i2_updateServoPosition:
  2522  000005                     i2___lwmod@counter:
  2523                           	opt stack 0
  2524  000005                     i2___wmul@product:
  2525                           	opt stack 0
  2526  000005                     i2strcpy@cp:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x4
  2530  000005                     	ds	1
  2531  000006                     ?i2___lwdiv:
  2532                           	opt stack 0
  2533  000006                     i2___lwdiv@dividend:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x5
  2537  000006                     	ds	1
  2538  000007                     retrieveLog@logNum:
  2539                           	opt stack 0
  2540  000007                     i2updateServoPosition@my_time:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x6
  2544  000007                     	ds	1
  2545  000008                     i2___lwdiv@divisor:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x7
  2549  000008                     	ds	1
  2550  000009                     ??_retrieveLog:
  2551                           
  2552                           ; 1 bytes @ 0x8
  2553  000009                     	ds	1
  2554  00000A                     i2___lwdiv@quotient:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x9
  2558  00000A                     	ds	1
  2559  00000B                     retrieveLog@byte1:
  2560                           	opt stack 0
  2561                           
  2562                           ; 1 bytes @ 0xA
  2563  00000B                     	ds	1
  2564  00000C                     retrieveLog@byte2:
  2565                           	opt stack 0
  2566  00000C                     i2___lwdiv@counter:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0xB
  2570  00000C                     	ds	1
  2571  00000D                     ?i2_printf:
  2572                           	opt stack 0
  2573  00000D                     retrieveLog@byte3:
  2574                           	opt stack 0
  2575  00000D                     i2printf@f:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0xC
  2579  00000D                     	ds	1
  2580  00000E                     retrieveLog@i:
  2581                           	opt stack 0
  2582                           
  2583                           ; 2 bytes @ 0xD
  2584  00000E                     	ds	2
  2585  000010                     retrieveLog@addr:
  2586                           	opt stack 0
  2587                           
  2588                           ; 2 bytes @ 0xF
  2589  000010                     	ds	2
  2590  000012                     dispLogs@myLog:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x11
  2594  000012                     	ds	2
  2595  000014                     
  2596                           ; 1 bytes @ 0x13
  2597  000014                     	ds	5
  2598  000019                     ??i2_printf:
  2599                           
  2600                           ; 1 bytes @ 0x18
  2601  000019                     	ds	4
  2602  00001D                     i2printf@prec:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x1C
  2606  00001D                     	ds	1
  2607  00001E                     i2printf@cp:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x1D
  2611  00001E                     	ds	2
  2612  000020                     i2printf@ap:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x1F
  2616  000020                     	ds	2
  2617  000022                     i2printf@len:
  2618                           	opt stack 0
  2619                           
  2620                           ; 2 bytes @ 0x21
  2621  000022                     	ds	2
  2622  000024                     i2printf@val:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x23
  2626  000024                     	ds	2
  2627  000026                     i2printf@flag:
  2628                           	opt stack 0
  2629                           
  2630                           ; 1 bytes @ 0x25
  2631  000026                     	ds	1
  2632  000027                     i2printf@c:
  2633                           	opt stack 0
  2634                           
  2635                           ; 1 bytes @ 0x26
  2636  000027                     	ds	1
  2637  000028                     i2printf@width:
  2638                           	opt stack 0
  2639                           
  2640                           ; 2 bytes @ 0x27
  2641  000028                     	ds	2
  2642  00002A                     ??_printSortTimer:
  2643  00002A                     ??_updateServoStates:
  2644  00002A                     ??i2_printRTC:
  2645  00002A                     ?_inputHandler:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x29
  2649  00002A                     	ds	2
  2650  00002C                     ??_inputHandler:
  2651                           
  2652                           ; 1 bytes @ 0x2B
  2653  00002C                     	ds	1
  2654  00002D                     printSortTimer@curTime:
  2655                           	opt stack 0
  2656  00002D                     i2printRTC@INT_time:
  2657                           	opt stack 0
  2658                           
  2659                           ; 14 bytes @ 0x2C
  2660  00002D                     	ds	14
  2661  00003B                     printSortTimer@start_sec:
  2662                           	opt stack 0
  2663  00003B                     i2printRTC@RTC_month:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x3A
  2667  00003B                     	ds	2
  2668  00003D                     printSortTimer@cur_sec:
  2669                           	opt stack 0
  2670  00003D                     i2printRTC@month:
  2671                           	opt stack 0
  2672                           
  2673                           ; 4 bytes @ 0x3C
  2674  00003D                     	ds	2
  2675  00003F                     printSortTimer@min:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x3E
  2679  00003F                     	ds	2
  2680  000041                     printSortTimer@sec:
  2681                           	opt stack 0
  2682  000041                     i2printRTC@i:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0x40
  2686  000041                     	ds	2
  2687  000043                     ??_updateMenu:
  2688  000043                     _printSortTimer$2548:
  2689                           	opt stack 0
  2690                           
  2691                           ; 2 bytes @ 0x42
  2692  000043                     	ds	2
  2693  000045                     printSortTimer@timeDiff:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x44
  2697  000045                     	ds	2
  2698  000047                     printSortTimer@i_1185:
  2699                           	opt stack 0
  2700                           
  2701                           ; 2 bytes @ 0x46
  2702  000047                     	ds	2
  2703  000049                     printSortTimer@i:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x48
  2707  000049                     	ds	2
  2708  00004B                     ??_handler:
  2709                           
  2710                           ; 1 bytes @ 0x4A
  2711  00004B                     	ds	16
  2712                           tblptru	equ	0xFF8
  2713                           tblptrh	equ	0xFF7
  2714                           tblptrl	equ	0xFF6
  2715                           tablat	equ	0xFF5
  2716                           postinc0	equ	0xFEE
  2717                           wreg	equ	0xFE8
  2718                           postdec1	equ	0xFE5
  2719                           fsr1l	equ	0xFE1
  2720                           
  2721 ;;
  2722 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2723 ;;
  2724 ;; *************** function _main *****************
  2725 ;; Defined at:
  2726 ;;		line 19 in file "main.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;Total ram usage:        0 bytes
  2745 ;; Hardware stack levels required when called:   13
  2746 ;; This function calls:
  2747 ;;		_I2C_Master_Init
  2748 ;;		_Test
  2749 ;;		_UI
  2750 ;;		_initLCD
  2751 ;;		_initTime
  2752 ;;		_initUI
  2753 ;;		_logRun
  2754 ;;		_machineConfig
  2755 ;;		_sort
  2756 ;;		_stopSignals
  2757 ;; This function is called by:
  2758 ;;		Startup code after reset
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text0
  2763  00400A                     __ptext0:
  2764                           	opt stack 0
  2765  00400A                     _main:
  2766                           	opt stack 18
  2767                           
  2768                           ;main.c: 20: machineConfig();
  2769                           
  2770                           ;incstack = 0
  2771  00400A  ECEB  F024         	call	_machineConfig	;wreg free
  2772                           
  2773                           ;main.c: 21: initLCD();
  2774  00400E  EC3B  F026         	call	_initLCD	;wreg free
  2775                           
  2776                           ;main.c: 24: RTCflag = 0;
  2777  004012  0E00               	movlw	0
  2778  004014  0100               	movlb	0	; () banked
  2779  004016  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2780  004018  0E00               	movlw	0
  2781  00401A  6FEA               	movwf	_RTCflag& (0+255),b
  2782                           
  2783                           ;main.c: 25: if(RTCflag){
  2784  00401C  0100               	movlb	0	; () banked
  2785  00401E  51EA               	movf	_RTCflag& (0+255),w,b
  2786  004020  0100               	movlb	0	; () banked
  2787  004022  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2788  004024  B4D8               	btfsc	status,2,c
  2789  004026  D016               	goto	l9358
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2793  004028  0E20               	movlw	32
  2794  00402A  0100               	movlb	0	; () banked
  2795  00402C  6F80               	movwf	initTime@m& (0+255),b
  2796  00402E  0E15               	movlw	21
  2797  004030  0100               	movlb	0	; () banked
  2798  004032  6F81               	movwf	initTime@h& (0+255),b
  2799  004034  0E04               	movlw	4
  2800  004036  0100               	movlb	0	; () banked
  2801  004038  6F82               	movwf	initTime@w& (0+255),b
  2802  00403A  0E15               	movlw	21
  2803  00403C  0100               	movlb	0	; () banked
  2804  00403E  6F83               	movwf	initTime@DD& (0+255),b
  2805  004040  0E03               	movlw	3
  2806  004042  0100               	movlb	0	; () banked
  2807  004044  6F84               	movwf	initTime@MM& (0+255),b
  2808  004046  0E17               	movlw	23
  2809  004048  0100               	movlb	0	; () banked
  2810  00404A  6F85               	movwf	initTime@YY& (0+255),b
  2811  00404C  0E42               	movlw	66
  2812  00404E  ECEF  F028         	call	_initTime
  2813                           
  2814                           ;main.c: 27: }
  2815  004052  D00B               	goto	l9360
  2816  004054                     l9358:
  2817                           
  2818                           ;main.c: 28: else{
  2819                           ;main.c: 29: I2C_Master_Init(10000);
  2820  004054  0E10               	movlw	16
  2821  004056  0100               	movlb	0	; () banked
  2822  004058  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2823  00405A  0E27               	movlw	39
  2824  00405C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2825  00405E  0E00               	movlw	0
  2826  004060  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2827  004062  0E00               	movlw	0
  2828  004064  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2829  004066  ECBB  F024         	call	_I2C_Master_Init	;wreg free
  2830  00406A                     l9360:
  2831                           
  2832                           ;main.c: 30: }
  2833                           ;main.c: 32: initUI();
  2834  00406A  EC1F  F027         	call	_initUI	;wreg free
  2835                           
  2836                           ;main.c: 33: first = 1;
  2837  00406E  0E00               	movlw	0
  2838  004070  0101               	movlb	1	; () banked
  2839  004072  6F3A               	movwf	(_first+1)& (0+255),b
  2840  004074  0E01               	movlw	1
  2841  004076  6F39               	movwf	_first& (0+255),b
  2842                           
  2843                           ; BSR set to: 1
  2844                           ;main.c: 44: switch(machine_state){
  2845                           
  2846                           ;main.c: 43: while(1){
  2847  004078  D018               	goto	l9382
  2848  00407A                     l9364:
  2849                           
  2850                           ;main.c: 46: UI();
  2851  00407A  EC65  F004         	call	_UI	;wreg free
  2852                           
  2853                           ;main.c: 47: break;
  2854  00407E  D015               	goto	l9382
  2855  004080                     l9366:
  2856                           
  2857                           ;main.c: 49: sort();
  2858  004080  ECDE  F028         	call	_sort	;wreg free
  2859                           
  2860                           ;main.c: 50: break;
  2861  004084  D012               	goto	l9382
  2862  004086                     l9368:
  2863                           
  2864                           ;main.c: 52: stopSignals();
  2865  004086  EC1D  F029         	call	_stopSignals	;wreg free
  2866                           
  2867                           ;main.c: 53: logRun();
  2868  00408A  ECFB  F01C         	call	_logRun	;wreg free
  2869                           
  2870                           ;main.c: 54: first = 1;
  2871  00408E  0E00               	movlw	0
  2872  004090  0101               	movlb	1	; () banked
  2873  004092  6F3A               	movwf	(_first+1)& (0+255),b
  2874  004094  0E01               	movlw	1
  2875  004096  6F39               	movwf	_first& (0+255),b
  2876                           
  2877                           ; BSR set to: 1
  2878                           ;main.c: 55: UI();
  2879  004098  EC65  F004         	call	_UI	;wreg free
  2880                           
  2881                           ;main.c: 56: break;
  2882  00409C  D006               	goto	l9382
  2883  00409E                     l9376:
  2884                           
  2885                           ;main.c: 58: Test();
  2886  00409E  EC2B  F01E         	call	_Test	;wreg free
  2887                           
  2888                           ;main.c: 59: break;
  2889  0040A2  D003               	goto	l9382
  2890  0040A4                     l9378:
  2891                           
  2892                           ;main.c: 61: stopSignals();
  2893  0040A4  EC1D  F029         	call	_stopSignals	;wreg free
  2894  0040A8                     l491:
  2895  0040A8  D7FF               	goto	l491
  2896  0040AA                     l9382:
  2897  0040AA  0100               	movlb	0	; () banked
  2898  0040AC  51FC               	movf	_machine_state& (0+255),w,b
  2899                           
  2900                           ; Switch size 1, requested type "space"
  2901                           ; Number of cases is 5, Range of values is 0 to 4
  2902                           ; switch strategies available:
  2903                           ; Name         Instructions Cycles
  2904                           ; simple_byte           16     9 (average)
  2905                           ;	Chosen strategy is simple_byte
  2906  0040AE  0A00               	xorlw	0	; case 0
  2907  0040B0  B4D8               	btfsc	status,2,c
  2908  0040B2  D7E3               	goto	l9364
  2909  0040B4  0A01               	xorlw	1	; case 1
  2910  0040B6  B4D8               	btfsc	status,2,c
  2911  0040B8  D7E3               	goto	l9366
  2912  0040BA  0A03               	xorlw	3	; case 2
  2913  0040BC  B4D8               	btfsc	status,2,c
  2914  0040BE  D7E3               	goto	l9368
  2915  0040C0  0A01               	xorlw	1	; case 3
  2916  0040C2  B4D8               	btfsc	status,2,c
  2917  0040C4  D7EC               	goto	l9376
  2918  0040C6  0A07               	xorlw	7	; case 4
  2919  0040C8  B4D8               	btfsc	status,2,c
  2920  0040CA  D7EC               	goto	l9378
  2921                           
  2922                           ; BSR set to: 0
  2923                           
  2924                           ; BSR set to: 0
  2925  0040CC  D7EE               	goto	l9382
  2926  0040CE                     __end_of_main:
  2927                           	opt stack 0
  2928                           tblptru	equ	0xFF8
  2929                           tblptrh	equ	0xFF7
  2930                           tblptrl	equ	0xFF6
  2931                           tablat	equ	0xFF5
  2932                           postinc0	equ	0xFEE
  2933                           wreg	equ	0xFE8
  2934                           postdec1	equ	0xFE5
  2935                           fsr1l	equ	0xFE1
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _stopSignals *****************
  2939 ;; Defined at:
  2940 ;;		line 70 in file "main.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;		None
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;Total ram usage:        0 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    7
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_main
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text1
  2969  00523A                     __ptext1:
  2970                           	opt stack 0
  2971  00523A                     _stopSignals:
  2972                           	opt stack 23
  2973                           
  2974                           ;main.c: 71: LATA = 0x00;
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;incstack = 0
  2978  00523A  0E00               	movlw	0
  2979  00523C  6E89               	movwf	3977,c	;volatile
  2980                           
  2981                           ;main.c: 72: LATB = 0x00;
  2982  00523E  0E00               	movlw	0
  2983  005240  6E8A               	movwf	3978,c	;volatile
  2984                           
  2985                           ;main.c: 73: LATC = 0x00;
  2986  005242  0E00               	movlw	0
  2987  005244  6E8B               	movwf	3979,c	;volatile
  2988                           
  2989                           ;main.c: 74: LATD = 0x00;
  2990  005246  0E00               	movlw	0
  2991  005248  6E8C               	movwf	3980,c	;volatile
  2992                           
  2993                           ;main.c: 75: LATE = 0x00;
  2994  00524A  0E00               	movlw	0
  2995  00524C  6E8D               	movwf	3981,c	;volatile
  2996                           
  2997                           ;main.c: 76: TMR1ON = 0;
  2998  00524E  90CD               	bcf	4045,0,c	;volatile
  2999                           
  3000                           ;main.c: 77: TMR3ON = 0;
  3001  005250  90B1               	bcf	4017,0,c	;volatile
  3002  005252  0012               	return		;funcret
  3003  005254                     __end_of_stopSignals:
  3004                           	opt stack 0
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           postinc0	equ	0xFEE
  3010                           wreg	equ	0xFE8
  3011                           postdec1	equ	0xFE5
  3012                           fsr1l	equ	0xFE1
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _sort *****************
  3016 ;; Defined at:
  3017 ;;		line 63 in file "sort.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;Total ram usage:        0 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:   12
  3038 ;; This function calls:
  3039 ;;		_Distribution
  3040 ;;		_ID
  3041 ;;		_Loading
  3042 ;; This function is called by:
  3043 ;;		_main
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text2
  3048  0051BC                     __ptext2:
  3049                           	opt stack 0
  3050  0051BC                     _sort:
  3051                           	opt stack 18
  3052                           
  3053                           ;sort.c: 64: if(machine_state == Sorting_state){
  3054                           
  3055                           ;incstack = 0
  3056  0051BC  0100               	movlb	0	; () banked
  3057  0051BE  05FC               	decf	_machine_state& (0+255),w,b
  3058  0051C0  B4D8               	btfsc	status,2,c
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;sort.c: 65: Loading();
  3062  0051C2  ECB6  F008         	call	_Loading	;wreg free
  3063                           
  3064                           ;sort.c: 66: }
  3065                           ;sort.c: 67: if(machine_state == Sorting_state){
  3066  0051C6  0100               	movlb	0	; () banked
  3067  0051C8  05FC               	decf	_machine_state& (0+255),w,b
  3068  0051CA  B4D8               	btfsc	status,2,c
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;sort.c: 68: ID();
  3072  0051CC  EC6E  F018         	call	_ID	;wreg free
  3073                           
  3074                           ;sort.c: 69: }
  3075                           ;sort.c: 70: if(machine_state == Sorting_state){
  3076  0051D0  0100               	movlb	0	; () banked
  3077  0051D2  05FC               	decf	_machine_state& (0+255),w,b
  3078  0051D4  A4D8               	btfss	status,2,c
  3079  0051D6  0012               	return	
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;sort.c: 71: Distribution();
  3083  0051D8  EC29  F01F         	call	_Distribution	;wreg free
  3084  0051DC  0012               	return	
  3085  0051DE                     __end_of_sort:
  3086                           	opt stack 0
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           postinc0	equ	0xFEE
  3092                           wreg	equ	0xFE8
  3093                           postdec1	equ	0xFE5
  3094                           fsr1l	equ	0xFE1
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _Loading *****************
  3098 ;; Defined at:
  3099 ;;		line 75 in file "sort.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  i               2   62[BANK0 ] int 
  3104 ;;  i               2   60[BANK0 ] int 
  3105 ;;  i               2   58[BANK0 ] int 
  3106 ;;  i               2   56[BANK0 ] int 
  3107 ;;  i               2   54[BANK0 ] int 
  3108 ;;  j               2   64[BANK0 ] int 
  3109 ;;  i               2   66[BANK0 ] int 
  3110 ;;  addr            2   51[BANK0 ] unsigned short 
  3111 ;;  byte1           1   53[BANK0 ] unsigned char 
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;Total ram usage:       19 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:   11
  3128 ;; This function calls:
  3129 ;;		_EEPROM_read
  3130 ;;		_EEPROM_write
  3131 ;;		_delay_ms
  3132 ;;		_getIR
  3133 ;;		_getMAG
  3134 ;;		_initGlobalVars
  3135 ;;		_initServos
  3136 ;;		_initSortTimer
  3137 ;;		_lcdInst
  3138 ;;		_readIR
  3139 ;; This function is called by:
  3140 ;;		_sort
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text3
  3145  00116C                     __ptext3:
  3146                           	opt stack 0
  3147  00116C                     _Loading:
  3148                           	opt stack 18
  3149                           
  3150                           ;sort.c: 76: if(first){
  3151                           
  3152                           ;incstack = 0
  3153  00116C  0101               	movlb	1	; () banked
  3154  00116E  5139               	movf	_first& (0+255),w,b
  3155  001170  0101               	movlb	1	; () banked
  3156  001172  113A               	iorwf	(_first+1)& (0+255),w,b
  3157  001174  B4D8               	btfsc	status,2,c
  3158  001176  D066               	goto	l7232
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;sort.c: 77: initGlobalVars();
  3162  001178  EC24  F021         	call	_initGlobalVars	;wreg free
  3163                           
  3164                           ;sort.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3165  00117C  0E01               	movlw	1
  3166  00117E  EC5C  F029         	call	_lcdInst
  3167  001182  0E68               	movlw	104
  3168  001184  0100               	movlb	0	; () banked
  3169  001186  6FB1               	movwf	??_Loading& (0+255),b
  3170  001188  0EE4               	movlw	228
  3171  00118A                     u8497:
  3172  00118A  2EE8               	decfsz	wreg,f,c
  3173  00118C  D7FE               	bra	u8497
  3174  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3175  001190  D7FC               	bra	u8497
  3176  001192  F000               	nop	
  3177                           
  3178                           ;sort.c: 79: initSortTimer();
  3179  001194  EC7A  F021         	call	_initSortTimer	;wreg free
  3180                           
  3181                           ;sort.c: 80: LATCbits.LATC5 = 1;
  3182  001198  8A8B               	bsf	3979,5,c	;volatile
  3183                           
  3184                           ;sort.c: 85: sel = EEPROM_read(0);
  3185  00119A  0E00               	movlw	0
  3186  00119C  0100               	movlb	0	; () banked
  3187  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3188  0011A0  0E00               	movlw	0
  3189  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3190  0011A4  EC2A  F029         	call	_EEPROM_read	;wreg free
  3191  0011A8  0100               	movlb	0	; () banked
  3192  0011AA  6FFD               	movwf	_sel& (0+255),b
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;sort.c: 86: unsigned short addr = 1 + 11 * sel;
  3196  0011AC  0100               	movlb	0	; () banked
  3197  0011AE  51FD               	movf	_sel& (0+255),w,b
  3198  0011B0  0D0B               	mullw	11
  3199  0011B2  0E01               	movlw	1
  3200  0011B4  24F3               	addwf	prodl,w,c
  3201  0011B6  0100               	movlb	0	; () banked
  3202  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3203  0011BA  0E00               	movlw	0
  3204  0011BC  20F4               	addwfc	prodh,w,c
  3205  0011BE  0100               	movlb	0	; () banked
  3206  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sort.c: 87: unsigned char byte1 = 0b01111111;
  3210  0011C2  0E7F               	movlw	127
  3211  0011C4  0100               	movlb	0	; () banked
  3212  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 88: EEPROM_write(addr, byte1);
  3216  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3217  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3218  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3219  0011D4  ECB5  F01E         	call	_EEPROM_write	;wreg free
  3220                           
  3221                           ;sort.c: 91: LATBbits.LATB2 = 0;
  3222  0011D8  948A               	bcf	3978,2,c	;volatile
  3223                           
  3224                           ;sort.c: 93: for(int i=0; i<46; i++){
  3225  0011DA  0E00               	movlw	0
  3226  0011DC  0100               	movlb	0	; () banked
  3227  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3228  0011E0  0E00               	movlw	0
  3229  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3230                           
  3231                           ; BSR set to: 0
  3232  0011E4  0100               	movlb	0	; () banked
  3233  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3234  0011E8  D008               	goto	l7222
  3235  0011EA  0100               	movlb	0	; () banked
  3236  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3237  0011EE  E126               	bnz	l752
  3238  0011F0  0E2E               	movlw	46
  3239  0011F2  0100               	movlb	0	; () banked
  3240  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3241  0011F6  B0D8               	btfsc	status,0,c
  3242  0011F8  D021               	goto	l752
  3243  0011FA                     l7222:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;sort.c: 94: LATBbits.LATB2 = !LATBbits.LATB2;
  3247  0011FA  B48A               	btfsc	3978,2,c	;volatile
  3248  0011FC  D004               	goto	u5560
  3249  0011FE  0100               	movlb	0	; () banked
  3250  001200  6BB1               	clrf	??_Loading& (0+255),b
  3251  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3252  001204  D002               	goto	u5578
  3253  001206                     u5560:
  3254  001206  0100               	movlb	0	; () banked
  3255  001208  6BB1               	clrf	??_Loading& (0+255),b
  3256  00120A                     u5578:
  3257  00120A  0100               	movlb	0	; () banked
  3258  00120C  47B1               	rlncf	??_Loading& (0+255),f,b
  3259  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3260  001210  508A               	movf	3978,w,c	;volatile
  3261  001212  0100               	movlb	0	; () banked
  3262  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3263  001216  0BFB               	andlw	-5
  3264  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3265  00121A  6E8A               	movwf	3978,c	;volatile
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;sort.c: 95: delay_ms(45-i);
  3269  00121C  0100               	movlb	0	; () banked
  3270  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3271  001220  0800               	sublw	0
  3272  001222  0F2D               	addlw	45
  3273  001224  EC7E  F028         	call	_delay_ms
  3274  001228  0100               	movlb	0	; () banked
  3275  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3276  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3277                           
  3278                           ; BSR set to: 0
  3279  00122E  0100               	movlb	0	; () banked
  3280  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3281  001232  D7E3               	goto	l7222
  3282  001234  0100               	movlb	0	; () banked
  3283  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3284  001238  E101               	bnz	u5580
  3285  00123A  D7DA               	goto	L1
  3286  00123C                     u5580:
  3287  00123C                     l752:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;sort.c: 96: }
  3291                           ;sort.c: 97: LATBbits.LATB2 = 1;
  3292  00123C  848A               	bsf	3978,2,c	;volatile
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;sort.c: 100: initServos();
  3296  00123E  EC47  F025         	call	_initServos	;wreg free
  3297                           
  3298                           ;sort.c: 101: }
  3299  001242  0012               	return	
  3300  001244                     l7232:
  3301                           
  3302                           ;sort.c: 102: else{
  3303                           ;sort.c: 105: if(!f_loadingNewCan){
  3304  001244  0100               	movlb	0	; () banked
  3305  001246  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3306  001248  0100               	movlb	0	; () banked
  3307  00124A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3308  00124C  A4D8               	btfss	status,2,c
  3309  00124E  D018               	goto	l7248
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;sort.c: 107: getIR();
  3313  001250  ECAC  F023         	call	_getIR	;wreg free
  3314                           
  3315                           ;sort.c: 109: if(!f_loadingNewCan){
  3316  001254  0100               	movlb	0	; () banked
  3317  001256  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3318  001258  0100               	movlb	0	; () banked
  3319  00125A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3320  00125C  B4D8               	btfsc	status,2,c
  3321  00125E  0012               	return	
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;sort.c: 113: else{
  3325                           ;sort.c: 114: count_total++;
  3326                           
  3327                           ; BSR set to: 0
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;sort.c: 111: }
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;sort.c: 110: return;
  3334  001260  0100               	movlb	0	; () banked
  3335  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3336  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;sort.c: 115: if(count_total == 12){
  3340  001266  0E0C               	movlw	12
  3341  001268  0100               	movlb	0	; () banked
  3342  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3343  00126C  0100               	movlb	0	; () banked
  3344  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3345  001270  A4D8               	btfss	status,2,c
  3346  001272  0012               	return	
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;sort.c: 116: f_lastCan = 1;
  3350  001274  0E00               	movlw	0
  3351  001276  0100               	movlb	0	; () banked
  3352  001278  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  3353  00127A  0E01               	movlw	1
  3354  00127C  6FEE               	movwf	_f_lastCan& (0+255),b
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;sort.c: 117: }
  3358                           ;sort.c: 118: }
  3359                           ;sort.c: 119: }
  3360                           
  3361                           ; BSR set to: 0
  3362  00127E  0012               	return	
  3363  001280                     l7248:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;sort.c: 122: else if(f_ID_receive){
  3367  001280  0101               	movlb	1	; () banked
  3368  001282  512F               	movf	_f_ID_receive& (0+255),w,b
  3369  001284  0101               	movlb	1	; () banked
  3370  001286  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3371  001288  B4D8               	btfsc	status,2,c
  3372  00128A  0012               	return	
  3373                           
  3374                           ; BSR set to: 1
  3375                           ;sort.c: 123: f_loadingNewCan = 0;
  3376  00128C  0E00               	movlw	0
  3377  00128E  0100               	movlb	0	; () banked
  3378  001290  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3379  001292  0E00               	movlw	0
  3380  001294  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;sort.c: 124: _delay((unsigned long)((750)*(32000000/4000.0)));
  3384  001296  0E1F               	movlw	31
  3385  001298  0100               	movlb	0	; () banked
  3386  00129A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3387  00129C  0E71               	movlw	113
  3388  00129E  0100               	movlb	0	; () banked
  3389  0012A0  6FB1               	movwf	??_Loading& (0+255),b
  3390  0012A2  0E1E               	movlw	30
  3391  0012A4                     u8507:
  3392  0012A4  2EE8               	decfsz	wreg,f,c
  3393  0012A6  D7FE               	bra	u8507
  3394  0012A8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3395  0012AA  D7FC               	bra	u8507
  3396  0012AC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3397  0012AE  D7FA               	bra	u8507
  3398  0012B0  F000               	nop	
  3399                           
  3400                           ;sort.c: 125: LATBbits.LATB2 = 0;
  3401  0012B2  948A               	bcf	3978,2,c	;volatile
  3402                           
  3403                           ;sort.c: 129: getMAG();
  3404  0012B4  ECED  F026         	call	_getMAG	;wreg free
  3405                           
  3406                           ;sort.c: 130: sensor_outputs[0] = MAG_signal;
  3407  0012B8  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3408  0012BC  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3409                           
  3410                           ;sort.c: 132: if(sensor_outputs[0]){
  3411  0012C0  0100               	movlb	0	; () banked
  3412  0012C2  51E2               	movf	_sensor_outputs& (0+255),w,b
  3413  0012C4  0100               	movlb	0	; () banked
  3414  0012C6  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3415  0012C8  B4D8               	btfsc	status,2,c
  3416  0012CA  D01D               	goto	l7274
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;sort.c: 133: for(int i = 0; i<2500; i++){
  3420  0012CC  0E00               	movlw	0
  3421  0012CE  0100               	movlb	0	; () banked
  3422  0012D0  6FB7               	movwf	(Loading@i_1148+1)& (0+255),b
  3423  0012D2  0E00               	movlw	0
  3424  0012D4  6FB6               	movwf	Loading@i_1148& (0+255),b
  3425  0012D6                     l7264:
  3426                           
  3427                           ; BSR set to: 0
  3428  0012D6  0100               	movlb	0	; () banked
  3429  0012D8  BFB7               	btfsc	(Loading@i_1148+1)& (0+255),7,b
  3430  0012DA  D008               	goto	l762
  3431  0012DC  0EC4               	movlw	196
  3432  0012DE  0100               	movlb	0	; () banked
  3433  0012E0  5DB6               	subwf	Loading@i_1148& (0+255),w,b
  3434  0012E2  0E09               	movlw	9
  3435  0012E4  0100               	movlb	0	; () banked
  3436  0012E6  59B7               	subwfb	(Loading@i_1148+1)& (0+255),w,b
  3437  0012E8  B0D8               	btfsc	status,0,c
  3438  0012EA  D02A               	goto	l7286
  3439  0012EC                     l762:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;sort.c: 134: LATAbits.LATA4 = 1;
  3443  0012EC  8889               	bsf	3977,4,c	;volatile
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;sort.c: 135: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3447  0012EE  0EC8               	movlw	200
  3448  0012F0                     u8517:
  3449  0012F0  2EE8               	decfsz	wreg,f,c
  3450  0012F2  D7FE               	bra	u8517
  3451                           
  3452                           ;sort.c: 136: LATAbits.LATA4 = 0;
  3453  0012F4  9889               	bcf	3977,4,c	;volatile
  3454                           
  3455                           ;sort.c: 137: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3456  0012F6  0E42               	movlw	66
  3457  0012F8                     u8527:
  3458  0012F8  2EE8               	decfsz	wreg,f,c
  3459  0012FA  D7FE               	bra	u8527
  3460  0012FC  D000               	nop2	
  3461  0012FE  0100               	movlb	0	; () banked
  3462  001300  4BB6               	infsnz	Loading@i_1148& (0+255),f,b
  3463  001302  2BB7               	incf	(Loading@i_1148+1)& (0+255),f,b
  3464  001304  D7E8               	goto	l7264
  3465  001306                     l7274:
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;sort.c: 140: else{
  3469                           ;sort.c: 141: for(int i = 0; i<2500; i++){
  3470  001306  0E00               	movlw	0
  3471  001308  0100               	movlb	0	; () banked
  3472  00130A  6FB9               	movwf	(Loading@i_1157+1)& (0+255),b
  3473  00130C  0E00               	movlw	0
  3474  00130E  6FB8               	movwf	Loading@i_1157& (0+255),b
  3475  001310                     l7276:
  3476                           
  3477                           ; BSR set to: 0
  3478  001310  0100               	movlb	0	; () banked
  3479  001312  BFB9               	btfsc	(Loading@i_1157+1)& (0+255),7,b
  3480  001314  D008               	goto	l765
  3481  001316  0EC4               	movlw	196
  3482  001318  0100               	movlb	0	; () banked
  3483  00131A  5DB8               	subwf	Loading@i_1157& (0+255),w,b
  3484  00131C  0E09               	movlw	9
  3485  00131E  0100               	movlb	0	; () banked
  3486  001320  59B9               	subwfb	(Loading@i_1157+1)& (0+255),w,b
  3487  001322  B0D8               	btfsc	status,0,c
  3488  001324  D00D               	goto	l7286
  3489  001326                     l765:
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3493  001326  8889               	bsf	3977,4,c	;volatile
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;sort.c: 143: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3497  001328  0E9A               	movlw	154
  3498  00132A                     u8537:
  3499  00132A  2EE8               	decfsz	wreg,f,c
  3500  00132C  D7FE               	bra	u8537
  3501  00132E  D000               	nop2	
  3502                           
  3503                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3504  001330  9889               	bcf	3977,4,c	;volatile
  3505                           
  3506                           ;sort.c: 145: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3507  001332  0E70               	movlw	112
  3508  001334                     u8547:
  3509  001334  2EE8               	decfsz	wreg,f,c
  3510  001336  D7FE               	bra	u8547
  3511  001338  0100               	movlb	0	; () banked
  3512  00133A  4BB8               	infsnz	Loading@i_1157& (0+255),f,b
  3513  00133C  2BB9               	incf	(Loading@i_1157+1)& (0+255),f,b
  3514  00133E  D7E8               	goto	l7276
  3515  001340                     l7286:
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;sort.c: 146: }
  3519                           ;sort.c: 147: }
  3520                           ;sort.c: 149: _delay((unsigned long)((350)*(32000000/4000.0)));
  3521  001340  0E0F               	movlw	15
  3522  001342  0100               	movlb	0	; () banked
  3523  001344  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3524  001346  0E35               	movlw	53
  3525  001348  0100               	movlb	0	; () banked
  3526  00134A  6FB1               	movwf	??_Loading& (0+255),b
  3527  00134C  0E51               	movlw	81
  3528  00134E                     u8557:
  3529  00134E  2EE8               	decfsz	wreg,f,c
  3530  001350  D7FE               	bra	u8557
  3531  001352  2FB1               	decfsz	??_Loading& (0+255),f,b
  3532  001354  D7FC               	bra	u8557
  3533  001356  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3534  001358  D7FA               	bra	u8557
  3535                           
  3536                           ;sort.c: 151: readIR();
  3537  00135A  ECEF  F025         	call	_readIR	;wreg free
  3538                           
  3539                           ;sort.c: 152: if(IR_signal==1){
  3540  00135E  0100               	movlb	0	; () banked
  3541  001360  05E6               	decf	_IR_signal& (0+255),w,b
  3542  001362  0100               	movlb	0	; () banked
  3543  001364  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3544  001366  A4D8               	btfss	status,2,c
  3545  001368  D147               	goto	l7404
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;sort.c: 153: _delay((unsigned long)((100)*(32000000/4000.0)));
  3549  00136A  0E05               	movlw	5
  3550  00136C  0100               	movlb	0	; () banked
  3551  00136E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3552  001370  0E0F               	movlw	15
  3553  001372  0100               	movlb	0	; () banked
  3554  001374  6FB1               	movwf	??_Loading& (0+255),b
  3555  001376  0EF1               	movlw	241
  3556  001378                     u8567:
  3557  001378  2EE8               	decfsz	wreg,f,c
  3558  00137A  D7FE               	bra	u8567
  3559  00137C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3560  00137E  D7FC               	bra	u8567
  3561  001380  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3562  001382  D7FA               	bra	u8567
  3563                           
  3564                           ;sort.c: 154: readIR();
  3565  001384  ECEF  F025         	call	_readIR	;wreg free
  3566                           
  3567                           ;sort.c: 155: if(IR_signal==1){
  3568  001388  0100               	movlb	0	; () banked
  3569  00138A  05E6               	decf	_IR_signal& (0+255),w,b
  3570  00138C  0100               	movlb	0	; () banked
  3571  00138E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3572  001390  A4D8               	btfss	status,2,c
  3573  001392  D040               	goto	l7324
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;sort.c: 156: if(sensor_outputs[0]){
  3577  001394  0100               	movlb	0	; () banked
  3578  001396  51E2               	movf	_sensor_outputs& (0+255),w,b
  3579  001398  0100               	movlb	0	; () banked
  3580  00139A  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3581  00139C  B4D8               	btfsc	status,2,c
  3582  00139E  D01D               	goto	l7312
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;sort.c: 157: for(int i = 0; i<2500; i++){
  3586  0013A0  0E00               	movlw	0
  3587  0013A2  0100               	movlb	0	; () banked
  3588  0013A4  6FBB               	movwf	(Loading@i_1159+1)& (0+255),b
  3589  0013A6  0E00               	movlw	0
  3590  0013A8  6FBA               	movwf	Loading@i_1159& (0+255),b
  3591  0013AA                     l7302:
  3592                           
  3593                           ; BSR set to: 0
  3594  0013AA  0100               	movlb	0	; () banked
  3595  0013AC  BFBB               	btfsc	(Loading@i_1159+1)& (0+255),7,b
  3596  0013AE  D008               	goto	l770
  3597  0013B0  0EC4               	movlw	196
  3598  0013B2  0100               	movlb	0	; () banked
  3599  0013B4  5DBA               	subwf	Loading@i_1159& (0+255),w,b
  3600  0013B6  0E09               	movlw	9
  3601  0013B8  0100               	movlb	0	; () banked
  3602  0013BA  59BB               	subwfb	(Loading@i_1159+1)& (0+255),w,b
  3603  0013BC  B0D8               	btfsc	status,0,c
  3604  0013BE  D02A               	goto	l7324
  3605  0013C0                     l770:
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;sort.c: 158: LATAbits.LATA4 = 1;
  3609  0013C0  8889               	bsf	3977,4,c	;volatile
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 159: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3613  0013C2  0EC8               	movlw	200
  3614  0013C4                     u8577:
  3615  0013C4  2EE8               	decfsz	wreg,f,c
  3616  0013C6  D7FE               	bra	u8577
  3617                           
  3618                           ;sort.c: 160: LATAbits.LATA4 = 0;
  3619  0013C8  9889               	bcf	3977,4,c	;volatile
  3620                           
  3621                           ;sort.c: 161: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3622  0013CA  0E42               	movlw	66
  3623  0013CC                     u8587:
  3624  0013CC  2EE8               	decfsz	wreg,f,c
  3625  0013CE  D7FE               	bra	u8587
  3626  0013D0  D000               	nop2	
  3627  0013D2  0100               	movlb	0	; () banked
  3628  0013D4  4BBA               	infsnz	Loading@i_1159& (0+255),f,b
  3629  0013D6  2BBB               	incf	(Loading@i_1159+1)& (0+255),f,b
  3630  0013D8  D7E8               	goto	l7302
  3631  0013DA                     l7312:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;sort.c: 164: else{
  3635                           ;sort.c: 165: for(int i = 0; i<2500; i++){
  3636  0013DA  0E00               	movlw	0
  3637  0013DC  0100               	movlb	0	; () banked
  3638  0013DE  6FBD               	movwf	(Loading@i_1160+1)& (0+255),b
  3639  0013E0  0E00               	movlw	0
  3640  0013E2  6FBC               	movwf	Loading@i_1160& (0+255),b
  3641  0013E4                     l7314:
  3642                           
  3643                           ; BSR set to: 0
  3644  0013E4  0100               	movlb	0	; () banked
  3645  0013E6  BFBD               	btfsc	(Loading@i_1160+1)& (0+255),7,b
  3646  0013E8  D008               	goto	l773
  3647  0013EA  0EC4               	movlw	196
  3648  0013EC  0100               	movlb	0	; () banked
  3649  0013EE  5DBC               	subwf	Loading@i_1160& (0+255),w,b
  3650  0013F0  0E09               	movlw	9
  3651  0013F2  0100               	movlb	0	; () banked
  3652  0013F4  59BD               	subwfb	(Loading@i_1160+1)& (0+255),w,b
  3653  0013F6  B0D8               	btfsc	status,0,c
  3654  0013F8  D00D               	goto	l7324
  3655  0013FA                     l773:
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3659  0013FA  8889               	bsf	3977,4,c	;volatile
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 167: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3663  0013FC  0E9A               	movlw	154
  3664  0013FE                     u8597:
  3665  0013FE  2EE8               	decfsz	wreg,f,c
  3666  001400  D7FE               	bra	u8597
  3667  001402  D000               	nop2	
  3668                           
  3669                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3670  001404  9889               	bcf	3977,4,c	;volatile
  3671                           
  3672                           ;sort.c: 169: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3673  001406  0E70               	movlw	112
  3674  001408                     u8607:
  3675  001408  2EE8               	decfsz	wreg,f,c
  3676  00140A  D7FE               	bra	u8607
  3677  00140C  0100               	movlb	0	; () banked
  3678  00140E  4BBC               	infsnz	Loading@i_1160& (0+255),f,b
  3679  001410  2BBD               	incf	(Loading@i_1160+1)& (0+255),f,b
  3680  001412  D7E8               	goto	l7314
  3681  001414                     l7324:
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;sort.c: 170: }
  3685                           ;sort.c: 171: }
  3686                           ;sort.c: 172: }
  3687                           ;sort.c: 174: _delay((unsigned long)((350)*(32000000/4000.0)));
  3688  001414  0E0F               	movlw	15
  3689  001416  0100               	movlb	0	; () banked
  3690  001418  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3691  00141A  0E35               	movlw	53
  3692  00141C  0100               	movlb	0	; () banked
  3693  00141E  6FB1               	movwf	??_Loading& (0+255),b
  3694  001420  0E51               	movlw	81
  3695  001422                     u8617:
  3696  001422  2EE8               	decfsz	wreg,f,c
  3697  001424  D7FE               	bra	u8617
  3698  001426  2FB1               	decfsz	??_Loading& (0+255),f,b
  3699  001428  D7FC               	bra	u8617
  3700  00142A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3701  00142C  D7FA               	bra	u8617
  3702                           
  3703                           ;sort.c: 176: int j = 1;
  3704  00142E  0E00               	movlw	0
  3705  001430  0100               	movlb	0	; () banked
  3706  001432  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3707  001434  0E01               	movlw	1
  3708  001436  6FC0               	movwf	Loading@j& (0+255),b
  3709                           
  3710                           ;sort.c: 177: while(IR_signal == 1){
  3711  001438  D0D8               	goto	l7402
  3712  00143A                     l7328:
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 178: readIR();
  3716  00143A  ECEF  F025         	call	_readIR	;wreg free
  3717                           
  3718                           ;sort.c: 179: if(j == 10){
  3719  00143E  0E0A               	movlw	10
  3720  001440  0100               	movlb	0	; () banked
  3721  001442  19C0               	xorwf	Loading@j& (0+255),w,b
  3722  001444  0100               	movlb	0	; () banked
  3723  001446  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3724  001448  A4D8               	btfss	status,2,c
  3725  00144A  D016               	goto	l7336
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;sort.c: 180: LATBbits.LATB2 = !LATBbits.LATB2;
  3729  00144C  B48A               	btfsc	3978,2,c	;volatile
  3730  00144E  D004               	goto	u5760
  3731  001450  0100               	movlb	0	; () banked
  3732  001452  6BB1               	clrf	??_Loading& (0+255),b
  3733  001454  2BB1               	incf	??_Loading& (0+255),f,b
  3734  001456  D002               	goto	u5778
  3735  001458                     u5760:
  3736  001458  0100               	movlb	0	; () banked
  3737  00145A  6BB1               	clrf	??_Loading& (0+255),b
  3738  00145C                     u5778:
  3739  00145C  0100               	movlb	0	; () banked
  3740  00145E  47B1               	rlncf	??_Loading& (0+255),f,b
  3741  001460  47B1               	rlncf	??_Loading& (0+255),f,b
  3742  001462  508A               	movf	3978,w,c	;volatile
  3743  001464  0100               	movlb	0	; () banked
  3744  001466  19B1               	xorwf	??_Loading& (0+255),w,b
  3745  001468  0BFB               	andlw	-5
  3746  00146A  19B1               	xorwf	??_Loading& (0+255),w,b
  3747  00146C  6E8A               	movwf	3978,c	;volatile
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;sort.c: 181: j = 0;
  3751  00146E  0E00               	movlw	0
  3752  001470  0100               	movlb	0	; () banked
  3753  001472  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3754  001474  0E00               	movlw	0
  3755  001476  6FC0               	movwf	Loading@j& (0+255),b
  3756  001478                     l7336:
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;sort.c: 182: }
  3760                           ;sort.c: 183: if(IR_signal==1){
  3761  001478  0100               	movlb	0	; () banked
  3762  00147A  05E6               	decf	_IR_signal& (0+255),w,b
  3763  00147C  0100               	movlb	0	; () banked
  3764  00147E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3765  001480  A4D8               	btfss	status,2,c
  3766  001482  D098               	goto	l7390
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;sort.c: 184: _delay((unsigned long)((350)*(32000000/4000.0)));
  3770  001484  0E0F               	movlw	15
  3771  001486  0100               	movlb	0	; () banked
  3772  001488  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3773  00148A  0E35               	movlw	53
  3774  00148C  0100               	movlb	0	; () banked
  3775  00148E  6FB1               	movwf	??_Loading& (0+255),b
  3776  001490  0E51               	movlw	81
  3777  001492                     u8627:
  3778  001492  2EE8               	decfsz	wreg,f,c
  3779  001494  D7FE               	bra	u8627
  3780  001496  2FB1               	decfsz	??_Loading& (0+255),f,b
  3781  001498  D7FC               	bra	u8627
  3782  00149A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3783  00149C  D7FA               	bra	u8627
  3784                           
  3785                           ;sort.c: 185: readIR();
  3786  00149E  ECEF  F025         	call	_readIR	;wreg free
  3787                           
  3788                           ;sort.c: 186: if(IR_signal==1){
  3789  0014A2  0100               	movlb	0	; () banked
  3790  0014A4  05E6               	decf	_IR_signal& (0+255),w,b
  3791  0014A6  0100               	movlb	0	; () banked
  3792  0014A8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3793  0014AA  A4D8               	btfss	status,2,c
  3794  0014AC  D07F               	goto	l779
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;sort.c: 187: if(sensor_outputs[0]){
  3798  0014AE  0100               	movlb	0	; () banked
  3799  0014B0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3800  0014B2  0100               	movlb	0	; () banked
  3801  0014B4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3802  0014B6  B4D8               	btfsc	status,2,c
  3803  0014B8  D011               	goto	l7352
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;sort.c: 188: LATAbits.LATA4 = 1;
  3807  0014BA  8889               	bsf	3977,4,c	;volatile
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;sort.c: 189: _delay((unsigned long)((250)*(32000000/4000.0)));
  3811  0014BC  0E0B               	movlw	11
  3812  0014BE  0100               	movlb	0	; () banked
  3813  0014C0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3814  0014C2  0E26               	movlw	38
  3815  0014C4  0100               	movlb	0	; () banked
  3816  0014C6  6FB1               	movwf	??_Loading& (0+255),b
  3817  0014C8  0E5D               	movlw	93
  3818  0014CA                     u8637:
  3819  0014CA  2EE8               	decfsz	wreg,f,c
  3820  0014CC  D7FE               	bra	u8637
  3821  0014CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3822  0014D0  D7FC               	bra	u8637
  3823  0014D2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3824  0014D4  D7FA               	bra	u8637
  3825  0014D6  D000               	nop2	
  3826                           
  3827                           ;sort.c: 190: LATAbits.LATA4 = 0;
  3828  0014D8  9889               	bcf	3977,4,c	;volatile
  3829                           
  3830                           ;sort.c: 191: }
  3831  0014DA  D068               	goto	l779
  3832  0014DC                     l7352:
  3833                           
  3834                           ;sort.c: 192: else{
  3835                           ;sort.c: 193: for(int i = 0; i<2500; i++){
  3836  0014DC  0E00               	movlw	0
  3837  0014DE  0100               	movlb	0	; () banked
  3838  0014E0  6FBF               	movwf	(Loading@i_1162+1)& (0+255),b
  3839  0014E2  0E00               	movlw	0
  3840  0014E4  6FBE               	movwf	Loading@i_1162& (0+255),b
  3841  0014E6                     l7354:
  3842                           
  3843                           ; BSR set to: 0
  3844  0014E6  0100               	movlb	0	; () banked
  3845  0014E8  BFBF               	btfsc	(Loading@i_1162+1)& (0+255),7,b
  3846  0014EA  D041               	goto	l7382
  3847  0014EC  0EC4               	movlw	196
  3848  0014EE  0100               	movlb	0	; () banked
  3849  0014F0  5DBE               	subwf	Loading@i_1162& (0+255),w,b
  3850  0014F2  0E09               	movlw	9
  3851  0014F4  0100               	movlb	0	; () banked
  3852  0014F6  59BF               	subwfb	(Loading@i_1162+1)& (0+255),w,b
  3853  0014F8  B0D8               	btfsc	status,0,c
  3854  0014FA  D058               	goto	l779
  3855  0014FC  D038               	goto	l7382
  3856  0014FE                     l785:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;sort.c: 196: LATAbits.LATA4 = 1;
  3860  0014FE  8889               	bsf	3977,4,c	;volatile
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;sort.c: 197: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3864  001500  0EC8               	movlw	200
  3865  001502                     u8647:
  3866  001502  2EE8               	decfsz	wreg,f,c
  3867  001504  D7FE               	bra	u8647
  3868                           
  3869                           ;sort.c: 198: LATAbits.LATA4 = 0;
  3870  001506  9889               	bcf	3977,4,c	;volatile
  3871                           
  3872                           ;sort.c: 199: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3873  001508  0E42               	movlw	66
  3874  00150A                     u8657:
  3875  00150A  2EE8               	decfsz	wreg,f,c
  3876  00150C  D7FE               	bra	u8657
  3877  00150E  D01C               	goto	L2
  3878  001510                     l787:
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;sort.c: 202: LATAbits.LATA4 = 1;
  3882  001510  8889               	bsf	3977,4,c	;volatile
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;sort.c: 203: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3886  001512  0ED5               	movlw	213
  3887  001514                     u8667:
  3888  001514  2EE8               	decfsz	wreg,f,c
  3889  001516  D7FE               	bra	u8667
  3890  001518  F000               	nop	
  3891                           
  3892                           ;sort.c: 204: LATAbits.LATA4 = 0;
  3893  00151A  9889               	bcf	3977,4,c	;volatile
  3894                           
  3895                           ;sort.c: 205: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3896  00151C  0E35               	movlw	53
  3897  00151E                     u8677:
  3898  00151E  2EE8               	decfsz	wreg,f,c
  3899  001520  D7FE               	bra	u8677
  3900  001522  D01D               	goto	L3
  3901  001524                     l788:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;sort.c: 208: LATAbits.LATA4 = 1;
  3905  001524  8889               	bsf	3977,4,c	;volatile
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;sort.c: 209: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3909  001526  0EE2               	movlw	226
  3910  001528                     u8687:
  3911  001528  2EE8               	decfsz	wreg,f,c
  3912  00152A  D7FE               	bra	u8687
  3913  00152C  D000               	nop2	
  3914                           
  3915                           ;sort.c: 210: LATAbits.LATA4 = 0;
  3916  00152E  9889               	bcf	3977,4,c	;volatile
  3917                           
  3918                           ;sort.c: 211: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3919  001530  0E28               	movlw	40
  3920  001532                     u8697:
  3921  001532  2EE8               	decfsz	wreg,f,c
  3922  001534  D7FE               	bra	u8697
  3923                           
  3924                           ;sort.c: 212: break;
  3925  001536  D036               	goto	l7384
  3926  001538                     l789:
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;sort.c: 214: LATAbits.LATA4 = 1;
  3930  001538  8889               	bsf	3977,4,c	;volatile
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;sort.c: 215: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3934  00153A  0EF0               	movlw	240
  3935  00153C                     u8707:
  3936  00153C  2EE8               	decfsz	wreg,f,c
  3937  00153E  D7FE               	bra	u8707
  3938                           
  3939                           ;sort.c: 216: LATAbits.LATA4 = 0;
  3940  001540  9889               	bcf	3977,4,c	;volatile
  3941                           
  3942                           ;sort.c: 217: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3943  001542  0E1A               	movlw	26
  3944  001544                     u8717:
  3945  001544  2EE8               	decfsz	wreg,f,c
  3946  001546  D7FE               	bra	u8717
  3947  001548                     L2:
  3948  001548  D000               	nop2	
  3949                           
  3950                           ;sort.c: 218: break;
  3951  00154A  D02C               	goto	l7384
  3952  00154C                     l790:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;sort.c: 220: LATAbits.LATA4 = 1;
  3956  00154C  8889               	bsf	3977,4,c	;volatile
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;sort.c: 221: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3960  00154E  0EFD               	movlw	253
  3961  001550                     u8727:
  3962  001550  2EE8               	decfsz	wreg,f,c
  3963  001552  D7FE               	bra	u8727
  3964  001554  F000               	nop	
  3965                           
  3966                           ;sort.c: 222: LATAbits.LATA4 = 0;
  3967  001556  9889               	bcf	3977,4,c	;volatile
  3968                           
  3969                           ;sort.c: 223: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3970  001558  0E0D               	movlw	13
  3971  00155A                     u8737:
  3972  00155A  2EE8               	decfsz	wreg,f,c
  3973  00155C  D7FE               	bra	u8737
  3974  00155E                     L3:
  3975  00155E  F000               	nop	
  3976                           
  3977                           ;sort.c: 224: break;
  3978  001560  D021               	goto	l7384
  3979  001562                     l791:
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;sort.c: 226: LATAbits.LATA4 = 1;
  3983  001562  8889               	bsf	3977,4,c	;volatile
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;sort.c: 227: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3987  001564  0EA0               	movlw	160
  3988  001566                     u8747:
  3989  001566  D000               	nop2	
  3990  001568  2EE8               	decfsz	wreg,f,c
  3991  00156A  D7FD               	bra	u8747
  3992                           
  3993                           ;sort.c: 229: }
  3994                           
  3995                           ;sort.c: 228: break;
  3996  00156C  D01B               	goto	l7384
  3997  00156E                     l7382:
  3998  00156E  C0C0  F0B1         	movff	Loading@j,??_Loading
  3999  001572  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4000                           
  4001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4002                           ; Switch size 1, requested type "space"
  4003                           ; Number of cases is 1, Range of values is 0 to 0
  4004                           ; switch strategies available:
  4005                           ; Name         Instructions Cycles
  4006                           ; simple_byte            4     3 (average)
  4007                           ;	Chosen strategy is simple_byte
  4008  001576  0100               	movlb	0	; () banked
  4009  001578  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4010  00157A  0A00               	xorlw	0	; case 0
  4011  00157C  A4D8               	btfss	status,2,c
  4012  00157E  D7F1               	goto	l791
  4013                           
  4014                           ; BSR set to: 0
  4015                           ; Switch size 1, requested type "space"
  4016                           ; Number of cases is 5, Range of values is 1 to 5
  4017                           ; switch strategies available:
  4018                           ; Name         Instructions Cycles
  4019                           ; simple_byte           16     9 (average)
  4020                           ;	Chosen strategy is simple_byte
  4021  001580  0100               	movlb	0	; () banked
  4022  001582  51B1               	movf	??_Loading& (0+255),w,b
  4023  001584  0A01               	xorlw	1	; case 1
  4024  001586  B4D8               	btfsc	status,2,c
  4025  001588  D7BA               	goto	l785
  4026  00158A  0A03               	xorlw	3	; case 2
  4027  00158C  B4D8               	btfsc	status,2,c
  4028  00158E  D7C0               	goto	l787
  4029  001590  0A01               	xorlw	1	; case 3
  4030  001592  B4D8               	btfsc	status,2,c
  4031  001594  D7C7               	goto	l788
  4032  001596  0A07               	xorlw	7	; case 4
  4033  001598  B4D8               	btfsc	status,2,c
  4034  00159A  D7CE               	goto	l789
  4035  00159C  0A01               	xorlw	1	; case 5
  4036  00159E  B4D8               	btfsc	status,2,c
  4037  0015A0  D7D5               	goto	l790
  4038  0015A2  D7DF               	goto	l791
  4039  0015A4                     l7384:
  4040  0015A4  0100               	movlb	0	; () banked
  4041  0015A6  4BBE               	infsnz	Loading@i_1162& (0+255),f,b
  4042  0015A8  2BBF               	incf	(Loading@i_1162+1)& (0+255),f,b
  4043  0015AA  D79D               	goto	l7354
  4044  0015AC                     l779:
  4045                           
  4046                           ;sort.c: 230: }
  4047                           ;sort.c: 231: }
  4048                           ;sort.c: 232: }
  4049                           ;sort.c: 233: LATAbits.LATA4 = 0;
  4050  0015AC  9889               	bcf	3977,4,c	;volatile
  4051                           
  4052                           ;sort.c: 234: j++;
  4053  0015AE  0100               	movlb	0	; () banked
  4054  0015B0  4BC0               	infsnz	Loading@j& (0+255),f,b
  4055  0015B2  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4056  0015B4                     l7390:
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;sort.c: 235: }
  4060                           ;sort.c: 237: if(!IR_signal){
  4061  0015B4  0100               	movlb	0	; () banked
  4062  0015B6  51E6               	movf	_IR_signal& (0+255),w,b
  4063  0015B8  0100               	movlb	0	; () banked
  4064  0015BA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4065  0015BC  A4D8               	btfss	status,2,c
  4066  0015BE  D015               	goto	l7402
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;sort.c: 238: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4070  0015C0  0E29               	movlw	41
  4071  0015C2  0100               	movlb	0	; () banked
  4072  0015C4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4073  0015C6  0E96               	movlw	150
  4074  0015C8  0100               	movlb	0	; () banked
  4075  0015CA  6FB1               	movwf	??_Loading& (0+255),b
  4076  0015CC  0E7F               	movlw	127
  4077  0015CE                     u8757:
  4078  0015CE  2EE8               	decfsz	wreg,f,c
  4079  0015D0  D7FE               	bra	u8757
  4080  0015D2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4081  0015D4  D7FC               	bra	u8757
  4082  0015D6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4083  0015D8  D7FA               	bra	u8757
  4084                           
  4085                           ;sort.c: 239: readIR();
  4086  0015DA  ECEF  F025         	call	_readIR	;wreg free
  4087                           
  4088                           ;sort.c: 240: if(IR_signal==1){
  4089  0015DE  0100               	movlb	0	; () banked
  4090  0015E0  05E6               	decf	_IR_signal& (0+255),w,b
  4091  0015E2  0100               	movlb	0	; () banked
  4092  0015E4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4093  0015E6  A4D8               	btfss	status,2,c
  4094  0015E8  D006               	goto	l795
  4095  0015EA                     l7402:
  4096                           
  4097                           ; BSR set to: 0
  4098  0015EA  0100               	movlb	0	; () banked
  4099  0015EC  05E6               	decf	_IR_signal& (0+255),w,b
  4100  0015EE  0100               	movlb	0	; () banked
  4101  0015F0  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4102  0015F2  B4D8               	btfsc	status,2,c
  4103  0015F4  D722               	goto	l7328
  4104  0015F6                     l795:
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;sort.c: 245: }
  4108                           ;sort.c: 246: }
  4109                           ;sort.c: 247: }
  4110                           ;sort.c: 248: LATBbits.LATB2 = 0;
  4111  0015F6  948A               	bcf	3978,2,c	;volatile
  4112  0015F8                     l7404:
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;sort.c: 249: }
  4116                           ;sort.c: 250: f_can_coming_to_ID = 1;
  4117  0015F8  0E00               	movlw	0
  4118  0015FA  0101               	movlb	1	; () banked
  4119  0015FC  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4120  0015FE  0E01               	movlw	1
  4121  001600  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4122                           
  4123                           ; BSR set to: 1
  4124                           
  4125                           ; BSR set to: 1
  4126  001602  0012               	return	
  4127  001604                     __end_of_Loading:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           fsr1l	equ	0xFE1
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function _initSortTimer *****************
  4142 ;; Defined at:
  4143 ;;		line 392 in file "sort.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  i               2    8[BANK0 ] int 
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      void 
  4150 ;; Registers used:
  4151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;Total ram usage:        5 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:   10
  4164 ;; This function calls:
  4165 ;;		_getRTC
  4166 ;; This function is called by:
  4167 ;;		_Loading
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text4
  4172  0042F4                     __ptext4:
  4173                           	opt stack 0
  4174  0042F4                     _initSortTimer:
  4175                           	opt stack 18
  4176                           
  4177                           ;sort.c: 394: getRTC();
  4178                           
  4179                           ;incstack = 0
  4180  0042F4  EC66  F022         	call	_getRTC	;wreg free
  4181                           
  4182                           ;sort.c: 395: for(int i = 0; i < 7; i++){
  4183  0042F8  0E00               	movlw	0
  4184  0042FA  0100               	movlb	0	; () banked
  4185  0042FC  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4186  0042FE  0E00               	movlw	0
  4187  004300  6F88               	movwf	initSortTimer@i& (0+255),b
  4188  004302                     l6806:
  4189                           
  4190                           ; BSR set to: 0
  4191  004302  0100               	movlb	0	; () banked
  4192  004304  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4193  004306  D008               	goto	l6810
  4194  004308  0100               	movlb	0	; () banked
  4195  00430A  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4196  00430C  E140               	bnz	l6816
  4197  00430E  0E07               	movlw	7
  4198  004310  0100               	movlb	0	; () banked
  4199  004312  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4200  004314  B0D8               	btfsc	status,0,c
  4201  004316  D03B               	goto	l6816
  4202  004318                     l6810:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 396: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4206  004318  0E1C               	movlw	low _time
  4207  00431A  0100               	movlb	0	; () banked
  4208  00431C  2588               	addwf	initSortTimer@i& (0+255),w,b
  4209  00431E  6ED9               	movwf	fsr2l,c
  4210  004320  0E01               	movlw	high _time
  4211  004322  0100               	movlb	0	; () banked
  4212  004324  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4213  004326  6EDA               	movwf	fsr2h,c
  4214  004328  50DF               	movf	indf2,w,c
  4215  00432A  0100               	movlb	0	; () banked
  4216  00432C  6F85               	movwf	??_initSortTimer& (0+255),b
  4217  00432E  0100               	movlb	0	; () banked
  4218  004330  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4219  004332  0E0F               	movlw	15
  4220  004334  1785               	andwf	??_initSortTimer& (0+255),f,b
  4221  004336  0E0F               	movlw	15
  4222  004338  0100               	movlb	0	; () banked
  4223  00433A  1785               	andwf	??_initSortTimer& (0+255),f,b
  4224  00433C  0100               	movlb	0	; () banked
  4225  00433E  5185               	movf	??_initSortTimer& (0+255),w,b
  4226  004340  0D0A               	mullw	10
  4227  004342  0E1C               	movlw	low _time
  4228  004344  0100               	movlb	0	; () banked
  4229  004346  2588               	addwf	initSortTimer@i& (0+255),w,b
  4230  004348  6ED9               	movwf	fsr2l,c
  4231  00434A  0E01               	movlw	high _time
  4232  00434C  0100               	movlb	0	; () banked
  4233  00434E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4234  004350  6EDA               	movwf	fsr2h,c
  4235  004352  50DF               	movf	indf2,w,c
  4236  004354  0B0F               	andlw	15
  4237  004356  0100               	movlb	0	; () banked
  4238  004358  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4239  00435A  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4240  00435C  50F3               	movf	prodl,w,c
  4241  00435E  0100               	movlb	0	; () banked
  4242  004360  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4243  004362  50F4               	movf	prodh,w,c
  4244  004364  0100               	movlb	0	; () banked
  4245  004366  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4246  004368  90D8               	bcf	status,0,c
  4247  00436A  0100               	movlb	0	; () banked
  4248  00436C  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4249  00436E  6ED9               	movwf	fsr2l,c
  4250  004370  0100               	movlb	0	; () banked
  4251  004372  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4252  004374  6EDA               	movwf	fsr2h,c
  4253  004376  0E0E               	movlw	low _startTime
  4254  004378  26D9               	addwf	fsr2l,f,c
  4255  00437A  0E01               	movlw	high _startTime
  4256  00437C  22DA               	addwfc	fsr2h,f,c
  4257  00437E  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4258  004382  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4259                           
  4260                           ; BSR set to: 0
  4261  004386  0100               	movlb	0	; () banked
  4262  004388  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4263  00438A  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4264  00438C  D7BA               	goto	l6806
  4265  00438E                     l6816:
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;sort.c: 397: }
  4269                           ;sort.c: 399: T0CON = 0b00010111;
  4270  00438E  0E17               	movlw	23
  4271  004390  6ED5               	movwf	4053,c	;volatile
  4272                           
  4273                           ;sort.c: 408: TMR0H = 0b10000101;
  4274  004392  0E85               	movlw	133
  4275  004394  6ED7               	movwf	4055,c	;volatile
  4276                           
  4277                           ;sort.c: 409: TMR0L = 0b11101110;
  4278  004396  0EEE               	movlw	238
  4279  004398  6ED6               	movwf	4054,c	;volatile
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;sort.c: 410: TMR0ON = 1;
  4283  00439A  8ED5               	bsf	4053,7,c	;volatile
  4284                           
  4285                           ; BSR set to: 0
  4286  00439C  0012               	return		;funcret
  4287  00439E                     __end_of_initSortTimer:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           postdec1	equ	0xFE5
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _initGlobalVars *****************
  4307 ;; Defined at:
  4308 ;;		line 362 in file "sort.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        0 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    7
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_Loading
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text5
  4337  004248                     __ptext5:
  4338                           	opt stack 0
  4339  004248                     _initGlobalVars:
  4340                           	opt stack 21
  4341                           
  4342                           ;sort.c: 364: first = 0;
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;incstack = 0
  4346  004248  0E00               	movlw	0
  4347  00424A  0101               	movlb	1	; () banked
  4348  00424C  6F3A               	movwf	(_first+1)& (0+255),b
  4349  00424E  0E00               	movlw	0
  4350  004250  6F39               	movwf	_first& (0+255),b
  4351                           
  4352                           ;sort.c: 367: f_loadingNewCan = 0;
  4353  004252  0E00               	movlw	0
  4354  004254  0100               	movlb	0	; () banked
  4355  004256  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4356  004258  0E00               	movlw	0
  4357  00425A  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4358                           
  4359                           ;sort.c: 368: f_lastCan = 0;
  4360  00425C  0E00               	movlw	0
  4361  00425E  0100               	movlb	0	; () banked
  4362  004260  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  4363  004262  0E00               	movlw	0
  4364  004264  6FEE               	movwf	_f_lastCan& (0+255),b
  4365                           
  4366                           ;sort.c: 369: f_ID_receive = 1;
  4367  004266  0E00               	movlw	0
  4368  004268  0101               	movlb	1	; () banked
  4369  00426A  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4370  00426C  0E01               	movlw	1
  4371  00426E  6F2F               	movwf	_f_ID_receive& (0+255),b
  4372                           
  4373                           ;sort.c: 370: f_can_coming_to_ID = 0;
  4374  004270  0E00               	movlw	0
  4375  004272  0101               	movlb	1	; () banked
  4376  004274  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4377  004276  0E00               	movlw	0
  4378  004278  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4379                           
  4380                           ;sort.c: 371: f_can_coming_to_distribution = 0;
  4381  00427A  0E00               	movlw	0
  4382  00427C  0101               	movlb	1	; () banked
  4383  00427E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4384  004280  0E00               	movlw	0
  4385  004282  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4386                           
  4387                           ;sort.c: 372: f_can_distributed = 1;
  4388  004284  0E00               	movlw	0
  4389  004286  0101               	movlb	1	; () banked
  4390  004288  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4391  00428A  0E01               	movlw	1
  4392  00428C  6F35               	movwf	_f_can_distributed& (0+255),b
  4393                           
  4394                           ;sort.c: 373: f_most_recent_sort_time = 0;
  4395  00428E  0E00               	movlw	0
  4396  004290  0101               	movlb	1	; () banked
  4397  004292  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4398  004294  0E00               	movlw	0
  4399  004296  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4400                           
  4401                           ;sort.c: 376: count_total = 0;
  4402  004298  0E00               	movlw	0
  4403  00429A  0100               	movlb	0	; () banked
  4404  00429C  6FFF               	movwf	(_count_total+1)& (0+255),b
  4405  00429E  0E00               	movlw	0
  4406  0042A0  6FFE               	movwf	_count_total& (0+255),b
  4407                           
  4408                           ;sort.c: 377: count_pop_no_tab = 0;
  4409  0042A2  0E00               	movlw	0
  4410  0042A4  0101               	movlb	1	; () banked
  4411  0042A6  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4412  0042A8  0E00               	movlw	0
  4413  0042AA  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4414                           
  4415                           ;sort.c: 378: count_pop_w_tab = 0;
  4416  0042AC  0E00               	movlw	0
  4417  0042AE  0101               	movlb	1	; () banked
  4418  0042B0  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4419  0042B2  0E00               	movlw	0
  4420  0042B4  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4421                           
  4422                           ;sort.c: 379: count_can_w_lab = 0;
  4423  0042B6  0E00               	movlw	0
  4424  0042B8  0101               	movlb	1	; () banked
  4425  0042BA  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4426  0042BC  0E00               	movlw	0
  4427  0042BE  6F25               	movwf	_count_can_w_lab& (0+255),b
  4428                           
  4429                           ;sort.c: 380: count_can_no_lab = 0;
  4430  0042C0  0E00               	movlw	0
  4431  0042C2  0101               	movlb	1	; () banked
  4432  0042C4  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4433  0042C6  0E00               	movlw	0
  4434  0042C8  6F23               	movwf	_count_can_no_lab& (0+255),b
  4435                           
  4436                           ;sort.c: 383: most_recent_sort_time = 999;
  4437  0042CA  0E03               	movlw	3
  4438  0042CC  6E6E               	movwf	_most_recent_sort_time+1,c
  4439  0042CE  0EE7               	movlw	231
  4440  0042D0  6E6D               	movwf	_most_recent_sort_time,c
  4441                           
  4442                           ;sort.c: 386: servo_timer_counter = 0;
  4443  0042D2  0E00               	movlw	0
  4444  0042D4  6E72               	movwf	_servo_timer_counter+1,c	;volatile
  4445  0042D6  0E00               	movlw	0
  4446  0042D8  6E71               	movwf	_servo_timer_counter,c	;volatile
  4447                           
  4448                           ;sort.c: 387: servo_timer_target = 9999;
  4449  0042DA  0E27               	movlw	39
  4450  0042DC  6E74               	movwf	_servo_timer_target+1,c	;volatile
  4451  0042DE  0E0F               	movlw	15
  4452  0042E0  6E73               	movwf	_servo_timer_target,c	;volatile
  4453                           
  4454                           ; BSR set to: 1
  4455                           ;sort.c: 388: pan_servo_state = -1;
  4456  0042E2  686F               	setf	_pan_servo_state,c	;volatile
  4457  0042E4  6870               	setf	_pan_servo_state+1,c	;volatile
  4458                           
  4459                           ; BSR set to: 1
  4460                           ;sort.c: 389: tilt_servo_state = -1;
  4461  0042E6  6875               	setf	_tilt_servo_state,c	;volatile
  4462  0042E8  6876               	setf	_tilt_servo_state+1,c	;volatile
  4463                           
  4464                           ;sort.c: 390: f_panning_to_bin = 0;
  4465  0042EA  0E00               	movlw	0
  4466  0042EC  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4467  0042EE  0E00               	movlw	0
  4468  0042F0  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4469                           
  4470                           ; BSR set to: 1
  4471  0042F2  0012               	return		;funcret
  4472  0042F4                     __end_of_initGlobalVars:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           prodh	equ	0xFF4
  4479                           prodl	equ	0xFF3
  4480                           postinc0	equ	0xFEE
  4481                           wreg	equ	0xFE8
  4482                           postdec1	equ	0xFE5
  4483                           fsr1l	equ	0xFE1
  4484                           indf2	equ	0xFDF
  4485                           postinc2	equ	0xFDE
  4486                           postdec2	equ	0xFDD
  4487                           fsr2h	equ	0xFDA
  4488                           fsr2l	equ	0xFD9
  4489                           status	equ	0xFD8
  4490                           
  4491 ;; *************** function _getMAG *****************
  4492 ;; Defined at:
  4493 ;;		line 480 in file "sort.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;		None
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;		None
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;Total ram usage:        2 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    9
  4514 ;; This function calls:
  4515 ;;		_readMAG
  4516 ;; This function is called by:
  4517 ;;		_Loading
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text6
  4522  004DDA                     __ptext6:
  4523                           	opt stack 0
  4524  004DDA                     _getMAG:
  4525                           	opt stack 19
  4526                           
  4527                           ;sort.c: 481: readMAG();
  4528                           
  4529                           ; BSR set to: 1
  4530                           ;incstack = 0
  4531  004DDA  EC15  F026         	call	_readMAG	;wreg free
  4532                           
  4533                           ;sort.c: 483: if(MAG_signal==1){
  4534  004DDE  0100               	movlb	0	; () banked
  4535  004DE0  05E8               	decf	_MAG_signal& (0+255),w,b
  4536  004DE2  0100               	movlb	0	; () banked
  4537  004DE4  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4538  004DE6  A4D8               	btfss	status,2,c
  4539  004DE8  0012               	return	
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;sort.c: 484: _delay((unsigned long)((500)*(32000000/4000.0)));
  4543  004DEA  0E15               	movlw	21
  4544  004DEC  0100               	movlb	0	; () banked
  4545  004DEE  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4546  004DF0  0E4B               	movlw	75
  4547  004DF2  0100               	movlb	0	; () banked
  4548  004DF4  6F86               	movwf	??_getMAG& (0+255),b
  4549  004DF6  0EBE               	movlw	190
  4550  004DF8                     u8767:
  4551  004DF8  2EE8               	decfsz	wreg,f,c
  4552  004DFA  D7FE               	bra	u8767
  4553  004DFC  2F86               	decfsz	??_getMAG& (0+255),f,b
  4554  004DFE  D7FC               	bra	u8767
  4555  004E00  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4556  004E02  D7FA               	bra	u8767
  4557  004E04  F000               	nop	
  4558                           
  4559                           ;sort.c: 485: readMAG();
  4560  004E06  EC15  F026         	call	_readMAG	;wreg free
  4561  004E0A  0012               	return	
  4562  004E0C                     __end_of_getMAG:
  4563                           	opt stack 0
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           postdec1	equ	0xFE5
  4573                           fsr1l	equ	0xFE1
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _getIR *****************
  4582 ;; Defined at:
  4583 ;;		line 464 in file "sort.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;		None
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  i               2    7[BANK0 ] int 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;Total ram usage:        3 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    9
  4604 ;; This function calls:
  4605 ;;		_readIR
  4606 ;; This function is called by:
  4607 ;;		_Loading
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text7
  4612  004758                     __ptext7:
  4613                           	opt stack 0
  4614  004758                     _getIR:
  4615                           	opt stack 19
  4616                           
  4617                           ;sort.c: 465: readIR();
  4618                           
  4619                           ;incstack = 0
  4620  004758  ECEF  F025         	call	_readIR	;wreg free
  4621                           
  4622                           ;sort.c: 466: for(int i = 0; i < 150; i++){
  4623  00475C  0E00               	movlw	0
  4624  00475E  0100               	movlb	0	; () banked
  4625  004760  6F88               	movwf	(getIR@i+1)& (0+255),b
  4626  004762  0E00               	movlw	0
  4627  004764  6F87               	movwf	getIR@i& (0+255),b
  4628  004766                     l6898:
  4629                           
  4630                           ; BSR set to: 0
  4631  004766  0100               	movlb	0	; () banked
  4632  004768  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4633  00476A  D008               	goto	l6902
  4634  00476C  0100               	movlb	0	; () banked
  4635  00476E  5188               	movf	(getIR@i+1)& (0+255),w,b
  4636  004770  E11A               	bnz	l6914
  4637  004772  0E96               	movlw	150
  4638  004774  0100               	movlb	0	; () banked
  4639  004776  5D87               	subwf	getIR@i& (0+255),w,b
  4640  004778  B0D8               	btfsc	status,0,c
  4641  00477A  D015               	goto	l6914
  4642  00477C                     l6902:
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;sort.c: 467: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4646  00477C  0E06               	movlw	6
  4647  00477E  0100               	movlb	0	; () banked
  4648  004780  6F86               	movwf	??_getIR& (0+255),b
  4649  004782  0E30               	movlw	48
  4650  004784                     u8777:
  4651  004784  2EE8               	decfsz	wreg,f,c
  4652  004786  D7FE               	bra	u8777
  4653  004788  2F86               	decfsz	??_getIR& (0+255),f,b
  4654  00478A  D7FC               	bra	u8777
  4655  00478C  F000               	nop	
  4656                           
  4657                           ;sort.c: 468: readIR();
  4658  00478E  ECEF  F025         	call	_readIR	;wreg free
  4659                           
  4660                           ;sort.c: 469: if(!IR_signal){
  4661  004792  0100               	movlb	0	; () banked
  4662  004794  51E6               	movf	_IR_signal& (0+255),w,b
  4663  004796  0100               	movlb	0	; () banked
  4664  004798  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4665  00479A  B4D8               	btfsc	status,2,c
  4666  00479C  D004               	goto	l6914
  4667                           
  4668                           ; BSR set to: 0
  4669                           
  4670                           ; BSR set to: 0
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;sort.c: 470: break;
  4674  00479E  0100               	movlb	0	; () banked
  4675  0047A0  4B87               	infsnz	getIR@i& (0+255),f,b
  4676  0047A2  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4677  0047A4  D7E0               	goto	l6898
  4678  0047A6                     l6914:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;sort.c: 471: }
  4682                           ;sort.c: 472: }
  4683                           ;sort.c: 473: if(IR_signal==1){
  4684  0047A6  0100               	movlb	0	; () banked
  4685  0047A8  05E6               	decf	_IR_signal& (0+255),w,b
  4686  0047AA  0100               	movlb	0	; () banked
  4687  0047AC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4688  0047AE  A4D8               	btfss	status,2,c
  4689  0047B0  D006               	goto	l6918
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;sort.c: 474: f_loadingNewCan = 1;
  4693  0047B2  0E00               	movlw	0
  4694  0047B4  0100               	movlb	0	; () banked
  4695  0047B6  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4696  0047B8  0E01               	movlw	1
  4697  0047BA  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4698                           
  4699                           ;sort.c: 475: }
  4700  0047BC  0012               	return	
  4701  0047BE                     l6918:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;sort.c: 476: else{
  4705                           ;sort.c: 477: f_loadingNewCan = 0;
  4706  0047BE  0E00               	movlw	0
  4707  0047C0  0100               	movlb	0	; () banked
  4708  0047C2  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4709  0047C4  0E00               	movlw	0
  4710  0047C6  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4711  0047C8  0012               	return	
  4712  0047CA                     __end_of_getIR:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           postdec1	equ	0xFE5
  4723                           fsr1l	equ	0xFE1
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _readIR *****************
  4732 ;; Defined at:
  4733 ;;		line 23 in file "ADCFunctionality.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  res             2    4[BANK0 ] int 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, status,2, status,0, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        4 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    8
  4754 ;; This function calls:
  4755 ;;		_readADC
  4756 ;; This function is called by:
  4757 ;;		_Loading
  4758 ;;		_getIR
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text8
  4763  004BDE                     __ptext8:
  4764                           	opt stack 0
  4765  004BDE                     _readIR:
  4766                           	opt stack 20
  4767                           
  4768                           ;ADCFunctionality.c: 24: readADC(0);
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;incstack = 0
  4772  004BDE  0E00               	movlw	0
  4773  004BE0  EC53  F028         	call	_readADC
  4774                           
  4775                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4776  004BE4  50C3               	movf	4035,w,c	;volatile
  4777  004BE6  CFC4 F082          	movff	4036,??_readIR	;volatile
  4778  004BEA  0100               	movlb	0	; () banked
  4779  004BEC  6B83               	clrf	(??_readIR+1)& (0+255),b
  4780  004BEE  C082  F083         	movff	??_readIR,??_readIR+1
  4781  004BF2  0100               	movlb	0	; () banked
  4782  004BF4  6B82               	clrf	??_readIR& (0+255),b
  4783  004BF6  0100               	movlb	0	; () banked
  4784  004BF8  1182               	iorwf	??_readIR& (0+255),w,b
  4785  004BFA  0100               	movlb	0	; () banked
  4786  004BFC  6F84               	movwf	readIR@res& (0+255),b
  4787  004BFE  0100               	movlb	0	; () banked
  4788  004C00  5183               	movf	(??_readIR+1)& (0+255),w,b
  4789  004C02  0100               	movlb	0	; () banked
  4790  004C04  6F85               	movwf	(readIR@res+1)& (0+255),b
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4794  004C06  0100               	movlb	0	; () banked
  4795  004C08  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4796  004C0A  D00A               	goto	u4500
  4797  004C0C  0E21               	movlw	33
  4798  004C0E  0100               	movlb	0	; () banked
  4799  004C10  5D84               	subwf	readIR@res& (0+255),w,b
  4800  004C12  0E03               	movlw	3
  4801  004C14  0100               	movlb	0	; () banked
  4802  004C16  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4803  004C18  A0D8               	btfss	status,0,c
  4804  004C1A  D002               	goto	u4500
  4805  004C1C  0E01               	movlw	1
  4806  004C1E  D001               	goto	u4510
  4807  004C20                     u4500:
  4808  004C20  0E00               	movlw	0
  4809  004C22                     u4510:
  4810  004C22  0100               	movlb	0	; () banked
  4811  004C24  6FE6               	movwf	_IR_signal& (0+255),b
  4812  004C26  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4813                           
  4814                           ; BSR set to: 0
  4815  004C28  0012               	return		;funcret
  4816  004C2A                     __end_of_readIR:
  4817                           	opt stack 0
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _ID *****************
  4836 ;; Defined at:
  4837 ;;		line 254 in file "sort.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  i               2    6[BANK0 ] int 
  4842 ;;  i               2    4[BANK0 ] int 
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;Total ram usage:        6 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    8
  4859 ;; This function calls:
  4860 ;;		_delay_ms
  4861 ;; This function is called by:
  4862 ;;		_sort
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text9
  4867  0030DC                     __ptext9:
  4868                           	opt stack 0
  4869  0030DC                     _ID:
  4870                           	opt stack 21
  4871                           
  4872                           ;sort.c: 255: if(f_can_coming_to_ID){
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;incstack = 0
  4876  0030DC  0101               	movlb	1	; () banked
  4877  0030DE  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4878  0030E0  0101               	movlb	1	; () banked
  4879  0030E2  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4880  0030E4  B4D8               	btfsc	status,2,c
  4881  0030E6  0012               	return	
  4882                           
  4883                           ; BSR set to: 1
  4884                           ;sort.c: 257: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4885  0030E8  0E29               	movlw	41
  4886  0030EA  0100               	movlb	0	; () banked
  4887  0030EC  6F83               	movwf	(??_ID+1)& (0+255),b
  4888  0030EE  0E96               	movlw	150
  4889  0030F0  0100               	movlb	0	; () banked
  4890  0030F2  6F82               	movwf	??_ID& (0+255),b
  4891  0030F4  0E7F               	movlw	127
  4892  0030F6                     u8787:
  4893  0030F6  2EE8               	decfsz	wreg,f,c
  4894  0030F8  D7FE               	bra	u8787
  4895  0030FA  2F82               	decfsz	??_ID& (0+255),f,b
  4896  0030FC  D7FC               	bra	u8787
  4897  0030FE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4898  003100  D7FA               	bra	u8787
  4899                           
  4900                           ;sort.c: 259: LATAbits.LATA3 = 1;
  4901  003102  8689               	bsf	3977,3,c	;volatile
  4902                           
  4903                           ;sort.c: 260: _delay((unsigned long)((600)*(32000000/4000.0)));
  4904  003104  0E19               	movlw	25
  4905  003106  0100               	movlb	0	; () banked
  4906  003108  6F83               	movwf	(??_ID+1)& (0+255),b
  4907  00310A  0E5A               	movlw	90
  4908  00310C  0100               	movlb	0	; () banked
  4909  00310E  6F82               	movwf	??_ID& (0+255),b
  4910  003110  0EB1               	movlw	177
  4911  003112                     u8797:
  4912  003112  2EE8               	decfsz	wreg,f,c
  4913  003114  D7FE               	bra	u8797
  4914  003116  2F82               	decfsz	??_ID& (0+255),f,b
  4915  003118  D7FC               	bra	u8797
  4916  00311A  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4917  00311C  D7FA               	bra	u8797
  4918  00311E  D000               	nop2	
  4919                           
  4920                           ;sort.c: 261: sensor_outputs[1] = PORTAbits.RA2;
  4921  003120  A480               	btfss	3968,2,c	;volatile
  4922  003122  D004               	goto	u5870
  4923  003124  0100               	movlb	0	; () banked
  4924  003126  6B82               	clrf	??_ID& (0+255),b
  4925  003128  2B82               	incf	??_ID& (0+255),f,b
  4926  00312A  D002               	goto	u5878
  4927  00312C                     u5870:
  4928  00312C  0100               	movlb	0	; () banked
  4929  00312E  6B82               	clrf	??_ID& (0+255),b
  4930  003130                     u5878:
  4931  003130  0100               	movlb	0	; () banked
  4932  003132  5182               	movf	??_ID& (0+255),w,b
  4933  003134  0100               	movlb	0	; () banked
  4934  003136  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4935  003138  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;sort.c: 262: LATAbits.LATA3 = 0;
  4939  00313A  9689               	bcf	3977,3,c	;volatile
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;sort.c: 264: _delay((unsigned long)((200)*(32000000/4000.0)));
  4943  00313C  0E09               	movlw	9
  4944  00313E  0100               	movlb	0	; () banked
  4945  003140  6F83               	movwf	(??_ID+1)& (0+255),b
  4946  003142  0E1E               	movlw	30
  4947  003144  0100               	movlb	0	; () banked
  4948  003146  6F82               	movwf	??_ID& (0+255),b
  4949  003148  0EE4               	movlw	228
  4950  00314A                     u8807:
  4951  00314A  2EE8               	decfsz	wreg,f,c
  4952  00314C  D7FE               	bra	u8807
  4953  00314E  2F82               	decfsz	??_ID& (0+255),f,b
  4954  003150  D7FC               	bra	u8807
  4955  003152  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4956  003154  D7FA               	bra	u8807
  4957  003156  F000               	nop	
  4958                           
  4959                           ;sort.c: 265: LATAbits.LATA3 = 1;
  4960  003158  8689               	bsf	3977,3,c	;volatile
  4961                           
  4962                           ;sort.c: 266: _delay((unsigned long)((600)*(32000000/4000.0)));
  4963  00315A  0E19               	movlw	25
  4964  00315C  0100               	movlb	0	; () banked
  4965  00315E  6F83               	movwf	(??_ID+1)& (0+255),b
  4966  003160  0E5A               	movlw	90
  4967  003162  0100               	movlb	0	; () banked
  4968  003164  6F82               	movwf	??_ID& (0+255),b
  4969  003166  0EB1               	movlw	177
  4970  003168                     u8817:
  4971  003168  2EE8               	decfsz	wreg,f,c
  4972  00316A  D7FE               	bra	u8817
  4973  00316C  2F82               	decfsz	??_ID& (0+255),f,b
  4974  00316E  D7FC               	bra	u8817
  4975  003170  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4976  003172  D7FA               	bra	u8817
  4977  003174  D000               	nop2	
  4978                           
  4979                           ;sort.c: 267: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4980  003176  A480               	btfss	3968,2,c	;volatile
  4981  003178  D004               	goto	u5880
  4982  00317A  0100               	movlb	0	; () banked
  4983  00317C  6B82               	clrf	??_ID& (0+255),b
  4984  00317E  2B82               	incf	??_ID& (0+255),f,b
  4985  003180  D002               	goto	u5888
  4986  003182                     u5880:
  4987  003182  0100               	movlb	0	; () banked
  4988  003184  6B82               	clrf	??_ID& (0+255),b
  4989  003186                     u5888:
  4990  003186  0100               	movlb	0	; () banked
  4991  003188  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  4992  00318A  0100               	movlb	0	; () banked
  4993  00318C  1182               	iorwf	??_ID& (0+255),w,b
  4994  00318E  0100               	movlb	0	; () banked
  4995  003190  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4996  003192  0100               	movlb	0	; () banked
  4997  003194  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  4998  003196  0100               	movlb	0	; () banked
  4999  003198  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;sort.c: 275: if(!sensor_outputs[0]){
  5003  00319A  0100               	movlb	0	; () banked
  5004  00319C  51E2               	movf	_sensor_outputs& (0+255),w,b
  5005  00319E  0100               	movlb	0	; () banked
  5006  0031A0  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5007  0031A2  A4D8               	btfss	status,2,c
  5008  0031A4  D016               	goto	l7442
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;sort.c: 276: if(!sensor_outputs[1]){
  5012  0031A6  0100               	movlb	0	; () banked
  5013  0031A8  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5014  0031AA  0100               	movlb	0	; () banked
  5015  0031AC  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5016  0031AE  A4D8               	btfss	status,2,c
  5017  0031B0  D008               	goto	l7438
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;sort.c: 277: count_pop_no_tab++;
  5021  0031B2  0101               	movlb	1	; () banked
  5022  0031B4  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5023  0031B6  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5024                           
  5025                           ; BSR set to: 1
  5026                           ;sort.c: 278: cur_can = 0;
  5027  0031B8  0E00               	movlw	0
  5028  0031BA  0101               	movlb	1	; () banked
  5029  0031BC  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5030  0031BE  0E00               	movlw	0
  5031  0031C0  D007               	goto	L4
  5032  0031C2                     l7438:
  5033                           
  5034                           ;sort.c: 280: else{
  5035                           ;sort.c: 281: count_pop_w_tab++;
  5036  0031C2  0101               	movlb	1	; () banked
  5037  0031C4  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5038  0031C6  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5039                           
  5040                           ; BSR set to: 1
  5041                           ;sort.c: 282: cur_can = 1;
  5042  0031C8  0E00               	movlw	0
  5043  0031CA  0101               	movlb	1	; () banked
  5044  0031CC  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5045  0031CE  0E01               	movlw	1
  5046  0031D0                     L4:
  5047  0031D0  6F2B               	movwf	_cur_can& (0+255),b
  5048  0031D2                     l7442:
  5049                           
  5050                           ;sort.c: 283: }
  5051                           ;sort.c: 284: }
  5052                           ;sort.c: 285: if(sensor_outputs[0]){
  5053  0031D2  0100               	movlb	0	; () banked
  5054  0031D4  51E2               	movf	_sensor_outputs& (0+255),w,b
  5055  0031D6  0100               	movlb	0	; () banked
  5056  0031D8  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5057  0031DA  B4D8               	btfsc	status,2,c
  5058  0031DC  D016               	goto	l7454
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;sort.c: 286: if(!sensor_outputs[1]){
  5062  0031DE  0100               	movlb	0	; () banked
  5063  0031E0  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5064  0031E2  0100               	movlb	0	; () banked
  5065  0031E4  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5066  0031E6  A4D8               	btfss	status,2,c
  5067  0031E8  D008               	goto	l7450
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;sort.c: 287: count_can_w_lab++;
  5071  0031EA  0101               	movlb	1	; () banked
  5072  0031EC  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5073  0031EE  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5074                           
  5075                           ; BSR set to: 1
  5076                           ;sort.c: 288: cur_can = 2;
  5077  0031F0  0E00               	movlw	0
  5078  0031F2  0101               	movlb	1	; () banked
  5079  0031F4  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5080  0031F6  0E02               	movlw	2
  5081  0031F8  D007               	goto	L5
  5082  0031FA                     l7450:
  5083                           
  5084                           ;sort.c: 290: else{
  5085                           ;sort.c: 291: count_can_no_lab++;
  5086  0031FA  0101               	movlb	1	; () banked
  5087  0031FC  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5088  0031FE  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5089                           
  5090                           ; BSR set to: 1
  5091                           ;sort.c: 292: cur_can = 3;
  5092  003200  0E00               	movlw	0
  5093  003202  0101               	movlb	1	; () banked
  5094  003204  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5095  003206  0E03               	movlw	3
  5096  003208                     L5:
  5097  003208  6F2B               	movwf	_cur_can& (0+255),b
  5098  00320A                     l7454:
  5099                           
  5100                           ;sort.c: 293: }
  5101                           ;sort.c: 294: }
  5102                           ;sort.c: 295: LATAbits.LATA3 = 0;
  5103  00320A  9689               	bcf	3977,3,c	;volatile
  5104  00320C                     l7456:
  5105  00320C  0101               	movlb	1	; () banked
  5106  00320E  5135               	movf	_f_can_distributed& (0+255),w,b
  5107  003210  0101               	movlb	1	; () banked
  5108  003212  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5109  003214  B4D8               	btfsc	status,2,c
  5110  003216  D7FA               	goto	l7456
  5111                           
  5112                           ; BSR set to: 1
  5113                           ;sort.c: 298: LATAbits.LATA3 = 1;
  5114  003218  8689               	bsf	3977,3,c	;volatile
  5115                           
  5116                           ; BSR set to: 1
  5117                           ;sort.c: 301: for(int i=0;i<10000;i++)
  5118  00321A  0E00               	movlw	0
  5119  00321C  0100               	movlb	0	; () banked
  5120  00321E  6F85               	movwf	(ID@i+1)& (0+255),b
  5121  003220  0E00               	movlw	0
  5122  003222  6F84               	movwf	ID@i& (0+255),b
  5123  003224                     l7460:
  5124                           
  5125                           ; BSR set to: 0
  5126  003224  0100               	movlb	0	; () banked
  5127  003226  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5128  003228  D008               	goto	l808
  5129  00322A  0E10               	movlw	16
  5130  00322C  0100               	movlb	0	; () banked
  5131  00322E  5D84               	subwf	ID@i& (0+255),w,b
  5132  003230  0E27               	movlw	39
  5133  003232  0100               	movlb	0	; () banked
  5134  003234  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5135  003236  B0D8               	btfsc	status,0,c
  5136  003238  D00D               	goto	l809
  5137  00323A                     l808:
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;sort.c: 302: {
  5141                           ;sort.c: 303: LATCbits.LATC0 = 1;
  5142  00323A  808B               	bsf	3979,0,c	;volatile
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;sort.c: 304: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5146  00323C  0E1A               	movlw	26
  5147  00323E                     u8827:
  5148  00323E  2EE8               	decfsz	wreg,f,c
  5149  003240  D7FE               	bra	u8827
  5150  003242  D000               	nop2	
  5151                           
  5152                           ;sort.c: 305: LATCbits.LATC0 = 0;
  5153  003244  908B               	bcf	3979,0,c	;volatile
  5154                           
  5155                           ;sort.c: 306: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5156  003246  0EF0               	movlw	240
  5157  003248                     u8837:
  5158  003248  2EE8               	decfsz	wreg,f,c
  5159  00324A  D7FE               	bra	u8837
  5160  00324C  0100               	movlb	0	; () banked
  5161  00324E  4B84               	infsnz	ID@i& (0+255),f,b
  5162  003250  2B85               	incf	(ID@i+1)& (0+255),f,b
  5163  003252  D7E8               	goto	l7460
  5164  003254                     l809:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;sort.c: 307: }
  5168                           ;sort.c: 308: LATCbits.LATC0 = 0;
  5169  003254  908B               	bcf	3979,0,c	;volatile
  5170                           
  5171                           ;sort.c: 310: LATAbits.LATA3 = 0;
  5172  003256  9689               	bcf	3977,3,c	;volatile
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;sort.c: 314: f_can_coming_to_distribution = 1;
  5176  003258  0E00               	movlw	0
  5177  00325A  0101               	movlb	1	; () banked
  5178  00325C  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5179  00325E  0E01               	movlw	1
  5180  003260  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5181                           
  5182                           ; BSR set to: 1
  5183                           ;sort.c: 315: _delay((unsigned long)((750)*(32000000/4000.0)));
  5184  003262  0E1F               	movlw	31
  5185  003264  0100               	movlb	0	; () banked
  5186  003266  6F83               	movwf	(??_ID+1)& (0+255),b
  5187  003268  0E71               	movlw	113
  5188  00326A  0100               	movlb	0	; () banked
  5189  00326C  6F82               	movwf	??_ID& (0+255),b
  5190  00326E  0E1E               	movlw	30
  5191  003270                     u8847:
  5192  003270  2EE8               	decfsz	wreg,f,c
  5193  003272  D7FE               	bra	u8847
  5194  003274  2F82               	decfsz	??_ID& (0+255),f,b
  5195  003276  D7FC               	bra	u8847
  5196  003278  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5197  00327A  D7FA               	bra	u8847
  5198  00327C  F000               	nop	
  5199                           
  5200                           ;sort.c: 316: LATCbits.LATC0 = 1;
  5201  00327E  808B               	bsf	3979,0,c	;volatile
  5202                           
  5203                           ;sort.c: 319: if(!f_lastCan){
  5204  003280  0100               	movlb	0	; () banked
  5205  003282  51EE               	movf	_f_lastCan& (0+255),w,b
  5206  003284  0100               	movlb	0	; () banked
  5207  003286  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5208  003288  A4D8               	btfss	status,2,c
  5209  00328A  D032               	goto	l7492
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;sort.c: 320: for(int i=0; i<46; i++){
  5213  00328C  0E00               	movlw	0
  5214  00328E  0100               	movlb	0	; () banked
  5215  003290  6F87               	movwf	(ID@i_1173+1)& (0+255),b
  5216  003292  0E00               	movlw	0
  5217  003294  6F86               	movwf	ID@i_1173& (0+255),b
  5218                           
  5219                           ; BSR set to: 0
  5220  003296  0100               	movlb	0	; () banked
  5221  003298  BF87               	btfsc	(ID@i_1173+1)& (0+255),7,b
  5222  00329A  D008               	goto	l7484
  5223  00329C  0100               	movlb	0	; () banked
  5224  00329E  5187               	movf	(ID@i_1173+1)& (0+255),w,b
  5225  0032A0  E126               	bnz	l812
  5226  0032A2  0E2E               	movlw	46
  5227  0032A4  0100               	movlb	0	; () banked
  5228  0032A6  5D86               	subwf	ID@i_1173& (0+255),w,b
  5229  0032A8  B0D8               	btfsc	status,0,c
  5230  0032AA  D021               	goto	l812
  5231  0032AC                     l7484:
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;sort.c: 321: LATBbits.LATB2 = !LATBbits.LATB2;
  5235  0032AC  B48A               	btfsc	3978,2,c	;volatile
  5236  0032AE  D004               	goto	u5980
  5237  0032B0  0100               	movlb	0	; () banked
  5238  0032B2  6B82               	clrf	??_ID& (0+255),b
  5239  0032B4  2B82               	incf	??_ID& (0+255),f,b
  5240  0032B6  D002               	goto	u5998
  5241  0032B8                     u5980:
  5242  0032B8  0100               	movlb	0	; () banked
  5243  0032BA  6B82               	clrf	??_ID& (0+255),b
  5244  0032BC                     u5998:
  5245  0032BC  0100               	movlb	0	; () banked
  5246  0032BE  4782               	rlncf	??_ID& (0+255),f,b
  5247  0032C0  4782               	rlncf	??_ID& (0+255),f,b
  5248  0032C2  508A               	movf	3978,w,c	;volatile
  5249  0032C4  0100               	movlb	0	; () banked
  5250  0032C6  1982               	xorwf	??_ID& (0+255),w,b
  5251  0032C8  0BFB               	andlw	-5
  5252  0032CA  1982               	xorwf	??_ID& (0+255),w,b
  5253  0032CC  6E8A               	movwf	3978,c	;volatile
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;sort.c: 322: delay_ms(45-i);
  5257  0032CE  0100               	movlb	0	; () banked
  5258  0032D0  5186               	movf	ID@i_1173& (0+255),w,b
  5259  0032D2  0800               	sublw	0
  5260  0032D4  0F2D               	addlw	45
  5261  0032D6  EC7E  F028         	call	_delay_ms
  5262  0032DA  0100               	movlb	0	; () banked
  5263  0032DC  4B86               	infsnz	ID@i_1173& (0+255),f,b
  5264  0032DE  2B87               	incf	(ID@i_1173+1)& (0+255),f,b
  5265                           
  5266                           ; BSR set to: 0
  5267  0032E0  0100               	movlb	0	; () banked
  5268  0032E2  BF87               	btfsc	(ID@i_1173+1)& (0+255),7,b
  5269  0032E4  D7E3               	goto	l7484
  5270  0032E6  0100               	movlb	0	; () banked
  5271  0032E8  5187               	movf	(ID@i_1173+1)& (0+255),w,b
  5272  0032EA  E101               	bnz	u6000
  5273  0032EC  D7DA               	goto	L6
  5274  0032EE                     u6000:
  5275  0032EE                     l812:
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;sort.c: 323: }
  5279                           ;sort.c: 324: LATBbits.LATB2 = 1;
  5280  0032EE  848A               	bsf	3978,2,c	;volatile
  5281  0032F0                     l7492:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;sort.c: 325: }
  5285                           ;sort.c: 327: f_can_coming_to_ID = 0;
  5286  0032F0  0E00               	movlw	0
  5287  0032F2  0101               	movlb	1	; () banked
  5288  0032F4  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5289  0032F6  0E00               	movlw	0
  5290  0032F8  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5291  0032FA  0012               	return	
  5292  0032FC                     __end_of_ID:
  5293                           	opt stack 0
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           postinc0	equ	0xFEE
  5301                           wreg	equ	0xFE8
  5302                           postdec1	equ	0xFE5
  5303                           fsr1l	equ	0xFE1
  5304                           indf2	equ	0xFDF
  5305                           postinc2	equ	0xFDE
  5306                           postdec2	equ	0xFDD
  5307                           fsr2h	equ	0xFDA
  5308                           fsr2l	equ	0xFD9
  5309                           status	equ	0xFD8
  5310                           
  5311 ;; *************** function _delay_ms *****************
  5312 ;; Defined at:
  5313 ;;		line 577 in file "sort.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;  milliseconds    1    wreg     unsigned char 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  1    wreg      void 
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;Total ram usage:        2 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    7
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_Loading
  5338 ;;		_ID
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text10
  5343  0050FC                     __ptext10:
  5344                           	opt stack 0
  5345  0050FC                     _delay_ms:
  5346                           	opt stack 21
  5347                           
  5348                           ; BSR set to: 1
  5349                           ;incstack = 0
  5350                           ;delay_ms@milliseconds stored from wreg
  5351  0050FC  0100               	movlb	0	; () banked
  5352  0050FE  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5353                           
  5354                           ;sort.c: 578: while(milliseconds > 0)
  5355  005100  D00B               	goto	l6878
  5356  005102                     l6874:
  5357                           
  5358                           ;sort.c: 579: {
  5359                           ;sort.c: 580: milliseconds--;
  5360  005102  0100               	movlb	0	; () banked
  5361  005104  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;sort.c: 581: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5365  005106  0E0B               	movlw	11
  5366  005108  0100               	movlb	0	; () banked
  5367  00510A  6F80               	movwf	??_delay_ms& (0+255),b
  5368  00510C  0E47               	movlw	71
  5369  00510E                     u8857:
  5370  00510E  2EE8               	decfsz	wreg,f,c
  5371  005110  D7FE               	bra	u8857
  5372  005112  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5373  005114  D7FC               	bra	u8857
  5374  005116  D000               	nop2	
  5375  005118                     l6878:
  5376  005118  0100               	movlb	0	; () banked
  5377  00511A  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5378  00511C  0100               	movlb	0	; () banked
  5379  00511E  B4D8               	btfsc	status,2,c
  5380  005120  0012               	return	
  5381  005122  D7EF               	goto	l6874
  5382  005124                     __end_of_delay_ms:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           prodh	equ	0xFF4
  5389                           prodl	equ	0xFF3
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           postdec1	equ	0xFE5
  5393                           fsr1l	equ	0xFE1
  5394                           indf2	equ	0xFDF
  5395                           postinc2	equ	0xFDE
  5396                           postdec2	equ	0xFDD
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function _Distribution *****************
  5402 ;; Defined at:
  5403 ;;		line 330 in file "sort.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;		None
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;		None
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, status,2, status,0, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;Total ram usage:        2 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    8
  5424 ;; This function calls:
  5425 ;;		_updateServoPosition
  5426 ;; This function is called by:
  5427 ;;		_sort
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text11
  5432  003E52                     __ptext11:
  5433                           	opt stack 0
  5434  003E52                     _Distribution:
  5435                           	opt stack 21
  5436                           
  5437                           ;sort.c: 331: if(f_can_coming_to_distribution){
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;incstack = 0
  5441  003E52  0101               	movlb	1	; () banked
  5442  003E54  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5443  003E56  0101               	movlb	1	; () banked
  5444  003E58  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5445  003E5A  B4D8               	btfsc	status,2,c
  5446  003E5C  0012               	return	
  5447                           
  5448                           ; BSR set to: 1
  5449                           ;sort.c: 332: f_can_distributed = 0;
  5450  003E5E  0E00               	movlw	0
  5451  003E60  0101               	movlb	1	; () banked
  5452  003E62  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5453  003E64  0E00               	movlw	0
  5454  003E66  6F35               	movwf	_f_can_distributed& (0+255),b
  5455                           
  5456                           ;sort.c: 339: switch(cur_can){
  5457  003E68  D034               	goto	l7508
  5458  003E6A                     l7498:
  5459                           
  5460                           ;sort.c: 341: updateServoPosition(500, 1);
  5461  003E6A  0E01               	movlw	1
  5462  003E6C  0100               	movlb	0	; () banked
  5463  003E6E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5464  003E70  0EF4               	movlw	244
  5465  003E72  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5466  003E74  0E00               	movlw	0
  5467  003E76  0100               	movlb	0	; () banked
  5468  003E78  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5469  003E7A  0E01               	movlw	1
  5470  003E7C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5471  003E7E  ECA9  F022         	call	_updateServoPosition	;wreg free
  5472                           
  5473                           ;sort.c: 342: break;
  5474  003E82  D03E               	goto	l7510
  5475  003E84                     l7500:
  5476                           
  5477                           ;sort.c: 344: updateServoPosition(850, 1);
  5478  003E84  0E03               	movlw	3
  5479  003E86  0100               	movlb	0	; () banked
  5480  003E88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5481  003E8A  0E52               	movlw	82
  5482  003E8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5483  003E8E  0E00               	movlw	0
  5484  003E90  0100               	movlb	0	; () banked
  5485  003E92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5486  003E94  0E01               	movlw	1
  5487  003E96  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5488  003E98  ECA9  F022         	call	_updateServoPosition	;wreg free
  5489                           
  5490                           ;sort.c: 345: break;
  5491  003E9C  D031               	goto	l7510
  5492  003E9E                     l7502:
  5493                           
  5494                           ;sort.c: 347: updateServoPosition(1670, 1);
  5495  003E9E  0E06               	movlw	6
  5496  003EA0  0100               	movlb	0	; () banked
  5497  003EA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5498  003EA4  0E86               	movlw	134
  5499  003EA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5500  003EA8  0E00               	movlw	0
  5501  003EAA  0100               	movlb	0	; () banked
  5502  003EAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5503  003EAE  0E01               	movlw	1
  5504  003EB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5505  003EB2  ECA9  F022         	call	_updateServoPosition	;wreg free
  5506                           
  5507                           ;sort.c: 348: break;
  5508  003EB6  D024               	goto	l7510
  5509  003EB8                     l7504:
  5510                           
  5511                           ;sort.c: 350: updateServoPosition(2400, 1);
  5512  003EB8  0E09               	movlw	9
  5513  003EBA  0100               	movlb	0	; () banked
  5514  003EBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5515  003EBE  0E60               	movlw	96
  5516  003EC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5517  003EC2  0E00               	movlw	0
  5518  003EC4  0100               	movlb	0	; () banked
  5519  003EC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5520  003EC8  0E01               	movlw	1
  5521  003ECA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5522  003ECC  ECA9  F022         	call	_updateServoPosition	;wreg free
  5523                           
  5524                           ;sort.c: 354: }
  5525                           
  5526                           ;sort.c: 353: break;
  5527                           
  5528                           ;sort.c: 352: default:
  5529                           
  5530                           ;sort.c: 351: break;
  5531  003ED0  D017               	goto	l7510
  5532  003ED2                     l7508:
  5533  003ED2  C12B  F088         	movff	_cur_can,??_Distribution
  5534  003ED6  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5535                           
  5536                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5537                           ; Switch size 1, requested type "space"
  5538                           ; Number of cases is 1, Range of values is 0 to 0
  5539                           ; switch strategies available:
  5540                           ; Name         Instructions Cycles
  5541                           ; simple_byte            4     3 (average)
  5542                           ;	Chosen strategy is simple_byte
  5543  003EDA  0100               	movlb	0	; () banked
  5544  003EDC  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5545  003EDE  0A00               	xorlw	0	; case 0
  5546  003EE0  A4D8               	btfss	status,2,c
  5547  003EE2  D00E               	goto	l7510
  5548                           
  5549                           ; BSR set to: 0
  5550                           ; Switch size 1, requested type "space"
  5551                           ; Number of cases is 4, Range of values is 0 to 3
  5552                           ; switch strategies available:
  5553                           ; Name         Instructions Cycles
  5554                           ; simple_byte           13     7 (average)
  5555                           ;	Chosen strategy is simple_byte
  5556  003EE4  0100               	movlb	0	; () banked
  5557  003EE6  5188               	movf	??_Distribution& (0+255),w,b
  5558  003EE8  0A00               	xorlw	0	; case 0
  5559  003EEA  B4D8               	btfsc	status,2,c
  5560  003EEC  D7BE               	goto	l7498
  5561  003EEE  0A01               	xorlw	1	; case 1
  5562  003EF0  B4D8               	btfsc	status,2,c
  5563  003EF2  D7C8               	goto	l7500
  5564  003EF4  0A03               	xorlw	3	; case 2
  5565  003EF6  B4D8               	btfsc	status,2,c
  5566  003EF8  D7D2               	goto	l7502
  5567  003EFA  0A01               	xorlw	1	; case 3
  5568  003EFC  B4D8               	btfsc	status,2,c
  5569  003EFE  D7DC               	goto	l7504
  5570  003F00                     l7510:
  5571                           
  5572                           ;sort.c: 355: updateServoPosition(1050, 3);
  5573  003F00  0E04               	movlw	4
  5574  003F02  0100               	movlb	0	; () banked
  5575  003F04  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5576  003F06  0E1A               	movlw	26
  5577  003F08  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5578  003F0A  0E00               	movlw	0
  5579  003F0C  0100               	movlb	0	; () banked
  5580  003F0E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5581  003F10  0E03               	movlw	3
  5582  003F12  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5583  003F14  ECA9  F022         	call	_updateServoPosition	;wreg free
  5584                           
  5585                           ;sort.c: 356: servo_timer_target = 750;
  5586  003F18  0E02               	movlw	2
  5587  003F1A  6E74               	movwf	_servo_timer_target+1,c	;volatile
  5588  003F1C  0EEE               	movlw	238
  5589  003F1E  6E73               	movwf	_servo_timer_target,c	;volatile
  5590                           
  5591                           ;sort.c: 357: f_panning_to_bin = 1;
  5592  003F20  0E00               	movlw	0
  5593  003F22  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5594  003F24  0E01               	movlw	1
  5595  003F26  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5596                           
  5597                           ;sort.c: 358: f_can_coming_to_distribution = 0;
  5598  003F28  0E00               	movlw	0
  5599  003F2A  0101               	movlb	1	; () banked
  5600  003F2C  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5601  003F2E  0E00               	movlw	0
  5602  003F30  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5603  003F32  0012               	return	
  5604  003F34                     __end_of_Distribution:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           postinc0	equ	0xFEE
  5613                           wreg	equ	0xFE8
  5614                           postdec1	equ	0xFE5
  5615                           fsr1l	equ	0xFE1
  5616                           indf2	equ	0xFDF
  5617                           postinc2	equ	0xFDE
  5618                           postdec2	equ	0xFDD
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _machineConfig *****************
  5624 ;; Defined at:
  5625 ;;		line 15 in file "MachineConfig.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    7
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		_main
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text12
  5654  0049D6                     __ptext12:
  5655                           	opt stack 0
  5656  0049D6                     _machineConfig:
  5657                           	opt stack 23
  5658                           
  5659                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5660                           
  5661                           ; BSR set to: 1
  5662                           ;incstack = 0
  5663  0049D6  0EF0               	movlw	240
  5664  0049D8  6ED3               	movwf	4051,c	;volatile
  5665                           
  5666                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5667  0049DA  8C9B               	bsf	3995,6,c	;volatile
  5668                           
  5669                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5670  0049DC  0E07               	movlw	7
  5671  0049DE  6E92               	movwf	3986,c	;volatile
  5672                           
  5673                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5674  0049E0  0EF2               	movlw	242
  5675  0049E2  6E93               	movwf	3987,c	;volatile
  5676                           
  5677                           ;MachineConfig.c: 27: TRISC = 0x00;
  5678  0049E4  0E00               	movlw	0
  5679  0049E6  6E94               	movwf	3988,c	;volatile
  5680                           
  5681                           ;MachineConfig.c: 31: TRISD = 0x00;
  5682  0049E8  0E00               	movlw	0
  5683  0049EA  6E95               	movwf	3989,c	;volatile
  5684                           
  5685                           ;MachineConfig.c: 34: TRISE = 0x00;
  5686  0049EC  0E00               	movlw	0
  5687  0049EE  6E96               	movwf	3990,c	;volatile
  5688                           
  5689                           ;MachineConfig.c: 37: LATA = 0x00;
  5690  0049F0  0E00               	movlw	0
  5691  0049F2  6E89               	movwf	3977,c	;volatile
  5692                           
  5693                           ;MachineConfig.c: 38: LATB = 0x00;
  5694  0049F4  0E00               	movlw	0
  5695  0049F6  6E8A               	movwf	3978,c	;volatile
  5696                           
  5697                           ;MachineConfig.c: 39: LATC = 0x00;
  5698  0049F8  0E00               	movlw	0
  5699  0049FA  6E8B               	movwf	3979,c	;volatile
  5700                           
  5701                           ;MachineConfig.c: 40: LATD = 0x00;
  5702  0049FC  0E00               	movlw	0
  5703  0049FE  6E8C               	movwf	3980,c	;volatile
  5704                           
  5705                           ;MachineConfig.c: 41: LATE = 0x00;
  5706  004A00  0E00               	movlw	0
  5707  004A02  6E8D               	movwf	3981,c	;volatile
  5708                           
  5709                           ;MachineConfig.c: 43: nRBPU = 0;
  5710  004A04  9EF1               	bcf	intcon2,7,c	;volatile
  5711                           
  5712                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5713  004A06  0E00               	movlw	0
  5714  004A08  6EC2               	movwf	4034,c	;volatile
  5715                           
  5716                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5717  004A0A  0E0D               	movlw	13
  5718  004A0C  6EC1               	movwf	4033,c	;volatile
  5719                           
  5720                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5721  004A0E  0E00               	movlw	0
  5722  004A10  6EB5               	movwf	4021,c	;volatile
  5723                           
  5724                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5725  004A12  96B4               	bcf	4020,3,c	;volatile
  5726                           
  5727                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5728  004A14  0EB1               	movlw	177
  5729  004A16  6EC0               	movwf	4032,c	;volatile
  5730                           
  5731                           ;MachineConfig.c: 55: INT1IE = 1;
  5732  004A18  86F0               	bsf	intcon3,3,c	;volatile
  5733                           
  5734                           ;MachineConfig.c: 57: TMR0IE = 1;
  5735  004A1A  8AF2               	bsf	intcon,5,c	;volatile
  5736                           
  5737                           ;MachineConfig.c: 58: TMR1IE = 1;
  5738  004A1C  809D               	bsf	3997,0,c	;volatile
  5739                           
  5740                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5741  004A1E  0EB0               	movlw	176
  5742  004A20  6ECD               	movwf	4045,c	;volatile
  5743                           
  5744                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5745  004A22  0EB0               	movlw	176
  5746  004A24  6EB1               	movwf	4017,c	;volatile
  5747                           
  5748                           ;MachineConfig.c: 61: TMR2IE = 1;
  5749  004A26  829D               	bsf	3997,1,c	;volatile
  5750                           
  5751                           ;MachineConfig.c: 62: TMR3IE = 1;
  5752  004A28  82A0               	bsf	4000,1,c	;volatile
  5753                           
  5754                           ;MachineConfig.c: 63: PEIE = 1;
  5755  004A2A  8CF2               	bsf	intcon,6,c	;volatile
  5756                           
  5757                           ;MachineConfig.c: 64: ADIE = 0;
  5758  004A2C  9C9D               	bcf	3997,6,c	;volatile
  5759                           
  5760                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5761  004A2E  9EF2               	bcf	intcon,7,c	;volatile
  5762  004A30  0012               	return		;funcret
  5763  004A32                     __end_of_machineConfig:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           intcon	equ	0xFF2
  5772                           intcon2	equ	0xFF1
  5773                           intcon3	equ	0xFF0
  5774                           postinc0	equ	0xFEE
  5775                           wreg	equ	0xFE8
  5776                           postdec1	equ	0xFE5
  5777                           fsr1l	equ	0xFE1
  5778                           indf2	equ	0xFDF
  5779                           postinc2	equ	0xFDE
  5780                           postdec2	equ	0xFDD
  5781                           fsr2h	equ	0xFDA
  5782                           fsr2l	equ	0xFD9
  5783                           status	equ	0xFD8
  5784                           
  5785 ;; *************** function _logRun *****************
  5786 ;; Defined at:
  5787 ;;		line 84 in file "EEPROM.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5792 ;;  i               2   55[BANK0 ] int 
  5793 ;;  num             1   49[BANK0 ] unsigned char 
  5794 ;;  addr            2   57[BANK0 ] unsigned short 
  5795 ;;  byte11          1   54[BANK0 ] unsigned char 
  5796 ;;  byte3           1   52[BANK0 ] unsigned char 
  5797 ;;  byte2           1   51[BANK0 ] unsigned char 
  5798 ;;  byte1           1   50[BANK0 ] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;Total ram usage:       10 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:   11
  5815 ;; This function calls:
  5816 ;;		_EEPROM_read
  5817 ;;		_EEPROM_write
  5818 ;; This function is called by:
  5819 ;;		_main
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text13
  5824  0039F6                     __ptext13:
  5825                           	opt stack 0
  5826  0039F6                     _logRun:
  5827                           	opt stack 19
  5828                           
  5829                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5830                           
  5831                           ;incstack = 0
  5832  0039F6  0E00               	movlw	0
  5833  0039F8  0100               	movlb	0	; () banked
  5834  0039FA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5835  0039FC  0E00               	movlw	0
  5836  0039FE  6F80               	movwf	EEPROM_read@address& (0+255),b
  5837  003A00  EC2A  F029         	call	_EEPROM_read	;wreg free
  5838  003A04  0100               	movlb	0	; () banked
  5839  003A06  6FFD               	movwf	_sel& (0+255),b
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5843  003A08  0100               	movlb	0	; () banked
  5844  003A0A  51FD               	movf	_sel& (0+255),w,b
  5845  003A0C  0D0B               	mullw	11
  5846  003A0E  0E01               	movlw	1
  5847  003A10  24F3               	addwf	prodl,w,c
  5848  003A12  0100               	movlb	0	; () banked
  5849  003A14  6FB9               	movwf	logRun@addr& (0+255),b
  5850  003A16  0E00               	movlw	0
  5851  003A18  20F4               	addwfc	prodh,w,c
  5852  003A1A  0100               	movlb	0	; () banked
  5853  003A1C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;EEPROM.c: 101: if (sel < 3){
  5857  003A1E  0E03               	movlw	3
  5858  003A20  0100               	movlb	0	; () banked
  5859  003A22  61FD               	cpfslt	_sel& (0+255),b
  5860  003A24  D00E               	goto	l9094
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5864  003A26  0100               	movlb	0	; () banked
  5865  003A28  29FD               	incf	_sel& (0+255),w,b
  5866  003A2A  0100               	movlb	0	; () banked
  5867  003A2C  6FB1               	movwf	logRun@num& (0+255),b
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5871  003A2E  0E00               	movlw	0
  5872  003A30  0100               	movlb	0	; () banked
  5873  003A32  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5874  003A34  0E00               	movlw	0
  5875  003A36  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5876  003A38  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5877  003A3C  ECB5  F01E         	call	_EEPROM_write	;wreg free
  5878                           
  5879                           ;EEPROM.c: 104: }
  5880  003A40  D00A               	goto	l9096
  5881  003A42                     l9094:
  5882                           
  5883                           ;EEPROM.c: 105: else{
  5884                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5885  003A42  0E00               	movlw	0
  5886  003A44  0100               	movlb	0	; () banked
  5887  003A46  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5888  003A48  0E00               	movlw	0
  5889  003A4A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5890  003A4C  0E00               	movlw	0
  5891  003A4E  0100               	movlb	0	; () banked
  5892  003A50  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5893  003A52  ECB5  F01E         	call	_EEPROM_write	;wreg free
  5894  003A56                     l9096:
  5895                           
  5896                           ;EEPROM.c: 107: }
  5897                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5898  003A56  0100               	movlb	0	; () banked
  5899  003A58  51FE               	movf	_count_total& (0+255),w,b
  5900  003A5A  0980               	iorlw	128
  5901  003A5C  0100               	movlb	0	; () banked
  5902  003A5E  6FB2               	movwf	logRun@byte1& (0+255),b
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5906  003A60  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5907  003A64  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5908  003A68  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5909  003A6C  ECB5  F01E         	call	_EEPROM_write	;wreg free
  5910                           
  5911                           ;EEPROM.c: 112: addr++;
  5912  003A70  0100               	movlb	0	; () banked
  5913  003A72  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5914  003A74  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5918  003A76  0101               	movlb	1	; () banked
  5919  003A78  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  5920  003A7A  0BF0               	andlw	240
  5921  003A7C  0101               	movlb	1	; () banked
  5922  003A7E  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  5923  003A80  0100               	movlb	0	; () banked
  5924  003A82  6FB3               	movwf	logRun@byte2& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5928  003A84  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5929  003A88  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5930  003A8C  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5931  003A90  ECB5  F01E         	call	_EEPROM_write	;wreg free
  5932                           
  5933                           ;EEPROM.c: 117: addr++;
  5934  003A94  0100               	movlb	0	; () banked
  5935  003A96  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5936  003A98  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5940  003A9A  0101               	movlb	1	; () banked
  5941  003A9C  3925               	swapf	_count_can_w_lab& (0+255),w,b
  5942  003A9E  0BF0               	andlw	240
  5943  003AA0  0101               	movlb	1	; () banked
  5944  003AA2  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  5945  003AA4  0100               	movlb	0	; () banked
  5946  003AA6  6FB4               	movwf	logRun@byte3& (0+255),b
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5950  003AA8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5951  003AAC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5952  003AB0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5953  003AB4  ECB5  F01E         	call	_EEPROM_write	;wreg free
  5954                           
  5955                           ;EEPROM.c: 120: addr++;
  5956  003AB8  0100               	movlb	0	; () banked
  5957  003ABA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5958  003ABC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5962  003ABE  0E00               	movlw	0
  5963  003AC0  0100               	movlb	0	; () banked
  5964  003AC2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5965  003AC4  0E00               	movlw	0
  5966  003AC6  6FB7               	movwf	logRun@i& (0+255),b
  5967                           
  5968                           ; BSR set to: 0
  5969  003AC8  0100               	movlb	0	; () banked
  5970  003ACA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5971  003ACC  D008               	goto	l9120
  5972  003ACE  0100               	movlb	0	; () banked
  5973  003AD0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5974  003AD2  E128               	bnz	l1048
  5975  003AD4  0E07               	movlw	7
  5976  003AD6  0100               	movlb	0	; () banked
  5977  003AD8  5DB7               	subwf	logRun@i& (0+255),w,b
  5978  003ADA  B0D8               	btfsc	status,0,c
  5979  003ADC  D023               	goto	l1048
  5980  003ADE                     l9120:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5984  003ADE  90D8               	bcf	status,0,c
  5985  003AE0  0100               	movlb	0	; () banked
  5986  003AE2  35B7               	rlcf	logRun@i& (0+255),w,b
  5987  003AE4  6ED9               	movwf	fsr2l,c
  5988  003AE6  0100               	movlb	0	; () banked
  5989  003AE8  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5990  003AEA  6EDA               	movwf	fsr2h,c
  5991  003AEC  0E0E               	movlw	low _startTime
  5992  003AEE  26D9               	addwf	fsr2l,f,c
  5993  003AF0  0E01               	movlw	high _startTime
  5994  003AF2  22DA               	addwfc	fsr2h,f,c
  5995  003AF4  50DF               	movf	indf2,w,c
  5996  003AF6  0100               	movlb	0	; () banked
  5997  003AF8  6FB5               	movwf	logRun@byte_i& (0+255),b
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6001  003AFA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6002  003AFE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6003  003B02  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6004  003B06  ECB5  F01E         	call	_EEPROM_write	;wreg free
  6005                           
  6006                           ;EEPROM.c: 126: addr++;
  6007  003B0A  0100               	movlb	0	; () banked
  6008  003B0C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6009  003B0E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6010                           
  6011                           ; BSR set to: 0
  6012  003B10  0100               	movlb	0	; () banked
  6013  003B12  4BB7               	infsnz	logRun@i& (0+255),f,b
  6014  003B14  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6015                           
  6016                           ; BSR set to: 0
  6017  003B16  0100               	movlb	0	; () banked
  6018  003B18  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6019  003B1A  D7E1               	goto	l9120
  6020  003B1C  0100               	movlb	0	; () banked
  6021  003B1E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6022  003B20  E101               	bnz	u8160
  6023  003B22  D7D8               	goto	L7
  6024  003B24                     u8160:
  6025  003B24                     l1048:
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;EEPROM.c: 127: }
  6029                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6030  003B24  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6034  003B28  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6035  003B2C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6036  003B30  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6037  003B34  ECB5  F01E         	call	_EEPROM_write	;wreg free
  6038  003B38  0012               	return		;funcret
  6039  003B3A                     __end_of_logRun:
  6040                           	opt stack 0
  6041                           tblptru	equ	0xFF8
  6042                           tblptrh	equ	0xFF7
  6043                           tblptrl	equ	0xFF6
  6044                           tablat	equ	0xFF5
  6045                           prodh	equ	0xFF4
  6046                           prodl	equ	0xFF3
  6047                           intcon	equ	0xFF2
  6048                           intcon2	equ	0xFF1
  6049                           intcon3	equ	0xFF0
  6050                           postinc0	equ	0xFEE
  6051                           wreg	equ	0xFE8
  6052                           postdec1	equ	0xFE5
  6053                           fsr1l	equ	0xFE1
  6054                           indf2	equ	0xFDF
  6055                           postinc2	equ	0xFDE
  6056                           postdec2	equ	0xFDD
  6057                           fsr2h	equ	0xFDA
  6058                           fsr2l	equ	0xFD9
  6059                           status	equ	0xFD8
  6060                           
  6061 ;; *************** function _EEPROM_write *****************
  6062 ;; Defined at:
  6063 ;;		line 32 in file "EEPROM.c"
  6064 ;; Parameters:    Size  Location     Type
  6065 ;;  address         2   43[BANK0 ] unsigned short 
  6066 ;;  data            1   45[BANK0 ] unsigned char 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  i               1   48[BANK0 ] unsigned char 
  6069 ;;  i               1   47[BANK0 ] unsigned char 
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6079 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;Total ram usage:        6 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:   10
  6086 ;; This function calls:
  6087 ;;		_EEPROM_read
  6088 ;;		_lcdInst
  6089 ;;		_printf
  6090 ;; This function is called by:
  6091 ;;		_Loading
  6092 ;;		_logRun
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           	psect	text14
  6097  003D6A                     __ptext14:
  6098                           	opt stack 0
  6099  003D6A                     _EEPROM_write:
  6100                           	opt stack 18
  6101                           
  6102                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6103                           
  6104                           ;incstack = 0
  6105  003D6A  84A6               	bsf	4006,2,c	;volatile
  6106                           
  6107                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6108  003D6C  0100               	movlb	0	; () banked
  6109  003D6E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6110  003D70  6EAA               	movwf	4010,c	;volatile
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6114  003D72  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;EEPROM.c: 39: EEDATA = data;
  6118  003D76  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6122  003D7A  9EA6               	bcf	4006,7,c	;volatile
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6126  003D7C  9CA6               	bcf	4006,6,c	;volatile
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6130  003D7E  9EF2               	bcf	intcon,7,c	;volatile
  6131                           
  6132                           ;EEPROM.c: 45: EECON2 = 0x55;
  6133  003D80  0E55               	movlw	85
  6134  003D82  6EA7               	movwf	4007,c	;volatile
  6135                           
  6136                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6137  003D84  0EAA               	movlw	170
  6138  003D86  6EA7               	movwf	4007,c	;volatile
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6142  003D88  82A6               	bsf	4006,1,c	;volatile
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6146  003D8A  8EF2               	bsf	intcon,7,c	;volatile
  6147  003D8C                     l1026:
  6148  003D8C  A8A1               	btfss	4001,4,c	;volatile
  6149  003D8E  D7FE               	goto	l1026
  6150                           
  6151                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6152  003D90  98A1               	bcf	4001,4,c	;volatile
  6153                           
  6154                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6155  003D92  94A6               	bcf	4006,2,c	;volatile
  6156                           
  6157                           ;EEPROM.c: 57: if(debug){
  6158  003D94  0101               	movlb	1	; () banked
  6159  003D96  512D               	movf	_debug& (0+255),w,b
  6160  003D98  0101               	movlb	1	; () banked
  6161  003D9A  112E               	iorwf	(_debug+1)& (0+255),w,b
  6162  003D9C  B4D8               	btfsc	status,2,c
  6163  003D9E  0012               	return	
  6164                           
  6165                           ; BSR set to: 1
  6166                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6167  003DA0  0E01               	movlw	1
  6168  003DA2  EC5C  F029         	call	_lcdInst
  6169  003DA6  0E68               	movlw	104
  6170  003DA8  0100               	movlb	0	; () banked
  6171  003DAA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6172  003DAC  0EE4               	movlw	228
  6173  003DAE                     u8867:
  6174  003DAE  2EE8               	decfsz	wreg,f,c
  6175  003DB0  D7FE               	bra	u8867
  6176  003DB2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6177  003DB4  D7FC               	bra	u8867
  6178  003DB6  F000               	nop	
  6179                           
  6180                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6181  003DB8  0E80               	movlw	128
  6182  003DBA  EC5C  F029         	call	_lcdInst
  6183                           
  6184                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6185  003DBE  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6186  003DC2  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6187  003DC6  EC2A  F029         	call	_EEPROM_read	;wreg free
  6188  003DCA  0100               	movlb	0	; () banked
  6189  003DCC  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6190  003DCE  A4D8               	btfss	status,2,c
  6191  003DD0  D024               	goto	l6860
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6195  003DD2  0E1E               	movlw	low STR_67
  6196  003DD4  0100               	movlb	0	; () banked
  6197  003DD6  6F8E               	movwf	printf@f& (0+255),b
  6198  003DD8  0EFB               	movlw	high STR_67
  6199  003DDA  0100               	movlb	0	; () banked
  6200  003DDC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6201  003DDE  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6202  003DE2  0100               	movlb	0	; () banked
  6203  003DE4  6B91               	clrf	(?_printf+3)& (0+255),b
  6204  003DE6  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6205  003DEA  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6206  003DEE  EC02  F00B         	call	_printf	;wreg free
  6207                           
  6208                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6209  003DF2  0E00               	movlw	0
  6210  003DF4  0100               	movlb	0	; () banked
  6211  003DF6  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6212  003DF8                     l6852:
  6213                           
  6214                           ; BSR set to: 0
  6215  003DF8  0E63               	movlw	99
  6216  003DFA  0100               	movlb	0	; () banked
  6217  003DFC  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6218  003DFE  D001               	goto	l6856
  6219  003E00  0012               	return	
  6220  003E02                     l6856:
  6221                           
  6222                           ; BSR set to: 0
  6223  003E02  0E68               	movlw	104
  6224  003E04  0100               	movlb	0	; () banked
  6225  003E06  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6226  003E08  0EE4               	movlw	228
  6227  003E0A                     u8877:
  6228  003E0A  2EE8               	decfsz	wreg,f,c
  6229  003E0C  D7FE               	bra	u8877
  6230  003E0E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6231  003E10  D7FC               	bra	u8877
  6232  003E12  F000               	nop	
  6233  003E14  0100               	movlb	0	; () banked
  6234  003E16  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6235  003E18  D7EF               	goto	l6852
  6236  003E1A                     l6860:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6240  003E1A  0EB9               	movlw	low STR_68
  6241  003E1C  0100               	movlb	0	; () banked
  6242  003E1E  6F8E               	movwf	printf@f& (0+255),b
  6243  003E20  0EFF               	movlw	high STR_68
  6244  003E22  0100               	movlb	0	; () banked
  6245  003E24  6F8F               	movwf	(printf@f+1)& (0+255),b
  6246  003E26  EC02  F00B         	call	_printf	;wreg free
  6247  003E2A  0E00               	movlw	0
  6248  003E2C  0100               	movlb	0	; () banked
  6249  003E2E  6FB0               	movwf	EEPROM_write@i_1398& (0+255),b
  6250  003E30                     l6864:
  6251                           
  6252                           ; BSR set to: 0
  6253  003E30  0E63               	movlw	99
  6254  003E32  0100               	movlb	0	; () banked
  6255  003E34  65B0               	cpfsgt	EEPROM_write@i_1398& (0+255),b
  6256  003E36  D001               	goto	l6868
  6257  003E38  0012               	return	
  6258  003E3A                     l6868:
  6259                           
  6260                           ; BSR set to: 0
  6261  003E3A  0E68               	movlw	104
  6262  003E3C  0100               	movlb	0	; () banked
  6263  003E3E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6264  003E40  0EE4               	movlw	228
  6265  003E42                     u8887:
  6266  003E42  2EE8               	decfsz	wreg,f,c
  6267  003E44  D7FE               	bra	u8887
  6268  003E46  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6269  003E48  D7FC               	bra	u8887
  6270  003E4A  F000               	nop	
  6271  003E4C  0100               	movlb	0	; () banked
  6272  003E4E  2BB0               	incf	EEPROM_write@i_1398& (0+255),f,b
  6273  003E50  D7EF               	goto	l6864
  6274  003E52                     __end_of_EEPROM_write:
  6275                           	opt stack 0
  6276                           tblptru	equ	0xFF8
  6277                           tblptrh	equ	0xFF7
  6278                           tblptrl	equ	0xFF6
  6279                           tablat	equ	0xFF5
  6280                           prodh	equ	0xFF4
  6281                           prodl	equ	0xFF3
  6282                           intcon	equ	0xFF2
  6283                           intcon2	equ	0xFF1
  6284                           intcon3	equ	0xFF0
  6285                           postinc0	equ	0xFEE
  6286                           wreg	equ	0xFE8
  6287                           postdec1	equ	0xFE5
  6288                           fsr1l	equ	0xFE1
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           postdec2	equ	0xFDD
  6292                           fsr2h	equ	0xFDA
  6293                           fsr2l	equ	0xFD9
  6294                           status	equ	0xFD8
  6295                           
  6296 ;; *************** function _EEPROM_read *****************
  6297 ;; Defined at:
  6298 ;;		line 68 in file "EEPROM.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;  address         2    0[BANK0 ] unsigned short 
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;		None
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  1    wreg      unsigned char 
  6305 ;; Registers used:
  6306 ;;		wreg, status,2
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;Total ram usage:        2 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    7
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_Loading
  6323 ;;		_EEPROM_write
  6324 ;;		_logRun
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text15
  6329  005254                     __ptext15:
  6330                           	opt stack 0
  6331  005254                     _EEPROM_read:
  6332                           	opt stack 20
  6333                           
  6334                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6335                           
  6336                           ;incstack = 0
  6337  005254  0100               	movlb	0	; () banked
  6338  005256  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6339  005258  6EAA               	movwf	4010,c	;volatile
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6343  00525A  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6347  00525E  9EA6               	bcf	4006,7,c	;volatile
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6351  005260  9CA6               	bcf	4006,6,c	;volatile
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6355  005262  80A6               	bsf	4006,0,c	;volatile
  6356  005264                     l1039:
  6357  005264  B0A6               	btfsc	4006,0,c	;volatile
  6358  005266  D7FE               	goto	l1039
  6359                           
  6360                           ;EEPROM.c: 81: return EEDATA;
  6361  005268  50A8               	movf	4008,w,c	;volatile
  6362  00526A  0012               	return	
  6363  00526C                     __end_of_EEPROM_read:
  6364                           	opt stack 0
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           intcon	equ	0xFF2
  6372                           intcon2	equ	0xFF1
  6373                           intcon3	equ	0xFF0
  6374                           postinc0	equ	0xFEE
  6375                           wreg	equ	0xFE8
  6376                           postdec1	equ	0xFE5
  6377                           fsr1l	equ	0xFE1
  6378                           indf2	equ	0xFDF
  6379                           postinc2	equ	0xFDE
  6380                           postdec2	equ	0xFDD
  6381                           fsr2h	equ	0xFDA
  6382                           fsr2l	equ	0xFD9
  6383                           status	equ	0xFD8
  6384                           
  6385 ;; *************** function _initUI *****************
  6386 ;; Defined at:
  6387 ;;		line 62 in file "UI.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;		None
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;		None
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  1    wreg      void 
  6394 ;; Registers used:
  6395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;Total ram usage:        0 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:   12
  6408 ;; This function calls:
  6409 ;;		_change_state_to_menu_start
  6410 ;;		_loadRTC
  6411 ;; This function is called by:
  6412 ;;		_main
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text16
  6417  004E3E                     __ptext16:
  6418                           	opt stack 0
  6419  004E3E                     _initUI:
  6420                           	opt stack 18
  6421                           
  6422                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6423                           
  6424                           ;incstack = 0
  6425  004E3E  8EF2               	bsf	intcon,7,c	;volatile
  6426                           
  6427                           ;UI.c: 64: machine_state = UI_state;
  6428  004E40  0E00               	movlw	0
  6429  004E42  0100               	movlb	0	; () banked
  6430  004E44  6FFC               	movwf	_machine_state& (0+255),b
  6431                           
  6432                           ;UI.c: 65: logstate = 0;
  6433  004E46  0E00               	movlw	0
  6434  004E48  0100               	movlb	0	; () banked
  6435  004E4A  6FF7               	movwf	(_logstate+1)& (0+255),b
  6436  004E4C  0E00               	movlw	0
  6437  004E4E  6FF6               	movwf	_logstate& (0+255),b
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;UI.c: 67: if(RTCflag){
  6441  004E50  0100               	movlb	0	; () banked
  6442  004E52  51EA               	movf	_RTCflag& (0+255),w,b
  6443  004E54  0100               	movlb	0	; () banked
  6444  004E56  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6445  004E58  A4D8               	btfss	status,2,c
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;UI.c: 68: loadRTC();
  6449  004E5A  EC20  F022         	call	_loadRTC	;wreg free
  6450                           
  6451                           ;UI.c: 69: }
  6452                           ;UI.c: 71: change_state_to_menu_start();
  6453  004E5E  EC3D  F028         	call	_change_state_to_menu_start	;wreg free
  6454                           
  6455                           ;UI.c: 72: firstboot = 1;
  6456  004E62  0E00               	movlw	0
  6457  004E64  0101               	movlb	1	; () banked
  6458  004E66  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6459  004E68  0E01               	movlw	1
  6460  004E6A  6F3B               	movwf	_firstboot& (0+255),b
  6461                           
  6462                           ; BSR set to: 1
  6463  004E6C  0012               	return		;funcret
  6464  004E6E                     __end_of_initUI:
  6465                           	opt stack 0
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           intcon	equ	0xFF2
  6473                           intcon2	equ	0xFF1
  6474                           intcon3	equ	0xFF0
  6475                           postinc0	equ	0xFEE
  6476                           wreg	equ	0xFE8
  6477                           postdec1	equ	0xFE5
  6478                           fsr1l	equ	0xFE1
  6479                           indf2	equ	0xFDF
  6480                           postinc2	equ	0xFDE
  6481                           postdec2	equ	0xFDD
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _loadRTC *****************
  6487 ;; Defined at:
  6488 ;;		line 28 in file "RTC.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;  i               2   22[BANK0 ] int 
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;Total ram usage:        3 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    9
  6509 ;; This function calls:
  6510 ;;		_I2C_Master_Init
  6511 ;;		_I2C_Master_Start
  6512 ;;		_I2C_Master_Stop
  6513 ;;		_I2C_Master_Write
  6514 ;; This function is called by:
  6515 ;;		_initUI
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           	psect	text17
  6520  004440                     __ptext17:
  6521                           	opt stack 0
  6522  004440                     _loadRTC:
  6523                           	opt stack 20
  6524                           
  6525                           ;RTC.c: 30: I2C_Master_Init(10000);
  6526                           
  6527                           ; BSR set to: 1
  6528                           ;incstack = 0
  6529  004440  0E10               	movlw	16
  6530  004442  0100               	movlb	0	; () banked
  6531  004444  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6532  004446  0E27               	movlw	39
  6533  004448  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6534  00444A  0E00               	movlw	0
  6535  00444C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6536  00444E  0E00               	movlw	0
  6537  004450  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6538  004452  ECBB  F024         	call	_I2C_Master_Init	;wreg free
  6539                           
  6540                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6541  004456  9EF2               	bcf	intcon,7,c	;volatile
  6542                           
  6543                           ;RTC.c: 34: I2C_Master_Start();
  6544  004458  EC82  F029         	call	_I2C_Master_Start	;wreg free
  6545                           
  6546                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6547  00445C  0E00               	movlw	0
  6548  00445E  0100               	movlb	0	; () banked
  6549  004460  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6550  004462  0ED0               	movlw	208
  6551  004464  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6552  004466  EC70  F029         	call	_I2C_Master_Write	;wreg free
  6553                           
  6554                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6555  00446A  0E00               	movlw	0
  6556  00446C  0100               	movlb	0	; () banked
  6557  00446E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6558  004470  0E00               	movlw	0
  6559  004472  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6560  004474  EC70  F029         	call	_I2C_Master_Write	;wreg free
  6561                           
  6562                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6563  004478  0E00               	movlw	0
  6564  00447A  0100               	movlb	0	; () banked
  6565  00447C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6566  00447E  0E00               	movlw	0
  6567  004480  6F96               	movwf	loadRTC@i& (0+255),b
  6568  004482                     l7006:
  6569                           
  6570                           ; BSR set to: 0
  6571  004482  0100               	movlb	0	; () banked
  6572  004484  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6573  004486  D008               	goto	l7010
  6574  004488  0100               	movlb	0	; () banked
  6575  00448A  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6576  00448C  E11B               	bnz	l7016
  6577  00448E  0E07               	movlw	7
  6578  004490  0100               	movlb	0	; () banked
  6579  004492  5D96               	subwf	loadRTC@i& (0+255),w,b
  6580  004494  B0D8               	btfsc	status,0,c
  6581  004496  D016               	goto	l7016
  6582  004498                     l7010:
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6586  004498  0E1C               	movlw	low _time
  6587  00449A  0100               	movlb	0	; () banked
  6588  00449C  2596               	addwf	loadRTC@i& (0+255),w,b
  6589  00449E  6ED9               	movwf	fsr2l,c
  6590  0044A0  0E01               	movlw	high _time
  6591  0044A2  0100               	movlb	0	; () banked
  6592  0044A4  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6593  0044A6  6EDA               	movwf	fsr2h,c
  6594  0044A8  50DF               	movf	indf2,w,c
  6595  0044AA  0100               	movlb	0	; () banked
  6596  0044AC  6F95               	movwf	??_loadRTC& (0+255),b
  6597  0044AE  0100               	movlb	0	; () banked
  6598  0044B0  5195               	movf	??_loadRTC& (0+255),w,b
  6599  0044B2  0100               	movlb	0	; () banked
  6600  0044B4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6601  0044B6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6602  0044B8  EC70  F029         	call	_I2C_Master_Write	;wreg free
  6603  0044BC  0100               	movlb	0	; () banked
  6604  0044BE  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6605  0044C0  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6606  0044C2  D7DF               	goto	l7006
  6607  0044C4                     l7016:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;RTC.c: 39: }
  6611                           ;RTC.c: 40: I2C_Master_Stop();
  6612  0044C4  EC7E  F029         	call	_I2C_Master_Stop	;wreg free
  6613                           
  6614                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6615  0044C8  8EF2               	bsf	intcon,7,c	;volatile
  6616  0044CA  0012               	return		;funcret
  6617  0044CC                     __end_of_loadRTC:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           intcon	equ	0xFF2
  6626                           intcon2	equ	0xFF1
  6627                           intcon3	equ	0xFF0
  6628                           postinc0	equ	0xFEE
  6629                           wreg	equ	0xFE8
  6630                           postdec1	equ	0xFE5
  6631                           fsr1l	equ	0xFE1
  6632                           indf2	equ	0xFDF
  6633                           postinc2	equ	0xFDE
  6634                           postdec2	equ	0xFDD
  6635                           fsr2h	equ	0xFDA
  6636                           fsr2l	equ	0xFD9
  6637                           status	equ	0xFD8
  6638                           
  6639 ;; *************** function _I2C_Master_Init *****************
  6640 ;; Defined at:
  6641 ;;		line 15 in file "I2C.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;  c               4   13[BANK0 ] const unsigned long 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;		None
  6646 ;; Return value:  Size  Location     Type
  6647 ;;                  1    wreg      void 
  6648 ;; Registers used:
  6649 ;;		wreg, status,2, status,0, cstack
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6655 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;Total ram usage:        8 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:    8
  6662 ;; This function calls:
  6663 ;;		___lldiv
  6664 ;; This function is called by:
  6665 ;;		_main
  6666 ;;		_loadRTC
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text18
  6671  004976                     __ptext18:
  6672                           	opt stack 0
  6673  004976                     _I2C_Master_Init:
  6674                           	opt stack 20
  6675                           
  6676                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6677                           
  6678                           ;incstack = 0
  6679  004976  0E00               	movlw	0
  6680  004978  6EC7               	movwf	4039,c	;volatile
  6681                           
  6682                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6683  00497A  0E28               	movlw	40
  6684  00497C  6EC6               	movwf	4038,c	;volatile
  6685                           
  6686                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6687  00497E  0E00               	movlw	0
  6688  004980  6EC5               	movwf	4037,c	;volatile
  6689                           
  6690                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6691  004982  0E00               	movlw	0
  6692  004984  0100               	movlb	0	; () banked
  6693  004986  6F80               	movwf	___lldiv@dividend& (0+255),b
  6694  004988  0E48               	movlw	72
  6695  00498A  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6696  00498C  0EE8               	movlw	232
  6697  00498E  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6698  004990  0E01               	movlw	1
  6699  004992  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6700  004994  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6701  004998  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6702  00499C  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6703  0049A0  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6704  0049A4  0E02               	movlw	2
  6705  0049A6                     u5195:
  6706  0049A6  90D8               	bcf	status,0,c
  6707  0049A8  0100               	movlb	0	; () banked
  6708  0049AA  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6709  0049AC  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6710  0049AE  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6711  0049B0  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6712  0049B2  2EE8               	decfsz	wreg,f,c
  6713  0049B4  D7F8               	goto	u5195
  6714  0049B6  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6715  0049BA  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6716  0049BE  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6717  0049C2  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6718  0049C6  ECC6  F020         	call	___lldiv	;wreg free
  6719  0049CA  0100               	movlb	0	; () banked
  6720  0049CC  0580               	decf	?___lldiv& (0+255),w,b
  6721  0049CE  6EC8               	movwf	4040,c	;volatile
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;I2C.c: 22: TRISC3 = 1;
  6725  0049D0  8694               	bsf	3988,3,c	;volatile
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;I2C.c: 23: TRISC4 = 1;
  6729  0049D2  8894               	bsf	3988,4,c	;volatile
  6730                           
  6731                           ; BSR set to: 0
  6732  0049D4  0012               	return		;funcret
  6733  0049D6                     __end_of_I2C_Master_Init:
  6734                           	opt stack 0
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           intcon	equ	0xFF2
  6742                           intcon2	equ	0xFF1
  6743                           intcon3	equ	0xFF0
  6744                           postinc0	equ	0xFEE
  6745                           wreg	equ	0xFE8
  6746                           postdec1	equ	0xFE5
  6747                           fsr1l	equ	0xFE1
  6748                           indf2	equ	0xFDF
  6749                           postinc2	equ	0xFDE
  6750                           postdec2	equ	0xFDD
  6751                           fsr2h	equ	0xFDA
  6752                           fsr2l	equ	0xFD9
  6753                           status	equ	0xFD8
  6754                           
  6755 ;; *************** function ___lldiv *****************
  6756 ;; Defined at:
  6757 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;  dividend        4    0[BANK0 ] unsigned long 
  6760 ;;  divisor         4    4[BANK0 ] unsigned long 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;  quotient        4    8[BANK0 ] unsigned long 
  6763 ;;  counter         1   12[BANK0 ] unsigned char 
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  4    0[BANK0 ] unsigned long 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2, status,0
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6773 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;Total ram usage:       13 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    7
  6780 ;; This function calls:
  6781 ;;		Nothing
  6782 ;; This function is called by:
  6783 ;;		_I2C_Master_Init
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text19
  6788  00418C                     __ptext19:
  6789                           	opt stack 0
  6790  00418C                     ___lldiv:
  6791                           	opt stack 20
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;incstack = 0
  6795  00418C  0E00               	movlw	0
  6796  00418E  0100               	movlb	0	; () banked
  6797  004190  6F88               	movwf	___lldiv@quotient& (0+255),b
  6798  004192  0E00               	movlw	0
  6799  004194  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6800  004196  0E00               	movlw	0
  6801  004198  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6802  00419A  0E00               	movlw	0
  6803  00419C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6804                           
  6805                           ; BSR set to: 0
  6806  00419E  0100               	movlb	0	; () banked
  6807  0041A0  5184               	movf	___lldiv@divisor& (0+255),w,b
  6808  0041A2  0100               	movlb	0	; () banked
  6809  0041A4  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6810  0041A6  0100               	movlb	0	; () banked
  6811  0041A8  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6812  0041AA  0100               	movlb	0	; () banked
  6813  0041AC  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6814  0041AE  B4D8               	btfsc	status,2,c
  6815  0041B0  D042               	goto	l1800
  6816                           
  6817                           ; BSR set to: 0
  6818  0041B2  0E01               	movlw	1
  6819  0041B4  0100               	movlb	0	; () banked
  6820  0041B6  6F8C               	movwf	___lldiv@counter& (0+255),b
  6821  0041B8  D008               	goto	l6426
  6822  0041BA                     l6424:
  6823                           
  6824                           ; BSR set to: 0
  6825  0041BA  0100               	movlb	0	; () banked
  6826  0041BC  90D8               	bcf	status,0,c
  6827  0041BE  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6828  0041C0  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6829  0041C2  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6830  0041C4  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6831  0041C6  0100               	movlb	0	; () banked
  6832  0041C8  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6833  0041CA                     l6426:
  6834                           
  6835                           ; BSR set to: 0
  6836  0041CA  0100               	movlb	0	; () banked
  6837  0041CC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6838  0041CE  D7F5               	goto	l6424
  6839  0041D0                     l6428:
  6840                           
  6841                           ; BSR set to: 0
  6842  0041D0  0100               	movlb	0	; () banked
  6843  0041D2  90D8               	bcf	status,0,c
  6844  0041D4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6845  0041D6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6846  0041D8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6847  0041DA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6848                           
  6849                           ; BSR set to: 0
  6850  0041DC  0100               	movlb	0	; () banked
  6851  0041DE  5184               	movf	___lldiv@divisor& (0+255),w,b
  6852  0041E0  0100               	movlb	0	; () banked
  6853  0041E2  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6854  0041E4  0100               	movlb	0	; () banked
  6855  0041E6  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6856  0041E8  0100               	movlb	0	; () banked
  6857  0041EA  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6858  0041EC  0100               	movlb	0	; () banked
  6859  0041EE  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6860  0041F0  0100               	movlb	0	; () banked
  6861  0041F2  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6862  0041F4  0100               	movlb	0	; () banked
  6863  0041F6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6864  0041F8  0100               	movlb	0	; () banked
  6865  0041FA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6866  0041FC  A0D8               	btfss	status,0,c
  6867  0041FE  D012               	goto	l6436
  6868                           
  6869                           ; BSR set to: 0
  6870  004200  0100               	movlb	0	; () banked
  6871  004202  5184               	movf	___lldiv@divisor& (0+255),w,b
  6872  004204  0100               	movlb	0	; () banked
  6873  004206  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6874  004208  0100               	movlb	0	; () banked
  6875  00420A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6876  00420C  0100               	movlb	0	; () banked
  6877  00420E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6878  004210  0100               	movlb	0	; () banked
  6879  004212  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6880  004214  0100               	movlb	0	; () banked
  6881  004216  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6882  004218  0100               	movlb	0	; () banked
  6883  00421A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6884  00421C  0100               	movlb	0	; () banked
  6885  00421E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6886                           
  6887                           ; BSR set to: 0
  6888  004220  0100               	movlb	0	; () banked
  6889  004222  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6890  004224                     l6436:
  6891                           
  6892                           ; BSR set to: 0
  6893  004224  0100               	movlb	0	; () banked
  6894  004226  90D8               	bcf	status,0,c
  6895  004228  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6896  00422A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6897  00422C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6898  00422E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6899                           
  6900                           ; BSR set to: 0
  6901  004230  0100               	movlb	0	; () banked
  6902  004232  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6903  004234  D7CD               	goto	l6428
  6904  004236                     l1800:
  6905                           
  6906                           ; BSR set to: 0
  6907  004236  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6908  00423A  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6909  00423E  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6910  004242  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6911                           
  6912                           ; BSR set to: 0
  6913  004246  0012               	return		;funcret
  6914  004248                     __end_of___lldiv:
  6915                           	opt stack 0
  6916                           tblptru	equ	0xFF8
  6917                           tblptrh	equ	0xFF7
  6918                           tblptrl	equ	0xFF6
  6919                           tablat	equ	0xFF5
  6920                           prodh	equ	0xFF4
  6921                           prodl	equ	0xFF3
  6922                           intcon	equ	0xFF2
  6923                           intcon2	equ	0xFF1
  6924                           intcon3	equ	0xFF0
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           postdec1	equ	0xFE5
  6928                           fsr1l	equ	0xFE1
  6929                           indf2	equ	0xFDF
  6930                           postinc2	equ	0xFDE
  6931                           postdec2	equ	0xFDD
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function _change_state_to_menu_start *****************
  6937 ;; Defined at:
  6938 ;;		line 474 in file "UI.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:   11
  6959 ;; This function calls:
  6960 ;;		_lcdInst
  6961 ;;		_printRTC
  6962 ;;		_printf
  6963 ;; This function is called by:
  6964 ;;		_initUI
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           	psect	text20
  6969  00507A                     __ptext20:
  6970                           	opt stack 0
  6971  00507A                     _change_state_to_menu_start:
  6972                           	opt stack 18
  6973                           
  6974                           ;UI.c: 475: cur_state = 0;
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;incstack = 0
  6978  00507A  0E00               	movlw	0
  6979  00507C  0100               	movlb	0	; () banked
  6980  00507E  6FED               	movwf	(_cur_state+1)& (0+255),b
  6981  005080  0E00               	movlw	0
  6982  005082  6FEC               	movwf	_cur_state& (0+255),b
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;UI.c: 477: lcdInst(0b10000000);;
  6986  005084  0E80               	movlw	128
  6987  005086  EC5C  F029         	call	_lcdInst
  6988                           
  6989                           ;UI.c: 478: printRTC();
  6990  00508A  EC16  F012         	call	_printRTC	;wreg free
  6991                           
  6992                           ;UI.c: 479: lcdInst(0b11000000);;
  6993  00508E  0EC0               	movlw	192
  6994  005090  EC5C  F029         	call	_lcdInst
  6995                           
  6996                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6997  005094  0EF3               	movlw	low STR_30
  6998  005096  0100               	movlb	0	; () banked
  6999  005098  6F8E               	movwf	printf@f& (0+255),b
  7000  00509A  0EFD               	movlw	high STR_30
  7001  00509C  0100               	movlb	0	; () banked
  7002  00509E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7003  0050A0  EC02  F00B         	call	_printf	;wreg free
  7004  0050A4  0012               	return		;funcret
  7005  0050A6                     __end_of_change_state_to_menu_start:
  7006                           	opt stack 0
  7007                           tblptru	equ	0xFF8
  7008                           tblptrh	equ	0xFF7
  7009                           tblptrl	equ	0xFF6
  7010                           tablat	equ	0xFF5
  7011                           prodh	equ	0xFF4
  7012                           prodl	equ	0xFF3
  7013                           intcon	equ	0xFF2
  7014                           intcon2	equ	0xFF1
  7015                           intcon3	equ	0xFF0
  7016                           postinc0	equ	0xFEE
  7017                           wreg	equ	0xFE8
  7018                           postdec1	equ	0xFE5
  7019                           fsr1l	equ	0xFE1
  7020                           indf2	equ	0xFDF
  7021                           postinc2	equ	0xFDE
  7022                           postdec2	equ	0xFDD
  7023                           fsr2h	equ	0xFDA
  7024                           fsr2l	equ	0xFD9
  7025                           status	equ	0xFD8
  7026                           
  7027 ;; *************** function _initTime *****************
  7028 ;; Defined at:
  7029 ;;		line 17 in file "RTC.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;  s               1    wreg     unsigned char 
  7032 ;;  m               1    0[BANK0 ] unsigned char 
  7033 ;;  h               1    1[BANK0 ] unsigned char 
  7034 ;;  w               1    2[BANK0 ] unsigned char 
  7035 ;;  DD              1    3[BANK0 ] unsigned char 
  7036 ;;  MM              1    4[BANK0 ] unsigned char 
  7037 ;;  YY              1    5[BANK0 ] unsigned char 
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;  s               1    6[BANK0 ] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;                  1    wreg      void 
  7042 ;; Registers used:
  7043 ;;		wreg
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7049 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;Total ram usage:        7 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:    7
  7056 ;; This function calls:
  7057 ;;		Nothing
  7058 ;; This function is called by:
  7059 ;;		_main
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           	psect	text21
  7064  0051DE                     __ptext21:
  7065                           	opt stack 0
  7066  0051DE                     _initTime:
  7067                           	opt stack 23
  7068                           
  7069                           ;incstack = 0
  7070                           ;initTime@s stored from wreg
  7071  0051DE  0100               	movlb	0	; () banked
  7072  0051E0  6F86               	movwf	initTime@s& (0+255),b
  7073                           
  7074                           ;RTC.c: 19: time[0] = s;
  7075  0051E2  C086  F11C         	movff	initTime@s,_time
  7076                           
  7077                           ;RTC.c: 20: time[1] = m;
  7078  0051E6  C080  F11D         	movff	initTime@m,_time+1
  7079                           
  7080                           ;RTC.c: 21: time[2] = h;
  7081  0051EA  C081  F11E         	movff	initTime@h,_time+2
  7082                           
  7083                           ;RTC.c: 22: time[3] = w;
  7084  0051EE  C082  F11F         	movff	initTime@w,_time+3
  7085                           
  7086                           ;RTC.c: 23: time[4] = DD;
  7087  0051F2  C083  F120         	movff	initTime@DD,_time+4
  7088                           
  7089                           ;RTC.c: 24: time[5] = MM;
  7090  0051F6  C084  F121         	movff	initTime@MM,_time+5
  7091                           
  7092                           ;RTC.c: 25: time[6] = YY;
  7093  0051FA  C085  F122         	movff	initTime@YY,_time+6
  7094  0051FE  0012               	return		;funcret
  7095  005200                     __end_of_initTime:
  7096                           	opt stack 0
  7097                           tblptru	equ	0xFF8
  7098                           tblptrh	equ	0xFF7
  7099                           tblptrl	equ	0xFF6
  7100                           tablat	equ	0xFF5
  7101                           prodh	equ	0xFF4
  7102                           prodl	equ	0xFF3
  7103                           intcon	equ	0xFF2
  7104                           intcon2	equ	0xFF1
  7105                           intcon3	equ	0xFF0
  7106                           postinc0	equ	0xFEE
  7107                           wreg	equ	0xFE8
  7108                           postdec1	equ	0xFE5
  7109                           fsr1l	equ	0xFE1
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           fsr2h	equ	0xFDA
  7114                           fsr2l	equ	0xFD9
  7115                           status	equ	0xFD8
  7116                           
  7117 ;; *************** function _initLCD *****************
  7118 ;; Defined at:
  7119 ;;		line 48 in file "lcd.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;		None
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;		None
  7124 ;; Return value:  Size  Location     Type
  7125 ;;                  1    wreg      void 
  7126 ;; Registers used:
  7127 ;;		wreg, status,2, status,0, cstack
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;Total ram usage:        1 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:    9
  7140 ;; This function calls:
  7141 ;;		_lcdInst
  7142 ;; This function is called by:
  7143 ;;		_main
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           	psect	text22
  7148  004C76                     __ptext22:
  7149                           	opt stack 0
  7150  004C76                     _initLCD:
  7151                           	opt stack 21
  7152                           
  7153                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7154                           
  7155                           ;incstack = 0
  7156  004C76  0E9C               	movlw	156
  7157  004C78  0100               	movlb	0	; () banked
  7158  004C7A  6F83               	movwf	??_initLCD& (0+255),b
  7159  004C7C  0ED7               	movlw	215
  7160  004C7E                     u8897:
  7161  004C7E  2EE8               	decfsz	wreg,f,c
  7162  004C80  D7FE               	bra	u8897
  7163  004C82  2F83               	decfsz	??_initLCD& (0+255),f,b
  7164  004C84  D7FC               	bra	u8897
  7165                           
  7166                           ;lcd.c: 50: lcdInst(0b00110011);
  7167  004C86  0E33               	movlw	51
  7168  004C88  EC5C  F029         	call	_lcdInst
  7169                           
  7170                           ;lcd.c: 51: lcdInst(0b00110010);
  7171  004C8C  0E32               	movlw	50
  7172  004C8E  EC5C  F029         	call	_lcdInst
  7173                           
  7174                           ;lcd.c: 53: lcdInst(0b00101000);
  7175  004C92  0E28               	movlw	40
  7176  004C94  EC5C  F029         	call	_lcdInst
  7177                           
  7178                           ;lcd.c: 54: lcdInst(0b00001100);
  7179  004C98  0E0C               	movlw	12
  7180  004C9A  EC5C  F029         	call	_lcdInst
  7181                           
  7182                           ;lcd.c: 55: lcdInst(0b00000110);
  7183  004C9E  0E06               	movlw	6
  7184  004CA0  EC5C  F029         	call	_lcdInst
  7185                           
  7186                           ;lcd.c: 56: lcdInst(0b00000001);
  7187  004CA4  0E01               	movlw	1
  7188  004CA6  EC5C  F029         	call	_lcdInst
  7189                           
  7190                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7191  004CAA  0E9C               	movlw	156
  7192  004CAC  0100               	movlb	0	; () banked
  7193  004CAE  6F83               	movwf	??_initLCD& (0+255),b
  7194  004CB0  0ED7               	movlw	215
  7195  004CB2                     u8907:
  7196  004CB2  2EE8               	decfsz	wreg,f,c
  7197  004CB4  D7FE               	bra	u8907
  7198  004CB6  2F83               	decfsz	??_initLCD& (0+255),f,b
  7199  004CB8  D7FC               	bra	u8907
  7200  004CBA  0012               	return		;funcret
  7201  004CBC                     __end_of_initLCD:
  7202                           	opt stack 0
  7203                           tblptru	equ	0xFF8
  7204                           tblptrh	equ	0xFF7
  7205                           tblptrl	equ	0xFF6
  7206                           tablat	equ	0xFF5
  7207                           prodh	equ	0xFF4
  7208                           prodl	equ	0xFF3
  7209                           intcon	equ	0xFF2
  7210                           intcon2	equ	0xFF1
  7211                           intcon3	equ	0xFF0
  7212                           postinc0	equ	0xFEE
  7213                           wreg	equ	0xFE8
  7214                           postdec1	equ	0xFE5
  7215                           fsr1l	equ	0xFE1
  7216                           indf2	equ	0xFDF
  7217                           postinc2	equ	0xFDE
  7218                           postdec2	equ	0xFDD
  7219                           fsr2h	equ	0xFDA
  7220                           fsr2l	equ	0xFD9
  7221                           status	equ	0xFD8
  7222                           
  7223 ;; *************** function _UI *****************
  7224 ;; Defined at:
  7225 ;;		line 76 in file "UI.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;		None
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;  i               1   73[BANK0 ] unsigned char 
  7230 ;;  i               1   85[BANK0 ] unsigned char 
  7231 ;;  i               1   84[BANK0 ] unsigned char 
  7232 ;;  i               1   83[BANK0 ] unsigned char 
  7233 ;;  i               1   82[BANK0 ] unsigned char 
  7234 ;;  i               1   81[BANK0 ] unsigned char 
  7235 ;;  i               1   80[BANK0 ] unsigned char 
  7236 ;;  i               1   79[BANK0 ] unsigned char 
  7237 ;;  i               1   78[BANK0 ] unsigned char 
  7238 ;;  i               1   77[BANK0 ] unsigned char 
  7239 ;;  i               1   76[BANK0 ] unsigned char 
  7240 ;;  i               1   75[BANK0 ] unsigned char 
  7241 ;;  i               1   74[BANK0 ] unsigned char 
  7242 ;;  month           4   86[BANK0 ] unsigned char [4]
  7243 ;;  i               1   72[BANK0 ] unsigned char 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;Total ram usage:       22 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:   11
  7260 ;; This function calls:
  7261 ;;		___awdiv
  7262 ;;		___awmod
  7263 ;;		_change_state_to_menu_12
  7264 ;;		_change_state_to_menu_22
  7265 ;;		_lcdInst
  7266 ;;		_printRTC
  7267 ;;		_printf
  7268 ;;		_strcpy
  7269 ;; This function is called by:
  7270 ;;		_main
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text23
  7275  0008CA                     __ptext23:
  7276                           	opt stack 0
  7277  0008CA                     _UI:
  7278                           	opt stack 19
  7279                           
  7280                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7281                           
  7282                           ;incstack = 0
  7283  0008CA  0E02               	movlw	2
  7284  0008CC  0100               	movlb	0	; () banked
  7285  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7286  0008D0  A4D8               	btfss	status,2,c
  7287  0008D2  D075               	goto	l8518
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7291  0008D4  0E01               	movlw	1
  7292  0008D6  EC5C  F029         	call	_lcdInst
  7293  0008DA  0E68               	movlw	104
  7294  0008DC  0100               	movlb	0	; () banked
  7295  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7296  0008E0  0EE4               	movlw	228
  7297  0008E2                     u8917:
  7298  0008E2  2EE8               	decfsz	wreg,f,c
  7299  0008E4  D7FE               	bra	u8917
  7300  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7301  0008E8  D7FC               	bra	u8917
  7302  0008EA  F000               	nop	
  7303                           
  7304                           ;UI.c: 79: lcdInst(0b10000000);;
  7305  0008EC  0E80               	movlw	128
  7306  0008EE  EC5C  F029         	call	_lcdInst
  7307                           
  7308                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7309  0008F2  0E9F               	movlw	low STR_1
  7310  0008F4  0100               	movlb	0	; () banked
  7311  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7312  0008F8  0EFB               	movlw	high STR_1
  7313  0008FA  0100               	movlb	0	; () banked
  7314  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7315  0008FE  0E01               	movlw	1
  7316  000900  0100               	movlb	0	; () banked
  7317  000902  25FD               	addwf	_sel& (0+255),w,b
  7318  000904  0100               	movlb	0	; () banked
  7319  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7320  000908  0100               	movlb	0	; () banked
  7321  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7322  00090C  0E00               	movlw	0
  7323  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7324  000910  EC02  F00B         	call	_printf	;wreg free
  7325                           
  7326                           ;UI.c: 81: lcdInst(0b11000000);;
  7327  000914  0EC0               	movlw	192
  7328  000916  EC5C  F029         	call	_lcdInst
  7329                           
  7330                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7331  00091A  0E0E               	movlw	14
  7332  00091C  0100               	movlb	0	; () banked
  7333  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7334  000920  0E10               	movlw	16
  7335  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7336  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7337  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7338  00092C  ECCF  F021         	call	___awmod	;wreg free
  7339  000930  C080  F0C6         	movff	?___awmod,_UI$2416
  7340  000934  C081  F0C7         	movff	?___awmod+1,_UI$2416+1
  7341                           
  7342                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7343  000938  0E23               	movlw	low STR_2
  7344  00093A  0100               	movlb	0	; () banked
  7345  00093C  6F8E               	movwf	printf@f& (0+255),b
  7346  00093E  0EFF               	movlw	high STR_2
  7347  000940  0100               	movlb	0	; () banked
  7348  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7349  000944  0E0E               	movlw	14
  7350  000946  0100               	movlb	0	; () banked
  7351  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7352  00094A  0E10               	movlw	16
  7353  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7354  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7355  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7356  000956  ECCF  F021         	call	___awmod	;wreg free
  7357  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7358  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7359  000962  0E00               	movlw	0
  7360  000964  0100               	movlb	0	; () banked
  7361  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7362  000968  0E3C               	movlw	60
  7363  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7364  00096C  EC67  F020         	call	___awdiv	;wreg free
  7365  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7366  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7367  000978  C0C6  F080         	movff	_UI$2416,___awmod@dividend
  7368  00097C  C0C7  F081         	movff	_UI$2416+1,___awmod@dividend+1
  7369  000980  0E00               	movlw	0
  7370  000982  0100               	movlb	0	; () banked
  7371  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7372  000986  0E3C               	movlw	60
  7373  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7374  00098A  ECCF  F021         	call	___awmod	;wreg free
  7375  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7376  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7377  000996  EC02  F00B         	call	_printf	;wreg free
  7378                           
  7379                           ;UI.c: 83: machine_state = UI_state;
  7380  00099A  0E00               	movlw	0
  7381  00099C  0100               	movlb	0	; () banked
  7382  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7383  0009A0                     l180:
  7384  0009A0  A281               	btfss	3969,1,c	;volatile
  7385  0009A2  D7FE               	goto	l180
  7386                           
  7387                           ;UI.c: 86: }
  7388                           ;UI.c: 87: if(cur_state==12){
  7389  0009A4  0E0C               	movlw	12
  7390  0009A6  0100               	movlb	0	; () banked
  7391  0009A8  19EC               	xorwf	_cur_state& (0+255),w,b
  7392  0009AA  0100               	movlb	0	; () banked
  7393  0009AC  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7394  0009AE  A4D8               	btfss	status,2,c
  7395  0009B0  D003               	goto	l8516
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;UI.c: 88: change_state_to_menu_12();
  7399  0009B2  EC9B  F026         	call	_change_state_to_menu_12	;wreg free
  7400                           
  7401                           ;UI.c: 89: }
  7402  0009B6  D3D3               	goto	l8838
  7403  0009B8                     l8516:
  7404                           
  7405                           ;UI.c: 90: else{
  7406                           ;UI.c: 91: change_state_to_menu_22();
  7407  0009B8  EC7F  F026         	call	_change_state_to_menu_22	;wreg free
  7408                           
  7409                           ;UI.c: 92: }
  7410                           ;UI.c: 93: }
  7411  0009BC  D3D0               	goto	l8838
  7412  0009BE                     l8518:
  7413                           
  7414                           ;UI.c: 94: else if(cur_state == 0){
  7415  0009BE  0100               	movlb	0	; () banked
  7416  0009C0  51EC               	movf	_cur_state& (0+255),w,b
  7417  0009C2  0100               	movlb	0	; () banked
  7418  0009C4  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7419  0009C6  A4D8               	btfss	status,2,c
  7420  0009C8  D3CA               	goto	l8838
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7424  0009CA  0E00               	movlw	0
  7425  0009CC  0100               	movlb	0	; () banked
  7426  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7427  0009D0                     l8522:
  7428                           
  7429                           ; BSR set to: 0
  7430  0009D0  0E63               	movlw	99
  7431  0009D2  0100               	movlb	0	; () banked
  7432  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7433  0009D6  D001               	goto	l8526
  7434  0009D8  D00C               	goto	l8530
  7435  0009DA                     l8526:
  7436                           
  7437                           ; BSR set to: 0
  7438  0009DA  0E68               	movlw	104
  7439  0009DC  0100               	movlb	0	; () banked
  7440  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7441  0009E0  0EE4               	movlw	228
  7442  0009E2                     u8927:
  7443  0009E2  2EE8               	decfsz	wreg,f,c
  7444  0009E4  D7FE               	bra	u8927
  7445  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7446  0009E8  D7FC               	bra	u8927
  7447  0009EA  F000               	nop	
  7448  0009EC  0100               	movlb	0	; () banked
  7449  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7450  0009F0  D7EF               	goto	l8522
  7451  0009F2                     l8530:
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;UI.c: 96: if(cur_state == 0){
  7455  0009F2  0100               	movlb	0	; () banked
  7456  0009F4  51EC               	movf	_cur_state& (0+255),w,b
  7457  0009F6  0100               	movlb	0	; () banked
  7458  0009F8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7459  0009FA  A4D8               	btfss	status,2,c
  7460  0009FC  D3B0               	goto	l8838
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;UI.c: 97: printRTC();
  7464  0009FE  EC16  F012         	call	_printRTC	;wreg free
  7465                           
  7466                           ;UI.c: 98: }
  7467                           ;UI.c: 99: }
  7468                           ;UI.c: 100: while(logstate){
  7469  000A02  D3AD               	goto	l8838
  7470  000A04                     l8534:
  7471                           
  7472                           ;UI.c: 102: if(!log_completion){
  7473  000A04  5063               	movf	_log_completion,w,c
  7474  000A06  1064               	iorwf	_log_completion+1,w,c
  7475  000A08  A4D8               	btfss	status,2,c
  7476  000A0A  D041               	goto	l8564
  7477                           
  7478                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7479  000A0C  0E01               	movlw	1
  7480  000A0E  EC5C  F029         	call	_lcdInst
  7481  000A12  0E68               	movlw	104
  7482  000A14  0100               	movlb	0	; () banked
  7483  000A16  6FC4               	movwf	??_UI& (0+255),b
  7484  000A18  0EE4               	movlw	228
  7485  000A1A                     u8937:
  7486  000A1A  2EE8               	decfsz	wreg,f,c
  7487  000A1C  D7FE               	bra	u8937
  7488  000A1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7489  000A20  D7FC               	bra	u8937
  7490  000A22  F000               	nop	
  7491                           
  7492                           ;UI.c: 104: lcdInst(0b10000000);;
  7493  000A24  0E80               	movlw	128
  7494  000A26  EC5C  F029         	call	_lcdInst
  7495                           
  7496                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7497  000A2A  0E8D               	movlw	low STR_3
  7498  000A2C  0100               	movlb	0	; () banked
  7499  000A2E  6F8E               	movwf	printf@f& (0+255),b
  7500  000A30  0EFB               	movlw	high STR_3
  7501  000A32  0100               	movlb	0	; () banked
  7502  000A34  6F8F               	movwf	(printf@f+1)& (0+255),b
  7503  000A36  C0F2  F090         	movff	_log,?_printf+2
  7504  000A3A  C0F3  F091         	movff	_log+1,?_printf+3
  7505  000A3E  EC02  F00B         	call	_printf	;wreg free
  7506                           
  7507                           ;UI.c: 106: lcdInst(0b11000000);;
  7508  000A42  0EC0               	movlw	192
  7509  000A44  EC5C  F029         	call	_lcdInst
  7510                           
  7511                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7512  000A48  0E46               	movlw	low STR_4
  7513  000A4A  0100               	movlb	0	; () banked
  7514  000A4C  6F8E               	movwf	printf@f& (0+255),b
  7515  000A4E  0EFE               	movlw	high STR_4
  7516  000A50  0100               	movlb	0	; () banked
  7517  000A52  6F8F               	movwf	(printf@f+1)& (0+255),b
  7518  000A54  EC02  F00B         	call	_printf	;wreg free
  7519  000A58                     l8548:
  7520  000A58  0E00               	movlw	0
  7521  000A5A  0100               	movlb	0	; () banked
  7522  000A5C  6FC9               	movwf	UI@i_409& (0+255),b
  7523  000A5E                     l8550:
  7524                           
  7525                           ; BSR set to: 0
  7526  000A5E  0E63               	movlw	99
  7527  000A60  0100               	movlb	0	; () banked
  7528  000A62  65C9               	cpfsgt	UI@i_409& (0+255),b
  7529  000A64  D001               	goto	l8554
  7530  000A66  D00C               	goto	l8558
  7531  000A68                     l8554:
  7532                           
  7533                           ; BSR set to: 0
  7534  000A68  0E68               	movlw	104
  7535  000A6A  0100               	movlb	0	; () banked
  7536  000A6C  6FC4               	movwf	??_UI& (0+255),b
  7537  000A6E  0EE4               	movlw	228
  7538  000A70                     u8947:
  7539  000A70  2EE8               	decfsz	wreg,f,c
  7540  000A72  D7FE               	bra	u8947
  7541  000A74  2FC4               	decfsz	??_UI& (0+255),f,b
  7542  000A76  D7FC               	bra	u8947
  7543  000A78  F000               	nop	
  7544  000A7A  0100               	movlb	0	; () banked
  7545  000A7C  2BC9               	incf	UI@i_409& (0+255),f,b
  7546  000A7E  D7EF               	goto	l8550
  7547  000A80                     l8558:
  7548                           
  7549                           ; BSR set to: 0
  7550  000A80  0100               	movlb	0	; () banked
  7551  000A82  51F6               	movf	_logstate& (0+255),w,b
  7552  000A84  0100               	movlb	0	; () banked
  7553  000A86  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7554  000A88  B4D8               	btfsc	status,2,c
  7555  000A8A  0012               	return	
  7556  000A8C  D7E5               	goto	l8548
  7557  000A8E                     l8564:
  7558                           
  7559                           ;UI.c: 111: else{
  7560                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7561  000A8E  0E01               	movlw	1
  7562  000A90  EC5C  F029         	call	_lcdInst
  7563  000A94  0E68               	movlw	104
  7564  000A96  0100               	movlb	0	; () banked
  7565  000A98  6FC4               	movwf	??_UI& (0+255),b
  7566  000A9A  0EE4               	movlw	228
  7567  000A9C                     u8957:
  7568  000A9C  2EE8               	decfsz	wreg,f,c
  7569  000A9E  D7FE               	bra	u8957
  7570  000AA0  2FC4               	decfsz	??_UI& (0+255),f,b
  7571  000AA2  D7FC               	bra	u8957
  7572  000AA4  F000               	nop	
  7573                           
  7574                           ;UI.c: 113: lcdInst(0b10000000);;
  7575  000AA6  0E80               	movlw	128
  7576  000AA8  EC5C  F029         	call	_lcdInst
  7577                           
  7578                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7579  000AAC  0E8D               	movlw	low STR_3
  7580  000AAE  0100               	movlb	0	; () banked
  7581  000AB0  6F8E               	movwf	printf@f& (0+255),b
  7582  000AB2  0EFB               	movlw	high STR_3
  7583  000AB4  0100               	movlb	0	; () banked
  7584  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7585  000AB8  C0F2  F090         	movff	_log,?_printf+2
  7586  000ABC  C0F3  F091         	movff	_log+1,?_printf+3
  7587  000AC0  EC02  F00B         	call	_printf	;wreg free
  7588                           
  7589                           ;UI.c: 115: lcdInst(0b11000000);;
  7590  000AC4  0EC0               	movlw	192
  7591  000AC6  EC5C  F029         	call	_lcdInst
  7592                           
  7593                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7594  000ACA  0EE2               	movlw	low STR_6
  7595  000ACC  0100               	movlb	0	; () banked
  7596  000ACE  6F8E               	movwf	printf@f& (0+255),b
  7597  000AD0  0EFD               	movlw	high STR_6
  7598  000AD2  0100               	movlb	0	; () banked
  7599  000AD4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7600  000AD6  EC02  F00B         	call	_printf	;wreg free
  7601                           
  7602                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7603  000ADA  0E00               	movlw	0
  7604  000ADC  0100               	movlb	0	; () banked
  7605  000ADE  6FCA               	movwf	UI@i_412& (0+255),b
  7606  000AE0                     l8578:
  7607                           
  7608                           ; BSR set to: 0
  7609  000AE0  0E63               	movlw	99
  7610  000AE2  0100               	movlb	0	; () banked
  7611  000AE4  65CA               	cpfsgt	UI@i_412& (0+255),b
  7612  000AE6  D001               	goto	l8582
  7613  000AE8  D00C               	goto	l8586
  7614  000AEA                     l8582:
  7615                           
  7616                           ; BSR set to: 0
  7617  000AEA  0E68               	movlw	104
  7618  000AEC  0100               	movlb	0	; () banked
  7619  000AEE  6FC4               	movwf	??_UI& (0+255),b
  7620  000AF0  0EE4               	movlw	228
  7621  000AF2                     u8967:
  7622  000AF2  2EE8               	decfsz	wreg,f,c
  7623  000AF4  D7FE               	bra	u8967
  7624  000AF6  2FC4               	decfsz	??_UI& (0+255),f,b
  7625  000AF8  D7FC               	bra	u8967
  7626  000AFA  F000               	nop	
  7627  000AFC  0100               	movlb	0	; () banked
  7628  000AFE  2BCA               	incf	UI@i_412& (0+255),f,b
  7629  000B00  D7EF               	goto	l8578
  7630  000B02                     l8586:
  7631                           
  7632                           ; BSR set to: 0
  7633  000B02  0100               	movlb	0	; () banked
  7634  000B04  51F6               	movf	_logstate& (0+255),w,b
  7635  000B06  0100               	movlb	0	; () banked
  7636  000B08  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7637  000B0A  B4D8               	btfsc	status,2,c
  7638  000B0C  0012               	return	
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7642                           
  7643                           ; BSR set to: 0
  7644                           
  7645                           ; BSR set to: 0
  7646  000B0E  0E00               	movlw	0
  7647  000B10  0100               	movlb	0	; () banked
  7648  000B12  6FCB               	movwf	UI@i_413& (0+255),b
  7649  000B14                     l8592:
  7650                           
  7651                           ; BSR set to: 0
  7652  000B14  0E63               	movlw	99
  7653  000B16  0100               	movlb	0	; () banked
  7654  000B18  65CB               	cpfsgt	UI@i_413& (0+255),b
  7655  000B1A  D001               	goto	l8596
  7656  000B1C  D00C               	goto	l8600
  7657  000B1E                     l8596:
  7658                           
  7659                           ; BSR set to: 0
  7660  000B1E  0E68               	movlw	104
  7661  000B20  0100               	movlb	0	; () banked
  7662  000B22  6FC4               	movwf	??_UI& (0+255),b
  7663  000B24  0EE4               	movlw	228
  7664  000B26                     u8977:
  7665  000B26  2EE8               	decfsz	wreg,f,c
  7666  000B28  D7FE               	bra	u8977
  7667  000B2A  2FC4               	decfsz	??_UI& (0+255),f,b
  7668  000B2C  D7FC               	bra	u8977
  7669  000B2E  F000               	nop	
  7670  000B30  0100               	movlb	0	; () banked
  7671  000B32  2BCB               	incf	UI@i_413& (0+255),f,b
  7672  000B34  D7EF               	goto	l8592
  7673  000B36                     l8600:
  7674                           
  7675                           ; BSR set to: 0
  7676  000B36  0100               	movlb	0	; () banked
  7677  000B38  51F6               	movf	_logstate& (0+255),w,b
  7678  000B3A  0100               	movlb	0	; () banked
  7679  000B3C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7680  000B3E  B4D8               	btfsc	status,2,c
  7681  000B40  0012               	return	
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7685                           
  7686                           ; BSR set to: 0
  7687                           
  7688                           ; BSR set to: 0
  7689  000B42  0E01               	movlw	1
  7690  000B44  EC5C  F029         	call	_lcdInst
  7691  000B48  0E68               	movlw	104
  7692  000B4A  0100               	movlb	0	; () banked
  7693  000B4C  6FC4               	movwf	??_UI& (0+255),b
  7694  000B4E  0EE4               	movlw	228
  7695  000B50                     u8987:
  7696  000B50  2EE8               	decfsz	wreg,f,c
  7697  000B52  D7FE               	bra	u8987
  7698  000B54  2FC4               	decfsz	??_UI& (0+255),f,b
  7699  000B56  D7FC               	bra	u8987
  7700  000B58  F000               	nop	
  7701                           
  7702                           ;UI.c: 122: lcdInst(0b10000000);;
  7703  000B5A  0E80               	movlw	128
  7704  000B5C  EC5C  F029         	call	_lcdInst
  7705                           
  7706                           ;UI.c: 123: printf("START:");
  7707  000B60  0EC0               	movlw	low STR_7
  7708  000B62  0100               	movlb	0	; () banked
  7709  000B64  6F8E               	movwf	printf@f& (0+255),b
  7710  000B66  0EFF               	movlw	high STR_7
  7711  000B68  0100               	movlb	0	; () banked
  7712  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7713  000B6C  EC02  F00B         	call	_printf	;wreg free
  7714                           
  7715                           ;UI.c: 124: lcdInst(0b11000000);;
  7716  000B70  0EC0               	movlw	192
  7717  000B72  EC5C  F029         	call	_lcdInst
  7718                           
  7719                           ;UI.c: 125: char month[] = "MMM";
  7720  000B76  C141  F0D6         	movff	UI@F3235,UI@month
  7721  000B7A  C142  F0D7         	movff	UI@F3235+1,UI@month+1
  7722  000B7E  C143  F0D8         	movff	UI@F3235+2,UI@month+2
  7723  000B82  C144  F0D9         	movff	UI@F3235+3,UI@month+3
  7724                           
  7725                           ;UI.c: 126: switch(log_startTime[5]){
  7726  000B86  D0C3               	goto	l8644
  7727  000B88                     l8616:
  7728                           
  7729                           ;UI.c: 128: strcpy(month, "JAN");
  7730  000B88  0ED6               	movlw	low UI@month
  7731  000B8A  0100               	movlb	0	; () banked
  7732  000B8C  6F80               	movwf	strcpy@to& (0+255),b
  7733  000B8E  0E00               	movlw	high UI@month
  7734  000B90  0100               	movlb	0	; () banked
  7735  000B92  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7736  000B94  0EDB               	movlw	low STR_8
  7737  000B96  0100               	movlb	0	; () banked
  7738  000B98  6F82               	movwf	strcpy@from& (0+255),b
  7739  000B9A  0EFF               	movlw	high STR_8
  7740  000B9C  0100               	movlb	0	; () banked
  7741  000B9E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7742  000BA0  ECB7  F026         	call	_strcpy	;wreg free
  7743                           
  7744                           ;UI.c: 129: break;
  7745  000BA4  D0E6               	goto	l8646
  7746  000BA6                     l8618:
  7747                           
  7748                           ;UI.c: 131: strcpy(month, "FEB");
  7749  000BA6  0ED6               	movlw	low UI@month
  7750  000BA8  0100               	movlb	0	; () banked
  7751  000BAA  6F80               	movwf	strcpy@to& (0+255),b
  7752  000BAC  0E00               	movlw	high UI@month
  7753  000BAE  0100               	movlb	0	; () banked
  7754  000BB0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7755  000BB2  0ECB               	movlw	low STR_9
  7756  000BB4  0100               	movlb	0	; () banked
  7757  000BB6  6F82               	movwf	strcpy@from& (0+255),b
  7758  000BB8  0EFF               	movlw	high STR_9
  7759  000BBA  0100               	movlb	0	; () banked
  7760  000BBC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7761  000BBE  ECB7  F026         	call	_strcpy	;wreg free
  7762                           
  7763                           ;UI.c: 132: break;
  7764  000BC2  D0D7               	goto	l8646
  7765  000BC4                     l8620:
  7766                           
  7767                           ;UI.c: 134: strcpy(month, "MAR");
  7768  000BC4  0ED6               	movlw	low UI@month
  7769  000BC6  0100               	movlb	0	; () banked
  7770  000BC8  6F80               	movwf	strcpy@to& (0+255),b
  7771  000BCA  0E00               	movlw	high UI@month
  7772  000BCC  0100               	movlb	0	; () banked
  7773  000BCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7774  000BD0  0EE7               	movlw	low STR_10
  7775  000BD2  0100               	movlb	0	; () banked
  7776  000BD4  6F82               	movwf	strcpy@from& (0+255),b
  7777  000BD6  0EFF               	movlw	high STR_10
  7778  000BD8  0100               	movlb	0	; () banked
  7779  000BDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7780  000BDC  ECB7  F026         	call	_strcpy	;wreg free
  7781                           
  7782                           ;UI.c: 135: break;
  7783  000BE0  D0C8               	goto	l8646
  7784  000BE2                     l8622:
  7785                           
  7786                           ;UI.c: 137: strcpy(month, "APR");
  7787  000BE2  0ED6               	movlw	low UI@month
  7788  000BE4  0100               	movlb	0	; () banked
  7789  000BE6  6F80               	movwf	strcpy@to& (0+255),b
  7790  000BE8  0E00               	movlw	high UI@month
  7791  000BEA  0100               	movlb	0	; () banked
  7792  000BEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7793  000BEE  0EEB               	movlw	low STR_11
  7794  000BF0  0100               	movlb	0	; () banked
  7795  000BF2  6F82               	movwf	strcpy@from& (0+255),b
  7796  000BF4  0EFF               	movlw	high STR_11
  7797  000BF6  0100               	movlb	0	; () banked
  7798  000BF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7799  000BFA  ECB7  F026         	call	_strcpy	;wreg free
  7800                           
  7801                           ;UI.c: 138: break;
  7802  000BFE  D0B9               	goto	l8646
  7803  000C00                     l8624:
  7804                           
  7805                           ;UI.c: 140: strcpy(month, "MAY");
  7806  000C00  0ED6               	movlw	low UI@month
  7807  000C02  0100               	movlb	0	; () banked
  7808  000C04  6F80               	movwf	strcpy@to& (0+255),b
  7809  000C06  0E00               	movlw	high UI@month
  7810  000C08  0100               	movlb	0	; () banked
  7811  000C0A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7812  000C0C  0EFB               	movlw	low STR_12
  7813  000C0E  0100               	movlb	0	; () banked
  7814  000C10  6F82               	movwf	strcpy@from& (0+255),b
  7815  000C12  0EFF               	movlw	high STR_12
  7816  000C14  0100               	movlb	0	; () banked
  7817  000C16  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7818  000C18  ECB7  F026         	call	_strcpy	;wreg free
  7819                           
  7820                           ;UI.c: 141: break;
  7821  000C1C  D0AA               	goto	l8646
  7822  000C1E                     l8626:
  7823                           
  7824                           ;UI.c: 143: strcpy(month, "JUN");
  7825  000C1E  0ED6               	movlw	low UI@month
  7826  000C20  0100               	movlb	0	; () banked
  7827  000C22  6F80               	movwf	strcpy@to& (0+255),b
  7828  000C24  0E00               	movlw	high UI@month
  7829  000C26  0100               	movlb	0	; () banked
  7830  000C28  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7831  000C2A  0EDF               	movlw	low STR_13
  7832  000C2C  0100               	movlb	0	; () banked
  7833  000C2E  6F82               	movwf	strcpy@from& (0+255),b
  7834  000C30  0EFF               	movlw	high STR_13
  7835  000C32  0100               	movlb	0	; () banked
  7836  000C34  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7837  000C36  ECB7  F026         	call	_strcpy	;wreg free
  7838                           
  7839                           ;UI.c: 144: break;
  7840  000C3A  D09B               	goto	l8646
  7841  000C3C                     l8628:
  7842                           
  7843                           ;UI.c: 146: strcpy(month, "JUL");
  7844  000C3C  0ED6               	movlw	low UI@month
  7845  000C3E  0100               	movlb	0	; () banked
  7846  000C40  6F80               	movwf	strcpy@to& (0+255),b
  7847  000C42  0E00               	movlw	high UI@month
  7848  000C44  0100               	movlb	0	; () banked
  7849  000C46  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7850  000C48  0ED7               	movlw	low STR_14
  7851  000C4A  0100               	movlb	0	; () banked
  7852  000C4C  6F82               	movwf	strcpy@from& (0+255),b
  7853  000C4E  0EFF               	movlw	high STR_14
  7854  000C50  0100               	movlb	0	; () banked
  7855  000C52  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7856  000C54  ECB7  F026         	call	_strcpy	;wreg free
  7857                           
  7858                           ;UI.c: 147: break;
  7859  000C58  D08C               	goto	l8646
  7860  000C5A                     l8630:
  7861                           
  7862                           ;UI.c: 149: strcpy(month, "AUG");
  7863  000C5A  0ED6               	movlw	low UI@month
  7864  000C5C  0100               	movlb	0	; () banked
  7865  000C5E  6F80               	movwf	strcpy@to& (0+255),b
  7866  000C60  0E00               	movlw	high UI@month
  7867  000C62  0100               	movlb	0	; () banked
  7868  000C64  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7869  000C66  0ED3               	movlw	low STR_15
  7870  000C68  0100               	movlb	0	; () banked
  7871  000C6A  6F82               	movwf	strcpy@from& (0+255),b
  7872  000C6C  0EFF               	movlw	high STR_15
  7873  000C6E  0100               	movlb	0	; () banked
  7874  000C70  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7875  000C72  ECB7  F026         	call	_strcpy	;wreg free
  7876                           
  7877                           ;UI.c: 150: break;
  7878  000C76  D07D               	goto	l8646
  7879  000C78                     l8632:
  7880                           
  7881                           ;UI.c: 152: strcpy(month, "SEP");
  7882  000C78  0ED6               	movlw	low UI@month
  7883  000C7A  0100               	movlb	0	; () banked
  7884  000C7C  6F80               	movwf	strcpy@to& (0+255),b
  7885  000C7E  0E00               	movlw	high UI@month
  7886  000C80  0100               	movlb	0	; () banked
  7887  000C82  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7888  000C84  0EE3               	movlw	low STR_16
  7889  000C86  0100               	movlb	0	; () banked
  7890  000C88  6F82               	movwf	strcpy@from& (0+255),b
  7891  000C8A  0EFF               	movlw	high STR_16
  7892  000C8C  0100               	movlb	0	; () banked
  7893  000C8E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7894  000C90  ECB7  F026         	call	_strcpy	;wreg free
  7895                           
  7896                           ;UI.c: 153: break;
  7897  000C94  D06E               	goto	l8646
  7898  000C96                     l8634:
  7899                           
  7900                           ;UI.c: 155: strcpy(month, "OCT");
  7901  000C96  0ED6               	movlw	low UI@month
  7902  000C98  0100               	movlb	0	; () banked
  7903  000C9A  6F80               	movwf	strcpy@to& (0+255),b
  7904  000C9C  0E00               	movlw	high UI@month
  7905  000C9E  0100               	movlb	0	; () banked
  7906  000CA0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7907  000CA2  0EF3               	movlw	low STR_17
  7908  000CA4  0100               	movlb	0	; () banked
  7909  000CA6  6F82               	movwf	strcpy@from& (0+255),b
  7910  000CA8  0EFF               	movlw	high STR_17
  7911  000CAA  0100               	movlb	0	; () banked
  7912  000CAC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7913  000CAE  ECB7  F026         	call	_strcpy	;wreg free
  7914                           
  7915                           ;UI.c: 156: break;
  7916  000CB2  D05F               	goto	l8646
  7917  000CB4                     l8636:
  7918                           
  7919                           ;UI.c: 158: strcpy(month, "NOV");
  7920  000CB4  0ED6               	movlw	low UI@month
  7921  000CB6  0100               	movlb	0	; () banked
  7922  000CB8  6F80               	movwf	strcpy@to& (0+255),b
  7923  000CBA  0E00               	movlw	high UI@month
  7924  000CBC  0100               	movlb	0	; () banked
  7925  000CBE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7926  000CC0  0EF7               	movlw	low STR_18
  7927  000CC2  0100               	movlb	0	; () banked
  7928  000CC4  6F82               	movwf	strcpy@from& (0+255),b
  7929  000CC6  0EFF               	movlw	high STR_18
  7930  000CC8  0100               	movlb	0	; () banked
  7931  000CCA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7932  000CCC  ECB7  F026         	call	_strcpy	;wreg free
  7933                           
  7934                           ;UI.c: 159: break;
  7935  000CD0  D050               	goto	l8646
  7936  000CD2                     l8638:
  7937                           
  7938                           ;UI.c: 161: strcpy(month, "DEC");
  7939  000CD2  0ED6               	movlw	low UI@month
  7940  000CD4  0100               	movlb	0	; () banked
  7941  000CD6  6F80               	movwf	strcpy@to& (0+255),b
  7942  000CD8  0E00               	movlw	high UI@month
  7943  000CDA  0100               	movlb	0	; () banked
  7944  000CDC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7945  000CDE  0ECF               	movlw	low STR_19
  7946  000CE0  0100               	movlb	0	; () banked
  7947  000CE2  6F82               	movwf	strcpy@from& (0+255),b
  7948  000CE4  0EFF               	movlw	high STR_19
  7949  000CE6  0100               	movlb	0	; () banked
  7950  000CE8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7951  000CEA  ECB7  F026         	call	_strcpy	;wreg free
  7952                           
  7953                           ;UI.c: 162: break;
  7954  000CEE  D041               	goto	l8646
  7955  000CF0                     l8640:
  7956                           
  7957                           ;UI.c: 164: strcpy(month, "ERR");
  7958  000CF0  0ED6               	movlw	low UI@month
  7959  000CF2  0100               	movlb	0	; () banked
  7960  000CF4  6F80               	movwf	strcpy@to& (0+255),b
  7961  000CF6  0E00               	movlw	high UI@month
  7962  000CF8  0100               	movlb	0	; () banked
  7963  000CFA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7964  000CFC  0EEF               	movlw	low STR_20
  7965  000CFE  0100               	movlb	0	; () banked
  7966  000D00  6F82               	movwf	strcpy@from& (0+255),b
  7967  000D02  0EFF               	movlw	high STR_20
  7968  000D04  0100               	movlb	0	; () banked
  7969  000D06  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7970  000D08  ECB7  F026         	call	_strcpy	;wreg free
  7971                           
  7972                           ;UI.c: 166: }
  7973                           
  7974                           ;UI.c: 165: break;
  7975  000D0C  D032               	goto	l8646
  7976  000D0E                     l8644:
  7977  000D0E  EE21  F00A         	lfsr	2,_log_startTime+10
  7978  000D12  CFDE F0C4          	movff	postinc2,??_UI
  7979  000D16  CFDD F0C5          	movff	postdec2,??_UI+1
  7980                           
  7981                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7982                           ; Switch size 1, requested type "space"
  7983                           ; Number of cases is 1, Range of values is 0 to 0
  7984                           ; switch strategies available:
  7985                           ; Name         Instructions Cycles
  7986                           ; simple_byte            4     3 (average)
  7987                           ;	Chosen strategy is simple_byte
  7988  000D1A  0100               	movlb	0	; () banked
  7989  000D1C  51C5               	movf	(??_UI+1)& (0+255),w,b
  7990  000D1E  0A00               	xorlw	0	; case 0
  7991  000D20  A4D8               	btfss	status,2,c
  7992  000D22  D7E6               	goto	l8640
  7993                           
  7994                           ; BSR set to: 0
  7995                           ; Switch size 1, requested type "space"
  7996                           ; Number of cases is 12, Range of values is 1 to 12
  7997                           ; switch strategies available:
  7998                           ; Name         Instructions Cycles
  7999                           ; simple_byte           37    19 (average)
  8000                           ;	Chosen strategy is simple_byte
  8001  000D24  0100               	movlb	0	; () banked
  8002  000D26  51C4               	movf	??_UI& (0+255),w,b
  8003  000D28  0A01               	xorlw	1	; case 1
  8004  000D2A  B4D8               	btfsc	status,2,c
  8005  000D2C  D72D               	goto	l8616
  8006  000D2E  0A03               	xorlw	3	; case 2
  8007  000D30  B4D8               	btfsc	status,2,c
  8008  000D32  D739               	goto	l8618
  8009  000D34  0A01               	xorlw	1	; case 3
  8010  000D36  B4D8               	btfsc	status,2,c
  8011  000D38  D745               	goto	l8620
  8012  000D3A  0A07               	xorlw	7	; case 4
  8013  000D3C  B4D8               	btfsc	status,2,c
  8014  000D3E  D751               	goto	l8622
  8015  000D40  0A01               	xorlw	1	; case 5
  8016  000D42  B4D8               	btfsc	status,2,c
  8017  000D44  D75D               	goto	l8624
  8018  000D46  0A03               	xorlw	3	; case 6
  8019  000D48  B4D8               	btfsc	status,2,c
  8020  000D4A  D769               	goto	l8626
  8021  000D4C  0A01               	xorlw	1	; case 7
  8022  000D4E  B4D8               	btfsc	status,2,c
  8023  000D50  D775               	goto	l8628
  8024  000D52  0A0F               	xorlw	15	; case 8
  8025  000D54  B4D8               	btfsc	status,2,c
  8026  000D56  D781               	goto	l8630
  8027  000D58  0A01               	xorlw	1	; case 9
  8028  000D5A  B4D8               	btfsc	status,2,c
  8029  000D5C  D78D               	goto	l8632
  8030  000D5E  0A03               	xorlw	3	; case 10
  8031  000D60  B4D8               	btfsc	status,2,c
  8032  000D62  D799               	goto	l8634
  8033  000D64  0A01               	xorlw	1	; case 11
  8034  000D66  B4D8               	btfsc	status,2,c
  8035  000D68  D7A5               	goto	l8636
  8036  000D6A  0A07               	xorlw	7	; case 12
  8037  000D6C  B4D8               	btfsc	status,2,c
  8038  000D6E  D7B1               	goto	l8638
  8039  000D70  D7BF               	goto	l8640
  8040  000D72                     l8646:
  8041                           
  8042                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8043  000D72  0E06               	movlw	low STR_21
  8044  000D74  0100               	movlb	0	; () banked
  8045  000D76  6F8E               	movwf	printf@f& (0+255),b
  8046  000D78  0EFB               	movlw	high STR_21
  8047  000D7A  0100               	movlb	0	; () banked
  8048  000D7C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8049  000D7E  C108  F090         	movff	_log_startTime+8,?_printf+2
  8050  000D82  C109  F091         	movff	_log_startTime+9,?_printf+3
  8051  000D86  0ED6               	movlw	low UI@month
  8052  000D88  0100               	movlb	0	; () banked
  8053  000D8A  6F92               	movwf	(?_printf+4)& (0+255),b
  8054  000D8C  0E00               	movlw	high UI@month
  8055  000D8E  0100               	movlb	0	; () banked
  8056  000D90  6F93               	movwf	(?_printf+5)& (0+255),b
  8057  000D92  C104  F094         	movff	_log_startTime+4,?_printf+6
  8058  000D96  C105  F095         	movff	_log_startTime+5,?_printf+7
  8059  000D9A  C102  F096         	movff	_log_startTime+2,?_printf+8
  8060  000D9E  C103  F097         	movff	_log_startTime+3,?_printf+9
  8061  000DA2  C100  F098         	movff	_log_startTime,?_printf+10
  8062  000DA6  C101  F099         	movff	_log_startTime+1,?_printf+11
  8063  000DAA  EC02  F00B         	call	_printf	;wreg free
  8064                           
  8065                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8066  000DAE  0E00               	movlw	0
  8067  000DB0  0100               	movlb	0	; () banked
  8068  000DB2  6FCC               	movwf	UI@i_431& (0+255),b
  8069  000DB4                     l8650:
  8070                           
  8071                           ; BSR set to: 0
  8072  000DB4  0E63               	movlw	99
  8073  000DB6  0100               	movlb	0	; () banked
  8074  000DB8  65CC               	cpfsgt	UI@i_431& (0+255),b
  8075  000DBA  D001               	goto	l8654
  8076  000DBC  D00C               	goto	l8658
  8077  000DBE                     l8654:
  8078                           
  8079                           ; BSR set to: 0
  8080  000DBE  0E68               	movlw	104
  8081  000DC0  0100               	movlb	0	; () banked
  8082  000DC2  6FC4               	movwf	??_UI& (0+255),b
  8083  000DC4  0EE4               	movlw	228
  8084  000DC6                     u8997:
  8085  000DC6  2EE8               	decfsz	wreg,f,c
  8086  000DC8  D7FE               	bra	u8997
  8087  000DCA  2FC4               	decfsz	??_UI& (0+255),f,b
  8088  000DCC  D7FC               	bra	u8997
  8089  000DCE  F000               	nop	
  8090  000DD0  0100               	movlb	0	; () banked
  8091  000DD2  2BCC               	incf	UI@i_431& (0+255),f,b
  8092  000DD4  D7EF               	goto	l8650
  8093  000DD6                     l8658:
  8094                           
  8095                           ; BSR set to: 0
  8096  000DD6  0100               	movlb	0	; () banked
  8097  000DD8  51F6               	movf	_logstate& (0+255),w,b
  8098  000DDA  0100               	movlb	0	; () banked
  8099  000DDC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8100  000DDE  B4D8               	btfsc	status,2,c
  8101  000DE0  0012               	return	
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8105                           
  8106                           ; BSR set to: 0
  8107                           
  8108                           ; BSR set to: 0
  8109  000DE2  0E00               	movlw	0
  8110  000DE4  0100               	movlb	0	; () banked
  8111  000DE6  6FCD               	movwf	UI@i_432& (0+255),b
  8112  000DE8                     l8664:
  8113                           
  8114                           ; BSR set to: 0
  8115  000DE8  0E63               	movlw	99
  8116  000DEA  0100               	movlb	0	; () banked
  8117  000DEC  65CD               	cpfsgt	UI@i_432& (0+255),b
  8118  000DEE  D001               	goto	l8668
  8119  000DF0  D00C               	goto	l8672
  8120  000DF2                     l8668:
  8121                           
  8122                           ; BSR set to: 0
  8123  000DF2  0E68               	movlw	104
  8124  000DF4  0100               	movlb	0	; () banked
  8125  000DF6  6FC4               	movwf	??_UI& (0+255),b
  8126  000DF8  0EE4               	movlw	228
  8127  000DFA                     u9007:
  8128  000DFA  2EE8               	decfsz	wreg,f,c
  8129  000DFC  D7FE               	bra	u9007
  8130  000DFE  2FC4               	decfsz	??_UI& (0+255),f,b
  8131  000E00  D7FC               	bra	u9007
  8132  000E02  F000               	nop	
  8133  000E04  0100               	movlb	0	; () banked
  8134  000E06  2BCD               	incf	UI@i_432& (0+255),f,b
  8135  000E08  D7EF               	goto	l8664
  8136  000E0A                     l8672:
  8137                           
  8138                           ; BSR set to: 0
  8139  000E0A  0100               	movlb	0	; () banked
  8140  000E0C  51F6               	movf	_logstate& (0+255),w,b
  8141  000E0E  0100               	movlb	0	; () banked
  8142  000E10  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8143  000E12  B4D8               	btfsc	status,2,c
  8144  000E14  0012               	return	
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8148                           
  8149                           ; BSR set to: 0
  8150                           
  8151                           ; BSR set to: 0
  8152  000E16  0E01               	movlw	1
  8153  000E18  EC5C  F029         	call	_lcdInst
  8154  000E1C  0E68               	movlw	104
  8155  000E1E  0100               	movlb	0	; () banked
  8156  000E20  6FC4               	movwf	??_UI& (0+255),b
  8157  000E22  0EE4               	movlw	228
  8158  000E24                     u9017:
  8159  000E24  2EE8               	decfsz	wreg,f,c
  8160  000E26  D7FE               	bra	u9017
  8161  000E28  2FC4               	decfsz	??_UI& (0+255),f,b
  8162  000E2A  D7FC               	bra	u9017
  8163  000E2C  F000               	nop	
  8164                           
  8165                           ;UI.c: 173: lcdInst(0b10000000);;
  8166  000E2E  0E80               	movlw	128
  8167  000E30  EC5C  F029         	call	_lcdInst
  8168                           
  8169                           ;UI.c: 174: printf("DURATION:");
  8170  000E34  0E97               	movlw	low STR_22
  8171  000E36  0100               	movlb	0	; () banked
  8172  000E38  6F8E               	movwf	printf@f& (0+255),b
  8173  000E3A  0EFF               	movlw	high STR_22
  8174  000E3C  0100               	movlb	0	; () banked
  8175  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8176  000E40  EC02  F00B         	call	_printf	;wreg free
  8177                           
  8178                           ;UI.c: 175: lcdInst(0b11000000);;
  8179  000E44  0EC0               	movlw	192
  8180  000E46  EC5C  F029         	call	_lcdInst
  8181                           
  8182                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8183  000E4A  0E0E               	movlw	14
  8184  000E4C  0100               	movlb	0	; () banked
  8185  000E4E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8186  000E50  0E10               	movlw	16
  8187  000E52  6F82               	movwf	___awmod@divisor& (0+255),b
  8188  000E54  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8189  000E58  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8190  000E5C  ECCF  F021         	call	___awmod	;wreg free
  8191  000E60  C080  F0C6         	movff	?___awmod,_UI$2416
  8192  000E64  C081  F0C7         	movff	?___awmod+1,_UI$2416+1
  8193                           
  8194                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8195  000E68  0E15               	movlw	low STR_23
  8196  000E6A  0100               	movlb	0	; () banked
  8197  000E6C  6F8E               	movwf	printf@f& (0+255),b
  8198  000E6E  0EFF               	movlw	high STR_23
  8199  000E70  0100               	movlb	0	; () banked
  8200  000E72  6F8F               	movwf	(printf@f+1)& (0+255),b
  8201  000E74  0E0E               	movlw	14
  8202  000E76  0100               	movlb	0	; () banked
  8203  000E78  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8204  000E7A  0E10               	movlw	16
  8205  000E7C  6F82               	movwf	___awmod@divisor& (0+255),b
  8206  000E7E  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8207  000E82  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8208  000E86  ECCF  F021         	call	___awmod	;wreg free
  8209  000E8A  C080  F086         	movff	?___awmod,___awdiv@dividend
  8210  000E8E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8211  000E92  0E00               	movlw	0
  8212  000E94  0100               	movlb	0	; () banked
  8213  000E96  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8214  000E98  0E3C               	movlw	60
  8215  000E9A  6F88               	movwf	___awdiv@divisor& (0+255),b
  8216  000E9C  EC67  F020         	call	___awdiv	;wreg free
  8217  000EA0  C086  F090         	movff	?___awdiv,?_printf+2
  8218  000EA4  C087  F091         	movff	?___awdiv+1,?_printf+3
  8219  000EA8  C0C6  F080         	movff	_UI$2416,___awmod@dividend
  8220  000EAC  C0C7  F081         	movff	_UI$2416+1,___awmod@dividend+1
  8221  000EB0  0E00               	movlw	0
  8222  000EB2  0100               	movlb	0	; () banked
  8223  000EB4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8224  000EB6  0E3C               	movlw	60
  8225  000EB8  6F82               	movwf	___awmod@divisor& (0+255),b
  8226  000EBA  ECCF  F021         	call	___awmod	;wreg free
  8227  000EBE  C080  F092         	movff	?___awmod,?_printf+4
  8228  000EC2  C081  F093         	movff	?___awmod+1,?_printf+5
  8229  000EC6  EC02  F00B         	call	_printf	;wreg free
  8230                           
  8231                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8232  000ECA  0E00               	movlw	0
  8233  000ECC  0100               	movlb	0	; () banked
  8234  000ECE  6FCE               	movwf	UI@i_435& (0+255),b
  8235  000ED0                     l8692:
  8236                           
  8237                           ; BSR set to: 0
  8238  000ED0  0E63               	movlw	99
  8239  000ED2  0100               	movlb	0	; () banked
  8240  000ED4  65CE               	cpfsgt	UI@i_435& (0+255),b
  8241  000ED6  D001               	goto	l8696
  8242  000ED8  D00C               	goto	l8700
  8243  000EDA                     l8696:
  8244                           
  8245                           ; BSR set to: 0
  8246  000EDA  0E68               	movlw	104
  8247  000EDC  0100               	movlb	0	; () banked
  8248  000EDE  6FC4               	movwf	??_UI& (0+255),b
  8249  000EE0  0EE4               	movlw	228
  8250  000EE2                     u9027:
  8251  000EE2  2EE8               	decfsz	wreg,f,c
  8252  000EE4  D7FE               	bra	u9027
  8253  000EE6  2FC4               	decfsz	??_UI& (0+255),f,b
  8254  000EE8  D7FC               	bra	u9027
  8255  000EEA  F000               	nop	
  8256  000EEC  0100               	movlb	0	; () banked
  8257  000EEE  2BCE               	incf	UI@i_435& (0+255),f,b
  8258  000EF0  D7EF               	goto	l8692
  8259  000EF2                     l8700:
  8260                           
  8261                           ; BSR set to: 0
  8262  000EF2  0100               	movlb	0	; () banked
  8263  000EF4  51F6               	movf	_logstate& (0+255),w,b
  8264  000EF6  0100               	movlb	0	; () banked
  8265  000EF8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8266  000EFA  B4D8               	btfsc	status,2,c
  8267  000EFC  0012               	return	
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8271                           
  8272                           ; BSR set to: 0
  8273                           
  8274                           ; BSR set to: 0
  8275  000EFE  0E00               	movlw	0
  8276  000F00  0100               	movlb	0	; () banked
  8277  000F02  6FCF               	movwf	UI@i_436& (0+255),b
  8278  000F04                     l8706:
  8279                           
  8280                           ; BSR set to: 0
  8281  000F04  0E63               	movlw	99
  8282  000F06  0100               	movlb	0	; () banked
  8283  000F08  65CF               	cpfsgt	UI@i_436& (0+255),b
  8284  000F0A  D001               	goto	l8710
  8285  000F0C  D00C               	goto	l8714
  8286  000F0E                     l8710:
  8287                           
  8288                           ; BSR set to: 0
  8289  000F0E  0E68               	movlw	104
  8290  000F10  0100               	movlb	0	; () banked
  8291  000F12  6FC4               	movwf	??_UI& (0+255),b
  8292  000F14  0EE4               	movlw	228
  8293  000F16                     u9037:
  8294  000F16  2EE8               	decfsz	wreg,f,c
  8295  000F18  D7FE               	bra	u9037
  8296  000F1A  2FC4               	decfsz	??_UI& (0+255),f,b
  8297  000F1C  D7FC               	bra	u9037
  8298  000F1E  F000               	nop	
  8299  000F20  0100               	movlb	0	; () banked
  8300  000F22  2BCF               	incf	UI@i_436& (0+255),f,b
  8301  000F24  D7EF               	goto	l8706
  8302  000F26                     l8714:
  8303                           
  8304                           ; BSR set to: 0
  8305  000F26  0100               	movlb	0	; () banked
  8306  000F28  51F6               	movf	_logstate& (0+255),w,b
  8307  000F2A  0100               	movlb	0	; () banked
  8308  000F2C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8309  000F2E  B4D8               	btfsc	status,2,c
  8310  000F30  0012               	return	
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8314                           
  8315                           ; BSR set to: 0
  8316                           
  8317                           ; BSR set to: 0
  8318  000F32  0E01               	movlw	1
  8319  000F34  EC5C  F029         	call	_lcdInst
  8320  000F38  0E68               	movlw	104
  8321  000F3A  0100               	movlb	0	; () banked
  8322  000F3C  6FC4               	movwf	??_UI& (0+255),b
  8323  000F3E  0EE4               	movlw	228
  8324  000F40                     u9047:
  8325  000F40  2EE8               	decfsz	wreg,f,c
  8326  000F42  D7FE               	bra	u9047
  8327  000F44  2FC4               	decfsz	??_UI& (0+255),f,b
  8328  000F46  D7FC               	bra	u9047
  8329  000F48  F000               	nop	
  8330                           
  8331                           ;UI.c: 182: lcdInst(0b10000000);;
  8332  000F4A  0E80               	movlw	128
  8333  000F4C  EC5C  F029         	call	_lcdInst
  8334                           
  8335                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8336  000F50  0E38               	movlw	low STR_24
  8337  000F52  0100               	movlb	0	; () banked
  8338  000F54  6F8E               	movwf	printf@f& (0+255),b
  8339  000F56  0EFD               	movlw	high STR_24
  8340  000F58  0100               	movlb	0	; () banked
  8341  000F5A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8342  000F5C  EC02  F00B         	call	_printf	;wreg free
  8343                           
  8344                           ;UI.c: 184: lcdInst(0b11000000);;
  8345  000F60  0EC0               	movlw	192
  8346  000F62  EC5C  F029         	call	_lcdInst
  8347                           
  8348                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8349  000F66  0E15               	movlw	low STR_25
  8350  000F68  0100               	movlb	0	; () banked
  8351  000F6A  6F8E               	movwf	printf@f& (0+255),b
  8352  000F6C  0EFE               	movlw	high STR_25
  8353  000F6E  0100               	movlb	0	; () banked
  8354  000F70  6F8F               	movwf	(printf@f+1)& (0+255),b
  8355  000F72  C069  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8356  000F76  C06A  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8357  000F7A  C06B  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8358  000F7E  C06C  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8359  000F82  EC02  F00B         	call	_printf	;wreg free
  8360                           
  8361                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8362  000F86  0E00               	movlw	0
  8363  000F88  0100               	movlb	0	; () banked
  8364  000F8A  6FD0               	movwf	UI@i_439& (0+255),b
  8365  000F8C                     l8732:
  8366                           
  8367                           ; BSR set to: 0
  8368  000F8C  0E63               	movlw	99
  8369  000F8E  0100               	movlb	0	; () banked
  8370  000F90  65D0               	cpfsgt	UI@i_439& (0+255),b
  8371  000F92  D001               	goto	l8736
  8372  000F94  D00C               	goto	l8740
  8373  000F96                     l8736:
  8374                           
  8375                           ; BSR set to: 0
  8376  000F96  0E68               	movlw	104
  8377  000F98  0100               	movlb	0	; () banked
  8378  000F9A  6FC4               	movwf	??_UI& (0+255),b
  8379  000F9C  0EE4               	movlw	228
  8380  000F9E                     u9057:
  8381  000F9E  2EE8               	decfsz	wreg,f,c
  8382  000FA0  D7FE               	bra	u9057
  8383  000FA2  2FC4               	decfsz	??_UI& (0+255),f,b
  8384  000FA4  D7FC               	bra	u9057
  8385  000FA6  F000               	nop	
  8386  000FA8  0100               	movlb	0	; () banked
  8387  000FAA  2BD0               	incf	UI@i_439& (0+255),f,b
  8388  000FAC  D7EF               	goto	l8732
  8389  000FAE                     l8740:
  8390                           
  8391                           ; BSR set to: 0
  8392  000FAE  0100               	movlb	0	; () banked
  8393  000FB0  51F6               	movf	_logstate& (0+255),w,b
  8394  000FB2  0100               	movlb	0	; () banked
  8395  000FB4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8396  000FB6  B4D8               	btfsc	status,2,c
  8397  000FB8  0012               	return	
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8401                           
  8402                           ; BSR set to: 0
  8403                           
  8404                           ; BSR set to: 0
  8405  000FBA  0E00               	movlw	0
  8406  000FBC  0100               	movlb	0	; () banked
  8407  000FBE  6FD1               	movwf	UI@i_440& (0+255),b
  8408  000FC0                     l8746:
  8409                           
  8410                           ; BSR set to: 0
  8411  000FC0  0E63               	movlw	99
  8412  000FC2  0100               	movlb	0	; () banked
  8413  000FC4  65D1               	cpfsgt	UI@i_440& (0+255),b
  8414  000FC6  D001               	goto	l8750
  8415  000FC8  D00C               	goto	l8754
  8416  000FCA                     l8750:
  8417                           
  8418                           ; BSR set to: 0
  8419  000FCA  0E68               	movlw	104
  8420  000FCC  0100               	movlb	0	; () banked
  8421  000FCE  6FC4               	movwf	??_UI& (0+255),b
  8422  000FD0  0EE4               	movlw	228
  8423  000FD2                     u9067:
  8424  000FD2  2EE8               	decfsz	wreg,f,c
  8425  000FD4  D7FE               	bra	u9067
  8426  000FD6  2FC4               	decfsz	??_UI& (0+255),f,b
  8427  000FD8  D7FC               	bra	u9067
  8428  000FDA  F000               	nop	
  8429  000FDC  0100               	movlb	0	; () banked
  8430  000FDE  2BD1               	incf	UI@i_440& (0+255),f,b
  8431  000FE0  D7EF               	goto	l8746
  8432  000FE2                     l8754:
  8433                           
  8434                           ; BSR set to: 0
  8435  000FE2  0100               	movlb	0	; () banked
  8436  000FE4  51F6               	movf	_logstate& (0+255),w,b
  8437  000FE6  0100               	movlb	0	; () banked
  8438  000FE8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8439  000FEA  B4D8               	btfsc	status,2,c
  8440  000FEC  0012               	return	
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8444                           
  8445                           ; BSR set to: 0
  8446                           
  8447                           ; BSR set to: 0
  8448  000FEE  0E01               	movlw	1
  8449  000FF0  EC5C  F029         	call	_lcdInst
  8450  000FF4  0E68               	movlw	104
  8451  000FF6  0100               	movlb	0	; () banked
  8452  000FF8  6FC4               	movwf	??_UI& (0+255),b
  8453  000FFA  0EE4               	movlw	228
  8454  000FFC                     u9077:
  8455  000FFC  2EE8               	decfsz	wreg,f,c
  8456  000FFE  D7FE               	bra	u9077
  8457  001000  2FC4               	decfsz	??_UI& (0+255),f,b
  8458  001002  D7FC               	bra	u9077
  8459  001004  F000               	nop	
  8460                           
  8461                           ;UI.c: 191: lcdInst(0b10000000);;
  8462  001006  0E80               	movlw	128
  8463  001008  EC5C  F029         	call	_lcdInst
  8464                           
  8465                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8466  00100C  0E49               	movlw	low STR_26
  8467  00100E  0100               	movlb	0	; () banked
  8468  001010  6F8E               	movwf	printf@f& (0+255),b
  8469  001012  0EFD               	movlw	high STR_26
  8470  001014  0100               	movlb	0	; () banked
  8471  001016  6F8F               	movwf	(printf@f+1)& (0+255),b
  8472  001018  EC02  F00B         	call	_printf	;wreg free
  8473                           
  8474                           ;UI.c: 193: lcdInst(0b11000000);;
  8475  00101C  0EC0               	movlw	192
  8476  00101E  EC5C  F029         	call	_lcdInst
  8477                           
  8478                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8479  001022  0E04               	movlw	low STR_27
  8480  001024  0100               	movlb	0	; () banked
  8481  001026  6F8E               	movwf	printf@f& (0+255),b
  8482  001028  0EFE               	movlw	high STR_27
  8483  00102A  0100               	movlb	0	; () banked
  8484  00102C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8485  00102E  C065  F090         	movff	_log_count_can_no_lab,?_printf+2
  8486  001032  C066  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8487  001036  C067  F092         	movff	_log_count_can_w_lab,?_printf+4
  8488  00103A  C068  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8489  00103E  EC02  F00B         	call	_printf	;wreg free
  8490                           
  8491                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8492  001042  0E00               	movlw	0
  8493  001044  0100               	movlb	0	; () banked
  8494  001046  6FD2               	movwf	UI@i_443& (0+255),b
  8495  001048                     l8772:
  8496                           
  8497                           ; BSR set to: 0
  8498  001048  0E63               	movlw	99
  8499  00104A  0100               	movlb	0	; () banked
  8500  00104C  65D2               	cpfsgt	UI@i_443& (0+255),b
  8501  00104E  D001               	goto	l8776
  8502  001050  D00C               	goto	l8780
  8503  001052                     l8776:
  8504                           
  8505                           ; BSR set to: 0
  8506  001052  0E68               	movlw	104
  8507  001054  0100               	movlb	0	; () banked
  8508  001056  6FC4               	movwf	??_UI& (0+255),b
  8509  001058  0EE4               	movlw	228
  8510  00105A                     u9087:
  8511  00105A  2EE8               	decfsz	wreg,f,c
  8512  00105C  D7FE               	bra	u9087
  8513  00105E  2FC4               	decfsz	??_UI& (0+255),f,b
  8514  001060  D7FC               	bra	u9087
  8515  001062  F000               	nop	
  8516  001064  0100               	movlb	0	; () banked
  8517  001066  2BD2               	incf	UI@i_443& (0+255),f,b
  8518  001068  D7EF               	goto	l8772
  8519  00106A                     l8780:
  8520                           
  8521                           ; BSR set to: 0
  8522  00106A  0100               	movlb	0	; () banked
  8523  00106C  51F6               	movf	_logstate& (0+255),w,b
  8524  00106E  0100               	movlb	0	; () banked
  8525  001070  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8526  001072  B4D8               	btfsc	status,2,c
  8527  001074  0012               	return	
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8531                           
  8532                           ; BSR set to: 0
  8533                           
  8534                           ; BSR set to: 0
  8535  001076  0E00               	movlw	0
  8536  001078  0100               	movlb	0	; () banked
  8537  00107A  6FD3               	movwf	UI@i_444& (0+255),b
  8538  00107C                     l8786:
  8539                           
  8540                           ; BSR set to: 0
  8541  00107C  0E63               	movlw	99
  8542  00107E  0100               	movlb	0	; () banked
  8543  001080  65D3               	cpfsgt	UI@i_444& (0+255),b
  8544  001082  D001               	goto	l8790
  8545  001084  D00C               	goto	l8794
  8546  001086                     l8790:
  8547                           
  8548                           ; BSR set to: 0
  8549  001086  0E68               	movlw	104
  8550  001088  0100               	movlb	0	; () banked
  8551  00108A  6FC4               	movwf	??_UI& (0+255),b
  8552  00108C  0EE4               	movlw	228
  8553  00108E                     u9097:
  8554  00108E  2EE8               	decfsz	wreg,f,c
  8555  001090  D7FE               	bra	u9097
  8556  001092  2FC4               	decfsz	??_UI& (0+255),f,b
  8557  001094  D7FC               	bra	u9097
  8558  001096  F000               	nop	
  8559  001098  0100               	movlb	0	; () banked
  8560  00109A  2BD3               	incf	UI@i_444& (0+255),f,b
  8561  00109C  D7EF               	goto	l8786
  8562  00109E                     l8794:
  8563                           
  8564                           ; BSR set to: 0
  8565  00109E  0100               	movlb	0	; () banked
  8566  0010A0  51F6               	movf	_logstate& (0+255),w,b
  8567  0010A2  0100               	movlb	0	; () banked
  8568  0010A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8569  0010A6  B4D8               	btfsc	status,2,c
  8570  0010A8  0012               	return	
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8574                           
  8575                           ; BSR set to: 0
  8576                           
  8577                           ; BSR set to: 0
  8578  0010AA  0E01               	movlw	1
  8579  0010AC  EC5C  F029         	call	_lcdInst
  8580  0010B0  0E68               	movlw	104
  8581  0010B2  0100               	movlb	0	; () banked
  8582  0010B4  6FC4               	movwf	??_UI& (0+255),b
  8583  0010B6  0EE4               	movlw	228
  8584  0010B8                     u9107:
  8585  0010B8  2EE8               	decfsz	wreg,f,c
  8586  0010BA  D7FE               	bra	u9107
  8587  0010BC  2FC4               	decfsz	??_UI& (0+255),f,b
  8588  0010BE  D7FC               	bra	u9107
  8589  0010C0  F000               	nop	
  8590                           
  8591                           ;UI.c: 200: lcdInst(0b10000000);;
  8592  0010C2  0E80               	movlw	128
  8593  0010C4  EC5C  F029         	call	_lcdInst
  8594                           
  8595                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8596  0010C8  0E5A               	movlw	low STR_28
  8597  0010CA  0100               	movlb	0	; () banked
  8598  0010CC  6F8E               	movwf	printf@f& (0+255),b
  8599  0010CE  0EFD               	movlw	high STR_28
  8600  0010D0  0100               	movlb	0	; () banked
  8601  0010D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8602  0010D4  EC02  F00B         	call	_printf	;wreg free
  8603                           
  8604                           ;UI.c: 202: lcdInst(0b11000000);;
  8605  0010D8  0EC0               	movlw	192
  8606  0010DA  EC5C  F029         	call	_lcdInst
  8607                           
  8608                           ;UI.c: 203: printf("%d", log_count_total);
  8609  0010DE  0E12               	movlw	low (STR_27+14)
  8610  0010E0  0100               	movlb	0	; () banked
  8611  0010E2  6F8E               	movwf	printf@f& (0+255),b
  8612  0010E4  0EFE               	movlw	high (STR_27+14)
  8613  0010E6  0100               	movlb	0	; () banked
  8614  0010E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8615  0010EA  C13F  F090         	movff	_log_count_total,?_printf+2
  8616  0010EE  C140  F091         	movff	_log_count_total+1,?_printf+3
  8617  0010F2  EC02  F00B         	call	_printf	;wreg free
  8618                           
  8619                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8620  0010F6  0E00               	movlw	0
  8621  0010F8  0100               	movlb	0	; () banked
  8622  0010FA  6FD4               	movwf	UI@i_447& (0+255),b
  8623  0010FC                     l8812:
  8624                           
  8625                           ; BSR set to: 0
  8626  0010FC  0E63               	movlw	99
  8627  0010FE  0100               	movlb	0	; () banked
  8628  001100  65D4               	cpfsgt	UI@i_447& (0+255),b
  8629  001102  D001               	goto	l8816
  8630  001104  D00C               	goto	l8820
  8631  001106                     l8816:
  8632                           
  8633                           ; BSR set to: 0
  8634  001106  0E68               	movlw	104
  8635  001108  0100               	movlb	0	; () banked
  8636  00110A  6FC4               	movwf	??_UI& (0+255),b
  8637  00110C  0EE4               	movlw	228
  8638  00110E                     u9117:
  8639  00110E  2EE8               	decfsz	wreg,f,c
  8640  001110  D7FE               	bra	u9117
  8641  001112  2FC4               	decfsz	??_UI& (0+255),f,b
  8642  001114  D7FC               	bra	u9117
  8643  001116  F000               	nop	
  8644  001118  0100               	movlb	0	; () banked
  8645  00111A  2BD4               	incf	UI@i_447& (0+255),f,b
  8646  00111C  D7EF               	goto	l8812
  8647  00111E                     l8820:
  8648                           
  8649                           ; BSR set to: 0
  8650  00111E  0100               	movlb	0	; () banked
  8651  001120  51F6               	movf	_logstate& (0+255),w,b
  8652  001122  0100               	movlb	0	; () banked
  8653  001124  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8654  001126  B4D8               	btfsc	status,2,c
  8655  001128  0012               	return	
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8659                           
  8660                           ; BSR set to: 0
  8661                           
  8662                           ; BSR set to: 0
  8663  00112A  0E00               	movlw	0
  8664  00112C  0100               	movlb	0	; () banked
  8665  00112E  6FD5               	movwf	UI@i_448& (0+255),b
  8666  001130                     l8826:
  8667                           
  8668                           ; BSR set to: 0
  8669  001130  0E63               	movlw	99
  8670  001132  0100               	movlb	0	; () banked
  8671  001134  65D5               	cpfsgt	UI@i_448& (0+255),b
  8672  001136  D001               	goto	l8830
  8673  001138  D00C               	goto	l8834
  8674  00113A                     l8830:
  8675                           
  8676                           ; BSR set to: 0
  8677  00113A  0E68               	movlw	104
  8678  00113C  0100               	movlb	0	; () banked
  8679  00113E  6FC4               	movwf	??_UI& (0+255),b
  8680  001140  0EE4               	movlw	228
  8681  001142                     u9127:
  8682  001142  2EE8               	decfsz	wreg,f,c
  8683  001144  D7FE               	bra	u9127
  8684  001146  2FC4               	decfsz	??_UI& (0+255),f,b
  8685  001148  D7FC               	bra	u9127
  8686  00114A  F000               	nop	
  8687  00114C  0100               	movlb	0	; () banked
  8688  00114E  2BD5               	incf	UI@i_448& (0+255),f,b
  8689  001150  D7EF               	goto	l8826
  8690  001152                     l8834:
  8691                           
  8692                           ; BSR set to: 0
  8693  001152  0100               	movlb	0	; () banked
  8694  001154  51F6               	movf	_logstate& (0+255),w,b
  8695  001156  0100               	movlb	0	; () banked
  8696  001158  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8697  00115A  B4D8               	btfsc	status,2,c
  8698  00115C  0012               	return	
  8699  00115E                     l8838:
  8700  00115E  0100               	movlb	0	; () banked
  8701  001160  51F6               	movf	_logstate& (0+255),w,b
  8702  001162  0100               	movlb	0	; () banked
  8703  001164  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8704  001166  B4D8               	btfsc	status,2,c
  8705  001168  0012               	return	
  8706  00116A  D44C               	goto	l8534
  8707  00116C                     __end_of_UI:
  8708                           	opt stack 0
  8709                           tblptru	equ	0xFF8
  8710                           tblptrh	equ	0xFF7
  8711                           tblptrl	equ	0xFF6
  8712                           tablat	equ	0xFF5
  8713                           prodh	equ	0xFF4
  8714                           prodl	equ	0xFF3
  8715                           intcon	equ	0xFF2
  8716                           intcon2	equ	0xFF1
  8717                           intcon3	equ	0xFF0
  8718                           postinc0	equ	0xFEE
  8719                           wreg	equ	0xFE8
  8720                           postdec1	equ	0xFE5
  8721                           fsr1l	equ	0xFE1
  8722                           indf2	equ	0xFDF
  8723                           postinc2	equ	0xFDE
  8724                           postdec2	equ	0xFDD
  8725                           fsr2h	equ	0xFDA
  8726                           fsr2l	equ	0xFD9
  8727                           status	equ	0xFD8
  8728                           
  8729 ;; *************** function _printRTC *****************
  8730 ;; Defined at:
  8731 ;;		line 63 in file "RTC.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;  i               2   66[BANK0 ] int 
  8736 ;;  INT_time       14   46[BANK0 ] int [7]
  8737 ;;  month           4   62[BANK0 ] unsigned char [4]
  8738 ;;  RTC_month       2   60[BANK0 ] int 
  8739 ;; Return value:  Size  Location     Type
  8740 ;;                  1    wreg      void 
  8741 ;; Registers used:
  8742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8752 ;;Total ram usage:       25 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; Hardware stack levels required when called:   10
  8755 ;; This function calls:
  8756 ;;		_getRTC
  8757 ;;		_lcdInst
  8758 ;;		_printf
  8759 ;;		_strcpy
  8760 ;; This function is called by:
  8761 ;;		_UI
  8762 ;;		_change_state_to_menu_start
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           	psect	text24
  8767  00242C                     __ptext24:
  8768                           	opt stack 0
  8769  00242C                     _printRTC:
  8770                           	opt stack 18
  8771                           
  8772                           ;RTC.c: 64: getRTC();
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;incstack = 0
  8776  00242C  EC66  F022         	call	_getRTC	;wreg free
  8777                           
  8778                           ;RTC.c: 65: char month[] = "MMM";
  8779  002430  C145  F0BE         	movff	printRTC@F3226,printRTC@month
  8780  002434  C146  F0BF         	movff	printRTC@F3226+1,printRTC@month+1
  8781  002438  C147  F0C0         	movff	printRTC@F3226+2,printRTC@month+2
  8782  00243C  C148  F0C1         	movff	printRTC@F3226+3,printRTC@month+3
  8783                           
  8784                           ;RTC.c: 66: int INT_time[7];
  8785                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8786  002440  0E00               	movlw	0
  8787  002442  0100               	movlb	0	; () banked
  8788  002444  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8789  002446  0E00               	movlw	0
  8790  002448  6FC2               	movwf	printRTC@i& (0+255),b
  8791                           
  8792                           ; BSR set to: 0
  8793  00244A  0100               	movlb	0	; () banked
  8794  00244C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8795  00244E  D008               	goto	l6632
  8796  002450  0100               	movlb	0	; () banked
  8797  002452  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8798  002454  E146               	bnz	l606
  8799  002456  0E07               	movlw	7
  8800  002458  0100               	movlb	0	; () banked
  8801  00245A  5DC2               	subwf	printRTC@i& (0+255),w,b
  8802  00245C  B0D8               	btfsc	status,0,c
  8803  00245E  D041               	goto	l606
  8804  002460                     l6632:
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8808  002460  0E1C               	movlw	low _time
  8809  002462  0100               	movlb	0	; () banked
  8810  002464  25C2               	addwf	printRTC@i& (0+255),w,b
  8811  002466  6ED9               	movwf	fsr2l,c
  8812  002468  0E01               	movlw	high _time
  8813  00246A  0100               	movlb	0	; () banked
  8814  00246C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8815  00246E  6EDA               	movwf	fsr2h,c
  8816  002470  50DF               	movf	indf2,w,c
  8817  002472  0100               	movlb	0	; () banked
  8818  002474  6FAB               	movwf	??_printRTC& (0+255),b
  8819  002476  0100               	movlb	0	; () banked
  8820  002478  3BAB               	swapf	??_printRTC& (0+255),f,b
  8821  00247A  0E0F               	movlw	15
  8822  00247C  17AB               	andwf	??_printRTC& (0+255),f,b
  8823  00247E  0E0F               	movlw	15
  8824  002480  0100               	movlb	0	; () banked
  8825  002482  17AB               	andwf	??_printRTC& (0+255),f,b
  8826  002484  0100               	movlb	0	; () banked
  8827  002486  51AB               	movf	??_printRTC& (0+255),w,b
  8828  002488  0D0A               	mullw	10
  8829  00248A  0E1C               	movlw	low _time
  8830  00248C  0100               	movlb	0	; () banked
  8831  00248E  25C2               	addwf	printRTC@i& (0+255),w,b
  8832  002490  6ED9               	movwf	fsr2l,c
  8833  002492  0E01               	movlw	high _time
  8834  002494  0100               	movlb	0	; () banked
  8835  002496  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8836  002498  6EDA               	movwf	fsr2h,c
  8837  00249A  50DF               	movf	indf2,w,c
  8838  00249C  0B0F               	andlw	15
  8839  00249E  0100               	movlb	0	; () banked
  8840  0024A0  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8841  0024A2  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8842  0024A4  50F3               	movf	prodl,w,c
  8843  0024A6  0100               	movlb	0	; () banked
  8844  0024A8  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8845  0024AA  50F4               	movf	prodh,w,c
  8846  0024AC  0100               	movlb	0	; () banked
  8847  0024AE  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8848  0024B0  90D8               	bcf	status,0,c
  8849  0024B2  0100               	movlb	0	; () banked
  8850  0024B4  35C2               	rlcf	printRTC@i& (0+255),w,b
  8851  0024B6  6ED9               	movwf	fsr2l,c
  8852  0024B8  0100               	movlb	0	; () banked
  8853  0024BA  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8854  0024BC  6EDA               	movwf	fsr2h,c
  8855  0024BE  0EAE               	movlw	low printRTC@INT_time
  8856  0024C0  26D9               	addwf	fsr2l,f,c
  8857  0024C2  0E00               	movlw	high printRTC@INT_time
  8858  0024C4  22DA               	addwfc	fsr2h,f,c
  8859  0024C6  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8860  0024CA  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8861                           
  8862                           ; BSR set to: 0
  8863  0024CE  0100               	movlb	0	; () banked
  8864  0024D0  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8865  0024D2  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8866                           
  8867                           ; BSR set to: 0
  8868  0024D4  0100               	movlb	0	; () banked
  8869  0024D6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8870  0024D8  D7C3               	goto	l6632
  8871  0024DA  0100               	movlb	0	; () banked
  8872  0024DC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8873  0024DE  E101               	bnz	u5210
  8874  0024E0  D7BA               	goto	L8
  8875  0024E2                     u5210:
  8876  0024E2                     l606:
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;RTC.c: 69: }
  8880                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8881  0024E2  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8882  0024E6  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8883                           
  8884                           ;RTC.c: 71: switch(RTC_month){
  8885  0024EA  D0B4               	goto	l6664
  8886  0024EC                     l6638:
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;RTC.c: 73: strcpy(month, "JAN");
  8890  0024EC  0EBE               	movlw	low printRTC@month
  8891  0024EE  0100               	movlb	0	; () banked
  8892  0024F0  6F80               	movwf	strcpy@to& (0+255),b
  8893  0024F2  0E00               	movlw	high printRTC@month
  8894  0024F4  0100               	movlb	0	; () banked
  8895  0024F6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8896  0024F8  0EDB               	movlw	low STR_8
  8897  0024FA  0100               	movlb	0	; () banked
  8898  0024FC  6F82               	movwf	strcpy@from& (0+255),b
  8899  0024FE  0EFF               	movlw	high STR_8
  8900  002500  0100               	movlb	0	; () banked
  8901  002502  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8902  002504  ECB7  F026         	call	_strcpy	;wreg free
  8903                           
  8904                           ;RTC.c: 74: break;
  8905  002508  D0D4               	goto	l6666
  8906  00250A                     l6640:
  8907                           
  8908                           ;RTC.c: 76: strcpy(month, "FEB");
  8909  00250A  0EBE               	movlw	low printRTC@month
  8910  00250C  0100               	movlb	0	; () banked
  8911  00250E  6F80               	movwf	strcpy@to& (0+255),b
  8912  002510  0E00               	movlw	high printRTC@month
  8913  002512  0100               	movlb	0	; () banked
  8914  002514  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8915  002516  0ECB               	movlw	low STR_9
  8916  002518  0100               	movlb	0	; () banked
  8917  00251A  6F82               	movwf	strcpy@from& (0+255),b
  8918  00251C  0EFF               	movlw	high STR_9
  8919  00251E  0100               	movlb	0	; () banked
  8920  002520  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8921  002522  ECB7  F026         	call	_strcpy	;wreg free
  8922                           
  8923                           ;RTC.c: 77: break;
  8924  002526  D0C5               	goto	l6666
  8925  002528                     l6642:
  8926                           
  8927                           ;RTC.c: 79: strcpy(month, "MAR");
  8928  002528  0EBE               	movlw	low printRTC@month
  8929  00252A  0100               	movlb	0	; () banked
  8930  00252C  6F80               	movwf	strcpy@to& (0+255),b
  8931  00252E  0E00               	movlw	high printRTC@month
  8932  002530  0100               	movlb	0	; () banked
  8933  002532  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8934  002534  0EE7               	movlw	low STR_10
  8935  002536  0100               	movlb	0	; () banked
  8936  002538  6F82               	movwf	strcpy@from& (0+255),b
  8937  00253A  0EFF               	movlw	high STR_10
  8938  00253C  0100               	movlb	0	; () banked
  8939  00253E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8940  002540  ECB7  F026         	call	_strcpy	;wreg free
  8941                           
  8942                           ;RTC.c: 80: break;
  8943  002544  D0B6               	goto	l6666
  8944  002546                     l6644:
  8945                           
  8946                           ;RTC.c: 82: strcpy(month, "APR");
  8947  002546  0EBE               	movlw	low printRTC@month
  8948  002548  0100               	movlb	0	; () banked
  8949  00254A  6F80               	movwf	strcpy@to& (0+255),b
  8950  00254C  0E00               	movlw	high printRTC@month
  8951  00254E  0100               	movlb	0	; () banked
  8952  002550  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8953  002552  0EEB               	movlw	low STR_11
  8954  002554  0100               	movlb	0	; () banked
  8955  002556  6F82               	movwf	strcpy@from& (0+255),b
  8956  002558  0EFF               	movlw	high STR_11
  8957  00255A  0100               	movlb	0	; () banked
  8958  00255C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8959  00255E  ECB7  F026         	call	_strcpy	;wreg free
  8960                           
  8961                           ;RTC.c: 83: break;
  8962  002562  D0A7               	goto	l6666
  8963  002564                     l6646:
  8964                           
  8965                           ;RTC.c: 85: strcpy(month, "MAY");
  8966  002564  0EBE               	movlw	low printRTC@month
  8967  002566  0100               	movlb	0	; () banked
  8968  002568  6F80               	movwf	strcpy@to& (0+255),b
  8969  00256A  0E00               	movlw	high printRTC@month
  8970  00256C  0100               	movlb	0	; () banked
  8971  00256E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8972  002570  0EFB               	movlw	low STR_12
  8973  002572  0100               	movlb	0	; () banked
  8974  002574  6F82               	movwf	strcpy@from& (0+255),b
  8975  002576  0EFF               	movlw	high STR_12
  8976  002578  0100               	movlb	0	; () banked
  8977  00257A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8978  00257C  ECB7  F026         	call	_strcpy	;wreg free
  8979                           
  8980                           ;RTC.c: 86: break;
  8981  002580  D098               	goto	l6666
  8982  002582                     l6648:
  8983                           
  8984                           ;RTC.c: 88: strcpy(month, "JUN");
  8985  002582  0EBE               	movlw	low printRTC@month
  8986  002584  0100               	movlb	0	; () banked
  8987  002586  6F80               	movwf	strcpy@to& (0+255),b
  8988  002588  0E00               	movlw	high printRTC@month
  8989  00258A  0100               	movlb	0	; () banked
  8990  00258C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8991  00258E  0EDF               	movlw	low STR_13
  8992  002590  0100               	movlb	0	; () banked
  8993  002592  6F82               	movwf	strcpy@from& (0+255),b
  8994  002594  0EFF               	movlw	high STR_13
  8995  002596  0100               	movlb	0	; () banked
  8996  002598  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8997  00259A  ECB7  F026         	call	_strcpy	;wreg free
  8998                           
  8999                           ;RTC.c: 89: break;
  9000  00259E  D089               	goto	l6666
  9001  0025A0                     l6650:
  9002                           
  9003                           ;RTC.c: 91: strcpy(month, "JUL");
  9004  0025A0  0EBE               	movlw	low printRTC@month
  9005  0025A2  0100               	movlb	0	; () banked
  9006  0025A4  6F80               	movwf	strcpy@to& (0+255),b
  9007  0025A6  0E00               	movlw	high printRTC@month
  9008  0025A8  0100               	movlb	0	; () banked
  9009  0025AA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9010  0025AC  0ED7               	movlw	low STR_14
  9011  0025AE  0100               	movlb	0	; () banked
  9012  0025B0  6F82               	movwf	strcpy@from& (0+255),b
  9013  0025B2  0EFF               	movlw	high STR_14
  9014  0025B4  0100               	movlb	0	; () banked
  9015  0025B6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9016  0025B8  ECB7  F026         	call	_strcpy	;wreg free
  9017                           
  9018                           ;RTC.c: 92: break;
  9019  0025BC  D07A               	goto	l6666
  9020  0025BE                     l6652:
  9021                           
  9022                           ;RTC.c: 94: strcpy(month, "AUG");
  9023  0025BE  0EBE               	movlw	low printRTC@month
  9024  0025C0  0100               	movlb	0	; () banked
  9025  0025C2  6F80               	movwf	strcpy@to& (0+255),b
  9026  0025C4  0E00               	movlw	high printRTC@month
  9027  0025C6  0100               	movlb	0	; () banked
  9028  0025C8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9029  0025CA  0ED3               	movlw	low STR_15
  9030  0025CC  0100               	movlb	0	; () banked
  9031  0025CE  6F82               	movwf	strcpy@from& (0+255),b
  9032  0025D0  0EFF               	movlw	high STR_15
  9033  0025D2  0100               	movlb	0	; () banked
  9034  0025D4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9035  0025D6  ECB7  F026         	call	_strcpy	;wreg free
  9036                           
  9037                           ;RTC.c: 95: break;
  9038  0025DA  D06B               	goto	l6666
  9039  0025DC                     l6654:
  9040                           
  9041                           ;RTC.c: 97: strcpy(month, "SEP");
  9042  0025DC  0EBE               	movlw	low printRTC@month
  9043  0025DE  0100               	movlb	0	; () banked
  9044  0025E0  6F80               	movwf	strcpy@to& (0+255),b
  9045  0025E2  0E00               	movlw	high printRTC@month
  9046  0025E4  0100               	movlb	0	; () banked
  9047  0025E6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9048  0025E8  0EE3               	movlw	low STR_16
  9049  0025EA  0100               	movlb	0	; () banked
  9050  0025EC  6F82               	movwf	strcpy@from& (0+255),b
  9051  0025EE  0EFF               	movlw	high STR_16
  9052  0025F0  0100               	movlb	0	; () banked
  9053  0025F2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9054  0025F4  ECB7  F026         	call	_strcpy	;wreg free
  9055                           
  9056                           ;RTC.c: 98: break;
  9057  0025F8  D05C               	goto	l6666
  9058  0025FA                     l6656:
  9059                           
  9060                           ;RTC.c: 100: strcpy(month, "OCT");
  9061  0025FA  0EBE               	movlw	low printRTC@month
  9062  0025FC  0100               	movlb	0	; () banked
  9063  0025FE  6F80               	movwf	strcpy@to& (0+255),b
  9064  002600  0E00               	movlw	high printRTC@month
  9065  002602  0100               	movlb	0	; () banked
  9066  002604  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9067  002606  0EF3               	movlw	low STR_17
  9068  002608  0100               	movlb	0	; () banked
  9069  00260A  6F82               	movwf	strcpy@from& (0+255),b
  9070  00260C  0EFF               	movlw	high STR_17
  9071  00260E  0100               	movlb	0	; () banked
  9072  002610  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9073  002612  ECB7  F026         	call	_strcpy	;wreg free
  9074                           
  9075                           ;RTC.c: 101: break;
  9076  002616  D04D               	goto	l6666
  9077  002618                     l6658:
  9078                           
  9079                           ;RTC.c: 103: strcpy(month, "NOV");
  9080  002618  0EBE               	movlw	low printRTC@month
  9081  00261A  0100               	movlb	0	; () banked
  9082  00261C  6F80               	movwf	strcpy@to& (0+255),b
  9083  00261E  0E00               	movlw	high printRTC@month
  9084  002620  0100               	movlb	0	; () banked
  9085  002622  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9086  002624  0EF7               	movlw	low STR_18
  9087  002626  0100               	movlb	0	; () banked
  9088  002628  6F82               	movwf	strcpy@from& (0+255),b
  9089  00262A  0EFF               	movlw	high STR_18
  9090  00262C  0100               	movlb	0	; () banked
  9091  00262E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9092  002630  ECB7  F026         	call	_strcpy	;wreg free
  9093                           
  9094                           ;RTC.c: 104: break;
  9095  002634  D03E               	goto	l6666
  9096  002636                     l6660:
  9097                           
  9098                           ;RTC.c: 106: strcpy(month, "DEC");
  9099  002636  0EBE               	movlw	low printRTC@month
  9100  002638  0100               	movlb	0	; () banked
  9101  00263A  6F80               	movwf	strcpy@to& (0+255),b
  9102  00263C  0E00               	movlw	high printRTC@month
  9103  00263E  0100               	movlb	0	; () banked
  9104  002640  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9105  002642  0ECF               	movlw	low STR_19
  9106  002644  0100               	movlb	0	; () banked
  9107  002646  6F82               	movwf	strcpy@from& (0+255),b
  9108  002648  0EFF               	movlw	high STR_19
  9109  00264A  0100               	movlb	0	; () banked
  9110  00264C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9111  00264E  ECB7  F026         	call	_strcpy	;wreg free
  9112                           
  9113                           ;RTC.c: 108: }
  9114                           
  9115                           ;RTC.c: 107: break;
  9116  002652  D02F               	goto	l6666
  9117  002654                     l6664:
  9118  002654  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9119  002658  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9120                           
  9121                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9122                           ; Switch size 1, requested type "space"
  9123                           ; Number of cases is 1, Range of values is 0 to 0
  9124                           ; switch strategies available:
  9125                           ; Name         Instructions Cycles
  9126                           ; simple_byte            4     3 (average)
  9127                           ;	Chosen strategy is simple_byte
  9128  00265C  0100               	movlb	0	; () banked
  9129  00265E  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9130  002660  0A00               	xorlw	0	; case 0
  9131  002662  A4D8               	btfss	status,2,c
  9132  002664  D026               	goto	l6666
  9133                           
  9134                           ; BSR set to: 0
  9135                           ; Switch size 1, requested type "space"
  9136                           ; Number of cases is 12, Range of values is 1 to 12
  9137                           ; switch strategies available:
  9138                           ; Name         Instructions Cycles
  9139                           ; simple_byte           37    19 (average)
  9140                           ;	Chosen strategy is simple_byte
  9141  002666  0100               	movlb	0	; () banked
  9142  002668  51AB               	movf	??_printRTC& (0+255),w,b
  9143  00266A  0A01               	xorlw	1	; case 1
  9144  00266C  B4D8               	btfsc	status,2,c
  9145  00266E  D73E               	goto	l6638
  9146  002670  0A03               	xorlw	3	; case 2
  9147  002672  B4D8               	btfsc	status,2,c
  9148  002674  D74A               	goto	l6640
  9149  002676  0A01               	xorlw	1	; case 3
  9150  002678  B4D8               	btfsc	status,2,c
  9151  00267A  D756               	goto	l6642
  9152  00267C  0A07               	xorlw	7	; case 4
  9153  00267E  B4D8               	btfsc	status,2,c
  9154  002680  D762               	goto	l6644
  9155  002682  0A01               	xorlw	1	; case 5
  9156  002684  B4D8               	btfsc	status,2,c
  9157  002686  D76E               	goto	l6646
  9158  002688  0A03               	xorlw	3	; case 6
  9159  00268A  B4D8               	btfsc	status,2,c
  9160  00268C  D77A               	goto	l6648
  9161  00268E  0A01               	xorlw	1	; case 7
  9162  002690  B4D8               	btfsc	status,2,c
  9163  002692  D786               	goto	l6650
  9164  002694  0A0F               	xorlw	15	; case 8
  9165  002696  B4D8               	btfsc	status,2,c
  9166  002698  D792               	goto	l6652
  9167  00269A  0A01               	xorlw	1	; case 9
  9168  00269C  B4D8               	btfsc	status,2,c
  9169  00269E  D79E               	goto	l6654
  9170  0026A0  0A03               	xorlw	3	; case 10
  9171  0026A2  B4D8               	btfsc	status,2,c
  9172  0026A4  D7AA               	goto	l6656
  9173  0026A6  0A01               	xorlw	1	; case 11
  9174  0026A8  B4D8               	btfsc	status,2,c
  9175  0026AA  D7B6               	goto	l6658
  9176  0026AC  0A07               	xorlw	7	; case 12
  9177  0026AE  B4D8               	btfsc	status,2,c
  9178  0026B0  D7C2               	goto	l6660
  9179  0026B2                     l6666:
  9180                           
  9181                           ;RTC.c: 109: lcdInst(0b10000000);;
  9182  0026B2  0E80               	movlw	128
  9183  0026B4  EC5C  F029         	call	_lcdInst
  9184                           
  9185                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9186  0026B8  0E06               	movlw	low STR_21
  9187  0026BA  0100               	movlb	0	; () banked
  9188  0026BC  6F8E               	movwf	printf@f& (0+255),b
  9189  0026BE  0EFB               	movlw	high STR_21
  9190  0026C0  0100               	movlb	0	; () banked
  9191  0026C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9192  0026C4  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9193  0026C8  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9194  0026CC  0EBE               	movlw	low printRTC@month
  9195  0026CE  0100               	movlb	0	; () banked
  9196  0026D0  6F92               	movwf	(?_printf+4)& (0+255),b
  9197  0026D2  0E00               	movlw	high printRTC@month
  9198  0026D4  0100               	movlb	0	; () banked
  9199  0026D6  6F93               	movwf	(?_printf+5)& (0+255),b
  9200  0026D8  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9201  0026DC  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9202  0026E0  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9203  0026E4  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9204  0026E8  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9205  0026EC  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9206  0026F0  EC02  F00B         	call	_printf	;wreg free
  9207  0026F4  0012               	return		;funcret
  9208  0026F6                     __end_of_printRTC:
  9209                           	opt stack 0
  9210                           tblptru	equ	0xFF8
  9211                           tblptrh	equ	0xFF7
  9212                           tblptrl	equ	0xFF6
  9213                           tablat	equ	0xFF5
  9214                           prodh	equ	0xFF4
  9215                           prodl	equ	0xFF3
  9216                           intcon	equ	0xFF2
  9217                           intcon2	equ	0xFF1
  9218                           intcon3	equ	0xFF0
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           postdec1	equ	0xFE5
  9222                           fsr1l	equ	0xFE1
  9223                           indf2	equ	0xFDF
  9224                           postinc2	equ	0xFDE
  9225                           postdec2	equ	0xFDD
  9226                           fsr2h	equ	0xFDA
  9227                           fsr2l	equ	0xFD9
  9228                           status	equ	0xFD8
  9229                           
  9230 ;; *************** function _strcpy *****************
  9231 ;; Defined at:
  9232 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9235 ;;		 -> printRTC@month(4), UI@month(4), 
  9236 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9237 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9238 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9239 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9240 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9241 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9242 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9243 ;;		 -> STR_8(4), 
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9246 ;;		 -> printRTC@month(4), UI@month(4), 
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  2    0[BANK0 ] PTR unsigned char 
  9249 ;; Registers used:
  9250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9256 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9259 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9260 ;;Total ram usage:        6 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    7
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_UI
  9267 ;;		_printRTC
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           	psect	text25
  9272  004D6E                     __ptext25:
  9273                           	opt stack 0
  9274  004D6E                     _strcpy:
  9275                           	opt stack 20
  9276                           
  9277                           ;incstack = 0
  9278  004D6E  C080  F084         	movff	strcpy@to,strcpy@cp
  9279  004D72  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9280  004D76  D006               	goto	l6372
  9281  004D78                     l6370:
  9282  004D78  0100               	movlb	0	; () banked
  9283  004D7A  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9284  004D7C  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9285  004D7E  0100               	movlb	0	; () banked
  9286  004D80  4B82               	infsnz	strcpy@from& (0+255),f,b
  9287  004D82  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9288  004D84                     l6372:
  9289  004D84  C082  FFF6         	movff	strcpy@from,tblptrl
  9290  004D88  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9291  004D8C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9292  004D8C  6AF8               	clrf	tblptru,c
  9293  004D8E                     	endif
  9294  004D8E                     	if	0	;tblptru may be non-zero
  9295  004D8E                     	endif
  9296  004D8E  C084  FFD9         	movff	strcpy@cp,fsr2l
  9297  004D92  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9298  004D96  0008               	tblrd		*
  9299  004D98  CFF5 FFDF          	movff	tablat,indf2
  9300  004D9C  50DF               	movf	indf2,w,c
  9301  004D9E  B4D8               	btfsc	status,2,c
  9302  004DA0  0012               	return	
  9303  004DA2  D7EA               	goto	l6370
  9304  004DA4                     __end_of_strcpy:
  9305                           	opt stack 0
  9306                           tblptru	equ	0xFF8
  9307                           tblptrh	equ	0xFF7
  9308                           tblptrl	equ	0xFF6
  9309                           tablat	equ	0xFF5
  9310                           prodh	equ	0xFF4
  9311                           prodl	equ	0xFF3
  9312                           intcon	equ	0xFF2
  9313                           intcon2	equ	0xFF1
  9314                           intcon3	equ	0xFF0
  9315                           postinc0	equ	0xFEE
  9316                           wreg	equ	0xFE8
  9317                           postdec1	equ	0xFE5
  9318                           fsr1l	equ	0xFE1
  9319                           indf2	equ	0xFDF
  9320                           postinc2	equ	0xFDE
  9321                           postdec2	equ	0xFDD
  9322                           fsr2h	equ	0xFDA
  9323                           fsr2l	equ	0xFD9
  9324                           status	equ	0xFD8
  9325                           
  9326 ;; *************** function _getRTC *****************
  9327 ;; Defined at:
  9328 ;;		line 44 in file "RTC.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;		None
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;  i               2    3[BANK0 ] int 
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      void 
  9335 ;; Registers used:
  9336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;Total ram usage:        2 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    9
  9349 ;; This function calls:
  9350 ;;		_I2C_Master_Read
  9351 ;;		_I2C_Master_Start
  9352 ;;		_I2C_Master_Stop
  9353 ;;		_I2C_Master_Write
  9354 ;; This function is called by:
  9355 ;;		_printRTC
  9356 ;;		_initSortTimer
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           	psect	text26
  9361  0044CC                     __ptext26:
  9362                           	opt stack 0
  9363  0044CC                     _getRTC:
  9364                           	opt stack 18
  9365                           
  9366                           ;RTC.c: 48: I2C_Master_Start();
  9367                           
  9368                           ;incstack = 0
  9369  0044CC  EC82  F029         	call	_I2C_Master_Start	;wreg free
  9370                           
  9371                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9372  0044D0  0E00               	movlw	0
  9373  0044D2  0100               	movlb	0	; () banked
  9374  0044D4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9375  0044D6  0ED0               	movlw	208
  9376  0044D8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9377  0044DA  EC70  F029         	call	_I2C_Master_Write	;wreg free
  9378                           
  9379                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9380  0044DE  0E00               	movlw	0
  9381  0044E0  0100               	movlb	0	; () banked
  9382  0044E2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9383  0044E4  0E00               	movlw	0
  9384  0044E6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9385  0044E8  EC70  F029         	call	_I2C_Master_Write	;wreg free
  9386                           
  9387                           ;RTC.c: 51: I2C_Master_Stop();
  9388  0044EC  EC7E  F029         	call	_I2C_Master_Stop	;wreg free
  9389                           
  9390                           ;RTC.c: 54: I2C_Master_Start();
  9391  0044F0  EC82  F029         	call	_I2C_Master_Start	;wreg free
  9392                           
  9393                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9394  0044F4  0E00               	movlw	0
  9395  0044F6  0100               	movlb	0	; () banked
  9396  0044F8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9397  0044FA  0ED1               	movlw	209
  9398  0044FC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9399  0044FE  EC70  F029         	call	_I2C_Master_Write	;wreg free
  9400                           
  9401                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9402  004502  0E00               	movlw	0
  9403  004504  0100               	movlb	0	; () banked
  9404  004506  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9405  004508  0E00               	movlw	0
  9406  00450A  6F83               	movwf	getRTC@i& (0+255),b
  9407  00450C                     l6378:
  9408                           
  9409                           ; BSR set to: 0
  9410  00450C  0100               	movlb	0	; () banked
  9411  00450E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9412  004510  D008               	goto	l6382
  9413  004512  0100               	movlb	0	; () banked
  9414  004514  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9415  004516  E115               	bnz	l6388
  9416  004518  0E06               	movlw	6
  9417  00451A  0100               	movlb	0	; () banked
  9418  00451C  5D83               	subwf	getRTC@i& (0+255),w,b
  9419  00451E  B0D8               	btfsc	status,0,c
  9420  004520  D010               	goto	l6388
  9421  004522                     l6382:
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9425  004522  0E1C               	movlw	low _time
  9426  004524  0100               	movlb	0	; () banked
  9427  004526  2583               	addwf	getRTC@i& (0+255),w,b
  9428  004528  6ED9               	movwf	fsr2l,c
  9429  00452A  0E01               	movlw	high _time
  9430  00452C  0100               	movlb	0	; () banked
  9431  00452E  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9432  004530  6EDA               	movwf	fsr2h,c
  9433  004532  0E01               	movlw	1
  9434  004534  EC0F  F028         	call	_I2C_Master_Read
  9435  004538  6EDF               	movwf	indf2,c
  9436  00453A  0100               	movlb	0	; () banked
  9437  00453C  4B83               	infsnz	getRTC@i& (0+255),f,b
  9438  00453E  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9439  004540  D7E5               	goto	l6378
  9440  004542                     l6388:
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;RTC.c: 58: }
  9444                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9445  004542  0E00               	movlw	0
  9446  004544  EC0F  F028         	call	_I2C_Master_Read
  9447  004548  0101               	movlb	1	; () banked
  9448  00454A  6F22               	movwf	(_time+6)& (0+255),b
  9449                           
  9450                           ;RTC.c: 60: I2C_Master_Stop();
  9451  00454C  EC7E  F029         	call	_I2C_Master_Stop	;wreg free
  9452  004550  0012               	return		;funcret
  9453  004552                     __end_of_getRTC:
  9454                           	opt stack 0
  9455                           tblptru	equ	0xFF8
  9456                           tblptrh	equ	0xFF7
  9457                           tblptrl	equ	0xFF6
  9458                           tablat	equ	0xFF5
  9459                           prodh	equ	0xFF4
  9460                           prodl	equ	0xFF3
  9461                           intcon	equ	0xFF2
  9462                           intcon2	equ	0xFF1
  9463                           intcon3	equ	0xFF0
  9464                           postinc0	equ	0xFEE
  9465                           wreg	equ	0xFE8
  9466                           postdec1	equ	0xFE5
  9467                           fsr1l	equ	0xFE1
  9468                           indf2	equ	0xFDF
  9469                           postinc2	equ	0xFDE
  9470                           postdec2	equ	0xFDD
  9471                           fsr2h	equ	0xFDA
  9472                           fsr2l	equ	0xFD9
  9473                           status	equ	0xFD8
  9474                           
  9475 ;; *************** function _I2C_Master_Write *****************
  9476 ;; Defined at:
  9477 ;;		line 49 in file "I2C.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;  d               2    1[BANK0 ] unsigned int 
  9480 ;; Auto vars:     Size  Location     Type
  9481 ;;		None
  9482 ;; Return value:  Size  Location     Type
  9483 ;;                  1    wreg      void 
  9484 ;; Registers used:
  9485 ;;		wreg, status,2, status,0, cstack
  9486 ;; Tracked objects:
  9487 ;;		On entry : 0/0
  9488 ;;		On exit  : 0/0
  9489 ;;		Unchanged: 0/0
  9490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9491 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;Total ram usage:        2 bytes
  9496 ;; Hardware stack levels used:    1
  9497 ;; Hardware stack levels required when called:    8
  9498 ;; This function calls:
  9499 ;;		_I2C_Master_Wait
  9500 ;; This function is called by:
  9501 ;;		_loadRTC
  9502 ;;		_getRTC
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           	psect	text27
  9507  0052E0                     __ptext27:
  9508                           	opt stack 0
  9509  0052E0                     _I2C_Master_Write:
  9510                           	opt stack 18
  9511                           
  9512                           ;I2C.c: 51: I2C_Master_Wait();
  9513                           
  9514                           ;incstack = 0
  9515  0052E0  EC41  F029         	call	_I2C_Master_Wait	;wreg free
  9516                           
  9517                           ;I2C.c: 52: SSPBUF = d;
  9518  0052E4  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9519  0052E8  0012               	return		;funcret
  9520  0052EA                     __end_of_I2C_Master_Write:
  9521                           	opt stack 0
  9522                           tblptru	equ	0xFF8
  9523                           tblptrh	equ	0xFF7
  9524                           tblptrl	equ	0xFF6
  9525                           tablat	equ	0xFF5
  9526                           prodh	equ	0xFF4
  9527                           prodl	equ	0xFF3
  9528                           intcon	equ	0xFF2
  9529                           intcon2	equ	0xFF1
  9530                           intcon3	equ	0xFF0
  9531                           postinc0	equ	0xFEE
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1l	equ	0xFE1
  9535                           indf2	equ	0xFDF
  9536                           postinc2	equ	0xFDE
  9537                           postdec2	equ	0xFDD
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function _I2C_Master_Stop *****************
  9543 ;; Defined at:
  9544 ;;		line 43 in file "I2C.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;		None
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;		None
  9549 ;; Return value:  Size  Location     Type
  9550 ;;                  1    wreg      void 
  9551 ;; Registers used:
  9552 ;;		wreg, status,2, status,0, cstack
  9553 ;; Tracked objects:
  9554 ;;		On entry : 0/0
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;Total ram usage:        0 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; Hardware stack levels required when called:    8
  9565 ;; This function calls:
  9566 ;;		_I2C_Master_Wait
  9567 ;; This function is called by:
  9568 ;;		_loadRTC
  9569 ;;		_getRTC
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           	psect	text28
  9574  0052FC                     __ptext28:
  9575                           	opt stack 0
  9576  0052FC                     _I2C_Master_Stop:
  9577                           	opt stack 18
  9578                           
  9579                           ;I2C.c: 45: I2C_Master_Wait();
  9580                           
  9581                           ;incstack = 0
  9582  0052FC  EC41  F029         	call	_I2C_Master_Wait	;wreg free
  9583                           
  9584                           ;I2C.c: 46: PEN = 1;
  9585  005300  84C5               	bsf	4037,2,c	;volatile
  9586  005302  0012               	return		;funcret
  9587  005304                     __end_of_I2C_Master_Stop:
  9588                           	opt stack 0
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           intcon	equ	0xFF2
  9596                           intcon2	equ	0xFF1
  9597                           intcon3	equ	0xFF0
  9598                           postinc0	equ	0xFEE
  9599                           wreg	equ	0xFE8
  9600                           postdec1	equ	0xFE5
  9601                           fsr1l	equ	0xFE1
  9602                           indf2	equ	0xFDF
  9603                           postinc2	equ	0xFDE
  9604                           postdec2	equ	0xFDD
  9605                           fsr2h	equ	0xFDA
  9606                           fsr2l	equ	0xFD9
  9607                           status	equ	0xFD8
  9608                           
  9609 ;; *************** function _I2C_Master_Start *****************
  9610 ;; Defined at:
  9611 ;;		line 31 in file "I2C.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;		None
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;                  1    wreg      void 
  9618 ;; Registers used:
  9619 ;;		wreg, status,2, status,0, cstack
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;Total ram usage:        0 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    8
  9632 ;; This function calls:
  9633 ;;		_I2C_Master_Wait
  9634 ;; This function is called by:
  9635 ;;		_loadRTC
  9636 ;;		_getRTC
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           	psect	text29
  9641  005304                     __ptext29:
  9642                           	opt stack 0
  9643  005304                     _I2C_Master_Start:
  9644                           	opt stack 18
  9645                           
  9646                           ;I2C.c: 33: I2C_Master_Wait();
  9647                           
  9648                           ;incstack = 0
  9649  005304  EC41  F029         	call	_I2C_Master_Wait	;wreg free
  9650                           
  9651                           ;I2C.c: 34: SEN = 1;
  9652  005308  80C5               	bsf	4037,0,c	;volatile
  9653  00530A  0012               	return		;funcret
  9654  00530C                     __end_of_I2C_Master_Start:
  9655                           	opt stack 0
  9656                           tblptru	equ	0xFF8
  9657                           tblptrh	equ	0xFF7
  9658                           tblptrl	equ	0xFF6
  9659                           tablat	equ	0xFF5
  9660                           prodh	equ	0xFF4
  9661                           prodl	equ	0xFF3
  9662                           intcon	equ	0xFF2
  9663                           intcon2	equ	0xFF1
  9664                           intcon3	equ	0xFF0
  9665                           postinc0	equ	0xFEE
  9666                           wreg	equ	0xFE8
  9667                           postdec1	equ	0xFE5
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           fsr2h	equ	0xFDA
  9673                           fsr2l	equ	0xFD9
  9674                           status	equ	0xFD8
  9675                           
  9676 ;; *************** function _I2C_Master_Read *****************
  9677 ;; Defined at:
  9678 ;;		line 55 in file "I2C.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;  a               1    wreg     unsigned char 
  9681 ;; Auto vars:     Size  Location     Type
  9682 ;;  a               1    1[BANK0 ] unsigned char 
  9683 ;;  temp            1    2[BANK0 ] unsigned char 
  9684 ;; Return value:  Size  Location     Type
  9685 ;;                  1    wreg      unsigned char 
  9686 ;; Registers used:
  9687 ;;		wreg, status,2, status,0, cstack
  9688 ;; Tracked objects:
  9689 ;;		On entry : 0/0
  9690 ;;		On exit  : 0/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;Total ram usage:        2 bytes
  9698 ;; Hardware stack levels used:    1
  9699 ;; Hardware stack levels required when called:    8
  9700 ;; This function calls:
  9701 ;;		_I2C_Master_Wait
  9702 ;; This function is called by:
  9703 ;;		_getRTC
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           	psect	text30
  9708  00501E                     __ptext30:
  9709                           	opt stack 0
  9710  00501E                     _I2C_Master_Read:
  9711                           	opt stack 18
  9712                           
  9713                           ;incstack = 0
  9714                           ;I2C_Master_Read@a stored from wreg
  9715  00501E  0100               	movlb	0	; () banked
  9716  005020  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9717                           
  9718                           ;I2C.c: 57: unsigned char temp;
  9719                           ;I2C.c: 58: I2C_Master_Wait();
  9720  005022  EC41  F029         	call	_I2C_Master_Wait	;wreg free
  9721                           
  9722                           ;I2C.c: 59: RCEN = 1;
  9723  005026  86C5               	bsf	4037,3,c	;volatile
  9724                           
  9725                           ;I2C.c: 60: I2C_Master_Wait();
  9726  005028  EC41  F029         	call	_I2C_Master_Wait	;wreg free
  9727                           
  9728                           ;I2C.c: 61: temp = SSPBUF;
  9729  00502C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9730                           
  9731                           ;I2C.c: 62: I2C_Master_Wait();
  9732  005030  EC41  F029         	call	_I2C_Master_Wait	;wreg free
  9733                           
  9734                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9735  005034  0100               	movlb	0	; () banked
  9736  005036  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9737  005038  0100               	movlb	0	; () banked
  9738  00503A  A4D8               	btfss	status,2,c
  9739  00503C  D002               	goto	u4300
  9740  00503E  8AC5               	bsf	4037,5,c	;volatile
  9741  005040  D001               	goto	l6066
  9742  005042                     u4300:
  9743  005042  9AC5               	bcf	4037,5,c	;volatile
  9744  005044                     l6066:
  9745                           
  9746                           ;I2C.c: 64: ACKEN = 1;
  9747  005044  88C5               	bsf	4037,4,c	;volatile
  9748                           
  9749                           ;I2C.c: 65: return temp;
  9750  005046  0100               	movlb	0	; () banked
  9751  005048  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9752  00504A  0012               	return	
  9753  00504C                     __end_of_I2C_Master_Read:
  9754                           	opt stack 0
  9755                           tblptru	equ	0xFF8
  9756                           tblptrh	equ	0xFF7
  9757                           tblptrl	equ	0xFF6
  9758                           tablat	equ	0xFF5
  9759                           prodh	equ	0xFF4
  9760                           prodl	equ	0xFF3
  9761                           intcon	equ	0xFF2
  9762                           intcon2	equ	0xFF1
  9763                           intcon3	equ	0xFF0
  9764                           postinc0	equ	0xFEE
  9765                           wreg	equ	0xFE8
  9766                           postdec1	equ	0xFE5
  9767                           fsr1l	equ	0xFE1
  9768                           indf2	equ	0xFDF
  9769                           postinc2	equ	0xFDE
  9770                           postdec2	equ	0xFDD
  9771                           fsr2h	equ	0xFDA
  9772                           fsr2l	equ	0xFD9
  9773                           status	equ	0xFD8
  9774                           
  9775 ;; *************** function _I2C_Master_Wait *****************
  9776 ;; Defined at:
  9777 ;;		line 26 in file "I2C.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;		None
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  1    wreg      void 
  9784 ;; Registers used:
  9785 ;;		wreg, status,2, status,0
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;Total ram usage:        1 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    7
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_I2C_Master_Start
  9802 ;;		_I2C_Master_Stop
  9803 ;;		_I2C_Master_Write
  9804 ;;		_I2C_Master_Read
  9805 ;;		_I2C_Master_RepeatedStart
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           	psect	text31
  9810  005282                     __ptext31:
  9811                           	opt stack 0
  9812  005282                     _I2C_Master_Wait:
  9813                           	opt stack 18
  9814  005282                     l66:
  9815  005282  B4C7               	btfsc	4039,2,c	;volatile
  9816  005284  D7FE               	goto	l66
  9817  005286  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9818  00528A  0E1F               	movlw	31
  9819  00528C  0100               	movlb	0	; () banked
  9820  00528E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9821  005290  B4D8               	btfsc	status,2,c
  9822  005292  0012               	return	
  9823  005294  D7F6               	goto	l66
  9824  005296                     __end_of_I2C_Master_Wait:
  9825                           	opt stack 0
  9826                           tblptru	equ	0xFF8
  9827                           tblptrh	equ	0xFF7
  9828                           tblptrl	equ	0xFF6
  9829                           tablat	equ	0xFF5
  9830                           prodh	equ	0xFF4
  9831                           prodl	equ	0xFF3
  9832                           intcon	equ	0xFF2
  9833                           intcon2	equ	0xFF1
  9834                           intcon3	equ	0xFF0
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           postdec1	equ	0xFE5
  9838                           fsr1l	equ	0xFE1
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function _change_state_to_menu_22 *****************
  9847 ;; Defined at:
  9848 ;;		line 498 in file "UI.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;		None
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;		None
  9853 ;; Return value:  Size  Location     Type
  9854 ;;                  1    wreg      void 
  9855 ;; Registers used:
  9856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;Total ram usage:        0 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:   10
  9869 ;; This function calls:
  9870 ;;		_lcdInst
  9871 ;;		_printf
  9872 ;; This function is called by:
  9873 ;;		_UI
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877                           	psect	text32
  9878  004CFE                     __ptext32:
  9879                           	opt stack 0
  9880  004CFE                     _change_state_to_menu_22:
  9881                           	opt stack 19
  9882                           
  9883                           ;UI.c: 499: cur_state = 22;
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;incstack = 0
  9887  004CFE  0E00               	movlw	0
  9888  004D00  0100               	movlb	0	; () banked
  9889  004D02  6FED               	movwf	(_cur_state+1)& (0+255),b
  9890  004D04  0E16               	movlw	22
  9891  004D06  6FEC               	movwf	_cur_state& (0+255),b
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;UI.c: 501: lcdInst(0b10000000);;
  9895  004D08  0E80               	movlw	128
  9896  004D0A  EC5C  F029         	call	_lcdInst
  9897                           
  9898                           ;UI.c: 502: printf("2. SORT        <");
  9899  004D0E  0EC0               	movlw	low STR_34
  9900  004D10  0100               	movlb	0	; () banked
  9901  004D12  6F8E               	movwf	printf@f& (0+255),b
  9902  004D14  0EFD               	movlw	high STR_34
  9903  004D16  0100               	movlb	0	; () banked
  9904  004D18  6F8F               	movwf	(printf@f+1)& (0+255),b
  9905  004D1A  EC02  F00B         	call	_printf	;wreg free
  9906                           
  9907                           ;UI.c: 503: lcdInst(0b11000000);;
  9908  004D1E  0EC0               	movlw	192
  9909  004D20  EC5C  F029         	call	_lcdInst
  9910                           
  9911                           ;UI.c: 504: printf("3. LOGS         ");
  9912  004D24  0E05               	movlw	low STR_36
  9913  004D26  0100               	movlb	0	; () banked
  9914  004D28  6F8E               	movwf	printf@f& (0+255),b
  9915  004D2A  0EFD               	movlw	high STR_36
  9916  004D2C  0100               	movlb	0	; () banked
  9917  004D2E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9918  004D30  EC02  F00B         	call	_printf	;wreg free
  9919  004D34  0012               	return		;funcret
  9920  004D36                     __end_of_change_state_to_menu_22:
  9921                           	opt stack 0
  9922                           tblptru	equ	0xFF8
  9923                           tblptrh	equ	0xFF7
  9924                           tblptrl	equ	0xFF6
  9925                           tablat	equ	0xFF5
  9926                           prodh	equ	0xFF4
  9927                           prodl	equ	0xFF3
  9928                           intcon	equ	0xFF2
  9929                           intcon2	equ	0xFF1
  9930                           intcon3	equ	0xFF0
  9931                           postinc0	equ	0xFEE
  9932                           wreg	equ	0xFE8
  9933                           postdec1	equ	0xFE5
  9934                           fsr1l	equ	0xFE1
  9935                           indf2	equ	0xFDF
  9936                           postinc2	equ	0xFDE
  9937                           postdec2	equ	0xFDD
  9938                           fsr2h	equ	0xFDA
  9939                           fsr2l	equ	0xFD9
  9940                           status	equ	0xFD8
  9941                           
  9942 ;; *************** function _change_state_to_menu_12 *****************
  9943 ;; Defined at:
  9944 ;;		line 490 in file "UI.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;		None
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;		None
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  1    wreg      void 
  9951 ;; Registers used:
  9952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;Total ram usage:        0 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:   10
  9965 ;; This function calls:
  9966 ;;		_lcdInst
  9967 ;;		_printf
  9968 ;; This function is called by:
  9969 ;;		_UI
  9970 ;; This function uses a non-reentrant model
  9971 ;;
  9972                           
  9973                           	psect	text33
  9974  004D36                     __ptext33:
  9975                           	opt stack 0
  9976  004D36                     _change_state_to_menu_12:
  9977                           	opt stack 19
  9978                           
  9979                           ;UI.c: 491: cur_state = 12;
  9980                           
  9981                           ;incstack = 0
  9982  004D36  0E00               	movlw	0
  9983  004D38  0100               	movlb	0	; () banked
  9984  004D3A  6FED               	movwf	(_cur_state+1)& (0+255),b
  9985  004D3C  0E0C               	movlw	12
  9986  004D3E  6FEC               	movwf	_cur_state& (0+255),b
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;UI.c: 493: lcdInst(0b10000000);;
  9990  004D40  0E80               	movlw	128
  9991  004D42  EC5C  F029         	call	_lcdInst
  9992                           
  9993                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9994  004D46  0E27               	movlw	low STR_33
  9995  004D48  0100               	movlb	0	; () banked
  9996  004D4A  6F8E               	movwf	printf@f& (0+255),b
  9997  004D4C  0EFD               	movlw	high STR_33
  9998  004D4E  0100               	movlb	0	; () banked
  9999  004D50  6F8F               	movwf	(printf@f+1)& (0+255),b
 10000  004D52  EC02  F00B         	call	_printf	;wreg free
 10001                           
 10002                           ;UI.c: 495: lcdInst(0b11000000);;
 10003  004D56  0EC0               	movlw	192
 10004  004D58  EC5C  F029         	call	_lcdInst
 10005                           
 10006                           ;UI.c: 496: printf("2. SORT        <");
 10007  004D5C  0EC0               	movlw	low STR_34
 10008  004D5E  0100               	movlb	0	; () banked
 10009  004D60  6F8E               	movwf	printf@f& (0+255),b
 10010  004D62  0EFD               	movlw	high STR_34
 10011  004D64  0100               	movlb	0	; () banked
 10012  004D66  6F8F               	movwf	(printf@f+1)& (0+255),b
 10013  004D68  EC02  F00B         	call	_printf	;wreg free
 10014  004D6C  0012               	return		;funcret
 10015  004D6E                     __end_of_change_state_to_menu_12:
 10016                           	opt stack 0
 10017                           tblptru	equ	0xFF8
 10018                           tblptrh	equ	0xFF7
 10019                           tblptrl	equ	0xFF6
 10020                           tablat	equ	0xFF5
 10021                           prodh	equ	0xFF4
 10022                           prodl	equ	0xFF3
 10023                           intcon	equ	0xFF2
 10024                           intcon2	equ	0xFF1
 10025                           intcon3	equ	0xFF0
 10026                           postinc0	equ	0xFEE
 10027                           wreg	equ	0xFE8
 10028                           postdec1	equ	0xFE5
 10029                           fsr1l	equ	0xFE1
 10030                           indf2	equ	0xFDF
 10031                           postinc2	equ	0xFDE
 10032                           postdec2	equ	0xFDD
 10033                           fsr2h	equ	0xFDA
 10034                           fsr2l	equ	0xFD9
 10035                           status	equ	0xFD8
 10036                           
 10037 ;; *************** function ___awmod *****************
 10038 ;; Defined at:
 10039 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;  dividend        2    0[BANK0 ] int 
 10042 ;;  divisor         2    2[BANK0 ] int 
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;  sign            1    5[BANK0 ] unsigned char 
 10045 ;;  counter         1    4[BANK0 ] unsigned char 
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  2    0[BANK0 ] int 
 10048 ;; Registers used:
 10049 ;;		wreg, status,2, status,0
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10055 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;Total ram usage:        6 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:    7
 10062 ;; This function calls:
 10063 ;;		Nothing
 10064 ;; This function is called by:
 10065 ;;		_UI
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           	psect	text34
 10070  00439E                     __ptext34:
 10071                           	opt stack 0
 10072  00439E                     ___awmod:
 10073                           	opt stack 22
 10074                           
 10075                           ;incstack = 0
 10076  00439E  0E00               	movlw	0
 10077  0043A0  0100               	movlb	0	; () banked
 10078  0043A2  6F85               	movwf	___awmod@sign& (0+255),b
 10079                           
 10080                           ; BSR set to: 0
 10081  0043A4  0100               	movlb	0	; () banked
 10082  0043A6  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10083  0043A8  D008               	goto	l8422
 10084                           
 10085                           ; BSR set to: 0
 10086  0043AA  0100               	movlb	0	; () banked
 10087  0043AC  6D80               	negf	___awmod@dividend& (0+255),b
 10088  0043AE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10089  0043B0  B0D8               	btfsc	status,0,c
 10090  0043B2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10091                           
 10092                           ; BSR set to: 0
 10093  0043B4  0E01               	movlw	1
 10094  0043B6  0100               	movlb	0	; () banked
 10095  0043B8  6F85               	movwf	___awmod@sign& (0+255),b
 10096  0043BA                     l8422:
 10097                           
 10098                           ; BSR set to: 0
 10099  0043BA  0100               	movlb	0	; () banked
 10100  0043BC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10101  0043BE  D005               	goto	l8426
 10102                           
 10103                           ; BSR set to: 0
 10104  0043C0  0100               	movlb	0	; () banked
 10105  0043C2  6D82               	negf	___awmod@divisor& (0+255),b
 10106  0043C4  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10107  0043C6  B0D8               	btfsc	status,0,c
 10108  0043C8  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10109  0043CA                     l8426:
 10110                           
 10111                           ; BSR set to: 0
 10112  0043CA  0100               	movlb	0	; () banked
 10113  0043CC  5182               	movf	___awmod@divisor& (0+255),w,b
 10114  0043CE  0100               	movlb	0	; () banked
 10115  0043D0  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10116  0043D2  B4D8               	btfsc	status,2,c
 10117  0043D4  D026               	goto	l8442
 10118                           
 10119                           ; BSR set to: 0
 10120  0043D6  0E01               	movlw	1
 10121  0043D8  0100               	movlb	0	; () banked
 10122  0043DA  6F84               	movwf	___awmod@counter& (0+255),b
 10123  0043DC  D006               	goto	l8432
 10124  0043DE                     l8430:
 10125                           
 10126                           ; BSR set to: 0
 10127  0043DE  0100               	movlb	0	; () banked
 10128  0043E0  90D8               	bcf	status,0,c
 10129  0043E2  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10130  0043E4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10131  0043E6  0100               	movlb	0	; () banked
 10132  0043E8  2B84               	incf	___awmod@counter& (0+255),f,b
 10133  0043EA                     l8432:
 10134                           
 10135                           ; BSR set to: 0
 10136  0043EA  0100               	movlb	0	; () banked
 10137  0043EC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10138  0043EE  D7F7               	goto	l8430
 10139  0043F0                     l8434:
 10140                           
 10141                           ; BSR set to: 0
 10142  0043F0  0100               	movlb	0	; () banked
 10143  0043F2  5182               	movf	___awmod@divisor& (0+255),w,b
 10144  0043F4  0100               	movlb	0	; () banked
 10145  0043F6  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10146  0043F8  0100               	movlb	0	; () banked
 10147  0043FA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10148  0043FC  0100               	movlb	0	; () banked
 10149  0043FE  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10150  004400  A0D8               	btfss	status,0,c
 10151  004402  D008               	goto	l8438
 10152                           
 10153                           ; BSR set to: 0
 10154  004404  0100               	movlb	0	; () banked
 10155  004406  5182               	movf	___awmod@divisor& (0+255),w,b
 10156  004408  0100               	movlb	0	; () banked
 10157  00440A  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10158  00440C  0100               	movlb	0	; () banked
 10159  00440E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10160  004410  0100               	movlb	0	; () banked
 10161  004412  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10162  004414                     l8438:
 10163                           
 10164                           ; BSR set to: 0
 10165  004414  0100               	movlb	0	; () banked
 10166  004416  90D8               	bcf	status,0,c
 10167  004418  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10168  00441A  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10169                           
 10170                           ; BSR set to: 0
 10171  00441C  0100               	movlb	0	; () banked
 10172  00441E  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10173  004420  D7E7               	goto	l8434
 10174  004422                     l8442:
 10175                           
 10176                           ; BSR set to: 0
 10177  004422  0100               	movlb	0	; () banked
 10178  004424  5185               	movf	___awmod@sign& (0+255),w,b
 10179  004426  0100               	movlb	0	; () banked
 10180  004428  B4D8               	btfsc	status,2,c
 10181  00442A  D005               	goto	l8446
 10182                           
 10183                           ; BSR set to: 0
 10184  00442C  0100               	movlb	0	; () banked
 10185  00442E  6D80               	negf	___awmod@dividend& (0+255),b
 10186  004430  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10187  004432  B0D8               	btfsc	status,0,c
 10188  004434  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10189  004436                     l8446:
 10190                           
 10191                           ; BSR set to: 0
 10192  004436  C080  F080         	movff	___awmod@dividend,?___awmod
 10193  00443A  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10194  00443E  0012               	return	
 10195  004440                     __end_of___awmod:
 10196                           	opt stack 0
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           prodh	equ	0xFF4
 10202                           prodl	equ	0xFF3
 10203                           intcon	equ	0xFF2
 10204                           intcon2	equ	0xFF1
 10205                           intcon3	equ	0xFF0
 10206                           postinc0	equ	0xFEE
 10207                           wreg	equ	0xFE8
 10208                           postdec1	equ	0xFE5
 10209                           fsr1l	equ	0xFE1
 10210                           indf2	equ	0xFDF
 10211                           postinc2	equ	0xFDE
 10212                           postdec2	equ	0xFDD
 10213                           fsr2h	equ	0xFDA
 10214                           fsr2l	equ	0xFD9
 10215                           status	equ	0xFD8
 10216                           
 10217 ;; *************** function ___awdiv *****************
 10218 ;; Defined at:
 10219 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;  dividend        2    6[BANK0 ] int 
 10222 ;;  divisor         2    8[BANK0 ] int 
 10223 ;; Auto vars:     Size  Location     Type
 10224 ;;  quotient        2   12[BANK0 ] int 
 10225 ;;  sign            1   11[BANK0 ] unsigned char 
 10226 ;;  counter         1   10[BANK0 ] unsigned char 
 10227 ;; Return value:  Size  Location     Type
 10228 ;;                  2    6[BANK0 ] int 
 10229 ;; Registers used:
 10230 ;;		wreg, status,2, status,0
 10231 ;; Tracked objects:
 10232 ;;		On entry : 0/0
 10233 ;;		On exit  : 0/0
 10234 ;;		Unchanged: 0/0
 10235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10236 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;Total ram usage:        8 bytes
 10241 ;; Hardware stack levels used:    1
 10242 ;; Hardware stack levels required when called:    7
 10243 ;; This function calls:
 10244 ;;		Nothing
 10245 ;; This function is called by:
 10246 ;;		_UI
 10247 ;; This function uses a non-reentrant model
 10248 ;;
 10249                           
 10250                           	psect	text35
 10251  0040CE                     __ptext35:
 10252                           	opt stack 0
 10253  0040CE                     ___awdiv:
 10254                           	opt stack 22
 10255                           
 10256                           ; BSR set to: 0
 10257                           ;incstack = 0
 10258  0040CE  0E00               	movlw	0
 10259  0040D0  0100               	movlb	0	; () banked
 10260  0040D2  6F8B               	movwf	___awdiv@sign& (0+255),b
 10261                           
 10262                           ; BSR set to: 0
 10263  0040D4  0100               	movlb	0	; () banked
 10264  0040D6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10265  0040D8  D008               	goto	l8378
 10266                           
 10267                           ; BSR set to: 0
 10268  0040DA  0100               	movlb	0	; () banked
 10269  0040DC  6D88               	negf	___awdiv@divisor& (0+255),b
 10270  0040DE  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10271  0040E0  B0D8               	btfsc	status,0,c
 10272  0040E2  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10273                           
 10274                           ; BSR set to: 0
 10275  0040E4  0E01               	movlw	1
 10276  0040E6  0100               	movlb	0	; () banked
 10277  0040E8  6F8B               	movwf	___awdiv@sign& (0+255),b
 10278  0040EA                     l8378:
 10279                           
 10280                           ; BSR set to: 0
 10281  0040EA  0100               	movlb	0	; () banked
 10282  0040EC  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10283  0040EE  D008               	goto	l8384
 10284                           
 10285                           ; BSR set to: 0
 10286  0040F0  0100               	movlb	0	; () banked
 10287  0040F2  6D86               	negf	___awdiv@dividend& (0+255),b
 10288  0040F4  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10289  0040F6  B0D8               	btfsc	status,0,c
 10290  0040F8  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10291                           
 10292                           ; BSR set to: 0
 10293  0040FA  0E01               	movlw	1
 10294  0040FC  0100               	movlb	0	; () banked
 10295  0040FE  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10296  004100                     l8384:
 10297                           
 10298                           ; BSR set to: 0
 10299  004100  0E00               	movlw	0
 10300  004102  0100               	movlb	0	; () banked
 10301  004104  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10302  004106  0E00               	movlw	0
 10303  004108  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10304                           
 10305                           ; BSR set to: 0
 10306  00410A  0100               	movlb	0	; () banked
 10307  00410C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10308  00410E  0100               	movlb	0	; () banked
 10309  004110  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10310  004112  B4D8               	btfsc	status,2,c
 10311  004114  D02C               	goto	l8406
 10312                           
 10313                           ; BSR set to: 0
 10314  004116  0E01               	movlw	1
 10315  004118  0100               	movlb	0	; () banked
 10316  00411A  6F8A               	movwf	___awdiv@counter& (0+255),b
 10317  00411C  D006               	goto	l8392
 10318  00411E                     l8390:
 10319                           
 10320                           ; BSR set to: 0
 10321  00411E  0100               	movlb	0	; () banked
 10322  004120  90D8               	bcf	status,0,c
 10323  004122  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10324  004124  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10325  004126  0100               	movlb	0	; () banked
 10326  004128  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10327  00412A                     l8392:
 10328                           
 10329                           ; BSR set to: 0
 10330  00412A  0100               	movlb	0	; () banked
 10331  00412C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10332  00412E  D7F7               	goto	l8390
 10333  004130                     l8394:
 10334                           
 10335                           ; BSR set to: 0
 10336  004130  0100               	movlb	0	; () banked
 10337  004132  90D8               	bcf	status,0,c
 10338  004134  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10339  004136  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10340                           
 10341                           ; BSR set to: 0
 10342  004138  0100               	movlb	0	; () banked
 10343  00413A  5188               	movf	___awdiv@divisor& (0+255),w,b
 10344  00413C  0100               	movlb	0	; () banked
 10345  00413E  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10346  004140  0100               	movlb	0	; () banked
 10347  004142  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10348  004144  0100               	movlb	0	; () banked
 10349  004146  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10350  004148  A0D8               	btfss	status,0,c
 10351  00414A  D00A               	goto	l8402
 10352                           
 10353                           ; BSR set to: 0
 10354  00414C  0100               	movlb	0	; () banked
 10355  00414E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10356  004150  0100               	movlb	0	; () banked
 10357  004152  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10358  004154  0100               	movlb	0	; () banked
 10359  004156  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10360  004158  0100               	movlb	0	; () banked
 10361  00415A  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10362                           
 10363                           ; BSR set to: 0
 10364  00415C  0100               	movlb	0	; () banked
 10365  00415E  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10366  004160                     l8402:
 10367                           
 10368                           ; BSR set to: 0
 10369  004160  0100               	movlb	0	; () banked
 10370  004162  90D8               	bcf	status,0,c
 10371  004164  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10372  004166  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10373                           
 10374                           ; BSR set to: 0
 10375  004168  0100               	movlb	0	; () banked
 10376  00416A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10377  00416C  D7E1               	goto	l8394
 10378  00416E                     l8406:
 10379                           
 10380                           ; BSR set to: 0
 10381  00416E  0100               	movlb	0	; () banked
 10382  004170  518B               	movf	___awdiv@sign& (0+255),w,b
 10383  004172  0100               	movlb	0	; () banked
 10384  004174  B4D8               	btfsc	status,2,c
 10385  004176  D005               	goto	l8410
 10386                           
 10387                           ; BSR set to: 0
 10388  004178  0100               	movlb	0	; () banked
 10389  00417A  6D8C               	negf	___awdiv@quotient& (0+255),b
 10390  00417C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10391  00417E  B0D8               	btfsc	status,0,c
 10392  004180  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10393  004182                     l8410:
 10394                           
 10395                           ; BSR set to: 0
 10396  004182  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10397  004186  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10398  00418A  0012               	return	
 10399  00418C                     __end_of___awdiv:
 10400                           	opt stack 0
 10401                           tblptru	equ	0xFF8
 10402                           tblptrh	equ	0xFF7
 10403                           tblptrl	equ	0xFF6
 10404                           tablat	equ	0xFF5
 10405                           prodh	equ	0xFF4
 10406                           prodl	equ	0xFF3
 10407                           intcon	equ	0xFF2
 10408                           intcon2	equ	0xFF1
 10409                           intcon3	equ	0xFF0
 10410                           postinc0	equ	0xFEE
 10411                           wreg	equ	0xFE8
 10412                           postdec1	equ	0xFE5
 10413                           fsr1l	equ	0xFE1
 10414                           indf2	equ	0xFDF
 10415                           postinc2	equ	0xFDE
 10416                           postdec2	equ	0xFDD
 10417                           fsr2h	equ	0xFDA
 10418                           fsr2l	equ	0xFD9
 10419                           status	equ	0xFD8
 10420                           
 10421 ;; *************** function _Test *****************
 10422 ;; Defined at:
 10423 ;;		line 30 in file "Test.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;		None
 10428 ;; Return value:  Size  Location     Type
 10429 ;;                  1    wreg      void 
 10430 ;; Registers used:
 10431 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;Total ram usage:        2 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:   11
 10444 ;; This function calls:
 10445 ;;		_BlockerTest
 10446 ;;		_BothServos
 10447 ;;		_EEPROMTest
 10448 ;;		_PortTestA5
 10449 ;;		_PortTests
 10450 ;;		_PusherTest
 10451 ;;		_SpeedTest
 10452 ;;		_actuatorTest
 10453 ;;		_algorithmTest
 10454 ;;		_lcdInst
 10455 ;;		_printf
 10456 ;;		_sensorTest
 10457 ;; This function is called by:
 10458 ;;		_main
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           	psect	text36
 10463  003C56                     __ptext36:
 10464                           	opt stack 0
 10465  003C56                     _Test:
 10466                           	opt stack 19
 10467  003C56                     
 10468                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10469  003C56  0E01               	movlw	1
 10470  003C58  EC5C  F029         	call	_lcdInst
 10471  003C5C  0E68               	movlw	104
 10472  003C5E  0100               	movlb	0	; () banked
 10473  003C60  6FC6               	movwf	??_Test& (0+255),b
 10474  003C62  0EE4               	movlw	228
 10475  003C64                     u9137:
 10476  003C64  2EE8               	decfsz	wreg,f,c
 10477  003C66  D7FE               	bra	u9137
 10478  003C68  2FC6               	decfsz	??_Test& (0+255),f,b
 10479  003C6A  D7FC               	bra	u9137
 10480  003C6C  F000               	nop	
 10481  003C6E  0E80               	movlw	128
 10482  003C70  EC5C  F029         	call	_lcdInst
 10483                           
 10484                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10485  003C74  0E8E               	movlw	low STR_69
 10486  003C76  0100               	movlb	0	; () banked
 10487  003C78  6F8E               	movwf	printf@f& (0+255),b
 10488  003C7A  0EFC               	movlw	high STR_69
 10489  003C7C  0100               	movlb	0	; () banked
 10490  003C7E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10491  003C80  EC02  F00B         	call	_printf	;wreg free
 10492                           
 10493                           ;Test.c: 35: lcdInst(0b11000000);;
 10494  003C84  0EC0               	movlw	192
 10495  003C86  EC5C  F029         	call	_lcdInst
 10496                           
 10497                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10498  003C8A  0E9F               	movlw	low STR_70
 10499  003C8C  0100               	movlb	0	; () banked
 10500  003C8E  6F8E               	movwf	printf@f& (0+255),b
 10501  003C90  0EFC               	movlw	high STR_70
 10502  003C92  0100               	movlb	0	; () banked
 10503  003C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10504  003C96  EC02  F00B         	call	_printf	;wreg free
 10505                           
 10506                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10507  003C9A  0E05               	movlw	5
 10508  003C9C  0100               	movlb	0	; () banked
 10509  003C9E  6FC7               	movwf	(??_Test+1)& (0+255),b
 10510  003CA0  0E0F               	movlw	15
 10511  003CA2  0100               	movlb	0	; () banked
 10512  003CA4  6FC6               	movwf	??_Test& (0+255),b
 10513  003CA6  0EF1               	movlw	241
 10514  003CA8                     u9147:
 10515  003CA8  2EE8               	decfsz	wreg,f,c
 10516  003CAA  D7FE               	bra	u9147
 10517  003CAC  2FC6               	decfsz	??_Test& (0+255),f,b
 10518  003CAE  D7FC               	bra	u9147
 10519  003CB0  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10520  003CB2  D7FA               	bra	u9147
 10521  003CB4                     l1142:
 10522  003CB4  A281               	btfss	3969,1,c	;volatile
 10523  003CB6  D7FE               	goto	l1142
 10524                           
 10525                           ;Test.c: 39: var = PORTB >> 4;
 10526  003CB8  CF81 F0C6          	movff	3969,??_Test	;volatile
 10527  003CBC  0100               	movlb	0	; () banked
 10528  003CBE  3BC6               	swapf	??_Test& (0+255),f,b
 10529  003CC0  0E0F               	movlw	15
 10530  003CC2  17C6               	andwf	??_Test& (0+255),f,b
 10531  003CC4  0100               	movlb	0	; () banked
 10532  003CC6  51C6               	movf	??_Test& (0+255),w,b
 10533  003CC8  0100               	movlb	0	; () banked
 10534  003CCA  6FFA               	movwf	_var& (0+255),b
 10535  003CCC  6BFB               	clrf	(_var+1)& (0+255),b
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;Test.c: 40: var++;
 10539  003CCE  0100               	movlb	0	; () banked
 10540  003CD0  4BFA               	infsnz	_var& (0+255),f,b
 10541  003CD2  2BFB               	incf	(_var+1)& (0+255),f,b
 10542  003CD4                     l1145:
 10543  003CD4  A281               	btfss	3969,1,c	;volatile
 10544  003CD6  D01F               	goto	l9172
 10545  003CD8  D7FD               	goto	l1145
 10546  003CDA                     l9150:
 10547                           
 10548                           ;Test.c: 44: algorithmTest();
 10549  003CDA  EC9A  F01F         	call	_algorithmTest	;wreg free
 10550                           
 10551                           ;Test.c: 45: break;
 10552  003CDE  D7BB               	goto	l9132
 10553  003CE0                     l9152:
 10554                           
 10555                           ;Test.c: 47: sensorTest();
 10556  003CE0  EC97  F010         	call	_sensorTest	;wreg free
 10557                           
 10558                           ;Test.c: 48: break;
 10559  003CE4  D7B8               	goto	l9132
 10560  003CE6                     l9154:
 10561                           
 10562                           ;Test.c: 50: actuatorTest();
 10563  003CE6  EC09  F000         	call	_actuatorTest	;wreg free
 10564                           
 10565                           ;Test.c: 51: break;
 10566  003CEA  D7B5               	goto	l9132
 10567  003CEC                     l9156:
 10568                           
 10569                           ;Test.c: 53: PortTestA5();
 10570  003CEC  EC19  F025         	call	_PortTestA5	;wreg free
 10571                           
 10572                           ;Test.c: 54: break;
 10573  003CF0  D7B2               	goto	l9132
 10574  003CF2                     l9158:
 10575                           
 10576                           ;Test.c: 57: SpeedTest();
 10577  003CF2  ECEC  F022         	call	_SpeedTest	;wreg free
 10578                           
 10579                           ;Test.c: 58: break;
 10580  003CF6  D7AF               	goto	l9132
 10581  003CF8                     l9160:
 10582                           
 10583                           ;Test.c: 60: EEPROMTest();
 10584  003CF8  EC8E  F029         	call	_EEPROMTest	;wreg free
 10585                           
 10586                           ;Test.c: 61: break;
 10587  003CFC  D7AC               	goto	l9132
 10588  003CFE                     l9162:
 10589                           
 10590                           ;Test.c: 63: PusherTest();
 10591  003CFE  EC2F  F016         	call	_PusherTest	;wreg free
 10592                           
 10593                           ;Test.c: 64: break;
 10594  003D02  D7A9               	goto	l9132
 10595  003D04                     l9164:
 10596                           
 10597                           ;Test.c: 66: PortTests();
 10598  003D04  EC2E  F023         	call	_PortTests	;wreg free
 10599                           
 10600                           ;Test.c: 67: break;
 10601  003D08  D7A6               	goto	l9132
 10602  003D0A                     l9166:
 10603                           
 10604                           ;Test.c: 69: BothServos();
 10605  003D0A  EC1E  F00D         	call	_BothServos	;wreg free
 10606                           
 10607                           ;Test.c: 70: break;
 10608  003D0E  D7A3               	goto	l9132
 10609  003D10                     l9168:
 10610                           
 10611                           ;Test.c: 72: BlockerTest();
 10612  003D10  EC39  F01C         	call	_BlockerTest	;wreg free
 10613                           
 10614                           ;Test.c: 76: }
 10615                           
 10616                           ;Test.c: 75: break;
 10617                           
 10618                           ;Test.c: 74: default:
 10619                           
 10620                           ;Test.c: 73: break;
 10621  003D14  D7A0               	goto	l9132
 10622  003D16                     l9172:
 10623  003D16  C0FA  F0C6         	movff	_var,??_Test
 10624  003D1A  C0FB  F0C7         	movff	_var+1,??_Test+1
 10625                           
 10626                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10627                           ; Switch size 1, requested type "space"
 10628                           ; Number of cases is 1, Range of values is 0 to 0
 10629                           ; switch strategies available:
 10630                           ; Name         Instructions Cycles
 10631                           ; simple_byte            4     3 (average)
 10632                           ;	Chosen strategy is simple_byte
 10633  003D1E  0100               	movlb	0	; () banked
 10634  003D20  51C7               	movf	(??_Test+1)& (0+255),w,b
 10635  003D22  0A00               	xorlw	0	; case 0
 10636  003D24  A4D8               	btfss	status,2,c
 10637  003D26  D797               	goto	l9132
 10638                           
 10639                           ; BSR set to: 0
 10640                           ; Switch size 1, requested type "space"
 10641                           ; Number of cases is 10, Range of values is 1 to 11
 10642                           ; switch strategies available:
 10643                           ; Name         Instructions Cycles
 10644                           ; simple_byte           31    16 (average)
 10645                           ;	Chosen strategy is simple_byte
 10646  003D28  0100               	movlb	0	; () banked
 10647  003D2A  51C6               	movf	??_Test& (0+255),w,b
 10648  003D2C  0A01               	xorlw	1	; case 1
 10649  003D2E  B4D8               	btfsc	status,2,c
 10650  003D30  D7D4               	goto	l9150
 10651  003D32  0A03               	xorlw	3	; case 2
 10652  003D34  B4D8               	btfsc	status,2,c
 10653  003D36  D7D4               	goto	l9152
 10654  003D38  0A01               	xorlw	1	; case 3
 10655  003D3A  B4D8               	btfsc	status,2,c
 10656  003D3C  D7D4               	goto	l9154
 10657  003D3E  0A06               	xorlw	6	; case 5
 10658  003D40  B4D8               	btfsc	status,2,c
 10659  003D42  D7D4               	goto	l9156
 10660  003D44  0A03               	xorlw	3	; case 6
 10661  003D46  B4D8               	btfsc	status,2,c
 10662  003D48  D7D4               	goto	l9158
 10663  003D4A  0A01               	xorlw	1	; case 7
 10664  003D4C  B4D8               	btfsc	status,2,c
 10665  003D4E  D7D4               	goto	l9160
 10666  003D50  0A0F               	xorlw	15	; case 8
 10667  003D52  B4D8               	btfsc	status,2,c
 10668  003D54  D7D4               	goto	l9162
 10669  003D56  0A01               	xorlw	1	; case 9
 10670  003D58  B4D8               	btfsc	status,2,c
 10671  003D5A  D7D4               	goto	l9164
 10672  003D5C  0A03               	xorlw	3	; case 10
 10673  003D5E  B4D8               	btfsc	status,2,c
 10674  003D60  D7D4               	goto	l9166
 10675  003D62  0A01               	xorlw	1	; case 11
 10676  003D64  B4D8               	btfsc	status,2,c
 10677  003D66  D7D4               	goto	l9168
 10678                           
 10679                           ; BSR set to: 0
 10680                           
 10681                           ; BSR set to: 0
 10682  003D68  D776               	goto	l9132
 10683  003D6A                     __end_of_Test:
 10684                           	opt stack 0
 10685                           tblptru	equ	0xFF8
 10686                           tblptrh	equ	0xFF7
 10687                           tblptrl	equ	0xFF6
 10688                           tablat	equ	0xFF5
 10689                           prodh	equ	0xFF4
 10690                           prodl	equ	0xFF3
 10691                           intcon	equ	0xFF2
 10692                           intcon2	equ	0xFF1
 10693                           intcon3	equ	0xFF0
 10694                           postinc0	equ	0xFEE
 10695                           wreg	equ	0xFE8
 10696                           postdec1	equ	0xFE5
 10697                           fsr1l	equ	0xFE1
 10698                           indf2	equ	0xFDF
 10699                           postinc2	equ	0xFDE
 10700                           postdec2	equ	0xFDD
 10701                           fsr2h	equ	0xFDA
 10702                           fsr2l	equ	0xFD9
 10703                           status	equ	0xFD8
 10704                           
 10705 ;; *************** function _sensorTest *****************
 10706 ;; Defined at:
 10707 ;;		line 124 in file "Test.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;  res             2   45[BANK0 ] int 
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      void 
 10714 ;; Registers used:
 10715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10724 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10725 ;;Total ram usage:        4 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:   10
 10728 ;; This function calls:
 10729 ;;		_lcdInst
 10730 ;;		_printf
 10731 ;;		_readADC
 10732 ;;		_readMAG
 10733 ;; This function is called by:
 10734 ;;		_Test
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           	psect	text37
 10739  00212E                     __ptext37:
 10740                           	opt stack 0
 10741  00212E                     _sensorTest:
 10742                           	opt stack 19
 10743                           
 10744                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;incstack = 0
 10748  00212E  0E01               	movlw	1
 10749  002130  EC5C  F029         	call	_lcdInst
 10750  002134  0E68               	movlw	104
 10751  002136  0100               	movlb	0	; () banked
 10752  002138  6FAB               	movwf	??_sensorTest& (0+255),b
 10753  00213A  0EE4               	movlw	228
 10754  00213C                     u9157:
 10755  00213C  2EE8               	decfsz	wreg,f,c
 10756  00213E  D7FE               	bra	u9157
 10757  002140  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10758  002142  D7FC               	bra	u9157
 10759  002144  F000               	nop	
 10760  002146  0E80               	movlw	128
 10761  002148  EC5C  F029         	call	_lcdInst
 10762                           
 10763                           ;Test.c: 127: printf("SENSORS");
 10764  00214C  0EAA               	movlw	low STR_78
 10765  00214E  0100               	movlb	0	; () banked
 10766  002150  6F8E               	movwf	printf@f& (0+255),b
 10767  002152  0EFF               	movlw	high STR_78
 10768  002154  0100               	movlb	0	; () banked
 10769  002156  6F8F               	movwf	(printf@f+1)& (0+255),b
 10770  002158  EC02  F00B         	call	_printf	;wreg free
 10771                           
 10772                           ;Test.c: 128: lcdInst(0b11000000);;
 10773  00215C  0EC0               	movlw	192
 10774  00215E  EC5C  F029         	call	_lcdInst
 10775                           
 10776                           ;Test.c: 129: printf("PUSH TO START");
 10777  002162  0E07               	movlw	low STR_72
 10778  002164  0100               	movlb	0	; () banked
 10779  002166  6F8E               	movwf	printf@f& (0+255),b
 10780  002168  0EFF               	movlw	high STR_72
 10781  00216A  0100               	movlb	0	; () banked
 10782  00216C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10783  00216E  EC02  F00B         	call	_printf	;wreg free
 10784                           
 10785                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10786  002172  0E05               	movlw	5
 10787  002174  0100               	movlb	0	; () banked
 10788  002176  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10789  002178  0E0F               	movlw	15
 10790  00217A  0100               	movlb	0	; () banked
 10791  00217C  6FAB               	movwf	??_sensorTest& (0+255),b
 10792  00217E  0EF1               	movlw	241
 10793  002180                     u9167:
 10794  002180  2EE8               	decfsz	wreg,f,c
 10795  002182  D7FE               	bra	u9167
 10796  002184  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10797  002186  D7FC               	bra	u9167
 10798  002188  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10799  00218A  D7FA               	bra	u9167
 10800  00218C                     l1175:
 10801  00218C  A281               	btfss	3969,1,c	;volatile
 10802  00218E  D7FE               	goto	l1175
 10803  002190                     l1178:
 10804  002190  B281               	btfsc	3969,1,c	;volatile
 10805  002192  D7FE               	goto	l1178
 10806                           
 10807                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10808  002194  0E01               	movlw	1
 10809  002196  EC5C  F029         	call	_lcdInst
 10810  00219A  0E68               	movlw	104
 10811  00219C  0100               	movlb	0	; () banked
 10812  00219E  6FAB               	movwf	??_sensorTest& (0+255),b
 10813  0021A0  0EE4               	movlw	228
 10814  0021A2                     u9177:
 10815  0021A2  2EE8               	decfsz	wreg,f,c
 10816  0021A4  D7FE               	bra	u9177
 10817  0021A6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10818  0021A8  D7FC               	bra	u9177
 10819  0021AA  F000               	nop	
 10820  0021AC  0E80               	movlw	128
 10821  0021AE  EC5C  F029         	call	_lcdInst
 10822                           
 10823                           ;Test.c: 138: printf("TST: IR SNSR");
 10824  0021B2  0E31               	movlw	low STR_80
 10825  0021B4  0100               	movlb	0	; () banked
 10826  0021B6  6F8E               	movwf	printf@f& (0+255),b
 10827  0021B8  0EFF               	movlw	high STR_80
 10828  0021BA  0100               	movlb	0	; () banked
 10829  0021BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10830  0021BE  EC02  F00B         	call	_printf	;wreg free
 10831                           
 10832                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10833  0021C2  0E05               	movlw	5
 10834  0021C4  0100               	movlb	0	; () banked
 10835  0021C6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10836  0021C8  0E0F               	movlw	15
 10837  0021CA  0100               	movlb	0	; () banked
 10838  0021CC  6FAB               	movwf	??_sensorTest& (0+255),b
 10839  0021CE  0EF1               	movlw	241
 10840  0021D0                     u9187:
 10841  0021D0  2EE8               	decfsz	wreg,f,c
 10842  0021D2  D7FE               	bra	u9187
 10843  0021D4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10844  0021D6  D7FC               	bra	u9187
 10845  0021D8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10846  0021DA  D7FA               	bra	u9187
 10847                           
 10848                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10849  0021DC  8A8B               	bsf	3979,5,c	;volatile
 10850                           
 10851                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10852  0021DE  D05C               	goto	l7596
 10853  0021E0                     l7578:
 10854                           
 10855                           ;Test.c: 143: readADC(0);
 10856  0021E0  0E00               	movlw	0
 10857  0021E2  EC53  F028         	call	_readADC
 10858                           
 10859                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10860  0021E6  50C3               	movf	4035,w,c	;volatile
 10861  0021E8  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10862  0021EC  0100               	movlb	0	; () banked
 10863  0021EE  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10864  0021F0  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10865  0021F4  0100               	movlb	0	; () banked
 10866  0021F6  6BAB               	clrf	??_sensorTest& (0+255),b
 10867  0021F8  0100               	movlb	0	; () banked
 10868  0021FA  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10869  0021FC  0100               	movlb	0	; () banked
 10870  0021FE  6FAD               	movwf	sensorTest@res& (0+255),b
 10871  002200  0100               	movlb	0	; () banked
 10872  002202  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10873  002204  0100               	movlb	0	; () banked
 10874  002206  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10878  002208  0100               	movlb	0	; () banked
 10879  00220A  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10880  00220C  D00A               	goto	u6060
 10881  00220E  0E21               	movlw	33
 10882  002210  0100               	movlb	0	; () banked
 10883  002212  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10884  002214  0E03               	movlw	3
 10885  002216  0100               	movlb	0	; () banked
 10886  002218  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10887  00221A  A0D8               	btfss	status,0,c
 10888  00221C  D002               	goto	u6060
 10889  00221E  0E01               	movlw	1
 10890  002220  D001               	goto	u6070
 10891  002222                     u6060:
 10892  002222  0E00               	movlw	0
 10893  002224                     u6070:
 10894  002224  0100               	movlb	0	; () banked
 10895  002226  6FE6               	movwf	_IR_signal& (0+255),b
 10896  002228  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 10897                           
 10898                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10899  00222A  0E01               	movlw	1
 10900  00222C  EC5C  F029         	call	_lcdInst
 10901  002230  0E68               	movlw	104
 10902  002232  0100               	movlb	0	; () banked
 10903  002234  6FAB               	movwf	??_sensorTest& (0+255),b
 10904  002236  0EE4               	movlw	228
 10905  002238                     u9197:
 10906  002238  2EE8               	decfsz	wreg,f,c
 10907  00223A  D7FE               	bra	u9197
 10908  00223C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10909  00223E  D7FC               	bra	u9197
 10910  002240  F000               	nop	
 10911  002242  0E80               	movlw	128
 10912  002244  EC5C  F029         	call	_lcdInst
 10913                           
 10914                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10915  002248  0E56               	movlw	low STR_81
 10916  00224A  0100               	movlb	0	; () banked
 10917  00224C  6F8E               	movwf	printf@f& (0+255),b
 10918  00224E  0EFE               	movlw	high STR_81
 10919  002250  0100               	movlb	0	; () banked
 10920  002252  6F8F               	movwf	(printf@f+1)& (0+255),b
 10921  002254  C0E6  F090         	movff	_IR_signal,?_printf+2
 10922  002258  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 10923  00225C  EC02  F00B         	call	_printf	;wreg free
 10924                           
 10925                           ;Test.c: 149: lcdInst(0b11000000);;
 10926  002260  0EC0               	movlw	192
 10927  002262  EC5C  F029         	call	_lcdInst
 10928                           
 10929                           ;Test.c: 150: printf("%d", res);
 10930  002266  0E12               	movlw	low (STR_27+14)
 10931  002268  0100               	movlb	0	; () banked
 10932  00226A  6F8E               	movwf	printf@f& (0+255),b
 10933  00226C  0EFE               	movlw	high (STR_27+14)
 10934  00226E  0100               	movlb	0	; () banked
 10935  002270  6F8F               	movwf	(printf@f+1)& (0+255),b
 10936  002272  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10937  002276  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10938  00227A  EC02  F00B         	call	_printf	;wreg free
 10939                           
 10940                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10941  00227E  0E05               	movlw	5
 10942  002280  0100               	movlb	0	; () banked
 10943  002282  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10944  002284  0E0F               	movlw	15
 10945  002286  0100               	movlb	0	; () banked
 10946  002288  6FAB               	movwf	??_sensorTest& (0+255),b
 10947  00228A  0EF1               	movlw	241
 10948  00228C                     u9207:
 10949  00228C  2EE8               	decfsz	wreg,f,c
 10950  00228E  D7FE               	bra	u9207
 10951  002290  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10952  002292  D7FC               	bra	u9207
 10953  002294  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10954  002296  D7FA               	bra	u9207
 10955  002298                     l7596:
 10956  002298  A281               	btfss	3969,1,c	;volatile
 10957  00229A  D7A2               	goto	l7578
 10958                           
 10959                           ;Test.c: 152: }
 10960                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10961  00229C  9A8B               	bcf	3979,5,c	;volatile
 10962                           
 10963                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10964  00229E  0E01               	movlw	1
 10965  0022A0  EC5C  F029         	call	_lcdInst
 10966  0022A4  0E68               	movlw	104
 10967  0022A6  0100               	movlb	0	; () banked
 10968  0022A8  6FAB               	movwf	??_sensorTest& (0+255),b
 10969  0022AA  0EE4               	movlw	228
 10970  0022AC                     u9217:
 10971  0022AC  2EE8               	decfsz	wreg,f,c
 10972  0022AE  D7FE               	bra	u9217
 10973  0022B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10974  0022B2  D7FC               	bra	u9217
 10975  0022B4  F000               	nop	
 10976  0022B6  0E80               	movlw	128
 10977  0022B8  EC5C  F029         	call	_lcdInst
 10978                           
 10979                           ;Test.c: 162: printf("TST: MAGNETISM");
 10980  0022BC  0E83               	movlw	low STR_83
 10981  0022BE  0100               	movlb	0	; () banked
 10982  0022C0  6F8E               	movwf	printf@f& (0+255),b
 10983  0022C2  0EFE               	movlw	high STR_83
 10984  0022C4  0100               	movlb	0	; () banked
 10985  0022C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10986  0022C8  EC02  F00B         	call	_printf	;wreg free
 10987                           
 10988                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10989  0022CC  0E05               	movlw	5
 10990  0022CE  0100               	movlb	0	; () banked
 10991  0022D0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10992  0022D2  0E0F               	movlw	15
 10993  0022D4  0100               	movlb	0	; () banked
 10994  0022D6  6FAB               	movwf	??_sensorTest& (0+255),b
 10995  0022D8  0EF1               	movlw	241
 10996  0022DA                     u9227:
 10997  0022DA  2EE8               	decfsz	wreg,f,c
 10998  0022DC  D7FE               	bra	u9227
 10999  0022DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11000  0022E0  D7FC               	bra	u9227
 11001  0022E2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11002  0022E4  D7FA               	bra	u9227
 11003                           
 11004                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11005  0022E6  D021               	goto	l7614
 11006  0022E8                     l7608:
 11007                           
 11008                           ;Test.c: 165: readMAG();
 11009  0022E8  EC15  F026         	call	_readMAG	;wreg free
 11010                           
 11011                           ;Test.c: 166: lcdInst(0b10000000);;
 11012  0022EC  0E80               	movlw	128
 11013  0022EE  EC5C  F029         	call	_lcdInst
 11014                           
 11015                           ;Test.c: 167: lcdInst(0b11000000);;
 11016  0022F2  0EC0               	movlw	192
 11017  0022F4  EC5C  F029         	call	_lcdInst
 11018                           
 11019                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11020  0022F8  0E26               	movlw	low STR_84
 11021  0022FA  0100               	movlb	0	; () banked
 11022  0022FC  6F8E               	movwf	printf@f& (0+255),b
 11023  0022FE  0EFE               	movlw	high STR_84
 11024  002300  0100               	movlb	0	; () banked
 11025  002302  6F8F               	movwf	(printf@f+1)& (0+255),b
 11026  002304  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11027  002308  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11028  00230C  EC02  F00B         	call	_printf	;wreg free
 11029                           
 11030                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11031  002310  0E05               	movlw	5
 11032  002312  0100               	movlb	0	; () banked
 11033  002314  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11034  002316  0E0F               	movlw	15
 11035  002318  0100               	movlb	0	; () banked
 11036  00231A  6FAB               	movwf	??_sensorTest& (0+255),b
 11037  00231C  0EF1               	movlw	241
 11038  00231E                     u9237:
 11039  00231E  2EE8               	decfsz	wreg,f,c
 11040  002320  D7FE               	bra	u9237
 11041  002322  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11042  002324  D7FC               	bra	u9237
 11043  002326  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11044  002328  D7FA               	bra	u9237
 11045  00232A                     l7614:
 11046  00232A  A281               	btfss	3969,1,c	;volatile
 11047  00232C  D7DD               	goto	l7608
 11048                           
 11049                           ;Test.c: 170: }
 11050                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11051  00232E  0E01               	movlw	1
 11052  002330  EC5C  F029         	call	_lcdInst
 11053  002334  0E68               	movlw	104
 11054  002336  0100               	movlb	0	; () banked
 11055  002338  6FAB               	movwf	??_sensorTest& (0+255),b
 11056  00233A  0EE4               	movlw	228
 11057  00233C                     u9247:
 11058  00233C  2EE8               	decfsz	wreg,f,c
 11059  00233E  D7FE               	bra	u9247
 11060  002340  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11061  002342  D7FC               	bra	u9247
 11062  002344  F000               	nop	
 11063  002346  0E80               	movlw	128
 11064  002348  EC5C  F029         	call	_lcdInst
 11065                           
 11066                           ;Test.c: 176: printf("TST: COND");
 11067  00234C  0E83               	movlw	low STR_85
 11068  00234E  0100               	movlb	0	; () banked
 11069  002350  6F8E               	movwf	printf@f& (0+255),b
 11070  002352  0EFF               	movlw	high STR_85
 11071  002354  0100               	movlb	0	; () banked
 11072  002356  6F8F               	movwf	(printf@f+1)& (0+255),b
 11073  002358  EC02  F00B         	call	_printf	;wreg free
 11074                           
 11075                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11076  00235C  0E05               	movlw	5
 11077  00235E  0100               	movlb	0	; () banked
 11078  002360  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11079  002362  0E0F               	movlw	15
 11080  002364  0100               	movlb	0	; () banked
 11081  002366  6FAB               	movwf	??_sensorTest& (0+255),b
 11082  002368  0EF1               	movlw	241
 11083  00236A                     u9257:
 11084  00236A  2EE8               	decfsz	wreg,f,c
 11085  00236C  D7FE               	bra	u9257
 11086  00236E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11087  002370  D7FC               	bra	u9257
 11088  002372  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11089  002374  D7FA               	bra	u9257
 11090  002376                     l7626:
 11091                           
 11092                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11093  002376  0E01               	movlw	1
 11094  002378  EC5C  F029         	call	_lcdInst
 11095  00237C  0E68               	movlw	104
 11096  00237E  0100               	movlb	0	; () banked
 11097  002380  6FAB               	movwf	??_sensorTest& (0+255),b
 11098  002382  0EE4               	movlw	228
 11099  002384                     u9267:
 11100  002384  2EE8               	decfsz	wreg,f,c
 11101  002386  D7FE               	bra	u9267
 11102  002388  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11103  00238A  D7FC               	bra	u9267
 11104  00238C  F000               	nop	
 11105  00238E  0E80               	movlw	128
 11106  002390  EC5C  F029         	call	_lcdInst
 11107                           
 11108                           ;Test.c: 180: printf("TST: COND");
 11109  002394  0E83               	movlw	low STR_85
 11110  002396  0100               	movlb	0	; () banked
 11111  002398  6F8E               	movwf	printf@f& (0+255),b
 11112  00239A  0EFF               	movlw	high STR_85
 11113  00239C  0100               	movlb	0	; () banked
 11114  00239E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11115  0023A0  EC02  F00B         	call	_printf	;wreg free
 11116                           
 11117                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11118  0023A4  D01B               	goto	l7638
 11119  0023A6                     l7634:
 11120                           
 11121                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11122  0023A6  0E80               	movlw	128
 11123  0023A8  EC5C  F029         	call	_lcdInst
 11124  0023AC  0EC0               	movlw	192
 11125  0023AE  EC5C  F029         	call	_lcdInst
 11126                           
 11127                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11128  0023B2  0EA1               	movlw	low STR_87
 11129  0023B4  0100               	movlb	0	; () banked
 11130  0023B6  6F8E               	movwf	printf@f& (0+255),b
 11131  0023B8  0EFF               	movlw	high STR_87
 11132  0023BA  0100               	movlb	0	; () banked
 11133  0023BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11134  0023BE  A480               	btfss	3968,2,c	;volatile
 11135  0023C0  D004               	goto	u6100
 11136  0023C2  0100               	movlb	0	; () banked
 11137  0023C4  6BAB               	clrf	??_sensorTest& (0+255),b
 11138  0023C6  2BAB               	incf	??_sensorTest& (0+255),f,b
 11139  0023C8  D002               	goto	u6108
 11140  0023CA                     u6100:
 11141  0023CA  0100               	movlb	0	; () banked
 11142  0023CC  6BAB               	clrf	??_sensorTest& (0+255),b
 11143  0023CE                     u6108:
 11144  0023CE  0100               	movlb	0	; () banked
 11145  0023D0  51AB               	movf	??_sensorTest& (0+255),w,b
 11146  0023D2  0100               	movlb	0	; () banked
 11147  0023D4  6F90               	movwf	(?_printf+2)& (0+255),b
 11148  0023D6  6B91               	clrf	(?_printf+3)& (0+255),b
 11149  0023D8  EC02  F00B         	call	_printf	;wreg free
 11150  0023DC                     l7638:
 11151  0023DC  A281               	btfss	3969,1,c	;volatile
 11152  0023DE  D7E3               	goto	l7634
 11153                           
 11154                           ;Test.c: 187: }
 11155                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11156  0023E0  3881               	swapf	3969,w,c	;volatile
 11157  0023E2  0B0F               	andlw	15
 11158  0023E4  0A0F               	xorlw	15
 11159  0023E6  B4D8               	btfsc	status,2,c
 11160  0023E8  0012               	return	
 11161                           
 11162                           ;Test.c: 191: else{
 11163                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11164                           
 11165                           ;Test.c: 190: }
 11166                           
 11167                           ;Test.c: 189: break;
 11168  0023EA  8689               	bsf	3977,3,c	;volatile
 11169                           
 11170                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11171  0023EC  D01B               	goto	l7650
 11172  0023EE                     l7646:
 11173                           
 11174                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11175  0023EE  0E80               	movlw	128
 11176  0023F0  EC5C  F029         	call	_lcdInst
 11177  0023F4  0EC0               	movlw	192
 11178  0023F6  EC5C  F029         	call	_lcdInst
 11179                           
 11180                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11181  0023FA  0EA1               	movlw	low STR_87
 11182  0023FC  0100               	movlb	0	; () banked
 11183  0023FE  6F8E               	movwf	printf@f& (0+255),b
 11184  002400  0EFF               	movlw	high STR_87
 11185  002402  0100               	movlb	0	; () banked
 11186  002404  6F8F               	movwf	(printf@f+1)& (0+255),b
 11187  002406  A480               	btfss	3968,2,c	;volatile
 11188  002408  D004               	goto	u6130
 11189  00240A  0100               	movlb	0	; () banked
 11190  00240C  6BAB               	clrf	??_sensorTest& (0+255),b
 11191  00240E  2BAB               	incf	??_sensorTest& (0+255),f,b
 11192  002410  D002               	goto	u6138
 11193  002412                     u6130:
 11194  002412  0100               	movlb	0	; () banked
 11195  002414  6BAB               	clrf	??_sensorTest& (0+255),b
 11196  002416                     u6138:
 11197  002416  0100               	movlb	0	; () banked
 11198  002418  51AB               	movf	??_sensorTest& (0+255),w,b
 11199  00241A  0100               	movlb	0	; () banked
 11200  00241C  6F90               	movwf	(?_printf+2)& (0+255),b
 11201  00241E  6B91               	clrf	(?_printf+3)& (0+255),b
 11202  002420  EC02  F00B         	call	_printf	;wreg free
 11203  002424                     l7650:
 11204  002424  B281               	btfsc	3969,1,c	;volatile
 11205  002426  D7E3               	goto	l7646
 11206                           
 11207                           ;Test.c: 197: }
 11208                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11209  002428  9689               	bcf	3977,3,c	;volatile
 11210  00242A  D7A5               	goto	l7626
 11211  00242C                     __end_of_sensorTest:
 11212                           	opt stack 0
 11213                           tblptru	equ	0xFF8
 11214                           tblptrh	equ	0xFF7
 11215                           tblptrl	equ	0xFF6
 11216                           tablat	equ	0xFF5
 11217                           prodh	equ	0xFF4
 11218                           prodl	equ	0xFF3
 11219                           intcon	equ	0xFF2
 11220                           intcon2	equ	0xFF1
 11221                           intcon3	equ	0xFF0
 11222                           postinc0	equ	0xFEE
 11223                           wreg	equ	0xFE8
 11224                           postdec1	equ	0xFE5
 11225                           fsr1l	equ	0xFE1
 11226                           indf2	equ	0xFDF
 11227                           postinc2	equ	0xFDE
 11228                           postdec2	equ	0xFDD
 11229                           fsr2h	equ	0xFDA
 11230                           fsr2l	equ	0xFD9
 11231                           status	equ	0xFD8
 11232                           
 11233 ;; *************** function _readMAG *****************
 11234 ;; Defined at:
 11235 ;;		line 29 in file "ADCFunctionality.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;		None
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;  res             2    4[BANK0 ] int 
 11240 ;; Return value:  Size  Location     Type
 11241 ;;                  1    wreg      void 
 11242 ;; Registers used:
 11243 ;;		wreg, status,2, status,0, cstack
 11244 ;; Tracked objects:
 11245 ;;		On entry : 0/0
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11252 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;Total ram usage:        4 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    8
 11256 ;; This function calls:
 11257 ;;		_readADC
 11258 ;; This function is called by:
 11259 ;;		_getMAG
 11260 ;;		_sensorTest
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           	psect	text38
 11265  004C2A                     __ptext38:
 11266                           	opt stack 0
 11267  004C2A                     _readMAG:
 11268                           	opt stack 19
 11269                           
 11270                           ;ADCFunctionality.c: 30: readADC(1);
 11271                           
 11272                           ;incstack = 0
 11273  004C2A  0E01               	movlw	1
 11274  004C2C  EC53  F028         	call	_readADC
 11275                           
 11276                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11277  004C30  50C3               	movf	4035,w,c	;volatile
 11278  004C32  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11279  004C36  0100               	movlb	0	; () banked
 11280  004C38  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11281  004C3A  C082  F083         	movff	??_readMAG,??_readMAG+1
 11282  004C3E  0100               	movlb	0	; () banked
 11283  004C40  6B82               	clrf	??_readMAG& (0+255),b
 11284  004C42  0100               	movlb	0	; () banked
 11285  004C44  1182               	iorwf	??_readMAG& (0+255),w,b
 11286  004C46  0100               	movlb	0	; () banked
 11287  004C48  6F84               	movwf	readMAG@res& (0+255),b
 11288  004C4A  0100               	movlb	0	; () banked
 11289  004C4C  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11290  004C4E  0100               	movlb	0	; () banked
 11291  004C50  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11295  004C52  0100               	movlb	0	; () banked
 11296  004C54  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11297  004C56  D008               	goto	u4521
 11298  004C58  0100               	movlb	0	; () banked
 11299  004C5A  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11300  004C5C  E107               	bnz	u4520
 11301  004C5E  0E96               	movlw	150
 11302  004C60  0100               	movlb	0	; () banked
 11303  004C62  5D84               	subwf	readMAG@res& (0+255),w,b
 11304  004C64  B0D8               	btfsc	status,0,c
 11305  004C66  D002               	goto	u4520
 11306  004C68                     u4521:
 11307  004C68  0E01               	movlw	1
 11308  004C6A  D001               	goto	u4530
 11309  004C6C                     u4520:
 11310  004C6C  0E00               	movlw	0
 11311  004C6E                     u4530:
 11312  004C6E  0100               	movlb	0	; () banked
 11313  004C70  6FE8               	movwf	_MAG_signal& (0+255),b
 11314  004C72  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11315                           
 11316                           ; BSR set to: 0
 11317  004C74  0012               	return		;funcret
 11318  004C76                     __end_of_readMAG:
 11319                           	opt stack 0
 11320                           tblptru	equ	0xFF8
 11321                           tblptrh	equ	0xFF7
 11322                           tblptrl	equ	0xFF6
 11323                           tablat	equ	0xFF5
 11324                           prodh	equ	0xFF4
 11325                           prodl	equ	0xFF3
 11326                           intcon	equ	0xFF2
 11327                           intcon2	equ	0xFF1
 11328                           intcon3	equ	0xFF0
 11329                           postinc0	equ	0xFEE
 11330                           wreg	equ	0xFE8
 11331                           postdec1	equ	0xFE5
 11332                           fsr1l	equ	0xFE1
 11333                           indf2	equ	0xFDF
 11334                           postinc2	equ	0xFDE
 11335                           postdec2	equ	0xFDD
 11336                           fsr2h	equ	0xFDA
 11337                           fsr2l	equ	0xFD9
 11338                           status	equ	0xFD8
 11339                           
 11340 ;; *************** function _algorithmTest *****************
 11341 ;; Defined at:
 11342 ;;		line 80 in file "Test.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;		None
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;		None
 11347 ;; Return value:  Size  Location     Type
 11348 ;;                  1    wreg      void 
 11349 ;; Registers used:
 11350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11359 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11360 ;;Total ram usage:        2 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:   10
 11363 ;; This function calls:
 11364 ;;		_lcdInst
 11365 ;;		_printf
 11366 ;; This function is called by:
 11367 ;;		_Test
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           	psect	text39
 11372  003F34                     __ptext39:
 11373                           	opt stack 0
 11374  003F34                     _algorithmTest:
 11375                           	opt stack 19
 11376                           
 11377                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11378                           
 11379                           ; BSR set to: 0
 11380                           ;incstack = 0
 11381  003F34  0E01               	movlw	1
 11382  003F36  EC5C  F029         	call	_lcdInst
 11383  003F3A  0E68               	movlw	104
 11384  003F3C  0100               	movlb	0	; () banked
 11385  003F3E  6FAB               	movwf	??_algorithmTest& (0+255),b
 11386  003F40  0EE4               	movlw	228
 11387  003F42                     u9277:
 11388  003F42  2EE8               	decfsz	wreg,f,c
 11389  003F44  D7FE               	bra	u9277
 11390  003F46  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11391  003F48  D7FC               	bra	u9277
 11392  003F4A  F000               	nop	
 11393  003F4C  0E80               	movlw	128
 11394  003F4E  EC5C  F029         	call	_lcdInst
 11395                           
 11396                           ;Test.c: 83: printf("ALGORITHM TEST");
 11397  003F52  0ECE               	movlw	low STR_71
 11398  003F54  0100               	movlb	0	; () banked
 11399  003F56  6F8E               	movwf	printf@f& (0+255),b
 11400  003F58  0EFE               	movlw	high STR_71
 11401  003F5A  0100               	movlb	0	; () banked
 11402  003F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11403  003F5E  EC02  F00B         	call	_printf	;wreg free
 11404                           
 11405                           ;Test.c: 84: lcdInst(0b11000000);;
 11406  003F62  0EC0               	movlw	192
 11407  003F64  EC5C  F029         	call	_lcdInst
 11408                           
 11409                           ;Test.c: 85: printf("PUSH TO START");
 11410  003F68  0E07               	movlw	low STR_72
 11411  003F6A  0100               	movlb	0	; () banked
 11412  003F6C  6F8E               	movwf	printf@f& (0+255),b
 11413  003F6E  0EFF               	movlw	high STR_72
 11414  003F70  0100               	movlb	0	; () banked
 11415  003F72  6F8F               	movwf	(printf@f+1)& (0+255),b
 11416  003F74  EC02  F00B         	call	_printf	;wreg free
 11417                           
 11418                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11419  003F78  0E05               	movlw	5
 11420  003F7A  0100               	movlb	0	; () banked
 11421  003F7C  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11422  003F7E  0E0F               	movlw	15
 11423  003F80  0100               	movlb	0	; () banked
 11424  003F82  6FAB               	movwf	??_algorithmTest& (0+255),b
 11425  003F84  0EF1               	movlw	241
 11426  003F86                     u9287:
 11427  003F86  2EE8               	decfsz	wreg,f,c
 11428  003F88  D7FE               	bra	u9287
 11429  003F8A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11430  003F8C  D7FC               	bra	u9287
 11431  003F8E  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11432  003F90  D7FA               	bra	u9287
 11433  003F92                     l1166:
 11434  003F92  A281               	btfss	3969,1,c	;volatile
 11435  003F94  D7FE               	goto	l1166
 11436  003F96                     l1169:
 11437  003F96  B281               	btfsc	3969,1,c	;volatile
 11438  003F98  D7FE               	goto	l1169
 11439                           
 11440                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11441  003F9A  0E01               	movlw	1
 11442  003F9C  EC5C  F029         	call	_lcdInst
 11443  003FA0  0E68               	movlw	104
 11444  003FA2  0100               	movlb	0	; () banked
 11445  003FA4  6FAB               	movwf	??_algorithmTest& (0+255),b
 11446  003FA6  0EE4               	movlw	228
 11447  003FA8                     u9297:
 11448  003FA8  2EE8               	decfsz	wreg,f,c
 11449  003FAA  D7FE               	bra	u9297
 11450  003FAC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11451  003FAE  D7FC               	bra	u9297
 11452  003FB0  F000               	nop	
 11453  003FB2  0E80               	movlw	128
 11454  003FB4  EC5C  F029         	call	_lcdInst
 11455                           
 11456                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11457  003FB8  0E5B               	movlw	low STR_73
 11458  003FBA  0100               	movlb	0	; () banked
 11459  003FBC  6F8E               	movwf	printf@f& (0+255),b
 11460  003FBE  0EFC               	movlw	high STR_73
 11461  003FC0  0100               	movlb	0	; () banked
 11462  003FC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11463  003FC4  EC02  F00B         	call	_printf	;wreg free
 11464                           
 11465                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11466  003FC8  0EEB               	movlw	low STR_74
 11467  003FCA  0100               	movlb	0	; () banked
 11468  003FCC  6F8E               	movwf	printf@f& (0+255),b
 11469  003FCE  0EFE               	movlw	high STR_74
 11470  003FD0  0100               	movlb	0	; () banked
 11471  003FD2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11472  003FD4  EC02  F00B         	call	_printf	;wreg free
 11473                           
 11474                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11475  003FD8  0E4B               	movlw	low STR_75
 11476  003FDA  0100               	movlb	0	; () banked
 11477  003FDC  6F8E               	movwf	printf@f& (0+255),b
 11478  003FDE  0EFF               	movlw	high STR_75
 11479  003FE0  0100               	movlb	0	; () banked
 11480  003FE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11481  003FE4  EC02  F00B         	call	_printf	;wreg free
 11482                           
 11483                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11484  003FE8  0EB0               	movlw	low STR_76
 11485  003FEA  0100               	movlb	0	; () banked
 11486  003FEC  6F8E               	movwf	printf@f& (0+255),b
 11487  003FEE  0EFE               	movlw	high STR_76
 11488  003FF0  0100               	movlb	0	; () banked
 11489  003FF2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11490  003FF4  EC02  F00B         	call	_printf	;wreg free
 11491                           
 11492                           ;Test.c: 121: printf("ALG5: NO CANS");
 11493  003FF8  0EF9               	movlw	low STR_77
 11494  003FFA  0100               	movlb	0	; () banked
 11495  003FFC  6F8E               	movwf	printf@f& (0+255),b
 11496  003FFE  0EFE               	movlw	high STR_77
 11497  004000  0100               	movlb	0	; () banked
 11498  004002  6F8F               	movwf	(printf@f+1)& (0+255),b
 11499  004004  EC02  F00B         	call	_printf	;wreg free
 11500  004008  0012               	return		;funcret
 11501  00400A                     __end_of_algorithmTest:
 11502                           	opt stack 0
 11503                           tblptru	equ	0xFF8
 11504                           tblptrh	equ	0xFF7
 11505                           tblptrl	equ	0xFF6
 11506                           tablat	equ	0xFF5
 11507                           prodh	equ	0xFF4
 11508                           prodl	equ	0xFF3
 11509                           intcon	equ	0xFF2
 11510                           intcon2	equ	0xFF1
 11511                           intcon3	equ	0xFF0
 11512                           postinc0	equ	0xFEE
 11513                           wreg	equ	0xFE8
 11514                           postdec1	equ	0xFE5
 11515                           fsr1l	equ	0xFE1
 11516                           indf2	equ	0xFDF
 11517                           postinc2	equ	0xFDE
 11518                           postdec2	equ	0xFDD
 11519                           fsr2h	equ	0xFDA
 11520                           fsr2l	equ	0xFD9
 11521                           status	equ	0xFD8
 11522                           
 11523 ;; *************** function _actuatorTest *****************
 11524 ;; Defined at:
 11525 ;;		line 203 in file "Test.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;  i               1   45[BANK0 ] unsigned char 
 11530 ;;  i               1   67[BANK0 ] unsigned char 
 11531 ;;  i               1   66[BANK0 ] unsigned char 
 11532 ;;  i               1   65[BANK0 ] unsigned char 
 11533 ;;  i               1   64[BANK0 ] unsigned char 
 11534 ;;  i               1   63[BANK0 ] unsigned char 
 11535 ;;  i               1   62[BANK0 ] unsigned char 
 11536 ;;  i               1   61[BANK0 ] unsigned char 
 11537 ;;  i               1   60[BANK0 ] unsigned char 
 11538 ;;  i               1   59[BANK0 ] unsigned char 
 11539 ;;  i               1   58[BANK0 ] unsigned char 
 11540 ;;  i               1   57[BANK0 ] unsigned char 
 11541 ;;  i               1   56[BANK0 ] unsigned char 
 11542 ;;  i               1   55[BANK0 ] unsigned char 
 11543 ;;  i               1   54[BANK0 ] unsigned char 
 11544 ;;  i               1   53[BANK0 ] unsigned char 
 11545 ;;  i               1   52[BANK0 ] unsigned char 
 11546 ;;  i               1   51[BANK0 ] unsigned char 
 11547 ;;  i               1   50[BANK0 ] unsigned char 
 11548 ;;  i               1   49[BANK0 ] unsigned char 
 11549 ;;  i               1   48[BANK0 ] unsigned char 
 11550 ;;  i               1   47[BANK0 ] unsigned char 
 11551 ;;  i               1   46[BANK0 ] unsigned char 
 11552 ;;  i               2   68[BANK0 ] int 
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  1    wreg      void 
 11555 ;; Registers used:
 11556 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11557 ;; Tracked objects:
 11558 ;;		On entry : 0/0
 11559 ;;		On exit  : 0/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11563 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11565 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;Total ram usage:       27 bytes
 11567 ;; Hardware stack levels used:    1
 11568 ;; Hardware stack levels required when called:   10
 11569 ;; This function calls:
 11570 ;;		_lcdInst
 11571 ;;		_printf
 11572 ;;		_updateServoPosition
 11573 ;; This function is called by:
 11574 ;;		_Test
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text40
 11579  000012                     __ptext40:
 11580                           	opt stack 0
 11581  000012                     _actuatorTest:
 11582                           	opt stack 19
 11583                           
 11584                           ;Test.c: 205: int i = 0;
 11585                           
 11586                           ;incstack = 0
 11587  000012  0E00               	movlw	0
 11588  000014  0100               	movlb	0	; () banked
 11589  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11590  000018  0E00               	movlw	0
 11591  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11595  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11599  00001E  0E01               	movlw	1
 11600  000020  EC5C  F029         	call	_lcdInst
 11601  000024  0E68               	movlw	104
 11602  000026  0100               	movlb	0	; () banked
 11603  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11604  00002A  0EE4               	movlw	228
 11605  00002C                     u9307:
 11606  00002C  2EE8               	decfsz	wreg,f,c
 11607  00002E  D7FE               	bra	u9307
 11608  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11609  000032  D7FC               	bra	u9307
 11610  000034  F000               	nop	
 11611  000036  0E80               	movlw	128
 11612  000038  EC5C  F029         	call	_lcdInst
 11613                           
 11614                           ;Test.c: 209: printf("ACTUATORS");
 11615  00003C  0E8D               	movlw	low STR_89
 11616  00003E  0100               	movlb	0	; () banked
 11617  000040  6F8E               	movwf	printf@f& (0+255),b
 11618  000042  0EFF               	movlw	high STR_89
 11619  000044  0100               	movlb	0	; () banked
 11620  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11621  000048  EC02  F00B         	call	_printf	;wreg free
 11622                           
 11623                           ;Test.c: 210: lcdInst(0b11000000);;
 11624  00004C  0EC0               	movlw	192
 11625  00004E  EC5C  F029         	call	_lcdInst
 11626                           
 11627                           ;Test.c: 211: printf("PUSH TO START");
 11628  000052  0E07               	movlw	low STR_72
 11629  000054  0100               	movlb	0	; () banked
 11630  000056  6F8E               	movwf	printf@f& (0+255),b
 11631  000058  0EFF               	movlw	high STR_72
 11632  00005A  0100               	movlb	0	; () banked
 11633  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11634  00005E  EC02  F00B         	call	_printf	;wreg free
 11635                           
 11636                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11637  000062  0E05               	movlw	5
 11638  000064  0100               	movlb	0	; () banked
 11639  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11640  000068  0E0F               	movlw	15
 11641  00006A  0100               	movlb	0	; () banked
 11642  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11643  00006E  0EF1               	movlw	241
 11644  000070                     u9317:
 11645  000070  2EE8               	decfsz	wreg,f,c
 11646  000072  D7FE               	bra	u9317
 11647  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11648  000076  D7FC               	bra	u9317
 11649  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11650  00007A  D7FA               	bra	u9317
 11651  00007C                     l1201:
 11652  00007C  A281               	btfss	3969,1,c	;volatile
 11653  00007E  D7FE               	goto	l1201
 11654  000080                     l1204:
 11655  000080  B281               	btfsc	3969,1,c	;volatile
 11656  000082  D7FE               	goto	l1204
 11657                           
 11658                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11659  000084  0E01               	movlw	1
 11660  000086  EC5C  F029         	call	_lcdInst
 11661  00008A  0E68               	movlw	104
 11662  00008C  0100               	movlb	0	; () banked
 11663  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11664  000090  0EE4               	movlw	228
 11665  000092                     u9327:
 11666  000092  2EE8               	decfsz	wreg,f,c
 11667  000094  D7FE               	bra	u9327
 11668  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11669  000098  D7FC               	bra	u9327
 11670  00009A  F000               	nop	
 11671  00009C  0E80               	movlw	128
 11672  00009E  EC5C  F029         	call	_lcdInst
 11673                           
 11674                           ;Test.c: 220: printf("TST: DC MOTORS");
 11675  0000A2  0EBF               	movlw	low STR_91
 11676  0000A4  0100               	movlb	0	; () banked
 11677  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11678  0000A8  0EFE               	movlw	high STR_91
 11679  0000AA  0100               	movlb	0	; () banked
 11680  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11681  0000AE  EC02  F00B         	call	_printf	;wreg free
 11682                           
 11683                           ;Test.c: 221: lcdInst(0b11000000);;
 11684  0000B2  0EC0               	movlw	192
 11685  0000B4  EC5C  F029         	call	_lcdInst
 11686                           
 11687                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11688  0000B8  0EDD               	movlw	low STR_92
 11689  0000BA  0100               	movlb	0	; () banked
 11690  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11691  0000BE  0EFE               	movlw	high STR_92
 11692  0000C0  0100               	movlb	0	; () banked
 11693  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11694  0000C4  EC02  F00B         	call	_printf	;wreg free
 11695                           
 11696                           ;Test.c: 223: LATBbits.LATB2 = 1;
 11697  0000C8  848A               	bsf	3978,2,c	;volatile
 11698                           
 11699                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11700  0000CA  0E00               	movlw	0
 11701  0000CC  0100               	movlb	0	; () banked
 11702  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11703  0000D0  0E00               	movlw	0
 11704  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11705                           
 11706                           ; BSR set to: 0
 11707  0000D4  0100               	movlb	0	; () banked
 11708  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11709  0000D8  D008               	goto	l7690
 11710  0000DA  0100               	movlb	0	; () banked
 11711  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11712  0000DE  E123               	bnz	l1208
 11713  0000E0  0E05               	movlw	5
 11714  0000E2  0100               	movlb	0	; () banked
 11715  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11716  0000E6  B0D8               	btfsc	status,0,c
 11717  0000E8  D01E               	goto	l1208
 11718  0000EA                     l7690:
 11719                           
 11720                           ; BSR set to: 0
 11721  0000EA  0E00               	movlw	0
 11722  0000EC  0100               	movlb	0	; () banked
 11723  0000EE  6FAD               	movwf	actuatorTest@i_1734& (0+255),b
 11724  0000F0                     l7692:
 11725                           
 11726                           ; BSR set to: 0
 11727  0000F0  0E63               	movlw	99
 11728  0000F2  0100               	movlb	0	; () banked
 11729  0000F4  65AD               	cpfsgt	actuatorTest@i_1734& (0+255),b
 11730  0000F6  D001               	goto	l7696
 11731  0000F8  D00C               	goto	l7700
 11732  0000FA                     l7696:
 11733                           
 11734                           ; BSR set to: 0
 11735  0000FA  0E68               	movlw	104
 11736  0000FC  0100               	movlb	0	; () banked
 11737  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11738  000100  0EE4               	movlw	228
 11739  000102                     u9337:
 11740  000102  2EE8               	decfsz	wreg,f,c
 11741  000104  D7FE               	bra	u9337
 11742  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11743  000108  D7FC               	bra	u9337
 11744  00010A  F000               	nop	
 11745  00010C  0100               	movlb	0	; () banked
 11746  00010E  2BAD               	incf	actuatorTest@i_1734& (0+255),f,b
 11747  000110  D7EF               	goto	l7692
 11748  000112                     l7700:
 11749                           
 11750                           ; BSR set to: 0
 11751  000112  0100               	movlb	0	; () banked
 11752  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11753  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11754                           
 11755                           ; BSR set to: 0
 11756  000118  0100               	movlb	0	; () banked
 11757  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11758  00011C  D7E6               	goto	l7690
 11759  00011E  0100               	movlb	0	; () banked
 11760  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11761  000122  E101               	bnz	u6200
 11762  000124  D7DD               	goto	L9
 11763  000126                     u6200:
 11764  000126                     l1208:
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;Test.c: 225: LATBbits.LATB2 = 0;
 11768  000126  948A               	bcf	3978,2,c	;volatile
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11772  000128  0E01               	movlw	1
 11773  00012A  EC5C  F029         	call	_lcdInst
 11774  00012E  0E68               	movlw	104
 11775  000130  0100               	movlb	0	; () banked
 11776  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11777  000134  0EE4               	movlw	228
 11778  000136                     u9347:
 11779  000136  2EE8               	decfsz	wreg,f,c
 11780  000138  D7FE               	bra	u9347
 11781  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11782  00013C  D7FC               	bra	u9347
 11783  00013E  F000               	nop	
 11784  000140  0E80               	movlw	128
 11785  000142  EC5C  F029         	call	_lcdInst
 11786                           
 11787                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11788  000146  0E6C               	movlw	low STR_93
 11789  000148  0100               	movlb	0	; () banked
 11790  00014A  6F8E               	movwf	printf@f& (0+255),b
 11791  00014C  0EFC               	movlw	high STR_93
 11792  00014E  0100               	movlb	0	; () banked
 11793  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11794  000152  EC02  F00B         	call	_printf	;wreg free
 11795                           
 11796                           ;Test.c: 233: lcdInst(0b11000000);;
 11797  000156  0EC0               	movlw	192
 11798  000158  EC5C  F029         	call	_lcdInst
 11799                           
 11800                           ;Test.c: 234: printf("PIN RA3...");
 11801  00015C  0E57               	movlw	low STR_94
 11802  00015E  0100               	movlb	0	; () banked
 11803  000160  6F8E               	movwf	printf@f& (0+255),b
 11804  000162  0EFF               	movlw	high STR_94
 11805  000164  0100               	movlb	0	; () banked
 11806  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11807  000168  EC02  F00B         	call	_printf	;wreg free
 11808                           
 11809                           ;Test.c: 235: for(i=0;i<5;i++){
 11810  00016C  0E00               	movlw	0
 11811  00016E  0100               	movlb	0	; () banked
 11812  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11813  000172  0E00               	movlw	0
 11814  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11815                           
 11816                           ; BSR set to: 0
 11817  000176  0100               	movlb	0	; () banked
 11818  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11819  00017A  D008               	goto	l1211
 11820  00017C  0100               	movlb	0	; () banked
 11821  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11822  000180  E12C               	bnz	l1212
 11823  000182  0E05               	movlw	5
 11824  000184  0100               	movlb	0	; () banked
 11825  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11826  000188  B0D8               	btfsc	status,0,c
 11827  00018A  D027               	goto	l1212
 11828  00018C                     l1211:
 11829                           
 11830                           ; BSR set to: 0
 11831                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11832  00018C  8689               	bsf	3977,3,c	;volatile
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11836  00018E  0E0D               	movlw	13
 11837  000190  0100               	movlb	0	; () banked
 11838  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11839  000194  0E2D               	movlw	45
 11840  000196  0100               	movlb	0	; () banked
 11841  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11842  00019A  0ED7               	movlw	215
 11843  00019C                     u9357:
 11844  00019C  2EE8               	decfsz	wreg,f,c
 11845  00019E  D7FE               	bra	u9357
 11846  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11847  0001A2  D7FC               	bra	u9357
 11848  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11849  0001A6  D7FA               	bra	u9357
 11850  0001A8  D000               	nop2	
 11851                           
 11852                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11853  0001AA  9689               	bcf	3977,3,c	;volatile
 11854                           
 11855                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11856  0001AC  0E1D               	movlw	29
 11857  0001AE  0100               	movlb	0	; () banked
 11858  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11859  0001B2  0E69               	movlw	105
 11860  0001B4  0100               	movlb	0	; () banked
 11861  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11862  0001B8  0EA5               	movlw	165
 11863  0001BA                     u9367:
 11864  0001BA  2EE8               	decfsz	wreg,f,c
 11865  0001BC  D7FE               	bra	u9367
 11866  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11867  0001C0  D7FC               	bra	u9367
 11868  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11869  0001C4  D7FA               	bra	u9367
 11870  0001C6  0100               	movlb	0	; () banked
 11871  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11872  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11873  0001CC  0100               	movlb	0	; () banked
 11874  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11875  0001D0  D7DD               	goto	l1211
 11876  0001D2  0100               	movlb	0	; () banked
 11877  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11878  0001D6  E101               	bnz	u6220
 11879  0001D8  D7D4               	goto	L10
 11880  0001DA                     u6220:
 11881  0001DA                     l1212:
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;Test.c: 240: }
 11885                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11886  0001DA  9689               	bcf	3977,3,c	;volatile
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11890  0001DC  0E01               	movlw	1
 11891  0001DE  EC5C  F029         	call	_lcdInst
 11892  0001E2  0E68               	movlw	104
 11893  0001E4  0100               	movlb	0	; () banked
 11894  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11895  0001E8  0EE4               	movlw	228
 11896  0001EA                     u9377:
 11897  0001EA  2EE8               	decfsz	wreg,f,c
 11898  0001EC  D7FE               	bra	u9377
 11899  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11900  0001F0  D7FC               	bra	u9377
 11901  0001F2  F000               	nop	
 11902  0001F4  0E80               	movlw	128
 11903  0001F6  EC5C  F029         	call	_lcdInst
 11904                           
 11905                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11906  0001FA  0E7D               	movlw	low STR_95
 11907  0001FC  0100               	movlb	0	; () banked
 11908  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11909  000200  0EFC               	movlw	high STR_95
 11910  000202  0100               	movlb	0	; () banked
 11911  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11912  000206  EC02  F00B         	call	_printf	;wreg free
 11913                           
 11914                           ;Test.c: 249: lcdInst(0b11000000);;
 11915  00020A  0EC0               	movlw	192
 11916  00020C  EC5C  F029         	call	_lcdInst
 11917                           
 11918                           ;Test.c: 250: printf("PIN RA4...");
 11919  000210  0E62               	movlw	low STR_96
 11920  000212  0100               	movlb	0	; () banked
 11921  000214  6F8E               	movwf	printf@f& (0+255),b
 11922  000216  0EFF               	movlw	high STR_96
 11923  000218  0100               	movlb	0	; () banked
 11924  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11925  00021C  EC02  F00B         	call	_printf	;wreg free
 11926                           
 11927                           ;Test.c: 251: for(i=0;i<5;i++){
 11928  000220  0E00               	movlw	0
 11929  000222  0100               	movlb	0	; () banked
 11930  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11931  000226  0E00               	movlw	0
 11932  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11933                           
 11934                           ; BSR set to: 0
 11935  00022A  0100               	movlb	0	; () banked
 11936  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11937  00022E  D008               	goto	l1213
 11938  000230  0100               	movlb	0	; () banked
 11939  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11940  000234  E12C               	bnz	l1214
 11941  000236  0E05               	movlw	5
 11942  000238  0100               	movlb	0	; () banked
 11943  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11944  00023C  B0D8               	btfsc	status,0,c
 11945  00023E  D027               	goto	l1214
 11946  000240                     l1213:
 11947                           
 11948                           ; BSR set to: 0
 11949                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11950  000240  8889               	bsf	3977,4,c	;volatile
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11954  000242  0E0D               	movlw	13
 11955  000244  0100               	movlb	0	; () banked
 11956  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11957  000248  0E2D               	movlw	45
 11958  00024A  0100               	movlb	0	; () banked
 11959  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11960  00024E  0ED7               	movlw	215
 11961  000250                     u9387:
 11962  000250  2EE8               	decfsz	wreg,f,c
 11963  000252  D7FE               	bra	u9387
 11964  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11965  000256  D7FC               	bra	u9387
 11966  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11967  00025A  D7FA               	bra	u9387
 11968  00025C  D000               	nop2	
 11969                           
 11970                           ;Test.c: 254: LATAbits.LATA4 = !1;
 11971  00025E  9889               	bcf	3977,4,c	;volatile
 11972                           
 11973                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11974  000260  0E1D               	movlw	29
 11975  000262  0100               	movlb	0	; () banked
 11976  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11977  000266  0E69               	movlw	105
 11978  000268  0100               	movlb	0	; () banked
 11979  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11980  00026C  0EA5               	movlw	165
 11981  00026E                     u9397:
 11982  00026E  2EE8               	decfsz	wreg,f,c
 11983  000270  D7FE               	bra	u9397
 11984  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11985  000274  D7FC               	bra	u9397
 11986  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11987  000278  D7FA               	bra	u9397
 11988  00027A  0100               	movlb	0	; () banked
 11989  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11990  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11991  000280  0100               	movlb	0	; () banked
 11992  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11993  000284  D7DD               	goto	l1213
 11994  000286  0100               	movlb	0	; () banked
 11995  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11996  00028A  E101               	bnz	u6240
 11997  00028C  D7D4               	goto	L11
 11998  00028E                     u6240:
 11999  00028E                     l1214:
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;Test.c: 256: }
 12003                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12004  00028E  9889               	bcf	3977,4,c	;volatile
 12005                           
 12006                           ; BSR set to: 0
 12007                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12008  000290  0E01               	movlw	1
 12009  000292  EC5C  F029         	call	_lcdInst
 12010  000296  0E68               	movlw	104
 12011  000298  0100               	movlb	0	; () banked
 12012  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12013  00029C  0EE4               	movlw	228
 12014  00029E                     u9407:
 12015  00029E  2EE8               	decfsz	wreg,f,c
 12016  0002A0  D7FE               	bra	u9407
 12017  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12018  0002A4  D7FC               	bra	u9407
 12019  0002A6  F000               	nop	
 12020  0002A8  0E80               	movlw	128
 12021  0002AA  EC5C  F029         	call	_lcdInst
 12022                           
 12023                           ;Test.c: 261: machine_state = Sorting_state;
 12024  0002AE  0E01               	movlw	1
 12025  0002B0  0100               	movlb	0	; () banked
 12026  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12027                           
 12028                           ; BSR set to: 0
 12029                           ;Test.c: 262: was_low_1 = 0;
 12030  0002B4  0E00               	movlw	0
 12031  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12032  0002B8  0E00               	movlw	0
 12033  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12034                           
 12035                           ; BSR set to: 0
 12036                           ;Test.c: 263: was_low_1 = 0;
 12037  0002BC  0E00               	movlw	0
 12038  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12039  0002C0  0E00               	movlw	0
 12040  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;Test.c: 270: printf("TST: PAN SERVO");
 12044  0002C4  0EA1               	movlw	low STR_97
 12045  0002C6  0100               	movlb	0	; () banked
 12046  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12047  0002CA  0EFE               	movlw	high STR_97
 12048  0002CC  0100               	movlb	0	; () banked
 12049  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12050  0002D0  EC02  F00B         	call	_printf	;wreg free
 12051                           
 12052                           ;Test.c: 271: lcdInst(0b11000000);;
 12053  0002D4  0EC0               	movlw	192
 12054  0002D6  EC5C  F029         	call	_lcdInst
 12055                           
 12056                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12057  0002DA  0E06               	movlw	low STR_98
 12058  0002DC  0100               	movlb	0	; () banked
 12059  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12060  0002E0  0EFC               	movlw	high STR_98
 12061  0002E2  0100               	movlb	0	; () banked
 12062  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12063  0002E6  EC02  F00B         	call	_printf	;wreg free
 12064                           
 12065                           ;Test.c: 273: updateServoPosition(1200, 1);
 12066  0002EA  0E04               	movlw	4
 12067  0002EC  0100               	movlb	0	; () banked
 12068  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12069  0002F0  0EB0               	movlw	176
 12070  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12071  0002F4  0E00               	movlw	0
 12072  0002F6  0100               	movlb	0	; () banked
 12073  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12074  0002FA  0E01               	movlw	1
 12075  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12076  0002FE  ECA9  F022         	call	_updateServoPosition	;wreg free
 12077                           
 12078                           ;Test.c: 274: TMR1ON = 1;
 12079  000302  80CD               	bsf	4045,0,c	;volatile
 12080                           
 12081                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12082  000304  0E00               	movlw	0
 12083  000306  0100               	movlb	0	; () banked
 12084  000308  6FAE               	movwf	actuatorTest@i_1741& (0+255),b
 12085  00030A                     l7776:
 12086                           
 12087                           ; BSR set to: 0
 12088  00030A  0E63               	movlw	99
 12089  00030C  0100               	movlb	0	; () banked
 12090  00030E  65AE               	cpfsgt	actuatorTest@i_1741& (0+255),b
 12091  000310  D001               	goto	l7780
 12092  000312  D00C               	goto	l7784
 12093  000314                     l7780:
 12094                           
 12095                           ; BSR set to: 0
 12096  000314  0E68               	movlw	104
 12097  000316  0100               	movlb	0	; () banked
 12098  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12099  00031A  0EE4               	movlw	228
 12100  00031C                     u9417:
 12101  00031C  2EE8               	decfsz	wreg,f,c
 12102  00031E  D7FE               	bra	u9417
 12103  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12104  000322  D7FC               	bra	u9417
 12105  000324  F000               	nop	
 12106  000326  0100               	movlb	0	; () banked
 12107  000328  2BAE               	incf	actuatorTest@i_1741& (0+255),f,b
 12108  00032A  D7EF               	goto	l7776
 12109  00032C                     l7784:
 12110                           
 12111                           ; BSR set to: 0
 12112  00032C  0E00               	movlw	0
 12113  00032E  0100               	movlb	0	; () banked
 12114  000330  6FAF               	movwf	actuatorTest@i_1742& (0+255),b
 12115  000332                     l7786:
 12116                           
 12117                           ; BSR set to: 0
 12118  000332  0E63               	movlw	99
 12119  000334  0100               	movlb	0	; () banked
 12120  000336  65AF               	cpfsgt	actuatorTest@i_1742& (0+255),b
 12121  000338  D001               	goto	l7790
 12122  00033A  D00C               	goto	l7794
 12123  00033C                     l7790:
 12124                           
 12125                           ; BSR set to: 0
 12126  00033C  0E68               	movlw	104
 12127  00033E  0100               	movlb	0	; () banked
 12128  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12129  000342  0EE4               	movlw	228
 12130  000344                     u9427:
 12131  000344  2EE8               	decfsz	wreg,f,c
 12132  000346  D7FE               	bra	u9427
 12133  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12134  00034A  D7FC               	bra	u9427
 12135  00034C  F000               	nop	
 12136  00034E  0100               	movlb	0	; () banked
 12137  000350  2BAF               	incf	actuatorTest@i_1742& (0+255),f,b
 12138  000352  D7EF               	goto	l7786
 12139  000354                     l7794:
 12140                           
 12141                           ; BSR set to: 0
 12142                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12143  000354  0E80               	movlw	128
 12144  000356  EC5C  F029         	call	_lcdInst
 12145  00035A  0EC0               	movlw	192
 12146  00035C  EC5C  F029         	call	_lcdInst
 12147                           
 12148                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12149  000360  0EF5               	movlw	low STR_99
 12150  000362  0100               	movlb	0	; () banked
 12151  000364  6F8E               	movwf	printf@f& (0+255),b
 12152  000366  0EFB               	movlw	high STR_99
 12153  000368  0100               	movlb	0	; () banked
 12154  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12155  00036C  EC02  F00B         	call	_printf	;wreg free
 12156                           
 12157                           ;Test.c: 279: updateServoPosition(500, 1);
 12158  000370  0E01               	movlw	1
 12159  000372  0100               	movlb	0	; () banked
 12160  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12161  000376  0EF4               	movlw	244
 12162  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12163  00037A  0E00               	movlw	0
 12164  00037C  0100               	movlb	0	; () banked
 12165  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12166  000380  0E01               	movlw	1
 12167  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12168  000384  ECA9  F022         	call	_updateServoPosition	;wreg free
 12169                           
 12170                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12171  000388  0E00               	movlw	0
 12172  00038A  0100               	movlb	0	; () banked
 12173  00038C  6FB0               	movwf	actuatorTest@i_1744& (0+255),b
 12174  00038E                     l7802:
 12175                           
 12176                           ; BSR set to: 0
 12177  00038E  0E63               	movlw	99
 12178  000390  0100               	movlb	0	; () banked
 12179  000392  65B0               	cpfsgt	actuatorTest@i_1744& (0+255),b
 12180  000394  D001               	goto	l7806
 12181  000396  D00C               	goto	l7810
 12182  000398                     l7806:
 12183                           
 12184                           ; BSR set to: 0
 12185  000398  0E68               	movlw	104
 12186  00039A  0100               	movlb	0	; () banked
 12187  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12188  00039E  0EE4               	movlw	228
 12189  0003A0                     u9437:
 12190  0003A0  2EE8               	decfsz	wreg,f,c
 12191  0003A2  D7FE               	bra	u9437
 12192  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12193  0003A6  D7FC               	bra	u9437
 12194  0003A8  F000               	nop	
 12195  0003AA  0100               	movlb	0	; () banked
 12196  0003AC  2BB0               	incf	actuatorTest@i_1744& (0+255),f,b
 12197  0003AE  D7EF               	goto	l7802
 12198  0003B0                     l7810:
 12199                           
 12200                           ; BSR set to: 0
 12201  0003B0  0E00               	movlw	0
 12202  0003B2  0100               	movlb	0	; () banked
 12203  0003B4  6FB1               	movwf	actuatorTest@i_1745& (0+255),b
 12204  0003B6                     l7812:
 12205                           
 12206                           ; BSR set to: 0
 12207  0003B6  0E63               	movlw	99
 12208  0003B8  0100               	movlb	0	; () banked
 12209  0003BA  65B1               	cpfsgt	actuatorTest@i_1745& (0+255),b
 12210  0003BC  D001               	goto	l7816
 12211  0003BE  D00C               	goto	l7820
 12212  0003C0                     l7816:
 12213                           
 12214                           ; BSR set to: 0
 12215  0003C0  0E68               	movlw	104
 12216  0003C2  0100               	movlb	0	; () banked
 12217  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12218  0003C6  0EE4               	movlw	228
 12219  0003C8                     u9447:
 12220  0003C8  2EE8               	decfsz	wreg,f,c
 12221  0003CA  D7FE               	bra	u9447
 12222  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12223  0003CE  D7FC               	bra	u9447
 12224  0003D0  F000               	nop	
 12225  0003D2  0100               	movlb	0	; () banked
 12226  0003D4  2BB1               	incf	actuatorTest@i_1745& (0+255),f,b
 12227  0003D6  D7EF               	goto	l7812
 12228  0003D8                     l7820:
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12232  0003D8  0E80               	movlw	128
 12233  0003DA  EC5C  F029         	call	_lcdInst
 12234  0003DE  0EC0               	movlw	192
 12235  0003E0  EC5C  F029         	call	_lcdInst
 12236                           
 12237                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12238  0003E4  0ED3               	movlw	low STR_100
 12239  0003E6  0100               	movlb	0	; () banked
 12240  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12241  0003EA  0EFB               	movlw	high STR_100
 12242  0003EC  0100               	movlb	0	; () banked
 12243  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12244  0003F0  EC02  F00B         	call	_printf	;wreg free
 12245                           
 12246                           ;Test.c: 284: updateServoPosition(2400, 1);
 12247  0003F4  0E09               	movlw	9
 12248  0003F6  0100               	movlb	0	; () banked
 12249  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12250  0003FA  0E60               	movlw	96
 12251  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12252  0003FE  0E00               	movlw	0
 12253  000400  0100               	movlb	0	; () banked
 12254  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12255  000404  0E01               	movlw	1
 12256  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12257  000408  ECA9  F022         	call	_updateServoPosition	;wreg free
 12258                           
 12259                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12260  00040C  0E00               	movlw	0
 12261  00040E  0100               	movlb	0	; () banked
 12262  000410  6FB2               	movwf	actuatorTest@i_1747& (0+255),b
 12263  000412                     l7828:
 12264                           
 12265                           ; BSR set to: 0
 12266  000412  0E63               	movlw	99
 12267  000414  0100               	movlb	0	; () banked
 12268  000416  65B2               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12269  000418  D001               	goto	l7832
 12270  00041A  D00C               	goto	l7836
 12271  00041C                     l7832:
 12272                           
 12273                           ; BSR set to: 0
 12274  00041C  0E68               	movlw	104
 12275  00041E  0100               	movlb	0	; () banked
 12276  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12277  000422  0EE4               	movlw	228
 12278  000424                     u9457:
 12279  000424  2EE8               	decfsz	wreg,f,c
 12280  000426  D7FE               	bra	u9457
 12281  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12282  00042A  D7FC               	bra	u9457
 12283  00042C  F000               	nop	
 12284  00042E  0100               	movlb	0	; () banked
 12285  000430  2BB2               	incf	actuatorTest@i_1747& (0+255),f,b
 12286  000432  D7EF               	goto	l7828
 12287  000434                     l7836:
 12288                           
 12289                           ; BSR set to: 0
 12290  000434  0E00               	movlw	0
 12291  000436  0100               	movlb	0	; () banked
 12292  000438  6FB3               	movwf	actuatorTest@i_1748& (0+255),b
 12293  00043A                     l7838:
 12294                           
 12295                           ; BSR set to: 0
 12296  00043A  0E63               	movlw	99
 12297  00043C  0100               	movlb	0	; () banked
 12298  00043E  65B3               	cpfsgt	actuatorTest@i_1748& (0+255),b
 12299  000440  D001               	goto	l7842
 12300  000442  D00C               	goto	l7846
 12301  000444                     l7842:
 12302                           
 12303                           ; BSR set to: 0
 12304  000444  0E68               	movlw	104
 12305  000446  0100               	movlb	0	; () banked
 12306  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12307  00044A  0EE4               	movlw	228
 12308  00044C                     u9467:
 12309  00044C  2EE8               	decfsz	wreg,f,c
 12310  00044E  D7FE               	bra	u9467
 12311  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12312  000452  D7FC               	bra	u9467
 12313  000454  F000               	nop	
 12314  000456  0100               	movlb	0	; () banked
 12315  000458  2BB3               	incf	actuatorTest@i_1748& (0+255),f,b
 12316  00045A  D7EF               	goto	l7838
 12317  00045C                     l7846:
 12318                           
 12319                           ; BSR set to: 0
 12320                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12321  00045C  0E80               	movlw	128
 12322  00045E  EC5C  F029         	call	_lcdInst
 12323  000462  0EC0               	movlw	192
 12324  000464  EC5C  F029         	call	_lcdInst
 12325                           
 12326                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12327  000468  0E28               	movlw	low STR_101
 12328  00046A  0100               	movlb	0	; () banked
 12329  00046C  6F8E               	movwf	printf@f& (0+255),b
 12330  00046E  0EFC               	movlw	high STR_101
 12331  000470  0100               	movlb	0	; () banked
 12332  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12333  000474  EC02  F00B         	call	_printf	;wreg free
 12334                           
 12335                           ;Test.c: 289: updateServoPosition(1670, 1);
 12336  000478  0E06               	movlw	6
 12337  00047A  0100               	movlb	0	; () banked
 12338  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12339  00047E  0E86               	movlw	134
 12340  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12341  000482  0E00               	movlw	0
 12342  000484  0100               	movlb	0	; () banked
 12343  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12344  000488  0E01               	movlw	1
 12345  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12346  00048C  ECA9  F022         	call	_updateServoPosition	;wreg free
 12347                           
 12348                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12349  000490  0E00               	movlw	0
 12350  000492  0100               	movlb	0	; () banked
 12351  000494  6FB4               	movwf	actuatorTest@i_1750& (0+255),b
 12352  000496                     l7854:
 12353                           
 12354                           ; BSR set to: 0
 12355  000496  0E63               	movlw	99
 12356  000498  0100               	movlb	0	; () banked
 12357  00049A  65B4               	cpfsgt	actuatorTest@i_1750& (0+255),b
 12358  00049C  D001               	goto	l7858
 12359  00049E  D00C               	goto	l7862
 12360  0004A0                     l7858:
 12361                           
 12362                           ; BSR set to: 0
 12363  0004A0  0E68               	movlw	104
 12364  0004A2  0100               	movlb	0	; () banked
 12365  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12366  0004A6  0EE4               	movlw	228
 12367  0004A8                     u9477:
 12368  0004A8  2EE8               	decfsz	wreg,f,c
 12369  0004AA  D7FE               	bra	u9477
 12370  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12371  0004AE  D7FC               	bra	u9477
 12372  0004B0  F000               	nop	
 12373  0004B2  0100               	movlb	0	; () banked
 12374  0004B4  2BB4               	incf	actuatorTest@i_1750& (0+255),f,b
 12375  0004B6  D7EF               	goto	l7854
 12376  0004B8                     l7862:
 12377                           
 12378                           ; BSR set to: 0
 12379  0004B8  0E00               	movlw	0
 12380  0004BA  0100               	movlb	0	; () banked
 12381  0004BC  6FB5               	movwf	actuatorTest@i_1751& (0+255),b
 12382  0004BE                     l7864:
 12383                           
 12384                           ; BSR set to: 0
 12385  0004BE  0E63               	movlw	99
 12386  0004C0  0100               	movlb	0	; () banked
 12387  0004C2  65B5               	cpfsgt	actuatorTest@i_1751& (0+255),b
 12388  0004C4  D001               	goto	l7868
 12389  0004C6  D00C               	goto	l7872
 12390  0004C8                     l7868:
 12391                           
 12392                           ; BSR set to: 0
 12393  0004C8  0E68               	movlw	104
 12394  0004CA  0100               	movlb	0	; () banked
 12395  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12396  0004CE  0EE4               	movlw	228
 12397  0004D0                     u9487:
 12398  0004D0  2EE8               	decfsz	wreg,f,c
 12399  0004D2  D7FE               	bra	u9487
 12400  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12401  0004D6  D7FC               	bra	u9487
 12402  0004D8  F000               	nop	
 12403  0004DA  0100               	movlb	0	; () banked
 12404  0004DC  2BB5               	incf	actuatorTest@i_1751& (0+255),f,b
 12405  0004DE  D7EF               	goto	l7864
 12406  0004E0                     l7872:
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12410  0004E0  0E80               	movlw	128
 12411  0004E2  EC5C  F029         	call	_lcdInst
 12412  0004E6  0EC0               	movlw	192
 12413  0004E8  EC5C  F029         	call	_lcdInst
 12414                           
 12415                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12416  0004EC  0E39               	movlw	low STR_102
 12417  0004EE  0100               	movlb	0	; () banked
 12418  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12419  0004F2  0EFC               	movlw	high STR_102
 12420  0004F4  0100               	movlb	0	; () banked
 12421  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12422  0004F8  EC02  F00B         	call	_printf	;wreg free
 12423                           
 12424                           ;Test.c: 294: updateServoPosition(850, 1);
 12425  0004FC  0E03               	movlw	3
 12426  0004FE  0100               	movlb	0	; () banked
 12427  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12428  000502  0E52               	movlw	82
 12429  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12430  000506  0E00               	movlw	0
 12431  000508  0100               	movlb	0	; () banked
 12432  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12433  00050C  0E01               	movlw	1
 12434  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12435  000510  ECA9  F022         	call	_updateServoPosition	;wreg free
 12436                           
 12437                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12438  000514  0E00               	movlw	0
 12439  000516  0100               	movlb	0	; () banked
 12440  000518  6FB6               	movwf	actuatorTest@i_1753& (0+255),b
 12441  00051A                     l7880:
 12442                           
 12443                           ; BSR set to: 0
 12444  00051A  0E63               	movlw	99
 12445  00051C  0100               	movlb	0	; () banked
 12446  00051E  65B6               	cpfsgt	actuatorTest@i_1753& (0+255),b
 12447  000520  D001               	goto	l7884
 12448  000522  D00C               	goto	l7888
 12449  000524                     l7884:
 12450                           
 12451                           ; BSR set to: 0
 12452  000524  0E68               	movlw	104
 12453  000526  0100               	movlb	0	; () banked
 12454  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12455  00052A  0EE4               	movlw	228
 12456  00052C                     u9497:
 12457  00052C  2EE8               	decfsz	wreg,f,c
 12458  00052E  D7FE               	bra	u9497
 12459  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12460  000532  D7FC               	bra	u9497
 12461  000534  F000               	nop	
 12462  000536  0100               	movlb	0	; () banked
 12463  000538  2BB6               	incf	actuatorTest@i_1753& (0+255),f,b
 12464  00053A  D7EF               	goto	l7880
 12465  00053C                     l7888:
 12466                           
 12467                           ; BSR set to: 0
 12468  00053C  0E00               	movlw	0
 12469  00053E  0100               	movlb	0	; () banked
 12470  000540  6FB7               	movwf	actuatorTest@i_1754& (0+255),b
 12471  000542                     l7890:
 12472                           
 12473                           ; BSR set to: 0
 12474  000542  0E63               	movlw	99
 12475  000544  0100               	movlb	0	; () banked
 12476  000546  65B7               	cpfsgt	actuatorTest@i_1754& (0+255),b
 12477  000548  D001               	goto	l7894
 12478  00054A  D00C               	goto	l7898
 12479  00054C                     l7894:
 12480                           
 12481                           ; BSR set to: 0
 12482  00054C  0E68               	movlw	104
 12483  00054E  0100               	movlb	0	; () banked
 12484  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12485  000552  0EE4               	movlw	228
 12486  000554                     u9507:
 12487  000554  2EE8               	decfsz	wreg,f,c
 12488  000556  D7FE               	bra	u9507
 12489  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12490  00055A  D7FC               	bra	u9507
 12491  00055C  F000               	nop	
 12492  00055E  0100               	movlb	0	; () banked
 12493  000560  2BB7               	incf	actuatorTest@i_1754& (0+255),f,b
 12494  000562  D7EF               	goto	l7890
 12495  000564                     l7898:
 12496                           
 12497                           ; BSR set to: 0
 12498                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12499  000564  0E80               	movlw	128
 12500  000566  EC5C  F029         	call	_lcdInst
 12501  00056A  0EC0               	movlw	192
 12502  00056C  EC5C  F029         	call	_lcdInst
 12503                           
 12504                           ;Test.c: 298: printf("MID -- 2s       ");
 12505  000570  0EB1               	movlw	low STR_103
 12506  000572  0100               	movlb	0	; () banked
 12507  000574  6F8E               	movwf	printf@f& (0+255),b
 12508  000576  0EFB               	movlw	high STR_103
 12509  000578  0100               	movlb	0	; () banked
 12510  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12511  00057C  EC02  F00B         	call	_printf	;wreg free
 12512                           
 12513                           ;Test.c: 299: updateServoPosition(1200, 1);
 12514  000580  0E04               	movlw	4
 12515  000582  0100               	movlb	0	; () banked
 12516  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12517  000586  0EB0               	movlw	176
 12518  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12519  00058A  0E00               	movlw	0
 12520  00058C  0100               	movlb	0	; () banked
 12521  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12522  000590  0E01               	movlw	1
 12523  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12524  000594  ECA9  F022         	call	_updateServoPosition	;wreg free
 12525                           
 12526                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12527  000598  0E00               	movlw	0
 12528  00059A  0100               	movlb	0	; () banked
 12529  00059C  6FB8               	movwf	actuatorTest@i_1756& (0+255),b
 12530  00059E                     l7906:
 12531                           
 12532                           ; BSR set to: 0
 12533  00059E  0E63               	movlw	99
 12534  0005A0  0100               	movlb	0	; () banked
 12535  0005A2  65B8               	cpfsgt	actuatorTest@i_1756& (0+255),b
 12536  0005A4  D001               	goto	l7910
 12537  0005A6  D00C               	goto	l7914
 12538  0005A8                     l7910:
 12539                           
 12540                           ; BSR set to: 0
 12541  0005A8  0E68               	movlw	104
 12542  0005AA  0100               	movlb	0	; () banked
 12543  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12544  0005AE  0EE4               	movlw	228
 12545  0005B0                     u9517:
 12546  0005B0  2EE8               	decfsz	wreg,f,c
 12547  0005B2  D7FE               	bra	u9517
 12548  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12549  0005B6  D7FC               	bra	u9517
 12550  0005B8  F000               	nop	
 12551  0005BA  0100               	movlb	0	; () banked
 12552  0005BC  2BB8               	incf	actuatorTest@i_1756& (0+255),f,b
 12553  0005BE  D7EF               	goto	l7906
 12554  0005C0                     l7914:
 12555                           
 12556                           ; BSR set to: 0
 12557  0005C0  0E00               	movlw	0
 12558  0005C2  0100               	movlb	0	; () banked
 12559  0005C4  6FB9               	movwf	actuatorTest@i_1757& (0+255),b
 12560  0005C6                     l7916:
 12561                           
 12562                           ; BSR set to: 0
 12563  0005C6  0E63               	movlw	99
 12564  0005C8  0100               	movlb	0	; () banked
 12565  0005CA  65B9               	cpfsgt	actuatorTest@i_1757& (0+255),b
 12566  0005CC  D001               	goto	l7920
 12567  0005CE  D00C               	goto	l1238
 12568  0005D0                     l7920:
 12569                           
 12570                           ; BSR set to: 0
 12571  0005D0  0E68               	movlw	104
 12572  0005D2  0100               	movlb	0	; () banked
 12573  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12574  0005D6  0EE4               	movlw	228
 12575  0005D8                     u9527:
 12576  0005D8  2EE8               	decfsz	wreg,f,c
 12577  0005DA  D7FE               	bra	u9527
 12578  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12579  0005DE  D7FC               	bra	u9527
 12580  0005E0  F000               	nop	
 12581  0005E2  0100               	movlb	0	; () banked
 12582  0005E4  2BB9               	incf	actuatorTest@i_1757& (0+255),f,b
 12583  0005E6  D7EF               	goto	l7916
 12584  0005E8                     l1238:
 12585                           
 12586                           ; BSR set to: 0
 12587                           ;Test.c: 301: TMR1ON = 0;
 12588  0005E8  90CD               	bcf	4045,0,c	;volatile
 12589                           
 12590                           ; BSR set to: 0
 12591                           ;Test.c: 308: printf("TST: TILT SERVO");
 12592  0005EA  0E36               	movlw	low STR_104
 12593  0005EC  0100               	movlb	0	; () banked
 12594  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12595  0005F0  0EFE               	movlw	high STR_104
 12596  0005F2  0100               	movlb	0	; () banked
 12597  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12598  0005F6  EC02  F00B         	call	_printf	;wreg free
 12599                           
 12600                           ;Test.c: 309: lcdInst(0b11000000);;
 12601  0005FA  0EC0               	movlw	192
 12602  0005FC  EC5C  F029         	call	_lcdInst
 12603                           
 12604                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12605  000600  0EE4               	movlw	low STR_105
 12606  000602  0100               	movlb	0	; () banked
 12607  000604  6F8E               	movwf	printf@f& (0+255),b
 12608  000606  0EFB               	movlw	high STR_105
 12609  000608  0100               	movlb	0	; () banked
 12610  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12611  00060C  EC02  F00B         	call	_printf	;wreg free
 12612                           
 12613                           ;Test.c: 311: updateServoPosition(1050, 3);
 12614  000610  0E04               	movlw	4
 12615  000612  0100               	movlb	0	; () banked
 12616  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12617  000616  0E1A               	movlw	26
 12618  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12619  00061A  0E00               	movlw	0
 12620  00061C  0100               	movlb	0	; () banked
 12621  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12622  000620  0E03               	movlw	3
 12623  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12624  000624  ECA9  F022         	call	_updateServoPosition	;wreg free
 12625                           
 12626                           ;Test.c: 312: TMR3ON = 1;
 12627  000628  80B1               	bsf	4017,0,c	;volatile
 12628                           
 12629                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12630  00062A  0E00               	movlw	0
 12631  00062C  0100               	movlb	0	; () banked
 12632  00062E  6FBA               	movwf	actuatorTest@i_1760& (0+255),b
 12633  000630                     l7934:
 12634                           
 12635                           ; BSR set to: 0
 12636  000630  0E63               	movlw	99
 12637  000632  0100               	movlb	0	; () banked
 12638  000634  65BA               	cpfsgt	actuatorTest@i_1760& (0+255),b
 12639  000636  D001               	goto	l7938
 12640  000638  D00C               	goto	l7942
 12641  00063A                     l7938:
 12642                           
 12643                           ; BSR set to: 0
 12644  00063A  0E68               	movlw	104
 12645  00063C  0100               	movlb	0	; () banked
 12646  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12647  000640  0EE4               	movlw	228
 12648  000642                     u9537:
 12649  000642  2EE8               	decfsz	wreg,f,c
 12650  000644  D7FE               	bra	u9537
 12651  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12652  000648  D7FC               	bra	u9537
 12653  00064A  F000               	nop	
 12654  00064C  0100               	movlb	0	; () banked
 12655  00064E  2BBA               	incf	actuatorTest@i_1760& (0+255),f,b
 12656  000650  D7EF               	goto	l7934
 12657  000652                     l7942:
 12658                           
 12659                           ; BSR set to: 0
 12660  000652  0E00               	movlw	0
 12661  000654  0100               	movlb	0	; () banked
 12662  000656  6FBB               	movwf	actuatorTest@i_1761& (0+255),b
 12663  000658                     l7944:
 12664                           
 12665                           ; BSR set to: 0
 12666  000658  0E63               	movlw	99
 12667  00065A  0100               	movlb	0	; () banked
 12668  00065C  65BB               	cpfsgt	actuatorTest@i_1761& (0+255),b
 12669  00065E  D001               	goto	l7948
 12670  000660  D00C               	goto	l7952
 12671  000662                     l7948:
 12672                           
 12673                           ; BSR set to: 0
 12674  000662  0E68               	movlw	104
 12675  000664  0100               	movlb	0	; () banked
 12676  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12677  000668  0EE4               	movlw	228
 12678  00066A                     u9547:
 12679  00066A  2EE8               	decfsz	wreg,f,c
 12680  00066C  D7FE               	bra	u9547
 12681  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12682  000670  D7FC               	bra	u9547
 12683  000672  F000               	nop	
 12684  000674  0100               	movlb	0	; () banked
 12685  000676  2BBB               	incf	actuatorTest@i_1761& (0+255),f,b
 12686  000678  D7EF               	goto	l7944
 12687  00067A                     l7952:
 12688                           
 12689                           ; BSR set to: 0
 12690                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12691  00067A  0E80               	movlw	128
 12692  00067C  EC5C  F029         	call	_lcdInst
 12693  000680  0EC0               	movlw	192
 12694  000682  EC5C  F029         	call	_lcdInst
 12695                           
 12696                           ;Test.c: 316: printf("DROP -- 2s      ");
 12697  000686  0EC2               	movlw	low STR_106
 12698  000688  0100               	movlb	0	; () banked
 12699  00068A  6F8E               	movwf	printf@f& (0+255),b
 12700  00068C  0EFB               	movlw	high STR_106
 12701  00068E  0100               	movlb	0	; () banked
 12702  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12703  000692  EC02  F00B         	call	_printf	;wreg free
 12704                           
 12705                           ;Test.c: 317: updateServoPosition(1260, 3);
 12706  000696  0E04               	movlw	4
 12707  000698  0100               	movlb	0	; () banked
 12708  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12709  00069C  0EEC               	movlw	236
 12710  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12711  0006A0  0E00               	movlw	0
 12712  0006A2  0100               	movlb	0	; () banked
 12713  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12714  0006A6  0E03               	movlw	3
 12715  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12716  0006AA  ECA9  F022         	call	_updateServoPosition	;wreg free
 12717                           
 12718                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12719  0006AE  0E00               	movlw	0
 12720  0006B0  0100               	movlb	0	; () banked
 12721  0006B2  6FBC               	movwf	actuatorTest@i_1763& (0+255),b
 12722  0006B4                     l7960:
 12723                           
 12724                           ; BSR set to: 0
 12725  0006B4  0E63               	movlw	99
 12726  0006B6  0100               	movlb	0	; () banked
 12727  0006B8  65BC               	cpfsgt	actuatorTest@i_1763& (0+255),b
 12728  0006BA  D001               	goto	l7964
 12729  0006BC  D00C               	goto	l7968
 12730  0006BE                     l7964:
 12731                           
 12732                           ; BSR set to: 0
 12733  0006BE  0E68               	movlw	104
 12734  0006C0  0100               	movlb	0	; () banked
 12735  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12736  0006C4  0EE4               	movlw	228
 12737  0006C6                     u9557:
 12738  0006C6  2EE8               	decfsz	wreg,f,c
 12739  0006C8  D7FE               	bra	u9557
 12740  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12741  0006CC  D7FC               	bra	u9557
 12742  0006CE  F000               	nop	
 12743  0006D0  0100               	movlb	0	; () banked
 12744  0006D2  2BBC               	incf	actuatorTest@i_1763& (0+255),f,b
 12745  0006D4  D7EF               	goto	l7960
 12746  0006D6                     l7968:
 12747                           
 12748                           ; BSR set to: 0
 12749  0006D6  0E00               	movlw	0
 12750  0006D8  0100               	movlb	0	; () banked
 12751  0006DA  6FBD               	movwf	actuatorTest@i_1764& (0+255),b
 12752  0006DC                     l7970:
 12753                           
 12754                           ; BSR set to: 0
 12755  0006DC  0E63               	movlw	99
 12756  0006DE  0100               	movlb	0	; () banked
 12757  0006E0  65BD               	cpfsgt	actuatorTest@i_1764& (0+255),b
 12758  0006E2  D001               	goto	l7974
 12759  0006E4  D00C               	goto	l7978
 12760  0006E6                     l7974:
 12761                           
 12762                           ; BSR set to: 0
 12763  0006E6  0E68               	movlw	104
 12764  0006E8  0100               	movlb	0	; () banked
 12765  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12766  0006EC  0EE4               	movlw	228
 12767  0006EE                     u9567:
 12768  0006EE  2EE8               	decfsz	wreg,f,c
 12769  0006F0  D7FE               	bra	u9567
 12770  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12771  0006F4  D7FC               	bra	u9567
 12772  0006F6  F000               	nop	
 12773  0006F8  0100               	movlb	0	; () banked
 12774  0006FA  2BBD               	incf	actuatorTest@i_1764& (0+255),f,b
 12775  0006FC  D7EF               	goto	l7970
 12776  0006FE                     l7978:
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12780  0006FE  0E80               	movlw	128
 12781  000700  EC5C  F029         	call	_lcdInst
 12782  000704  0EC0               	movlw	192
 12783  000706  EC5C  F029         	call	_lcdInst
 12784                           
 12785                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12786  00070A  0EE4               	movlw	low STR_105
 12787  00070C  0100               	movlb	0	; () banked
 12788  00070E  6F8E               	movwf	printf@f& (0+255),b
 12789  000710  0EFB               	movlw	high STR_105
 12790  000712  0100               	movlb	0	; () banked
 12791  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12792  000716  EC02  F00B         	call	_printf	;wreg free
 12793                           
 12794                           ;Test.c: 322: updateServoPosition(1050, 3);
 12795  00071A  0E04               	movlw	4
 12796  00071C  0100               	movlb	0	; () banked
 12797  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12798  000720  0E1A               	movlw	26
 12799  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12800  000724  0E00               	movlw	0
 12801  000726  0100               	movlb	0	; () banked
 12802  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12803  00072A  0E03               	movlw	3
 12804  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12805  00072E  ECA9  F022         	call	_updateServoPosition	;wreg free
 12806                           
 12807                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12808  000732  0E00               	movlw	0
 12809  000734  0100               	movlb	0	; () banked
 12810  000736  6FBE               	movwf	actuatorTest@i_1766& (0+255),b
 12811  000738                     l7986:
 12812                           
 12813                           ; BSR set to: 0
 12814  000738  0E63               	movlw	99
 12815  00073A  0100               	movlb	0	; () banked
 12816  00073C  65BE               	cpfsgt	actuatorTest@i_1766& (0+255),b
 12817  00073E  D001               	goto	l7990
 12818  000740  D00C               	goto	l7994
 12819  000742                     l7990:
 12820                           
 12821                           ; BSR set to: 0
 12822  000742  0E68               	movlw	104
 12823  000744  0100               	movlb	0	; () banked
 12824  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12825  000748  0EE4               	movlw	228
 12826  00074A                     u9577:
 12827  00074A  2EE8               	decfsz	wreg,f,c
 12828  00074C  D7FE               	bra	u9577
 12829  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12830  000750  D7FC               	bra	u9577
 12831  000752  F000               	nop	
 12832  000754  0100               	movlb	0	; () banked
 12833  000756  2BBE               	incf	actuatorTest@i_1766& (0+255),f,b
 12834  000758  D7EF               	goto	l7986
 12835  00075A                     l7994:
 12836                           
 12837                           ; BSR set to: 0
 12838  00075A  0E00               	movlw	0
 12839  00075C  0100               	movlb	0	; () banked
 12840  00075E  6FBF               	movwf	actuatorTest@i_1767& (0+255),b
 12841  000760                     l7996:
 12842                           
 12843                           ; BSR set to: 0
 12844  000760  0E63               	movlw	99
 12845  000762  0100               	movlb	0	; () banked
 12846  000764  65BF               	cpfsgt	actuatorTest@i_1767& (0+255),b
 12847  000766  D001               	goto	l8000
 12848  000768  D00C               	goto	l1250
 12849  00076A                     l8000:
 12850                           
 12851                           ; BSR set to: 0
 12852  00076A  0E68               	movlw	104
 12853  00076C  0100               	movlb	0	; () banked
 12854  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12855  000770  0EE4               	movlw	228
 12856  000772                     u9587:
 12857  000772  2EE8               	decfsz	wreg,f,c
 12858  000774  D7FE               	bra	u9587
 12859  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12860  000778  D7FC               	bra	u9587
 12861  00077A  F000               	nop	
 12862  00077C  0100               	movlb	0	; () banked
 12863  00077E  2BBF               	incf	actuatorTest@i_1767& (0+255),f,b
 12864  000780  D7EF               	goto	l7996
 12865  000782                     l1250:
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;Test.c: 324: TMR3ON = 0;
 12869  000782  90B1               	bcf	4017,0,c	;volatile
 12870                           
 12871                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12872  000784  9EF2               	bcf	intcon,7,c	;volatile
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12876  000786  0E01               	movlw	1
 12877  000788  EC5C  F029         	call	_lcdInst
 12878  00078C  0E68               	movlw	104
 12879  00078E  0100               	movlb	0	; () banked
 12880  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12881  000792  0EE4               	movlw	228
 12882  000794                     u9597:
 12883  000794  2EE8               	decfsz	wreg,f,c
 12884  000796  D7FE               	bra	u9597
 12885  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12886  00079A  D7FC               	bra	u9597
 12887  00079C  F000               	nop	
 12888  00079E  0E80               	movlw	128
 12889  0007A0  EC5C  F029         	call	_lcdInst
 12890                           
 12891                           ;Test.c: 331: printf("TST: CAM SERVO");
 12892  0007A4  0E92               	movlw	low STR_108
 12893  0007A6  0100               	movlb	0	; () banked
 12894  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12895  0007AA  0EFE               	movlw	high STR_108
 12896  0007AC  0100               	movlb	0	; () banked
 12897  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12898  0007B0  EC02  F00B         	call	_printf	;wreg free
 12899                           
 12900                           ;Test.c: 332: lcdInst(0b11000000);;
 12901  0007B4  0EC0               	movlw	192
 12902  0007B6  EC5C  F029         	call	_lcdInst
 12903                           
 12904                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12905  0007BA  0E74               	movlw	low STR_109
 12906  0007BC  0100               	movlb	0	; () banked
 12907  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12908  0007C0  0EFE               	movlw	high STR_109
 12909  0007C2  0100               	movlb	0	; () banked
 12910  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12911  0007C6  EC02  F00B         	call	_printf	;wreg free
 12912                           
 12913                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12914  0007CA  808B               	bsf	3979,0,c	;volatile
 12915                           
 12916                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12917  0007CC  0E00               	movlw	0
 12918  0007CE  0100               	movlb	0	; () banked
 12919  0007D0  6FC0               	movwf	actuatorTest@i_1770& (0+255),b
 12920  0007D2                     l8020:
 12921                           
 12922                           ; BSR set to: 0
 12923  0007D2  0E63               	movlw	99
 12924  0007D4  0100               	movlb	0	; () banked
 12925  0007D6  65C0               	cpfsgt	actuatorTest@i_1770& (0+255),b
 12926  0007D8  D001               	goto	l8024
 12927  0007DA  D00C               	goto	l8028
 12928  0007DC                     l8024:
 12929                           
 12930                           ; BSR set to: 0
 12931  0007DC  0E68               	movlw	104
 12932  0007DE  0100               	movlb	0	; () banked
 12933  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12934  0007E2  0EE4               	movlw	228
 12935  0007E4                     u9607:
 12936  0007E4  2EE8               	decfsz	wreg,f,c
 12937  0007E6  D7FE               	bra	u9607
 12938  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12939  0007EA  D7FC               	bra	u9607
 12940  0007EC  F000               	nop	
 12941  0007EE  0100               	movlb	0	; () banked
 12942  0007F0  2BC0               	incf	actuatorTest@i_1770& (0+255),f,b
 12943  0007F2  D7EF               	goto	l8020
 12944  0007F4                     l8028:
 12945                           
 12946                           ; BSR set to: 0
 12947  0007F4  0E00               	movlw	0
 12948  0007F6  0100               	movlb	0	; () banked
 12949  0007F8  6FC1               	movwf	actuatorTest@i_1771& (0+255),b
 12950  0007FA                     l8030:
 12951                           
 12952                           ; BSR set to: 0
 12953  0007FA  0E63               	movlw	99
 12954  0007FC  0100               	movlb	0	; () banked
 12955  0007FE  65C1               	cpfsgt	actuatorTest@i_1771& (0+255),b
 12956  000800  D001               	goto	l8034
 12957  000802  D00C               	goto	l8038
 12958  000804                     l8034:
 12959                           
 12960                           ; BSR set to: 0
 12961  000804  0E68               	movlw	104
 12962  000806  0100               	movlb	0	; () banked
 12963  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12964  00080A  0EE4               	movlw	228
 12965  00080C                     u9617:
 12966  00080C  2EE8               	decfsz	wreg,f,c
 12967  00080E  D7FE               	bra	u9617
 12968  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12969  000812  D7FC               	bra	u9617
 12970  000814  F000               	nop	
 12971  000816  0100               	movlb	0	; () banked
 12972  000818  2BC1               	incf	actuatorTest@i_1771& (0+255),f,b
 12973  00081A  D7EF               	goto	l8030
 12974  00081C                     l8038:
 12975                           
 12976                           ; BSR set to: 0
 12977                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12978  00081C  0E80               	movlw	128
 12979  00081E  EC5C  F029         	call	_lcdInst
 12980  000822  0EC0               	movlw	192
 12981  000824  EC5C  F029         	call	_lcdInst
 12982                           
 12983                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12984  000828  0E65               	movlw	low STR_110
 12985  00082A  0100               	movlb	0	; () banked
 12986  00082C  6F8E               	movwf	printf@f& (0+255),b
 12987  00082E  0EFE               	movlw	high STR_110
 12988  000830  0100               	movlb	0	; () banked
 12989  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12990  000834  EC02  F00B         	call	_printf	;wreg free
 12991                           
 12992                           ;Test.c: 340: for(i=0;i<10000;i++)
 12993  000838  0E00               	movlw	0
 12994  00083A  0100               	movlb	0	; () banked
 12995  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12996  00083E  0E00               	movlw	0
 12997  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12998  000842                     l8044:
 12999                           
 13000                           ; BSR set to: 0
 13001  000842  0100               	movlb	0	; () banked
 13002  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13003  000846  D008               	goto	l1255
 13004  000848  0E10               	movlw	16
 13005  00084A  0100               	movlb	0	; () banked
 13006  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13007  00084E  0E27               	movlw	39
 13008  000850  0100               	movlb	0	; () banked
 13009  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13010  000854  B0D8               	btfsc	status,0,c
 13011  000856  D00D               	goto	l8054
 13012  000858                     l1255:
 13013                           
 13014                           ; BSR set to: 0
 13015                           ;Test.c: 341: {
 13016                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13017  000858  808B               	bsf	3979,0,c	;volatile
 13018                           
 13019                           ; BSR set to: 0
 13020                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13021  00085A  0E1A               	movlw	26
 13022  00085C                     u9627:
 13023  00085C  2EE8               	decfsz	wreg,f,c
 13024  00085E  D7FE               	bra	u9627
 13025  000860  D000               	nop2	
 13026                           
 13027                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13028  000862  908B               	bcf	3979,0,c	;volatile
 13029                           
 13030                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13031  000864  0EF0               	movlw	240
 13032  000866                     u9637:
 13033  000866  2EE8               	decfsz	wreg,f,c
 13034  000868  D7FE               	bra	u9637
 13035  00086A  0100               	movlb	0	; () banked
 13036  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13037  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13038  000870  D7E8               	goto	l8044
 13039  000872                     l8054:
 13040                           
 13041                           ; BSR set to: 0
 13042                           ;Test.c: 346: }
 13043                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13044  000872  0E00               	movlw	0
 13045  000874  0100               	movlb	0	; () banked
 13046  000876  6FC2               	movwf	actuatorTest@i_1773& (0+255),b
 13047  000878                     l8056:
 13048                           
 13049                           ; BSR set to: 0
 13050  000878  0E63               	movlw	99
 13051  00087A  0100               	movlb	0	; () banked
 13052  00087C  65C2               	cpfsgt	actuatorTest@i_1773& (0+255),b
 13053  00087E  D001               	goto	l8060
 13054  000880  D00C               	goto	l8064
 13055  000882                     l8060:
 13056                           
 13057                           ; BSR set to: 0
 13058  000882  0E68               	movlw	104
 13059  000884  0100               	movlb	0	; () banked
 13060  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13061  000888  0EE4               	movlw	228
 13062  00088A                     u9647:
 13063  00088A  2EE8               	decfsz	wreg,f,c
 13064  00088C  D7FE               	bra	u9647
 13065  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13066  000890  D7FC               	bra	u9647
 13067  000892  F000               	nop	
 13068  000894  0100               	movlb	0	; () banked
 13069  000896  2BC2               	incf	actuatorTest@i_1773& (0+255),f,b
 13070  000898  D7EF               	goto	l8056
 13071  00089A                     l8064:
 13072                           
 13073                           ; BSR set to: 0
 13074  00089A  0E00               	movlw	0
 13075  00089C  0100               	movlb	0	; () banked
 13076  00089E  6FC3               	movwf	actuatorTest@i_1774& (0+255),b
 13077  0008A0                     l8066:
 13078                           
 13079                           ; BSR set to: 0
 13080  0008A0  0E63               	movlw	99
 13081  0008A2  0100               	movlb	0	; () banked
 13082  0008A4  65C3               	cpfsgt	actuatorTest@i_1774& (0+255),b
 13083  0008A6  D001               	goto	l8070
 13084  0008A8  D00C               	goto	l8074
 13085  0008AA                     l8070:
 13086                           
 13087                           ; BSR set to: 0
 13088  0008AA  0E68               	movlw	104
 13089  0008AC  0100               	movlb	0	; () banked
 13090  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13091  0008B0  0EE4               	movlw	228
 13092  0008B2                     u9657:
 13093  0008B2  2EE8               	decfsz	wreg,f,c
 13094  0008B4  D7FE               	bra	u9657
 13095  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13096  0008B8  D7FC               	bra	u9657
 13097  0008BA  F000               	nop	
 13098  0008BC  0100               	movlb	0	; () banked
 13099  0008BE  2BC3               	incf	actuatorTest@i_1774& (0+255),f,b
 13100  0008C0  D7EF               	goto	l8066
 13101  0008C2                     l8074:
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;Test.c: 349: machine_state = Testing_state;
 13105  0008C2  0E03               	movlw	3
 13106  0008C4  0100               	movlb	0	; () banked
 13107  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13108                           
 13109                           ; BSR set to: 0
 13110  0008C8  0012               	return		;funcret
 13111  0008CA                     __end_of_actuatorTest:
 13112                           	opt stack 0
 13113                           tblptru	equ	0xFF8
 13114                           tblptrh	equ	0xFF7
 13115                           tblptrl	equ	0xFF6
 13116                           tablat	equ	0xFF5
 13117                           prodh	equ	0xFF4
 13118                           prodl	equ	0xFF3
 13119                           intcon	equ	0xFF2
 13120                           intcon2	equ	0xFF1
 13121                           intcon3	equ	0xFF0
 13122                           postinc0	equ	0xFEE
 13123                           wreg	equ	0xFE8
 13124                           postdec1	equ	0xFE5
 13125                           fsr1l	equ	0xFE1
 13126                           indf2	equ	0xFDF
 13127                           postinc2	equ	0xFDE
 13128                           postdec2	equ	0xFDD
 13129                           fsr2h	equ	0xFDA
 13130                           fsr2l	equ	0xFD9
 13131                           status	equ	0xFD8
 13132                           
 13133 ;; *************** function _SpeedTest *****************
 13134 ;; Defined at:
 13135 ;;		line 549 in file "Test.c"
 13136 ;; Parameters:    Size  Location     Type
 13137 ;;		None
 13138 ;; Auto vars:     Size  Location     Type
 13139 ;;		None
 13140 ;; Return value:  Size  Location     Type
 13141 ;;                  1    wreg      void 
 13142 ;; Registers used:
 13143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13144 ;; Tracked objects:
 13145 ;;		On entry : 0/0
 13146 ;;		On exit  : 0/0
 13147 ;;		Unchanged: 0/0
 13148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13152 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13153 ;;Total ram usage:        1 bytes
 13154 ;; Hardware stack levels used:    1
 13155 ;; Hardware stack levels required when called:   10
 13156 ;; This function calls:
 13157 ;;		_lcdInst
 13158 ;;		_printf
 13159 ;; This function is called by:
 13160 ;;		_Test
 13161 ;; This function uses a non-reentrant model
 13162 ;;
 13163                           
 13164                           	psect	text41
 13165  0045D8                     __ptext41:
 13166                           	opt stack 0
 13167  0045D8                     _SpeedTest:
 13168                           	opt stack 19
 13169                           
 13170                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;incstack = 0
 13174  0045D8  0E01               	movlw	1
 13175  0045DA  EC5C  F029         	call	_lcdInst
 13176  0045DE  0E68               	movlw	104
 13177  0045E0  0100               	movlb	0	; () banked
 13178  0045E2  6FAB               	movwf	??_SpeedTest& (0+255),b
 13179  0045E4  0EE4               	movlw	228
 13180  0045E6                     u9667:
 13181  0045E6  2EE8               	decfsz	wreg,f,c
 13182  0045E8  D7FE               	bra	u9667
 13183  0045EA  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13184  0045EC  D7FC               	bra	u9667
 13185  0045EE  F000               	nop	
 13186  0045F0  0E80               	movlw	128
 13187  0045F2  EC5C  F029         	call	_lcdInst
 13188                           
 13189                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13190  0045F6  0E57               	movlw	low STR_121
 13191  0045F8  0100               	movlb	0	; () banked
 13192  0045FA  6F8E               	movwf	printf@f& (0+255),b
 13193  0045FC  0EFB               	movlw	high STR_121
 13194  0045FE  0100               	movlb	0	; () banked
 13195  004600  6F8F               	movwf	(printf@f+1)& (0+255),b
 13196  004602  EC02  F00B         	call	_printf	;wreg free
 13197                           
 13198                           ;Test.c: 553: lcdInst(0b11000000);;
 13199  004606  0EC0               	movlw	192
 13200  004608  EC5C  F029         	call	_lcdInst
 13201                           
 13202                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13203  00460C  0E45               	movlw	low STR_113
 13204  00460E  0100               	movlb	0	; () banked
 13205  004610  6F8E               	movwf	printf@f& (0+255),b
 13206  004612  0EFB               	movlw	high STR_113
 13207  004614  0100               	movlb	0	; () banked
 13208  004616  6F8F               	movwf	(printf@f+1)& (0+255),b
 13209  004618  EC02  F00B         	call	_printf	;wreg free
 13210  00461C                     l1341:
 13211  00461C  A281               	btfss	3969,1,c	;volatile
 13212  00461E  D7FE               	goto	l1341
 13213                           
 13214                           ;Test.c: 559: }
 13215                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13216  004620  3881               	swapf	3969,w,c	;volatile
 13217  004622  0B0F               	andlw	15
 13218  004624  0A0F               	xorlw	15
 13219  004626  B4D8               	btfsc	status,2,c
 13220  004628  0012               	return	
 13221  00462A  D014               	goto	l8116
 13222  00462C                     l1348:
 13223                           
 13224                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13225  00462C  8A89               	bsf	3977,5,c	;volatile
 13226                           
 13227                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13228  00462E  0E34               	movlw	52
 13229  004630  0100               	movlb	0	; () banked
 13230  004632  6FAB               	movwf	??_SpeedTest& (0+255),b
 13231  004634  0EF1               	movlw	241
 13232  004636                     u9677:
 13233  004636  2EE8               	decfsz	wreg,f,c
 13234  004638  D7FE               	bra	u9677
 13235  00463A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13236  00463C  D7FC               	bra	u9677
 13237  00463E  D000               	nop2	
 13238                           
 13239                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13240  004640  9A89               	bcf	3977,5,c	;volatile
 13241                           
 13242                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13243  004642  0E34               	movlw	52
 13244  004644  0100               	movlb	0	; () banked
 13245  004646  6FAB               	movwf	??_SpeedTest& (0+255),b
 13246  004648  0EF1               	movlw	241
 13247  00464A                     u9687:
 13248  00464A  2EE8               	decfsz	wreg,f,c
 13249  00464C  D7FE               	bra	u9687
 13250  00464E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13251  004650  D7FC               	bra	u9687
 13252  004652  D000               	nop2	
 13253  004654                     l8116:
 13254  004654  B281               	btfsc	3969,1,c	;volatile
 13255  004656  D7EA               	goto	l1348
 13256                           
 13257                           ;Test.c: 571: }
 13258                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13259  004658  9A89               	bcf	3977,5,c	;volatile
 13260  00465A  D7E0               	goto	l1341
 13261  00465C                     __end_of_SpeedTest:
 13262                           	opt stack 0
 13263                           tblptru	equ	0xFF8
 13264                           tblptrh	equ	0xFF7
 13265                           tblptrl	equ	0xFF6
 13266                           tablat	equ	0xFF5
 13267                           prodh	equ	0xFF4
 13268                           prodl	equ	0xFF3
 13269                           intcon	equ	0xFF2
 13270                           intcon2	equ	0xFF1
 13271                           intcon3	equ	0xFF0
 13272                           postinc0	equ	0xFEE
 13273                           wreg	equ	0xFE8
 13274                           postdec1	equ	0xFE5
 13275                           fsr1l	equ	0xFE1
 13276                           indf2	equ	0xFDF
 13277                           postinc2	equ	0xFDE
 13278                           postdec2	equ	0xFDD
 13279                           fsr2h	equ	0xFDA
 13280                           fsr2l	equ	0xFD9
 13281                           status	equ	0xFD8
 13282                           
 13283 ;; *************** function _PusherTest *****************
 13284 ;; Defined at:
 13285 ;;		line 467 in file "Test.c"
 13286 ;; Parameters:    Size  Location     Type
 13287 ;;		None
 13288 ;; Auto vars:     Size  Location     Type
 13289 ;;  i               2   51[BANK0 ] int 
 13290 ;;  i               2   49[BANK0 ] int 
 13291 ;;  res             2   47[BANK0 ] int 
 13292 ;;  res             2   45[BANK0 ] int 
 13293 ;; Return value:  Size  Location     Type
 13294 ;;                  1    wreg      void 
 13295 ;; Registers used:
 13296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13297 ;; Tracked objects:
 13298 ;;		On entry : 0/0
 13299 ;;		On exit  : 0/0
 13300 ;;		Unchanged: 0/0
 13301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13303 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13305 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13306 ;;Total ram usage:       10 bytes
 13307 ;; Hardware stack levels used:    1
 13308 ;; Hardware stack levels required when called:   10
 13309 ;; This function calls:
 13310 ;;		_lcdInst
 13311 ;;		_printf
 13312 ;;		_readADC
 13313 ;; This function is called by:
 13314 ;;		_Test
 13315 ;; This function uses a non-reentrant model
 13316 ;;
 13317                           
 13318                           	psect	text42
 13319  002C5E                     __ptext42:
 13320                           	opt stack 0
 13321  002C5E                     _PusherTest:
 13322                           	opt stack 19
 13323                           
 13324                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13325                           
 13326                           ;incstack = 0
 13327  002C5E  0E01               	movlw	1
 13328  002C60  EC5C  F029         	call	_lcdInst
 13329  002C64  0E68               	movlw	104
 13330  002C66  0100               	movlb	0	; () banked
 13331  002C68  6FAB               	movwf	??_PusherTest& (0+255),b
 13332  002C6A  0EE4               	movlw	228
 13333  002C6C                     u9697:
 13334  002C6C  2EE8               	decfsz	wreg,f,c
 13335  002C6E  D7FE               	bra	u9697
 13336  002C70  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13337  002C72  D7FC               	bra	u9697
 13338  002C74  F000               	nop	
 13339  002C76  0E80               	movlw	128
 13340  002C78  EC5C  F029         	call	_lcdInst
 13341                           
 13342                           ;Test.c: 469: printf("PUSHER TST");
 13343  002C7C  0E6D               	movlw	low STR_114
 13344  002C7E  0100               	movlb	0	; () banked
 13345  002C80  6F8E               	movwf	printf@f& (0+255),b
 13346  002C82  0EFF               	movlw	high STR_114
 13347  002C84  0100               	movlb	0	; () banked
 13348  002C86  6F8F               	movwf	(printf@f+1)& (0+255),b
 13349  002C88  EC02  F00B         	call	_printf	;wreg free
 13350                           
 13351                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13352  002C8C  8A8B               	bsf	3979,5,c	;volatile
 13353                           
 13354                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13355  002C8E  D05C               	goto	l8146
 13356  002C90                     l8128:
 13357                           
 13358                           ;Test.c: 473: readADC(0);
 13359  002C90  0E00               	movlw	0
 13360  002C92  EC53  F028         	call	_readADC
 13361                           
 13362                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13363  002C96  50C3               	movf	4035,w,c	;volatile
 13364  002C98  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13365  002C9C  0100               	movlb	0	; () banked
 13366  002C9E  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13367  002CA0  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13368  002CA4  0100               	movlb	0	; () banked
 13369  002CA6  6BAB               	clrf	??_PusherTest& (0+255),b
 13370  002CA8  0100               	movlb	0	; () banked
 13371  002CAA  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13372  002CAC  0100               	movlb	0	; () banked
 13373  002CAE  6FAD               	movwf	PusherTest@res& (0+255),b
 13374  002CB0  0100               	movlb	0	; () banked
 13375  002CB2  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13376  002CB4  0100               	movlb	0	; () banked
 13377  002CB6  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13378                           
 13379                           ; BSR set to: 0
 13380                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13381  002CB8  0100               	movlb	0	; () banked
 13382  002CBA  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13383  002CBC  D00A               	goto	u6770
 13384  002CBE  0E21               	movlw	33
 13385  002CC0  0100               	movlb	0	; () banked
 13386  002CC2  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13387  002CC4  0E03               	movlw	3
 13388  002CC6  0100               	movlb	0	; () banked
 13389  002CC8  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13390  002CCA  A0D8               	btfss	status,0,c
 13391  002CCC  D002               	goto	u6770
 13392  002CCE  0E01               	movlw	1
 13393  002CD0  D001               	goto	u6780
 13394  002CD2                     u6770:
 13395  002CD2  0E00               	movlw	0
 13396  002CD4                     u6780:
 13397  002CD4  0100               	movlb	0	; () banked
 13398  002CD6  6FE6               	movwf	_IR_signal& (0+255),b
 13399  002CD8  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13400                           
 13401                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13402  002CDA  0E01               	movlw	1
 13403  002CDC  EC5C  F029         	call	_lcdInst
 13404  002CE0  0E68               	movlw	104
 13405  002CE2  0100               	movlb	0	; () banked
 13406  002CE4  6FAB               	movwf	??_PusherTest& (0+255),b
 13407  002CE6  0EE4               	movlw	228
 13408  002CE8                     u9707:
 13409  002CE8  2EE8               	decfsz	wreg,f,c
 13410  002CEA  D7FE               	bra	u9707
 13411  002CEC  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13412  002CEE  D7FC               	bra	u9707
 13413  002CF0  F000               	nop	
 13414  002CF2  0E80               	movlw	128
 13415  002CF4  EC5C  F029         	call	_lcdInst
 13416                           
 13417                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13418  002CF8  0E56               	movlw	low STR_81
 13419  002CFA  0100               	movlb	0	; () banked
 13420  002CFC  6F8E               	movwf	printf@f& (0+255),b
 13421  002CFE  0EFE               	movlw	high STR_81
 13422  002D00  0100               	movlb	0	; () banked
 13423  002D02  6F8F               	movwf	(printf@f+1)& (0+255),b
 13424  002D04  C0E6  F090         	movff	_IR_signal,?_printf+2
 13425  002D08  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13426  002D0C  EC02  F00B         	call	_printf	;wreg free
 13427                           
 13428                           ;Test.c: 479: lcdInst(0b11000000);;
 13429  002D10  0EC0               	movlw	192
 13430  002D12  EC5C  F029         	call	_lcdInst
 13431                           
 13432                           ;Test.c: 480: printf("%d", res);
 13433  002D16  0E12               	movlw	low (STR_27+14)
 13434  002D18  0100               	movlb	0	; () banked
 13435  002D1A  6F8E               	movwf	printf@f& (0+255),b
 13436  002D1C  0EFE               	movlw	high (STR_27+14)
 13437  002D1E  0100               	movlb	0	; () banked
 13438  002D20  6F8F               	movwf	(printf@f+1)& (0+255),b
 13439  002D22  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13440  002D26  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13441  002D2A  EC02  F00B         	call	_printf	;wreg free
 13442                           
 13443                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13444  002D2E  0E05               	movlw	5
 13445  002D30  0100               	movlb	0	; () banked
 13446  002D32  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13447  002D34  0E0F               	movlw	15
 13448  002D36  0100               	movlb	0	; () banked
 13449  002D38  6FAB               	movwf	??_PusherTest& (0+255),b
 13450  002D3A  0EF1               	movlw	241
 13451  002D3C                     u9717:
 13452  002D3C  2EE8               	decfsz	wreg,f,c
 13453  002D3E  D7FE               	bra	u9717
 13454  002D40  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13455  002D42  D7FC               	bra	u9717
 13456  002D44  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13457  002D46  D7FA               	bra	u9717
 13458  002D48                     l8146:
 13459  002D48  B281               	btfsc	3969,1,c	;volatile
 13460  002D4A  D05D               	goto	l8166
 13461  002D4C  D7A1               	goto	l8128
 13462  002D4E                     l8148:
 13463                           
 13464                           ;Test.c: 487: readADC(0);
 13465  002D4E  0E00               	movlw	0
 13466  002D50  EC53  F028         	call	_readADC
 13467                           
 13468                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13469  002D54  50C3               	movf	4035,w,c	;volatile
 13470  002D56  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13471  002D5A  0100               	movlb	0	; () banked
 13472  002D5C  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13473  002D5E  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13474  002D62  0100               	movlb	0	; () banked
 13475  002D64  6BAB               	clrf	??_PusherTest& (0+255),b
 13476  002D66  0100               	movlb	0	; () banked
 13477  002D68  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13478  002D6A  0100               	movlb	0	; () banked
 13479  002D6C  6FAF               	movwf	PusherTest@res_1789& (0+255),b
 13480  002D6E  0100               	movlb	0	; () banked
 13481  002D70  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13482  002D72  0100               	movlb	0	; () banked
 13483  002D74  6FB0               	movwf	(PusherTest@res_1789+1)& (0+255),b
 13484                           
 13485                           ; BSR set to: 0
 13486                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13487  002D76  0100               	movlb	0	; () banked
 13488  002D78  BFB0               	btfsc	(PusherTest@res_1789+1)& (0+255),7,b
 13489  002D7A  D00A               	goto	u6800
 13490  002D7C  0E21               	movlw	33
 13491  002D7E  0100               	movlb	0	; () banked
 13492  002D80  5DAF               	subwf	PusherTest@res_1789& (0+255),w,b
 13493  002D82  0E03               	movlw	3
 13494  002D84  0100               	movlb	0	; () banked
 13495  002D86  59B0               	subwfb	(PusherTest@res_1789+1)& (0+255),w,b
 13496  002D88  A0D8               	btfss	status,0,c
 13497  002D8A  D002               	goto	u6800
 13498  002D8C  0E01               	movlw	1
 13499  002D8E  D001               	goto	u6810
 13500  002D90                     u6800:
 13501  002D90  0E00               	movlw	0
 13502  002D92                     u6810:
 13503  002D92  0100               	movlb	0	; () banked
 13504  002D94  6FE6               	movwf	_IR_signal& (0+255),b
 13505  002D96  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13506                           
 13507                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13508  002D98  0E01               	movlw	1
 13509  002D9A  EC5C  F029         	call	_lcdInst
 13510  002D9E  0E68               	movlw	104
 13511  002DA0  0100               	movlb	0	; () banked
 13512  002DA2  6FAB               	movwf	??_PusherTest& (0+255),b
 13513  002DA4  0EE4               	movlw	228
 13514  002DA6                     u9727:
 13515  002DA6  2EE8               	decfsz	wreg,f,c
 13516  002DA8  D7FE               	bra	u9727
 13517  002DAA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13518  002DAC  D7FC               	bra	u9727
 13519  002DAE  F000               	nop	
 13520  002DB0  0E80               	movlw	128
 13521  002DB2  EC5C  F029         	call	_lcdInst
 13522                           
 13523                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13524  002DB6  0E56               	movlw	low STR_81
 13525  002DB8  0100               	movlb	0	; () banked
 13526  002DBA  6F8E               	movwf	printf@f& (0+255),b
 13527  002DBC  0EFE               	movlw	high STR_81
 13528  002DBE  0100               	movlb	0	; () banked
 13529  002DC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13530  002DC2  C0E6  F090         	movff	_IR_signal,?_printf+2
 13531  002DC6  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13532  002DCA  EC02  F00B         	call	_printf	;wreg free
 13533                           
 13534                           ;Test.c: 492: lcdInst(0b11000000);;
 13535  002DCE  0EC0               	movlw	192
 13536  002DD0  EC5C  F029         	call	_lcdInst
 13537                           
 13538                           ;Test.c: 493: printf("%d", res);
 13539  002DD4  0E12               	movlw	low (STR_27+14)
 13540  002DD6  0100               	movlb	0	; () banked
 13541  002DD8  6F8E               	movwf	printf@f& (0+255),b
 13542  002DDA  0EFE               	movlw	high (STR_27+14)
 13543  002DDC  0100               	movlb	0	; () banked
 13544  002DDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13545  002DE0  C0AF  F090         	movff	PusherTest@res_1789,?_printf+2
 13546  002DE4  C0B0  F091         	movff	PusherTest@res_1789+1,?_printf+3
 13547  002DE8  EC02  F00B         	call	_printf	;wreg free
 13548                           
 13549                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13550  002DEC  0E05               	movlw	5
 13551  002DEE  0100               	movlb	0	; () banked
 13552  002DF0  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13553  002DF2  0E0F               	movlw	15
 13554  002DF4  0100               	movlb	0	; () banked
 13555  002DF6  6FAB               	movwf	??_PusherTest& (0+255),b
 13556  002DF8  0EF1               	movlw	241
 13557  002DFA                     u9737:
 13558  002DFA  2EE8               	decfsz	wreg,f,c
 13559  002DFC  D7FE               	bra	u9737
 13560  002DFE  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13561  002E00  D7FC               	bra	u9737
 13562  002E02  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13563  002E04  D7FA               	bra	u9737
 13564  002E06                     l8166:
 13565  002E06  A281               	btfss	3969,1,c	;volatile
 13566  002E08  D7A2               	goto	l8148
 13567                           
 13568                           ;Test.c: 495: }
 13569                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13570  002E0A  3881               	swapf	3969,w,c	;volatile
 13571  002E0C  0B0F               	andlw	15
 13572  002E0E  0A0F               	xorlw	15
 13573  002E10  B4D8               	btfsc	status,2,c
 13574  002E12  D047               	goto	l1310
 13575                           
 13576                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13577                           
 13578                           ;Test.c: 498: }
 13579                           
 13580                           ;Test.c: 497: break;
 13581  002E14  3881               	swapf	3969,w,c	;volatile
 13582  002E16  0B0F               	andlw	15
 13583  002E18  0A05               	xorlw	5
 13584  002E1A  A4D8               	btfss	status,2,c
 13585  002E1C  D01D               	goto	l8188
 13586                           
 13587                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13588  002E1E  0E00               	movlw	0
 13589  002E20  0100               	movlb	0	; () banked
 13590  002E22  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13591  002E24  0E00               	movlw	0
 13592  002E26  6FB1               	movwf	PusherTest@i& (0+255),b
 13593  002E28                     l8178:
 13594                           
 13595                           ; BSR set to: 0
 13596  002E28  0100               	movlb	0	; () banked
 13597  002E2A  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13598  002E2C  D008               	goto	l1313
 13599  002E2E  0EB8               	movlw	184
 13600  002E30  0100               	movlb	0	; () banked
 13601  002E32  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13602  002E34  0E0B               	movlw	11
 13603  002E36  0100               	movlb	0	; () banked
 13604  002E38  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13605  002E3A  B0D8               	btfsc	status,0,c
 13606  002E3C  D02F               	goto	l1319
 13607  002E3E                     l1313:
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13611  002E3E  8889               	bsf	3977,4,c	;volatile
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13615  002E40  0EC8               	movlw	200
 13616  002E42                     u9747:
 13617  002E42  2EE8               	decfsz	wreg,f,c
 13618  002E44  D7FE               	bra	u9747
 13619                           
 13620                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13621  002E46  9889               	bcf	3977,4,c	;volatile
 13622                           
 13623                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13624  002E48  0E42               	movlw	66
 13625  002E4A                     u9757:
 13626  002E4A  2EE8               	decfsz	wreg,f,c
 13627  002E4C  D7FE               	bra	u9757
 13628  002E4E  D000               	nop2	
 13629  002E50  0100               	movlb	0	; () banked
 13630  002E52  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13631  002E54  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13632  002E56  D7E8               	goto	l8178
 13633  002E58                     l8188:
 13634                           
 13635                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13636  002E58  3881               	swapf	3969,w,c	;volatile
 13637  002E5A  0B0F               	andlw	15
 13638  002E5C  0A06               	xorlw	6
 13639  002E5E  A4D8               	btfss	status,2,c
 13640  002E60  D01D               	goto	l1319
 13641                           
 13642                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13643  002E62  0E00               	movlw	0
 13644  002E64  0100               	movlb	0	; () banked
 13645  002E66  6FB4               	movwf	(PusherTest@i_1793+1)& (0+255),b
 13646  002E68  0E00               	movlw	0
 13647  002E6A  6FB3               	movwf	PusherTest@i_1793& (0+255),b
 13648  002E6C                     l8192:
 13649                           
 13650                           ; BSR set to: 0
 13651  002E6C  0100               	movlb	0	; () banked
 13652  002E6E  BFB4               	btfsc	(PusherTest@i_1793+1)& (0+255),7,b
 13653  002E70  D008               	goto	l1317
 13654  002E72  0EB8               	movlw	184
 13655  002E74  0100               	movlb	0	; () banked
 13656  002E76  5DB3               	subwf	PusherTest@i_1793& (0+255),w,b
 13657  002E78  0E0B               	movlw	11
 13658  002E7A  0100               	movlb	0	; () banked
 13659  002E7C  59B4               	subwfb	(PusherTest@i_1793+1)& (0+255),w,b
 13660  002E7E  B0D8               	btfsc	status,0,c
 13661  002E80  D00D               	goto	l1319
 13662  002E82                     l1317:
 13663                           
 13664                           ; BSR set to: 0
 13665                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13666  002E82  8889               	bsf	3977,4,c	;volatile
 13667                           
 13668                           ; BSR set to: 0
 13669                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13670  002E84  0E9A               	movlw	154
 13671  002E86                     u9767:
 13672  002E86  2EE8               	decfsz	wreg,f,c
 13673  002E88  D7FE               	bra	u9767
 13674  002E8A  D000               	nop2	
 13675                           
 13676                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13677  002E8C  9889               	bcf	3977,4,c	;volatile
 13678                           
 13679                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13680  002E8E  0E70               	movlw	112
 13681  002E90                     u9777:
 13682  002E90  2EE8               	decfsz	wreg,f,c
 13683  002E92  D7FE               	bra	u9777
 13684  002E94  0100               	movlb	0	; () banked
 13685  002E96  4BB3               	infsnz	PusherTest@i_1793& (0+255),f,b
 13686  002E98  2BB4               	incf	(PusherTest@i_1793+1)& (0+255),f,b
 13687  002E9A  D7E8               	goto	l8192
 13688  002E9C                     l1319:
 13689  002E9C  A281               	btfss	3969,1,c	;volatile
 13690  002E9E  D7B3               	goto	l8166
 13691  002EA0  D7FD               	goto	l1319
 13692  002EA2                     l1310:
 13693                           
 13694                           ;Test.c: 519: }
 13695                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13696  002EA2  9A8B               	bcf	3979,5,c	;volatile
 13697  002EA4  0012               	return		;funcret
 13698  002EA6                     __end_of_PusherTest:
 13699                           	opt stack 0
 13700                           tblptru	equ	0xFF8
 13701                           tblptrh	equ	0xFF7
 13702                           tblptrl	equ	0xFF6
 13703                           tablat	equ	0xFF5
 13704                           prodh	equ	0xFF4
 13705                           prodl	equ	0xFF3
 13706                           intcon	equ	0xFF2
 13707                           intcon2	equ	0xFF1
 13708                           intcon3	equ	0xFF0
 13709                           postinc0	equ	0xFEE
 13710                           wreg	equ	0xFE8
 13711                           postdec1	equ	0xFE5
 13712                           fsr1l	equ	0xFE1
 13713                           indf2	equ	0xFDF
 13714                           postinc2	equ	0xFDE
 13715                           postdec2	equ	0xFDD
 13716                           fsr2h	equ	0xFDA
 13717                           fsr2l	equ	0xFD9
 13718                           status	equ	0xFD8
 13719                           
 13720 ;; *************** function _readADC *****************
 13721 ;; Defined at:
 13722 ;;		line 15 in file "ADCFunctionality.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;  channel         1    wreg     unsigned char 
 13725 ;; Auto vars:     Size  Location     Type
 13726 ;;  channel         1    1[BANK0 ] unsigned char 
 13727 ;; Return value:  Size  Location     Type
 13728 ;;                  1    wreg      void 
 13729 ;; Registers used:
 13730 ;;		wreg, status,2, status,0, cstack
 13731 ;; Tracked objects:
 13732 ;;		On entry : 0/0
 13733 ;;		On exit  : 0/0
 13734 ;;		Unchanged: 0/0
 13735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;Total ram usage:        2 bytes
 13741 ;; Hardware stack levels used:    1
 13742 ;; Hardware stack levels required when called:    7
 13743 ;; This function calls:
 13744 ;;		Nothing
 13745 ;; This function is called by:
 13746 ;;		_readIR
 13747 ;;		_readMAG
 13748 ;;		_sensorTest
 13749 ;;		_PusherTest
 13750 ;; This function uses a non-reentrant model
 13751 ;;
 13752                           
 13753                           	psect	text43
 13754  0050A6                     __ptext43:
 13755                           	opt stack 0
 13756  0050A6                     _readADC:
 13757                           	opt stack 20
 13758                           
 13759                           ;incstack = 0
 13760                           ;readADC@channel stored from wreg
 13761  0050A6  0100               	movlb	0	; () banked
 13762  0050A8  6F81               	movwf	readADC@channel& (0+255),b
 13763                           
 13764                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13765  0050AA  0100               	movlb	0	; () banked
 13766  0050AC  4581               	rlncf	readADC@channel& (0+255),w,b
 13767  0050AE  46E8               	rlncf	wreg,f,c
 13768  0050B0  0BFC               	andlw	252
 13769  0050B2  6EC2               	movwf	4034,c	;volatile
 13770                           
 13771                           ; BSR set to: 0
 13772                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13773  0050B4  80C2               	bsf	4034,0,c	;volatile
 13774                           
 13775                           ; BSR set to: 0
 13776                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13777  0050B6  82C2               	bsf	4034,1,c	;volatile
 13778                           
 13779                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13780  0050B8  D009               	goto	l6044
 13781  0050BA                     l6042:
 13782  0050BA  0E34               	movlw	52
 13783  0050BC  0100               	movlb	0	; () banked
 13784  0050BE  6F80               	movwf	??_readADC& (0+255),b
 13785  0050C0  0EF1               	movlw	241
 13786  0050C2                     u9787:
 13787  0050C2  2EE8               	decfsz	wreg,f,c
 13788  0050C4  D7FE               	bra	u9787
 13789  0050C6  2F80               	decfsz	??_readADC& (0+255),f,b
 13790  0050C8  D7FC               	bra	u9787
 13791  0050CA  D000               	nop2	
 13792  0050CC                     l6044:
 13793  0050CC  A2C2               	btfss	4034,1,c	;volatile
 13794  0050CE  0012               	return	
 13795  0050D0  D7F4               	goto	l6042
 13796  0050D2                     __end_of_readADC:
 13797                           	opt stack 0
 13798                           tblptru	equ	0xFF8
 13799                           tblptrh	equ	0xFF7
 13800                           tblptrl	equ	0xFF6
 13801                           tablat	equ	0xFF5
 13802                           prodh	equ	0xFF4
 13803                           prodl	equ	0xFF3
 13804                           intcon	equ	0xFF2
 13805                           intcon2	equ	0xFF1
 13806                           intcon3	equ	0xFF0
 13807                           postinc0	equ	0xFEE
 13808                           wreg	equ	0xFE8
 13809                           postdec1	equ	0xFE5
 13810                           fsr1l	equ	0xFE1
 13811                           indf2	equ	0xFDF
 13812                           postinc2	equ	0xFDE
 13813                           postdec2	equ	0xFDD
 13814                           fsr2h	equ	0xFDA
 13815                           fsr2l	equ	0xFD9
 13816                           status	equ	0xFD8
 13817                           
 13818 ;; *************** function _PortTests *****************
 13819 ;; Defined at:
 13820 ;;		line 409 in file "Test.c"
 13821 ;; Parameters:    Size  Location     Type
 13822 ;;		None
 13823 ;; Auto vars:     Size  Location     Type
 13824 ;;		None
 13825 ;; Return value:  Size  Location     Type
 13826 ;;                  1    wreg      void 
 13827 ;; Registers used:
 13828 ;;		wreg, status,2, status,0
 13829 ;; Tracked objects:
 13830 ;;		On entry : 0/0
 13831 ;;		On exit  : 0/0
 13832 ;;		Unchanged: 0/0
 13833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13837 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13838 ;;Total ram usage:        2 bytes
 13839 ;; Hardware stack levels used:    1
 13840 ;; Hardware stack levels required when called:    7
 13841 ;; This function calls:
 13842 ;;		Nothing
 13843 ;; This function is called by:
 13844 ;;		_Test
 13845 ;; This function uses a non-reentrant model
 13846 ;;
 13847                           
 13848                           	psect	text44
 13849  00465C                     __ptext44:
 13850                           	opt stack 0
 13851  00465C                     _PortTests:
 13852                           	opt stack 22
 13853  00465C                     l1268:
 13854  00465C  A281               	btfss	3969,1,c	;volatile
 13855  00465E  D7FE               	goto	l1268
 13856                           
 13857                           ;Test.c: 413: var = PORTB >> 4;
 13858  004660  CF81 F080          	movff	3969,??_PortTests	;volatile
 13859  004664  0100               	movlb	0	; () banked
 13860  004666  3B80               	swapf	??_PortTests& (0+255),f,b
 13861  004668  0E0F               	movlw	15
 13862  00466A  1780               	andwf	??_PortTests& (0+255),f,b
 13863  00466C  0100               	movlb	0	; () banked
 13864  00466E  5180               	movf	??_PortTests& (0+255),w,b
 13865  004670  0100               	movlb	0	; () banked
 13866  004672  6FFA               	movwf	_var& (0+255),b
 13867  004674  6BFB               	clrf	(_var+1)& (0+255),b
 13868                           
 13869                           ;Test.c: 414: switch(var){
 13870  004676  D00C               	goto	l8206
 13871  004678                     l1272:
 13872                           
 13873                           ; BSR set to: 0
 13874                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13875  004678  808D               	bsf	3981,0,c	;volatile
 13876                           
 13877                           ;Test.c: 417: break;
 13878  00467A  D027               	goto	l1280
 13879  00467C                     l1274:
 13880                           
 13881                           ; BSR set to: 0
 13882                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13883  00467C  828D               	bsf	3981,1,c	;volatile
 13884                           
 13885                           ;Test.c: 420: break;
 13886  00467E  D025               	goto	l1280
 13887  004680                     l1275:
 13888                           
 13889                           ; BSR set to: 0
 13890                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13891  004680  808C               	bsf	3980,0,c	;volatile
 13892                           
 13893                           ;Test.c: 423: break;
 13894  004682  D023               	goto	l1280
 13895  004684                     l1276:
 13896                           
 13897                           ; BSR set to: 0
 13898                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13899  004684  8689               	bsf	3977,3,c	;volatile
 13900                           
 13901                           ;Test.c: 426: break;
 13902  004686  D021               	goto	l1280
 13903  004688                     l1277:
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13907  004688  8889               	bsf	3977,4,c	;volatile
 13908                           
 13909                           ;Test.c: 429: break;
 13910  00468A  D01F               	goto	l1280
 13911  00468C                     l1278:
 13912                           
 13913                           ; BSR set to: 0
 13914                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13915  00468C  8A89               	bsf	3977,5,c	;volatile
 13916                           
 13917                           ; BSR set to: 0
 13918                           ;Test.c: 435: }
 13919                           
 13920                           ; BSR set to: 0
 13921                           ;Test.c: 434: break;
 13922                           
 13923                           ;Test.c: 433: default:
 13924                           
 13925                           ;Test.c: 432: break;
 13926  00468E  D01D               	goto	l1280
 13927  004690                     l8206:
 13928                           
 13929                           ; BSR set to: 0
 13930  004690  C0FA  F080         	movff	_var,??_PortTests
 13931  004694  C0FB  F081         	movff	_var+1,??_PortTests+1
 13932                           
 13933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13934                           ; Switch size 1, requested type "space"
 13935                           ; Number of cases is 1, Range of values is 0 to 0
 13936                           ; switch strategies available:
 13937                           ; Name         Instructions Cycles
 13938                           ; simple_byte            4     3 (average)
 13939                           ;	Chosen strategy is simple_byte
 13940  004698  0100               	movlb	0	; () banked
 13941  00469A  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13942  00469C  0A00               	xorlw	0	; case 0
 13943  00469E  A4D8               	btfss	status,2,c
 13944  0046A0  D014               	goto	l1280
 13945                           
 13946                           ; BSR set to: 0
 13947                           ; Switch size 1, requested type "space"
 13948                           ; Number of cases is 6, Range of values is 0 to 5
 13949                           ; switch strategies available:
 13950                           ; Name         Instructions Cycles
 13951                           ; simple_byte           19    10 (average)
 13952                           ;	Chosen strategy is simple_byte
 13953  0046A2  0100               	movlb	0	; () banked
 13954  0046A4  5180               	movf	??_PortTests& (0+255),w,b
 13955  0046A6  0A00               	xorlw	0	; case 0
 13956  0046A8  B4D8               	btfsc	status,2,c
 13957  0046AA  D7E6               	goto	l1272
 13958  0046AC  0A01               	xorlw	1	; case 1
 13959  0046AE  B4D8               	btfsc	status,2,c
 13960  0046B0  D7E5               	goto	l1274
 13961  0046B2  0A03               	xorlw	3	; case 2
 13962  0046B4  B4D8               	btfsc	status,2,c
 13963  0046B6  D7E4               	goto	l1275
 13964  0046B8  0A01               	xorlw	1	; case 3
 13965  0046BA  B4D8               	btfsc	status,2,c
 13966  0046BC  D7E3               	goto	l1276
 13967  0046BE  0A07               	xorlw	7	; case 4
 13968  0046C0  B4D8               	btfsc	status,2,c
 13969  0046C2  D7E2               	goto	l1277
 13970  0046C4  0A01               	xorlw	1	; case 5
 13971  0046C6  B4D8               	btfsc	status,2,c
 13972  0046C8  D7E1               	goto	l1278
 13973  0046CA                     l1280:
 13974  0046CA  B281               	btfsc	3969,1,c	;volatile
 13975  0046CC  D7FE               	goto	l1280
 13976                           
 13977                           ;Test.c: 437: __nop();
 13978  0046CE  F000               	nop	
 13979                           
 13980                           ;Test.c: 438: __nop();
 13981  0046D0  F000               	nop	
 13982                           
 13983                           ;Test.c: 439: LATA = 0x00;
 13984  0046D2  0E00               	movlw	0
 13985  0046D4  6E89               	movwf	3977,c	;volatile
 13986                           
 13987                           ;Test.c: 440: LATE = 0x00;
 13988  0046D6  0E00               	movlw	0
 13989  0046D8  6E8D               	movwf	3981,c	;volatile
 13990                           
 13991                           ;Test.c: 441: LATD = 0x00; }
 13992  0046DA  0E00               	movlw	0
 13993  0046DC  6E8C               	movwf	3980,c	;volatile
 13994  0046DE  D7BE               	goto	l1268
 13995  0046E0                     __end_of_PortTests:
 13996                           	opt stack 0
 13997                           tblptru	equ	0xFF8
 13998                           tblptrh	equ	0xFF7
 13999                           tblptrl	equ	0xFF6
 14000                           tablat	equ	0xFF5
 14001                           prodh	equ	0xFF4
 14002                           prodl	equ	0xFF3
 14003                           intcon	equ	0xFF2
 14004                           intcon2	equ	0xFF1
 14005                           intcon3	equ	0xFF0
 14006                           postinc0	equ	0xFEE
 14007                           wreg	equ	0xFE8
 14008                           postdec1	equ	0xFE5
 14009                           fsr1l	equ	0xFE1
 14010                           indf2	equ	0xFDF
 14011                           postinc2	equ	0xFDE
 14012                           postdec2	equ	0xFDD
 14013                           fsr2h	equ	0xFDA
 14014                           fsr2l	equ	0xFD9
 14015                           status	equ	0xFD8
 14016                           
 14017 ;; *************** function _PortTestA5 *****************
 14018 ;; Defined at:
 14019 ;;		line 444 in file "Test.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;		None
 14022 ;; Auto vars:     Size  Location     Type
 14023 ;;		None
 14024 ;; Return value:  Size  Location     Type
 14025 ;;                  1    wreg      void 
 14026 ;; Registers used:
 14027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14028 ;; Tracked objects:
 14029 ;;		On entry : 0/0
 14030 ;;		On exit  : 0/0
 14031 ;;		Unchanged: 0/0
 14032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14037 ;;Total ram usage:        1 bytes
 14038 ;; Hardware stack levels used:    1
 14039 ;; Hardware stack levels required when called:   10
 14040 ;; This function calls:
 14041 ;;		_lcdInst
 14042 ;;		_printf
 14043 ;; This function is called by:
 14044 ;;		_Test
 14045 ;; This function uses a non-reentrant model
 14046 ;;
 14047                           
 14048                           	psect	text45
 14049  004A32                     __ptext45:
 14050                           	opt stack 0
 14051  004A32                     _PortTestA5:
 14052                           	opt stack 19
 14053                           
 14054                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14055                           
 14056                           ;incstack = 0
 14057  004A32  0E01               	movlw	1
 14058  004A34  EC5C  F029         	call	_lcdInst
 14059  004A38  0E68               	movlw	104
 14060  004A3A  0100               	movlb	0	; () banked
 14061  004A3C  6FAB               	movwf	??_PortTestA5& (0+255),b
 14062  004A3E  0EE4               	movlw	228
 14063  004A40                     u9797:
 14064  004A40  2EE8               	decfsz	wreg,f,c
 14065  004A42  D7FE               	bra	u9797
 14066  004A44  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14067  004A46  D7FC               	bra	u9797
 14068  004A48  F000               	nop	
 14069  004A4A  0E80               	movlw	128
 14070  004A4C  EC5C  F029         	call	_lcdInst
 14071                           
 14072                           ;Test.c: 446: printf("D WILL RETURN    ");
 14073  004A50  0E33               	movlw	low STR_112
 14074  004A52  0100               	movlb	0	; () banked
 14075  004A54  6F8E               	movwf	printf@f& (0+255),b
 14076  004A56  0EFB               	movlw	high STR_112
 14077  004A58  0100               	movlb	0	; () banked
 14078  004A5A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14079  004A5C  EC02  F00B         	call	_printf	;wreg free
 14080                           
 14081                           ;Test.c: 447: lcdInst(0b11000000);;
 14082  004A60  0EC0               	movlw	192
 14083  004A62  EC5C  F029         	call	_lcdInst
 14084                           
 14085                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14086  004A66  0E45               	movlw	low STR_113
 14087  004A68  0100               	movlb	0	; () banked
 14088  004A6A  6F8E               	movwf	printf@f& (0+255),b
 14089  004A6C  0EFB               	movlw	high STR_113
 14090  004A6E  0100               	movlb	0	; () banked
 14091  004A70  6F8F               	movwf	(printf@f+1)& (0+255),b
 14092  004A72  EC02  F00B         	call	_printf	;wreg free
 14093  004A76                     l1289:
 14094  004A76  A281               	btfss	3969,1,c	;volatile
 14095  004A78  D7FE               	goto	l1289
 14096                           
 14097                           ;Test.c: 453: }
 14098                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14099  004A7A  3881               	swapf	3969,w,c	;volatile
 14100  004A7C  0B0F               	andlw	15
 14101  004A7E  0A0F               	xorlw	15
 14102  004A80  B4D8               	btfsc	status,2,c
 14103  004A82  0012               	return	
 14104                           
 14105                           ;Test.c: 457: else{
 14106                           ;Test.c: 458: LATBbits.LATB2 = 1;
 14107                           
 14108                           ;Test.c: 456: }
 14109                           
 14110                           ;Test.c: 455: break;
 14111  004A84  848A               	bsf	3978,2,c	;volatile
 14112  004A86                     l1295:
 14113  004A86  B281               	btfsc	3969,1,c	;volatile
 14114  004A88  D7FE               	goto	l1295
 14115                           
 14116                           ;Test.c: 461: }
 14117                           ;Test.c: 462: LATBbits.LATB2 = 0;
 14118  004A8A  948A               	bcf	3978,2,c	;volatile
 14119  004A8C  D7F4               	goto	l1289
 14120  004A8E                     __end_of_PortTestA5:
 14121                           	opt stack 0
 14122                           tblptru	equ	0xFF8
 14123                           tblptrh	equ	0xFF7
 14124                           tblptrl	equ	0xFF6
 14125                           tablat	equ	0xFF5
 14126                           prodh	equ	0xFF4
 14127                           prodl	equ	0xFF3
 14128                           intcon	equ	0xFF2
 14129                           intcon2	equ	0xFF1
 14130                           intcon3	equ	0xFF0
 14131                           postinc0	equ	0xFEE
 14132                           wreg	equ	0xFE8
 14133                           postdec1	equ	0xFE5
 14134                           fsr1l	equ	0xFE1
 14135                           indf2	equ	0xFDF
 14136                           postinc2	equ	0xFDE
 14137                           postdec2	equ	0xFDD
 14138                           fsr2h	equ	0xFDA
 14139                           fsr2l	equ	0xFD9
 14140                           status	equ	0xFD8
 14141                           
 14142 ;; *************** function _EEPROMTest *****************
 14143 ;; Defined at:
 14144 ;;		line 577 in file "Test.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;		None
 14147 ;; Auto vars:     Size  Location     Type
 14148 ;;		None
 14149 ;; Return value:  Size  Location     Type
 14150 ;;                  1    wreg      void 
 14151 ;; Registers used:
 14152 ;;		None
 14153 ;; Tracked objects:
 14154 ;;		On entry : 0/0
 14155 ;;		On exit  : 0/0
 14156 ;;		Unchanged: 0/0
 14157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14162 ;;Total ram usage:        0 bytes
 14163 ;; Hardware stack levels used:    1
 14164 ;; Hardware stack levels required when called:    7
 14165 ;; This function calls:
 14166 ;;		Nothing
 14167 ;; This function is called by:
 14168 ;;		_Test
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           	psect	text46
 14173  00531C                     __ptext46:
 14174                           	opt stack 0
 14175  00531C                     _EEPROMTest:
 14176                           	opt stack 22
 14177                           
 14178                           ;incstack = 0
 14179  00531C  0012               	return		;funcret
 14180  00531E                     __end_of_EEPROMTest:
 14181                           	opt stack 0
 14182                           tblptru	equ	0xFF8
 14183                           tblptrh	equ	0xFF7
 14184                           tblptrl	equ	0xFF6
 14185                           tablat	equ	0xFF5
 14186                           prodh	equ	0xFF4
 14187                           prodl	equ	0xFF3
 14188                           intcon	equ	0xFF2
 14189                           intcon2	equ	0xFF1
 14190                           intcon3	equ	0xFF0
 14191                           postinc0	equ	0xFEE
 14192                           wreg	equ	0xFE8
 14193                           postdec1	equ	0xFE5
 14194                           fsr1l	equ	0xFE1
 14195                           indf2	equ	0xFDF
 14196                           postinc2	equ	0xFDE
 14197                           postdec2	equ	0xFDD
 14198                           fsr2h	equ	0xFDA
 14199                           fsr2l	equ	0xFD9
 14200                           status	equ	0xFD8
 14201                           
 14202 ;; *************** function _BothServos *****************
 14203 ;; Defined at:
 14204 ;;		line 352 in file "Test.c"
 14205 ;; Parameters:    Size  Location     Type
 14206 ;;		None
 14207 ;; Auto vars:     Size  Location     Type
 14208 ;;		None
 14209 ;; Return value:  Size  Location     Type
 14210 ;;                  1    wreg      void 
 14211 ;; Registers used:
 14212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14213 ;; Tracked objects:
 14214 ;;		On entry : 0/0
 14215 ;;		On exit  : 0/0
 14216 ;;		Unchanged: 0/0
 14217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14222 ;;Total ram usage:        2 bytes
 14223 ;; Hardware stack levels used:    1
 14224 ;; Hardware stack levels required when called:   10
 14225 ;; This function calls:
 14226 ;;		_initServos
 14227 ;;		_lcdInst
 14228 ;;		_printf
 14229 ;;		_updateServoPosition
 14230 ;; This function is called by:
 14231 ;;		_Test
 14232 ;; This function uses a non-reentrant model
 14233 ;;
 14234                           
 14235                           	psect	text47
 14236  001A3C                     __ptext47:
 14237                           	opt stack 0
 14238  001A3C                     _BothServos:
 14239                           	opt stack 19
 14240                           
 14241                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14242                           
 14243                           ;incstack = 0
 14244  001A3C  0E01               	movlw	1
 14245  001A3E  EC5C  F029         	call	_lcdInst
 14246  001A42  0E68               	movlw	104
 14247  001A44  0100               	movlb	0	; () banked
 14248  001A46  6FAB               	movwf	??_BothServos& (0+255),b
 14249  001A48  0EE4               	movlw	228
 14250  001A4A                     u9807:
 14251  001A4A  2EE8               	decfsz	wreg,f,c
 14252  001A4C  D7FE               	bra	u9807
 14253  001A4E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14254  001A50  D7FC               	bra	u9807
 14255  001A52  F000               	nop	
 14256  001A54  0E80               	movlw	128
 14257  001A56  EC5C  F029         	call	_lcdInst
 14258                           
 14259                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14260  001A5A  0EB0               	movlw	low STR_111
 14261  001A5C  0100               	movlb	0	; () banked
 14262  001A5E  6F8E               	movwf	printf@f& (0+255),b
 14263  001A60  0EFC               	movlw	high STR_111
 14264  001A62  0100               	movlb	0	; () banked
 14265  001A64  6F8F               	movwf	(printf@f+1)& (0+255),b
 14266  001A66  EC02  F00B         	call	_printf	;wreg free
 14267                           
 14268                           ;Test.c: 355: TMR1ON = 1;
 14269  001A6A  80CD               	bsf	4045,0,c	;volatile
 14270                           
 14271                           ;Test.c: 356: TMR3ON = 1;
 14272  001A6C  80B1               	bsf	4017,0,c	;volatile
 14273                           
 14274                           ;Test.c: 357: machine_state = Sorting_state;
 14275  001A6E  0E01               	movlw	1
 14276  001A70  0100               	movlb	0	; () banked
 14277  001A72  6FFC               	movwf	_machine_state& (0+255),b
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;Test.c: 358: was_low_1 = 0;
 14281  001A74  0E00               	movlw	0
 14282  001A76  6E7A               	movwf	_was_low_1+1,c	;volatile
 14283  001A78  0E00               	movlw	0
 14284  001A7A  6E79               	movwf	_was_low_1,c	;volatile
 14285                           
 14286                           ; BSR set to: 0
 14287                           ;Test.c: 359: was_low_3 = 0;
 14288  001A7C  0E00               	movlw	0
 14289  001A7E  6E7C               	movwf	_was_low_3+1,c	;volatile
 14290  001A80  0E00               	movlw	0
 14291  001A82  6E7B               	movwf	_was_low_3,c	;volatile
 14292                           
 14293                           ; BSR set to: 0
 14294                           ;Test.c: 365: initServos();
 14295  001A84  EC47  F025         	call	_initServos	;wreg free
 14296                           
 14297                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14298  001A88  0E3D               	movlw	61
 14299  001A8A  0100               	movlb	0	; () banked
 14300  001A8C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14301  001A8E  0EE1               	movlw	225
 14302  001A90  0100               	movlb	0	; () banked
 14303  001A92  6FAB               	movwf	??_BothServos& (0+255),b
 14304  001A94  0E3F               	movlw	63
 14305  001A96                     u9817:
 14306  001A96  2EE8               	decfsz	wreg,f,c
 14307  001A98  D7FE               	bra	u9817
 14308  001A9A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14309  001A9C  D7FC               	bra	u9817
 14310  001A9E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14311  001AA0  D7FA               	bra	u9817
 14312  001AA2  D000               	nop2	
 14313                           
 14314                           ;Test.c: 368: updateServoPosition(500, 1);
 14315  001AA4  0E01               	movlw	1
 14316  001AA6  0100               	movlb	0	; () banked
 14317  001AA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14318  001AAA  0EF4               	movlw	244
 14319  001AAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14320  001AAE  0E00               	movlw	0
 14321  001AB0  0100               	movlb	0	; () banked
 14322  001AB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14323  001AB4  0E01               	movlw	1
 14324  001AB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14325  001AB8  ECA9  F022         	call	_updateServoPosition	;wreg free
 14326                           
 14327                           ;Test.c: 369: updateServoPosition(1050, 3);
 14328  001ABC  0E04               	movlw	4
 14329  001ABE  0100               	movlb	0	; () banked
 14330  001AC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14331  001AC2  0E1A               	movlw	26
 14332  001AC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14333  001AC6  0E00               	movlw	0
 14334  001AC8  0100               	movlb	0	; () banked
 14335  001ACA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14336  001ACC  0E03               	movlw	3
 14337  001ACE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14338  001AD0  ECA9  F022         	call	_updateServoPosition	;wreg free
 14339                           
 14340                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14341  001AD4  0E1F               	movlw	31
 14342  001AD6  0100               	movlb	0	; () banked
 14343  001AD8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14344  001ADA  0E71               	movlw	113
 14345  001ADC  0100               	movlb	0	; () banked
 14346  001ADE  6FAB               	movwf	??_BothServos& (0+255),b
 14347  001AE0  0E1E               	movlw	30
 14348  001AE2                     u9827:
 14349  001AE2  2EE8               	decfsz	wreg,f,c
 14350  001AE4  D7FE               	bra	u9827
 14351  001AE6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14352  001AE8  D7FC               	bra	u9827
 14353  001AEA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14354  001AEC  D7FA               	bra	u9827
 14355  001AEE  F000               	nop	
 14356                           
 14357                           ;Test.c: 371: updateServoPosition(1260, 3);
 14358  001AF0  0E04               	movlw	4
 14359  001AF2  0100               	movlb	0	; () banked
 14360  001AF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14361  001AF6  0EEC               	movlw	236
 14362  001AF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14363  001AFA  0E00               	movlw	0
 14364  001AFC  0100               	movlb	0	; () banked
 14365  001AFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14366  001B00  0E03               	movlw	3
 14367  001B02  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14368  001B04  ECA9  F022         	call	_updateServoPosition	;wreg free
 14369                           
 14370                           ;Test.c: 372: _delay((unsigned long)((700)*(32000000/4000.0)));
 14371  001B08  0E1D               	movlw	29
 14372  001B0A  0100               	movlb	0	; () banked
 14373  001B0C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14374  001B0E  0E69               	movlw	105
 14375  001B10  0100               	movlb	0	; () banked
 14376  001B12  6FAB               	movwf	??_BothServos& (0+255),b
 14377  001B14  0EA5               	movlw	165
 14378  001B16                     u9837:
 14379  001B16  2EE8               	decfsz	wreg,f,c
 14380  001B18  D7FE               	bra	u9837
 14381  001B1A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14382  001B1C  D7FC               	bra	u9837
 14383  001B1E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14384  001B20  D7FA               	bra	u9837
 14385                           
 14386                           ;Test.c: 373: updateServoPosition(1050, 3);
 14387  001B22  0E04               	movlw	4
 14388  001B24  0100               	movlb	0	; () banked
 14389  001B26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14390  001B28  0E1A               	movlw	26
 14391  001B2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14392  001B2C  0E00               	movlw	0
 14393  001B2E  0100               	movlb	0	; () banked
 14394  001B30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14395  001B32  0E03               	movlw	3
 14396  001B34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14397  001B36  ECA9  F022         	call	_updateServoPosition	;wreg free
 14398                           
 14399                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14400  001B3A  0E1F               	movlw	31
 14401  001B3C  0100               	movlb	0	; () banked
 14402  001B3E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14403  001B40  0E71               	movlw	113
 14404  001B42  0100               	movlb	0	; () banked
 14405  001B44  6FAB               	movwf	??_BothServos& (0+255),b
 14406  001B46  0E1E               	movlw	30
 14407  001B48                     u9847:
 14408  001B48  2EE8               	decfsz	wreg,f,c
 14409  001B4A  D7FE               	bra	u9847
 14410  001B4C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14411  001B4E  D7FC               	bra	u9847
 14412  001B50  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14413  001B52  D7FA               	bra	u9847
 14414  001B54  F000               	nop	
 14415                           
 14416                           ;Test.c: 376: updateServoPosition(850, 1);
 14417  001B56  0E03               	movlw	3
 14418  001B58  0100               	movlb	0	; () banked
 14419  001B5A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14420  001B5C  0E52               	movlw	82
 14421  001B5E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14422  001B60  0E00               	movlw	0
 14423  001B62  0100               	movlb	0	; () banked
 14424  001B64  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14425  001B66  0E01               	movlw	1
 14426  001B68  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14427  001B6A  ECA9  F022         	call	_updateServoPosition	;wreg free
 14428                           
 14429                           ;Test.c: 377: updateServoPosition(1050, 3);
 14430  001B6E  0E04               	movlw	4
 14431  001B70  0100               	movlb	0	; () banked
 14432  001B72  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14433  001B74  0E1A               	movlw	26
 14434  001B76  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14435  001B78  0E00               	movlw	0
 14436  001B7A  0100               	movlb	0	; () banked
 14437  001B7C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14438  001B7E  0E03               	movlw	3
 14439  001B80  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14440  001B82  ECA9  F022         	call	_updateServoPosition	;wreg free
 14441                           
 14442                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14443  001B86  0E1F               	movlw	31
 14444  001B88  0100               	movlb	0	; () banked
 14445  001B8A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14446  001B8C  0E71               	movlw	113
 14447  001B8E  0100               	movlb	0	; () banked
 14448  001B90  6FAB               	movwf	??_BothServos& (0+255),b
 14449  001B92  0E1E               	movlw	30
 14450  001B94                     u9857:
 14451  001B94  2EE8               	decfsz	wreg,f,c
 14452  001B96  D7FE               	bra	u9857
 14453  001B98  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14454  001B9A  D7FC               	bra	u9857
 14455  001B9C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14456  001B9E  D7FA               	bra	u9857
 14457  001BA0  F000               	nop	
 14458                           
 14459                           ;Test.c: 379: updateServoPosition(1260, 3);
 14460  001BA2  0E04               	movlw	4
 14461  001BA4  0100               	movlb	0	; () banked
 14462  001BA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14463  001BA8  0EEC               	movlw	236
 14464  001BAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14465  001BAC  0E00               	movlw	0
 14466  001BAE  0100               	movlb	0	; () banked
 14467  001BB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14468  001BB2  0E03               	movlw	3
 14469  001BB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14470  001BB6  ECA9  F022         	call	_updateServoPosition	;wreg free
 14471                           
 14472                           ;Test.c: 380: _delay((unsigned long)((700)*(32000000/4000.0)));
 14473  001BBA  0E1D               	movlw	29
 14474  001BBC  0100               	movlb	0	; () banked
 14475  001BBE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14476  001BC0  0E69               	movlw	105
 14477  001BC2  0100               	movlb	0	; () banked
 14478  001BC4  6FAB               	movwf	??_BothServos& (0+255),b
 14479  001BC6  0EA5               	movlw	165
 14480  001BC8                     u9867:
 14481  001BC8  2EE8               	decfsz	wreg,f,c
 14482  001BCA  D7FE               	bra	u9867
 14483  001BCC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14484  001BCE  D7FC               	bra	u9867
 14485  001BD0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14486  001BD2  D7FA               	bra	u9867
 14487                           
 14488                           ;Test.c: 381: updateServoPosition(1050, 3);
 14489  001BD4  0E04               	movlw	4
 14490  001BD6  0100               	movlb	0	; () banked
 14491  001BD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14492  001BDA  0E1A               	movlw	26
 14493  001BDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14494  001BDE  0E00               	movlw	0
 14495  001BE0  0100               	movlb	0	; () banked
 14496  001BE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14497  001BE4  0E03               	movlw	3
 14498  001BE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14499  001BE8  ECA9  F022         	call	_updateServoPosition	;wreg free
 14500                           
 14501                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14502  001BEC  0E1F               	movlw	31
 14503  001BEE  0100               	movlb	0	; () banked
 14504  001BF0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14505  001BF2  0E71               	movlw	113
 14506  001BF4  0100               	movlb	0	; () banked
 14507  001BF6  6FAB               	movwf	??_BothServos& (0+255),b
 14508  001BF8  0E1E               	movlw	30
 14509  001BFA                     u9877:
 14510  001BFA  2EE8               	decfsz	wreg,f,c
 14511  001BFC  D7FE               	bra	u9877
 14512  001BFE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14513  001C00  D7FC               	bra	u9877
 14514  001C02  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14515  001C04  D7FA               	bra	u9877
 14516  001C06  F000               	nop	
 14517                           
 14518                           ;Test.c: 384: updateServoPosition(1200, 1);
 14519  001C08  0E04               	movlw	4
 14520  001C0A  0100               	movlb	0	; () banked
 14521  001C0C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14522  001C0E  0EB0               	movlw	176
 14523  001C10  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14524  001C12  0E00               	movlw	0
 14525  001C14  0100               	movlb	0	; () banked
 14526  001C16  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14527  001C18  0E01               	movlw	1
 14528  001C1A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14529  001C1C  ECA9  F022         	call	_updateServoPosition	;wreg free
 14530                           
 14531                           ;Test.c: 385: updateServoPosition(1050, 3);
 14532  001C20  0E04               	movlw	4
 14533  001C22  0100               	movlb	0	; () banked
 14534  001C24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14535  001C26  0E1A               	movlw	26
 14536  001C28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14537  001C2A  0E00               	movlw	0
 14538  001C2C  0100               	movlb	0	; () banked
 14539  001C2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14540  001C30  0E03               	movlw	3
 14541  001C32  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14542  001C34  ECA9  F022         	call	_updateServoPosition	;wreg free
 14543                           
 14544                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14545  001C38  0E3D               	movlw	61
 14546  001C3A  0100               	movlb	0	; () banked
 14547  001C3C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14548  001C3E  0EE1               	movlw	225
 14549  001C40  0100               	movlb	0	; () banked
 14550  001C42  6FAB               	movwf	??_BothServos& (0+255),b
 14551  001C44  0E3F               	movlw	63
 14552  001C46                     u9887:
 14553  001C46  2EE8               	decfsz	wreg,f,c
 14554  001C48  D7FE               	bra	u9887
 14555  001C4A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14556  001C4C  D7FC               	bra	u9887
 14557  001C4E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14558  001C50  D7FA               	bra	u9887
 14559  001C52  D000               	nop2	
 14560                           
 14561                           ;Test.c: 388: updateServoPosition(1670, 1);
 14562  001C54  0E06               	movlw	6
 14563  001C56  0100               	movlb	0	; () banked
 14564  001C58  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14565  001C5A  0E86               	movlw	134
 14566  001C5C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14567  001C5E  0E00               	movlw	0
 14568  001C60  0100               	movlb	0	; () banked
 14569  001C62  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14570  001C64  0E01               	movlw	1
 14571  001C66  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14572  001C68  ECA9  F022         	call	_updateServoPosition	;wreg free
 14573                           
 14574                           ;Test.c: 389: updateServoPosition(1050, 3);
 14575  001C6C  0E04               	movlw	4
 14576  001C6E  0100               	movlb	0	; () banked
 14577  001C70  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14578  001C72  0E1A               	movlw	26
 14579  001C74  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14580  001C76  0E00               	movlw	0
 14581  001C78  0100               	movlb	0	; () banked
 14582  001C7A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14583  001C7C  0E03               	movlw	3
 14584  001C7E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14585  001C80  ECA9  F022         	call	_updateServoPosition	;wreg free
 14586                           
 14587                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14588  001C84  0E1F               	movlw	31
 14589  001C86  0100               	movlb	0	; () banked
 14590  001C88  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14591  001C8A  0E71               	movlw	113
 14592  001C8C  0100               	movlb	0	; () banked
 14593  001C8E  6FAB               	movwf	??_BothServos& (0+255),b
 14594  001C90  0E1E               	movlw	30
 14595  001C92                     u9897:
 14596  001C92  2EE8               	decfsz	wreg,f,c
 14597  001C94  D7FE               	bra	u9897
 14598  001C96  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14599  001C98  D7FC               	bra	u9897
 14600  001C9A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14601  001C9C  D7FA               	bra	u9897
 14602  001C9E  F000               	nop	
 14603                           
 14604                           ;Test.c: 391: updateServoPosition(1390, 3);
 14605  001CA0  0E05               	movlw	5
 14606  001CA2  0100               	movlb	0	; () banked
 14607  001CA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14608  001CA6  0E6E               	movlw	110
 14609  001CA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14610  001CAA  0E00               	movlw	0
 14611  001CAC  0100               	movlb	0	; () banked
 14612  001CAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14613  001CB0  0E03               	movlw	3
 14614  001CB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14615  001CB4  ECA9  F022         	call	_updateServoPosition	;wreg free
 14616                           
 14617                           ;Test.c: 392: _delay((unsigned long)((700)*(32000000/4000.0)));
 14618  001CB8  0E1D               	movlw	29
 14619  001CBA  0100               	movlb	0	; () banked
 14620  001CBC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14621  001CBE  0E69               	movlw	105
 14622  001CC0  0100               	movlb	0	; () banked
 14623  001CC2  6FAB               	movwf	??_BothServos& (0+255),b
 14624  001CC4  0EA5               	movlw	165
 14625  001CC6                     u9907:
 14626  001CC6  2EE8               	decfsz	wreg,f,c
 14627  001CC8  D7FE               	bra	u9907
 14628  001CCA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14629  001CCC  D7FC               	bra	u9907
 14630  001CCE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14631  001CD0  D7FA               	bra	u9907
 14632                           
 14633                           ;Test.c: 393: updateServoPosition(1050, 3);
 14634  001CD2  0E04               	movlw	4
 14635  001CD4  0100               	movlb	0	; () banked
 14636  001CD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14637  001CD8  0E1A               	movlw	26
 14638  001CDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14639  001CDC  0E00               	movlw	0
 14640  001CDE  0100               	movlb	0	; () banked
 14641  001CE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14642  001CE2  0E03               	movlw	3
 14643  001CE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14644  001CE6  ECA9  F022         	call	_updateServoPosition	;wreg free
 14645                           
 14646                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14647  001CEA  0E1F               	movlw	31
 14648  001CEC  0100               	movlb	0	; () banked
 14649  001CEE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14650  001CF0  0E71               	movlw	113
 14651  001CF2  0100               	movlb	0	; () banked
 14652  001CF4  6FAB               	movwf	??_BothServos& (0+255),b
 14653  001CF6  0E1E               	movlw	30
 14654  001CF8                     u9917:
 14655  001CF8  2EE8               	decfsz	wreg,f,c
 14656  001CFA  D7FE               	bra	u9917
 14657  001CFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14658  001CFE  D7FC               	bra	u9917
 14659  001D00  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14660  001D02  D7FA               	bra	u9917
 14661  001D04  F000               	nop	
 14662                           
 14663                           ;Test.c: 396: updateServoPosition(2400, 1);
 14664  001D06  0E09               	movlw	9
 14665  001D08  0100               	movlb	0	; () banked
 14666  001D0A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14667  001D0C  0E60               	movlw	96
 14668  001D0E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14669  001D10  0E00               	movlw	0
 14670  001D12  0100               	movlb	0	; () banked
 14671  001D14  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14672  001D16  0E01               	movlw	1
 14673  001D18  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14674  001D1A  ECA9  F022         	call	_updateServoPosition	;wreg free
 14675                           
 14676                           ;Test.c: 397: updateServoPosition(1050, 3);
 14677  001D1E  0E04               	movlw	4
 14678  001D20  0100               	movlb	0	; () banked
 14679  001D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14680  001D24  0E1A               	movlw	26
 14681  001D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14682  001D28  0E00               	movlw	0
 14683  001D2A  0100               	movlb	0	; () banked
 14684  001D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14685  001D2E  0E03               	movlw	3
 14686  001D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14687  001D32  ECA9  F022         	call	_updateServoPosition	;wreg free
 14688                           
 14689                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14690  001D36  0E1F               	movlw	31
 14691  001D38  0100               	movlb	0	; () banked
 14692  001D3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14693  001D3C  0E71               	movlw	113
 14694  001D3E  0100               	movlb	0	; () banked
 14695  001D40  6FAB               	movwf	??_BothServos& (0+255),b
 14696  001D42  0E1E               	movlw	30
 14697  001D44                     u9927:
 14698  001D44  2EE8               	decfsz	wreg,f,c
 14699  001D46  D7FE               	bra	u9927
 14700  001D48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14701  001D4A  D7FC               	bra	u9927
 14702  001D4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14703  001D4E  D7FA               	bra	u9927
 14704  001D50  F000               	nop	
 14705                           
 14706                           ;Test.c: 399: updateServoPosition(1390, 3);
 14707  001D52  0E05               	movlw	5
 14708  001D54  0100               	movlb	0	; () banked
 14709  001D56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14710  001D58  0E6E               	movlw	110
 14711  001D5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14712  001D5C  0E00               	movlw	0
 14713  001D5E  0100               	movlb	0	; () banked
 14714  001D60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14715  001D62  0E03               	movlw	3
 14716  001D64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14717  001D66  ECA9  F022         	call	_updateServoPosition	;wreg free
 14718                           
 14719                           ;Test.c: 400: _delay((unsigned long)((700)*(32000000/4000.0)));
 14720  001D6A  0E1D               	movlw	29
 14721  001D6C  0100               	movlb	0	; () banked
 14722  001D6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14723  001D70  0E69               	movlw	105
 14724  001D72  0100               	movlb	0	; () banked
 14725  001D74  6FAB               	movwf	??_BothServos& (0+255),b
 14726  001D76  0EA5               	movlw	165
 14727  001D78                     u9937:
 14728  001D78  2EE8               	decfsz	wreg,f,c
 14729  001D7A  D7FE               	bra	u9937
 14730  001D7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14731  001D7E  D7FC               	bra	u9937
 14732  001D80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14733  001D82  D7FA               	bra	u9937
 14734                           
 14735                           ;Test.c: 401: updateServoPosition(1050, 3);
 14736  001D84  0E04               	movlw	4
 14737  001D86  0100               	movlb	0	; () banked
 14738  001D88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14739  001D8A  0E1A               	movlw	26
 14740  001D8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14741  001D8E  0E00               	movlw	0
 14742  001D90  0100               	movlb	0	; () banked
 14743  001D92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14744  001D94  0E03               	movlw	3
 14745  001D96  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14746  001D98  ECA9  F022         	call	_updateServoPosition	;wreg free
 14747                           
 14748                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14749  001D9C  0E1F               	movlw	31
 14750  001D9E  0100               	movlb	0	; () banked
 14751  001DA0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14752  001DA2  0E71               	movlw	113
 14753  001DA4  0100               	movlb	0	; () banked
 14754  001DA6  6FAB               	movwf	??_BothServos& (0+255),b
 14755  001DA8  0E1E               	movlw	30
 14756  001DAA                     u9947:
 14757  001DAA  2EE8               	decfsz	wreg,f,c
 14758  001DAC  D7FE               	bra	u9947
 14759  001DAE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14760  001DB0  D7FC               	bra	u9947
 14761  001DB2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14762  001DB4  D7FA               	bra	u9947
 14763  001DB6  F000               	nop	
 14764                           
 14765                           ;Test.c: 404: TMR1ON = 0;
 14766  001DB8  90CD               	bcf	4045,0,c	;volatile
 14767                           
 14768                           ;Test.c: 405: TMR3ON = 0;
 14769  001DBA  90B1               	bcf	4017,0,c	;volatile
 14770                           
 14771                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14772  001DBC  9EF2               	bcf	intcon,7,c	;volatile
 14773  001DBE  0012               	return		;funcret
 14774  001DC0                     __end_of_BothServos:
 14775                           	opt stack 0
 14776                           tblptru	equ	0xFF8
 14777                           tblptrh	equ	0xFF7
 14778                           tblptrl	equ	0xFF6
 14779                           tablat	equ	0xFF5
 14780                           prodh	equ	0xFF4
 14781                           prodl	equ	0xFF3
 14782                           intcon	equ	0xFF2
 14783                           intcon2	equ	0xFF1
 14784                           intcon3	equ	0xFF0
 14785                           postinc0	equ	0xFEE
 14786                           wreg	equ	0xFE8
 14787                           postdec1	equ	0xFE5
 14788                           fsr1l	equ	0xFE1
 14789                           indf2	equ	0xFDF
 14790                           postinc2	equ	0xFDE
 14791                           postdec2	equ	0xFDD
 14792                           fsr2h	equ	0xFDA
 14793                           fsr2l	equ	0xFD9
 14794                           status	equ	0xFD8
 14795                           
 14796 ;; *************** function _initServos *****************
 14797 ;; Defined at:
 14798 ;;		line 412 in file "sort.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;		None
 14801 ;; Auto vars:     Size  Location     Type
 14802 ;;		None
 14803 ;; Return value:  Size  Location     Type
 14804 ;;                  1    wreg      void 
 14805 ;; Registers used:
 14806 ;;		wreg, status,2, status,0, cstack
 14807 ;; Tracked objects:
 14808 ;;		On entry : 0/0
 14809 ;;		On exit  : 0/0
 14810 ;;		Unchanged: 0/0
 14811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14814 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14815 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14816 ;;Total ram usage:        1 bytes
 14817 ;; Hardware stack levels used:    1
 14818 ;; Hardware stack levels required when called:    8
 14819 ;; This function calls:
 14820 ;;		_updateServoPosition
 14821 ;; This function is called by:
 14822 ;;		_Loading
 14823 ;;		_BothServos
 14824 ;; This function uses a non-reentrant model
 14825 ;;
 14826                           
 14827                           	psect	text48
 14828  004A8E                     __ptext48:
 14829                           	opt stack 0
 14830  004A8E                     _initServos:
 14831                           	opt stack 20
 14832                           
 14833                           ;sort.c: 413: updateServoPosition(1200, 1);
 14834                           
 14835                           ;incstack = 0
 14836  004A8E  0E04               	movlw	4
 14837  004A90  0100               	movlb	0	; () banked
 14838  004A92  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14839  004A94  0EB0               	movlw	176
 14840  004A96  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14841  004A98  0E00               	movlw	0
 14842  004A9A  0100               	movlb	0	; () banked
 14843  004A9C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14844  004A9E  0E01               	movlw	1
 14845  004AA0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14846  004AA2  ECA9  F022         	call	_updateServoPosition	;wreg free
 14847                           
 14848                           ;sort.c: 414: updateServoPosition(1050, 3);
 14849  004AA6  0E04               	movlw	4
 14850  004AA8  0100               	movlb	0	; () banked
 14851  004AAA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14852  004AAC  0E1A               	movlw	26
 14853  004AAE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14854  004AB0  0E00               	movlw	0
 14855  004AB2  0100               	movlb	0	; () banked
 14856  004AB4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14857  004AB6  0E03               	movlw	3
 14858  004AB8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14859  004ABA  ECA9  F022         	call	_updateServoPosition	;wreg free
 14860                           
 14861                           ;sort.c: 415: TMR1ON = 1;
 14862  004ABE  80CD               	bsf	4045,0,c	;volatile
 14863                           
 14864                           ;sort.c: 416: was_low_1 = 0;
 14865  004AC0  0E00               	movlw	0
 14866  004AC2  6E7A               	movwf	_was_low_1+1,c	;volatile
 14867  004AC4  0E00               	movlw	0
 14868  004AC6  6E79               	movwf	_was_low_1,c	;volatile
 14869                           
 14870                           ;sort.c: 417: _delay((unsigned long)((5)*(32000000/4000.0)));
 14871  004AC8  0E34               	movlw	52
 14872  004ACA  0100               	movlb	0	; () banked
 14873  004ACC  6F88               	movwf	??_initServos& (0+255),b
 14874  004ACE  0EF1               	movlw	241
 14875  004AD0                     u9957:
 14876  004AD0  2EE8               	decfsz	wreg,f,c
 14877  004AD2  D7FE               	bra	u9957
 14878  004AD4  2F88               	decfsz	??_initServos& (0+255),f,b
 14879  004AD6  D7FC               	bra	u9957
 14880  004AD8  D000               	nop2	
 14881                           
 14882                           ;sort.c: 418: TMR3ON = 1;
 14883  004ADA  80B1               	bsf	4017,0,c	;volatile
 14884                           
 14885                           ;sort.c: 419: was_low_3 = 0;
 14886  004ADC  0E00               	movlw	0
 14887  004ADE  6E7C               	movwf	_was_low_3+1,c	;volatile
 14888  004AE0  0E00               	movlw	0
 14889  004AE2  6E7B               	movwf	_was_low_3,c	;volatile
 14890                           
 14891                           ;sort.c: 421: LATCbits.LATC0 = 1;
 14892  004AE4  808B               	bsf	3979,0,c	;volatile
 14893  004AE6  0012               	return		;funcret
 14894  004AE8                     __end_of_initServos:
 14895                           	opt stack 0
 14896                           tblptru	equ	0xFF8
 14897                           tblptrh	equ	0xFF7
 14898                           tblptrl	equ	0xFF6
 14899                           tablat	equ	0xFF5
 14900                           prodh	equ	0xFF4
 14901                           prodl	equ	0xFF3
 14902                           intcon	equ	0xFF2
 14903                           intcon2	equ	0xFF1
 14904                           intcon3	equ	0xFF0
 14905                           postinc0	equ	0xFEE
 14906                           wreg	equ	0xFE8
 14907                           postdec1	equ	0xFE5
 14908                           fsr1l	equ	0xFE1
 14909                           indf2	equ	0xFDF
 14910                           postinc2	equ	0xFDE
 14911                           postdec2	equ	0xFDD
 14912                           fsr2h	equ	0xFDA
 14913                           fsr2l	equ	0xFD9
 14914                           status	equ	0xFD8
 14915                           
 14916 ;; *************** function _updateServoPosition *****************
 14917 ;; Defined at:
 14918 ;;		line 489 in file "sort.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;  time_us         2    0[BANK0 ] int 
 14921 ;;  timer           2    2[BANK0 ] int 
 14922 ;; Auto vars:     Size  Location     Type
 14923 ;;  my_time         2    6[BANK0 ] unsigned int 
 14924 ;; Return value:  Size  Location     Type
 14925 ;;                  1    wreg      void 
 14926 ;; Registers used:
 14927 ;;		wreg, status,2, status,0
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14933 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;Total ram usage:        8 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    7
 14940 ;; This function calls:
 14941 ;;		Nothing
 14942 ;; This function is called by:
 14943 ;;		_Distribution
 14944 ;;		_initServos
 14945 ;;		_actuatorTest
 14946 ;;		_BothServos
 14947 ;; This function uses a non-reentrant model
 14948 ;;
 14949                           
 14950                           	psect	text49
 14951  004552                     __ptext49:
 14952                           	opt stack 0
 14953  004552                     _updateServoPosition:
 14954                           	opt stack 20
 14955                           
 14956                           ;sort.c: 490: unsigned int my_time = 65535 - time_us;
 14957                           
 14958                           ;incstack = 0
 14959  004552  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14960  004556  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14961  00455A  0100               	movlb	0	; () banked
 14962  00455C  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14963  00455E  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14964  004560  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14965  004562  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14966  004564  0EFF               	movlw	255
 14967  004566  0100               	movlb	0	; () banked
 14968  004568  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14969  00456A  0100               	movlb	0	; () banked
 14970  00456C  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14971  00456E  0EFF               	movlw	255
 14972  004570  0100               	movlb	0	; () banked
 14973  004572  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14974  004574  0100               	movlb	0	; () banked
 14975  004576  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14976                           
 14977                           ;sort.c: 491: switch(timer){
 14978  004578  D01D               	goto	l6412
 14979  00457A                     l6406:
 14980                           
 14981                           ; BSR set to: 0
 14982                           ;sort.c: 493: servoTimes[0] = my_time >> 8;
 14983  00457A  0100               	movlb	0	; () banked
 14984  00457C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14985  00457E  0100               	movlb	0	; () banked
 14986  004580  6FDA               	movwf	_servoTimes& (0+255),b
 14987  004582  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 14988                           
 14989                           ;sort.c: 494: servoTimes[1] = my_time & 0xFF;
 14990  004584  0100               	movlb	0	; () banked
 14991  004586  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14992  004588  0100               	movlb	0	; () banked
 14993  00458A  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 14994  00458C  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 14995                           
 14996                           ; BSR set to: 0
 14997                           ;sort.c: 496: pan_servo_state = time_us;
 14998  00458E  C080  F06F         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 14999  004592  C081  F070         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15000  004596                     l864:
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;sort.c: 498: servoTimes[2] = my_time >> 8;
 15004  004596  0100               	movlb	0	; () banked
 15005  004598  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15006  00459A  0100               	movlb	0	; () banked
 15007  00459C  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15008  00459E  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15009                           
 15010                           ;sort.c: 499: servoTimes[3] = my_time & 0xFF;
 15011  0045A0  0100               	movlb	0	; () banked
 15012  0045A2  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15013  0045A4  0100               	movlb	0	; () banked
 15014  0045A6  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15015  0045A8  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15016                           
 15017                           ; BSR set to: 0
 15018                           ;sort.c: 501: tilt_servo_state = time_us;
 15019  0045AA  C080  F075         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15020  0045AE  C081  F076         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15021                           
 15022                           ;sort.c: 502: }
 15023  0045B2  0012               	return	
 15024  0045B4                     l6412:
 15025                           
 15026                           ; BSR set to: 0
 15027  0045B4  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15028  0045B8  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15029                           
 15030                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15031                           ; Switch size 1, requested type "space"
 15032                           ; Number of cases is 1, Range of values is 0 to 0
 15033                           ; switch strategies available:
 15034                           ; Name         Instructions Cycles
 15035                           ; simple_byte            4     3 (average)
 15036                           ;	Chosen strategy is simple_byte
 15037  0045BC  0100               	movlb	0	; () banked
 15038  0045BE  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15039  0045C0  0A00               	xorlw	0	; case 0
 15040  0045C2  A4D8               	btfss	status,2,c
 15041  0045C4  0012               	return	
 15042                           
 15043                           ; BSR set to: 0
 15044                           ; Switch size 1, requested type "space"
 15045                           ; Number of cases is 2, Range of values is 1 to 3
 15046                           ; switch strategies available:
 15047                           ; Name         Instructions Cycles
 15048                           ; simple_byte            7     4 (average)
 15049                           ;	Chosen strategy is simple_byte
 15050  0045C6  0100               	movlb	0	; () banked
 15051  0045C8  5184               	movf	??_updateServoPosition& (0+255),w,b
 15052  0045CA  0A01               	xorlw	1	; case 1
 15053  0045CC  B4D8               	btfsc	status,2,c
 15054  0045CE  D7D5               	goto	l6406
 15055  0045D0  0A02               	xorlw	2	; case 3
 15056  0045D2  A4D8               	btfss	status,2,c
 15057  0045D4  0012               	return	
 15058  0045D6  D7DF               	goto	l864
 15059  0045D8                     __end_of_updateServoPosition:
 15060                           	opt stack 0
 15061                           tblptru	equ	0xFF8
 15062                           tblptrh	equ	0xFF7
 15063                           tblptrl	equ	0xFF6
 15064                           tablat	equ	0xFF5
 15065                           prodh	equ	0xFF4
 15066                           prodl	equ	0xFF3
 15067                           intcon	equ	0xFF2
 15068                           intcon2	equ	0xFF1
 15069                           intcon3	equ	0xFF0
 15070                           postinc0	equ	0xFEE
 15071                           wreg	equ	0xFE8
 15072                           postdec1	equ	0xFE5
 15073                           fsr1l	equ	0xFE1
 15074                           indf2	equ	0xFDF
 15075                           postinc2	equ	0xFDE
 15076                           postdec2	equ	0xFDD
 15077                           fsr2h	equ	0xFDA
 15078                           fsr2l	equ	0xFD9
 15079                           status	equ	0xFD8
 15080                           
 15081 ;; *************** function _BlockerTest *****************
 15082 ;; Defined at:
 15083 ;;		line 589 in file "Test.c"
 15084 ;; Parameters:    Size  Location     Type
 15085 ;;		None
 15086 ;; Auto vars:     Size  Location     Type
 15087 ;;  i               2   44[BANK0 ] int 
 15088 ;;  cond_flag       2   48[BANK0 ] int 
 15089 ;;  cam_flag        2   46[BANK0 ] int 
 15090 ;; Return value:  Size  Location     Type
 15091 ;;                  1    wreg      void 
 15092 ;; Registers used:
 15093 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15094 ;; Tracked objects:
 15095 ;;		On entry : 0/0
 15096 ;;		On exit  : 0/0
 15097 ;;		Unchanged: 0/0
 15098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15100 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15102 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15103 ;;Total ram usage:        7 bytes
 15104 ;; Hardware stack levels used:    1
 15105 ;; Hardware stack levels required when called:   10
 15106 ;; This function calls:
 15107 ;;		_lcdInst
 15108 ;;		_printf
 15109 ;; This function is called by:
 15110 ;;		_Test
 15111 ;; This function uses a non-reentrant model
 15112 ;;
 15113                           
 15114                           	psect	text50
 15115  003872                     __ptext50:
 15116                           	opt stack 0
 15117  003872                     _BlockerTest:
 15118                           	opt stack 19
 15119                           
 15120                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15121                           
 15122                           ; BSR set to: 0
 15123                           ;incstack = 0
 15124  003872  0E01               	movlw	1
 15125  003874  EC5C  F029         	call	_lcdInst
 15126  003878  0E68               	movlw	104
 15127  00387A  0100               	movlb	0	; () banked
 15128  00387C  6FAB               	movwf	??_BlockerTest& (0+255),b
 15129  00387E  0EE4               	movlw	228
 15130  003880                     u9967:
 15131  003880  2EE8               	decfsz	wreg,f,c
 15132  003882  D7FE               	bra	u9967
 15133  003884  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15134  003886  D7FC               	bra	u9967
 15135  003888  F000               	nop	
 15136  00388A  0E80               	movlw	128
 15137  00388C  EC5C  F029         	call	_lcdInst
 15138                           
 15139                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15140  003890  0E7B               	movlw	low STR_123
 15141  003892  0100               	movlb	0	; () banked
 15142  003894  6F8E               	movwf	printf@f& (0+255),b
 15143  003896  0EFB               	movlw	high STR_123
 15144  003898  0100               	movlb	0	; () banked
 15145  00389A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15146  00389C  A480               	btfss	3968,2,c	;volatile
 15147  00389E  D004               	goto	u6930
 15148  0038A0  0100               	movlb	0	; () banked
 15149  0038A2  6BAB               	clrf	??_BlockerTest& (0+255),b
 15150  0038A4  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15151  0038A6  D002               	goto	u6938
 15152  0038A8                     u6930:
 15153  0038A8  0100               	movlb	0	; () banked
 15154  0038AA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15155  0038AC                     u6938:
 15156  0038AC  0100               	movlb	0	; () banked
 15157  0038AE  51AB               	movf	??_BlockerTest& (0+255),w,b
 15158  0038B0  0100               	movlb	0	; () banked
 15159  0038B2  6F90               	movwf	(?_printf+2)& (0+255),b
 15160  0038B4  6B91               	clrf	(?_printf+3)& (0+255),b
 15161  0038B6  EC02  F00B         	call	_printf	;wreg free
 15162                           
 15163                           ;Test.c: 592: lcdInst(0b11000000);;
 15164  0038BA  0EC0               	movlw	192
 15165  0038BC  EC5C  F029         	call	_lcdInst
 15166                           
 15167                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15168  0038C0  0E69               	movlw	low STR_124
 15169  0038C2  0100               	movlb	0	; () banked
 15170  0038C4  6F8E               	movwf	printf@f& (0+255),b
 15171  0038C6  0EFB               	movlw	high STR_124
 15172  0038C8  0100               	movlb	0	; () banked
 15173  0038CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15174  0038CC  EC02  F00B         	call	_printf	;wreg free
 15175                           
 15176                           ;Test.c: 594: int cam_flag = 1;
 15177  0038D0  0E00               	movlw	0
 15178  0038D2  0100               	movlb	0	; () banked
 15179  0038D4  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15180  0038D6  0E01               	movlw	1
 15181  0038D8  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15182                           
 15183                           ; BSR set to: 0
 15184                           ;Test.c: 595: int cond_flag = 0;
 15185  0038DA  0E00               	movlw	0
 15186  0038DC  0100               	movlb	0	; () banked
 15187  0038DE  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15188  0038E0  0E00               	movlw	0
 15189  0038E2  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15193                           
 15194                           ;Test.c: 596: while(1){
 15195  0038E4  D018               	goto	l8326
 15196  0038E6                     l8322:
 15197                           
 15198                           ;Test.c: 598: lcdInst(0b10000000);;
 15199  0038E6  0E80               	movlw	128
 15200  0038E8  EC5C  F029         	call	_lcdInst
 15201                           
 15202                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15203  0038EC  0E7B               	movlw	low STR_123
 15204  0038EE  0100               	movlb	0	; () banked
 15205  0038F0  6F8E               	movwf	printf@f& (0+255),b
 15206  0038F2  0EFB               	movlw	high STR_123
 15207  0038F4  0100               	movlb	0	; () banked
 15208  0038F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15209  0038F8  A480               	btfss	3968,2,c	;volatile
 15210  0038FA  D004               	goto	u6940
 15211  0038FC  0100               	movlb	0	; () banked
 15212  0038FE  6BAB               	clrf	??_BlockerTest& (0+255),b
 15213  003900  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15214  003902  D002               	goto	u6948
 15215  003904                     u6940:
 15216  003904  0100               	movlb	0	; () banked
 15217  003906  6BAB               	clrf	??_BlockerTest& (0+255),b
 15218  003908                     u6948:
 15219  003908  0100               	movlb	0	; () banked
 15220  00390A  51AB               	movf	??_BlockerTest& (0+255),w,b
 15221  00390C  0100               	movlb	0	; () banked
 15222  00390E  6F90               	movwf	(?_printf+2)& (0+255),b
 15223  003910  6B91               	clrf	(?_printf+3)& (0+255),b
 15224  003912  EC02  F00B         	call	_printf	;wreg free
 15225  003916                     l8326:
 15226  003916  A281               	btfss	3969,1,c	;volatile
 15227  003918  D7E6               	goto	l8322
 15228                           
 15229                           ;Test.c: 600: }
 15230                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15231  00391A  3881               	swapf	3969,w,c	;volatile
 15232  00391C  0B0F               	andlw	15
 15233  00391E  0A0F               	xorlw	15
 15234  003920  B4D8               	btfsc	status,2,c
 15235  003922  0012               	return	
 15236                           
 15237                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15238                           
 15239                           ;Test.c: 603: }
 15240                           
 15241                           ;Test.c: 602: break;
 15242  003924  3881               	swapf	3969,w,c	;volatile
 15243  003926  0B0F               	andlw	15
 15244  003928  06E8               	decf	wreg,f,c
 15245  00392A  A4D8               	btfss	status,2,c
 15246  00392C  D016               	goto	l8344
 15247                           
 15248                           ;Test.c: 605: if(cond_flag){
 15249  00392E  0100               	movlb	0	; () banked
 15250  003930  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15251  003932  0100               	movlb	0	; () banked
 15252  003934  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15253  003936  B4D8               	btfsc	status,2,c
 15254  003938  D007               	goto	l1365
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15258  00393A  8689               	bsf	3977,3,c	;volatile
 15259  00393C  D006               	goto	l8342
 15260  00393E                     u6991:
 15261  00393E  0E01               	movlw	1
 15262  003940                     u7000:
 15263  003940  0100               	movlb	0	; () banked
 15264  003942  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15265  003944  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15266                           
 15267                           ;Test.c: 608: }
 15268  003946  D054               	goto	l8368
 15269  003948                     l1365:
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;Test.c: 609: else{
 15273                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15274  003948  9689               	bcf	3977,3,c	;volatile
 15275  00394A                     l8342:
 15276                           
 15277                           ; BSR set to: 0
 15278                           ;Test.c: 611: cond_flag = !cond_flag;
 15279  00394A  0100               	movlb	0	; () banked
 15280  00394C  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15281  00394E  0100               	movlb	0	; () banked
 15282  003950  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15283  003952  B4D8               	btfsc	status,2,c
 15284  003954  D7F4               	goto	u6991
 15285  003956  0E00               	movlw	0
 15286  003958  D7F3               	goto	u7000
 15287  00395A                     l8344:
 15288                           
 15289                           ;Test.c: 614: else{
 15290                           ;Test.c: 615: if(cam_flag){
 15291  00395A  0100               	movlb	0	; () banked
 15292  00395C  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15293  00395E  0100               	movlb	0	; () banked
 15294  003960  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15295  003962  B4D8               	btfsc	status,2,c
 15296  003964  D007               	goto	l8350
 15297                           
 15298                           ; BSR set to: 0
 15299                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15300  003966  808B               	bsf	3979,0,c	;volatile
 15301  003968  D023               	goto	l8362
 15302  00396A                     u7041:
 15303  00396A  0E01               	movlw	1
 15304  00396C                     u7050:
 15305  00396C  0100               	movlb	0	; () banked
 15306  00396E  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15307  003970  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15308                           
 15309                           ;Test.c: 618: }
 15310  003972  D03E               	goto	l8368
 15311  003974                     l8350:
 15312                           
 15313                           ; BSR set to: 0
 15314                           ;Test.c: 619: else{
 15315                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15316  003974  0E00               	movlw	0
 15317  003976  0100               	movlb	0	; () banked
 15318  003978  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15319  00397A  0E00               	movlw	0
 15320  00397C  6FAC               	movwf	BlockerTest@i& (0+255),b
 15321  00397E                     l8352:
 15322                           
 15323                           ; BSR set to: 0
 15324  00397E  0100               	movlb	0	; () banked
 15325  003980  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15326  003982  D008               	goto	l1370
 15327  003984  0E88               	movlw	136
 15328  003986  0100               	movlb	0	; () banked
 15329  003988  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15330  00398A  0E13               	movlw	19
 15331  00398C  0100               	movlb	0	; () banked
 15332  00398E  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15333  003990  B0D8               	btfsc	status,0,c
 15334  003992  D00D               	goto	l1371
 15335  003994                     l1370:
 15336                           
 15337                           ; BSR set to: 0
 15338                           ;Test.c: 621: {
 15339                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15340  003994  808B               	bsf	3979,0,c	;volatile
 15341                           
 15342                           ; BSR set to: 0
 15343                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15344  003996  0E1A               	movlw	26
 15345  003998                     u9977:
 15346  003998  2EE8               	decfsz	wreg,f,c
 15347  00399A  D7FE               	bra	u9977
 15348  00399C  D000               	nop2	
 15349                           
 15350                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15351  00399E  908B               	bcf	3979,0,c	;volatile
 15352                           
 15353                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15354  0039A0  0EF0               	movlw	240
 15355  0039A2                     u9987:
 15356  0039A2  2EE8               	decfsz	wreg,f,c
 15357  0039A4  D7FE               	bra	u9987
 15358  0039A6  0100               	movlb	0	; () banked
 15359  0039A8  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15360  0039AA  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15361  0039AC  D7E8               	goto	l8352
 15362  0039AE                     l1371:
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;Test.c: 626: }
 15366                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15367  0039AE  908B               	bcf	3979,0,c	;volatile
 15368  0039B0                     l8362:
 15369                           
 15370                           ; BSR set to: 0
 15371                           ;Test.c: 628: cam_flag = !cam_flag;
 15372  0039B0  0100               	movlb	0	; () banked
 15373  0039B2  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15374  0039B4  0100               	movlb	0	; () banked
 15375  0039B6  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15376  0039B8  B4D8               	btfsc	status,2,c
 15377  0039BA  D7D7               	goto	u7041
 15378  0039BC  0E00               	movlw	0
 15379  0039BE  D7D6               	goto	u7050
 15380  0039C0                     l8364:
 15381                           
 15382                           ;Test.c: 633: lcdInst(0b10000000);;
 15383  0039C0  0E80               	movlw	128
 15384  0039C2  EC5C  F029         	call	_lcdInst
 15385                           
 15386                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15387  0039C6  0E7B               	movlw	low STR_123
 15388  0039C8  0100               	movlb	0	; () banked
 15389  0039CA  6F8E               	movwf	printf@f& (0+255),b
 15390  0039CC  0EFB               	movlw	high STR_123
 15391  0039CE  0100               	movlb	0	; () banked
 15392  0039D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 15393  0039D2  A480               	btfss	3968,2,c	;volatile
 15394  0039D4  D004               	goto	u7100
 15395  0039D6  0100               	movlb	0	; () banked
 15396  0039D8  6BAB               	clrf	??_BlockerTest& (0+255),b
 15397  0039DA  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15398  0039DC  D002               	goto	u7108
 15399  0039DE                     u7100:
 15400  0039DE  0100               	movlb	0	; () banked
 15401  0039E0  6BAB               	clrf	??_BlockerTest& (0+255),b
 15402  0039E2                     u7108:
 15403  0039E2  0100               	movlb	0	; () banked
 15404  0039E4  51AB               	movf	??_BlockerTest& (0+255),w,b
 15405  0039E6  0100               	movlb	0	; () banked
 15406  0039E8  6F90               	movwf	(?_printf+2)& (0+255),b
 15407  0039EA  6B91               	clrf	(?_printf+3)& (0+255),b
 15408  0039EC  EC02  F00B         	call	_printf	;wreg free
 15409  0039F0                     l8368:
 15410  0039F0  A281               	btfss	3969,1,c	;volatile
 15411  0039F2  D791               	goto	l8326
 15412  0039F4  D7E5               	goto	l8364
 15413  0039F6                     __end_of_BlockerTest:
 15414                           	opt stack 0
 15415                           tblptru	equ	0xFF8
 15416                           tblptrh	equ	0xFF7
 15417                           tblptrl	equ	0xFF6
 15418                           tablat	equ	0xFF5
 15419                           prodh	equ	0xFF4
 15420                           prodl	equ	0xFF3
 15421                           intcon	equ	0xFF2
 15422                           intcon2	equ	0xFF1
 15423                           intcon3	equ	0xFF0
 15424                           postinc0	equ	0xFEE
 15425                           wreg	equ	0xFE8
 15426                           postdec1	equ	0xFE5
 15427                           fsr1l	equ	0xFE1
 15428                           indf2	equ	0xFDF
 15429                           postinc2	equ	0xFDE
 15430                           postdec2	equ	0xFDD
 15431                           fsr2h	equ	0xFDA
 15432                           fsr2l	equ	0xFD9
 15433                           status	equ	0xFD8
 15434                           
 15435 ;; *************** function _printf *****************
 15436 ;; Defined at:
 15437 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15438 ;; Parameters:    Size  Location     Type
 15439 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15440 ;;		 -> STR_126(18), STR_125(18), STR_124(18), STR_123(18), 
 15441 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 15442 ;;		 -> STR_118(3), STR_117(15), STR_116(3), STR_115(15), 
 15443 ;;		 -> STR_114(11), STR_113(18), STR_112(18), STR_111(17), 
 15444 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 15445 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 15446 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 15447 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 15448 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 15449 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 15450 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 15451 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 15452 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 15453 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 15454 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 15455 ;;		 -> STR_66(4), STR_65(13), STR_64(11), STR_63(24), 
 15456 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 15457 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 15458 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 15459 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 15460 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 15461 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 15462 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 15463 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 15464 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 15465 ;;		 -> STR_1(18), 
 15466 ;; Auto vars:     Size  Location     Type
 15467 ;;  tmpval          4    0        struct .
 15468 ;;  width           2   41[BANK0 ] int 
 15469 ;;  val             2   37[BANK0 ] unsigned int 
 15470 ;;  len             2   35[BANK0 ] unsigned int 
 15471 ;;  ap              2   33[BANK0 ] PTR void [1]
 15472 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15473 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15474 ;;		 -> STR_127(7), count_total(2), printRTC@month(4), UI@month(4), 
 15475 ;;  c               1   40[BANK0 ] char 
 15476 ;;  flag            1   39[BANK0 ] unsigned char 
 15477 ;;  prec            1   30[BANK0 ] char 
 15478 ;; Return value:  Size  Location     Type
 15479 ;;                  2   14[BANK0 ] int 
 15480 ;; Registers used:
 15481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15482 ;; Tracked objects:
 15483 ;;		On entry : 0/0
 15484 ;;		On exit  : 0/0
 15485 ;;		Unchanged: 0/0
 15486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15487 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15488 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15489 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15490 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15491 ;;Total ram usage:       29 bytes
 15492 ;; Hardware stack levels used:    1
 15493 ;; Hardware stack levels required when called:    9
 15494 ;; This function calls:
 15495 ;;		___lwdiv
 15496 ;;		___lwmod
 15497 ;;		___wmul
 15498 ;;		_isdigit
 15499 ;;		_putch
 15500 ;; This function is called by:
 15501 ;;		_UI
 15502 ;;		_change_state_to_menu_start
 15503 ;;		_change_state_to_menu_12
 15504 ;;		_change_state_to_menu_22
 15505 ;;		_printRTC
 15506 ;;		_EEPROM_write
 15507 ;;		_Test
 15508 ;;		_algorithmTest
 15509 ;;		_sensorTest
 15510 ;;		_actuatorTest
 15511 ;;		_BothServos
 15512 ;;		_PortTestA5
 15513 ;;		_PusherTest
 15514 ;;		_SpeedTest
 15515 ;;		_BlockerTest
 15516 ;;		_ToggleTestA5
 15517 ;; This function uses a non-reentrant model
 15518 ;;
 15519                           
 15520                           	psect	text51
 15521  001604                     __ptext51:
 15522                           	opt stack 0
 15523  001604                     _printf:
 15524                           	opt stack 18
 15525                           
 15526                           ;doprnt.c: 466: va_list ap;
 15527                           ;doprnt.c: 499: signed char c;
 15528                           ;doprnt.c: 501: int width;
 15529                           ;doprnt.c: 506: signed char prec;
 15530                           ;doprnt.c: 508: unsigned char flag;
 15531                           ;doprnt.c: 523: union {
 15532                           ;doprnt.c: 524: unsigned long vd;
 15533                           ;doprnt.c: 525: double integ;
 15534                           ;doprnt.c: 526: } tmpval;
 15535                           ;doprnt.c: 528: unsigned int val;
 15536                           ;doprnt.c: 529: unsigned len;
 15537                           ;doprnt.c: 530: const char * cp;
 15538                           ;doprnt.c: 533: *ap = __va_start();
 15539                           
 15540                           ;incstack = 0
 15541  001604  0E90               	movlw	low (?_printf+2)
 15542  001606  0100               	movlb	0	; () banked
 15543  001608  6FA1               	movwf	printf@ap& (0+255),b
 15544  00160A  0E00               	movlw	high (?_printf+2)
 15545  00160C  0100               	movlb	0	; () banked
 15546  00160E  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15547                           
 15548                           ;doprnt.c: 536: while(c = *f++) {
 15549  001610  D205               	goto	l6366
 15550  001612                     l6236:
 15551                           
 15552                           ; BSR set to: 0
 15553                           ;doprnt.c: 538: if(c != '%')
 15554  001612  0E25               	movlw	37
 15555  001614  0100               	movlb	0	; () banked
 15556  001616  19A8               	xorwf	printf@c& (0+255),w,b
 15557  001618  B4D8               	btfsc	status,2,c
 15558  00161A  D005               	goto	l6240
 15559                           
 15560                           ; BSR set to: 0
 15561                           ;doprnt.c: 540: {
 15562                           ;doprnt.c: 541: (putch(c) );
 15563  00161C  0100               	movlb	0	; () banked
 15564  00161E  51A8               	movf	printf@c& (0+255),w,b
 15565  001620  EC54  F029         	call	_putch
 15566                           
 15567                           ;doprnt.c: 542: continue;
 15568  001624  D1FB               	goto	l6366
 15569  001626                     l6240:
 15570                           
 15571                           ;doprnt.c: 543: }
 15572                           ;doprnt.c: 546: width = 0;
 15573  001626  0E00               	movlw	0
 15574  001628  0100               	movlb	0	; () banked
 15575  00162A  6FAA               	movwf	(printf@width+1)& (0+255),b
 15576  00162C  0E00               	movlw	0
 15577  00162E  6FA9               	movwf	printf@width& (0+255),b
 15578                           
 15579                           ;doprnt.c: 548: flag = 0;
 15580  001630  0E00               	movlw	0
 15581  001632  0100               	movlb	0	; () banked
 15582  001634  6FA7               	movwf	printf@flag& (0+255),b
 15583                           
 15584                           ; BSR set to: 0
 15585                           ;doprnt.c: 551: switch(*f) {
 15586                           
 15587                           ;doprnt.c: 550: for(;;) {
 15588  001636  D005               	goto	l6246
 15589  001638                     l6242:
 15590                           
 15591                           ;doprnt.c: 580: flag |= 0x04;
 15592  001638  0100               	movlb	0	; () banked
 15593  00163A  85A7               	bsf	printf@flag& (0+255),2,b
 15594                           
 15595                           ;doprnt.c: 581: f++;
 15596  00163C  0100               	movlb	0	; () banked
 15597  00163E  4B8E               	infsnz	printf@f& (0+255),f,b
 15598  001640  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15599  001642                     l6246:
 15600  001642  C08E  FFF6         	movff	printf@f,tblptrl
 15601  001646  C08F  FFF7         	movff	printf@f+1,tblptrh
 15602  00164A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15603  00164A  6AF8               	clrf	tblptru,c
 15604  00164C                     	endif
 15605  00164C                     	if	0	;tblptru may be non-zero
 15606  00164C                     	endif
 15607  00164C  0008               	tblrd		*
 15608  00164E  50F5               	movf	tablat,w,c
 15609                           
 15610                           ; Switch size 1, requested type "space"
 15611                           ; Number of cases is 1, Range of values is 48 to 48
 15612                           ; switch strategies available:
 15613                           ; Name         Instructions Cycles
 15614                           ; simple_byte            4     3 (average)
 15615                           ;	Chosen strategy is simple_byte
 15616  001650  0A30               	xorlw	48	; case 48
 15617  001652  B4D8               	btfsc	status,2,c
 15618  001654  D7F1               	goto	l6242
 15619                           
 15620                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15621                           
 15622                           ;doprnt.c: 586: }
 15623                           
 15624                           ;doprnt.c: 585: break;
 15625  001656  C08E  FFF6         	movff	printf@f,tblptrl
 15626  00165A  C08F  FFF7         	movff	printf@f+1,tblptrh
 15627  00165E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15628  00165E  6AF8               	clrf	tblptru,c
 15629  001660                     	endif
 15630  001660                     	if	0	;tblptru may be non-zero
 15631  001660                     	endif
 15632  001660  0008               	tblrd		*
 15633  001662  50F5               	movf	tablat,w,c
 15634  001664  EC69  F028         	call	_isdigit
 15635  001668  A0D8               	btfss	status,0,c
 15636  00166A  D0D2               	goto	l6294
 15637                           
 15638                           ;doprnt.c: 598: width = 0;
 15639  00166C  0E00               	movlw	0
 15640  00166E  0100               	movlb	0	; () banked
 15641  001670  6FAA               	movwf	(printf@width+1)& (0+255),b
 15642  001672  0E00               	movlw	0
 15643  001674  6FA9               	movwf	printf@width& (0+255),b
 15644  001676                     l6252:
 15645                           
 15646                           ;doprnt.c: 600: width *= 10;
 15647  001676  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15648  00167A  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15649  00167E  0E00               	movlw	0
 15650  001680  0100               	movlb	0	; () banked
 15651  001682  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15652  001684  0E0A               	movlw	10
 15653  001686  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15654  001688  ECD2  F026         	call	___wmul	;wreg free
 15655  00168C  C080  F0A9         	movff	?___wmul,printf@width
 15656  001690  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15657                           
 15658                           ;doprnt.c: 601: width += *f++ - '0';
 15659  001694  0ED0               	movlw	208
 15660  001696  0100               	movlb	0	; () banked
 15661  001698  6F9A               	movwf	??_printf& (0+255),b
 15662  00169A  0EFF               	movlw	255
 15663  00169C  0100               	movlb	0	; () banked
 15664  00169E  6F9B               	movwf	(??_printf+1)& (0+255),b
 15665  0016A0  C08E  FFF6         	movff	printf@f,tblptrl
 15666  0016A4  C08F  FFF7         	movff	printf@f+1,tblptrh
 15667  0016A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15668  0016A8  6AF8               	clrf	tblptru,c
 15669  0016AA                     	endif
 15670  0016AA                     	if	0	;tblptru may be non-zero
 15671  0016AA                     	endif
 15672  0016AA  0008               	tblrd		*
 15673  0016AC  50F5               	movf	tablat,w,c
 15674  0016AE  0100               	movlb	0	; () banked
 15675  0016B0  6F9C               	movwf	(??_printf+2)& (0+255),b
 15676  0016B2  6B9D               	clrf	(??_printf+3)& (0+255),b
 15677  0016B4  0100               	movlb	0	; () banked
 15678  0016B6  519A               	movf	??_printf& (0+255),w,b
 15679  0016B8  0100               	movlb	0	; () banked
 15680  0016BA  279C               	addwf	(??_printf+2)& (0+255),f,b
 15681  0016BC  0100               	movlb	0	; () banked
 15682  0016BE  519B               	movf	(??_printf+1)& (0+255),w,b
 15683  0016C0  0100               	movlb	0	; () banked
 15684  0016C2  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15685  0016C4  0100               	movlb	0	; () banked
 15686  0016C6  519C               	movf	(??_printf+2)& (0+255),w,b
 15687  0016C8  0100               	movlb	0	; () banked
 15688  0016CA  27A9               	addwf	printf@width& (0+255),f,b
 15689  0016CC  0100               	movlb	0	; () banked
 15690  0016CE  519D               	movf	(??_printf+3)& (0+255),w,b
 15691  0016D0  0100               	movlb	0	; () banked
 15692  0016D2  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15693                           
 15694                           ; BSR set to: 0
 15695  0016D4  0100               	movlb	0	; () banked
 15696  0016D6  4B8E               	infsnz	printf@f& (0+255),f,b
 15697  0016D8  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15698                           
 15699                           ; BSR set to: 0
 15700                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15701  0016DA  C08E  FFF6         	movff	printf@f,tblptrl
 15702  0016DE  C08F  FFF7         	movff	printf@f+1,tblptrh
 15703  0016E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15704  0016E2  6AF8               	clrf	tblptru,c
 15705  0016E4                     	endif
 15706  0016E4                     	if	0	;tblptru may be non-zero
 15707  0016E4                     	endif
 15708  0016E4  0008               	tblrd		*
 15709  0016E6  50F5               	movf	tablat,w,c
 15710  0016E8  EC69  F028         	call	_isdigit
 15711  0016EC  A0D8               	btfss	status,0,c
 15712  0016EE  D090               	goto	l6294
 15713  0016F0  D7C2               	goto	l6252
 15714  0016F2                     l6260:
 15715                           
 15716                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15717  0016F2  C0A1  FFD9         	movff	printf@ap,fsr2l
 15718  0016F6  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15719  0016FA  CFDE F09F          	movff	postinc2,printf@cp
 15720  0016FE  CFDD F0A0          	movff	postdec2,printf@cp+1
 15721  001702  0E02               	movlw	2
 15722  001704  0100               	movlb	0	; () banked
 15723  001706  27A1               	addwf	printf@ap& (0+255),f,b
 15724  001708  0E00               	movlw	0
 15725  00170A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15726                           
 15727                           ; BSR set to: 0
 15728                           ;doprnt.c: 740: if(!cp)
 15729  00170C  0100               	movlb	0	; () banked
 15730  00170E  519F               	movf	printf@cp& (0+255),w,b
 15731  001710  0100               	movlb	0	; () banked
 15732  001712  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15733  001714  A4D8               	btfss	status,2,c
 15734  001716  D006               	goto	l6268
 15735                           
 15736                           ; BSR set to: 0
 15737                           ;doprnt.c: 741: cp = "(null)";
 15738  001718  0EB2               	movlw	low STR_127
 15739  00171A  0100               	movlb	0	; () banked
 15740  00171C  6F9F               	movwf	printf@cp& (0+255),b
 15741  00171E  0EFF               	movlw	high STR_127
 15742  001720  0100               	movlb	0	; () banked
 15743  001722  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15744  001724                     l6268:
 15745                           
 15746                           ; BSR set to: 0
 15747                           ;doprnt.c: 745: len = 0;
 15748  001724  0E00               	movlw	0
 15749  001726  0100               	movlb	0	; () banked
 15750  001728  6FA4               	movwf	(printf@len+1)& (0+255),b
 15751  00172A  0E00               	movlw	0
 15752  00172C  6FA3               	movwf	printf@len& (0+255),b
 15753                           
 15754                           ;doprnt.c: 746: while(cp[len])
 15755  00172E  D003               	goto	l6272
 15756  001730                     l6270:
 15757                           
 15758                           ;doprnt.c: 747: len++;
 15759  001730  0100               	movlb	0	; () banked
 15760  001732  4BA3               	infsnz	printf@len& (0+255),f,b
 15761  001734  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15762  001736                     l6272:
 15763                           
 15764                           ; BSR set to: 0
 15765  001736  0100               	movlb	0	; () banked
 15766  001738  51A3               	movf	printf@len& (0+255),w,b
 15767  00173A  0100               	movlb	0	; () banked
 15768  00173C  259F               	addwf	printf@cp& (0+255),w,b
 15769  00173E  0100               	movlb	0	; () banked
 15770  001740  6F9A               	movwf	??_printf& (0+255),b
 15771  001742  0100               	movlb	0	; () banked
 15772  001744  51A4               	movf	(printf@len+1)& (0+255),w,b
 15773  001746  0100               	movlb	0	; () banked
 15774  001748  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15775  00174A  0100               	movlb	0	; () banked
 15776  00174C  6F9B               	movwf	(??_printf+1)& (0+255),b
 15777  00174E  C09A  FFF6         	movff	??_printf,tblptrl
 15778  001752  C09B  FFF7         	movff	??_printf+1,tblptrh
 15779  001756  0E00               	movlw	low (__mediumconst shr (0+16))
 15780  001758  6EF8               	movwf	tblptru,c
 15781  00175A  0E0F               	movlw	(high __ramtop+-1)
 15782  00175C  64F7               	cpfsgt	tblptrh,c
 15783  00175E  D003               	bra	u4587
 15784  001760  0008               	tblrd		*
 15785  001762  50F5               	movf	tablat,w,c
 15786  001764  D005               	bra	u4580
 15787  001766                     u4587:
 15788  001766  CFF6 FFE9          	movff	tblptrl,fsr0l
 15789  00176A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15790  00176E  50EF               	movf	indf0,w,c
 15791  001770                     u4580:
 15792  001770  0900               	iorlw	0
 15793  001772  A4D8               	btfss	status,2,c
 15794  001774  D7DD               	goto	l6270
 15795                           
 15796                           ;doprnt.c: 757: if(width > len)
 15797  001776  0100               	movlb	0	; () banked
 15798  001778  51A9               	movf	printf@width& (0+255),w,b
 15799  00177A  0100               	movlb	0	; () banked
 15800  00177C  5DA3               	subwf	printf@len& (0+255),w,b
 15801  00177E  0100               	movlb	0	; () banked
 15802  001780  51AA               	movf	(printf@width+1)& (0+255),w,b
 15803  001782  0100               	movlb	0	; () banked
 15804  001784  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15805  001786  B0D8               	btfsc	status,0,c
 15806  001788  D009               	goto	l6278
 15807                           
 15808                           ; BSR set to: 0
 15809                           ;doprnt.c: 758: width -= len;
 15810  00178A  0100               	movlb	0	; () banked
 15811  00178C  51A3               	movf	printf@len& (0+255),w,b
 15812  00178E  0100               	movlb	0	; () banked
 15813  001790  5FA9               	subwf	printf@width& (0+255),f,b
 15814  001792  0100               	movlb	0	; () banked
 15815  001794  51A4               	movf	(printf@len+1)& (0+255),w,b
 15816  001796  0100               	movlb	0	; () banked
 15817  001798  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15818  00179A  D009               	goto	l6282
 15819  00179C                     l6278:
 15820                           
 15821                           ; BSR set to: 0
 15822                           ;doprnt.c: 759: else
 15823                           ;doprnt.c: 760: width = 0;
 15824  00179C  0E00               	movlw	0
 15825  00179E  0100               	movlb	0	; () banked
 15826  0017A0  6FAA               	movwf	(printf@width+1)& (0+255),b
 15827  0017A2  0E00               	movlw	0
 15828  0017A4  6FA9               	movwf	printf@width& (0+255),b
 15829                           
 15830                           ; BSR set to: 0
 15831                           ;doprnt.c: 764: while(width--)
 15832  0017A6  D003               	goto	l6282
 15833  0017A8                     l6280:
 15834                           
 15835                           ; BSR set to: 0
 15836                           ;doprnt.c: 765: (putch(' ') );
 15837  0017A8  0E20               	movlw	32
 15838  0017AA  EC54  F029         	call	_putch
 15839  0017AE                     l6282:
 15840  0017AE  0100               	movlb	0	; () banked
 15841  0017B0  07A9               	decf	printf@width& (0+255),f,b
 15842  0017B2  A0D8               	btfss	status,0,c
 15843  0017B4  07AA               	decf	(printf@width+1)& (0+255),f,b
 15844  0017B6  0100               	movlb	0	; () banked
 15845  0017B8  29A9               	incf	printf@width& (0+255),w,b
 15846  0017BA  E1F6               	bnz	l6280
 15847  0017BC  0100               	movlb	0	; () banked
 15848  0017BE  29AA               	incf	(printf@width+1)& (0+255),w,b
 15849  0017C0  B4D8               	btfsc	status,2,c
 15850  0017C2  D017               	goto	l6288
 15851  0017C4  D7F1               	goto	l6280
 15852  0017C6                     l6284:
 15853                           
 15854                           ; BSR set to: 0
 15855                           ;doprnt.c: 768: (putch(*cp++) );
 15856  0017C6  C09F  FFF6         	movff	printf@cp,tblptrl
 15857  0017CA  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15858  0017CE  0E00               	movlw	low (__mediumconst shr (0+16))
 15859  0017D0  6EF8               	movwf	tblptru,c
 15860  0017D2  0E0F               	movlw	(high __ramtop+-1)
 15861  0017D4  64F7               	cpfsgt	tblptrh,c
 15862  0017D6  D003               	bra	u4627
 15863  0017D8  0008               	tblrd		*
 15864  0017DA  50F5               	movf	tablat,w,c
 15865  0017DC  D005               	bra	u4620
 15866  0017DE                     u4627:
 15867  0017DE  CFF6 FFE9          	movff	tblptrl,fsr0l
 15868  0017E2  CFF7 FFEA          	movff	tblptrh,fsr0h
 15869  0017E6  50EF               	movf	indf0,w,c
 15870  0017E8                     u4620:
 15871  0017E8  EC54  F029         	call	_putch
 15872  0017EC  0100               	movlb	0	; () banked
 15873  0017EE  4B9F               	infsnz	printf@cp& (0+255),f,b
 15874  0017F0  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15875  0017F2                     l6288:
 15876                           
 15877                           ; BSR set to: 0
 15878  0017F2  0100               	movlb	0	; () banked
 15879  0017F4  07A3               	decf	printf@len& (0+255),f,b
 15880  0017F6  A0D8               	btfss	status,0,c
 15881  0017F8  07A4               	decf	(printf@len+1)& (0+255),f,b
 15882  0017FA  0100               	movlb	0	; () banked
 15883  0017FC  29A3               	incf	printf@len& (0+255),w,b
 15884  0017FE  E1E3               	bnz	l6284
 15885  001800  0100               	movlb	0	; () banked
 15886  001802  29A4               	incf	(printf@len+1)& (0+255),w,b
 15887  001804  B4D8               	btfsc	status,2,c
 15888  001806  D10A               	goto	l6366
 15889  001808  D7DE               	goto	l6284
 15890  00180A                     l6290:
 15891                           
 15892                           ; BSR set to: 0
 15893                           ;doprnt.c: 818: flag |= 0x40;
 15894  00180A  0100               	movlb	0	; () banked
 15895  00180C  8DA7               	bsf	printf@flag& (0+255),6,b
 15896                           
 15897                           ; BSR set to: 0
 15898                           ;doprnt.c: 822: }
 15899                           
 15900                           ;doprnt.c: 819: break;
 15901  00180E  D01D               	goto	l1406
 15902  001810                     l6294:
 15903  001810  C08E  FFF6         	movff	printf@f,tblptrl
 15904  001814  C08F  FFF7         	movff	printf@f+1,tblptrh
 15905  001818  0100               	movlb	0	; () banked
 15906  00181A  4B8E               	infsnz	printf@f& (0+255),f,b
 15907  00181C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15908  00181E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15909  00181E  6AF8               	clrf	tblptru,c
 15910  001820                     	endif
 15911  001820                     	if	0	;tblptru may be non-zero
 15912  001820                     	endif
 15913  001820  0008               	tblrd		*
 15914  001822  CFF5 F0A8          	movff	tablat,printf@c
 15915  001826  0100               	movlb	0	; () banked
 15916  001828  51A8               	movf	printf@c& (0+255),w,b
 15917                           
 15918                           ; Switch size 1, requested type "space"
 15919                           ; Number of cases is 5, Range of values is 0 to 117
 15920                           ; switch strategies available:
 15921                           ; Name         Instructions Cycles
 15922                           ; simple_byte           16     9 (average)
 15923                           ;	Chosen strategy is simple_byte
 15924  00182A  0A00               	xorlw	0	; case 0
 15925  00182C  B4D8               	btfsc	status,2,c
 15926  00182E  0012               	return	
 15927  001830  0A64               	xorlw	100	; case 100
 15928  001832  B4D8               	btfsc	status,2,c
 15929  001834  D00A               	goto	l1406
 15930  001836  0A0D               	xorlw	13	; case 105
 15931  001838  B4D8               	btfsc	status,2,c
 15932  00183A  D007               	goto	l1406
 15933  00183C  0A1A               	xorlw	26	; case 115
 15934  00183E  B4D8               	btfsc	status,2,c
 15935  001840  D758               	goto	l6260
 15936  001842  0A06               	xorlw	6	; case 117
 15937  001844  B4D8               	btfsc	status,2,c
 15938  001846  D7E1               	goto	l6290
 15939  001848  D0E9               	goto	l6366
 15940  00184A                     l1406:
 15941                           
 15942                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15943  00184A  0100               	movlb	0	; () banked
 15944  00184C  BDA7               	btfsc	printf@flag& (0+255),6,b
 15945  00184E  D019               	goto	l6306
 15946                           
 15947                           ; BSR set to: 0
 15948                           ;doprnt.c: 1253: {
 15949                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15950  001850  C0A1  FFD9         	movff	printf@ap,fsr2l
 15951  001854  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15952  001858  CFDE F0A5          	movff	postinc2,printf@val
 15953  00185C  CFDD F0A6          	movff	postdec2,printf@val+1
 15954                           
 15955                           ; BSR set to: 0
 15956  001860  0E02               	movlw	2
 15957  001862  0100               	movlb	0	; () banked
 15958  001864  27A1               	addwf	printf@ap& (0+255),f,b
 15959  001866  0E00               	movlw	0
 15960  001868  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;doprnt.c: 1261: if((int)val < 0) {
 15964  00186A  0100               	movlb	0	; () banked
 15965  00186C  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15966  00186E  D016               	goto	l6310
 15967                           
 15968                           ; BSR set to: 0
 15969                           ;doprnt.c: 1262: flag |= 0x03;
 15970  001870  0E03               	movlw	3
 15971  001872  0100               	movlb	0	; () banked
 15972  001874  13A7               	iorwf	printf@flag& (0+255),f,b
 15973                           
 15974                           ; BSR set to: 0
 15975                           ;doprnt.c: 1263: val = -val;
 15976  001876  0100               	movlb	0	; () banked
 15977  001878  6DA5               	negf	printf@val& (0+255),b
 15978  00187A  1FA6               	comf	(printf@val+1)& (0+255),f,b
 15979  00187C  B0D8               	btfsc	status,0,c
 15980  00187E  2BA6               	incf	(printf@val+1)& (0+255),f,b
 15981                           
 15982                           ; BSR set to: 0
 15983                           ;doprnt.c: 1264: }
 15984                           ;doprnt.c: 1266: }
 15985  001880  D00D               	goto	l6310
 15986  001882                     l6306:
 15987                           
 15988                           ; BSR set to: 0
 15989                           ;doprnt.c: 1268: else
 15990                           ;doprnt.c: 1273: {
 15991                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15992  001882  C0A1  FFD9         	movff	printf@ap,fsr2l
 15993  001886  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15994  00188A  CFDE F0A5          	movff	postinc2,printf@val
 15995  00188E  CFDD F0A6          	movff	postdec2,printf@val+1
 15996                           
 15997                           ; BSR set to: 0
 15998  001892  0E02               	movlw	2
 15999  001894  0100               	movlb	0	; () banked
 16000  001896  27A1               	addwf	printf@ap& (0+255),f,b
 16001  001898  0E00               	movlw	0
 16002  00189A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16003  00189C                     l6310:
 16004                           
 16005                           ; BSR set to: 0
 16006                           ;doprnt.c: 1287: }
 16007                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16008  00189C  0E01               	movlw	1
 16009  00189E  0100               	movlb	0	; () banked
 16010  0018A0  6FA8               	movwf	printf@c& (0+255),b
 16011  0018A2                     l6312:
 16012                           
 16013                           ; BSR set to: 0
 16014  0018A2  0E05               	movlw	5
 16015  0018A4  0100               	movlb	0	; () banked
 16016  0018A6  19A8               	xorwf	printf@c& (0+255),w,b
 16017  0018A8  B4D8               	btfsc	status,2,c
 16018  0018AA  D019               	goto	l6324
 16019                           
 16020                           ; BSR set to: 0
 16021                           ;doprnt.c: 1306: if(val < dpowers[c])
 16022                           
 16023                           ; BSR set to: 0
 16024                           
 16025                           ; BSR set to: 0
 16026  0018AC  0100               	movlb	0	; () banked
 16027  0018AE  51A8               	movf	printf@c& (0+255),w,b
 16028  0018B0  0D02               	mullw	2
 16029  0018B2  0EFC               	movlw	low _dpowers
 16030  0018B4  24F3               	addwf	prodl,w,c
 16031  0018B6  6EF6               	movwf	tblptrl,c
 16032  0018B8  0EFA               	movlw	high _dpowers
 16033  0018BA  20F4               	addwfc	prodh,w,c
 16034  0018BC  6EF7               	movwf	tblptrh,c
 16035  0018BE                     	if	1	;There are 3 active tblptr bytes
 16036  0018BE  6AF8               	clrf	tblptru,c
 16037  0018C0  0E00               	movlw	low (__mediumconst shr (0+16))
 16038  0018C2  22F8               	addwfc	tblptru,f,c
 16039  0018C4                     	endif
 16040  0018C4  0009               	tblrd		*+
 16041  0018C6  50F5               	movf	tablat,w,c
 16042  0018C8  0100               	movlb	0	; () banked
 16043  0018CA  5DA5               	subwf	printf@val& (0+255),w,b
 16044  0018CC  0009               	tblrd		*+
 16045  0018CE  50F5               	movf	tablat,w,c
 16046  0018D0  0100               	movlb	0	; () banked
 16047  0018D2  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16048  0018D4  A0D8               	btfss	status,0,c
 16049  0018D6  D003               	goto	l6324
 16050                           
 16051                           ; BSR set to: 0
 16052                           
 16053                           ; BSR set to: 0
 16054                           
 16055                           ; BSR set to: 0
 16056                           ;doprnt.c: 1307: break;
 16057  0018D8  0100               	movlb	0	; () banked
 16058  0018DA  2BA8               	incf	printf@c& (0+255),f,b
 16059  0018DC  D7E2               	goto	l6312
 16060  0018DE                     l6324:
 16061                           
 16062                           ; BSR set to: 0
 16063                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16064  0018DE  0100               	movlb	0	; () banked
 16065  0018E0  51A9               	movf	printf@width& (0+255),w,b
 16066  0018E2  0100               	movlb	0	; () banked
 16067  0018E4  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16068  0018E6  B4D8               	btfsc	status,2,c
 16069  0018E8  D00B               	goto	l6330
 16070                           
 16071                           ; BSR set to: 0
 16072  0018EA  C0A7  F09A         	movff	printf@flag,??_printf
 16073  0018EE  0E03               	movlw	3
 16074  0018F0  0100               	movlb	0	; () banked
 16075  0018F2  179A               	andwf	??_printf& (0+255),f,b
 16076  0018F4  B4D8               	btfsc	status,2,c
 16077  0018F6  D004               	goto	l6330
 16078                           
 16079                           ; BSR set to: 0
 16080                           ;doprnt.c: 1346: width--;
 16081  0018F8  0100               	movlb	0	; () banked
 16082  0018FA  07A9               	decf	printf@width& (0+255),f,b
 16083  0018FC  A0D8               	btfss	status,0,c
 16084  0018FE  07AA               	decf	(printf@width+1)& (0+255),f,b
 16085  001900                     l6330:
 16086                           
 16087                           ; BSR set to: 0
 16088                           ;doprnt.c: 1381: if(width > c)
 16089  001900  0E80               	movlw	128
 16090  001902  0100               	movlb	0	; () banked
 16091  001904  BFA8               	btfsc	printf@c& (0+255),7,b
 16092  001906  0E7F               	movlw	127
 16093  001908  0100               	movlb	0	; () banked
 16094  00190A  6F9A               	movwf	??_printf& (0+255),b
 16095  00190C  0100               	movlb	0	; () banked
 16096  00190E  51A9               	movf	printf@width& (0+255),w,b
 16097  001910  0100               	movlb	0	; () banked
 16098  001912  5DA8               	subwf	printf@c& (0+255),w,b
 16099  001914  0100               	movlb	0	; () banked
 16100  001916  51AA               	movf	(printf@width+1)& (0+255),w,b
 16101  001918  0A80               	xorlw	128
 16102  00191A  0100               	movlb	0	; () banked
 16103  00191C  599A               	subwfb	??_printf& (0+255),w,b
 16104  00191E  B0D8               	btfsc	status,0,c
 16105  001920  D00B               	goto	l6334
 16106                           
 16107                           ; BSR set to: 0
 16108                           ;doprnt.c: 1382: width -= c;
 16109  001922  0100               	movlb	0	; () banked
 16110  001924  51A8               	movf	printf@c& (0+255),w,b
 16111  001926  0100               	movlb	0	; () banked
 16112  001928  5FA9               	subwf	printf@width& (0+255),f,b
 16113  00192A  0E00               	movlw	0
 16114  00192C  0100               	movlb	0	; () banked
 16115  00192E  BFA8               	btfsc	printf@c& (0+255),7,b
 16116  001930  0EFF               	movlw	255
 16117  001932  0100               	movlb	0	; () banked
 16118  001934  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16119  001936  D005               	goto	l6336
 16120  001938                     l6334:
 16121                           
 16122                           ; BSR set to: 0
 16123                           ;doprnt.c: 1383: else
 16124                           ;doprnt.c: 1384: width = 0;
 16125  001938  0E00               	movlw	0
 16126  00193A  0100               	movlb	0	; () banked
 16127  00193C  6FAA               	movwf	(printf@width+1)& (0+255),b
 16128  00193E  0E00               	movlw	0
 16129  001940  6FA9               	movwf	printf@width& (0+255),b
 16130  001942                     l6336:
 16131                           
 16132                           ; BSR set to: 0
 16133                           ;doprnt.c: 1387: if(flag & 0x04) {
 16134  001942  0100               	movlb	0	; () banked
 16135  001944  A5A7               	btfss	printf@flag& (0+255),2,b
 16136  001946  D018               	goto	l6348
 16137                           
 16138                           ; BSR set to: 0
 16139                           ;doprnt.c: 1392: if(flag & 0x03)
 16140  001948  C0A7  F09A         	movff	printf@flag,??_printf
 16141  00194C  0E03               	movlw	3
 16142  00194E  0100               	movlb	0	; () banked
 16143  001950  179A               	andwf	??_printf& (0+255),f,b
 16144  001952  B4D8               	btfsc	status,2,c
 16145  001954  D003               	goto	l6342
 16146                           
 16147                           ; BSR set to: 0
 16148                           ;doprnt.c: 1393: (putch('-') );
 16149  001956  0E2D               	movlw	45
 16150  001958  EC54  F029         	call	_putch
 16151  00195C                     l6342:
 16152                           
 16153                           ;doprnt.c: 1415: if(width)
 16154  00195C  0100               	movlb	0	; () banked
 16155  00195E  51A9               	movf	printf@width& (0+255),w,b
 16156  001960  0100               	movlb	0	; () banked
 16157  001962  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16158  001964  B4D8               	btfsc	status,2,c
 16159  001966  D025               	goto	l6358
 16160                           
 16161                           ; BSR set to: 0
 16162                           ;doprnt.c: 1417: (putch('0') );
 16163                           
 16164                           ; BSR set to: 0
 16165                           
 16166                           ;doprnt.c: 1416: do
 16167  001968  0E30               	movlw	48
 16168  00196A  EC54  F029         	call	_putch
 16169                           
 16170                           ;doprnt.c: 1418: while(--width);
 16171  00196E  0100               	movlb	0	; () banked
 16172  001970  07A9               	decf	printf@width& (0+255),f,b
 16173  001972  A0D8               	btfss	status,0,c
 16174  001974  07AA               	decf	(printf@width+1)& (0+255),f,b
 16175  001976  D7F2               	goto	l6342
 16176  001978                     l6348:
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;doprnt.c: 1422: {
 16180                           ;doprnt.c: 1424: if(width
 16181                           ;doprnt.c: 1428: )
 16182  001978  0100               	movlb	0	; () banked
 16183  00197A  51A9               	movf	printf@width& (0+255),w,b
 16184  00197C  0100               	movlb	0	; () banked
 16185  00197E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16186  001980  B4D8               	btfsc	status,2,c
 16187  001982  D00D               	goto	l6354
 16188  001984                     l6350:
 16189                           
 16190                           ; BSR set to: 0
 16191                           ;doprnt.c: 1430: (putch(' ') );
 16192  001984  0E20               	movlw	32
 16193  001986  EC54  F029         	call	_putch
 16194                           
 16195                           ;doprnt.c: 1431: while(--width);
 16196  00198A  0100               	movlb	0	; () banked
 16197  00198C  07A9               	decf	printf@width& (0+255),f,b
 16198  00198E  A0D8               	btfss	status,0,c
 16199  001990  07AA               	decf	(printf@width+1)& (0+255),f,b
 16200  001992  0100               	movlb	0	; () banked
 16201  001994  51A9               	movf	printf@width& (0+255),w,b
 16202  001996  0100               	movlb	0	; () banked
 16203  001998  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16204  00199A  A4D8               	btfss	status,2,c
 16205  00199C  D7F3               	goto	l6350
 16206  00199E                     l6354:
 16207                           
 16208                           ; BSR set to: 0
 16209                           ;doprnt.c: 1438: if(flag & 0x03)
 16210  00199E  C0A7  F09A         	movff	printf@flag,??_printf
 16211  0019A2  0E03               	movlw	3
 16212  0019A4  0100               	movlb	0	; () banked
 16213  0019A6  179A               	andwf	??_printf& (0+255),f,b
 16214  0019A8  B4D8               	btfsc	status,2,c
 16215  0019AA  D003               	goto	l6358
 16216                           
 16217                           ; BSR set to: 0
 16218                           ;doprnt.c: 1439: (putch('-') );
 16219  0019AC  0E2D               	movlw	45
 16220  0019AE  EC54  F029         	call	_putch
 16221  0019B2                     l6358:
 16222                           
 16223                           ;doprnt.c: 1469: }
 16224                           ;doprnt.c: 1472: prec = c;
 16225  0019B2  C0A8  F09E         	movff	printf@c,printf@prec
 16226                           
 16227                           ;doprnt.c: 1474: while(prec--) {
 16228  0019B6  D02C               	goto	l6364
 16229  0019B8                     l6360:
 16230                           
 16231                           ;doprnt.c: 1478: {
 16232                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16233  0019B8  0100               	movlb	0	; () banked
 16234  0019BA  519E               	movf	printf@prec& (0+255),w,b
 16235  0019BC  0D02               	mullw	2
 16236  0019BE  0EFC               	movlw	low _dpowers
 16237  0019C0  24F3               	addwf	prodl,w,c
 16238  0019C2  6EF6               	movwf	tblptrl,c
 16239  0019C4  0EFA               	movlw	high _dpowers
 16240  0019C6  20F4               	addwfc	prodh,w,c
 16241  0019C8  6EF7               	movwf	tblptrh,c
 16242  0019CA                     	if	1	;There are 3 active tblptr bytes
 16243  0019CA  6AF8               	clrf	tblptru,c
 16244  0019CC  0E00               	movlw	low (__mediumconst shr (0+16))
 16245  0019CE  22F8               	addwfc	tblptru,f,c
 16246  0019D0                     	endif
 16247  0019D0  0009               	tblrd		*+
 16248  0019D2  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16249  0019D6  000A               	tblrd		*-
 16250  0019D8  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16251  0019DC  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16252  0019E0  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16253  0019E4  EC70  F023         	call	___lwdiv	;wreg free
 16254  0019E8  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16255  0019EC  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16256  0019F0  0E00               	movlw	0
 16257  0019F2  0100               	movlb	0	; () banked
 16258  0019F4  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16259  0019F6  0E0A               	movlw	10
 16260  0019F8  6F89               	movwf	___lwmod@divisor& (0+255),b
 16261  0019FA  EC8A  F024         	call	___lwmod	;wreg free
 16262  0019FE  0100               	movlb	0	; () banked
 16263  001A00  5187               	movf	?___lwmod& (0+255),w,b
 16264  001A02  0F30               	addlw	48
 16265  001A04  0100               	movlb	0	; () banked
 16266  001A06  6FA8               	movwf	printf@c& (0+255),b
 16267                           
 16268                           ; BSR set to: 0
 16269                           ;doprnt.c: 1523: }
 16270                           ;doprnt.c: 1524: (putch(c) );
 16271  001A08  0100               	movlb	0	; () banked
 16272  001A0A  51A8               	movf	printf@c& (0+255),w,b
 16273  001A0C  EC54  F029         	call	_putch
 16274  001A10                     l6364:
 16275  001A10  0100               	movlb	0	; () banked
 16276  001A12  079E               	decf	printf@prec& (0+255),f,b
 16277  001A14  0100               	movlb	0	; () banked
 16278  001A16  299E               	incf	printf@prec& (0+255),w,b
 16279  001A18  A4D8               	btfss	status,2,c
 16280  001A1A  D7CE               	goto	l6360
 16281  001A1C                     l6366:
 16282  001A1C  C08E  FFF6         	movff	printf@f,tblptrl
 16283  001A20  C08F  FFF7         	movff	printf@f+1,tblptrh
 16284  001A24  0100               	movlb	0	; () banked
 16285  001A26  4B8E               	infsnz	printf@f& (0+255),f,b
 16286  001A28  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16287  001A2A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16288  001A2A  6AF8               	clrf	tblptru,c
 16289  001A2C                     	endif
 16290  001A2C                     	if	0	;tblptru may be non-zero
 16291  001A2C                     	endif
 16292  001A2C  0008               	tblrd		*
 16293  001A2E  CFF5 F0A8          	movff	tablat,printf@c
 16294  001A32  0100               	movlb	0	; () banked
 16295  001A34  51A8               	movf	printf@c& (0+255),w,b
 16296  001A36  B4D8               	btfsc	status,2,c
 16297  001A38  0012               	return	
 16298  001A3A  D5EB               	goto	l6236
 16299  001A3C                     __end_of_printf:
 16300                           	opt stack 0
 16301                           tblptru	equ	0xFF8
 16302                           tblptrh	equ	0xFF7
 16303                           tblptrl	equ	0xFF6
 16304                           tablat	equ	0xFF5
 16305                           prodh	equ	0xFF4
 16306                           prodl	equ	0xFF3
 16307                           intcon	equ	0xFF2
 16308                           intcon2	equ	0xFF1
 16309                           intcon3	equ	0xFF0
 16310                           indf0	equ	0xFEF
 16311                           postinc0	equ	0xFEE
 16312                           fsr0h	equ	0xFEA
 16313                           fsr0l	equ	0xFE9
 16314                           wreg	equ	0xFE8
 16315                           postdec1	equ	0xFE5
 16316                           fsr1l	equ	0xFE1
 16317                           indf2	equ	0xFDF
 16318                           postinc2	equ	0xFDE
 16319                           postdec2	equ	0xFDD
 16320                           fsr2h	equ	0xFDA
 16321                           fsr2l	equ	0xFD9
 16322                           status	equ	0xFD8
 16323                           
 16324 ;; *************** function _putch *****************
 16325 ;; Defined at:
 16326 ;;		line 20 in file "lcd.c"
 16327 ;; Parameters:    Size  Location     Type
 16328 ;;  data            1    wreg     unsigned char 
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;  data            1    2[BANK0 ] unsigned char 
 16331 ;; Return value:  Size  Location     Type
 16332 ;;                  1    wreg      void 
 16333 ;; Registers used:
 16334 ;;		wreg, status,2, status,0, cstack
 16335 ;; Tracked objects:
 16336 ;;		On entry : 0/0
 16337 ;;		On exit  : 0/0
 16338 ;;		Unchanged: 0/0
 16339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16344 ;;Total ram usage:        1 bytes
 16345 ;; Hardware stack levels used:    1
 16346 ;; Hardware stack levels required when called:    8
 16347 ;; This function calls:
 16348 ;;		_lcdNibble
 16349 ;; This function is called by:
 16350 ;;		_printf
 16351 ;; This function uses a non-reentrant model
 16352 ;;
 16353                           
 16354                           	psect	text52
 16355  0052A8                     __ptext52:
 16356                           	opt stack 0
 16357  0052A8                     _putch:
 16358                           	opt stack 18
 16359                           
 16360                           ;incstack = 0
 16361                           ;putch@data stored from wreg
 16362  0052A8  0100               	movlb	0	; () banked
 16363  0052AA  6F82               	movwf	putch@data& (0+255),b
 16364                           
 16365                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16366  0052AC  848C               	bsf	3980,2,c	;volatile
 16367                           
 16368                           ;lcd.c: 22: lcdNibble(data);
 16369  0052AE  0100               	movlb	0	; () banked
 16370  0052B0  5182               	movf	putch@data& (0+255),w,b
 16371  0052B2  EC56  F024         	call	_lcdNibble
 16372  0052B6  0012               	return		;funcret
 16373  0052B8                     __end_of_putch:
 16374                           	opt stack 0
 16375                           tblptru	equ	0xFF8
 16376                           tblptrh	equ	0xFF7
 16377                           tblptrl	equ	0xFF6
 16378                           tablat	equ	0xFF5
 16379                           prodh	equ	0xFF4
 16380                           prodl	equ	0xFF3
 16381                           intcon	equ	0xFF2
 16382                           intcon2	equ	0xFF1
 16383                           intcon3	equ	0xFF0
 16384                           indf0	equ	0xFEF
 16385                           postinc0	equ	0xFEE
 16386                           fsr0h	equ	0xFEA
 16387                           fsr0l	equ	0xFE9
 16388                           wreg	equ	0xFE8
 16389                           postdec1	equ	0xFE5
 16390                           fsr1l	equ	0xFE1
 16391                           indf2	equ	0xFDF
 16392                           postinc2	equ	0xFDE
 16393                           postdec2	equ	0xFDD
 16394                           fsr2h	equ	0xFDA
 16395                           fsr2l	equ	0xFD9
 16396                           status	equ	0xFD8
 16397                           
 16398 ;; *************** function _isdigit *****************
 16399 ;; Defined at:
 16400 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16401 ;; Parameters:    Size  Location     Type
 16402 ;;  c               1    wreg     unsigned char 
 16403 ;; Auto vars:     Size  Location     Type
 16404 ;;  c               1    2[BANK0 ] unsigned char 
 16405 ;; Return value:  Size  Location     Type
 16406 ;;		None               void
 16407 ;; Registers used:
 16408 ;;		wreg, status,2, status,0
 16409 ;; Tracked objects:
 16410 ;;		On entry : 0/0
 16411 ;;		On exit  : 0/0
 16412 ;;		Unchanged: 0/0
 16413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16417 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16418 ;;Total ram usage:        3 bytes
 16419 ;; Hardware stack levels used:    1
 16420 ;; Hardware stack levels required when called:    7
 16421 ;; This function calls:
 16422 ;;		Nothing
 16423 ;; This function is called by:
 16424 ;;		_printf
 16425 ;; This function uses a non-reentrant model
 16426 ;;
 16427                           
 16428                           	psect	text53
 16429  0050D2                     __ptext53:
 16430                           	opt stack 0
 16431  0050D2                     _isdigit:
 16432                           	opt stack 19
 16433                           
 16434                           ;incstack = 0
 16435                           ;isdigit@c stored from wreg
 16436  0050D2  0100               	movlb	0	; () banked
 16437  0050D4  6F82               	movwf	isdigit@c& (0+255),b
 16438  0050D6  0E00               	movlw	0
 16439  0050D8  0100               	movlb	0	; () banked
 16440  0050DA  6F81               	movwf	_isdigit$2058& (0+255),b
 16441                           
 16442                           ; BSR set to: 0
 16443  0050DC  0E3A               	movlw	58
 16444  0050DE  0100               	movlb	0	; () banked
 16445  0050E0  6182               	cpfslt	isdigit@c& (0+255),b
 16446  0050E2  D007               	goto	l6084
 16447                           
 16448                           ; BSR set to: 0
 16449  0050E4  0E2F               	movlw	47
 16450  0050E6  0100               	movlb	0	; () banked
 16451  0050E8  6582               	cpfsgt	isdigit@c& (0+255),b
 16452  0050EA  D003               	goto	l6084
 16453                           
 16454                           ; BSR set to: 0
 16455  0050EC  0E01               	movlw	1
 16456  0050EE  0100               	movlb	0	; () banked
 16457  0050F0  6F81               	movwf	_isdigit$2058& (0+255),b
 16458  0050F2                     l6084:
 16459                           
 16460                           ; BSR set to: 0
 16461  0050F2  C081  F080         	movff	_isdigit$2058,??_isdigit
 16462  0050F6  0100               	movlb	0	; () banked
 16463  0050F8  3180               	rrcf	??_isdigit& (0+255),w,b
 16464  0050FA  0012               	return	
 16465  0050FC                     __end_of_isdigit:
 16466                           	opt stack 0
 16467                           tblptru	equ	0xFF8
 16468                           tblptrh	equ	0xFF7
 16469                           tblptrl	equ	0xFF6
 16470                           tablat	equ	0xFF5
 16471                           prodh	equ	0xFF4
 16472                           prodl	equ	0xFF3
 16473                           intcon	equ	0xFF2
 16474                           intcon2	equ	0xFF1
 16475                           intcon3	equ	0xFF0
 16476                           indf0	equ	0xFEF
 16477                           postinc0	equ	0xFEE
 16478                           fsr0h	equ	0xFEA
 16479                           fsr0l	equ	0xFE9
 16480                           wreg	equ	0xFE8
 16481                           postdec1	equ	0xFE5
 16482                           fsr1l	equ	0xFE1
 16483                           indf2	equ	0xFDF
 16484                           postinc2	equ	0xFDE
 16485                           postdec2	equ	0xFDD
 16486                           fsr2h	equ	0xFDA
 16487                           fsr2l	equ	0xFD9
 16488                           status	equ	0xFD8
 16489                           
 16490 ;; *************** function ___wmul *****************
 16491 ;; Defined at:
 16492 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16493 ;; Parameters:    Size  Location     Type
 16494 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16495 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16496 ;; Auto vars:     Size  Location     Type
 16497 ;;  product         2    4[BANK0 ] unsigned int 
 16498 ;; Return value:  Size  Location     Type
 16499 ;;                  2    0[BANK0 ] unsigned int 
 16500 ;; Registers used:
 16501 ;;		wreg, status,2, status,0, prodl, prodh
 16502 ;; Tracked objects:
 16503 ;;		On entry : 0/0
 16504 ;;		On exit  : 0/0
 16505 ;;		Unchanged: 0/0
 16506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16507 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16510 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16511 ;;Total ram usage:        6 bytes
 16512 ;; Hardware stack levels used:    1
 16513 ;; Hardware stack levels required when called:    7
 16514 ;; This function calls:
 16515 ;;		Nothing
 16516 ;; This function is called by:
 16517 ;;		_printf
 16518 ;; This function uses a non-reentrant model
 16519 ;;
 16520                           
 16521                           	psect	text54
 16522  004DA4                     __ptext54:
 16523                           	opt stack 0
 16524  004DA4                     ___wmul:
 16525                           	opt stack 19
 16526                           
 16527                           ; BSR set to: 0
 16528                           ;incstack = 0
 16529  004DA4  0100               	movlb	0	; () banked
 16530  004DA6  5180               	movf	___wmul@multiplier& (0+255),w,b
 16531  004DA8  0100               	movlb	0	; () banked
 16532  004DAA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16533  004DAC  CFF3 F084          	movff	prodl,___wmul@product
 16534  004DB0  CFF4 F085          	movff	prodh,___wmul@product+1
 16535  004DB4  0100               	movlb	0	; () banked
 16536  004DB6  5180               	movf	___wmul@multiplier& (0+255),w,b
 16537  004DB8  0100               	movlb	0	; () banked
 16538  004DBA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16539  004DBC  50F3               	movf	prodl,w,c
 16540  004DBE  0100               	movlb	0	; () banked
 16541  004DC0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16542  004DC2  0100               	movlb	0	; () banked
 16543  004DC4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16544  004DC6  0100               	movlb	0	; () banked
 16545  004DC8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16546  004DCA  50F3               	movf	prodl,w,c
 16547  004DCC  0100               	movlb	0	; () banked
 16548  004DCE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16549                           
 16550                           ; BSR set to: 0
 16551  004DD0  C084  F080         	movff	___wmul@product,?___wmul
 16552  004DD4  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16553  004DD8  0012               	return	
 16554  004DDA                     __end_of___wmul:
 16555                           	opt stack 0
 16556                           tblptru	equ	0xFF8
 16557                           tblptrh	equ	0xFF7
 16558                           tblptrl	equ	0xFF6
 16559                           tablat	equ	0xFF5
 16560                           prodh	equ	0xFF4
 16561                           prodl	equ	0xFF3
 16562                           intcon	equ	0xFF2
 16563                           intcon2	equ	0xFF1
 16564                           intcon3	equ	0xFF0
 16565                           indf0	equ	0xFEF
 16566                           postinc0	equ	0xFEE
 16567                           fsr0h	equ	0xFEA
 16568                           fsr0l	equ	0xFE9
 16569                           wreg	equ	0xFE8
 16570                           postdec1	equ	0xFE5
 16571                           fsr1l	equ	0xFE1
 16572                           indf2	equ	0xFDF
 16573                           postinc2	equ	0xFDE
 16574                           postdec2	equ	0xFDD
 16575                           fsr2h	equ	0xFDA
 16576                           fsr2l	equ	0xFD9
 16577                           status	equ	0xFD8
 16578                           
 16579 ;; *************** function ___lwmod *****************
 16580 ;; Defined at:
 16581 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16582 ;; Parameters:    Size  Location     Type
 16583 ;;  dividend        2    7[BANK0 ] unsigned int 
 16584 ;;  divisor         2    9[BANK0 ] unsigned int 
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;  counter         1   11[BANK0 ] unsigned char 
 16587 ;; Return value:  Size  Location     Type
 16588 ;;                  2    7[BANK0 ] unsigned int 
 16589 ;; Registers used:
 16590 ;;		wreg, status,2, status,0
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16596 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16599 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16600 ;;Total ram usage:        5 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    7
 16603 ;; This function calls:
 16604 ;;		Nothing
 16605 ;; This function is called by:
 16606 ;;		_printf
 16607 ;; This function uses a non-reentrant model
 16608 ;;
 16609                           
 16610                           	psect	text55
 16611  004914                     __ptext55:
 16612                           	opt stack 0
 16613  004914                     ___lwmod:
 16614                           	opt stack 19
 16615                           
 16616                           ; BSR set to: 0
 16617                           ;incstack = 0
 16618  004914  0100               	movlb	0	; () banked
 16619  004916  5189               	movf	___lwmod@divisor& (0+255),w,b
 16620  004918  0100               	movlb	0	; () banked
 16621  00491A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16622  00491C  B4D8               	btfsc	status,2,c
 16623  00491E  D026               	goto	l1863
 16624                           
 16625                           ; BSR set to: 0
 16626  004920  0E01               	movlw	1
 16627  004922  0100               	movlb	0	; () banked
 16628  004924  6F8B               	movwf	___lwmod@counter& (0+255),b
 16629  004926  D006               	goto	l6122
 16630  004928                     l6120:
 16631                           
 16632                           ; BSR set to: 0
 16633  004928  0100               	movlb	0	; () banked
 16634  00492A  90D8               	bcf	status,0,c
 16635  00492C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16636  00492E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16637  004930  0100               	movlb	0	; () banked
 16638  004932  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16639  004934                     l6122:
 16640                           
 16641                           ; BSR set to: 0
 16642  004934  0100               	movlb	0	; () banked
 16643  004936  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16644  004938  D7F7               	goto	l6120
 16645  00493A                     l6124:
 16646                           
 16647                           ; BSR set to: 0
 16648  00493A  0100               	movlb	0	; () banked
 16649  00493C  5189               	movf	___lwmod@divisor& (0+255),w,b
 16650  00493E  0100               	movlb	0	; () banked
 16651  004940  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16652  004942  0100               	movlb	0	; () banked
 16653  004944  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16654  004946  0100               	movlb	0	; () banked
 16655  004948  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16656  00494A  A0D8               	btfss	status,0,c
 16657  00494C  D008               	goto	l6128
 16658                           
 16659                           ; BSR set to: 0
 16660  00494E  0100               	movlb	0	; () banked
 16661  004950  5189               	movf	___lwmod@divisor& (0+255),w,b
 16662  004952  0100               	movlb	0	; () banked
 16663  004954  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16664  004956  0100               	movlb	0	; () banked
 16665  004958  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16666  00495A  0100               	movlb	0	; () banked
 16667  00495C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16668  00495E                     l6128:
 16669                           
 16670                           ; BSR set to: 0
 16671  00495E  0100               	movlb	0	; () banked
 16672  004960  90D8               	bcf	status,0,c
 16673  004962  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16674  004964  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16675                           
 16676                           ; BSR set to: 0
 16677  004966  0100               	movlb	0	; () banked
 16678  004968  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16679  00496A  D7E7               	goto	l6124
 16680  00496C                     l1863:
 16681                           
 16682                           ; BSR set to: 0
 16683  00496C  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16684  004970  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16685                           
 16686                           ; BSR set to: 0
 16687  004974  0012               	return		;funcret
 16688  004976                     __end_of___lwmod:
 16689                           	opt stack 0
 16690                           tblptru	equ	0xFF8
 16691                           tblptrh	equ	0xFF7
 16692                           tblptrl	equ	0xFF6
 16693                           tablat	equ	0xFF5
 16694                           prodh	equ	0xFF4
 16695                           prodl	equ	0xFF3
 16696                           intcon	equ	0xFF2
 16697                           intcon2	equ	0xFF1
 16698                           intcon3	equ	0xFF0
 16699                           indf0	equ	0xFEF
 16700                           postinc0	equ	0xFEE
 16701                           fsr0h	equ	0xFEA
 16702                           fsr0l	equ	0xFE9
 16703                           wreg	equ	0xFE8
 16704                           postdec1	equ	0xFE5
 16705                           fsr1l	equ	0xFE1
 16706                           indf2	equ	0xFDF
 16707                           postinc2	equ	0xFDE
 16708                           postdec2	equ	0xFDD
 16709                           fsr2h	equ	0xFDA
 16710                           fsr2l	equ	0xFD9
 16711                           status	equ	0xFD8
 16712                           
 16713 ;; *************** function ___lwdiv *****************
 16714 ;; Defined at:
 16715 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16716 ;; Parameters:    Size  Location     Type
 16717 ;;  dividend        2    0[BANK0 ] unsigned int 
 16718 ;;  divisor         2    2[BANK0 ] unsigned int 
 16719 ;; Auto vars:     Size  Location     Type
 16720 ;;  quotient        2    4[BANK0 ] unsigned int 
 16721 ;;  counter         1    6[BANK0 ] unsigned char 
 16722 ;; Return value:  Size  Location     Type
 16723 ;;                  2    0[BANK0 ] unsigned int 
 16724 ;; Registers used:
 16725 ;;		wreg, status,2, status,0
 16726 ;; Tracked objects:
 16727 ;;		On entry : 0/0
 16728 ;;		On exit  : 0/0
 16729 ;;		Unchanged: 0/0
 16730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16731 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16732 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16734 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16735 ;;Total ram usage:        7 bytes
 16736 ;; Hardware stack levels used:    1
 16737 ;; Hardware stack levels required when called:    7
 16738 ;; This function calls:
 16739 ;;		Nothing
 16740 ;; This function is called by:
 16741 ;;		_printf
 16742 ;; This function uses a non-reentrant model
 16743 ;;
 16744                           
 16745                           	psect	text56
 16746  0046E0                     __ptext56:
 16747                           	opt stack 0
 16748  0046E0                     ___lwdiv:
 16749                           	opt stack 19
 16750                           
 16751                           ; BSR set to: 0
 16752                           ;incstack = 0
 16753  0046E0  0E00               	movlw	0
 16754  0046E2  0100               	movlb	0	; () banked
 16755  0046E4  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16756  0046E6  0E00               	movlw	0
 16757  0046E8  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16758                           
 16759                           ; BSR set to: 0
 16760  0046EA  0100               	movlb	0	; () banked
 16761  0046EC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16762  0046EE  0100               	movlb	0	; () banked
 16763  0046F0  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16764  0046F2  B4D8               	btfsc	status,2,c
 16765  0046F4  D02C               	goto	l1853
 16766                           
 16767                           ; BSR set to: 0
 16768  0046F6  0E01               	movlw	1
 16769  0046F8  0100               	movlb	0	; () banked
 16770  0046FA  6F86               	movwf	___lwdiv@counter& (0+255),b
 16771  0046FC  D006               	goto	l6102
 16772  0046FE                     l6100:
 16773                           
 16774                           ; BSR set to: 0
 16775  0046FE  0100               	movlb	0	; () banked
 16776  004700  90D8               	bcf	status,0,c
 16777  004702  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16778  004704  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16779  004706  0100               	movlb	0	; () banked
 16780  004708  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16781  00470A                     l6102:
 16782                           
 16783                           ; BSR set to: 0
 16784  00470A  0100               	movlb	0	; () banked
 16785  00470C  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16786  00470E  D7F7               	goto	l6100
 16787  004710                     l6104:
 16788                           
 16789                           ; BSR set to: 0
 16790  004710  0100               	movlb	0	; () banked
 16791  004712  90D8               	bcf	status,0,c
 16792  004714  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16793  004716  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16794                           
 16795                           ; BSR set to: 0
 16796  004718  0100               	movlb	0	; () banked
 16797  00471A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16798  00471C  0100               	movlb	0	; () banked
 16799  00471E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16800  004720  0100               	movlb	0	; () banked
 16801  004722  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16802  004724  0100               	movlb	0	; () banked
 16803  004726  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16804  004728  A0D8               	btfss	status,0,c
 16805  00472A  D00A               	goto	l6112
 16806                           
 16807                           ; BSR set to: 0
 16808  00472C  0100               	movlb	0	; () banked
 16809  00472E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16810  004730  0100               	movlb	0	; () banked
 16811  004732  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16812  004734  0100               	movlb	0	; () banked
 16813  004736  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16814  004738  0100               	movlb	0	; () banked
 16815  00473A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16816                           
 16817                           ; BSR set to: 0
 16818  00473C  0100               	movlb	0	; () banked
 16819  00473E  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16820  004740                     l6112:
 16821                           
 16822                           ; BSR set to: 0
 16823  004740  0100               	movlb	0	; () banked
 16824  004742  90D8               	bcf	status,0,c
 16825  004744  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16826  004746  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16827                           
 16828                           ; BSR set to: 0
 16829  004748  0100               	movlb	0	; () banked
 16830  00474A  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16831  00474C  D7E1               	goto	l6104
 16832  00474E                     l1853:
 16833                           
 16834                           ; BSR set to: 0
 16835  00474E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16836  004752  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16837                           
 16838                           ; BSR set to: 0
 16839  004756  0012               	return		;funcret
 16840  004758                     __end_of___lwdiv:
 16841                           	opt stack 0
 16842                           tblptru	equ	0xFF8
 16843                           tblptrh	equ	0xFF7
 16844                           tblptrl	equ	0xFF6
 16845                           tablat	equ	0xFF5
 16846                           prodh	equ	0xFF4
 16847                           prodl	equ	0xFF3
 16848                           intcon	equ	0xFF2
 16849                           intcon2	equ	0xFF1
 16850                           intcon3	equ	0xFF0
 16851                           indf0	equ	0xFEF
 16852                           postinc0	equ	0xFEE
 16853                           fsr0h	equ	0xFEA
 16854                           fsr0l	equ	0xFE9
 16855                           wreg	equ	0xFE8
 16856                           postdec1	equ	0xFE5
 16857                           fsr1l	equ	0xFE1
 16858                           indf2	equ	0xFDF
 16859                           postinc2	equ	0xFDE
 16860                           postdec2	equ	0xFDD
 16861                           fsr2h	equ	0xFDA
 16862                           fsr2l	equ	0xFD9
 16863                           status	equ	0xFD8
 16864                           
 16865 ;; *************** function _lcdInst *****************
 16866 ;; Defined at:
 16867 ;;		line 15 in file "lcd.c"
 16868 ;; Parameters:    Size  Location     Type
 16869 ;;  data            1    wreg     unsigned char 
 16870 ;; Auto vars:     Size  Location     Type
 16871 ;;  data            1    2[BANK0 ] unsigned char 
 16872 ;; Return value:  Size  Location     Type
 16873 ;;                  1    wreg      void 
 16874 ;; Registers used:
 16875 ;;		wreg, status,2, status,0, cstack
 16876 ;; Tracked objects:
 16877 ;;		On entry : 0/0
 16878 ;;		On exit  : 0/0
 16879 ;;		Unchanged: 0/0
 16880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16885 ;;Total ram usage:        1 bytes
 16886 ;; Hardware stack levels used:    1
 16887 ;; Hardware stack levels required when called:    8
 16888 ;; This function calls:
 16889 ;;		_lcdNibble
 16890 ;; This function is called by:
 16891 ;;		_UI
 16892 ;;		_change_state_to_menu_start
 16893 ;;		_change_state_to_menu_12
 16894 ;;		_change_state_to_menu_22
 16895 ;;		_initLCD
 16896 ;;		_printRTC
 16897 ;;		_Loading
 16898 ;;		_EEPROM_write
 16899 ;;		_Test
 16900 ;;		_algorithmTest
 16901 ;;		_sensorTest
 16902 ;;		_actuatorTest
 16903 ;;		_BothServos
 16904 ;;		_PortTestA5
 16905 ;;		_PusherTest
 16906 ;;		_SpeedTest
 16907 ;;		_BlockerTest
 16908 ;;		_ToggleTestA5
 16909 ;; This function uses a non-reentrant model
 16910 ;;
 16911                           
 16912                           	psect	text57
 16913  0052B8                     __ptext57:
 16914                           	opt stack 0
 16915  0052B8                     _lcdInst:
 16916                           	opt stack 20
 16917                           
 16918                           ; BSR set to: 0
 16919                           ;incstack = 0
 16920                           ;lcdInst@data stored from wreg
 16921  0052B8  0100               	movlb	0	; () banked
 16922  0052BA  6F82               	movwf	lcdInst@data& (0+255),b
 16923                           
 16924                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16925  0052BC  948C               	bcf	3980,2,c	;volatile
 16926                           
 16927                           ;lcd.c: 17: lcdNibble(data);
 16928  0052BE  0100               	movlb	0	; () banked
 16929  0052C0  5182               	movf	lcdInst@data& (0+255),w,b
 16930  0052C2  EC56  F024         	call	_lcdNibble
 16931  0052C6  0012               	return		;funcret
 16932  0052C8                     __end_of_lcdInst:
 16933                           	opt stack 0
 16934                           tblptru	equ	0xFF8
 16935                           tblptrh	equ	0xFF7
 16936                           tblptrl	equ	0xFF6
 16937                           tablat	equ	0xFF5
 16938                           prodh	equ	0xFF4
 16939                           prodl	equ	0xFF3
 16940                           intcon	equ	0xFF2
 16941                           intcon2	equ	0xFF1
 16942                           intcon3	equ	0xFF0
 16943                           indf0	equ	0xFEF
 16944                           postinc0	equ	0xFEE
 16945                           fsr0h	equ	0xFEA
 16946                           fsr0l	equ	0xFE9
 16947                           wreg	equ	0xFE8
 16948                           postdec1	equ	0xFE5
 16949                           fsr1l	equ	0xFE1
 16950                           indf2	equ	0xFDF
 16951                           postinc2	equ	0xFDE
 16952                           postdec2	equ	0xFDD
 16953                           fsr2h	equ	0xFDA
 16954                           fsr2l	equ	0xFD9
 16955                           status	equ	0xFD8
 16956                           
 16957 ;; *************** function _lcdNibble *****************
 16958 ;; Defined at:
 16959 ;;		line 25 in file "lcd.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;  data            1    wreg     unsigned char 
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;  data            1    1[BANK0 ] unsigned char 
 16964 ;;  temp            1    0[BANK0 ] unsigned char 
 16965 ;; Return value:  Size  Location     Type
 16966 ;;                  1    wreg      void 
 16967 ;; Registers used:
 16968 ;;		wreg, status,2, status,0
 16969 ;; Tracked objects:
 16970 ;;		On entry : 0/0
 16971 ;;		On exit  : 0/0
 16972 ;;		Unchanged: 0/0
 16973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16978 ;;Total ram usage:        2 bytes
 16979 ;; Hardware stack levels used:    1
 16980 ;; Hardware stack levels required when called:    7
 16981 ;; This function calls:
 16982 ;;		Nothing
 16983 ;; This function is called by:
 16984 ;;		_lcdInst
 16985 ;;		_putch
 16986 ;; This function uses a non-reentrant model
 16987 ;;
 16988                           
 16989                           	psect	text58
 16990  0048AC                     __ptext58:
 16991                           	opt stack 0
 16992  0048AC                     _lcdNibble:
 16993                           	opt stack 20
 16994                           
 16995                           ;incstack = 0
 16996                           ;lcdNibble@data stored from wreg
 16997  0048AC  0100               	movlb	0	; () banked
 16998  0048AE  6F81               	movwf	lcdNibble@data& (0+255),b
 16999                           
 17000                           ;lcd.c: 27: char temp = data & 0xF0;
 17001  0048B0  0100               	movlb	0	; () banked
 17002  0048B2  5181               	movf	lcdNibble@data& (0+255),w,b
 17003  0048B4  0BF0               	andlw	240
 17004  0048B6  0100               	movlb	0	; () banked
 17005  0048B8  6F80               	movwf	lcdNibble@temp& (0+255),b
 17006                           
 17007                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17008  0048BA  508C               	movf	3980,w,c	;volatile
 17009  0048BC  0B0F               	andlw	15
 17010  0048BE  6E8C               	movwf	3980,c	;volatile
 17011                           
 17012                           ;lcd.c: 29: LATD = temp | LATD;
 17013  0048C0  0100               	movlb	0	; () banked
 17014  0048C2  5180               	movf	lcdNibble@temp& (0+255),w,b
 17015  0048C4  108C               	iorwf	3980,w,c	;volatile
 17016  0048C6  6E8C               	movwf	3980,c	;volatile
 17017                           
 17018                           ; BSR set to: 0
 17019                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17020  0048C8  868C               	bsf	3980,3,c	;volatile
 17021                           
 17022                           ; BSR set to: 0
 17023                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17024  0048CA  0E42               	movlw	66
 17025  0048CC                     u9997:
 17026  0048CC  2EE8               	decfsz	wreg,f,c
 17027  0048CE  D7FE               	bra	u9997
 17028  0048D0  D000               	nop2	
 17029                           
 17030                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17031  0048D2  968C               	bcf	3980,3,c	;volatile
 17032                           
 17033                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17034  0048D4  0E42               	movlw	66
 17035  0048D6                     u10007:
 17036  0048D6  2EE8               	decfsz	wreg,f,c
 17037  0048D8  D7FE               	bra	u10007
 17038  0048DA  D000               	nop2	
 17039                           
 17040                           ;lcd.c: 36: data = data << 4;
 17041  0048DC  0100               	movlb	0	; () banked
 17042  0048DE  3981               	swapf	lcdNibble@data& (0+255),w,b
 17043  0048E0  0BF0               	andlw	240
 17044  0048E2  0100               	movlb	0	; () banked
 17045  0048E4  6F81               	movwf	lcdNibble@data& (0+255),b
 17046                           
 17047                           ;lcd.c: 38: temp = data & 0xF0;
 17048  0048E6  0100               	movlb	0	; () banked
 17049  0048E8  5181               	movf	lcdNibble@data& (0+255),w,b
 17050  0048EA  0BF0               	andlw	240
 17051  0048EC  0100               	movlb	0	; () banked
 17052  0048EE  6F80               	movwf	lcdNibble@temp& (0+255),b
 17053                           
 17054                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17055  0048F0  508C               	movf	3980,w,c	;volatile
 17056  0048F2  0B0F               	andlw	15
 17057  0048F4  6E8C               	movwf	3980,c	;volatile
 17058                           
 17059                           ;lcd.c: 40: LATD = temp | LATD;
 17060  0048F6  0100               	movlb	0	; () banked
 17061  0048F8  5180               	movf	lcdNibble@temp& (0+255),w,b
 17062  0048FA  108C               	iorwf	3980,w,c	;volatile
 17063  0048FC  6E8C               	movwf	3980,c	;volatile
 17064                           
 17065                           ; BSR set to: 0
 17066                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17067  0048FE  868C               	bsf	3980,3,c	;volatile
 17068                           
 17069                           ; BSR set to: 0
 17070                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17071  004900  0E42               	movlw	66
 17072  004902                     u10017:
 17073  004902  2EE8               	decfsz	wreg,f,c
 17074  004904  D7FE               	bra	u10017
 17075  004906  D000               	nop2	
 17076                           
 17077                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17078  004908  968C               	bcf	3980,3,c	;volatile
 17079                           
 17080                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17081  00490A  0E42               	movlw	66
 17082  00490C                     u10027:
 17083  00490C  2EE8               	decfsz	wreg,f,c
 17084  00490E  D7FE               	bra	u10027
 17085  004910  D000               	nop2	
 17086  004912  0012               	return		;funcret
 17087  004914                     __end_of_lcdNibble:
 17088                           	opt stack 0
 17089                           tblptru	equ	0xFF8
 17090                           tblptrh	equ	0xFF7
 17091                           tblptrl	equ	0xFF6
 17092                           tablat	equ	0xFF5
 17093                           prodh	equ	0xFF4
 17094                           prodl	equ	0xFF3
 17095                           intcon	equ	0xFF2
 17096                           intcon2	equ	0xFF1
 17097                           intcon3	equ	0xFF0
 17098                           indf0	equ	0xFEF
 17099                           postinc0	equ	0xFEE
 17100                           fsr0h	equ	0xFEA
 17101                           fsr0l	equ	0xFE9
 17102                           wreg	equ	0xFE8
 17103                           postdec1	equ	0xFE5
 17104                           fsr1l	equ	0xFE1
 17105                           indf2	equ	0xFDF
 17106                           postinc2	equ	0xFDE
 17107                           postdec2	equ	0xFDD
 17108                           fsr2h	equ	0xFDA
 17109                           fsr2l	equ	0xFD9
 17110                           status	equ	0xFD8
 17111                           
 17112 ;; *************** function _handler *****************
 17113 ;; Defined at:
 17114 ;;		line 16 in file "interruptHandler.c"
 17115 ;; Parameters:    Size  Location     Type
 17116 ;;		None
 17117 ;; Auto vars:     Size  Location     Type
 17118 ;;		None
 17119 ;; Return value:  Size  Location     Type
 17120 ;;                  1    wreg      void 
 17121 ;; Registers used:
 17122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17123 ;; Tracked objects:
 17124 ;;		On entry : 0/0
 17125 ;;		On exit  : 0/0
 17126 ;;		Unchanged: 0/0
 17127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17130 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17131 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17132 ;;Total ram usage:       16 bytes
 17133 ;; Hardware stack levels used:    1
 17134 ;; Hardware stack levels required when called:    6
 17135 ;; This function calls:
 17136 ;;		_printSortTimer
 17137 ;;		_updateMenu
 17138 ;;		_updateServoStates
 17139 ;; This function is called by:
 17140 ;;		Interrupt level 2
 17141 ;; This function uses a non-reentrant model
 17142 ;;
 17143                           
 17144                           	psect	intcode
 17145  000008                     __pintcode:
 17146                           	opt stack 0
 17147  000008                     _handler:
 17148                           	opt stack 18
 17149                           
 17150                           ;incstack = 0
 17151  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17152  00000A  ED71  F01B         	call	int_func,f	;refresh shadow registers
 17153                           tblptru	equ	0xFF8
 17154                           tblptrh	equ	0xFF7
 17155                           tblptrl	equ	0xFF6
 17156                           tablat	equ	0xFF5
 17157                           prodh	equ	0xFF4
 17158                           prodl	equ	0xFF3
 17159                           intcon	equ	0xFF2
 17160                           intcon2	equ	0xFF1
 17161                           intcon3	equ	0xFF0
 17162                           indf0	equ	0xFEF
 17163                           postinc0	equ	0xFEE
 17164                           fsr0h	equ	0xFEA
 17165                           fsr0l	equ	0xFE9
 17166                           wreg	equ	0xFE8
 17167                           postdec1	equ	0xFE5
 17168                           fsr1l	equ	0xFE1
 17169                           indf2	equ	0xFDF
 17170                           postinc2	equ	0xFDE
 17171                           postdec2	equ	0xFDD
 17172                           fsr2h	equ	0xFDA
 17173                           fsr2l	equ	0xFD9
 17174                           status	equ	0xFD8
 17175                           
 17176                           	psect	intcode_body
 17177  0036E2                     __pintcode_body:
 17178                           	opt stack 18
 17179  0036E2                     int_func:
 17180                           	opt stack 18
 17181  0036E2  0006               	pop		; remove dummy address from shadow register refresh
 17182  0036E4  CFFA F04D          	movff	pclath,??_handler+2
 17183  0036E8  CFFB F04E          	movff	pclatu,??_handler+3
 17184  0036EC  CFE9 F04F          	movff	fsr0l,??_handler+4
 17185  0036F0  CFEA F050          	movff	fsr0h,??_handler+5
 17186  0036F4  CFE1 F051          	movff	fsr1l,??_handler+6
 17187  0036F8  CFE2 F052          	movff	fsr1h,??_handler+7
 17188  0036FC  CFD9 F053          	movff	fsr2l,??_handler+8
 17189  003700  CFDA F054          	movff	fsr2h,??_handler+9
 17190  003704  CFF3 F055          	movff	prodl,??_handler+10
 17191  003708  CFF4 F056          	movff	prodh,??_handler+11
 17192  00370C  CFF6 F057          	movff	tblptrl,??_handler+12
 17193  003710  CFF7 F058          	movff	tblptrh,??_handler+13
 17194  003714  CFF8 F059          	movff	tblptru,??_handler+14
 17195  003718  CFF5 F05A          	movff	tablat,??_handler+15
 17196                           
 17197                           ;interruptHandler.c: 18: if(INT1IF){
 17198  00371C  A0F0               	btfss	intcon3,0,c	;volatile
 17199  00371E  D02B               	goto	i2l9404
 17200                           
 17201                           ;interruptHandler.c: 19: INT1IF = 0;
 17202  003720  90F0               	bcf	intcon3,0,c	;volatile
 17203                           
 17204                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17205  003722  0100               	movlb	0	; () banked
 17206  003724  51FC               	movf	_machine_state& (0+255),w,b
 17207  003726  A4D8               	btfss	status,2,c
 17208  003728  D01B               	goto	i2l9398
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17212  00372A  3881               	swapf	3969,w,c	;volatile
 17213  00372C  0B0F               	andlw	15
 17214  00372E  0B0F               	andlw	15
 17215  003730  6E4B               	movwf	??_handler& (0+255),c
 17216  003732  6A4C               	clrf	(??_handler+1)& (0+255),c
 17217  003734  0EEB               	movlw	low _keys
 17218  003736  244B               	addwf	??_handler,w,c
 17219  003738  6EF6               	movwf	tblptrl,c
 17220  00373A  0EFA               	movlw	high _keys
 17221  00373C  204C               	addwfc	??_handler+1,w,c
 17222  00373E  6EF7               	movwf	tblptrh,c
 17223  003740                     	if	1	;There are 3 active tblptr bytes
 17224  003740  6AF8               	clrf	tblptru,c
 17225  003742  0E00               	movlw	low (__mediumconst shr (0+16))
 17226  003744  22F8               	addwfc	tblptru,f,c
 17227  003746                     	endif
 17228  003746  0008               	tblrd		*
 17229  003748  CFF5 F07D          	movff	tablat,_input	;volatile
 17230                           
 17231                           ; BSR set to: 0
 17232                           ;interruptHandler.c: 23: if(input == '*'){
 17233  00374C  0E2A               	movlw	42
 17234  00374E  187D               	xorwf	_input,w,c	;volatile
 17235  003750  A4D8               	btfss	status,2,c
 17236  003752  D004               	goto	i2l9396
 17237                           
 17238                           ; BSR set to: 0
 17239                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17240  003754  0E03               	movlw	3
 17241  003756  0100               	movlb	0	; () banked
 17242  003758  6FFC               	movwf	_machine_state& (0+255),b
 17243                           
 17244                           ;interruptHandler.c: 25: }
 17245  00375A  D002               	goto	i2l9398
 17246  00375C                     i2l9396:
 17247                           
 17248                           ; BSR set to: 0
 17249                           ;interruptHandler.c: 26: else{
 17250                           ;interruptHandler.c: 27: updateMenu();
 17251  00375C  EC7B  F013         	call	_updateMenu	;wreg free
 17252  003760                     i2l9398:
 17253                           
 17254                           ;interruptHandler.c: 28: }
 17255                           ;interruptHandler.c: 29: }
 17256                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17257  003760  0100               	movlb	0	; () banked
 17258  003762  05FC               	decf	_machine_state& (0+255),w,b
 17259  003764  A4D8               	btfss	status,2,c
 17260  003766  D007               	goto	i2l9404
 17261                           
 17262                           ; BSR set to: 0
 17263                           ;interruptHandler.c: 31: if(input == '*'){
 17264  003768  0E2A               	movlw	42
 17265  00376A  187D               	xorwf	_input,w,c	;volatile
 17266  00376C  A4D8               	btfss	status,2,c
 17267  00376E  D003               	goto	i2l9404
 17268                           
 17269                           ; BSR set to: 0
 17270                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17271  003770  0E02               	movlw	2
 17272  003772  0100               	movlb	0	; () banked
 17273  003774  6FFC               	movwf	_machine_state& (0+255),b
 17274  003776                     i2l9404:
 17275                           
 17276                           ;interruptHandler.c: 33: }
 17277                           ;interruptHandler.c: 34: }
 17278                           ;interruptHandler.c: 35: }
 17279                           ;interruptHandler.c: 38: if(TMR0IF){
 17280  003776  A4F2               	btfss	intcon,2,c	;volatile
 17281  003778  D00C               	goto	i2l9418
 17282                           
 17283                           ;interruptHandler.c: 39: TMR0IF = 0;
 17284  00377A  94F2               	bcf	intcon,2,c	;volatile
 17285                           
 17286                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17287  00377C  0100               	movlb	0	; () banked
 17288  00377E  05FC               	decf	_machine_state& (0+255),w,b
 17289  003780  A4D8               	btfss	status,2,c
 17290  003782  D007               	goto	i2l9418
 17291                           
 17292                           ; BSR set to: 0
 17293                           ;interruptHandler.c: 41: printSortTimer();
 17294  003784  ECDB  F014         	call	_printSortTimer	;wreg free
 17295                           
 17296                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17297  003788  0E85               	movlw	133
 17298  00378A  6ED7               	movwf	4055,c	;volatile
 17299                           
 17300                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17301  00378C  0EEE               	movlw	238
 17302  00378E  6ED6               	movwf	4054,c	;volatile
 17303                           
 17304                           ;interruptHandler.c: 45: TMR0ON = 1;
 17305  003790  8ED5               	bsf	4053,7,c	;volatile
 17306  003792                     i2l9418:
 17307                           
 17308                           ;interruptHandler.c: 46: }
 17309                           ;interruptHandler.c: 47: }
 17310                           ;interruptHandler.c: 50: if(TMR1IF){
 17311  003792  A09E               	btfss	3998,0,c	;volatile
 17312  003794  D02A               	goto	i2l9446
 17313                           
 17314                           ;interruptHandler.c: 51: TMR1IF = 0;
 17315  003796  909E               	bcf	3998,0,c	;volatile
 17316                           
 17317                           ;interruptHandler.c: 52: TMR1ON = 0;
 17318  003798  90CD               	bcf	4045,0,c	;volatile
 17319                           
 17320                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17321  00379A  0100               	movlb	0	; () banked
 17322  00379C  05FC               	decf	_machine_state& (0+255),w,b
 17323  00379E  A4D8               	btfss	status,2,c
 17324  0037A0  D024               	goto	i2l9446
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;interruptHandler.c: 54: if(was_low_1){
 17328  0037A2  5079               	movf	_was_low_1,w,c	;volatile
 17329  0037A4  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17330  0037A6  B4D8               	btfsc	status,2,c
 17331  0037A8  D00A               	goto	i2l957
 17332                           
 17333                           ; BSR set to: 0
 17334                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17335  0037AA  828B               	bsf	3979,1,c	;volatile
 17336                           
 17337                           ; BSR set to: 0
 17338                           ;interruptHandler.c: 56: was_low_1 = 0;
 17339  0037AC  0E00               	movlw	0
 17340  0037AE  6E7A               	movwf	_was_low_1+1,c	;volatile
 17341  0037B0  0E00               	movlw	0
 17342  0037B2  6E79               	movwf	_was_low_1,c	;volatile
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17346  0037B4  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17347                           
 17348                           ; BSR set to: 0
 17349                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17350  0037B8  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17351                           
 17352                           ;interruptHandler.c: 59: }
 17353  0037BC  D00F               	goto	i2l9440
 17354  0037BE                     i2l957:
 17355                           
 17356                           ; BSR set to: 0
 17357                           ;interruptHandler.c: 60: else{
 17358                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17359  0037BE  928B               	bcf	3979,1,c	;volatile
 17360                           
 17361                           ; BSR set to: 0
 17362                           ;interruptHandler.c: 62: was_low_1 = 1;
 17363  0037C0  0E00               	movlw	0
 17364  0037C2  6E7A               	movwf	_was_low_1+1,c	;volatile
 17365  0037C4  0E01               	movlw	1
 17366  0037C6  6E79               	movwf	_was_low_1,c	;volatile
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17370  0037C8  0100               	movlb	0	; () banked
 17371  0037CA  51DA               	movf	_servoTimes& (0+255),w,b
 17372  0037CC  0800               	sublw	0
 17373  0037CE  0F20               	addlw	32
 17374  0037D0  6ECF               	movwf	4047,c	;volatile
 17375                           
 17376                           ; BSR set to: 0
 17377                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17378  0037D2  0100               	movlb	0	; () banked
 17379  0037D4  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17380  0037D6  0800               	sublw	0
 17381  0037D8  0F20               	addlw	32
 17382  0037DA  6ECE               	movwf	4046,c	;volatile
 17383  0037DC                     i2l9440:
 17384                           
 17385                           ; BSR set to: 0
 17386                           ;interruptHandler.c: 65: }
 17387                           ;interruptHandler.c: 66: TMR1ON = 1;
 17388  0037DC  80CD               	bsf	4045,0,c	;volatile
 17389                           
 17390                           ; BSR set to: 0
 17391                           ;interruptHandler.c: 67: servo_timer_counter += 10;
 17392  0037DE  0E0A               	movlw	10
 17393  0037E0  2671               	addwf	_servo_timer_counter,f,c	;volatile
 17394  0037E2  0E00               	movlw	0
 17395  0037E4  2272               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17396                           
 17397                           ; BSR set to: 0
 17398                           ;interruptHandler.c: 69: updateServoStates();
 17399  0037E6  EC7E  F019         	call	_updateServoStates	;wreg free
 17400  0037EA                     i2l9446:
 17401                           
 17402                           ;interruptHandler.c: 70: }
 17403                           ;interruptHandler.c: 71: }
 17404                           ;interruptHandler.c: 73: if(TMR3IF){
 17405  0037EA  A2A1               	btfss	4001,1,c	;volatile
 17406  0037EC  D024               	goto	i2l963
 17407                           
 17408                           ;interruptHandler.c: 74: TMR3IF = 0;
 17409  0037EE  92A1               	bcf	4001,1,c	;volatile
 17410                           
 17411                           ;interruptHandler.c: 75: TMR3ON = 0;
 17412  0037F0  90B1               	bcf	4017,0,c	;volatile
 17413                           
 17414                           ;interruptHandler.c: 76: if(machine_state == Sorting_state){
 17415  0037F2  0100               	movlb	0	; () banked
 17416  0037F4  05FC               	decf	_machine_state& (0+255),w,b
 17417  0037F6  A4D8               	btfss	status,2,c
 17418  0037F8  D01E               	goto	i2l963
 17419                           
 17420                           ; BSR set to: 0
 17421                           ;interruptHandler.c: 77: if(was_low_3){
 17422  0037FA  507B               	movf	_was_low_3,w,c	;volatile
 17423  0037FC  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17424  0037FE  B4D8               	btfsc	status,2,c
 17425  003800  D00A               	goto	i2l961
 17426                           
 17427                           ; BSR set to: 0
 17428                           ;interruptHandler.c: 78: LATCbits.LATC2 = 1;
 17429  003802  848B               	bsf	3979,2,c	;volatile
 17430                           
 17431                           ; BSR set to: 0
 17432                           ;interruptHandler.c: 79: was_low_3 = 0;
 17433  003804  0E00               	movlw	0
 17434  003806  6E7C               	movwf	_was_low_3+1,c	;volatile
 17435  003808  0E00               	movlw	0
 17436  00380A  6E7B               	movwf	_was_low_3,c	;volatile
 17437                           
 17438                           ; BSR set to: 0
 17439                           ;interruptHandler.c: 80: TMR3H = servoTimes[2];
 17440  00380C  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17441                           
 17442                           ; BSR set to: 0
 17443                           ;interruptHandler.c: 81: TMR3L = servoTimes[3];
 17444  003810  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17445                           
 17446                           ;interruptHandler.c: 82: }
 17447  003814  D00F               	goto	i2l9468
 17448  003816                     i2l961:
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;interruptHandler.c: 83: else{
 17452                           ;interruptHandler.c: 84: LATCbits.LATC2 = 0;
 17453  003816  948B               	bcf	3979,2,c	;volatile
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;interruptHandler.c: 85: was_low_3 = 1;
 17457  003818  0E00               	movlw	0
 17458  00381A  6E7C               	movwf	_was_low_3+1,c	;volatile
 17459  00381C  0E01               	movlw	1
 17460  00381E  6E7B               	movwf	_was_low_3,c	;volatile
 17461                           
 17462                           ; BSR set to: 0
 17463                           ;interruptHandler.c: 86: TMR3H = 20000 - servoTimes[2];
 17464  003820  0100               	movlb	0	; () banked
 17465  003822  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17466  003824  0800               	sublw	0
 17467  003826  0F20               	addlw	32
 17468  003828  6EB3               	movwf	4019,c	;volatile
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;interruptHandler.c: 87: TMR3L = 20000 - servoTimes[3];
 17472  00382A  0100               	movlb	0	; () banked
 17473  00382C  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17474  00382E  0800               	sublw	0
 17475  003830  0F20               	addlw	32
 17476  003832  6EB2               	movwf	4018,c	;volatile
 17477  003834                     i2l9468:
 17478                           
 17479                           ; BSR set to: 0
 17480                           ;interruptHandler.c: 88: }
 17481                           ;interruptHandler.c: 89: TMR3ON = 1;
 17482  003834  80B1               	bsf	4017,0,c	;volatile
 17483  003836                     i2l963:
 17484  003836  C05A  FFF5         	movff	??_handler+15,tablat
 17485  00383A  C059  FFF8         	movff	??_handler+14,tblptru
 17486  00383E  C058  FFF7         	movff	??_handler+13,tblptrh
 17487  003842  C057  FFF6         	movff	??_handler+12,tblptrl
 17488  003846  C056  FFF4         	movff	??_handler+11,prodh
 17489  00384A  C055  FFF3         	movff	??_handler+10,prodl
 17490  00384E  C054  FFDA         	movff	??_handler+9,fsr2h
 17491  003852  C053  FFD9         	movff	??_handler+8,fsr2l
 17492  003856  C052  FFE2         	movff	??_handler+7,fsr1h
 17493  00385A  C051  FFE1         	movff	??_handler+6,fsr1l
 17494  00385E  C050  FFEA         	movff	??_handler+5,fsr0h
 17495  003862  C04F  FFE9         	movff	??_handler+4,fsr0l
 17496  003866  C04E  FFFB         	movff	??_handler+3,pclatu
 17497  00386A  C04D  FFFA         	movff	??_handler+2,pclath
 17498  00386E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17499  003870  0011               	retfie		f
 17500  003872                     __end_of_handler:
 17501                           	opt stack 0
 17502                           pclatu	equ	0xFFB
 17503                           pclath	equ	0xFFA
 17504                           tblptru	equ	0xFF8
 17505                           tblptrh	equ	0xFF7
 17506                           tblptrl	equ	0xFF6
 17507                           tablat	equ	0xFF5
 17508                           prodh	equ	0xFF4
 17509                           prodl	equ	0xFF3
 17510                           intcon	equ	0xFF2
 17511                           intcon2	equ	0xFF1
 17512                           intcon3	equ	0xFF0
 17513                           indf0	equ	0xFEF
 17514                           postinc0	equ	0xFEE
 17515                           fsr0h	equ	0xFEA
 17516                           fsr0l	equ	0xFE9
 17517                           wreg	equ	0xFE8
 17518                           postdec1	equ	0xFE5
 17519                           fsr1h	equ	0xFE2
 17520                           fsr1l	equ	0xFE1
 17521                           indf2	equ	0xFDF
 17522                           postinc2	equ	0xFDE
 17523                           postdec2	equ	0xFDD
 17524                           fsr2h	equ	0xFDA
 17525                           fsr2l	equ	0xFD9
 17526                           status	equ	0xFD8
 17527                           
 17528 ;; *************** function _updateServoStates *****************
 17529 ;; Defined at:
 17530 ;;		line 504 in file "sort.c"
 17531 ;; Parameters:    Size  Location     Type
 17532 ;;		None
 17533 ;; Auto vars:     Size  Location     Type
 17534 ;;		None
 17535 ;; Return value:  Size  Location     Type
 17536 ;;                  1    wreg      void 
 17537 ;; Registers used:
 17538 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17539 ;; Tracked objects:
 17540 ;;		On entry : 0/0
 17541 ;;		On exit  : 0/0
 17542 ;;		Unchanged: 0/0
 17543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17546 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17548 ;;Total ram usage:        2 bytes
 17549 ;; Hardware stack levels used:    1
 17550 ;; Hardware stack levels required when called:    3
 17551 ;; This function calls:
 17552 ;;		i2_lcdInst
 17553 ;;		i2_printf
 17554 ;;		i2_updateServoPosition
 17555 ;; This function is called by:
 17556 ;;		_handler
 17557 ;; This function uses a non-reentrant model
 17558 ;;
 17559                           
 17560                           	psect	text60
 17561  0032FC                     __ptext60:
 17562                           	opt stack 0
 17563  0032FC                     _updateServoStates:
 17564                           	opt stack 20
 17565                           
 17566                           ;sort.c: 506: if(servo_timer_counter >= servo_timer_target){
 17567                           
 17568                           ;incstack = 0
 17569  0032FC  5073               	movf	_servo_timer_target,w,c	;volatile
 17570  0032FE  5C71               	subwf	_servo_timer_counter,w,c	;volatile
 17571  003300  5072               	movf	_servo_timer_counter+1,w,c	;volatile
 17572  003302  0A80               	xorlw	128
 17573  003304  6E2A               	movwf	??_updateServoStates& (0+255),c
 17574  003306  5074               	movf	_servo_timer_target+1,w,c	;volatile
 17575  003308  0A80               	xorlw	128
 17576  00330A  582A               	subwfb	??_updateServoStates& (0+255),w,c
 17577  00330C  A0D8               	btfss	status,0,c
 17578  00330E  0012               	return	
 17579                           
 17580                           ;sort.c: 507: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17581  003310  0E01               	movlw	1
 17582  003312  EC6A  F029         	call	i2_lcdInst
 17583  003316  0E68               	movlw	104
 17584  003318  6E2A               	movwf	??_updateServoStates& (0+255),c
 17585  00331A  0EE4               	movlw	228
 17586  00331C                     i2u1003_47:
 17587  00331C  2EE8               	decfsz	wreg,f,c
 17588  00331E  D7FE               	bra	i2u1003_47
 17589  003320  2E2A               	decfsz	??_updateServoStates& (0+255),f,c
 17590  003322  D7FC               	bra	i2u1003_47
 17591  003324  D000               	nop2	
 17592  003326  0E80               	movlw	128
 17593  003328  EC6A  F029         	call	i2_lcdInst
 17594                           
 17595                           ;sort.c: 508: printf("ENT");
 17596  00332C  0EC7               	movlw	low STR_66
 17597  00332E  6E0D               	movwf	i2printf@f,c
 17598  003330  0EFF               	movlw	high STR_66
 17599  003332  6E0E               	movwf	i2printf@f+1,c
 17600  003334  ECE0  F00E         	call	i2_printf	;wreg free
 17601                           
 17602                           ;sort.c: 510: if(f_panning_to_bin){
 17603  003338  5061               	movf	_f_panning_to_bin,w,c	;volatile
 17604  00333A  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 17605  00333C  A4D8               	btfss	status,2,c
 17606  00333E  D036               	goto	i2l9284
 17607  003340  D05F               	goto	i2l9288
 17608  003342                     i2l9258:
 17609                           
 17610                           ;sort.c: 514: updateServoPosition(1260, 3);
 17611  003342  0E04               	movlw	4
 17612  003344  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17613  003346  0EEC               	movlw	236
 17614  003348  6E01               	movwf	i2updateServoPosition@time_us,c
 17615  00334A  0E00               	movlw	0
 17616  00334C  6E04               	movwf	i2updateServoPosition@timer+1,c
 17617  00334E  0E03               	movlw	3
 17618  003350  6E03               	movwf	i2updateServoPosition@timer,c
 17619  003352  EC1E  F024         	call	i2_updateServoPosition	;wreg free
 17620  003356  D025               	goto	i2l9278
 17621  003358                     i2l9262:
 17622                           
 17623                           ;sort.c: 516: servo_timer_target = 700;
 17624  003358  0E02               	movlw	2
 17625  00335A  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17626  00335C  0EBC               	movlw	188
 17627  00335E  6E73               	movwf	_servo_timer_target,c	;volatile
 17628                           
 17629                           ;sort.c: 517: break;
 17630  003360  D04A               	goto	i2l9286
 17631  003362                     i2l9264:
 17632                           
 17633                           ;sort.c: 519: updateServoPosition(1260, 3);
 17634  003362  0E04               	movlw	4
 17635  003364  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17636  003366  0EEC               	movlw	236
 17637  003368  6E01               	movwf	i2updateServoPosition@time_us,c
 17638  00336A  0E00               	movlw	0
 17639  00336C  6E04               	movwf	i2updateServoPosition@timer+1,c
 17640  00336E  0E03               	movlw	3
 17641  003370  6E03               	movwf	i2updateServoPosition@timer,c
 17642  003372  EC1E  F024         	call	i2_updateServoPosition	;wreg free
 17643  003376  D015               	goto	i2l9278
 17644  003378                     i2l9270:
 17645                           
 17646                           ;sort.c: 525: updateServoPosition(1390, 3);
 17647  003378  0E05               	movlw	5
 17648  00337A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17649  00337C  0E6E               	movlw	110
 17650  00337E  6E01               	movwf	i2updateServoPosition@time_us,c
 17651  003380  0E00               	movlw	0
 17652  003382  6E04               	movwf	i2updateServoPosition@timer+1,c
 17653  003384  0E03               	movlw	3
 17654  003386  6E03               	movwf	i2updateServoPosition@timer,c
 17655  003388  EC1E  F024         	call	i2_updateServoPosition	;wreg free
 17656  00338C  D00A               	goto	i2l9278
 17657  00338E                     i2l9276:
 17658                           
 17659                           ;sort.c: 530: updateServoPosition(1390, 3);
 17660  00338E  0E05               	movlw	5
 17661  003390  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17662  003392  0E6E               	movlw	110
 17663  003394  6E01               	movwf	i2updateServoPosition@time_us,c
 17664  003396  0E00               	movlw	0
 17665  003398  6E04               	movwf	i2updateServoPosition@timer+1,c
 17666  00339A  0E03               	movlw	3
 17667  00339C  6E03               	movwf	i2updateServoPosition@timer,c
 17668  00339E  EC1E  F024         	call	i2_updateServoPosition	;wreg free
 17669  0033A2                     i2l9278:
 17670                           
 17671                           ;sort.c: 531: servo_timer_counter = 0;
 17672  0033A2  0E00               	movlw	0
 17673  0033A4  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17674  0033A6  0E00               	movlw	0
 17675  0033A8  6E71               	movwf	_servo_timer_counter,c	;volatile
 17676  0033AA  D7D6               	goto	i2l9262
 17677  0033AC                     i2l9284:
 17678  0033AC  C06F  F02A         	movff	_pan_servo_state,??_updateServoStates	;volatile
 17679  0033B0  C070  F02B         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 17680                           
 17681                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17682                           ; Switch size 1, requested type "space"
 17683                           ; Number of cases is 4, Range of values is 1 to 9
 17684                           ; switch strategies available:
 17685                           ; Name         Instructions Cycles
 17686                           ; simple_byte           13     7 (average)
 17687                           ;	Chosen strategy is simple_byte
 17688  0033B4  502B               	movf	??_updateServoStates+1,w,c
 17689  0033B6  0A01               	xorlw	1	; case 1
 17690  0033B8  B4D8               	btfsc	status,2,c
 17691  0033BA  D00A               	goto	i2l9928
 17692  0033BC  0A02               	xorlw	2	; case 3
 17693  0033BE  B4D8               	btfsc	status,2,c
 17694  0033C0  D00C               	goto	i2l9930
 17695  0033C2  0A05               	xorlw	5	; case 6
 17696  0033C4  B4D8               	btfsc	status,2,c
 17697  0033C6  D00E               	goto	i2l9932
 17698  0033C8  0A0F               	xorlw	15	; case 9
 17699  0033CA  B4D8               	btfsc	status,2,c
 17700  0033CC  D010               	goto	i2l9934
 17701  0033CE  D013               	goto	i2l9286
 17702  0033D0                     i2l9928:
 17703                           
 17704                           ; Switch size 1, requested type "space"
 17705                           ; Number of cases is 1, Range of values is 244 to 244
 17706                           ; switch strategies available:
 17707                           ; Name         Instructions Cycles
 17708                           ; simple_byte            4     3 (average)
 17709                           ;	Chosen strategy is simple_byte
 17710  0033D0  502A               	movf	??_updateServoStates,w,c
 17711  0033D2  0AF4               	xorlw	244	; case 244
 17712  0033D4  B4D8               	btfsc	status,2,c
 17713  0033D6  D7B5               	goto	i2l9258
 17714  0033D8  D00E               	goto	i2l9286
 17715  0033DA                     i2l9930:
 17716                           
 17717                           ; Switch size 1, requested type "space"
 17718                           ; Number of cases is 1, Range of values is 82 to 82
 17719                           ; switch strategies available:
 17720                           ; Name         Instructions Cycles
 17721                           ; simple_byte            4     3 (average)
 17722                           ;	Chosen strategy is simple_byte
 17723  0033DA  502A               	movf	??_updateServoStates,w,c
 17724  0033DC  0A52               	xorlw	82	; case 82
 17725  0033DE  B4D8               	btfsc	status,2,c
 17726  0033E0  D7C0               	goto	i2l9264
 17727  0033E2  D009               	goto	i2l9286
 17728  0033E4                     i2l9932:
 17729                           
 17730                           ; Switch size 1, requested type "space"
 17731                           ; Number of cases is 1, Range of values is 134 to 134
 17732                           ; switch strategies available:
 17733                           ; Name         Instructions Cycles
 17734                           ; simple_byte            4     3 (average)
 17735                           ;	Chosen strategy is simple_byte
 17736  0033E4  502A               	movf	??_updateServoStates,w,c
 17737  0033E6  0A86               	xorlw	134	; case 134
 17738  0033E8  B4D8               	btfsc	status,2,c
 17739  0033EA  D7C6               	goto	i2l9270
 17740  0033EC  D004               	goto	i2l9286
 17741  0033EE                     i2l9934:
 17742                           
 17743                           ; Switch size 1, requested type "space"
 17744                           ; Number of cases is 1, Range of values is 96 to 96
 17745                           ; switch strategies available:
 17746                           ; Name         Instructions Cycles
 17747                           ; simple_byte            4     3 (average)
 17748                           ;	Chosen strategy is simple_byte
 17749  0033EE  502A               	movf	??_updateServoStates,w,c
 17750  0033F0  0A60               	xorlw	96	; case 96
 17751  0033F2  B4D8               	btfsc	status,2,c
 17752  0033F4  D7CC               	goto	i2l9276
 17753  0033F6                     i2l9286:
 17754                           
 17755                           ;sort.c: 537: f_panning_to_bin = 0;
 17756  0033F6  0E00               	movlw	0
 17757  0033F8  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 17758  0033FA  0E00               	movlw	0
 17759  0033FC  6E61               	movwf	_f_panning_to_bin,c	;volatile
 17760                           
 17761                           ;sort.c: 538: }
 17762  0033FE  0012               	return	
 17763  003400                     i2l9288:
 17764                           
 17765                           ;sort.c: 539: else if(pan_servo_state == 1200){
 17766  003400  0EB0               	movlw	176
 17767  003402  186F               	xorwf	_pan_servo_state,w,c	;volatile
 17768  003404  E15F               	bnz	i2l9320
 17769  003406  0E04               	movlw	4
 17770  003408  1870               	xorwf	_pan_servo_state+1,w,c	;volatile
 17771  00340A  A4D8               	btfss	status,2,c
 17772  00340C  D05B               	goto	i2l9320
 17773                           
 17774                           ;sort.c: 541: servo_timer_counter = 0;
 17775  00340E  0E00               	movlw	0
 17776  003410  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17777  003412  0E00               	movlw	0
 17778  003414  6E71               	movwf	_servo_timer_counter,c	;volatile
 17779                           
 17780                           ;sort.c: 542: }
 17781  003416  0012               	return	
 17782  003418                     i2l9292:
 17783                           
 17784                           ;sort.c: 547: updateServoPosition(1050, 3);
 17785  003418  0E04               	movlw	4
 17786  00341A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17787  00341C  0E1A               	movlw	26
 17788  00341E  6E01               	movwf	i2updateServoPosition@time_us,c
 17789  003420  0E00               	movlw	0
 17790  003422  6E04               	movwf	i2updateServoPosition@timer+1,c
 17791  003424  0E03               	movlw	3
 17792  003426  6E03               	movwf	i2updateServoPosition@timer,c
 17793  003428  EC1E  F024         	call	i2_updateServoPosition	;wreg free
 17794                           
 17795                           ;sort.c: 548: servo_timer_counter = 0;
 17796  00342C  0E00               	movlw	0
 17797  00342E  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17798  003430  0E00               	movlw	0
 17799  003432  6E71               	movwf	_servo_timer_counter,c	;volatile
 17800                           
 17801                           ;sort.c: 549: servo_timer_target = 750;
 17802  003434  0E02               	movlw	2
 17803  003436  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17804  003438  0EEE               	movlw	238
 17805  00343A  6E73               	movwf	_servo_timer_target,c	;volatile
 17806                           
 17807                           ;sort.c: 550: break;
 17808  00343C  0012               	return	
 17809  00343E                     i2l9298:
 17810                           
 17811                           ;sort.c: 552: updateServoPosition(1050, 3);
 17812  00343E  0E04               	movlw	4
 17813  003440  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17814  003442  0E1A               	movlw	26
 17815  003444  6E01               	movwf	i2updateServoPosition@time_us,c
 17816  003446  0E00               	movlw	0
 17817  003448  6E04               	movwf	i2updateServoPosition@timer+1,c
 17818  00344A  0E03               	movlw	3
 17819  00344C  6E03               	movwf	i2updateServoPosition@timer,c
 17820  00344E  EC1E  F024         	call	i2_updateServoPosition	;wreg free
 17821                           
 17822                           ;sort.c: 553: servo_timer_counter = 0;
 17823  003452  0E00               	movlw	0
 17824  003454  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17825  003456  0E00               	movlw	0
 17826  003458  6E71               	movwf	_servo_timer_counter,c	;volatile
 17827                           
 17828                           ;sort.c: 554: servo_timer_target = 750;
 17829  00345A  0E02               	movlw	2
 17830  00345C  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17831  00345E  0EEE               	movlw	238
 17832  003460  6E73               	movwf	_servo_timer_target,c	;volatile
 17833                           
 17834                           ;sort.c: 555: break;
 17835  003462  0012               	return	
 17836  003464                     i2l9304:
 17837                           
 17838                           ;sort.c: 558: updateServoPosition(1200, 1);
 17839  003464  0E04               	movlw	4
 17840  003466  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17841  003468  0EB0               	movlw	176
 17842  00346A  6E01               	movwf	i2updateServoPosition@time_us,c
 17843  00346C  0E00               	movlw	0
 17844  00346E  6E04               	movwf	i2updateServoPosition@timer+1,c
 17845  003470  0E01               	movlw	1
 17846  003472  6E03               	movwf	i2updateServoPosition@timer,c
 17847  003474  EC1E  F024         	call	i2_updateServoPosition	;wreg free
 17848                           
 17849                           ;sort.c: 559: updateServoPosition(1050, 3);
 17850  003478  0E04               	movlw	4
 17851  00347A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17852  00347C  0E1A               	movlw	26
 17853  00347E  6E01               	movwf	i2updateServoPosition@time_us,c
 17854  003480  0E00               	movlw	0
 17855  003482  6E04               	movwf	i2updateServoPosition@timer+1,c
 17856  003484  0E03               	movlw	3
 17857  003486  6E03               	movwf	i2updateServoPosition@timer,c
 17858  003488  EC1E  F024         	call	i2_updateServoPosition	;wreg free
 17859                           
 17860                           ;sort.c: 560: servo_timer_counter = 0;
 17861  00348C  0E00               	movlw	0
 17862  00348E  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17863  003490  0E00               	movlw	0
 17864  003492  6E71               	movwf	_servo_timer_counter,c	;volatile
 17865                           
 17866                           ;sort.c: 561: servo_timer_target = 9999;
 17867  003494  0E27               	movlw	39
 17868  003496  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17869  003498  0E0F               	movlw	15
 17870  00349A  6E73               	movwf	_servo_timer_target,c	;volatile
 17871                           
 17872                           ;sort.c: 563: f_can_distributed = 1;
 17873  00349C  0E00               	movlw	0
 17874  00349E  0101               	movlb	1	; () banked
 17875  0034A0  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 17876  0034A2  0E01               	movlw	1
 17877  0034A4  6F35               	movwf	_f_can_distributed& (0+255),b
 17878                           
 17879                           ; BSR set to: 1
 17880                           ;sort.c: 564: f_most_recent_sort_time = 1;
 17881  0034A6  0E00               	movlw	0
 17882  0034A8  0101               	movlb	1	; () banked
 17883  0034AA  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 17884  0034AC  0E01               	movlw	1
 17885  0034AE  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 17886                           
 17887                           ; BSR set to: 1
 17888                           ;sort.c: 565: if(f_lastCan == 1){
 17889  0034B0  0100               	movlb	0	; () banked
 17890  0034B2  05EE               	decf	_f_lastCan& (0+255),w,b
 17891  0034B4  0100               	movlb	0	; () banked
 17892  0034B6  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
 17893  0034B8  A4D8               	btfss	status,2,c
 17894  0034BA  0012               	return	
 17895                           
 17896                           ; BSR set to: 0
 17897                           ;sort.c: 566: machine_state = DoneSorting_state;
 17898  0034BC  0E02               	movlw	2
 17899  0034BE  0100               	movlb	0	; () banked
 17900  0034C0  6FFC               	movwf	_machine_state& (0+255),b
 17901                           
 17902                           ; BSR set to: 0
 17903                           ;sort.c: 572: }
 17904                           
 17905                           ; BSR set to: 0
 17906                           ;sort.c: 571: break;
 17907                           
 17908                           ;sort.c: 570: default:
 17909                           
 17910                           ; BSR set to: 0
 17911                           ;sort.c: 567: }
 17912                           ;sort.c: 568: break;
 17913  0034C2  0012               	return	
 17914  0034C4                     i2l9320:
 17915  0034C4  C075  F02A         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 17916  0034C8  C076  F02B         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 17917                           
 17918                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17919                           ; Switch size 1, requested type "space"
 17920                           ; Number of cases is 2, Range of values is 4 to 5
 17921                           ; switch strategies available:
 17922                           ; Name         Instructions Cycles
 17923                           ; simple_byte            7     4 (average)
 17924                           ;	Chosen strategy is simple_byte
 17925  0034CC  502B               	movf	??_updateServoStates+1,w,c
 17926  0034CE  0A04               	xorlw	4	; case 4
 17927  0034D0  B4D8               	btfsc	status,2,c
 17928  0034D2  D004               	goto	i2l9936
 17929  0034D4  0A01               	xorlw	1	; case 5
 17930  0034D6  A4D8               	btfss	status,2,c
 17931  0034D8  0012               	return	
 17932  0034DA  D008               	goto	i2l9938
 17933  0034DC                     i2l9936:
 17934                           
 17935                           ; Switch size 1, requested type "space"
 17936                           ; Number of cases is 2, Range of values is 26 to 236
 17937                           ; switch strategies available:
 17938                           ; Name         Instructions Cycles
 17939                           ; simple_byte            7     4 (average)
 17940                           ;	Chosen strategy is simple_byte
 17941  0034DC  502A               	movf	??_updateServoStates,w,c
 17942  0034DE  0A1A               	xorlw	26	; case 26
 17943  0034E0  B4D8               	btfsc	status,2,c
 17944  0034E2  D7C0               	goto	i2l9304
 17945  0034E4  0AF6               	xorlw	246	; case 236
 17946  0034E6  A4D8               	btfss	status,2,c
 17947  0034E8  0012               	return	
 17948  0034EA  D796               	goto	i2l9292
 17949  0034EC                     i2l9938:
 17950                           
 17951                           ; Switch size 1, requested type "space"
 17952                           ; Number of cases is 1, Range of values is 110 to 110
 17953                           ; switch strategies available:
 17954                           ; Name         Instructions Cycles
 17955                           ; simple_byte            4     3 (average)
 17956                           ;	Chosen strategy is simple_byte
 17957  0034EC  502A               	movf	??_updateServoStates,w,c
 17958  0034EE  0A6E               	xorlw	110	; case 110
 17959  0034F0  A4D8               	btfss	status,2,c
 17960  0034F2  0012               	return	
 17961  0034F4  D7A4               	goto	i2l9298
 17962  0034F6                     __end_of_updateServoStates:
 17963                           	opt stack 0
 17964                           pclatu	equ	0xFFB
 17965                           pclath	equ	0xFFA
 17966                           tblptru	equ	0xFF8
 17967                           tblptrh	equ	0xFF7
 17968                           tblptrl	equ	0xFF6
 17969                           tablat	equ	0xFF5
 17970                           prodh	equ	0xFF4
 17971                           prodl	equ	0xFF3
 17972                           intcon	equ	0xFF2
 17973                           intcon2	equ	0xFF1
 17974                           intcon3	equ	0xFF0
 17975                           indf0	equ	0xFEF
 17976                           postinc0	equ	0xFEE
 17977                           fsr0h	equ	0xFEA
 17978                           fsr0l	equ	0xFE9
 17979                           wreg	equ	0xFE8
 17980                           postdec1	equ	0xFE5
 17981                           fsr1h	equ	0xFE2
 17982                           fsr1l	equ	0xFE1
 17983                           indf2	equ	0xFDF
 17984                           postinc2	equ	0xFDE
 17985                           postdec2	equ	0xFDD
 17986                           fsr2h	equ	0xFDA
 17987                           fsr2l	equ	0xFD9
 17988                           status	equ	0xFD8
 17989                           
 17990 ;; *************** function i2_updateServoPosition *****************
 17991 ;; Defined at:
 17992 ;;		line 489 in file "sort.c"
 17993 ;; Parameters:    Size  Location     Type
 17994 ;;  time_us         2    0[COMRAM] int 
 17995 ;;  timer           2    2[COMRAM] int 
 17996 ;; Auto vars:     Size  Location     Type
 17997 ;;  updateServoP    2    6[COMRAM] unsigned int 
 17998 ;; Return value:  Size  Location     Type
 17999 ;;                  1    wreg      void 
 18000 ;; Registers used:
 18001 ;;		wreg, status,2, status,0
 18002 ;; Tracked objects:
 18003 ;;		On entry : 0/0
 18004 ;;		On exit  : 0/0
 18005 ;;		Unchanged: 0/0
 18006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18007 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18009 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18010 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;Total ram usage:        8 bytes
 18012 ;; Hardware stack levels used:    1
 18013 ;; This function calls:
 18014 ;;		Nothing
 18015 ;; This function is called by:
 18016 ;;		_updateServoStates
 18017 ;; This function uses a non-reentrant model
 18018 ;;
 18019                           
 18020                           	psect	text61
 18021  00483C                     __ptext61:
 18022                           	opt stack 0
 18023  00483C                     i2_updateServoPosition:
 18024                           	opt stack 22
 18025                           
 18026                           ;sort.c: 490: unsigned int my_time = 65535 - time_us;
 18027                           
 18028                           ;incstack = 0
 18029  00483C  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18030  004840  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18031  004844  1E05               	comf	??i2_updateServoPosition,f,c
 18032  004846  1E06               	comf	??i2_updateServoPosition+1,f,c
 18033  004848  4A05               	infsnz	??i2_updateServoPosition,f,c
 18034  00484A  2A06               	incf	??i2_updateServoPosition+1,f,c
 18035  00484C  0EFF               	movlw	255
 18036  00484E  2405               	addwf	??i2_updateServoPosition,w,c
 18037  004850  6E07               	movwf	i2updateServoPosition@my_time,c
 18038  004852  0EFF               	movlw	255
 18039  004854  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18040  004856  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18041                           
 18042                           ;sort.c: 491: switch(timer){
 18043  004858  D019               	goto	i2l8468
 18044  00485A                     i2l8462:
 18045                           
 18046                           ;sort.c: 493: servoTimes[0] = my_time >> 8;
 18047  00485A  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18048  00485C  0100               	movlb	0	; () banked
 18049  00485E  6FDA               	movwf	_servoTimes& (0+255),b
 18050  004860  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18051                           
 18052                           ;sort.c: 494: servoTimes[1] = my_time & 0xFF;
 18053  004862  5007               	movf	i2updateServoPosition@my_time,w,c
 18054  004864  0100               	movlb	0	; () banked
 18055  004866  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18056  004868  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;sort.c: 496: pan_servo_state = time_us;
 18060  00486A  C001  F06F         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18061  00486E  C002  F070         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18062  004872                     i2l864:
 18063                           
 18064                           ;sort.c: 498: servoTimes[2] = my_time >> 8;
 18065  004872  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18066  004874  0100               	movlb	0	; () banked
 18067  004876  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18068  004878  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18069                           
 18070                           ;sort.c: 499: servoTimes[3] = my_time & 0xFF;
 18071  00487A  5007               	movf	i2updateServoPosition@my_time,w,c
 18072  00487C  0100               	movlb	0	; () banked
 18073  00487E  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18074  004880  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;sort.c: 501: tilt_servo_state = time_us;
 18078  004882  C001  F075         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18079  004886  C002  F076         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18080                           
 18081                           ;sort.c: 502: }
 18082  00488A  0012               	return	
 18083  00488C                     i2l8468:
 18084  00488C  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18085  004890  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18086                           
 18087                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18088                           ; Switch size 1, requested type "space"
 18089                           ; Number of cases is 1, Range of values is 0 to 0
 18090                           ; switch strategies available:
 18091                           ; Name         Instructions Cycles
 18092                           ; simple_byte            4     3 (average)
 18093                           ;	Chosen strategy is simple_byte
 18094  004894  5006               	movf	??i2_updateServoPosition+1,w,c
 18095  004896  0A00               	xorlw	0	; case 0
 18096  004898  A4D8               	btfss	status,2,c
 18097  00489A  0012               	return	
 18098                           
 18099                           ; Switch size 1, requested type "space"
 18100                           ; Number of cases is 2, Range of values is 1 to 3
 18101                           ; switch strategies available:
 18102                           ; Name         Instructions Cycles
 18103                           ; simple_byte            7     4 (average)
 18104                           ;	Chosen strategy is simple_byte
 18105  00489C  5005               	movf	??i2_updateServoPosition,w,c
 18106  00489E  0A01               	xorlw	1	; case 1
 18107  0048A0  B4D8               	btfsc	status,2,c
 18108  0048A2  D7DB               	goto	i2l8462
 18109  0048A4  0A02               	xorlw	2	; case 3
 18110  0048A6  A4D8               	btfss	status,2,c
 18111  0048A8  0012               	return	
 18112  0048AA  D7E3               	goto	i2l864
 18113  0048AC                     __end_ofi2_updateServoPosition:
 18114                           	opt stack 0
 18115                           pclatu	equ	0xFFB
 18116                           pclath	equ	0xFFA
 18117                           tblptru	equ	0xFF8
 18118                           tblptrh	equ	0xFF7
 18119                           tblptrl	equ	0xFF6
 18120                           tablat	equ	0xFF5
 18121                           prodh	equ	0xFF4
 18122                           prodl	equ	0xFF3
 18123                           intcon	equ	0xFF2
 18124                           intcon2	equ	0xFF1
 18125                           intcon3	equ	0xFF0
 18126                           indf0	equ	0xFEF
 18127                           postinc0	equ	0xFEE
 18128                           fsr0h	equ	0xFEA
 18129                           fsr0l	equ	0xFE9
 18130                           wreg	equ	0xFE8
 18131                           postdec1	equ	0xFE5
 18132                           fsr1h	equ	0xFE2
 18133                           fsr1l	equ	0xFE1
 18134                           indf2	equ	0xFDF
 18135                           postinc2	equ	0xFDE
 18136                           postdec2	equ	0xFDD
 18137                           fsr2h	equ	0xFDA
 18138                           fsr2l	equ	0xFD9
 18139                           status	equ	0xFD8
 18140                           
 18141 ;; *************** function _updateMenu *****************
 18142 ;; Defined at:
 18143 ;;		line 213 in file "UI.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;		None
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;		None
 18148 ;; Return value:  Size  Location     Type
 18149 ;;                  1    wreg      void 
 18150 ;; Registers used:
 18151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18161 ;;Total ram usage:        2 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:    5
 18164 ;; This function calls:
 18165 ;;		_change_state_to_logs_11
 18166 ;;		_change_state_to_logs_12
 18167 ;;		_change_state_to_logs_22
 18168 ;;		_change_state_to_logs_23
 18169 ;;		_change_state_to_logs_33
 18170 ;;		_change_state_to_logs_34
 18171 ;;		_change_state_to_menu_11
 18172 ;;		_change_state_to_menu_23
 18173 ;;		_dispLogs
 18174 ;;		_inputHandler
 18175 ;;		i2_change_state_to_menu_12
 18176 ;;		i2_change_state_to_menu_22
 18177 ;;		i2_change_state_to_menu_start
 18178 ;; This function is called by:
 18179 ;;		_handler
 18180 ;; This function uses a non-reentrant model
 18181 ;;
 18182                           
 18183                           	psect	text62
 18184  0026F6                     __ptext62:
 18185                           	opt stack 0
 18186  0026F6                     _updateMenu:
 18187                           	opt stack 18
 18188                           
 18189                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 18190                           
 18191                           ;incstack = 0
 18192  0026F6  0E00               	movlw	0
 18193  0026F8  6E78               	movwf	_up+1,c
 18194  0026FA  0E00               	movlw	0
 18195  0026FC  6E77               	movwf	_up,c
 18196  0026FE  0E00               	movlw	0
 18197  002700  6E5E               	movwf	_down+1,c
 18198  002702  0E00               	movlw	0
 18199  002704  6E5D               	movwf	_down,c
 18200  002706  0E00               	movlw	0
 18201  002708  6E60               	movwf	_enter+1,c
 18202  00270A  0E00               	movlw	0
 18203  00270C  6E5F               	movwf	_enter,c
 18204  00270E  0E00               	movlw	0
 18205  002710  6E5C               	movwf	_back+1,c
 18206  002712  0E00               	movlw	0
 18207  002714  6E5B               	movwf	_back,c
 18208                           
 18209                           ;UI.c: 215: (INTCONbits.GIE = 0);
 18210  002716  9EF2               	bcf	intcon,7,c	;volatile
 18211                           
 18212                           ;UI.c: 217: if (inputHandler()
 18213                           ;UI.c: 220: ){
 18214  002718  EC7B  F01A         	call	_inputHandler	;wreg free
 18215  00271C  502A               	movf	?_inputHandler,w,c
 18216  00271E  102B               	iorwf	?_inputHandler+1,w,c
 18217  002720  A4D8               	btfss	status,2,c
 18218  002722  D112               	goto	i2l9000
 18219  002724  D146               	goto	i2l257
 18220  002726                     i2l8852:
 18221                           
 18222                           ;UI.c: 224: change_state_to_menu_11();
 18223  002726  EC7F  F027         	call	_change_state_to_menu_11	;wreg free
 18224                           
 18225                           ;UI.c: 225: break;
 18226  00272A  D143               	goto	i2l257
 18227  00272C                     i2l8854:
 18228                           
 18229                           ;UI.c: 228: if(up){
 18230  00272C  5077               	movf	_up,w,c
 18231  00272E  1078               	iorwf	_up+1,w,c
 18232  002730  B4D8               	btfsc	status,2,c
 18233  002732  D003               	goto	i2l8858
 18234                           
 18235                           ;UI.c: 229: change_state_to_menu_23();
 18236  002734  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18237                           
 18238                           ;UI.c: 230: }
 18239  002738  D13C               	goto	i2l257
 18240  00273A                     i2l8858:
 18241                           
 18242                           ;UI.c: 231: else if(down){
 18243  00273A  505D               	movf	_down,w,c
 18244  00273C  105E               	iorwf	_down+1,w,c
 18245  00273E  B4D8               	btfsc	status,2,c
 18246  002740  D003               	goto	i2l8862
 18247                           
 18248                           ;UI.c: 232: change_state_to_menu_12();
 18249  002742  EC4F  F027         	call	i2_change_state_to_menu_12	;wreg free
 18250                           
 18251                           ;UI.c: 233: }
 18252  002746  D135               	goto	i2l257
 18253  002748                     i2l8862:
 18254                           
 18255                           ;UI.c: 234: else if(enter){
 18256  002748  505F               	movf	_enter,w,c
 18257  00274A  1060               	iorwf	_enter+1,w,c
 18258  00274C  B4D8               	btfsc	status,2,c
 18259  00274E  D131               	goto	i2l257
 18260                           
 18261                           ;UI.c: 235: change_state_to_menu_start();
 18262  002750  EC92  F028         	call	i2_change_state_to_menu_start	;wreg free
 18263                           
 18264                           ;UI.c: 236: }
 18265                           ;UI.c: 237: break;
 18266  002754  D12E               	goto	i2l257
 18267  002756                     i2l8866:
 18268                           
 18269                           ;UI.c: 240: if(up){
 18270  002756  5077               	movf	_up,w,c
 18271  002758  1078               	iorwf	_up+1,w,c
 18272  00275A  B4D8               	btfsc	status,2,c
 18273  00275C  D003               	goto	i2l8870
 18274                           
 18275                           ;UI.c: 241: change_state_to_menu_11();
 18276  00275E  EC7F  F027         	call	_change_state_to_menu_11	;wreg free
 18277                           
 18278                           ;UI.c: 242: }
 18279  002762  D127               	goto	i2l257
 18280  002764                     i2l8870:
 18281                           
 18282                           ;UI.c: 243: else if(down){
 18283  002764  505D               	movf	_down,w,c
 18284  002766  105E               	iorwf	_down+1,w,c
 18285  002768  B4D8               	btfsc	status,2,c
 18286  00276A  D011               	goto	i2l8886
 18287                           
 18288                           ;UI.c: 244: change_state_to_menu_23();
 18289  00276C  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18290                           
 18291                           ;UI.c: 245: }
 18292  002770  D120               	goto	i2l257
 18293  002772                     i2l8878:
 18294                           
 18295                           ;UI.c: 252: if(up){
 18296  002772  5077               	movf	_up,w,c
 18297  002774  1078               	iorwf	_up+1,w,c
 18298  002776  B4D8               	btfsc	status,2,c
 18299  002778  D003               	goto	i2l8882
 18300                           
 18301                           ;UI.c: 253: change_state_to_menu_11();
 18302  00277A  EC7F  F027         	call	_change_state_to_menu_11	;wreg free
 18303                           
 18304                           ;UI.c: 254: }
 18305  00277E  D119               	goto	i2l257
 18306  002780                     i2l8882:
 18307                           
 18308                           ;UI.c: 255: else if(down){
 18309  002780  505D               	movf	_down,w,c
 18310  002782  105E               	iorwf	_down+1,w,c
 18311  002784  B4D8               	btfsc	status,2,c
 18312  002786  D003               	goto	i2l8886
 18313                           
 18314                           ;UI.c: 256: change_state_to_menu_23();
 18315  002788  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18316                           
 18317                           ;UI.c: 257: }
 18318  00278C  D112               	goto	i2l257
 18319  00278E                     i2l8886:
 18320                           
 18321                           ;UI.c: 258: else if(enter){
 18322  00278E  505F               	movf	_enter,w,c
 18323  002790  1060               	iorwf	_enter+1,w,c
 18324  002792  B4D8               	btfsc	status,2,c
 18325  002794  D10E               	goto	i2l257
 18326                           
 18327                           ;UI.c: 259: machine_state = Sorting_state;
 18328  002796  0E01               	movlw	1
 18329  002798  0100               	movlb	0	; () banked
 18330  00279A  6FFC               	movwf	_machine_state& (0+255),b
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;UI.c: 260: }
 18334                           ;UI.c: 261: break;
 18335                           
 18336                           ; BSR set to: 0
 18337                           
 18338                           ; BSR set to: 0
 18339  00279C  D10A               	goto	i2l257
 18340  00279E                     i2l8890:
 18341                           
 18342                           ;UI.c: 264: if(up){
 18343  00279E  5077               	movf	_up,w,c
 18344  0027A0  1078               	iorwf	_up+1,w,c
 18345  0027A2  B4D8               	btfsc	status,2,c
 18346  0027A4  D003               	goto	i2l8894
 18347                           
 18348                           ;UI.c: 265: change_state_to_menu_22();
 18349  0027A6  EC37  F027         	call	i2_change_state_to_menu_22	;wreg free
 18350                           
 18351                           ;UI.c: 266: }
 18352  0027AA  D103               	goto	i2l257
 18353  0027AC                     i2l8894:
 18354                           
 18355                           ;UI.c: 267: else if(down){
 18356  0027AC  505D               	movf	_down,w,c
 18357  0027AE  105E               	iorwf	_down+1,w,c
 18358  0027B0  B4D8               	btfsc	status,2,c
 18359  0027B2  D003               	goto	i2l8898
 18360                           
 18361                           ;UI.c: 268: change_state_to_menu_11();
 18362  0027B4  EC7F  F027         	call	_change_state_to_menu_11	;wreg free
 18363                           
 18364                           ;UI.c: 269: }
 18365  0027B8  D0FC               	goto	i2l257
 18366  0027BA                     i2l8898:
 18367                           
 18368                           ;UI.c: 270: else if(enter){
 18369  0027BA  505F               	movf	_enter,w,c
 18370  0027BC  1060               	iorwf	_enter+1,w,c
 18371  0027BE  B4D8               	btfsc	status,2,c
 18372  0027C0  D0F8               	goto	i2l257
 18373                           
 18374                           ;UI.c: 271: change_state_to_logs_11();
 18375  0027C2  ECF7  F027         	call	_change_state_to_logs_11	;wreg free
 18376                           
 18377                           ;UI.c: 272: }
 18378                           ;UI.c: 273: break;
 18379  0027C6  D0F5               	goto	i2l257
 18380  0027C8                     i2l8902:
 18381                           
 18382                           ;UI.c: 276: if(up){
 18383  0027C8  5077               	movf	_up,w,c
 18384  0027CA  1078               	iorwf	_up+1,w,c
 18385  0027CC  B4D8               	btfsc	status,2,c
 18386  0027CE  D003               	goto	i2l8906
 18387                           
 18388                           ;UI.c: 277: change_state_to_logs_34();
 18389  0027D0  EC97  F027         	call	_change_state_to_logs_34	;wreg free
 18390                           
 18391                           ;UI.c: 278: }
 18392  0027D4  D0EE               	goto	i2l257
 18393  0027D6                     i2l8906:
 18394                           
 18395                           ;UI.c: 279: else if(down){
 18396  0027D6  505D               	movf	_down,w,c
 18397  0027D8  105E               	iorwf	_down+1,w,c
 18398  0027DA  B4D8               	btfsc	status,2,c
 18399  0027DC  D003               	goto	i2l8910
 18400                           
 18401                           ;UI.c: 280: change_state_to_logs_12();
 18402  0027DE  ECDF  F027         	call	_change_state_to_logs_12	;wreg free
 18403                           
 18404                           ;UI.c: 281: }
 18405  0027E2  D0E7               	goto	i2l257
 18406  0027E4                     i2l8910:
 18407                           
 18408                           ;UI.c: 282: else if(enter){
 18409  0027E4  505F               	movf	_enter,w,c
 18410  0027E6  1060               	iorwf	_enter+1,w,c
 18411  0027E8  B4D8               	btfsc	status,2,c
 18412  0027EA  D007               	goto	i2l8914
 18413                           
 18414                           ;UI.c: 283: dispLogs(1);
 18415  0027EC  0E00               	movlw	0
 18416  0027EE  6E13               	movwf	dispLogs@myLog+1,c
 18417  0027F0  0E01               	movlw	1
 18418  0027F2  6E12               	movwf	dispLogs@myLog,c
 18419  0027F4  ECCC  F028         	call	_dispLogs	;wreg free
 18420                           
 18421                           ;UI.c: 284: }
 18422  0027F8  D0DC               	goto	i2l257
 18423  0027FA                     i2l8914:
 18424                           
 18425                           ;UI.c: 285: else if(back){
 18426  0027FA  505B               	movf	_back,w,c
 18427  0027FC  105C               	iorwf	_back+1,w,c
 18428  0027FE  B4D8               	btfsc	status,2,c
 18429  002800  D0D8               	goto	i2l257
 18430                           
 18431                           ;UI.c: 286: change_state_to_menu_23();
 18432  002802  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18433                           
 18434                           ;UI.c: 287: }
 18435                           ;UI.c: 288: break;
 18436  002806  D0D5               	goto	i2l257
 18437  002808                     i2l8918:
 18438                           
 18439                           ;UI.c: 291: if(up){
 18440  002808  5077               	movf	_up,w,c
 18441  00280A  1078               	iorwf	_up+1,w,c
 18442  00280C  B4D8               	btfsc	status,2,c
 18443  00280E  D003               	goto	i2l8922
 18444                           
 18445                           ;UI.c: 292: change_state_to_logs_11();
 18446  002810  ECF7  F027         	call	_change_state_to_logs_11	;wreg free
 18447                           
 18448                           ;UI.c: 293: }
 18449  002814  D0CE               	goto	i2l257
 18450  002816                     i2l8922:
 18451                           
 18452                           ;UI.c: 294: else if(down){
 18453  002816  505D               	movf	_down,w,c
 18454  002818  105E               	iorwf	_down+1,w,c
 18455  00281A  B4D8               	btfsc	status,2,c
 18456  00281C  D003               	goto	i2l8926
 18457                           
 18458                           ;UI.c: 295: change_state_to_logs_23();
 18459  00281E  EC26  F028         	call	_change_state_to_logs_23	;wreg free
 18460                           
 18461                           ;UI.c: 296: }
 18462  002822  D0C7               	goto	i2l257
 18463  002824                     i2l8926:
 18464                           
 18465                           ;UI.c: 297: else if(enter){
 18466  002824  505F               	movf	_enter,w,c
 18467  002826  1060               	iorwf	_enter+1,w,c
 18468  002828  B4D8               	btfsc	status,2,c
 18469  00282A  D007               	goto	i2l8930
 18470                           
 18471                           ;UI.c: 298: dispLogs(2);
 18472  00282C  0E00               	movlw	0
 18473  00282E  6E13               	movwf	dispLogs@myLog+1,c
 18474  002830  0E02               	movlw	2
 18475  002832  6E12               	movwf	dispLogs@myLog,c
 18476  002834  ECCC  F028         	call	_dispLogs	;wreg free
 18477                           
 18478                           ;UI.c: 299: }
 18479  002838  D0BC               	goto	i2l257
 18480  00283A                     i2l8930:
 18481                           
 18482                           ;UI.c: 300: else if(back){
 18483  00283A  505B               	movf	_back,w,c
 18484  00283C  105C               	iorwf	_back+1,w,c
 18485  00283E  B4D8               	btfsc	status,2,c
 18486  002840  D0B8               	goto	i2l257
 18487                           
 18488                           ;UI.c: 301: change_state_to_menu_23();
 18489  002842  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18490                           
 18491                           ;UI.c: 302: }
 18492                           ;UI.c: 303: break;
 18493  002846  D0B5               	goto	i2l257
 18494  002848                     i2l8934:
 18495                           
 18496                           ;UI.c: 306: if(up){
 18497  002848  5077               	movf	_up,w,c
 18498  00284A  1078               	iorwf	_up+1,w,c
 18499  00284C  B4D8               	btfsc	status,2,c
 18500  00284E  D003               	goto	i2l8938
 18501                           
 18502                           ;UI.c: 307: change_state_to_logs_11();
 18503  002850  ECF7  F027         	call	_change_state_to_logs_11	;wreg free
 18504                           
 18505                           ;UI.c: 308: }
 18506  002854  D0AE               	goto	i2l257
 18507  002856                     i2l8938:
 18508                           
 18509                           ;UI.c: 309: else if(down){
 18510  002856  505D               	movf	_down,w,c
 18511  002858  105E               	iorwf	_down+1,w,c
 18512  00285A  B4D8               	btfsc	status,2,c
 18513  00285C  D003               	goto	i2l8942
 18514                           
 18515                           ;UI.c: 310: change_state_to_logs_23();
 18516  00285E  EC26  F028         	call	_change_state_to_logs_23	;wreg free
 18517                           
 18518                           ;UI.c: 311: }
 18519  002862  D0A7               	goto	i2l257
 18520  002864                     i2l8942:
 18521                           
 18522                           ;UI.c: 312: else if(enter){
 18523  002864  505F               	movf	_enter,w,c
 18524  002866  1060               	iorwf	_enter+1,w,c
 18525  002868  B4D8               	btfsc	status,2,c
 18526  00286A  D007               	goto	i2l8946
 18527                           
 18528                           ;UI.c: 313: dispLogs(2);
 18529  00286C  0E00               	movlw	0
 18530  00286E  6E13               	movwf	dispLogs@myLog+1,c
 18531  002870  0E02               	movlw	2
 18532  002872  6E12               	movwf	dispLogs@myLog,c
 18533  002874  ECCC  F028         	call	_dispLogs	;wreg free
 18534                           
 18535                           ;UI.c: 314: }
 18536  002878  D09C               	goto	i2l257
 18537  00287A                     i2l8946:
 18538                           
 18539                           ;UI.c: 315: else if(back){
 18540  00287A  505B               	movf	_back,w,c
 18541  00287C  105C               	iorwf	_back+1,w,c
 18542  00287E  B4D8               	btfsc	status,2,c
 18543  002880  D098               	goto	i2l257
 18544                           
 18545                           ;UI.c: 316: change_state_to_menu_23();
 18546  002882  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18547                           
 18548                           ;UI.c: 317: }
 18549                           ;UI.c: 318: break;
 18550  002886  D095               	goto	i2l257
 18551  002888                     i2l8950:
 18552                           
 18553                           ;UI.c: 321: if(up){
 18554  002888  5077               	movf	_up,w,c
 18555  00288A  1078               	iorwf	_up+1,w,c
 18556  00288C  B4D8               	btfsc	status,2,c
 18557  00288E  D003               	goto	i2l8954
 18558                           
 18559                           ;UI.c: 322: change_state_to_logs_22();
 18560  002890  ECC7  F027         	call	_change_state_to_logs_22	;wreg free
 18561                           
 18562                           ;UI.c: 323: }
 18563  002894  D08E               	goto	i2l257
 18564  002896                     i2l8954:
 18565                           
 18566                           ;UI.c: 324: else if(down){
 18567  002896  505D               	movf	_down,w,c
 18568  002898  105E               	iorwf	_down+1,w,c
 18569  00289A  B4D8               	btfsc	status,2,c
 18570  00289C  D003               	goto	i2l8958
 18571                           
 18572                           ;UI.c: 325: change_state_to_logs_34();
 18573  00289E  EC97  F027         	call	_change_state_to_logs_34	;wreg free
 18574                           
 18575                           ;UI.c: 326: }
 18576  0028A2  D087               	goto	i2l257
 18577  0028A4                     i2l8958:
 18578                           
 18579                           ;UI.c: 327: else if(enter){
 18580  0028A4  505F               	movf	_enter,w,c
 18581  0028A6  1060               	iorwf	_enter+1,w,c
 18582  0028A8  B4D8               	btfsc	status,2,c
 18583  0028AA  D007               	goto	i2l8962
 18584                           
 18585                           ;UI.c: 328: dispLogs(3);
 18586  0028AC  0E00               	movlw	0
 18587  0028AE  6E13               	movwf	dispLogs@myLog+1,c
 18588  0028B0  0E03               	movlw	3
 18589  0028B2  6E12               	movwf	dispLogs@myLog,c
 18590  0028B4  ECCC  F028         	call	_dispLogs	;wreg free
 18591                           
 18592                           ;UI.c: 329: }
 18593  0028B8  D07C               	goto	i2l257
 18594  0028BA                     i2l8962:
 18595                           
 18596                           ;UI.c: 330: else if(back){
 18597  0028BA  505B               	movf	_back,w,c
 18598  0028BC  105C               	iorwf	_back+1,w,c
 18599  0028BE  B4D8               	btfsc	status,2,c
 18600  0028C0  D078               	goto	i2l257
 18601                           
 18602                           ;UI.c: 331: change_state_to_menu_23();
 18603  0028C2  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18604                           
 18605                           ;UI.c: 332: }
 18606                           ;UI.c: 333: break;
 18607  0028C6  D075               	goto	i2l257
 18608  0028C8                     i2l8966:
 18609                           
 18610                           ;UI.c: 336: if(up){
 18611  0028C8  5077               	movf	_up,w,c
 18612  0028CA  1078               	iorwf	_up+1,w,c
 18613  0028CC  B4D8               	btfsc	status,2,c
 18614  0028CE  D003               	goto	i2l8970
 18615                           
 18616                           ;UI.c: 337: change_state_to_logs_22();
 18617  0028D0  ECC7  F027         	call	_change_state_to_logs_22	;wreg free
 18618                           
 18619                           ;UI.c: 338: }
 18620  0028D4  D06E               	goto	i2l257
 18621  0028D6                     i2l8970:
 18622                           
 18623                           ;UI.c: 339: else if(down){
 18624  0028D6  505D               	movf	_down,w,c
 18625  0028D8  105E               	iorwf	_down+1,w,c
 18626  0028DA  B4D8               	btfsc	status,2,c
 18627  0028DC  D003               	goto	i2l8974
 18628                           
 18629                           ;UI.c: 340: change_state_to_logs_34();
 18630  0028DE  EC97  F027         	call	_change_state_to_logs_34	;wreg free
 18631                           
 18632                           ;UI.c: 341: }
 18633  0028E2  D067               	goto	i2l257
 18634  0028E4                     i2l8974:
 18635                           
 18636                           ;UI.c: 342: else if(enter){
 18637  0028E4  505F               	movf	_enter,w,c
 18638  0028E6  1060               	iorwf	_enter+1,w,c
 18639  0028E8  B4D8               	btfsc	status,2,c
 18640  0028EA  D007               	goto	i2l8978
 18641                           
 18642                           ;UI.c: 343: dispLogs(3);
 18643  0028EC  0E00               	movlw	0
 18644  0028EE  6E13               	movwf	dispLogs@myLog+1,c
 18645  0028F0  0E03               	movlw	3
 18646  0028F2  6E12               	movwf	dispLogs@myLog,c
 18647  0028F4  ECCC  F028         	call	_dispLogs	;wreg free
 18648                           
 18649                           ;UI.c: 344: }
 18650  0028F8  D05C               	goto	i2l257
 18651  0028FA                     i2l8978:
 18652                           
 18653                           ;UI.c: 345: else if(back){
 18654  0028FA  505B               	movf	_back,w,c
 18655  0028FC  105C               	iorwf	_back+1,w,c
 18656  0028FE  B4D8               	btfsc	status,2,c
 18657  002900  D058               	goto	i2l257
 18658                           
 18659                           ;UI.c: 346: change_state_to_menu_23();
 18660  002902  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18661                           
 18662                           ;UI.c: 347: }
 18663                           ;UI.c: 348: break;
 18664  002906  D055               	goto	i2l257
 18665  002908                     i2l8982:
 18666                           
 18667                           ;UI.c: 351: if(up){
 18668  002908  5077               	movf	_up,w,c
 18669  00290A  1078               	iorwf	_up+1,w,c
 18670  00290C  B4D8               	btfsc	status,2,c
 18671  00290E  D003               	goto	i2l8986
 18672                           
 18673                           ;UI.c: 352: change_state_to_logs_33();
 18674  002910  ECAF  F027         	call	_change_state_to_logs_33	;wreg free
 18675                           
 18676                           ;UI.c: 353: }
 18677  002914  D04E               	goto	i2l257
 18678  002916                     i2l8986:
 18679                           
 18680                           ;UI.c: 354: else if(down){
 18681  002916  505D               	movf	_down,w,c
 18682  002918  105E               	iorwf	_down+1,w,c
 18683  00291A  B4D8               	btfsc	status,2,c
 18684  00291C  D003               	goto	i2l8990
 18685                           
 18686                           ;UI.c: 355: change_state_to_logs_11();
 18687  00291E  ECF7  F027         	call	_change_state_to_logs_11	;wreg free
 18688                           
 18689                           ;UI.c: 356: }
 18690  002922  D047               	goto	i2l257
 18691  002924                     i2l8990:
 18692                           
 18693                           ;UI.c: 357: else if(enter){
 18694  002924  505F               	movf	_enter,w,c
 18695  002926  1060               	iorwf	_enter+1,w,c
 18696  002928  B4D8               	btfsc	status,2,c
 18697  00292A  D007               	goto	i2l8994
 18698                           
 18699                           ;UI.c: 358: dispLogs(4);
 18700  00292C  0E00               	movlw	0
 18701  00292E  6E13               	movwf	dispLogs@myLog+1,c
 18702  002930  0E04               	movlw	4
 18703  002932  6E12               	movwf	dispLogs@myLog,c
 18704  002934  ECCC  F028         	call	_dispLogs	;wreg free
 18705                           
 18706                           ;UI.c: 359: }
 18707  002938  D03C               	goto	i2l257
 18708  00293A                     i2l8994:
 18709                           
 18710                           ;UI.c: 360: else if(back){
 18711  00293A  505B               	movf	_back,w,c
 18712  00293C  105C               	iorwf	_back+1,w,c
 18713  00293E  B4D8               	btfsc	status,2,c
 18714  002940  D038               	goto	i2l257
 18715                           
 18716                           ;UI.c: 361: change_state_to_menu_23();
 18717  002942  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 18718                           
 18719                           ;UI.c: 367: }
 18720                           
 18721                           ;UI.c: 366: break;
 18722                           
 18723                           ;UI.c: 365: default:
 18724                           
 18725                           ;UI.c: 362: }
 18726                           ;UI.c: 363: break;
 18727  002946  D035               	goto	i2l257
 18728  002948                     i2l9000:
 18729  002948  C0EC  F043         	movff	_cur_state,??_updateMenu
 18730  00294C  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 18731                           
 18732                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18733                           ; Switch size 1, requested type "space"
 18734                           ; Number of cases is 3, Range of values is 0 to 4
 18735                           ; switch strategies available:
 18736                           ; Name         Instructions Cycles
 18737                           ; simple_byte           10     6 (average)
 18738                           ;	Chosen strategy is simple_byte
 18739  002950  5044               	movf	??_updateMenu+1,w,c
 18740  002952  0A00               	xorlw	0	; case 0
 18741  002954  B4D8               	btfsc	status,2,c
 18742  002956  D007               	goto	i2l9942
 18743  002958  0A03               	xorlw	3	; case 3
 18744  00295A  B4D8               	btfsc	status,2,c
 18745  00295C  D015               	goto	i2l9944
 18746  00295E  0A07               	xorlw	7	; case 4
 18747  002960  B4D8               	btfsc	status,2,c
 18748  002962  D020               	goto	i2l9946
 18749  002964  D026               	goto	i2l257
 18750  002966                     i2l9942:
 18751                           
 18752                           ; Switch size 1, requested type "space"
 18753                           ; Number of cases is 5, Range of values is 0 to 23
 18754                           ; switch strategies available:
 18755                           ; Name         Instructions Cycles
 18756                           ; simple_byte           16     9 (average)
 18757                           ;	Chosen strategy is simple_byte
 18758  002966  5043               	movf	??_updateMenu,w,c
 18759  002968  0A00               	xorlw	0	; case 0
 18760  00296A  B4D8               	btfsc	status,2,c
 18761  00296C  D6DC               	goto	i2l8852
 18762  00296E  0A0B               	xorlw	11	; case 11
 18763  002970  B4D8               	btfsc	status,2,c
 18764  002972  D6DC               	goto	i2l8854
 18765  002974  0A07               	xorlw	7	; case 12
 18766  002976  B4D8               	btfsc	status,2,c
 18767  002978  D6EE               	goto	i2l8866
 18768  00297A  0A1A               	xorlw	26	; case 22
 18769  00297C  B4D8               	btfsc	status,2,c
 18770  00297E  D6F9               	goto	i2l8878
 18771  002980  0A01               	xorlw	1	; case 23
 18772  002982  B4D8               	btfsc	status,2,c
 18773  002984  D70C               	goto	i2l8890
 18774  002986  D015               	goto	i2l257
 18775  002988                     i2l9944:
 18776                           
 18777                           ; Switch size 1, requested type "space"
 18778                           ; Number of cases is 4, Range of values is 243 to 255
 18779                           ; switch strategies available:
 18780                           ; Name         Instructions Cycles
 18781                           ; simple_byte           13     7 (average)
 18782                           ;	Chosen strategy is simple_byte
 18783  002988  5043               	movf	??_updateMenu,w,c
 18784  00298A  0AF3               	xorlw	243	; case 243
 18785  00298C  B4D8               	btfsc	status,2,c
 18786  00298E  D71C               	goto	i2l8902
 18787  002990  0A07               	xorlw	7	; case 244
 18788  002992  B4D8               	btfsc	status,2,c
 18789  002994  D739               	goto	i2l8918
 18790  002996  0A0A               	xorlw	10	; case 254
 18791  002998  B4D8               	btfsc	status,2,c
 18792  00299A  D756               	goto	i2l8934
 18793  00299C  0A01               	xorlw	1	; case 255
 18794  00299E  B4D8               	btfsc	status,2,c
 18795  0029A0  D773               	goto	i2l8950
 18796  0029A2  D007               	goto	i2l257
 18797  0029A4                     i2l9946:
 18798                           
 18799                           ; Switch size 1, requested type "space"
 18800                           ; Number of cases is 2, Range of values is 9 to 10
 18801                           ; switch strategies available:
 18802                           ; Name         Instructions Cycles
 18803                           ; simple_byte            7     4 (average)
 18804                           ;	Chosen strategy is simple_byte
 18805  0029A4  5043               	movf	??_updateMenu,w,c
 18806  0029A6  0A09               	xorlw	9	; case 9
 18807  0029A8  B4D8               	btfsc	status,2,c
 18808  0029AA  D78E               	goto	i2l8966
 18809  0029AC  0A03               	xorlw	3	; case 10
 18810  0029AE  B4D8               	btfsc	status,2,c
 18811  0029B0  D7AB               	goto	i2l8982
 18812  0029B2                     i2l257:
 18813                           
 18814                           ;UI.c: 368: }
 18815                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18816  0029B2  8EF2               	bsf	intcon,7,c	;volatile
 18817  0029B4  0012               	return		;funcret
 18818  0029B6                     __end_of_updateMenu:
 18819                           	opt stack 0
 18820                           pclatu	equ	0xFFB
 18821                           pclath	equ	0xFFA
 18822                           tblptru	equ	0xFF8
 18823                           tblptrh	equ	0xFF7
 18824                           tblptrl	equ	0xFF6
 18825                           tablat	equ	0xFF5
 18826                           prodh	equ	0xFF4
 18827                           prodl	equ	0xFF3
 18828                           intcon	equ	0xFF2
 18829                           intcon2	equ	0xFF1
 18830                           intcon3	equ	0xFF0
 18831                           indf0	equ	0xFEF
 18832                           postinc0	equ	0xFEE
 18833                           fsr0h	equ	0xFEA
 18834                           fsr0l	equ	0xFE9
 18835                           wreg	equ	0xFE8
 18836                           postdec1	equ	0xFE5
 18837                           fsr1h	equ	0xFE2
 18838                           fsr1l	equ	0xFE1
 18839                           indf2	equ	0xFDF
 18840                           postinc2	equ	0xFDE
 18841                           postdec2	equ	0xFDD
 18842                           fsr2h	equ	0xFDA
 18843                           fsr2l	equ	0xFD9
 18844                           status	equ	0xFD8
 18845                           
 18846 ;; *************** function i2_change_state_to_menu_start *****************
 18847 ;; Defined at:
 18848 ;;		line 474 in file "UI.c"
 18849 ;; Parameters:    Size  Location     Type
 18850 ;;		None
 18851 ;; Auto vars:     Size  Location     Type
 18852 ;;		None
 18853 ;; Return value:  Size  Location     Type
 18854 ;;                  1    wreg      void 
 18855 ;; Registers used:
 18856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18857 ;; Tracked objects:
 18858 ;;		On entry : 0/0
 18859 ;;		On exit  : 0/0
 18860 ;;		Unchanged: 0/0
 18861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18866 ;;Total ram usage:        0 bytes
 18867 ;; Hardware stack levels used:    1
 18868 ;; Hardware stack levels required when called:    4
 18869 ;; This function calls:
 18870 ;;		i2_lcdInst
 18871 ;;		i2_printRTC
 18872 ;;		i2_printf
 18873 ;; This function is called by:
 18874 ;;		_updateMenu
 18875 ;; This function uses a non-reentrant model
 18876 ;;
 18877                           
 18878                           	psect	text63
 18879  005124                     __ptext63:
 18880                           	opt stack 0
 18881  005124                     i2_change_state_to_menu_start:
 18882                           	opt stack 18
 18883                           
 18884                           ;UI.c: 475: cur_state = 0;
 18885                           
 18886                           ;incstack = 0
 18887  005124  0E00               	movlw	0
 18888  005126  0100               	movlb	0	; () banked
 18889  005128  6FED               	movwf	(_cur_state+1)& (0+255),b
 18890  00512A  0E00               	movlw	0
 18891  00512C  6FEC               	movwf	_cur_state& (0+255),b
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;UI.c: 477: lcdInst(0b10000000);;
 18895  00512E  0E80               	movlw	128
 18896  005130  EC6A  F029         	call	i2_lcdInst
 18897                           
 18898                           ;UI.c: 478: printRTC();
 18899  005134  EC53  F017         	call	i2_printRTC	;wreg free
 18900                           
 18901                           ;UI.c: 479: lcdInst(0b11000000);;
 18902  005138  0EC0               	movlw	192
 18903  00513A  EC6A  F029         	call	i2_lcdInst
 18904                           
 18905                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18906  00513E  0EF3               	movlw	low STR_30
 18907  005140  6E0D               	movwf	i2printf@f,c
 18908  005142  0EFD               	movlw	high STR_30
 18909  005144  6E0E               	movwf	i2printf@f+1,c
 18910  005146  ECE0  F00E         	call	i2_printf	;wreg free
 18911  00514A  0012               	return		;funcret
 18912  00514C                     __end_ofi2_change_state_to_menu_start:
 18913                           	opt stack 0
 18914                           pclatu	equ	0xFFB
 18915                           pclath	equ	0xFFA
 18916                           tblptru	equ	0xFF8
 18917                           tblptrh	equ	0xFF7
 18918                           tblptrl	equ	0xFF6
 18919                           tablat	equ	0xFF5
 18920                           prodh	equ	0xFF4
 18921                           prodl	equ	0xFF3
 18922                           intcon	equ	0xFF2
 18923                           intcon2	equ	0xFF1
 18924                           intcon3	equ	0xFF0
 18925                           indf0	equ	0xFEF
 18926                           postinc0	equ	0xFEE
 18927                           fsr0h	equ	0xFEA
 18928                           fsr0l	equ	0xFE9
 18929                           wreg	equ	0xFE8
 18930                           postdec1	equ	0xFE5
 18931                           fsr1h	equ	0xFE2
 18932                           fsr1l	equ	0xFE1
 18933                           indf2	equ	0xFDF
 18934                           postinc2	equ	0xFDE
 18935                           postdec2	equ	0xFDD
 18936                           fsr2h	equ	0xFDA
 18937                           fsr2l	equ	0xFD9
 18938                           status	equ	0xFD8
 18939                           
 18940 ;; *************** function i2_printRTC *****************
 18941 ;; Defined at:
 18942 ;;		line 63 in file "RTC.c"
 18943 ;; Parameters:    Size  Location     Type
 18944 ;;		None
 18945 ;; Auto vars:     Size  Location     Type
 18946 ;;  printRTC       14   44[COMRAM] int [7]
 18947 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18948 ;;  printRTC        2   64[COMRAM] int 
 18949 ;;  printRTC        2   58[COMRAM] int 
 18950 ;; Return value:  Size  Location     Type
 18951 ;;                  1    wreg      void 
 18952 ;; Registers used:
 18953 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18954 ;; Tracked objects:
 18955 ;;		On entry : 0/0
 18956 ;;		On exit  : 0/0
 18957 ;;		Unchanged: 0/0
 18958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18960 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18961 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18962 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18963 ;;Total ram usage:       25 bytes
 18964 ;; Hardware stack levels used:    1
 18965 ;; Hardware stack levels required when called:    3
 18966 ;; This function calls:
 18967 ;;		i2_getRTC
 18968 ;;		i2_lcdInst
 18969 ;;		i2_printf
 18970 ;;		i2_strcpy
 18971 ;; This function is called by:
 18972 ;;		i2_change_state_to_menu_start
 18973 ;; This function uses a non-reentrant model
 18974 ;;
 18975                           
 18976                           	psect	text64
 18977  002EA6                     __ptext64:
 18978                           	opt stack 0
 18979  002EA6                     i2_printRTC:
 18980                           	opt stack 18
 18981                           
 18982                           ;RTC.c: 64: getRTC();
 18983                           
 18984                           ;incstack = 0
 18985  002EA6  ECE5  F023         	call	i2_getRTC	;wreg free
 18986                           
 18987                           ;RTC.c: 65: char month[] = "MMM";
 18988  002EAA  C145  F03D         	movff	printRTC@F3226,i2printRTC@month
 18989  002EAE  C146  F03E         	movff	printRTC@F3226+1,i2printRTC@month+1
 18990  002EB2  C147  F03F         	movff	printRTC@F3226+2,i2printRTC@month+2
 18991  002EB6  C148  F040         	movff	printRTC@F3226+3,i2printRTC@month+3
 18992                           
 18993                           ;RTC.c: 66: int INT_time[7];
 18994                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18995  002EBA  0E00               	movlw	0
 18996  002EBC  6E42               	movwf	i2printRTC@i+1,c
 18997  002EBE  0E00               	movlw	0
 18998  002EC0  6E41               	movwf	i2printRTC@i,c
 18999  002EC2  BE42               	btfsc	i2printRTC@i+1,7,c
 19000  002EC4  D006               	goto	i2l6958
 19001  002EC6  5042               	movf	i2printRTC@i+1,w,c
 19002  002EC8  E135               	bnz	i2l606
 19003  002ECA  0E07               	movlw	7
 19004  002ECC  5C41               	subwf	i2printRTC@i,w,c
 19005  002ECE  B0D8               	btfsc	status,0,c
 19006  002ED0  D031               	goto	i2l606
 19007  002ED2                     i2l6958:
 19008                           
 19009                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19010  002ED2  0E1C               	movlw	low _time
 19011  002ED4  2441               	addwf	i2printRTC@i,w,c
 19012  002ED6  6ED9               	movwf	fsr2l,c
 19013  002ED8  0E01               	movlw	high _time
 19014  002EDA  2042               	addwfc	i2printRTC@i+1,w,c
 19015  002EDC  6EDA               	movwf	fsr2h,c
 19016  002EDE  50DF               	movf	indf2,w,c
 19017  002EE0  6E2A               	movwf	??i2_printRTC& (0+255),c
 19018  002EE2  3A2A               	swapf	??i2_printRTC,f,c
 19019  002EE4  0E0F               	movlw	15
 19020  002EE6  162A               	andwf	??i2_printRTC,f,c
 19021  002EE8  0E0F               	movlw	15
 19022  002EEA  162A               	andwf	??i2_printRTC,f,c
 19023  002EEC  502A               	movf	??i2_printRTC,w,c
 19024  002EEE  0D0A               	mullw	10
 19025  002EF0  0E1C               	movlw	low _time
 19026  002EF2  2441               	addwf	i2printRTC@i,w,c
 19027  002EF4  6ED9               	movwf	fsr2l,c
 19028  002EF6  0E01               	movlw	high _time
 19029  002EF8  2042               	addwfc	i2printRTC@i+1,w,c
 19030  002EFA  6EDA               	movwf	fsr2h,c
 19031  002EFC  50DF               	movf	indf2,w,c
 19032  002EFE  0B0F               	andlw	15
 19033  002F00  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19034  002F02  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19035  002F04  50F3               	movf	prodl,w,c
 19036  002F06  262B               	addwf	??i2_printRTC+1,f,c
 19037  002F08  50F4               	movf	prodh,w,c
 19038  002F0A  222C               	addwfc	??i2_printRTC+2,f,c
 19039  002F0C  90D8               	bcf	status,0,c
 19040  002F0E  3441               	rlcf	i2printRTC@i,w,c
 19041  002F10  6ED9               	movwf	fsr2l,c
 19042  002F12  3442               	rlcf	i2printRTC@i+1,w,c
 19043  002F14  6EDA               	movwf	fsr2h,c
 19044  002F16  0E2D               	movlw	low i2printRTC@INT_time
 19045  002F18  26D9               	addwf	fsr2l,f,c
 19046  002F1A  0E00               	movlw	high i2printRTC@INT_time
 19047  002F1C  22DA               	addwfc	fsr2h,f,c
 19048  002F1E  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19049  002F22  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19050  002F26  4A41               	infsnz	i2printRTC@i,f,c
 19051  002F28  2A42               	incf	i2printRTC@i+1,f,c
 19052  002F2A  BE42               	btfsc	i2printRTC@i+1,7,c
 19053  002F2C  D7D2               	goto	i2l6958
 19054  002F2E  5042               	movf	i2printRTC@i+1,w,c
 19055  002F30  E101               	bnz	i2u540_40
 19056  002F32  D7CB               	goto	L12
 19057  002F34                     i2u540_40:
 19058  002F34                     i2l606:
 19059                           
 19060                           ;RTC.c: 69: }
 19061                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19062  002F34  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19063  002F38  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19064                           
 19065                           ;RTC.c: 71: switch(RTC_month){
 19066  002F3C  D084               	goto	i2l6990
 19067  002F3E                     i2l6964:
 19068                           
 19069                           ;RTC.c: 73: strcpy(month, "JAN");
 19070  002F3E  0E3D               	movlw	low i2printRTC@month
 19071  002F40  6E01               	movwf	i2strcpy@to,c
 19072  002F42  0E00               	movlw	high i2printRTC@month
 19073  002F44  6E02               	movwf	i2strcpy@to+1,c
 19074  002F46  0EDB               	movlw	low STR_8
 19075  002F48  6E03               	movwf	i2strcpy@from,c
 19076  002F4A  0EFF               	movlw	high STR_8
 19077  002F4C  6E04               	movwf	i2strcpy@from+1,c
 19078  002F4E  EC06  F027         	call	i2_strcpy	;wreg free
 19079                           
 19080                           ;RTC.c: 74: break;
 19081  002F52  D0A6               	goto	i2l6992
 19082  002F54                     i2l6966:
 19083                           
 19084                           ;RTC.c: 76: strcpy(month, "FEB");
 19085  002F54  0E3D               	movlw	low i2printRTC@month
 19086  002F56  6E01               	movwf	i2strcpy@to,c
 19087  002F58  0E00               	movlw	high i2printRTC@month
 19088  002F5A  6E02               	movwf	i2strcpy@to+1,c
 19089  002F5C  0ECB               	movlw	low STR_9
 19090  002F5E  6E03               	movwf	i2strcpy@from,c
 19091  002F60  0EFF               	movlw	high STR_9
 19092  002F62  6E04               	movwf	i2strcpy@from+1,c
 19093  002F64  EC06  F027         	call	i2_strcpy	;wreg free
 19094                           
 19095                           ;RTC.c: 77: break;
 19096  002F68  D09B               	goto	i2l6992
 19097  002F6A                     i2l6968:
 19098                           
 19099                           ;RTC.c: 79: strcpy(month, "MAR");
 19100  002F6A  0E3D               	movlw	low i2printRTC@month
 19101  002F6C  6E01               	movwf	i2strcpy@to,c
 19102  002F6E  0E00               	movlw	high i2printRTC@month
 19103  002F70  6E02               	movwf	i2strcpy@to+1,c
 19104  002F72  0EE7               	movlw	low STR_10
 19105  002F74  6E03               	movwf	i2strcpy@from,c
 19106  002F76  0EFF               	movlw	high STR_10
 19107  002F78  6E04               	movwf	i2strcpy@from+1,c
 19108  002F7A  EC06  F027         	call	i2_strcpy	;wreg free
 19109                           
 19110                           ;RTC.c: 80: break;
 19111  002F7E  D090               	goto	i2l6992
 19112  002F80                     i2l6970:
 19113                           
 19114                           ;RTC.c: 82: strcpy(month, "APR");
 19115  002F80  0E3D               	movlw	low i2printRTC@month
 19116  002F82  6E01               	movwf	i2strcpy@to,c
 19117  002F84  0E00               	movlw	high i2printRTC@month
 19118  002F86  6E02               	movwf	i2strcpy@to+1,c
 19119  002F88  0EEB               	movlw	low STR_11
 19120  002F8A  6E03               	movwf	i2strcpy@from,c
 19121  002F8C  0EFF               	movlw	high STR_11
 19122  002F8E  6E04               	movwf	i2strcpy@from+1,c
 19123  002F90  EC06  F027         	call	i2_strcpy	;wreg free
 19124                           
 19125                           ;RTC.c: 83: break;
 19126  002F94  D085               	goto	i2l6992
 19127  002F96                     i2l6972:
 19128                           
 19129                           ;RTC.c: 85: strcpy(month, "MAY");
 19130  002F96  0E3D               	movlw	low i2printRTC@month
 19131  002F98  6E01               	movwf	i2strcpy@to,c
 19132  002F9A  0E00               	movlw	high i2printRTC@month
 19133  002F9C  6E02               	movwf	i2strcpy@to+1,c
 19134  002F9E  0EFB               	movlw	low STR_12
 19135  002FA0  6E03               	movwf	i2strcpy@from,c
 19136  002FA2  0EFF               	movlw	high STR_12
 19137  002FA4  6E04               	movwf	i2strcpy@from+1,c
 19138  002FA6  EC06  F027         	call	i2_strcpy	;wreg free
 19139                           
 19140                           ;RTC.c: 86: break;
 19141  002FAA  D07A               	goto	i2l6992
 19142  002FAC                     i2l6974:
 19143                           
 19144                           ;RTC.c: 88: strcpy(month, "JUN");
 19145  002FAC  0E3D               	movlw	low i2printRTC@month
 19146  002FAE  6E01               	movwf	i2strcpy@to,c
 19147  002FB0  0E00               	movlw	high i2printRTC@month
 19148  002FB2  6E02               	movwf	i2strcpy@to+1,c
 19149  002FB4  0EDF               	movlw	low STR_13
 19150  002FB6  6E03               	movwf	i2strcpy@from,c
 19151  002FB8  0EFF               	movlw	high STR_13
 19152  002FBA  6E04               	movwf	i2strcpy@from+1,c
 19153  002FBC  EC06  F027         	call	i2_strcpy	;wreg free
 19154                           
 19155                           ;RTC.c: 89: break;
 19156  002FC0  D06F               	goto	i2l6992
 19157  002FC2                     i2l6976:
 19158                           
 19159                           ;RTC.c: 91: strcpy(month, "JUL");
 19160  002FC2  0E3D               	movlw	low i2printRTC@month
 19161  002FC4  6E01               	movwf	i2strcpy@to,c
 19162  002FC6  0E00               	movlw	high i2printRTC@month
 19163  002FC8  6E02               	movwf	i2strcpy@to+1,c
 19164  002FCA  0ED7               	movlw	low STR_14
 19165  002FCC  6E03               	movwf	i2strcpy@from,c
 19166  002FCE  0EFF               	movlw	high STR_14
 19167  002FD0  6E04               	movwf	i2strcpy@from+1,c
 19168  002FD2  EC06  F027         	call	i2_strcpy	;wreg free
 19169                           
 19170                           ;RTC.c: 92: break;
 19171  002FD6  D064               	goto	i2l6992
 19172  002FD8                     i2l6978:
 19173                           
 19174                           ;RTC.c: 94: strcpy(month, "AUG");
 19175  002FD8  0E3D               	movlw	low i2printRTC@month
 19176  002FDA  6E01               	movwf	i2strcpy@to,c
 19177  002FDC  0E00               	movlw	high i2printRTC@month
 19178  002FDE  6E02               	movwf	i2strcpy@to+1,c
 19179  002FE0  0ED3               	movlw	low STR_15
 19180  002FE2  6E03               	movwf	i2strcpy@from,c
 19181  002FE4  0EFF               	movlw	high STR_15
 19182  002FE6  6E04               	movwf	i2strcpy@from+1,c
 19183  002FE8  EC06  F027         	call	i2_strcpy	;wreg free
 19184                           
 19185                           ;RTC.c: 95: break;
 19186  002FEC  D059               	goto	i2l6992
 19187  002FEE                     i2l6980:
 19188                           
 19189                           ;RTC.c: 97: strcpy(month, "SEP");
 19190  002FEE  0E3D               	movlw	low i2printRTC@month
 19191  002FF0  6E01               	movwf	i2strcpy@to,c
 19192  002FF2  0E00               	movlw	high i2printRTC@month
 19193  002FF4  6E02               	movwf	i2strcpy@to+1,c
 19194  002FF6  0EE3               	movlw	low STR_16
 19195  002FF8  6E03               	movwf	i2strcpy@from,c
 19196  002FFA  0EFF               	movlw	high STR_16
 19197  002FFC  6E04               	movwf	i2strcpy@from+1,c
 19198  002FFE  EC06  F027         	call	i2_strcpy	;wreg free
 19199                           
 19200                           ;RTC.c: 98: break;
 19201  003002  D04E               	goto	i2l6992
 19202  003004                     i2l6982:
 19203                           
 19204                           ;RTC.c: 100: strcpy(month, "OCT");
 19205  003004  0E3D               	movlw	low i2printRTC@month
 19206  003006  6E01               	movwf	i2strcpy@to,c
 19207  003008  0E00               	movlw	high i2printRTC@month
 19208  00300A  6E02               	movwf	i2strcpy@to+1,c
 19209  00300C  0EF3               	movlw	low STR_17
 19210  00300E  6E03               	movwf	i2strcpy@from,c
 19211  003010  0EFF               	movlw	high STR_17
 19212  003012  6E04               	movwf	i2strcpy@from+1,c
 19213  003014  EC06  F027         	call	i2_strcpy	;wreg free
 19214                           
 19215                           ;RTC.c: 101: break;
 19216  003018  D043               	goto	i2l6992
 19217  00301A                     i2l6984:
 19218                           
 19219                           ;RTC.c: 103: strcpy(month, "NOV");
 19220  00301A  0E3D               	movlw	low i2printRTC@month
 19221  00301C  6E01               	movwf	i2strcpy@to,c
 19222  00301E  0E00               	movlw	high i2printRTC@month
 19223  003020  6E02               	movwf	i2strcpy@to+1,c
 19224  003022  0EF7               	movlw	low STR_18
 19225  003024  6E03               	movwf	i2strcpy@from,c
 19226  003026  0EFF               	movlw	high STR_18
 19227  003028  6E04               	movwf	i2strcpy@from+1,c
 19228  00302A  EC06  F027         	call	i2_strcpy	;wreg free
 19229                           
 19230                           ;RTC.c: 104: break;
 19231  00302E  D038               	goto	i2l6992
 19232  003030                     i2l6986:
 19233                           
 19234                           ;RTC.c: 106: strcpy(month, "DEC");
 19235  003030  0E3D               	movlw	low i2printRTC@month
 19236  003032  6E01               	movwf	i2strcpy@to,c
 19237  003034  0E00               	movlw	high i2printRTC@month
 19238  003036  6E02               	movwf	i2strcpy@to+1,c
 19239  003038  0ECF               	movlw	low STR_19
 19240  00303A  6E03               	movwf	i2strcpy@from,c
 19241  00303C  0EFF               	movlw	high STR_19
 19242  00303E  6E04               	movwf	i2strcpy@from+1,c
 19243  003040  EC06  F027         	call	i2_strcpy	;wreg free
 19244                           
 19245                           ;RTC.c: 108: }
 19246                           
 19247                           ;RTC.c: 107: break;
 19248  003044  D02D               	goto	i2l6992
 19249  003046                     i2l6990:
 19250  003046  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19251  00304A  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19252                           
 19253                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19254                           ; Switch size 1, requested type "space"
 19255                           ; Number of cases is 1, Range of values is 0 to 0
 19256                           ; switch strategies available:
 19257                           ; Name         Instructions Cycles
 19258                           ; simple_byte            4     3 (average)
 19259                           ;	Chosen strategy is simple_byte
 19260  00304E  502B               	movf	??i2_printRTC+1,w,c
 19261  003050  0A00               	xorlw	0	; case 0
 19262  003052  A4D8               	btfss	status,2,c
 19263  003054  D025               	goto	i2l6992
 19264                           
 19265                           ; Switch size 1, requested type "space"
 19266                           ; Number of cases is 12, Range of values is 1 to 12
 19267                           ; switch strategies available:
 19268                           ; Name         Instructions Cycles
 19269                           ; simple_byte           37    19 (average)
 19270                           ;	Chosen strategy is simple_byte
 19271  003056  502A               	movf	??i2_printRTC,w,c
 19272  003058  0A01               	xorlw	1	; case 1
 19273  00305A  B4D8               	btfsc	status,2,c
 19274  00305C  D770               	goto	i2l6964
 19275  00305E  0A03               	xorlw	3	; case 2
 19276  003060  B4D8               	btfsc	status,2,c
 19277  003062  D778               	goto	i2l6966
 19278  003064  0A01               	xorlw	1	; case 3
 19279  003066  B4D8               	btfsc	status,2,c
 19280  003068  D780               	goto	i2l6968
 19281  00306A  0A07               	xorlw	7	; case 4
 19282  00306C  B4D8               	btfsc	status,2,c
 19283  00306E  D788               	goto	i2l6970
 19284  003070  0A01               	xorlw	1	; case 5
 19285  003072  B4D8               	btfsc	status,2,c
 19286  003074  D790               	goto	i2l6972
 19287  003076  0A03               	xorlw	3	; case 6
 19288  003078  B4D8               	btfsc	status,2,c
 19289  00307A  D798               	goto	i2l6974
 19290  00307C  0A01               	xorlw	1	; case 7
 19291  00307E  B4D8               	btfsc	status,2,c
 19292  003080  D7A0               	goto	i2l6976
 19293  003082  0A0F               	xorlw	15	; case 8
 19294  003084  B4D8               	btfsc	status,2,c
 19295  003086  D7A8               	goto	i2l6978
 19296  003088  0A01               	xorlw	1	; case 9
 19297  00308A  B4D8               	btfsc	status,2,c
 19298  00308C  D7B0               	goto	i2l6980
 19299  00308E  0A03               	xorlw	3	; case 10
 19300  003090  B4D8               	btfsc	status,2,c
 19301  003092  D7B8               	goto	i2l6982
 19302  003094  0A01               	xorlw	1	; case 11
 19303  003096  B4D8               	btfsc	status,2,c
 19304  003098  D7C0               	goto	i2l6984
 19305  00309A  0A07               	xorlw	7	; case 12
 19306  00309C  B4D8               	btfsc	status,2,c
 19307  00309E  D7C8               	goto	i2l6986
 19308  0030A0                     i2l6992:
 19309                           
 19310                           ;RTC.c: 109: lcdInst(0b10000000);;
 19311  0030A0  0E80               	movlw	128
 19312  0030A2  EC6A  F029         	call	i2_lcdInst
 19313                           
 19314                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19315  0030A6  0E06               	movlw	low STR_21
 19316  0030A8  6E0D               	movwf	i2printf@f,c
 19317  0030AA  0EFB               	movlw	high STR_21
 19318  0030AC  6E0E               	movwf	i2printf@f+1,c
 19319  0030AE  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19320  0030B2  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19321  0030B6  0E3D               	movlw	low i2printRTC@month
 19322  0030B8  6E11               	movwf	?i2_printf+4,c
 19323  0030BA  0E00               	movlw	high i2printRTC@month
 19324  0030BC  6E12               	movwf	?i2_printf+5,c
 19325  0030BE  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19326  0030C2  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19327  0030C6  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19328  0030CA  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19329  0030CE  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19330  0030D2  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19331  0030D6  ECE0  F00E         	call	i2_printf	;wreg free
 19332  0030DA  0012               	return		;funcret
 19333  0030DC                     __end_ofi2_printRTC:
 19334                           	opt stack 0
 19335                           pclatu	equ	0xFFB
 19336                           pclath	equ	0xFFA
 19337                           tblptru	equ	0xFF8
 19338                           tblptrh	equ	0xFF7
 19339                           tblptrl	equ	0xFF6
 19340                           tablat	equ	0xFF5
 19341                           prodh	equ	0xFF4
 19342                           prodl	equ	0xFF3
 19343                           intcon	equ	0xFF2
 19344                           intcon2	equ	0xFF1
 19345                           intcon3	equ	0xFF0
 19346                           indf0	equ	0xFEF
 19347                           postinc0	equ	0xFEE
 19348                           fsr0h	equ	0xFEA
 19349                           fsr0l	equ	0xFE9
 19350                           wreg	equ	0xFE8
 19351                           postdec1	equ	0xFE5
 19352                           fsr1h	equ	0xFE2
 19353                           fsr1l	equ	0xFE1
 19354                           indf2	equ	0xFDF
 19355                           postinc2	equ	0xFDE
 19356                           postdec2	equ	0xFDD
 19357                           fsr2h	equ	0xFDA
 19358                           fsr2l	equ	0xFD9
 19359                           status	equ	0xFD8
 19360                           
 19361 ;; *************** function i2_strcpy *****************
 19362 ;; Defined at:
 19363 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19364 ;; Parameters:    Size  Location     Type
 19365 ;;  to              2    0[COMRAM] PTR unsigned char 
 19366 ;;		 -> printRTC@month(4), UI@month(4), 
 19367 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19368 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19369 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19370 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19371 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19372 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19373 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19374 ;;		 -> STR_8(4), 
 19375 ;; Auto vars:     Size  Location     Type
 19376 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19377 ;;		 -> printRTC@month(4), UI@month(4), 
 19378 ;; Return value:  Size  Location     Type
 19379 ;;                  2    0[COMRAM] PTR unsigned char 
 19380 ;; Registers used:
 19381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19382 ;; Tracked objects:
 19383 ;;		On entry : 0/0
 19384 ;;		On exit  : 0/0
 19385 ;;		Unchanged: 0/0
 19386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19391 ;;Total ram usage:        6 bytes
 19392 ;; Hardware stack levels used:    1
 19393 ;; This function calls:
 19394 ;;		Nothing
 19395 ;; This function is called by:
 19396 ;;		i2_printRTC
 19397 ;; This function uses a non-reentrant model
 19398 ;;
 19399                           
 19400                           	psect	text65
 19401  004E0C                     __ptext65:
 19402                           	opt stack 0
 19403  004E0C                     i2_strcpy:
 19404                           	opt stack 20
 19405                           
 19406                           ;incstack = 0
 19407  004E0C  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19408  004E10  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19409  004E14  D004               	goto	i2l6612
 19410  004E16                     i2l6610:
 19411  004E16  4A05               	infsnz	i2strcpy@cp,f,c
 19412  004E18  2A06               	incf	i2strcpy@cp+1,f,c
 19413  004E1A  4A03               	infsnz	i2strcpy@from,f,c
 19414  004E1C  2A04               	incf	i2strcpy@from+1,f,c
 19415  004E1E                     i2l6612:
 19416  004E1E  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19417  004E22  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19418  004E26                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19419  004E26  6AF8               	clrf	tblptru,c
 19420  004E28                     	endif
 19421  004E28                     	if	0	;tblptru may be non-zero
 19422  004E28                     	endif
 19423  004E28  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19424  004E2C  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19425  004E30  0008               	tblrd		*
 19426  004E32  CFF5 FFDF          	movff	tablat,indf2
 19427  004E36  50DF               	movf	indf2,w,c
 19428  004E38  B4D8               	btfsc	status,2,c
 19429  004E3A  0012               	return	
 19430  004E3C  D7EC               	goto	i2l6610
 19431  004E3E                     __end_ofi2_strcpy:
 19432                           	opt stack 0
 19433                           pclatu	equ	0xFFB
 19434                           pclath	equ	0xFFA
 19435                           tblptru	equ	0xFF8
 19436                           tblptrh	equ	0xFF7
 19437                           tblptrl	equ	0xFF6
 19438                           tablat	equ	0xFF5
 19439                           prodh	equ	0xFF4
 19440                           prodl	equ	0xFF3
 19441                           intcon	equ	0xFF2
 19442                           intcon2	equ	0xFF1
 19443                           intcon3	equ	0xFF0
 19444                           indf0	equ	0xFEF
 19445                           postinc0	equ	0xFEE
 19446                           fsr0h	equ	0xFEA
 19447                           fsr0l	equ	0xFE9
 19448                           wreg	equ	0xFE8
 19449                           postdec1	equ	0xFE5
 19450                           fsr1h	equ	0xFE2
 19451                           fsr1l	equ	0xFE1
 19452                           indf2	equ	0xFDF
 19453                           postinc2	equ	0xFDE
 19454                           postdec2	equ	0xFDD
 19455                           fsr2h	equ	0xFDA
 19456                           fsr2l	equ	0xFD9
 19457                           status	equ	0xFD8
 19458                           
 19459 ;; *************** function _inputHandler *****************
 19460 ;; Defined at:
 19461 ;;		line 372 in file "UI.c"
 19462 ;; Parameters:    Size  Location     Type
 19463 ;;		None
 19464 ;; Auto vars:     Size  Location     Type
 19465 ;;		None
 19466 ;; Return value:  Size  Location     Type
 19467 ;;                  2   41[COMRAM] int 
 19468 ;; Registers used:
 19469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19470 ;; Tracked objects:
 19471 ;;		On entry : 0/0
 19472 ;;		On exit  : 0/0
 19473 ;;		Unchanged: 0/0
 19474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19478 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19479 ;;Total ram usage:        4 bytes
 19480 ;; Hardware stack levels used:    1
 19481 ;; Hardware stack levels required when called:    4
 19482 ;; This function calls:
 19483 ;;		_change_state_to_logs_11
 19484 ;;		_change_state_to_logs_12
 19485 ;;		_change_state_to_logs_22
 19486 ;;		_change_state_to_logs_23
 19487 ;;		_change_state_to_logs_33
 19488 ;;		_change_state_to_logs_34
 19489 ;;		_change_state_to_menu_11
 19490 ;;		_change_state_to_menu_23
 19491 ;;		i2_change_state_to_menu_12
 19492 ;;		i2_change_state_to_menu_22
 19493 ;; This function is called by:
 19494 ;;		_updateMenu
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498                           	psect	text66
 19499  0034F6                     __ptext66:
 19500                           	opt stack 0
 19501  0034F6                     _inputHandler:
 19502                           	opt stack 18
 19503                           
 19504                           ;UI.c: 377: if(firstboot){
 19505                           
 19506                           ;incstack = 0
 19507  0034F6  0101               	movlb	1	; () banked
 19508  0034F8  513B               	movf	_firstboot& (0+255),w,b
 19509  0034FA  0101               	movlb	1	; () banked
 19510  0034FC  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 19511  0034FE  B4D8               	btfsc	status,2,c
 19512  003500  D00C               	goto	i2l7060
 19513                           
 19514                           ; BSR set to: 1
 19515                           ;UI.c: 378: change_state_to_menu_11();
 19516  003502  EC7F  F027         	call	_change_state_to_menu_11	;wreg free
 19517                           
 19518                           ;UI.c: 379: firstboot = 0;
 19519  003506  0E00               	movlw	0
 19520  003508  0101               	movlb	1	; () banked
 19521  00350A  6F3C               	movwf	(_firstboot+1)& (0+255),b
 19522  00350C  0E00               	movlw	0
 19523  00350E  6F3B               	movwf	_firstboot& (0+255),b
 19524                           
 19525                           ; BSR set to: 1
 19526                           ;UI.c: 380: return 0;
 19527  003510  0E00               	movlw	0
 19528  003512  6E2B               	movwf	?_inputHandler+1,c
 19529  003514  0E00               	movlw	0
 19530  003516  6E2A               	movwf	?_inputHandler,c
 19531                           
 19532                           ; BSR set to: 1
 19533  003518  0012               	return	
 19534  00351A                     i2l7060:
 19535                           
 19536                           ; BSR set to: 1
 19537                           ;UI.c: 381: }
 19538                           ;UI.c: 382: if (logstate){
 19539  00351A  0100               	movlb	0	; () banked
 19540  00351C  51F6               	movf	_logstate& (0+255),w,b
 19541  00351E  0100               	movlb	0	; () banked
 19542  003520  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 19543  003522  B4D8               	btfsc	status,2,c
 19544  003524  D0C7               	goto	i2l7178
 19545                           
 19546                           ; BSR set to: 0
 19547                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 19548  003526  0E43               	movlw	67
 19549  003528  187D               	xorwf	_input,w,c	;volatile
 19550  00352A  A4D8               	btfss	status,2,c
 19551  00352C  D012               	goto	i2l7078
 19552                           
 19553                           ; BSR set to: 0
 19554  00352E  B281               	btfsc	3969,1,c	;volatile
 19555  003530  D009               	goto	i2l7070
 19556  003532  D00F               	goto	i2l7078
 19557  003534                     i2l7068:
 19558                           
 19559                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19560  003534  0E68               	movlw	104
 19561  003536  6E2C               	movwf	??_inputHandler& (0+255),c
 19562  003538  0EE4               	movlw	228
 19563  00353A                     i2u1004_47:
 19564  00353A  2EE8               	decfsz	wreg,f,c
 19565  00353C  D7FE               	bra	i2u1004_47
 19566  00353E  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19567  003540  D7FC               	bra	i2u1004_47
 19568  003542  D000               	nop2	
 19569  003544                     i2l7070:
 19570  003544  B281               	btfsc	3969,1,c	;volatile
 19571  003546  D7F6               	goto	i2l7068
 19572  003548                     i2l7072:
 19573                           
 19574                           ;UI.c: 387: }
 19575                           ;UI.c: 388: return 0;
 19576  003548  0E00               	movlw	0
 19577  00354A  6E2B               	movwf	?_inputHandler+1,c
 19578  00354C  0E00               	movlw	0
 19579  00354E  6E2A               	movwf	?_inputHandler,c
 19580  003550  0012               	return	
 19581  003552                     i2l7078:
 19582                           
 19583                           ;UI.c: 390: else if (input == 'D'){
 19584  003552  0E44               	movlw	68
 19585  003554  187D               	xorwf	_input,w,c	;volatile
 19586  003556  A4D8               	btfss	status,2,c
 19587  003558  D7F7               	goto	i2l7072
 19588                           
 19589                           ;UI.c: 392: logstate = 0;
 19590  00355A  0E00               	movlw	0
 19591  00355C  0100               	movlb	0	; () banked
 19592  00355E  6FF7               	movwf	(_logstate+1)& (0+255),b
 19593  003560  0E00               	movlw	0
 19594  003562  6FF6               	movwf	_logstate& (0+255),b
 19595                           
 19596                           ;UI.c: 393: switch(cur_state){
 19597  003564  D012               	goto	i2l7096
 19598  003566                     i2l7082:
 19599                           
 19600                           ;UI.c: 395: change_state_to_logs_11();
 19601  003566  ECF7  F027         	call	_change_state_to_logs_11	;wreg free
 19602                           
 19603                           ;UI.c: 396: break;
 19604  00356A  D7EE               	goto	i2l7072
 19605  00356C                     i2l7084:
 19606                           
 19607                           ;UI.c: 398: change_state_to_logs_12();
 19608  00356C  ECDF  F027         	call	_change_state_to_logs_12	;wreg free
 19609                           
 19610                           ;UI.c: 399: break;
 19611  003570  D7EB               	goto	i2l7072
 19612  003572                     i2l7086:
 19613                           
 19614                           ;UI.c: 401: change_state_to_logs_22();
 19615  003572  ECC7  F027         	call	_change_state_to_logs_22	;wreg free
 19616                           
 19617                           ;UI.c: 402: break;
 19618  003576  D7E8               	goto	i2l7072
 19619  003578                     i2l7088:
 19620                           
 19621                           ;UI.c: 404: change_state_to_logs_23();
 19622  003578  EC26  F028         	call	_change_state_to_logs_23	;wreg free
 19623                           
 19624                           ;UI.c: 405: break;
 19625  00357C  D7E5               	goto	i2l7072
 19626  00357E                     i2l7090:
 19627                           
 19628                           ;UI.c: 407: change_state_to_logs_33();
 19629  00357E  ECAF  F027         	call	_change_state_to_logs_33	;wreg free
 19630                           
 19631                           ;UI.c: 408: break;
 19632  003582  D7E2               	goto	i2l7072
 19633  003584                     i2l7092:
 19634                           
 19635                           ;UI.c: 410: change_state_to_logs_34();
 19636  003584  EC97  F027         	call	_change_state_to_logs_34	;wreg free
 19637                           
 19638                           ;UI.c: 412: }
 19639                           
 19640                           ;UI.c: 411: break;
 19641  003588  D7DF               	goto	i2l7072
 19642  00358A                     i2l7096:
 19643  00358A  C0EC  F02C         	movff	_cur_state,??_inputHandler
 19644  00358E  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 19645                           
 19646                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19647                           ; Switch size 1, requested type "space"
 19648                           ; Number of cases is 2, Range of values is 3 to 4
 19649                           ; switch strategies available:
 19650                           ; Name         Instructions Cycles
 19651                           ; simple_byte            7     4 (average)
 19652                           ;	Chosen strategy is simple_byte
 19653  003592  502D               	movf	??_inputHandler+1,w,c
 19654  003594  0A03               	xorlw	3	; case 3
 19655  003596  B4D8               	btfsc	status,2,c
 19656  003598  D004               	goto	i2l9950
 19657  00359A  0A07               	xorlw	7	; case 4
 19658  00359C  B4D8               	btfsc	status,2,c
 19659  00359E  D00F               	goto	i2l9952
 19660  0035A0  D7D3               	goto	i2l7072
 19661  0035A2                     i2l9950:
 19662                           
 19663                           ; Switch size 1, requested type "space"
 19664                           ; Number of cases is 4, Range of values is 243 to 255
 19665                           ; switch strategies available:
 19666                           ; Name         Instructions Cycles
 19667                           ; simple_byte           13     7 (average)
 19668                           ;	Chosen strategy is simple_byte
 19669  0035A2  502C               	movf	??_inputHandler,w,c
 19670  0035A4  0AF3               	xorlw	243	; case 243
 19671  0035A6  B4D8               	btfsc	status,2,c
 19672  0035A8  D7DE               	goto	i2l7082
 19673  0035AA  0A07               	xorlw	7	; case 244
 19674  0035AC  B4D8               	btfsc	status,2,c
 19675  0035AE  D7DE               	goto	i2l7084
 19676  0035B0  0A0A               	xorlw	10	; case 254
 19677  0035B2  B4D8               	btfsc	status,2,c
 19678  0035B4  D7DE               	goto	i2l7086
 19679  0035B6  0A01               	xorlw	1	; case 255
 19680  0035B8  B4D8               	btfsc	status,2,c
 19681  0035BA  D7DE               	goto	i2l7088
 19682  0035BC  D7C5               	goto	i2l7072
 19683  0035BE                     i2l9952:
 19684                           
 19685                           ; Switch size 1, requested type "space"
 19686                           ; Number of cases is 2, Range of values is 9 to 10
 19687                           ; switch strategies available:
 19688                           ; Name         Instructions Cycles
 19689                           ; simple_byte            7     4 (average)
 19690                           ;	Chosen strategy is simple_byte
 19691  0035BE  502C               	movf	??_inputHandler,w,c
 19692  0035C0  0A09               	xorlw	9	; case 9
 19693  0035C2  B4D8               	btfsc	status,2,c
 19694  0035C4  D7DC               	goto	i2l7090
 19695  0035C6  0A03               	xorlw	3	; case 10
 19696  0035C8  B4D8               	btfsc	status,2,c
 19697  0035CA  D7DC               	goto	i2l7092
 19698  0035CC  D7BD               	goto	i2l7072
 19699  0035CE                     i2l7108:
 19700                           
 19701                           ;UI.c: 422: if(cur_state == 11){
 19702  0035CE  0E0B               	movlw	11
 19703  0035D0  0100               	movlb	0	; () banked
 19704  0035D2  19EC               	xorwf	_cur_state& (0+255),w,b
 19705  0035D4  0100               	movlb	0	; () banked
 19706  0035D6  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19707  0035D8  A4D8               	btfss	status,2,c
 19708  0035DA  D005               	goto	i2l7116
 19709                           
 19710                           ; BSR set to: 0
 19711                           ;UI.c: 423: return 0;
 19712  0035DC  0E00               	movlw	0
 19713  0035DE  6E2B               	movwf	?_inputHandler+1,c
 19714  0035E0  0E00               	movlw	0
 19715  0035E2  6E2A               	movwf	?_inputHandler,c
 19716                           
 19717                           ; BSR set to: 0
 19718  0035E4  0012               	return	
 19719  0035E6                     i2l7116:
 19720                           
 19721                           ; BSR set to: 0
 19722                           ;UI.c: 425: else{
 19723                           ;UI.c: 426: change_state_to_menu_11();
 19724  0035E6  EC7F  F027         	call	_change_state_to_menu_11	;wreg free
 19725                           
 19726                           ;UI.c: 427: }
 19727                           ;UI.c: 428: return 0;
 19728  0035EA  0E00               	movlw	0
 19729  0035EC  6E2B               	movwf	?_inputHandler+1,c
 19730  0035EE  0E00               	movlw	0
 19731  0035F0  6E2A               	movwf	?_inputHandler,c
 19732  0035F2  0012               	return	
 19733  0035F4                     i2l7122:
 19734                           
 19735                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19736  0035F4  0E16               	movlw	22
 19737  0035F6  0100               	movlb	0	; () banked
 19738  0035F8  19EC               	xorwf	_cur_state& (0+255),w,b
 19739  0035FA  0100               	movlb	0	; () banked
 19740  0035FC  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19741  0035FE  B4D8               	btfsc	status,2,c
 19742  003600  D007               	goto	i2l7126
 19743                           
 19744                           ; BSR set to: 0
 19745  003602  0E0C               	movlw	12
 19746  003604  0100               	movlb	0	; () banked
 19747  003606  19EC               	xorwf	_cur_state& (0+255),w,b
 19748  003608  0100               	movlb	0	; () banked
 19749  00360A  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19750  00360C  A4D8               	btfss	status,2,c
 19751  00360E  D005               	goto	i2l7132
 19752  003610                     i2l7126:
 19753                           
 19754                           ; BSR set to: 0
 19755                           ;UI.c: 431: return 0;
 19756  003610  0E00               	movlw	0
 19757  003612  6E2B               	movwf	?_inputHandler+1,c
 19758  003614  0E00               	movlw	0
 19759  003616  6E2A               	movwf	?_inputHandler,c
 19760                           
 19761                           ; BSR set to: 0
 19762  003618  0012               	return	
 19763  00361A                     i2l7132:
 19764                           
 19765                           ; BSR set to: 0
 19766                           ;UI.c: 433: else if(cur_state == 23){
 19767  00361A  0E17               	movlw	23
 19768  00361C  0100               	movlb	0	; () banked
 19769  00361E  19EC               	xorwf	_cur_state& (0+255),w,b
 19770  003620  0100               	movlb	0	; () banked
 19771  003622  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19772  003624  A4D8               	btfss	status,2,c
 19773  003626  D003               	goto	i2l7136
 19774                           
 19775                           ; BSR set to: 0
 19776                           ;UI.c: 434: change_state_to_menu_22();
 19777  003628  EC37  F027         	call	i2_change_state_to_menu_22	;wreg free
 19778                           
 19779                           ;UI.c: 435: }
 19780  00362C  D002               	goto	i2l7138
 19781  00362E                     i2l7136:
 19782                           
 19783                           ;UI.c: 436: else{
 19784                           ;UI.c: 437: change_state_to_menu_12();
 19785  00362E  EC4F  F027         	call	i2_change_state_to_menu_12	;wreg free
 19786  003632                     i2l7138:
 19787                           
 19788                           ;UI.c: 438: }
 19789                           ;UI.c: 439: return 0;
 19790  003632  0E00               	movlw	0
 19791  003634  6E2B               	movwf	?_inputHandler+1,c
 19792  003636  0E00               	movlw	0
 19793  003638  6E2A               	movwf	?_inputHandler,c
 19794  00363A  0012               	return	
 19795  00363C                     i2l7142:
 19796                           
 19797                           ;UI.c: 441: if(cur_state == 23){
 19798  00363C  0E17               	movlw	23
 19799  00363E  0100               	movlb	0	; () banked
 19800  003640  19EC               	xorwf	_cur_state& (0+255),w,b
 19801  003642  0100               	movlb	0	; () banked
 19802  003644  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19803  003646  A4D8               	btfss	status,2,c
 19804  003648  D005               	goto	i2l7150
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;UI.c: 442: return 0;
 19808  00364A  0E00               	movlw	0
 19809  00364C  6E2B               	movwf	?_inputHandler+1,c
 19810  00364E  0E00               	movlw	0
 19811  003650  6E2A               	movwf	?_inputHandler,c
 19812                           
 19813                           ; BSR set to: 0
 19814  003652  0012               	return	
 19815  003654                     i2l7150:
 19816                           
 19817                           ; BSR set to: 0
 19818                           ;UI.c: 444: else{
 19819                           ;UI.c: 445: change_state_to_menu_23();
 19820  003654  EC67  F027         	call	_change_state_to_menu_23	;wreg free
 19821                           
 19822                           ;UI.c: 446: }
 19823                           ;UI.c: 447: return 0;
 19824  003658  0E00               	movlw	0
 19825  00365A  6E2B               	movwf	?_inputHandler+1,c
 19826  00365C  0E00               	movlw	0
 19827  00365E  6E2A               	movwf	?_inputHandler,c
 19828  003660  0012               	return	
 19829  003662                     i2l7156:
 19830                           
 19831                           ;UI.c: 450: up = 1;
 19832  003662  0E00               	movlw	0
 19833  003664  6E78               	movwf	_up+1,c
 19834  003666  0E01               	movlw	1
 19835  003668  6E77               	movwf	_up,c
 19836                           
 19837                           ;UI.c: 451: return 1;
 19838  00366A  0E00               	movlw	0
 19839  00366C  6E2B               	movwf	?_inputHandler+1,c
 19840  00366E  0E01               	movlw	1
 19841  003670  6E2A               	movwf	?_inputHandler,c
 19842  003672  0012               	return	
 19843  003674                     i2l7160:
 19844                           
 19845                           ;UI.c: 453: down = 1;
 19846  003674  0E00               	movlw	0
 19847  003676  6E5E               	movwf	_down+1,c
 19848  003678  0E01               	movlw	1
 19849  00367A  6E5D               	movwf	_down,c
 19850                           
 19851                           ;UI.c: 454: return 1;
 19852  00367C  0E00               	movlw	0
 19853  00367E  6E2B               	movwf	?_inputHandler+1,c
 19854  003680  0E01               	movlw	1
 19855  003682  6E2A               	movwf	?_inputHandler,c
 19856  003684  0012               	return	
 19857  003686                     i2l7164:
 19858                           
 19859                           ;UI.c: 456: enter = 1;
 19860  003686  0E00               	movlw	0
 19861  003688  6E60               	movwf	_enter+1,c
 19862  00368A  0E01               	movlw	1
 19863  00368C  6E5F               	movwf	_enter,c
 19864                           
 19865                           ;UI.c: 457: return 1;
 19866  00368E  0E00               	movlw	0
 19867  003690  6E2B               	movwf	?_inputHandler+1,c
 19868  003692  0E01               	movlw	1
 19869  003694  6E2A               	movwf	?_inputHandler,c
 19870  003696  0012               	return	
 19871  003698                     i2l7168:
 19872                           
 19873                           ;UI.c: 459: back = 1;
 19874  003698  0E00               	movlw	0
 19875  00369A  6E5C               	movwf	_back+1,c
 19876  00369C  0E01               	movlw	1
 19877  00369E  6E5B               	movwf	_back,c
 19878                           
 19879                           ;UI.c: 460: return 1;
 19880  0036A0  0E00               	movlw	0
 19881  0036A2  6E2B               	movwf	?_inputHandler+1,c
 19882  0036A4  0E01               	movlw	1
 19883  0036A6  6E2A               	movwf	?_inputHandler,c
 19884  0036A8  0012               	return	
 19885  0036AA                     i2l7172:
 19886                           
 19887                           ;UI.c: 463: return 1;
 19888  0036AA  0E00               	movlw	0
 19889  0036AC  6E2B               	movwf	?_inputHandler+1,c
 19890  0036AE  0E01               	movlw	1
 19891  0036B0  6E2A               	movwf	?_inputHandler,c
 19892                           
 19893                           ;UI.c: 464: }
 19894  0036B2  0012               	return	
 19895  0036B4                     i2l7178:
 19896  0036B4  507D               	movf	_input,w,c	;volatile
 19897                           
 19898                           ; Switch size 1, requested type "space"
 19899                           ; Number of cases is 7, Range of values is 49 to 68
 19900                           ; switch strategies available:
 19901                           ; Name         Instructions Cycles
 19902                           ; simple_byte           22    12 (average)
 19903                           ;	Chosen strategy is simple_byte
 19904  0036B6  0A31               	xorlw	49	; case 49
 19905  0036B8  B4D8               	btfsc	status,2,c
 19906  0036BA  D789               	goto	i2l7108
 19907  0036BC  0A03               	xorlw	3	; case 50
 19908  0036BE  B4D8               	btfsc	status,2,c
 19909  0036C0  D799               	goto	i2l7122
 19910  0036C2  0A01               	xorlw	1	; case 51
 19911  0036C4  B4D8               	btfsc	status,2,c
 19912  0036C6  D7BA               	goto	i2l7142
 19913  0036C8  0A72               	xorlw	114	; case 65
 19914  0036CA  B4D8               	btfsc	status,2,c
 19915  0036CC  D7CA               	goto	i2l7156
 19916  0036CE  0A03               	xorlw	3	; case 66
 19917  0036D0  B4D8               	btfsc	status,2,c
 19918  0036D2  D7D0               	goto	i2l7160
 19919  0036D4  0A01               	xorlw	1	; case 67
 19920  0036D6  B4D8               	btfsc	status,2,c
 19921  0036D8  D7D6               	goto	i2l7164
 19922  0036DA  0A07               	xorlw	7	; case 68
 19923  0036DC  B4D8               	btfsc	status,2,c
 19924  0036DE  D7DC               	goto	i2l7168
 19925  0036E0  D7E4               	goto	i2l7172
 19926  0036E2                     __end_of_inputHandler:
 19927                           	opt stack 0
 19928                           pclatu	equ	0xFFB
 19929                           pclath	equ	0xFFA
 19930                           tblptru	equ	0xFF8
 19931                           tblptrh	equ	0xFF7
 19932                           tblptrl	equ	0xFF6
 19933                           tablat	equ	0xFF5
 19934                           prodh	equ	0xFF4
 19935                           prodl	equ	0xFF3
 19936                           intcon	equ	0xFF2
 19937                           intcon2	equ	0xFF1
 19938                           intcon3	equ	0xFF0
 19939                           indf0	equ	0xFEF
 19940                           postinc0	equ	0xFEE
 19941                           fsr0h	equ	0xFEA
 19942                           fsr0l	equ	0xFE9
 19943                           wreg	equ	0xFE8
 19944                           postdec1	equ	0xFE5
 19945                           fsr1h	equ	0xFE2
 19946                           fsr1l	equ	0xFE1
 19947                           indf2	equ	0xFDF
 19948                           postinc2	equ	0xFDE
 19949                           postdec2	equ	0xFDD
 19950                           fsr2h	equ	0xFDA
 19951                           fsr2l	equ	0xFD9
 19952                           status	equ	0xFD8
 19953                           
 19954 ;; *************** function i2_change_state_to_menu_22 *****************
 19955 ;; Defined at:
 19956 ;;		line 498 in file "UI.c"
 19957 ;; Parameters:    Size  Location     Type
 19958 ;;		None
 19959 ;; Auto vars:     Size  Location     Type
 19960 ;;		None
 19961 ;; Return value:  Size  Location     Type
 19962 ;;                  1    wreg      void 
 19963 ;; Registers used:
 19964 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19965 ;; Tracked objects:
 19966 ;;		On entry : 0/0
 19967 ;;		On exit  : 0/0
 19968 ;;		Unchanged: 0/0
 19969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19974 ;;Total ram usage:        0 bytes
 19975 ;; Hardware stack levels used:    1
 19976 ;; Hardware stack levels required when called:    3
 19977 ;; This function calls:
 19978 ;;		i2_lcdInst
 19979 ;;		i2_printf
 19980 ;; This function is called by:
 19981 ;;		_updateMenu
 19982 ;;		_inputHandler
 19983 ;; This function uses a non-reentrant model
 19984 ;;
 19985                           
 19986                           	psect	text67
 19987  004E6E                     __ptext67:
 19988                           	opt stack 0
 19989  004E6E                     i2_change_state_to_menu_22:
 19990                           	opt stack 19
 19991                           
 19992                           ;UI.c: 499: cur_state = 22;
 19993                           
 19994                           ;incstack = 0
 19995  004E6E  0E00               	movlw	0
 19996  004E70  0100               	movlb	0	; () banked
 19997  004E72  6FED               	movwf	(_cur_state+1)& (0+255),b
 19998  004E74  0E16               	movlw	22
 19999  004E76  6FEC               	movwf	_cur_state& (0+255),b
 20000                           
 20001                           ; BSR set to: 0
 20002                           ;UI.c: 501: lcdInst(0b10000000);;
 20003  004E78  0E80               	movlw	128
 20004  004E7A  EC6A  F029         	call	i2_lcdInst
 20005                           
 20006                           ;UI.c: 502: printf("2. SORT        <");
 20007  004E7E  0EC0               	movlw	low STR_34
 20008  004E80  6E0D               	movwf	i2printf@f,c
 20009  004E82  0EFD               	movlw	high STR_34
 20010  004E84  6E0E               	movwf	i2printf@f+1,c
 20011  004E86  ECE0  F00E         	call	i2_printf	;wreg free
 20012                           
 20013                           ;UI.c: 503: lcdInst(0b11000000);;
 20014  004E8A  0EC0               	movlw	192
 20015  004E8C  EC6A  F029         	call	i2_lcdInst
 20016                           
 20017                           ;UI.c: 504: printf("3. LOGS         ");
 20018  004E90  0E05               	movlw	low STR_36
 20019  004E92  6E0D               	movwf	i2printf@f,c
 20020  004E94  0EFD               	movlw	high STR_36
 20021  004E96  6E0E               	movwf	i2printf@f+1,c
 20022  004E98  ECE0  F00E         	call	i2_printf	;wreg free
 20023  004E9C  0012               	return		;funcret
 20024  004E9E                     __end_ofi2_change_state_to_menu_22:
 20025                           	opt stack 0
 20026                           pclatu	equ	0xFFB
 20027                           pclath	equ	0xFFA
 20028                           tblptru	equ	0xFF8
 20029                           tblptrh	equ	0xFF7
 20030                           tblptrl	equ	0xFF6
 20031                           tablat	equ	0xFF5
 20032                           prodh	equ	0xFF4
 20033                           prodl	equ	0xFF3
 20034                           intcon	equ	0xFF2
 20035                           intcon2	equ	0xFF1
 20036                           intcon3	equ	0xFF0
 20037                           indf0	equ	0xFEF
 20038                           postinc0	equ	0xFEE
 20039                           fsr0h	equ	0xFEA
 20040                           fsr0l	equ	0xFE9
 20041                           wreg	equ	0xFE8
 20042                           postdec1	equ	0xFE5
 20043                           fsr1h	equ	0xFE2
 20044                           fsr1l	equ	0xFE1
 20045                           indf2	equ	0xFDF
 20046                           postinc2	equ	0xFDE
 20047                           postdec2	equ	0xFDD
 20048                           fsr2h	equ	0xFDA
 20049                           fsr2l	equ	0xFD9
 20050                           status	equ	0xFD8
 20051                           
 20052 ;; *************** function i2_change_state_to_menu_12 *****************
 20053 ;; Defined at:
 20054 ;;		line 490 in file "UI.c"
 20055 ;; Parameters:    Size  Location     Type
 20056 ;;		None
 20057 ;; Auto vars:     Size  Location     Type
 20058 ;;		None
 20059 ;; Return value:  Size  Location     Type
 20060 ;;                  1    wreg      void 
 20061 ;; Registers used:
 20062 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20063 ;; Tracked objects:
 20064 ;;		On entry : 0/0
 20065 ;;		On exit  : 0/0
 20066 ;;		Unchanged: 0/0
 20067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20072 ;;Total ram usage:        0 bytes
 20073 ;; Hardware stack levels used:    1
 20074 ;; Hardware stack levels required when called:    3
 20075 ;; This function calls:
 20076 ;;		i2_lcdInst
 20077 ;;		i2_printf
 20078 ;; This function is called by:
 20079 ;;		_updateMenu
 20080 ;;		_inputHandler
 20081 ;; This function uses a non-reentrant model
 20082 ;;
 20083                           
 20084                           	psect	text68
 20085  004E9E                     __ptext68:
 20086                           	opt stack 0
 20087  004E9E                     i2_change_state_to_menu_12:
 20088                           	opt stack 19
 20089                           
 20090                           ;UI.c: 491: cur_state = 12;
 20091                           
 20092                           ;incstack = 0
 20093  004E9E  0E00               	movlw	0
 20094  004EA0  0100               	movlb	0	; () banked
 20095  004EA2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20096  004EA4  0E0C               	movlw	12
 20097  004EA6  6FEC               	movwf	_cur_state& (0+255),b
 20098                           
 20099                           ; BSR set to: 0
 20100                           ;UI.c: 493: lcdInst(0b10000000);;
 20101  004EA8  0E80               	movlw	128
 20102  004EAA  EC6A  F029         	call	i2_lcdInst
 20103                           
 20104                           ;UI.c: 494: printf("1. DATE/TIME    ");
 20105  004EAE  0E27               	movlw	low STR_33
 20106  004EB0  6E0D               	movwf	i2printf@f,c
 20107  004EB2  0EFD               	movlw	high STR_33
 20108  004EB4  6E0E               	movwf	i2printf@f+1,c
 20109  004EB6  ECE0  F00E         	call	i2_printf	;wreg free
 20110                           
 20111                           ;UI.c: 495: lcdInst(0b11000000);;
 20112  004EBA  0EC0               	movlw	192
 20113  004EBC  EC6A  F029         	call	i2_lcdInst
 20114                           
 20115                           ;UI.c: 496: printf("2. SORT        <");
 20116  004EC0  0EC0               	movlw	low STR_34
 20117  004EC2  6E0D               	movwf	i2printf@f,c
 20118  004EC4  0EFD               	movlw	high STR_34
 20119  004EC6  6E0E               	movwf	i2printf@f+1,c
 20120  004EC8  ECE0  F00E         	call	i2_printf	;wreg free
 20121  004ECC  0012               	return		;funcret
 20122  004ECE                     __end_ofi2_change_state_to_menu_12:
 20123                           	opt stack 0
 20124                           pclatu	equ	0xFFB
 20125                           pclath	equ	0xFFA
 20126                           tblptru	equ	0xFF8
 20127                           tblptrh	equ	0xFF7
 20128                           tblptrl	equ	0xFF6
 20129                           tablat	equ	0xFF5
 20130                           prodh	equ	0xFF4
 20131                           prodl	equ	0xFF3
 20132                           intcon	equ	0xFF2
 20133                           intcon2	equ	0xFF1
 20134                           intcon3	equ	0xFF0
 20135                           indf0	equ	0xFEF
 20136                           postinc0	equ	0xFEE
 20137                           fsr0h	equ	0xFEA
 20138                           fsr0l	equ	0xFE9
 20139                           wreg	equ	0xFE8
 20140                           postdec1	equ	0xFE5
 20141                           fsr1h	equ	0xFE2
 20142                           fsr1l	equ	0xFE1
 20143                           indf2	equ	0xFDF
 20144                           postinc2	equ	0xFDE
 20145                           postdec2	equ	0xFDD
 20146                           fsr2h	equ	0xFDA
 20147                           fsr2l	equ	0xFD9
 20148                           status	equ	0xFD8
 20149                           
 20150 ;; *************** function _change_state_to_menu_23 *****************
 20151 ;; Defined at:
 20152 ;;		line 506 in file "UI.c"
 20153 ;; Parameters:    Size  Location     Type
 20154 ;;		None
 20155 ;; Auto vars:     Size  Location     Type
 20156 ;;		None
 20157 ;; Return value:  Size  Location     Type
 20158 ;;                  1    wreg      void 
 20159 ;; Registers used:
 20160 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20161 ;; Tracked objects:
 20162 ;;		On entry : 0/0
 20163 ;;		On exit  : 0/0
 20164 ;;		Unchanged: 0/0
 20165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20170 ;;Total ram usage:        0 bytes
 20171 ;; Hardware stack levels used:    1
 20172 ;; Hardware stack levels required when called:    3
 20173 ;; This function calls:
 20174 ;;		i2_lcdInst
 20175 ;;		i2_printf
 20176 ;; This function is called by:
 20177 ;;		_updateMenu
 20178 ;;		_inputHandler
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           	psect	text69
 20183  004ECE                     __ptext69:
 20184                           	opt stack 0
 20185  004ECE                     _change_state_to_menu_23:
 20186                           	opt stack 18
 20187                           
 20188                           ;UI.c: 507: cur_state = 23;
 20189                           
 20190                           ;incstack = 0
 20191  004ECE  0E00               	movlw	0
 20192  004ED0  0100               	movlb	0	; () banked
 20193  004ED2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20194  004ED4  0E17               	movlw	23
 20195  004ED6  6FEC               	movwf	_cur_state& (0+255),b
 20196                           
 20197                           ; BSR set to: 0
 20198                           ;UI.c: 509: lcdInst(0b10000000);;
 20199  004ED8  0E80               	movlw	128
 20200  004EDA  EC6A  F029         	call	i2_lcdInst
 20201                           
 20202                           ;UI.c: 510: printf("2. SORT         ");
 20203  004EDE  0E16               	movlw	low STR_32
 20204  004EE0  6E0D               	movwf	i2printf@f,c
 20205  004EE2  0EFD               	movlw	high STR_32
 20206  004EE4  6E0E               	movwf	i2printf@f+1,c
 20207  004EE6  ECE0  F00E         	call	i2_printf	;wreg free
 20208                           
 20209                           ;UI.c: 511: lcdInst(0b11000000);;
 20210  004EEA  0EC0               	movlw	192
 20211  004EEC  EC6A  F029         	call	i2_lcdInst
 20212                           
 20213                           ;UI.c: 512: printf("3. LOGS        <");
 20214  004EF0  0EAF               	movlw	low STR_38
 20215  004EF2  6E0D               	movwf	i2printf@f,c
 20216  004EF4  0EFD               	movlw	high STR_38
 20217  004EF6  6E0E               	movwf	i2printf@f+1,c
 20218  004EF8  ECE0  F00E         	call	i2_printf	;wreg free
 20219  004EFC  0012               	return		;funcret
 20220  004EFE                     __end_of_change_state_to_menu_23:
 20221                           	opt stack 0
 20222                           pclatu	equ	0xFFB
 20223                           pclath	equ	0xFFA
 20224                           tblptru	equ	0xFF8
 20225                           tblptrh	equ	0xFF7
 20226                           tblptrl	equ	0xFF6
 20227                           tablat	equ	0xFF5
 20228                           prodh	equ	0xFF4
 20229                           prodl	equ	0xFF3
 20230                           intcon	equ	0xFF2
 20231                           intcon2	equ	0xFF1
 20232                           intcon3	equ	0xFF0
 20233                           indf0	equ	0xFEF
 20234                           postinc0	equ	0xFEE
 20235                           fsr0h	equ	0xFEA
 20236                           fsr0l	equ	0xFE9
 20237                           wreg	equ	0xFE8
 20238                           postdec1	equ	0xFE5
 20239                           fsr1h	equ	0xFE2
 20240                           fsr1l	equ	0xFE1
 20241                           indf2	equ	0xFDF
 20242                           postinc2	equ	0xFDE
 20243                           postdec2	equ	0xFDD
 20244                           fsr2h	equ	0xFDA
 20245                           fsr2l	equ	0xFD9
 20246                           status	equ	0xFD8
 20247                           
 20248 ;; *************** function _change_state_to_menu_11 *****************
 20249 ;; Defined at:
 20250 ;;		line 482 in file "UI.c"
 20251 ;; Parameters:    Size  Location     Type
 20252 ;;		None
 20253 ;; Auto vars:     Size  Location     Type
 20254 ;;		None
 20255 ;; Return value:  Size  Location     Type
 20256 ;;                  1    wreg      void 
 20257 ;; Registers used:
 20258 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20259 ;; Tracked objects:
 20260 ;;		On entry : 0/0
 20261 ;;		On exit  : 0/0
 20262 ;;		Unchanged: 0/0
 20263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20268 ;;Total ram usage:        0 bytes
 20269 ;; Hardware stack levels used:    1
 20270 ;; Hardware stack levels required when called:    3
 20271 ;; This function calls:
 20272 ;;		i2_lcdInst
 20273 ;;		i2_printf
 20274 ;; This function is called by:
 20275 ;;		_updateMenu
 20276 ;;		_inputHandler
 20277 ;; This function uses a non-reentrant model
 20278 ;;
 20279                           
 20280                           	psect	text70
 20281  004EFE                     __ptext70:
 20282                           	opt stack 0
 20283  004EFE                     _change_state_to_menu_11:
 20284                           	opt stack 18
 20285                           
 20286                           ;UI.c: 483: cur_state = 11;
 20287                           
 20288                           ;incstack = 0
 20289  004EFE  0E00               	movlw	0
 20290  004F00  0100               	movlb	0	; () banked
 20291  004F02  6FED               	movwf	(_cur_state+1)& (0+255),b
 20292  004F04  0E0B               	movlw	11
 20293  004F06  6FEC               	movwf	_cur_state& (0+255),b
 20294                           
 20295                           ; BSR set to: 0
 20296                           ;UI.c: 485: lcdInst(0b10000000);;
 20297  004F08  0E80               	movlw	128
 20298  004F0A  EC6A  F029         	call	i2_lcdInst
 20299                           
 20300                           ;UI.c: 486: printf("1. DATE/TIME   <");
 20301  004F0E  0ED1               	movlw	low STR_31
 20302  004F10  6E0D               	movwf	i2printf@f,c
 20303  004F12  0EFD               	movlw	high STR_31
 20304  004F14  6E0E               	movwf	i2printf@f+1,c
 20305  004F16  ECE0  F00E         	call	i2_printf	;wreg free
 20306                           
 20307                           ;UI.c: 487: lcdInst(0b11000000);;
 20308  004F1A  0EC0               	movlw	192
 20309  004F1C  EC6A  F029         	call	i2_lcdInst
 20310                           
 20311                           ;UI.c: 488: printf("2. SORT         ");
 20312  004F20  0E16               	movlw	low STR_32
 20313  004F22  6E0D               	movwf	i2printf@f,c
 20314  004F24  0EFD               	movlw	high STR_32
 20315  004F26  6E0E               	movwf	i2printf@f+1,c
 20316  004F28  ECE0  F00E         	call	i2_printf	;wreg free
 20317  004F2C  0012               	return		;funcret
 20318  004F2E                     __end_of_change_state_to_menu_11:
 20319                           	opt stack 0
 20320                           pclatu	equ	0xFFB
 20321                           pclath	equ	0xFFA
 20322                           tblptru	equ	0xFF8
 20323                           tblptrh	equ	0xFF7
 20324                           tblptrl	equ	0xFF6
 20325                           tablat	equ	0xFF5
 20326                           prodh	equ	0xFF4
 20327                           prodl	equ	0xFF3
 20328                           intcon	equ	0xFF2
 20329                           intcon2	equ	0xFF1
 20330                           intcon3	equ	0xFF0
 20331                           indf0	equ	0xFEF
 20332                           postinc0	equ	0xFEE
 20333                           fsr0h	equ	0xFEA
 20334                           fsr0l	equ	0xFE9
 20335                           wreg	equ	0xFE8
 20336                           postdec1	equ	0xFE5
 20337                           fsr1h	equ	0xFE2
 20338                           fsr1l	equ	0xFE1
 20339                           indf2	equ	0xFDF
 20340                           postinc2	equ	0xFDE
 20341                           postdec2	equ	0xFDD
 20342                           fsr2h	equ	0xFDA
 20343                           fsr2l	equ	0xFD9
 20344                           status	equ	0xFD8
 20345                           
 20346 ;; *************** function _change_state_to_logs_34 *****************
 20347 ;; Defined at:
 20348 ;;		line 549 in file "UI.c"
 20349 ;; Parameters:    Size  Location     Type
 20350 ;;		None
 20351 ;; Auto vars:     Size  Location     Type
 20352 ;;		None
 20353 ;; Return value:  Size  Location     Type
 20354 ;;                  1    wreg      void 
 20355 ;; Registers used:
 20356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20357 ;; Tracked objects:
 20358 ;;		On entry : 0/0
 20359 ;;		On exit  : 0/0
 20360 ;;		Unchanged: 0/0
 20361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20366 ;;Total ram usage:        0 bytes
 20367 ;; Hardware stack levels used:    1
 20368 ;; Hardware stack levels required when called:    3
 20369 ;; This function calls:
 20370 ;;		i2_lcdInst
 20371 ;;		i2_printf
 20372 ;; This function is called by:
 20373 ;;		_updateMenu
 20374 ;;		_inputHandler
 20375 ;; This function uses a non-reentrant model
 20376 ;;
 20377                           
 20378                           	psect	text71
 20379  004F2E                     __ptext71:
 20380                           	opt stack 0
 20381  004F2E                     _change_state_to_logs_34:
 20382                           	opt stack 18
 20383                           
 20384                           ;UI.c: 550: cur_state = 1034;
 20385                           
 20386                           ;incstack = 0
 20387  004F2E  0E04               	movlw	4
 20388  004F30  0100               	movlb	0	; () banked
 20389  004F32  6FED               	movwf	(_cur_state+1)& (0+255),b
 20390  004F34  0E0A               	movlw	10
 20391  004F36  6FEC               	movwf	_cur_state& (0+255),b
 20392                           
 20393                           ; BSR set to: 0
 20394                           ;UI.c: 551: lcdInst(0b10000000);;
 20395  004F38  0E80               	movlw	128
 20396  004F3A  EC6A  F029         	call	i2_lcdInst
 20397                           
 20398                           ;UI.c: 552: printf("LOG 3           ");
 20399  004F3E  0EE3               	movlw	low STR_44
 20400  004F40  6E0D               	movwf	i2printf@f,c
 20401  004F42  0EFC               	movlw	high STR_44
 20402  004F44  6E0E               	movwf	i2printf@f+1,c
 20403  004F46  ECE0  F00E         	call	i2_printf	;wreg free
 20404                           
 20405                           ;UI.c: 553: lcdInst(0b11000000);;
 20406  004F4A  0EC0               	movlw	192
 20407  004F4C  EC6A  F029         	call	i2_lcdInst
 20408                           
 20409                           ;UI.c: 554: printf("LOG 4          <");
 20410  004F50  0E9E               	movlw	low STR_50
 20411  004F52  6E0D               	movwf	i2printf@f,c
 20412  004F54  0EFD               	movlw	high STR_50
 20413  004F56  6E0E               	movwf	i2printf@f+1,c
 20414  004F58  ECE0  F00E         	call	i2_printf	;wreg free
 20415  004F5C  0012               	return		;funcret
 20416  004F5E                     __end_of_change_state_to_logs_34:
 20417                           	opt stack 0
 20418                           pclatu	equ	0xFFB
 20419                           pclath	equ	0xFFA
 20420                           tblptru	equ	0xFF8
 20421                           tblptrh	equ	0xFF7
 20422                           tblptrl	equ	0xFF6
 20423                           tablat	equ	0xFF5
 20424                           prodh	equ	0xFF4
 20425                           prodl	equ	0xFF3
 20426                           intcon	equ	0xFF2
 20427                           intcon2	equ	0xFF1
 20428                           intcon3	equ	0xFF0
 20429                           indf0	equ	0xFEF
 20430                           postinc0	equ	0xFEE
 20431                           fsr0h	equ	0xFEA
 20432                           fsr0l	equ	0xFE9
 20433                           wreg	equ	0xFE8
 20434                           postdec1	equ	0xFE5
 20435                           fsr1h	equ	0xFE2
 20436                           fsr1l	equ	0xFE1
 20437                           indf2	equ	0xFDF
 20438                           postinc2	equ	0xFDE
 20439                           postdec2	equ	0xFDD
 20440                           fsr2h	equ	0xFDA
 20441                           fsr2l	equ	0xFD9
 20442                           status	equ	0xFD8
 20443                           
 20444 ;; *************** function _change_state_to_logs_33 *****************
 20445 ;; Defined at:
 20446 ;;		line 542 in file "UI.c"
 20447 ;; Parameters:    Size  Location     Type
 20448 ;;		None
 20449 ;; Auto vars:     Size  Location     Type
 20450 ;;		None
 20451 ;; Return value:  Size  Location     Type
 20452 ;;                  1    wreg      void 
 20453 ;; Registers used:
 20454 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20455 ;; Tracked objects:
 20456 ;;		On entry : 0/0
 20457 ;;		On exit  : 0/0
 20458 ;;		Unchanged: 0/0
 20459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20464 ;;Total ram usage:        0 bytes
 20465 ;; Hardware stack levels used:    1
 20466 ;; Hardware stack levels required when called:    3
 20467 ;; This function calls:
 20468 ;;		i2_lcdInst
 20469 ;;		i2_printf
 20470 ;; This function is called by:
 20471 ;;		_updateMenu
 20472 ;;		_inputHandler
 20473 ;; This function uses a non-reentrant model
 20474 ;;
 20475                           
 20476                           	psect	text72
 20477  004F5E                     __ptext72:
 20478                           	opt stack 0
 20479  004F5E                     _change_state_to_logs_33:
 20480                           	opt stack 18
 20481                           
 20482                           ;UI.c: 543: cur_state = 1033;
 20483                           
 20484                           ;incstack = 0
 20485  004F5E  0E04               	movlw	4
 20486  004F60  0100               	movlb	0	; () banked
 20487  004F62  6FED               	movwf	(_cur_state+1)& (0+255),b
 20488  004F64  0E09               	movlw	9
 20489  004F66  6FEC               	movwf	_cur_state& (0+255),b
 20490                           
 20491                           ; BSR set to: 0
 20492                           ;UI.c: 544: lcdInst(0b10000000);;
 20493  004F68  0E80               	movlw	128
 20494  004F6A  EC6A  F029         	call	i2_lcdInst
 20495                           
 20496                           ;UI.c: 545: printf("LOG 3          <");
 20497  004F6E  0E8D               	movlw	low STR_46
 20498  004F70  6E0D               	movwf	i2printf@f,c
 20499  004F72  0EFD               	movlw	high STR_46
 20500  004F74  6E0E               	movwf	i2printf@f+1,c
 20501  004F76  ECE0  F00E         	call	i2_printf	;wreg free
 20502                           
 20503                           ;UI.c: 546: lcdInst(0b11000000);;
 20504  004F7A  0EC0               	movlw	192
 20505  004F7C  EC6A  F029         	call	i2_lcdInst
 20506                           
 20507                           ;UI.c: 547: printf("LOG 4           ");
 20508  004F80  0EF4               	movlw	low STR_48
 20509  004F82  6E0D               	movwf	i2printf@f,c
 20510  004F84  0EFC               	movlw	high STR_48
 20511  004F86  6E0E               	movwf	i2printf@f+1,c
 20512  004F88  ECE0  F00E         	call	i2_printf	;wreg free
 20513  004F8C  0012               	return		;funcret
 20514  004F8E                     __end_of_change_state_to_logs_33:
 20515                           	opt stack 0
 20516                           pclatu	equ	0xFFB
 20517                           pclath	equ	0xFFA
 20518                           tblptru	equ	0xFF8
 20519                           tblptrh	equ	0xFF7
 20520                           tblptrl	equ	0xFF6
 20521                           tablat	equ	0xFF5
 20522                           prodh	equ	0xFF4
 20523                           prodl	equ	0xFF3
 20524                           intcon	equ	0xFF2
 20525                           intcon2	equ	0xFF1
 20526                           intcon3	equ	0xFF0
 20527                           indf0	equ	0xFEF
 20528                           postinc0	equ	0xFEE
 20529                           fsr0h	equ	0xFEA
 20530                           fsr0l	equ	0xFE9
 20531                           wreg	equ	0xFE8
 20532                           postdec1	equ	0xFE5
 20533                           fsr1h	equ	0xFE2
 20534                           fsr1l	equ	0xFE1
 20535                           indf2	equ	0xFDF
 20536                           postinc2	equ	0xFDE
 20537                           postdec2	equ	0xFDD
 20538                           fsr2h	equ	0xFDA
 20539                           fsr2l	equ	0xFD9
 20540                           status	equ	0xFD8
 20541                           
 20542 ;; *************** function _change_state_to_logs_23 *****************
 20543 ;; Defined at:
 20544 ;;		line 535 in file "UI.c"
 20545 ;; Parameters:    Size  Location     Type
 20546 ;;		None
 20547 ;; Auto vars:     Size  Location     Type
 20548 ;;		None
 20549 ;; Return value:  Size  Location     Type
 20550 ;;                  1    wreg      void 
 20551 ;; Registers used:
 20552 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20553 ;; Tracked objects:
 20554 ;;		On entry : 0/0
 20555 ;;		On exit  : 0/0
 20556 ;;		Unchanged: 0/0
 20557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20562 ;;Total ram usage:        0 bytes
 20563 ;; Hardware stack levels used:    1
 20564 ;; Hardware stack levels required when called:    3
 20565 ;; This function calls:
 20566 ;;		i2_lcdInst
 20567 ;;		i2_printf
 20568 ;; This function is called by:
 20569 ;;		_updateMenu
 20570 ;;		_inputHandler
 20571 ;; This function uses a non-reentrant model
 20572 ;;
 20573                           
 20574                           	psect	text73
 20575  00504C                     __ptext73:
 20576                           	opt stack 0
 20577  00504C                     _change_state_to_logs_23:
 20578                           	opt stack 18
 20579                           
 20580                           ;UI.c: 536: cur_state = 1023;
 20581                           
 20582                           ;incstack = 0
 20583  00504C  0E03               	movlw	3
 20584  00504E  0100               	movlb	0	; () banked
 20585  005050  6FED               	movwf	(_cur_state+1)& (0+255),b
 20586  005052  69EC               	setf	_cur_state& (0+255),b
 20587                           
 20588                           ; BSR set to: 0
 20589                           ;UI.c: 537: lcdInst(0b10000000);;
 20590  005054  0E80               	movlw	128
 20591  005056  EC6A  F029         	call	i2_lcdInst
 20592                           
 20593                           ;UI.c: 538: printf("LOG 2           ");
 20594  00505A  0ED2               	movlw	low STR_40
 20595  00505C  6E0D               	movwf	i2printf@f,c
 20596  00505E  0EFC               	movlw	high STR_40
 20597  005060  6E0E               	movwf	i2printf@f+1,c
 20598  005062  ECE0  F00E         	call	i2_printf	;wreg free
 20599                           
 20600                           ;UI.c: 539: lcdInst(0b11000000);;
 20601  005066  0EC0               	movlw	192
 20602  005068  EC6A  F029         	call	i2_lcdInst
 20603                           
 20604                           ;UI.c: 540: printf("LOG 3          <");
 20605  00506C  0E8D               	movlw	low STR_46
 20606  00506E  6E0D               	movwf	i2printf@f,c
 20607  005070  0EFD               	movlw	high STR_46
 20608  005072  6E0E               	movwf	i2printf@f+1,c
 20609  005074  ECE0  F00E         	call	i2_printf	;wreg free
 20610  005078  0012               	return		;funcret
 20611  00507A                     __end_of_change_state_to_logs_23:
 20612                           	opt stack 0
 20613                           pclatu	equ	0xFFB
 20614                           pclath	equ	0xFFA
 20615                           tblptru	equ	0xFF8
 20616                           tblptrh	equ	0xFF7
 20617                           tblptrl	equ	0xFF6
 20618                           tablat	equ	0xFF5
 20619                           prodh	equ	0xFF4
 20620                           prodl	equ	0xFF3
 20621                           intcon	equ	0xFF2
 20622                           intcon2	equ	0xFF1
 20623                           intcon3	equ	0xFF0
 20624                           indf0	equ	0xFEF
 20625                           postinc0	equ	0xFEE
 20626                           fsr0h	equ	0xFEA
 20627                           fsr0l	equ	0xFE9
 20628                           wreg	equ	0xFE8
 20629                           postdec1	equ	0xFE5
 20630                           fsr1h	equ	0xFE2
 20631                           fsr1l	equ	0xFE1
 20632                           indf2	equ	0xFDF
 20633                           postinc2	equ	0xFDE
 20634                           postdec2	equ	0xFDD
 20635                           fsr2h	equ	0xFDA
 20636                           fsr2l	equ	0xFD9
 20637                           status	equ	0xFD8
 20638                           
 20639 ;; *************** function _change_state_to_logs_22 *****************
 20640 ;; Defined at:
 20641 ;;		line 528 in file "UI.c"
 20642 ;; Parameters:    Size  Location     Type
 20643 ;;		None
 20644 ;; Auto vars:     Size  Location     Type
 20645 ;;		None
 20646 ;; Return value:  Size  Location     Type
 20647 ;;                  1    wreg      void 
 20648 ;; Registers used:
 20649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20650 ;; Tracked objects:
 20651 ;;		On entry : 0/0
 20652 ;;		On exit  : 0/0
 20653 ;;		Unchanged: 0/0
 20654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20659 ;;Total ram usage:        0 bytes
 20660 ;; Hardware stack levels used:    1
 20661 ;; Hardware stack levels required when called:    3
 20662 ;; This function calls:
 20663 ;;		i2_lcdInst
 20664 ;;		i2_printf
 20665 ;; This function is called by:
 20666 ;;		_updateMenu
 20667 ;;		_inputHandler
 20668 ;; This function uses a non-reentrant model
 20669 ;;
 20670                           
 20671                           	psect	text74
 20672  004F8E                     __ptext74:
 20673                           	opt stack 0
 20674  004F8E                     _change_state_to_logs_22:
 20675                           	opt stack 18
 20676                           
 20677                           ;UI.c: 529: cur_state = 1022;
 20678                           
 20679                           ;incstack = 0
 20680  004F8E  0E03               	movlw	3
 20681  004F90  0100               	movlb	0	; () banked
 20682  004F92  6FED               	movwf	(_cur_state+1)& (0+255),b
 20683  004F94  0EFE               	movlw	254
 20684  004F96  6FEC               	movwf	_cur_state& (0+255),b
 20685                           
 20686                           ; BSR set to: 0
 20687                           ;UI.c: 530: lcdInst(0b10000000);;
 20688  004F98  0E80               	movlw	128
 20689  004F9A  EC6A  F029         	call	i2_lcdInst
 20690                           
 20691                           ;UI.c: 531: printf("LOG 2          <");
 20692  004F9E  0E7C               	movlw	low STR_42
 20693  004FA0  6E0D               	movwf	i2printf@f,c
 20694  004FA2  0EFD               	movlw	high STR_42
 20695  004FA4  6E0E               	movwf	i2printf@f+1,c
 20696  004FA6  ECE0  F00E         	call	i2_printf	;wreg free
 20697                           
 20698                           ;UI.c: 532: lcdInst(0b11000000);;
 20699  004FAA  0EC0               	movlw	192
 20700  004FAC  EC6A  F029         	call	i2_lcdInst
 20701                           
 20702                           ;UI.c: 533: printf("LOG 3           ");
 20703  004FB0  0EE3               	movlw	low STR_44
 20704  004FB2  6E0D               	movwf	i2printf@f,c
 20705  004FB4  0EFC               	movlw	high STR_44
 20706  004FB6  6E0E               	movwf	i2printf@f+1,c
 20707  004FB8  ECE0  F00E         	call	i2_printf	;wreg free
 20708  004FBC  0012               	return		;funcret
 20709  004FBE                     __end_of_change_state_to_logs_22:
 20710                           	opt stack 0
 20711                           pclatu	equ	0xFFB
 20712                           pclath	equ	0xFFA
 20713                           tblptru	equ	0xFF8
 20714                           tblptrh	equ	0xFF7
 20715                           tblptrl	equ	0xFF6
 20716                           tablat	equ	0xFF5
 20717                           prodh	equ	0xFF4
 20718                           prodl	equ	0xFF3
 20719                           intcon	equ	0xFF2
 20720                           intcon2	equ	0xFF1
 20721                           intcon3	equ	0xFF0
 20722                           indf0	equ	0xFEF
 20723                           postinc0	equ	0xFEE
 20724                           fsr0h	equ	0xFEA
 20725                           fsr0l	equ	0xFE9
 20726                           wreg	equ	0xFE8
 20727                           postdec1	equ	0xFE5
 20728                           fsr1h	equ	0xFE2
 20729                           fsr1l	equ	0xFE1
 20730                           indf2	equ	0xFDF
 20731                           postinc2	equ	0xFDE
 20732                           postdec2	equ	0xFDD
 20733                           fsr2h	equ	0xFDA
 20734                           fsr2l	equ	0xFD9
 20735                           status	equ	0xFD8
 20736                           
 20737 ;; *************** function _change_state_to_logs_12 *****************
 20738 ;; Defined at:
 20739 ;;		line 521 in file "UI.c"
 20740 ;; Parameters:    Size  Location     Type
 20741 ;;		None
 20742 ;; Auto vars:     Size  Location     Type
 20743 ;;		None
 20744 ;; Return value:  Size  Location     Type
 20745 ;;                  1    wreg      void 
 20746 ;; Registers used:
 20747 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20748 ;; Tracked objects:
 20749 ;;		On entry : 0/0
 20750 ;;		On exit  : 0/0
 20751 ;;		Unchanged: 0/0
 20752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20757 ;;Total ram usage:        0 bytes
 20758 ;; Hardware stack levels used:    1
 20759 ;; Hardware stack levels required when called:    3
 20760 ;; This function calls:
 20761 ;;		i2_lcdInst
 20762 ;;		i2_printf
 20763 ;; This function is called by:
 20764 ;;		_updateMenu
 20765 ;;		_inputHandler
 20766 ;; This function uses a non-reentrant model
 20767 ;;
 20768                           
 20769                           	psect	text75
 20770  004FBE                     __ptext75:
 20771                           	opt stack 0
 20772  004FBE                     _change_state_to_logs_12:
 20773                           	opt stack 18
 20774                           
 20775                           ;UI.c: 522: cur_state = 1012;
 20776                           
 20777                           ;incstack = 0
 20778  004FBE  0E03               	movlw	3
 20779  004FC0  0100               	movlb	0	; () banked
 20780  004FC2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20781  004FC4  0EF4               	movlw	244
 20782  004FC6  6FEC               	movwf	_cur_state& (0+255),b
 20783                           
 20784                           ; BSR set to: 0
 20785                           ;UI.c: 523: lcdInst(0b10000000);;
 20786  004FC8  0E80               	movlw	128
 20787  004FCA  EC6A  F029         	call	i2_lcdInst
 20788                           
 20789                           ;UI.c: 524: printf("LOG 1           ");
 20790  004FCE  0EC1               	movlw	low STR_41
 20791  004FD0  6E0D               	movwf	i2printf@f,c
 20792  004FD2  0EFC               	movlw	high STR_41
 20793  004FD4  6E0E               	movwf	i2printf@f+1,c
 20794  004FD6  ECE0  F00E         	call	i2_printf	;wreg free
 20795                           
 20796                           ;UI.c: 525: lcdInst(0b11000000);;
 20797  004FDA  0EC0               	movlw	192
 20798  004FDC  EC6A  F029         	call	i2_lcdInst
 20799                           
 20800                           ;UI.c: 526: printf("LOG 2          <");
 20801  004FE0  0E7C               	movlw	low STR_42
 20802  004FE2  6E0D               	movwf	i2printf@f,c
 20803  004FE4  0EFD               	movlw	high STR_42
 20804  004FE6  6E0E               	movwf	i2printf@f+1,c
 20805  004FE8  ECE0  F00E         	call	i2_printf	;wreg free
 20806  004FEC  0012               	return		;funcret
 20807  004FEE                     __end_of_change_state_to_logs_12:
 20808                           	opt stack 0
 20809                           pclatu	equ	0xFFB
 20810                           pclath	equ	0xFFA
 20811                           tblptru	equ	0xFF8
 20812                           tblptrh	equ	0xFF7
 20813                           tblptrl	equ	0xFF6
 20814                           tablat	equ	0xFF5
 20815                           prodh	equ	0xFF4
 20816                           prodl	equ	0xFF3
 20817                           intcon	equ	0xFF2
 20818                           intcon2	equ	0xFF1
 20819                           intcon3	equ	0xFF0
 20820                           indf0	equ	0xFEF
 20821                           postinc0	equ	0xFEE
 20822                           fsr0h	equ	0xFEA
 20823                           fsr0l	equ	0xFE9
 20824                           wreg	equ	0xFE8
 20825                           postdec1	equ	0xFE5
 20826                           fsr1h	equ	0xFE2
 20827                           fsr1l	equ	0xFE1
 20828                           indf2	equ	0xFDF
 20829                           postinc2	equ	0xFDE
 20830                           postdec2	equ	0xFDD
 20831                           fsr2h	equ	0xFDA
 20832                           fsr2l	equ	0xFD9
 20833                           status	equ	0xFD8
 20834                           
 20835 ;; *************** function _change_state_to_logs_11 *****************
 20836 ;; Defined at:
 20837 ;;		line 514 in file "UI.c"
 20838 ;; Parameters:    Size  Location     Type
 20839 ;;		None
 20840 ;; Auto vars:     Size  Location     Type
 20841 ;;		None
 20842 ;; Return value:  Size  Location     Type
 20843 ;;                  1    wreg      void 
 20844 ;; Registers used:
 20845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20846 ;; Tracked objects:
 20847 ;;		On entry : 0/0
 20848 ;;		On exit  : 0/0
 20849 ;;		Unchanged: 0/0
 20850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20855 ;;Total ram usage:        0 bytes
 20856 ;; Hardware stack levels used:    1
 20857 ;; Hardware stack levels required when called:    3
 20858 ;; This function calls:
 20859 ;;		i2_lcdInst
 20860 ;;		i2_printf
 20861 ;; This function is called by:
 20862 ;;		_updateMenu
 20863 ;;		_inputHandler
 20864 ;; This function uses a non-reentrant model
 20865 ;;
 20866                           
 20867                           	psect	text76
 20868  004FEE                     __ptext76:
 20869                           	opt stack 0
 20870  004FEE                     _change_state_to_logs_11:
 20871                           	opt stack 18
 20872                           
 20873                           ;UI.c: 515: cur_state = 1011;
 20874                           
 20875                           ;incstack = 0
 20876  004FEE  0E03               	movlw	3
 20877  004FF0  0100               	movlb	0	; () banked
 20878  004FF2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20879  004FF4  0EF3               	movlw	243
 20880  004FF6  6FEC               	movwf	_cur_state& (0+255),b
 20881                           
 20882                           ; BSR set to: 0
 20883                           ;UI.c: 516: lcdInst(0b10000000);;
 20884  004FF8  0E80               	movlw	128
 20885  004FFA  EC6A  F029         	call	i2_lcdInst
 20886                           
 20887                           ;UI.c: 517: printf("LOG 1          <");
 20888  004FFE  0E6B               	movlw	low STR_39
 20889  005000  6E0D               	movwf	i2printf@f,c
 20890  005002  0EFD               	movlw	high STR_39
 20891  005004  6E0E               	movwf	i2printf@f+1,c
 20892  005006  ECE0  F00E         	call	i2_printf	;wreg free
 20893                           
 20894                           ;UI.c: 518: lcdInst(0b11000000);;
 20895  00500A  0EC0               	movlw	192
 20896  00500C  EC6A  F029         	call	i2_lcdInst
 20897                           
 20898                           ;UI.c: 519: printf("LOG 2           ");
 20899  005010  0ED2               	movlw	low STR_40
 20900  005012  6E0D               	movwf	i2printf@f,c
 20901  005014  0EFC               	movlw	high STR_40
 20902  005016  6E0E               	movwf	i2printf@f+1,c
 20903  005018  ECE0  F00E         	call	i2_printf	;wreg free
 20904  00501C  0012               	return		;funcret
 20905  00501E                     __end_of_change_state_to_logs_11:
 20906                           	opt stack 0
 20907                           pclatu	equ	0xFFB
 20908                           pclath	equ	0xFFA
 20909                           tblptru	equ	0xFF8
 20910                           tblptrh	equ	0xFF7
 20911                           tblptrl	equ	0xFF6
 20912                           tablat	equ	0xFF5
 20913                           prodh	equ	0xFF4
 20914                           prodl	equ	0xFF3
 20915                           intcon	equ	0xFF2
 20916                           intcon2	equ	0xFF1
 20917                           intcon3	equ	0xFF0
 20918                           indf0	equ	0xFEF
 20919                           postinc0	equ	0xFEE
 20920                           fsr0h	equ	0xFEA
 20921                           fsr0l	equ	0xFE9
 20922                           wreg	equ	0xFE8
 20923                           postdec1	equ	0xFE5
 20924                           fsr1h	equ	0xFE2
 20925                           fsr1l	equ	0xFE1
 20926                           indf2	equ	0xFDF
 20927                           postinc2	equ	0xFDE
 20928                           postdec2	equ	0xFDD
 20929                           fsr2h	equ	0xFDA
 20930                           fsr2l	equ	0xFD9
 20931                           status	equ	0xFD8
 20932                           
 20933 ;; *************** function _dispLogs *****************
 20934 ;; Defined at:
 20935 ;;		line 467 in file "UI.c"
 20936 ;; Parameters:    Size  Location     Type
 20937 ;;  myLog           2   17[COMRAM] int 
 20938 ;; Auto vars:     Size  Location     Type
 20939 ;;		None
 20940 ;; Return value:  Size  Location     Type
 20941 ;;                  1    wreg      void 
 20942 ;; Registers used:
 20943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20944 ;; Tracked objects:
 20945 ;;		On entry : 0/0
 20946 ;;		On exit  : 0/0
 20947 ;;		Unchanged: 0/0
 20948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20949 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20953 ;;Total ram usage:        2 bytes
 20954 ;; Hardware stack levels used:    1
 20955 ;; Hardware stack levels required when called:    2
 20956 ;; This function calls:
 20957 ;;		_retrieveLog
 20958 ;; This function is called by:
 20959 ;;		_updateMenu
 20960 ;; This function uses a non-reentrant model
 20961 ;;
 20962                           
 20963                           	psect	text77
 20964  005198                     __ptext77:
 20965                           	opt stack 0
 20966  005198                     _dispLogs:
 20967                           	opt stack 20
 20968                           
 20969                           ;UI.c: 468: logstate = 1;
 20970                           
 20971                           ;incstack = 0
 20972  005198  0E00               	movlw	0
 20973  00519A  0100               	movlb	0	; () banked
 20974  00519C  6FF7               	movwf	(_logstate+1)& (0+255),b
 20975  00519E  0E01               	movlw	1
 20976  0051A0  6FF6               	movwf	_logstate& (0+255),b
 20977                           
 20978                           ; BSR set to: 0
 20979                           ;UI.c: 469: log = myLog;
 20980  0051A2  C012  F0F2         	movff	dispLogs@myLog,_log
 20981  0051A6  C013  F0F3         	movff	dispLogs@myLog+1,_log+1
 20982                           
 20983                           ; BSR set to: 0
 20984                           ;UI.c: 470: retrieveLog(myLog - 1);
 20985  0051AA  0EFF               	movlw	255
 20986  0051AC  2412               	addwf	dispLogs@myLog,w,c
 20987  0051AE  6E07               	movwf	retrieveLog@logNum,c
 20988  0051B0  0EFF               	movlw	255
 20989  0051B2  2013               	addwfc	dispLogs@myLog+1,w,c
 20990  0051B4  6E08               	movwf	retrieveLog@logNum+1,c
 20991  0051B6  EC9D  F01D         	call	_retrieveLog	;wreg free
 20992  0051BA  0012               	return		;funcret
 20993  0051BC                     __end_of_dispLogs:
 20994                           	opt stack 0
 20995                           pclatu	equ	0xFFB
 20996                           pclath	equ	0xFFA
 20997                           tblptru	equ	0xFF8
 20998                           tblptrh	equ	0xFF7
 20999                           tblptrl	equ	0xFF6
 21000                           tablat	equ	0xFF5
 21001                           prodh	equ	0xFF4
 21002                           prodl	equ	0xFF3
 21003                           intcon	equ	0xFF2
 21004                           intcon2	equ	0xFF1
 21005                           intcon3	equ	0xFF0
 21006                           indf0	equ	0xFEF
 21007                           postinc0	equ	0xFEE
 21008                           fsr0h	equ	0xFEA
 21009                           fsr0l	equ	0xFE9
 21010                           wreg	equ	0xFE8
 21011                           postdec1	equ	0xFE5
 21012                           fsr1h	equ	0xFE2
 21013                           fsr1l	equ	0xFE1
 21014                           indf2	equ	0xFDF
 21015                           postinc2	equ	0xFDE
 21016                           postdec2	equ	0xFDD
 21017                           fsr2h	equ	0xFDA
 21018                           fsr2l	equ	0xFD9
 21019                           status	equ	0xFD8
 21020                           
 21021 ;; *************** function _retrieveLog *****************
 21022 ;; Defined at:
 21023 ;;		line 134 in file "EEPROM.c"
 21024 ;; Parameters:    Size  Location     Type
 21025 ;;  logNum          2    6[COMRAM] int 
 21026 ;; Auto vars:     Size  Location     Type
 21027 ;;  i               2   13[COMRAM] int 
 21028 ;;  addr            2   15[COMRAM] unsigned short 
 21029 ;;  byte3           1   12[COMRAM] unsigned char 
 21030 ;;  byte2           1   11[COMRAM] unsigned char 
 21031 ;;  byte1           1   10[COMRAM] unsigned char 
 21032 ;; Return value:  Size  Location     Type
 21033 ;;                  1    wreg      void 
 21034 ;; Registers used:
 21035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21036 ;; Tracked objects:
 21037 ;;		On entry : 0/0
 21038 ;;		On exit  : 0/0
 21039 ;;		Unchanged: 0/0
 21040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21041 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21042 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21043 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21044 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21045 ;;Total ram usage:       11 bytes
 21046 ;; Hardware stack levels used:    1
 21047 ;; Hardware stack levels required when called:    1
 21048 ;; This function calls:
 21049 ;;		i2_EEPROM_read
 21050 ;;		i2___wmul
 21051 ;; This function is called by:
 21052 ;;		_dispLogs
 21053 ;; This function uses a non-reentrant model
 21054 ;;
 21055                           
 21056                           	psect	text78
 21057  003B3A                     __ptext78:
 21058                           	opt stack 0
 21059  003B3A                     _retrieveLog:
 21060                           	opt stack 20
 21061                           
 21062                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21063                           
 21064                           ;incstack = 0
 21065  003B3A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21066  003B3E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21067  003B42  0E00               	movlw	0
 21068  003B44  6E04               	movwf	i2___wmul@multiplicand+1,c
 21069  003B46  0E0B               	movlw	11
 21070  003B48  6E03               	movwf	i2___wmul@multiplicand,c
 21071  003B4A  ECA6  F028         	call	i2___wmul	;wreg free
 21072  003B4E  0E01               	movlw	1
 21073  003B50  2401               	addwf	?i2___wmul,w,c
 21074  003B52  6E10               	movwf	retrieveLog@addr,c
 21075  003B54  0E00               	movlw	0
 21076  003B56  2002               	addwfc	?i2___wmul+1,w,c
 21077  003B58  6E11               	movwf	retrieveLog@addr+1,c
 21078                           
 21079                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21080  003B5A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21081  003B5E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21082  003B62  EC36  F029         	call	i2_EEPROM_read	;wreg free
 21083  003B66  6E0B               	movwf	retrieveLog@byte1,c
 21084                           
 21085                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21086  003B68  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21087  003B6C  0E80               	movlw	128
 21088  003B6E  1609               	andwf	??_retrieveLog,f,c
 21089  003B70  5009               	movf	??_retrieveLog,w,c
 21090  003B72  6E63               	movwf	_log_completion,c
 21091  003B74  6A64               	clrf	_log_completion+1,c
 21092                           
 21093                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21094  003B76  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21095  003B7A  0E0F               	movlw	15
 21096  003B7C  1609               	andwf	??_retrieveLog,f,c
 21097  003B7E  5009               	movf	??_retrieveLog,w,c
 21098  003B80  0101               	movlb	1	; () banked
 21099  003B82  6F3F               	movwf	_log_count_total& (0+255),b
 21100  003B84  6B40               	clrf	(_log_count_total+1)& (0+255),b
 21101                           
 21102                           ; BSR set to: 1
 21103                           ;EEPROM.c: 146: addr++;
 21104  003B86  4A10               	infsnz	retrieveLog@addr,f,c
 21105  003B88  2A11               	incf	retrieveLog@addr+1,f,c
 21106                           
 21107                           ; BSR set to: 1
 21108                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21109  003B8A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21110  003B8E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21111  003B92  EC36  F029         	call	i2_EEPROM_read	;wreg free
 21112  003B96  6E0C               	movwf	retrieveLog@byte2,c
 21113                           
 21114                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21115  003B98  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21116  003B9C  3A09               	swapf	??_retrieveLog,f,c
 21117  003B9E  0E0F               	movlw	15
 21118  003BA0  1609               	andwf	??_retrieveLog,f,c
 21119  003BA2  0E0F               	movlw	15
 21120  003BA4  1609               	andwf	??_retrieveLog,f,c
 21121  003BA6  5009               	movf	??_retrieveLog,w,c
 21122  003BA8  6E69               	movwf	_log_count_pop_no_tab,c
 21123  003BAA  6A6A               	clrf	_log_count_pop_no_tab+1,c
 21124                           
 21125                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21126  003BAC  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21127  003BB0  0E0F               	movlw	15
 21128  003BB2  1609               	andwf	??_retrieveLog,f,c
 21129  003BB4  5009               	movf	??_retrieveLog,w,c
 21130  003BB6  6E6B               	movwf	_log_count_pop_w_tab,c
 21131  003BB8  6A6C               	clrf	_log_count_pop_w_tab+1,c
 21132                           
 21133                           ;EEPROM.c: 152: addr++;
 21134  003BBA  4A10               	infsnz	retrieveLog@addr,f,c
 21135  003BBC  2A11               	incf	retrieveLog@addr+1,f,c
 21136                           
 21137                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21138  003BBE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21139  003BC2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21140  003BC6  EC36  F029         	call	i2_EEPROM_read	;wreg free
 21141  003BCA  6E0D               	movwf	retrieveLog@byte3,c
 21142                           
 21143                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21144  003BCC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21145  003BD0  3A09               	swapf	??_retrieveLog,f,c
 21146  003BD2  0E0F               	movlw	15
 21147  003BD4  1609               	andwf	??_retrieveLog,f,c
 21148  003BD6  0E0F               	movlw	15
 21149  003BD8  1609               	andwf	??_retrieveLog,f,c
 21150  003BDA  5009               	movf	??_retrieveLog,w,c
 21151  003BDC  6E67               	movwf	_log_count_can_w_lab,c
 21152  003BDE  6A68               	clrf	_log_count_can_w_lab+1,c
 21153                           
 21154                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21155  003BE0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21156  003BE4  0E0F               	movlw	15
 21157  003BE6  1609               	andwf	??_retrieveLog,f,c
 21158  003BE8  5009               	movf	??_retrieveLog,w,c
 21159  003BEA  6E65               	movwf	_log_count_can_no_lab,c
 21160  003BEC  6A66               	clrf	_log_count_can_no_lab+1,c
 21161                           
 21162                           ;EEPROM.c: 156: addr++;
 21163  003BEE  4A10               	infsnz	retrieveLog@addr,f,c
 21164  003BF0  2A11               	incf	retrieveLog@addr+1,f,c
 21165                           
 21166                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21167  003BF2  0E00               	movlw	0
 21168  003BF4  6E0F               	movwf	retrieveLog@i+1,c
 21169  003BF6  0E00               	movlw	0
 21170  003BF8  6E0E               	movwf	retrieveLog@i,c
 21171  003BFA                     i2l6782:
 21172  003BFA  BE0F               	btfsc	retrieveLog@i+1,7,c
 21173  003BFC  D006               	goto	i2l6786
 21174  003BFE  500F               	movf	retrieveLog@i+1,w,c
 21175  003C00  E11E               	bnz	i2l6794
 21176  003C02  0E07               	movlw	7
 21177  003C04  5C0E               	subwf	retrieveLog@i,w,c
 21178  003C06  B0D8               	btfsc	status,0,c
 21179  003C08  D01A               	goto	i2l6794
 21180  003C0A                     i2l6786:
 21181                           
 21182                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21183  003C0A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21184  003C0E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21185  003C12  EC36  F029         	call	i2_EEPROM_read	;wreg free
 21186  003C16  6E09               	movwf	??_retrieveLog& (0+255),c
 21187  003C18  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21188  003C1A  90D8               	bcf	status,0,c
 21189  003C1C  340E               	rlcf	retrieveLog@i,w,c
 21190  003C1E  6ED9               	movwf	fsr2l,c
 21191  003C20  340F               	rlcf	retrieveLog@i+1,w,c
 21192  003C22  6EDA               	movwf	fsr2h,c
 21193  003C24  0E00               	movlw	low _log_startTime
 21194  003C26  26D9               	addwf	fsr2l,f,c
 21195  003C28  0E01               	movlw	high _log_startTime
 21196  003C2A  22DA               	addwfc	fsr2h,f,c
 21197  003C2C  C009  FFDE         	movff	??_retrieveLog,postinc2
 21198  003C30  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21199                           
 21200                           ;EEPROM.c: 161: addr++;
 21201  003C34  4A10               	infsnz	retrieveLog@addr,f,c
 21202  003C36  2A11               	incf	retrieveLog@addr+1,f,c
 21203  003C38  4A0E               	infsnz	retrieveLog@i,f,c
 21204  003C3A  2A0F               	incf	retrieveLog@i+1,f,c
 21205  003C3C  D7DE               	goto	i2l6782
 21206  003C3E                     i2l6794:
 21207                           
 21208                           ;EEPROM.c: 162: }
 21209                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21210  003C3E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21211  003C42  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21212  003C46  EC36  F029         	call	i2_EEPROM_read	;wreg free
 21213  003C4A  6E09               	movwf	??_retrieveLog& (0+255),c
 21214  003C4C  5009               	movf	??_retrieveLog,w,c
 21215  003C4E  0100               	movlb	0	; () banked
 21216  003C50  6FF4               	movwf	_log_total_time& (0+255),b
 21217  003C52  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 21218                           
 21219                           ; BSR set to: 0
 21220  003C54  0012               	return		;funcret
 21221  003C56                     __end_of_retrieveLog:
 21222                           	opt stack 0
 21223                           pclatu	equ	0xFFB
 21224                           pclath	equ	0xFFA
 21225                           tblptru	equ	0xFF8
 21226                           tblptrh	equ	0xFF7
 21227                           tblptrl	equ	0xFF6
 21228                           tablat	equ	0xFF5
 21229                           prodh	equ	0xFF4
 21230                           prodl	equ	0xFF3
 21231                           intcon	equ	0xFF2
 21232                           intcon2	equ	0xFF1
 21233                           intcon3	equ	0xFF0
 21234                           indf0	equ	0xFEF
 21235                           postinc0	equ	0xFEE
 21236                           fsr0h	equ	0xFEA
 21237                           fsr0l	equ	0xFE9
 21238                           wreg	equ	0xFE8
 21239                           postdec1	equ	0xFE5
 21240                           fsr1h	equ	0xFE2
 21241                           fsr1l	equ	0xFE1
 21242                           indf2	equ	0xFDF
 21243                           postinc2	equ	0xFDE
 21244                           postdec2	equ	0xFDD
 21245                           fsr2h	equ	0xFDA
 21246                           fsr2l	equ	0xFD9
 21247                           status	equ	0xFD8
 21248                           
 21249 ;; *************** function i2_EEPROM_read *****************
 21250 ;; Defined at:
 21251 ;;		line 68 in file "EEPROM.c"
 21252 ;; Parameters:    Size  Location     Type
 21253 ;;  address         2    0[COMRAM] unsigned short 
 21254 ;; Auto vars:     Size  Location     Type
 21255 ;;		None
 21256 ;; Return value:  Size  Location     Type
 21257 ;;                  1    wreg      unsigned char 
 21258 ;; Registers used:
 21259 ;;		wreg, status,2
 21260 ;; Tracked objects:
 21261 ;;		On entry : 0/0
 21262 ;;		On exit  : 0/0
 21263 ;;		Unchanged: 0/0
 21264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21265 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21268 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21269 ;;Total ram usage:        2 bytes
 21270 ;; Hardware stack levels used:    1
 21271 ;; This function calls:
 21272 ;;		Nothing
 21273 ;; This function is called by:
 21274 ;;		_retrieveLog
 21275 ;; This function uses a non-reentrant model
 21276 ;;
 21277                           
 21278                           	psect	text79
 21279  00526C                     __ptext79:
 21280                           	opt stack 0
 21281  00526C                     i2_EEPROM_read:
 21282                           	opt stack 20
 21283                           
 21284                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21285                           
 21286                           ; BSR set to: 0
 21287                           ;incstack = 0
 21288  00526C  5002               	movf	i2EEPROM_read@address+1,w,c
 21289  00526E  6EAA               	movwf	4010,c	;volatile
 21290                           
 21291                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21292  005270  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21293                           
 21294                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21295  005274  9EA6               	bcf	4006,7,c	;volatile
 21296                           
 21297                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21298  005276  9CA6               	bcf	4006,6,c	;volatile
 21299                           
 21300                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21301  005278  80A6               	bsf	4006,0,c	;volatile
 21302  00527A                     i2l1039:
 21303  00527A  B0A6               	btfsc	4006,0,c	;volatile
 21304  00527C  D7FE               	goto	i2l1039
 21305                           
 21306                           ;EEPROM.c: 81: return EEDATA;
 21307  00527E  50A8               	movf	4008,w,c	;volatile
 21308  005280  0012               	return	
 21309  005282                     __end_ofi2_EEPROM_read:
 21310                           	opt stack 0
 21311                           pclatu	equ	0xFFB
 21312                           pclath	equ	0xFFA
 21313                           tblptru	equ	0xFF8
 21314                           tblptrh	equ	0xFF7
 21315                           tblptrl	equ	0xFF6
 21316                           tablat	equ	0xFF5
 21317                           prodh	equ	0xFF4
 21318                           prodl	equ	0xFF3
 21319                           intcon	equ	0xFF2
 21320                           intcon2	equ	0xFF1
 21321                           intcon3	equ	0xFF0
 21322                           indf0	equ	0xFEF
 21323                           postinc0	equ	0xFEE
 21324                           fsr0h	equ	0xFEA
 21325                           fsr0l	equ	0xFE9
 21326                           wreg	equ	0xFE8
 21327                           postdec1	equ	0xFE5
 21328                           fsr1h	equ	0xFE2
 21329                           fsr1l	equ	0xFE1
 21330                           indf2	equ	0xFDF
 21331                           postinc2	equ	0xFDE
 21332                           postdec2	equ	0xFDD
 21333                           fsr2h	equ	0xFDA
 21334                           fsr2l	equ	0xFD9
 21335                           status	equ	0xFD8
 21336                           
 21337 ;; *************** function _printSortTimer *****************
 21338 ;; Defined at:
 21339 ;;		line 423 in file "sort.c"
 21340 ;; Parameters:    Size  Location     Type
 21341 ;;		None
 21342 ;; Auto vars:     Size  Location     Type
 21343 ;;  i               2   70[COMRAM] int 
 21344 ;;  i               2   72[COMRAM] int 
 21345 ;;  curTime        14   44[COMRAM] int [7]
 21346 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21347 ;;  sec             2   64[COMRAM] int 
 21348 ;;  min             2   62[COMRAM] int 
 21349 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21350 ;;  start_sec       2   58[COMRAM] unsigned int 
 21351 ;; Return value:  Size  Location     Type
 21352 ;;                  1    wreg      void 
 21353 ;; Registers used:
 21354 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21355 ;; Tracked objects:
 21356 ;;		On entry : 0/0
 21357 ;;		On exit  : 0/0
 21358 ;;		Unchanged: 0/0
 21359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21361 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21362 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21363 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21364 ;;Total ram usage:       33 bytes
 21365 ;; Hardware stack levels used:    1
 21366 ;; Hardware stack levels required when called:    3
 21367 ;; This function calls:
 21368 ;;		i2___lwdiv
 21369 ;;		i2___lwmod
 21370 ;;		i2___wmul
 21371 ;;		i2_delay_ms
 21372 ;;		i2_getRTC
 21373 ;;		i2_lcdInst
 21374 ;;		i2_printf
 21375 ;; This function is called by:
 21376 ;;		_handler
 21377 ;; This function uses a non-reentrant model
 21378 ;;
 21379                           
 21380                           	psect	text80
 21381  0029B6                     __ptext80:
 21382                           	opt stack 0
 21383  0029B6                     _printSortTimer:
 21384                           	opt stack 20
 21385                           
 21386                           ;sort.c: 424: getRTC();
 21387                           
 21388                           ;incstack = 0
 21389  0029B6  ECE5  F023         	call	i2_getRTC	;wreg free
 21390                           
 21391                           ;sort.c: 425: int curTime[7];
 21392                           ;sort.c: 426: for(int i = 0; i < 7; i++){
 21393  0029BA  0E00               	movlw	0
 21394  0029BC  6E4A               	movwf	printSortTimer@i+1,c
 21395  0029BE  0E00               	movlw	0
 21396  0029C0  6E49               	movwf	printSortTimer@i,c
 21397  0029C2                     i2l9182:
 21398  0029C2  BE4A               	btfsc	printSortTimer@i+1,7,c
 21399  0029C4  D006               	goto	i2l9186
 21400  0029C6  504A               	movf	printSortTimer@i+1,w,c
 21401  0029C8  E131               	bnz	i2l9192
 21402  0029CA  0E07               	movlw	7
 21403  0029CC  5C49               	subwf	printSortTimer@i,w,c
 21404  0029CE  B0D8               	btfsc	status,0,c
 21405  0029D0  D02D               	goto	i2l9192
 21406  0029D2                     i2l9186:
 21407                           
 21408                           ;sort.c: 427: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21409  0029D2  0E1C               	movlw	low _time
 21410  0029D4  2449               	addwf	printSortTimer@i,w,c
 21411  0029D6  6ED9               	movwf	fsr2l,c
 21412  0029D8  0E01               	movlw	high _time
 21413  0029DA  204A               	addwfc	printSortTimer@i+1,w,c
 21414  0029DC  6EDA               	movwf	fsr2h,c
 21415  0029DE  50DF               	movf	indf2,w,c
 21416  0029E0  6E2A               	movwf	??_printSortTimer& (0+255),c
 21417  0029E2  3A2A               	swapf	??_printSortTimer,f,c
 21418  0029E4  0E0F               	movlw	15
 21419  0029E6  162A               	andwf	??_printSortTimer,f,c
 21420  0029E8  0E0F               	movlw	15
 21421  0029EA  162A               	andwf	??_printSortTimer,f,c
 21422  0029EC  502A               	movf	??_printSortTimer,w,c
 21423  0029EE  0D0A               	mullw	10
 21424  0029F0  0E1C               	movlw	low _time
 21425  0029F2  2449               	addwf	printSortTimer@i,w,c
 21426  0029F4  6ED9               	movwf	fsr2l,c
 21427  0029F6  0E01               	movlw	high _time
 21428  0029F8  204A               	addwfc	printSortTimer@i+1,w,c
 21429  0029FA  6EDA               	movwf	fsr2h,c
 21430  0029FC  50DF               	movf	indf2,w,c
 21431  0029FE  0B0F               	andlw	15
 21432  002A00  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21433  002A02  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21434  002A04  50F3               	movf	prodl,w,c
 21435  002A06  262B               	addwf	??_printSortTimer+1,f,c
 21436  002A08  50F4               	movf	prodh,w,c
 21437  002A0A  222C               	addwfc	??_printSortTimer+2,f,c
 21438  002A0C  90D8               	bcf	status,0,c
 21439  002A0E  3449               	rlcf	printSortTimer@i,w,c
 21440  002A10  6ED9               	movwf	fsr2l,c
 21441  002A12  344A               	rlcf	printSortTimer@i+1,w,c
 21442  002A14  6EDA               	movwf	fsr2h,c
 21443  002A16  0E2D               	movlw	low printSortTimer@curTime
 21444  002A18  26D9               	addwf	fsr2l,f,c
 21445  002A1A  0E00               	movlw	high printSortTimer@curTime
 21446  002A1C  22DA               	addwfc	fsr2h,f,c
 21447  002A1E  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21448  002A22  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21449  002A26  4A49               	infsnz	printSortTimer@i,f,c
 21450  002A28  2A4A               	incf	printSortTimer@i+1,f,c
 21451  002A2A  D7CB               	goto	i2l9182
 21452  002A2C                     i2l9192:
 21453                           
 21454                           ;sort.c: 428: }
 21455                           ;sort.c: 429: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21456  002A2C  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21457  002A30  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21458  002A34  0E00               	movlw	0
 21459  002A36  6E04               	movwf	i2___wmul@multiplicand+1,c
 21460  002A38  0E3C               	movlw	60
 21461  002A3A  6E03               	movwf	i2___wmul@multiplicand,c
 21462  002A3C  ECA6  F028         	call	i2___wmul	;wreg free
 21463  002A40  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21464  002A44  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21465  002A48  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21466  002A4C  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21467  002A50  0E0E               	movlw	14
 21468  002A52  6E04               	movwf	i2___wmul@multiplicand+1,c
 21469  002A54  0E10               	movlw	16
 21470  002A56  6E03               	movwf	i2___wmul@multiplicand,c
 21471  002A58  ECA6  F028         	call	i2___wmul	;wreg free
 21472  002A5C  5001               	movf	?i2___wmul,w,c
 21473  002A5E  262A               	addwf	??_printSortTimer,f,c
 21474  002A60  5002               	movf	?i2___wmul+1,w,c
 21475  002A62  222B               	addwfc	??_printSortTimer+1,f,c
 21476  002A64  0101               	movlb	1	; () banked
 21477  002A66  510E               	movf	_startTime& (0+255),w,b
 21478  002A68  242A               	addwf	??_printSortTimer,w,c
 21479  002A6A  6E3B               	movwf	printSortTimer@start_sec,c
 21480  002A6C  0101               	movlb	1	; () banked
 21481  002A6E  510F               	movf	(_startTime+1)& (0+255),w,b
 21482  002A70  202B               	addwfc	??_printSortTimer+1,w,c
 21483  002A72  6E3C               	movwf	printSortTimer@start_sec+1,c
 21484                           
 21485                           ;sort.c: 430: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21486  002A74  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21487  002A78  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21488  002A7C  0E00               	movlw	0
 21489  002A7E  6E04               	movwf	i2___wmul@multiplicand+1,c
 21490  002A80  0E3C               	movlw	60
 21491  002A82  6E03               	movwf	i2___wmul@multiplicand,c
 21492  002A84  ECA6  F028         	call	i2___wmul	;wreg free
 21493  002A88  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21494  002A8C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21495  002A90  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21496  002A94  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21497  002A98  0E0E               	movlw	14
 21498  002A9A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21499  002A9C  0E10               	movlw	16
 21500  002A9E  6E03               	movwf	i2___wmul@multiplicand,c
 21501  002AA0  ECA6  F028         	call	i2___wmul	;wreg free
 21502  002AA4  5001               	movf	?i2___wmul,w,c
 21503  002AA6  262A               	addwf	??_printSortTimer,f,c
 21504  002AA8  5002               	movf	?i2___wmul+1,w,c
 21505  002AAA  222B               	addwfc	??_printSortTimer+1,f,c
 21506  002AAC  502D               	movf	printSortTimer@curTime,w,c
 21507  002AAE  242A               	addwf	??_printSortTimer,w,c
 21508  002AB0  6E3D               	movwf	printSortTimer@cur_sec,c
 21509  002AB2  502E               	movf	printSortTimer@curTime+1,w,c
 21510  002AB4  202B               	addwfc	??_printSortTimer+1,w,c
 21511  002AB6  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21512                           
 21513                           ;sort.c: 431: unsigned int timeDiff = cur_sec - start_sec;
 21514  002AB8  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21515  002ABC  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21516  002AC0  1E2A               	comf	??_printSortTimer,f,c
 21517  002AC2  1E2B               	comf	??_printSortTimer+1,f,c
 21518  002AC4  4A2A               	infsnz	??_printSortTimer,f,c
 21519  002AC6  2A2B               	incf	??_printSortTimer+1,f,c
 21520  002AC8  503D               	movf	printSortTimer@cur_sec,w,c
 21521  002ACA  242A               	addwf	??_printSortTimer,w,c
 21522  002ACC  6E45               	movwf	printSortTimer@timeDiff,c
 21523  002ACE  503E               	movf	printSortTimer@cur_sec+1,w,c
 21524  002AD0  202B               	addwfc	??_printSortTimer+1,w,c
 21525  002AD2  6E46               	movwf	printSortTimer@timeDiff+1,c
 21526                           
 21527                           ;sort.c: 433: total_time = timeDiff;
 21528  002AD4  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 21529  002AD8  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 21530                           
 21531                           ;sort.c: 435: if(f_most_recent_sort_time){
 21532  002ADC  0101               	movlb	1	; () banked
 21533  002ADE  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 21534  002AE0  0101               	movlb	1	; () banked
 21535  002AE2  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21536  002AE4  B4D8               	btfsc	status,2,c
 21537  002AE6  D009               	goto	i2l9204
 21538                           
 21539                           ; BSR set to: 1
 21540                           ;sort.c: 436: most_recent_sort_time = total_time;
 21541  002AE8  C0F8  F06D         	movff	_total_time,_most_recent_sort_time
 21542  002AEC  C0F9  F06E         	movff	_total_time+1,_most_recent_sort_time+1
 21543                           
 21544                           ; BSR set to: 1
 21545                           ;sort.c: 437: f_most_recent_sort_time = 0;
 21546  002AF0  0E00               	movlw	0
 21547  002AF2  0101               	movlb	1	; () banked
 21548  002AF4  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21549  002AF6  0E00               	movlw	0
 21550  002AF8  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 21551  002AFA                     i2l9204:
 21552                           
 21553                           ; BSR set to: 1
 21554                           ;sort.c: 438: }
 21555                           ;sort.c: 440: if(total_time - most_recent_sort_time == 20){
 21556  002AFA  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21557  002AFE  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21558  002B02  1E2A               	comf	??_printSortTimer,f,c
 21559  002B04  1E2B               	comf	??_printSortTimer+1,f,c
 21560  002B06  4A2A               	infsnz	??_printSortTimer,f,c
 21561  002B08  2A2B               	incf	??_printSortTimer+1,f,c
 21562  002B0A  0100               	movlb	0	; () banked
 21563  002B0C  51F8               	movf	_total_time& (0+255),w,b
 21564  002B0E  262A               	addwf	??_printSortTimer,f,c
 21565  002B10  0100               	movlb	0	; () banked
 21566  002B12  51F9               	movf	(_total_time+1)& (0+255),w,b
 21567  002B14  222B               	addwfc	??_printSortTimer+1,f,c
 21568  002B16  0E14               	movlw	20
 21569  002B18  182A               	xorwf	??_printSortTimer,w,c
 21570  002B1A  102B               	iorwf	??_printSortTimer+1,w,c
 21571  002B1C  A4D8               	btfss	status,2,c
 21572  002B1E  D033               	goto	i2l9224
 21573                           
 21574                           ; BSR set to: 0
 21575                           ;sort.c: 441: LATBbits.LATB2 = 0;
 21576  002B20  948A               	bcf	3978,2,c	;volatile
 21577                           
 21578                           ; BSR set to: 0
 21579                           ;sort.c: 442: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21580  002B22  0E52               	movlw	82
 21581  002B24  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21582  002B26  0E2B               	movlw	43
 21583  002B28  6E2A               	movwf	??_printSortTimer& (0+255),c
 21584  002B2A  0E00               	movlw	0
 21585  002B2C                     i2u1005_47:
 21586  002B2C  2EE8               	decfsz	wreg,f,c
 21587  002B2E  D7FE               	bra	i2u1005_47
 21588  002B30  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21589  002B32  D7FC               	bra	i2u1005_47
 21590  002B34  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21591  002B36  D7FA               	bra	i2u1005_47
 21592  002B38  D000               	nop2	
 21593                           
 21594                           ;sort.c: 443: for(int i=0; i<46; i++){
 21595  002B3A  0E00               	movlw	0
 21596  002B3C  6E48               	movwf	printSortTimer@i_1185+1,c
 21597  002B3E  0E00               	movlw	0
 21598  002B40  6E47               	movwf	printSortTimer@i_1185,c
 21599  002B42  BE48               	btfsc	printSortTimer@i_1185+1,7,c
 21600  002B44  D006               	goto	i2l9216
 21601  002B46  5048               	movf	printSortTimer@i_1185+1,w,c
 21602  002B48  E11D               	bnz	i2l843
 21603  002B4A  0E2E               	movlw	46
 21604  002B4C  5C47               	subwf	printSortTimer@i_1185,w,c
 21605  002B4E  B0D8               	btfsc	status,0,c
 21606  002B50  D019               	goto	i2l843
 21607  002B52                     i2l9216:
 21608                           
 21609                           ;sort.c: 444: LATBbits.LATB2 = !LATBbits.LATB2;
 21610  002B52  B48A               	btfsc	3978,2,c	;volatile
 21611  002B54  D003               	goto	i2u824_40
 21612  002B56  6A2A               	clrf	??_printSortTimer& (0+255),c
 21613  002B58  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21614  002B5A  D001               	goto	i2u825_48
 21615  002B5C                     i2u824_40:
 21616  002B5C  6A2A               	clrf	??_printSortTimer& (0+255),c
 21617  002B5E                     i2u825_48:
 21618  002B5E  462A               	rlncf	??_printSortTimer,f,c
 21619  002B60  462A               	rlncf	??_printSortTimer,f,c
 21620  002B62  508A               	movf	3978,w,c	;volatile
 21621  002B64  182A               	xorwf	??_printSortTimer,w,c
 21622  002B66  0BFB               	andlw	-5
 21623  002B68  182A               	xorwf	??_printSortTimer,w,c
 21624  002B6A  6E8A               	movwf	3978,c	;volatile
 21625                           
 21626                           ;sort.c: 445: delay_ms(45-i);
 21627  002B6C  5047               	movf	printSortTimer@i_1185,w,c
 21628  002B6E  0800               	sublw	0
 21629  002B70  0F2D               	addlw	45
 21630  002B72  EC0F  F029         	call	i2_delay_ms
 21631  002B76  4A47               	infsnz	printSortTimer@i_1185,f,c
 21632  002B78  2A48               	incf	printSortTimer@i_1185+1,f,c
 21633  002B7A  BE48               	btfsc	printSortTimer@i_1185+1,7,c
 21634  002B7C  D7EA               	goto	i2l9216
 21635  002B7E  5048               	movf	printSortTimer@i_1185+1,w,c
 21636  002B80  E101               	bnz	i2u826_40
 21637  002B82  D7E3               	goto	L13
 21638  002B84                     i2u826_40:
 21639  002B84                     i2l843:
 21640                           
 21641                           ;sort.c: 446: }
 21642                           ;sort.c: 447: LATBbits.LATB2 = 1;
 21643  002B84  848A               	bsf	3978,2,c	;volatile
 21644  002B86                     i2l9224:
 21645                           
 21646                           ;sort.c: 448: }
 21647                           ;sort.c: 450: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21648  002B86  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21649  002B8A  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21650  002B8E  1E2A               	comf	??_printSortTimer,f,c
 21651  002B90  1E2B               	comf	??_printSortTimer+1,f,c
 21652  002B92  4A2A               	infsnz	??_printSortTimer,f,c
 21653  002B94  2A2B               	incf	??_printSortTimer+1,f,c
 21654  002B96  0100               	movlb	0	; () banked
 21655  002B98  51F8               	movf	_total_time& (0+255),w,b
 21656  002B9A  262A               	addwf	??_printSortTimer,f,c
 21657  002B9C  0100               	movlb	0	; () banked
 21658  002B9E  51F9               	movf	(_total_time+1)& (0+255),w,b
 21659  002BA0  222B               	addwfc	??_printSortTimer+1,f,c
 21660  002BA2  0E2A               	movlw	42
 21661  002BA4  182A               	xorwf	??_printSortTimer,w,c
 21662  002BA6  102B               	iorwf	??_printSortTimer+1,w,c
 21663  002BA8  B4D8               	btfsc	status,2,c
 21664  002BAA  D007               	goto	i2l9228
 21665                           
 21666                           ; BSR set to: 0
 21667  002BAC  0EB3               	movlw	179
 21668  002BAE  0100               	movlb	0	; () banked
 21669  002BB0  19F8               	xorwf	_total_time& (0+255),w,b
 21670  002BB2  0100               	movlb	0	; () banked
 21671  002BB4  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 21672  002BB6  A4D8               	btfss	status,2,c
 21673  002BB8  D003               	goto	i2l9230
 21674  002BBA                     i2l9228:
 21675                           
 21676                           ; BSR set to: 0
 21677                           ;sort.c: 451: machine_state = DoneSorting_state;
 21678  002BBA  0E02               	movlw	2
 21679  002BBC  0100               	movlb	0	; () banked
 21680  002BBE  6FFC               	movwf	_machine_state& (0+255),b
 21681  002BC0                     i2l9230:
 21682                           
 21683                           ; BSR set to: 0
 21684                           ;sort.c: 453: }
 21685                           ;sort.c: 455: int min = (timeDiff % 3600) / 60;
 21686  002BC0  0E0E               	movlw	14
 21687  002BC2  6E04               	movwf	i2___lwmod@divisor+1,c
 21688  002BC4  0E10               	movlw	16
 21689  002BC6  6E03               	movwf	i2___lwmod@divisor,c
 21690  002BC8  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21691  002BCC  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21692  002BD0  EC5E  F026         	call	i2___lwmod	;wreg free
 21693  002BD4  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21694  002BD8  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21695  002BDC  0E00               	movlw	0
 21696  002BDE  6E09               	movwf	i2___lwdiv@divisor+1,c
 21697  002BE0  0E3C               	movlw	60
 21698  002BE2  6E08               	movwf	i2___lwdiv@divisor,c
 21699  002BE4  EC9F  F025         	call	i2___lwdiv	;wreg free
 21700  002BE8  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21701  002BEC  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21702                           
 21703                           ;sort.c: 456: int sec = (timeDiff % 3600) % 60;
 21704  002BF0  0E0E               	movlw	14
 21705  002BF2  6E04               	movwf	i2___lwmod@divisor+1,c
 21706  002BF4  0E10               	movlw	16
 21707  002BF6  6E03               	movwf	i2___lwmod@divisor,c
 21708  002BF8  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21709  002BFC  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21710  002C00  EC5E  F026         	call	i2___lwmod	;wreg free
 21711  002C04  C001  F043         	movff	?i2___lwmod,_printSortTimer$2548
 21712  002C08  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2548+1
 21713                           
 21714                           ;sort.c: 456: int sec = (timeDiff % 3600) % 60;
 21715  002C0C  C043  F001         	movff	_printSortTimer$2548,i2___lwmod@dividend
 21716  002C10  C044  F002         	movff	_printSortTimer$2548+1,i2___lwmod@dividend+1
 21717  002C14  0E00               	movlw	0
 21718  002C16  6E04               	movwf	i2___lwmod@divisor+1,c
 21719  002C18  0E3C               	movlw	60
 21720  002C1A  6E03               	movwf	i2___lwmod@divisor,c
 21721  002C1C  EC5E  F026         	call	i2___lwmod	;wreg free
 21722  002C20  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21723  002C24  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21724                           
 21725                           ;sort.c: 458: lcdInst(0b10000000);;
 21726  002C28  0E80               	movlw	128
 21727  002C2A  EC6A  F029         	call	i2_lcdInst
 21728                           
 21729                           ;sort.c: 459: printf("SORTING...");
 21730  002C2E  0E78               	movlw	low STR_64
 21731  002C30  6E0D               	movwf	i2printf@f,c
 21732  002C32  0EFF               	movlw	high STR_64
 21733  002C34  6E0E               	movwf	i2printf@f+1,c
 21734  002C36  ECE0  F00E         	call	i2_printf	;wreg free
 21735                           
 21736                           ;sort.c: 460: lcdInst(0b11000000);;
 21737  002C3A  0EC0               	movlw	192
 21738  002C3C  EC6A  F029         	call	i2_lcdInst
 21739                           
 21740                           ;sort.c: 461: printf("TIME %d:%02d", min, sec);
 21741  002C40  0E3E               	movlw	low STR_65
 21742  002C42  6E0D               	movwf	i2printf@f,c
 21743  002C44  0EFF               	movlw	high STR_65
 21744  002C46  6E0E               	movwf	i2printf@f+1,c
 21745  002C48  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21746  002C4C  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21747  002C50  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21748  002C54  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21749  002C58  ECE0  F00E         	call	i2_printf	;wreg free
 21750  002C5C  0012               	return		;funcret
 21751  002C5E                     __end_of_printSortTimer:
 21752                           	opt stack 0
 21753                           pclatu	equ	0xFFB
 21754                           pclath	equ	0xFFA
 21755                           tblptru	equ	0xFF8
 21756                           tblptrh	equ	0xFF7
 21757                           tblptrl	equ	0xFF6
 21758                           tablat	equ	0xFF5
 21759                           prodh	equ	0xFF4
 21760                           prodl	equ	0xFF3
 21761                           intcon	equ	0xFF2
 21762                           intcon2	equ	0xFF1
 21763                           intcon3	equ	0xFF0
 21764                           indf0	equ	0xFEF
 21765                           postinc0	equ	0xFEE
 21766                           fsr0h	equ	0xFEA
 21767                           fsr0l	equ	0xFE9
 21768                           wreg	equ	0xFE8
 21769                           postdec1	equ	0xFE5
 21770                           fsr1h	equ	0xFE2
 21771                           fsr1l	equ	0xFE1
 21772                           indf2	equ	0xFDF
 21773                           postinc2	equ	0xFDE
 21774                           postdec2	equ	0xFDD
 21775                           fsr2h	equ	0xFDA
 21776                           fsr2l	equ	0xFD9
 21777                           status	equ	0xFD8
 21778                           
 21779 ;; *************** function i2_printf *****************
 21780 ;; Defined at:
 21781 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21782 ;; Parameters:    Size  Location     Type
 21783 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21784 ;;		 -> STR_126(18), STR_125(18), STR_124(18), STR_123(18), 
 21785 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 21786 ;;		 -> STR_118(3), STR_117(15), STR_116(3), STR_115(15), 
 21787 ;;		 -> STR_114(11), STR_113(18), STR_112(18), STR_111(17), 
 21788 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 21789 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 21790 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 21791 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 21792 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 21793 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 21794 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 21795 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 21796 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 21797 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 21798 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 21799 ;;		 -> STR_66(4), STR_65(13), STR_64(11), STR_63(24), 
 21800 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 21801 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 21802 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 21803 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 21804 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 21805 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 21806 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 21807 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 21808 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 21809 ;;		 -> STR_1(18), 
 21810 ;; Auto vars:     Size  Location     Type
 21811 ;;  printf          4    0        struct .
 21812 ;;  printf          2   39[COMRAM] int 
 21813 ;;  printf          2   35[COMRAM] unsigned int 
 21814 ;;  printf          2   33[COMRAM] unsigned int 
 21815 ;;  printf          2   31[COMRAM] PTR void [1]
 21816 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21817 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21818 ;;		 -> STR_127(7), count_total(2), printRTC@month(4), UI@month(4), 
 21819 ;;  printf          1   38[COMRAM] char 
 21820 ;;  printf          1   37[COMRAM] unsigned char 
 21821 ;;  printf          1   28[COMRAM] char 
 21822 ;; Return value:  Size  Location     Type
 21823 ;;                  2   12[COMRAM] int 
 21824 ;; Registers used:
 21825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21826 ;; Tracked objects:
 21827 ;;		On entry : 0/0
 21828 ;;		On exit  : 0/0
 21829 ;;		Unchanged: 0/0
 21830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21831 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21832 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21833 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21834 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21835 ;;Total ram usage:       29 bytes
 21836 ;; Hardware stack levels used:    1
 21837 ;; Hardware stack levels required when called:    2
 21838 ;; This function calls:
 21839 ;;		i2___lwdiv
 21840 ;;		i2___lwmod
 21841 ;;		i2___wmul
 21842 ;;		i2_isdigit
 21843 ;;		i2_putch
 21844 ;; This function is called by:
 21845 ;;		_change_state_to_menu_11
 21846 ;;		_change_state_to_menu_23
 21847 ;;		_change_state_to_logs_11
 21848 ;;		_change_state_to_logs_12
 21849 ;;		_change_state_to_logs_22
 21850 ;;		_change_state_to_logs_23
 21851 ;;		_change_state_to_logs_33
 21852 ;;		_change_state_to_logs_34
 21853 ;;		_printSortTimer
 21854 ;;		_updateServoStates
 21855 ;;		i2_change_state_to_menu_start
 21856 ;;		i2_change_state_to_menu_12
 21857 ;;		i2_change_state_to_menu_22
 21858 ;;		i2_printRTC
 21859 ;; This function uses a non-reentrant model
 21860 ;;
 21861                           
 21862                           	psect	text81
 21863  001DC0                     __ptext81:
 21864                           	opt stack 0
 21865  001DC0                     i2_printf:
 21866                           	opt stack 20
 21867                           
 21868                           ;doprnt.c: 466: va_list ap;
 21869                           ;doprnt.c: 499: signed char c;
 21870                           ;doprnt.c: 501: int width;
 21871                           ;doprnt.c: 506: signed char prec;
 21872                           ;doprnt.c: 508: unsigned char flag;
 21873                           ;doprnt.c: 523: union {
 21874                           ;doprnt.c: 524: unsigned long vd;
 21875                           ;doprnt.c: 525: double integ;
 21876                           ;doprnt.c: 526: } tmpval;
 21877                           ;doprnt.c: 528: unsigned int val;
 21878                           ;doprnt.c: 529: unsigned len;
 21879                           ;doprnt.c: 530: const char * cp;
 21880                           ;doprnt.c: 533: *ap = __va_start();
 21881                           
 21882                           ;incstack = 0
 21883  001DC0  0E0F               	movlw	low (?i2_printf+2)
 21884  001DC2  6E20               	movwf	i2printf@ap,c
 21885  001DC4  0E00               	movlw	high (?i2_printf+2)
 21886  001DC6  6E21               	movwf	i2printf@ap+1,c
 21887                           
 21888                           ;doprnt.c: 536: while(c = *f++) {
 21889  001DC8  D1A4               	goto	i2l6606
 21890  001DCA                     i2l6476:
 21891                           
 21892                           ;doprnt.c: 538: if(c != '%')
 21893  001DCA  0E25               	movlw	37
 21894  001DCC  1827               	xorwf	i2printf@c,w,c
 21895  001DCE  B4D8               	btfsc	status,2,c
 21896  001DD0  D004               	goto	i2l6480
 21897                           
 21898                           ;doprnt.c: 540: {
 21899                           ;doprnt.c: 541: (putch(c) );
 21900  001DD2  5027               	movf	i2printf@c,w,c
 21901  001DD4  EC64  F029         	call	i2_putch
 21902                           
 21903                           ;doprnt.c: 542: continue;
 21904  001DD8  D19C               	goto	i2l6606
 21905  001DDA                     i2l6480:
 21906                           
 21907                           ;doprnt.c: 543: }
 21908                           ;doprnt.c: 546: width = 0;
 21909  001DDA  0E00               	movlw	0
 21910  001DDC  6E29               	movwf	i2printf@width+1,c
 21911  001DDE  0E00               	movlw	0
 21912  001DE0  6E28               	movwf	i2printf@width,c
 21913                           
 21914                           ;doprnt.c: 548: flag = 0;
 21915  001DE2  0E00               	movlw	0
 21916  001DE4  6E26               	movwf	i2printf@flag,c
 21917                           
 21918                           ;doprnt.c: 551: switch(*f) {
 21919                           
 21920                           ;doprnt.c: 550: for(;;) {
 21921  001DE6  D003               	goto	i2l6486
 21922  001DE8                     i2l6482:
 21923                           
 21924                           ;doprnt.c: 580: flag |= 0x04;
 21925  001DE8  8426               	bsf	i2printf@flag,2,c
 21926                           
 21927                           ;doprnt.c: 581: f++;
 21928  001DEA  4A0D               	infsnz	i2printf@f,f,c
 21929  001DEC  2A0E               	incf	i2printf@f+1,f,c
 21930  001DEE                     i2l6486:
 21931  001DEE  C00D  FFF6         	movff	i2printf@f,tblptrl
 21932  001DF2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21933  001DF6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21934  001DF6  6AF8               	clrf	tblptru,c
 21935  001DF8                     	endif
 21936  001DF8                     	if	0	;tblptru may be non-zero
 21937  001DF8                     	endif
 21938  001DF8  0008               	tblrd		*
 21939  001DFA  50F5               	movf	tablat,w,c
 21940                           
 21941                           ; Switch size 1, requested type "space"
 21942                           ; Number of cases is 1, Range of values is 48 to 48
 21943                           ; switch strategies available:
 21944                           ; Name         Instructions Cycles
 21945                           ; simple_byte            4     3 (average)
 21946                           ;	Chosen strategy is simple_byte
 21947  001DFC  0A30               	xorlw	48	; case 48
 21948  001DFE  B4D8               	btfsc	status,2,c
 21949  001E00  D7F3               	goto	i2l6482
 21950                           
 21951                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21952                           
 21953                           ;doprnt.c: 586: }
 21954                           
 21955                           ;doprnt.c: 585: break;
 21956  001E02  C00D  FFF6         	movff	i2printf@f,tblptrl
 21957  001E06  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21958  001E0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21959  001E0A  6AF8               	clrf	tblptru,c
 21960  001E0C                     	endif
 21961  001E0C                     	if	0	;tblptru may be non-zero
 21962  001E0C                     	endif
 21963  001E0C  0008               	tblrd		*
 21964  001E0E  50F5               	movf	tablat,w,c
 21965  001E10  EC00  F029         	call	i2_isdigit
 21966  001E14  A0D8               	btfss	status,0,c
 21967  001E16  D0A6               	goto	i2l6534
 21968                           
 21969                           ;doprnt.c: 598: width = 0;
 21970  001E18  0E00               	movlw	0
 21971  001E1A  6E29               	movwf	i2printf@width+1,c
 21972  001E1C  0E00               	movlw	0
 21973  001E1E  6E28               	movwf	i2printf@width,c
 21974  001E20                     i2l6492:
 21975                           
 21976                           ;doprnt.c: 600: width *= 10;
 21977  001E20  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 21978  001E24  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21979  001E28  0E00               	movlw	0
 21980  001E2A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21981  001E2C  0E0A               	movlw	10
 21982  001E2E  6E03               	movwf	i2___wmul@multiplicand,c
 21983  001E30  ECA6  F028         	call	i2___wmul	;wreg free
 21984  001E34  C001  F028         	movff	?i2___wmul,i2printf@width
 21985  001E38  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 21986                           
 21987                           ;doprnt.c: 601: width += *f++ - '0';
 21988  001E3C  0ED0               	movlw	208
 21989  001E3E  6E19               	movwf	??i2_printf& (0+255),c
 21990  001E40  0EFF               	movlw	255
 21991  001E42  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21992  001E44  C00D  FFF6         	movff	i2printf@f,tblptrl
 21993  001E48  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21994  001E4C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21995  001E4C  6AF8               	clrf	tblptru,c
 21996  001E4E                     	endif
 21997  001E4E                     	if	0	;tblptru may be non-zero
 21998  001E4E                     	endif
 21999  001E4E  0008               	tblrd		*
 22000  001E50  50F5               	movf	tablat,w,c
 22001  001E52  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22002  001E54  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22003  001E56  5019               	movf	??i2_printf,w,c
 22004  001E58  261B               	addwf	??i2_printf+2,f,c
 22005  001E5A  501A               	movf	??i2_printf+1,w,c
 22006  001E5C  221C               	addwfc	??i2_printf+3,f,c
 22007  001E5E  501B               	movf	??i2_printf+2,w,c
 22008  001E60  2628               	addwf	i2printf@width,f,c
 22009  001E62  501C               	movf	??i2_printf+3,w,c
 22010  001E64  2229               	addwfc	i2printf@width+1,f,c
 22011  001E66  4A0D               	infsnz	i2printf@f,f,c
 22012  001E68  2A0E               	incf	i2printf@f+1,f,c
 22013                           
 22014                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22015  001E6A  C00D  FFF6         	movff	i2printf@f,tblptrl
 22016  001E6E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22017  001E72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22018  001E72  6AF8               	clrf	tblptru,c
 22019  001E74                     	endif
 22020  001E74                     	if	0	;tblptru may be non-zero
 22021  001E74                     	endif
 22022  001E74  0008               	tblrd		*
 22023  001E76  50F5               	movf	tablat,w,c
 22024  001E78  EC00  F029         	call	i2_isdigit
 22025  001E7C  A0D8               	btfss	status,0,c
 22026  001E7E  D072               	goto	i2l6534
 22027  001E80  D7CF               	goto	i2l6492
 22028  001E82                     i2l6500:
 22029                           
 22030                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22031  001E82  C020  FFD9         	movff	i2printf@ap,fsr2l
 22032  001E86  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22033  001E8A  CFDE F01E          	movff	postinc2,i2printf@cp
 22034  001E8E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22035  001E92  0E02               	movlw	2
 22036  001E94  2620               	addwf	i2printf@ap,f,c
 22037  001E96  0E00               	movlw	0
 22038  001E98  2221               	addwfc	i2printf@ap+1,f,c
 22039                           
 22040                           ;doprnt.c: 740: if(!cp)
 22041  001E9A  501E               	movf	i2printf@cp,w,c
 22042  001E9C  101F               	iorwf	i2printf@cp+1,w,c
 22043  001E9E  A4D8               	btfss	status,2,c
 22044  001EA0  D004               	goto	i2l6508
 22045                           
 22046                           ;doprnt.c: 741: cp = "(null)";
 22047  001EA2  0EB2               	movlw	low STR_127
 22048  001EA4  6E1E               	movwf	i2printf@cp,c
 22049  001EA6  0EFF               	movlw	high STR_127
 22050  001EA8  6E1F               	movwf	i2printf@cp+1,c
 22051  001EAA                     i2l6508:
 22052                           
 22053                           ;doprnt.c: 745: len = 0;
 22054  001EAA  0E00               	movlw	0
 22055  001EAC  6E23               	movwf	i2printf@len+1,c
 22056  001EAE  0E00               	movlw	0
 22057  001EB0  6E22               	movwf	i2printf@len,c
 22058                           
 22059                           ;doprnt.c: 746: while(cp[len])
 22060  001EB2  D002               	goto	i2l6512
 22061  001EB4                     i2l6510:
 22062                           
 22063                           ;doprnt.c: 747: len++;
 22064  001EB4  4A22               	infsnz	i2printf@len,f,c
 22065  001EB6  2A23               	incf	i2printf@len+1,f,c
 22066  001EB8                     i2l6512:
 22067  001EB8  5022               	movf	i2printf@len,w,c
 22068  001EBA  241E               	addwf	i2printf@cp,w,c
 22069  001EBC  6E19               	movwf	??i2_printf& (0+255),c
 22070  001EBE  5023               	movf	i2printf@len+1,w,c
 22071  001EC0  201F               	addwfc	i2printf@cp+1,w,c
 22072  001EC2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22073  001EC4  C019  FFF6         	movff	??i2_printf,tblptrl
 22074  001EC8  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22075  001ECC  0E00               	movlw	low (__mediumconst shr (0+16))
 22076  001ECE  6EF8               	movwf	tblptru,c
 22077  001ED0  0E0F               	movlw	(high __ramtop+-1)
 22078  001ED2  64F7               	cpfsgt	tblptrh,c
 22079  001ED4  D003               	bra	i2u495_47
 22080  001ED6  0008               	tblrd		*
 22081  001ED8  50F5               	movf	tablat,w,c
 22082  001EDA  D005               	bra	i2u495_40
 22083  001EDC                     i2u495_47:
 22084  001EDC  CFF6 FFE9          	movff	tblptrl,fsr0l
 22085  001EE0  CFF7 FFEA          	movff	tblptrh,fsr0h
 22086  001EE4  50EF               	movf	indf0,w,c
 22087  001EE6                     i2u495_40:
 22088  001EE6  0900               	iorlw	0
 22089  001EE8  A4D8               	btfss	status,2,c
 22090  001EEA  D7E4               	goto	i2l6510
 22091                           
 22092                           ;doprnt.c: 757: if(width > len)
 22093  001EEC  5028               	movf	i2printf@width,w,c
 22094  001EEE  5C22               	subwf	i2printf@len,w,c
 22095  001EF0  5029               	movf	i2printf@width+1,w,c
 22096  001EF2  5823               	subwfb	i2printf@len+1,w,c
 22097  001EF4  B0D8               	btfsc	status,0,c
 22098  001EF6  D005               	goto	i2l6518
 22099                           
 22100                           ;doprnt.c: 758: width -= len;
 22101  001EF8  5022               	movf	i2printf@len,w,c
 22102  001EFA  5E28               	subwf	i2printf@width,f,c
 22103  001EFC  5023               	movf	i2printf@len+1,w,c
 22104  001EFE  5A29               	subwfb	i2printf@width+1,f,c
 22105  001F00  D008               	goto	i2l6522
 22106  001F02                     i2l6518:
 22107                           
 22108                           ;doprnt.c: 759: else
 22109                           ;doprnt.c: 760: width = 0;
 22110  001F02  0E00               	movlw	0
 22111  001F04  6E29               	movwf	i2printf@width+1,c
 22112  001F06  0E00               	movlw	0
 22113  001F08  6E28               	movwf	i2printf@width,c
 22114                           
 22115                           ;doprnt.c: 764: while(width--)
 22116  001F0A  D003               	goto	i2l6522
 22117  001F0C                     i2l6520:
 22118                           
 22119                           ;doprnt.c: 765: (putch(' ') );
 22120  001F0C  0E20               	movlw	32
 22121  001F0E  EC64  F029         	call	i2_putch
 22122  001F12                     i2l6522:
 22123  001F12  0628               	decf	i2printf@width,f,c
 22124  001F14  A0D8               	btfss	status,0,c
 22125  001F16  0629               	decf	i2printf@width+1,f,c
 22126  001F18  2828               	incf	i2printf@width,w,c
 22127  001F1A  E1F8               	bnz	i2l6520
 22128  001F1C  2829               	incf	i2printf@width+1,w,c
 22129  001F1E  B4D8               	btfsc	status,2,c
 22130  001F20  D016               	goto	i2l6528
 22131  001F22  D7F4               	goto	i2l6520
 22132  001F24                     i2l6524:
 22133                           
 22134                           ;doprnt.c: 768: (putch(*cp++) );
 22135  001F24  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22136  001F28  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22137  001F2C  0E00               	movlw	low (__mediumconst shr (0+16))
 22138  001F2E  6EF8               	movwf	tblptru,c
 22139  001F30  0E0F               	movlw	(high __ramtop+-1)
 22140  001F32  64F7               	cpfsgt	tblptrh,c
 22141  001F34  D003               	bra	i2u499_47
 22142  001F36  0008               	tblrd		*
 22143  001F38  50F5               	movf	tablat,w,c
 22144  001F3A  D005               	bra	i2u499_40
 22145  001F3C                     i2u499_47:
 22146  001F3C  CFF6 FFE9          	movff	tblptrl,fsr0l
 22147  001F40  CFF7 FFEA          	movff	tblptrh,fsr0h
 22148  001F44  50EF               	movf	indf0,w,c
 22149  001F46                     i2u499_40:
 22150  001F46  EC64  F029         	call	i2_putch
 22151  001F4A  4A1E               	infsnz	i2printf@cp,f,c
 22152  001F4C  2A1F               	incf	i2printf@cp+1,f,c
 22153  001F4E                     i2l6528:
 22154  001F4E  0622               	decf	i2printf@len,f,c
 22155  001F50  A0D8               	btfss	status,0,c
 22156  001F52  0623               	decf	i2printf@len+1,f,c
 22157  001F54  2822               	incf	i2printf@len,w,c
 22158  001F56  E1E6               	bnz	i2l6524
 22159  001F58  2823               	incf	i2printf@len+1,w,c
 22160  001F5A  B4D8               	btfsc	status,2,c
 22161  001F5C  D0DA               	goto	i2l6606
 22162  001F5E  D7E2               	goto	i2l6524
 22163  001F60                     i2l6530:
 22164                           
 22165                           ;doprnt.c: 818: flag |= 0x40;
 22166  001F60  8C26               	bsf	i2printf@flag,6,c
 22167                           
 22168                           ;doprnt.c: 822: }
 22169                           
 22170                           ;doprnt.c: 819: break;
 22171  001F62  D01B               	goto	i2l1406
 22172  001F64                     i2l6534:
 22173  001F64  C00D  FFF6         	movff	i2printf@f,tblptrl
 22174  001F68  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22175  001F6C  4A0D               	infsnz	i2printf@f,f,c
 22176  001F6E  2A0E               	incf	i2printf@f+1,f,c
 22177  001F70                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22178  001F70  6AF8               	clrf	tblptru,c
 22179  001F72                     	endif
 22180  001F72                     	if	0	;tblptru may be non-zero
 22181  001F72                     	endif
 22182  001F72  0008               	tblrd		*
 22183  001F74  CFF5 F027          	movff	tablat,i2printf@c
 22184  001F78  5027               	movf	i2printf@c,w,c
 22185                           
 22186                           ; Switch size 1, requested type "space"
 22187                           ; Number of cases is 5, Range of values is 0 to 117
 22188                           ; switch strategies available:
 22189                           ; Name         Instructions Cycles
 22190                           ; simple_byte           16     9 (average)
 22191                           ;	Chosen strategy is simple_byte
 22192  001F7A  0A00               	xorlw	0	; case 0
 22193  001F7C  B4D8               	btfsc	status,2,c
 22194  001F7E  0012               	return	
 22195  001F80  0A64               	xorlw	100	; case 100
 22196  001F82  B4D8               	btfsc	status,2,c
 22197  001F84  D00A               	goto	i2l1406
 22198  001F86  0A0D               	xorlw	13	; case 105
 22199  001F88  B4D8               	btfsc	status,2,c
 22200  001F8A  D007               	goto	i2l1406
 22201  001F8C  0A1A               	xorlw	26	; case 115
 22202  001F8E  B4D8               	btfsc	status,2,c
 22203  001F90  D778               	goto	i2l6500
 22204  001F92  0A06               	xorlw	6	; case 117
 22205  001F94  B4D8               	btfsc	status,2,c
 22206  001F96  D7E4               	goto	i2l6530
 22207  001F98  D0BC               	goto	i2l6606
 22208  001F9A                     i2l1406:
 22209                           
 22210                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22211  001F9A  BC26               	btfsc	i2printf@flag,6,c
 22212  001F9C  D015               	goto	i2l6546
 22213                           
 22214                           ;doprnt.c: 1253: {
 22215                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22216  001F9E  C020  FFD9         	movff	i2printf@ap,fsr2l
 22217  001FA2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22218  001FA6  CFDE F024          	movff	postinc2,i2printf@val
 22219  001FAA  CFDD F025          	movff	postdec2,i2printf@val+1
 22220  001FAE  0E02               	movlw	2
 22221  001FB0  2620               	addwf	i2printf@ap,f,c
 22222  001FB2  0E00               	movlw	0
 22223  001FB4  2221               	addwfc	i2printf@ap+1,f,c
 22224                           
 22225                           ;doprnt.c: 1261: if((int)val < 0) {
 22226  001FB6  AE25               	btfss	i2printf@val+1,7,c
 22227  001FB8  D013               	goto	i2l6550
 22228                           
 22229                           ;doprnt.c: 1262: flag |= 0x03;
 22230  001FBA  0E03               	movlw	3
 22231  001FBC  1226               	iorwf	i2printf@flag,f,c
 22232                           
 22233                           ;doprnt.c: 1263: val = -val;
 22234  001FBE  6C24               	negf	i2printf@val,c
 22235  001FC0  1E25               	comf	i2printf@val+1,f,c
 22236  001FC2  B0D8               	btfsc	status,0,c
 22237  001FC4  2A25               	incf	i2printf@val+1,f,c
 22238                           
 22239                           ;doprnt.c: 1264: }
 22240                           ;doprnt.c: 1266: }
 22241  001FC6  D00C               	goto	i2l6550
 22242  001FC8                     i2l6546:
 22243                           
 22244                           ;doprnt.c: 1268: else
 22245                           ;doprnt.c: 1273: {
 22246                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22247  001FC8  C020  FFD9         	movff	i2printf@ap,fsr2l
 22248  001FCC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22249  001FD0  CFDE F024          	movff	postinc2,i2printf@val
 22250  001FD4  CFDD F025          	movff	postdec2,i2printf@val+1
 22251  001FD8  0E02               	movlw	2
 22252  001FDA  2620               	addwf	i2printf@ap,f,c
 22253  001FDC  0E00               	movlw	0
 22254  001FDE  2221               	addwfc	i2printf@ap+1,f,c
 22255  001FE0                     i2l6550:
 22256                           
 22257                           ;doprnt.c: 1287: }
 22258                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22259  001FE0  0E01               	movlw	1
 22260  001FE2  6E27               	movwf	i2printf@c,c
 22261  001FE4                     i2l6552:
 22262  001FE4  0E05               	movlw	5
 22263  001FE6  1827               	xorwf	i2printf@c,w,c
 22264  001FE8  B4D8               	btfsc	status,2,c
 22265  001FEA  D015               	goto	i2l6564
 22266                           
 22267                           ;doprnt.c: 1306: if(val < dpowers[c])
 22268  001FEC  5027               	movf	i2printf@c,w,c
 22269  001FEE  0D02               	mullw	2
 22270  001FF0  0EFC               	movlw	low _dpowers
 22271  001FF2  24F3               	addwf	prodl,w,c
 22272  001FF4  6EF6               	movwf	tblptrl,c
 22273  001FF6  0EFA               	movlw	high _dpowers
 22274  001FF8  20F4               	addwfc	prodh,w,c
 22275  001FFA  6EF7               	movwf	tblptrh,c
 22276  001FFC                     	if	1	;There are 3 active tblptr bytes
 22277  001FFC  6AF8               	clrf	tblptru,c
 22278  001FFE  0E00               	movlw	low (__mediumconst shr (0+16))
 22279  002000  22F8               	addwfc	tblptru,f,c
 22280  002002                     	endif
 22281  002002  0009               	tblrd		*+
 22282  002004  50F5               	movf	tablat,w,c
 22283  002006  5C24               	subwf	i2printf@val,w,c
 22284  002008  0009               	tblrd		*+
 22285  00200A  50F5               	movf	tablat,w,c
 22286  00200C  5825               	subwfb	i2printf@val+1,w,c
 22287  00200E  A0D8               	btfss	status,0,c
 22288  002010  D002               	goto	i2l6564
 22289                           
 22290                           ;doprnt.c: 1307: break;
 22291  002012  2A27               	incf	i2printf@c,f,c
 22292  002014  D7E7               	goto	i2l6552
 22293  002016                     i2l6564:
 22294                           
 22295                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22296  002016  5028               	movf	i2printf@width,w,c
 22297  002018  1029               	iorwf	i2printf@width+1,w,c
 22298  00201A  B4D8               	btfsc	status,2,c
 22299  00201C  D009               	goto	i2l6570
 22300  00201E  C026  F019         	movff	i2printf@flag,??i2_printf
 22301  002022  0E03               	movlw	3
 22302  002024  1619               	andwf	??i2_printf,f,c
 22303  002026  B4D8               	btfsc	status,2,c
 22304  002028  D003               	goto	i2l6570
 22305                           
 22306                           ;doprnt.c: 1346: width--;
 22307  00202A  0628               	decf	i2printf@width,f,c
 22308  00202C  A0D8               	btfss	status,0,c
 22309  00202E  0629               	decf	i2printf@width+1,f,c
 22310  002030                     i2l6570:
 22311                           
 22312                           ;doprnt.c: 1381: if(width > c)
 22313  002030  0E80               	movlw	128
 22314  002032  BE27               	btfsc	i2printf@c,7,c
 22315  002034  0E7F               	movlw	127
 22316  002036  6E19               	movwf	??i2_printf& (0+255),c
 22317  002038  5028               	movf	i2printf@width,w,c
 22318  00203A  5C27               	subwf	i2printf@c,w,c
 22319  00203C  5029               	movf	i2printf@width+1,w,c
 22320  00203E  0A80               	xorlw	128
 22321  002040  5819               	subwfb	??i2_printf& (0+255),w,c
 22322  002042  B0D8               	btfsc	status,0,c
 22323  002044  D007               	goto	i2l6574
 22324                           
 22325                           ;doprnt.c: 1382: width -= c;
 22326  002046  5027               	movf	i2printf@c,w,c
 22327  002048  5E28               	subwf	i2printf@width,f,c
 22328  00204A  0E00               	movlw	0
 22329  00204C  BE27               	btfsc	i2printf@c,7,c
 22330  00204E  0EFF               	movlw	255
 22331  002050  5A29               	subwfb	i2printf@width+1,f,c
 22332  002052  D004               	goto	i2l6576
 22333  002054                     i2l6574:
 22334                           
 22335                           ;doprnt.c: 1383: else
 22336                           ;doprnt.c: 1384: width = 0;
 22337  002054  0E00               	movlw	0
 22338  002056  6E29               	movwf	i2printf@width+1,c
 22339  002058  0E00               	movlw	0
 22340  00205A  6E28               	movwf	i2printf@width,c
 22341  00205C                     i2l6576:
 22342                           
 22343                           ;doprnt.c: 1387: if(flag & 0x04) {
 22344  00205C  A426               	btfss	i2printf@flag,2,c
 22345  00205E  D014               	goto	i2l6588
 22346                           
 22347                           ;doprnt.c: 1392: if(flag & 0x03)
 22348  002060  C026  F019         	movff	i2printf@flag,??i2_printf
 22349  002064  0E03               	movlw	3
 22350  002066  1619               	andwf	??i2_printf,f,c
 22351  002068  B4D8               	btfsc	status,2,c
 22352  00206A  D003               	goto	i2l6582
 22353                           
 22354                           ;doprnt.c: 1393: (putch('-') );
 22355  00206C  0E2D               	movlw	45
 22356  00206E  EC64  F029         	call	i2_putch
 22357  002072                     i2l6582:
 22358                           
 22359                           ;doprnt.c: 1415: if(width)
 22360  002072  5028               	movf	i2printf@width,w,c
 22361  002074  1029               	iorwf	i2printf@width+1,w,c
 22362  002076  B4D8               	btfsc	status,2,c
 22363  002078  D01E               	goto	i2l6598
 22364                           
 22365                           ;doprnt.c: 1417: (putch('0') );
 22366                           
 22367                           ;doprnt.c: 1416: do
 22368  00207A  0E30               	movlw	48
 22369  00207C  EC64  F029         	call	i2_putch
 22370                           
 22371                           ;doprnt.c: 1418: while(--width);
 22372  002080  0628               	decf	i2printf@width,f,c
 22373  002082  A0D8               	btfss	status,0,c
 22374  002084  0629               	decf	i2printf@width+1,f,c
 22375  002086  D7F5               	goto	i2l6582
 22376  002088                     i2l6588:
 22377                           
 22378                           ;doprnt.c: 1422: {
 22379                           ;doprnt.c: 1424: if(width
 22380                           ;doprnt.c: 1428: )
 22381  002088  5028               	movf	i2printf@width,w,c
 22382  00208A  1029               	iorwf	i2printf@width+1,w,c
 22383  00208C  B4D8               	btfsc	status,2,c
 22384  00208E  D00A               	goto	i2l6594
 22385  002090                     i2l6590:
 22386                           
 22387                           ;doprnt.c: 1430: (putch(' ') );
 22388  002090  0E20               	movlw	32
 22389  002092  EC64  F029         	call	i2_putch
 22390                           
 22391                           ;doprnt.c: 1431: while(--width);
 22392  002096  0628               	decf	i2printf@width,f,c
 22393  002098  A0D8               	btfss	status,0,c
 22394  00209A  0629               	decf	i2printf@width+1,f,c
 22395  00209C  5028               	movf	i2printf@width,w,c
 22396  00209E  1029               	iorwf	i2printf@width+1,w,c
 22397  0020A0  A4D8               	btfss	status,2,c
 22398  0020A2  D7F6               	goto	i2l6590
 22399  0020A4                     i2l6594:
 22400                           
 22401                           ;doprnt.c: 1438: if(flag & 0x03)
 22402  0020A4  C026  F019         	movff	i2printf@flag,??i2_printf
 22403  0020A8  0E03               	movlw	3
 22404  0020AA  1619               	andwf	??i2_printf,f,c
 22405  0020AC  B4D8               	btfsc	status,2,c
 22406  0020AE  D003               	goto	i2l6598
 22407                           
 22408                           ;doprnt.c: 1439: (putch('-') );
 22409  0020B0  0E2D               	movlw	45
 22410  0020B2  EC64  F029         	call	i2_putch
 22411  0020B6                     i2l6598:
 22412                           
 22413                           ;doprnt.c: 1469: }
 22414                           ;doprnt.c: 1472: prec = c;
 22415  0020B6  C027  F01D         	movff	i2printf@c,i2printf@prec
 22416                           
 22417                           ;doprnt.c: 1474: while(prec--) {
 22418  0020BA  D027               	goto	i2l6604
 22419  0020BC                     i2l6600:
 22420                           
 22421                           ;doprnt.c: 1478: {
 22422                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22423  0020BC  501D               	movf	i2printf@prec,w,c
 22424  0020BE  0D02               	mullw	2
 22425  0020C0  0EFC               	movlw	low _dpowers
 22426  0020C2  24F3               	addwf	prodl,w,c
 22427  0020C4  6EF6               	movwf	tblptrl,c
 22428  0020C6  0EFA               	movlw	high _dpowers
 22429  0020C8  20F4               	addwfc	prodh,w,c
 22430  0020CA  6EF7               	movwf	tblptrh,c
 22431  0020CC                     	if	1	;There are 3 active tblptr bytes
 22432  0020CC  6AF8               	clrf	tblptru,c
 22433  0020CE  0E00               	movlw	low (__mediumconst shr (0+16))
 22434  0020D0  22F8               	addwfc	tblptru,f,c
 22435  0020D2                     	endif
 22436  0020D2  0009               	tblrd		*+
 22437  0020D4  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22438  0020D8  000A               	tblrd		*-
 22439  0020DA  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22440  0020DE  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22441  0020E2  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22442  0020E6  EC9F  F025         	call	i2___lwdiv	;wreg free
 22443  0020EA  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22444  0020EE  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22445  0020F2  0E00               	movlw	0
 22446  0020F4  6E04               	movwf	i2___lwmod@divisor+1,c
 22447  0020F6  0E0A               	movlw	10
 22448  0020F8  6E03               	movwf	i2___lwmod@divisor,c
 22449  0020FA  EC5E  F026         	call	i2___lwmod	;wreg free
 22450  0020FE  5001               	movf	?i2___lwmod,w,c
 22451  002100  0F30               	addlw	48
 22452  002102  6E27               	movwf	i2printf@c,c
 22453                           
 22454                           ;doprnt.c: 1523: }
 22455                           ;doprnt.c: 1524: (putch(c) );
 22456  002104  5027               	movf	i2printf@c,w,c
 22457  002106  EC64  F029         	call	i2_putch
 22458  00210A                     i2l6604:
 22459  00210A  061D               	decf	i2printf@prec,f,c
 22460  00210C  281D               	incf	i2printf@prec,w,c
 22461  00210E  A4D8               	btfss	status,2,c
 22462  002110  D7D5               	goto	i2l6600
 22463  002112                     i2l6606:
 22464  002112  C00D  FFF6         	movff	i2printf@f,tblptrl
 22465  002116  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22466  00211A  4A0D               	infsnz	i2printf@f,f,c
 22467  00211C  2A0E               	incf	i2printf@f+1,f,c
 22468  00211E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22469  00211E  6AF8               	clrf	tblptru,c
 22470  002120                     	endif
 22471  002120                     	if	0	;tblptru may be non-zero
 22472  002120                     	endif
 22473  002120  0008               	tblrd		*
 22474  002122  CFF5 F027          	movff	tablat,i2printf@c
 22475  002126  5027               	movf	i2printf@c,w,c
 22476  002128  B4D8               	btfsc	status,2,c
 22477  00212A  0012               	return	
 22478  00212C  D64E               	goto	i2l6476
 22479  00212E                     __end_ofi2_printf:
 22480                           	opt stack 0
 22481                           pclatu	equ	0xFFB
 22482                           pclath	equ	0xFFA
 22483                           tblptru	equ	0xFF8
 22484                           tblptrh	equ	0xFF7
 22485                           tblptrl	equ	0xFF6
 22486                           tablat	equ	0xFF5
 22487                           prodh	equ	0xFF4
 22488                           prodl	equ	0xFF3
 22489                           intcon	equ	0xFF2
 22490                           intcon2	equ	0xFF1
 22491                           intcon3	equ	0xFF0
 22492                           indf0	equ	0xFEF
 22493                           postinc0	equ	0xFEE
 22494                           fsr0h	equ	0xFEA
 22495                           fsr0l	equ	0xFE9
 22496                           wreg	equ	0xFE8
 22497                           postdec1	equ	0xFE5
 22498                           fsr1h	equ	0xFE2
 22499                           fsr1l	equ	0xFE1
 22500                           indf2	equ	0xFDF
 22501                           postinc2	equ	0xFDE
 22502                           postdec2	equ	0xFDD
 22503                           fsr2h	equ	0xFDA
 22504                           fsr2l	equ	0xFD9
 22505                           status	equ	0xFD8
 22506                           
 22507 ;; *************** function i2_putch *****************
 22508 ;; Defined at:
 22509 ;;		line 20 in file "lcd.c"
 22510 ;; Parameters:    Size  Location     Type
 22511 ;;  data            1    wreg     unsigned char 
 22512 ;; Auto vars:     Size  Location     Type
 22513 ;;  data            1    2[COMRAM] unsigned char 
 22514 ;; Return value:  Size  Location     Type
 22515 ;;                  1    wreg      void 
 22516 ;; Registers used:
 22517 ;;		wreg, status,2, status,0, cstack
 22518 ;; Tracked objects:
 22519 ;;		On entry : 0/0
 22520 ;;		On exit  : 0/0
 22521 ;;		Unchanged: 0/0
 22522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22526 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22527 ;;Total ram usage:        1 bytes
 22528 ;; Hardware stack levels used:    1
 22529 ;; Hardware stack levels required when called:    1
 22530 ;; This function calls:
 22531 ;;		i2_lcdNibble
 22532 ;; This function is called by:
 22533 ;;		i2_printf
 22534 ;; This function uses a non-reentrant model
 22535 ;;
 22536                           
 22537                           	psect	text82
 22538  0052C8                     __ptext82:
 22539                           	opt stack 0
 22540  0052C8                     i2_putch:
 22541                           	opt stack 20
 22542                           
 22543                           ;incstack = 0
 22544                           ;i2putch@data stored from wreg
 22545  0052C8  6E03               	movwf	i2putch@data,c
 22546                           
 22547                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22548  0052CA  848C               	bsf	3980,2,c	;volatile
 22549                           
 22550                           ;lcd.c: 22: lcdNibble(data);
 22551  0052CC  5003               	movf	i2putch@data,w,c
 22552  0052CE  EC74  F025         	call	i2_lcdNibble
 22553  0052D2  0012               	return		;funcret
 22554  0052D4                     __end_ofi2_putch:
 22555                           	opt stack 0
 22556                           pclatu	equ	0xFFB
 22557                           pclath	equ	0xFFA
 22558                           tblptru	equ	0xFF8
 22559                           tblptrh	equ	0xFF7
 22560                           tblptrl	equ	0xFF6
 22561                           tablat	equ	0xFF5
 22562                           prodh	equ	0xFF4
 22563                           prodl	equ	0xFF3
 22564                           intcon	equ	0xFF2
 22565                           intcon2	equ	0xFF1
 22566                           intcon3	equ	0xFF0
 22567                           indf0	equ	0xFEF
 22568                           postinc0	equ	0xFEE
 22569                           fsr0h	equ	0xFEA
 22570                           fsr0l	equ	0xFE9
 22571                           wreg	equ	0xFE8
 22572                           postdec1	equ	0xFE5
 22573                           fsr1h	equ	0xFE2
 22574                           fsr1l	equ	0xFE1
 22575                           indf2	equ	0xFDF
 22576                           postinc2	equ	0xFDE
 22577                           postdec2	equ	0xFDD
 22578                           fsr2h	equ	0xFDA
 22579                           fsr2l	equ	0xFD9
 22580                           status	equ	0xFD8
 22581                           
 22582 ;; *************** function i2_isdigit *****************
 22583 ;; Defined at:
 22584 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22585 ;; Parameters:    Size  Location     Type
 22586 ;;  c               1    wreg     unsigned char 
 22587 ;; Auto vars:     Size  Location     Type
 22588 ;;  c               1    2[COMRAM] unsigned char 
 22589 ;; Return value:  Size  Location     Type
 22590 ;;		None               void
 22591 ;; Registers used:
 22592 ;;		wreg, status,2, status,0
 22593 ;; Tracked objects:
 22594 ;;		On entry : 0/0
 22595 ;;		On exit  : 0/0
 22596 ;;		Unchanged: 0/0
 22597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22599 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22600 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22601 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22602 ;;Total ram usage:        3 bytes
 22603 ;; Hardware stack levels used:    1
 22604 ;; This function calls:
 22605 ;;		Nothing
 22606 ;; This function is called by:
 22607 ;;		i2_printf
 22608 ;; This function uses a non-reentrant model
 22609 ;;
 22610                           
 22611                           	psect	text83
 22612  005200                     __ptext83:
 22613                           	opt stack 0
 22614  005200                     i2_isdigit:
 22615                           	opt stack 21
 22616                           
 22617                           ;incstack = 0
 22618                           ;i2isdigit@c stored from wreg
 22619  005200  6E03               	movwf	i2isdigit@c,c
 22620  005202  0E00               	movlw	0
 22621  005204  6E02               	movwf	i2_isdigit$2058,c
 22622  005206  0E3A               	movlw	58
 22623  005208  6003               	cpfslt	i2isdigit@c,c
 22624  00520A  D005               	goto	i2l6176
 22625  00520C  0E2F               	movlw	47
 22626  00520E  6403               	cpfsgt	i2isdigit@c,c
 22627  005210  D002               	goto	i2l6176
 22628  005212  0E01               	movlw	1
 22629  005214  6E02               	movwf	i2_isdigit$2058,c
 22630  005216                     i2l6176:
 22631  005216  C002  F001         	movff	i2_isdigit$2058,??i2_isdigit
 22632  00521A  3001               	rrcf	??i2_isdigit,w,c
 22633  00521C  0012               	return	
 22634  00521E                     __end_ofi2_isdigit:
 22635                           	opt stack 0
 22636                           pclatu	equ	0xFFB
 22637                           pclath	equ	0xFFA
 22638                           tblptru	equ	0xFF8
 22639                           tblptrh	equ	0xFF7
 22640                           tblptrl	equ	0xFF6
 22641                           tablat	equ	0xFF5
 22642                           prodh	equ	0xFF4
 22643                           prodl	equ	0xFF3
 22644                           intcon	equ	0xFF2
 22645                           intcon2	equ	0xFF1
 22646                           intcon3	equ	0xFF0
 22647                           indf0	equ	0xFEF
 22648                           postinc0	equ	0xFEE
 22649                           fsr0h	equ	0xFEA
 22650                           fsr0l	equ	0xFE9
 22651                           wreg	equ	0xFE8
 22652                           postdec1	equ	0xFE5
 22653                           fsr1h	equ	0xFE2
 22654                           fsr1l	equ	0xFE1
 22655                           indf2	equ	0xFDF
 22656                           postinc2	equ	0xFDE
 22657                           postdec2	equ	0xFDD
 22658                           fsr2h	equ	0xFDA
 22659                           fsr2l	equ	0xFD9
 22660                           status	equ	0xFD8
 22661                           
 22662 ;; *************** function i2___wmul *****************
 22663 ;; Defined at:
 22664 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22665 ;; Parameters:    Size  Location     Type
 22666 ;;  multiplier      2    0[COMRAM] unsigned int 
 22667 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22668 ;; Auto vars:     Size  Location     Type
 22669 ;;  __wmul          2    4[COMRAM] unsigned int 
 22670 ;; Return value:  Size  Location     Type
 22671 ;;                  2    0[COMRAM] unsigned int 
 22672 ;; Registers used:
 22673 ;;		wreg, status,2, status,0, prodl, prodh
 22674 ;; Tracked objects:
 22675 ;;		On entry : 0/0
 22676 ;;		On exit  : 0/0
 22677 ;;		Unchanged: 0/0
 22678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22679 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22680 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22682 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22683 ;;Total ram usage:        6 bytes
 22684 ;; Hardware stack levels used:    1
 22685 ;; This function calls:
 22686 ;;		Nothing
 22687 ;; This function is called by:
 22688 ;;		_printSortTimer
 22689 ;;		_retrieveLog
 22690 ;;		i2_printf
 22691 ;; This function uses a non-reentrant model
 22692 ;;
 22693                           
 22694                           	psect	text84
 22695  00514C                     __ptext84:
 22696                           	opt stack 0
 22697  00514C                     i2___wmul:
 22698                           	opt stack 21
 22699                           
 22700                           ;incstack = 0
 22701  00514C  5001               	movf	i2___wmul@multiplier,w,c
 22702  00514E  0203               	mulwf	i2___wmul@multiplicand,c
 22703  005150  CFF3 F005          	movff	prodl,i2___wmul@product
 22704  005154  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22705  005158  5001               	movf	i2___wmul@multiplier,w,c
 22706  00515A  0204               	mulwf	i2___wmul@multiplicand+1,c
 22707  00515C  50F3               	movf	prodl,w,c
 22708  00515E  2606               	addwf	i2___wmul@product+1,f,c
 22709  005160  5002               	movf	i2___wmul@multiplier+1,w,c
 22710  005162  0203               	mulwf	i2___wmul@multiplicand,c
 22711  005164  50F3               	movf	prodl,w,c
 22712  005166  2606               	addwf	i2___wmul@product+1,f,c
 22713  005168  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22714  00516C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22715  005170  0012               	return	
 22716  005172                     __end_ofi2___wmul:
 22717                           	opt stack 0
 22718                           pclatu	equ	0xFFB
 22719                           pclath	equ	0xFFA
 22720                           tblptru	equ	0xFF8
 22721                           tblptrh	equ	0xFF7
 22722                           tblptrl	equ	0xFF6
 22723                           tablat	equ	0xFF5
 22724                           prodh	equ	0xFF4
 22725                           prodl	equ	0xFF3
 22726                           intcon	equ	0xFF2
 22727                           intcon2	equ	0xFF1
 22728                           intcon3	equ	0xFF0
 22729                           indf0	equ	0xFEF
 22730                           postinc0	equ	0xFEE
 22731                           fsr0h	equ	0xFEA
 22732                           fsr0l	equ	0xFE9
 22733                           wreg	equ	0xFE8
 22734                           postdec1	equ	0xFE5
 22735                           fsr1h	equ	0xFE2
 22736                           fsr1l	equ	0xFE1
 22737                           indf2	equ	0xFDF
 22738                           postinc2	equ	0xFDE
 22739                           postdec2	equ	0xFDD
 22740                           fsr2h	equ	0xFDA
 22741                           fsr2l	equ	0xFD9
 22742                           status	equ	0xFD8
 22743                           
 22744 ;; *************** function i2___lwmod *****************
 22745 ;; Defined at:
 22746 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22747 ;; Parameters:    Size  Location     Type
 22748 ;;  dividend        2    0[COMRAM] unsigned int 
 22749 ;;  divisor         2    2[COMRAM] unsigned int 
 22750 ;; Auto vars:     Size  Location     Type
 22751 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22752 ;; Return value:  Size  Location     Type
 22753 ;;                  2    0[COMRAM] unsigned int 
 22754 ;; Registers used:
 22755 ;;		wreg, status,2, status,0
 22756 ;; Tracked objects:
 22757 ;;		On entry : 0/0
 22758 ;;		On exit  : 0/0
 22759 ;;		Unchanged: 0/0
 22760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22761 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22764 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22765 ;;Total ram usage:        5 bytes
 22766 ;; Hardware stack levels used:    1
 22767 ;; This function calls:
 22768 ;;		Nothing
 22769 ;; This function is called by:
 22770 ;;		_printSortTimer
 22771 ;;		i2_printf
 22772 ;; This function uses a non-reentrant model
 22773 ;;
 22774                           
 22775                           	psect	text85
 22776  004CBC                     __ptext85:
 22777                           	opt stack 0
 22778  004CBC                     i2___lwmod:
 22779                           	opt stack 21
 22780                           
 22781                           ;incstack = 0
 22782  004CBC  5003               	movf	i2___lwmod@divisor,w,c
 22783  004CBE  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22784  004CC0  B4D8               	btfsc	status,2,c
 22785  004CC2  D018               	goto	i2l1863
 22786  004CC4  0E01               	movlw	1
 22787  004CC6  6E05               	movwf	i2___lwmod@counter,c
 22788  004CC8  D004               	goto	i2l6208
 22789  004CCA                     i2l6206:
 22790  004CCA  90D8               	bcf	status,0,c
 22791  004CCC  3603               	rlcf	i2___lwmod@divisor,f,c
 22792  004CCE  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22793  004CD0  2A05               	incf	i2___lwmod@counter,f,c
 22794  004CD2                     i2l6208:
 22795  004CD2  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22796  004CD4  D7FA               	goto	i2l6206
 22797  004CD6                     i2l6210:
 22798  004CD6  5003               	movf	i2___lwmod@divisor,w,c
 22799  004CD8  5C01               	subwf	i2___lwmod@dividend,w,c
 22800  004CDA  5004               	movf	i2___lwmod@divisor+1,w,c
 22801  004CDC  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22802  004CDE  A0D8               	btfss	status,0,c
 22803  004CE0  D004               	goto	i2l6214
 22804  004CE2  5003               	movf	i2___lwmod@divisor,w,c
 22805  004CE4  5E01               	subwf	i2___lwmod@dividend,f,c
 22806  004CE6  5004               	movf	i2___lwmod@divisor+1,w,c
 22807  004CE8  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22808  004CEA                     i2l6214:
 22809  004CEA  90D8               	bcf	status,0,c
 22810  004CEC  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22811  004CEE  3203               	rrcf	i2___lwmod@divisor,f,c
 22812  004CF0  2E05               	decfsz	i2___lwmod@counter,f,c
 22813  004CF2  D7F1               	goto	i2l6210
 22814  004CF4                     i2l1863:
 22815  004CF4  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22816  004CF8  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22817  004CFC  0012               	return		;funcret
 22818  004CFE                     __end_ofi2___lwmod:
 22819                           	opt stack 0
 22820                           pclatu	equ	0xFFB
 22821                           pclath	equ	0xFFA
 22822                           tblptru	equ	0xFF8
 22823                           tblptrh	equ	0xFF7
 22824                           tblptrl	equ	0xFF6
 22825                           tablat	equ	0xFF5
 22826                           prodh	equ	0xFF4
 22827                           prodl	equ	0xFF3
 22828                           intcon	equ	0xFF2
 22829                           intcon2	equ	0xFF1
 22830                           intcon3	equ	0xFF0
 22831                           indf0	equ	0xFEF
 22832                           postinc0	equ	0xFEE
 22833                           fsr0h	equ	0xFEA
 22834                           fsr0l	equ	0xFE9
 22835                           wreg	equ	0xFE8
 22836                           postdec1	equ	0xFE5
 22837                           fsr1h	equ	0xFE2
 22838                           fsr1l	equ	0xFE1
 22839                           indf2	equ	0xFDF
 22840                           postinc2	equ	0xFDE
 22841                           postdec2	equ	0xFDD
 22842                           fsr2h	equ	0xFDA
 22843                           fsr2l	equ	0xFD9
 22844                           status	equ	0xFD8
 22845                           
 22846 ;; *************** function i2___lwdiv *****************
 22847 ;; Defined at:
 22848 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22849 ;; Parameters:    Size  Location     Type
 22850 ;;  dividend        2    5[COMRAM] unsigned int 
 22851 ;;  divisor         2    7[COMRAM] unsigned int 
 22852 ;; Auto vars:     Size  Location     Type
 22853 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22854 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22855 ;; Return value:  Size  Location     Type
 22856 ;;                  2    5[COMRAM] unsigned int 
 22857 ;; Registers used:
 22858 ;;		wreg, status,2, status,0
 22859 ;; Tracked objects:
 22860 ;;		On entry : 0/0
 22861 ;;		On exit  : 0/0
 22862 ;;		Unchanged: 0/0
 22863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22864 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22865 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22867 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22868 ;;Total ram usage:        7 bytes
 22869 ;; Hardware stack levels used:    1
 22870 ;; This function calls:
 22871 ;;		Nothing
 22872 ;; This function is called by:
 22873 ;;		_printSortTimer
 22874 ;;		i2_printf
 22875 ;; This function uses a non-reentrant model
 22876 ;;
 22877                           
 22878                           	psect	text86
 22879  004B3E                     __ptext86:
 22880                           	opt stack 0
 22881  004B3E                     i2___lwdiv:
 22882                           	opt stack 21
 22883                           
 22884                           ;incstack = 0
 22885  004B3E  0E00               	movlw	0
 22886  004B40  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22887  004B42  0E00               	movlw	0
 22888  004B44  6E0A               	movwf	i2___lwdiv@quotient,c
 22889  004B46  5008               	movf	i2___lwdiv@divisor,w,c
 22890  004B48  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22891  004B4A  B4D8               	btfsc	status,2,c
 22892  004B4C  D01C               	goto	i2l1853
 22893  004B4E  0E01               	movlw	1
 22894  004B50  6E0C               	movwf	i2___lwdiv@counter,c
 22895  004B52  D004               	goto	i2l6188
 22896  004B54                     i2l6186:
 22897  004B54  90D8               	bcf	status,0,c
 22898  004B56  3608               	rlcf	i2___lwdiv@divisor,f,c
 22899  004B58  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22900  004B5A  2A0C               	incf	i2___lwdiv@counter,f,c
 22901  004B5C                     i2l6188:
 22902  004B5C  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22903  004B5E  D7FA               	goto	i2l6186
 22904  004B60                     i2l6190:
 22905  004B60  90D8               	bcf	status,0,c
 22906  004B62  360A               	rlcf	i2___lwdiv@quotient,f,c
 22907  004B64  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22908  004B66  5008               	movf	i2___lwdiv@divisor,w,c
 22909  004B68  5C06               	subwf	i2___lwdiv@dividend,w,c
 22910  004B6A  5009               	movf	i2___lwdiv@divisor+1,w,c
 22911  004B6C  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22912  004B6E  A0D8               	btfss	status,0,c
 22913  004B70  D005               	goto	i2l6198
 22914  004B72  5008               	movf	i2___lwdiv@divisor,w,c
 22915  004B74  5E06               	subwf	i2___lwdiv@dividend,f,c
 22916  004B76  5009               	movf	i2___lwdiv@divisor+1,w,c
 22917  004B78  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22918  004B7A  800A               	bsf	i2___lwdiv@quotient,0,c
 22919  004B7C                     i2l6198:
 22920  004B7C  90D8               	bcf	status,0,c
 22921  004B7E  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22922  004B80  3208               	rrcf	i2___lwdiv@divisor,f,c
 22923  004B82  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22924  004B84  D7ED               	goto	i2l6190
 22925  004B86                     i2l1853:
 22926  004B86  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22927  004B8A  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22928  004B8E  0012               	return		;funcret
 22929  004B90                     __end_ofi2___lwdiv:
 22930                           	opt stack 0
 22931                           pclatu	equ	0xFFB
 22932                           pclath	equ	0xFFA
 22933                           tblptru	equ	0xFF8
 22934                           tblptrh	equ	0xFF7
 22935                           tblptrl	equ	0xFF6
 22936                           tablat	equ	0xFF5
 22937                           prodh	equ	0xFF4
 22938                           prodl	equ	0xFF3
 22939                           intcon	equ	0xFF2
 22940                           intcon2	equ	0xFF1
 22941                           intcon3	equ	0xFF0
 22942                           indf0	equ	0xFEF
 22943                           postinc0	equ	0xFEE
 22944                           fsr0h	equ	0xFEA
 22945                           fsr0l	equ	0xFE9
 22946                           wreg	equ	0xFE8
 22947                           postdec1	equ	0xFE5
 22948                           fsr1h	equ	0xFE2
 22949                           fsr1l	equ	0xFE1
 22950                           indf2	equ	0xFDF
 22951                           postinc2	equ	0xFDE
 22952                           postdec2	equ	0xFDD
 22953                           fsr2h	equ	0xFDA
 22954                           fsr2l	equ	0xFD9
 22955                           status	equ	0xFD8
 22956                           
 22957 ;; *************** function i2_lcdInst *****************
 22958 ;; Defined at:
 22959 ;;		line 15 in file "lcd.c"
 22960 ;; Parameters:    Size  Location     Type
 22961 ;;  data            1    wreg     unsigned char 
 22962 ;; Auto vars:     Size  Location     Type
 22963 ;;  data            1    2[COMRAM] unsigned char 
 22964 ;; Return value:  Size  Location     Type
 22965 ;;                  1    wreg      void 
 22966 ;; Registers used:
 22967 ;;		wreg, status,2, status,0, cstack
 22968 ;; Tracked objects:
 22969 ;;		On entry : 0/0
 22970 ;;		On exit  : 0/0
 22971 ;;		Unchanged: 0/0
 22972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22976 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22977 ;;Total ram usage:        1 bytes
 22978 ;; Hardware stack levels used:    1
 22979 ;; Hardware stack levels required when called:    1
 22980 ;; This function calls:
 22981 ;;		i2_lcdNibble
 22982 ;; This function is called by:
 22983 ;;		_change_state_to_menu_11
 22984 ;;		_change_state_to_menu_23
 22985 ;;		_change_state_to_logs_11
 22986 ;;		_change_state_to_logs_12
 22987 ;;		_change_state_to_logs_22
 22988 ;;		_change_state_to_logs_23
 22989 ;;		_change_state_to_logs_33
 22990 ;;		_change_state_to_logs_34
 22991 ;;		_printSortTimer
 22992 ;;		_updateServoStates
 22993 ;;		i2_change_state_to_menu_start
 22994 ;;		i2_change_state_to_menu_12
 22995 ;;		i2_change_state_to_menu_22
 22996 ;;		i2_printRTC
 22997 ;; This function uses a non-reentrant model
 22998 ;;
 22999                           
 23000                           	psect	text87
 23001  0052D4                     __ptext87:
 23002                           	opt stack 0
 23003  0052D4                     i2_lcdInst:
 23004                           	opt stack 21
 23005                           
 23006                           ;incstack = 0
 23007                           ;i2lcdInst@data stored from wreg
 23008  0052D4  6E03               	movwf	i2lcdInst@data,c
 23009                           
 23010                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23011  0052D6  948C               	bcf	3980,2,c	;volatile
 23012                           
 23013                           ;lcd.c: 17: lcdNibble(data);
 23014  0052D8  5003               	movf	i2lcdInst@data,w,c
 23015  0052DA  EC74  F025         	call	i2_lcdNibble
 23016  0052DE  0012               	return		;funcret
 23017  0052E0                     __end_ofi2_lcdInst:
 23018                           	opt stack 0
 23019                           pclatu	equ	0xFFB
 23020                           pclath	equ	0xFFA
 23021                           tblptru	equ	0xFF8
 23022                           tblptrh	equ	0xFF7
 23023                           tblptrl	equ	0xFF6
 23024                           tablat	equ	0xFF5
 23025                           prodh	equ	0xFF4
 23026                           prodl	equ	0xFF3
 23027                           intcon	equ	0xFF2
 23028                           intcon2	equ	0xFF1
 23029                           intcon3	equ	0xFF0
 23030                           indf0	equ	0xFEF
 23031                           postinc0	equ	0xFEE
 23032                           fsr0h	equ	0xFEA
 23033                           fsr0l	equ	0xFE9
 23034                           wreg	equ	0xFE8
 23035                           postdec1	equ	0xFE5
 23036                           fsr1h	equ	0xFE2
 23037                           fsr1l	equ	0xFE1
 23038                           indf2	equ	0xFDF
 23039                           postinc2	equ	0xFDE
 23040                           postdec2	equ	0xFDD
 23041                           fsr2h	equ	0xFDA
 23042                           fsr2l	equ	0xFD9
 23043                           status	equ	0xFD8
 23044                           
 23045 ;; *************** function i2_lcdNibble *****************
 23046 ;; Defined at:
 23047 ;;		line 25 in file "lcd.c"
 23048 ;; Parameters:    Size  Location     Type
 23049 ;;  data            1    wreg     unsigned char 
 23050 ;; Auto vars:     Size  Location     Type
 23051 ;;  data            1    1[COMRAM] unsigned char 
 23052 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23053 ;; Return value:  Size  Location     Type
 23054 ;;                  1    wreg      void 
 23055 ;; Registers used:
 23056 ;;		wreg, status,2, status,0
 23057 ;; Tracked objects:
 23058 ;;		On entry : 0/0
 23059 ;;		On exit  : 0/0
 23060 ;;		Unchanged: 0/0
 23061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23066 ;;Total ram usage:        2 bytes
 23067 ;; Hardware stack levels used:    1
 23068 ;; This function calls:
 23069 ;;		Nothing
 23070 ;; This function is called by:
 23071 ;;		i2_lcdInst
 23072 ;;		i2_putch
 23073 ;; This function uses a non-reentrant model
 23074 ;;
 23075                           
 23076                           	psect	text88
 23077  004AE8                     __ptext88:
 23078                           	opt stack 0
 23079  004AE8                     i2_lcdNibble:
 23080                           	opt stack 20
 23081                           
 23082                           ;incstack = 0
 23083                           ;i2lcdNibble@data stored from wreg
 23084  004AE8  6E02               	movwf	i2lcdNibble@data,c
 23085                           
 23086                           ;lcd.c: 27: char temp = data & 0xF0;
 23087  004AEA  5002               	movf	i2lcdNibble@data,w,c
 23088  004AEC  0BF0               	andlw	240
 23089  004AEE  6E01               	movwf	i2lcdNibble@temp,c
 23090                           
 23091                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23092  004AF0  508C               	movf	3980,w,c	;volatile
 23093  004AF2  0B0F               	andlw	15
 23094  004AF4  6E8C               	movwf	3980,c	;volatile
 23095                           
 23096                           ;lcd.c: 29: LATD = temp | LATD;
 23097  004AF6  5001               	movf	i2lcdNibble@temp,w,c
 23098  004AF8  108C               	iorwf	3980,w,c	;volatile
 23099  004AFA  6E8C               	movwf	3980,c	;volatile
 23100                           
 23101                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23102  004AFC  868C               	bsf	3980,3,c	;volatile
 23103                           
 23104                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23105  004AFE  0E42               	movlw	66
 23106  004B00                     i2u1006_47:
 23107  004B00  2EE8               	decfsz	wreg,f,c
 23108  004B02  D7FE               	bra	i2u1006_47
 23109  004B04  D000               	nop2	
 23110                           
 23111                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23112  004B06  968C               	bcf	3980,3,c	;volatile
 23113                           
 23114                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23115  004B08  0E42               	movlw	66
 23116  004B0A                     i2u1007_47:
 23117  004B0A  2EE8               	decfsz	wreg,f,c
 23118  004B0C  D7FE               	bra	i2u1007_47
 23119  004B0E  D000               	nop2	
 23120                           
 23121                           ;lcd.c: 36: data = data << 4;
 23122  004B10  3802               	swapf	i2lcdNibble@data,w,c
 23123  004B12  0BF0               	andlw	240
 23124  004B14  6E02               	movwf	i2lcdNibble@data,c
 23125                           
 23126                           ;lcd.c: 38: temp = data & 0xF0;
 23127  004B16  5002               	movf	i2lcdNibble@data,w,c
 23128  004B18  0BF0               	andlw	240
 23129  004B1A  6E01               	movwf	i2lcdNibble@temp,c
 23130                           
 23131                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23132  004B1C  508C               	movf	3980,w,c	;volatile
 23133  004B1E  0B0F               	andlw	15
 23134  004B20  6E8C               	movwf	3980,c	;volatile
 23135                           
 23136                           ;lcd.c: 40: LATD = temp | LATD;
 23137  004B22  5001               	movf	i2lcdNibble@temp,w,c
 23138  004B24  108C               	iorwf	3980,w,c	;volatile
 23139  004B26  6E8C               	movwf	3980,c	;volatile
 23140                           
 23141                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23142  004B28  868C               	bsf	3980,3,c	;volatile
 23143                           
 23144                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23145  004B2A  0E42               	movlw	66
 23146  004B2C                     i2u1008_47:
 23147  004B2C  2EE8               	decfsz	wreg,f,c
 23148  004B2E  D7FE               	bra	i2u1008_47
 23149  004B30  D000               	nop2	
 23150                           
 23151                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23152  004B32  968C               	bcf	3980,3,c	;volatile
 23153                           
 23154                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23155  004B34  0E42               	movlw	66
 23156  004B36                     i2u1009_47:
 23157  004B36  2EE8               	decfsz	wreg,f,c
 23158  004B38  D7FE               	bra	i2u1009_47
 23159  004B3A  D000               	nop2	
 23160  004B3C  0012               	return		;funcret
 23161  004B3E                     __end_ofi2_lcdNibble:
 23162                           	opt stack 0
 23163                           pclatu	equ	0xFFB
 23164                           pclath	equ	0xFFA
 23165                           tblptru	equ	0xFF8
 23166                           tblptrh	equ	0xFF7
 23167                           tblptrl	equ	0xFF6
 23168                           tablat	equ	0xFF5
 23169                           prodh	equ	0xFF4
 23170                           prodl	equ	0xFF3
 23171                           intcon	equ	0xFF2
 23172                           intcon2	equ	0xFF1
 23173                           intcon3	equ	0xFF0
 23174                           indf0	equ	0xFEF
 23175                           postinc0	equ	0xFEE
 23176                           fsr0h	equ	0xFEA
 23177                           fsr0l	equ	0xFE9
 23178                           wreg	equ	0xFE8
 23179                           postdec1	equ	0xFE5
 23180                           fsr1h	equ	0xFE2
 23181                           fsr1l	equ	0xFE1
 23182                           indf2	equ	0xFDF
 23183                           postinc2	equ	0xFDE
 23184                           postdec2	equ	0xFDD
 23185                           fsr2h	equ	0xFDA
 23186                           fsr2l	equ	0xFD9
 23187                           status	equ	0xFD8
 23188                           
 23189 ;; *************** function i2_getRTC *****************
 23190 ;; Defined at:
 23191 ;;		line 44 in file "RTC.c"
 23192 ;; Parameters:    Size  Location     Type
 23193 ;;		None
 23194 ;; Auto vars:     Size  Location     Type
 23195 ;;  getRTC          2    3[COMRAM] int 
 23196 ;; Return value:  Size  Location     Type
 23197 ;;                  1    wreg      void 
 23198 ;; Registers used:
 23199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23200 ;; Tracked objects:
 23201 ;;		On entry : 0/0
 23202 ;;		On exit  : 0/0
 23203 ;;		Unchanged: 0/0
 23204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23209 ;;Total ram usage:        2 bytes
 23210 ;; Hardware stack levels used:    1
 23211 ;; Hardware stack levels required when called:    2
 23212 ;; This function calls:
 23213 ;;		i2_I2C_Master_Read
 23214 ;;		i2_I2C_Master_Start
 23215 ;;		i2_I2C_Master_Stop
 23216 ;;		i2_I2C_Master_Write
 23217 ;; This function is called by:
 23218 ;;		_printSortTimer
 23219 ;;		i2_printRTC
 23220 ;; This function uses a non-reentrant model
 23221 ;;
 23222                           
 23223                           	psect	text89
 23224  0047CA                     __ptext89:
 23225                           	opt stack 0
 23226  0047CA                     i2_getRTC:
 23227                           	opt stack 18
 23228                           
 23229                           ;RTC.c: 48: I2C_Master_Start();
 23230                           
 23231                           ;incstack = 0
 23232  0047CA  EC8A  F029         	call	i2_I2C_Master_Start	;wreg free
 23233                           
 23234                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23235  0047CE  0E00               	movlw	0
 23236  0047D0  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23237  0047D2  0ED0               	movlw	208
 23238  0047D4  6E02               	movwf	i2I2C_Master_Write@d,c
 23239  0047D6  EC75  F029         	call	i2_I2C_Master_Write	;wreg free
 23240                           
 23241                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23242  0047DA  0E00               	movlw	0
 23243  0047DC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23244  0047DE  0E00               	movlw	0
 23245  0047E0  6E02               	movwf	i2I2C_Master_Write@d,c
 23246  0047E2  EC75  F029         	call	i2_I2C_Master_Write	;wreg free
 23247                           
 23248                           ;RTC.c: 51: I2C_Master_Stop();
 23249  0047E6  EC86  F029         	call	i2_I2C_Master_Stop	;wreg free
 23250                           
 23251                           ;RTC.c: 54: I2C_Master_Start();
 23252  0047EA  EC8A  F029         	call	i2_I2C_Master_Start	;wreg free
 23253                           
 23254                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23255  0047EE  0E00               	movlw	0
 23256  0047F0  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23257  0047F2  0ED1               	movlw	209
 23258  0047F4  6E02               	movwf	i2I2C_Master_Write@d,c
 23259  0047F6  EC75  F029         	call	i2_I2C_Master_Write	;wreg free
 23260                           
 23261                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23262  0047FA  0E00               	movlw	0
 23263  0047FC  6E05               	movwf	i2getRTC@i+1,c
 23264  0047FE  0E00               	movlw	0
 23265  004800  6E04               	movwf	i2getRTC@i,c
 23266  004802                     i2l6448:
 23267  004802  BE05               	btfsc	i2getRTC@i+1,7,c
 23268  004804  D006               	goto	i2l6452
 23269  004806  5005               	movf	i2getRTC@i+1,w,c
 23270  004808  E111               	bnz	i2l6458
 23271  00480A  0E06               	movlw	6
 23272  00480C  5C04               	subwf	i2getRTC@i,w,c
 23273  00480E  B0D8               	btfsc	status,0,c
 23274  004810  D00D               	goto	i2l6458
 23275  004812                     i2l6452:
 23276                           
 23277                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23278  004812  0E1C               	movlw	low _time
 23279  004814  2404               	addwf	i2getRTC@i,w,c
 23280  004816  6ED9               	movwf	fsr2l,c
 23281  004818  0E01               	movlw	high _time
 23282  00481A  2005               	addwfc	i2getRTC@i+1,w,c
 23283  00481C  6EDA               	movwf	fsr2h,c
 23284  00481E  0E01               	movlw	1
 23285  004820  ECB9  F028         	call	i2_I2C_Master_Read
 23286  004824  6EDF               	movwf	indf2,c
 23287  004826  4A04               	infsnz	i2getRTC@i,f,c
 23288  004828  2A05               	incf	i2getRTC@i+1,f,c
 23289  00482A  D7EB               	goto	i2l6448
 23290  00482C                     i2l6458:
 23291                           
 23292                           ;RTC.c: 58: }
 23293                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23294  00482C  0E00               	movlw	0
 23295  00482E  ECB9  F028         	call	i2_I2C_Master_Read
 23296  004832  0101               	movlb	1	; () banked
 23297  004834  6F22               	movwf	(_time+6)& (0+255),b
 23298                           
 23299                           ;RTC.c: 60: I2C_Master_Stop();
 23300  004836  EC86  F029         	call	i2_I2C_Master_Stop	;wreg free
 23301  00483A  0012               	return		;funcret
 23302  00483C                     __end_ofi2_getRTC:
 23303                           	opt stack 0
 23304                           pclatu	equ	0xFFB
 23305                           pclath	equ	0xFFA
 23306                           tblptru	equ	0xFF8
 23307                           tblptrh	equ	0xFF7
 23308                           tblptrl	equ	0xFF6
 23309                           tablat	equ	0xFF5
 23310                           prodh	equ	0xFF4
 23311                           prodl	equ	0xFF3
 23312                           intcon	equ	0xFF2
 23313                           intcon2	equ	0xFF1
 23314                           intcon3	equ	0xFF0
 23315                           indf0	equ	0xFEF
 23316                           postinc0	equ	0xFEE
 23317                           fsr0h	equ	0xFEA
 23318                           fsr0l	equ	0xFE9
 23319                           wreg	equ	0xFE8
 23320                           postdec1	equ	0xFE5
 23321                           fsr1h	equ	0xFE2
 23322                           fsr1l	equ	0xFE1
 23323                           indf2	equ	0xFDF
 23324                           postinc2	equ	0xFDE
 23325                           postdec2	equ	0xFDD
 23326                           fsr2h	equ	0xFDA
 23327                           fsr2l	equ	0xFD9
 23328                           status	equ	0xFD8
 23329                           
 23330 ;; *************** function i2_I2C_Master_Write *****************
 23331 ;; Defined at:
 23332 ;;		line 49 in file "I2C.c"
 23333 ;; Parameters:    Size  Location     Type
 23334 ;;  d               2    1[COMRAM] unsigned int 
 23335 ;; Auto vars:     Size  Location     Type
 23336 ;;		None
 23337 ;; Return value:  Size  Location     Type
 23338 ;;                  1    wreg      void 
 23339 ;; Registers used:
 23340 ;;		wreg, status,2, status,0, cstack
 23341 ;; Tracked objects:
 23342 ;;		On entry : 0/0
 23343 ;;		On exit  : 0/0
 23344 ;;		Unchanged: 0/0
 23345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23349 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23350 ;;Total ram usage:        2 bytes
 23351 ;; Hardware stack levels used:    1
 23352 ;; Hardware stack levels required when called:    1
 23353 ;; This function calls:
 23354 ;;		i2_I2C_Master_Wait
 23355 ;; This function is called by:
 23356 ;;		i2_getRTC
 23357 ;; This function uses a non-reentrant model
 23358 ;;
 23359                           
 23360                           	psect	text90
 23361  0052EA                     __ptext90:
 23362                           	opt stack 0
 23363  0052EA                     i2_I2C_Master_Write:
 23364                           	opt stack 18
 23365                           
 23366                           ;I2C.c: 51: I2C_Master_Wait();
 23367                           
 23368                           ;incstack = 0
 23369  0052EA  EC4B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23370                           
 23371                           ;I2C.c: 52: SSPBUF = d;
 23372  0052EE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23373  0052F2  0012               	return		;funcret
 23374  0052F4                     __end_ofi2_I2C_Master_Write:
 23375                           	opt stack 0
 23376                           pclatu	equ	0xFFB
 23377                           pclath	equ	0xFFA
 23378                           tblptru	equ	0xFF8
 23379                           tblptrh	equ	0xFF7
 23380                           tblptrl	equ	0xFF6
 23381                           tablat	equ	0xFF5
 23382                           prodh	equ	0xFF4
 23383                           prodl	equ	0xFF3
 23384                           intcon	equ	0xFF2
 23385                           intcon2	equ	0xFF1
 23386                           intcon3	equ	0xFF0
 23387                           indf0	equ	0xFEF
 23388                           postinc0	equ	0xFEE
 23389                           fsr0h	equ	0xFEA
 23390                           fsr0l	equ	0xFE9
 23391                           wreg	equ	0xFE8
 23392                           postdec1	equ	0xFE5
 23393                           fsr1h	equ	0xFE2
 23394                           fsr1l	equ	0xFE1
 23395                           indf2	equ	0xFDF
 23396                           postinc2	equ	0xFDE
 23397                           postdec2	equ	0xFDD
 23398                           fsr2h	equ	0xFDA
 23399                           fsr2l	equ	0xFD9
 23400                           status	equ	0xFD8
 23401                           
 23402 ;; *************** function i2_I2C_Master_Stop *****************
 23403 ;; Defined at:
 23404 ;;		line 43 in file "I2C.c"
 23405 ;; Parameters:    Size  Location     Type
 23406 ;;		None
 23407 ;; Auto vars:     Size  Location     Type
 23408 ;;		None
 23409 ;; Return value:  Size  Location     Type
 23410 ;;                  1    wreg      void 
 23411 ;; Registers used:
 23412 ;;		wreg, status,2, status,0, cstack
 23413 ;; Tracked objects:
 23414 ;;		On entry : 0/0
 23415 ;;		On exit  : 0/0
 23416 ;;		Unchanged: 0/0
 23417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23422 ;;Total ram usage:        0 bytes
 23423 ;; Hardware stack levels used:    1
 23424 ;; Hardware stack levels required when called:    1
 23425 ;; This function calls:
 23426 ;;		i2_I2C_Master_Wait
 23427 ;; This function is called by:
 23428 ;;		i2_getRTC
 23429 ;; This function uses a non-reentrant model
 23430 ;;
 23431                           
 23432                           	psect	text91
 23433  00530C                     __ptext91:
 23434                           	opt stack 0
 23435  00530C                     i2_I2C_Master_Stop:
 23436                           	opt stack 18
 23437                           
 23438                           ;I2C.c: 45: I2C_Master_Wait();
 23439                           
 23440                           ;incstack = 0
 23441  00530C  EC4B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23442                           
 23443                           ;I2C.c: 46: PEN = 1;
 23444  005310  84C5               	bsf	4037,2,c	;volatile
 23445  005312  0012               	return		;funcret
 23446  005314                     __end_ofi2_I2C_Master_Stop:
 23447                           	opt stack 0
 23448                           pclatu	equ	0xFFB
 23449                           pclath	equ	0xFFA
 23450                           tblptru	equ	0xFF8
 23451                           tblptrh	equ	0xFF7
 23452                           tblptrl	equ	0xFF6
 23453                           tablat	equ	0xFF5
 23454                           prodh	equ	0xFF4
 23455                           prodl	equ	0xFF3
 23456                           intcon	equ	0xFF2
 23457                           intcon2	equ	0xFF1
 23458                           intcon3	equ	0xFF0
 23459                           indf0	equ	0xFEF
 23460                           postinc0	equ	0xFEE
 23461                           fsr0h	equ	0xFEA
 23462                           fsr0l	equ	0xFE9
 23463                           wreg	equ	0xFE8
 23464                           postdec1	equ	0xFE5
 23465                           fsr1h	equ	0xFE2
 23466                           fsr1l	equ	0xFE1
 23467                           indf2	equ	0xFDF
 23468                           postinc2	equ	0xFDE
 23469                           postdec2	equ	0xFDD
 23470                           fsr2h	equ	0xFDA
 23471                           fsr2l	equ	0xFD9
 23472                           status	equ	0xFD8
 23473                           
 23474 ;; *************** function i2_I2C_Master_Start *****************
 23475 ;; Defined at:
 23476 ;;		line 31 in file "I2C.c"
 23477 ;; Parameters:    Size  Location     Type
 23478 ;;		None
 23479 ;; Auto vars:     Size  Location     Type
 23480 ;;		None
 23481 ;; Return value:  Size  Location     Type
 23482 ;;                  1    wreg      void 
 23483 ;; Registers used:
 23484 ;;		wreg, status,2, status,0, cstack
 23485 ;; Tracked objects:
 23486 ;;		On entry : 0/0
 23487 ;;		On exit  : 0/0
 23488 ;;		Unchanged: 0/0
 23489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23494 ;;Total ram usage:        0 bytes
 23495 ;; Hardware stack levels used:    1
 23496 ;; Hardware stack levels required when called:    1
 23497 ;; This function calls:
 23498 ;;		i2_I2C_Master_Wait
 23499 ;; This function is called by:
 23500 ;;		i2_getRTC
 23501 ;; This function uses a non-reentrant model
 23502 ;;
 23503                           
 23504                           	psect	text92
 23505  005314                     __ptext92:
 23506                           	opt stack 0
 23507  005314                     i2_I2C_Master_Start:
 23508                           	opt stack 18
 23509                           
 23510                           ;I2C.c: 33: I2C_Master_Wait();
 23511                           
 23512                           ;incstack = 0
 23513  005314  EC4B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23514                           
 23515                           ;I2C.c: 34: SEN = 1;
 23516  005318  80C5               	bsf	4037,0,c	;volatile
 23517  00531A  0012               	return		;funcret
 23518  00531C                     __end_ofi2_I2C_Master_Start:
 23519                           	opt stack 0
 23520                           pclatu	equ	0xFFB
 23521                           pclath	equ	0xFFA
 23522                           tblptru	equ	0xFF8
 23523                           tblptrh	equ	0xFF7
 23524                           tblptrl	equ	0xFF6
 23525                           tablat	equ	0xFF5
 23526                           prodh	equ	0xFF4
 23527                           prodl	equ	0xFF3
 23528                           intcon	equ	0xFF2
 23529                           intcon2	equ	0xFF1
 23530                           intcon3	equ	0xFF0
 23531                           indf0	equ	0xFEF
 23532                           postinc0	equ	0xFEE
 23533                           fsr0h	equ	0xFEA
 23534                           fsr0l	equ	0xFE9
 23535                           wreg	equ	0xFE8
 23536                           postdec1	equ	0xFE5
 23537                           fsr1h	equ	0xFE2
 23538                           fsr1l	equ	0xFE1
 23539                           indf2	equ	0xFDF
 23540                           postinc2	equ	0xFDE
 23541                           postdec2	equ	0xFDD
 23542                           fsr2h	equ	0xFDA
 23543                           fsr2l	equ	0xFD9
 23544                           status	equ	0xFD8
 23545                           
 23546 ;; *************** function i2_I2C_Master_Read *****************
 23547 ;; Defined at:
 23548 ;;		line 55 in file "I2C.c"
 23549 ;; Parameters:    Size  Location     Type
 23550 ;;  a               1    wreg     unsigned char 
 23551 ;; Auto vars:     Size  Location     Type
 23552 ;;  a               1    1[COMRAM] unsigned char 
 23553 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23554 ;; Return value:  Size  Location     Type
 23555 ;;                  1    wreg      unsigned char 
 23556 ;; Registers used:
 23557 ;;		wreg, status,2, status,0, cstack
 23558 ;; Tracked objects:
 23559 ;;		On entry : 0/0
 23560 ;;		On exit  : 0/0
 23561 ;;		Unchanged: 0/0
 23562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23566 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23567 ;;Total ram usage:        2 bytes
 23568 ;; Hardware stack levels used:    1
 23569 ;; Hardware stack levels required when called:    1
 23570 ;; This function calls:
 23571 ;;		i2_I2C_Master_Wait
 23572 ;; This function is called by:
 23573 ;;		i2_getRTC
 23574 ;; This function uses a non-reentrant model
 23575 ;;
 23576                           
 23577                           	psect	text93
 23578  005172                     __ptext93:
 23579                           	opt stack 0
 23580  005172                     i2_I2C_Master_Read:
 23581                           	opt stack 18
 23582                           
 23583                           ;incstack = 0
 23584                           ;i2I2C_Master_Read@a stored from wreg
 23585  005172  6E02               	movwf	i2I2C_Master_Read@a,c
 23586                           
 23587                           ;I2C.c: 57: unsigned char temp;
 23588                           ;I2C.c: 58: I2C_Master_Wait();
 23589  005174  EC4B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23590                           
 23591                           ;I2C.c: 59: RCEN = 1;
 23592  005178  86C5               	bsf	4037,3,c	;volatile
 23593                           
 23594                           ;I2C.c: 60: I2C_Master_Wait();
 23595  00517A  EC4B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23596                           
 23597                           ;I2C.c: 61: temp = SSPBUF;
 23598  00517E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23599                           
 23600                           ;I2C.c: 62: I2C_Master_Wait();
 23601  005182  EC4B  F029         	call	i2_I2C_Master_Wait	;wreg free
 23602                           
 23603                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23604  005186  5002               	movf	i2I2C_Master_Read@a,w,c
 23605  005188  A4D8               	btfss	status,2,c
 23606  00518A  D002               	goto	i2u440_40
 23607  00518C  8AC5               	bsf	4037,5,c	;volatile
 23608  00518E  D001               	goto	i2l6152
 23609  005190                     i2u440_40:
 23610  005190  9AC5               	bcf	4037,5,c	;volatile
 23611  005192                     i2l6152:
 23612                           
 23613                           ;I2C.c: 64: ACKEN = 1;
 23614  005192  88C5               	bsf	4037,4,c	;volatile
 23615                           
 23616                           ;I2C.c: 65: return temp;
 23617  005194  5003               	movf	i2I2C_Master_Read@temp,w,c
 23618  005196  0012               	return	
 23619  005198                     __end_ofi2_I2C_Master_Read:
 23620                           	opt stack 0
 23621                           pclatu	equ	0xFFB
 23622                           pclath	equ	0xFFA
 23623                           tblptru	equ	0xFF8
 23624                           tblptrh	equ	0xFF7
 23625                           tblptrl	equ	0xFF6
 23626                           tablat	equ	0xFF5
 23627                           prodh	equ	0xFF4
 23628                           prodl	equ	0xFF3
 23629                           intcon	equ	0xFF2
 23630                           intcon2	equ	0xFF1
 23631                           intcon3	equ	0xFF0
 23632                           indf0	equ	0xFEF
 23633                           postinc0	equ	0xFEE
 23634                           fsr0h	equ	0xFEA
 23635                           fsr0l	equ	0xFE9
 23636                           wreg	equ	0xFE8
 23637                           postdec1	equ	0xFE5
 23638                           fsr1h	equ	0xFE2
 23639                           fsr1l	equ	0xFE1
 23640                           indf2	equ	0xFDF
 23641                           postinc2	equ	0xFDE
 23642                           postdec2	equ	0xFDD
 23643                           fsr2h	equ	0xFDA
 23644                           fsr2l	equ	0xFD9
 23645                           status	equ	0xFD8
 23646                           
 23647 ;; *************** function i2_I2C_Master_Wait *****************
 23648 ;; Defined at:
 23649 ;;		line 26 in file "I2C.c"
 23650 ;; Parameters:    Size  Location     Type
 23651 ;;		None
 23652 ;; Auto vars:     Size  Location     Type
 23653 ;;		None
 23654 ;; Return value:  Size  Location     Type
 23655 ;;                  1    wreg      void 
 23656 ;; Registers used:
 23657 ;;		wreg, status,2, status,0
 23658 ;; Tracked objects:
 23659 ;;		On entry : 0/0
 23660 ;;		On exit  : 0/0
 23661 ;;		Unchanged: 0/0
 23662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23665 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23666 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23667 ;;Total ram usage:        1 bytes
 23668 ;; Hardware stack levels used:    1
 23669 ;; This function calls:
 23670 ;;		Nothing
 23671 ;; This function is called by:
 23672 ;;		i2_I2C_Master_Start
 23673 ;;		i2_I2C_Master_Stop
 23674 ;;		i2_I2C_Master_Write
 23675 ;;		i2_I2C_Master_Read
 23676 ;; This function uses a non-reentrant model
 23677 ;;
 23678                           
 23679                           	psect	text94
 23680  005296                     __ptext94:
 23681                           	opt stack 0
 23682  005296                     i2_I2C_Master_Wait:
 23683                           	opt stack 18
 23684  005296                     i2l66:
 23685  005296  B4C7               	btfsc	4039,2,c	;volatile
 23686  005298  D7FE               	goto	i2l66
 23687  00529A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23688  00529E  0E1F               	movlw	31
 23689  0052A0  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23690  0052A2  B4D8               	btfsc	status,2,c
 23691  0052A4  0012               	return	
 23692  0052A6  D7F7               	goto	i2l66
 23693  0052A8                     __end_ofi2_I2C_Master_Wait:
 23694                           	opt stack 0
 23695                           pclatu	equ	0xFFB
 23696                           pclath	equ	0xFFA
 23697                           tblptru	equ	0xFF8
 23698                           tblptrh	equ	0xFF7
 23699                           tblptrl	equ	0xFF6
 23700                           tablat	equ	0xFF5
 23701                           prodh	equ	0xFF4
 23702                           prodl	equ	0xFF3
 23703                           intcon	equ	0xFF2
 23704                           intcon2	equ	0xFF1
 23705                           intcon3	equ	0xFF0
 23706                           indf0	equ	0xFEF
 23707                           postinc0	equ	0xFEE
 23708                           fsr0h	equ	0xFEA
 23709                           fsr0l	equ	0xFE9
 23710                           wreg	equ	0xFE8
 23711                           postdec1	equ	0xFE5
 23712                           fsr1h	equ	0xFE2
 23713                           fsr1l	equ	0xFE1
 23714                           indf2	equ	0xFDF
 23715                           postinc2	equ	0xFDE
 23716                           postdec2	equ	0xFDD
 23717                           fsr2h	equ	0xFDA
 23718                           fsr2l	equ	0xFD9
 23719                           status	equ	0xFD8
 23720                           
 23721 ;; *************** function i2_delay_ms *****************
 23722 ;; Defined at:
 23723 ;;		line 577 in file "sort.c"
 23724 ;; Parameters:    Size  Location     Type
 23725 ;;  milliseconds    1    wreg     unsigned char 
 23726 ;; Auto vars:     Size  Location     Type
 23727 ;;  milliseconds    1    1[COMRAM] unsigned char 
 23728 ;; Return value:  Size  Location     Type
 23729 ;;                  1    wreg      void 
 23730 ;; Registers used:
 23731 ;;		wreg, status,2, status,0, cstack
 23732 ;; Tracked objects:
 23733 ;;		On entry : 0/0
 23734 ;;		On exit  : 0/0
 23735 ;;		Unchanged: 0/0
 23736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23739 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23741 ;;Total ram usage:        2 bytes
 23742 ;; Hardware stack levels used:    1
 23743 ;; This function calls:
 23744 ;;		Nothing
 23745 ;; This function is called by:
 23746 ;;		_printSortTimer
 23747 ;; This function uses a non-reentrant model
 23748 ;;
 23749                           
 23750                           	psect	text95
 23751  00521E                     __ptext95:
 23752                           	opt stack 0
 23753  00521E                     i2_delay_ms:
 23754                           	opt stack 22
 23755                           
 23756                           ;incstack = 0
 23757                           ;i2delay_ms@milliseconds stored from wreg
 23758  00521E  6E02               	movwf	i2delay_ms@milliseconds,c
 23759                           
 23760                           ;sort.c: 578: while(milliseconds > 0)
 23761  005220  D008               	goto	i2l8480
 23762  005222                     i2l8476:
 23763                           
 23764                           ;sort.c: 579: {
 23765                           ;sort.c: 580: milliseconds--;
 23766  005222  0602               	decf	i2delay_ms@milliseconds,f,c
 23767                           
 23768                           ;sort.c: 581: _delay((unsigned long)((990)*(32000000/4000000.0)));
 23769  005224  0E0B               	movlw	11
 23770  005226  6E01               	movwf	??i2_delay_ms& (0+255),c
 23771  005228  0E48               	movlw	72
 23772  00522A                     i2u1010_47:
 23773  00522A  2EE8               	decfsz	wreg,f,c
 23774  00522C  D7FE               	bra	i2u1010_47
 23775  00522E  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 23776  005230  D7FC               	bra	i2u1010_47
 23777  005232                     i2l8480:
 23778  005232  5002               	movf	i2delay_ms@milliseconds,w,c
 23779  005234  B4D8               	btfsc	status,2,c
 23780  005236  0012               	return	
 23781  005238  D7F4               	goto	i2l8476
 23782  00523A                     __end_ofi2_delay_ms:
 23783                           	opt stack 0
 23784                           pclatu	equ	0xFFB
 23785                           pclath	equ	0xFFA
 23786                           tblptru	equ	0xFF8
 23787                           tblptrh	equ	0xFF7
 23788                           tblptrl	equ	0xFF6
 23789                           tablat	equ	0xFF5
 23790                           prodh	equ	0xFF4
 23791                           prodl	equ	0xFF3
 23792                           intcon	equ	0xFF2
 23793                           intcon2	equ	0xFF1
 23794                           intcon3	equ	0xFF0
 23795                           indf0	equ	0xFEF
 23796                           postinc0	equ	0xFEE
 23797                           fsr0h	equ	0xFEA
 23798                           fsr0l	equ	0xFE9
 23799                           wreg	equ	0xFE8
 23800                           postdec1	equ	0xFE5
 23801                           fsr1h	equ	0xFE2
 23802                           fsr1l	equ	0xFE1
 23803                           indf2	equ	0xFDF
 23804                           postinc2	equ	0xFDE
 23805                           postdec2	equ	0xFDD
 23806                           fsr2h	equ	0xFDA
 23807                           fsr2l	equ	0xFD9
 23808                           status	equ	0xFD8
 23809                           pclatu	equ	0xFFB
 23810                           pclath	equ	0xFFA
 23811                           tblptru	equ	0xFF8
 23812                           tblptrh	equ	0xFF7
 23813                           tblptrl	equ	0xFF6
 23814                           tablat	equ	0xFF5
 23815                           prodh	equ	0xFF4
 23816                           prodl	equ	0xFF3
 23817                           intcon	equ	0xFF2
 23818                           intcon2	equ	0xFF1
 23819                           intcon3	equ	0xFF0
 23820                           indf0	equ	0xFEF
 23821                           postinc0	equ	0xFEE
 23822                           fsr0h	equ	0xFEA
 23823                           fsr0l	equ	0xFE9
 23824                           wreg	equ	0xFE8
 23825                           postdec1	equ	0xFE5
 23826                           fsr1h	equ	0xFE2
 23827                           fsr1l	equ	0xFE1
 23828                           indf2	equ	0xFDF
 23829                           postinc2	equ	0xFDE
 23830                           postdec2	equ	0xFDD
 23831                           fsr2h	equ	0xFDA
 23832                           fsr2l	equ	0xFD9
 23833                           status	equ	0xFD8
 23834                           
 23835                           	psect	rparam
 23836  0000                     pclatu	equ	0xFFB
 23837                           pclath	equ	0xFFA
 23838                           tblptru	equ	0xFF8
 23839                           tblptrh	equ	0xFF7
 23840                           tblptrl	equ	0xFF6
 23841                           tablat	equ	0xFF5
 23842                           prodh	equ	0xFF4
 23843                           prodl	equ	0xFF3
 23844                           intcon	equ	0xFF2
 23845                           intcon2	equ	0xFF1
 23846                           intcon3	equ	0xFF0
 23847                           indf0	equ	0xFEF
 23848                           postinc0	equ	0xFEE
 23849                           fsr0h	equ	0xFEA
 23850                           fsr0l	equ	0xFE9
 23851                           wreg	equ	0xFE8
 23852                           postdec1	equ	0xFE5
 23853                           fsr1h	equ	0xFE2
 23854                           fsr1l	equ	0xFE1
 23855                           indf2	equ	0xFDF
 23856                           postinc2	equ	0xFDE
 23857                           postdec2	equ	0xFDD
 23858                           fsr2h	equ	0xFDA
 23859                           fsr2l	equ	0xFD9
 23860                           status	equ	0xFD8
 23861                           
 23862                           	psect	temp
 23863  00007E                     btemp:
 23864                           	opt stack 0
 23865  00007E                     	ds	1
 23866  0000                     int$flags	set	btemp
 23867                           pclatu	equ	0xFFB
 23868                           pclath	equ	0xFFA
 23869                           tblptru	equ	0xFF8
 23870                           tblptrh	equ	0xFF7
 23871                           tblptrl	equ	0xFF6
 23872                           tablat	equ	0xFF5
 23873                           prodh	equ	0xFF4
 23874                           prodl	equ	0xFF3
 23875                           intcon	equ	0xFF2
 23876                           intcon2	equ	0xFF1
 23877                           intcon3	equ	0xFF0
 23878                           indf0	equ	0xFEF
 23879                           postinc0	equ	0xFEE
 23880                           fsr0h	equ	0xFEA
 23881                           fsr0l	equ	0xFE9
 23882                           wreg	equ	0xFE8
 23883                           postdec1	equ	0xFE5
 23884                           fsr1h	equ	0xFE2
 23885                           fsr1l	equ	0xFE1
 23886                           indf2	equ	0xFDF
 23887                           postinc2	equ	0xFDE
 23888                           postdec2	equ	0xFDD
 23889                           fsr2h	equ	0xFDA
 23890                           fsr2l	equ	0xFD9
 23891                           status	equ	0xFD8


Data Sizes:
    Strings     1273
    Constant    27
    Data        8
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      73
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_127(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_126(CODE[18]), STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[3]), STR_117(CODE[15]), STR_116(CODE[3]), STR_115(CODE[15]), 
		 -> STR_114(CODE[11]), STR_113(CODE[18]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[4]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_printf
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201179
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22775
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17501
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11324
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10577
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23044
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22130
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45840
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13249
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8881
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8881
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97083
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8993
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8881
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15261
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8881
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9085
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8881
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19155
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9065
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8746
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   80038
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0    3706
                                             41 COMRAM     2     2      0
                          i2_lcdInst
                           i2_printf
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71427
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7692
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4579
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31130
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4905
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2978
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_updateServoPosition

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      49       7       28.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      34        0.0%
DATA                 0      0     146       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 31 17:44:25 2017

                                    _i 013D                     i2_I2C_Master_Start 5314  
                   i2_I2C_Master_Write 52EA                                     l66 5282  
                                   _ID 30DC                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 08CA  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ID@i 0084                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 09A0                                    l606 24E2  
                                  l491 40A8                                    l812 32EE  
                                  l808 323A                                    l752 123C  
                                  l809 3254                                    l770 13C0  
                                  l762 12EC                                    l773 13FA  
                                  l765 1326                                    l790 154C  
                                  l791 1562                                    l864 4596  
                                  l785 14FE                                    l795 15F6  
                                  l787 1510                                    l779 15AC  
                                  l788 1524                                    l789 1538  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 34F6                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F2  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 39F6  
                  _log_count_can_w_lab 0067                             i2_delay_ms 521E  
      __end_of_change_state_to_menu_11 4F2E        __end_of_change_state_to_menu_12 4D6E  
      __end_of_change_state_to_menu_22 4D36        __end_of_change_state_to_menu_23 4EFE  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 501E        __end_of_change_state_to_logs_12 4FEE  
      __end_of_change_state_to_logs_22 4FBE        __end_of_change_state_to_logs_23 507A  
      __end_of_change_state_to_logs_33 4F8E        __end_of_change_state_to_logs_34 4F5E  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1201 007C                                   l1026 3D8C  
                                 l1211 018C                                   l1212 01DA  
                                 l1204 0080                                   l1213 0240  
                                 l1310 2EA2                                   l1214 028E  
                                 l1142 3CB4                                   l1039 5264  
                                 l1208 0126                                   l1048 3B24  
                                 l1313 2E3E                                   l1145 3CD4  
                                 l1250 0782                                   l1317 2E82  
                                 l1341 461C                                   l1406 184A  
                                 l1238 05E8                                   l1166 3F92  
                                 l1319 2E9C                                   l1255 0858  
                                 l1175 218C                                   l1280 46CA  
                                 l1272 4678                                   l1169 3F96  
                                 l1370 3994                                   l1274 467C  
                                 l1178 2190                                   l1371 39AE  
                                 l1275 4680                                   l1276 4684  
                                 l1268 465C                                   l1348 462C  
                                 l1365 3948                                   l1277 4688  
                                 l1278 468C                                   l1295 4A86  
                                 l1800 4236                                   l1289 4A76  
                                 l6100 46FE                                   l1853 474E  
                                 l6102 470A                                   l1863 496C  
                                 l6112 4740                                   l6104 4710  
                                 l6120 4928                                   l6122 4934  
                                 l6042 50BA                                   l7010 4498  
                                 l6124 493A                                   l6044 50CC  
                                 l6310 189C                                   l7006 4482  
                                 l6128 495E                                   l6312 18A2  
                                 l6240 1626                                   l8000 076A  
                                 l7016 44C4                                   l6330 1900  
                                 l6306 1882                                   l6242 1638  
                                 l6066 5044                                   l6084 50F2  
                                 l6324 18DE                                   l6260 16F2  
                                 l6252 1676                                   l6236 1612  
                                 l6412 45B4                                   l8020 07D2  
                                 l6350 1984                                   l6342 195C  
                                 l6334 1938                                   l6270 1730  
                                 l6246 1642                                   l6406 457A  
                                 l8030 07FA                                   l7302 13AA  
                                 l7222 11FA                                   l6360 19B8  
                                 l6336 1942                                   l6280 17A8  
                                 l6272 1736                                   l8024 07DC  
                                 l6424 41BA                                   l7312 13DA  
                                 l7232 1244                                   l6354 199E  
                                 l6290 180A                                   l6282 17AE  
                                 l8034 0804                                   l6370 4D78  
                                 l6426 41CA                                   l7402 15EA  
                                 l7314 13E4                                   l6364 1A10  
                                 l6348 1978                                   l6284 17C6  
                                 l6268 1724                                   l8116 4654  
                                 l8060 0882                                   l8044 0842  
                                 l8028 07F4                                   l6372 4D84  
                                 l6436 4224                                   l6428 41D0  
                                 l7500 3E84                                   l7324 1414  
                                 l7404 15F8                                   l6358 19B2  
                                 l6278 179C                                   l6294 1810  
                                 l6366 1A1C                                   l8206 4690  
                                 l8070 08AA                                   l8054 0872  
                                 l8038 081C                                   l6382 4522  
                                 l7502 3E9E                                   l7510 3F00  
                                 _ADIE 007CEE                                   l6288 17F2  
                                 l8128 2C90                                   l8064 089A  
                                 l8056 0878                                   l6640 250A  
                                 l6632 2460                                   l9120 3ADE  
                                 l7504 3EB8                                   l7352 14DC  
                                 l7336 1478                                   l7328 143A  
                                 l7264 12D6                                   l7248 1280  
                                 l8322 38E6                                   l8146 2D48  
                                 l8074 08C2                                   l8066 08A0  
                                 l8410 4182                                   l8402 4160  
                                 l6378 450C                                   l6650 25A0  
                                 l6642 2528                                   l7450 31FA  
                                 l7442 31D2                                   l6810 4318  
                                 l7354 14E6                                   l7274 1306  
                                 l8148 2D4E                                   l7700 0112  
                                 l9132 3C56                                   l6388 4542  
                                 l6660 2636                                   l6652 25BE  
                                 l6644 2546                                   l7508 3ED2  
                                 l7460 3224                                   l7276 1310  
                                 l8350 3974                                   l8342 394A  
                                 l8326 3916                                   l8166 2E06  
                                 l7614 232A                                   l9150 3CDA  
                                 l8406 416E                                   l8430 43DE  
                                 l8422 43BA                                   l6654 25DC  
                                 l6646 2564                                   l6638 24EC  
                                 l7454 320A                                   l7438 31C2  
                                 l6902 477C                                   l6806 4302  
                                 l7382 156E                                   l7390 15B4  
                                 l7286 1340                                   l8352 397E  
                                 l8344 395A                                   l8192 2E6C  
                                 l7608 22E8                                   l9160 3CF8  
                                 l9152 3CE0                                   l8432 43EA  
                                 l6656 25FA                                   l6648 2582  
                                 l6664 2654                                   l8600 0B36  
                                 l7456 320C                                   l6816 438E  
                                 l7384 15A4                                   l8362 39B0  
                                 l8178 2E28                                   l7810 03B0  
                                 l7802 038E                                   l7650 2424  
                                 l7634 23A6                                   l7626 2376  
                                 l9162 3CFE                                   l9154 3CE6  
                                 l8434 43F0                                   l8442 4422  
                                 l8426 43CA                                   l6658 2618  
                                 l6666 26B2                                   l8530 09F2  
                                 l8522 09D0                                   l6914 47A6  
                                 l8364 39C0                                   l8188 2E58  
                                 l7820 03D8                                   l7812 03B6  
                                 l9164 3D04                                   l9156 3CEC  
                                 l9172 3D16                                   l8700 0EF2  
                                 l8620 0BC4                                   l8516 09B8  
                                 l6852 3DF8                                   l6860 3E1A  
                                 l7484 32AC                                   l7492 32F0  
                                 l7910 05A8                                   l7806 0398  
                                 l7646 23EE                                   l7638 23DC  
                                 l9166 3D0A                                   l9158 3CF2  
                                 l8390 411E                                   l8446 4436  
                                 l8438 4414                                   l8710 0F0E  
                                 l8630 0C5A                                   l8622 0BE2  
                                 l8550 0A5E                                   l8534 0A04  
                                 l8526 09DA                                   l8518 09BE  
                                 l9094 3A42                                   l6918 47BE  
                                 l8368 39F0                                   l7920 05D0  
                                 l7832 041C                                   l7816 03C0  
                                 l9168 3D10                                   l8392 412A  
                                 l8384 4100                                   l8640 0CF0  
                                 l8632 0C78                                   l8624 0C00  
                                 l8616 0B88                                   l6864 3E30  
                                 l6856 3E02                                   l9096 3A56  
                                 l9360 406A                                   l7914 05C0  
                                 l7906 059E                                   l7842 0444  
                                 l7690 00EA                                   l7578 21E0  
                                 l8394 4130                                   l8378 40EA  
                                 l8714 0F26                                   l8706 0F04  
                                 l8650 0DB4                                   l8634 0C96  
                                 l8626 0C1E                                   l8618 0BA6  
                                 l8554 0A68                                   l7498 3E6A  
                                 l6874 5102                                   l7916 05C6  
                                 l7836 0434                                   l7828 0412  
                                 l7780 0314                                   l7692 00F0  
                                 l7596 2298                                   l8820 111E  
                                 l8812 10FC                                   l8740 0FAE  
                                 l8732 0F8C                                   l8636 0CB4  
                                 l8628 0C3C                                   l8644 0D0E  
                                 l8548 0A58                                   l8564 0A8E  
                                 l6868 3E3A                                   l9364 407A  
                                 l7942 0652                                   l7934 0630  
                                 l7862 04B8                                   l7854 0496  
                                 l7846 045C                                   l7838 043A  
                                 l7790 033C                                   l8830 113A  
                                 l8750 0FCA                                   l8654 0DBE  
                                 l8638 0CD2                                   l8646 0D72  
                                 l8582 0AEA                                   l8558 0A80  
                                 l6878 5118                                   l9366 4080  
                                 l9382 40AA                                   l9358 4054  
                                 l7960 06B4                                   l7952 067A  
                                 l7944 0658                                   l7880 051A  
                                 l7872 04E0                                   l7864 04BE  
                                 l7784 032C                                   l7776 030A  
                                 l7696 00FA                                   l8816 1106  
                                 l8736 0F96                                   l8672 0E0A  
                                 l8664 0DE8                                   l8592 0B14  
                                 l9376 409E                                   l9368 4086  
                                 l7970 06DC                                   l7938 063A  
                                 l7890 0542                                   l7858 04A0  
                                 l7794 0354                                   l7786 0332  
                                 l8834 1152                                   l8826 1130  
                                 l8754 0FE2                                   l8746 0FC0  
                                 l8658 0DD6                                   l8586 0B02  
                                 l8578 0AE0                                   l6898 4766  
                                 l9378 40A4                                   l7964 06BE  
                                 l7948 0662                                   l7884 0524  
                                 l7868 04C8                                   l8780 106A  
                                 l8772 1048                                   l8692 0ED0  
                                 l8668 0DF2                                   l8596 0B1E  
                                 l7990 0742                                   l7974 06E6  
                                 l7894 054C                                   l8790 1086  
                                 l8838 115E                                   l7968 06D6  
                                 l7888 053C                                   l8776 1052  
                                 l8696 0EDA                                   l7994 075A  
                                 l7986 0738                                   l7978 06FE  
                                 l7898 0564                                   l8794 109E  
                                 l8786 107C                                   l7996 0760  
                                 STR_1 FB9F                                   STR_2 FF23  
                                 STR_3 FB8D                                   STR_4 FE46  
                                 STR_5 FB8D                                   STR_6 FDE2  
                                 STR_7 FFC0                                   STR_8 FFDB  
                                 STR_9 FFCB                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4300 5042  
                                 u6000 32EE                                   u5210 24E2  
                                 u6100 23CA                                   u4500 4C20  
                                 u4510 4C22                                   u7000 3940  
                                 u6200 0126                                   u4520 4C6C  
                                 u4521 4C68                                   u4530 4C6E  
                                 u6130 2412                                   _PEIE 007F96  
                                 u4620 17E8                                   u7100 39DE  
                                 u6220 01DA                                   u6108 23CE  
                                 u6060 2222                                   u6070 2224  
                                 u6240 028E                                   u7041 396A  
                                 u7050 396C                                   u6138 2416  
                                 u4627 17DE                                   u5195 49A6  
                                 u4580 1770                                   u7108 39E2  
                                 _RCEN 007E2B                                   u5560 1206  
                                 u4587 1766                                   u5580 123C  
                                 u9007 0DFA                                   u6800 2D90  
                                 u8160 3B24                                   u5760 1458  
                                 u9017 0E24                                   i2l66 5296  
                                 u6810 2D92                                   u5578 120A  
                                 u9107 10B8                                   u9027 0EE2  
                                 u9117 110E                                   u9037 0F16  
                                 u5870 312C                                   u9207 228C  
                                 u9127 1142                                   u9047 0F40  
                                 u5880 3182                                   u9217 22AC  
                                 u9137 3C64                                   u9057 0F9E  
                                 u6930 38A8                                   u6770 2CD2  
                                 u5778 145C                                   u9307 002C  
                                 u9227 22DA                                   u9147 3CA8  
                                 u9067 0FD2                                   u8507 12A4  
                                 u6940 3904                                   u6780 2CD4  
                                 u5980 32B8                                   u9317 0070  
                                 u9237 231E                                   u9157 213C  
                                 u9077 0FFC                                   u8517 12F0  
                                 u5878 3130                                   u9407 029E  
                                 u9327 0092                                   u9247 233C  
                                 u9167 2180                                   u9087 105A  
                                 u8607 1408                                   u8527 12F8  
                                 u5888 3186                                   u9417 031C  
                                 u9337 0102                                   u9257 236A  
                                 u9177 21A2                                   u9097 108E  
                                 u8617 1422                                   u8537 132A  
                                 u6938 38AC                                   u9507 0554  
                                 u9427 0344                                   u9347 0136  
                                 u9267 2384                                   u9187 21D0  
                                 u8707 153C                                   u8627 1492  
                                 u8547 1334                                   u6948 3908  
                                 u9517 05B0                                   u9437 03A0  
                                 u9357 019C                                   u9277 3F42  
                                 u9197 2238                                   u8717 1544  
                                 u8637 14CA                                   u8557 134E  
                                 u5998 32BC                                   u6991 393E  
                                 u9607 07E4                                   u9527 05D8  
                                 u9447 03C8                                   u9367 01BA  
                                 u9287 3F86                                   u8807 314A  
                                 u8727 1550                                   u8647 1502  
                                 u8567 1378                                   u9617 080C  
                                 u9537 0642                                   u9457 0424  
                                 u9377 01EA                                   u9297 3FA8  
                                 u8817 3168                                   u8737 155A  
                                 u8657 150A                                   u8577 13C4  
                                 u8497 118A                                   u9707 2CE8  
                                 u9627 085C                                   u9547 066A  
                                 u9467 044C                                   u9387 0250  
                                 u8907 4CB2                                   u8827 323E  
                                 u8747 1566                                   u8667 1514  
                                 u8587 13CC                                   u9717 2D3C  
                                 u9637 0866                                   u9557 06C6  
                                 u9477 04A8                                   u9397 026E  
                                 u8917 08E2                                   u8837 3248  
                                 u8757 15CE                                   u8677 151E  
                                 u8597 13FE                                   u9807 1A4A  
                                 u9727 2DA6                                   u9647 088A  
                                 u9567 06EE                                   u9487 04D0  
                                 u8927 09E2                                   u8847 3270  
                                 u8767 4DF8                                   u8687 1528  
                                 u9817 1A96                                   u9737 2DFA  
                                 u9657 08B2                                   u9577 074A  
                                 u9497 052C                                   u8937 0A1A  
                                 u8857 510E                                   u8777 4784  
                                 u8697 1532                                   u9907 1CC6  
                                 u9827 1AE2                                   u9747 2E42  
                                 u9667 45E6                                   u9587 0772  
                                 u8947 0A70                                   u8867 3DAE  
                                 u8787 30F6                                   u9917 1CF8  
                                 u9837 1B16                                   u9757 2E4A  
                                 u9677 4636                                   u9597 0794  
                                 u8957 0A9C                                   u8877 3E0A  
                                 u8797 3112                                   u9927 1D44  
                                 u9847 1B48                                   u9767 2E86  
                                 u9687 464A                                   u8967 0AF2  
                                 u8887 3E42                                   u9937 1D78  
                                 u9857 1B94                                   u9777 2E90  
                                 u9697 2C6C                                   u8977 0B26  
                                 u8897 4C7E                                   u9947 1DAA  
                                 u9867 1BC8                                   u9787 50C2  
                                 u8987 0B50                                   u9957 4AD0  
                                 u9877 1BFA                                   u9797 4A40  
                                 u8997 0DC6                                   u9967 3880  
                                 u9887 1C46                                   u9977 3998  
                                 u9897 1C92                                   u9987 39A2  
                                 _RSEN 007E29                                   u9997 48CC  
                          _stopSignals 523A                                   _Test 3C56  
                                 _back 005B                                   _main 400A  
                                 _down 005D                                   _keys FAEB  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 51BC                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0065                        __end_ofi2_putch 52D4  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2EA6  
                          i2_lcdNibble 4AE8                        __end_of_Loading 1604  
                 __end_of_actuatorTest 08CA             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3E52  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 418C  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB06                                  STR_14 FFD7  
                                STR_22 FF97                                  STR_30 FDF3  
                                STR_15 FFD3                                  STR_23 FF15  
                                STR_31 FDD1                                  STR_16 FFE3  
                                STR_24 FD38                                  STR_32 FD16  
                                STR_40 FCD2                                  STR_17 FFF3  
                                STR_25 FE15                                  STR_33 FD27  
                                STR_41 FCC1                                  STR_18 FFF7  
                                STR_34 FDC0                                  STR_50 FD9E  
                                STR_42 FD7C                                  STR_26 FD49  
                                STR_43 FD7C                                  STR_35 FDC0  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE04                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5A  
                                STR_36 FD05                                  STR_44 FCE3  
                      __end_of___awmod 4440                                  STR_45 FCD2  
                                STR_37 FD16                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE12  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_38 FDAF                                  STR_46 FD8D  
                                STR_70 FC9F                                  STR_47 FD8D  
                                STR_55 FFFB                                  STR_63 FB06  
                                STR_71 FECE                                  STR_39 FD6B  
                                STR_56 FFDF                                  STR_64 FF78  
                                STR_80 FF31                                  STR_72 FF07  
                                STR_48 FCF4                                  STR_49 FCE3  
                                STR_57 FFD7                                  STR_65 FF3E  
                                STR_81 FE56                                  STR_73 FC5B  
                                STR_58 FFD3                                  STR_90 FF07  
                                STR_82 FE12                                  STR_66 FFC7  
                                STR_74 FEEB                                  STR_59 FFE3  
                                STR_75 FF4B                                  STR_91 FEBF  
                                STR_83 FE83                                  STR_67 FB1E  
                                STR_68 FFB9                                  STR_92 FEDD  
                                STR_76 FEB0                                  STR_84 FE26  
                                STR_85 FF83                                  STR_77 FEF9  
                                STR_69 FC8E                                  STR_93 FC6C  
                                STR_86 FF83                                  STR_78 FFAA  
                                STR_94 FF57                                  STR_79 FF07  
                                STR_87 FFA1                                  STR_95 FC7D  
                                STR_88 FFA1                                  STR_96 FF62  
                                STR_89 FF8D                                  STR_97 FEA1  
                                STR_98 FC06                                  STR_99 FBF5  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4248           i2updateServoPosition@time_us 0001  
                                u10007 48D6                                  u10017 4902  
                                u10027 490C                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 4758  
                      __end_of___lwmod 4976                                  i2l257 29B2  
                                i2l606 2F34                                  i2l843 2B84  
                                i2l864 4872                                  i2l961 3816  
                                i2l963 3836                        ___awdiv@counter 008A  
                                i2l957 37BE                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1A3C  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 52C8  
                      __end_of_handler 3872                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 50D2                        __end_of_initLCD 4CBC  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                                  _getIR 4758  
                      __end_of_loadRTC 44CC                        __end_of_readMAG 4C76  
                      __end_of_dpowers FB06                                  _first 0139  
                                _enter 005F                        __end_of_isdigit 50FC  
                                _input 007D                                  _putch 52A8  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5172                       __end_ofi2_getRTC 483C  
                  _log_count_pop_w_tab 006B                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 212E                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4E3E  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1185 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4B90                           __end_of_Test 3D6A  
                   __size_ofi2_lcdInst 000C                           __end_of_main 40CE  
                         __end_of_keys FAFC                           __end_of_sort 51DE  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1793 00B3                            _BlockerTest 3872  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01FA             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FBD3                                 STR_101 FC28  
                               STR_110 FE65                                 STR_102 FC39  
                               STR_111 FCB0                                 STR_103 FBB1  
                               STR_104 FE36                                 STR_120 FC4A  
                               STR_112 FB33                                 STR_105 FBE4  
                               STR_121 FB57                                 STR_113 FB45  
                               STR_122 FB45                                 STR_114 FF6D  
                               STR_106 FBC2                                 _ADRESH 000FC4  
                               STR_107 FBE4                                 STR_115 FE56  
                               STR_123 FB7B                                 STR_116 FE12  
                               STR_108 FE92                                 STR_124 FB69  
                               _EEADRH 000FAA                                 STR_117 FE56  
                               STR_125 FB7B                                 STR_109 FE74  
                               STR_118 FE12                                 STR_126 FB7B  
                               _ADRESL 000FC3                                 STR_127 FFB2  
                               STR_119 FC17                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4E9E              i2_change_state_to_menu_22 4E6E  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1039 527A  
                               i2l1406 1F9A                                 i2l1853 4B86  
                               i2l1863 4CF4                                 i2l6210 4CD6  
                               i2l6214 4CEA                                 i2l6206 4CCA  
                               i2l6152 5192                                 i2l6208 4CD2  
                               i2l7122 35F4                                 i2l6500 1E82  
                               i2l7132 361A                                 i2l7116 35E6  
                               i2l7108 35CE                                 i2l7060 351A  
                               i2l6190 4B60                                 i2l6510 1EB4  
                               i2l7150 3654                                 i2l7142 363C  
                               i2l7126 3610                                 i2l7070 3544  
                               i2l6176 5216                                 i2l6600 20BC  
                               i2l6520 1F0C                                 i2l6512 1EB8  
                               i2l7160 3674                                 i2l7136 362E  
                               i2l7072 3548                                 i2l9000 2948  
                               i2l6186 4B54                                 i2l6530 1F60  
                               i2l6522 1F12                                 i2l7138 3632  
                               i2l7090 357E                                 i2l7082 3566  
                               i2l6610 4E16                                 i2l6452 4812  
                               i2l6188 4B5C                                 i2l6604 210A  
                               i2l6524 1F24                                 i2l6508 1EAA  
                               i2l7172 36AA                                 i2l7164 3686  
                               i2l7156 3662                                 i2l7092 3584  
                               i2l7084 356C                                 i2l7068 3534  
                               i2l6612 4E1E                                 i2l6198 4B7C  
                               i2l6550 1FE0                                 i2l6518 1F02  
                               i2l6534 1F64                                 i2l6606 2112  
                               i2l7086 3572                                 i2l7078 3552  
                               i2l6448 4802                                 i2l6552 1FE4  
                               i2l6528 1F4E                                 i2l6480 1DDA  
                               i2l7168 3698                                 i2l7088 3578  
                               i2l7096 358A                                 i2l6458 482C  
                               i2l6570 2030                                 i2l6546 1FC8  
                               i2l6482 1DE8                                 i2l7178 36B4  
                               i2l6564 2016                                 i2l6492 1E20  
                               i2l6476 1DCA                                 i2l9204 2AFA  
                               i2l6590 2090                                 i2l6582 2072  
                               i2l6574 2054                                 i2l6486 1DEE  
                               i2l9230 2BC0                                 i2l6576 205C  
                               i2l9216 2B52                                 i2l9224 2B86  
                               i2l9304 3464                                 i2l9320 34C4  
                               i2l6594 20A4                                 i2l6588 2088  
                               i2l9228 2BBA                                 i2l9404 3776  
                               i2l6598 20B6                                 i2l9182 29C2  
                               i2l6782 3BFA                                 i2l8462 485A  
                               i2l9270 3378                                 i2l9262 3358  
                               i2l8480 5232                                 i2l9192 2A2C  
                               i2l9264 3362                                 i2l9440 37DC  
                               i2l9186 29D2                                 i2l6794 3C3E  
                               i2l6786 3C0A                                 i2l6970 2F80  
                               i2l9258 3342                                 i2l9418 3792  
                               i2l8476 5222                                 i2l6980 2FEE  
                               i2l6972 2F96                                 i2l6964 2F3E  
                               i2l8468 488C                                 i2l9292 3418  
                               i2l9276 338E                                 i2l9284 33AC  
                               i2l6982 3004                                 i2l6974 2FAC  
                               i2l6966 2F54                                 i2l6990 3046  
                               i2l6958 2ED2                                 i2l8910 27E4  
                               i2l8902 27C8                                 i2l9278 33A2  
                               i2l9286 33F6                                 i2l9446 37EA  
                               i2l6984 301A                                 i2l6976 2FC2  
                               i2l6968 2F6A                                 i2l6992 30A0  
                               i2l9288 3400                                 i2l6986 3030  
                               i2l6978 2FD8                                 i2l8930 283A  
                               i2l8922 2816                                 i2l8914 27FA  
                               i2l8906 27D6                                 i2l9298 343E  
                               i2l8852 2726                                 i2l9468 3834  
                               i2l9396 375C                                 i2l8950 2888  
                               i2l8942 2864                                 i2l8934 2848  
                               i2l8926 2824                                 i2l8918 2808  
                               i2l8870 2764                                 i2l8862 2748  
                               i2l8854 272C                                 i2l9398 3760  
                               i2l8970 28D6                                 i2l8962 28BA  
                               i2l8954 2896                                 i2l8946 287A  
                               i2l8938 2856                                 i2l8890 279E  
                               i2l8882 2780                                 i2l8866 2756  
                               i2l8858 273A                                 i2l9930 33DA  
                               i2l9932 33E4                                 i2l9950 35A2  
                               i2l9942 2966                                 i2l8990 2924  
                               i2l8982 2908                                 i2l8974 28E4  
                               i2l8966 28C8                                 i2l8958 28A4  
                               i2l8894 27AC                                 i2l8886 278E  
                               i2l8878 2772                                 i2l9934 33EE  
                               i2l9952 35BE                                 i2l9944 2988  
                               i2l9936 34DC                                 i2l9928 33D0  
                               i2l9946 29A4                                 i2l8994 293A  
                               i2l8986 2916                                 i2l8978 28FA  
                               i2l8898 27BA                                 i2l9938 34EC  
              _f_most_recent_sort_time 0137                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 5124                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 51BC  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 3F34                                 ___wmul 4DA4  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 4DDA                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 44CC  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5200                                 _initUI 4E3E  
                               _readIR 4BDE                                 _logRun 39F6  
                               getIR@i 0087                                 clear_0 4BB6  
                               clear_1 4BC2                                 clear_2 4BCE  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 4A32                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1604  
                            ??_handler 004B                __size_of_initGlobalVars 00AC  
                         ?_retrieveLog 0007                                 _strcpy 4D6E  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 514C  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5124  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4B90                       __end_of_printRTC 26F6  
                         __mediumconst FAEA                      __end_ofi2___lwmod 4CFE  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 0069  
                __end_of_algorithmTest 400A                      __end_ofi2_lcdInst 52E0  
                           _PusherTest 2C5E                      __end_ofi2_isdigit 521E  
                           __accesstop 0080                __end_of__initialization 4BD4  
                        ?_inputHandler 002A                  _most_recent_sort_time 006D  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 526C  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 531E                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 52F4                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 47CA                            i2printRTC@i 0041  
                        _initSortTimer 42F4            __end_of_updateServoPosition 45D8  
                        __end_of_putch 52B8                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 32FC  
                           __end_of_UI 116C                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 50A6          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 507A                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 48AC                           _EEPROM_write 3D6A  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3235 0141                      __end_of_SpeedTest 465C  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 46E0                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2416 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006F  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00EA                                i2_putch 52C8  
                            ?_initTime 0080                        _f_loadingNewCan 00F0  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 4914  
                              _Loading 116C            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 40CE                                ___awmod 439E  
                           _initServos 4A8E                                ___lldiv 418C  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 46E0                                ___lwmod 4914  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 4B90                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 4248  
                              _lcdInst 52B8                                _handler 0008  
                              __ptext0 400A                                __ptext1 523A  
                              __ptext2 51BC                                __ptext3 116C  
                              __ptext4 42F4                                __ptext5 4248  
                              __ptext6 4DDA                                __ptext7 4758  
                              __ptext8 4BDE                                __ptext9 30DC  
                      __size_of_printf 0438                                _readADC 50A6  
                      __size_of_strcpy 0036                                _initLCD 4C76  
                              _cur_can 012B                                _loadRTC 4440  
                              _readMAG 4C2A                                _dpowers FAFC  
                   actuatorTest@i_1741 00AE                     actuatorTest@i_1750 00B4  
                   actuatorTest@i_1742 00AF                     actuatorTest@i_1734 00AD  
                   actuatorTest@i_1751 00B5                     actuatorTest@i_1760 00BA  
                   actuatorTest@i_1744 00B0                     actuatorTest@i_1761 00BB  
                   actuatorTest@i_1753 00B6                     actuatorTest@i_1745 00B1  
                   actuatorTest@i_1770 00C0                     actuatorTest@i_1754 00B7  
                   actuatorTest@i_1771 00C1                     actuatorTest@i_1763 00BC  
                   actuatorTest@i_1747 00B2                     actuatorTest@i_1764 00BD  
                   actuatorTest@i_1756 00B8                     actuatorTest@i_1748 00B3  
                   actuatorTest@i_1773 00C2                     actuatorTest@i_1757 00B9  
                   actuatorTest@i_1774 00C3                     actuatorTest@i_1766 00BE  
                   actuatorTest@i_1767 00BF                                _isdigit 50D2  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011C                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 3E52  
                       __pintcode_body 36E2                   end_of_initialization 4BD4  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 36E2  
                  i2___wmul@multiplier 0001                              i2u1010_47 522A  
                            i2u1003_47 331C                              i2u1004_47 353A  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
                            i2u1005_47 2B2C                              i2u1006_47 4B00  
                            i2u1007_47 4B0A                              i2u1008_47 4B2C  
                            i2u1009_47 4B36              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 523A                 __end_of_initGlobalVars 42F4  
                           _sensorTest 212E                    __size_of_PusherTest 0248  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 36E2  
                         ??_BothServos 00AB                  __end_of_machineConfig 4A32  
                           _updateMenu 26F6                      i2_I2C_Master_Read 5172  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 5296  
                    i2_I2C_Master_Stop 530C                      i2___lwdiv@divisor 0008  
                      _log_count_total 013F                              i2___lwdiv 4B3E  
                            i2___lwmod 4CBC                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 30DC                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 52D4                          Loading@i_1160 00BC  
                        Loading@i_1162 00BE                          Loading@i_1148 00B6  
                        Loading@i_1157 00B8                          Loading@i_1159 00BA  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5200                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DC0                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 526C                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4DDA  
                       __end_of_getMAG 4E0C                         __end_of_getRTC 4552  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4E6E  
                       __end_of_readIR 4C2A                         __end_of_logRun 3B3A  
                     i2___wmul@product 0005                         __end_of_printf 1A3C  
                         i2printf@flag 0026                         __end_of_strcpy 4DA4  
            __end_ofi2_I2C_Master_Read 5198              __end_ofi2_I2C_Master_Wait 52A8  
                         i2printf@prec 001D                    start_initialization 4B90  
            __end_ofi2_I2C_Master_Stop 5314                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1398 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 45D8  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 465C                            ?_sensorTest 0001  
                          __pdataBANK1 0141                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1173 0086  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                 __size_of_BlockerTest 0184                    _printSortTimer$2548 0043  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0086  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2058 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0075                           i2strcpy@from 0003  
                             ?i2_putch 0001                     PusherTest@res_1789 00AF  
                      _count_pop_w_tab 0129                            _EEPROM_read 5254  
                   __end_of_PortTestA5 4A8E                       _I2C_Master_Start 5304  
                            _f_lastCan 00EE                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 52E0  
                    __size_of_initTime 0022                  i2_updateServoPosition 483C  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAEA                              _lcdNibble 48AC  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 2EA6  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013B                              _cur_state 00EC  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 3F34                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0220                            __size_of_UI 08A2  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 531C  
           __end_ofi2_I2C_Master_Write 52F4                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 34F6                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u440_40 5190  
                             _PIR2bits 000FA1                               i2u540_40 2F34  
                             i2u495_40 1EE6                               i2u495_47 1EDC  
                             i2u824_40 2B5C                               i2u826_40 2B84  
                             i2u825_48 2B5E                               i2u499_40 1F46  
                             i2u499_47 1F3C                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 514C  
                        lcdNibble@data 0081                               i2_getRTC 47CA  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1DC0  
                             i2_strcpy 4E0C                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4BA4  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5282                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 0498  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 439E                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4EFE  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4D36  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4CFE  
              _change_state_to_menu_23 4ECE                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4FEE                _change_state_to_logs_12 4FBE  
              _change_state_to_logs_22 4F8E                _change_state_to_logs_23 504C  
              _change_state_to_logs_33 4F5E                _change_state_to_logs_34 4F2E  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 386A                             _EEPROMTest 531C  
                      _I2C_Master_Init 4976                       __size_of_readADC 002C  
                      _I2C_Master_Read 501E                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5282  
                      _I2C_Master_Stop 52FC                       __size_of_isdigit 002A  
                             _delay_ms 50FC                         _printSortTimer 29B6  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3C56                               __ptext10 50FC  
                             __ptext11 3E52                               __ptext20 507A  
                             __ptext12 49D6                               __ptext21 51DE  
                             __ptext13 39F6                               __ptext30 501E  
                             __ptext22 4C76                               __ptext14 3D6A  
                             __ptext31 5282                               __ptext23 08CA  
                             __ptext15 5254                               __ptext40 0012  
                             __ptext32 4CFE                               __ptext24 242C  
                             __ptext16 4E3E                               __ptext41 45D8  
                             __ptext33 4D36                               __ptext25 4D6E  
                             __ptext17 4440                               __ptext50 3872  
                             __ptext42 2C5E                               __ptext34 439E  
                             __ptext26 44CC                               __ptext18 4976  
                             __ptext51 1604                               __ptext43 50A6  
                             __ptext35 40CE                               __ptext27 52E0  
                             __ptext19 418C                               __ptext60 32FC  
                             __ptext52 52A8                               __ptext44 465C  
                             __ptext36 3C56                               __ptext28 52FC  
                             __ptext61 483C                               __ptext53 50D2  
                             __ptext45 4A32                               __ptext37 212E  
                             __ptext29 5304                               __ptext70 4EFE  
                             __ptext62 26F6                               __ptext54 4DA4  
                             __ptext46 531C                               __ptext38 4C2A  
                             __ptext71 4F2E                               __ptext63 5124  
                             __ptext55 4914                               __ptext47 1A3C  
                             __ptext39 3F34                               __ptext80 29B6  
                             __ptext72 4F5E                               __ptext64 2EA6  
                             __ptext56 46E0                               __ptext48 4A8E  
                             __ptext81 1DC0                               __ptext73 504C  
                             __ptext65 4E0C                               __ptext57 52B8  
                             __ptext49 4552                               __ptext90 52EA  
                             __ptext82 52C8                               __ptext74 4F8E  
                             __ptext66 34F6                               __ptext58 48AC  
                             __ptext91 530C                               __ptext83 5200  
                             __ptext75 4FBE                               __ptext67 4E6E  
                             __ptext92 5314                               __ptext84 514C  
                             __ptext76 4FEE                               __ptext68 4E9E  
                             __ptext93 5172                               __ptext85 4CBC  
                             __ptext77 5198                               __ptext69 4ECE  
                             __ptext94 5296                               __ptext86 4B3E  
                             __ptext78 3B3A                               __ptext95 521E  
                             __ptext87 52D4                               __ptext79 526C  
                             __ptext88 4AE8                               __ptext89 47CA  
                             _dispLogs 5198                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2058 0002                     __end_of_initServos 4AE8  
                        __size_of_Test 0114                          ?_EEPROM_write 00AB  
                             _initTime 51DE                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 4552  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 242C                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4ECE  
    __end_ofi2_change_state_to_menu_22 4E9E                               loadRTC@i 0096  
               __end_of_printSortTimer 2C5E                              putch@data 0082  
             __end_of_I2C_Master_Start 530C                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 52EA                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E8  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 0071  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 242C                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5254              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 29B6  
              __end_of_I2C_Master_Init 49D6                __end_of_I2C_Master_Read 504C  
              __end_of_I2C_Master_Wait 5296                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5304                            lcdInst@data 0082  
                        printRTC@F3226 0145                           retrieveLog@i 000E  
                          _retrieveLog 3B3A                    __end_ofi2_lcdNibble 4B3E  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 0073                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 49D6                        ___lwmod@counter 008B  
                    _updateServoStates 32FC                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                  ??_updateServoStates 002A                     i2printRTC@INT_time 002D  
