

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 17:25:12 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.40
   117                           ; Generated 01/12/2016 GMT
   118                           ; 
   119                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F4620 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataBANK1
   152  0056FA                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for UI@F3241
   156  0056FA  4D                 	db	77
   157  0056FB  4D                 	db	77
   158  0056FC  4D                 	db	77
   159  0056FD  00                 	db	0
   160                           
   161                           ;initializer for printRTC@F3231
   162  0056FE  4D                 	db	77
   163  0056FF  4D                 	db	77
   164  005700  4D                 	db	77
   165  005701  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  00FAA2                     __pmediumconst:
   169                           	opt stack 0
   170  00FAA2  00                 	db	0
   171  00FAA3                     _keys:
   172                           	opt stack 0
   173  00FAA3  31                 	db	49
   174  00FAA4  32                 	db	50
   175  00FAA5  33                 	db	51
   176  00FAA6  41                 	db	65
   177  00FAA7  34                 	db	52
   178  00FAA8  35                 	db	53
   179  00FAA9  36                 	db	54
   180  00FAAA  42                 	db	66
   181  00FAAB  37                 	db	55
   182  00FAAC  38                 	db	56
   183  00FAAD  39                 	db	57
   184  00FAAE  43                 	db	67
   185  00FAAF  2A                 	db	42
   186  00FAB0  30                 	db	48
   187  00FAB1  23                 	db	35
   188  00FAB2  44                 	db	68
   189  00FAB3  00                 	db	0
   190  00FAB4                     __end_of_keys:
   191                           	opt stack 0
   192  00FAB4                     _dpowers:
   193                           	opt stack 0
   194  00FAB4  0001               	dw	1
   195  00FAB6  000A               	dw	10
   196  00FAB8  0064               	dw	100
   197  00FABA  03E8               	dw	1000
   198  00FABC  2710               	dw	10000
   199  00FABE                     __end_of_dpowers:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _CMCONbits	set	4020
   208  0000                     _CVRCON	set	4021
   209  0000                     _EEADR	set	4009
   210  0000                     _EEADRH	set	4010
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _LATA	set	3977
   216  0000                     _LATAbits	set	3977
   217  0000                     _LATB	set	3978
   218  0000                     _LATBbits	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATCbits	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _PR2	set	4043
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T0CON	set	4053
   237  0000                     _T1CON	set	4045
   238  0000                     _T2CON	set	4042
   239  0000                     _T3CON	set	4017
   240  0000                     _TMR0H	set	4055
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR3H	set	4019
   245  0000                     _TMR3L	set	4018
   246  0000                     _TRISA	set	3986
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISE	set	3990
   251  0000                     _ACKDT	set	32301
   252  0000                     _ACKEN	set	32300
   253  0000                     _ADIE	set	31982
   254  0000                     _INT1IE	set	32643
   255  0000                     _INT1IF	set	32640
   256  0000                     _PEIE	set	32662
   257  0000                     _PEN	set	32298
   258  0000                     _RCEN	set	32299
   259  0000                     _RSEN	set	32297
   260  0000                     _SEN	set	32296
   261  0000                     _TMR0IE	set	32661
   262  0000                     _TMR0IF	set	32658
   263  0000                     _TMR0ON	set	32431
   264  0000                     _TMR1IE	set	31976
   265  0000                     _TMR1IF	set	31984
   266  0000                     _TMR1ON	set	32360
   267  0000                     _TMR2IE	set	31977
   268  0000                     _TMR2IF	set	31985
   269  0000                     _TMR2ON	set	32338
   270  0000                     _TMR3IE	set	32001
   271  0000                     _TMR3IF	set	32009
   272  0000                     _TMR3ON	set	32136
   273  0000                     _TRISC3	set	31907
   274  0000                     _TRISC4	set	31908
   275  0000                     _nRBPU	set	32655
   276  00FABE                     STR_21:
   277  00FABE  25                 	db	37
   278  00FABF  30                 	db	48	;'0'
   279  00FAC0  32                 	db	50	;'2'
   280  00FAC1  64                 	db	100	;'d'
   281  00FAC2  25                 	db	37
   282  00FAC3  73                 	db	115	;'s'
   283  00FAC4  20                 	db	32
   284  00FAC5  7C                 	db	124
   285  00FAC6  20                 	db	32
   286  00FAC7  25                 	db	37
   287  00FAC8  30                 	db	48	;'0'
   288  00FAC9  32                 	db	50	;'2'
   289  00FACA  64                 	db	100	;'d'
   290  00FACB  3A                 	db	58	;':'
   291  00FACC  25                 	db	37
   292  00FACD  30                 	db	48	;'0'
   293  00FACE  32                 	db	50	;'2'
   294  00FACF  64                 	db	100	;'d'
   295  00FAD0  3A                 	db	58	;':'
   296  00FAD1  25                 	db	37
   297  00FAD2  30                 	db	48	;'0'
   298  00FAD3  32                 	db	50	;'2'
   299  00FAD4  64                 	db	100	;'d'
   300  00FAD5  00                 	db	0
   301  00FAD6                     STR_66:
   302  00FAD6  28                 	db	40
   303  00FAD7  64                 	db	100	;'d'
   304  00FAD8  61                 	db	97	;'a'
   305  00FAD9  74                 	db	116	;'t'
   306  00FADA  61                 	db	97	;'a'
   307  00FADB  3A                 	db	58	;':'
   308  00FADC  20                 	db	32
   309  00FADD  25                 	db	37
   310  00FADE  75                 	db	117	;'u'
   311  00FADF  2C                 	db	44
   312  00FAE0  20                 	db	32
   313  00FAE1  61                 	db	97	;'a'
   314  00FAE2  64                 	db	100	;'d'
   315  00FAE3  64                 	db	100	;'d'
   316  00FAE4  72                 	db	114	;'r'
   317  00FAE5  3A                 	db	58	;':'
   318  00FAE6  20                 	db	32
   319  00FAE7  25                 	db	37
   320  00FAE8  75                 	db	117	;'u'
   321  00FAE9  29                 	db	41
   322  00FAEA  00                 	db	0
   323  00FAEB                     STR_111:
   324  00FAEB  44                 	db	68	;'D'
   325  00FAEC  20                 	db	32
   326  00FAED  57                 	db	87	;'W'
   327  00FAEE  49                 	db	73	;'I'
   328  00FAEF  4C                 	db	76	;'L'
   329  00FAF0  4C                 	db	76	;'L'
   330  00FAF1  20                 	db	32
   331  00FAF2  52                 	db	82	;'R'
   332  00FAF3  45                 	db	69	;'E'
   333  00FAF4  54                 	db	84	;'T'
   334  00FAF5  55                 	db	85	;'U'
   335  00FAF6  52                 	db	82	;'R'
   336  00FAF7  4E                 	db	78	;'N'
   337  00FAF8  20                 	db	32
   338  00FAF9  20                 	db	32
   339  00FAFA  20                 	db	32
   340  00FAFB  20                 	db	32
   341  00FAFC  00                 	db	0
   342  00FAFD                     STR_121:
   343  00FAFD  4F                 	db	79	;'O'
   344  00FAFE  54                 	db	84	;'T'
   345  00FAFF  48                 	db	72	;'H'
   346  00FB00  45                 	db	69	;'E'
   347  00FB01  52                 	db	82	;'R'
   348  00FB02  20                 	db	32
   349  00FB03  53                 	db	83	;'S'
   350  00FB04  45                 	db	69	;'E'
   351  00FB05  54                 	db	84	;'T'
   352  00FB06  53                 	db	83	;'S'
   353  00FB07  20                 	db	32
   354  00FB08  52                 	db	82	;'R'
   355  00FB09  41                 	db	65	;'A'
   356  00FB0A  35                 	db	53	;'5'
   357  00FB0B  20                 	db	32
   358  00FB0C  20                 	db	32
   359  00FB0D  20                 	db	32
   360  00FB0E  00                 	db	0
   361  00FB0F                     STR_120:
   362  00FB0F  53                 	db	83	;'S'
   363  00FB10  3A                 	db	58	;':'
   364  00FB11  20                 	db	32
   365  00FB12  44                 	db	68	;'D'
   366  00FB13  20                 	db	32
   367  00FB14  57                 	db	87	;'W'
   368  00FB15  49                 	db	73	;'I'
   369  00FB16  4C                 	db	76	;'L'
   370  00FB17  4C                 	db	76	;'L'
   371  00FB18  20                 	db	32
   372  00FB19  52                 	db	82	;'R'
   373  00FB1A  45                 	db	69	;'E'
   374  00FB1B  54                 	db	84	;'T'
   375  00FB1C  55                 	db	85	;'U'
   376  00FB1D  52                 	db	82	;'R'
   377  00FB1E  4E                 	db	78	;'N'
   378  00FB1F  20                 	db	32
   379  00FB20  00                 	db	0
   380  00FB21                     STR_123:
   381  00FB21  4F                 	db	79	;'O'
   382  00FB22  54                 	db	84	;'T'
   383  00FB23  48                 	db	72	;'H'
   384  00FB24  45                 	db	69	;'E'
   385  00FB25  52                 	db	82	;'R'
   386  00FB26  3A                 	db	58	;':'
   387  00FB27  20                 	db	32
   388  00FB28  43                 	db	67	;'C'
   389  00FB29  41                 	db	65	;'A'
   390  00FB2A  4D                 	db	77	;'M'
   391  00FB2B  20                 	db	32
   392  00FB2C  54                 	db	84	;'T'
   393  00FB2D  4F                 	db	79	;'O'
   394  00FB2E  47                 	db	71	;'G'
   395  00FB2F  47                 	db	71	;'G'
   396  00FB30  4C                 	db	76	;'L'
   397  00FB31  45                 	db	69	;'E'
   398  00FB32  00                 	db	0
   399  00FB33                     STR_129:
   400  00FB33  4F                 	db	79	;'O'
   401  00FB34  54                 	db	84	;'T'
   402  00FB35  48                 	db	72	;'H'
   403  00FB36  45                 	db	69	;'E'
   404  00FB37  52                 	db	82	;'R'
   405  00FB38  20                 	db	32
   406  00FB39  53                 	db	83	;'S'
   407  00FB3A  45                 	db	69	;'E'
   408  00FB3B  54                 	db	84	;'T'
   409  00FB3C  53                 	db	83	;'S'
   410  00FB3D  20                 	db	32
   411  00FB3E  50                 	db	80	;'P'
   412  00FB3F  55                 	db	85	;'U'
   413  00FB40  53                 	db	83	;'S'
   414  00FB41  48                 	db	72	;'H'
   415  00FB42  45                 	db	69	;'E'
   416  00FB43  52                 	db	82	;'R'
   417  00FB44  00                 	db	0
   418  00FB45                     STR_122:
   419  00FB45  44                 	db	68	;'D'
   420  00FB46  3A                 	db	58	;':'
   421  00FB47  20                 	db	32
   422  00FB48  52                 	db	82	;'R'
   423  00FB49  45                 	db	69	;'E'
   424  00FB4A  54                 	db	84	;'T'
   425  00FB4B  7C                 	db	124
   426  00FB4C  32                 	db	50	;'2'
   427  00FB4D  3A                 	db	58	;':'
   428  00FB4E  20                 	db	32
   429  00FB4F  43                 	db	67	;'C'
   430  00FB50  4F                 	db	79	;'O'
   431  00FB51  4E                 	db	78	;'N'
   432  00FB52  44                 	db	68	;'D'
   433  00FB53  20                 	db	32
   434  00FB54  25                 	db	37
   435  00FB55  64                 	db	100	;'d'
   436  00FB56  00                 	db	0
   437  00FB57                     STR_3:
   438  00FB57  2D                 	db	45
   439  00FB58  2D                 	db	45
   440  00FB59  20                 	db	32
   441  00FB5A  4C                 	db	76	;'L'
   442  00FB5B  4F                 	db	79	;'O'
   443  00FB5C  47                 	db	71	;'G'
   444  00FB5D  20                 	db	32
   445  00FB5E  25                 	db	37
   446  00FB5F  32                 	db	50	;'2'
   447  00FB60  64                 	db	100	;'d'
   448  00FB61  20                 	db	32
   449  00FB62  48                 	db	72	;'H'
   450  00FB63  45                 	db	69	;'E'
   451  00FB64  52                 	db	82	;'R'
   452  00FB65  45                 	db	69	;'E'
   453  00FB66  2D                 	db	45
   454  00FB67  2D                 	db	45
   455  00FB68  00                 	db	0
   456  00FB69                     STR_1:
   457  00FB69  52                 	db	82	;'R'
   458  00FB6A  45                 	db	69	;'E'
   459  00FB6B  53                 	db	83	;'S'
   460  00FB6C  55                 	db	85	;'U'
   461  00FB6D  4C                 	db	76	;'L'
   462  00FB6E  54                 	db	84	;'T'
   463  00FB6F  53                 	db	83	;'S'
   464  00FB70  20                 	db	32
   465  00FB71  49                 	db	73	;'I'
   466  00FB72  4E                 	db	78	;'N'
   467  00FB73  20                 	db	32
   468  00FB74  4C                 	db	76	;'L'
   469  00FB75  4F                 	db	79	;'O'
   470  00FB76  47                 	db	71	;'G'
   471  00FB77  20                 	db	32
   472  00FB78  25                 	db	37
   473  00FB79  64                 	db	100	;'d'
   474  00FB7A  00                 	db	0
   475  00FB7B                     STR_102:
   476  00FB7B  4D                 	db	77	;'M'
   477  00FB7C  49                 	db	73	;'I'
   478  00FB7D  44                 	db	68	;'D'
   479  00FB7E  20                 	db	32
   480  00FB7F  2D                 	db	45
   481  00FB80  2D                 	db	45
   482  00FB81  20                 	db	32
   483  00FB82  32                 	db	50	;'2'
   484  00FB83  73                 	db	115	;'s'
   485  00FB84  20                 	db	32
   486  00FB85  20                 	db	32
   487  00FB86  20                 	db	32
   488  00FB87  20                 	db	32
   489  00FB88  20                 	db	32
   490  00FB89  20                 	db	32
   491  00FB8A  20                 	db	32
   492  00FB8B  00                 	db	0
   493  00FB8C                     STR_105:
   494  00FB8C  44                 	db	68	;'D'
   495  00FB8D  52                 	db	82	;'R'
   496  00FB8E  4F                 	db	79	;'O'
   497  00FB8F  50                 	db	80	;'P'
   498  00FB90  20                 	db	32
   499  00FB91  2D                 	db	45
   500  00FB92  2D                 	db	45
   501  00FB93  20                 	db	32
   502  00FB94  32                 	db	50	;'2'
   503  00FB95  73                 	db	115	;'s'
   504  00FB96  20                 	db	32
   505  00FB97  20                 	db	32
   506  00FB98  20                 	db	32
   507  00FB99  20                 	db	32
   508  00FB9A  20                 	db	32
   509  00FB9B  20                 	db	32
   510  00FB9C  00                 	db	0
   511  00FB9D                     STR_99:
   512  00FB9D  4C                 	db	76	;'L'
   513  00FB9E  45                 	db	69	;'E'
   514  00FB9F  46                 	db	70	;'F'
   515  00FBA0  54                 	db	84	;'T'
   516  00FBA1  20                 	db	32
   517  00FBA2  2D                 	db	45
   518  00FBA3  2D                 	db	45
   519  00FBA4  20                 	db	32
   520  00FBA5  32                 	db	50	;'2'
   521  00FBA6  73                 	db	115	;'s'
   522  00FBA7  20                 	db	32
   523  00FBA8  20                 	db	32
   524  00FBA9  20                 	db	32
   525  00FBAA  20                 	db	32
   526  00FBAB  20                 	db	32
   527  00FBAC  20                 	db	32
   528  00FBAD  00                 	db	0
   529  00FBAE                     STR_104:
   530  00FBAE  4C                 	db	76	;'L'
   531  00FBAF  45                 	db	69	;'E'
   532  00FBB0  56                 	db	86	;'V'
   533  00FBB1  45                 	db	69	;'E'
   534  00FBB2  4C                 	db	76	;'L'
   535  00FBB3  20                 	db	32
   536  00FBB4  2D                 	db	45
   537  00FBB5  2D                 	db	45
   538  00FBB6  20                 	db	32
   539  00FBB7  32                 	db	50	;'2'
   540  00FBB8  73                 	db	115	;'s'
   541  00FBB9  20                 	db	32
   542  00FBBA  20                 	db	32
   543  00FBBB  20                 	db	32
   544  00FBBC  20                 	db	32
   545  00FBBD  20                 	db	32
   546  00FBBE  00                 	db	0
   547  00FBBF                     STR_98:
   548  00FBBF  52                 	db	82	;'R'
   549  00FBC0  49                 	db	73	;'I'
   550  00FBC1  47                 	db	71	;'G'
   551  00FBC2  48                 	db	72	;'H'
   552  00FBC3  54                 	db	84	;'T'
   553  00FBC4  20                 	db	32
   554  00FBC5  2D                 	db	45
   555  00FBC6  2D                 	db	45
   556  00FBC7  20                 	db	32
   557  00FBC8  32                 	db	50	;'2'
   558  00FBC9  73                 	db	115	;'s'
   559  00FBCA  20                 	db	32
   560  00FBCB  20                 	db	32
   561  00FBCC  20                 	db	32
   562  00FBCD  20                 	db	32
   563  00FBCE  20                 	db	32
   564  00FBCF  00                 	db	0
   565  00FBD0                     STR_97:
   566  00FBD0  4D                 	db	77	;'M'
   567  00FBD1  49                 	db	73	;'I'
   568  00FBD2  44                 	db	68	;'D'
   569  00FBD3  44                 	db	68	;'D'
   570  00FBD4  4C                 	db	76	;'L'
   571  00FBD5  45                 	db	69	;'E'
   572  00FBD6  20                 	db	32
   573  00FBD7  2D                 	db	45
   574  00FBD8  2D                 	db	45
   575  00FBD9  20                 	db	32
   576  00FBDA  32                 	db	50	;'2'
   577  00FBDB  73                 	db	115	;'s'
   578  00FBDC  20                 	db	32
   579  00FBDD  20                 	db	32
   580  00FBDE  20                 	db	32
   581  00FBDF  20                 	db	32
   582  00FBE0  00                 	db	0
   583  00FBE1                     STR_112:
   584  00FBE1  4F                 	db	79	;'O'
   585  00FBE2  54                 	db	84	;'T'
   586  00FBE3  48                 	db	72	;'H'
   587  00FBE4  45                 	db	69	;'E'
   588  00FBE5  52                 	db	82	;'R'
   589  00FBE6  20                 	db	32
   590  00FBE7  53                 	db	83	;'S'
   591  00FBE8  45                 	db	69	;'E'
   592  00FBE9  54                 	db	84	;'T'
   593  00FBEA  53                 	db	83	;'S'
   594  00FBEB  20                 	db	32
   595  00FBEC  44                 	db	68	;'D'
   596  00FBED  43                 	db	67	;'C'
   597  00FBEE  20                 	db	32
   598  00FBEF  20                 	db	32
   599  00FBF0  20                 	db	32
   600  00FBF1  00                 	db	0
   601  00FBF2                     STR_118:
   602  00FBF2  44                 	db	68	;'D'
   603  00FBF3  20                 	db	32
   604  00FBF4  57                 	db	87	;'W'
   605  00FBF5  49                 	db	73	;'I'
   606  00FBF6  4C                 	db	76	;'L'
   607  00FBF7  4C                 	db	76	;'L'
   608  00FBF8  20                 	db	32
   609  00FBF9  52                 	db	82	;'R'
   610  00FBFA  45                 	db	69	;'E'
   611  00FBFB  54                 	db	84	;'T'
   612  00FBFC  55                 	db	85	;'U'
   613  00FBFD  52                 	db	82	;'R'
   614  00FBFE  4E                 	db	78	;'N'
   615  00FBFF  20                 	db	32
   616  00FC00  20                 	db	32
   617  00FC01  20                 	db	32
   618  00FC02  00                 	db	0
   619  00FC03                     STR_115:
   620  00FC03  35                 	db	53	;'5'
   621  00FC04  3A                 	db	58	;':'
   622  00FC05  48                 	db	72	;'H'
   623  00FC06  7C                 	db	124
   624  00FC07  36                 	db	54	;'6'
   625  00FC08  3A                 	db	58	;':'
   626  00FC09  4C                 	db	76	;'L'
   627  00FC0A  7C                 	db	124
   628  00FC0B  49                 	db	73	;'I'
   629  00FC0C  52                 	db	82	;'R'
   630  00FC0D  3A                 	db	58	;':'
   631  00FC0E  25                 	db	37
   632  00FC0F  64                 	db	100	;'d'
   633  00FC10  20                 	db	32
   634  00FC11  20                 	db	32
   635  00FC12  20                 	db	32
   636  00FC13  00                 	db	0
   637  00FC14                     STR_113:
   638  00FC14  31                 	db	49	;'1'
   639  00FC15  3A                 	db	58	;':'
   640  00FC16  20                 	db	32
   641  00FC17  44                 	db	68	;'D'
   642  00FC18  43                 	db	67	;'C'
   643  00FC19  20                 	db	32
   644  00FC1A  7C                 	db	124
   645  00FC1B  20                 	db	32
   646  00FC1C  41                 	db	65	;'A'
   647  00FC1D  3A                 	db	58	;':'
   648  00FC1E  20                 	db	32
   649  00FC1F  41                 	db	65	;'A'
   650  00FC20  52                 	db	82	;'R'
   651  00FC21  4D                 	db	77	;'M'
   652  00FC22  20                 	db	32
   653  00FC23  20                 	db	32
   654  00FC24  00                 	db	0
   655  00FC25                     STR_100:
   656  00FC25  4D                 	db	77	;'M'
   657  00FC26  49                 	db	73	;'I'
   658  00FC27  44                 	db	68	;'D'
   659  00FC28  2D                 	db	45
   660  00FC29  4C                 	db	76	;'L'
   661  00FC2A  45                 	db	69	;'E'
   662  00FC2B  46                 	db	70	;'F'
   663  00FC2C  54                 	db	84	;'T'
   664  00FC2D  20                 	db	32
   665  00FC2E  2D                 	db	45
   666  00FC2F  2D                 	db	45
   667  00FC30  20                 	db	32
   668  00FC31  32                 	db	50	;'2'
   669  00FC32  73                 	db	115	;'s'
   670  00FC33  20                 	db	32
   671  00FC34  20                 	db	32
   672  00FC35  00                 	db	0
   673  00FC36                     STR_101:
   674  00FC36  4D                 	db	77	;'M'
   675  00FC37  49                 	db	73	;'I'
   676  00FC38  44                 	db	68	;'D'
   677  00FC39  2D                 	db	45
   678  00FC3A  52                 	db	82	;'R'
   679  00FC3B  49                 	db	73	;'I'
   680  00FC3C  47                 	db	71	;'G'
   681  00FC3D  48                 	db	72	;'H'
   682  00FC3E  54                 	db	84	;'T'
   683  00FC3F  20                 	db	32
   684  00FC40  2D                 	db	45
   685  00FC41  2D                 	db	45
   686  00FC42  20                 	db	32
   687  00FC43  32                 	db	50	;'2'
   688  00FC44  73                 	db	115	;'s'
   689  00FC45  20                 	db	32
   690  00FC46  00                 	db	0
   691  00FC47  45                 	db	69	;'E'
   692  00FC48  4C                 	db	76	;'L'
   693  00FC49  53                 	db	83	;'S'
   694  00FC4A  45                 	db	69	;'E'
   695  00FC4B  20                 	db	32
   696  00FC4C  54                 	db	84	;'T'
   697  00FC4D  4F                 	db	79	;'O'
   698  00FC4E  47                 	db	71	;'G'
   699  00FC4F  47                 	db	71	;'G'
   700  00FC50  4C                 	db	76	;'L'
   701  00FC51  45                 	db	69	;'E'
   702  00FC52  53                 	db	83	;'S'
   703  00FC53  20                 	db	32
   704  00FC54  52                 	db	82	;'R'
   705  00FC55  41                 	db	65	;'A'
   706  00FC56  35                 	db	53	;'5'
   707  00FC57  00                 	db	0
   708  00FC58                     STR_72:
   709  00FC58  41                 	db	65	;'A'
   710  00FC59  4C                 	db	76	;'L'
   711  00FC5A  47                 	db	71	;'G'
   712  00FC5B  31                 	db	49	;'1'
   713  00FC5C  3A                 	db	58	;':'
   714  00FC5D  20                 	db	32
   715  00FC5E  39                 	db	57	;'9'
   716  00FC5F  20                 	db	32
   717  00FC60  50                 	db	80	;'P'
   718  00FC61  4F                 	db	79	;'O'
   719  00FC62  50                 	db	80	;'P'
   720  00FC63  4E                 	db	78	;'N'
   721  00FC64  4F                 	db	79	;'O'
   722  00FC65  54                 	db	84	;'T'
   723  00FC66  41                 	db	65	;'A'
   724  00FC67  42                 	db	66	;'B'
   725  00FC68  00                 	db	0
   726  00FC69                     STR_92:
   727  00FC69  54                 	db	84	;'T'
   728  00FC6A  53                 	db	83	;'S'
   729  00FC6B  54                 	db	84	;'T'
   730  00FC6C  3A                 	db	58	;':'
   731  00FC6D  20                 	db	32
   732  00FC6E  43                 	db	67	;'C'
   733  00FC6F  4F                 	db	79	;'O'
   734  00FC70  4E                 	db	78	;'N'
   735  00FC71  44                 	db	68	;'D'
   736  00FC72  20                 	db	32
   737  00FC73  53                 	db	83	;'S'
   738  00FC74  4F                 	db	79	;'O'
   739  00FC75  4C                 	db	76	;'L'
   740  00FC76  4E                 	db	78	;'N'
   741  00FC77  27                 	db	39
   742  00FC78  44                 	db	68	;'D'
   743  00FC79  00                 	db	0
   744  00FC7A                     STR_94:
   745  00FC7A  54                 	db	84	;'T'
   746  00FC7B  53                 	db	83	;'S'
   747  00FC7C  54                 	db	84	;'T'
   748  00FC7D  3A                 	db	58	;':'
   749  00FC7E  20                 	db	32
   750  00FC7F  50                 	db	80	;'P'
   751  00FC80  55                 	db	85	;'U'
   752  00FC81  53                 	db	83	;'S'
   753  00FC82  48                 	db	72	;'H'
   754  00FC83  20                 	db	32
   755  00FC84  53                 	db	83	;'S'
   756  00FC85  4F                 	db	79	;'O'
   757  00FC86  4C                 	db	76	;'L'
   758  00FC87  4E                 	db	78	;'N'
   759  00FC88  27                 	db	39
   760  00FC89  44                 	db	68	;'D'
   761  00FC8A  00                 	db	0
   762  00FC8B                     STR_68:
   763  00FC8B  32                 	db	50	;'2'
   764  00FC8C  2E                 	db	46
   765  00FC8D  53                 	db	83	;'S'
   766  00FC8E  4E                 	db	78	;'N'
   767  00FC8F  52                 	db	82	;'R'
   768  00FC90  7C                 	db	124
   769  00FC91  34                 	db	52	;'4'
   770  00FC92  2E                 	db	46
   771  00FC93  48                 	db	72	;'H'
   772  00FC94  49                 	db	73	;'I'
   773  00FC95  7C                 	db	124
   774  00FC96  35                 	db	53	;'5'
   775  00FC97  2E                 	db	46
   776  00FC98  4D                 	db	77	;'M'
   777  00FC99  45                 	db	69	;'E'
   778  00FC9A  44                 	db	68	;'D'
   779  00FC9B  00                 	db	0
   780  00FC9C                     STR_69:
   781  00FC9C  42                 	db	66	;'B'
   782  00FC9D  2E                 	db	46
   783  00FC9E  50                 	db	80	;'P'
   784  00FC9F  4C                 	db	76	;'L'
   785  00FCA0  41                 	db	65	;'A'
   786  00FCA1  7C                 	db	124
   787  00FCA2  38                 	db	56	;'8'
   788  00FCA3  2E                 	db	46
   789  00FCA4  53                 	db	83	;'S'
   790  00FCA5  56                 	db	86	;'V'
   791  00FCA6  7C                 	db	124
   792  00FCA7  39                 	db	57	;'9'
   793  00FCA8  2E                 	db	46
   794  00FCA9  42                 	db	66	;'B'
   795  00FCAA  4C                 	db	76	;'L'
   796  00FCAB  4B                 	db	75	;'K'
   797  00FCAC  00                 	db	0
   798  00FCAD                     STR_127:
   799  00FCAD  45                 	db	69	;'E'
   800  00FCAE  4C                 	db	76	;'L'
   801  00FCAF  53                 	db	83	;'S'
   802  00FCB0  45                 	db	69	;'E'
   803  00FCB1  20                 	db	32
   804  00FCB2  54                 	db	84	;'T'
   805  00FCB3  4F                 	db	79	;'O'
   806  00FCB4  47                 	db	71	;'G'
   807  00FCB5  47                 	db	71	;'G'
   808  00FCB6  4C                 	db	76	;'L'
   809  00FCB7  45                 	db	69	;'E'
   810  00FCB8  53                 	db	83	;'S'
   811  00FCB9  20                 	db	32
   812  00FCBA  41                 	db	65	;'A'
   813  00FCBB  52                 	db	82	;'R'
   814  00FCBC  4D                 	db	77	;'M'
   815  00FCBD  00                 	db	0
   816  00FCBE                     STR_110:
   817  00FCBE  54                 	db	84	;'T'
   818  00FCBF  53                 	db	83	;'S'
   819  00FCC0  54                 	db	84	;'T'
   820  00FCC1  3A                 	db	58	;':'
   821  00FCC2  20                 	db	32
   822  00FCC3  42                 	db	66	;'B'
   823  00FCC4  4F                 	db	79	;'O'
   824  00FCC5  54                 	db	84	;'T'
   825  00FCC6  48                 	db	72	;'H'
   826  00FCC7  20                 	db	32
   827  00FCC8  53                 	db	83	;'S'
   828  00FCC9  45                 	db	69	;'E'
   829  00FCCA  52                 	db	82	;'R'
   830  00FCCB  56                 	db	86	;'V'
   831  00FCCC  4F                 	db	79	;'O'
   832  00FCCD  53                 	db	83	;'S'
   833  00FCCE  00                 	db	0
   834  00FCCF                     STR_41:
   835  00FCCF  4C                 	db	76	;'L'
   836  00FCD0  4F                 	db	79	;'O'
   837  00FCD1  47                 	db	71	;'G'
   838  00FCD2  20                 	db	32
   839  00FCD3  31                 	db	49	;'1'
   840  00FCD4  20                 	db	32
   841  00FCD5  20                 	db	32
   842  00FCD6  20                 	db	32
   843  00FCD7  20                 	db	32
   844  00FCD8  20                 	db	32
   845  00FCD9  20                 	db	32
   846  00FCDA  20                 	db	32
   847  00FCDB  20                 	db	32
   848  00FCDC  20                 	db	32
   849  00FCDD  20                 	db	32
   850  00FCDE  20                 	db	32
   851  00FCDF  00                 	db	0
   852  00FCE0                     STR_40:
   853  00FCE0  4C                 	db	76	;'L'
   854  00FCE1  4F                 	db	79	;'O'
   855  00FCE2  47                 	db	71	;'G'
   856  00FCE3  20                 	db	32
   857  00FCE4  32                 	db	50	;'2'
   858  00FCE5  20                 	db	32
   859  00FCE6  20                 	db	32
   860  00FCE7  20                 	db	32
   861  00FCE8  20                 	db	32
   862  00FCE9  20                 	db	32
   863  00FCEA  20                 	db	32
   864  00FCEB  20                 	db	32
   865  00FCEC  20                 	db	32
   866  00FCED  20                 	db	32
   867  00FCEE  20                 	db	32
   868  00FCEF  20                 	db	32
   869  00FCF0  00                 	db	0
   870  00FCF1                     STR_44:
   871  00FCF1  4C                 	db	76	;'L'
   872  00FCF2  4F                 	db	79	;'O'
   873  00FCF3  47                 	db	71	;'G'
   874  00FCF4  20                 	db	32
   875  00FCF5  33                 	db	51	;'3'
   876  00FCF6  20                 	db	32
   877  00FCF7  20                 	db	32
   878  00FCF8  20                 	db	32
   879  00FCF9  20                 	db	32
   880  00FCFA  20                 	db	32
   881  00FCFB  20                 	db	32
   882  00FCFC  20                 	db	32
   883  00FCFD  20                 	db	32
   884  00FCFE  20                 	db	32
   885  00FCFF  20                 	db	32
   886  00FD00  20                 	db	32
   887  00FD01  00                 	db	0
   888  00FD02                     STR_48:
   889  00FD02  4C                 	db	76	;'L'
   890  00FD03  4F                 	db	79	;'O'
   891  00FD04  47                 	db	71	;'G'
   892  00FD05  20                 	db	32
   893  00FD06  34                 	db	52	;'4'
   894  00FD07  20                 	db	32
   895  00FD08  20                 	db	32
   896  00FD09  20                 	db	32
   897  00FD0A  20                 	db	32
   898  00FD0B  20                 	db	32
   899  00FD0C  20                 	db	32
   900  00FD0D  20                 	db	32
   901  00FD0E  20                 	db	32
   902  00FD0F  20                 	db	32
   903  00FD10  20                 	db	32
   904  00FD11  20                 	db	32
   905  00FD12  00                 	db	0
   906  00FD13                     STR_36:
   907  00FD13  33                 	db	51	;'3'
   908  00FD14  2E                 	db	46
   909  00FD15  20                 	db	32
   910  00FD16  4C                 	db	76	;'L'
   911  00FD17  4F                 	db	79	;'O'
   912  00FD18  47                 	db	71	;'G'
   913  00FD19  53                 	db	83	;'S'
   914  00FD1A  20                 	db	32
   915  00FD1B  20                 	db	32
   916  00FD1C  20                 	db	32
   917  00FD1D  20                 	db	32
   918  00FD1E  20                 	db	32
   919  00FD1F  20                 	db	32
   920  00FD20  20                 	db	32
   921  00FD21  20                 	db	32
   922  00FD22  20                 	db	32
   923  00FD23  00                 	db	0
   924  00FD24                     STR_32:
   925  00FD24  32                 	db	50	;'2'
   926  00FD25  2E                 	db	46
   927  00FD26  20                 	db	32
   928  00FD27  53                 	db	83	;'S'
   929  00FD28  4F                 	db	79	;'O'
   930  00FD29  52                 	db	82	;'R'
   931  00FD2A  54                 	db	84	;'T'
   932  00FD2B  20                 	db	32
   933  00FD2C  20                 	db	32
   934  00FD2D  20                 	db	32
   935  00FD2E  20                 	db	32
   936  00FD2F  20                 	db	32
   937  00FD30  20                 	db	32
   938  00FD31  20                 	db	32
   939  00FD32  20                 	db	32
   940  00FD33  20                 	db	32
   941  00FD34  00                 	db	0
   942  00FD35                     STR_33:
   943  00FD35  31                 	db	49	;'1'
   944  00FD36  2E                 	db	46
   945  00FD37  20                 	db	32
   946  00FD38  44                 	db	68	;'D'
   947  00FD39  41                 	db	65	;'A'
   948  00FD3A  54                 	db	84	;'T'
   949  00FD3B  45                 	db	69	;'E'
   950  00FD3C  2F                 	db	47
   951  00FD3D  54                 	db	84	;'T'
   952  00FD3E  49                 	db	73	;'I'
   953  00FD3F  4D                 	db	77	;'M'
   954  00FD40  45                 	db	69	;'E'
   955  00FD41  20                 	db	32
   956  00FD42  20                 	db	32
   957  00FD43  20                 	db	32
   958  00FD44  20                 	db	32
   959  00FD45  00                 	db	0
   960  00FD46                     STR_24:
   961  00FD46  20                 	db	32
   962  00FD47  2D                 	db	45
   963  00FD48  2D                 	db	45
   964  00FD49  20                 	db	32
   965  00FD4A  50                 	db	80	;'P'
   966  00FD4B  4F                 	db	79	;'O'
   967  00FD4C  50                 	db	80	;'P'
   968  00FD4D  20                 	db	32
   969  00FD4E  20                 	db	32
   970  00FD4F  43                 	db	67	;'C'
   971  00FD50  41                 	db	65	;'A'
   972  00FD51  4E                 	db	78	;'N'
   973  00FD52  20                 	db	32
   974  00FD53  2D                 	db	45
   975  00FD54  2D                 	db	45
   976  00FD55  20                 	db	32
   977  00FD56  00                 	db	0
   978  00FD57                     STR_26:
   979  00FD57  20                 	db	32
   980  00FD58  2D                 	db	45
   981  00FD59  2D                 	db	45
   982  00FD5A  20                 	db	32
   983  00FD5B  53                 	db	83	;'S'
   984  00FD5C  4F                 	db	79	;'O'
   985  00FD5D  55                 	db	85	;'U'
   986  00FD5E  50                 	db	80	;'P'
   987  00FD5F  20                 	db	32
   988  00FD60  43                 	db	67	;'C'
   989  00FD61  41                 	db	65	;'A'
   990  00FD62  4E                 	db	78	;'N'
   991  00FD63  20                 	db	32
   992  00FD64  2D                 	db	45
   993  00FD65  2D                 	db	45
   994  00FD66  20                 	db	32
   995  00FD67  00                 	db	0
   996  00FD68                     STR_28:
   997  00FD68  2D                 	db	45
   998  00FD69  2D                 	db	45
   999  00FD6A  20                 	db	32
  1000  00FD6B  54                 	db	84	;'T'
  1001  00FD6C  4F                 	db	79	;'O'
  1002  00FD6D  54                 	db	84	;'T'
  1003  00FD6E  41                 	db	65	;'A'
  1004  00FD6F  4C                 	db	76	;'L'
  1005  00FD70  20                 	db	32
  1006  00FD71  43                 	db	67	;'C'
  1007  00FD72  41                 	db	65	;'A'
  1008  00FD73  4E                 	db	78	;'N'
  1009  00FD74  53                 	db	83	;'S'
  1010  00FD75  20                 	db	32
  1011  00FD76  2D                 	db	45
  1012  00FD77  2D                 	db	45
  1013  00FD78  00                 	db	0
  1014  00FD79                     STR_39:
  1015  00FD79  4C                 	db	76	;'L'
  1016  00FD7A  4F                 	db	79	;'O'
  1017  00FD7B  47                 	db	71	;'G'
  1018  00FD7C  20                 	db	32
  1019  00FD7D  31                 	db	49	;'1'
  1020  00FD7E  20                 	db	32
  1021  00FD7F  20                 	db	32
  1022  00FD80  20                 	db	32
  1023  00FD81  20                 	db	32
  1024  00FD82  20                 	db	32
  1025  00FD83  20                 	db	32
  1026  00FD84  20                 	db	32
  1027  00FD85  20                 	db	32
  1028  00FD86  20                 	db	32
  1029  00FD87  20                 	db	32
  1030  00FD88  3C                 	db	60	;'<'
  1031  00FD89  00                 	db	0
  1032  00FD8A                     STR_42:
  1033  00FD8A  4C                 	db	76	;'L'
  1034  00FD8B  4F                 	db	79	;'O'
  1035  00FD8C  47                 	db	71	;'G'
  1036  00FD8D  20                 	db	32
  1037  00FD8E  32                 	db	50	;'2'
  1038  00FD8F  20                 	db	32
  1039  00FD90  20                 	db	32
  1040  00FD91  20                 	db	32
  1041  00FD92  20                 	db	32
  1042  00FD93  20                 	db	32
  1043  00FD94  20                 	db	32
  1044  00FD95  20                 	db	32
  1045  00FD96  20                 	db	32
  1046  00FD97  20                 	db	32
  1047  00FD98  20                 	db	32
  1048  00FD99  3C                 	db	60	;'<'
  1049  00FD9A  00                 	db	0
  1050  00FD9B                     STR_46:
  1051  00FD9B  4C                 	db	76	;'L'
  1052  00FD9C  4F                 	db	79	;'O'
  1053  00FD9D  47                 	db	71	;'G'
  1054  00FD9E  20                 	db	32
  1055  00FD9F  33                 	db	51	;'3'
  1056  00FDA0  20                 	db	32
  1057  00FDA1  20                 	db	32
  1058  00FDA2  20                 	db	32
  1059  00FDA3  20                 	db	32
  1060  00FDA4  20                 	db	32
  1061  00FDA5  20                 	db	32
  1062  00FDA6  20                 	db	32
  1063  00FDA7  20                 	db	32
  1064  00FDA8  20                 	db	32
  1065  00FDA9  20                 	db	32
  1066  00FDAA  3C                 	db	60	;'<'
  1067  00FDAB  00                 	db	0
  1068  00FDAC                     STR_50:
  1069  00FDAC  4C                 	db	76	;'L'
  1070  00FDAD  4F                 	db	79	;'O'
  1071  00FDAE  47                 	db	71	;'G'
  1072  00FDAF  20                 	db	32
  1073  00FDB0  34                 	db	52	;'4'
  1074  00FDB1  20                 	db	32
  1075  00FDB2  20                 	db	32
  1076  00FDB3  20                 	db	32
  1077  00FDB4  20                 	db	32
  1078  00FDB5  20                 	db	32
  1079  00FDB6  20                 	db	32
  1080  00FDB7  20                 	db	32
  1081  00FDB8  20                 	db	32
  1082  00FDB9  20                 	db	32
  1083  00FDBA  20                 	db	32
  1084  00FDBB  3C                 	db	60	;'<'
  1085  00FDBC  00                 	db	0
  1086  00FDBD                     STR_38:
  1087  00FDBD  33                 	db	51	;'3'
  1088  00FDBE  2E                 	db	46
  1089  00FDBF  20                 	db	32
  1090  00FDC0  4C                 	db	76	;'L'
  1091  00FDC1  4F                 	db	79	;'O'
  1092  00FDC2  47                 	db	71	;'G'
  1093  00FDC3  53                 	db	83	;'S'
  1094  00FDC4  20                 	db	32
  1095  00FDC5  20                 	db	32
  1096  00FDC6  20                 	db	32
  1097  00FDC7  20                 	db	32
  1098  00FDC8  20                 	db	32
  1099  00FDC9  20                 	db	32
  1100  00FDCA  20                 	db	32
  1101  00FDCB  20                 	db	32
  1102  00FDCC  3C                 	db	60	;'<'
  1103  00FDCD  00                 	db	0
  1104  00FDCE                     STR_34:
  1105  00FDCE  32                 	db	50	;'2'
  1106  00FDCF  2E                 	db	46
  1107  00FDD0  20                 	db	32
  1108  00FDD1  53                 	db	83	;'S'
  1109  00FDD2  4F                 	db	79	;'O'
  1110  00FDD3  52                 	db	82	;'R'
  1111  00FDD4  54                 	db	84	;'T'
  1112  00FDD5  20                 	db	32
  1113  00FDD6  20                 	db	32
  1114  00FDD7  20                 	db	32
  1115  00FDD8  20                 	db	32
  1116  00FDD9  20                 	db	32
  1117  00FDDA  20                 	db	32
  1118  00FDDB  20                 	db	32
  1119  00FDDC  20                 	db	32
  1120  00FDDD  3C                 	db	60	;'<'
  1121  00FDDE  00                 	db	0
  1122  00FDDF                     STR_31:
  1123  00FDDF  31                 	db	49	;'1'
  1124  00FDE0  2E                 	db	46
  1125  00FDE1  20                 	db	32
  1126  00FDE2  44                 	db	68	;'D'
  1127  00FDE3  41                 	db	65	;'A'
  1128  00FDE4  54                 	db	84	;'T'
  1129  00FDE5  45                 	db	69	;'E'
  1130  00FDE6  2F                 	db	47
  1131  00FDE7  54                 	db	84	;'T'
  1132  00FDE8  49                 	db	73	;'I'
  1133  00FDE9  4D                 	db	77	;'M'
  1134  00FDEA  45                 	db	69	;'E'
  1135  00FDEB  20                 	db	32
  1136  00FDEC  20                 	db	32
  1137  00FDED  20                 	db	32
  1138  00FDEE  3C                 	db	60	;'<'
  1139  00FDEF  00                 	db	0
  1140  00FDF0                     STR_6:
  1141  00FDF0  50                 	db	80	;'P'
  1142  00FDF1  41                 	db	65	;'A'
  1143  00FDF2  55                 	db	85	;'U'
  1144  00FDF3  53                 	db	83	;'S'
  1145  00FDF4  45                 	db	69	;'E'
  1146  00FDF5  20                 	db	32
  1147  00FDF6  3C                 	db	60	;'<'
  1148  00FDF7  20                 	db	32
  1149  00FDF8  7C                 	db	124
  1150  00FDF9  20                 	db	32
  1151  00FDFA  42                 	db	66	;'B'
  1152  00FDFB  41                 	db	65	;'A'
  1153  00FDFC  43                 	db	67	;'C'
  1154  00FDFD  4B                 	db	75	;'K'
  1155  00FDFE  20                 	db	32
  1156  00FDFF  3E                 	db	62	;'>'
  1157  00FE00  00                 	db	0
  1158  00FE01                     STR_30:
  1159  00FE01  50                 	db	80	;'P'
  1160  00FE02  55                 	db	85	;'U'
  1161  00FE03  53                 	db	83	;'S'
  1162  00FE04  48                 	db	72	;'H'
  1163  00FE05  20                 	db	32
  1164  00FE06  54                 	db	84	;'T'
  1165  00FE07  4F                 	db	79	;'O'
  1166  00FE08  20                 	db	32
  1167  00FE09  43                 	db	67	;'C'
  1168  00FE0A  4F                 	db	79	;'O'
  1169  00FE0B  4E                 	db	78	;'N'
  1170  00FE0C  54                 	db	84	;'T'
  1171  00FE0D  49                 	db	73	;'I'
  1172  00FE0E  4E                 	db	78	;'N'
  1173  00FE0F  55                 	db	85	;'U'
  1174  00FE10  45                 	db	69	;'E'
  1175  00FE11  00                 	db	0
  1176  00FE12                     STR_27:
  1177  00FE12  4E                 	db	78	;'N'
  1178  00FE13  4C                 	db	76	;'L'
  1179  00FE14  41                 	db	65	;'A'
  1180  00FE15  42                 	db	66	;'B'
  1181  00FE16  3A                 	db	58	;':'
  1182  00FE17  20                 	db	32
  1183  00FE18  25                 	db	37
  1184  00FE19  64                 	db	100	;'d'
  1185  00FE1A  7C                 	db	124
  1186  00FE1B  4C                 	db	76	;'L'
  1187  00FE1C  41                 	db	65	;'A'
  1188  00FE1D  42                 	db	66	;'B'
  1189  00FE1E  3A                 	db	58	;':'
  1190  00FE1F  20                 	db	32
  1191  00FE20  25                 	db	37
  1192  00FE21  64                 	db	100	;'d'
  1193  00FE22  00                 	db	0
  1194  00FE23                     STR_25:
  1195  00FE23  4E                 	db	78	;'N'
  1196  00FE24  54                 	db	84	;'T'
  1197  00FE25  41                 	db	65	;'A'
  1198  00FE26  42                 	db	66	;'B'
  1199  00FE27  3A                 	db	58	;':'
  1200  00FE28  20                 	db	32
  1201  00FE29  25                 	db	37
  1202  00FE2A  64                 	db	100	;'d'
  1203  00FE2B  7C                 	db	124
  1204  00FE2C  54                 	db	84	;'T'
  1205  00FE2D  41                 	db	65	;'A'
  1206  00FE2E  42                 	db	66	;'B'
  1207  00FE2F  3A                 	db	58	;':'
  1208  00FE30  20                 	db	32
  1209  00FE31  25                 	db	37
  1210  00FE32  64                 	db	100	;'d'
  1211  00FE33  00                 	db	0
  1212  00FE34                     STR_83:
  1213  00FE34  4D                 	db	77	;'M'
  1214  00FE35  41                 	db	65	;'A'
  1215  00FE36  47                 	db	71	;'G'
  1216  00FE37  5F                 	db	95	;'_'
  1217  00FE38  73                 	db	115	;'s'
  1218  00FE39  69                 	db	105	;'i'
  1219  00FE3A  67                 	db	103	;'g'
  1220  00FE3B  6E                 	db	110	;'n'
  1221  00FE3C  61                 	db	97	;'a'
  1222  00FE3D  6C                 	db	108	;'l'
  1223  00FE3E  3A                 	db	58	;':'
  1224  00FE3F  20                 	db	32
  1225  00FE40  25                 	db	37
  1226  00FE41  64                 	db	100	;'d'
  1227  00FE42  20                 	db	32
  1228  00FE43  00                 	db	0
  1229  00FE44                     STR_103:
  1230  00FE44  54                 	db	84	;'T'
  1231  00FE45  53                 	db	83	;'S'
  1232  00FE46  54                 	db	84	;'T'
  1233  00FE47  3A                 	db	58	;':'
  1234  00FE48  20                 	db	32
  1235  00FE49  54                 	db	84	;'T'
  1236  00FE4A  49                 	db	73	;'I'
  1237  00FE4B  4C                 	db	76	;'L'
  1238  00FE4C  54                 	db	84	;'T'
  1239  00FE4D  20                 	db	32
  1240  00FE4E  53                 	db	83	;'S'
  1241  00FE4F  45                 	db	69	;'E'
  1242  00FE50  52                 	db	82	;'R'
  1243  00FE51  56                 	db	86	;'V'
  1244  00FE52  4F                 	db	79	;'O'
  1245  00FE53  00                 	db	0
  1246  00FE54                     STR_4:
  1247  00FE54  44                 	db	68	;'D'
  1248  00FE55  49                 	db	73	;'I'
  1249  00FE56  44                 	db	68	;'D'
  1250  00FE57  4E                 	db	78	;'N'
  1251  00FE58  27                 	db	39
  1252  00FE59  54                 	db	84	;'T'
  1253  00FE5A  20                 	db	32
  1254  00FE5B  43                 	db	67	;'C'
  1255  00FE5C  4F                 	db	79	;'O'
  1256  00FE5D  4D                 	db	77	;'M'
  1257  00FE5E  50                 	db	80	;'P'
  1258  00FE5F  4C                 	db	76	;'L'
  1259  00FE60  45                 	db	69	;'E'
  1260  00FE61  54                 	db	84	;'T'
  1261  00FE62  45                 	db	69	;'E'
  1262  00FE63  00                 	db	0
  1263  00FE64                     STR_80:
  1264  00FE64  49                 	db	73	;'I'
  1265  00FE65  52                 	db	82	;'R'
  1266  00FE66  5F                 	db	95	;'_'
  1267  00FE67  73                 	db	115	;'s'
  1268  00FE68  69                 	db	105	;'i'
  1269  00FE69  67                 	db	103	;'g'
  1270  00FE6A  6E                 	db	110	;'n'
  1271  00FE6B  61                 	db	97	;'a'
  1272  00FE6C  6C                 	db	108	;'l'
  1273  00FE6D  3A                 	db	58	;':'
  1274  00FE6E  20                 	db	32
  1275  00FE6F  25                 	db	37
  1276  00FE70  64                 	db	100	;'d'
  1277  00FE71  20                 	db	32
  1278  00FE72  00                 	db	0
  1279  00FE73                     STR_109:
  1280  00FE73  43                 	db	67	;'C'
  1281  00FE74  41                 	db	65	;'A'
  1282  00FE75  4D                 	db	77	;'M'
  1283  00FE76  20                 	db	32
  1284  00FE77  44                 	db	68	;'D'
  1285  00FE78  57                 	db	87	;'W'
  1286  00FE79  4E                 	db	78	;'N'
  1287  00FE7A  20                 	db	32
  1288  00FE7B  7C                 	db	124
  1289  00FE7C  52                 	db	82	;'R'
  1290  00FE7D  43                 	db	67	;'C'
  1291  00FE7E  30                 	db	48	;'0'
  1292  00FE7F  3D                 	db	61	;'='
  1293  00FE80  30                 	db	48	;'0'
  1294  00FE81  00                 	db	0
  1295  00FE82                     STR_108:
  1296  00FE82  43                 	db	67	;'C'
  1297  00FE83  41                 	db	65	;'A'
  1298  00FE84  4D                 	db	77	;'M'
  1299  00FE85  20                 	db	32
  1300  00FE86  55                 	db	85	;'U'
  1301  00FE87  50                 	db	80	;'P'
  1302  00FE88  20                 	db	32
  1303  00FE89  20                 	db	32
  1304  00FE8A  7C                 	db	124
  1305  00FE8B  52                 	db	82	;'R'
  1306  00FE8C  43                 	db	67	;'C'
  1307  00FE8D  30                 	db	48	;'0'
  1308  00FE8E  3D                 	db	61	;'='
  1309  00FE8F  31                 	db	49	;'1'
  1310  00FE90  00                 	db	0
  1311  00FE91                     STR_82:
  1312  00FE91  54                 	db	84	;'T'
  1313  00FE92  53                 	db	83	;'S'
  1314  00FE93  54                 	db	84	;'T'
  1315  00FE94  3A                 	db	58	;':'
  1316  00FE95  20                 	db	32
  1317  00FE96  4D                 	db	77	;'M'
  1318  00FE97  41                 	db	65	;'A'
  1319  00FE98  47                 	db	71	;'G'
  1320  00FE99  4E                 	db	78	;'N'
  1321  00FE9A  45                 	db	69	;'E'
  1322  00FE9B  54                 	db	84	;'T'
  1323  00FE9C  49                 	db	73	;'I'
  1324  00FE9D  53                 	db	83	;'S'
  1325  00FE9E  4D                 	db	77	;'M'
  1326  00FE9F  00                 	db	0
  1327  00FEA0                     STR_107:
  1328  00FEA0  54                 	db	84	;'T'
  1329  00FEA1  53                 	db	83	;'S'
  1330  00FEA2  54                 	db	84	;'T'
  1331  00FEA3  3A                 	db	58	;':'
  1332  00FEA4  20                 	db	32
  1333  00FEA5  43                 	db	67	;'C'
  1334  00FEA6  41                 	db	65	;'A'
  1335  00FEA7  4D                 	db	77	;'M'
  1336  00FEA8  20                 	db	32
  1337  00FEA9  53                 	db	83	;'S'
  1338  00FEAA  45                 	db	69	;'E'
  1339  00FEAB  52                 	db	82	;'R'
  1340  00FEAC  56                 	db	86	;'V'
  1341  00FEAD  4F                 	db	79	;'O'
  1342  00FEAE  00                 	db	0
  1343  00FEAF                     STR_96:
  1344  00FEAF  54                 	db	84	;'T'
  1345  00FEB0  53                 	db	83	;'S'
  1346  00FEB1  54                 	db	84	;'T'
  1347  00FEB2  3A                 	db	58	;':'
  1348  00FEB3  20                 	db	32
  1349  00FEB4  50                 	db	80	;'P'
  1350  00FEB5  41                 	db	65	;'A'
  1351  00FEB6  4E                 	db	78	;'N'
  1352  00FEB7  20                 	db	32
  1353  00FEB8  53                 	db	83	;'S'
  1354  00FEB9  45                 	db	69	;'E'
  1355  00FEBA  52                 	db	82	;'R'
  1356  00FEBB  56                 	db	86	;'V'
  1357  00FEBC  4F                 	db	79	;'O'
  1358  00FEBD  00                 	db	0
  1359  00FEBE                     STR_75:
  1360  00FEBE  41                 	db	65	;'A'
  1361  00FEBF  4C                 	db	76	;'L'
  1362  00FEC0  47                 	db	71	;'G'
  1363  00FEC1  34                 	db	52	;'4'
  1364  00FEC2  3A                 	db	58	;':'
  1365  00FEC3  20                 	db	32
  1366  00FEC4  41                 	db	65	;'A'
  1367  00FEC5  4C                 	db	76	;'L'
  1368  00FEC6  4C                 	db	76	;'L'
  1369  00FEC7  20                 	db	32
  1370  00FEC8  43                 	db	67	;'C'
  1371  00FEC9  41                 	db	65	;'A'
  1372  00FECA  4E                 	db	78	;'N'
  1373  00FECB  53                 	db	83	;'S'
  1374  00FECC  00                 	db	0
  1375  00FECD                     STR_90:
  1376  00FECD  54                 	db	84	;'T'
  1377  00FECE  53                 	db	83	;'S'
  1378  00FECF  54                 	db	84	;'T'
  1379  00FED0  3A                 	db	58	;':'
  1380  00FED1  20                 	db	32
  1381  00FED2  44                 	db	68	;'D'
  1382  00FED3  43                 	db	67	;'C'
  1383  00FED4  20                 	db	32
  1384  00FED5  4D                 	db	77	;'M'
  1385  00FED6  4F                 	db	79	;'O'
  1386  00FED7  54                 	db	84	;'T'
  1387  00FED8  4F                 	db	79	;'O'
  1388  00FED9  52                 	db	82	;'R'
  1389  00FEDA  53                 	db	83	;'S'
  1390  00FEDB  00                 	db	0
  1391  00FEDC                     STR_70:
  1392  00FEDC  41                 	db	65	;'A'
  1393  00FEDD  4C                 	db	76	;'L'
  1394  00FEDE  47                 	db	71	;'G'
  1395  00FEDF  4F                 	db	79	;'O'
  1396  00FEE0  52                 	db	82	;'R'
  1397  00FEE1  49                 	db	73	;'I'
  1398  00FEE2  54                 	db	84	;'T'
  1399  00FEE3  48                 	db	72	;'H'
  1400  00FEE4  4D                 	db	77	;'M'
  1401  00FEE5  20                 	db	32
  1402  00FEE6  54                 	db	84	;'T'
  1403  00FEE7  45                 	db	69	;'E'
  1404  00FEE8  53                 	db	83	;'S'
  1405  00FEE9  54                 	db	84	;'T'
  1406  00FEEA  00                 	db	0
  1407  00FEEB                     STR_91:
  1408  00FEEB  50                 	db	80	;'P'
  1409  00FEEC  49                 	db	73	;'I'
  1410  00FEED  4E                 	db	78	;'N'
  1411  00FEEE  20                 	db	32
  1412  00FEEF  52                 	db	82	;'R'
  1413  00FEF0  41                 	db	65	;'A'
  1414  00FEF1  35                 	db	53	;'5'
  1415  00FEF2  20                 	db	32
  1416  00FEF3  48                 	db	72	;'H'
  1417  00FEF4  49                 	db	73	;'I'
  1418  00FEF5  47                 	db	71	;'G'
  1419  00FEF6  48                 	db	72	;'H'
  1420  00FEF7  2E                 	db	46
  1421  00FEF8  00                 	db	0
  1422  00FEF9                     STR_73:
  1423  00FEF9  41                 	db	65	;'A'
  1424  00FEFA  4C                 	db	76	;'L'
  1425  00FEFB  47                 	db	71	;'G'
  1426  00FEFC  32                 	db	50	;'2'
  1427  00FEFD  3A                 	db	58	;':'
  1428  00FEFE  20                 	db	32
  1429  00FEFF  31                 	db	49	;'1'
  1430  00FF00  32                 	db	50	;'2'
  1431  00FF01  20                 	db	32
  1432  00FF02  43                 	db	67	;'C'
  1433  00FF03  41                 	db	65	;'A'
  1434  00FF04  4E                 	db	78	;'N'
  1435  00FF05  53                 	db	83	;'S'
  1436  00FF06  00                 	db	0
  1437  00FF07                     STR_76:
  1438  00FF07  41                 	db	65	;'A'
  1439  00FF08  4C                 	db	76	;'L'
  1440  00FF09  47                 	db	71	;'G'
  1441  00FF0A  35                 	db	53	;'5'
  1442  00FF0B  3A                 	db	58	;':'
  1443  00FF0C  20                 	db	32
  1444  00FF0D  4E                 	db	78	;'N'
  1445  00FF0E  4F                 	db	79	;'O'
  1446  00FF0F  20                 	db	32
  1447  00FF10  43                 	db	67	;'C'
  1448  00FF11  41                 	db	65	;'A'
  1449  00FF12  4E                 	db	78	;'N'
  1450  00FF13  53                 	db	83	;'S'
  1451  00FF14  00                 	db	0
  1452  00FF15                     STR_71:
  1453  00FF15  50                 	db	80	;'P'
  1454  00FF16  55                 	db	85	;'U'
  1455  00FF17  53                 	db	83	;'S'
  1456  00FF18  48                 	db	72	;'H'
  1457  00FF19  20                 	db	32
  1458  00FF1A  54                 	db	84	;'T'
  1459  00FF1B  4F                 	db	79	;'O'
  1460  00FF1C  20                 	db	32
  1461  00FF1D  53                 	db	83	;'S'
  1462  00FF1E  54                 	db	84	;'T'
  1463  00FF1F  41                 	db	65	;'A'
  1464  00FF20  52                 	db	82	;'R'
  1465  00FF21  54                 	db	84	;'T'
  1466  00FF22  00                 	db	0
  1467  00FF23                     STR_23:
  1468  00FF23  25                 	db	37
  1469  00FF24  64                 	db	100	;'d'
  1470  00FF25  20                 	db	32
  1471  00FF26  4D                 	db	77	;'M'
  1472  00FF27  49                 	db	73	;'I'
  1473  00FF28  4E                 	db	78	;'N'
  1474  00FF29  20                 	db	32
  1475  00FF2A  25                 	db	37
  1476  00FF2B  64                 	db	100	;'d'
  1477  00FF2C  20                 	db	32
  1478  00FF2D  53                 	db	83	;'S'
  1479  00FF2E  45                 	db	69	;'E'
  1480  00FF2F  43                 	db	67	;'C'
  1481  00FF30  00                 	db	0
  1482  00FF31                     STR_2:
  1483  00FF31  54                 	db	84	;'T'
  1484  00FF32  49                 	db	73	;'I'
  1485  00FF33  4D                 	db	77	;'M'
  1486  00FF34  45                 	db	69	;'E'
  1487  00FF35  3A                 	db	58	;':'
  1488  00FF36  20                 	db	32
  1489  00FF37  25                 	db	37
  1490  00FF38  64                 	db	100	;'d'
  1491  00FF39  3A                 	db	58	;':'
  1492  00FF3A  25                 	db	37
  1493  00FF3B  30                 	db	48	;'0'
  1494  00FF3C  32                 	db	50	;'2'
  1495  00FF3D  64                 	db	100	;'d'
  1496  00FF3E  00                 	db	0
  1497  00FF3F                     STR_79:
  1498  00FF3F  54                 	db	84	;'T'
  1499  00FF40  53                 	db	83	;'S'
  1500  00FF41  54                 	db	84	;'T'
  1501  00FF42  3A                 	db	58	;':'
  1502  00FF43  20                 	db	32
  1503  00FF44  49                 	db	73	;'I'
  1504  00FF45  52                 	db	82	;'R'
  1505  00FF46  20                 	db	32
  1506  00FF47  53                 	db	83	;'S'
  1507  00FF48  4E                 	db	78	;'N'
  1508  00FF49  53                 	db	83	;'S'
  1509  00FF4A  52                 	db	82	;'R'
  1510  00FF4B  00                 	db	0
  1511  00FF4C                     STR_65:
  1512  00FF4C  54                 	db	84	;'T'
  1513  00FF4D  49                 	db	73	;'I'
  1514  00FF4E  4D                 	db	77	;'M'
  1515  00FF4F  45                 	db	69	;'E'
  1516  00FF50  20                 	db	32
  1517  00FF51  25                 	db	37
  1518  00FF52  64                 	db	100	;'d'
  1519  00FF53  3A                 	db	58	;':'
  1520  00FF54  25                 	db	37
  1521  00FF55  30                 	db	48	;'0'
  1522  00FF56  32                 	db	50	;'2'
  1523  00FF57  64                 	db	100	;'d'
  1524  00FF58  00                 	db	0
  1525  00FF59                     STR_74:
  1526  00FF59  41                 	db	65	;'A'
  1527  00FF5A  4C                 	db	76	;'L'
  1528  00FF5B  47                 	db	71	;'G'
  1529  00FF5C  33                 	db	51	;'3'
  1530  00FF5D  3A                 	db	58	;':'
  1531  00FF5E  20                 	db	32
  1532  00FF5F  31                 	db	49	;'1'
  1533  00FF60  20                 	db	32
  1534  00FF61  43                 	db	67	;'C'
  1535  00FF62  41                 	db	65	;'A'
  1536  00FF63  4E                 	db	78	;'N'
  1537  00FF64  00                 	db	0
  1538  00FF65                     STR_93:
  1539  00FF65  50                 	db	80	;'P'
  1540  00FF66  49                 	db	73	;'I'
  1541  00FF67  4E                 	db	78	;'N'
  1542  00FF68  20                 	db	32
  1543  00FF69  52                 	db	82	;'R'
  1544  00FF6A  41                 	db	65	;'A'
  1545  00FF6B  33                 	db	51	;'3'
  1546  00FF6C  2E                 	db	46
  1547  00FF6D  2E                 	db	46
  1548  00FF6E  2E                 	db	46
  1549  00FF6F  00                 	db	0
  1550  00FF70                     STR_95:
  1551  00FF70  50                 	db	80	;'P'
  1552  00FF71  49                 	db	73	;'I'
  1553  00FF72  4E                 	db	78	;'N'
  1554  00FF73  20                 	db	32
  1555  00FF74  52                 	db	82	;'R'
  1556  00FF75  41                 	db	65	;'A'
  1557  00FF76  34                 	db	52	;'4'
  1558  00FF77  2E                 	db	46
  1559  00FF78  2E                 	db	46
  1560  00FF79  2E                 	db	46
  1561  00FF7A  00                 	db	0
  1562  00FF7B                     STR_64:
  1563  00FF7B  53                 	db	83	;'S'
  1564  00FF7C  4F                 	db	79	;'O'
  1565  00FF7D  52                 	db	82	;'R'
  1566  00FF7E  54                 	db	84	;'T'
  1567  00FF7F  49                 	db	73	;'I'
  1568  00FF80  4E                 	db	78	;'N'
  1569  00FF81  47                 	db	71	;'G'
  1570  00FF82  2E                 	db	46
  1571  00FF83  2E                 	db	46
  1572  00FF84  2E                 	db	46
  1573  00FF85  00                 	db	0
  1574  00FF86                     STR_84:
  1575  00FF86  54                 	db	84	;'T'
  1576  00FF87  53                 	db	83	;'S'
  1577  00FF88  54                 	db	84	;'T'
  1578  00FF89  3A                 	db	58	;':'
  1579  00FF8A  20                 	db	32
  1580  00FF8B  43                 	db	67	;'C'
  1581  00FF8C  4F                 	db	79	;'O'
  1582  00FF8D  4E                 	db	78	;'N'
  1583  00FF8E  44                 	db	68	;'D'
  1584  00FF8F  00                 	db	0
  1585  00FF90                     STR_88:
  1586  00FF90  41                 	db	65	;'A'
  1587  00FF91  43                 	db	67	;'C'
  1588  00FF92  54                 	db	84	;'T'
  1589  00FF93  55                 	db	85	;'U'
  1590  00FF94  41                 	db	65	;'A'
  1591  00FF95  54                 	db	84	;'T'
  1592  00FF96  4F                 	db	79	;'O'
  1593  00FF97  52                 	db	82	;'R'
  1594  00FF98  53                 	db	83	;'S'
  1595  00FF99  00                 	db	0
  1596  00FF9A                     STR_22:
  1597  00FF9A  44                 	db	68	;'D'
  1598  00FF9B  55                 	db	85	;'U'
  1599  00FF9C  52                 	db	82	;'R'
  1600  00FF9D  41                 	db	65	;'A'
  1601  00FF9E  54                 	db	84	;'T'
  1602  00FF9F  49                 	db	73	;'I'
  1603  00FFA0  4F                 	db	79	;'O'
  1604  00FFA1  4E                 	db	78	;'N'
  1605  00FFA2  3A                 	db	58	;':'
  1606  00FFA3  00                 	db	0
  1607  00FFA4                     STR_86:
  1608  00FFA4  43                 	db	67	;'C'
  1609  00FFA5  4F                 	db	79	;'O'
  1610  00FFA6  4E                 	db	78	;'N'
  1611  00FFA7  44                 	db	68	;'D'
  1612  00FFA8  3A                 	db	58	;':'
  1613  00FFA9  20                 	db	32
  1614  00FFAA  25                 	db	37
  1615  00FFAB  64                 	db	100	;'d'
  1616  00FFAC  00                 	db	0
  1617  00FFAD                     STR_77:
  1618  00FFAD  53                 	db	83	;'S'
  1619  00FFAE  45                 	db	69	;'E'
  1620  00FFAF  4E                 	db	78	;'N'
  1621  00FFB0  53                 	db	83	;'S'
  1622  00FFB1  4F                 	db	79	;'O'
  1623  00FFB2  52                 	db	82	;'R'
  1624  00FFB3  53                 	db	83	;'S'
  1625  00FFB4  00                 	db	0
  1626  00FFB5                     STR_130:
  1627  00FFB5  28                 	db	40
  1628  00FFB6  6E                 	db	110	;'n'
  1629  00FFB7  75                 	db	117	;'u'
  1630  00FFB8  6C                 	db	108	;'l'
  1631  00FFB9  6C                 	db	108	;'l'
  1632  00FFBA  29                 	db	41
  1633  00FFBB  00                 	db	0
  1634  00FFBC                     STR_67:
  1635  00FFBC  46                 	db	70	;'F'
  1636  00FFBD  41                 	db	65	;'A'
  1637  00FFBE  49                 	db	73	;'I'
  1638  00FFBF  4C                 	db	76	;'L'
  1639  00FFC0  45                 	db	69	;'E'
  1640  00FFC1  44                 	db	68	;'D'
  1641  00FFC2  00                 	db	0
  1642  00FFC3                     STR_7:
  1643  00FFC3  53                 	db	83	;'S'
  1644  00FFC4  54                 	db	84	;'T'
  1645  00FFC5  41                 	db	65	;'A'
  1646  00FFC6  52                 	db	82	;'R'
  1647  00FFC7  54                 	db	84	;'T'
  1648  00FFC8  3A                 	db	58	;':'
  1649  00FFC9  00                 	db	0
  1650  00FFCA                     STR_9:
  1651  00FFCA  46                 	db	70	;'F'
  1652  00FFCB  45                 	db	69	;'E'
  1653  00FFCC  42                 	db	66	;'B'
  1654  00FFCD  00                 	db	0
  1655  00FFCE                     STR_19:
  1656  00FFCE  44                 	db	68	;'D'
  1657  00FFCF  45                 	db	69	;'E'
  1658  00FFD0  43                 	db	67	;'C'
  1659  00FFD1  00                 	db	0
  1660  00FFD2                     STR_15:
  1661  00FFD2  41                 	db	65	;'A'
  1662  00FFD3  55                 	db	85	;'U'
  1663  00FFD4  47                 	db	71	;'G'
  1664  00FFD5  00                 	db	0
  1665  00FFD6                     STR_14:
  1666  00FFD6  4A                 	db	74	;'J'
  1667  00FFD7  55                 	db	85	;'U'
  1668  00FFD8  4C                 	db	76	;'L'
  1669  00FFD9  00                 	db	0
  1670  00FFDA                     STR_8:
  1671  00FFDA  4A                 	db	74	;'J'
  1672  00FFDB  41                 	db	65	;'A'
  1673  00FFDC  4E                 	db	78	;'N'
  1674  00FFDD  00                 	db	0
  1675  00FFDE                     STR_13:
  1676  00FFDE  4A                 	db	74	;'J'
  1677  00FFDF  55                 	db	85	;'U'
  1678  00FFE0  4E                 	db	78	;'N'
  1679  00FFE1  00                 	db	0
  1680  00FFE2                     STR_16:
  1681  00FFE2  53                 	db	83	;'S'
  1682  00FFE3  45                 	db	69	;'E'
  1683  00FFE4  50                 	db	80	;'P'
  1684  00FFE5  00                 	db	0
  1685  00FFE6                     STR_10:
  1686  00FFE6  4D                 	db	77	;'M'
  1687  00FFE7  41                 	db	65	;'A'
  1688  00FFE8  52                 	db	82	;'R'
  1689  00FFE9  00                 	db	0
  1690  00FFEA                     STR_11:
  1691  00FFEA  41                 	db	65	;'A'
  1692  00FFEB  50                 	db	80	;'P'
  1693  00FFEC  52                 	db	82	;'R'
  1694  00FFED  00                 	db	0
  1695  00FFEE                     STR_20:
  1696  00FFEE  45                 	db	69	;'E'
  1697  00FFEF  52                 	db	82	;'R'
  1698  00FFF0  52                 	db	82	;'R'
  1699  00FFF1  00                 	db	0
  1700  00FFF2                     STR_17:
  1701  00FFF2  4F                 	db	79	;'O'
  1702  00FFF3  43                 	db	67	;'C'
  1703  00FFF4  54                 	db	84	;'T'
  1704  00FFF5  00                 	db	0
  1705  00FFF6                     STR_18:
  1706  00FFF6  4E                 	db	78	;'N'
  1707  00FFF7  4F                 	db	79	;'O'
  1708  00FFF8  56                 	db	86	;'V'
  1709  00FFF9  00                 	db	0
  1710  00FFFA                     STR_12:
  1711  00FFFA  4D                 	db	77	;'M'
  1712  00FFFB  41                 	db	65	;'A'
  1713  00FFFC  59                 	db	89	;'Y'
  1714  00FFFD  00                 	db	0
  1715  0000                     
  1716                           ; #config settings
  1717  00FFFE  00                 	db	0	; dummy byte at the end
  1718  0000                     
  1719                           	psect	cinit
  1720  004F5A                     __pcinit:
  1721                           	opt stack 0
  1722  004F5A                     start_initialization:
  1723                           	opt stack 0
  1724  004F5A                     __initialization:
  1725                           	opt stack 0
  1726                           
  1727                           ; Initialize objects allocated to BANK1 (8 bytes)
  1728                           ; load TBLPTR registers with __pidataBANK1
  1729  004F5A  0EFA               	movlw	low __pidataBANK1
  1730  004F5C  6EF6               	movwf	tblptrl,c
  1731  004F5E  0E56               	movlw	high __pidataBANK1
  1732  004F60  6EF7               	movwf	tblptrh,c
  1733  004F62  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1734  004F64  6EF8               	movwf	tblptru,c
  1735  004F66  EE01  F047         	lfsr	0,__pdataBANK1
  1736  004F6A  EE10 F008          	lfsr	1,8
  1737  004F6E                     copy_data0:
  1738  004F6E  0009               	tblrd		*+
  1739  004F70  CFF5 FFEE          	movff	tablat,postinc0
  1740  004F74  50E5               	movf	postdec1,w,c
  1741  004F76  50E1               	movf	fsr1l,w,c
  1742  004F78  E1FA               	bnz	copy_data0
  1743                           
  1744                           ; Clear objects allocated to BANK1 (71 bytes)
  1745  004F7A  EE01  F000         	lfsr	0,__pbssBANK1
  1746  004F7E  0E47               	movlw	71
  1747  004F80                     clear_0:
  1748  004F80  6AEE               	clrf	postinc0,c
  1749  004F82  06E8               	decf	wreg,f,c
  1750  004F84  E1FD               	bnz	clear_0
  1751                           
  1752                           ; Clear objects allocated to BANK0 (38 bytes)
  1753  004F86  EE00  F0DA         	lfsr	0,__pbssBANK0
  1754  004F8A  0E26               	movlw	38
  1755  004F8C                     clear_1:
  1756  004F8C  6AEE               	clrf	postinc0,c
  1757  004F8E  06E8               	decf	wreg,f,c
  1758  004F90  E1FD               	bnz	clear_1
  1759                           
  1760                           ; Clear objects allocated to COMRAM (35 bytes)
  1761  004F92  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1762  004F96  0E23               	movlw	35
  1763  004F98                     clear_2:
  1764  004F98  6AEE               	clrf	postinc0,c
  1765  004F9A  06E8               	decf	wreg,f,c
  1766  004F9C  E1FD               	bnz	clear_2
  1767  004F9E                     end_of_initialization:
  1768                           	opt stack 0
  1769  004F9E                     __end_of__initialization:
  1770                           	opt stack 0
  1771  004F9E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1772  004FA0  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1773  004FA2  0100               	movlb	0
  1774  004FA4  EFDE  F021         	goto	_main	;jump to C main() function
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           
  1784                           	psect	bssCOMRAM
  1785  00005B                     __pbssCOMRAM:
  1786                           	opt stack 0
  1787  00005B                     _back:
  1788                           	opt stack 0
  1789  00005B                     	ds	2
  1790  00005D                     _down:
  1791                           	opt stack 0
  1792  00005D                     	ds	2
  1793  00005F                     _enter:
  1794                           	opt stack 0
  1795  00005F                     	ds	2
  1796  000061                     _f_panning_to_bin:
  1797                           	opt stack 0
  1798  000061                     	ds	2
  1799  000063                     _log_completion:
  1800                           	opt stack 0
  1801  000063                     	ds	2
  1802  000065                     _log_count_pop_no_tab:
  1803                           	opt stack 0
  1804  000065                     	ds	2
  1805  000067                     _log_count_pop_w_tab:
  1806                           	opt stack 0
  1807  000067                     	ds	2
  1808  000069                     _most_recent_sort_time:
  1809                           	opt stack 0
  1810  000069                     	ds	2
  1811  00006B                     _pan_servo_state:
  1812                           	opt stack 0
  1813  00006B                     	ds	2
  1814  00006D                     _servo_timer_counter:
  1815                           	opt stack 0
  1816  00006D                     	ds	2
  1817  00006F                     _servo_timer_target:
  1818                           	opt stack 0
  1819  00006F                     	ds	2
  1820  000071                     _tilt_servo_state:
  1821                           	opt stack 0
  1822  000071                     	ds	2
  1823  000073                     _timer2_counter:
  1824                           	opt stack 0
  1825  000073                     	ds	2
  1826  000075                     _up:
  1827                           	opt stack 0
  1828  000075                     	ds	2
  1829  000077                     _was_low_1:
  1830                           	opt stack 0
  1831  000077                     	ds	2
  1832  000079                     _was_low_2:
  1833                           	opt stack 0
  1834  000079                     	ds	2
  1835  00007B                     _was_low_3:
  1836                           	opt stack 0
  1837  00007B                     	ds	2
  1838  00007D                     _input:
  1839                           	opt stack 0
  1840  00007D                     	ds	1
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1l	equ	0xFE1
  1849                           
  1850                           	psect	bssBANK0
  1851  0000DA                     __pbssBANK0:
  1852                           	opt stack 0
  1853  0000DA                     _servoTimes:
  1854                           	opt stack 0
  1855  0000DA                     	ds	8
  1856  0000E2                     _sensor_outputs:
  1857                           	opt stack 0
  1858  0000E2                     	ds	4
  1859  0000E6                     _IR_signal:
  1860                           	opt stack 0
  1861  0000E6                     	ds	2
  1862  0000E8                     _MAG_signal:
  1863                           	opt stack 0
  1864  0000E8                     	ds	2
  1865  0000EA                     _RTCflag:
  1866                           	opt stack 0
  1867  0000EA                     	ds	2
  1868  0000EC                     _cur_state:
  1869                           	opt stack 0
  1870  0000EC                     	ds	2
  1871  0000EE                     _f_arm_position:
  1872                           	opt stack 0
  1873  0000EE                     	ds	2
  1874  0000F0                     _f_lastCan:
  1875                           	opt stack 0
  1876  0000F0                     	ds	2
  1877  0000F2                     _f_loadingNewCan:
  1878                           	opt stack 0
  1879  0000F2                     	ds	2
  1880  0000F4                     _log:
  1881                           	opt stack 0
  1882  0000F4                     	ds	2
  1883  0000F6                     _log_total_time:
  1884                           	opt stack 0
  1885  0000F6                     	ds	2
  1886  0000F8                     _logstate:
  1887                           	opt stack 0
  1888  0000F8                     	ds	2
  1889  0000FA                     _total_time:
  1890                           	opt stack 0
  1891  0000FA                     	ds	2
  1892  0000FC                     _machine_state:
  1893                           	opt stack 0
  1894  0000FC                     	ds	1
  1895  0000FD                     _sel:
  1896                           	opt stack 0
  1897  0000FD                     	ds	1
  1898  0000FE                     _count_total:
  1899                           	opt stack 0
  1900  0000FE                     	ds	2
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	bssBANK1
  1911  000100                     __pbssBANK1:
  1912                           	opt stack 0
  1913  000100                     _log_startTime:
  1914                           	opt stack 0
  1915  000100                     	ds	14
  1916  00010E                     _startTime:
  1917                           	opt stack 0
  1918  00010E                     	ds	14
  1919  00011C                     _time:
  1920                           	opt stack 0
  1921  00011C                     	ds	7
  1922  000123                     _count_can_no_lab:
  1923                           	opt stack 0
  1924  000123                     	ds	2
  1925  000125                     _count_can_w_lab:
  1926                           	opt stack 0
  1927  000125                     	ds	2
  1928  000127                     _count_pop_no_tab:
  1929                           	opt stack 0
  1930  000127                     	ds	2
  1931  000129                     _count_pop_w_tab:
  1932                           	opt stack 0
  1933  000129                     	ds	2
  1934  00012B                     _cur_can:
  1935                           	opt stack 0
  1936  00012B                     	ds	2
  1937  00012D                     _debug:
  1938                           	opt stack 0
  1939  00012D                     	ds	2
  1940  00012F                     _f_ID_receive:
  1941                           	opt stack 0
  1942  00012F                     	ds	2
  1943  000131                     _f_can_coming_to_ID:
  1944                           	opt stack 0
  1945  000131                     	ds	2
  1946  000133                     _f_can_coming_to_distribution:
  1947                           	opt stack 0
  1948  000133                     	ds	2
  1949  000135                     _f_can_distributed:
  1950                           	opt stack 0
  1951  000135                     	ds	2
  1952  000137                     _f_most_recent_sort_time:
  1953                           	opt stack 0
  1954  000137                     	ds	2
  1955  000139                     _first:
  1956                           	opt stack 0
  1957  000139                     	ds	2
  1958  00013B                     _firstboot:
  1959                           	opt stack 0
  1960  00013B                     	ds	2
  1961  00013D                     _i:
  1962                           	opt stack 0
  1963  00013D                     	ds	2
  1964  00013F                     _log_count_can_no_lab:
  1965                           	opt stack 0
  1966  00013F                     	ds	2
  1967  000141                     _log_count_can_w_lab:
  1968                           	opt stack 0
  1969  000141                     	ds	2
  1970  000143                     _log_count_total:
  1971                           	opt stack 0
  1972  000143                     	ds	2
  1973  000145                     _var:
  1974                           	opt stack 0
  1975  000145                     	ds	2
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           postinc0	equ	0xFEE
  1981                           wreg	equ	0xFE8
  1982                           postdec1	equ	0xFE5
  1983                           fsr1l	equ	0xFE1
  1984                           
  1985                           	psect	dataBANK1
  1986  000147                     __pdataBANK1:
  1987                           	opt stack 0
  1988  000147                     UI@F3241:
  1989                           	opt stack 0
  1990  000147                     	ds	4
  1991  00014B                     printRTC@F3231:
  1992                           	opt stack 0
  1993  00014B                     	ds	4
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1l	equ	0xFE1
  2002                           
  2003                           	psect	cstackBANK0
  2004  000080                     __pcstackBANK0:
  2005                           	opt stack 0
  2006  000080                     ??_delay_ms:
  2007  000080                     ??_isdigit:
  2008  000080                     ??_readADC:
  2009  000080                     ??_I2C_Master_Wait:
  2010  000080                     ?___wmul:
  2011                           	opt stack 0
  2012  000080                     ?___awmod:
  2013                           	opt stack 0
  2014  000080                     ?___lwdiv:
  2015                           	opt stack 0
  2016  000080                     ?___lldiv:
  2017                           	opt stack 0
  2018  000080                     lcdNibble@temp:
  2019                           	opt stack 0
  2020  000080                     initTime@m:
  2021                           	opt stack 0
  2022  000080                     updateServoPosition@time_us:
  2023                           	opt stack 0
  2024  000080                     EEPROM_read@address:
  2025                           	opt stack 0
  2026  000080                     ___wmul@multiplier:
  2027                           	opt stack 0
  2028  000080                     ___awmod@dividend:
  2029                           	opt stack 0
  2030  000080                     ___lwdiv@dividend:
  2031                           	opt stack 0
  2032  000080                     strcpy@to:
  2033                           	opt stack 0
  2034  000080                     ___lldiv@dividend:
  2035                           	opt stack 0
  2036                           
  2037                           ; 4 bytes @ 0x0
  2038  000080                     	ds	1
  2039  000081                     readADC@channel:
  2040                           	opt stack 0
  2041  000081                     I2C_Master_Read@a:
  2042                           	opt stack 0
  2043  000081                     lcdNibble@data:
  2044                           	opt stack 0
  2045  000081                     initTime@h:
  2046                           	opt stack 0
  2047  000081                     delay_ms@milliseconds:
  2048                           	opt stack 0
  2049  000081                     _isdigit$2083:
  2050                           	opt stack 0
  2051  000081                     I2C_Master_Write@d:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x1
  2055  000081                     	ds	1
  2056  000082                     ??_ID:
  2057  000082                     ??_readIR:
  2058  000082                     ??_readMAG:
  2059  000082                     I2C_Master_Read@temp:
  2060                           	opt stack 0
  2061  000082                     lcdInst@data:
  2062                           	opt stack 0
  2063  000082                     putch@data:
  2064                           	opt stack 0
  2065  000082                     initTime@w:
  2066                           	opt stack 0
  2067  000082                     isdigit@c:
  2068                           	opt stack 0
  2069  000082                     updateServoPosition@timer:
  2070                           	opt stack 0
  2071  000082                     ___wmul@multiplicand:
  2072                           	opt stack 0
  2073  000082                     ___awmod@divisor:
  2074                           	opt stack 0
  2075  000082                     ___lwdiv@divisor:
  2076                           	opt stack 0
  2077  000082                     strcpy@from:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x2
  2081  000082                     	ds	1
  2082  000083                     ??_initLCD:
  2083  000083                     initTime@DD:
  2084                           	opt stack 0
  2085  000083                     getRTC@i:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x3
  2089  000083                     	ds	1
  2090  000084                     ??_updateServoPosition:
  2091  000084                     initTime@MM:
  2092                           	opt stack 0
  2093  000084                     ___awmod@counter:
  2094                           	opt stack 0
  2095  000084                     readIR@res:
  2096                           	opt stack 0
  2097  000084                     readMAG@res:
  2098                           	opt stack 0
  2099  000084                     ID@i:
  2100                           	opt stack 0
  2101  000084                     ___wmul@product:
  2102                           	opt stack 0
  2103  000084                     ___lwdiv@quotient:
  2104                           	opt stack 0
  2105  000084                     strcpy@cp:
  2106                           	opt stack 0
  2107  000084                     ___lldiv@divisor:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0x4
  2111  000084                     	ds	1
  2112  000085                     ??_initSortTimer:
  2113  000085                     initTime@YY:
  2114                           	opt stack 0
  2115  000085                     ___awmod@sign:
  2116                           	opt stack 0
  2117                           
  2118                           ; 1 bytes @ 0x5
  2119  000085                     	ds	1
  2120  000086                     ??_getIR:
  2121  000086                     ??_getMAG:
  2122  000086                     ?___awdiv:
  2123                           	opt stack 0
  2124  000086                     initTime@s:
  2125                           	opt stack 0
  2126  000086                     ___lwdiv@counter:
  2127                           	opt stack 0
  2128  000086                     ID@i_1208:
  2129                           	opt stack 0
  2130  000086                     updateServoPosition@my_time:
  2131                           	opt stack 0
  2132  000086                     ___awdiv@dividend:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x6
  2136  000086                     	ds	1
  2137  000087                     ?___lwmod:
  2138                           	opt stack 0
  2139  000087                     getIR@i:
  2140                           	opt stack 0
  2141  000087                     ___lwmod@dividend:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x7
  2145  000087                     	ds	1
  2146  000088                     ??_Distribution:
  2147  000088                     ??_initServos:
  2148  000088                     ID@i_1209:
  2149                           	opt stack 0
  2150  000088                     initSortTimer@i:
  2151                           	opt stack 0
  2152  000088                     ___awdiv@divisor:
  2153                           	opt stack 0
  2154  000088                     ___lldiv@quotient:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x8
  2158  000088                     	ds	1
  2159  000089                     ___lwmod@divisor:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x9
  2163  000089                     	ds	1
  2164  00008A                     ___awdiv@counter:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0xA
  2168  00008A                     	ds	1
  2169  00008B                     ___awdiv@sign:
  2170                           	opt stack 0
  2171  00008B                     ___lwmod@counter:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0xB
  2175  00008B                     	ds	1
  2176  00008C                     ___lldiv@counter:
  2177                           	opt stack 0
  2178  00008C                     ___awdiv@quotient:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0xC
  2182  00008C                     	ds	1
  2183  00008D                     I2C_Master_Init@c:
  2184                           	opt stack 0
  2185                           
  2186                           ; 4 bytes @ 0xD
  2187  00008D                     	ds	1
  2188  00008E                     ?_printf:
  2189                           	opt stack 0
  2190  00008E                     printf@f:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0xE
  2194  00008E                     	ds	3
  2195  000091                     ??_I2C_Master_Init:
  2196                           
  2197                           ; 1 bytes @ 0x11
  2198  000091                     	ds	4
  2199  000095                     ??_loadRTC:
  2200                           
  2201                           ; 1 bytes @ 0x15
  2202  000095                     	ds	1
  2203  000096                     loadRTC@i:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x16
  2207  000096                     	ds	4
  2208  00009A                     ??_printf:
  2209                           
  2210                           ; 1 bytes @ 0x1A
  2211  00009A                     	ds	4
  2212  00009E                     printf@prec:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x1E
  2216  00009E                     	ds	1
  2217  00009F                     printf@cp:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x1F
  2221  00009F                     	ds	2
  2222  0000A1                     printf@ap:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x21
  2226  0000A1                     	ds	2
  2227  0000A3                     printf@len:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0x23
  2231  0000A3                     	ds	2
  2232  0000A5                     printf@val:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0x25
  2236  0000A5                     	ds	2
  2237  0000A7                     printf@flag:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x27
  2241  0000A7                     	ds	1
  2242  0000A8                     printf@c:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x28
  2246  0000A8                     	ds	1
  2247  0000A9                     printf@width:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x29
  2251  0000A9                     	ds	2
  2252  0000AB                     ??_printRTC:
  2253  0000AB                     ??_algorithmTest:
  2254  0000AB                     ??_sensorTest:
  2255  0000AB                     ??_actuatorTest:
  2256  0000AB                     ??_arm:
  2257  0000AB                     ??_PortTestDC:
  2258  0000AB                     ??_SpeedTest:
  2259  0000AB                     ??_PortTestPusher:
  2260  0000AB                     ??_PlatformTest:
  2261  0000AB                     ??_BothServos:
  2262  0000AB                     ??_BlockerTest:
  2263  0000AB                     EEPROM_write@address:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x2B
  2267  0000AB                     	ds	1
  2268  0000AC                     BlockerTest@i:
  2269                           	opt stack 0
  2270  0000AC                     arm@on:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x2C
  2274  0000AC                     	ds	1
  2275  0000AD                     EEPROM_write@data:
  2276                           	opt stack 0
  2277  0000AD                     actuatorTest@i_1755:
  2278                           	opt stack 0
  2279  0000AD                     sensorTest@res:
  2280                           	opt stack 0
  2281  0000AD                     PlatformTest@res:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x2D
  2285  0000AD                     	ds	1
  2286  0000AE                     ??_EEPROM_write:
  2287  0000AE                     actuatorTest@i_1762:
  2288                           	opt stack 0
  2289  0000AE                     BlockerTest@cam_flag:
  2290                           	opt stack 0
  2291  0000AE                     printRTC@INT_time:
  2292                           	opt stack 0
  2293                           
  2294                           ; 14 bytes @ 0x2E
  2295  0000AE                     	ds	1
  2296  0000AF                     EEPROM_write@i:
  2297                           	opt stack 0
  2298  0000AF                     actuatorTest@i_1763:
  2299                           	opt stack 0
  2300  0000AF                     PlatformTest@res_1807:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x2F
  2304  0000AF                     	ds	1
  2305  0000B0                     EEPROM_write@i_1463:
  2306                           	opt stack 0
  2307  0000B0                     actuatorTest@i_1765:
  2308                           	opt stack 0
  2309  0000B0                     BlockerTest@cond_flag:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x30
  2313  0000B0                     	ds	1
  2314  0000B1                     ??_Loading:
  2315  0000B1                     logRun@num:
  2316                           	opt stack 0
  2317  0000B1                     actuatorTest@i_1766:
  2318                           	opt stack 0
  2319  0000B1                     PlatformTest@i:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x31
  2323  0000B1                     	ds	1
  2324  0000B2                     logRun@byte1:
  2325                           	opt stack 0
  2326  0000B2                     actuatorTest@i_1768:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x32
  2330  0000B2                     	ds	1
  2331  0000B3                     logRun@byte2:
  2332                           	opt stack 0
  2333  0000B3                     actuatorTest@i_1769:
  2334                           	opt stack 0
  2335  0000B3                     Loading@addr:
  2336                           	opt stack 0
  2337  0000B3                     PlatformTest@i_1811:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x33
  2341  0000B3                     	ds	1
  2342  0000B4                     logRun@byte3:
  2343                           	opt stack 0
  2344  0000B4                     actuatorTest@i_1771:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x34
  2348  0000B4                     	ds	1
  2349  0000B5                     Loading@byte1:
  2350                           	opt stack 0
  2351  0000B5                     logRun@byte_i:
  2352                           	opt stack 0
  2353  0000B5                     actuatorTest@i_1772:
  2354                           	opt stack 0
  2355  0000B5                     PlatformTest@on:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x35
  2359  0000B5                     	ds	1
  2360  0000B6                     logRun@byte11:
  2361                           	opt stack 0
  2362  0000B6                     actuatorTest@i_1774:
  2363                           	opt stack 0
  2364  0000B6                     Loading@i_1183:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x36
  2368  0000B6                     	ds	1
  2369  0000B7                     actuatorTest@i_1775:
  2370                           	opt stack 0
  2371  0000B7                     logRun@i:
  2372                           	opt stack 0
  2373                           
  2374                           ; 2 bytes @ 0x37
  2375  0000B7                     	ds	1
  2376  0000B8                     actuatorTest@i_1777:
  2377                           	opt stack 0
  2378  0000B8                     Loading@i_1192:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x38
  2382  0000B8                     	ds	1
  2383  0000B9                     actuatorTest@i_1778:
  2384                           	opt stack 0
  2385  0000B9                     logRun@addr:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x39
  2389  0000B9                     	ds	1
  2390  0000BA                     actuatorTest@i_1781:
  2391                           	opt stack 0
  2392  0000BA                     Loading@i_1194:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x3A
  2396  0000BA                     	ds	1
  2397  0000BB                     actuatorTest@i_1782:
  2398                           	opt stack 0
  2399                           
  2400                           ; 1 bytes @ 0x3B
  2401  0000BB                     	ds	1
  2402  0000BC                     actuatorTest@i_1784:
  2403                           	opt stack 0
  2404  0000BC                     printRTC@RTC_month:
  2405                           	opt stack 0
  2406  0000BC                     Loading@i_1195:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x3C
  2410  0000BC                     	ds	1
  2411  0000BD                     actuatorTest@i_1785:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x3D
  2415  0000BD                     	ds	1
  2416  0000BE                     actuatorTest@i_1787:
  2417                           	opt stack 0
  2418  0000BE                     Loading@i_1197:
  2419                           	opt stack 0
  2420  0000BE                     printRTC@month:
  2421                           	opt stack 0
  2422                           
  2423                           ; 4 bytes @ 0x3E
  2424  0000BE                     	ds	1
  2425  0000BF                     actuatorTest@i_1788:
  2426                           	opt stack 0
  2427                           
  2428                           ; 1 bytes @ 0x3F
  2429  0000BF                     	ds	1
  2430  0000C0                     actuatorTest@i_1791:
  2431                           	opt stack 0
  2432  0000C0                     Loading@j:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x40
  2436  0000C0                     	ds	1
  2437  0000C1                     actuatorTest@i_1792:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0x41
  2441  0000C1                     	ds	1
  2442  0000C2                     actuatorTest@i_1794:
  2443                           	opt stack 0
  2444  0000C2                     printRTC@i:
  2445                           	opt stack 0
  2446  0000C2                     Loading@i:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x42
  2450  0000C2                     	ds	1
  2451  0000C3                     actuatorTest@i_1795:
  2452                           	opt stack 0
  2453                           
  2454                           ; 1 bytes @ 0x43
  2455  0000C3                     	ds	1
  2456  0000C4                     ??_UI:
  2457  0000C4                     actuatorTest@i:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x44
  2461  0000C4                     	ds	2
  2462  0000C6                     ??_Test:
  2463  0000C6                     _UI$2446:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x46
  2467  0000C6                     	ds	2
  2468  0000C8                     UI@i:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x48
  2472  0000C8                     	ds	1
  2473  0000C9                     UI@i_409:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x49
  2477  0000C9                     	ds	1
  2478  0000CA                     UI@i_412:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x4A
  2482  0000CA                     	ds	1
  2483  0000CB                     UI@i_413:
  2484                           	opt stack 0
  2485                           
  2486                           ; 1 bytes @ 0x4B
  2487  0000CB                     	ds	1
  2488  0000CC                     UI@i_431:
  2489                           	opt stack 0
  2490                           
  2491                           ; 1 bytes @ 0x4C
  2492  0000CC                     	ds	1
  2493  0000CD                     UI@i_432:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x4D
  2497  0000CD                     	ds	1
  2498  0000CE                     UI@i_435:
  2499                           	opt stack 0
  2500                           
  2501                           ; 1 bytes @ 0x4E
  2502  0000CE                     	ds	1
  2503  0000CF                     UI@i_436:
  2504                           	opt stack 0
  2505                           
  2506                           ; 1 bytes @ 0x4F
  2507  0000CF                     	ds	1
  2508  0000D0                     UI@i_439:
  2509                           	opt stack 0
  2510                           
  2511                           ; 1 bytes @ 0x50
  2512  0000D0                     	ds	1
  2513  0000D1                     UI@i_440:
  2514                           	opt stack 0
  2515                           
  2516                           ; 1 bytes @ 0x51
  2517  0000D1                     	ds	1
  2518  0000D2                     UI@i_443:
  2519                           	opt stack 0
  2520                           
  2521                           ; 1 bytes @ 0x52
  2522  0000D2                     	ds	1
  2523  0000D3                     UI@i_444:
  2524                           	opt stack 0
  2525                           
  2526                           ; 1 bytes @ 0x53
  2527  0000D3                     	ds	1
  2528  0000D4                     UI@i_447:
  2529                           	opt stack 0
  2530                           
  2531                           ; 1 bytes @ 0x54
  2532  0000D4                     	ds	1
  2533  0000D5                     UI@i_448:
  2534                           	opt stack 0
  2535                           
  2536                           ; 1 bytes @ 0x55
  2537  0000D5                     	ds	1
  2538  0000D6                     UI@month:
  2539                           	opt stack 0
  2540                           
  2541                           ; 4 bytes @ 0x56
  2542  0000D6                     	ds	4
  2543  0000DA                     tblptru	equ	0xFF8
  2544                           tblptrh	equ	0xFF7
  2545                           tblptrl	equ	0xFF6
  2546                           tablat	equ	0xFF5
  2547                           postinc0	equ	0xFEE
  2548                           wreg	equ	0xFE8
  2549                           postdec1	equ	0xFE5
  2550                           fsr1l	equ	0xFE1
  2551                           
  2552                           ; 1 bytes @ 0x5A
  2553                           
  2554                           	psect	cstackCOMRAM
  2555  000001                     __pcstackCOMRAM:
  2556                           	opt stack 0
  2557  000001                     ??_updateArmState:
  2558  000001                     ??i2_I2C_Master_Wait:
  2559  000001                     ??i2_delay_ms:
  2560  000001                     ??i2_isdigit:
  2561  000001                     ?i2___wmul:
  2562                           	opt stack 0
  2563  000001                     ?i2___lwmod:
  2564                           	opt stack 0
  2565  000001                     i2lcdNibble@temp:
  2566                           	opt stack 0
  2567  000001                     i2updateServoPosition@time_us:
  2568                           	opt stack 0
  2569  000001                     i2EEPROM_read@address:
  2570                           	opt stack 0
  2571  000001                     i2___wmul@multiplier:
  2572                           	opt stack 0
  2573  000001                     i2___lwmod@dividend:
  2574                           	opt stack 0
  2575  000001                     i2strcpy@to:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0x0
  2579  000001                     	ds	1
  2580  000002                     i2I2C_Master_Read@a:
  2581                           	opt stack 0
  2582  000002                     i2lcdNibble@data:
  2583                           	opt stack 0
  2584  000002                     i2delay_ms@milliseconds:
  2585                           	opt stack 0
  2586  000002                     i2_isdigit$2083:
  2587                           	opt stack 0
  2588  000002                     i2I2C_Master_Write@d:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x1
  2592  000002                     	ds	1
  2593  000003                     i2I2C_Master_Read@temp:
  2594                           	opt stack 0
  2595  000003                     i2lcdInst@data:
  2596                           	opt stack 0
  2597  000003                     i2putch@data:
  2598                           	opt stack 0
  2599  000003                     i2isdigit@c:
  2600                           	opt stack 0
  2601  000003                     i2updateServoPosition@timer:
  2602                           	opt stack 0
  2603  000003                     i2___wmul@multiplicand:
  2604                           	opt stack 0
  2605  000003                     i2___lwmod@divisor:
  2606                           	opt stack 0
  2607  000003                     i2strcpy@from:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x2
  2611  000003                     	ds	1
  2612  000004                     i2getRTC@i:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x3
  2616  000004                     	ds	1
  2617  000005                     ??i2_updateServoPosition:
  2618  000005                     i2___lwmod@counter:
  2619                           	opt stack 0
  2620  000005                     i2___wmul@product:
  2621                           	opt stack 0
  2622  000005                     i2strcpy@cp:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x4
  2626  000005                     	ds	1
  2627  000006                     ?i2___lwdiv:
  2628                           	opt stack 0
  2629  000006                     i2___lwdiv@dividend:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x5
  2633  000006                     	ds	1
  2634  000007                     retrieveLog@logNum:
  2635                           	opt stack 0
  2636  000007                     i2updateServoPosition@my_time:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x6
  2640  000007                     	ds	1
  2641  000008                     i2___lwdiv@divisor:
  2642                           	opt stack 0
  2643                           
  2644                           ; 2 bytes @ 0x7
  2645  000008                     	ds	1
  2646  000009                     ??_retrieveLog:
  2647  000009                     ??_updateServoStates:
  2648                           
  2649                           ; 1 bytes @ 0x8
  2650  000009                     	ds	1
  2651  00000A                     i2___lwdiv@quotient:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x9
  2655  00000A                     	ds	1
  2656  00000B                     retrieveLog@byte1:
  2657                           	opt stack 0
  2658                           
  2659                           ; 1 bytes @ 0xA
  2660  00000B                     	ds	1
  2661  00000C                     retrieveLog@byte2:
  2662                           	opt stack 0
  2663  00000C                     i2___lwdiv@counter:
  2664                           	opt stack 0
  2665                           
  2666                           ; 1 bytes @ 0xB
  2667  00000C                     	ds	1
  2668  00000D                     ?i2_printf:
  2669                           	opt stack 0
  2670  00000D                     retrieveLog@byte3:
  2671                           	opt stack 0
  2672  00000D                     i2printf@f:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0xC
  2676  00000D                     	ds	1
  2677  00000E                     retrieveLog@i:
  2678                           	opt stack 0
  2679                           
  2680                           ; 2 bytes @ 0xD
  2681  00000E                     	ds	2
  2682  000010                     retrieveLog@addr:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0xF
  2686  000010                     	ds	2
  2687  000012                     dispLogs@myLog:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x11
  2691  000012                     	ds	2
  2692  000014                     
  2693                           ; 1 bytes @ 0x13
  2694  000014                     	ds	5
  2695  000019                     ??i2_printf:
  2696                           
  2697                           ; 1 bytes @ 0x18
  2698  000019                     	ds	4
  2699  00001D                     i2printf@prec:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x1C
  2703  00001D                     	ds	1
  2704  00001E                     i2printf@cp:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x1D
  2708  00001E                     	ds	2
  2709  000020                     i2printf@ap:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x1F
  2713  000020                     	ds	2
  2714  000022                     i2printf@len:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x21
  2718  000022                     	ds	2
  2719  000024                     i2printf@val:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x23
  2723  000024                     	ds	2
  2724  000026                     i2printf@flag:
  2725                           	opt stack 0
  2726                           
  2727                           ; 1 bytes @ 0x25
  2728  000026                     	ds	1
  2729  000027                     i2printf@c:
  2730                           	opt stack 0
  2731                           
  2732                           ; 1 bytes @ 0x26
  2733  000027                     	ds	1
  2734  000028                     i2printf@width:
  2735                           	opt stack 0
  2736                           
  2737                           ; 2 bytes @ 0x27
  2738  000028                     	ds	2
  2739  00002A                     ??_printSortTimer:
  2740  00002A                     ??i2_printRTC:
  2741  00002A                     ?_inputHandler:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x29
  2745  00002A                     	ds	2
  2746  00002C                     ??_inputHandler:
  2747                           
  2748                           ; 1 bytes @ 0x2B
  2749  00002C                     	ds	1
  2750  00002D                     printSortTimer@curTime:
  2751                           	opt stack 0
  2752  00002D                     i2printRTC@INT_time:
  2753                           	opt stack 0
  2754                           
  2755                           ; 14 bytes @ 0x2C
  2756  00002D                     	ds	14
  2757  00003B                     printSortTimer@start_sec:
  2758                           	opt stack 0
  2759  00003B                     i2printRTC@RTC_month:
  2760                           	opt stack 0
  2761                           
  2762                           ; 2 bytes @ 0x3A
  2763  00003B                     	ds	2
  2764  00003D                     printSortTimer@cur_sec:
  2765                           	opt stack 0
  2766  00003D                     i2printRTC@month:
  2767                           	opt stack 0
  2768                           
  2769                           ; 4 bytes @ 0x3C
  2770  00003D                     	ds	2
  2771  00003F                     printSortTimer@min:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x3E
  2775  00003F                     	ds	2
  2776  000041                     printSortTimer@sec:
  2777                           	opt stack 0
  2778  000041                     i2printRTC@i:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0x40
  2782  000041                     	ds	2
  2783  000043                     ??_updateMenu:
  2784  000043                     _printSortTimer$2578:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0x42
  2788  000043                     	ds	2
  2789  000045                     printSortTimer@timeDiff:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x44
  2793  000045                     	ds	2
  2794  000047                     printSortTimer@i_1221:
  2795                           	opt stack 0
  2796                           
  2797                           ; 2 bytes @ 0x46
  2798  000047                     	ds	2
  2799  000049                     printSortTimer@i:
  2800                           	opt stack 0
  2801                           
  2802                           ; 2 bytes @ 0x48
  2803  000049                     	ds	2
  2804  00004B                     ??_handler:
  2805                           
  2806                           ; 1 bytes @ 0x4A
  2807  00004B                     	ds	16
  2808                           tblptru	equ	0xFF8
  2809                           tblptrh	equ	0xFF7
  2810                           tblptrl	equ	0xFF6
  2811                           tablat	equ	0xFF5
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           postdec1	equ	0xFE5
  2815                           fsr1l	equ	0xFE1
  2816                           
  2817 ;;
  2818 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2819 ;;
  2820 ;; *************** function _main *****************
  2821 ;; Defined at:
  2822 ;;		line 19 in file "main.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;Total ram usage:        0 bytes
  2841 ;; Hardware stack levels required when called:   13
  2842 ;; This function calls:
  2843 ;;		_I2C_Master_Init
  2844 ;;		_Test
  2845 ;;		_UI
  2846 ;;		_initLCD
  2847 ;;		_initTime
  2848 ;;		_initUI
  2849 ;;		_logRun
  2850 ;;		_machineConfig
  2851 ;;		_sort
  2852 ;;		_stopSignals
  2853 ;; This function is called by:
  2854 ;;		Startup code after reset
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text0
  2859  0043BC                     __ptext0:
  2860                           	opt stack 0
  2861  0043BC                     _main:
  2862                           	opt stack 18
  2863                           
  2864                           ;main.c: 20: machineConfig();
  2865                           
  2866                           ;incstack = 0
  2867  0043BC  EC68  F026         	call	_machineConfig	;wreg free
  2868                           
  2869                           ;main.c: 21: initLCD();
  2870  0043C0  EC20  F028         	call	_initLCD	;wreg free
  2871                           
  2872                           ;main.c: 24: RTCflag = 0;
  2873  0043C4  0E00               	movlw	0
  2874  0043C6  0100               	movlb	0	; () banked
  2875  0043C8  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2876  0043CA  0E00               	movlw	0
  2877  0043CC  6FEA               	movwf	_RTCflag& (0+255),b
  2878                           
  2879                           ;main.c: 25: if(RTCflag){
  2880  0043CE  0100               	movlb	0	; () banked
  2881  0043D0  51EA               	movf	_RTCflag& (0+255),w,b
  2882  0043D2  0100               	movlb	0	; () banked
  2883  0043D4  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2884  0043D6  B4D8               	btfsc	status,2,c
  2885  0043D8  D016               	goto	l9734
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2889  0043DA  0E47               	movlw	71
  2890  0043DC  0100               	movlb	0	; () banked
  2891  0043DE  6F80               	movwf	initTime@m& (0+255),b
  2892  0043E0  0E17               	movlw	23
  2893  0043E2  0100               	movlb	0	; () banked
  2894  0043E4  6F81               	movwf	initTime@h& (0+255),b
  2895  0043E6  0E07               	movlw	7
  2896  0043E8  0100               	movlb	0	; () banked
  2897  0043EA  6F82               	movwf	initTime@w& (0+255),b
  2898  0043EC  0E08               	movlw	8
  2899  0043EE  0100               	movlb	0	; () banked
  2900  0043F0  6F83               	movwf	initTime@DD& (0+255),b
  2901  0043F2  0E04               	movlw	4
  2902  0043F4  0100               	movlb	0	; () banked
  2903  0043F6  6F84               	movwf	initTime@MM& (0+255),b
  2904  0043F8  0E17               	movlw	23
  2905  0043FA  0100               	movlb	0	; () banked
  2906  0043FC  6F85               	movwf	initTime@YY& (0+255),b
  2907  0043FE  0E42               	movlw	66
  2908  004400  ECF1  F02A         	call	_initTime
  2909                           
  2910                           ;main.c: 27: }
  2911  004404  D00B               	goto	l9736
  2912  004406                     l9734:
  2913                           
  2914                           ;main.c: 28: else{
  2915                           ;main.c: 29: I2C_Master_Init(10000);
  2916  004406  0E10               	movlw	16
  2917  004408  0100               	movlb	0	; () banked
  2918  00440A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2919  00440C  0E27               	movlw	39
  2920  00440E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2921  004410  0E00               	movlw	0
  2922  004412  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2923  004414  0E00               	movlw	0
  2924  004416  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2925  004418  ECCB  F026         	call	_I2C_Master_Init	;wreg free
  2926  00441C                     l9736:
  2927                           
  2928                           ;main.c: 30: }
  2929                           ;main.c: 32: initUI();
  2930  00441C  EC21  F029         	call	_initUI	;wreg free
  2931                           
  2932                           ;main.c: 33: first = 1;
  2933  004420  0E00               	movlw	0
  2934  004422  0101               	movlb	1	; () banked
  2935  004424  6F3A               	movwf	(_first+1)& (0+255),b
  2936  004426  0E01               	movlw	1
  2937  004428  6F39               	movwf	_first& (0+255),b
  2938                           
  2939                           ; BSR set to: 1
  2940                           ;main.c: 44: switch(machine_state){
  2941                           
  2942                           ;main.c: 43: while(1){
  2943  00442A  D018               	goto	l9758
  2944  00442C                     l9740:
  2945                           
  2946                           ;main.c: 46: UI();
  2947  00442C  EC09  F000         	call	_UI	;wreg free
  2948                           
  2949                           ;main.c: 47: break;
  2950  004430  D015               	goto	l9758
  2951  004432                     l9742:
  2952                           
  2953                           ;main.c: 49: sort();
  2954  004432  ECE0  F02A         	call	_sort	;wreg free
  2955                           
  2956                           ;main.c: 50: break;
  2957  004436  D012               	goto	l9758
  2958  004438                     l9744:
  2959                           
  2960                           ;main.c: 52: stopSignals();
  2961  004438  EC11  F02B         	call	_stopSignals	;wreg free
  2962                           
  2963                           ;main.c: 53: logRun();
  2964  00443C  EC5A  F01E         	call	_logRun	;wreg free
  2965                           
  2966                           ;main.c: 54: first = 1;
  2967  004440  0E00               	movlw	0
  2968  004442  0101               	movlb	1	; () banked
  2969  004444  6F3A               	movwf	(_first+1)& (0+255),b
  2970  004446  0E01               	movlw	1
  2971  004448  6F39               	movwf	_first& (0+255),b
  2972                           
  2973                           ; BSR set to: 1
  2974                           ;main.c: 55: UI();
  2975  00444A  EC09  F000         	call	_UI	;wreg free
  2976                           
  2977                           ;main.c: 56: break;
  2978  00444E  D006               	goto	l9758
  2979  004450                     l9752:
  2980                           
  2981                           ;main.c: 58: Test();
  2982  004450  EC8C  F01F         	call	_Test	;wreg free
  2983                           
  2984                           ;main.c: 59: break;
  2985  004454  D003               	goto	l9758
  2986  004456                     l9754:
  2987                           
  2988                           ;main.c: 61: stopSignals();
  2989  004456  EC11  F02B         	call	_stopSignals	;wreg free
  2990  00445A                     l501:
  2991  00445A  D7FF               	goto	l501
  2992  00445C                     l9758:
  2993  00445C  0100               	movlb	0	; () banked
  2994  00445E  51FC               	movf	_machine_state& (0+255),w,b
  2995                           
  2996                           ; Switch size 1, requested type "space"
  2997                           ; Number of cases is 5, Range of values is 0 to 4
  2998                           ; switch strategies available:
  2999                           ; Name         Instructions Cycles
  3000                           ; simple_byte           16     9 (average)
  3001                           ;	Chosen strategy is simple_byte
  3002  004460  0A00               	xorlw	0	; case 0
  3003  004462  B4D8               	btfsc	status,2,c
  3004  004464  D7E3               	goto	l9740
  3005  004466  0A01               	xorlw	1	; case 1
  3006  004468  B4D8               	btfsc	status,2,c
  3007  00446A  D7E3               	goto	l9742
  3008  00446C  0A03               	xorlw	3	; case 2
  3009  00446E  B4D8               	btfsc	status,2,c
  3010  004470  D7E3               	goto	l9744
  3011  004472  0A01               	xorlw	1	; case 3
  3012  004474  B4D8               	btfsc	status,2,c
  3013  004476  D7EC               	goto	l9752
  3014  004478  0A07               	xorlw	7	; case 4
  3015  00447A  B4D8               	btfsc	status,2,c
  3016  00447C  D7EC               	goto	l9754
  3017                           
  3018                           ; BSR set to: 0
  3019                           
  3020                           ; BSR set to: 0
  3021  00447E  D7EE               	goto	l9758
  3022  004480                     __end_of_main:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           postinc0	equ	0xFEE
  3029                           wreg	equ	0xFE8
  3030                           postdec1	equ	0xFE5
  3031                           fsr1l	equ	0xFE1
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _sort *****************
  3035 ;; Defined at:
  3036 ;;		line 66 in file "sort.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:   12
  3057 ;; This function calls:
  3058 ;;		_Distribution
  3059 ;;		_ID
  3060 ;;		_Loading
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text1
  3067  0055C0                     __ptext1:
  3068                           	opt stack 0
  3069  0055C0                     _sort:
  3070                           	opt stack 18
  3071                           
  3072                           ;sort.c: 67: if(machine_state == Sorting_state){
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;incstack = 0
  3076  0055C0  0100               	movlb	0	; () banked
  3077  0055C2  05FC               	decf	_machine_state& (0+255),w,b
  3078  0055C4  B4D8               	btfsc	status,2,c
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;sort.c: 68: Loading();
  3082  0055C6  ECC7  F008         	call	_Loading	;wreg free
  3083                           
  3084                           ;sort.c: 69: }
  3085                           ;sort.c: 70: if(machine_state == Sorting_state){
  3086  0055CA  0100               	movlb	0	; () banked
  3087  0055CC  05FC               	decf	_machine_state& (0+255),w,b
  3088  0055CE  B4D8               	btfsc	status,2,c
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;sort.c: 71: ID();
  3092  0055D0  EC71  F018         	call	_ID	;wreg free
  3093                           
  3094                           ;sort.c: 72: }
  3095                           ;sort.c: 73: if(machine_state == Sorting_state){
  3096  0055D4  0100               	movlb	0	; () banked
  3097  0055D6  05FC               	decf	_machine_state& (0+255),w,b
  3098  0055D8  A4D8               	btfss	status,2,c
  3099  0055DA  0012               	return	
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;sort.c: 74: Distribution();
  3103  0055DC  EC02  F021         	call	_Distribution	;wreg free
  3104  0055E0  0012               	return	
  3105  0055E2                     __end_of_sort:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           postinc0	equ	0xFEE
  3112                           wreg	equ	0xFE8
  3113                           postdec1	equ	0xFE5
  3114                           fsr1l	equ	0xFE1
  3115                           status	equ	0xFD8
  3116                           
  3117 ;; *************** function _Loading *****************
  3118 ;; Defined at:
  3119 ;;		line 78 in file "sort.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  i               2   62[BANK0 ] int 
  3124 ;;  i               2   60[BANK0 ] int 
  3125 ;;  i               2   58[BANK0 ] int 
  3126 ;;  i               2   56[BANK0 ] int 
  3127 ;;  i               2   54[BANK0 ] int 
  3128 ;;  j               2   64[BANK0 ] int 
  3129 ;;  i               2   66[BANK0 ] int 
  3130 ;;  addr            2   51[BANK0 ] unsigned short 
  3131 ;;  byte1           1   53[BANK0 ] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;Total ram usage:       19 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:   11
  3148 ;; This function calls:
  3149 ;;		_EEPROM_read
  3150 ;;		_EEPROM_write
  3151 ;;		_delay_ms
  3152 ;;		_getIR
  3153 ;;		_getMAG
  3154 ;;		_initGlobalVars
  3155 ;;		_initServos
  3156 ;;		_initSortTimer
  3157 ;;		_lcdInst
  3158 ;;		_readIR
  3159 ;; This function is called by:
  3160 ;;		_sort
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text2
  3165  00118E                     __ptext2:
  3166                           	opt stack 0
  3167  00118E                     _Loading:
  3168                           	opt stack 18
  3169                           
  3170                           ;sort.c: 79: if(first){
  3171                           
  3172                           ;incstack = 0
  3173  00118E  0101               	movlb	1	; () banked
  3174  001190  5139               	movf	_first& (0+255),w,b
  3175  001192  0101               	movlb	1	; () banked
  3176  001194  113A               	iorwf	(_first+1)& (0+255),w,b
  3177  001196  B4D8               	btfsc	status,2,c
  3178  001198  D066               	goto	l7494
  3179                           
  3180                           ; BSR set to: 1
  3181                           ;sort.c: 80: initGlobalVars();
  3182  00119A  EC40  F022         	call	_initGlobalVars	;wreg free
  3183                           
  3184                           ;sort.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3185  00119E  0E01               	movlw	1
  3186  0011A0  EC5F  F02B         	call	_lcdInst
  3187  0011A4  0E68               	movlw	104
  3188  0011A6  0100               	movlb	0	; () banked
  3189  0011A8  6FB1               	movwf	??_Loading& (0+255),b
  3190  0011AA  0EE4               	movlw	228
  3191  0011AC                     u9117:
  3192  0011AC  2EE8               	decfsz	wreg,f,c
  3193  0011AE  D7FE               	bra	u9117
  3194  0011B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3195  0011B2  D7FC               	bra	u9117
  3196  0011B4  F000               	nop	
  3197                           
  3198                           ;sort.c: 82: initSortTimer();
  3199  0011B6  EC5C  F023         	call	_initSortTimer	;wreg free
  3200                           
  3201                           ;sort.c: 83: LATCbits.LATC5 = 1;
  3202  0011BA  8A8B               	bsf	3979,5,c	;volatile
  3203                           
  3204                           ;sort.c: 88: sel = EEPROM_read(0);
  3205  0011BC  0E00               	movlw	0
  3206  0011BE  0100               	movlb	0	; () banked
  3207  0011C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3208  0011C2  0E00               	movlw	0
  3209  0011C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3210  0011C6  EC2D  F02B         	call	_EEPROM_read	;wreg free
  3211  0011CA  0100               	movlb	0	; () banked
  3212  0011CC  6FFD               	movwf	_sel& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 89: unsigned short addr = 1 + 11 * sel;
  3216  0011CE  0100               	movlb	0	; () banked
  3217  0011D0  51FD               	movf	_sel& (0+255),w,b
  3218  0011D2  0D0B               	mullw	11
  3219  0011D4  0E01               	movlw	1
  3220  0011D6  24F3               	addwf	prodl,w,c
  3221  0011D8  0100               	movlb	0	; () banked
  3222  0011DA  6FB3               	movwf	Loading@addr& (0+255),b
  3223  0011DC  0E00               	movlw	0
  3224  0011DE  20F4               	addwfc	prodh,w,c
  3225  0011E0  0100               	movlb	0	; () banked
  3226  0011E2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;sort.c: 90: unsigned char byte1 = 0b01111111;
  3230  0011E4  0E7F               	movlw	127
  3231  0011E6  0100               	movlb	0	; () banked
  3232  0011E8  6FB5               	movwf	Loading@byte1& (0+255),b
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;sort.c: 91: EEPROM_write(addr, byte1);
  3236  0011EA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3237  0011EE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3238  0011F2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3239  0011F6  EC8E  F020         	call	_EEPROM_write	;wreg free
  3240                           
  3241                           ;sort.c: 94: LATBbits.LATB2 = 0;
  3242  0011FA  948A               	bcf	3978,2,c	;volatile
  3243                           
  3244                           ;sort.c: 96: for(int i=0; i<46; i++){
  3245  0011FC  0E00               	movlw	0
  3246  0011FE  0100               	movlb	0	; () banked
  3247  001200  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3248  001202  0E00               	movlw	0
  3249  001204  6FC2               	movwf	Loading@i& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252  001206  0100               	movlb	0	; () banked
  3253  001208  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3254  00120A  D008               	goto	l7484
  3255  00120C  0100               	movlb	0	; () banked
  3256  00120E  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3257  001210  E126               	bnz	l776
  3258  001212  0E2E               	movlw	46
  3259  001214  0100               	movlb	0	; () banked
  3260  001216  5DC2               	subwf	Loading@i& (0+255),w,b
  3261  001218  B0D8               	btfsc	status,0,c
  3262  00121A  D021               	goto	l776
  3263  00121C                     l7484:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;sort.c: 97: LATBbits.LATB2 = !LATBbits.LATB2;
  3267  00121C  B48A               	btfsc	3978,2,c	;volatile
  3268  00121E  D004               	goto	u5870
  3269  001220  0100               	movlb	0	; () banked
  3270  001222  6BB1               	clrf	??_Loading& (0+255),b
  3271  001224  2BB1               	incf	??_Loading& (0+255),f,b
  3272  001226  D002               	goto	u5888
  3273  001228                     u5870:
  3274  001228  0100               	movlb	0	; () banked
  3275  00122A  6BB1               	clrf	??_Loading& (0+255),b
  3276  00122C                     u5888:
  3277  00122C  0100               	movlb	0	; () banked
  3278  00122E  47B1               	rlncf	??_Loading& (0+255),f,b
  3279  001230  47B1               	rlncf	??_Loading& (0+255),f,b
  3280  001232  508A               	movf	3978,w,c	;volatile
  3281  001234  0100               	movlb	0	; () banked
  3282  001236  19B1               	xorwf	??_Loading& (0+255),w,b
  3283  001238  0BFB               	andlw	-5
  3284  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3285  00123C  6E8A               	movwf	3978,c	;volatile
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;sort.c: 98: delay_ms(45-i);
  3289  00123E  0100               	movlb	0	; () banked
  3290  001240  51C2               	movf	Loading@i& (0+255),w,b
  3291  001242  0800               	sublw	0
  3292  001244  0F2D               	addlw	45
  3293  001246  EC80  F02A         	call	_delay_ms
  3294  00124A  0100               	movlb	0	; () banked
  3295  00124C  4BC2               	infsnz	Loading@i& (0+255),f,b
  3296  00124E  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3297                           
  3298                           ; BSR set to: 0
  3299  001250  0100               	movlb	0	; () banked
  3300  001252  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3301  001254  D7E3               	goto	l7484
  3302  001256  0100               	movlb	0	; () banked
  3303  001258  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3304  00125A  E101               	bnz	u5890
  3305  00125C  D7DA               	goto	L1
  3306  00125E                     u5890:
  3307  00125E                     l776:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 99: }
  3311                           ;sort.c: 100: LATBbits.LATB2 = 1;
  3312  00125E  848A               	bsf	3978,2,c	;volatile
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;sort.c: 103: initServos();
  3316  001260  EC10  F025         	call	_initServos	;wreg free
  3317                           
  3318                           ;sort.c: 104: }
  3319  001264  0012               	return	
  3320  001266                     l7494:
  3321                           
  3322                           ;sort.c: 105: else{
  3323                           ;sort.c: 108: if(!f_loadingNewCan){
  3324  001266  0100               	movlb	0	; () banked
  3325  001268  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3326  00126A  0100               	movlb	0	; () banked
  3327  00126C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3328  00126E  A4D8               	btfss	status,2,c
  3329  001270  D018               	goto	l7510
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;sort.c: 110: getIR();
  3333  001272  EC88  F025         	call	_getIR	;wreg free
  3334                           
  3335                           ;sort.c: 112: if(!f_loadingNewCan){
  3336  001276  0100               	movlb	0	; () banked
  3337  001278  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3338  00127A  0100               	movlb	0	; () banked
  3339  00127C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3340  00127E  B4D8               	btfsc	status,2,c
  3341  001280  0012               	return	
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;sort.c: 116: else{
  3345                           ;sort.c: 117: count_total++;
  3346                           
  3347                           ; BSR set to: 0
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;sort.c: 114: }
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;sort.c: 113: return;
  3354  001282  0100               	movlb	0	; () banked
  3355  001284  4BFE               	infsnz	_count_total& (0+255),f,b
  3356  001286  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;sort.c: 118: if(count_total == 12){
  3360  001288  0E0C               	movlw	12
  3361  00128A  0100               	movlb	0	; () banked
  3362  00128C  19FE               	xorwf	_count_total& (0+255),w,b
  3363  00128E  0100               	movlb	0	; () banked
  3364  001290  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3365  001292  A4D8               	btfss	status,2,c
  3366  001294  0012               	return	
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;sort.c: 119: f_lastCan = 1;
  3370  001296  0E00               	movlw	0
  3371  001298  0100               	movlb	0	; () banked
  3372  00129A  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  3373  00129C  0E01               	movlw	1
  3374  00129E  6FF0               	movwf	_f_lastCan& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;sort.c: 120: }
  3378                           ;sort.c: 121: }
  3379                           ;sort.c: 122: }
  3380                           
  3381                           ; BSR set to: 0
  3382  0012A0  0012               	return	
  3383  0012A2                     l7510:
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;sort.c: 125: else if(f_ID_receive){
  3387  0012A2  0101               	movlb	1	; () banked
  3388  0012A4  512F               	movf	_f_ID_receive& (0+255),w,b
  3389  0012A6  0101               	movlb	1	; () banked
  3390  0012A8  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3391  0012AA  B4D8               	btfsc	status,2,c
  3392  0012AC  0012               	return	
  3393                           
  3394                           ; BSR set to: 1
  3395                           ;sort.c: 126: f_most_recent_sort_time = 1;
  3396  0012AE  0E00               	movlw	0
  3397  0012B0  0101               	movlb	1	; () banked
  3398  0012B2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3399  0012B4  0E01               	movlw	1
  3400  0012B6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3401                           
  3402                           ;sort.c: 127: f_loadingNewCan = 0;
  3403  0012B8  0E00               	movlw	0
  3404  0012BA  0100               	movlb	0	; () banked
  3405  0012BC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3406  0012BE  0E00               	movlw	0
  3407  0012C0  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3411  0012C2  0E1F               	movlw	31
  3412  0012C4  0100               	movlb	0	; () banked
  3413  0012C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3414  0012C8  0E71               	movlw	113
  3415  0012CA  0100               	movlb	0	; () banked
  3416  0012CC  6FB1               	movwf	??_Loading& (0+255),b
  3417  0012CE  0E1E               	movlw	30
  3418  0012D0                     u9127:
  3419  0012D0  2EE8               	decfsz	wreg,f,c
  3420  0012D2  D7FE               	bra	u9127
  3421  0012D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3422  0012D6  D7FC               	bra	u9127
  3423  0012D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3424  0012DA  D7FA               	bra	u9127
  3425  0012DC  F000               	nop	
  3426                           
  3427                           ;sort.c: 129: LATBbits.LATB2 = 0;
  3428  0012DE  948A               	bcf	3978,2,c	;volatile
  3429                           
  3430                           ;sort.c: 133: f_arm_position = 1;
  3431  0012E0  0E00               	movlw	0
  3432  0012E2  0100               	movlb	0	; () banked
  3433  0012E4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3434  0012E6  0E01               	movlw	1
  3435  0012E8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 134: getMAG();
  3439  0012EA  ECEF  F028         	call	_getMAG	;wreg free
  3440                           
  3441                           ;sort.c: 135: sensor_outputs[0] = MAG_signal;
  3442  0012EE  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3443  0012F2  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3444                           
  3445                           ;sort.c: 137: if(sensor_outputs[0]){
  3446  0012F6  0100               	movlb	0	; () banked
  3447  0012F8  51E2               	movf	_sensor_outputs& (0+255),w,b
  3448  0012FA  0100               	movlb	0	; () banked
  3449  0012FC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3450  0012FE  B4D8               	btfsc	status,2,c
  3451  001300  D027               	goto	l7538
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;sort.c: 138: for(int i = 0; i<25; i++){
  3455  001302  0E00               	movlw	0
  3456  001304  0100               	movlb	0	; () banked
  3457  001306  6FB7               	movwf	(Loading@i_1183+1)& (0+255),b
  3458  001308  0E00               	movlw	0
  3459  00130A  6FB6               	movwf	Loading@i_1183& (0+255),b
  3460  00130C                     l7528:
  3461                           
  3462                           ; BSR set to: 0
  3463  00130C  0100               	movlb	0	; () banked
  3464  00130E  BFB7               	btfsc	(Loading@i_1183+1)& (0+255),7,b
  3465  001310  D008               	goto	l786
  3466  001312  0100               	movlb	0	; () banked
  3467  001314  51B7               	movf	(Loading@i_1183+1)& (0+255),w,b
  3468  001316  E143               	bnz	l7550
  3469  001318  0E19               	movlw	25
  3470  00131A  0100               	movlb	0	; () banked
  3471  00131C  5DB6               	subwf	Loading@i_1183& (0+255),w,b
  3472  00131E  B0D8               	btfsc	status,0,c
  3473  001320  D03E               	goto	l7550
  3474  001322                     l786:
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;sort.c: 139: LATAbits.LATA4 = 1;
  3478  001322  8889               	bsf	3977,4,c	;volatile
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;sort.c: 140: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3482  001324  0E4E               	movlw	78
  3483  001326  0100               	movlb	0	; () banked
  3484  001328  6FB1               	movwf	??_Loading& (0+255),b
  3485  00132A  0EEB               	movlw	235
  3486  00132C                     u9137:
  3487  00132C  2EE8               	decfsz	wreg,f,c
  3488  00132E  D7FE               	bra	u9137
  3489  001330  2FB1               	decfsz	??_Loading& (0+255),f,b
  3490  001332  D7FC               	bra	u9137
  3491                           
  3492                           ;sort.c: 141: LATAbits.LATA4 = 0;
  3493  001334  9889               	bcf	3977,4,c	;volatile
  3494                           
  3495                           ;sort.c: 142: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3496  001336  0E1A               	movlw	26
  3497  001338  0100               	movlb	0	; () banked
  3498  00133A  6FB1               	movwf	??_Loading& (0+255),b
  3499  00133C  0EF8               	movlw	248
  3500  00133E                     u9147:
  3501  00133E  2EE8               	decfsz	wreg,f,c
  3502  001340  D7FE               	bra	u9147
  3503  001342  2FB1               	decfsz	??_Loading& (0+255),f,b
  3504  001344  D7FC               	bra	u9147
  3505  001346  F000               	nop	
  3506  001348  0100               	movlb	0	; () banked
  3507  00134A  4BB6               	infsnz	Loading@i_1183& (0+255),f,b
  3508  00134C  2BB7               	incf	(Loading@i_1183+1)& (0+255),f,b
  3509  00134E  D7DE               	goto	l7528
  3510  001350                     l7538:
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;sort.c: 145: else{
  3514                           ;sort.c: 146: for(int i = 0; i<25; i++){
  3515  001350  0E00               	movlw	0
  3516  001352  0100               	movlb	0	; () banked
  3517  001354  6FB9               	movwf	(Loading@i_1192+1)& (0+255),b
  3518  001356  0E00               	movlw	0
  3519  001358  6FB8               	movwf	Loading@i_1192& (0+255),b
  3520  00135A                     l7540:
  3521                           
  3522                           ; BSR set to: 0
  3523  00135A  0100               	movlb	0	; () banked
  3524  00135C  BFB9               	btfsc	(Loading@i_1192+1)& (0+255),7,b
  3525  00135E  D008               	goto	l789
  3526  001360  0100               	movlb	0	; () banked
  3527  001362  51B9               	movf	(Loading@i_1192+1)& (0+255),w,b
  3528  001364  E11C               	bnz	l7550
  3529  001366  0E19               	movlw	25
  3530  001368  0100               	movlb	0	; () banked
  3531  00136A  5DB8               	subwf	Loading@i_1192& (0+255),w,b
  3532  00136C  B0D8               	btfsc	status,0,c
  3533  00136E  D017               	goto	l7550
  3534  001370                     l789:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;sort.c: 147: LATAbits.LATA4 = 1;
  3538  001370  8889               	bsf	3977,4,c	;volatile
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;sort.c: 148: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3542  001372  0E3D               	movlw	61
  3543  001374  0100               	movlb	0	; () banked
  3544  001376  6FB1               	movwf	??_Loading& (0+255),b
  3545  001378  0E41               	movlw	65
  3546  00137A                     u9157:
  3547  00137A  2EE8               	decfsz	wreg,f,c
  3548  00137C  D7FE               	bra	u9157
  3549  00137E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3550  001380  D7FC               	bra	u9157
  3551                           
  3552                           ;sort.c: 149: LATAbits.LATA4 = 0;
  3553  001382  9889               	bcf	3977,4,c	;volatile
  3554                           
  3555                           ;sort.c: 150: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3556  001384  0E2C               	movlw	44
  3557  001386  0100               	movlb	0	; () banked
  3558  001388  6FB1               	movwf	??_Loading& (0+255),b
  3559  00138A  0EA1               	movlw	161
  3560  00138C                     u9167:
  3561  00138C  2EE8               	decfsz	wreg,f,c
  3562  00138E  D7FE               	bra	u9167
  3563  001390  2FB1               	decfsz	??_Loading& (0+255),f,b
  3564  001392  D7FC               	bra	u9167
  3565  001394  D000               	nop2	
  3566  001396  0100               	movlb	0	; () banked
  3567  001398  4BB8               	infsnz	Loading@i_1192& (0+255),f,b
  3568  00139A  2BB9               	incf	(Loading@i_1192+1)& (0+255),f,b
  3569  00139C  D7DE               	goto	l7540
  3570  00139E                     l7550:
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;sort.c: 151: }
  3574                           ;sort.c: 152: }
  3575                           ;sort.c: 154: _delay((unsigned long)((350)*(32000000/4000.0)));
  3576  00139E  0E0F               	movlw	15
  3577  0013A0  0100               	movlb	0	; () banked
  3578  0013A2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3579  0013A4  0E35               	movlw	53
  3580  0013A6  0100               	movlb	0	; () banked
  3581  0013A8  6FB1               	movwf	??_Loading& (0+255),b
  3582  0013AA  0E51               	movlw	81
  3583  0013AC                     u9177:
  3584  0013AC  2EE8               	decfsz	wreg,f,c
  3585  0013AE  D7FE               	bra	u9177
  3586  0013B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3587  0013B2  D7FC               	bra	u9177
  3588  0013B4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3589  0013B6  D7FA               	bra	u9177
  3590                           
  3591                           ;sort.c: 156: readIR();
  3592  0013B8  ECD4  F027         	call	_readIR	;wreg free
  3593                           
  3594                           ;sort.c: 157: if(IR_signal==1){
  3595  0013BC  0100               	movlb	0	; () banked
  3596  0013BE  05E6               	decf	_IR_signal& (0+255),w,b
  3597  0013C0  0100               	movlb	0	; () banked
  3598  0013C2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3599  0013C4  A4D8               	btfss	status,2,c
  3600  0013C6  D19A               	goto	l7668
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;sort.c: 158: _delay((unsigned long)((100)*(32000000/4000.0)));
  3604  0013C8  0E05               	movlw	5
  3605  0013CA  0100               	movlb	0	; () banked
  3606  0013CC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3607  0013CE  0E0F               	movlw	15
  3608  0013D0  0100               	movlb	0	; () banked
  3609  0013D2  6FB1               	movwf	??_Loading& (0+255),b
  3610  0013D4  0EF1               	movlw	241
  3611  0013D6                     u9187:
  3612  0013D6  2EE8               	decfsz	wreg,f,c
  3613  0013D8  D7FE               	bra	u9187
  3614  0013DA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3615  0013DC  D7FC               	bra	u9187
  3616  0013DE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3617  0013E0  D7FA               	bra	u9187
  3618                           
  3619                           ;sort.c: 159: readIR();
  3620  0013E2  ECD4  F027         	call	_readIR	;wreg free
  3621                           
  3622                           ;sort.c: 160: if(IR_signal==1){
  3623  0013E6  0100               	movlb	0	; () banked
  3624  0013E8  05E6               	decf	_IR_signal& (0+255),w,b
  3625  0013EA  0100               	movlb	0	; () banked
  3626  0013EC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3627  0013EE  A4D8               	btfss	status,2,c
  3628  0013F0  D054               	goto	l7588
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;sort.c: 161: if(sensor_outputs[0]){
  3632  0013F2  0100               	movlb	0	; () banked
  3633  0013F4  51E2               	movf	_sensor_outputs& (0+255),w,b
  3634  0013F6  0100               	movlb	0	; () banked
  3635  0013F8  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3636  0013FA  B4D8               	btfsc	status,2,c
  3637  0013FC  D027               	goto	l7576
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;sort.c: 162: for(int i = 0; i<25; i++){
  3641  0013FE  0E00               	movlw	0
  3642  001400  0100               	movlb	0	; () banked
  3643  001402  6FBB               	movwf	(Loading@i_1194+1)& (0+255),b
  3644  001404  0E00               	movlw	0
  3645  001406  6FBA               	movwf	Loading@i_1194& (0+255),b
  3646  001408                     l7566:
  3647                           
  3648                           ; BSR set to: 0
  3649  001408  0100               	movlb	0	; () banked
  3650  00140A  BFBB               	btfsc	(Loading@i_1194+1)& (0+255),7,b
  3651  00140C  D008               	goto	l794
  3652  00140E  0100               	movlb	0	; () banked
  3653  001410  51BB               	movf	(Loading@i_1194+1)& (0+255),w,b
  3654  001412  E143               	bnz	l7588
  3655  001414  0E19               	movlw	25
  3656  001416  0100               	movlb	0	; () banked
  3657  001418  5DBA               	subwf	Loading@i_1194& (0+255),w,b
  3658  00141A  B0D8               	btfsc	status,0,c
  3659  00141C  D03E               	goto	l7588
  3660  00141E                     l794:
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;sort.c: 163: LATAbits.LATA4 = 1;
  3664  00141E  8889               	bsf	3977,4,c	;volatile
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;sort.c: 164: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3668  001420  0E4E               	movlw	78
  3669  001422  0100               	movlb	0	; () banked
  3670  001424  6FB1               	movwf	??_Loading& (0+255),b
  3671  001426  0EEB               	movlw	235
  3672  001428                     u9197:
  3673  001428  2EE8               	decfsz	wreg,f,c
  3674  00142A  D7FE               	bra	u9197
  3675  00142C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3676  00142E  D7FC               	bra	u9197
  3677                           
  3678                           ;sort.c: 165: LATAbits.LATA4 = 0;
  3679  001430  9889               	bcf	3977,4,c	;volatile
  3680                           
  3681                           ;sort.c: 166: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3682  001432  0E1A               	movlw	26
  3683  001434  0100               	movlb	0	; () banked
  3684  001436  6FB1               	movwf	??_Loading& (0+255),b
  3685  001438  0EF8               	movlw	248
  3686  00143A                     u9207:
  3687  00143A  2EE8               	decfsz	wreg,f,c
  3688  00143C  D7FE               	bra	u9207
  3689  00143E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3690  001440  D7FC               	bra	u9207
  3691  001442  F000               	nop	
  3692  001444  0100               	movlb	0	; () banked
  3693  001446  4BBA               	infsnz	Loading@i_1194& (0+255),f,b
  3694  001448  2BBB               	incf	(Loading@i_1194+1)& (0+255),f,b
  3695  00144A  D7DE               	goto	l7566
  3696  00144C                     l7576:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;sort.c: 169: else{
  3700                           ;sort.c: 170: for(int i = 0; i<25; i++){
  3701  00144C  0E00               	movlw	0
  3702  00144E  0100               	movlb	0	; () banked
  3703  001450  6FBD               	movwf	(Loading@i_1195+1)& (0+255),b
  3704  001452  0E00               	movlw	0
  3705  001454  6FBC               	movwf	Loading@i_1195& (0+255),b
  3706  001456                     l7578:
  3707                           
  3708                           ; BSR set to: 0
  3709  001456  0100               	movlb	0	; () banked
  3710  001458  BFBD               	btfsc	(Loading@i_1195+1)& (0+255),7,b
  3711  00145A  D008               	goto	l797
  3712  00145C  0100               	movlb	0	; () banked
  3713  00145E  51BD               	movf	(Loading@i_1195+1)& (0+255),w,b
  3714  001460  E11C               	bnz	l7588
  3715  001462  0E19               	movlw	25
  3716  001464  0100               	movlb	0	; () banked
  3717  001466  5DBC               	subwf	Loading@i_1195& (0+255),w,b
  3718  001468  B0D8               	btfsc	status,0,c
  3719  00146A  D017               	goto	l7588
  3720  00146C                     l797:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;sort.c: 171: LATAbits.LATA4 = 1;
  3724  00146C  8889               	bsf	3977,4,c	;volatile
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;sort.c: 172: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3728  00146E  0E3D               	movlw	61
  3729  001470  0100               	movlb	0	; () banked
  3730  001472  6FB1               	movwf	??_Loading& (0+255),b
  3731  001474  0E41               	movlw	65
  3732  001476                     u9217:
  3733  001476  2EE8               	decfsz	wreg,f,c
  3734  001478  D7FE               	bra	u9217
  3735  00147A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3736  00147C  D7FC               	bra	u9217
  3737                           
  3738                           ;sort.c: 173: LATAbits.LATA4 = 0;
  3739  00147E  9889               	bcf	3977,4,c	;volatile
  3740                           
  3741                           ;sort.c: 174: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3742  001480  0E2C               	movlw	44
  3743  001482  0100               	movlb	0	; () banked
  3744  001484  6FB1               	movwf	??_Loading& (0+255),b
  3745  001486  0EA1               	movlw	161
  3746  001488                     u9227:
  3747  001488  2EE8               	decfsz	wreg,f,c
  3748  00148A  D7FE               	bra	u9227
  3749  00148C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3750  00148E  D7FC               	bra	u9227
  3751  001490  D000               	nop2	
  3752  001492  0100               	movlb	0	; () banked
  3753  001494  4BBC               	infsnz	Loading@i_1195& (0+255),f,b
  3754  001496  2BBD               	incf	(Loading@i_1195+1)& (0+255),f,b
  3755  001498  D7DE               	goto	l7578
  3756  00149A                     l7588:
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;sort.c: 175: }
  3760                           ;sort.c: 176: }
  3761                           ;sort.c: 177: }
  3762                           ;sort.c: 179: _delay((unsigned long)((350)*(32000000/4000.0)));
  3763  00149A  0E0F               	movlw	15
  3764  00149C  0100               	movlb	0	; () banked
  3765  00149E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3766  0014A0  0E35               	movlw	53
  3767  0014A2  0100               	movlb	0	; () banked
  3768  0014A4  6FB1               	movwf	??_Loading& (0+255),b
  3769  0014A6  0E51               	movlw	81
  3770  0014A8                     u9237:
  3771  0014A8  2EE8               	decfsz	wreg,f,c
  3772  0014AA  D7FE               	bra	u9237
  3773  0014AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3774  0014AE  D7FC               	bra	u9237
  3775  0014B0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3776  0014B2  D7FA               	bra	u9237
  3777                           
  3778                           ;sort.c: 181: int j = 1;
  3779  0014B4  0E00               	movlw	0
  3780  0014B6  0100               	movlb	0	; () banked
  3781  0014B8  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3782  0014BA  0E01               	movlw	1
  3783  0014BC  6FC0               	movwf	Loading@j& (0+255),b
  3784                           
  3785                           ;sort.c: 182: while(IR_signal == 1){
  3786  0014BE  D117               	goto	l7666
  3787  0014C0                     l7592:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;sort.c: 183: readIR();
  3791  0014C0  ECD4  F027         	call	_readIR	;wreg free
  3792                           
  3793                           ;sort.c: 184: if(j == 10){
  3794  0014C4  0E0A               	movlw	10
  3795  0014C6  0100               	movlb	0	; () banked
  3796  0014C8  19C0               	xorwf	Loading@j& (0+255),w,b
  3797  0014CA  0100               	movlb	0	; () banked
  3798  0014CC  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3799  0014CE  A4D8               	btfss	status,2,c
  3800  0014D0  D016               	goto	l7600
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;sort.c: 185: LATBbits.LATB2 = !LATBbits.LATB2;
  3804  0014D2  B48A               	btfsc	3978,2,c	;volatile
  3805  0014D4  D004               	goto	u6070
  3806  0014D6  0100               	movlb	0	; () banked
  3807  0014D8  6BB1               	clrf	??_Loading& (0+255),b
  3808  0014DA  2BB1               	incf	??_Loading& (0+255),f,b
  3809  0014DC  D002               	goto	u6088
  3810  0014DE                     u6070:
  3811  0014DE  0100               	movlb	0	; () banked
  3812  0014E0  6BB1               	clrf	??_Loading& (0+255),b
  3813  0014E2                     u6088:
  3814  0014E2  0100               	movlb	0	; () banked
  3815  0014E4  47B1               	rlncf	??_Loading& (0+255),f,b
  3816  0014E6  47B1               	rlncf	??_Loading& (0+255),f,b
  3817  0014E8  508A               	movf	3978,w,c	;volatile
  3818  0014EA  0100               	movlb	0	; () banked
  3819  0014EC  19B1               	xorwf	??_Loading& (0+255),w,b
  3820  0014EE  0BFB               	andlw	-5
  3821  0014F0  19B1               	xorwf	??_Loading& (0+255),w,b
  3822  0014F2  6E8A               	movwf	3978,c	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;sort.c: 186: j = 0;
  3826  0014F4  0E00               	movlw	0
  3827  0014F6  0100               	movlb	0	; () banked
  3828  0014F8  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3829  0014FA  0E00               	movlw	0
  3830  0014FC  6FC0               	movwf	Loading@j& (0+255),b
  3831  0014FE                     l7600:
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;sort.c: 187: }
  3835                           ;sort.c: 188: if(IR_signal==1){
  3836  0014FE  0100               	movlb	0	; () banked
  3837  001500  05E6               	decf	_IR_signal& (0+255),w,b
  3838  001502  0100               	movlb	0	; () banked
  3839  001504  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3840  001506  A4D8               	btfss	status,2,c
  3841  001508  D0D6               	goto	l7654
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;sort.c: 189: _delay((unsigned long)((350)*(32000000/4000.0)));
  3845  00150A  0E0F               	movlw	15
  3846  00150C  0100               	movlb	0	; () banked
  3847  00150E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3848  001510  0E35               	movlw	53
  3849  001512  0100               	movlb	0	; () banked
  3850  001514  6FB1               	movwf	??_Loading& (0+255),b
  3851  001516  0E51               	movlw	81
  3852  001518                     u9247:
  3853  001518  2EE8               	decfsz	wreg,f,c
  3854  00151A  D7FE               	bra	u9247
  3855  00151C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3856  00151E  D7FC               	bra	u9247
  3857  001520  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3858  001522  D7FA               	bra	u9247
  3859                           
  3860                           ;sort.c: 190: readIR();
  3861  001524  ECD4  F027         	call	_readIR	;wreg free
  3862                           
  3863                           ;sort.c: 191: if(IR_signal==1){
  3864  001528  0100               	movlb	0	; () banked
  3865  00152A  05E6               	decf	_IR_signal& (0+255),w,b
  3866  00152C  0100               	movlb	0	; () banked
  3867  00152E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3868  001530  A4D8               	btfss	status,2,c
  3869  001532  D0BD               	goto	l803
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;sort.c: 192: if(sensor_outputs[0]){
  3873  001534  0100               	movlb	0	; () banked
  3874  001536  51E2               	movf	_sensor_outputs& (0+255),w,b
  3875  001538  0100               	movlb	0	; () banked
  3876  00153A  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3877  00153C  B4D8               	btfsc	status,2,c
  3878  00153E  D011               	goto	l7616
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;sort.c: 193: LATAbits.LATA4 = 1;
  3882  001540  8889               	bsf	3977,4,c	;volatile
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;sort.c: 194: _delay((unsigned long)((250)*(32000000/4000.0)));
  3886  001542  0E0B               	movlw	11
  3887  001544  0100               	movlb	0	; () banked
  3888  001546  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3889  001548  0E26               	movlw	38
  3890  00154A  0100               	movlb	0	; () banked
  3891  00154C  6FB1               	movwf	??_Loading& (0+255),b
  3892  00154E  0E5D               	movlw	93
  3893  001550                     u9257:
  3894  001550  2EE8               	decfsz	wreg,f,c
  3895  001552  D7FE               	bra	u9257
  3896  001554  2FB1               	decfsz	??_Loading& (0+255),f,b
  3897  001556  D7FC               	bra	u9257
  3898  001558  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3899  00155A  D7FA               	bra	u9257
  3900  00155C  D000               	nop2	
  3901                           
  3902                           ;sort.c: 195: LATAbits.LATA4 = 0;
  3903  00155E  9889               	bcf	3977,4,c	;volatile
  3904                           
  3905                           ;sort.c: 196: }
  3906  001560  D0A6               	goto	l803
  3907  001562                     l7616:
  3908                           
  3909                           ;sort.c: 197: else{
  3910                           ;sort.c: 198: for(int i = 0; i<25; i++){
  3911  001562  0E00               	movlw	0
  3912  001564  0100               	movlb	0	; () banked
  3913  001566  6FBF               	movwf	(Loading@i_1197+1)& (0+255),b
  3914  001568  0E00               	movlw	0
  3915  00156A  6FBE               	movwf	Loading@i_1197& (0+255),b
  3916                           
  3917                           ; BSR set to: 0
  3918  00156C  0100               	movlb	0	; () banked
  3919  00156E  BFBF               	btfsc	(Loading@i_1197+1)& (0+255),7,b
  3920  001570  D079               	goto	l7646
  3921  001572  0100               	movlb	0	; () banked
  3922  001574  51BF               	movf	(Loading@i_1197+1)& (0+255),w,b
  3923  001576  E106               	bnz	u6120
  3924  001578  0E19               	movlw	25
  3925  00157A  0100               	movlb	0	; () banked
  3926  00157C  5DBE               	subwf	Loading@i_1197& (0+255),w,b
  3927  00157E  B0D8               	btfsc	status,0,c
  3928  001580  D096               	goto	l803
  3929  001582  D070               	goto	l7646
  3930  001584                     u6120:
  3931                           
  3932                           ; BSR set to: 0
  3933  001584  D094               	goto	l803
  3934  001586                     l809:
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;sort.c: 201: LATAbits.LATA4 = 1;
  3938  001586  8889               	bsf	3977,4,c	;volatile
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;sort.c: 202: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3942  001588  0E4E               	movlw	78
  3943  00158A  0100               	movlb	0	; () banked
  3944  00158C  6FB1               	movwf	??_Loading& (0+255),b
  3945  00158E  0EEB               	movlw	235
  3946  001590                     u9267:
  3947  001590  2EE8               	decfsz	wreg,f,c
  3948  001592  D7FE               	bra	u9267
  3949  001594  2FB1               	decfsz	??_Loading& (0+255),f,b
  3950  001596  D7FC               	bra	u9267
  3951                           
  3952                           ;sort.c: 203: LATAbits.LATA4 = 0;
  3953  001598  9889               	bcf	3977,4,c	;volatile
  3954                           
  3955                           ;sort.c: 204: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3956  00159A  0E1A               	movlw	26
  3957  00159C  0100               	movlb	0	; () banked
  3958  00159E  6FB1               	movwf	??_Loading& (0+255),b
  3959  0015A0  0EF8               	movlw	248
  3960  0015A2                     u9277:
  3961  0015A2  2EE8               	decfsz	wreg,f,c
  3962  0015A4  D7FE               	bra	u9277
  3963  0015A6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3964  0015A8  D7FC               	bra	u9277
  3965  0015AA  D05A               	goto	L5
  3966  0015AC                     l811:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;sort.c: 207: LATAbits.LATA4 = 1;
  3970  0015AC  8889               	bsf	3977,4,c	;volatile
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;sort.c: 208: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  3974  0015AE  0E54               	movlw	84
  3975  0015B0  0100               	movlb	0	; () banked
  3976  0015B2  6FB1               	movwf	??_Loading& (0+255),b
  3977  0015B4  0E1C               	movlw	28
  3978  0015B6                     u9287:
  3979  0015B6  2EE8               	decfsz	wreg,f,c
  3980  0015B8  D7FE               	bra	u9287
  3981  0015BA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3982  0015BC  D7FC               	bra	u9287
  3983  0015BE  F000               	nop	
  3984                           
  3985                           ;sort.c: 209: LATAbits.LATA4 = 0;
  3986  0015C0  9889               	bcf	3977,4,c	;volatile
  3987                           
  3988                           ;sort.c: 210: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  3989  0015C2  0E15               	movlw	21
  3990  0015C4  0100               	movlb	0	; () banked
  3991  0015C6  6FB1               	movwf	??_Loading& (0+255),b
  3992  0015C8  0EC6               	movlw	198
  3993  0015CA                     u9297:
  3994  0015CA  2EE8               	decfsz	wreg,f,c
  3995  0015CC  D7FE               	bra	u9297
  3996  0015CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3997  0015D0  D7FC               	bra	u9297
  3998  0015D2  D046               	goto	L5
  3999  0015D4                     l812:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;sort.c: 213: LATAbits.LATA4 = 1;
  4003  0015D4  8889               	bsf	3977,4,c	;volatile
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;sort.c: 214: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4007  0015D6  0E59               	movlw	89
  4008  0015D8  0100               	movlb	0	; () banked
  4009  0015DA  6FB1               	movwf	??_Loading& (0+255),b
  4010  0015DC  0E4E               	movlw	78
  4011  0015DE                     u9307:
  4012  0015DE  2EE8               	decfsz	wreg,f,c
  4013  0015E0  D7FE               	bra	u9307
  4014  0015E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4015  0015E4  D7FC               	bra	u9307
  4016  0015E6  F000               	nop	
  4017                           
  4018                           ;sort.c: 215: LATAbits.LATA4 = 0;
  4019  0015E8  9889               	bcf	3977,4,c	;volatile
  4020                           
  4021                           ;sort.c: 216: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4022  0015EA  0E10               	movlw	16
  4023  0015EC  0100               	movlb	0	; () banked
  4024  0015EE  6FB1               	movwf	??_Loading& (0+255),b
  4025  0015F0  0E94               	movlw	148
  4026  0015F2                     u9317:
  4027  0015F2  2EE8               	decfsz	wreg,f,c
  4028  0015F4  D7FE               	bra	u9317
  4029  0015F6  2FB1               	decfsz	??_Loading& (0+255),f,b
  4030  0015F8  D7FC               	bra	u9317
  4031  0015FA  D032               	goto	L5
  4032  0015FC                     l813:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 219: LATAbits.LATA4 = 1;
  4036  0015FC  8889               	bsf	3977,4,c	;volatile
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;sort.c: 220: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4040  0015FE  0E5E               	movlw	94
  4041  001600  0100               	movlb	0	; () banked
  4042  001602  6FB1               	movwf	??_Loading& (0+255),b
  4043  001604  0E80               	movlw	128
  4044  001606                     u9327:
  4045  001606  2EE8               	decfsz	wreg,f,c
  4046  001608  D7FE               	bra	u9327
  4047  00160A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4048  00160C  D7FC               	bra	u9327
  4049  00160E  F000               	nop	
  4050                           
  4051                           ;sort.c: 221: LATAbits.LATA4 = 0;
  4052  001610  9889               	bcf	3977,4,c	;volatile
  4053                           
  4054                           ;sort.c: 222: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4055  001612  0E0B               	movlw	11
  4056  001614  0100               	movlb	0	; () banked
  4057  001616  6FB1               	movwf	??_Loading& (0+255),b
  4058  001618  0E62               	movlw	98
  4059  00161A                     u9337:
  4060  00161A  2EE8               	decfsz	wreg,f,c
  4061  00161C  D7FE               	bra	u9337
  4062  00161E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4063  001620  D7FC               	bra	u9337
  4064  001622  D01E               	goto	L5
  4065  001624                     l814:
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;sort.c: 225: LATAbits.LATA4 = 1;
  4069  001624  8889               	bsf	3977,4,c	;volatile
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;sort.c: 226: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4073  001626  0E63               	movlw	99
  4074  001628  0100               	movlb	0	; () banked
  4075  00162A  6FB1               	movwf	??_Loading& (0+255),b
  4076  00162C  0EB2               	movlw	178
  4077  00162E                     u9347:
  4078  00162E  2EE8               	decfsz	wreg,f,c
  4079  001630  D7FE               	bra	u9347
  4080  001632  2FB1               	decfsz	??_Loading& (0+255),f,b
  4081  001634  D7FC               	bra	u9347
  4082  001636  F000               	nop	
  4083                           
  4084                           ;sort.c: 227: LATAbits.LATA4 = 0;
  4085  001638  9889               	bcf	3977,4,c	;volatile
  4086                           
  4087                           ;sort.c: 228: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4088  00163A  0E34               	movlw	52
  4089  00163C  0100               	movlb	0	; () banked
  4090  00163E  6FB1               	movwf	??_Loading& (0+255),b
  4091  001640  0EF1               	movlw	241
  4092  001642                     u9357:
  4093  001642  2EE8               	decfsz	wreg,f,c
  4094  001644  D7FE               	bra	u9357
  4095  001646  2FB1               	decfsz	??_Loading& (0+255),f,b
  4096  001648  D7FC               	bra	u9357
  4097  00164A  D000               	nop2	
  4098                           
  4099                           ;sort.c: 229: break;
  4100  00164C  D026               	goto	l7648
  4101  00164E                     l815:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;sort.c: 231: LATAbits.LATA4 = 1;
  4105  00164E  8889               	bsf	3977,4,c	;volatile
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;sort.c: 232: _delay((unsigned long)((10)*(32000000/4000.0)));
  4109  001650  0E68               	movlw	104
  4110  001652  0100               	movlb	0	; () banked
  4111  001654  6FB1               	movwf	??_Loading& (0+255),b
  4112  001656  0EE4               	movlw	228
  4113  001658                     u9367:
  4114  001658  2EE8               	decfsz	wreg,f,c
  4115  00165A  D7FE               	bra	u9367
  4116  00165C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4117  00165E  D7FC               	bra	u9367
  4118  001660                     L5:
  4119  001660  F000               	nop	
  4120                           
  4121                           ;sort.c: 234: }
  4122                           
  4123                           ;sort.c: 233: break;
  4124  001662  D01B               	goto	l7648
  4125  001664                     l7646:
  4126  001664  C0C0  F0B1         	movff	Loading@j,??_Loading
  4127  001668  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4128                           
  4129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4130                           ; Switch size 1, requested type "space"
  4131                           ; Number of cases is 1, Range of values is 0 to 0
  4132                           ; switch strategies available:
  4133                           ; Name         Instructions Cycles
  4134                           ; simple_byte            4     3 (average)
  4135                           ;	Chosen strategy is simple_byte
  4136  00166C  0100               	movlb	0	; () banked
  4137  00166E  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4138  001670  0A00               	xorlw	0	; case 0
  4139  001672  A4D8               	btfss	status,2,c
  4140  001674  D7EC               	goto	l815
  4141                           
  4142                           ; BSR set to: 0
  4143                           ; Switch size 1, requested type "space"
  4144                           ; Number of cases is 5, Range of values is 1 to 5
  4145                           ; switch strategies available:
  4146                           ; Name         Instructions Cycles
  4147                           ; simple_byte           16     9 (average)
  4148                           ;	Chosen strategy is simple_byte
  4149  001676  0100               	movlb	0	; () banked
  4150  001678  51B1               	movf	??_Loading& (0+255),w,b
  4151  00167A  0A01               	xorlw	1	; case 1
  4152  00167C  B4D8               	btfsc	status,2,c
  4153  00167E  D783               	goto	l809
  4154  001680  0A03               	xorlw	3	; case 2
  4155  001682  B4D8               	btfsc	status,2,c
  4156  001684  D793               	goto	l811
  4157  001686  0A01               	xorlw	1	; case 3
  4158  001688  B4D8               	btfsc	status,2,c
  4159  00168A  D7A4               	goto	l812
  4160  00168C  0A07               	xorlw	7	; case 4
  4161  00168E  B4D8               	btfsc	status,2,c
  4162  001690  D7B5               	goto	l813
  4163  001692  0A01               	xorlw	1	; case 5
  4164  001694  B4D8               	btfsc	status,2,c
  4165  001696  D7C6               	goto	l814
  4166  001698  D7DA               	goto	l815
  4167  00169A                     l7648:
  4168  00169A  0100               	movlb	0	; () banked
  4169  00169C  4BBE               	infsnz	Loading@i_1197& (0+255),f,b
  4170  00169E  2BBF               	incf	(Loading@i_1197+1)& (0+255),f,b
  4171                           
  4172                           ; BSR set to: 0
  4173  0016A0  0100               	movlb	0	; () banked
  4174  0016A2  BFBF               	btfsc	(Loading@i_1197+1)& (0+255),7,b
  4175  0016A4  D7DF               	goto	l7646
  4176  0016A6  0100               	movlb	0	; () banked
  4177  0016A8  51BF               	movf	(Loading@i_1197+1)& (0+255),w,b
  4178  0016AA  E101               	bnz	l803
  4179  0016AC  D765               	goto	L6
  4180  0016AE                     l803:
  4181                           
  4182                           ;sort.c: 235: }
  4183                           ;sort.c: 236: }
  4184                           ;sort.c: 237: }
  4185                           ;sort.c: 238: LATAbits.LATA4 = 0;
  4186  0016AE  9889               	bcf	3977,4,c	;volatile
  4187                           
  4188                           ;sort.c: 239: j++;
  4189  0016B0  0100               	movlb	0	; () banked
  4190  0016B2  4BC0               	infsnz	Loading@j& (0+255),f,b
  4191  0016B4  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4192  0016B6                     l7654:
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;sort.c: 240: }
  4196                           ;sort.c: 242: if(!IR_signal){
  4197  0016B6  0100               	movlb	0	; () banked
  4198  0016B8  51E6               	movf	_IR_signal& (0+255),w,b
  4199  0016BA  0100               	movlb	0	; () banked
  4200  0016BC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4201  0016BE  A4D8               	btfss	status,2,c
  4202  0016C0  D016               	goto	l7666
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 243: _delay((unsigned long)((500)*(32000000/4000.0)));
  4206  0016C2  0E15               	movlw	21
  4207  0016C4  0100               	movlb	0	; () banked
  4208  0016C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4209  0016C8  0E4B               	movlw	75
  4210  0016CA  0100               	movlb	0	; () banked
  4211  0016CC  6FB1               	movwf	??_Loading& (0+255),b
  4212  0016CE  0EBE               	movlw	190
  4213  0016D0                     u9377:
  4214  0016D0  2EE8               	decfsz	wreg,f,c
  4215  0016D2  D7FE               	bra	u9377
  4216  0016D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  4217  0016D6  D7FC               	bra	u9377
  4218  0016D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4219  0016DA  D7FA               	bra	u9377
  4220  0016DC  F000               	nop	
  4221                           
  4222                           ;sort.c: 244: readIR();
  4223  0016DE  ECD4  F027         	call	_readIR	;wreg free
  4224                           
  4225                           ;sort.c: 245: if(IR_signal==1){
  4226  0016E2  0100               	movlb	0	; () banked
  4227  0016E4  05E6               	decf	_IR_signal& (0+255),w,b
  4228  0016E6  0100               	movlb	0	; () banked
  4229  0016E8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4230  0016EA  A4D8               	btfss	status,2,c
  4231  0016EC  D006               	goto	l819
  4232  0016EE                     l7666:
  4233                           
  4234                           ; BSR set to: 0
  4235  0016EE  0100               	movlb	0	; () banked
  4236  0016F0  05E6               	decf	_IR_signal& (0+255),w,b
  4237  0016F2  0100               	movlb	0	; () banked
  4238  0016F4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4239  0016F6  B4D8               	btfsc	status,2,c
  4240  0016F8  D6E3               	goto	l7592
  4241  0016FA                     l819:
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;sort.c: 250: }
  4245                           ;sort.c: 251: }
  4246                           ;sort.c: 252: }
  4247                           ;sort.c: 253: LATBbits.LATB2 = 0;
  4248  0016FA  948A               	bcf	3978,2,c	;volatile
  4249  0016FC                     l7668:
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;sort.c: 254: }
  4253                           ;sort.c: 255: f_can_coming_to_ID = 1;
  4254  0016FC  0E00               	movlw	0
  4255  0016FE  0101               	movlb	1	; () banked
  4256  001700  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4257  001702  0E01               	movlw	1
  4258  001704  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4259                           
  4260                           ; BSR set to: 1
  4261                           
  4262                           ; BSR set to: 1
  4263  001706  0012               	return	
  4264  001708                     __end_of_Loading:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           fsr1l	equ	0xFE1
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _initSortTimer *****************
  4279 ;; Defined at:
  4280 ;;		line 416 in file "sort.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;		None
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  i               2    8[BANK0 ] int 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      void 
  4287 ;; Registers used:
  4288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;Total ram usage:        5 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:   10
  4301 ;; This function calls:
  4302 ;;		_getRTC
  4303 ;; This function is called by:
  4304 ;;		_Loading
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text3
  4309  0046B8                     __ptext3:
  4310                           	opt stack 0
  4311  0046B8                     _initSortTimer:
  4312                           	opt stack 18
  4313                           
  4314                           ;sort.c: 418: getRTC();
  4315                           
  4316                           ;incstack = 0
  4317  0046B8  EC48  F024         	call	_getRTC	;wreg free
  4318                           
  4319                           ;sort.c: 419: for(int i = 0; i < 7; i++){
  4320  0046BC  0E00               	movlw	0
  4321  0046BE  0100               	movlb	0	; () banked
  4322  0046C0  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4323  0046C2  0E00               	movlw	0
  4324  0046C4  6F88               	movwf	initSortTimer@i& (0+255),b
  4325  0046C6                     l7060:
  4326                           
  4327                           ; BSR set to: 0
  4328  0046C6  0100               	movlb	0	; () banked
  4329  0046C8  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4330  0046CA  D008               	goto	l7064
  4331  0046CC  0100               	movlb	0	; () banked
  4332  0046CE  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4333  0046D0  E140               	bnz	l7070
  4334  0046D2  0E07               	movlw	7
  4335  0046D4  0100               	movlb	0	; () banked
  4336  0046D6  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4337  0046D8  B0D8               	btfsc	status,0,c
  4338  0046DA  D03B               	goto	l7070
  4339  0046DC                     l7064:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;sort.c: 420: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4343  0046DC  0E1C               	movlw	low _time
  4344  0046DE  0100               	movlb	0	; () banked
  4345  0046E0  2588               	addwf	initSortTimer@i& (0+255),w,b
  4346  0046E2  6ED9               	movwf	fsr2l,c
  4347  0046E4  0E01               	movlw	high _time
  4348  0046E6  0100               	movlb	0	; () banked
  4349  0046E8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4350  0046EA  6EDA               	movwf	fsr2h,c
  4351  0046EC  50DF               	movf	indf2,w,c
  4352  0046EE  0100               	movlb	0	; () banked
  4353  0046F0  6F85               	movwf	??_initSortTimer& (0+255),b
  4354  0046F2  0100               	movlb	0	; () banked
  4355  0046F4  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4356  0046F6  0E0F               	movlw	15
  4357  0046F8  1785               	andwf	??_initSortTimer& (0+255),f,b
  4358  0046FA  0E0F               	movlw	15
  4359  0046FC  0100               	movlb	0	; () banked
  4360  0046FE  1785               	andwf	??_initSortTimer& (0+255),f,b
  4361  004700  0100               	movlb	0	; () banked
  4362  004702  5185               	movf	??_initSortTimer& (0+255),w,b
  4363  004704  0D0A               	mullw	10
  4364  004706  0E1C               	movlw	low _time
  4365  004708  0100               	movlb	0	; () banked
  4366  00470A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4367  00470C  6ED9               	movwf	fsr2l,c
  4368  00470E  0E01               	movlw	high _time
  4369  004710  0100               	movlb	0	; () banked
  4370  004712  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4371  004714  6EDA               	movwf	fsr2h,c
  4372  004716  50DF               	movf	indf2,w,c
  4373  004718  0B0F               	andlw	15
  4374  00471A  0100               	movlb	0	; () banked
  4375  00471C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4376  00471E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4377  004720  50F3               	movf	prodl,w,c
  4378  004722  0100               	movlb	0	; () banked
  4379  004724  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4380  004726  50F4               	movf	prodh,w,c
  4381  004728  0100               	movlb	0	; () banked
  4382  00472A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4383  00472C  90D8               	bcf	status,0,c
  4384  00472E  0100               	movlb	0	; () banked
  4385  004730  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4386  004732  6ED9               	movwf	fsr2l,c
  4387  004734  0100               	movlb	0	; () banked
  4388  004736  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4389  004738  6EDA               	movwf	fsr2h,c
  4390  00473A  0E0E               	movlw	low _startTime
  4391  00473C  26D9               	addwf	fsr2l,f,c
  4392  00473E  0E01               	movlw	high _startTime
  4393  004740  22DA               	addwfc	fsr2h,f,c
  4394  004742  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4395  004746  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4396                           
  4397                           ; BSR set to: 0
  4398  00474A  0100               	movlb	0	; () banked
  4399  00474C  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4400  00474E  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4401  004750  D7BA               	goto	l7060
  4402  004752                     l7070:
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;sort.c: 421: }
  4406                           ;sort.c: 423: T0CON = 0b00010111;
  4407  004752  0E17               	movlw	23
  4408  004754  6ED5               	movwf	4053,c	;volatile
  4409                           
  4410                           ;sort.c: 432: TMR0H = 0b10000101;
  4411  004756  0E85               	movlw	133
  4412  004758  6ED7               	movwf	4055,c	;volatile
  4413                           
  4414                           ;sort.c: 433: TMR0L = 0b11101110;
  4415  00475A  0EEE               	movlw	238
  4416  00475C  6ED6               	movwf	4054,c	;volatile
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;sort.c: 434: TMR0ON = 1;
  4420  00475E  8ED5               	bsf	4053,7,c	;volatile
  4421                           
  4422                           ; BSR set to: 0
  4423  004760  0012               	return		;funcret
  4424  004762                     __end_of_initSortTimer:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           postinc0	equ	0xFEE
  4433                           wreg	equ	0xFE8
  4434                           postdec1	equ	0xFE5
  4435                           fsr1l	equ	0xFE1
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function _initGlobalVars *****************
  4444 ;; Defined at:
  4445 ;;		line 384 in file "sort.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;Total ram usage:        0 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    7
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_Loading
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text4
  4474  004480                     __ptext4:
  4475                           	opt stack 0
  4476  004480                     _initGlobalVars:
  4477                           	opt stack 21
  4478                           
  4479                           ;sort.c: 386: first = 0;
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;incstack = 0
  4483  004480  0E00               	movlw	0
  4484  004482  0101               	movlb	1	; () banked
  4485  004484  6F3A               	movwf	(_first+1)& (0+255),b
  4486  004486  0E00               	movlw	0
  4487  004488  6F39               	movwf	_first& (0+255),b
  4488                           
  4489                           ;sort.c: 389: f_loadingNewCan = 0;
  4490  00448A  0E00               	movlw	0
  4491  00448C  0100               	movlb	0	; () banked
  4492  00448E  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4493  004490  0E00               	movlw	0
  4494  004492  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4495                           
  4496                           ;sort.c: 390: f_lastCan = 0;
  4497  004494  0E00               	movlw	0
  4498  004496  0100               	movlb	0	; () banked
  4499  004498  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  4500  00449A  0E00               	movlw	0
  4501  00449C  6FF0               	movwf	_f_lastCan& (0+255),b
  4502                           
  4503                           ;sort.c: 391: f_ID_receive = 1;
  4504  00449E  0E00               	movlw	0
  4505  0044A0  0101               	movlb	1	; () banked
  4506  0044A2  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4507  0044A4  0E01               	movlw	1
  4508  0044A6  6F2F               	movwf	_f_ID_receive& (0+255),b
  4509                           
  4510                           ;sort.c: 392: f_can_coming_to_ID = 0;
  4511  0044A8  0E00               	movlw	0
  4512  0044AA  0101               	movlb	1	; () banked
  4513  0044AC  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4514  0044AE  0E00               	movlw	0
  4515  0044B0  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4516                           
  4517                           ;sort.c: 393: f_can_coming_to_distribution = 0;
  4518  0044B2  0E00               	movlw	0
  4519  0044B4  0101               	movlb	1	; () banked
  4520  0044B6  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4521  0044B8  0E00               	movlw	0
  4522  0044BA  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4523                           
  4524                           ;sort.c: 394: f_can_distributed = 1;
  4525  0044BC  0E00               	movlw	0
  4526  0044BE  0101               	movlb	1	; () banked
  4527  0044C0  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4528  0044C2  0E01               	movlw	1
  4529  0044C4  6F35               	movwf	_f_can_distributed& (0+255),b
  4530                           
  4531                           ;sort.c: 395: f_most_recent_sort_time = 0;
  4532  0044C6  0E00               	movlw	0
  4533  0044C8  0101               	movlb	1	; () banked
  4534  0044CA  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4535  0044CC  0E00               	movlw	0
  4536  0044CE  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4537                           
  4538                           ;sort.c: 398: count_total = 0;
  4539  0044D0  0E00               	movlw	0
  4540  0044D2  0100               	movlb	0	; () banked
  4541  0044D4  6FFF               	movwf	(_count_total+1)& (0+255),b
  4542  0044D6  0E00               	movlw	0
  4543  0044D8  6FFE               	movwf	_count_total& (0+255),b
  4544                           
  4545                           ;sort.c: 399: count_pop_no_tab = 0;
  4546  0044DA  0E00               	movlw	0
  4547  0044DC  0101               	movlb	1	; () banked
  4548  0044DE  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4549  0044E0  0E00               	movlw	0
  4550  0044E2  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4551                           
  4552                           ;sort.c: 400: count_pop_w_tab = 0;
  4553  0044E4  0E00               	movlw	0
  4554  0044E6  0101               	movlb	1	; () banked
  4555  0044E8  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4556  0044EA  0E00               	movlw	0
  4557  0044EC  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4558                           
  4559                           ;sort.c: 401: count_can_w_lab = 0;
  4560  0044EE  0E00               	movlw	0
  4561  0044F0  0101               	movlb	1	; () banked
  4562  0044F2  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4563  0044F4  0E00               	movlw	0
  4564  0044F6  6F25               	movwf	_count_can_w_lab& (0+255),b
  4565                           
  4566                           ;sort.c: 402: count_can_no_lab = 0;
  4567  0044F8  0E00               	movlw	0
  4568  0044FA  0101               	movlb	1	; () banked
  4569  0044FC  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4570  0044FE  0E00               	movlw	0
  4571  004500  6F23               	movwf	_count_can_no_lab& (0+255),b
  4572                           
  4573                           ;sort.c: 405: most_recent_sort_time = 999;
  4574  004502  0E03               	movlw	3
  4575  004504  6E6A               	movwf	_most_recent_sort_time+1,c
  4576  004506  0EE7               	movlw	231
  4577  004508  6E69               	movwf	_most_recent_sort_time,c
  4578                           
  4579                           ;sort.c: 408: servo_timer_counter = 0;
  4580  00450A  0E00               	movlw	0
  4581  00450C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4582  00450E  0E00               	movlw	0
  4583  004510  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4584                           
  4585                           ;sort.c: 409: servo_timer_target = 9999;
  4586  004512  0E27               	movlw	39
  4587  004514  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4588  004516  0E0F               	movlw	15
  4589  004518  6E6F               	movwf	_servo_timer_target,c	;volatile
  4590                           
  4591                           ;sort.c: 410: timer2_counter = 0;
  4592  00451A  0E00               	movlw	0
  4593  00451C  6E74               	movwf	_timer2_counter+1,c	;volatile
  4594  00451E  0E00               	movlw	0
  4595  004520  6E73               	movwf	_timer2_counter,c	;volatile
  4596                           
  4597                           ;sort.c: 411: f_arm_position = 0;
  4598  004522  0E00               	movlw	0
  4599  004524  0100               	movlb	0	; () banked
  4600  004526  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4601  004528  0E00               	movlw	0
  4602  00452A  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;sort.c: 412: pan_servo_state = -1;
  4606  00452C  686B               	setf	_pan_servo_state,c	;volatile
  4607  00452E  686C               	setf	_pan_servo_state+1,c	;volatile
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;sort.c: 413: tilt_servo_state = -1;
  4611  004530  6871               	setf	_tilt_servo_state,c	;volatile
  4612  004532  6872               	setf	_tilt_servo_state+1,c	;volatile
  4613                           
  4614                           ;sort.c: 414: f_panning_to_bin = 0;
  4615  004534  0E00               	movlw	0
  4616  004536  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4617  004538  0E00               	movlw	0
  4618  00453A  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4619                           
  4620                           ; BSR set to: 0
  4621  00453C  0012               	return		;funcret
  4622  00453E                     __end_of_initGlobalVars:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           postinc0	equ	0xFEE
  4631                           wreg	equ	0xFE8
  4632                           postdec1	equ	0xFE5
  4633                           fsr1l	equ	0xFE1
  4634                           indf2	equ	0xFDF
  4635                           postinc2	equ	0xFDE
  4636                           postdec2	equ	0xFDD
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function _getMAG *****************
  4642 ;; Defined at:
  4643 ;;		line 513 in file "sort.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;Total ram usage:        2 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    9
  4664 ;; This function calls:
  4665 ;;		_readMAG
  4666 ;; This function is called by:
  4667 ;;		_Loading
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text5
  4672  0051DE                     __ptext5:
  4673                           	opt stack 0
  4674  0051DE                     _getMAG:
  4675                           	opt stack 19
  4676                           
  4677                           ;sort.c: 514: readMAG();
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;incstack = 0
  4681  0051DE  ECFA  F027         	call	_readMAG	;wreg free
  4682                           
  4683                           ;sort.c: 516: if(MAG_signal==1){
  4684  0051E2  0100               	movlb	0	; () banked
  4685  0051E4  05E8               	decf	_MAG_signal& (0+255),w,b
  4686  0051E6  0100               	movlb	0	; () banked
  4687  0051E8  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4688  0051EA  A4D8               	btfss	status,2,c
  4689  0051EC  0012               	return	
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;sort.c: 517: _delay((unsigned long)((500)*(32000000/4000.0)));
  4693  0051EE  0E15               	movlw	21
  4694  0051F0  0100               	movlb	0	; () banked
  4695  0051F2  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4696  0051F4  0E4B               	movlw	75
  4697  0051F6  0100               	movlb	0	; () banked
  4698  0051F8  6F86               	movwf	??_getMAG& (0+255),b
  4699  0051FA  0EBE               	movlw	190
  4700  0051FC                     u9387:
  4701  0051FC  2EE8               	decfsz	wreg,f,c
  4702  0051FE  D7FE               	bra	u9387
  4703  005200  2F86               	decfsz	??_getMAG& (0+255),f,b
  4704  005202  D7FC               	bra	u9387
  4705  005204  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4706  005206  D7FA               	bra	u9387
  4707  005208  F000               	nop	
  4708                           
  4709                           ;sort.c: 518: readMAG();
  4710  00520A  ECFA  F027         	call	_readMAG	;wreg free
  4711  00520E  0012               	return	
  4712  005210                     __end_of_getMAG:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           postdec1	equ	0xFE5
  4723                           fsr1l	equ	0xFE1
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _getIR *****************
  4732 ;; Defined at:
  4733 ;;		line 497 in file "sort.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  i               2    7[BANK0 ] int 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, status,2, status,0, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        3 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    9
  4754 ;; This function calls:
  4755 ;;		_readIR
  4756 ;; This function is called by:
  4757 ;;		_Loading
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text6
  4762  004B10                     __ptext6:
  4763                           	opt stack 0
  4764  004B10                     _getIR:
  4765                           	opt stack 19
  4766                           
  4767                           ;sort.c: 498: readIR();
  4768                           
  4769                           ;incstack = 0
  4770  004B10  ECD4  F027         	call	_readIR	;wreg free
  4771                           
  4772                           ;sort.c: 499: for(int i = 0; i < 150; i++){
  4773  004B14  0E00               	movlw	0
  4774  004B16  0100               	movlb	0	; () banked
  4775  004B18  6F88               	movwf	(getIR@i+1)& (0+255),b
  4776  004B1A  0E00               	movlw	0
  4777  004B1C  6F87               	movwf	getIR@i& (0+255),b
  4778  004B1E                     l7160:
  4779                           
  4780                           ; BSR set to: 0
  4781  004B1E  0100               	movlb	0	; () banked
  4782  004B20  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4783  004B22  D008               	goto	l7164
  4784  004B24  0100               	movlb	0	; () banked
  4785  004B26  5188               	movf	(getIR@i+1)& (0+255),w,b
  4786  004B28  E11A               	bnz	l7176
  4787  004B2A  0E96               	movlw	150
  4788  004B2C  0100               	movlb	0	; () banked
  4789  004B2E  5D87               	subwf	getIR@i& (0+255),w,b
  4790  004B30  B0D8               	btfsc	status,0,c
  4791  004B32  D015               	goto	l7176
  4792  004B34                     l7164:
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;sort.c: 500: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4796  004B34  0E06               	movlw	6
  4797  004B36  0100               	movlb	0	; () banked
  4798  004B38  6F86               	movwf	??_getIR& (0+255),b
  4799  004B3A  0E30               	movlw	48
  4800  004B3C                     u9397:
  4801  004B3C  2EE8               	decfsz	wreg,f,c
  4802  004B3E  D7FE               	bra	u9397
  4803  004B40  2F86               	decfsz	??_getIR& (0+255),f,b
  4804  004B42  D7FC               	bra	u9397
  4805  004B44  F000               	nop	
  4806                           
  4807                           ;sort.c: 501: readIR();
  4808  004B46  ECD4  F027         	call	_readIR	;wreg free
  4809                           
  4810                           ;sort.c: 502: if(!IR_signal){
  4811  004B4A  0100               	movlb	0	; () banked
  4812  004B4C  51E6               	movf	_IR_signal& (0+255),w,b
  4813  004B4E  0100               	movlb	0	; () banked
  4814  004B50  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4815  004B52  B4D8               	btfsc	status,2,c
  4816  004B54  D004               	goto	l7176
  4817                           
  4818                           ; BSR set to: 0
  4819                           
  4820                           ; BSR set to: 0
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;sort.c: 503: break;
  4824  004B56  0100               	movlb	0	; () banked
  4825  004B58  4B87               	infsnz	getIR@i& (0+255),f,b
  4826  004B5A  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4827  004B5C  D7E0               	goto	l7160
  4828  004B5E                     l7176:
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;sort.c: 504: }
  4832                           ;sort.c: 505: }
  4833                           ;sort.c: 506: if(IR_signal==1){
  4834  004B5E  0100               	movlb	0	; () banked
  4835  004B60  05E6               	decf	_IR_signal& (0+255),w,b
  4836  004B62  0100               	movlb	0	; () banked
  4837  004B64  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4838  004B66  A4D8               	btfss	status,2,c
  4839  004B68  D006               	goto	l7180
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;sort.c: 507: f_loadingNewCan = 1;
  4843  004B6A  0E00               	movlw	0
  4844  004B6C  0100               	movlb	0	; () banked
  4845  004B6E  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4846  004B70  0E01               	movlw	1
  4847  004B72  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4848                           
  4849                           ;sort.c: 508: }
  4850  004B74  0012               	return	
  4851  004B76                     l7180:
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;sort.c: 509: else{
  4855                           ;sort.c: 510: f_loadingNewCan = 0;
  4856  004B76  0E00               	movlw	0
  4857  004B78  0100               	movlb	0	; () banked
  4858  004B7A  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4859  004B7C  0E00               	movlw	0
  4860  004B7E  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4861  004B80  0012               	return	
  4862  004B82                     __end_of_getIR:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           postinc0	equ	0xFEE
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _readIR *****************
  4882 ;; Defined at:
  4883 ;;		line 23 in file "ADCFunctionality.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  res             2    4[BANK0 ] int 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;Total ram usage:        4 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    8
  4904 ;; This function calls:
  4905 ;;		_readADC
  4906 ;; This function is called by:
  4907 ;;		_Loading
  4908 ;;		_getIR
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text7
  4913  004FA8                     __ptext7:
  4914                           	opt stack 0
  4915  004FA8                     _readIR:
  4916                           	opt stack 20
  4917                           
  4918                           ;ADCFunctionality.c: 24: readADC(0);
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;incstack = 0
  4922  004FA8  0E00               	movlw	0
  4923  004FAA  EC55  F02A         	call	_readADC
  4924                           
  4925                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4926  004FAE  50C3               	movf	4035,w,c	;volatile
  4927  004FB0  CFC4 F082          	movff	4036,??_readIR	;volatile
  4928  004FB4  0100               	movlb	0	; () banked
  4929  004FB6  6B83               	clrf	(??_readIR+1)& (0+255),b
  4930  004FB8  C082  F083         	movff	??_readIR,??_readIR+1
  4931  004FBC  0100               	movlb	0	; () banked
  4932  004FBE  6B82               	clrf	??_readIR& (0+255),b
  4933  004FC0  0100               	movlb	0	; () banked
  4934  004FC2  1182               	iorwf	??_readIR& (0+255),w,b
  4935  004FC4  0100               	movlb	0	; () banked
  4936  004FC6  6F84               	movwf	readIR@res& (0+255),b
  4937  004FC8  0100               	movlb	0	; () banked
  4938  004FCA  5183               	movf	(??_readIR+1)& (0+255),w,b
  4939  004FCC  0100               	movlb	0	; () banked
  4940  004FCE  6F85               	movwf	(readIR@res+1)& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4944  004FD0  0100               	movlb	0	; () banked
  4945  004FD2  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4946  004FD4  D00A               	goto	u4810
  4947  004FD6  0E21               	movlw	33
  4948  004FD8  0100               	movlb	0	; () banked
  4949  004FDA  5D84               	subwf	readIR@res& (0+255),w,b
  4950  004FDC  0E03               	movlw	3
  4951  004FDE  0100               	movlb	0	; () banked
  4952  004FE0  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4953  004FE2  A0D8               	btfss	status,0,c
  4954  004FE4  D002               	goto	u4810
  4955  004FE6  0E01               	movlw	1
  4956  004FE8  D001               	goto	u4820
  4957  004FEA                     u4810:
  4958  004FEA  0E00               	movlw	0
  4959  004FEC                     u4820:
  4960  004FEC  0100               	movlb	0	; () banked
  4961  004FEE  6FE6               	movwf	_IR_signal& (0+255),b
  4962  004FF0  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4963                           
  4964                           ; BSR set to: 0
  4965  004FF2  0012               	return		;funcret
  4966  004FF4                     __end_of_readIR:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           postinc0	equ	0xFEE
  4975                           wreg	equ	0xFE8
  4976                           postdec1	equ	0xFE5
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _ID *****************
  4986 ;; Defined at:
  4987 ;;		line 259 in file "sort.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  i               2    8[BANK0 ] int 
  4992 ;;  i               2    6[BANK0 ] int 
  4993 ;;  i               2    4[BANK0 ] int 
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;Total ram usage:        8 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    8
  5010 ;; This function calls:
  5011 ;;		_delay_ms
  5012 ;; This function is called by:
  5013 ;;		_sort
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text8
  5018  0030E2                     __ptext8:
  5019                           	opt stack 0
  5020  0030E2                     _ID:
  5021                           	opt stack 21
  5022                           
  5023                           ;sort.c: 260: if(f_can_coming_to_ID){
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027  0030E2  0101               	movlb	1	; () banked
  5028  0030E4  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5029  0030E6  0101               	movlb	1	; () banked
  5030  0030E8  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5031  0030EA  B4D8               	btfsc	status,2,c
  5032  0030EC  0012               	return	
  5033                           
  5034                           ; BSR set to: 1
  5035                           ;sort.c: 262: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5036  0030EE  0E29               	movlw	41
  5037  0030F0  0100               	movlb	0	; () banked
  5038  0030F2  6F83               	movwf	(??_ID+1)& (0+255),b
  5039  0030F4  0E96               	movlw	150
  5040  0030F6  0100               	movlb	0	; () banked
  5041  0030F8  6F82               	movwf	??_ID& (0+255),b
  5042  0030FA  0E7F               	movlw	127
  5043  0030FC                     u9407:
  5044  0030FC  2EE8               	decfsz	wreg,f,c
  5045  0030FE  D7FE               	bra	u9407
  5046  003100  2F82               	decfsz	??_ID& (0+255),f,b
  5047  003102  D7FC               	bra	u9407
  5048  003104  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5049  003106  D7FA               	bra	u9407
  5050                           
  5051                           ;sort.c: 264: f_arm_position = 0;
  5052  003108  0E00               	movlw	0
  5053  00310A  0100               	movlb	0	; () banked
  5054  00310C  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5055  00310E  0E00               	movlw	0
  5056  003110  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;sort.c: 266: LATAbits.LATA3 = 1;
  5060  003112  8689               	bsf	3977,3,c	;volatile
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;sort.c: 267: _delay((unsigned long)((600)*(32000000/4000.0)));
  5064  003114  0E19               	movlw	25
  5065  003116  0100               	movlb	0	; () banked
  5066  003118  6F83               	movwf	(??_ID+1)& (0+255),b
  5067  00311A  0E5A               	movlw	90
  5068  00311C  0100               	movlb	0	; () banked
  5069  00311E  6F82               	movwf	??_ID& (0+255),b
  5070  003120  0EB1               	movlw	177
  5071  003122                     u9417:
  5072  003122  2EE8               	decfsz	wreg,f,c
  5073  003124  D7FE               	bra	u9417
  5074  003126  2F82               	decfsz	??_ID& (0+255),f,b
  5075  003128  D7FC               	bra	u9417
  5076  00312A  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5077  00312C  D7FA               	bra	u9417
  5078  00312E  D000               	nop2	
  5079                           
  5080                           ;sort.c: 268: sensor_outputs[1] = PORTAbits.RA2;
  5081  003130  A480               	btfss	3968,2,c	;volatile
  5082  003132  D004               	goto	u6180
  5083  003134  0100               	movlb	0	; () banked
  5084  003136  6B82               	clrf	??_ID& (0+255),b
  5085  003138  2B82               	incf	??_ID& (0+255),f,b
  5086  00313A  D002               	goto	u6188
  5087  00313C                     u6180:
  5088  00313C  0100               	movlb	0	; () banked
  5089  00313E  6B82               	clrf	??_ID& (0+255),b
  5090  003140                     u6188:
  5091  003140  0100               	movlb	0	; () banked
  5092  003142  5182               	movf	??_ID& (0+255),w,b
  5093  003144  0100               	movlb	0	; () banked
  5094  003146  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5095  003148  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;sort.c: 269: LATAbits.LATA3 = 0;
  5099  00314A  9689               	bcf	3977,3,c	;volatile
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;sort.c: 271: _delay((unsigned long)((200)*(32000000/4000.0)));
  5103  00314C  0E09               	movlw	9
  5104  00314E  0100               	movlb	0	; () banked
  5105  003150  6F83               	movwf	(??_ID+1)& (0+255),b
  5106  003152  0E1E               	movlw	30
  5107  003154  0100               	movlb	0	; () banked
  5108  003156  6F82               	movwf	??_ID& (0+255),b
  5109  003158  0EE4               	movlw	228
  5110  00315A                     u9427:
  5111  00315A  2EE8               	decfsz	wreg,f,c
  5112  00315C  D7FE               	bra	u9427
  5113  00315E  2F82               	decfsz	??_ID& (0+255),f,b
  5114  003160  D7FC               	bra	u9427
  5115  003162  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5116  003164  D7FA               	bra	u9427
  5117  003166  F000               	nop	
  5118                           
  5119                           ;sort.c: 272: LATAbits.LATA3 = 1;
  5120  003168  8689               	bsf	3977,3,c	;volatile
  5121                           
  5122                           ;sort.c: 273: _delay((unsigned long)((600)*(32000000/4000.0)));
  5123  00316A  0E19               	movlw	25
  5124  00316C  0100               	movlb	0	; () banked
  5125  00316E  6F83               	movwf	(??_ID+1)& (0+255),b
  5126  003170  0E5A               	movlw	90
  5127  003172  0100               	movlb	0	; () banked
  5128  003174  6F82               	movwf	??_ID& (0+255),b
  5129  003176  0EB1               	movlw	177
  5130  003178                     u9437:
  5131  003178  2EE8               	decfsz	wreg,f,c
  5132  00317A  D7FE               	bra	u9437
  5133  00317C  2F82               	decfsz	??_ID& (0+255),f,b
  5134  00317E  D7FC               	bra	u9437
  5135  003180  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5136  003182  D7FA               	bra	u9437
  5137  003184  D000               	nop2	
  5138                           
  5139                           ;sort.c: 274: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  5140  003186  A480               	btfss	3968,2,c	;volatile
  5141  003188  D004               	goto	u6190
  5142  00318A  0100               	movlb	0	; () banked
  5143  00318C  6B82               	clrf	??_ID& (0+255),b
  5144  00318E  2B82               	incf	??_ID& (0+255),f,b
  5145  003190  D002               	goto	u6198
  5146  003192                     u6190:
  5147  003192  0100               	movlb	0	; () banked
  5148  003194  6B82               	clrf	??_ID& (0+255),b
  5149  003196                     u6198:
  5150  003196  0100               	movlb	0	; () banked
  5151  003198  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5152  00319A  0100               	movlb	0	; () banked
  5153  00319C  1182               	iorwf	??_ID& (0+255),w,b
  5154  00319E  0100               	movlb	0	; () banked
  5155  0031A0  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5156  0031A2  0100               	movlb	0	; () banked
  5157  0031A4  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5158  0031A6  0100               	movlb	0	; () banked
  5159  0031A8  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;sort.c: 282: if(!sensor_outputs[0]){
  5163  0031AA  0100               	movlb	0	; () banked
  5164  0031AC  51E2               	movf	_sensor_outputs& (0+255),w,b
  5165  0031AE  0100               	movlb	0	; () banked
  5166  0031B0  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5167  0031B2  A4D8               	btfss	status,2,c
  5168  0031B4  D016               	goto	l7708
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;sort.c: 283: if(!sensor_outputs[1]){
  5172  0031B6  0100               	movlb	0	; () banked
  5173  0031B8  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5174  0031BA  0100               	movlb	0	; () banked
  5175  0031BC  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5176  0031BE  A4D8               	btfss	status,2,c
  5177  0031C0  D008               	goto	l7704
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;sort.c: 284: count_pop_no_tab++;
  5181  0031C2  0101               	movlb	1	; () banked
  5182  0031C4  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5183  0031C6  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5184                           
  5185                           ; BSR set to: 1
  5186                           ;sort.c: 285: cur_can = 0;
  5187  0031C8  0E00               	movlw	0
  5188  0031CA  0101               	movlb	1	; () banked
  5189  0031CC  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5190  0031CE  0E00               	movlw	0
  5191  0031D0  D007               	goto	L7
  5192  0031D2                     l7704:
  5193                           
  5194                           ;sort.c: 287: else{
  5195                           ;sort.c: 288: count_pop_w_tab++;
  5196  0031D2  0101               	movlb	1	; () banked
  5197  0031D4  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5198  0031D6  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5199                           
  5200                           ; BSR set to: 1
  5201                           ;sort.c: 289: cur_can = 1;
  5202  0031D8  0E00               	movlw	0
  5203  0031DA  0101               	movlb	1	; () banked
  5204  0031DC  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5205  0031DE  0E01               	movlw	1
  5206  0031E0                     L7:
  5207  0031E0  6F2B               	movwf	_cur_can& (0+255),b
  5208  0031E2                     l7708:
  5209                           
  5210                           ;sort.c: 290: }
  5211                           ;sort.c: 291: }
  5212                           ;sort.c: 292: if(sensor_outputs[0]){
  5213  0031E2  0100               	movlb	0	; () banked
  5214  0031E4  51E2               	movf	_sensor_outputs& (0+255),w,b
  5215  0031E6  0100               	movlb	0	; () banked
  5216  0031E8  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5217  0031EA  B4D8               	btfsc	status,2,c
  5218  0031EC  D016               	goto	l7720
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;sort.c: 293: if(!sensor_outputs[1]){
  5222  0031EE  0100               	movlb	0	; () banked
  5223  0031F0  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5224  0031F2  0100               	movlb	0	; () banked
  5225  0031F4  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5226  0031F6  A4D8               	btfss	status,2,c
  5227  0031F8  D008               	goto	l7716
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;sort.c: 294: count_can_w_lab++;
  5231  0031FA  0101               	movlb	1	; () banked
  5232  0031FC  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5233  0031FE  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5234                           
  5235                           ; BSR set to: 1
  5236                           ;sort.c: 295: cur_can = 2;
  5237  003200  0E00               	movlw	0
  5238  003202  0101               	movlb	1	; () banked
  5239  003204  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5240  003206  0E02               	movlw	2
  5241  003208  D007               	goto	L8
  5242  00320A                     l7716:
  5243                           
  5244                           ;sort.c: 297: else{
  5245                           ;sort.c: 298: count_can_no_lab++;
  5246  00320A  0101               	movlb	1	; () banked
  5247  00320C  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5248  00320E  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5249                           
  5250                           ; BSR set to: 1
  5251                           ;sort.c: 299: cur_can = 3;
  5252  003210  0E00               	movlw	0
  5253  003212  0101               	movlb	1	; () banked
  5254  003214  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5255  003216  0E03               	movlw	3
  5256  003218                     L8:
  5257  003218  6F2B               	movwf	_cur_can& (0+255),b
  5258  00321A                     l7720:
  5259                           
  5260                           ;sort.c: 300: }
  5261                           ;sort.c: 301: }
  5262                           ;sort.c: 302: LATAbits.LATA3 = 0;
  5263  00321A  9689               	bcf	3977,3,c	;volatile
  5264  00321C                     l7722:
  5265  00321C  0101               	movlb	1	; () banked
  5266  00321E  5135               	movf	_f_can_distributed& (0+255),w,b
  5267  003220  0101               	movlb	1	; () banked
  5268  003222  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5269  003224  B4D8               	btfsc	status,2,c
  5270  003226  D7FA               	goto	l7722
  5271                           
  5272                           ; BSR set to: 1
  5273                           ;sort.c: 306: if(sensor_outputs[0]){
  5274                           
  5275                           ; BSR set to: 1
  5276  003228  0100               	movlb	0	; () banked
  5277  00322A  51E2               	movf	_sensor_outputs& (0+255),w,b
  5278  00322C  0100               	movlb	0	; () banked
  5279  00322E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5280  003230  B4D8               	btfsc	status,2,c
  5281  003232  D020               	goto	l7740
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;sort.c: 308: LATAbits.LATA3 = 1;
  5285  003234  8689               	bsf	3977,3,c	;volatile
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;sort.c: 311: for(int i=0;i<10000;i++)
  5289  003236  0E00               	movlw	0
  5290  003238  0100               	movlb	0	; () banked
  5291  00323A  6F85               	movwf	(ID@i+1)& (0+255),b
  5292  00323C  0E00               	movlw	0
  5293  00323E  6F84               	movwf	ID@i& (0+255),b
  5294  003240                     l7730:
  5295                           
  5296                           ; BSR set to: 0
  5297  003240  0100               	movlb	0	; () banked
  5298  003242  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5299  003244  D008               	goto	l833
  5300  003246  0E10               	movlw	16
  5301  003248  0100               	movlb	0	; () banked
  5302  00324A  5D84               	subwf	ID@i& (0+255),w,b
  5303  00324C  0E27               	movlw	39
  5304  00324E  0100               	movlb	0	; () banked
  5305  003250  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5306  003252  B0D8               	btfsc	status,0,c
  5307  003254  D00D               	goto	l834
  5308  003256                     l833:
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;sort.c: 312: {
  5312                           ;sort.c: 313: LATCbits.LATC0 = 1;
  5313  003256  808B               	bsf	3979,0,c	;volatile
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;sort.c: 314: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5317  003258  0E1A               	movlw	26
  5318  00325A                     u9447:
  5319  00325A  2EE8               	decfsz	wreg,f,c
  5320  00325C  D7FE               	bra	u9447
  5321  00325E  D000               	nop2	
  5322                           
  5323                           ;sort.c: 315: LATCbits.LATC0 = 0;
  5324  003260  908B               	bcf	3979,0,c	;volatile
  5325                           
  5326                           ;sort.c: 316: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5327  003262  0EF0               	movlw	240
  5328  003264                     u9457:
  5329  003264  2EE8               	decfsz	wreg,f,c
  5330  003266  D7FE               	bra	u9457
  5331  003268  0100               	movlb	0	; () banked
  5332  00326A  4B84               	infsnz	ID@i& (0+255),f,b
  5333  00326C  2B85               	incf	(ID@i+1)& (0+255),f,b
  5334  00326E  D7E8               	goto	l7730
  5335  003270                     l834:
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;sort.c: 317: }
  5339                           ;sort.c: 319: LATAbits.LATA3 = 0;
  5340  003270  9689               	bcf	3977,3,c	;volatile
  5341                           
  5342                           ;sort.c: 322: }
  5343  003272  D01D               	goto	l835
  5344  003274                     l7740:
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;sort.c: 323: else{
  5348                           ;sort.c: 325: for(int i=0;i<10000;i++)
  5349  003274  0E00               	movlw	0
  5350  003276  0100               	movlb	0	; () banked
  5351  003278  6F87               	movwf	(ID@i_1208+1)& (0+255),b
  5352  00327A  0E00               	movlw	0
  5353  00327C  6F86               	movwf	ID@i_1208& (0+255),b
  5354  00327E                     l7742:
  5355                           
  5356                           ; BSR set to: 0
  5357  00327E  0100               	movlb	0	; () banked
  5358  003280  BF87               	btfsc	(ID@i_1208+1)& (0+255),7,b
  5359  003282  D008               	goto	l836
  5360  003284  0E10               	movlw	16
  5361  003286  0100               	movlb	0	; () banked
  5362  003288  5D86               	subwf	ID@i_1208& (0+255),w,b
  5363  00328A  0E27               	movlw	39
  5364  00328C  0100               	movlb	0	; () banked
  5365  00328E  5987               	subwfb	(ID@i_1208+1)& (0+255),w,b
  5366  003290  B0D8               	btfsc	status,0,c
  5367  003292  D00D               	goto	l835
  5368  003294                     l836:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;sort.c: 326: {
  5372                           ;sort.c: 327: LATCbits.LATC0 = 1;
  5373  003294  808B               	bsf	3979,0,c	;volatile
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;sort.c: 328: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5377  003296  0E1A               	movlw	26
  5378  003298                     u9467:
  5379  003298  2EE8               	decfsz	wreg,f,c
  5380  00329A  D7FE               	bra	u9467
  5381  00329C  D000               	nop2	
  5382                           
  5383                           ;sort.c: 329: LATCbits.LATC0 = 0;
  5384  00329E  908B               	bcf	3979,0,c	;volatile
  5385                           
  5386                           ;sort.c: 330: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5387  0032A0  0EF0               	movlw	240
  5388  0032A2                     u9477:
  5389  0032A2  2EE8               	decfsz	wreg,f,c
  5390  0032A4  D7FE               	bra	u9477
  5391  0032A6  0100               	movlb	0	; () banked
  5392  0032A8  4B86               	infsnz	ID@i_1208& (0+255),f,b
  5393  0032AA  2B87               	incf	(ID@i_1208+1)& (0+255),f,b
  5394  0032AC  D7E8               	goto	l7742
  5395  0032AE                     l835:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;sort.c: 331: }
  5399                           ;sort.c: 332: }
  5400                           ;sort.c: 334: LATCbits.LATC0 = 0;
  5401  0032AE  908B               	bcf	3979,0,c	;volatile
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;sort.c: 336: f_can_coming_to_distribution = 1;
  5405  0032B0  0E00               	movlw	0
  5406  0032B2  0101               	movlb	1	; () banked
  5407  0032B4  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5408  0032B6  0E01               	movlw	1
  5409  0032B8  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5410                           
  5411                           ; BSR set to: 1
  5412                           ;sort.c: 337: _delay((unsigned long)((750)*(32000000/4000.0)));
  5413  0032BA  0E1F               	movlw	31
  5414  0032BC  0100               	movlb	0	; () banked
  5415  0032BE  6F83               	movwf	(??_ID+1)& (0+255),b
  5416  0032C0  0E71               	movlw	113
  5417  0032C2  0100               	movlb	0	; () banked
  5418  0032C4  6F82               	movwf	??_ID& (0+255),b
  5419  0032C6  0E1E               	movlw	30
  5420  0032C8                     u9487:
  5421  0032C8  2EE8               	decfsz	wreg,f,c
  5422  0032CA  D7FE               	bra	u9487
  5423  0032CC  2F82               	decfsz	??_ID& (0+255),f,b
  5424  0032CE  D7FC               	bra	u9487
  5425  0032D0  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5426  0032D2  D7FA               	bra	u9487
  5427  0032D4  F000               	nop	
  5428                           
  5429                           ;sort.c: 338: LATCbits.LATC0 = 1;
  5430  0032D6  808B               	bsf	3979,0,c	;volatile
  5431                           
  5432                           ;sort.c: 341: if(!f_lastCan){
  5433  0032D8  0100               	movlb	0	; () banked
  5434  0032DA  51F0               	movf	_f_lastCan& (0+255),w,b
  5435  0032DC  0100               	movlb	0	; () banked
  5436  0032DE  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5437  0032E0  A4D8               	btfss	status,2,c
  5438  0032E2  D032               	goto	l7774
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;sort.c: 342: for(int i=0; i<46; i++){
  5442  0032E4  0E00               	movlw	0
  5443  0032E6  0100               	movlb	0	; () banked
  5444  0032E8  6F89               	movwf	(ID@i_1209+1)& (0+255),b
  5445  0032EA  0E00               	movlw	0
  5446  0032EC  6F88               	movwf	ID@i_1209& (0+255),b
  5447                           
  5448                           ; BSR set to: 0
  5449  0032EE  0100               	movlb	0	; () banked
  5450  0032F0  BF89               	btfsc	(ID@i_1209+1)& (0+255),7,b
  5451  0032F2  D008               	goto	l7766
  5452  0032F4  0100               	movlb	0	; () banked
  5453  0032F6  5189               	movf	(ID@i_1209+1)& (0+255),w,b
  5454  0032F8  E126               	bnz	l840
  5455  0032FA  0E2E               	movlw	46
  5456  0032FC  0100               	movlb	0	; () banked
  5457  0032FE  5D88               	subwf	ID@i_1209& (0+255),w,b
  5458  003300  B0D8               	btfsc	status,0,c
  5459  003302  D021               	goto	l840
  5460  003304                     l7766:
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;sort.c: 343: LATBbits.LATB2 = !LATBbits.LATB2;
  5464  003304  B48A               	btfsc	3978,2,c	;volatile
  5465  003306  D004               	goto	u6320
  5466  003308  0100               	movlb	0	; () banked
  5467  00330A  6B82               	clrf	??_ID& (0+255),b
  5468  00330C  2B82               	incf	??_ID& (0+255),f,b
  5469  00330E  D002               	goto	u6338
  5470  003310                     u6320:
  5471  003310  0100               	movlb	0	; () banked
  5472  003312  6B82               	clrf	??_ID& (0+255),b
  5473  003314                     u6338:
  5474  003314  0100               	movlb	0	; () banked
  5475  003316  4782               	rlncf	??_ID& (0+255),f,b
  5476  003318  4782               	rlncf	??_ID& (0+255),f,b
  5477  00331A  508A               	movf	3978,w,c	;volatile
  5478  00331C  0100               	movlb	0	; () banked
  5479  00331E  1982               	xorwf	??_ID& (0+255),w,b
  5480  003320  0BFB               	andlw	-5
  5481  003322  1982               	xorwf	??_ID& (0+255),w,b
  5482  003324  6E8A               	movwf	3978,c	;volatile
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;sort.c: 344: delay_ms(45-i);
  5486  003326  0100               	movlb	0	; () banked
  5487  003328  5188               	movf	ID@i_1209& (0+255),w,b
  5488  00332A  0800               	sublw	0
  5489  00332C  0F2D               	addlw	45
  5490  00332E  EC80  F02A         	call	_delay_ms
  5491  003332  0100               	movlb	0	; () banked
  5492  003334  4B88               	infsnz	ID@i_1209& (0+255),f,b
  5493  003336  2B89               	incf	(ID@i_1209+1)& (0+255),f,b
  5494                           
  5495                           ; BSR set to: 0
  5496  003338  0100               	movlb	0	; () banked
  5497  00333A  BF89               	btfsc	(ID@i_1209+1)& (0+255),7,b
  5498  00333C  D7E3               	goto	l7766
  5499  00333E  0100               	movlb	0	; () banked
  5500  003340  5189               	movf	(ID@i_1209+1)& (0+255),w,b
  5501  003342  E101               	bnz	u6340
  5502  003344  D7DA               	goto	L9
  5503  003346                     u6340:
  5504  003346                     l840:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;sort.c: 345: }
  5508                           ;sort.c: 346: LATBbits.LATB2 = 1;
  5509  003346  848A               	bsf	3978,2,c	;volatile
  5510  003348                     l7774:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;sort.c: 347: }
  5514                           ;sort.c: 349: f_can_coming_to_ID = 0;
  5515  003348  0E00               	movlw	0
  5516  00334A  0101               	movlb	1	; () banked
  5517  00334C  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5518  00334E  0E00               	movlw	0
  5519  003350  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5520  003352  0012               	return	
  5521  003354                     __end_of_ID:
  5522                           	opt stack 0
  5523                           tblptru	equ	0xFF8
  5524                           tblptrh	equ	0xFF7
  5525                           tblptrl	equ	0xFF6
  5526                           tablat	equ	0xFF5
  5527                           prodh	equ	0xFF4
  5528                           prodl	equ	0xFF3
  5529                           postinc0	equ	0xFEE
  5530                           wreg	equ	0xFE8
  5531                           postdec1	equ	0xFE5
  5532                           fsr1l	equ	0xFE1
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           fsr2h	equ	0xFDA
  5537                           fsr2l	equ	0xFD9
  5538                           status	equ	0xFD8
  5539                           
  5540 ;; *************** function _delay_ms *****************
  5541 ;; Defined at:
  5542 ;;		line 632 in file "sort.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  milliseconds    1    wreg     unsigned char 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;Total ram usage:        2 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    7
  5563 ;; This function calls:
  5564 ;;		Nothing
  5565 ;; This function is called by:
  5566 ;;		_Loading
  5567 ;;		_ID
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text9
  5572  005500                     __ptext9:
  5573                           	opt stack 0
  5574  005500                     _delay_ms:
  5575                           	opt stack 21
  5576                           
  5577                           ; BSR set to: 1
  5578                           ;incstack = 0
  5579                           ;delay_ms@milliseconds stored from wreg
  5580  005500  0100               	movlb	0	; () banked
  5581  005502  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5582                           
  5583                           ;sort.c: 633: while(milliseconds > 0)
  5584  005504  D00B               	goto	l7132
  5585  005506                     l7128:
  5586                           
  5587                           ;sort.c: 634: {
  5588                           ;sort.c: 635: milliseconds--;
  5589  005506  0100               	movlb	0	; () banked
  5590  005508  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;sort.c: 636: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5594  00550A  0E0B               	movlw	11
  5595  00550C  0100               	movlb	0	; () banked
  5596  00550E  6F80               	movwf	??_delay_ms& (0+255),b
  5597  005510  0E47               	movlw	71
  5598  005512                     u9497:
  5599  005512  2EE8               	decfsz	wreg,f,c
  5600  005514  D7FE               	bra	u9497
  5601  005516  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5602  005518  D7FC               	bra	u9497
  5603  00551A  D000               	nop2	
  5604  00551C                     l7132:
  5605  00551C  0100               	movlb	0	; () banked
  5606  00551E  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5607  005520  0100               	movlb	0	; () banked
  5608  005522  B4D8               	btfsc	status,2,c
  5609  005524  0012               	return	
  5610  005526  D7EF               	goto	l7128
  5611  005528                     __end_of_delay_ms:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           postinc0	equ	0xFEE
  5620                           wreg	equ	0xFE8
  5621                           postdec1	equ	0xFE5
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           postdec2	equ	0xFDD
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function _Distribution *****************
  5631 ;; Defined at:
  5632 ;;		line 352 in file "sort.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;		None
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    8
  5653 ;; This function calls:
  5654 ;;		_updateServoPosition
  5655 ;; This function is called by:
  5656 ;;		_sort
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text10
  5661  004204                     __ptext10:
  5662                           	opt stack 0
  5663  004204                     _Distribution:
  5664                           	opt stack 21
  5665                           
  5666                           ;sort.c: 353: if(f_can_coming_to_distribution){
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;incstack = 0
  5670  004204  0101               	movlb	1	; () banked
  5671  004206  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5672  004208  0101               	movlb	1	; () banked
  5673  00420A  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5674  00420C  B4D8               	btfsc	status,2,c
  5675  00420E  0012               	return	
  5676                           
  5677                           ; BSR set to: 1
  5678                           ;sort.c: 354: f_can_distributed = 0;
  5679  004210  0E00               	movlw	0
  5680  004212  0101               	movlb	1	; () banked
  5681  004214  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5682  004216  0E00               	movlw	0
  5683  004218  6F35               	movwf	_f_can_distributed& (0+255),b
  5684                           
  5685                           ;sort.c: 361: switch(cur_can){
  5686  00421A  D034               	goto	l7790
  5687  00421C                     l7780:
  5688                           
  5689                           ;sort.c: 363: updateServoPosition(500, 1);
  5690  00421C  0E01               	movlw	1
  5691  00421E  0100               	movlb	0	; () banked
  5692  004220  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5693  004222  0EF4               	movlw	244
  5694  004224  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5695  004226  0E00               	movlw	0
  5696  004228  0100               	movlb	0	; () banked
  5697  00422A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5698  00422C  0E01               	movlw	1
  5699  00422E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5700  004230  EC8B  F024         	call	_updateServoPosition	;wreg free
  5701                           
  5702                           ;sort.c: 364: break;
  5703  004234  D03E               	goto	l7792
  5704  004236                     l7782:
  5705                           
  5706                           ;sort.c: 366: updateServoPosition(850, 1);
  5707  004236  0E03               	movlw	3
  5708  004238  0100               	movlb	0	; () banked
  5709  00423A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5710  00423C  0E52               	movlw	82
  5711  00423E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5712  004240  0E00               	movlw	0
  5713  004242  0100               	movlb	0	; () banked
  5714  004244  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5715  004246  0E01               	movlw	1
  5716  004248  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5717  00424A  EC8B  F024         	call	_updateServoPosition	;wreg free
  5718                           
  5719                           ;sort.c: 367: break;
  5720  00424E  D031               	goto	l7792
  5721  004250                     l7784:
  5722                           
  5723                           ;sort.c: 369: updateServoPosition(1670, 1);
  5724  004250  0E06               	movlw	6
  5725  004252  0100               	movlb	0	; () banked
  5726  004254  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5727  004256  0E86               	movlw	134
  5728  004258  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5729  00425A  0E00               	movlw	0
  5730  00425C  0100               	movlb	0	; () banked
  5731  00425E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5732  004260  0E01               	movlw	1
  5733  004262  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5734  004264  EC8B  F024         	call	_updateServoPosition	;wreg free
  5735                           
  5736                           ;sort.c: 370: break;
  5737  004268  D024               	goto	l7792
  5738  00426A                     l7786:
  5739                           
  5740                           ;sort.c: 372: updateServoPosition(2400, 1);
  5741  00426A  0E09               	movlw	9
  5742  00426C  0100               	movlb	0	; () banked
  5743  00426E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5744  004270  0E60               	movlw	96
  5745  004272  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5746  004274  0E00               	movlw	0
  5747  004276  0100               	movlb	0	; () banked
  5748  004278  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5749  00427A  0E01               	movlw	1
  5750  00427C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5751  00427E  EC8B  F024         	call	_updateServoPosition	;wreg free
  5752                           
  5753                           ;sort.c: 376: }
  5754                           
  5755                           ;sort.c: 375: break;
  5756                           
  5757                           ;sort.c: 374: default:
  5758                           
  5759                           ;sort.c: 373: break;
  5760  004282  D017               	goto	l7792
  5761  004284                     l7790:
  5762  004284  C12B  F088         	movff	_cur_can,??_Distribution
  5763  004288  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5764                           
  5765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5766                           ; Switch size 1, requested type "space"
  5767                           ; Number of cases is 1, Range of values is 0 to 0
  5768                           ; switch strategies available:
  5769                           ; Name         Instructions Cycles
  5770                           ; simple_byte            4     3 (average)
  5771                           ;	Chosen strategy is simple_byte
  5772  00428C  0100               	movlb	0	; () banked
  5773  00428E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5774  004290  0A00               	xorlw	0	; case 0
  5775  004292  A4D8               	btfss	status,2,c
  5776  004294  D00E               	goto	l7792
  5777                           
  5778                           ; BSR set to: 0
  5779                           ; Switch size 1, requested type "space"
  5780                           ; Number of cases is 4, Range of values is 0 to 3
  5781                           ; switch strategies available:
  5782                           ; Name         Instructions Cycles
  5783                           ; simple_byte           13     7 (average)
  5784                           ;	Chosen strategy is simple_byte
  5785  004296  0100               	movlb	0	; () banked
  5786  004298  5188               	movf	??_Distribution& (0+255),w,b
  5787  00429A  0A00               	xorlw	0	; case 0
  5788  00429C  B4D8               	btfsc	status,2,c
  5789  00429E  D7BE               	goto	l7780
  5790  0042A0  0A01               	xorlw	1	; case 1
  5791  0042A2  B4D8               	btfsc	status,2,c
  5792  0042A4  D7C8               	goto	l7782
  5793  0042A6  0A03               	xorlw	3	; case 2
  5794  0042A8  B4D8               	btfsc	status,2,c
  5795  0042AA  D7D2               	goto	l7784
  5796  0042AC  0A01               	xorlw	1	; case 3
  5797  0042AE  B4D8               	btfsc	status,2,c
  5798  0042B0  D7DC               	goto	l7786
  5799  0042B2                     l7792:
  5800                           
  5801                           ;sort.c: 377: updateServoPosition(1050, 3);
  5802  0042B2  0E04               	movlw	4
  5803  0042B4  0100               	movlb	0	; () banked
  5804  0042B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5805  0042B8  0E1A               	movlw	26
  5806  0042BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5807  0042BC  0E00               	movlw	0
  5808  0042BE  0100               	movlb	0	; () banked
  5809  0042C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5810  0042C2  0E03               	movlw	3
  5811  0042C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5812  0042C6  EC8B  F024         	call	_updateServoPosition	;wreg free
  5813                           
  5814                           ;sort.c: 378: servo_timer_target = 750;
  5815  0042CA  0E02               	movlw	2
  5816  0042CC  6E70               	movwf	_servo_timer_target+1,c	;volatile
  5817  0042CE  0EEE               	movlw	238
  5818  0042D0  6E6F               	movwf	_servo_timer_target,c	;volatile
  5819                           
  5820                           ;sort.c: 379: f_panning_to_bin = 1;
  5821  0042D2  0E00               	movlw	0
  5822  0042D4  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5823  0042D6  0E01               	movlw	1
  5824  0042D8  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5825                           
  5826                           ;sort.c: 380: f_can_coming_to_distribution = 0;
  5827  0042DA  0E00               	movlw	0
  5828  0042DC  0101               	movlb	1	; () banked
  5829  0042DE  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5830  0042E0  0E00               	movlw	0
  5831  0042E2  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5832  0042E4  0012               	return	
  5833  0042E6                     __end_of_Distribution:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           postinc0	equ	0xFEE
  5842                           wreg	equ	0xFE8
  5843                           postdec1	equ	0xFE5
  5844                           fsr1l	equ	0xFE1
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _machineConfig *****************
  5853 ;; Defined at:
  5854 ;;		line 15 in file "MachineConfig.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;		None
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;Total ram usage:        0 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    7
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_main
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text11
  5883  004CD0                     __ptext11:
  5884                           	opt stack 0
  5885  004CD0                     _machineConfig:
  5886                           	opt stack 23
  5887                           
  5888                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5889                           
  5890                           ; BSR set to: 1
  5891                           ;incstack = 0
  5892  004CD0  0EF0               	movlw	240
  5893  004CD2  6ED3               	movwf	4051,c	;volatile
  5894                           
  5895                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5896  004CD4  8C9B               	bsf	3995,6,c	;volatile
  5897                           
  5898                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5899  004CD6  0E07               	movlw	7
  5900  004CD8  6E92               	movwf	3986,c	;volatile
  5901                           
  5902                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5903  004CDA  0EF2               	movlw	242
  5904  004CDC  6E93               	movwf	3987,c	;volatile
  5905                           
  5906                           ;MachineConfig.c: 27: TRISC = 0x00;
  5907  004CDE  0E00               	movlw	0
  5908  004CE0  6E94               	movwf	3988,c	;volatile
  5909                           
  5910                           ;MachineConfig.c: 31: TRISD = 0x00;
  5911  004CE2  0E00               	movlw	0
  5912  004CE4  6E95               	movwf	3989,c	;volatile
  5913                           
  5914                           ;MachineConfig.c: 34: TRISE = 0x00;
  5915  004CE6  0E00               	movlw	0
  5916  004CE8  6E96               	movwf	3990,c	;volatile
  5917                           
  5918                           ;MachineConfig.c: 37: LATA = 0x00;
  5919  004CEA  0E00               	movlw	0
  5920  004CEC  6E89               	movwf	3977,c	;volatile
  5921                           
  5922                           ;MachineConfig.c: 38: LATB = 0x00;
  5923  004CEE  0E00               	movlw	0
  5924  004CF0  6E8A               	movwf	3978,c	;volatile
  5925                           
  5926                           ;MachineConfig.c: 39: LATC = 0x00;
  5927  004CF2  0E00               	movlw	0
  5928  004CF4  6E8B               	movwf	3979,c	;volatile
  5929                           
  5930                           ;MachineConfig.c: 40: LATD = 0x00;
  5931  004CF6  0E00               	movlw	0
  5932  004CF8  6E8C               	movwf	3980,c	;volatile
  5933                           
  5934                           ;MachineConfig.c: 41: LATE = 0x00;
  5935  004CFA  0E00               	movlw	0
  5936  004CFC  6E8D               	movwf	3981,c	;volatile
  5937                           
  5938                           ;MachineConfig.c: 43: nRBPU = 0;
  5939  004CFE  9EF1               	bcf	intcon2,7,c	;volatile
  5940                           
  5941                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5942  004D00  0E00               	movlw	0
  5943  004D02  6EC2               	movwf	4034,c	;volatile
  5944                           
  5945                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5946  004D04  0E0D               	movlw	13
  5947  004D06  6EC1               	movwf	4033,c	;volatile
  5948                           
  5949                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5950  004D08  0E00               	movlw	0
  5951  004D0A  6EB5               	movwf	4021,c	;volatile
  5952                           
  5953                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5954  004D0C  96B4               	bcf	4020,3,c	;volatile
  5955                           
  5956                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5957  004D0E  0EB1               	movlw	177
  5958  004D10  6EC0               	movwf	4032,c	;volatile
  5959                           
  5960                           ;MachineConfig.c: 55: INT1IE = 1;
  5961  004D12  86F0               	bsf	intcon3,3,c	;volatile
  5962                           
  5963                           ;MachineConfig.c: 57: TMR0IE = 1;
  5964  004D14  8AF2               	bsf	intcon,5,c	;volatile
  5965                           
  5966                           ;MachineConfig.c: 58: TMR1IE = 1;
  5967  004D16  809D               	bsf	3997,0,c	;volatile
  5968                           
  5969                           ;MachineConfig.c: 59: TMR2IE = 1;
  5970  004D18  829D               	bsf	3997,1,c	;volatile
  5971                           
  5972                           ;MachineConfig.c: 60: TMR3IE = 1;
  5973  004D1A  82A0               	bsf	4000,1,c	;volatile
  5974                           
  5975                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  5976  004D1C  0EB0               	movlw	176
  5977  004D1E  6ECD               	movwf	4045,c	;volatile
  5978                           
  5979                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  5980  004D20  0E7B               	movlw	123
  5981  004D22  6ECA               	movwf	4042,c	;volatile
  5982                           
  5983                           ;MachineConfig.c: 64: PR2 = 0x22;
  5984  004D24  0E22               	movlw	34
  5985  004D26  6ECB               	movwf	4043,c	;volatile
  5986                           
  5987                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  5988  004D28  0EB0               	movlw	176
  5989  004D2A  6EB1               	movwf	4017,c	;volatile
  5990                           
  5991                           ;MachineConfig.c: 66: PEIE = 1;
  5992  004D2C  8CF2               	bsf	intcon,6,c	;volatile
  5993                           
  5994                           ;MachineConfig.c: 67: ADIE = 0;
  5995  004D2E  9C9D               	bcf	3997,6,c	;volatile
  5996                           
  5997                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  5998  004D30  9EF2               	bcf	intcon,7,c	;volatile
  5999  004D32  0012               	return		;funcret
  6000  004D34                     __end_of_machineConfig:
  6001                           	opt stack 0
  6002                           tblptru	equ	0xFF8
  6003                           tblptrh	equ	0xFF7
  6004                           tblptrl	equ	0xFF6
  6005                           tablat	equ	0xFF5
  6006                           prodh	equ	0xFF4
  6007                           prodl	equ	0xFF3
  6008                           intcon	equ	0xFF2
  6009                           intcon2	equ	0xFF1
  6010                           intcon3	equ	0xFF0
  6011                           postinc0	equ	0xFEE
  6012                           wreg	equ	0xFE8
  6013                           postdec1	equ	0xFE5
  6014                           fsr1l	equ	0xFE1
  6015                           indf2	equ	0xFDF
  6016                           postinc2	equ	0xFDE
  6017                           postdec2	equ	0xFDD
  6018                           fsr2h	equ	0xFDA
  6019                           fsr2l	equ	0xFD9
  6020                           status	equ	0xFD8
  6021                           
  6022 ;; *************** function _logRun *****************
  6023 ;; Defined at:
  6024 ;;		line 84 in file "EEPROM.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;  byte_i          1   53[BANK0 ] unsigned char 
  6029 ;;  i               2   55[BANK0 ] int 
  6030 ;;  num             1   49[BANK0 ] unsigned char 
  6031 ;;  addr            2   57[BANK0 ] unsigned short 
  6032 ;;  byte11          1   54[BANK0 ] unsigned char 
  6033 ;;  byte3           1   52[BANK0 ] unsigned char 
  6034 ;;  byte2           1   51[BANK0 ] unsigned char 
  6035 ;;  byte1           1   50[BANK0 ] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;Total ram usage:       10 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:   11
  6052 ;; This function calls:
  6053 ;;		_EEPROM_read
  6054 ;;		_EEPROM_write
  6055 ;; This function is called by:
  6056 ;;		_main
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           	psect	text12
  6061  003CB4                     __ptext12:
  6062                           	opt stack 0
  6063  003CB4                     _logRun:
  6064                           	opt stack 19
  6065                           
  6066                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  6067                           
  6068                           ;incstack = 0
  6069  003CB4  0E00               	movlw	0
  6070  003CB6  0100               	movlb	0	; () banked
  6071  003CB8  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  6072  003CBA  0E00               	movlw	0
  6073  003CBC  6F80               	movwf	EEPROM_read@address& (0+255),b
  6074  003CBE  EC2D  F02B         	call	_EEPROM_read	;wreg free
  6075  003CC2  0100               	movlb	0	; () banked
  6076  003CC4  6FFD               	movwf	_sel& (0+255),b
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  6080  003CC6  0100               	movlb	0	; () banked
  6081  003CC8  51FD               	movf	_sel& (0+255),w,b
  6082  003CCA  0D0B               	mullw	11
  6083  003CCC  0E01               	movlw	1
  6084  003CCE  24F3               	addwf	prodl,w,c
  6085  003CD0  0100               	movlb	0	; () banked
  6086  003CD2  6FB9               	movwf	logRun@addr& (0+255),b
  6087  003CD4  0E00               	movlw	0
  6088  003CD6  20F4               	addwfc	prodh,w,c
  6089  003CD8  0100               	movlb	0	; () banked
  6090  003CDA  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;EEPROM.c: 101: if (sel < 3){
  6094  003CDC  0E03               	movlw	3
  6095  003CDE  0100               	movlb	0	; () banked
  6096  003CE0  61FD               	cpfslt	_sel& (0+255),b
  6097  003CE2  D00E               	goto	l9462
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;EEPROM.c: 102: unsigned char num = sel+1;
  6101  003CE4  0100               	movlb	0	; () banked
  6102  003CE6  29FD               	incf	_sel& (0+255),w,b
  6103  003CE8  0100               	movlb	0	; () banked
  6104  003CEA  6FB1               	movwf	logRun@num& (0+255),b
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;EEPROM.c: 103: EEPROM_write(0, num);
  6108  003CEC  0E00               	movlw	0
  6109  003CEE  0100               	movlb	0	; () banked
  6110  003CF0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6111  003CF2  0E00               	movlw	0
  6112  003CF4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6113  003CF6  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  6114  003CFA  EC8E  F020         	call	_EEPROM_write	;wreg free
  6115                           
  6116                           ;EEPROM.c: 104: }
  6117  003CFE  D00A               	goto	l9464
  6118  003D00                     l9462:
  6119                           
  6120                           ;EEPROM.c: 105: else{
  6121                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6122  003D00  0E00               	movlw	0
  6123  003D02  0100               	movlb	0	; () banked
  6124  003D04  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6125  003D06  0E00               	movlw	0
  6126  003D08  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6127  003D0A  0E00               	movlw	0
  6128  003D0C  0100               	movlb	0	; () banked
  6129  003D0E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6130  003D10  EC8E  F020         	call	_EEPROM_write	;wreg free
  6131  003D14                     l9464:
  6132                           
  6133                           ;EEPROM.c: 107: }
  6134                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6135  003D14  0100               	movlb	0	; () banked
  6136  003D16  51FE               	movf	_count_total& (0+255),w,b
  6137  003D18  0980               	iorlw	128
  6138  003D1A  0100               	movlb	0	; () banked
  6139  003D1C  6FB2               	movwf	logRun@byte1& (0+255),b
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6143  003D1E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6144  003D22  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6145  003D26  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6146  003D2A  EC8E  F020         	call	_EEPROM_write	;wreg free
  6147                           
  6148                           ;EEPROM.c: 112: addr++;
  6149  003D2E  0100               	movlb	0	; () banked
  6150  003D30  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6151  003D32  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6155  003D34  0101               	movlb	1	; () banked
  6156  003D36  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6157  003D38  0BF0               	andlw	240
  6158  003D3A  0101               	movlb	1	; () banked
  6159  003D3C  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6160  003D3E  0100               	movlb	0	; () banked
  6161  003D40  6FB3               	movwf	logRun@byte2& (0+255),b
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6165  003D42  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6166  003D46  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6167  003D4A  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6168  003D4E  EC8E  F020         	call	_EEPROM_write	;wreg free
  6169                           
  6170                           ;EEPROM.c: 117: addr++;
  6171  003D52  0100               	movlb	0	; () banked
  6172  003D54  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6173  003D56  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6177  003D58  0101               	movlb	1	; () banked
  6178  003D5A  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6179  003D5C  0BF0               	andlw	240
  6180  003D5E  0101               	movlb	1	; () banked
  6181  003D60  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6182  003D62  0100               	movlb	0	; () banked
  6183  003D64  6FB4               	movwf	logRun@byte3& (0+255),b
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6187  003D66  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6188  003D6A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6189  003D6E  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6190  003D72  EC8E  F020         	call	_EEPROM_write	;wreg free
  6191                           
  6192                           ;EEPROM.c: 120: addr++;
  6193  003D76  0100               	movlb	0	; () banked
  6194  003D78  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6195  003D7A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6199  003D7C  0E00               	movlw	0
  6200  003D7E  0100               	movlb	0	; () banked
  6201  003D80  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6202  003D82  0E00               	movlw	0
  6203  003D84  6FB7               	movwf	logRun@i& (0+255),b
  6204                           
  6205                           ; BSR set to: 0
  6206  003D86  0100               	movlb	0	; () banked
  6207  003D88  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6208  003D8A  D008               	goto	l9488
  6209  003D8C  0100               	movlb	0	; () banked
  6210  003D8E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6211  003D90  E128               	bnz	l1107
  6212  003D92  0E07               	movlw	7
  6213  003D94  0100               	movlb	0	; () banked
  6214  003D96  5DB7               	subwf	logRun@i& (0+255),w,b
  6215  003D98  B0D8               	btfsc	status,0,c
  6216  003D9A  D023               	goto	l1107
  6217  003D9C                     l9488:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6221  003D9C  90D8               	bcf	status,0,c
  6222  003D9E  0100               	movlb	0	; () banked
  6223  003DA0  35B7               	rlcf	logRun@i& (0+255),w,b
  6224  003DA2  6ED9               	movwf	fsr2l,c
  6225  003DA4  0100               	movlb	0	; () banked
  6226  003DA6  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6227  003DA8  6EDA               	movwf	fsr2h,c
  6228  003DAA  0E0E               	movlw	low _startTime
  6229  003DAC  26D9               	addwf	fsr2l,f,c
  6230  003DAE  0E01               	movlw	high _startTime
  6231  003DB0  22DA               	addwfc	fsr2h,f,c
  6232  003DB2  50DF               	movf	indf2,w,c
  6233  003DB4  0100               	movlb	0	; () banked
  6234  003DB6  6FB5               	movwf	logRun@byte_i& (0+255),b
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6238  003DB8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6239  003DBC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6240  003DC0  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6241  003DC4  EC8E  F020         	call	_EEPROM_write	;wreg free
  6242                           
  6243                           ;EEPROM.c: 126: addr++;
  6244  003DC8  0100               	movlb	0	; () banked
  6245  003DCA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6246  003DCC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6247                           
  6248                           ; BSR set to: 0
  6249  003DCE  0100               	movlb	0	; () banked
  6250  003DD0  4BB7               	infsnz	logRun@i& (0+255),f,b
  6251  003DD2  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6252                           
  6253                           ; BSR set to: 0
  6254  003DD4  0100               	movlb	0	; () banked
  6255  003DD6  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6256  003DD8  D7E1               	goto	l9488
  6257  003DDA  0100               	movlb	0	; () banked
  6258  003DDC  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6259  003DDE  E101               	bnz	u8730
  6260  003DE0  D7D8               	goto	L10
  6261  003DE2                     u8730:
  6262  003DE2                     l1107:
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;EEPROM.c: 127: }
  6266                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6267  003DE2  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6271  003DE6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6272  003DEA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6273  003DEE  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6274  003DF2  EC8E  F020         	call	_EEPROM_write	;wreg free
  6275  003DF6  0012               	return		;funcret
  6276  003DF8                     __end_of_logRun:
  6277                           	opt stack 0
  6278                           tblptru	equ	0xFF8
  6279                           tblptrh	equ	0xFF7
  6280                           tblptrl	equ	0xFF6
  6281                           tablat	equ	0xFF5
  6282                           prodh	equ	0xFF4
  6283                           prodl	equ	0xFF3
  6284                           intcon	equ	0xFF2
  6285                           intcon2	equ	0xFF1
  6286                           intcon3	equ	0xFF0
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _EEPROM_write *****************
  6299 ;; Defined at:
  6300 ;;		line 32 in file "EEPROM.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  address         2   43[BANK0 ] unsigned short 
  6303 ;;  data            1   45[BANK0 ] unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  i               1   48[BANK0 ] unsigned char 
  6306 ;;  i               1   47[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      void 
  6309 ;; Registers used:
  6310 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6316 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;Total ram usage:        6 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:   10
  6323 ;; This function calls:
  6324 ;;		_EEPROM_read
  6325 ;;		_lcdInst
  6326 ;;		_printf
  6327 ;; This function is called by:
  6328 ;;		_Loading
  6329 ;;		_logRun
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text13
  6334  00411C                     __ptext13:
  6335                           	opt stack 0
  6336  00411C                     _EEPROM_write:
  6337                           	opt stack 18
  6338                           
  6339                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6340                           
  6341                           ;incstack = 0
  6342  00411C  84A6               	bsf	4006,2,c	;volatile
  6343                           
  6344                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6345  00411E  0100               	movlb	0	; () banked
  6346  004120  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6347  004122  6EAA               	movwf	4010,c	;volatile
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6351  004124  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;EEPROM.c: 39: EEDATA = data;
  6355  004128  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6359  00412C  9EA6               	bcf	4006,7,c	;volatile
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6363  00412E  9CA6               	bcf	4006,6,c	;volatile
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6367  004130  9EF2               	bcf	intcon,7,c	;volatile
  6368                           
  6369                           ;EEPROM.c: 45: EECON2 = 0x55;
  6370  004132  0E55               	movlw	85
  6371  004134  6EA7               	movwf	4007,c	;volatile
  6372                           
  6373                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6374  004136  0EAA               	movlw	170
  6375  004138  6EA7               	movwf	4007,c	;volatile
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6379  00413A  82A6               	bsf	4006,1,c	;volatile
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6383  00413C  8EF2               	bsf	intcon,7,c	;volatile
  6384  00413E                     l1085:
  6385  00413E  A8A1               	btfss	4001,4,c	;volatile
  6386  004140  D7FE               	goto	l1085
  6387                           
  6388                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6389  004142  98A1               	bcf	4001,4,c	;volatile
  6390                           
  6391                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6392  004144  94A6               	bcf	4006,2,c	;volatile
  6393                           
  6394                           ;EEPROM.c: 57: if(debug){
  6395  004146  0101               	movlb	1	; () banked
  6396  004148  512D               	movf	_debug& (0+255),w,b
  6397  00414A  0101               	movlb	1	; () banked
  6398  00414C  112E               	iorwf	(_debug+1)& (0+255),w,b
  6399  00414E  B4D8               	btfsc	status,2,c
  6400  004150  0012               	return	
  6401                           
  6402                           ; BSR set to: 1
  6403                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6404  004152  0E01               	movlw	1
  6405  004154  EC5F  F02B         	call	_lcdInst
  6406  004158  0E68               	movlw	104
  6407  00415A  0100               	movlb	0	; () banked
  6408  00415C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6409  00415E  0EE4               	movlw	228
  6410  004160                     u9507:
  6411  004160  2EE8               	decfsz	wreg,f,c
  6412  004162  D7FE               	bra	u9507
  6413  004164  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6414  004166  D7FC               	bra	u9507
  6415  004168  F000               	nop	
  6416                           
  6417                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6418  00416A  0E80               	movlw	128
  6419  00416C  EC5F  F02B         	call	_lcdInst
  6420                           
  6421                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6422  004170  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6423  004174  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6424  004178  EC2D  F02B         	call	_EEPROM_read	;wreg free
  6425  00417C  0100               	movlb	0	; () banked
  6426  00417E  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6427  004180  A4D8               	btfss	status,2,c
  6428  004182  D024               	goto	l7114
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6432  004184  0ED6               	movlw	low STR_66
  6433  004186  0100               	movlb	0	; () banked
  6434  004188  6F8E               	movwf	printf@f& (0+255),b
  6435  00418A  0EFA               	movlw	high STR_66
  6436  00418C  0100               	movlb	0	; () banked
  6437  00418E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6438  004190  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6439  004194  0100               	movlb	0	; () banked
  6440  004196  6B91               	clrf	(?_printf+3)& (0+255),b
  6441  004198  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6442  00419C  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6443  0041A0  EC84  F00B         	call	_printf	;wreg free
  6444                           
  6445                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6446  0041A4  0E00               	movlw	0
  6447  0041A6  0100               	movlb	0	; () banked
  6448  0041A8  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6449  0041AA                     l7106:
  6450                           
  6451                           ; BSR set to: 0
  6452  0041AA  0E63               	movlw	99
  6453  0041AC  0100               	movlb	0	; () banked
  6454  0041AE  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6455  0041B0  D001               	goto	l7110
  6456  0041B2  0012               	return	
  6457  0041B4                     l7110:
  6458                           
  6459                           ; BSR set to: 0
  6460  0041B4  0E68               	movlw	104
  6461  0041B6  0100               	movlb	0	; () banked
  6462  0041B8  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6463  0041BA  0EE4               	movlw	228
  6464  0041BC                     u9517:
  6465  0041BC  2EE8               	decfsz	wreg,f,c
  6466  0041BE  D7FE               	bra	u9517
  6467  0041C0  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6468  0041C2  D7FC               	bra	u9517
  6469  0041C4  F000               	nop	
  6470  0041C6  0100               	movlb	0	; () banked
  6471  0041C8  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6472  0041CA  D7EF               	goto	l7106
  6473  0041CC                     l7114:
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6477  0041CC  0EBC               	movlw	low STR_67
  6478  0041CE  0100               	movlb	0	; () banked
  6479  0041D0  6F8E               	movwf	printf@f& (0+255),b
  6480  0041D2  0EFF               	movlw	high STR_67
  6481  0041D4  0100               	movlb	0	; () banked
  6482  0041D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6483  0041D8  EC84  F00B         	call	_printf	;wreg free
  6484  0041DC  0E00               	movlw	0
  6485  0041DE  0100               	movlb	0	; () banked
  6486  0041E0  6FB0               	movwf	EEPROM_write@i_1463& (0+255),b
  6487  0041E2                     l7118:
  6488                           
  6489                           ; BSR set to: 0
  6490  0041E2  0E63               	movlw	99
  6491  0041E4  0100               	movlb	0	; () banked
  6492  0041E6  65B0               	cpfsgt	EEPROM_write@i_1463& (0+255),b
  6493  0041E8  D001               	goto	l7122
  6494  0041EA  0012               	return	
  6495  0041EC                     l7122:
  6496                           
  6497                           ; BSR set to: 0
  6498  0041EC  0E68               	movlw	104
  6499  0041EE  0100               	movlb	0	; () banked
  6500  0041F0  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6501  0041F2  0EE4               	movlw	228
  6502  0041F4                     u9527:
  6503  0041F4  2EE8               	decfsz	wreg,f,c
  6504  0041F6  D7FE               	bra	u9527
  6505  0041F8  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6506  0041FA  D7FC               	bra	u9527
  6507  0041FC  F000               	nop	
  6508  0041FE  0100               	movlb	0	; () banked
  6509  004200  2BB0               	incf	EEPROM_write@i_1463& (0+255),f,b
  6510  004202  D7EF               	goto	l7118
  6511  004204                     __end_of_EEPROM_write:
  6512                           	opt stack 0
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           intcon	equ	0xFF2
  6520                           intcon2	equ	0xFF1
  6521                           intcon3	equ	0xFF0
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           postdec2	equ	0xFDD
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function _EEPROM_read *****************
  6534 ;; Defined at:
  6535 ;;		line 68 in file "EEPROM.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  address         2    0[BANK0 ] unsigned short 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      unsigned char 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;Total ram usage:        2 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    7
  6556 ;; This function calls:
  6557 ;;		Nothing
  6558 ;; This function is called by:
  6559 ;;		_Loading
  6560 ;;		_EEPROM_write
  6561 ;;		_logRun
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text14
  6566  00565A                     __ptext14:
  6567                           	opt stack 0
  6568  00565A                     _EEPROM_read:
  6569                           	opt stack 20
  6570                           
  6571                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6572                           
  6573                           ;incstack = 0
  6574  00565A  0100               	movlb	0	; () banked
  6575  00565C  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6576  00565E  6EAA               	movwf	4010,c	;volatile
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6580  005660  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6584  005664  9EA6               	bcf	4006,7,c	;volatile
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6588  005666  9CA6               	bcf	4006,6,c	;volatile
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6592  005668  80A6               	bsf	4006,0,c	;volatile
  6593  00566A                     l1098:
  6594  00566A  B0A6               	btfsc	4006,0,c	;volatile
  6595  00566C  D7FE               	goto	l1098
  6596                           
  6597                           ;EEPROM.c: 81: return EEDATA;
  6598  00566E  50A8               	movf	4008,w,c	;volatile
  6599  005670  0012               	return	
  6600  005672                     __end_of_EEPROM_read:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           intcon2	equ	0xFF1
  6610                           intcon3	equ	0xFF0
  6611                           postinc0	equ	0xFEE
  6612                           wreg	equ	0xFE8
  6613                           postdec1	equ	0xFE5
  6614                           fsr1l	equ	0xFE1
  6615                           indf2	equ	0xFDF
  6616                           postinc2	equ	0xFDE
  6617                           postdec2	equ	0xFDD
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           
  6622 ;; *************** function _initUI *****************
  6623 ;; Defined at:
  6624 ;;		line 62 in file "UI.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;		None
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      void 
  6631 ;; Registers used:
  6632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;Total ram usage:        0 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:   12
  6645 ;; This function calls:
  6646 ;;		_change_state_to_menu_start
  6647 ;;		_loadRTC
  6648 ;; This function is called by:
  6649 ;;		_main
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text15
  6654  005242                     __ptext15:
  6655                           	opt stack 0
  6656  005242                     _initUI:
  6657                           	opt stack 18
  6658                           
  6659                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6660                           
  6661                           ;incstack = 0
  6662  005242  8EF2               	bsf	intcon,7,c	;volatile
  6663                           
  6664                           ;UI.c: 64: machine_state = UI_state;
  6665  005244  0E00               	movlw	0
  6666  005246  0100               	movlb	0	; () banked
  6667  005248  6FFC               	movwf	_machine_state& (0+255),b
  6668                           
  6669                           ;UI.c: 65: logstate = 0;
  6670  00524A  0E00               	movlw	0
  6671  00524C  0100               	movlb	0	; () banked
  6672  00524E  6FF9               	movwf	(_logstate+1)& (0+255),b
  6673  005250  0E00               	movlw	0
  6674  005252  6FF8               	movwf	_logstate& (0+255),b
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;UI.c: 67: if(RTCflag){
  6678  005254  0100               	movlb	0	; () banked
  6679  005256  51EA               	movf	_RTCflag& (0+255),w,b
  6680  005258  0100               	movlb	0	; () banked
  6681  00525A  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6682  00525C  A4D8               	btfss	status,2,c
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;UI.c: 68: loadRTC();
  6686  00525E  EC02  F024         	call	_loadRTC	;wreg free
  6687                           
  6688                           ;UI.c: 69: }
  6689                           ;UI.c: 71: change_state_to_menu_start();
  6690  005262  EC3F  F02A         	call	_change_state_to_menu_start	;wreg free
  6691                           
  6692                           ;UI.c: 72: firstboot = 1;
  6693  005266  0E00               	movlw	0
  6694  005268  0101               	movlb	1	; () banked
  6695  00526A  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6696  00526C  0E01               	movlw	1
  6697  00526E  6F3B               	movwf	_firstboot& (0+255),b
  6698                           
  6699                           ; BSR set to: 1
  6700  005270  0012               	return		;funcret
  6701  005272                     __end_of_initUI:
  6702                           	opt stack 0
  6703                           tblptru	equ	0xFF8
  6704                           tblptrh	equ	0xFF7
  6705                           tblptrl	equ	0xFF6
  6706                           tablat	equ	0xFF5
  6707                           prodh	equ	0xFF4
  6708                           prodl	equ	0xFF3
  6709                           intcon	equ	0xFF2
  6710                           intcon2	equ	0xFF1
  6711                           intcon3	equ	0xFF0
  6712                           postinc0	equ	0xFEE
  6713                           wreg	equ	0xFE8
  6714                           postdec1	equ	0xFE5
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           fsr2h	equ	0xFDA
  6720                           fsr2l	equ	0xFD9
  6721                           status	equ	0xFD8
  6722                           
  6723 ;; *************** function _loadRTC *****************
  6724 ;; Defined at:
  6725 ;;		line 28 in file "RTC.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;		None
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;  i               2   22[BANK0 ] int 
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;Total ram usage:        3 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    9
  6746 ;; This function calls:
  6747 ;;		_I2C_Master_Init
  6748 ;;		_I2C_Master_Start
  6749 ;;		_I2C_Master_Stop
  6750 ;;		_I2C_Master_Write
  6751 ;; This function is called by:
  6752 ;;		_initUI
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text16
  6757  004804                     __ptext16:
  6758                           	opt stack 0
  6759  004804                     _loadRTC:
  6760                           	opt stack 20
  6761                           
  6762                           ;RTC.c: 30: I2C_Master_Init(10000);
  6763                           
  6764                           ; BSR set to: 1
  6765                           ;incstack = 0
  6766  004804  0E10               	movlw	16
  6767  004806  0100               	movlb	0	; () banked
  6768  004808  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6769  00480A  0E27               	movlw	39
  6770  00480C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6771  00480E  0E00               	movlw	0
  6772  004810  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6773  004812  0E00               	movlw	0
  6774  004814  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6775  004816  ECCB  F026         	call	_I2C_Master_Init	;wreg free
  6776                           
  6777                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6778  00481A  9EF2               	bcf	intcon,7,c	;volatile
  6779                           
  6780                           ;RTC.c: 34: I2C_Master_Start();
  6781  00481C  EC85  F02B         	call	_I2C_Master_Start	;wreg free
  6782                           
  6783                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6784  004820  0E00               	movlw	0
  6785  004822  0100               	movlb	0	; () banked
  6786  004824  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6787  004826  0ED0               	movlw	208
  6788  004828  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6789  00482A  EC73  F02B         	call	_I2C_Master_Write	;wreg free
  6790                           
  6791                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6792  00482E  0E00               	movlw	0
  6793  004830  0100               	movlb	0	; () banked
  6794  004832  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6795  004834  0E00               	movlw	0
  6796  004836  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6797  004838  EC73  F02B         	call	_I2C_Master_Write	;wreg free
  6798                           
  6799                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6800  00483C  0E00               	movlw	0
  6801  00483E  0100               	movlb	0	; () banked
  6802  004840  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6803  004842  0E00               	movlw	0
  6804  004844  6F96               	movwf	loadRTC@i& (0+255),b
  6805  004846                     l7268:
  6806                           
  6807                           ; BSR set to: 0
  6808  004846  0100               	movlb	0	; () banked
  6809  004848  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6810  00484A  D008               	goto	l7272
  6811  00484C  0100               	movlb	0	; () banked
  6812  00484E  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6813  004850  E11B               	bnz	l7278
  6814  004852  0E07               	movlw	7
  6815  004854  0100               	movlb	0	; () banked
  6816  004856  5D96               	subwf	loadRTC@i& (0+255),w,b
  6817  004858  B0D8               	btfsc	status,0,c
  6818  00485A  D016               	goto	l7278
  6819  00485C                     l7272:
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6823  00485C  0E1C               	movlw	low _time
  6824  00485E  0100               	movlb	0	; () banked
  6825  004860  2596               	addwf	loadRTC@i& (0+255),w,b
  6826  004862  6ED9               	movwf	fsr2l,c
  6827  004864  0E01               	movlw	high _time
  6828  004866  0100               	movlb	0	; () banked
  6829  004868  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6830  00486A  6EDA               	movwf	fsr2h,c
  6831  00486C  50DF               	movf	indf2,w,c
  6832  00486E  0100               	movlb	0	; () banked
  6833  004870  6F95               	movwf	??_loadRTC& (0+255),b
  6834  004872  0100               	movlb	0	; () banked
  6835  004874  5195               	movf	??_loadRTC& (0+255),w,b
  6836  004876  0100               	movlb	0	; () banked
  6837  004878  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6838  00487A  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6839  00487C  EC73  F02B         	call	_I2C_Master_Write	;wreg free
  6840  004880  0100               	movlb	0	; () banked
  6841  004882  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6842  004884  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6843  004886  D7DF               	goto	l7268
  6844  004888                     l7278:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;RTC.c: 39: }
  6848                           ;RTC.c: 40: I2C_Master_Stop();
  6849  004888  EC81  F02B         	call	_I2C_Master_Stop	;wreg free
  6850                           
  6851                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6852  00488C  8EF2               	bsf	intcon,7,c	;volatile
  6853  00488E  0012               	return		;funcret
  6854  004890                     __end_of_loadRTC:
  6855                           	opt stack 0
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           intcon	equ	0xFF2
  6863                           intcon2	equ	0xFF1
  6864                           intcon3	equ	0xFF0
  6865                           postinc0	equ	0xFEE
  6866                           wreg	equ	0xFE8
  6867                           postdec1	equ	0xFE5
  6868                           fsr1l	equ	0xFE1
  6869                           indf2	equ	0xFDF
  6870                           postinc2	equ	0xFDE
  6871                           postdec2	equ	0xFDD
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function _I2C_Master_Init *****************
  6877 ;; Defined at:
  6878 ;;		line 15 in file "I2C.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  c               4   13[BANK0 ] const unsigned long 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;		None
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  1    wreg      void 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6892 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;Total ram usage:        8 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    8
  6899 ;; This function calls:
  6900 ;;		___lldiv
  6901 ;; This function is called by:
  6902 ;;		_main
  6903 ;;		_loadRTC
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           	psect	text17
  6908  004D96                     __ptext17:
  6909                           	opt stack 0
  6910  004D96                     _I2C_Master_Init:
  6911                           	opt stack 20
  6912                           
  6913                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6914                           
  6915                           ;incstack = 0
  6916  004D96  0E00               	movlw	0
  6917  004D98  6EC7               	movwf	4039,c	;volatile
  6918                           
  6919                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6920  004D9A  0E28               	movlw	40
  6921  004D9C  6EC6               	movwf	4038,c	;volatile
  6922                           
  6923                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6924  004D9E  0E00               	movlw	0
  6925  004DA0  6EC5               	movwf	4037,c	;volatile
  6926                           
  6927                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6928  004DA2  0E00               	movlw	0
  6929  004DA4  0100               	movlb	0	; () banked
  6930  004DA6  6F80               	movwf	___lldiv@dividend& (0+255),b
  6931  004DA8  0E48               	movlw	72
  6932  004DAA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6933  004DAC  0EE8               	movlw	232
  6934  004DAE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6935  004DB0  0E01               	movlw	1
  6936  004DB2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6937  004DB4  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6938  004DB8  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6939  004DBC  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6940  004DC0  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6941  004DC4  0E02               	movlw	2
  6942  004DC6                     u5505:
  6943  004DC6  90D8               	bcf	status,0,c
  6944  004DC8  0100               	movlb	0	; () banked
  6945  004DCA  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6946  004DCC  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6947  004DCE  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6948  004DD0  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6949  004DD2  2EE8               	decfsz	wreg,f,c
  6950  004DD4  D7F8               	goto	u5505
  6951  004DD6  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6952  004DDA  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6953  004DDE  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6954  004DE2  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6955  004DE6  ECFE  F022         	call	___lldiv	;wreg free
  6956  004DEA  0100               	movlb	0	; () banked
  6957  004DEC  0580               	decf	?___lldiv& (0+255),w,b
  6958  004DEE  6EC8               	movwf	4040,c	;volatile
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;I2C.c: 22: TRISC3 = 1;
  6962  004DF0  8694               	bsf	3988,3,c	;volatile
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;I2C.c: 23: TRISC4 = 1;
  6966  004DF2  8894               	bsf	3988,4,c	;volatile
  6967                           
  6968                           ; BSR set to: 0
  6969  004DF4  0012               	return		;funcret
  6970  004DF6                     __end_of_I2C_Master_Init:
  6971                           	opt stack 0
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           intcon2	equ	0xFF1
  6980                           intcon3	equ	0xFF0
  6981                           postinc0	equ	0xFEE
  6982                           wreg	equ	0xFE8
  6983                           postdec1	equ	0xFE5
  6984                           fsr1l	equ	0xFE1
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992 ;; *************** function ___lldiv *****************
  6993 ;; Defined at:
  6994 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;  dividend        4    0[BANK0 ] unsigned long 
  6997 ;;  divisor         4    4[BANK0 ] unsigned long 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  quotient        4    8[BANK0 ] unsigned long 
  7000 ;;  counter         1   12[BANK0 ] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  4    0[BANK0 ] unsigned long 
  7003 ;; Registers used:
  7004 ;;		wreg, status,2, status,0
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7010 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;Total ram usage:       13 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    7
  7017 ;; This function calls:
  7018 ;;		Nothing
  7019 ;; This function is called by:
  7020 ;;		_I2C_Master_Init
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           	psect	text18
  7025  0045FC                     __ptext18:
  7026                           	opt stack 0
  7027  0045FC                     ___lldiv:
  7028                           	opt stack 20
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;incstack = 0
  7032  0045FC  0E00               	movlw	0
  7033  0045FE  0100               	movlb	0	; () banked
  7034  004600  6F88               	movwf	___lldiv@quotient& (0+255),b
  7035  004602  0E00               	movlw	0
  7036  004604  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7037  004606  0E00               	movlw	0
  7038  004608  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7039  00460A  0E00               	movlw	0
  7040  00460C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7041                           
  7042                           ; BSR set to: 0
  7043  00460E  0100               	movlb	0	; () banked
  7044  004610  5184               	movf	___lldiv@divisor& (0+255),w,b
  7045  004612  0100               	movlb	0	; () banked
  7046  004614  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7047  004616  0100               	movlb	0	; () banked
  7048  004618  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7049  00461A  0100               	movlb	0	; () banked
  7050  00461C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7051  00461E  B4D8               	btfsc	status,2,c
  7052  004620  D042               	goto	l1878
  7053                           
  7054                           ; BSR set to: 0
  7055  004622  0E01               	movlw	1
  7056  004624  0100               	movlb	0	; () banked
  7057  004626  6F8C               	movwf	___lldiv@counter& (0+255),b
  7058  004628  D008               	goto	l6672
  7059  00462A                     l6670:
  7060                           
  7061                           ; BSR set to: 0
  7062  00462A  0100               	movlb	0	; () banked
  7063  00462C  90D8               	bcf	status,0,c
  7064  00462E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7065  004630  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7066  004632  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7067  004634  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7068  004636  0100               	movlb	0	; () banked
  7069  004638  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7070  00463A                     l6672:
  7071                           
  7072                           ; BSR set to: 0
  7073  00463A  0100               	movlb	0	; () banked
  7074  00463C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7075  00463E  D7F5               	goto	l6670
  7076  004640                     l6674:
  7077                           
  7078                           ; BSR set to: 0
  7079  004640  0100               	movlb	0	; () banked
  7080  004642  90D8               	bcf	status,0,c
  7081  004644  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7082  004646  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7083  004648  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7084  00464A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7085                           
  7086                           ; BSR set to: 0
  7087  00464C  0100               	movlb	0	; () banked
  7088  00464E  5184               	movf	___lldiv@divisor& (0+255),w,b
  7089  004650  0100               	movlb	0	; () banked
  7090  004652  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7091  004654  0100               	movlb	0	; () banked
  7092  004656  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7093  004658  0100               	movlb	0	; () banked
  7094  00465A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7095  00465C  0100               	movlb	0	; () banked
  7096  00465E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7097  004660  0100               	movlb	0	; () banked
  7098  004662  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7099  004664  0100               	movlb	0	; () banked
  7100  004666  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7101  004668  0100               	movlb	0	; () banked
  7102  00466A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7103  00466C  A0D8               	btfss	status,0,c
  7104  00466E  D012               	goto	l6682
  7105                           
  7106                           ; BSR set to: 0
  7107  004670  0100               	movlb	0	; () banked
  7108  004672  5184               	movf	___lldiv@divisor& (0+255),w,b
  7109  004674  0100               	movlb	0	; () banked
  7110  004676  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7111  004678  0100               	movlb	0	; () banked
  7112  00467A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7113  00467C  0100               	movlb	0	; () banked
  7114  00467E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7115  004680  0100               	movlb	0	; () banked
  7116  004682  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7117  004684  0100               	movlb	0	; () banked
  7118  004686  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7119  004688  0100               	movlb	0	; () banked
  7120  00468A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7121  00468C  0100               	movlb	0	; () banked
  7122  00468E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7123                           
  7124                           ; BSR set to: 0
  7125  004690  0100               	movlb	0	; () banked
  7126  004692  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7127  004694                     l6682:
  7128                           
  7129                           ; BSR set to: 0
  7130  004694  0100               	movlb	0	; () banked
  7131  004696  90D8               	bcf	status,0,c
  7132  004698  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7133  00469A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7134  00469C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7135  00469E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7136                           
  7137                           ; BSR set to: 0
  7138  0046A0  0100               	movlb	0	; () banked
  7139  0046A2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7140  0046A4  D7CD               	goto	l6674
  7141  0046A6                     l1878:
  7142                           
  7143                           ; BSR set to: 0
  7144  0046A6  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7145  0046AA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7146  0046AE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7147  0046B2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7148                           
  7149                           ; BSR set to: 0
  7150  0046B6  0012               	return		;funcret
  7151  0046B8                     __end_of___lldiv:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           intcon	equ	0xFF2
  7160                           intcon2	equ	0xFF1
  7161                           intcon3	equ	0xFF0
  7162                           postinc0	equ	0xFEE
  7163                           wreg	equ	0xFE8
  7164                           postdec1	equ	0xFE5
  7165                           fsr1l	equ	0xFE1
  7166                           indf2	equ	0xFDF
  7167                           postinc2	equ	0xFDE
  7168                           postdec2	equ	0xFDD
  7169                           fsr2h	equ	0xFDA
  7170                           fsr2l	equ	0xFD9
  7171                           status	equ	0xFD8
  7172                           
  7173 ;; *************** function _change_state_to_menu_start *****************
  7174 ;; Defined at:
  7175 ;;		line 477 in file "UI.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;		None
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;		None
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      void 
  7182 ;; Registers used:
  7183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;Total ram usage:        0 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:   11
  7196 ;; This function calls:
  7197 ;;		_lcdInst
  7198 ;;		_printRTC
  7199 ;;		_printf
  7200 ;; This function is called by:
  7201 ;;		_initUI
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           	psect	text19
  7206  00547E                     __ptext19:
  7207                           	opt stack 0
  7208  00547E                     _change_state_to_menu_start:
  7209                           	opt stack 18
  7210                           
  7211                           ;UI.c: 478: cur_state = 0;
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;incstack = 0
  7215  00547E  0E00               	movlw	0
  7216  005480  0100               	movlb	0	; () banked
  7217  005482  6FED               	movwf	(_cur_state+1)& (0+255),b
  7218  005484  0E00               	movlw	0
  7219  005486  6FEC               	movwf	_cur_state& (0+255),b
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;UI.c: 480: lcdInst(0b10000000);;
  7223  005488  0E80               	movlw	128
  7224  00548A  EC5F  F02B         	call	_lcdInst
  7225                           
  7226                           ;UI.c: 481: printRTC();
  7227  00548E  EC58  F014         	call	_printRTC	;wreg free
  7228                           
  7229                           ;UI.c: 482: lcdInst(0b11000000);;
  7230  005492  0EC0               	movlw	192
  7231  005494  EC5F  F02B         	call	_lcdInst
  7232                           
  7233                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7234  005498  0E01               	movlw	low STR_30
  7235  00549A  0100               	movlb	0	; () banked
  7236  00549C  6F8E               	movwf	printf@f& (0+255),b
  7237  00549E  0EFE               	movlw	high STR_30
  7238  0054A0  0100               	movlb	0	; () banked
  7239  0054A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  7240  0054A4  EC84  F00B         	call	_printf	;wreg free
  7241  0054A8  0012               	return		;funcret
  7242  0054AA                     __end_of_change_state_to_menu_start:
  7243                           	opt stack 0
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           intcon2	equ	0xFF1
  7252                           intcon3	equ	0xFF0
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           postdec1	equ	0xFE5
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function _initTime *****************
  7265 ;; Defined at:
  7266 ;;		line 17 in file "RTC.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  s               1    wreg     unsigned char 
  7269 ;;  m               1    0[BANK0 ] unsigned char 
  7270 ;;  h               1    1[BANK0 ] unsigned char 
  7271 ;;  w               1    2[BANK0 ] unsigned char 
  7272 ;;  DD              1    3[BANK0 ] unsigned char 
  7273 ;;  MM              1    4[BANK0 ] unsigned char 
  7274 ;;  YY              1    5[BANK0 ] unsigned char 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  s               1    6[BANK0 ] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7286 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;Total ram usage:        7 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    7
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_main
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text20
  7301  0055E2                     __ptext20:
  7302                           	opt stack 0
  7303  0055E2                     _initTime:
  7304                           	opt stack 23
  7305                           
  7306                           ;incstack = 0
  7307                           ;initTime@s stored from wreg
  7308  0055E2  0100               	movlb	0	; () banked
  7309  0055E4  6F86               	movwf	initTime@s& (0+255),b
  7310                           
  7311                           ;RTC.c: 19: time[0] = s;
  7312  0055E6  C086  F11C         	movff	initTime@s,_time
  7313                           
  7314                           ;RTC.c: 20: time[1] = m;
  7315  0055EA  C080  F11D         	movff	initTime@m,_time+1
  7316                           
  7317                           ;RTC.c: 21: time[2] = h;
  7318  0055EE  C081  F11E         	movff	initTime@h,_time+2
  7319                           
  7320                           ;RTC.c: 22: time[3] = w;
  7321  0055F2  C082  F11F         	movff	initTime@w,_time+3
  7322                           
  7323                           ;RTC.c: 23: time[4] = DD;
  7324  0055F6  C083  F120         	movff	initTime@DD,_time+4
  7325                           
  7326                           ;RTC.c: 24: time[5] = MM;
  7327  0055FA  C084  F121         	movff	initTime@MM,_time+5
  7328                           
  7329                           ;RTC.c: 25: time[6] = YY;
  7330  0055FE  C085  F122         	movff	initTime@YY,_time+6
  7331  005602  0012               	return		;funcret
  7332  005604                     __end_of_initTime:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           intcon2	equ	0xFF1
  7342                           intcon3	equ	0xFF0
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           postdec1	equ	0xFE5
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           postinc2	equ	0xFDE
  7349                           postdec2	equ	0xFDD
  7350                           fsr2h	equ	0xFDA
  7351                           fsr2l	equ	0xFD9
  7352                           status	equ	0xFD8
  7353                           
  7354 ;; *************** function _initLCD *****************
  7355 ;; Defined at:
  7356 ;;		line 50 in file "lcd.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;		None
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;		None
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		wreg, status,2, status,0, cstack
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;Total ram usage:        1 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    9
  7377 ;; This function calls:
  7378 ;;		_lcdInst
  7379 ;; This function is called by:
  7380 ;;		_main
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text21
  7385  005040                     __ptext21:
  7386                           	opt stack 0
  7387  005040                     _initLCD:
  7388                           	opt stack 21
  7389                           
  7390                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  7391                           
  7392                           ;incstack = 0
  7393  005040  0E9C               	movlw	156
  7394  005042  0100               	movlb	0	; () banked
  7395  005044  6F83               	movwf	??_initLCD& (0+255),b
  7396  005046  0ED7               	movlw	215
  7397  005048                     u9537:
  7398  005048  2EE8               	decfsz	wreg,f,c
  7399  00504A  D7FE               	bra	u9537
  7400  00504C  2F83               	decfsz	??_initLCD& (0+255),f,b
  7401  00504E  D7FC               	bra	u9537
  7402                           
  7403                           ;lcd.c: 52: lcdInst(0b00110011);
  7404  005050  0E33               	movlw	51
  7405  005052  EC5F  F02B         	call	_lcdInst
  7406                           
  7407                           ;lcd.c: 53: lcdInst(0b00110010);
  7408  005056  0E32               	movlw	50
  7409  005058  EC5F  F02B         	call	_lcdInst
  7410                           
  7411                           ;lcd.c: 55: lcdInst(0b00101000);
  7412  00505C  0E28               	movlw	40
  7413  00505E  EC5F  F02B         	call	_lcdInst
  7414                           
  7415                           ;lcd.c: 56: lcdInst(0b00001100);
  7416  005062  0E0C               	movlw	12
  7417  005064  EC5F  F02B         	call	_lcdInst
  7418                           
  7419                           ;lcd.c: 57: lcdInst(0b00000110);
  7420  005068  0E06               	movlw	6
  7421  00506A  EC5F  F02B         	call	_lcdInst
  7422                           
  7423                           ;lcd.c: 58: lcdInst(0b00000001);
  7424  00506E  0E01               	movlw	1
  7425  005070  EC5F  F02B         	call	_lcdInst
  7426                           
  7427                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  7428  005074  0E9C               	movlw	156
  7429  005076  0100               	movlb	0	; () banked
  7430  005078  6F83               	movwf	??_initLCD& (0+255),b
  7431  00507A  0ED7               	movlw	215
  7432  00507C                     u9547:
  7433  00507C  2EE8               	decfsz	wreg,f,c
  7434  00507E  D7FE               	bra	u9547
  7435  005080  2F83               	decfsz	??_initLCD& (0+255),f,b
  7436  005082  D7FC               	bra	u9547
  7437  005084  0012               	return		;funcret
  7438  005086                     __end_of_initLCD:
  7439                           	opt stack 0
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           intcon2	equ	0xFF1
  7448                           intcon3	equ	0xFF0
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _UI *****************
  7461 ;; Defined at:
  7462 ;;		line 76 in file "UI.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  i               1   73[BANK0 ] unsigned char 
  7467 ;;  i               1   85[BANK0 ] unsigned char 
  7468 ;;  i               1   84[BANK0 ] unsigned char 
  7469 ;;  i               1   83[BANK0 ] unsigned char 
  7470 ;;  i               1   82[BANK0 ] unsigned char 
  7471 ;;  i               1   81[BANK0 ] unsigned char 
  7472 ;;  i               1   80[BANK0 ] unsigned char 
  7473 ;;  i               1   79[BANK0 ] unsigned char 
  7474 ;;  i               1   78[BANK0 ] unsigned char 
  7475 ;;  i               1   77[BANK0 ] unsigned char 
  7476 ;;  i               1   76[BANK0 ] unsigned char 
  7477 ;;  i               1   75[BANK0 ] unsigned char 
  7478 ;;  i               1   74[BANK0 ] unsigned char 
  7479 ;;  month           4   86[BANK0 ] unsigned char [4]
  7480 ;;  i               1   72[BANK0 ] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;Total ram usage:       22 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:   11
  7497 ;; This function calls:
  7498 ;;		___awdiv
  7499 ;;		___awmod
  7500 ;;		_change_state_to_menu_12
  7501 ;;		_change_state_to_menu_22
  7502 ;;		_lcdInst
  7503 ;;		_printRTC
  7504 ;;		_printf
  7505 ;;		_strcpy
  7506 ;; This function is called by:
  7507 ;;		_main
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           	psect	text22
  7512  000012                     __ptext22:
  7513                           	opt stack 0
  7514  000012                     _UI:
  7515                           	opt stack 19
  7516                           
  7517                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7518                           
  7519                           ;incstack = 0
  7520  000012  0E02               	movlw	2
  7521  000014  0100               	movlb	0	; () banked
  7522  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  7523  000018  A4D8               	btfss	status,2,c
  7524  00001A  D086               	goto	l8892
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7528  00001C  0E01               	movlw	1
  7529  00001E  EC5F  F02B         	call	_lcdInst
  7530  000022  0E68               	movlw	104
  7531  000024  0100               	movlb	0	; () banked
  7532  000026  6FC4               	movwf	??_UI& (0+255),b
  7533  000028  0EE4               	movlw	228
  7534  00002A                     u9557:
  7535  00002A  2EE8               	decfsz	wreg,f,c
  7536  00002C  D7FE               	bra	u9557
  7537  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  7538  000030  D7FC               	bra	u9557
  7539  000032  F000               	nop	
  7540                           
  7541                           ;UI.c: 79: lcdInst(0b10000000);;
  7542  000034  0E80               	movlw	128
  7543  000036  EC5F  F02B         	call	_lcdInst
  7544                           
  7545                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7546  00003A  0E69               	movlw	low STR_1
  7547  00003C  0100               	movlb	0	; () banked
  7548  00003E  6F8E               	movwf	printf@f& (0+255),b
  7549  000040  0EFB               	movlw	high STR_1
  7550  000042  0100               	movlb	0	; () banked
  7551  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  7552  000046  0E01               	movlw	1
  7553  000048  0100               	movlb	0	; () banked
  7554  00004A  25FD               	addwf	_sel& (0+255),w,b
  7555  00004C  0100               	movlb	0	; () banked
  7556  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  7557  000050  0100               	movlb	0	; () banked
  7558  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  7559  000054  0E00               	movlw	0
  7560  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7561  000058  EC84  F00B         	call	_printf	;wreg free
  7562                           
  7563                           ;UI.c: 81: lcdInst(0b11000000);;
  7564  00005C  0EC0               	movlw	192
  7565  00005E  EC5F  F02B         	call	_lcdInst
  7566                           
  7567                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7568  000062  0E0E               	movlw	14
  7569  000064  0100               	movlb	0	; () banked
  7570  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7571  000068  0E10               	movlw	16
  7572  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  7573  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  7574  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7575  000074  ECB1  F023         	call	___awmod	;wreg free
  7576  000078  C080  F0C6         	movff	?___awmod,_UI$2446
  7577  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2446+1
  7578                           
  7579                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7580  000080  0E31               	movlw	low STR_2
  7581  000082  0100               	movlb	0	; () banked
  7582  000084  6F8E               	movwf	printf@f& (0+255),b
  7583  000086  0EFF               	movlw	high STR_2
  7584  000088  0100               	movlb	0	; () banked
  7585  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7586  00008C  0E0E               	movlw	14
  7587  00008E  0100               	movlb	0	; () banked
  7588  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7589  000092  0E10               	movlw	16
  7590  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  7591  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  7592  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7593  00009E  ECB1  F023         	call	___awmod	;wreg free
  7594  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  7595  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7596  0000AA  0E00               	movlw	0
  7597  0000AC  0100               	movlb	0	; () banked
  7598  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7599  0000B0  0E3C               	movlw	60
  7600  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  7601  0000B4  EC9F  F022         	call	___awdiv	;wreg free
  7602  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  7603  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  7604  0000C0  C0C6  F080         	movff	_UI$2446,___awmod@dividend
  7605  0000C4  C0C7  F081         	movff	_UI$2446+1,___awmod@dividend+1
  7606  0000C8  0E00               	movlw	0
  7607  0000CA  0100               	movlb	0	; () banked
  7608  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7609  0000CE  0E3C               	movlw	60
  7610  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  7611  0000D2  ECB1  F023         	call	___awmod	;wreg free
  7612  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  7613  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  7614  0000DE  EC84  F00B         	call	_printf	;wreg free
  7615  0000E2                     l180:
  7616  0000E2  B281               	btfsc	3969,1,c	;volatile
  7617  0000E4  D7FE               	goto	l180
  7618  0000E6                     l183:
  7619  0000E6  A281               	btfss	3969,1,c	;volatile
  7620  0000E8  D7FE               	goto	l183
  7621                           
  7622                           ;UI.c: 86: }
  7623                           ;UI.c: 87: if(cur_state == 12){
  7624  0000EA  0E0C               	movlw	12
  7625  0000EC  0100               	movlb	0	; () banked
  7626  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  7627  0000F0  0100               	movlb	0	; () banked
  7628  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7629  0000F4  A4D8               	btfss	status,2,c
  7630  0000F6  D003               	goto	l8886
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;UI.c: 88: change_state_to_menu_12();
  7634  0000F8  EC9D  F028         	call	_change_state_to_menu_12	;wreg free
  7635                           
  7636                           ;UI.c: 89: }
  7637  0000FC  D002               	goto	l188
  7638  0000FE                     l8886:
  7639                           
  7640                           ;UI.c: 90: else{
  7641                           ;UI.c: 91: change_state_to_menu_22();
  7642  0000FE  EC81  F028         	call	_change_state_to_menu_22	;wreg free
  7643  000102                     l188:
  7644  000102  B281               	btfsc	3969,1,c	;volatile
  7645  000104  D7FE               	goto	l188
  7646                           
  7647                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  7648  000106  0E05               	movlw	5
  7649  000108  0100               	movlb	0	; () banked
  7650  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  7651  00010C  0E0F               	movlw	15
  7652  00010E  0100               	movlb	0	; () banked
  7653  000110  6FC4               	movwf	??_UI& (0+255),b
  7654  000112  0EF1               	movlw	241
  7655  000114                     u9567:
  7656  000114  2EE8               	decfsz	wreg,f,c
  7657  000116  D7FE               	bra	u9567
  7658  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  7659  00011A  D7FC               	bra	u9567
  7660  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  7661  00011E  D7FA               	bra	u9567
  7662                           
  7663                           ;UI.c: 95: machine_state = UI_state;
  7664  000120  0E00               	movlw	0
  7665  000122  0100               	movlb	0	; () banked
  7666  000124  6FFC               	movwf	_machine_state& (0+255),b
  7667                           
  7668                           ;UI.c: 96: }
  7669  000126  D3D0               	goto	l9212
  7670  000128                     l8892:
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;UI.c: 97: else if(cur_state == 0){
  7674  000128  0100               	movlb	0	; () banked
  7675  00012A  51EC               	movf	_cur_state& (0+255),w,b
  7676  00012C  0100               	movlb	0	; () banked
  7677  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7678  000130  A4D8               	btfss	status,2,c
  7679  000132  D3CA               	goto	l9212
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7683  000134  0E00               	movlw	0
  7684  000136  0100               	movlb	0	; () banked
  7685  000138  6FC8               	movwf	UI@i& (0+255),b
  7686  00013A                     l8896:
  7687                           
  7688                           ; BSR set to: 0
  7689  00013A  0E63               	movlw	99
  7690  00013C  0100               	movlb	0	; () banked
  7691  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  7692  000140  D001               	goto	l8900
  7693  000142  D00C               	goto	l8904
  7694  000144                     l8900:
  7695                           
  7696                           ; BSR set to: 0
  7697  000144  0E68               	movlw	104
  7698  000146  0100               	movlb	0	; () banked
  7699  000148  6FC4               	movwf	??_UI& (0+255),b
  7700  00014A  0EE4               	movlw	228
  7701  00014C                     u9577:
  7702  00014C  2EE8               	decfsz	wreg,f,c
  7703  00014E  D7FE               	bra	u9577
  7704  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  7705  000152  D7FC               	bra	u9577
  7706  000154  F000               	nop	
  7707  000156  0100               	movlb	0	; () banked
  7708  000158  2BC8               	incf	UI@i& (0+255),f,b
  7709  00015A  D7EF               	goto	l8896
  7710  00015C                     l8904:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;UI.c: 99: if(cur_state == 0){
  7714  00015C  0100               	movlb	0	; () banked
  7715  00015E  51EC               	movf	_cur_state& (0+255),w,b
  7716  000160  0100               	movlb	0	; () banked
  7717  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7718  000164  A4D8               	btfss	status,2,c
  7719  000166  D3B0               	goto	l9212
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;UI.c: 100: printRTC();
  7723  000168  EC58  F014         	call	_printRTC	;wreg free
  7724                           
  7725                           ;UI.c: 101: }
  7726                           ;UI.c: 102: }
  7727                           ;UI.c: 103: while(logstate){
  7728  00016C  D3AD               	goto	l9212
  7729  00016E                     l8908:
  7730                           
  7731                           ;UI.c: 105: if(!log_completion){
  7732  00016E  5063               	movf	_log_completion,w,c
  7733  000170  1064               	iorwf	_log_completion+1,w,c
  7734  000172  A4D8               	btfss	status,2,c
  7735  000174  D041               	goto	l8938
  7736                           
  7737                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7738  000176  0E01               	movlw	1
  7739  000178  EC5F  F02B         	call	_lcdInst
  7740  00017C  0E68               	movlw	104
  7741  00017E  0100               	movlb	0	; () banked
  7742  000180  6FC4               	movwf	??_UI& (0+255),b
  7743  000182  0EE4               	movlw	228
  7744  000184                     u9587:
  7745  000184  2EE8               	decfsz	wreg,f,c
  7746  000186  D7FE               	bra	u9587
  7747  000188  2FC4               	decfsz	??_UI& (0+255),f,b
  7748  00018A  D7FC               	bra	u9587
  7749  00018C  F000               	nop	
  7750                           
  7751                           ;UI.c: 107: lcdInst(0b10000000);;
  7752  00018E  0E80               	movlw	128
  7753  000190  EC5F  F02B         	call	_lcdInst
  7754                           
  7755                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  7756  000194  0E57               	movlw	low STR_3
  7757  000196  0100               	movlb	0	; () banked
  7758  000198  6F8E               	movwf	printf@f& (0+255),b
  7759  00019A  0EFB               	movlw	high STR_3
  7760  00019C  0100               	movlb	0	; () banked
  7761  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7762  0001A0  C0F4  F090         	movff	_log,?_printf+2
  7763  0001A4  C0F5  F091         	movff	_log+1,?_printf+3
  7764  0001A8  EC84  F00B         	call	_printf	;wreg free
  7765                           
  7766                           ;UI.c: 109: lcdInst(0b11000000);;
  7767  0001AC  0EC0               	movlw	192
  7768  0001AE  EC5F  F02B         	call	_lcdInst
  7769                           
  7770                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  7771  0001B2  0E54               	movlw	low STR_4
  7772  0001B4  0100               	movlb	0	; () banked
  7773  0001B6  6F8E               	movwf	printf@f& (0+255),b
  7774  0001B8  0EFE               	movlw	high STR_4
  7775  0001BA  0100               	movlb	0	; () banked
  7776  0001BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7777  0001BE  EC84  F00B         	call	_printf	;wreg free
  7778  0001C2                     l8922:
  7779  0001C2  0E00               	movlw	0
  7780  0001C4  0100               	movlb	0	; () banked
  7781  0001C6  6FC9               	movwf	UI@i_409& (0+255),b
  7782  0001C8                     l8924:
  7783                           
  7784                           ; BSR set to: 0
  7785  0001C8  0E63               	movlw	99
  7786  0001CA  0100               	movlb	0	; () banked
  7787  0001CC  65C9               	cpfsgt	UI@i_409& (0+255),b
  7788  0001CE  D001               	goto	l8928
  7789  0001D0  D00C               	goto	l8932
  7790  0001D2                     l8928:
  7791                           
  7792                           ; BSR set to: 0
  7793  0001D2  0E68               	movlw	104
  7794  0001D4  0100               	movlb	0	; () banked
  7795  0001D6  6FC4               	movwf	??_UI& (0+255),b
  7796  0001D8  0EE4               	movlw	228
  7797  0001DA                     u9597:
  7798  0001DA  2EE8               	decfsz	wreg,f,c
  7799  0001DC  D7FE               	bra	u9597
  7800  0001DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7801  0001E0  D7FC               	bra	u9597
  7802  0001E2  F000               	nop	
  7803  0001E4  0100               	movlb	0	; () banked
  7804  0001E6  2BC9               	incf	UI@i_409& (0+255),f,b
  7805  0001E8  D7EF               	goto	l8924
  7806  0001EA                     l8932:
  7807                           
  7808                           ; BSR set to: 0
  7809  0001EA  0100               	movlb	0	; () banked
  7810  0001EC  51F8               	movf	_logstate& (0+255),w,b
  7811  0001EE  0100               	movlb	0	; () banked
  7812  0001F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7813  0001F2  B4D8               	btfsc	status,2,c
  7814  0001F4  0012               	return	
  7815  0001F6  D7E5               	goto	l8922
  7816  0001F8                     l8938:
  7817                           
  7818                           ;UI.c: 114: else{
  7819                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7820  0001F8  0E01               	movlw	1
  7821  0001FA  EC5F  F02B         	call	_lcdInst
  7822  0001FE  0E68               	movlw	104
  7823  000200  0100               	movlb	0	; () banked
  7824  000202  6FC4               	movwf	??_UI& (0+255),b
  7825  000204  0EE4               	movlw	228
  7826  000206                     u9607:
  7827  000206  2EE8               	decfsz	wreg,f,c
  7828  000208  D7FE               	bra	u9607
  7829  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  7830  00020C  D7FC               	bra	u9607
  7831  00020E  F000               	nop	
  7832                           
  7833                           ;UI.c: 116: lcdInst(0b10000000);;
  7834  000210  0E80               	movlw	128
  7835  000212  EC5F  F02B         	call	_lcdInst
  7836                           
  7837                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  7838  000216  0E57               	movlw	low STR_3
  7839  000218  0100               	movlb	0	; () banked
  7840  00021A  6F8E               	movwf	printf@f& (0+255),b
  7841  00021C  0EFB               	movlw	high STR_3
  7842  00021E  0100               	movlb	0	; () banked
  7843  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  7844  000222  C0F4  F090         	movff	_log,?_printf+2
  7845  000226  C0F5  F091         	movff	_log+1,?_printf+3
  7846  00022A  EC84  F00B         	call	_printf	;wreg free
  7847                           
  7848                           ;UI.c: 118: lcdInst(0b11000000);;
  7849  00022E  0EC0               	movlw	192
  7850  000230  EC5F  F02B         	call	_lcdInst
  7851                           
  7852                           ;UI.c: 119: printf("PAUSE < | BACK >");
  7853  000234  0EF0               	movlw	low STR_6
  7854  000236  0100               	movlb	0	; () banked
  7855  000238  6F8E               	movwf	printf@f& (0+255),b
  7856  00023A  0EFD               	movlw	high STR_6
  7857  00023C  0100               	movlb	0	; () banked
  7858  00023E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7859  000240  EC84  F00B         	call	_printf	;wreg free
  7860                           
  7861                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7862  000244  0E00               	movlw	0
  7863  000246  0100               	movlb	0	; () banked
  7864  000248  6FCA               	movwf	UI@i_412& (0+255),b
  7865  00024A                     l8952:
  7866                           
  7867                           ; BSR set to: 0
  7868  00024A  0E63               	movlw	99
  7869  00024C  0100               	movlb	0	; () banked
  7870  00024E  65CA               	cpfsgt	UI@i_412& (0+255),b
  7871  000250  D001               	goto	l8956
  7872  000252  D00C               	goto	l8960
  7873  000254                     l8956:
  7874                           
  7875                           ; BSR set to: 0
  7876  000254  0E68               	movlw	104
  7877  000256  0100               	movlb	0	; () banked
  7878  000258  6FC4               	movwf	??_UI& (0+255),b
  7879  00025A  0EE4               	movlw	228
  7880  00025C                     u9617:
  7881  00025C  2EE8               	decfsz	wreg,f,c
  7882  00025E  D7FE               	bra	u9617
  7883  000260  2FC4               	decfsz	??_UI& (0+255),f,b
  7884  000262  D7FC               	bra	u9617
  7885  000264  F000               	nop	
  7886  000266  0100               	movlb	0	; () banked
  7887  000268  2BCA               	incf	UI@i_412& (0+255),f,b
  7888  00026A  D7EF               	goto	l8952
  7889  00026C                     l8960:
  7890                           
  7891                           ; BSR set to: 0
  7892  00026C  0100               	movlb	0	; () banked
  7893  00026E  51F8               	movf	_logstate& (0+255),w,b
  7894  000270  0100               	movlb	0	; () banked
  7895  000272  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7896  000274  B4D8               	btfsc	status,2,c
  7897  000276  0012               	return	
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7901                           
  7902                           ; BSR set to: 0
  7903                           
  7904                           ; BSR set to: 0
  7905  000278  0E00               	movlw	0
  7906  00027A  0100               	movlb	0	; () banked
  7907  00027C  6FCB               	movwf	UI@i_413& (0+255),b
  7908  00027E                     l8966:
  7909                           
  7910                           ; BSR set to: 0
  7911  00027E  0E63               	movlw	99
  7912  000280  0100               	movlb	0	; () banked
  7913  000282  65CB               	cpfsgt	UI@i_413& (0+255),b
  7914  000284  D001               	goto	l8970
  7915  000286  D00C               	goto	l8974
  7916  000288                     l8970:
  7917                           
  7918                           ; BSR set to: 0
  7919  000288  0E68               	movlw	104
  7920  00028A  0100               	movlb	0	; () banked
  7921  00028C  6FC4               	movwf	??_UI& (0+255),b
  7922  00028E  0EE4               	movlw	228
  7923  000290                     u9627:
  7924  000290  2EE8               	decfsz	wreg,f,c
  7925  000292  D7FE               	bra	u9627
  7926  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  7927  000296  D7FC               	bra	u9627
  7928  000298  F000               	nop	
  7929  00029A  0100               	movlb	0	; () banked
  7930  00029C  2BCB               	incf	UI@i_413& (0+255),f,b
  7931  00029E  D7EF               	goto	l8966
  7932  0002A0                     l8974:
  7933                           
  7934                           ; BSR set to: 0
  7935  0002A0  0100               	movlb	0	; () banked
  7936  0002A2  51F8               	movf	_logstate& (0+255),w,b
  7937  0002A4  0100               	movlb	0	; () banked
  7938  0002A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7939  0002A8  B4D8               	btfsc	status,2,c
  7940  0002AA  0012               	return	
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7944                           
  7945                           ; BSR set to: 0
  7946                           
  7947                           ; BSR set to: 0
  7948  0002AC  0E01               	movlw	1
  7949  0002AE  EC5F  F02B         	call	_lcdInst
  7950  0002B2  0E68               	movlw	104
  7951  0002B4  0100               	movlb	0	; () banked
  7952  0002B6  6FC4               	movwf	??_UI& (0+255),b
  7953  0002B8  0EE4               	movlw	228
  7954  0002BA                     u9637:
  7955  0002BA  2EE8               	decfsz	wreg,f,c
  7956  0002BC  D7FE               	bra	u9637
  7957  0002BE  2FC4               	decfsz	??_UI& (0+255),f,b
  7958  0002C0  D7FC               	bra	u9637
  7959  0002C2  F000               	nop	
  7960                           
  7961                           ;UI.c: 125: lcdInst(0b10000000);;
  7962  0002C4  0E80               	movlw	128
  7963  0002C6  EC5F  F02B         	call	_lcdInst
  7964                           
  7965                           ;UI.c: 126: printf("START:");
  7966  0002CA  0EC3               	movlw	low STR_7
  7967  0002CC  0100               	movlb	0	; () banked
  7968  0002CE  6F8E               	movwf	printf@f& (0+255),b
  7969  0002D0  0EFF               	movlw	high STR_7
  7970  0002D2  0100               	movlb	0	; () banked
  7971  0002D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7972  0002D6  EC84  F00B         	call	_printf	;wreg free
  7973                           
  7974                           ;UI.c: 127: lcdInst(0b11000000);;
  7975  0002DA  0EC0               	movlw	192
  7976  0002DC  EC5F  F02B         	call	_lcdInst
  7977                           
  7978                           ;UI.c: 128: char month[] = "MMM";
  7979  0002E0  C147  F0D6         	movff	UI@F3241,UI@month
  7980  0002E4  C148  F0D7         	movff	UI@F3241+1,UI@month+1
  7981  0002E8  C149  F0D8         	movff	UI@F3241+2,UI@month+2
  7982  0002EC  C14A  F0D9         	movff	UI@F3241+3,UI@month+3
  7983                           
  7984                           ;UI.c: 129: switch(log_startTime[5]){
  7985  0002F0  D0C3               	goto	l9018
  7986  0002F2                     l8990:
  7987                           
  7988                           ;UI.c: 131: strcpy(month, "JAN");
  7989  0002F2  0ED6               	movlw	low UI@month
  7990  0002F4  0100               	movlb	0	; () banked
  7991  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  7992  0002F8  0E00               	movlw	high UI@month
  7993  0002FA  0100               	movlb	0	; () banked
  7994  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7995  0002FE  0EDA               	movlw	low STR_8
  7996  000300  0100               	movlb	0	; () banked
  7997  000302  6F82               	movwf	strcpy@from& (0+255),b
  7998  000304  0EFF               	movlw	high STR_8
  7999  000306  0100               	movlb	0	; () banked
  8000  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8001  00030A  ECB9  F028         	call	_strcpy	;wreg free
  8002                           
  8003                           ;UI.c: 132: break;
  8004  00030E  D0E6               	goto	l9020
  8005  000310                     l8992:
  8006                           
  8007                           ;UI.c: 134: strcpy(month, "FEB");
  8008  000310  0ED6               	movlw	low UI@month
  8009  000312  0100               	movlb	0	; () banked
  8010  000314  6F80               	movwf	strcpy@to& (0+255),b
  8011  000316  0E00               	movlw	high UI@month
  8012  000318  0100               	movlb	0	; () banked
  8013  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8014  00031C  0ECA               	movlw	low STR_9
  8015  00031E  0100               	movlb	0	; () banked
  8016  000320  6F82               	movwf	strcpy@from& (0+255),b
  8017  000322  0EFF               	movlw	high STR_9
  8018  000324  0100               	movlb	0	; () banked
  8019  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8020  000328  ECB9  F028         	call	_strcpy	;wreg free
  8021                           
  8022                           ;UI.c: 135: break;
  8023  00032C  D0D7               	goto	l9020
  8024  00032E                     l8994:
  8025                           
  8026                           ;UI.c: 137: strcpy(month, "MAR");
  8027  00032E  0ED6               	movlw	low UI@month
  8028  000330  0100               	movlb	0	; () banked
  8029  000332  6F80               	movwf	strcpy@to& (0+255),b
  8030  000334  0E00               	movlw	high UI@month
  8031  000336  0100               	movlb	0	; () banked
  8032  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8033  00033A  0EE6               	movlw	low STR_10
  8034  00033C  0100               	movlb	0	; () banked
  8035  00033E  6F82               	movwf	strcpy@from& (0+255),b
  8036  000340  0EFF               	movlw	high STR_10
  8037  000342  0100               	movlb	0	; () banked
  8038  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8039  000346  ECB9  F028         	call	_strcpy	;wreg free
  8040                           
  8041                           ;UI.c: 138: break;
  8042  00034A  D0C8               	goto	l9020
  8043  00034C                     l8996:
  8044                           
  8045                           ;UI.c: 140: strcpy(month, "APR");
  8046  00034C  0ED6               	movlw	low UI@month
  8047  00034E  0100               	movlb	0	; () banked
  8048  000350  6F80               	movwf	strcpy@to& (0+255),b
  8049  000352  0E00               	movlw	high UI@month
  8050  000354  0100               	movlb	0	; () banked
  8051  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8052  000358  0EEA               	movlw	low STR_11
  8053  00035A  0100               	movlb	0	; () banked
  8054  00035C  6F82               	movwf	strcpy@from& (0+255),b
  8055  00035E  0EFF               	movlw	high STR_11
  8056  000360  0100               	movlb	0	; () banked
  8057  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8058  000364  ECB9  F028         	call	_strcpy	;wreg free
  8059                           
  8060                           ;UI.c: 141: break;
  8061  000368  D0B9               	goto	l9020
  8062  00036A                     l8998:
  8063                           
  8064                           ;UI.c: 143: strcpy(month, "MAY");
  8065  00036A  0ED6               	movlw	low UI@month
  8066  00036C  0100               	movlb	0	; () banked
  8067  00036E  6F80               	movwf	strcpy@to& (0+255),b
  8068  000370  0E00               	movlw	high UI@month
  8069  000372  0100               	movlb	0	; () banked
  8070  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8071  000376  0EFA               	movlw	low STR_12
  8072  000378  0100               	movlb	0	; () banked
  8073  00037A  6F82               	movwf	strcpy@from& (0+255),b
  8074  00037C  0EFF               	movlw	high STR_12
  8075  00037E  0100               	movlb	0	; () banked
  8076  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8077  000382  ECB9  F028         	call	_strcpy	;wreg free
  8078                           
  8079                           ;UI.c: 144: break;
  8080  000386  D0AA               	goto	l9020
  8081  000388                     l9000:
  8082                           
  8083                           ;UI.c: 146: strcpy(month, "JUN");
  8084  000388  0ED6               	movlw	low UI@month
  8085  00038A  0100               	movlb	0	; () banked
  8086  00038C  6F80               	movwf	strcpy@to& (0+255),b
  8087  00038E  0E00               	movlw	high UI@month
  8088  000390  0100               	movlb	0	; () banked
  8089  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8090  000394  0EDE               	movlw	low STR_13
  8091  000396  0100               	movlb	0	; () banked
  8092  000398  6F82               	movwf	strcpy@from& (0+255),b
  8093  00039A  0EFF               	movlw	high STR_13
  8094  00039C  0100               	movlb	0	; () banked
  8095  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8096  0003A0  ECB9  F028         	call	_strcpy	;wreg free
  8097                           
  8098                           ;UI.c: 147: break;
  8099  0003A4  D09B               	goto	l9020
  8100  0003A6                     l9002:
  8101                           
  8102                           ;UI.c: 149: strcpy(month, "JUL");
  8103  0003A6  0ED6               	movlw	low UI@month
  8104  0003A8  0100               	movlb	0	; () banked
  8105  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  8106  0003AC  0E00               	movlw	high UI@month
  8107  0003AE  0100               	movlb	0	; () banked
  8108  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8109  0003B2  0ED6               	movlw	low STR_14
  8110  0003B4  0100               	movlb	0	; () banked
  8111  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  8112  0003B8  0EFF               	movlw	high STR_14
  8113  0003BA  0100               	movlb	0	; () banked
  8114  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8115  0003BE  ECB9  F028         	call	_strcpy	;wreg free
  8116                           
  8117                           ;UI.c: 150: break;
  8118  0003C2  D08C               	goto	l9020
  8119  0003C4                     l9004:
  8120                           
  8121                           ;UI.c: 152: strcpy(month, "AUG");
  8122  0003C4  0ED6               	movlw	low UI@month
  8123  0003C6  0100               	movlb	0	; () banked
  8124  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  8125  0003CA  0E00               	movlw	high UI@month
  8126  0003CC  0100               	movlb	0	; () banked
  8127  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8128  0003D0  0ED2               	movlw	low STR_15
  8129  0003D2  0100               	movlb	0	; () banked
  8130  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  8131  0003D6  0EFF               	movlw	high STR_15
  8132  0003D8  0100               	movlb	0	; () banked
  8133  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8134  0003DC  ECB9  F028         	call	_strcpy	;wreg free
  8135                           
  8136                           ;UI.c: 153: break;
  8137  0003E0  D07D               	goto	l9020
  8138  0003E2                     l9006:
  8139                           
  8140                           ;UI.c: 155: strcpy(month, "SEP");
  8141  0003E2  0ED6               	movlw	low UI@month
  8142  0003E4  0100               	movlb	0	; () banked
  8143  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  8144  0003E8  0E00               	movlw	high UI@month
  8145  0003EA  0100               	movlb	0	; () banked
  8146  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8147  0003EE  0EE2               	movlw	low STR_16
  8148  0003F0  0100               	movlb	0	; () banked
  8149  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  8150  0003F4  0EFF               	movlw	high STR_16
  8151  0003F6  0100               	movlb	0	; () banked
  8152  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8153  0003FA  ECB9  F028         	call	_strcpy	;wreg free
  8154                           
  8155                           ;UI.c: 156: break;
  8156  0003FE  D06E               	goto	l9020
  8157  000400                     l9008:
  8158                           
  8159                           ;UI.c: 158: strcpy(month, "OCT");
  8160  000400  0ED6               	movlw	low UI@month
  8161  000402  0100               	movlb	0	; () banked
  8162  000404  6F80               	movwf	strcpy@to& (0+255),b
  8163  000406  0E00               	movlw	high UI@month
  8164  000408  0100               	movlb	0	; () banked
  8165  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8166  00040C  0EF2               	movlw	low STR_17
  8167  00040E  0100               	movlb	0	; () banked
  8168  000410  6F82               	movwf	strcpy@from& (0+255),b
  8169  000412  0EFF               	movlw	high STR_17
  8170  000414  0100               	movlb	0	; () banked
  8171  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8172  000418  ECB9  F028         	call	_strcpy	;wreg free
  8173                           
  8174                           ;UI.c: 159: break;
  8175  00041C  D05F               	goto	l9020
  8176  00041E                     l9010:
  8177                           
  8178                           ;UI.c: 161: strcpy(month, "NOV");
  8179  00041E  0ED6               	movlw	low UI@month
  8180  000420  0100               	movlb	0	; () banked
  8181  000422  6F80               	movwf	strcpy@to& (0+255),b
  8182  000424  0E00               	movlw	high UI@month
  8183  000426  0100               	movlb	0	; () banked
  8184  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8185  00042A  0EF6               	movlw	low STR_18
  8186  00042C  0100               	movlb	0	; () banked
  8187  00042E  6F82               	movwf	strcpy@from& (0+255),b
  8188  000430  0EFF               	movlw	high STR_18
  8189  000432  0100               	movlb	0	; () banked
  8190  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8191  000436  ECB9  F028         	call	_strcpy	;wreg free
  8192                           
  8193                           ;UI.c: 162: break;
  8194  00043A  D050               	goto	l9020
  8195  00043C                     l9012:
  8196                           
  8197                           ;UI.c: 164: strcpy(month, "DEC");
  8198  00043C  0ED6               	movlw	low UI@month
  8199  00043E  0100               	movlb	0	; () banked
  8200  000440  6F80               	movwf	strcpy@to& (0+255),b
  8201  000442  0E00               	movlw	high UI@month
  8202  000444  0100               	movlb	0	; () banked
  8203  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8204  000448  0ECE               	movlw	low STR_19
  8205  00044A  0100               	movlb	0	; () banked
  8206  00044C  6F82               	movwf	strcpy@from& (0+255),b
  8207  00044E  0EFF               	movlw	high STR_19
  8208  000450  0100               	movlb	0	; () banked
  8209  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8210  000454  ECB9  F028         	call	_strcpy	;wreg free
  8211                           
  8212                           ;UI.c: 165: break;
  8213  000458  D041               	goto	l9020
  8214  00045A                     l9014:
  8215                           
  8216                           ;UI.c: 167: strcpy(month, "ERR");
  8217  00045A  0ED6               	movlw	low UI@month
  8218  00045C  0100               	movlb	0	; () banked
  8219  00045E  6F80               	movwf	strcpy@to& (0+255),b
  8220  000460  0E00               	movlw	high UI@month
  8221  000462  0100               	movlb	0	; () banked
  8222  000464  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8223  000466  0EEE               	movlw	low STR_20
  8224  000468  0100               	movlb	0	; () banked
  8225  00046A  6F82               	movwf	strcpy@from& (0+255),b
  8226  00046C  0EFF               	movlw	high STR_20
  8227  00046E  0100               	movlb	0	; () banked
  8228  000470  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8229  000472  ECB9  F028         	call	_strcpy	;wreg free
  8230                           
  8231                           ;UI.c: 169: }
  8232                           
  8233                           ;UI.c: 168: break;
  8234  000476  D032               	goto	l9020
  8235  000478                     l9018:
  8236  000478  EE21  F00A         	lfsr	2,_log_startTime+10
  8237  00047C  CFDE F0C4          	movff	postinc2,??_UI
  8238  000480  CFDD F0C5          	movff	postdec2,??_UI+1
  8239                           
  8240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8241                           ; Switch size 1, requested type "space"
  8242                           ; Number of cases is 1, Range of values is 0 to 0
  8243                           ; switch strategies available:
  8244                           ; Name         Instructions Cycles
  8245                           ; simple_byte            4     3 (average)
  8246                           ;	Chosen strategy is simple_byte
  8247  000484  0100               	movlb	0	; () banked
  8248  000486  51C5               	movf	(??_UI+1)& (0+255),w,b
  8249  000488  0A00               	xorlw	0	; case 0
  8250  00048A  A4D8               	btfss	status,2,c
  8251  00048C  D7E6               	goto	l9014
  8252                           
  8253                           ; BSR set to: 0
  8254                           ; Switch size 1, requested type "space"
  8255                           ; Number of cases is 12, Range of values is 1 to 12
  8256                           ; switch strategies available:
  8257                           ; Name         Instructions Cycles
  8258                           ; simple_byte           37    19 (average)
  8259                           ;	Chosen strategy is simple_byte
  8260  00048E  0100               	movlb	0	; () banked
  8261  000490  51C4               	movf	??_UI& (0+255),w,b
  8262  000492  0A01               	xorlw	1	; case 1
  8263  000494  B4D8               	btfsc	status,2,c
  8264  000496  D72D               	goto	l8990
  8265  000498  0A03               	xorlw	3	; case 2
  8266  00049A  B4D8               	btfsc	status,2,c
  8267  00049C  D739               	goto	l8992
  8268  00049E  0A01               	xorlw	1	; case 3
  8269  0004A0  B4D8               	btfsc	status,2,c
  8270  0004A2  D745               	goto	l8994
  8271  0004A4  0A07               	xorlw	7	; case 4
  8272  0004A6  B4D8               	btfsc	status,2,c
  8273  0004A8  D751               	goto	l8996
  8274  0004AA  0A01               	xorlw	1	; case 5
  8275  0004AC  B4D8               	btfsc	status,2,c
  8276  0004AE  D75D               	goto	l8998
  8277  0004B0  0A03               	xorlw	3	; case 6
  8278  0004B2  B4D8               	btfsc	status,2,c
  8279  0004B4  D769               	goto	l9000
  8280  0004B6  0A01               	xorlw	1	; case 7
  8281  0004B8  B4D8               	btfsc	status,2,c
  8282  0004BA  D775               	goto	l9002
  8283  0004BC  0A0F               	xorlw	15	; case 8
  8284  0004BE  B4D8               	btfsc	status,2,c
  8285  0004C0  D781               	goto	l9004
  8286  0004C2  0A01               	xorlw	1	; case 9
  8287  0004C4  B4D8               	btfsc	status,2,c
  8288  0004C6  D78D               	goto	l9006
  8289  0004C8  0A03               	xorlw	3	; case 10
  8290  0004CA  B4D8               	btfsc	status,2,c
  8291  0004CC  D799               	goto	l9008
  8292  0004CE  0A01               	xorlw	1	; case 11
  8293  0004D0  B4D8               	btfsc	status,2,c
  8294  0004D2  D7A5               	goto	l9010
  8295  0004D4  0A07               	xorlw	7	; case 12
  8296  0004D6  B4D8               	btfsc	status,2,c
  8297  0004D8  D7B1               	goto	l9012
  8298  0004DA  D7BF               	goto	l9014
  8299  0004DC                     l9020:
  8300                           
  8301                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8302  0004DC  0EBE               	movlw	low STR_21
  8303  0004DE  0100               	movlb	0	; () banked
  8304  0004E0  6F8E               	movwf	printf@f& (0+255),b
  8305  0004E2  0EFA               	movlw	high STR_21
  8306  0004E4  0100               	movlb	0	; () banked
  8307  0004E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8308  0004E8  C108  F090         	movff	_log_startTime+8,?_printf+2
  8309  0004EC  C109  F091         	movff	_log_startTime+9,?_printf+3
  8310  0004F0  0ED6               	movlw	low UI@month
  8311  0004F2  0100               	movlb	0	; () banked
  8312  0004F4  6F92               	movwf	(?_printf+4)& (0+255),b
  8313  0004F6  0E00               	movlw	high UI@month
  8314  0004F8  0100               	movlb	0	; () banked
  8315  0004FA  6F93               	movwf	(?_printf+5)& (0+255),b
  8316  0004FC  C104  F094         	movff	_log_startTime+4,?_printf+6
  8317  000500  C105  F095         	movff	_log_startTime+5,?_printf+7
  8318  000504  C102  F096         	movff	_log_startTime+2,?_printf+8
  8319  000508  C103  F097         	movff	_log_startTime+3,?_printf+9
  8320  00050C  C100  F098         	movff	_log_startTime,?_printf+10
  8321  000510  C101  F099         	movff	_log_startTime+1,?_printf+11
  8322  000514  EC84  F00B         	call	_printf	;wreg free
  8323                           
  8324                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8325  000518  0E00               	movlw	0
  8326  00051A  0100               	movlb	0	; () banked
  8327  00051C  6FCC               	movwf	UI@i_431& (0+255),b
  8328  00051E                     l9024:
  8329                           
  8330                           ; BSR set to: 0
  8331  00051E  0E63               	movlw	99
  8332  000520  0100               	movlb	0	; () banked
  8333  000522  65CC               	cpfsgt	UI@i_431& (0+255),b
  8334  000524  D001               	goto	l9028
  8335  000526  D00C               	goto	l9032
  8336  000528                     l9028:
  8337                           
  8338                           ; BSR set to: 0
  8339  000528  0E68               	movlw	104
  8340  00052A  0100               	movlb	0	; () banked
  8341  00052C  6FC4               	movwf	??_UI& (0+255),b
  8342  00052E  0EE4               	movlw	228
  8343  000530                     u9647:
  8344  000530  2EE8               	decfsz	wreg,f,c
  8345  000532  D7FE               	bra	u9647
  8346  000534  2FC4               	decfsz	??_UI& (0+255),f,b
  8347  000536  D7FC               	bra	u9647
  8348  000538  F000               	nop	
  8349  00053A  0100               	movlb	0	; () banked
  8350  00053C  2BCC               	incf	UI@i_431& (0+255),f,b
  8351  00053E  D7EF               	goto	l9024
  8352  000540                     l9032:
  8353                           
  8354                           ; BSR set to: 0
  8355  000540  0100               	movlb	0	; () banked
  8356  000542  51F8               	movf	_logstate& (0+255),w,b
  8357  000544  0100               	movlb	0	; () banked
  8358  000546  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8359  000548  B4D8               	btfsc	status,2,c
  8360  00054A  0012               	return	
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8364                           
  8365                           ; BSR set to: 0
  8366                           
  8367                           ; BSR set to: 0
  8368  00054C  0E00               	movlw	0
  8369  00054E  0100               	movlb	0	; () banked
  8370  000550  6FCD               	movwf	UI@i_432& (0+255),b
  8371  000552                     l9038:
  8372                           
  8373                           ; BSR set to: 0
  8374  000552  0E63               	movlw	99
  8375  000554  0100               	movlb	0	; () banked
  8376  000556  65CD               	cpfsgt	UI@i_432& (0+255),b
  8377  000558  D001               	goto	l9042
  8378  00055A  D00C               	goto	l9046
  8379  00055C                     l9042:
  8380                           
  8381                           ; BSR set to: 0
  8382  00055C  0E68               	movlw	104
  8383  00055E  0100               	movlb	0	; () banked
  8384  000560  6FC4               	movwf	??_UI& (0+255),b
  8385  000562  0EE4               	movlw	228
  8386  000564                     u9657:
  8387  000564  2EE8               	decfsz	wreg,f,c
  8388  000566  D7FE               	bra	u9657
  8389  000568  2FC4               	decfsz	??_UI& (0+255),f,b
  8390  00056A  D7FC               	bra	u9657
  8391  00056C  F000               	nop	
  8392  00056E  0100               	movlb	0	; () banked
  8393  000570  2BCD               	incf	UI@i_432& (0+255),f,b
  8394  000572  D7EF               	goto	l9038
  8395  000574                     l9046:
  8396                           
  8397                           ; BSR set to: 0
  8398  000574  0100               	movlb	0	; () banked
  8399  000576  51F8               	movf	_logstate& (0+255),w,b
  8400  000578  0100               	movlb	0	; () banked
  8401  00057A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8402  00057C  B4D8               	btfsc	status,2,c
  8403  00057E  0012               	return	
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8407                           
  8408                           ; BSR set to: 0
  8409                           
  8410                           ; BSR set to: 0
  8411  000580  0E01               	movlw	1
  8412  000582  EC5F  F02B         	call	_lcdInst
  8413  000586  0E68               	movlw	104
  8414  000588  0100               	movlb	0	; () banked
  8415  00058A  6FC4               	movwf	??_UI& (0+255),b
  8416  00058C  0EE4               	movlw	228
  8417  00058E                     u9667:
  8418  00058E  2EE8               	decfsz	wreg,f,c
  8419  000590  D7FE               	bra	u9667
  8420  000592  2FC4               	decfsz	??_UI& (0+255),f,b
  8421  000594  D7FC               	bra	u9667
  8422  000596  F000               	nop	
  8423                           
  8424                           ;UI.c: 176: lcdInst(0b10000000);;
  8425  000598  0E80               	movlw	128
  8426  00059A  EC5F  F02B         	call	_lcdInst
  8427                           
  8428                           ;UI.c: 177: printf("DURATION:");
  8429  00059E  0E9A               	movlw	low STR_22
  8430  0005A0  0100               	movlb	0	; () banked
  8431  0005A2  6F8E               	movwf	printf@f& (0+255),b
  8432  0005A4  0EFF               	movlw	high STR_22
  8433  0005A6  0100               	movlb	0	; () banked
  8434  0005A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8435  0005AA  EC84  F00B         	call	_printf	;wreg free
  8436                           
  8437                           ;UI.c: 178: lcdInst(0b11000000);;
  8438  0005AE  0EC0               	movlw	192
  8439  0005B0  EC5F  F02B         	call	_lcdInst
  8440                           
  8441                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8442  0005B4  0E0E               	movlw	14
  8443  0005B6  0100               	movlb	0	; () banked
  8444  0005B8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8445  0005BA  0E10               	movlw	16
  8446  0005BC  6F82               	movwf	___awmod@divisor& (0+255),b
  8447  0005BE  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8448  0005C2  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8449  0005C6  ECB1  F023         	call	___awmod	;wreg free
  8450  0005CA  C080  F0C6         	movff	?___awmod,_UI$2446
  8451  0005CE  C081  F0C7         	movff	?___awmod+1,_UI$2446+1
  8452                           
  8453                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8454  0005D2  0E23               	movlw	low STR_23
  8455  0005D4  0100               	movlb	0	; () banked
  8456  0005D6  6F8E               	movwf	printf@f& (0+255),b
  8457  0005D8  0EFF               	movlw	high STR_23
  8458  0005DA  0100               	movlb	0	; () banked
  8459  0005DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8460  0005DE  0E0E               	movlw	14
  8461  0005E0  0100               	movlb	0	; () banked
  8462  0005E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8463  0005E4  0E10               	movlw	16
  8464  0005E6  6F82               	movwf	___awmod@divisor& (0+255),b
  8465  0005E8  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8466  0005EC  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8467  0005F0  ECB1  F023         	call	___awmod	;wreg free
  8468  0005F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  8469  0005F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8470  0005FC  0E00               	movlw	0
  8471  0005FE  0100               	movlb	0	; () banked
  8472  000600  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8473  000602  0E3C               	movlw	60
  8474  000604  6F88               	movwf	___awdiv@divisor& (0+255),b
  8475  000606  EC9F  F022         	call	___awdiv	;wreg free
  8476  00060A  C086  F090         	movff	?___awdiv,?_printf+2
  8477  00060E  C087  F091         	movff	?___awdiv+1,?_printf+3
  8478  000612  C0C6  F080         	movff	_UI$2446,___awmod@dividend
  8479  000616  C0C7  F081         	movff	_UI$2446+1,___awmod@dividend+1
  8480  00061A  0E00               	movlw	0
  8481  00061C  0100               	movlb	0	; () banked
  8482  00061E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8483  000620  0E3C               	movlw	60
  8484  000622  6F82               	movwf	___awmod@divisor& (0+255),b
  8485  000624  ECB1  F023         	call	___awmod	;wreg free
  8486  000628  C080  F092         	movff	?___awmod,?_printf+4
  8487  00062C  C081  F093         	movff	?___awmod+1,?_printf+5
  8488  000630  EC84  F00B         	call	_printf	;wreg free
  8489                           
  8490                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8491  000634  0E00               	movlw	0
  8492  000636  0100               	movlb	0	; () banked
  8493  000638  6FCE               	movwf	UI@i_435& (0+255),b
  8494  00063A                     l9066:
  8495                           
  8496                           ; BSR set to: 0
  8497  00063A  0E63               	movlw	99
  8498  00063C  0100               	movlb	0	; () banked
  8499  00063E  65CE               	cpfsgt	UI@i_435& (0+255),b
  8500  000640  D001               	goto	l9070
  8501  000642  D00C               	goto	l9074
  8502  000644                     l9070:
  8503                           
  8504                           ; BSR set to: 0
  8505  000644  0E68               	movlw	104
  8506  000646  0100               	movlb	0	; () banked
  8507  000648  6FC4               	movwf	??_UI& (0+255),b
  8508  00064A  0EE4               	movlw	228
  8509  00064C                     u9677:
  8510  00064C  2EE8               	decfsz	wreg,f,c
  8511  00064E  D7FE               	bra	u9677
  8512  000650  2FC4               	decfsz	??_UI& (0+255),f,b
  8513  000652  D7FC               	bra	u9677
  8514  000654  F000               	nop	
  8515  000656  0100               	movlb	0	; () banked
  8516  000658  2BCE               	incf	UI@i_435& (0+255),f,b
  8517  00065A  D7EF               	goto	l9066
  8518  00065C                     l9074:
  8519                           
  8520                           ; BSR set to: 0
  8521  00065C  0100               	movlb	0	; () banked
  8522  00065E  51F8               	movf	_logstate& (0+255),w,b
  8523  000660  0100               	movlb	0	; () banked
  8524  000662  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8525  000664  B4D8               	btfsc	status,2,c
  8526  000666  0012               	return	
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8530                           
  8531                           ; BSR set to: 0
  8532                           
  8533                           ; BSR set to: 0
  8534  000668  0E00               	movlw	0
  8535  00066A  0100               	movlb	0	; () banked
  8536  00066C  6FCF               	movwf	UI@i_436& (0+255),b
  8537  00066E                     l9080:
  8538                           
  8539                           ; BSR set to: 0
  8540  00066E  0E63               	movlw	99
  8541  000670  0100               	movlb	0	; () banked
  8542  000672  65CF               	cpfsgt	UI@i_436& (0+255),b
  8543  000674  D001               	goto	l9084
  8544  000676  D00C               	goto	l9088
  8545  000678                     l9084:
  8546                           
  8547                           ; BSR set to: 0
  8548  000678  0E68               	movlw	104
  8549  00067A  0100               	movlb	0	; () banked
  8550  00067C  6FC4               	movwf	??_UI& (0+255),b
  8551  00067E  0EE4               	movlw	228
  8552  000680                     u9687:
  8553  000680  2EE8               	decfsz	wreg,f,c
  8554  000682  D7FE               	bra	u9687
  8555  000684  2FC4               	decfsz	??_UI& (0+255),f,b
  8556  000686  D7FC               	bra	u9687
  8557  000688  F000               	nop	
  8558  00068A  0100               	movlb	0	; () banked
  8559  00068C  2BCF               	incf	UI@i_436& (0+255),f,b
  8560  00068E  D7EF               	goto	l9080
  8561  000690                     l9088:
  8562                           
  8563                           ; BSR set to: 0
  8564  000690  0100               	movlb	0	; () banked
  8565  000692  51F8               	movf	_logstate& (0+255),w,b
  8566  000694  0100               	movlb	0	; () banked
  8567  000696  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8568  000698  B4D8               	btfsc	status,2,c
  8569  00069A  0012               	return	
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8573                           
  8574                           ; BSR set to: 0
  8575                           
  8576                           ; BSR set to: 0
  8577  00069C  0E01               	movlw	1
  8578  00069E  EC5F  F02B         	call	_lcdInst
  8579  0006A2  0E68               	movlw	104
  8580  0006A4  0100               	movlb	0	; () banked
  8581  0006A6  6FC4               	movwf	??_UI& (0+255),b
  8582  0006A8  0EE4               	movlw	228
  8583  0006AA                     u9697:
  8584  0006AA  2EE8               	decfsz	wreg,f,c
  8585  0006AC  D7FE               	bra	u9697
  8586  0006AE  2FC4               	decfsz	??_UI& (0+255),f,b
  8587  0006B0  D7FC               	bra	u9697
  8588  0006B2  F000               	nop	
  8589                           
  8590                           ;UI.c: 185: lcdInst(0b10000000);;
  8591  0006B4  0E80               	movlw	128
  8592  0006B6  EC5F  F02B         	call	_lcdInst
  8593                           
  8594                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  8595  0006BA  0E46               	movlw	low STR_24
  8596  0006BC  0100               	movlb	0	; () banked
  8597  0006BE  6F8E               	movwf	printf@f& (0+255),b
  8598  0006C0  0EFD               	movlw	high STR_24
  8599  0006C2  0100               	movlb	0	; () banked
  8600  0006C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8601  0006C6  EC84  F00B         	call	_printf	;wreg free
  8602                           
  8603                           ;UI.c: 187: lcdInst(0b11000000);;
  8604  0006CA  0EC0               	movlw	192
  8605  0006CC  EC5F  F02B         	call	_lcdInst
  8606                           
  8607                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8608  0006D0  0E23               	movlw	low STR_25
  8609  0006D2  0100               	movlb	0	; () banked
  8610  0006D4  6F8E               	movwf	printf@f& (0+255),b
  8611  0006D6  0EFE               	movlw	high STR_25
  8612  0006D8  0100               	movlb	0	; () banked
  8613  0006DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8614  0006DC  C065  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8615  0006E0  C066  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8616  0006E4  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8617  0006E8  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8618  0006EC  EC84  F00B         	call	_printf	;wreg free
  8619                           
  8620                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8621  0006F0  0E00               	movlw	0
  8622  0006F2  0100               	movlb	0	; () banked
  8623  0006F4  6FD0               	movwf	UI@i_439& (0+255),b
  8624  0006F6                     l9106:
  8625                           
  8626                           ; BSR set to: 0
  8627  0006F6  0E63               	movlw	99
  8628  0006F8  0100               	movlb	0	; () banked
  8629  0006FA  65D0               	cpfsgt	UI@i_439& (0+255),b
  8630  0006FC  D001               	goto	l9110
  8631  0006FE  D00C               	goto	l9114
  8632  000700                     l9110:
  8633                           
  8634                           ; BSR set to: 0
  8635  000700  0E68               	movlw	104
  8636  000702  0100               	movlb	0	; () banked
  8637  000704  6FC4               	movwf	??_UI& (0+255),b
  8638  000706  0EE4               	movlw	228
  8639  000708                     u9707:
  8640  000708  2EE8               	decfsz	wreg,f,c
  8641  00070A  D7FE               	bra	u9707
  8642  00070C  2FC4               	decfsz	??_UI& (0+255),f,b
  8643  00070E  D7FC               	bra	u9707
  8644  000710  F000               	nop	
  8645  000712  0100               	movlb	0	; () banked
  8646  000714  2BD0               	incf	UI@i_439& (0+255),f,b
  8647  000716  D7EF               	goto	l9106
  8648  000718                     l9114:
  8649                           
  8650                           ; BSR set to: 0
  8651  000718  0100               	movlb	0	; () banked
  8652  00071A  51F8               	movf	_logstate& (0+255),w,b
  8653  00071C  0100               	movlb	0	; () banked
  8654  00071E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8655  000720  B4D8               	btfsc	status,2,c
  8656  000722  0012               	return	
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8660                           
  8661                           ; BSR set to: 0
  8662                           
  8663                           ; BSR set to: 0
  8664  000724  0E00               	movlw	0
  8665  000726  0100               	movlb	0	; () banked
  8666  000728  6FD1               	movwf	UI@i_440& (0+255),b
  8667  00072A                     l9120:
  8668                           
  8669                           ; BSR set to: 0
  8670  00072A  0E63               	movlw	99
  8671  00072C  0100               	movlb	0	; () banked
  8672  00072E  65D1               	cpfsgt	UI@i_440& (0+255),b
  8673  000730  D001               	goto	l9124
  8674  000732  D00C               	goto	l9128
  8675  000734                     l9124:
  8676                           
  8677                           ; BSR set to: 0
  8678  000734  0E68               	movlw	104
  8679  000736  0100               	movlb	0	; () banked
  8680  000738  6FC4               	movwf	??_UI& (0+255),b
  8681  00073A  0EE4               	movlw	228
  8682  00073C                     u9717:
  8683  00073C  2EE8               	decfsz	wreg,f,c
  8684  00073E  D7FE               	bra	u9717
  8685  000740  2FC4               	decfsz	??_UI& (0+255),f,b
  8686  000742  D7FC               	bra	u9717
  8687  000744  F000               	nop	
  8688  000746  0100               	movlb	0	; () banked
  8689  000748  2BD1               	incf	UI@i_440& (0+255),f,b
  8690  00074A  D7EF               	goto	l9120
  8691  00074C                     l9128:
  8692                           
  8693                           ; BSR set to: 0
  8694  00074C  0100               	movlb	0	; () banked
  8695  00074E  51F8               	movf	_logstate& (0+255),w,b
  8696  000750  0100               	movlb	0	; () banked
  8697  000752  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8698  000754  B4D8               	btfsc	status,2,c
  8699  000756  0012               	return	
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8703                           
  8704                           ; BSR set to: 0
  8705                           
  8706                           ; BSR set to: 0
  8707  000758  0E01               	movlw	1
  8708  00075A  EC5F  F02B         	call	_lcdInst
  8709  00075E  0E68               	movlw	104
  8710  000760  0100               	movlb	0	; () banked
  8711  000762  6FC4               	movwf	??_UI& (0+255),b
  8712  000764  0EE4               	movlw	228
  8713  000766                     u9727:
  8714  000766  2EE8               	decfsz	wreg,f,c
  8715  000768  D7FE               	bra	u9727
  8716  00076A  2FC4               	decfsz	??_UI& (0+255),f,b
  8717  00076C  D7FC               	bra	u9727
  8718  00076E  F000               	nop	
  8719                           
  8720                           ;UI.c: 194: lcdInst(0b10000000);;
  8721  000770  0E80               	movlw	128
  8722  000772  EC5F  F02B         	call	_lcdInst
  8723                           
  8724                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  8725  000776  0E57               	movlw	low STR_26
  8726  000778  0100               	movlb	0	; () banked
  8727  00077A  6F8E               	movwf	printf@f& (0+255),b
  8728  00077C  0EFD               	movlw	high STR_26
  8729  00077E  0100               	movlb	0	; () banked
  8730  000780  6F8F               	movwf	(printf@f+1)& (0+255),b
  8731  000782  EC84  F00B         	call	_printf	;wreg free
  8732                           
  8733                           ;UI.c: 196: lcdInst(0b11000000);;
  8734  000786  0EC0               	movlw	192
  8735  000788  EC5F  F02B         	call	_lcdInst
  8736                           
  8737                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8738  00078C  0E12               	movlw	low STR_27
  8739  00078E  0100               	movlb	0	; () banked
  8740  000790  6F8E               	movwf	printf@f& (0+255),b
  8741  000792  0EFE               	movlw	high STR_27
  8742  000794  0100               	movlb	0	; () banked
  8743  000796  6F8F               	movwf	(printf@f+1)& (0+255),b
  8744  000798  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8745  00079C  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8746  0007A0  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  8747  0007A4  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8748  0007A8  EC84  F00B         	call	_printf	;wreg free
  8749                           
  8750                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8751  0007AC  0E00               	movlw	0
  8752  0007AE  0100               	movlb	0	; () banked
  8753  0007B0  6FD2               	movwf	UI@i_443& (0+255),b
  8754  0007B2                     l9146:
  8755                           
  8756                           ; BSR set to: 0
  8757  0007B2  0E63               	movlw	99
  8758  0007B4  0100               	movlb	0	; () banked
  8759  0007B6  65D2               	cpfsgt	UI@i_443& (0+255),b
  8760  0007B8  D001               	goto	l9150
  8761  0007BA  D00C               	goto	l9154
  8762  0007BC                     l9150:
  8763                           
  8764                           ; BSR set to: 0
  8765  0007BC  0E68               	movlw	104
  8766  0007BE  0100               	movlb	0	; () banked
  8767  0007C0  6FC4               	movwf	??_UI& (0+255),b
  8768  0007C2  0EE4               	movlw	228
  8769  0007C4                     u9737:
  8770  0007C4  2EE8               	decfsz	wreg,f,c
  8771  0007C6  D7FE               	bra	u9737
  8772  0007C8  2FC4               	decfsz	??_UI& (0+255),f,b
  8773  0007CA  D7FC               	bra	u9737
  8774  0007CC  F000               	nop	
  8775  0007CE  0100               	movlb	0	; () banked
  8776  0007D0  2BD2               	incf	UI@i_443& (0+255),f,b
  8777  0007D2  D7EF               	goto	l9146
  8778  0007D4                     l9154:
  8779                           
  8780                           ; BSR set to: 0
  8781  0007D4  0100               	movlb	0	; () banked
  8782  0007D6  51F8               	movf	_logstate& (0+255),w,b
  8783  0007D8  0100               	movlb	0	; () banked
  8784  0007DA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8785  0007DC  B4D8               	btfsc	status,2,c
  8786  0007DE  0012               	return	
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8790                           
  8791                           ; BSR set to: 0
  8792                           
  8793                           ; BSR set to: 0
  8794  0007E0  0E00               	movlw	0
  8795  0007E2  0100               	movlb	0	; () banked
  8796  0007E4  6FD3               	movwf	UI@i_444& (0+255),b
  8797  0007E6                     l9160:
  8798                           
  8799                           ; BSR set to: 0
  8800  0007E6  0E63               	movlw	99
  8801  0007E8  0100               	movlb	0	; () banked
  8802  0007EA  65D3               	cpfsgt	UI@i_444& (0+255),b
  8803  0007EC  D001               	goto	l9164
  8804  0007EE  D00C               	goto	l9168
  8805  0007F0                     l9164:
  8806                           
  8807                           ; BSR set to: 0
  8808  0007F0  0E68               	movlw	104
  8809  0007F2  0100               	movlb	0	; () banked
  8810  0007F4  6FC4               	movwf	??_UI& (0+255),b
  8811  0007F6  0EE4               	movlw	228
  8812  0007F8                     u9747:
  8813  0007F8  2EE8               	decfsz	wreg,f,c
  8814  0007FA  D7FE               	bra	u9747
  8815  0007FC  2FC4               	decfsz	??_UI& (0+255),f,b
  8816  0007FE  D7FC               	bra	u9747
  8817  000800  F000               	nop	
  8818  000802  0100               	movlb	0	; () banked
  8819  000804  2BD3               	incf	UI@i_444& (0+255),f,b
  8820  000806  D7EF               	goto	l9160
  8821  000808                     l9168:
  8822                           
  8823                           ; BSR set to: 0
  8824  000808  0100               	movlb	0	; () banked
  8825  00080A  51F8               	movf	_logstate& (0+255),w,b
  8826  00080C  0100               	movlb	0	; () banked
  8827  00080E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8828  000810  B4D8               	btfsc	status,2,c
  8829  000812  0012               	return	
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8833                           
  8834                           ; BSR set to: 0
  8835                           
  8836                           ; BSR set to: 0
  8837  000814  0E01               	movlw	1
  8838  000816  EC5F  F02B         	call	_lcdInst
  8839  00081A  0E68               	movlw	104
  8840  00081C  0100               	movlb	0	; () banked
  8841  00081E  6FC4               	movwf	??_UI& (0+255),b
  8842  000820  0EE4               	movlw	228
  8843  000822                     u9757:
  8844  000822  2EE8               	decfsz	wreg,f,c
  8845  000824  D7FE               	bra	u9757
  8846  000826  2FC4               	decfsz	??_UI& (0+255),f,b
  8847  000828  D7FC               	bra	u9757
  8848  00082A  F000               	nop	
  8849                           
  8850                           ;UI.c: 203: lcdInst(0b10000000);;
  8851  00082C  0E80               	movlw	128
  8852  00082E  EC5F  F02B         	call	_lcdInst
  8853                           
  8854                           ;UI.c: 204: printf("-- TOTAL CANS --");
  8855  000832  0E68               	movlw	low STR_28
  8856  000834  0100               	movlb	0	; () banked
  8857  000836  6F8E               	movwf	printf@f& (0+255),b
  8858  000838  0EFD               	movlw	high STR_28
  8859  00083A  0100               	movlb	0	; () banked
  8860  00083C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8861  00083E  EC84  F00B         	call	_printf	;wreg free
  8862                           
  8863                           ;UI.c: 205: lcdInst(0b11000000);;
  8864  000842  0EC0               	movlw	192
  8865  000844  EC5F  F02B         	call	_lcdInst
  8866                           
  8867                           ;UI.c: 206: printf("%d", log_count_total);
  8868  000848  0E20               	movlw	low (STR_27+14)
  8869  00084A  0100               	movlb	0	; () banked
  8870  00084C  6F8E               	movwf	printf@f& (0+255),b
  8871  00084E  0EFE               	movlw	high (STR_27+14)
  8872  000850  0100               	movlb	0	; () banked
  8873  000852  6F8F               	movwf	(printf@f+1)& (0+255),b
  8874  000854  C143  F090         	movff	_log_count_total,?_printf+2
  8875  000858  C144  F091         	movff	_log_count_total+1,?_printf+3
  8876  00085C  EC84  F00B         	call	_printf	;wreg free
  8877                           
  8878                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8879  000860  0E00               	movlw	0
  8880  000862  0100               	movlb	0	; () banked
  8881  000864  6FD4               	movwf	UI@i_447& (0+255),b
  8882  000866                     l9186:
  8883                           
  8884                           ; BSR set to: 0
  8885  000866  0E63               	movlw	99
  8886  000868  0100               	movlb	0	; () banked
  8887  00086A  65D4               	cpfsgt	UI@i_447& (0+255),b
  8888  00086C  D001               	goto	l9190
  8889  00086E  D00C               	goto	l9194
  8890  000870                     l9190:
  8891                           
  8892                           ; BSR set to: 0
  8893  000870  0E68               	movlw	104
  8894  000872  0100               	movlb	0	; () banked
  8895  000874  6FC4               	movwf	??_UI& (0+255),b
  8896  000876  0EE4               	movlw	228
  8897  000878                     u9767:
  8898  000878  2EE8               	decfsz	wreg,f,c
  8899  00087A  D7FE               	bra	u9767
  8900  00087C  2FC4               	decfsz	??_UI& (0+255),f,b
  8901  00087E  D7FC               	bra	u9767
  8902  000880  F000               	nop	
  8903  000882  0100               	movlb	0	; () banked
  8904  000884  2BD4               	incf	UI@i_447& (0+255),f,b
  8905  000886  D7EF               	goto	l9186
  8906  000888                     l9194:
  8907                           
  8908                           ; BSR set to: 0
  8909  000888  0100               	movlb	0	; () banked
  8910  00088A  51F8               	movf	_logstate& (0+255),w,b
  8911  00088C  0100               	movlb	0	; () banked
  8912  00088E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8913  000890  B4D8               	btfsc	status,2,c
  8914  000892  0012               	return	
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8918                           
  8919                           ; BSR set to: 0
  8920                           
  8921                           ; BSR set to: 0
  8922  000894  0E00               	movlw	0
  8923  000896  0100               	movlb	0	; () banked
  8924  000898  6FD5               	movwf	UI@i_448& (0+255),b
  8925  00089A                     l9200:
  8926                           
  8927                           ; BSR set to: 0
  8928  00089A  0E63               	movlw	99
  8929  00089C  0100               	movlb	0	; () banked
  8930  00089E  65D5               	cpfsgt	UI@i_448& (0+255),b
  8931  0008A0  D001               	goto	l9204
  8932  0008A2  D00C               	goto	l9208
  8933  0008A4                     l9204:
  8934                           
  8935                           ; BSR set to: 0
  8936  0008A4  0E68               	movlw	104
  8937  0008A6  0100               	movlb	0	; () banked
  8938  0008A8  6FC4               	movwf	??_UI& (0+255),b
  8939  0008AA  0EE4               	movlw	228
  8940  0008AC                     u9777:
  8941  0008AC  2EE8               	decfsz	wreg,f,c
  8942  0008AE  D7FE               	bra	u9777
  8943  0008B0  2FC4               	decfsz	??_UI& (0+255),f,b
  8944  0008B2  D7FC               	bra	u9777
  8945  0008B4  F000               	nop	
  8946  0008B6  0100               	movlb	0	; () banked
  8947  0008B8  2BD5               	incf	UI@i_448& (0+255),f,b
  8948  0008BA  D7EF               	goto	l9200
  8949  0008BC                     l9208:
  8950                           
  8951                           ; BSR set to: 0
  8952  0008BC  0100               	movlb	0	; () banked
  8953  0008BE  51F8               	movf	_logstate& (0+255),w,b
  8954  0008C0  0100               	movlb	0	; () banked
  8955  0008C2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8956  0008C4  B4D8               	btfsc	status,2,c
  8957  0008C6  0012               	return	
  8958  0008C8                     l9212:
  8959  0008C8  0100               	movlb	0	; () banked
  8960  0008CA  51F8               	movf	_logstate& (0+255),w,b
  8961  0008CC  0100               	movlb	0	; () banked
  8962  0008CE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8963  0008D0  B4D8               	btfsc	status,2,c
  8964  0008D2  0012               	return	
  8965  0008D4  D44C               	goto	l8908
  8966  0008D6                     __end_of_UI:
  8967                           	opt stack 0
  8968                           tblptru	equ	0xFF8
  8969                           tblptrh	equ	0xFF7
  8970                           tblptrl	equ	0xFF6
  8971                           tablat	equ	0xFF5
  8972                           prodh	equ	0xFF4
  8973                           prodl	equ	0xFF3
  8974                           intcon	equ	0xFF2
  8975                           intcon2	equ	0xFF1
  8976                           intcon3	equ	0xFF0
  8977                           postinc0	equ	0xFEE
  8978                           wreg	equ	0xFE8
  8979                           postdec1	equ	0xFE5
  8980                           fsr1l	equ	0xFE1
  8981                           indf2	equ	0xFDF
  8982                           postinc2	equ	0xFDE
  8983                           postdec2	equ	0xFDD
  8984                           fsr2h	equ	0xFDA
  8985                           fsr2l	equ	0xFD9
  8986                           status	equ	0xFD8
  8987                           
  8988 ;; *************** function _printRTC *****************
  8989 ;; Defined at:
  8990 ;;		line 63 in file "RTC.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;		None
  8993 ;; Auto vars:     Size  Location     Type
  8994 ;;  i               2   66[BANK0 ] int 
  8995 ;;  INT_time       14   46[BANK0 ] int [7]
  8996 ;;  month           4   62[BANK0 ] unsigned char [4]
  8997 ;;  RTC_month       2   60[BANK0 ] int 
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  1    wreg      void 
  9000 ;; Registers used:
  9001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9008 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9009 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;Total ram usage:       25 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:   10
  9014 ;; This function calls:
  9015 ;;		_getRTC
  9016 ;;		_lcdInst
  9017 ;;		_printf
  9018 ;;		_strcpy
  9019 ;; This function is called by:
  9020 ;;		_UI
  9021 ;;		_change_state_to_menu_start
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text23
  9026  0028B0                     __ptext23:
  9027                           	opt stack 0
  9028  0028B0                     _printRTC:
  9029                           	opt stack 18
  9030                           
  9031                           ;RTC.c: 64: getRTC();
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;incstack = 0
  9035  0028B0  EC48  F024         	call	_getRTC	;wreg free
  9036                           
  9037                           ;RTC.c: 65: char month[] = "MMM";
  9038  0028B4  C14B  F0BE         	movff	printRTC@F3231,printRTC@month
  9039  0028B8  C14C  F0BF         	movff	printRTC@F3231+1,printRTC@month+1
  9040  0028BC  C14D  F0C0         	movff	printRTC@F3231+2,printRTC@month+2
  9041  0028C0  C14E  F0C1         	movff	printRTC@F3231+3,printRTC@month+3
  9042                           
  9043                           ;RTC.c: 66: int INT_time[7];
  9044                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  9045  0028C4  0E00               	movlw	0
  9046  0028C6  0100               	movlb	0	; () banked
  9047  0028C8  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  9048  0028CA  0E00               	movlw	0
  9049  0028CC  6FC2               	movwf	printRTC@i& (0+255),b
  9050                           
  9051                           ; BSR set to: 0
  9052  0028CE  0100               	movlb	0	; () banked
  9053  0028D0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9054  0028D2  D008               	goto	l6878
  9055  0028D4  0100               	movlb	0	; () banked
  9056  0028D6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9057  0028D8  E146               	bnz	l620
  9058  0028DA  0E07               	movlw	7
  9059  0028DC  0100               	movlb	0	; () banked
  9060  0028DE  5DC2               	subwf	printRTC@i& (0+255),w,b
  9061  0028E0  B0D8               	btfsc	status,0,c
  9062  0028E2  D041               	goto	l620
  9063  0028E4                     l6878:
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9067  0028E4  0E1C               	movlw	low _time
  9068  0028E6  0100               	movlb	0	; () banked
  9069  0028E8  25C2               	addwf	printRTC@i& (0+255),w,b
  9070  0028EA  6ED9               	movwf	fsr2l,c
  9071  0028EC  0E01               	movlw	high _time
  9072  0028EE  0100               	movlb	0	; () banked
  9073  0028F0  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9074  0028F2  6EDA               	movwf	fsr2h,c
  9075  0028F4  50DF               	movf	indf2,w,c
  9076  0028F6  0100               	movlb	0	; () banked
  9077  0028F8  6FAB               	movwf	??_printRTC& (0+255),b
  9078  0028FA  0100               	movlb	0	; () banked
  9079  0028FC  3BAB               	swapf	??_printRTC& (0+255),f,b
  9080  0028FE  0E0F               	movlw	15
  9081  002900  17AB               	andwf	??_printRTC& (0+255),f,b
  9082  002902  0E0F               	movlw	15
  9083  002904  0100               	movlb	0	; () banked
  9084  002906  17AB               	andwf	??_printRTC& (0+255),f,b
  9085  002908  0100               	movlb	0	; () banked
  9086  00290A  51AB               	movf	??_printRTC& (0+255),w,b
  9087  00290C  0D0A               	mullw	10
  9088  00290E  0E1C               	movlw	low _time
  9089  002910  0100               	movlb	0	; () banked
  9090  002912  25C2               	addwf	printRTC@i& (0+255),w,b
  9091  002914  6ED9               	movwf	fsr2l,c
  9092  002916  0E01               	movlw	high _time
  9093  002918  0100               	movlb	0	; () banked
  9094  00291A  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9095  00291C  6EDA               	movwf	fsr2h,c
  9096  00291E  50DF               	movf	indf2,w,c
  9097  002920  0B0F               	andlw	15
  9098  002922  0100               	movlb	0	; () banked
  9099  002924  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  9100  002926  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  9101  002928  50F3               	movf	prodl,w,c
  9102  00292A  0100               	movlb	0	; () banked
  9103  00292C  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  9104  00292E  50F4               	movf	prodh,w,c
  9105  002930  0100               	movlb	0	; () banked
  9106  002932  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  9107  002934  90D8               	bcf	status,0,c
  9108  002936  0100               	movlb	0	; () banked
  9109  002938  35C2               	rlcf	printRTC@i& (0+255),w,b
  9110  00293A  6ED9               	movwf	fsr2l,c
  9111  00293C  0100               	movlb	0	; () banked
  9112  00293E  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  9113  002940  6EDA               	movwf	fsr2h,c
  9114  002942  0EAE               	movlw	low printRTC@INT_time
  9115  002944  26D9               	addwf	fsr2l,f,c
  9116  002946  0E00               	movlw	high printRTC@INT_time
  9117  002948  22DA               	addwfc	fsr2h,f,c
  9118  00294A  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  9119  00294E  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  9120                           
  9121                           ; BSR set to: 0
  9122  002952  0100               	movlb	0	; () banked
  9123  002954  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9124  002956  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9125                           
  9126                           ; BSR set to: 0
  9127  002958  0100               	movlb	0	; () banked
  9128  00295A  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9129  00295C  D7C3               	goto	l6878
  9130  00295E  0100               	movlb	0	; () banked
  9131  002960  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9132  002962  E101               	bnz	u5520
  9133  002964  D7BA               	goto	L11
  9134  002966                     u5520:
  9135  002966                     l620:
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;RTC.c: 69: }
  9139                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9140  002966  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9141  00296A  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9142                           
  9143                           ;RTC.c: 72: switch(RTC_month){
  9144  00296E  D0B4               	goto	l6910
  9145  002970                     l6884:
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;RTC.c: 74: strcpy(month, "JAN");
  9149  002970  0EBE               	movlw	low printRTC@month
  9150  002972  0100               	movlb	0	; () banked
  9151  002974  6F80               	movwf	strcpy@to& (0+255),b
  9152  002976  0E00               	movlw	high printRTC@month
  9153  002978  0100               	movlb	0	; () banked
  9154  00297A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9155  00297C  0EDA               	movlw	low STR_8
  9156  00297E  0100               	movlb	0	; () banked
  9157  002980  6F82               	movwf	strcpy@from& (0+255),b
  9158  002982  0EFF               	movlw	high STR_8
  9159  002984  0100               	movlb	0	; () banked
  9160  002986  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9161  002988  ECB9  F028         	call	_strcpy	;wreg free
  9162                           
  9163                           ;RTC.c: 75: break;
  9164  00298C  D0D4               	goto	l6912
  9165  00298E                     l6886:
  9166                           
  9167                           ;RTC.c: 77: strcpy(month, "FEB");
  9168  00298E  0EBE               	movlw	low printRTC@month
  9169  002990  0100               	movlb	0	; () banked
  9170  002992  6F80               	movwf	strcpy@to& (0+255),b
  9171  002994  0E00               	movlw	high printRTC@month
  9172  002996  0100               	movlb	0	; () banked
  9173  002998  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9174  00299A  0ECA               	movlw	low STR_9
  9175  00299C  0100               	movlb	0	; () banked
  9176  00299E  6F82               	movwf	strcpy@from& (0+255),b
  9177  0029A0  0EFF               	movlw	high STR_9
  9178  0029A2  0100               	movlb	0	; () banked
  9179  0029A4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9180  0029A6  ECB9  F028         	call	_strcpy	;wreg free
  9181                           
  9182                           ;RTC.c: 78: break;
  9183  0029AA  D0C5               	goto	l6912
  9184  0029AC                     l6888:
  9185                           
  9186                           ;RTC.c: 80: strcpy(month, "MAR");
  9187  0029AC  0EBE               	movlw	low printRTC@month
  9188  0029AE  0100               	movlb	0	; () banked
  9189  0029B0  6F80               	movwf	strcpy@to& (0+255),b
  9190  0029B2  0E00               	movlw	high printRTC@month
  9191  0029B4  0100               	movlb	0	; () banked
  9192  0029B6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9193  0029B8  0EE6               	movlw	low STR_10
  9194  0029BA  0100               	movlb	0	; () banked
  9195  0029BC  6F82               	movwf	strcpy@from& (0+255),b
  9196  0029BE  0EFF               	movlw	high STR_10
  9197  0029C0  0100               	movlb	0	; () banked
  9198  0029C2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9199  0029C4  ECB9  F028         	call	_strcpy	;wreg free
  9200                           
  9201                           ;RTC.c: 81: break;
  9202  0029C8  D0B6               	goto	l6912
  9203  0029CA                     l6890:
  9204                           
  9205                           ;RTC.c: 83: strcpy(month, "APR");
  9206  0029CA  0EBE               	movlw	low printRTC@month
  9207  0029CC  0100               	movlb	0	; () banked
  9208  0029CE  6F80               	movwf	strcpy@to& (0+255),b
  9209  0029D0  0E00               	movlw	high printRTC@month
  9210  0029D2  0100               	movlb	0	; () banked
  9211  0029D4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9212  0029D6  0EEA               	movlw	low STR_11
  9213  0029D8  0100               	movlb	0	; () banked
  9214  0029DA  6F82               	movwf	strcpy@from& (0+255),b
  9215  0029DC  0EFF               	movlw	high STR_11
  9216  0029DE  0100               	movlb	0	; () banked
  9217  0029E0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9218  0029E2  ECB9  F028         	call	_strcpy	;wreg free
  9219                           
  9220                           ;RTC.c: 84: break;
  9221  0029E6  D0A7               	goto	l6912
  9222  0029E8                     l6892:
  9223                           
  9224                           ;RTC.c: 86: strcpy(month, "MAY");
  9225  0029E8  0EBE               	movlw	low printRTC@month
  9226  0029EA  0100               	movlb	0	; () banked
  9227  0029EC  6F80               	movwf	strcpy@to& (0+255),b
  9228  0029EE  0E00               	movlw	high printRTC@month
  9229  0029F0  0100               	movlb	0	; () banked
  9230  0029F2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9231  0029F4  0EFA               	movlw	low STR_12
  9232  0029F6  0100               	movlb	0	; () banked
  9233  0029F8  6F82               	movwf	strcpy@from& (0+255),b
  9234  0029FA  0EFF               	movlw	high STR_12
  9235  0029FC  0100               	movlb	0	; () banked
  9236  0029FE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9237  002A00  ECB9  F028         	call	_strcpy	;wreg free
  9238                           
  9239                           ;RTC.c: 87: break;
  9240  002A04  D098               	goto	l6912
  9241  002A06                     l6894:
  9242                           
  9243                           ;RTC.c: 89: strcpy(month, "JUN");
  9244  002A06  0EBE               	movlw	low printRTC@month
  9245  002A08  0100               	movlb	0	; () banked
  9246  002A0A  6F80               	movwf	strcpy@to& (0+255),b
  9247  002A0C  0E00               	movlw	high printRTC@month
  9248  002A0E  0100               	movlb	0	; () banked
  9249  002A10  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9250  002A12  0EDE               	movlw	low STR_13
  9251  002A14  0100               	movlb	0	; () banked
  9252  002A16  6F82               	movwf	strcpy@from& (0+255),b
  9253  002A18  0EFF               	movlw	high STR_13
  9254  002A1A  0100               	movlb	0	; () banked
  9255  002A1C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9256  002A1E  ECB9  F028         	call	_strcpy	;wreg free
  9257                           
  9258                           ;RTC.c: 90: break;
  9259  002A22  D089               	goto	l6912
  9260  002A24                     l6896:
  9261                           
  9262                           ;RTC.c: 92: strcpy(month, "JUL");
  9263  002A24  0EBE               	movlw	low printRTC@month
  9264  002A26  0100               	movlb	0	; () banked
  9265  002A28  6F80               	movwf	strcpy@to& (0+255),b
  9266  002A2A  0E00               	movlw	high printRTC@month
  9267  002A2C  0100               	movlb	0	; () banked
  9268  002A2E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9269  002A30  0ED6               	movlw	low STR_14
  9270  002A32  0100               	movlb	0	; () banked
  9271  002A34  6F82               	movwf	strcpy@from& (0+255),b
  9272  002A36  0EFF               	movlw	high STR_14
  9273  002A38  0100               	movlb	0	; () banked
  9274  002A3A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9275  002A3C  ECB9  F028         	call	_strcpy	;wreg free
  9276                           
  9277                           ;RTC.c: 93: break;
  9278  002A40  D07A               	goto	l6912
  9279  002A42                     l6898:
  9280                           
  9281                           ;RTC.c: 95: strcpy(month, "AUG");
  9282  002A42  0EBE               	movlw	low printRTC@month
  9283  002A44  0100               	movlb	0	; () banked
  9284  002A46  6F80               	movwf	strcpy@to& (0+255),b
  9285  002A48  0E00               	movlw	high printRTC@month
  9286  002A4A  0100               	movlb	0	; () banked
  9287  002A4C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9288  002A4E  0ED2               	movlw	low STR_15
  9289  002A50  0100               	movlb	0	; () banked
  9290  002A52  6F82               	movwf	strcpy@from& (0+255),b
  9291  002A54  0EFF               	movlw	high STR_15
  9292  002A56  0100               	movlb	0	; () banked
  9293  002A58  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9294  002A5A  ECB9  F028         	call	_strcpy	;wreg free
  9295                           
  9296                           ;RTC.c: 96: break;
  9297  002A5E  D06B               	goto	l6912
  9298  002A60                     l6900:
  9299                           
  9300                           ;RTC.c: 98: strcpy(month, "SEP");
  9301  002A60  0EBE               	movlw	low printRTC@month
  9302  002A62  0100               	movlb	0	; () banked
  9303  002A64  6F80               	movwf	strcpy@to& (0+255),b
  9304  002A66  0E00               	movlw	high printRTC@month
  9305  002A68  0100               	movlb	0	; () banked
  9306  002A6A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9307  002A6C  0EE2               	movlw	low STR_16
  9308  002A6E  0100               	movlb	0	; () banked
  9309  002A70  6F82               	movwf	strcpy@from& (0+255),b
  9310  002A72  0EFF               	movlw	high STR_16
  9311  002A74  0100               	movlb	0	; () banked
  9312  002A76  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9313  002A78  ECB9  F028         	call	_strcpy	;wreg free
  9314                           
  9315                           ;RTC.c: 99: break;
  9316  002A7C  D05C               	goto	l6912
  9317  002A7E                     l6902:
  9318                           
  9319                           ;RTC.c: 101: strcpy(month, "OCT");
  9320  002A7E  0EBE               	movlw	low printRTC@month
  9321  002A80  0100               	movlb	0	; () banked
  9322  002A82  6F80               	movwf	strcpy@to& (0+255),b
  9323  002A84  0E00               	movlw	high printRTC@month
  9324  002A86  0100               	movlb	0	; () banked
  9325  002A88  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9326  002A8A  0EF2               	movlw	low STR_17
  9327  002A8C  0100               	movlb	0	; () banked
  9328  002A8E  6F82               	movwf	strcpy@from& (0+255),b
  9329  002A90  0EFF               	movlw	high STR_17
  9330  002A92  0100               	movlb	0	; () banked
  9331  002A94  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9332  002A96  ECB9  F028         	call	_strcpy	;wreg free
  9333                           
  9334                           ;RTC.c: 102: break;
  9335  002A9A  D04D               	goto	l6912
  9336  002A9C                     l6904:
  9337                           
  9338                           ;RTC.c: 104: strcpy(month, "NOV");
  9339  002A9C  0EBE               	movlw	low printRTC@month
  9340  002A9E  0100               	movlb	0	; () banked
  9341  002AA0  6F80               	movwf	strcpy@to& (0+255),b
  9342  002AA2  0E00               	movlw	high printRTC@month
  9343  002AA4  0100               	movlb	0	; () banked
  9344  002AA6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9345  002AA8  0EF6               	movlw	low STR_18
  9346  002AAA  0100               	movlb	0	; () banked
  9347  002AAC  6F82               	movwf	strcpy@from& (0+255),b
  9348  002AAE  0EFF               	movlw	high STR_18
  9349  002AB0  0100               	movlb	0	; () banked
  9350  002AB2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9351  002AB4  ECB9  F028         	call	_strcpy	;wreg free
  9352                           
  9353                           ;RTC.c: 105: break;
  9354  002AB8  D03E               	goto	l6912
  9355  002ABA                     l6906:
  9356                           
  9357                           ;RTC.c: 107: strcpy(month, "DEC");
  9358  002ABA  0EBE               	movlw	low printRTC@month
  9359  002ABC  0100               	movlb	0	; () banked
  9360  002ABE  6F80               	movwf	strcpy@to& (0+255),b
  9361  002AC0  0E00               	movlw	high printRTC@month
  9362  002AC2  0100               	movlb	0	; () banked
  9363  002AC4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9364  002AC6  0ECE               	movlw	low STR_19
  9365  002AC8  0100               	movlb	0	; () banked
  9366  002ACA  6F82               	movwf	strcpy@from& (0+255),b
  9367  002ACC  0EFF               	movlw	high STR_19
  9368  002ACE  0100               	movlb	0	; () banked
  9369  002AD0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9370  002AD2  ECB9  F028         	call	_strcpy	;wreg free
  9371                           
  9372                           ;RTC.c: 109: }
  9373                           
  9374                           ;RTC.c: 108: break;
  9375  002AD6  D02F               	goto	l6912
  9376  002AD8                     l6910:
  9377  002AD8  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9378  002ADC  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9379                           
  9380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9381                           ; Switch size 1, requested type "space"
  9382                           ; Number of cases is 1, Range of values is 0 to 0
  9383                           ; switch strategies available:
  9384                           ; Name         Instructions Cycles
  9385                           ; simple_byte            4     3 (average)
  9386                           ;	Chosen strategy is simple_byte
  9387  002AE0  0100               	movlb	0	; () banked
  9388  002AE2  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9389  002AE4  0A00               	xorlw	0	; case 0
  9390  002AE6  A4D8               	btfss	status,2,c
  9391  002AE8  D026               	goto	l6912
  9392                           
  9393                           ; BSR set to: 0
  9394                           ; Switch size 1, requested type "space"
  9395                           ; Number of cases is 12, Range of values is 1 to 12
  9396                           ; switch strategies available:
  9397                           ; Name         Instructions Cycles
  9398                           ; simple_byte           37    19 (average)
  9399                           ;	Chosen strategy is simple_byte
  9400  002AEA  0100               	movlb	0	; () banked
  9401  002AEC  51AB               	movf	??_printRTC& (0+255),w,b
  9402  002AEE  0A01               	xorlw	1	; case 1
  9403  002AF0  B4D8               	btfsc	status,2,c
  9404  002AF2  D73E               	goto	l6884
  9405  002AF4  0A03               	xorlw	3	; case 2
  9406  002AF6  B4D8               	btfsc	status,2,c
  9407  002AF8  D74A               	goto	l6886
  9408  002AFA  0A01               	xorlw	1	; case 3
  9409  002AFC  B4D8               	btfsc	status,2,c
  9410  002AFE  D756               	goto	l6888
  9411  002B00  0A07               	xorlw	7	; case 4
  9412  002B02  B4D8               	btfsc	status,2,c
  9413  002B04  D762               	goto	l6890
  9414  002B06  0A01               	xorlw	1	; case 5
  9415  002B08  B4D8               	btfsc	status,2,c
  9416  002B0A  D76E               	goto	l6892
  9417  002B0C  0A03               	xorlw	3	; case 6
  9418  002B0E  B4D8               	btfsc	status,2,c
  9419  002B10  D77A               	goto	l6894
  9420  002B12  0A01               	xorlw	1	; case 7
  9421  002B14  B4D8               	btfsc	status,2,c
  9422  002B16  D786               	goto	l6896
  9423  002B18  0A0F               	xorlw	15	; case 8
  9424  002B1A  B4D8               	btfsc	status,2,c
  9425  002B1C  D792               	goto	l6898
  9426  002B1E  0A01               	xorlw	1	; case 9
  9427  002B20  B4D8               	btfsc	status,2,c
  9428  002B22  D79E               	goto	l6900
  9429  002B24  0A03               	xorlw	3	; case 10
  9430  002B26  B4D8               	btfsc	status,2,c
  9431  002B28  D7AA               	goto	l6902
  9432  002B2A  0A01               	xorlw	1	; case 11
  9433  002B2C  B4D8               	btfsc	status,2,c
  9434  002B2E  D7B6               	goto	l6904
  9435  002B30  0A07               	xorlw	7	; case 12
  9436  002B32  B4D8               	btfsc	status,2,c
  9437  002B34  D7C2               	goto	l6906
  9438  002B36                     l6912:
  9439                           
  9440                           ;RTC.c: 110: lcdInst(0b10000000);;
  9441  002B36  0E80               	movlw	128
  9442  002B38  EC5F  F02B         	call	_lcdInst
  9443                           
  9444                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9445  002B3C  0EBE               	movlw	low STR_21
  9446  002B3E  0100               	movlb	0	; () banked
  9447  002B40  6F8E               	movwf	printf@f& (0+255),b
  9448  002B42  0EFA               	movlw	high STR_21
  9449  002B44  0100               	movlb	0	; () banked
  9450  002B46  6F8F               	movwf	(printf@f+1)& (0+255),b
  9451  002B48  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9452  002B4C  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9453  002B50  0EBE               	movlw	low printRTC@month
  9454  002B52  0100               	movlb	0	; () banked
  9455  002B54  6F92               	movwf	(?_printf+4)& (0+255),b
  9456  002B56  0E00               	movlw	high printRTC@month
  9457  002B58  0100               	movlb	0	; () banked
  9458  002B5A  6F93               	movwf	(?_printf+5)& (0+255),b
  9459  002B5C  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9460  002B60  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9461  002B64  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9462  002B68  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9463  002B6C  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9464  002B70  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9465  002B74  EC84  F00B         	call	_printf	;wreg free
  9466  002B78  0012               	return		;funcret
  9467  002B7A                     __end_of_printRTC:
  9468                           	opt stack 0
  9469                           tblptru	equ	0xFF8
  9470                           tblptrh	equ	0xFF7
  9471                           tblptrl	equ	0xFF6
  9472                           tablat	equ	0xFF5
  9473                           prodh	equ	0xFF4
  9474                           prodl	equ	0xFF3
  9475                           intcon	equ	0xFF2
  9476                           intcon2	equ	0xFF1
  9477                           intcon3	equ	0xFF0
  9478                           postinc0	equ	0xFEE
  9479                           wreg	equ	0xFE8
  9480                           postdec1	equ	0xFE5
  9481                           fsr1l	equ	0xFE1
  9482                           indf2	equ	0xFDF
  9483                           postinc2	equ	0xFDE
  9484                           postdec2	equ	0xFDD
  9485                           fsr2h	equ	0xFDA
  9486                           fsr2l	equ	0xFD9
  9487                           status	equ	0xFD8
  9488                           
  9489 ;; *************** function _strcpy *****************
  9490 ;; Defined at:
  9491 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9492 ;; Parameters:    Size  Location     Type
  9493 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9494 ;;		 -> printRTC@month(4), UI@month(4), 
  9495 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9496 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9497 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9498 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9499 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9500 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9501 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9502 ;;		 -> STR_8(4), 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9505 ;;		 -> printRTC@month(4), UI@month(4), 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  2    0[BANK0 ] PTR unsigned char 
  9508 ;; Registers used:
  9509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;Total ram usage:        6 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    7
  9522 ;; This function calls:
  9523 ;;		Nothing
  9524 ;; This function is called by:
  9525 ;;		_UI
  9526 ;;		_printRTC
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text24
  9531  005172                     __ptext24:
  9532                           	opt stack 0
  9533  005172                     _strcpy:
  9534                           	opt stack 20
  9535                           
  9536                           ;incstack = 0
  9537  005172  C080  F084         	movff	strcpy@to,strcpy@cp
  9538  005176  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9539  00517A  D006               	goto	l6618
  9540  00517C                     l6616:
  9541  00517C  0100               	movlb	0	; () banked
  9542  00517E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9543  005180  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9544  005182  0100               	movlb	0	; () banked
  9545  005184  4B82               	infsnz	strcpy@from& (0+255),f,b
  9546  005186  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9547  005188                     l6618:
  9548  005188  C082  FFF6         	movff	strcpy@from,tblptrl
  9549  00518C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9550  005190                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9551  005190  6AF8               	clrf	tblptru,c
  9552  005192                     	endif
  9553  005192                     	if	0	;tblptru may be non-zero
  9554  005192                     	endif
  9555  005192  C084  FFD9         	movff	strcpy@cp,fsr2l
  9556  005196  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9557  00519A  0008               	tblrd		*
  9558  00519C  CFF5 FFDF          	movff	tablat,indf2
  9559  0051A0  50DF               	movf	indf2,w,c
  9560  0051A2  B4D8               	btfsc	status,2,c
  9561  0051A4  0012               	return	
  9562  0051A6  D7EA               	goto	l6616
  9563  0051A8                     __end_of_strcpy:
  9564                           	opt stack 0
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           prodh	equ	0xFF4
  9570                           prodl	equ	0xFF3
  9571                           intcon	equ	0xFF2
  9572                           intcon2	equ	0xFF1
  9573                           intcon3	equ	0xFF0
  9574                           postinc0	equ	0xFEE
  9575                           wreg	equ	0xFE8
  9576                           postdec1	equ	0xFE5
  9577                           fsr1l	equ	0xFE1
  9578                           indf2	equ	0xFDF
  9579                           postinc2	equ	0xFDE
  9580                           postdec2	equ	0xFDD
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function _getRTC *****************
  9586 ;; Defined at:
  9587 ;;		line 44 in file "RTC.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  i               2    3[BANK0 ] int 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      void 
  9594 ;; Registers used:
  9595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;Total ram usage:        2 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    9
  9608 ;; This function calls:
  9609 ;;		_I2C_Master_Read
  9610 ;;		_I2C_Master_Start
  9611 ;;		_I2C_Master_Stop
  9612 ;;		_I2C_Master_Write
  9613 ;; This function is called by:
  9614 ;;		_printRTC
  9615 ;;		_initSortTimer
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text25
  9620  004890                     __ptext25:
  9621                           	opt stack 0
  9622  004890                     _getRTC:
  9623                           	opt stack 18
  9624                           
  9625                           ;RTC.c: 48: I2C_Master_Start();
  9626                           
  9627                           ;incstack = 0
  9628  004890  EC85  F02B         	call	_I2C_Master_Start	;wreg free
  9629                           
  9630                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9631  004894  0E00               	movlw	0
  9632  004896  0100               	movlb	0	; () banked
  9633  004898  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9634  00489A  0ED0               	movlw	208
  9635  00489C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9636  00489E  EC73  F02B         	call	_I2C_Master_Write	;wreg free
  9637                           
  9638                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9639  0048A2  0E00               	movlw	0
  9640  0048A4  0100               	movlb	0	; () banked
  9641  0048A6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9642  0048A8  0E00               	movlw	0
  9643  0048AA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9644  0048AC  EC73  F02B         	call	_I2C_Master_Write	;wreg free
  9645                           
  9646                           ;RTC.c: 51: I2C_Master_Stop();
  9647  0048B0  EC81  F02B         	call	_I2C_Master_Stop	;wreg free
  9648                           
  9649                           ;RTC.c: 54: I2C_Master_Start();
  9650  0048B4  EC85  F02B         	call	_I2C_Master_Start	;wreg free
  9651                           
  9652                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9653  0048B8  0E00               	movlw	0
  9654  0048BA  0100               	movlb	0	; () banked
  9655  0048BC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9656  0048BE  0ED1               	movlw	209
  9657  0048C0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9658  0048C2  EC73  F02B         	call	_I2C_Master_Write	;wreg free
  9659                           
  9660                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9661  0048C6  0E00               	movlw	0
  9662  0048C8  0100               	movlb	0	; () banked
  9663  0048CA  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9664  0048CC  0E00               	movlw	0
  9665  0048CE  6F83               	movwf	getRTC@i& (0+255),b
  9666  0048D0                     l6624:
  9667                           
  9668                           ; BSR set to: 0
  9669  0048D0  0100               	movlb	0	; () banked
  9670  0048D2  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9671  0048D4  D008               	goto	l6628
  9672  0048D6  0100               	movlb	0	; () banked
  9673  0048D8  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9674  0048DA  E115               	bnz	l6634
  9675  0048DC  0E06               	movlw	6
  9676  0048DE  0100               	movlb	0	; () banked
  9677  0048E0  5D83               	subwf	getRTC@i& (0+255),w,b
  9678  0048E2  B0D8               	btfsc	status,0,c
  9679  0048E4  D010               	goto	l6634
  9680  0048E6                     l6628:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9684  0048E6  0E1C               	movlw	low _time
  9685  0048E8  0100               	movlb	0	; () banked
  9686  0048EA  2583               	addwf	getRTC@i& (0+255),w,b
  9687  0048EC  6ED9               	movwf	fsr2l,c
  9688  0048EE  0E01               	movlw	high _time
  9689  0048F0  0100               	movlb	0	; () banked
  9690  0048F2  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9691  0048F4  6EDA               	movwf	fsr2h,c
  9692  0048F6  0E01               	movlw	1
  9693  0048F8  EC11  F02A         	call	_I2C_Master_Read
  9694  0048FC  6EDF               	movwf	indf2,c
  9695  0048FE  0100               	movlb	0	; () banked
  9696  004900  4B83               	infsnz	getRTC@i& (0+255),f,b
  9697  004902  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9698  004904  D7E5               	goto	l6624
  9699  004906                     l6634:
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;RTC.c: 58: }
  9703                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9704  004906  0E00               	movlw	0
  9705  004908  EC11  F02A         	call	_I2C_Master_Read
  9706  00490C  0101               	movlb	1	; () banked
  9707  00490E  6F22               	movwf	(_time+6)& (0+255),b
  9708                           
  9709                           ;RTC.c: 60: I2C_Master_Stop();
  9710  004910  EC81  F02B         	call	_I2C_Master_Stop	;wreg free
  9711  004914  0012               	return		;funcret
  9712  004916                     __end_of_getRTC:
  9713                           	opt stack 0
  9714                           tblptru	equ	0xFF8
  9715                           tblptrh	equ	0xFF7
  9716                           tblptrl	equ	0xFF6
  9717                           tablat	equ	0xFF5
  9718                           prodh	equ	0xFF4
  9719                           prodl	equ	0xFF3
  9720                           intcon	equ	0xFF2
  9721                           intcon2	equ	0xFF1
  9722                           intcon3	equ	0xFF0
  9723                           postinc0	equ	0xFEE
  9724                           wreg	equ	0xFE8
  9725                           postdec1	equ	0xFE5
  9726                           fsr1l	equ	0xFE1
  9727                           indf2	equ	0xFDF
  9728                           postinc2	equ	0xFDE
  9729                           postdec2	equ	0xFDD
  9730                           fsr2h	equ	0xFDA
  9731                           fsr2l	equ	0xFD9
  9732                           status	equ	0xFD8
  9733                           
  9734 ;; *************** function _I2C_Master_Write *****************
  9735 ;; Defined at:
  9736 ;;		line 49 in file "I2C.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;  d               2    1[BANK0 ] unsigned int 
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  1    wreg      void 
  9743 ;; Registers used:
  9744 ;;		wreg, status,2, status,0, cstack
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9750 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9753 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9754 ;;Total ram usage:        2 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    8
  9757 ;; This function calls:
  9758 ;;		_I2C_Master_Wait
  9759 ;; This function is called by:
  9760 ;;		_loadRTC
  9761 ;;		_getRTC
  9762 ;; This function uses a non-reentrant model
  9763 ;;
  9764                           
  9765                           	psect	text26
  9766  0056E6                     __ptext26:
  9767                           	opt stack 0
  9768  0056E6                     _I2C_Master_Write:
  9769                           	opt stack 18
  9770                           
  9771                           ;I2C.c: 51: I2C_Master_Wait();
  9772                           
  9773                           ;incstack = 0
  9774  0056E6  EC44  F02B         	call	_I2C_Master_Wait	;wreg free
  9775                           
  9776                           ;I2C.c: 52: SSPBUF = d;
  9777  0056EA  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9778  0056EE  0012               	return		;funcret
  9779  0056F0                     __end_of_I2C_Master_Write:
  9780                           	opt stack 0
  9781                           tblptru	equ	0xFF8
  9782                           tblptrh	equ	0xFF7
  9783                           tblptrl	equ	0xFF6
  9784                           tablat	equ	0xFF5
  9785                           prodh	equ	0xFF4
  9786                           prodl	equ	0xFF3
  9787                           intcon	equ	0xFF2
  9788                           intcon2	equ	0xFF1
  9789                           intcon3	equ	0xFF0
  9790                           postinc0	equ	0xFEE
  9791                           wreg	equ	0xFE8
  9792                           postdec1	equ	0xFE5
  9793                           fsr1l	equ	0xFE1
  9794                           indf2	equ	0xFDF
  9795                           postinc2	equ	0xFDE
  9796                           postdec2	equ	0xFDD
  9797                           fsr2h	equ	0xFDA
  9798                           fsr2l	equ	0xFD9
  9799                           status	equ	0xFD8
  9800                           
  9801 ;; *************** function _I2C_Master_Stop *****************
  9802 ;; Defined at:
  9803 ;;		line 43 in file "I2C.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;		None
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;		None
  9808 ;; Return value:  Size  Location     Type
  9809 ;;                  1    wreg      void 
  9810 ;; Registers used:
  9811 ;;		wreg, status,2, status,0, cstack
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;Total ram usage:        0 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    8
  9824 ;; This function calls:
  9825 ;;		_I2C_Master_Wait
  9826 ;; This function is called by:
  9827 ;;		_loadRTC
  9828 ;;		_getRTC
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           	psect	text27
  9833  005702                     __ptext27:
  9834                           	opt stack 0
  9835  005702                     _I2C_Master_Stop:
  9836                           	opt stack 18
  9837                           
  9838                           ;I2C.c: 45: I2C_Master_Wait();
  9839                           
  9840                           ;incstack = 0
  9841  005702  EC44  F02B         	call	_I2C_Master_Wait	;wreg free
  9842                           
  9843                           ;I2C.c: 46: PEN = 1;
  9844  005706  84C5               	bsf	4037,2,c	;volatile
  9845  005708  0012               	return		;funcret
  9846  00570A                     __end_of_I2C_Master_Stop:
  9847                           	opt stack 0
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           intcon	equ	0xFF2
  9855                           intcon2	equ	0xFF1
  9856                           intcon3	equ	0xFF0
  9857                           postinc0	equ	0xFEE
  9858                           wreg	equ	0xFE8
  9859                           postdec1	equ	0xFE5
  9860                           fsr1l	equ	0xFE1
  9861                           indf2	equ	0xFDF
  9862                           postinc2	equ	0xFDE
  9863                           postdec2	equ	0xFDD
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function _I2C_Master_Start *****************
  9869 ;; Defined at:
  9870 ;;		line 31 in file "I2C.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      void 
  9877 ;; Registers used:
  9878 ;;		wreg, status,2, status,0, cstack
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;Total ram usage:        0 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    8
  9891 ;; This function calls:
  9892 ;;		_I2C_Master_Wait
  9893 ;; This function is called by:
  9894 ;;		_loadRTC
  9895 ;;		_getRTC
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text28
  9900  00570A                     __ptext28:
  9901                           	opt stack 0
  9902  00570A                     _I2C_Master_Start:
  9903                           	opt stack 18
  9904                           
  9905                           ;I2C.c: 33: I2C_Master_Wait();
  9906                           
  9907                           ;incstack = 0
  9908  00570A  EC44  F02B         	call	_I2C_Master_Wait	;wreg free
  9909                           
  9910                           ;I2C.c: 34: SEN = 1;
  9911  00570E  80C5               	bsf	4037,0,c	;volatile
  9912  005710  0012               	return		;funcret
  9913  005712                     __end_of_I2C_Master_Start:
  9914                           	opt stack 0
  9915                           tblptru	equ	0xFF8
  9916                           tblptrh	equ	0xFF7
  9917                           tblptrl	equ	0xFF6
  9918                           tablat	equ	0xFF5
  9919                           prodh	equ	0xFF4
  9920                           prodl	equ	0xFF3
  9921                           intcon	equ	0xFF2
  9922                           intcon2	equ	0xFF1
  9923                           intcon3	equ	0xFF0
  9924                           postinc0	equ	0xFEE
  9925                           wreg	equ	0xFE8
  9926                           postdec1	equ	0xFE5
  9927                           fsr1l	equ	0xFE1
  9928                           indf2	equ	0xFDF
  9929                           postinc2	equ	0xFDE
  9930                           postdec2	equ	0xFDD
  9931                           fsr2h	equ	0xFDA
  9932                           fsr2l	equ	0xFD9
  9933                           status	equ	0xFD8
  9934                           
  9935 ;; *************** function _I2C_Master_Read *****************
  9936 ;; Defined at:
  9937 ;;		line 55 in file "I2C.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  a               1    wreg     unsigned char 
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;  a               1    1[BANK0 ] unsigned char 
  9942 ;;  temp            1    2[BANK0 ] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  1    wreg      unsigned char 
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;Total ram usage:        2 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    8
  9959 ;; This function calls:
  9960 ;;		_I2C_Master_Wait
  9961 ;; This function is called by:
  9962 ;;		_getRTC
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           	psect	text29
  9967  005422                     __ptext29:
  9968                           	opt stack 0
  9969  005422                     _I2C_Master_Read:
  9970                           	opt stack 18
  9971                           
  9972                           ;incstack = 0
  9973                           ;I2C_Master_Read@a stored from wreg
  9974  005422  0100               	movlb	0	; () banked
  9975  005424  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9976                           
  9977                           ;I2C.c: 57: unsigned char temp;
  9978                           ;I2C.c: 58: I2C_Master_Wait();
  9979  005426  EC44  F02B         	call	_I2C_Master_Wait	;wreg free
  9980                           
  9981                           ;I2C.c: 59: RCEN = 1;
  9982  00542A  86C5               	bsf	4037,3,c	;volatile
  9983                           
  9984                           ;I2C.c: 60: I2C_Master_Wait();
  9985  00542C  EC44  F02B         	call	_I2C_Master_Wait	;wreg free
  9986                           
  9987                           ;I2C.c: 61: temp = SSPBUF;
  9988  005430  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9989                           
  9990                           ;I2C.c: 62: I2C_Master_Wait();
  9991  005434  EC44  F02B         	call	_I2C_Master_Wait	;wreg free
  9992                           
  9993                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9994  005438  0100               	movlb	0	; () banked
  9995  00543A  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9996  00543C  0100               	movlb	0	; () banked
  9997  00543E  A4D8               	btfss	status,2,c
  9998  005440  D002               	goto	u4610
  9999  005442  8AC5               	bsf	4037,5,c	;volatile
 10000  005444  D001               	goto	l6312
 10001  005446                     u4610:
 10002  005446  9AC5               	bcf	4037,5,c	;volatile
 10003  005448                     l6312:
 10004                           
 10005                           ;I2C.c: 64: ACKEN = 1;
 10006  005448  88C5               	bsf	4037,4,c	;volatile
 10007                           
 10008                           ;I2C.c: 65: return temp;
 10009  00544A  0100               	movlb	0	; () banked
 10010  00544C  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 10011  00544E  0012               	return	
 10012  005450                     __end_of_I2C_Master_Read:
 10013                           	opt stack 0
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           intcon	equ	0xFF2
 10021                           intcon2	equ	0xFF1
 10022                           intcon3	equ	0xFF0
 10023                           postinc0	equ	0xFEE
 10024                           wreg	equ	0xFE8
 10025                           postdec1	equ	0xFE5
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           postdec2	equ	0xFDD
 10030                           fsr2h	equ	0xFDA
 10031                           fsr2l	equ	0xFD9
 10032                           status	equ	0xFD8
 10033                           
 10034 ;; *************** function _I2C_Master_Wait *****************
 10035 ;; Defined at:
 10036 ;;		line 26 in file "I2C.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;		None
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  1    wreg      void 
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;Total ram usage:        1 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    7
 10057 ;; This function calls:
 10058 ;;		Nothing
 10059 ;; This function is called by:
 10060 ;;		_I2C_Master_Start
 10061 ;;		_I2C_Master_Stop
 10062 ;;		_I2C_Master_Write
 10063 ;;		_I2C_Master_Read
 10064 ;;		_I2C_Master_RepeatedStart
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           	psect	text30
 10069  005688                     __ptext30:
 10070                           	opt stack 0
 10071  005688                     _I2C_Master_Wait:
 10072                           	opt stack 18
 10073  005688                     l66:
 10074  005688  B4C7               	btfsc	4039,2,c	;volatile
 10075  00568A  D7FE               	goto	l66
 10076  00568C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 10077  005690  0E1F               	movlw	31
 10078  005692  0100               	movlb	0	; () banked
 10079  005694  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 10080  005696  B4D8               	btfsc	status,2,c
 10081  005698  0012               	return	
 10082  00569A  D7F6               	goto	l66
 10083  00569C                     __end_of_I2C_Master_Wait:
 10084                           	opt stack 0
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           intcon2	equ	0xFF1
 10093                           intcon3	equ	0xFF0
 10094                           postinc0	equ	0xFEE
 10095                           wreg	equ	0xFE8
 10096                           postdec1	equ	0xFE5
 10097                           fsr1l	equ	0xFE1
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           postdec2	equ	0xFDD
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function _change_state_to_menu_22 *****************
 10106 ;; Defined at:
 10107 ;;		line 501 in file "UI.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;		None
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;		None
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;Total ram usage:        0 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:   10
 10128 ;; This function calls:
 10129 ;;		_lcdInst
 10130 ;;		_printf
 10131 ;; This function is called by:
 10132 ;;		_UI
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           	psect	text31
 10137  005102                     __ptext31:
 10138                           	opt stack 0
 10139  005102                     _change_state_to_menu_22:
 10140                           	opt stack 19
 10141                           
 10142                           ;UI.c: 502: cur_state = 22;
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;incstack = 0
 10146  005102  0E00               	movlw	0
 10147  005104  0100               	movlb	0	; () banked
 10148  005106  6FED               	movwf	(_cur_state+1)& (0+255),b
 10149  005108  0E16               	movlw	22
 10150  00510A  6FEC               	movwf	_cur_state& (0+255),b
 10151                           
 10152                           ; BSR set to: 0
 10153                           ;UI.c: 504: lcdInst(0b10000000);;
 10154  00510C  0E80               	movlw	128
 10155  00510E  EC5F  F02B         	call	_lcdInst
 10156                           
 10157                           ;UI.c: 505: printf("2. SORT        <");
 10158  005112  0ECE               	movlw	low STR_34
 10159  005114  0100               	movlb	0	; () banked
 10160  005116  6F8E               	movwf	printf@f& (0+255),b
 10161  005118  0EFD               	movlw	high STR_34
 10162  00511A  0100               	movlb	0	; () banked
 10163  00511C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10164  00511E  EC84  F00B         	call	_printf	;wreg free
 10165                           
 10166                           ;UI.c: 506: lcdInst(0b11000000);;
 10167  005122  0EC0               	movlw	192
 10168  005124  EC5F  F02B         	call	_lcdInst
 10169                           
 10170                           ;UI.c: 507: printf("3. LOGS         ");
 10171  005128  0E13               	movlw	low STR_36
 10172  00512A  0100               	movlb	0	; () banked
 10173  00512C  6F8E               	movwf	printf@f& (0+255),b
 10174  00512E  0EFD               	movlw	high STR_36
 10175  005130  0100               	movlb	0	; () banked
 10176  005132  6F8F               	movwf	(printf@f+1)& (0+255),b
 10177  005134  EC84  F00B         	call	_printf	;wreg free
 10178  005138  0012               	return		;funcret
 10179  00513A                     __end_of_change_state_to_menu_22:
 10180                           	opt stack 0
 10181                           tblptru	equ	0xFF8
 10182                           tblptrh	equ	0xFF7
 10183                           tblptrl	equ	0xFF6
 10184                           tablat	equ	0xFF5
 10185                           prodh	equ	0xFF4
 10186                           prodl	equ	0xFF3
 10187                           intcon	equ	0xFF2
 10188                           intcon2	equ	0xFF1
 10189                           intcon3	equ	0xFF0
 10190                           postinc0	equ	0xFEE
 10191                           wreg	equ	0xFE8
 10192                           postdec1	equ	0xFE5
 10193                           fsr1l	equ	0xFE1
 10194                           indf2	equ	0xFDF
 10195                           postinc2	equ	0xFDE
 10196                           postdec2	equ	0xFDD
 10197                           fsr2h	equ	0xFDA
 10198                           fsr2l	equ	0xFD9
 10199                           status	equ	0xFD8
 10200                           
 10201 ;; *************** function _change_state_to_menu_12 *****************
 10202 ;; Defined at:
 10203 ;;		line 493 in file "UI.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;		None
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  1    wreg      void 
 10210 ;; Registers used:
 10211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10221 ;;Total ram usage:        0 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:   10
 10224 ;; This function calls:
 10225 ;;		_lcdInst
 10226 ;;		_printf
 10227 ;; This function is called by:
 10228 ;;		_UI
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text32
 10233  00513A                     __ptext32:
 10234                           	opt stack 0
 10235  00513A                     _change_state_to_menu_12:
 10236                           	opt stack 19
 10237                           
 10238                           ;UI.c: 494: cur_state = 12;
 10239                           
 10240                           ;incstack = 0
 10241  00513A  0E00               	movlw	0
 10242  00513C  0100               	movlb	0	; () banked
 10243  00513E  6FED               	movwf	(_cur_state+1)& (0+255),b
 10244  005140  0E0C               	movlw	12
 10245  005142  6FEC               	movwf	_cur_state& (0+255),b
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;UI.c: 496: lcdInst(0b10000000);;
 10249  005144  0E80               	movlw	128
 10250  005146  EC5F  F02B         	call	_lcdInst
 10251                           
 10252                           ;UI.c: 497: printf("1. DATE/TIME    ");
 10253  00514A  0E35               	movlw	low STR_33
 10254  00514C  0100               	movlb	0	; () banked
 10255  00514E  6F8E               	movwf	printf@f& (0+255),b
 10256  005150  0EFD               	movlw	high STR_33
 10257  005152  0100               	movlb	0	; () banked
 10258  005154  6F8F               	movwf	(printf@f+1)& (0+255),b
 10259  005156  EC84  F00B         	call	_printf	;wreg free
 10260                           
 10261                           ;UI.c: 498: lcdInst(0b11000000);;
 10262  00515A  0EC0               	movlw	192
 10263  00515C  EC5F  F02B         	call	_lcdInst
 10264                           
 10265                           ;UI.c: 499: printf("2. SORT        <");
 10266  005160  0ECE               	movlw	low STR_34
 10267  005162  0100               	movlb	0	; () banked
 10268  005164  6F8E               	movwf	printf@f& (0+255),b
 10269  005166  0EFD               	movlw	high STR_34
 10270  005168  0100               	movlb	0	; () banked
 10271  00516A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10272  00516C  EC84  F00B         	call	_printf	;wreg free
 10273  005170  0012               	return		;funcret
 10274  005172                     __end_of_change_state_to_menu_12:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           intcon2	equ	0xFF1
 10284                           intcon3	equ	0xFF0
 10285                           postinc0	equ	0xFEE
 10286                           wreg	equ	0xFE8
 10287                           postdec1	equ	0xFE5
 10288                           fsr1l	equ	0xFE1
 10289                           indf2	equ	0xFDF
 10290                           postinc2	equ	0xFDE
 10291                           postdec2	equ	0xFDD
 10292                           fsr2h	equ	0xFDA
 10293                           fsr2l	equ	0xFD9
 10294                           status	equ	0xFD8
 10295                           
 10296 ;; *************** function ___awmod *****************
 10297 ;; Defined at:
 10298 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;  dividend        2    0[BANK0 ] int 
 10301 ;;  divisor         2    2[BANK0 ] int 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  sign            1    5[BANK0 ] unsigned char 
 10304 ;;  counter         1    4[BANK0 ] unsigned char 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  2    0[BANK0 ] int 
 10307 ;; Registers used:
 10308 ;;		wreg, status,2, status,0
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10314 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10318 ;;Total ram usage:        6 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    7
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_UI
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           	psect	text33
 10329  004762                     __ptext33:
 10330                           	opt stack 0
 10331  004762                     ___awmod:
 10332                           	opt stack 22
 10333                           
 10334                           ;incstack = 0
 10335  004762  0E00               	movlw	0
 10336  004764  0100               	movlb	0	; () banked
 10337  004766  6F85               	movwf	___awmod@sign& (0+255),b
 10338                           
 10339                           ; BSR set to: 0
 10340  004768  0100               	movlb	0	; () banked
 10341  00476A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10342  00476C  D008               	goto	l8794
 10343                           
 10344                           ; BSR set to: 0
 10345  00476E  0100               	movlb	0	; () banked
 10346  004770  6D80               	negf	___awmod@dividend& (0+255),b
 10347  004772  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10348  004774  B0D8               	btfsc	status,0,c
 10349  004776  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10350                           
 10351                           ; BSR set to: 0
 10352  004778  0E01               	movlw	1
 10353  00477A  0100               	movlb	0	; () banked
 10354  00477C  6F85               	movwf	___awmod@sign& (0+255),b
 10355  00477E                     l8794:
 10356                           
 10357                           ; BSR set to: 0
 10358  00477E  0100               	movlb	0	; () banked
 10359  004780  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10360  004782  D005               	goto	l8798
 10361                           
 10362                           ; BSR set to: 0
 10363  004784  0100               	movlb	0	; () banked
 10364  004786  6D82               	negf	___awmod@divisor& (0+255),b
 10365  004788  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10366  00478A  B0D8               	btfsc	status,0,c
 10367  00478C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10368  00478E                     l8798:
 10369                           
 10370                           ; BSR set to: 0
 10371  00478E  0100               	movlb	0	; () banked
 10372  004790  5182               	movf	___awmod@divisor& (0+255),w,b
 10373  004792  0100               	movlb	0	; () banked
 10374  004794  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10375  004796  B4D8               	btfsc	status,2,c
 10376  004798  D026               	goto	l8814
 10377                           
 10378                           ; BSR set to: 0
 10379  00479A  0E01               	movlw	1
 10380  00479C  0100               	movlb	0	; () banked
 10381  00479E  6F84               	movwf	___awmod@counter& (0+255),b
 10382  0047A0  D006               	goto	l8804
 10383  0047A2                     l8802:
 10384                           
 10385                           ; BSR set to: 0
 10386  0047A2  0100               	movlb	0	; () banked
 10387  0047A4  90D8               	bcf	status,0,c
 10388  0047A6  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10389  0047A8  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10390  0047AA  0100               	movlb	0	; () banked
 10391  0047AC  2B84               	incf	___awmod@counter& (0+255),f,b
 10392  0047AE                     l8804:
 10393                           
 10394                           ; BSR set to: 0
 10395  0047AE  0100               	movlb	0	; () banked
 10396  0047B0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10397  0047B2  D7F7               	goto	l8802
 10398  0047B4                     l8806:
 10399                           
 10400                           ; BSR set to: 0
 10401  0047B4  0100               	movlb	0	; () banked
 10402  0047B6  5182               	movf	___awmod@divisor& (0+255),w,b
 10403  0047B8  0100               	movlb	0	; () banked
 10404  0047BA  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10405  0047BC  0100               	movlb	0	; () banked
 10406  0047BE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10407  0047C0  0100               	movlb	0	; () banked
 10408  0047C2  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10409  0047C4  A0D8               	btfss	status,0,c
 10410  0047C6  D008               	goto	l8810
 10411                           
 10412                           ; BSR set to: 0
 10413  0047C8  0100               	movlb	0	; () banked
 10414  0047CA  5182               	movf	___awmod@divisor& (0+255),w,b
 10415  0047CC  0100               	movlb	0	; () banked
 10416  0047CE  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10417  0047D0  0100               	movlb	0	; () banked
 10418  0047D2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10419  0047D4  0100               	movlb	0	; () banked
 10420  0047D6  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10421  0047D8                     l8810:
 10422                           
 10423                           ; BSR set to: 0
 10424  0047D8  0100               	movlb	0	; () banked
 10425  0047DA  90D8               	bcf	status,0,c
 10426  0047DC  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10427  0047DE  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10428                           
 10429                           ; BSR set to: 0
 10430  0047E0  0100               	movlb	0	; () banked
 10431  0047E2  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10432  0047E4  D7E7               	goto	l8806
 10433  0047E6                     l8814:
 10434                           
 10435                           ; BSR set to: 0
 10436  0047E6  0100               	movlb	0	; () banked
 10437  0047E8  5185               	movf	___awmod@sign& (0+255),w,b
 10438  0047EA  0100               	movlb	0	; () banked
 10439  0047EC  B4D8               	btfsc	status,2,c
 10440  0047EE  D005               	goto	l8818
 10441                           
 10442                           ; BSR set to: 0
 10443  0047F0  0100               	movlb	0	; () banked
 10444  0047F2  6D80               	negf	___awmod@dividend& (0+255),b
 10445  0047F4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10446  0047F6  B0D8               	btfsc	status,0,c
 10447  0047F8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10448  0047FA                     l8818:
 10449                           
 10450                           ; BSR set to: 0
 10451  0047FA  C080  F080         	movff	___awmod@dividend,?___awmod
 10452  0047FE  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10453  004802  0012               	return	
 10454  004804                     __end_of___awmod:
 10455                           	opt stack 0
 10456                           tblptru	equ	0xFF8
 10457                           tblptrh	equ	0xFF7
 10458                           tblptrl	equ	0xFF6
 10459                           tablat	equ	0xFF5
 10460                           prodh	equ	0xFF4
 10461                           prodl	equ	0xFF3
 10462                           intcon	equ	0xFF2
 10463                           intcon2	equ	0xFF1
 10464                           intcon3	equ	0xFF0
 10465                           postinc0	equ	0xFEE
 10466                           wreg	equ	0xFE8
 10467                           postdec1	equ	0xFE5
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function ___awdiv *****************
 10477 ;; Defined at:
 10478 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  dividend        2    6[BANK0 ] int 
 10481 ;;  divisor         2    8[BANK0 ] int 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  quotient        2   12[BANK0 ] int 
 10484 ;;  sign            1   11[BANK0 ] unsigned char 
 10485 ;;  counter         1   10[BANK0 ] unsigned char 
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  2    6[BANK0 ] int 
 10488 ;; Registers used:
 10489 ;;		wreg, status,2, status,0
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        8 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    7
 10502 ;; This function calls:
 10503 ;;		Nothing
 10504 ;; This function is called by:
 10505 ;;		_UI
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text34
 10510  00453E                     __ptext34:
 10511                           	opt stack 0
 10512  00453E                     ___awdiv:
 10513                           	opt stack 22
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;incstack = 0
 10517  00453E  0E00               	movlw	0
 10518  004540  0100               	movlb	0	; () banked
 10519  004542  6F8B               	movwf	___awdiv@sign& (0+255),b
 10520                           
 10521                           ; BSR set to: 0
 10522  004544  0100               	movlb	0	; () banked
 10523  004546  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10524  004548  D008               	goto	l8750
 10525                           
 10526                           ; BSR set to: 0
 10527  00454A  0100               	movlb	0	; () banked
 10528  00454C  6D88               	negf	___awdiv@divisor& (0+255),b
 10529  00454E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10530  004550  B0D8               	btfsc	status,0,c
 10531  004552  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10532                           
 10533                           ; BSR set to: 0
 10534  004554  0E01               	movlw	1
 10535  004556  0100               	movlb	0	; () banked
 10536  004558  6F8B               	movwf	___awdiv@sign& (0+255),b
 10537  00455A                     l8750:
 10538                           
 10539                           ; BSR set to: 0
 10540  00455A  0100               	movlb	0	; () banked
 10541  00455C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10542  00455E  D008               	goto	l8756
 10543                           
 10544                           ; BSR set to: 0
 10545  004560  0100               	movlb	0	; () banked
 10546  004562  6D86               	negf	___awdiv@dividend& (0+255),b
 10547  004564  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10548  004566  B0D8               	btfsc	status,0,c
 10549  004568  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10550                           
 10551                           ; BSR set to: 0
 10552  00456A  0E01               	movlw	1
 10553  00456C  0100               	movlb	0	; () banked
 10554  00456E  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10555  004570                     l8756:
 10556                           
 10557                           ; BSR set to: 0
 10558  004570  0E00               	movlw	0
 10559  004572  0100               	movlb	0	; () banked
 10560  004574  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10561  004576  0E00               	movlw	0
 10562  004578  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10563                           
 10564                           ; BSR set to: 0
 10565  00457A  0100               	movlb	0	; () banked
 10566  00457C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10567  00457E  0100               	movlb	0	; () banked
 10568  004580  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10569  004582  B4D8               	btfsc	status,2,c
 10570  004584  D02C               	goto	l8778
 10571                           
 10572                           ; BSR set to: 0
 10573  004586  0E01               	movlw	1
 10574  004588  0100               	movlb	0	; () banked
 10575  00458A  6F8A               	movwf	___awdiv@counter& (0+255),b
 10576  00458C  D006               	goto	l8764
 10577  00458E                     l8762:
 10578                           
 10579                           ; BSR set to: 0
 10580  00458E  0100               	movlb	0	; () banked
 10581  004590  90D8               	bcf	status,0,c
 10582  004592  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10583  004594  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10584  004596  0100               	movlb	0	; () banked
 10585  004598  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10586  00459A                     l8764:
 10587                           
 10588                           ; BSR set to: 0
 10589  00459A  0100               	movlb	0	; () banked
 10590  00459C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10591  00459E  D7F7               	goto	l8762
 10592  0045A0                     l8766:
 10593                           
 10594                           ; BSR set to: 0
 10595  0045A0  0100               	movlb	0	; () banked
 10596  0045A2  90D8               	bcf	status,0,c
 10597  0045A4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10598  0045A6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10599                           
 10600                           ; BSR set to: 0
 10601  0045A8  0100               	movlb	0	; () banked
 10602  0045AA  5188               	movf	___awdiv@divisor& (0+255),w,b
 10603  0045AC  0100               	movlb	0	; () banked
 10604  0045AE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10605  0045B0  0100               	movlb	0	; () banked
 10606  0045B2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10607  0045B4  0100               	movlb	0	; () banked
 10608  0045B6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10609  0045B8  A0D8               	btfss	status,0,c
 10610  0045BA  D00A               	goto	l8774
 10611                           
 10612                           ; BSR set to: 0
 10613  0045BC  0100               	movlb	0	; () banked
 10614  0045BE  5188               	movf	___awdiv@divisor& (0+255),w,b
 10615  0045C0  0100               	movlb	0	; () banked
 10616  0045C2  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10617  0045C4  0100               	movlb	0	; () banked
 10618  0045C6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10619  0045C8  0100               	movlb	0	; () banked
 10620  0045CA  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10621                           
 10622                           ; BSR set to: 0
 10623  0045CC  0100               	movlb	0	; () banked
 10624  0045CE  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10625  0045D0                     l8774:
 10626                           
 10627                           ; BSR set to: 0
 10628  0045D0  0100               	movlb	0	; () banked
 10629  0045D2  90D8               	bcf	status,0,c
 10630  0045D4  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10631  0045D6  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10632                           
 10633                           ; BSR set to: 0
 10634  0045D8  0100               	movlb	0	; () banked
 10635  0045DA  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10636  0045DC  D7E1               	goto	l8766
 10637  0045DE                     l8778:
 10638                           
 10639                           ; BSR set to: 0
 10640  0045DE  0100               	movlb	0	; () banked
 10641  0045E0  518B               	movf	___awdiv@sign& (0+255),w,b
 10642  0045E2  0100               	movlb	0	; () banked
 10643  0045E4  B4D8               	btfsc	status,2,c
 10644  0045E6  D005               	goto	l8782
 10645                           
 10646                           ; BSR set to: 0
 10647  0045E8  0100               	movlb	0	; () banked
 10648  0045EA  6D8C               	negf	___awdiv@quotient& (0+255),b
 10649  0045EC  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10650  0045EE  B0D8               	btfsc	status,0,c
 10651  0045F0  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10652  0045F2                     l8782:
 10653                           
 10654                           ; BSR set to: 0
 10655  0045F2  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10656  0045F6  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10657  0045FA  0012               	return	
 10658  0045FC                     __end_of___awdiv:
 10659                           	opt stack 0
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           prodh	equ	0xFF4
 10665                           prodl	equ	0xFF3
 10666                           intcon	equ	0xFF2
 10667                           intcon2	equ	0xFF1
 10668                           intcon3	equ	0xFF0
 10669                           postinc0	equ	0xFEE
 10670                           wreg	equ	0xFE8
 10671                           postdec1	equ	0xFE5
 10672                           fsr1l	equ	0xFE1
 10673                           indf2	equ	0xFDF
 10674                           postinc2	equ	0xFDE
 10675                           postdec2	equ	0xFDD
 10676                           fsr2h	equ	0xFDA
 10677                           fsr2l	equ	0xFD9
 10678                           status	equ	0xFD8
 10679                           
 10680 ;; *************** function _Test *****************
 10681 ;; Defined at:
 10682 ;;		line 31 in file "Test.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;		None
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;		None
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;Total ram usage:        2 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:   11
 10703 ;; This function calls:
 10704 ;;		_BlockerTest
 10705 ;;		_BothServos
 10706 ;;		_PlatformTest
 10707 ;;		_PortTestDC
 10708 ;;		_PortTestPusher
 10709 ;;		_SpeedTest
 10710 ;;		_actuatorTest
 10711 ;;		_algorithmTest
 10712 ;;		_arm
 10713 ;;		_lcdInst
 10714 ;;		_printf
 10715 ;;		_sensorTest
 10716 ;; This function is called by:
 10717 ;;		_main
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           	psect	text35
 10722  003F18                     __ptext35:
 10723                           	opt stack 0
 10724  003F18                     _Test:
 10725                           	opt stack 19
 10726                           
 10727                           ;Test.c: 33: while(machine_state == Testing_state){
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;incstack = 0
 10731  003F18  D07C               	goto	l9542
 10732  003F1A                     l9502:
 10733                           
 10734                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10735  003F1A  0E01               	movlw	1
 10736  003F1C  EC5F  F02B         	call	_lcdInst
 10737  003F20  0E68               	movlw	104
 10738  003F22  0100               	movlb	0	; () banked
 10739  003F24  6FC6               	movwf	??_Test& (0+255),b
 10740  003F26  0EE4               	movlw	228
 10741  003F28                     u9787:
 10742  003F28  2EE8               	decfsz	wreg,f,c
 10743  003F2A  D7FE               	bra	u9787
 10744  003F2C  2FC6               	decfsz	??_Test& (0+255),f,b
 10745  003F2E  D7FC               	bra	u9787
 10746  003F30  F000               	nop	
 10747  003F32  0E80               	movlw	128
 10748  003F34  EC5F  F02B         	call	_lcdInst
 10749                           
 10750                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 10751  003F38  0E8B               	movlw	low STR_68
 10752  003F3A  0100               	movlb	0	; () banked
 10753  003F3C  6F8E               	movwf	printf@f& (0+255),b
 10754  003F3E  0EFC               	movlw	high STR_68
 10755  003F40  0100               	movlb	0	; () banked
 10756  003F42  6F8F               	movwf	(printf@f+1)& (0+255),b
 10757  003F44  EC84  F00B         	call	_printf	;wreg free
 10758                           
 10759                           ;Test.c: 36: lcdInst(0b11000000);;
 10760  003F48  0EC0               	movlw	192
 10761  003F4A  EC5F  F02B         	call	_lcdInst
 10762                           
 10763                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 10764  003F4E  0E9C               	movlw	low STR_69
 10765  003F50  0100               	movlb	0	; () banked
 10766  003F52  6F8E               	movwf	printf@f& (0+255),b
 10767  003F54  0EFC               	movlw	high STR_69
 10768  003F56  0100               	movlb	0	; () banked
 10769  003F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 10770  003F5A  EC84  F00B         	call	_printf	;wreg free
 10771  003F5E                     l1200:
 10772  003F5E  A281               	btfss	3969,1,c	;volatile
 10773  003F60  D7FE               	goto	l1200
 10774                           
 10775                           ;Test.c: 39: var = PORTB >> 4;
 10776  003F62  CF81 F0C6          	movff	3969,??_Test	;volatile
 10777  003F66  0100               	movlb	0	; () banked
 10778  003F68  3BC6               	swapf	??_Test& (0+255),f,b
 10779  003F6A  0E0F               	movlw	15
 10780  003F6C  17C6               	andwf	??_Test& (0+255),f,b
 10781  003F6E  0100               	movlb	0	; () banked
 10782  003F70  51C6               	movf	??_Test& (0+255),w,b
 10783  003F72  0101               	movlb	1	; () banked
 10784  003F74  6F45               	movwf	_var& (0+255),b
 10785  003F76  6B46               	clrf	(_var+1)& (0+255),b
 10786                           
 10787                           ; BSR set to: 1
 10788                           ;Test.c: 40: var++;
 10789  003F78  0101               	movlb	1	; () banked
 10790  003F7A  4B45               	infsnz	_var& (0+255),f,b
 10791  003F7C  2B46               	incf	(_var+1)& (0+255),f,b
 10792  003F7E                     l1203:
 10793  003F7E  A281               	btfss	3969,1,c	;volatile
 10794  003F80  D01F               	goto	l9540
 10795  003F82  D7FD               	goto	l1203
 10796  003F84                     l9518:
 10797                           
 10798                           ;Test.c: 44: algorithmTest();
 10799  003F84  EC73  F021         	call	_algorithmTest	;wreg free
 10800                           
 10801                           ;Test.c: 45: break;
 10802  003F88  D044               	goto	l9542
 10803  003F8A                     l9520:
 10804                           
 10805                           ;Test.c: 47: sensorTest();
 10806  003F8A  ECD9  F012         	call	_sensorTest	;wreg free
 10807                           
 10808                           ;Test.c: 48: break;
 10809  003F8E  D041               	goto	l9542
 10810  003F90                     l9522:
 10811                           
 10812                           ;Test.c: 50: actuatorTest();
 10813  003F90  EC6B  F004         	call	_actuatorTest	;wreg free
 10814                           
 10815                           ;Test.c: 51: break;
 10816  003F94  D03E               	goto	l9542
 10817  003F96                     l9524:
 10818                           
 10819                           ;Test.c: 53: arm();
 10820  003F96  EC0F  F020         	call	_arm	;wreg free
 10821                           
 10822                           ;Test.c: 54: break;
 10823  003F9A  D03B               	goto	l9542
 10824  003F9C                     l9526:
 10825                           
 10826                           ;Test.c: 56: PortTestDC();
 10827  003F9C  EC29  F027         	call	_PortTestDC	;wreg free
 10828                           
 10829                           ;Test.c: 57: break;
 10830  003FA0  D038               	goto	l9542
 10831  003FA2                     l9528:
 10832                           
 10833                           ;Test.c: 59: SpeedTest();
 10834  003FA2  ECCE  F024         	call	_SpeedTest	;wreg free
 10835                           
 10836                           ;Test.c: 60: break;
 10837  003FA6  D035               	goto	l9542
 10838  003FA8                     l9530:
 10839                           
 10840                           ;Test.c: 62: PortTestPusher();
 10841  003FA8  ECFB  F026         	call	_PortTestPusher	;wreg free
 10842                           
 10843                           ;Test.c: 63: break;
 10844  003FAC  D032               	goto	l9542
 10845  003FAE                     l9532:
 10846                           
 10847                           ;Test.c: 65: PlatformTest();
 10848  003FAE  EC4E  F011         	call	_PlatformTest	;wreg free
 10849                           
 10850                           ;Test.c: 66: break;
 10851  003FB2  D02F               	goto	l9542
 10852  003FB4                     l9534:
 10853                           
 10854                           ;Test.c: 68: BothServos();
 10855  003FB4  ECA0  F00D         	call	_BothServos	;wreg free
 10856                           
 10857                           ;Test.c: 69: break;
 10858  003FB8  D02C               	goto	l9542
 10859  003FBA                     l9536:
 10860                           
 10861                           ;Test.c: 71: BlockerTest();
 10862  003FBA  EC98  F01D         	call	_BlockerTest	;wreg free
 10863                           
 10864                           ;Test.c: 75: }
 10865                           
 10866                           ;Test.c: 74: break;
 10867                           
 10868                           ;Test.c: 73: default:
 10869                           
 10870                           ;Test.c: 72: break;
 10871  003FBE  D029               	goto	l9542
 10872  003FC0                     l9540:
 10873  003FC0  C145  F0C6         	movff	_var,??_Test
 10874  003FC4  C146  F0C7         	movff	_var+1,??_Test+1
 10875                           
 10876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10877                           ; Switch size 1, requested type "space"
 10878                           ; Number of cases is 1, Range of values is 0 to 0
 10879                           ; switch strategies available:
 10880                           ; Name         Instructions Cycles
 10881                           ; simple_byte            4     3 (average)
 10882                           ;	Chosen strategy is simple_byte
 10883  003FC8  0100               	movlb	0	; () banked
 10884  003FCA  51C7               	movf	(??_Test+1)& (0+255),w,b
 10885  003FCC  0A00               	xorlw	0	; case 0
 10886  003FCE  A4D8               	btfss	status,2,c
 10887  003FD0  D020               	goto	l9542
 10888                           
 10889                           ; BSR set to: 0
 10890                           ; Switch size 1, requested type "space"
 10891                           ; Number of cases is 10, Range of values is 1 to 11
 10892                           ; switch strategies available:
 10893                           ; Name         Instructions Cycles
 10894                           ; simple_byte           31    16 (average)
 10895                           ;	Chosen strategy is simple_byte
 10896  003FD2  0100               	movlb	0	; () banked
 10897  003FD4  51C6               	movf	??_Test& (0+255),w,b
 10898  003FD6  0A01               	xorlw	1	; case 1
 10899  003FD8  B4D8               	btfsc	status,2,c
 10900  003FDA  D7D4               	goto	l9518
 10901  003FDC  0A03               	xorlw	3	; case 2
 10902  003FDE  B4D8               	btfsc	status,2,c
 10903  003FE0  D7D4               	goto	l9520
 10904  003FE2  0A01               	xorlw	1	; case 3
 10905  003FE4  B4D8               	btfsc	status,2,c
 10906  003FE6  D7D4               	goto	l9522
 10907  003FE8  0A07               	xorlw	7	; case 4
 10908  003FEA  B4D8               	btfsc	status,2,c
 10909  003FEC  D7D4               	goto	l9524
 10910  003FEE  0A01               	xorlw	1	; case 5
 10911  003FF0  B4D8               	btfsc	status,2,c
 10912  003FF2  D7D4               	goto	l9526
 10913  003FF4  0A03               	xorlw	3	; case 6
 10914  003FF6  B4D8               	btfsc	status,2,c
 10915  003FF8  D7D4               	goto	l9528
 10916  003FFA  0A01               	xorlw	1	; case 7
 10917  003FFC  B4D8               	btfsc	status,2,c
 10918  003FFE  D7D4               	goto	l9530
 10919  004000  0A0F               	xorlw	15	; case 8
 10920  004002  B4D8               	btfsc	status,2,c
 10921  004004  D7D4               	goto	l9532
 10922  004006  0A02               	xorlw	2	; case 10
 10923  004008  B4D8               	btfsc	status,2,c
 10924  00400A  D7D4               	goto	l9534
 10925  00400C  0A01               	xorlw	1	; case 11
 10926  00400E  B4D8               	btfsc	status,2,c
 10927  004010  D7D4               	goto	l9536
 10928  004012                     l9542:
 10929  004012  0E03               	movlw	3
 10930  004014  0100               	movlb	0	; () banked
 10931  004016  19FC               	xorwf	_machine_state& (0+255),w,b
 10932  004018  A4D8               	btfss	status,2,c
 10933  00401A  0012               	return	
 10934  00401C  D77E               	goto	l9502
 10935  00401E                     __end_of_Test:
 10936                           	opt stack 0
 10937                           tblptru	equ	0xFF8
 10938                           tblptrh	equ	0xFF7
 10939                           tblptrl	equ	0xFF6
 10940                           tablat	equ	0xFF5
 10941                           prodh	equ	0xFF4
 10942                           prodl	equ	0xFF3
 10943                           intcon	equ	0xFF2
 10944                           intcon2	equ	0xFF1
 10945                           intcon3	equ	0xFF0
 10946                           postinc0	equ	0xFEE
 10947                           wreg	equ	0xFE8
 10948                           postdec1	equ	0xFE5
 10949                           fsr1l	equ	0xFE1
 10950                           indf2	equ	0xFDF
 10951                           postinc2	equ	0xFDE
 10952                           postdec2	equ	0xFDD
 10953                           fsr2h	equ	0xFDA
 10954                           fsr2l	equ	0xFD9
 10955                           status	equ	0xFD8
 10956                           
 10957 ;; *************** function _sensorTest *****************
 10958 ;; Defined at:
 10959 ;;		line 123 in file "Test.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  res             2   45[BANK0 ] int 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  1    wreg      void 
 10966 ;; Registers used:
 10967 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10977 ;;Total ram usage:        4 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:   10
 10980 ;; This function calls:
 10981 ;;		_lcdInst
 10982 ;;		_printf
 10983 ;;		_readADC
 10984 ;;		_readMAG
 10985 ;; This function is called by:
 10986 ;;		_Test
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           	psect	text36
 10991  0025B2                     __ptext36:
 10992                           	opt stack 0
 10993  0025B2                     _sensorTest:
 10994                           	opt stack 19
 10995                           
 10996                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;incstack = 0
 11000  0025B2  0E01               	movlw	1
 11001  0025B4  EC5F  F02B         	call	_lcdInst
 11002  0025B8  0E68               	movlw	104
 11003  0025BA  0100               	movlb	0	; () banked
 11004  0025BC  6FAB               	movwf	??_sensorTest& (0+255),b
 11005  0025BE  0EE4               	movlw	228
 11006  0025C0                     u9797:
 11007  0025C0  2EE8               	decfsz	wreg,f,c
 11008  0025C2  D7FE               	bra	u9797
 11009  0025C4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11010  0025C6  D7FC               	bra	u9797
 11011  0025C8  F000               	nop	
 11012  0025CA  0E80               	movlw	128
 11013  0025CC  EC5F  F02B         	call	_lcdInst
 11014                           
 11015                           ;Test.c: 126: printf("SENSORS");
 11016  0025D0  0EAD               	movlw	low STR_77
 11017  0025D2  0100               	movlb	0	; () banked
 11018  0025D4  6F8E               	movwf	printf@f& (0+255),b
 11019  0025D6  0EFF               	movlw	high STR_77
 11020  0025D8  0100               	movlb	0	; () banked
 11021  0025DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11022  0025DC  EC84  F00B         	call	_printf	;wreg free
 11023                           
 11024                           ;Test.c: 127: lcdInst(0b11000000);;
 11025  0025E0  0EC0               	movlw	192
 11026  0025E2  EC5F  F02B         	call	_lcdInst
 11027                           
 11028                           ;Test.c: 128: printf("PUSH TO START");
 11029  0025E6  0E15               	movlw	low STR_71
 11030  0025E8  0100               	movlb	0	; () banked
 11031  0025EA  6F8E               	movwf	printf@f& (0+255),b
 11032  0025EC  0EFF               	movlw	high STR_71
 11033  0025EE  0100               	movlb	0	; () banked
 11034  0025F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11035  0025F2  EC84  F00B         	call	_printf	;wreg free
 11036                           
 11037                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 11038  0025F6  0E05               	movlw	5
 11039  0025F8  0100               	movlb	0	; () banked
 11040  0025FA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11041  0025FC  0E0F               	movlw	15
 11042  0025FE  0100               	movlb	0	; () banked
 11043  002600  6FAB               	movwf	??_sensorTest& (0+255),b
 11044  002602  0EF1               	movlw	241
 11045  002604                     u9807:
 11046  002604  2EE8               	decfsz	wreg,f,c
 11047  002606  D7FE               	bra	u9807
 11048  002608  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11049  00260A  D7FC               	bra	u9807
 11050  00260C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11051  00260E  D7FA               	bra	u9807
 11052  002610                     l1232:
 11053  002610  A281               	btfss	3969,1,c	;volatile
 11054  002612  D7FE               	goto	l1232
 11055  002614                     l1235:
 11056  002614  B281               	btfsc	3969,1,c	;volatile
 11057  002616  D7FE               	goto	l1235
 11058                           
 11059                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11060  002618  0E01               	movlw	1
 11061  00261A  EC5F  F02B         	call	_lcdInst
 11062  00261E  0E68               	movlw	104
 11063  002620  0100               	movlb	0	; () banked
 11064  002622  6FAB               	movwf	??_sensorTest& (0+255),b
 11065  002624  0EE4               	movlw	228
 11066  002626                     u9817:
 11067  002626  2EE8               	decfsz	wreg,f,c
 11068  002628  D7FE               	bra	u9817
 11069  00262A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11070  00262C  D7FC               	bra	u9817
 11071  00262E  F000               	nop	
 11072  002630  0E80               	movlw	128
 11073  002632  EC5F  F02B         	call	_lcdInst
 11074                           
 11075                           ;Test.c: 137: printf("TST: IR SNSR");
 11076  002636  0E3F               	movlw	low STR_79
 11077  002638  0100               	movlb	0	; () banked
 11078  00263A  6F8E               	movwf	printf@f& (0+255),b
 11079  00263C  0EFF               	movlw	high STR_79
 11080  00263E  0100               	movlb	0	; () banked
 11081  002640  6F8F               	movwf	(printf@f+1)& (0+255),b
 11082  002642  EC84  F00B         	call	_printf	;wreg free
 11083                           
 11084                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 11085  002646  0E05               	movlw	5
 11086  002648  0100               	movlb	0	; () banked
 11087  00264A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11088  00264C  0E0F               	movlw	15
 11089  00264E  0100               	movlb	0	; () banked
 11090  002650  6FAB               	movwf	??_sensorTest& (0+255),b
 11091  002652  0EF1               	movlw	241
 11092  002654                     u9827:
 11093  002654  2EE8               	decfsz	wreg,f,c
 11094  002656  D7FE               	bra	u9827
 11095  002658  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11096  00265A  D7FC               	bra	u9827
 11097  00265C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11098  00265E  D7FA               	bra	u9827
 11099                           
 11100                           ;Test.c: 139: LATCbits.LATC5 = 1;
 11101  002660  8A8B               	bsf	3979,5,c	;volatile
 11102                           
 11103                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 11104  002662  D05C               	goto	l7878
 11105  002664                     l7860:
 11106                           
 11107                           ;Test.c: 142: readADC(0);
 11108  002664  0E00               	movlw	0
 11109  002666  EC55  F02A         	call	_readADC
 11110                           
 11111                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 11112  00266A  50C3               	movf	4035,w,c	;volatile
 11113  00266C  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 11114  002670  0100               	movlb	0	; () banked
 11115  002672  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11116  002674  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11117  002678  0100               	movlb	0	; () banked
 11118  00267A  6BAB               	clrf	??_sensorTest& (0+255),b
 11119  00267C  0100               	movlb	0	; () banked
 11120  00267E  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11121  002680  0100               	movlb	0	; () banked
 11122  002682  6FAD               	movwf	sensorTest@res& (0+255),b
 11123  002684  0100               	movlb	0	; () banked
 11124  002686  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11125  002688  0100               	movlb	0	; () banked
 11126  00268A  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 11130  00268C  0100               	movlb	0	; () banked
 11131  00268E  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11132  002690  D00A               	goto	u6400
 11133  002692  0E21               	movlw	33
 11134  002694  0100               	movlb	0	; () banked
 11135  002696  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11136  002698  0E03               	movlw	3
 11137  00269A  0100               	movlb	0	; () banked
 11138  00269C  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11139  00269E  A0D8               	btfss	status,0,c
 11140  0026A0  D002               	goto	u6400
 11141  0026A2  0E01               	movlw	1
 11142  0026A4  D001               	goto	u6410
 11143  0026A6                     u6400:
 11144  0026A6  0E00               	movlw	0
 11145  0026A8                     u6410:
 11146  0026A8  0100               	movlb	0	; () banked
 11147  0026AA  6FE6               	movwf	_IR_signal& (0+255),b
 11148  0026AC  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11149                           
 11150                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11151  0026AE  0E01               	movlw	1
 11152  0026B0  EC5F  F02B         	call	_lcdInst
 11153  0026B4  0E68               	movlw	104
 11154  0026B6  0100               	movlb	0	; () banked
 11155  0026B8  6FAB               	movwf	??_sensorTest& (0+255),b
 11156  0026BA  0EE4               	movlw	228
 11157  0026BC                     u9837:
 11158  0026BC  2EE8               	decfsz	wreg,f,c
 11159  0026BE  D7FE               	bra	u9837
 11160  0026C0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11161  0026C2  D7FC               	bra	u9837
 11162  0026C4  F000               	nop	
 11163  0026C6  0E80               	movlw	128
 11164  0026C8  EC5F  F02B         	call	_lcdInst
 11165                           
 11166                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 11167  0026CC  0E64               	movlw	low STR_80
 11168  0026CE  0100               	movlb	0	; () banked
 11169  0026D0  6F8E               	movwf	printf@f& (0+255),b
 11170  0026D2  0EFE               	movlw	high STR_80
 11171  0026D4  0100               	movlb	0	; () banked
 11172  0026D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11173  0026D8  C0E6  F090         	movff	_IR_signal,?_printf+2
 11174  0026DC  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11175  0026E0  EC84  F00B         	call	_printf	;wreg free
 11176                           
 11177                           ;Test.c: 148: lcdInst(0b11000000);;
 11178  0026E4  0EC0               	movlw	192
 11179  0026E6  EC5F  F02B         	call	_lcdInst
 11180                           
 11181                           ;Test.c: 149: printf("%d", res);
 11182  0026EA  0E20               	movlw	low (STR_27+14)
 11183  0026EC  0100               	movlb	0	; () banked
 11184  0026EE  6F8E               	movwf	printf@f& (0+255),b
 11185  0026F0  0EFE               	movlw	high (STR_27+14)
 11186  0026F2  0100               	movlb	0	; () banked
 11187  0026F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11188  0026F6  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11189  0026FA  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11190  0026FE  EC84  F00B         	call	_printf	;wreg free
 11191                           
 11192                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 11193  002702  0E05               	movlw	5
 11194  002704  0100               	movlb	0	; () banked
 11195  002706  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11196  002708  0E0F               	movlw	15
 11197  00270A  0100               	movlb	0	; () banked
 11198  00270C  6FAB               	movwf	??_sensorTest& (0+255),b
 11199  00270E  0EF1               	movlw	241
 11200  002710                     u9847:
 11201  002710  2EE8               	decfsz	wreg,f,c
 11202  002712  D7FE               	bra	u9847
 11203  002714  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11204  002716  D7FC               	bra	u9847
 11205  002718  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11206  00271A  D7FA               	bra	u9847
 11207  00271C                     l7878:
 11208  00271C  A281               	btfss	3969,1,c	;volatile
 11209  00271E  D7A2               	goto	l7860
 11210                           
 11211                           ;Test.c: 151: }
 11212                           ;Test.c: 152: LATCbits.LATC5 = 0;
 11213  002720  9A8B               	bcf	3979,5,c	;volatile
 11214                           
 11215                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11216  002722  0E01               	movlw	1
 11217  002724  EC5F  F02B         	call	_lcdInst
 11218  002728  0E68               	movlw	104
 11219  00272A  0100               	movlb	0	; () banked
 11220  00272C  6FAB               	movwf	??_sensorTest& (0+255),b
 11221  00272E  0EE4               	movlw	228
 11222  002730                     u9857:
 11223  002730  2EE8               	decfsz	wreg,f,c
 11224  002732  D7FE               	bra	u9857
 11225  002734  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11226  002736  D7FC               	bra	u9857
 11227  002738  F000               	nop	
 11228  00273A  0E80               	movlw	128
 11229  00273C  EC5F  F02B         	call	_lcdInst
 11230                           
 11231                           ;Test.c: 161: printf("TST: MAGNETISM");
 11232  002740  0E91               	movlw	low STR_82
 11233  002742  0100               	movlb	0	; () banked
 11234  002744  6F8E               	movwf	printf@f& (0+255),b
 11235  002746  0EFE               	movlw	high STR_82
 11236  002748  0100               	movlb	0	; () banked
 11237  00274A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11238  00274C  EC84  F00B         	call	_printf	;wreg free
 11239                           
 11240                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 11241  002750  0E05               	movlw	5
 11242  002752  0100               	movlb	0	; () banked
 11243  002754  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11244  002756  0E0F               	movlw	15
 11245  002758  0100               	movlb	0	; () banked
 11246  00275A  6FAB               	movwf	??_sensorTest& (0+255),b
 11247  00275C  0EF1               	movlw	241
 11248  00275E                     u9867:
 11249  00275E  2EE8               	decfsz	wreg,f,c
 11250  002760  D7FE               	bra	u9867
 11251  002762  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11252  002764  D7FC               	bra	u9867
 11253  002766  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11254  002768  D7FA               	bra	u9867
 11255                           
 11256                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 11257  00276A  D021               	goto	l7896
 11258  00276C                     l7890:
 11259                           
 11260                           ;Test.c: 164: readMAG();
 11261  00276C  ECFA  F027         	call	_readMAG	;wreg free
 11262                           
 11263                           ;Test.c: 165: lcdInst(0b10000000);;
 11264  002770  0E80               	movlw	128
 11265  002772  EC5F  F02B         	call	_lcdInst
 11266                           
 11267                           ;Test.c: 166: lcdInst(0b11000000);;
 11268  002776  0EC0               	movlw	192
 11269  002778  EC5F  F02B         	call	_lcdInst
 11270                           
 11271                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 11272  00277C  0E34               	movlw	low STR_83
 11273  00277E  0100               	movlb	0	; () banked
 11274  002780  6F8E               	movwf	printf@f& (0+255),b
 11275  002782  0EFE               	movlw	high STR_83
 11276  002784  0100               	movlb	0	; () banked
 11277  002786  6F8F               	movwf	(printf@f+1)& (0+255),b
 11278  002788  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11279  00278C  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11280  002790  EC84  F00B         	call	_printf	;wreg free
 11281                           
 11282                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 11283  002794  0E05               	movlw	5
 11284  002796  0100               	movlb	0	; () banked
 11285  002798  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11286  00279A  0E0F               	movlw	15
 11287  00279C  0100               	movlb	0	; () banked
 11288  00279E  6FAB               	movwf	??_sensorTest& (0+255),b
 11289  0027A0  0EF1               	movlw	241
 11290  0027A2                     u9877:
 11291  0027A2  2EE8               	decfsz	wreg,f,c
 11292  0027A4  D7FE               	bra	u9877
 11293  0027A6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11294  0027A8  D7FC               	bra	u9877
 11295  0027AA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11296  0027AC  D7FA               	bra	u9877
 11297  0027AE                     l7896:
 11298  0027AE  A281               	btfss	3969,1,c	;volatile
 11299  0027B0  D7DD               	goto	l7890
 11300                           
 11301                           ;Test.c: 169: }
 11302                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11303  0027B2  0E01               	movlw	1
 11304  0027B4  EC5F  F02B         	call	_lcdInst
 11305  0027B8  0E68               	movlw	104
 11306  0027BA  0100               	movlb	0	; () banked
 11307  0027BC  6FAB               	movwf	??_sensorTest& (0+255),b
 11308  0027BE  0EE4               	movlw	228
 11309  0027C0                     u9887:
 11310  0027C0  2EE8               	decfsz	wreg,f,c
 11311  0027C2  D7FE               	bra	u9887
 11312  0027C4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11313  0027C6  D7FC               	bra	u9887
 11314  0027C8  F000               	nop	
 11315  0027CA  0E80               	movlw	128
 11316  0027CC  EC5F  F02B         	call	_lcdInst
 11317                           
 11318                           ;Test.c: 175: printf("TST: COND");
 11319  0027D0  0E86               	movlw	low STR_84
 11320  0027D2  0100               	movlb	0	; () banked
 11321  0027D4  6F8E               	movwf	printf@f& (0+255),b
 11322  0027D6  0EFF               	movlw	high STR_84
 11323  0027D8  0100               	movlb	0	; () banked
 11324  0027DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11325  0027DC  EC84  F00B         	call	_printf	;wreg free
 11326                           
 11327                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 11328  0027E0  0E05               	movlw	5
 11329  0027E2  0100               	movlb	0	; () banked
 11330  0027E4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11331  0027E6  0E0F               	movlw	15
 11332  0027E8  0100               	movlb	0	; () banked
 11333  0027EA  6FAB               	movwf	??_sensorTest& (0+255),b
 11334  0027EC  0EF1               	movlw	241
 11335  0027EE                     u9897:
 11336  0027EE  2EE8               	decfsz	wreg,f,c
 11337  0027F0  D7FE               	bra	u9897
 11338  0027F2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11339  0027F4  D7FC               	bra	u9897
 11340  0027F6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11341  0027F8  D7FA               	bra	u9897
 11342  0027FA                     l7908:
 11343                           
 11344                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11345  0027FA  0E01               	movlw	1
 11346  0027FC  EC5F  F02B         	call	_lcdInst
 11347  002800  0E68               	movlw	104
 11348  002802  0100               	movlb	0	; () banked
 11349  002804  6FAB               	movwf	??_sensorTest& (0+255),b
 11350  002806  0EE4               	movlw	228
 11351  002808                     u9907:
 11352  002808  2EE8               	decfsz	wreg,f,c
 11353  00280A  D7FE               	bra	u9907
 11354  00280C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11355  00280E  D7FC               	bra	u9907
 11356  002810  F000               	nop	
 11357  002812  0E80               	movlw	128
 11358  002814  EC5F  F02B         	call	_lcdInst
 11359                           
 11360                           ;Test.c: 179: printf("TST: COND");
 11361  002818  0E86               	movlw	low STR_84
 11362  00281A  0100               	movlb	0	; () banked
 11363  00281C  6F8E               	movwf	printf@f& (0+255),b
 11364  00281E  0EFF               	movlw	high STR_84
 11365  002820  0100               	movlb	0	; () banked
 11366  002822  6F8F               	movwf	(printf@f+1)& (0+255),b
 11367  002824  EC84  F00B         	call	_printf	;wreg free
 11368                           
 11369                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 11370  002828  D01B               	goto	l7920
 11371  00282A                     l7916:
 11372                           
 11373                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11374  00282A  0E80               	movlw	128
 11375  00282C  EC5F  F02B         	call	_lcdInst
 11376  002830  0EC0               	movlw	192
 11377  002832  EC5F  F02B         	call	_lcdInst
 11378                           
 11379                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 11380  002836  0EA4               	movlw	low STR_86
 11381  002838  0100               	movlb	0	; () banked
 11382  00283A  6F8E               	movwf	printf@f& (0+255),b
 11383  00283C  0EFF               	movlw	high STR_86
 11384  00283E  0100               	movlb	0	; () banked
 11385  002840  6F8F               	movwf	(printf@f+1)& (0+255),b
 11386  002842  A480               	btfss	3968,2,c	;volatile
 11387  002844  D004               	goto	u6440
 11388  002846  0100               	movlb	0	; () banked
 11389  002848  6BAB               	clrf	??_sensorTest& (0+255),b
 11390  00284A  2BAB               	incf	??_sensorTest& (0+255),f,b
 11391  00284C  D002               	goto	u6448
 11392  00284E                     u6440:
 11393  00284E  0100               	movlb	0	; () banked
 11394  002850  6BAB               	clrf	??_sensorTest& (0+255),b
 11395  002852                     u6448:
 11396  002852  0100               	movlb	0	; () banked
 11397  002854  51AB               	movf	??_sensorTest& (0+255),w,b
 11398  002856  0100               	movlb	0	; () banked
 11399  002858  6F90               	movwf	(?_printf+2)& (0+255),b
 11400  00285A  6B91               	clrf	(?_printf+3)& (0+255),b
 11401  00285C  EC84  F00B         	call	_printf	;wreg free
 11402  002860                     l7920:
 11403  002860  A281               	btfss	3969,1,c	;volatile
 11404  002862  D7E3               	goto	l7916
 11405                           
 11406                           ;Test.c: 186: }
 11407                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 11408  002864  3881               	swapf	3969,w,c	;volatile
 11409  002866  0B0F               	andlw	15
 11410  002868  0A0F               	xorlw	15
 11411  00286A  B4D8               	btfsc	status,2,c
 11412  00286C  0012               	return	
 11413                           
 11414                           ;Test.c: 190: else{
 11415                           ;Test.c: 191: LATAbits.LATA3 = 1;
 11416                           
 11417                           ;Test.c: 189: }
 11418                           
 11419                           ;Test.c: 188: break;
 11420  00286E  8689               	bsf	3977,3,c	;volatile
 11421                           
 11422                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 11423  002870  D01B               	goto	l7932
 11424  002872                     l7928:
 11425                           
 11426                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11427  002872  0E80               	movlw	128
 11428  002874  EC5F  F02B         	call	_lcdInst
 11429  002878  0EC0               	movlw	192
 11430  00287A  EC5F  F02B         	call	_lcdInst
 11431                           
 11432                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 11433  00287E  0EA4               	movlw	low STR_86
 11434  002880  0100               	movlb	0	; () banked
 11435  002882  6F8E               	movwf	printf@f& (0+255),b
 11436  002884  0EFF               	movlw	high STR_86
 11437  002886  0100               	movlb	0	; () banked
 11438  002888  6F8F               	movwf	(printf@f+1)& (0+255),b
 11439  00288A  A480               	btfss	3968,2,c	;volatile
 11440  00288C  D004               	goto	u6470
 11441  00288E  0100               	movlb	0	; () banked
 11442  002890  6BAB               	clrf	??_sensorTest& (0+255),b
 11443  002892  2BAB               	incf	??_sensorTest& (0+255),f,b
 11444  002894  D002               	goto	u6478
 11445  002896                     u6470:
 11446  002896  0100               	movlb	0	; () banked
 11447  002898  6BAB               	clrf	??_sensorTest& (0+255),b
 11448  00289A                     u6478:
 11449  00289A  0100               	movlb	0	; () banked
 11450  00289C  51AB               	movf	??_sensorTest& (0+255),w,b
 11451  00289E  0100               	movlb	0	; () banked
 11452  0028A0  6F90               	movwf	(?_printf+2)& (0+255),b
 11453  0028A2  6B91               	clrf	(?_printf+3)& (0+255),b
 11454  0028A4  EC84  F00B         	call	_printf	;wreg free
 11455  0028A8                     l7932:
 11456  0028A8  B281               	btfsc	3969,1,c	;volatile
 11457  0028AA  D7E3               	goto	l7928
 11458                           
 11459                           ;Test.c: 196: }
 11460                           ;Test.c: 197: LATAbits.LATA3 = !1;
 11461  0028AC  9689               	bcf	3977,3,c	;volatile
 11462  0028AE  D7A5               	goto	l7908
 11463  0028B0                     __end_of_sensorTest:
 11464                           	opt stack 0
 11465                           tblptru	equ	0xFF8
 11466                           tblptrh	equ	0xFF7
 11467                           tblptrl	equ	0xFF6
 11468                           tablat	equ	0xFF5
 11469                           prodh	equ	0xFF4
 11470                           prodl	equ	0xFF3
 11471                           intcon	equ	0xFF2
 11472                           intcon2	equ	0xFF1
 11473                           intcon3	equ	0xFF0
 11474                           postinc0	equ	0xFEE
 11475                           wreg	equ	0xFE8
 11476                           postdec1	equ	0xFE5
 11477                           fsr1l	equ	0xFE1
 11478                           indf2	equ	0xFDF
 11479                           postinc2	equ	0xFDE
 11480                           postdec2	equ	0xFDD
 11481                           fsr2h	equ	0xFDA
 11482                           fsr2l	equ	0xFD9
 11483                           status	equ	0xFD8
 11484                           
 11485 ;; *************** function _readMAG *****************
 11486 ;; Defined at:
 11487 ;;		line 29 in file "ADCFunctionality.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;		None
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;  res             2    4[BANK0 ] int 
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  1    wreg      void 
 11494 ;; Registers used:
 11495 ;;		wreg, status,2, status,0, cstack
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;Total ram usage:        4 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    8
 11508 ;; This function calls:
 11509 ;;		_readADC
 11510 ;; This function is called by:
 11511 ;;		_getMAG
 11512 ;;		_sensorTest
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text37
 11517  004FF4                     __ptext37:
 11518                           	opt stack 0
 11519  004FF4                     _readMAG:
 11520                           	opt stack 19
 11521                           
 11522                           ;ADCFunctionality.c: 30: readADC(1);
 11523                           
 11524                           ;incstack = 0
 11525  004FF4  0E01               	movlw	1
 11526  004FF6  EC55  F02A         	call	_readADC
 11527                           
 11528                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11529  004FFA  50C3               	movf	4035,w,c	;volatile
 11530  004FFC  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11531  005000  0100               	movlb	0	; () banked
 11532  005002  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11533  005004  C082  F083         	movff	??_readMAG,??_readMAG+1
 11534  005008  0100               	movlb	0	; () banked
 11535  00500A  6B82               	clrf	??_readMAG& (0+255),b
 11536  00500C  0100               	movlb	0	; () banked
 11537  00500E  1182               	iorwf	??_readMAG& (0+255),w,b
 11538  005010  0100               	movlb	0	; () banked
 11539  005012  6F84               	movwf	readMAG@res& (0+255),b
 11540  005014  0100               	movlb	0	; () banked
 11541  005016  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11542  005018  0100               	movlb	0	; () banked
 11543  00501A  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11544                           
 11545                           ; BSR set to: 0
 11546                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11547  00501C  0100               	movlb	0	; () banked
 11548  00501E  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11549  005020  D008               	goto	u4831
 11550  005022  0100               	movlb	0	; () banked
 11551  005024  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11552  005026  E107               	bnz	u4830
 11553  005028  0E96               	movlw	150
 11554  00502A  0100               	movlb	0	; () banked
 11555  00502C  5D84               	subwf	readMAG@res& (0+255),w,b
 11556  00502E  B0D8               	btfsc	status,0,c
 11557  005030  D002               	goto	u4830
 11558  005032                     u4831:
 11559  005032  0E01               	movlw	1
 11560  005034  D001               	goto	u4840
 11561  005036                     u4830:
 11562  005036  0E00               	movlw	0
 11563  005038                     u4840:
 11564  005038  0100               	movlb	0	; () banked
 11565  00503A  6FE8               	movwf	_MAG_signal& (0+255),b
 11566  00503C  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11567                           
 11568                           ; BSR set to: 0
 11569  00503E  0012               	return		;funcret
 11570  005040                     __end_of_readMAG:
 11571                           	opt stack 0
 11572                           tblptru	equ	0xFF8
 11573                           tblptrh	equ	0xFF7
 11574                           tblptrl	equ	0xFF6
 11575                           tablat	equ	0xFF5
 11576                           prodh	equ	0xFF4
 11577                           prodl	equ	0xFF3
 11578                           intcon	equ	0xFF2
 11579                           intcon2	equ	0xFF1
 11580                           intcon3	equ	0xFF0
 11581                           postinc0	equ	0xFEE
 11582                           wreg	equ	0xFE8
 11583                           postdec1	equ	0xFE5
 11584                           fsr1l	equ	0xFE1
 11585                           indf2	equ	0xFDF
 11586                           postinc2	equ	0xFDE
 11587                           postdec2	equ	0xFDD
 11588                           fsr2h	equ	0xFDA
 11589                           fsr2l	equ	0xFD9
 11590                           status	equ	0xFD8
 11591                           
 11592 ;; *************** function _arm *****************
 11593 ;; Defined at:
 11594 ;;		line 632 in file "Test.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;		None
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;  on              2   44[BANK0 ] int 
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  1    wreg      void 
 11601 ;; Registers used:
 11602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;Total ram usage:        3 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:   10
 11615 ;; This function calls:
 11616 ;;		_lcdInst
 11617 ;;		_printf
 11618 ;;		_stopSignals
 11619 ;; This function is called by:
 11620 ;;		_Test
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           	psect	text38
 11625  00401E                     __ptext38:
 11626                           	opt stack 0
 11627  00401E                     _arm:
 11628                           	opt stack 19
 11629                           
 11630                           ;Test.c: 633: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;incstack = 0
 11634  00401E  0E01               	movlw	1
 11635  004020  EC5F  F02B         	call	_lcdInst
 11636  004024  0E68               	movlw	104
 11637  004026  0100               	movlb	0	; () banked
 11638  004028  6FAB               	movwf	??_arm& (0+255),b
 11639  00402A  0EE4               	movlw	228
 11640  00402C                     u9917:
 11641  00402C  2EE8               	decfsz	wreg,f,c
 11642  00402E  D7FE               	bra	u9917
 11643  004030  2FAB               	decfsz	??_arm& (0+255),f,b
 11644  004032  D7FC               	bra	u9917
 11645  004034  F000               	nop	
 11646  004036  0E80               	movlw	128
 11647  004038  EC5F  F02B         	call	_lcdInst
 11648                           
 11649                           ;Test.c: 634: printf("D WILL RETURN   ");
 11650  00403C  0EF2               	movlw	low STR_118
 11651  00403E  0100               	movlb	0	; () banked
 11652  004040  6F8E               	movwf	printf@f& (0+255),b
 11653  004042  0EFB               	movlw	high STR_118
 11654  004044  0100               	movlb	0	; () banked
 11655  004046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11656  004048  EC84  F00B         	call	_printf	;wreg free
 11657                           
 11658                           ;Test.c: 635: lcdInst(0b11000000);;
 11659  00404C  0EC0               	movlw	192
 11660  00404E  EC5F  F02B         	call	_lcdInst
 11661                           
 11662                           ;Test.c: 636: printf("ELSE TOGGLES ARM");
 11663  004052  0EAD               	movlw	low STR_127
 11664  004054  0100               	movlb	0	; () banked
 11665  004056  6F8E               	movwf	printf@f& (0+255),b
 11666  004058  0EFC               	movlw	high STR_127
 11667  00405A  0100               	movlb	0	; () banked
 11668  00405C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11669  00405E  EC84  F00B         	call	_printf	;wreg free
 11670                           
 11671                           ;Test.c: 638: (INTCONbits.GIE = 1);
 11672  004062  8EF2               	bsf	intcon,7,c	;volatile
 11673                           
 11674                           ;Test.c: 639: machine_state = Sorting_state;
 11675  004064  0E01               	movlw	1
 11676  004066  0100               	movlb	0	; () banked
 11677  004068  6FFC               	movwf	_machine_state& (0+255),b
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;Test.c: 640: f_arm_position = 2;
 11681  00406A  0E00               	movlw	0
 11682  00406C  0100               	movlb	0	; () banked
 11683  00406E  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11684  004070  0E02               	movlw	2
 11685  004072  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;Test.c: 641: timer2_counter = 0;
 11689  004074  0E00               	movlw	0
 11690  004076  6E74               	movwf	_timer2_counter+1,c	;volatile
 11691  004078  0E00               	movlw	0
 11692  00407A  6E73               	movwf	_timer2_counter,c	;volatile
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;Test.c: 642: LATBbits.LATB3 = 1;
 11696  00407C  868A               	bsf	3978,3,c	;volatile
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;Test.c: 643: TMR2ON = 1;
 11700  00407E  84CA               	bsf	4042,2,c	;volatile
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;Test.c: 644: was_low_2 = 0;
 11704  004080  0E00               	movlw	0
 11705  004082  6E7A               	movwf	_was_low_2+1,c	;volatile
 11706  004084  0E00               	movlw	0
 11707  004086  6E79               	movwf	_was_low_2,c	;volatile
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;Test.c: 646: int on = 0;
 11711  004088  0E00               	movlw	0
 11712  00408A  0100               	movlb	0	; () banked
 11713  00408C  6FAD               	movwf	(arm@on+1)& (0+255),b
 11714  00408E  0E00               	movlw	0
 11715  004090  6FAC               	movwf	arm@on& (0+255),b
 11716  004092                     l8386:
 11717                           
 11718                           ;Test.c: 648: if(on){
 11719  004092  0100               	movlb	0	; () banked
 11720  004094  51AC               	movf	arm@on& (0+255),w,b
 11721  004096  0100               	movlb	0	; () banked
 11722  004098  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11723  00409A  B4D8               	btfsc	status,2,c
 11724  00409C  D01C               	goto	l8398
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;Test.c: 649: on = !on;
 11728  00409E  0100               	movlb	0	; () banked
 11729  0040A0  51AC               	movf	arm@on& (0+255),w,b
 11730  0040A2  0100               	movlb	0	; () banked
 11731  0040A4  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11732  0040A6  A4D8               	btfss	status,2,c
 11733  0040A8  D002               	goto	u7060
 11734  0040AA  0E01               	movlw	1
 11735  0040AC  D001               	goto	u7070
 11736  0040AE                     u7060:
 11737  0040AE  0E00               	movlw	0
 11738  0040B0                     u7070:
 11739  0040B0  0100               	movlb	0	; () banked
 11740  0040B2  6FAC               	movwf	arm@on& (0+255),b
 11741  0040B4  6BAD               	clrf	(arm@on+1)& (0+255),b
 11742                           
 11743                           ;Test.c: 650: while(PORTBbits.RB1 == 0){
 11744  0040B6  D005               	goto	l8392
 11745  0040B8                     l8390:
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;Test.c: 651: f_arm_position = 0;
 11749  0040B8  0E00               	movlw	0
 11750  0040BA  0100               	movlb	0	; () banked
 11751  0040BC  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11752  0040BE  0E00               	movlw	0
 11753  0040C0  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11754  0040C2                     l8392:
 11755                           
 11756                           ; BSR set to: 0
 11757  0040C2  A281               	btfss	3969,1,c	;volatile
 11758  0040C4  D7F9               	goto	l8390
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;Test.c: 652: }
 11762                           ;Test.c: 653: if(PORTB >> 4 == 0b1111){
 11763                           
 11764                           ; BSR set to: 0
 11765  0040C6  3881               	swapf	3969,w,c	;volatile
 11766  0040C8  0B0F               	andlw	15
 11767  0040CA  0A0F               	xorlw	15
 11768  0040CC  B4D8               	btfsc	status,2,c
 11769  0040CE  D01F               	goto	l1427
 11770  0040D0                     l1428:
 11771  0040D0  A281               	btfss	3969,1,c	;volatile
 11772  0040D2  D7DF               	goto	l8386
 11773  0040D4  D7FD               	goto	l1428
 11774  0040D6                     l8398:
 11775                           
 11776                           ;Test.c: 658: else{
 11777                           ;Test.c: 659: on = !on;
 11778  0040D6  0100               	movlb	0	; () banked
 11779  0040D8  51AC               	movf	arm@on& (0+255),w,b
 11780  0040DA  0100               	movlb	0	; () banked
 11781  0040DC  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11782  0040DE  A4D8               	btfss	status,2,c
 11783  0040E0  D002               	goto	u7110
 11784  0040E2  0E01               	movlw	1
 11785  0040E4  D001               	goto	u7120
 11786  0040E6                     u7110:
 11787  0040E6  0E00               	movlw	0
 11788  0040E8                     u7120:
 11789  0040E8  0100               	movlb	0	; () banked
 11790  0040EA  6FAC               	movwf	arm@on& (0+255),b
 11791  0040EC  6BAD               	clrf	(arm@on+1)& (0+255),b
 11792                           
 11793                           ;Test.c: 660: while(PORTBbits.RB1 == 0){
 11794  0040EE  D005               	goto	l8402
 11795  0040F0                     l8400:
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;Test.c: 661: f_arm_position = 1;
 11799  0040F0  0E00               	movlw	0
 11800  0040F2  0100               	movlb	0	; () banked
 11801  0040F4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11802  0040F6  0E01               	movlw	1
 11803  0040F8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11804  0040FA                     l8402:
 11805                           
 11806                           ; BSR set to: 0
 11807  0040FA  A281               	btfss	3969,1,c	;volatile
 11808  0040FC  D7F9               	goto	l8400
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;Test.c: 662: }
 11812                           ;Test.c: 663: if(PORTB >> 4 == 0b1111){
 11813                           
 11814                           ; BSR set to: 0
 11815  0040FE  3881               	swapf	3969,w,c	;volatile
 11816  004100  0B0F               	andlw	15
 11817  004102  0A0F               	xorlw	15
 11818  004104  B4D8               	btfsc	status,2,c
 11819  004106  D003               	goto	l1427
 11820  004108                     l1436:
 11821  004108  A281               	btfss	3969,1,c	;volatile
 11822  00410A  D7C3               	goto	l8386
 11823  00410C  D7FD               	goto	l1436
 11824  00410E                     l1427:
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;Test.c: 667: }
 11828                           ;Test.c: 668: }
 11829                           ;Test.c: 670: (INTCONbits.GIE = 0);
 11830  00410E  9EF2               	bcf	intcon,7,c	;volatile
 11831                           
 11832                           ; BSR set to: 0
 11833                           ;Test.c: 671: stopSignals();
 11834  004110  EC11  F02B         	call	_stopSignals	;wreg free
 11835                           
 11836                           ;Test.c: 672: machine_state = Testing_state;
 11837  004114  0E03               	movlw	3
 11838  004116  0100               	movlb	0	; () banked
 11839  004118  6FFC               	movwf	_machine_state& (0+255),b
 11840                           
 11841                           ; BSR set to: 0
 11842  00411A  0012               	return		;funcret
 11843  00411C                     __end_of_arm:
 11844                           	opt stack 0
 11845                           tblptru	equ	0xFF8
 11846                           tblptrh	equ	0xFF7
 11847                           tblptrl	equ	0xFF6
 11848                           tablat	equ	0xFF5
 11849                           prodh	equ	0xFF4
 11850                           prodl	equ	0xFF3
 11851                           intcon	equ	0xFF2
 11852                           intcon2	equ	0xFF1
 11853                           intcon3	equ	0xFF0
 11854                           postinc0	equ	0xFEE
 11855                           wreg	equ	0xFE8
 11856                           postdec1	equ	0xFE5
 11857                           fsr1l	equ	0xFE1
 11858                           indf2	equ	0xFDF
 11859                           postinc2	equ	0xFDE
 11860                           postdec2	equ	0xFDD
 11861                           fsr2h	equ	0xFDA
 11862                           fsr2l	equ	0xFD9
 11863                           status	equ	0xFD8
 11864                           
 11865 ;; *************** function _algorithmTest *****************
 11866 ;; Defined at:
 11867 ;;		line 79 in file "Test.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;		None
 11870 ;; Auto vars:     Size  Location     Type
 11871 ;;		None
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  1    wreg      void 
 11874 ;; Registers used:
 11875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/0
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11885 ;;Total ram usage:        2 bytes
 11886 ;; Hardware stack levels used:    1
 11887 ;; Hardware stack levels required when called:   10
 11888 ;; This function calls:
 11889 ;;		_lcdInst
 11890 ;;		_printf
 11891 ;; This function is called by:
 11892 ;;		_Test
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           	psect	text39
 11897  0042E6                     __ptext39:
 11898                           	opt stack 0
 11899  0042E6                     _algorithmTest:
 11900                           	opt stack 19
 11901                           
 11902                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;incstack = 0
 11906  0042E6  0E01               	movlw	1
 11907  0042E8  EC5F  F02B         	call	_lcdInst
 11908  0042EC  0E68               	movlw	104
 11909  0042EE  0100               	movlb	0	; () banked
 11910  0042F0  6FAB               	movwf	??_algorithmTest& (0+255),b
 11911  0042F2  0EE4               	movlw	228
 11912  0042F4                     u9927:
 11913  0042F4  2EE8               	decfsz	wreg,f,c
 11914  0042F6  D7FE               	bra	u9927
 11915  0042F8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11916  0042FA  D7FC               	bra	u9927
 11917  0042FC  F000               	nop	
 11918  0042FE  0E80               	movlw	128
 11919  004300  EC5F  F02B         	call	_lcdInst
 11920                           
 11921                           ;Test.c: 82: printf("ALGORITHM TEST");
 11922  004304  0EDC               	movlw	low STR_70
 11923  004306  0100               	movlb	0	; () banked
 11924  004308  6F8E               	movwf	printf@f& (0+255),b
 11925  00430A  0EFE               	movlw	high STR_70
 11926  00430C  0100               	movlb	0	; () banked
 11927  00430E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11928  004310  EC84  F00B         	call	_printf	;wreg free
 11929                           
 11930                           ;Test.c: 83: lcdInst(0b11000000);;
 11931  004314  0EC0               	movlw	192
 11932  004316  EC5F  F02B         	call	_lcdInst
 11933                           
 11934                           ;Test.c: 84: printf("PUSH TO START");
 11935  00431A  0E15               	movlw	low STR_71
 11936  00431C  0100               	movlb	0	; () banked
 11937  00431E  6F8E               	movwf	printf@f& (0+255),b
 11938  004320  0EFF               	movlw	high STR_71
 11939  004322  0100               	movlb	0	; () banked
 11940  004324  6F8F               	movwf	(printf@f+1)& (0+255),b
 11941  004326  EC84  F00B         	call	_printf	;wreg free
 11942                           
 11943                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 11944  00432A  0E05               	movlw	5
 11945  00432C  0100               	movlb	0	; () banked
 11946  00432E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11947  004330  0E0F               	movlw	15
 11948  004332  0100               	movlb	0	; () banked
 11949  004334  6FAB               	movwf	??_algorithmTest& (0+255),b
 11950  004336  0EF1               	movlw	241
 11951  004338                     u9937:
 11952  004338  2EE8               	decfsz	wreg,f,c
 11953  00433A  D7FE               	bra	u9937
 11954  00433C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11955  00433E  D7FC               	bra	u9937
 11956  004340  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11957  004342  D7FA               	bra	u9937
 11958  004344                     l1223:
 11959  004344  A281               	btfss	3969,1,c	;volatile
 11960  004346  D7FE               	goto	l1223
 11961  004348                     l1226:
 11962  004348  B281               	btfsc	3969,1,c	;volatile
 11963  00434A  D7FE               	goto	l1226
 11964                           
 11965                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11966  00434C  0E01               	movlw	1
 11967  00434E  EC5F  F02B         	call	_lcdInst
 11968  004352  0E68               	movlw	104
 11969  004354  0100               	movlb	0	; () banked
 11970  004356  6FAB               	movwf	??_algorithmTest& (0+255),b
 11971  004358  0EE4               	movlw	228
 11972  00435A                     u9947:
 11973  00435A  2EE8               	decfsz	wreg,f,c
 11974  00435C  D7FE               	bra	u9947
 11975  00435E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11976  004360  D7FC               	bra	u9947
 11977  004362  F000               	nop	
 11978  004364  0E80               	movlw	128
 11979  004366  EC5F  F02B         	call	_lcdInst
 11980                           
 11981                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 11982  00436A  0E58               	movlw	low STR_72
 11983  00436C  0100               	movlb	0	; () banked
 11984  00436E  6F8E               	movwf	printf@f& (0+255),b
 11985  004370  0EFC               	movlw	high STR_72
 11986  004372  0100               	movlb	0	; () banked
 11987  004374  6F8F               	movwf	(printf@f+1)& (0+255),b
 11988  004376  EC84  F00B         	call	_printf	;wreg free
 11989                           
 11990                           ;Test.c: 100: printf("ALG2: 12 CANS");
 11991  00437A  0EF9               	movlw	low STR_73
 11992  00437C  0100               	movlb	0	; () banked
 11993  00437E  6F8E               	movwf	printf@f& (0+255),b
 11994  004380  0EFE               	movlw	high STR_73
 11995  004382  0100               	movlb	0	; () banked
 11996  004384  6F8F               	movwf	(printf@f+1)& (0+255),b
 11997  004386  EC84  F00B         	call	_printf	;wreg free
 11998                           
 11999                           ;Test.c: 109: printf("ALG3: 1 CAN");
 12000  00438A  0E59               	movlw	low STR_74
 12001  00438C  0100               	movlb	0	; () banked
 12002  00438E  6F8E               	movwf	printf@f& (0+255),b
 12003  004390  0EFF               	movlw	high STR_74
 12004  004392  0100               	movlb	0	; () banked
 12005  004394  6F8F               	movwf	(printf@f+1)& (0+255),b
 12006  004396  EC84  F00B         	call	_printf	;wreg free
 12007                           
 12008                           ;Test.c: 115: printf("ALG4: ALL CANS");
 12009  00439A  0EBE               	movlw	low STR_75
 12010  00439C  0100               	movlb	0	; () banked
 12011  00439E  6F8E               	movwf	printf@f& (0+255),b
 12012  0043A0  0EFE               	movlw	high STR_75
 12013  0043A2  0100               	movlb	0	; () banked
 12014  0043A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12015  0043A6  EC84  F00B         	call	_printf	;wreg free
 12016                           
 12017                           ;Test.c: 120: printf("ALG5: NO CANS");
 12018  0043AA  0E07               	movlw	low STR_76
 12019  0043AC  0100               	movlb	0	; () banked
 12020  0043AE  6F8E               	movwf	printf@f& (0+255),b
 12021  0043B0  0EFF               	movlw	high STR_76
 12022  0043B2  0100               	movlb	0	; () banked
 12023  0043B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12024  0043B6  EC84  F00B         	call	_printf	;wreg free
 12025  0043BA  0012               	return		;funcret
 12026  0043BC                     __end_of_algorithmTest:
 12027                           	opt stack 0
 12028                           tblptru	equ	0xFF8
 12029                           tblptrh	equ	0xFF7
 12030                           tblptrl	equ	0xFF6
 12031                           tablat	equ	0xFF5
 12032                           prodh	equ	0xFF4
 12033                           prodl	equ	0xFF3
 12034                           intcon	equ	0xFF2
 12035                           intcon2	equ	0xFF1
 12036                           intcon3	equ	0xFF0
 12037                           postinc0	equ	0xFEE
 12038                           wreg	equ	0xFE8
 12039                           postdec1	equ	0xFE5
 12040                           fsr1l	equ	0xFE1
 12041                           indf2	equ	0xFDF
 12042                           postinc2	equ	0xFDE
 12043                           postdec2	equ	0xFDD
 12044                           fsr2h	equ	0xFDA
 12045                           fsr2l	equ	0xFD9
 12046                           status	equ	0xFD8
 12047                           
 12048 ;; *************** function _actuatorTest *****************
 12049 ;; Defined at:
 12050 ;;		line 202 in file "Test.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;		None
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;  i               1   45[BANK0 ] unsigned char 
 12055 ;;  i               1   67[BANK0 ] unsigned char 
 12056 ;;  i               1   66[BANK0 ] unsigned char 
 12057 ;;  i               1   65[BANK0 ] unsigned char 
 12058 ;;  i               1   64[BANK0 ] unsigned char 
 12059 ;;  i               1   63[BANK0 ] unsigned char 
 12060 ;;  i               1   62[BANK0 ] unsigned char 
 12061 ;;  i               1   61[BANK0 ] unsigned char 
 12062 ;;  i               1   60[BANK0 ] unsigned char 
 12063 ;;  i               1   59[BANK0 ] unsigned char 
 12064 ;;  i               1   58[BANK0 ] unsigned char 
 12065 ;;  i               1   57[BANK0 ] unsigned char 
 12066 ;;  i               1   56[BANK0 ] unsigned char 
 12067 ;;  i               1   55[BANK0 ] unsigned char 
 12068 ;;  i               1   54[BANK0 ] unsigned char 
 12069 ;;  i               1   53[BANK0 ] unsigned char 
 12070 ;;  i               1   52[BANK0 ] unsigned char 
 12071 ;;  i               1   51[BANK0 ] unsigned char 
 12072 ;;  i               1   50[BANK0 ] unsigned char 
 12073 ;;  i               1   49[BANK0 ] unsigned char 
 12074 ;;  i               1   48[BANK0 ] unsigned char 
 12075 ;;  i               1   47[BANK0 ] unsigned char 
 12076 ;;  i               1   46[BANK0 ] unsigned char 
 12077 ;;  i               2   68[BANK0 ] int 
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  1    wreg      void 
 12080 ;; Registers used:
 12081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12082 ;; Tracked objects:
 12083 ;;		On entry : 0/0
 12084 ;;		On exit  : 0/0
 12085 ;;		Unchanged: 0/0
 12086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12088 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;Total ram usage:       27 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:   10
 12094 ;; This function calls:
 12095 ;;		_lcdInst
 12096 ;;		_printf
 12097 ;;		_updateServoPosition
 12098 ;; This function is called by:
 12099 ;;		_Test
 12100 ;; This function uses a non-reentrant model
 12101 ;;
 12102                           
 12103                           	psect	text40
 12104  0008D6                     __ptext40:
 12105                           	opt stack 0
 12106  0008D6                     _actuatorTest:
 12107                           	opt stack 19
 12108                           
 12109                           ;Test.c: 204: int i = 0;
 12110                           
 12111                           ;incstack = 0
 12112  0008D6  0E00               	movlw	0
 12113  0008D8  0100               	movlb	0	; () banked
 12114  0008DA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12115  0008DC  0E00               	movlw	0
 12116  0008DE  6FC4               	movwf	actuatorTest@i& (0+255),b
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;Test.c: 206: (INTCONbits.GIE = 1);
 12120  0008E0  8EF2               	bsf	intcon,7,c	;volatile
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12124  0008E2  0E01               	movlw	1
 12125  0008E4  EC5F  F02B         	call	_lcdInst
 12126  0008E8  0E68               	movlw	104
 12127  0008EA  0100               	movlb	0	; () banked
 12128  0008EC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12129  0008EE  0EE4               	movlw	228
 12130  0008F0                     u9957:
 12131  0008F0  2EE8               	decfsz	wreg,f,c
 12132  0008F2  D7FE               	bra	u9957
 12133  0008F4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12134  0008F6  D7FC               	bra	u9957
 12135  0008F8  F000               	nop	
 12136  0008FA  0E80               	movlw	128
 12137  0008FC  EC5F  F02B         	call	_lcdInst
 12138                           
 12139                           ;Test.c: 208: printf("ACTUATORS");
 12140  000900  0E90               	movlw	low STR_88
 12141  000902  0100               	movlb	0	; () banked
 12142  000904  6F8E               	movwf	printf@f& (0+255),b
 12143  000906  0EFF               	movlw	high STR_88
 12144  000908  0100               	movlb	0	; () banked
 12145  00090A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12146  00090C  EC84  F00B         	call	_printf	;wreg free
 12147                           
 12148                           ;Test.c: 209: lcdInst(0b11000000);;
 12149  000910  0EC0               	movlw	192
 12150  000912  EC5F  F02B         	call	_lcdInst
 12151                           
 12152                           ;Test.c: 210: printf("PUSH TO START");
 12153  000916  0E15               	movlw	low STR_71
 12154  000918  0100               	movlb	0	; () banked
 12155  00091A  6F8E               	movwf	printf@f& (0+255),b
 12156  00091C  0EFF               	movlw	high STR_71
 12157  00091E  0100               	movlb	0	; () banked
 12158  000920  6F8F               	movwf	(printf@f+1)& (0+255),b
 12159  000922  EC84  F00B         	call	_printf	;wreg free
 12160                           
 12161                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 12162  000926  0E05               	movlw	5
 12163  000928  0100               	movlb	0	; () banked
 12164  00092A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12165  00092C  0E0F               	movlw	15
 12166  00092E  0100               	movlb	0	; () banked
 12167  000930  6FAB               	movwf	??_actuatorTest& (0+255),b
 12168  000932  0EF1               	movlw	241
 12169  000934                     u9967:
 12170  000934  2EE8               	decfsz	wreg,f,c
 12171  000936  D7FE               	bra	u9967
 12172  000938  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12173  00093A  D7FC               	bra	u9967
 12174  00093C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12175  00093E  D7FA               	bra	u9967
 12176  000940                     l1258:
 12177  000940  A281               	btfss	3969,1,c	;volatile
 12178  000942  D7FE               	goto	l1258
 12179  000944                     l1261:
 12180  000944  B281               	btfsc	3969,1,c	;volatile
 12181  000946  D7FE               	goto	l1261
 12182                           
 12183                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12184  000948  0E01               	movlw	1
 12185  00094A  EC5F  F02B         	call	_lcdInst
 12186  00094E  0E68               	movlw	104
 12187  000950  0100               	movlb	0	; () banked
 12188  000952  6FAB               	movwf	??_actuatorTest& (0+255),b
 12189  000954  0EE4               	movlw	228
 12190  000956                     u9977:
 12191  000956  2EE8               	decfsz	wreg,f,c
 12192  000958  D7FE               	bra	u9977
 12193  00095A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12194  00095C  D7FC               	bra	u9977
 12195  00095E  F000               	nop	
 12196  000960  0E80               	movlw	128
 12197  000962  EC5F  F02B         	call	_lcdInst
 12198                           
 12199                           ;Test.c: 219: printf("TST: DC MOTORS");
 12200  000966  0ECD               	movlw	low STR_90
 12201  000968  0100               	movlb	0	; () banked
 12202  00096A  6F8E               	movwf	printf@f& (0+255),b
 12203  00096C  0EFE               	movlw	high STR_90
 12204  00096E  0100               	movlb	0	; () banked
 12205  000970  6F8F               	movwf	(printf@f+1)& (0+255),b
 12206  000972  EC84  F00B         	call	_printf	;wreg free
 12207                           
 12208                           ;Test.c: 220: lcdInst(0b11000000);;
 12209  000976  0EC0               	movlw	192
 12210  000978  EC5F  F02B         	call	_lcdInst
 12211                           
 12212                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 12213  00097C  0EEB               	movlw	low STR_91
 12214  00097E  0100               	movlb	0	; () banked
 12215  000980  6F8E               	movwf	printf@f& (0+255),b
 12216  000982  0EFE               	movlw	high STR_91
 12217  000984  0100               	movlb	0	; () banked
 12218  000986  6F8F               	movwf	(printf@f+1)& (0+255),b
 12219  000988  EC84  F00B         	call	_printf	;wreg free
 12220                           
 12221                           ;Test.c: 222: LATBbits.LATB2 = 1;
 12222  00098C  848A               	bsf	3978,2,c	;volatile
 12223                           
 12224                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12225  00098E  0E00               	movlw	0
 12226  000990  0100               	movlb	0	; () banked
 12227  000992  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12228  000994  0E00               	movlw	0
 12229  000996  6FC4               	movwf	actuatorTest@i& (0+255),b
 12230                           
 12231                           ; BSR set to: 0
 12232  000998  0100               	movlb	0	; () banked
 12233  00099A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12234  00099C  D008               	goto	l7972
 12235  00099E  0100               	movlb	0	; () banked
 12236  0009A0  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12237  0009A2  E123               	bnz	l1265
 12238  0009A4  0E05               	movlw	5
 12239  0009A6  0100               	movlb	0	; () banked
 12240  0009A8  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12241  0009AA  B0D8               	btfsc	status,0,c
 12242  0009AC  D01E               	goto	l1265
 12243  0009AE                     l7972:
 12244                           
 12245                           ; BSR set to: 0
 12246  0009AE  0E00               	movlw	0
 12247  0009B0  0100               	movlb	0	; () banked
 12248  0009B2  6FAD               	movwf	actuatorTest@i_1755& (0+255),b
 12249  0009B4                     l7974:
 12250                           
 12251                           ; BSR set to: 0
 12252  0009B4  0E63               	movlw	99
 12253  0009B6  0100               	movlb	0	; () banked
 12254  0009B8  65AD               	cpfsgt	actuatorTest@i_1755& (0+255),b
 12255  0009BA  D001               	goto	l7978
 12256  0009BC  D00C               	goto	l7982
 12257  0009BE                     l7978:
 12258                           
 12259                           ; BSR set to: 0
 12260  0009BE  0E68               	movlw	104
 12261  0009C0  0100               	movlb	0	; () banked
 12262  0009C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12263  0009C4  0EE4               	movlw	228
 12264  0009C6                     u9987:
 12265  0009C6  2EE8               	decfsz	wreg,f,c
 12266  0009C8  D7FE               	bra	u9987
 12267  0009CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12268  0009CC  D7FC               	bra	u9987
 12269  0009CE  F000               	nop	
 12270  0009D0  0100               	movlb	0	; () banked
 12271  0009D2  2BAD               	incf	actuatorTest@i_1755& (0+255),f,b
 12272  0009D4  D7EF               	goto	l7974
 12273  0009D6                     l7982:
 12274                           
 12275                           ; BSR set to: 0
 12276  0009D6  0100               	movlb	0	; () banked
 12277  0009D8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12278  0009DA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12279                           
 12280                           ; BSR set to: 0
 12281  0009DC  0100               	movlb	0	; () banked
 12282  0009DE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12283  0009E0  D7E6               	goto	l7972
 12284  0009E2  0100               	movlb	0	; () banked
 12285  0009E4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12286  0009E6  E101               	bnz	u6540
 12287  0009E8  D7DD               	goto	L12
 12288  0009EA                     u6540:
 12289  0009EA                     l1265:
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;Test.c: 224: LATBbits.LATB2 = 0;
 12293  0009EA  948A               	bcf	3978,2,c	;volatile
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12297  0009EC  0E01               	movlw	1
 12298  0009EE  EC5F  F02B         	call	_lcdInst
 12299  0009F2  0E68               	movlw	104
 12300  0009F4  0100               	movlb	0	; () banked
 12301  0009F6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12302  0009F8  0EE4               	movlw	228
 12303  0009FA                     u9997:
 12304  0009FA  2EE8               	decfsz	wreg,f,c
 12305  0009FC  D7FE               	bra	u9997
 12306  0009FE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12307  000A00  D7FC               	bra	u9997
 12308  000A02  F000               	nop	
 12309  000A04  0E80               	movlw	128
 12310  000A06  EC5F  F02B         	call	_lcdInst
 12311                           
 12312                           ;Test.c: 231: printf("TST: COND SOLN'D");
 12313  000A0A  0E69               	movlw	low STR_92
 12314  000A0C  0100               	movlb	0	; () banked
 12315  000A0E  6F8E               	movwf	printf@f& (0+255),b
 12316  000A10  0EFC               	movlw	high STR_92
 12317  000A12  0100               	movlb	0	; () banked
 12318  000A14  6F8F               	movwf	(printf@f+1)& (0+255),b
 12319  000A16  EC84  F00B         	call	_printf	;wreg free
 12320                           
 12321                           ;Test.c: 232: lcdInst(0b11000000);;
 12322  000A1A  0EC0               	movlw	192
 12323  000A1C  EC5F  F02B         	call	_lcdInst
 12324                           
 12325                           ;Test.c: 233: printf("PIN RA3...");
 12326  000A20  0E65               	movlw	low STR_93
 12327  000A22  0100               	movlb	0	; () banked
 12328  000A24  6F8E               	movwf	printf@f& (0+255),b
 12329  000A26  0EFF               	movlw	high STR_93
 12330  000A28  0100               	movlb	0	; () banked
 12331  000A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12332  000A2C  EC84  F00B         	call	_printf	;wreg free
 12333                           
 12334                           ;Test.c: 234: for(i=0;i<5;i++){
 12335  000A30  0E00               	movlw	0
 12336  000A32  0100               	movlb	0	; () banked
 12337  000A34  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12338  000A36  0E00               	movlw	0
 12339  000A38  6FC4               	movwf	actuatorTest@i& (0+255),b
 12340                           
 12341                           ; BSR set to: 0
 12342  000A3A  0100               	movlb	0	; () banked
 12343  000A3C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12344  000A3E  D008               	goto	l1268
 12345  000A40  0100               	movlb	0	; () banked
 12346  000A42  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12347  000A44  E12C               	bnz	l1269
 12348  000A46  0E05               	movlw	5
 12349  000A48  0100               	movlb	0	; () banked
 12350  000A4A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12351  000A4C  B0D8               	btfsc	status,0,c
 12352  000A4E  D027               	goto	l1269
 12353  000A50                     l1268:
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;Test.c: 235: LATAbits.LATA3 = 1;
 12357  000A50  8689               	bsf	3977,3,c	;volatile
 12358                           
 12359                           ; BSR set to: 0
 12360                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 12361  000A52  0E0D               	movlw	13
 12362  000A54  0100               	movlb	0	; () banked
 12363  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12364  000A58  0E2D               	movlw	45
 12365  000A5A  0100               	movlb	0	; () banked
 12366  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12367  000A5E  0ED7               	movlw	215
 12368  000A60                     u10007:
 12369  000A60  2EE8               	decfsz	wreg,f,c
 12370  000A62  D7FE               	bra	u10007
 12371  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12372  000A66  D7FC               	bra	u10007
 12373  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12374  000A6A  D7FA               	bra	u10007
 12375  000A6C  D000               	nop2	
 12376                           
 12377                           ;Test.c: 237: LATAbits.LATA3 = !1;
 12378  000A6E  9689               	bcf	3977,3,c	;volatile
 12379                           
 12380                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12381  000A70  0E1D               	movlw	29
 12382  000A72  0100               	movlb	0	; () banked
 12383  000A74  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12384  000A76  0E69               	movlw	105
 12385  000A78  0100               	movlb	0	; () banked
 12386  000A7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12387  000A7C  0EA5               	movlw	165
 12388  000A7E                     u10017:
 12389  000A7E  2EE8               	decfsz	wreg,f,c
 12390  000A80  D7FE               	bra	u10017
 12391  000A82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12392  000A84  D7FC               	bra	u10017
 12393  000A86  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12394  000A88  D7FA               	bra	u10017
 12395  000A8A  0100               	movlb	0	; () banked
 12396  000A8C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12397  000A8E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12398  000A90  0100               	movlb	0	; () banked
 12399  000A92  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12400  000A94  D7DD               	goto	l1268
 12401  000A96  0100               	movlb	0	; () banked
 12402  000A98  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12403  000A9A  E101               	bnz	u6560
 12404  000A9C  D7D4               	goto	L13
 12405  000A9E                     u6560:
 12406  000A9E                     l1269:
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;Test.c: 239: }
 12410                           ;Test.c: 240: LATAbits.LATA3 = !1;
 12411  000A9E  9689               	bcf	3977,3,c	;volatile
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12415  000AA0  0E01               	movlw	1
 12416  000AA2  EC5F  F02B         	call	_lcdInst
 12417  000AA6  0E68               	movlw	104
 12418  000AA8  0100               	movlb	0	; () banked
 12419  000AAA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12420  000AAC  0EE4               	movlw	228
 12421  000AAE                     u10027:
 12422  000AAE  2EE8               	decfsz	wreg,f,c
 12423  000AB0  D7FE               	bra	u10027
 12424  000AB2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12425  000AB4  D7FC               	bra	u10027
 12426  000AB6  F000               	nop	
 12427  000AB8  0E80               	movlw	128
 12428  000ABA  EC5F  F02B         	call	_lcdInst
 12429                           
 12430                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 12431  000ABE  0E7A               	movlw	low STR_94
 12432  000AC0  0100               	movlb	0	; () banked
 12433  000AC2  6F8E               	movwf	printf@f& (0+255),b
 12434  000AC4  0EFC               	movlw	high STR_94
 12435  000AC6  0100               	movlb	0	; () banked
 12436  000AC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12437  000ACA  EC84  F00B         	call	_printf	;wreg free
 12438                           
 12439                           ;Test.c: 248: lcdInst(0b11000000);;
 12440  000ACE  0EC0               	movlw	192
 12441  000AD0  EC5F  F02B         	call	_lcdInst
 12442                           
 12443                           ;Test.c: 249: printf("PIN RA4...");
 12444  000AD4  0E70               	movlw	low STR_95
 12445  000AD6  0100               	movlb	0	; () banked
 12446  000AD8  6F8E               	movwf	printf@f& (0+255),b
 12447  000ADA  0EFF               	movlw	high STR_95
 12448  000ADC  0100               	movlb	0	; () banked
 12449  000ADE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12450  000AE0  EC84  F00B         	call	_printf	;wreg free
 12451                           
 12452                           ;Test.c: 250: for(i=0;i<5;i++){
 12453  000AE4  0E00               	movlw	0
 12454  000AE6  0100               	movlb	0	; () banked
 12455  000AE8  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12456  000AEA  0E00               	movlw	0
 12457  000AEC  6FC4               	movwf	actuatorTest@i& (0+255),b
 12458                           
 12459                           ; BSR set to: 0
 12460  000AEE  0100               	movlb	0	; () banked
 12461  000AF0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12462  000AF2  D008               	goto	l1270
 12463  000AF4  0100               	movlb	0	; () banked
 12464  000AF6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12465  000AF8  E12C               	bnz	l1271
 12466  000AFA  0E05               	movlw	5
 12467  000AFC  0100               	movlb	0	; () banked
 12468  000AFE  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12469  000B00  B0D8               	btfsc	status,0,c
 12470  000B02  D027               	goto	l1271
 12471  000B04                     l1270:
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;Test.c: 251: LATAbits.LATA4 = 1;
 12475  000B04  8889               	bsf	3977,4,c	;volatile
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 12479  000B06  0E0D               	movlw	13
 12480  000B08  0100               	movlb	0	; () banked
 12481  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12482  000B0C  0E2D               	movlw	45
 12483  000B0E  0100               	movlb	0	; () banked
 12484  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 12485  000B12  0ED7               	movlw	215
 12486  000B14                     u10037:
 12487  000B14  2EE8               	decfsz	wreg,f,c
 12488  000B16  D7FE               	bra	u10037
 12489  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12490  000B1A  D7FC               	bra	u10037
 12491  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12492  000B1E  D7FA               	bra	u10037
 12493  000B20  D000               	nop2	
 12494                           
 12495                           ;Test.c: 253: LATAbits.LATA4 = !1;
 12496  000B22  9889               	bcf	3977,4,c	;volatile
 12497                           
 12498                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12499  000B24  0E1D               	movlw	29
 12500  000B26  0100               	movlb	0	; () banked
 12501  000B28  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12502  000B2A  0E69               	movlw	105
 12503  000B2C  0100               	movlb	0	; () banked
 12504  000B2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12505  000B30  0EA5               	movlw	165
 12506  000B32                     u10047:
 12507  000B32  2EE8               	decfsz	wreg,f,c
 12508  000B34  D7FE               	bra	u10047
 12509  000B36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12510  000B38  D7FC               	bra	u10047
 12511  000B3A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12512  000B3C  D7FA               	bra	u10047
 12513  000B3E  0100               	movlb	0	; () banked
 12514  000B40  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12515  000B42  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12516  000B44  0100               	movlb	0	; () banked
 12517  000B46  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12518  000B48  D7DD               	goto	l1270
 12519  000B4A  0100               	movlb	0	; () banked
 12520  000B4C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12521  000B4E  E101               	bnz	u6580
 12522  000B50  D7D4               	goto	L14
 12523  000B52                     u6580:
 12524  000B52                     l1271:
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;Test.c: 255: }
 12528                           ;Test.c: 256: LATAbits.LATA4 = !1;
 12529  000B52  9889               	bcf	3977,4,c	;volatile
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12533  000B54  0E01               	movlw	1
 12534  000B56  EC5F  F02B         	call	_lcdInst
 12535  000B5A  0E68               	movlw	104
 12536  000B5C  0100               	movlb	0	; () banked
 12537  000B5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12538  000B60  0EE4               	movlw	228
 12539  000B62                     u10057:
 12540  000B62  2EE8               	decfsz	wreg,f,c
 12541  000B64  D7FE               	bra	u10057
 12542  000B66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12543  000B68  D7FC               	bra	u10057
 12544  000B6A  F000               	nop	
 12545  000B6C  0E80               	movlw	128
 12546  000B6E  EC5F  F02B         	call	_lcdInst
 12547                           
 12548                           ;Test.c: 260: machine_state = Sorting_state;
 12549  000B72  0E01               	movlw	1
 12550  000B74  0100               	movlb	0	; () banked
 12551  000B76  6FFC               	movwf	_machine_state& (0+255),b
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;Test.c: 261: was_low_1 = 0;
 12555  000B78  0E00               	movlw	0
 12556  000B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 12557  000B7C  0E00               	movlw	0
 12558  000B7E  6E77               	movwf	_was_low_1,c	;volatile
 12559                           
 12560                           ; BSR set to: 0
 12561                           ;Test.c: 262: was_low_1 = 0;
 12562  000B80  0E00               	movlw	0
 12563  000B82  6E78               	movwf	_was_low_1+1,c	;volatile
 12564  000B84  0E00               	movlw	0
 12565  000B86  6E77               	movwf	_was_low_1,c	;volatile
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;Test.c: 269: printf("TST: PAN SERVO");
 12569  000B88  0EAF               	movlw	low STR_96
 12570  000B8A  0100               	movlb	0	; () banked
 12571  000B8C  6F8E               	movwf	printf@f& (0+255),b
 12572  000B8E  0EFE               	movlw	high STR_96
 12573  000B90  0100               	movlb	0	; () banked
 12574  000B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 12575  000B94  EC84  F00B         	call	_printf	;wreg free
 12576                           
 12577                           ;Test.c: 270: lcdInst(0b11000000);;
 12578  000B98  0EC0               	movlw	192
 12579  000B9A  EC5F  F02B         	call	_lcdInst
 12580                           
 12581                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 12582  000B9E  0ED0               	movlw	low STR_97
 12583  000BA0  0100               	movlb	0	; () banked
 12584  000BA2  6F8E               	movwf	printf@f& (0+255),b
 12585  000BA4  0EFB               	movlw	high STR_97
 12586  000BA6  0100               	movlb	0	; () banked
 12587  000BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12588  000BAA  EC84  F00B         	call	_printf	;wreg free
 12589                           
 12590                           ;Test.c: 272: updateServoPosition(1200, 1);
 12591  000BAE  0E04               	movlw	4
 12592  000BB0  0100               	movlb	0	; () banked
 12593  000BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12594  000BB4  0EB0               	movlw	176
 12595  000BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12596  000BB8  0E00               	movlw	0
 12597  000BBA  0100               	movlb	0	; () banked
 12598  000BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12599  000BBE  0E01               	movlw	1
 12600  000BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12601  000BC2  EC8B  F024         	call	_updateServoPosition	;wreg free
 12602                           
 12603                           ;Test.c: 273: TMR1ON = 1;
 12604  000BC6  80CD               	bsf	4045,0,c	;volatile
 12605                           
 12606                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12607  000BC8  0E00               	movlw	0
 12608  000BCA  0100               	movlb	0	; () banked
 12609  000BCC  6FAE               	movwf	actuatorTest@i_1762& (0+255),b
 12610  000BCE                     l8058:
 12611                           
 12612                           ; BSR set to: 0
 12613  000BCE  0E63               	movlw	99
 12614  000BD0  0100               	movlb	0	; () banked
 12615  000BD2  65AE               	cpfsgt	actuatorTest@i_1762& (0+255),b
 12616  000BD4  D001               	goto	l8062
 12617  000BD6  D00C               	goto	l8066
 12618  000BD8                     l8062:
 12619                           
 12620                           ; BSR set to: 0
 12621  000BD8  0E68               	movlw	104
 12622  000BDA  0100               	movlb	0	; () banked
 12623  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12624  000BDE  0EE4               	movlw	228
 12625  000BE0                     u10067:
 12626  000BE0  2EE8               	decfsz	wreg,f,c
 12627  000BE2  D7FE               	bra	u10067
 12628  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12629  000BE6  D7FC               	bra	u10067
 12630  000BE8  F000               	nop	
 12631  000BEA  0100               	movlb	0	; () banked
 12632  000BEC  2BAE               	incf	actuatorTest@i_1762& (0+255),f,b
 12633  000BEE  D7EF               	goto	l8058
 12634  000BF0                     l8066:
 12635                           
 12636                           ; BSR set to: 0
 12637  000BF0  0E00               	movlw	0
 12638  000BF2  0100               	movlb	0	; () banked
 12639  000BF4  6FAF               	movwf	actuatorTest@i_1763& (0+255),b
 12640  000BF6                     l8068:
 12641                           
 12642                           ; BSR set to: 0
 12643  000BF6  0E63               	movlw	99
 12644  000BF8  0100               	movlb	0	; () banked
 12645  000BFA  65AF               	cpfsgt	actuatorTest@i_1763& (0+255),b
 12646  000BFC  D001               	goto	l8072
 12647  000BFE  D00C               	goto	l8076
 12648  000C00                     l8072:
 12649                           
 12650                           ; BSR set to: 0
 12651  000C00  0E68               	movlw	104
 12652  000C02  0100               	movlb	0	; () banked
 12653  000C04  6FAB               	movwf	??_actuatorTest& (0+255),b
 12654  000C06  0EE4               	movlw	228
 12655  000C08                     u10077:
 12656  000C08  2EE8               	decfsz	wreg,f,c
 12657  000C0A  D7FE               	bra	u10077
 12658  000C0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12659  000C0E  D7FC               	bra	u10077
 12660  000C10  F000               	nop	
 12661  000C12  0100               	movlb	0	; () banked
 12662  000C14  2BAF               	incf	actuatorTest@i_1763& (0+255),f,b
 12663  000C16  D7EF               	goto	l8068
 12664  000C18                     l8076:
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12668  000C18  0E80               	movlw	128
 12669  000C1A  EC5F  F02B         	call	_lcdInst
 12670  000C1E  0EC0               	movlw	192
 12671  000C20  EC5F  F02B         	call	_lcdInst
 12672                           
 12673                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 12674  000C24  0EBF               	movlw	low STR_98
 12675  000C26  0100               	movlb	0	; () banked
 12676  000C28  6F8E               	movwf	printf@f& (0+255),b
 12677  000C2A  0EFB               	movlw	high STR_98
 12678  000C2C  0100               	movlb	0	; () banked
 12679  000C2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12680  000C30  EC84  F00B         	call	_printf	;wreg free
 12681                           
 12682                           ;Test.c: 278: updateServoPosition(500, 1);
 12683  000C34  0E01               	movlw	1
 12684  000C36  0100               	movlb	0	; () banked
 12685  000C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12686  000C3A  0EF4               	movlw	244
 12687  000C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12688  000C3E  0E00               	movlw	0
 12689  000C40  0100               	movlb	0	; () banked
 12690  000C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12691  000C44  0E01               	movlw	1
 12692  000C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12693  000C48  EC8B  F024         	call	_updateServoPosition	;wreg free
 12694                           
 12695                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12696  000C4C  0E00               	movlw	0
 12697  000C4E  0100               	movlb	0	; () banked
 12698  000C50  6FB0               	movwf	actuatorTest@i_1765& (0+255),b
 12699  000C52                     l8084:
 12700                           
 12701                           ; BSR set to: 0
 12702  000C52  0E63               	movlw	99
 12703  000C54  0100               	movlb	0	; () banked
 12704  000C56  65B0               	cpfsgt	actuatorTest@i_1765& (0+255),b
 12705  000C58  D001               	goto	l8088
 12706  000C5A  D00C               	goto	l8092
 12707  000C5C                     l8088:
 12708                           
 12709                           ; BSR set to: 0
 12710  000C5C  0E68               	movlw	104
 12711  000C5E  0100               	movlb	0	; () banked
 12712  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 12713  000C62  0EE4               	movlw	228
 12714  000C64                     u10087:
 12715  000C64  2EE8               	decfsz	wreg,f,c
 12716  000C66  D7FE               	bra	u10087
 12717  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12718  000C6A  D7FC               	bra	u10087
 12719  000C6C  F000               	nop	
 12720  000C6E  0100               	movlb	0	; () banked
 12721  000C70  2BB0               	incf	actuatorTest@i_1765& (0+255),f,b
 12722  000C72  D7EF               	goto	l8084
 12723  000C74                     l8092:
 12724                           
 12725                           ; BSR set to: 0
 12726  000C74  0E00               	movlw	0
 12727  000C76  0100               	movlb	0	; () banked
 12728  000C78  6FB1               	movwf	actuatorTest@i_1766& (0+255),b
 12729  000C7A                     l8094:
 12730                           
 12731                           ; BSR set to: 0
 12732  000C7A  0E63               	movlw	99
 12733  000C7C  0100               	movlb	0	; () banked
 12734  000C7E  65B1               	cpfsgt	actuatorTest@i_1766& (0+255),b
 12735  000C80  D001               	goto	l8098
 12736  000C82  D00C               	goto	l8102
 12737  000C84                     l8098:
 12738                           
 12739                           ; BSR set to: 0
 12740  000C84  0E68               	movlw	104
 12741  000C86  0100               	movlb	0	; () banked
 12742  000C88  6FAB               	movwf	??_actuatorTest& (0+255),b
 12743  000C8A  0EE4               	movlw	228
 12744  000C8C                     u10097:
 12745  000C8C  2EE8               	decfsz	wreg,f,c
 12746  000C8E  D7FE               	bra	u10097
 12747  000C90  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12748  000C92  D7FC               	bra	u10097
 12749  000C94  F000               	nop	
 12750  000C96  0100               	movlb	0	; () banked
 12751  000C98  2BB1               	incf	actuatorTest@i_1766& (0+255),f,b
 12752  000C9A  D7EF               	goto	l8094
 12753  000C9C                     l8102:
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12757  000C9C  0E80               	movlw	128
 12758  000C9E  EC5F  F02B         	call	_lcdInst
 12759  000CA2  0EC0               	movlw	192
 12760  000CA4  EC5F  F02B         	call	_lcdInst
 12761                           
 12762                           ;Test.c: 282: printf("LEFT -- 2s      ");
 12763  000CA8  0E9D               	movlw	low STR_99
 12764  000CAA  0100               	movlb	0	; () banked
 12765  000CAC  6F8E               	movwf	printf@f& (0+255),b
 12766  000CAE  0EFB               	movlw	high STR_99
 12767  000CB0  0100               	movlb	0	; () banked
 12768  000CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12769  000CB4  EC84  F00B         	call	_printf	;wreg free
 12770                           
 12771                           ;Test.c: 283: updateServoPosition(2400, 1);
 12772  000CB8  0E09               	movlw	9
 12773  000CBA  0100               	movlb	0	; () banked
 12774  000CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12775  000CBE  0E60               	movlw	96
 12776  000CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12777  000CC2  0E00               	movlw	0
 12778  000CC4  0100               	movlb	0	; () banked
 12779  000CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12780  000CC8  0E01               	movlw	1
 12781  000CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12782  000CCC  EC8B  F024         	call	_updateServoPosition	;wreg free
 12783                           
 12784                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12785  000CD0  0E00               	movlw	0
 12786  000CD2  0100               	movlb	0	; () banked
 12787  000CD4  6FB2               	movwf	actuatorTest@i_1768& (0+255),b
 12788  000CD6                     l8110:
 12789                           
 12790                           ; BSR set to: 0
 12791  000CD6  0E63               	movlw	99
 12792  000CD8  0100               	movlb	0	; () banked
 12793  000CDA  65B2               	cpfsgt	actuatorTest@i_1768& (0+255),b
 12794  000CDC  D001               	goto	l8114
 12795  000CDE  D00C               	goto	l8118
 12796  000CE0                     l8114:
 12797                           
 12798                           ; BSR set to: 0
 12799  000CE0  0E68               	movlw	104
 12800  000CE2  0100               	movlb	0	; () banked
 12801  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12802  000CE6  0EE4               	movlw	228
 12803  000CE8                     u10107:
 12804  000CE8  2EE8               	decfsz	wreg,f,c
 12805  000CEA  D7FE               	bra	u10107
 12806  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12807  000CEE  D7FC               	bra	u10107
 12808  000CF0  F000               	nop	
 12809  000CF2  0100               	movlb	0	; () banked
 12810  000CF4  2BB2               	incf	actuatorTest@i_1768& (0+255),f,b
 12811  000CF6  D7EF               	goto	l8110
 12812  000CF8                     l8118:
 12813                           
 12814                           ; BSR set to: 0
 12815  000CF8  0E00               	movlw	0
 12816  000CFA  0100               	movlb	0	; () banked
 12817  000CFC  6FB3               	movwf	actuatorTest@i_1769& (0+255),b
 12818  000CFE                     l8120:
 12819                           
 12820                           ; BSR set to: 0
 12821  000CFE  0E63               	movlw	99
 12822  000D00  0100               	movlb	0	; () banked
 12823  000D02  65B3               	cpfsgt	actuatorTest@i_1769& (0+255),b
 12824  000D04  D001               	goto	l8124
 12825  000D06  D00C               	goto	l8128
 12826  000D08                     l8124:
 12827                           
 12828                           ; BSR set to: 0
 12829  000D08  0E68               	movlw	104
 12830  000D0A  0100               	movlb	0	; () banked
 12831  000D0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12832  000D0E  0EE4               	movlw	228
 12833  000D10                     u10117:
 12834  000D10  2EE8               	decfsz	wreg,f,c
 12835  000D12  D7FE               	bra	u10117
 12836  000D14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12837  000D16  D7FC               	bra	u10117
 12838  000D18  F000               	nop	
 12839  000D1A  0100               	movlb	0	; () banked
 12840  000D1C  2BB3               	incf	actuatorTest@i_1769& (0+255),f,b
 12841  000D1E  D7EF               	goto	l8120
 12842  000D20                     l8128:
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12846  000D20  0E80               	movlw	128
 12847  000D22  EC5F  F02B         	call	_lcdInst
 12848  000D26  0EC0               	movlw	192
 12849  000D28  EC5F  F02B         	call	_lcdInst
 12850                           
 12851                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 12852  000D2C  0E25               	movlw	low STR_100
 12853  000D2E  0100               	movlb	0	; () banked
 12854  000D30  6F8E               	movwf	printf@f& (0+255),b
 12855  000D32  0EFC               	movlw	high STR_100
 12856  000D34  0100               	movlb	0	; () banked
 12857  000D36  6F8F               	movwf	(printf@f+1)& (0+255),b
 12858  000D38  EC84  F00B         	call	_printf	;wreg free
 12859                           
 12860                           ;Test.c: 288: updateServoPosition(1670, 1);
 12861  000D3C  0E06               	movlw	6
 12862  000D3E  0100               	movlb	0	; () banked
 12863  000D40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12864  000D42  0E86               	movlw	134
 12865  000D44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12866  000D46  0E00               	movlw	0
 12867  000D48  0100               	movlb	0	; () banked
 12868  000D4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12869  000D4C  0E01               	movlw	1
 12870  000D4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12871  000D50  EC8B  F024         	call	_updateServoPosition	;wreg free
 12872                           
 12873                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12874  000D54  0E00               	movlw	0
 12875  000D56  0100               	movlb	0	; () banked
 12876  000D58  6FB4               	movwf	actuatorTest@i_1771& (0+255),b
 12877  000D5A                     l8136:
 12878                           
 12879                           ; BSR set to: 0
 12880  000D5A  0E63               	movlw	99
 12881  000D5C  0100               	movlb	0	; () banked
 12882  000D5E  65B4               	cpfsgt	actuatorTest@i_1771& (0+255),b
 12883  000D60  D001               	goto	l8140
 12884  000D62  D00C               	goto	l8144
 12885  000D64                     l8140:
 12886                           
 12887                           ; BSR set to: 0
 12888  000D64  0E68               	movlw	104
 12889  000D66  0100               	movlb	0	; () banked
 12890  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 12891  000D6A  0EE4               	movlw	228
 12892  000D6C                     u10127:
 12893  000D6C  2EE8               	decfsz	wreg,f,c
 12894  000D6E  D7FE               	bra	u10127
 12895  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12896  000D72  D7FC               	bra	u10127
 12897  000D74  F000               	nop	
 12898  000D76  0100               	movlb	0	; () banked
 12899  000D78  2BB4               	incf	actuatorTest@i_1771& (0+255),f,b
 12900  000D7A  D7EF               	goto	l8136
 12901  000D7C                     l8144:
 12902                           
 12903                           ; BSR set to: 0
 12904  000D7C  0E00               	movlw	0
 12905  000D7E  0100               	movlb	0	; () banked
 12906  000D80  6FB5               	movwf	actuatorTest@i_1772& (0+255),b
 12907  000D82                     l8146:
 12908                           
 12909                           ; BSR set to: 0
 12910  000D82  0E63               	movlw	99
 12911  000D84  0100               	movlb	0	; () banked
 12912  000D86  65B5               	cpfsgt	actuatorTest@i_1772& (0+255),b
 12913  000D88  D001               	goto	l8150
 12914  000D8A  D00C               	goto	l8154
 12915  000D8C                     l8150:
 12916                           
 12917                           ; BSR set to: 0
 12918  000D8C  0E68               	movlw	104
 12919  000D8E  0100               	movlb	0	; () banked
 12920  000D90  6FAB               	movwf	??_actuatorTest& (0+255),b
 12921  000D92  0EE4               	movlw	228
 12922  000D94                     u10137:
 12923  000D94  2EE8               	decfsz	wreg,f,c
 12924  000D96  D7FE               	bra	u10137
 12925  000D98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12926  000D9A  D7FC               	bra	u10137
 12927  000D9C  F000               	nop	
 12928  000D9E  0100               	movlb	0	; () banked
 12929  000DA0  2BB5               	incf	actuatorTest@i_1772& (0+255),f,b
 12930  000DA2  D7EF               	goto	l8146
 12931  000DA4                     l8154:
 12932                           
 12933                           ; BSR set to: 0
 12934                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12935  000DA4  0E80               	movlw	128
 12936  000DA6  EC5F  F02B         	call	_lcdInst
 12937  000DAA  0EC0               	movlw	192
 12938  000DAC  EC5F  F02B         	call	_lcdInst
 12939                           
 12940                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 12941  000DB0  0E36               	movlw	low STR_101
 12942  000DB2  0100               	movlb	0	; () banked
 12943  000DB4  6F8E               	movwf	printf@f& (0+255),b
 12944  000DB6  0EFC               	movlw	high STR_101
 12945  000DB8  0100               	movlb	0	; () banked
 12946  000DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12947  000DBC  EC84  F00B         	call	_printf	;wreg free
 12948                           
 12949                           ;Test.c: 293: updateServoPosition(850, 1);
 12950  000DC0  0E03               	movlw	3
 12951  000DC2  0100               	movlb	0	; () banked
 12952  000DC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12953  000DC6  0E52               	movlw	82
 12954  000DC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12955  000DCA  0E00               	movlw	0
 12956  000DCC  0100               	movlb	0	; () banked
 12957  000DCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12958  000DD0  0E01               	movlw	1
 12959  000DD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12960  000DD4  EC8B  F024         	call	_updateServoPosition	;wreg free
 12961                           
 12962                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12963  000DD8  0E00               	movlw	0
 12964  000DDA  0100               	movlb	0	; () banked
 12965  000DDC  6FB6               	movwf	actuatorTest@i_1774& (0+255),b
 12966  000DDE                     l8162:
 12967                           
 12968                           ; BSR set to: 0
 12969  000DDE  0E63               	movlw	99
 12970  000DE0  0100               	movlb	0	; () banked
 12971  000DE2  65B6               	cpfsgt	actuatorTest@i_1774& (0+255),b
 12972  000DE4  D001               	goto	l8166
 12973  000DE6  D00C               	goto	l8170
 12974  000DE8                     l8166:
 12975                           
 12976                           ; BSR set to: 0
 12977  000DE8  0E68               	movlw	104
 12978  000DEA  0100               	movlb	0	; () banked
 12979  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12980  000DEE  0EE4               	movlw	228
 12981  000DF0                     u10147:
 12982  000DF0  2EE8               	decfsz	wreg,f,c
 12983  000DF2  D7FE               	bra	u10147
 12984  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12985  000DF6  D7FC               	bra	u10147
 12986  000DF8  F000               	nop	
 12987  000DFA  0100               	movlb	0	; () banked
 12988  000DFC  2BB6               	incf	actuatorTest@i_1774& (0+255),f,b
 12989  000DFE  D7EF               	goto	l8162
 12990  000E00                     l8170:
 12991                           
 12992                           ; BSR set to: 0
 12993  000E00  0E00               	movlw	0
 12994  000E02  0100               	movlb	0	; () banked
 12995  000E04  6FB7               	movwf	actuatorTest@i_1775& (0+255),b
 12996  000E06                     l8172:
 12997                           
 12998                           ; BSR set to: 0
 12999  000E06  0E63               	movlw	99
 13000  000E08  0100               	movlb	0	; () banked
 13001  000E0A  65B7               	cpfsgt	actuatorTest@i_1775& (0+255),b
 13002  000E0C  D001               	goto	l8176
 13003  000E0E  D00C               	goto	l8180
 13004  000E10                     l8176:
 13005                           
 13006                           ; BSR set to: 0
 13007  000E10  0E68               	movlw	104
 13008  000E12  0100               	movlb	0	; () banked
 13009  000E14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13010  000E16  0EE4               	movlw	228
 13011  000E18                     u10157:
 13012  000E18  2EE8               	decfsz	wreg,f,c
 13013  000E1A  D7FE               	bra	u10157
 13014  000E1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13015  000E1E  D7FC               	bra	u10157
 13016  000E20  F000               	nop	
 13017  000E22  0100               	movlb	0	; () banked
 13018  000E24  2BB7               	incf	actuatorTest@i_1775& (0+255),f,b
 13019  000E26  D7EF               	goto	l8172
 13020  000E28                     l8180:
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13024  000E28  0E80               	movlw	128
 13025  000E2A  EC5F  F02B         	call	_lcdInst
 13026  000E2E  0EC0               	movlw	192
 13027  000E30  EC5F  F02B         	call	_lcdInst
 13028                           
 13029                           ;Test.c: 297: printf("MID -- 2s       ");
 13030  000E34  0E7B               	movlw	low STR_102
 13031  000E36  0100               	movlb	0	; () banked
 13032  000E38  6F8E               	movwf	printf@f& (0+255),b
 13033  000E3A  0EFB               	movlw	high STR_102
 13034  000E3C  0100               	movlb	0	; () banked
 13035  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13036  000E40  EC84  F00B         	call	_printf	;wreg free
 13037                           
 13038                           ;Test.c: 298: updateServoPosition(1200, 1);
 13039  000E44  0E04               	movlw	4
 13040  000E46  0100               	movlb	0	; () banked
 13041  000E48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13042  000E4A  0EB0               	movlw	176
 13043  000E4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13044  000E4E  0E00               	movlw	0
 13045  000E50  0100               	movlb	0	; () banked
 13046  000E52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13047  000E54  0E01               	movlw	1
 13048  000E56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13049  000E58  EC8B  F024         	call	_updateServoPosition	;wreg free
 13050                           
 13051                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13052  000E5C  0E00               	movlw	0
 13053  000E5E  0100               	movlb	0	; () banked
 13054  000E60  6FB8               	movwf	actuatorTest@i_1777& (0+255),b
 13055  000E62                     l8188:
 13056                           
 13057                           ; BSR set to: 0
 13058  000E62  0E63               	movlw	99
 13059  000E64  0100               	movlb	0	; () banked
 13060  000E66  65B8               	cpfsgt	actuatorTest@i_1777& (0+255),b
 13061  000E68  D001               	goto	l8192
 13062  000E6A  D00C               	goto	l8196
 13063  000E6C                     l8192:
 13064                           
 13065                           ; BSR set to: 0
 13066  000E6C  0E68               	movlw	104
 13067  000E6E  0100               	movlb	0	; () banked
 13068  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 13069  000E72  0EE4               	movlw	228
 13070  000E74                     u10167:
 13071  000E74  2EE8               	decfsz	wreg,f,c
 13072  000E76  D7FE               	bra	u10167
 13073  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13074  000E7A  D7FC               	bra	u10167
 13075  000E7C  F000               	nop	
 13076  000E7E  0100               	movlb	0	; () banked
 13077  000E80  2BB8               	incf	actuatorTest@i_1777& (0+255),f,b
 13078  000E82  D7EF               	goto	l8188
 13079  000E84                     l8196:
 13080                           
 13081                           ; BSR set to: 0
 13082  000E84  0E00               	movlw	0
 13083  000E86  0100               	movlb	0	; () banked
 13084  000E88  6FB9               	movwf	actuatorTest@i_1778& (0+255),b
 13085  000E8A                     l8198:
 13086                           
 13087                           ; BSR set to: 0
 13088  000E8A  0E63               	movlw	99
 13089  000E8C  0100               	movlb	0	; () banked
 13090  000E8E  65B9               	cpfsgt	actuatorTest@i_1778& (0+255),b
 13091  000E90  D001               	goto	l8202
 13092  000E92  D00C               	goto	l1295
 13093  000E94                     l8202:
 13094                           
 13095                           ; BSR set to: 0
 13096  000E94  0E68               	movlw	104
 13097  000E96  0100               	movlb	0	; () banked
 13098  000E98  6FAB               	movwf	??_actuatorTest& (0+255),b
 13099  000E9A  0EE4               	movlw	228
 13100  000E9C                     u10177:
 13101  000E9C  2EE8               	decfsz	wreg,f,c
 13102  000E9E  D7FE               	bra	u10177
 13103  000EA0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13104  000EA2  D7FC               	bra	u10177
 13105  000EA4  F000               	nop	
 13106  000EA6  0100               	movlb	0	; () banked
 13107  000EA8  2BB9               	incf	actuatorTest@i_1778& (0+255),f,b
 13108  000EAA  D7EF               	goto	l8198
 13109  000EAC                     l1295:
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;Test.c: 300: TMR1ON = 0;
 13113  000EAC  90CD               	bcf	4045,0,c	;volatile
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;Test.c: 307: printf("TST: TILT SERVO");
 13117  000EAE  0E44               	movlw	low STR_103
 13118  000EB0  0100               	movlb	0	; () banked
 13119  000EB2  6F8E               	movwf	printf@f& (0+255),b
 13120  000EB4  0EFE               	movlw	high STR_103
 13121  000EB6  0100               	movlb	0	; () banked
 13122  000EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13123  000EBA  EC84  F00B         	call	_printf	;wreg free
 13124                           
 13125                           ;Test.c: 308: lcdInst(0b11000000);;
 13126  000EBE  0EC0               	movlw	192
 13127  000EC0  EC5F  F02B         	call	_lcdInst
 13128                           
 13129                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 13130  000EC4  0EAE               	movlw	low STR_104
 13131  000EC6  0100               	movlb	0	; () banked
 13132  000EC8  6F8E               	movwf	printf@f& (0+255),b
 13133  000ECA  0EFB               	movlw	high STR_104
 13134  000ECC  0100               	movlb	0	; () banked
 13135  000ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13136  000ED0  EC84  F00B         	call	_printf	;wreg free
 13137                           
 13138                           ;Test.c: 310: updateServoPosition(1050, 3);
 13139  000ED4  0E04               	movlw	4
 13140  000ED6  0100               	movlb	0	; () banked
 13141  000ED8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13142  000EDA  0E1A               	movlw	26
 13143  000EDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13144  000EDE  0E00               	movlw	0
 13145  000EE0  0100               	movlb	0	; () banked
 13146  000EE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13147  000EE4  0E03               	movlw	3
 13148  000EE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13149  000EE8  EC8B  F024         	call	_updateServoPosition	;wreg free
 13150                           
 13151                           ;Test.c: 311: TMR3ON = 1;
 13152  000EEC  80B1               	bsf	4017,0,c	;volatile
 13153                           
 13154                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13155  000EEE  0E00               	movlw	0
 13156  000EF0  0100               	movlb	0	; () banked
 13157  000EF2  6FBA               	movwf	actuatorTest@i_1781& (0+255),b
 13158  000EF4                     l8216:
 13159                           
 13160                           ; BSR set to: 0
 13161  000EF4  0E63               	movlw	99
 13162  000EF6  0100               	movlb	0	; () banked
 13163  000EF8  65BA               	cpfsgt	actuatorTest@i_1781& (0+255),b
 13164  000EFA  D001               	goto	l8220
 13165  000EFC  D00C               	goto	l8224
 13166  000EFE                     l8220:
 13167                           
 13168                           ; BSR set to: 0
 13169  000EFE  0E68               	movlw	104
 13170  000F00  0100               	movlb	0	; () banked
 13171  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 13172  000F04  0EE4               	movlw	228
 13173  000F06                     u10187:
 13174  000F06  2EE8               	decfsz	wreg,f,c
 13175  000F08  D7FE               	bra	u10187
 13176  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13177  000F0C  D7FC               	bra	u10187
 13178  000F0E  F000               	nop	
 13179  000F10  0100               	movlb	0	; () banked
 13180  000F12  2BBA               	incf	actuatorTest@i_1781& (0+255),f,b
 13181  000F14  D7EF               	goto	l8216
 13182  000F16                     l8224:
 13183                           
 13184                           ; BSR set to: 0
 13185  000F16  0E00               	movlw	0
 13186  000F18  0100               	movlb	0	; () banked
 13187  000F1A  6FBB               	movwf	actuatorTest@i_1782& (0+255),b
 13188  000F1C                     l8226:
 13189                           
 13190                           ; BSR set to: 0
 13191  000F1C  0E63               	movlw	99
 13192  000F1E  0100               	movlb	0	; () banked
 13193  000F20  65BB               	cpfsgt	actuatorTest@i_1782& (0+255),b
 13194  000F22  D001               	goto	l8230
 13195  000F24  D00C               	goto	l8234
 13196  000F26                     l8230:
 13197                           
 13198                           ; BSR set to: 0
 13199  000F26  0E68               	movlw	104
 13200  000F28  0100               	movlb	0	; () banked
 13201  000F2A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13202  000F2C  0EE4               	movlw	228
 13203  000F2E                     u10197:
 13204  000F2E  2EE8               	decfsz	wreg,f,c
 13205  000F30  D7FE               	bra	u10197
 13206  000F32  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13207  000F34  D7FC               	bra	u10197
 13208  000F36  F000               	nop	
 13209  000F38  0100               	movlb	0	; () banked
 13210  000F3A  2BBB               	incf	actuatorTest@i_1782& (0+255),f,b
 13211  000F3C  D7EF               	goto	l8226
 13212  000F3E                     l8234:
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13216  000F3E  0E80               	movlw	128
 13217  000F40  EC5F  F02B         	call	_lcdInst
 13218  000F44  0EC0               	movlw	192
 13219  000F46  EC5F  F02B         	call	_lcdInst
 13220                           
 13221                           ;Test.c: 315: printf("DROP -- 2s      ");
 13222  000F4A  0E8C               	movlw	low STR_105
 13223  000F4C  0100               	movlb	0	; () banked
 13224  000F4E  6F8E               	movwf	printf@f& (0+255),b
 13225  000F50  0EFB               	movlw	high STR_105
 13226  000F52  0100               	movlb	0	; () banked
 13227  000F54  6F8F               	movwf	(printf@f+1)& (0+255),b
 13228  000F56  EC84  F00B         	call	_printf	;wreg free
 13229                           
 13230                           ;Test.c: 316: updateServoPosition(1260, 3);
 13231  000F5A  0E04               	movlw	4
 13232  000F5C  0100               	movlb	0	; () banked
 13233  000F5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13234  000F60  0EEC               	movlw	236
 13235  000F62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13236  000F64  0E00               	movlw	0
 13237  000F66  0100               	movlb	0	; () banked
 13238  000F68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13239  000F6A  0E03               	movlw	3
 13240  000F6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13241  000F6E  EC8B  F024         	call	_updateServoPosition	;wreg free
 13242                           
 13243                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13244  000F72  0E00               	movlw	0
 13245  000F74  0100               	movlb	0	; () banked
 13246  000F76  6FBC               	movwf	actuatorTest@i_1784& (0+255),b
 13247  000F78                     l8242:
 13248                           
 13249                           ; BSR set to: 0
 13250  000F78  0E63               	movlw	99
 13251  000F7A  0100               	movlb	0	; () banked
 13252  000F7C  65BC               	cpfsgt	actuatorTest@i_1784& (0+255),b
 13253  000F7E  D001               	goto	l8246
 13254  000F80  D00C               	goto	l8250
 13255  000F82                     l8246:
 13256                           
 13257                           ; BSR set to: 0
 13258  000F82  0E68               	movlw	104
 13259  000F84  0100               	movlb	0	; () banked
 13260  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 13261  000F88  0EE4               	movlw	228
 13262  000F8A                     u10207:
 13263  000F8A  2EE8               	decfsz	wreg,f,c
 13264  000F8C  D7FE               	bra	u10207
 13265  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13266  000F90  D7FC               	bra	u10207
 13267  000F92  F000               	nop	
 13268  000F94  0100               	movlb	0	; () banked
 13269  000F96  2BBC               	incf	actuatorTest@i_1784& (0+255),f,b
 13270  000F98  D7EF               	goto	l8242
 13271  000F9A                     l8250:
 13272                           
 13273                           ; BSR set to: 0
 13274  000F9A  0E00               	movlw	0
 13275  000F9C  0100               	movlb	0	; () banked
 13276  000F9E  6FBD               	movwf	actuatorTest@i_1785& (0+255),b
 13277  000FA0                     l8252:
 13278                           
 13279                           ; BSR set to: 0
 13280  000FA0  0E63               	movlw	99
 13281  000FA2  0100               	movlb	0	; () banked
 13282  000FA4  65BD               	cpfsgt	actuatorTest@i_1785& (0+255),b
 13283  000FA6  D001               	goto	l8256
 13284  000FA8  D00C               	goto	l8260
 13285  000FAA                     l8256:
 13286                           
 13287                           ; BSR set to: 0
 13288  000FAA  0E68               	movlw	104
 13289  000FAC  0100               	movlb	0	; () banked
 13290  000FAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13291  000FB0  0EE4               	movlw	228
 13292  000FB2                     u10217:
 13293  000FB2  2EE8               	decfsz	wreg,f,c
 13294  000FB4  D7FE               	bra	u10217
 13295  000FB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13296  000FB8  D7FC               	bra	u10217
 13297  000FBA  F000               	nop	
 13298  000FBC  0100               	movlb	0	; () banked
 13299  000FBE  2BBD               	incf	actuatorTest@i_1785& (0+255),f,b
 13300  000FC0  D7EF               	goto	l8252
 13301  000FC2                     l8260:
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13305  000FC2  0E80               	movlw	128
 13306  000FC4  EC5F  F02B         	call	_lcdInst
 13307  000FC8  0EC0               	movlw	192
 13308  000FCA  EC5F  F02B         	call	_lcdInst
 13309                           
 13310                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 13311  000FCE  0EAE               	movlw	low STR_104
 13312  000FD0  0100               	movlb	0	; () banked
 13313  000FD2  6F8E               	movwf	printf@f& (0+255),b
 13314  000FD4  0EFB               	movlw	high STR_104
 13315  000FD6  0100               	movlb	0	; () banked
 13316  000FD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13317  000FDA  EC84  F00B         	call	_printf	;wreg free
 13318                           
 13319                           ;Test.c: 321: updateServoPosition(1050, 3);
 13320  000FDE  0E04               	movlw	4
 13321  000FE0  0100               	movlb	0	; () banked
 13322  000FE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13323  000FE4  0E1A               	movlw	26
 13324  000FE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13325  000FE8  0E00               	movlw	0
 13326  000FEA  0100               	movlb	0	; () banked
 13327  000FEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13328  000FEE  0E03               	movlw	3
 13329  000FF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13330  000FF2  EC8B  F024         	call	_updateServoPosition	;wreg free
 13331                           
 13332                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13333  000FF6  0E00               	movlw	0
 13334  000FF8  0100               	movlb	0	; () banked
 13335  000FFA  6FBE               	movwf	actuatorTest@i_1787& (0+255),b
 13336  000FFC                     l8268:
 13337                           
 13338                           ; BSR set to: 0
 13339  000FFC  0E63               	movlw	99
 13340  000FFE  0100               	movlb	0	; () banked
 13341  001000  65BE               	cpfsgt	actuatorTest@i_1787& (0+255),b
 13342  001002  D001               	goto	l8272
 13343  001004  D00C               	goto	l8276
 13344  001006                     l8272:
 13345                           
 13346                           ; BSR set to: 0
 13347  001006  0E68               	movlw	104
 13348  001008  0100               	movlb	0	; () banked
 13349  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13350  00100C  0EE4               	movlw	228
 13351  00100E                     u10227:
 13352  00100E  2EE8               	decfsz	wreg,f,c
 13353  001010  D7FE               	bra	u10227
 13354  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13355  001014  D7FC               	bra	u10227
 13356  001016  F000               	nop	
 13357  001018  0100               	movlb	0	; () banked
 13358  00101A  2BBE               	incf	actuatorTest@i_1787& (0+255),f,b
 13359  00101C  D7EF               	goto	l8268
 13360  00101E                     l8276:
 13361                           
 13362                           ; BSR set to: 0
 13363  00101E  0E00               	movlw	0
 13364  001020  0100               	movlb	0	; () banked
 13365  001022  6FBF               	movwf	actuatorTest@i_1788& (0+255),b
 13366  001024                     l8278:
 13367                           
 13368                           ; BSR set to: 0
 13369  001024  0E63               	movlw	99
 13370  001026  0100               	movlb	0	; () banked
 13371  001028  65BF               	cpfsgt	actuatorTest@i_1788& (0+255),b
 13372  00102A  D001               	goto	l8282
 13373  00102C  D00C               	goto	l1307
 13374  00102E                     l8282:
 13375                           
 13376                           ; BSR set to: 0
 13377  00102E  0E68               	movlw	104
 13378  001030  0100               	movlb	0	; () banked
 13379  001032  6FAB               	movwf	??_actuatorTest& (0+255),b
 13380  001034  0EE4               	movlw	228
 13381  001036                     u10237:
 13382  001036  2EE8               	decfsz	wreg,f,c
 13383  001038  D7FE               	bra	u10237
 13384  00103A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13385  00103C  D7FC               	bra	u10237
 13386  00103E  F000               	nop	
 13387  001040  0100               	movlb	0	; () banked
 13388  001042  2BBF               	incf	actuatorTest@i_1788& (0+255),f,b
 13389  001044  D7EF               	goto	l8278
 13390  001046                     l1307:
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;Test.c: 323: TMR3ON = 0;
 13394  001046  90B1               	bcf	4017,0,c	;volatile
 13395                           
 13396                           ;Test.c: 324: (INTCONbits.GIE = 0);
 13397  001048  9EF2               	bcf	intcon,7,c	;volatile
 13398                           
 13399                           ; BSR set to: 0
 13400                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13401  00104A  0E01               	movlw	1
 13402  00104C  EC5F  F02B         	call	_lcdInst
 13403  001050  0E68               	movlw	104
 13404  001052  0100               	movlb	0	; () banked
 13405  001054  6FAB               	movwf	??_actuatorTest& (0+255),b
 13406  001056  0EE4               	movlw	228
 13407  001058                     u10247:
 13408  001058  2EE8               	decfsz	wreg,f,c
 13409  00105A  D7FE               	bra	u10247
 13410  00105C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13411  00105E  D7FC               	bra	u10247
 13412  001060  F000               	nop	
 13413  001062  0E80               	movlw	128
 13414  001064  EC5F  F02B         	call	_lcdInst
 13415                           
 13416                           ;Test.c: 330: printf("TST: CAM SERVO");
 13417  001068  0EA0               	movlw	low STR_107
 13418  00106A  0100               	movlb	0	; () banked
 13419  00106C  6F8E               	movwf	printf@f& (0+255),b
 13420  00106E  0EFE               	movlw	high STR_107
 13421  001070  0100               	movlb	0	; () banked
 13422  001072  6F8F               	movwf	(printf@f+1)& (0+255),b
 13423  001074  EC84  F00B         	call	_printf	;wreg free
 13424                           
 13425                           ;Test.c: 331: lcdInst(0b11000000);;
 13426  001078  0EC0               	movlw	192
 13427  00107A  EC5F  F02B         	call	_lcdInst
 13428                           
 13429                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 13430  00107E  0E82               	movlw	low STR_108
 13431  001080  0100               	movlb	0	; () banked
 13432  001082  6F8E               	movwf	printf@f& (0+255),b
 13433  001084  0EFE               	movlw	high STR_108
 13434  001086  0100               	movlb	0	; () banked
 13435  001088  6F8F               	movwf	(printf@f+1)& (0+255),b
 13436  00108A  EC84  F00B         	call	_printf	;wreg free
 13437                           
 13438                           ;Test.c: 333: LATCbits.LATC0 = 1;
 13439  00108E  808B               	bsf	3979,0,c	;volatile
 13440                           
 13441                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13442  001090  0E00               	movlw	0
 13443  001092  0100               	movlb	0	; () banked
 13444  001094  6FC0               	movwf	actuatorTest@i_1791& (0+255),b
 13445  001096                     l8302:
 13446                           
 13447                           ; BSR set to: 0
 13448  001096  0E63               	movlw	99
 13449  001098  0100               	movlb	0	; () banked
 13450  00109A  65C0               	cpfsgt	actuatorTest@i_1791& (0+255),b
 13451  00109C  D001               	goto	l8306
 13452  00109E  D00C               	goto	l8310
 13453  0010A0                     l8306:
 13454                           
 13455                           ; BSR set to: 0
 13456  0010A0  0E68               	movlw	104
 13457  0010A2  0100               	movlb	0	; () banked
 13458  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 13459  0010A6  0EE4               	movlw	228
 13460  0010A8                     u10257:
 13461  0010A8  2EE8               	decfsz	wreg,f,c
 13462  0010AA  D7FE               	bra	u10257
 13463  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13464  0010AE  D7FC               	bra	u10257
 13465  0010B0  F000               	nop	
 13466  0010B2  0100               	movlb	0	; () banked
 13467  0010B4  2BC0               	incf	actuatorTest@i_1791& (0+255),f,b
 13468  0010B6  D7EF               	goto	l8302
 13469  0010B8                     l8310:
 13470                           
 13471                           ; BSR set to: 0
 13472  0010B8  0E00               	movlw	0
 13473  0010BA  0100               	movlb	0	; () banked
 13474  0010BC  6FC1               	movwf	actuatorTest@i_1792& (0+255),b
 13475  0010BE                     l8312:
 13476                           
 13477                           ; BSR set to: 0
 13478  0010BE  0E63               	movlw	99
 13479  0010C0  0100               	movlb	0	; () banked
 13480  0010C2  65C1               	cpfsgt	actuatorTest@i_1792& (0+255),b
 13481  0010C4  D001               	goto	l8316
 13482  0010C6  D00C               	goto	l8320
 13483  0010C8                     l8316:
 13484                           
 13485                           ; BSR set to: 0
 13486  0010C8  0E68               	movlw	104
 13487  0010CA  0100               	movlb	0	; () banked
 13488  0010CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13489  0010CE  0EE4               	movlw	228
 13490  0010D0                     u10267:
 13491  0010D0  2EE8               	decfsz	wreg,f,c
 13492  0010D2  D7FE               	bra	u10267
 13493  0010D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13494  0010D6  D7FC               	bra	u10267
 13495  0010D8  F000               	nop	
 13496  0010DA  0100               	movlb	0	; () banked
 13497  0010DC  2BC1               	incf	actuatorTest@i_1792& (0+255),f,b
 13498  0010DE  D7EF               	goto	l8312
 13499  0010E0                     l8320:
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13503  0010E0  0E80               	movlw	128
 13504  0010E2  EC5F  F02B         	call	_lcdInst
 13505  0010E6  0EC0               	movlw	192
 13506  0010E8  EC5F  F02B         	call	_lcdInst
 13507                           
 13508                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 13509  0010EC  0E73               	movlw	low STR_109
 13510  0010EE  0100               	movlb	0	; () banked
 13511  0010F0  6F8E               	movwf	printf@f& (0+255),b
 13512  0010F2  0EFE               	movlw	high STR_109
 13513  0010F4  0100               	movlb	0	; () banked
 13514  0010F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13515  0010F8  EC84  F00B         	call	_printf	;wreg free
 13516                           
 13517                           ;Test.c: 339: for(i=0;i<10000;i++)
 13518  0010FC  0E00               	movlw	0
 13519  0010FE  0100               	movlb	0	; () banked
 13520  001100  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13521  001102  0E00               	movlw	0
 13522  001104  6FC4               	movwf	actuatorTest@i& (0+255),b
 13523  001106                     l8326:
 13524                           
 13525                           ; BSR set to: 0
 13526  001106  0100               	movlb	0	; () banked
 13527  001108  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13528  00110A  D008               	goto	l1312
 13529  00110C  0E10               	movlw	16
 13530  00110E  0100               	movlb	0	; () banked
 13531  001110  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13532  001112  0E27               	movlw	39
 13533  001114  0100               	movlb	0	; () banked
 13534  001116  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13535  001118  B0D8               	btfsc	status,0,c
 13536  00111A  D00D               	goto	l8336
 13537  00111C                     l1312:
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;Test.c: 340: {
 13541                           ;Test.c: 341: LATCbits.LATC0 = 1;
 13542  00111C  808B               	bsf	3979,0,c	;volatile
 13543                           
 13544                           ; BSR set to: 0
 13545                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13546  00111E  0E1A               	movlw	26
 13547  001120                     u10277:
 13548  001120  2EE8               	decfsz	wreg,f,c
 13549  001122  D7FE               	bra	u10277
 13550  001124  D000               	nop2	
 13551                           
 13552                           ;Test.c: 343: LATCbits.LATC0 = 0;
 13553  001126  908B               	bcf	3979,0,c	;volatile
 13554                           
 13555                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13556  001128  0EF0               	movlw	240
 13557  00112A                     u10287:
 13558  00112A  2EE8               	decfsz	wreg,f,c
 13559  00112C  D7FE               	bra	u10287
 13560  00112E  0100               	movlb	0	; () banked
 13561  001130  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13562  001132  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13563  001134  D7E8               	goto	l8326
 13564  001136                     l8336:
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;Test.c: 345: }
 13568                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13569  001136  0E00               	movlw	0
 13570  001138  0100               	movlb	0	; () banked
 13571  00113A  6FC2               	movwf	actuatorTest@i_1794& (0+255),b
 13572  00113C                     l8338:
 13573                           
 13574                           ; BSR set to: 0
 13575  00113C  0E63               	movlw	99
 13576  00113E  0100               	movlb	0	; () banked
 13577  001140  65C2               	cpfsgt	actuatorTest@i_1794& (0+255),b
 13578  001142  D001               	goto	l8342
 13579  001144  D00C               	goto	l8346
 13580  001146                     l8342:
 13581                           
 13582                           ; BSR set to: 0
 13583  001146  0E68               	movlw	104
 13584  001148  0100               	movlb	0	; () banked
 13585  00114A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13586  00114C  0EE4               	movlw	228
 13587  00114E                     u10297:
 13588  00114E  2EE8               	decfsz	wreg,f,c
 13589  001150  D7FE               	bra	u10297
 13590  001152  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13591  001154  D7FC               	bra	u10297
 13592  001156  F000               	nop	
 13593  001158  0100               	movlb	0	; () banked
 13594  00115A  2BC2               	incf	actuatorTest@i_1794& (0+255),f,b
 13595  00115C  D7EF               	goto	l8338
 13596  00115E                     l8346:
 13597                           
 13598                           ; BSR set to: 0
 13599  00115E  0E00               	movlw	0
 13600  001160  0100               	movlb	0	; () banked
 13601  001162  6FC3               	movwf	actuatorTest@i_1795& (0+255),b
 13602  001164                     l8348:
 13603                           
 13604                           ; BSR set to: 0
 13605  001164  0E63               	movlw	99
 13606  001166  0100               	movlb	0	; () banked
 13607  001168  65C3               	cpfsgt	actuatorTest@i_1795& (0+255),b
 13608  00116A  D001               	goto	l8352
 13609  00116C  D00C               	goto	l8356
 13610  00116E                     l8352:
 13611                           
 13612                           ; BSR set to: 0
 13613  00116E  0E68               	movlw	104
 13614  001170  0100               	movlb	0	; () banked
 13615  001172  6FAB               	movwf	??_actuatorTest& (0+255),b
 13616  001174  0EE4               	movlw	228
 13617  001176                     u10307:
 13618  001176  2EE8               	decfsz	wreg,f,c
 13619  001178  D7FE               	bra	u10307
 13620  00117A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13621  00117C  D7FC               	bra	u10307
 13622  00117E  F000               	nop	
 13623  001180  0100               	movlb	0	; () banked
 13624  001182  2BC3               	incf	actuatorTest@i_1795& (0+255),f,b
 13625  001184  D7EF               	goto	l8348
 13626  001186                     l8356:
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;Test.c: 348: machine_state = Testing_state;
 13630  001186  0E03               	movlw	3
 13631  001188  0100               	movlb	0	; () banked
 13632  00118A  6FFC               	movwf	_machine_state& (0+255),b
 13633                           
 13634                           ; BSR set to: 0
 13635  00118C  0012               	return		;funcret
 13636  00118E                     __end_of_actuatorTest:
 13637                           	opt stack 0
 13638                           tblptru	equ	0xFF8
 13639                           tblptrh	equ	0xFF7
 13640                           tblptrl	equ	0xFF6
 13641                           tablat	equ	0xFF5
 13642                           prodh	equ	0xFF4
 13643                           prodl	equ	0xFF3
 13644                           intcon	equ	0xFF2
 13645                           intcon2	equ	0xFF1
 13646                           intcon3	equ	0xFF0
 13647                           postinc0	equ	0xFEE
 13648                           wreg	equ	0xFE8
 13649                           postdec1	equ	0xFE5
 13650                           fsr1l	equ	0xFE1
 13651                           indf2	equ	0xFDF
 13652                           postinc2	equ	0xFDE
 13653                           postdec2	equ	0xFDD
 13654                           fsr2h	equ	0xFDA
 13655                           fsr2l	equ	0xFD9
 13656                           status	equ	0xFD8
 13657                           
 13658 ;; *************** function _SpeedTest *****************
 13659 ;; Defined at:
 13660 ;;		line 542 in file "Test.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;		None
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;		None
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  1    wreg      void 
 13667 ;; Registers used:
 13668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;Total ram usage:        1 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:   10
 13681 ;; This function calls:
 13682 ;;		_lcdInst
 13683 ;;		_printf
 13684 ;; This function is called by:
 13685 ;;		_Test
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           	psect	text41
 13690  00499C                     __ptext41:
 13691                           	opt stack 0
 13692  00499C                     _SpeedTest:
 13693                           	opt stack 19
 13694                           
 13695                           ;Test.c: 544: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13696                           
 13697                           ; BSR set to: 0
 13698                           ;incstack = 0
 13699  00499C  0E01               	movlw	1
 13700  00499E  EC5F  F02B         	call	_lcdInst
 13701  0049A2  0E68               	movlw	104
 13702  0049A4  0100               	movlb	0	; () banked
 13703  0049A6  6FAB               	movwf	??_SpeedTest& (0+255),b
 13704  0049A8  0EE4               	movlw	228
 13705  0049AA                     u10317:
 13706  0049AA  2EE8               	decfsz	wreg,f,c
 13707  0049AC  D7FE               	bra	u10317
 13708  0049AE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13709  0049B0  D7FC               	bra	u10317
 13710  0049B2  F000               	nop	
 13711  0049B4  0E80               	movlw	128
 13712  0049B6  EC5F  F02B         	call	_lcdInst
 13713                           
 13714                           ;Test.c: 545: printf("S: D WILL RETURN ");
 13715  0049BA  0E0F               	movlw	low STR_120
 13716  0049BC  0100               	movlb	0	; () banked
 13717  0049BE  6F8E               	movwf	printf@f& (0+255),b
 13718  0049C0  0EFB               	movlw	high STR_120
 13719  0049C2  0100               	movlb	0	; () banked
 13720  0049C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13721  0049C6  EC84  F00B         	call	_printf	;wreg free
 13722                           
 13723                           ;Test.c: 546: lcdInst(0b11000000);;
 13724  0049CA  0EC0               	movlw	192
 13725  0049CC  EC5F  F02B         	call	_lcdInst
 13726                           
 13727                           ;Test.c: 547: printf("OTHER SETS RA5   ");
 13728  0049D0  0EFD               	movlw	low STR_121
 13729  0049D2  0100               	movlb	0	; () banked
 13730  0049D4  6F8E               	movwf	printf@f& (0+255),b
 13731  0049D6  0EFA               	movlw	high STR_121
 13732  0049D8  0100               	movlb	0	; () banked
 13733  0049DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13734  0049DC  EC84  F00B         	call	_printf	;wreg free
 13735  0049E0                     l1383:
 13736  0049E0  A281               	btfss	3969,1,c	;volatile
 13737  0049E2  D7FE               	goto	l1383
 13738                           
 13739                           ;Test.c: 552: }
 13740                           ;Test.c: 553: if(PORTB >> 4 == 0b1111){
 13741  0049E4  3881               	swapf	3969,w,c	;volatile
 13742  0049E6  0B0F               	andlw	15
 13743  0049E8  0A0F               	xorlw	15
 13744  0049EA  B4D8               	btfsc	status,2,c
 13745  0049EC  0012               	return	
 13746  0049EE  D014               	goto	l8452
 13747  0049F0                     l1390:
 13748                           
 13749                           ;Test.c: 558: LATBbits.LATB2 = 1;
 13750  0049F0  848A               	bsf	3978,2,c	;volatile
 13751                           
 13752                           ;Test.c: 559: _delay((unsigned long)((5)*(32000000/4000.0)));
 13753  0049F2  0E34               	movlw	52
 13754  0049F4  0100               	movlb	0	; () banked
 13755  0049F6  6FAB               	movwf	??_SpeedTest& (0+255),b
 13756  0049F8  0EF1               	movlw	241
 13757  0049FA                     u10327:
 13758  0049FA  2EE8               	decfsz	wreg,f,c
 13759  0049FC  D7FE               	bra	u10327
 13760  0049FE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13761  004A00  D7FC               	bra	u10327
 13762  004A02  D000               	nop2	
 13763                           
 13764                           ;Test.c: 560: LATBbits.LATB2 = 0;
 13765  004A04  948A               	bcf	3978,2,c	;volatile
 13766                           
 13767                           ;Test.c: 561: _delay((unsigned long)((5)*(32000000/4000.0)));
 13768  004A06  0E34               	movlw	52
 13769  004A08  0100               	movlb	0	; () banked
 13770  004A0A  6FAB               	movwf	??_SpeedTest& (0+255),b
 13771  004A0C  0EF1               	movlw	241
 13772  004A0E                     u10337:
 13773  004A0E  2EE8               	decfsz	wreg,f,c
 13774  004A10  D7FE               	bra	u10337
 13775  004A12  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13776  004A14  D7FC               	bra	u10337
 13777  004A16  D000               	nop2	
 13778  004A18                     l8452:
 13779  004A18  B281               	btfsc	3969,1,c	;volatile
 13780  004A1A  D7EA               	goto	l1390
 13781                           
 13782                           ;Test.c: 564: }
 13783                           ;Test.c: 565: LATBbits.LATB2 = 0;
 13784  004A1C  948A               	bcf	3978,2,c	;volatile
 13785  004A1E  D7E0               	goto	l1383
 13786  004A20                     __end_of_SpeedTest:
 13787                           	opt stack 0
 13788                           tblptru	equ	0xFF8
 13789                           tblptrh	equ	0xFF7
 13790                           tblptrl	equ	0xFF6
 13791                           tablat	equ	0xFF5
 13792                           prodh	equ	0xFF4
 13793                           prodl	equ	0xFF3
 13794                           intcon	equ	0xFF2
 13795                           intcon2	equ	0xFF1
 13796                           intcon3	equ	0xFF0
 13797                           postinc0	equ	0xFEE
 13798                           wreg	equ	0xFE8
 13799                           postdec1	equ	0xFE5
 13800                           fsr1l	equ	0xFE1
 13801                           indf2	equ	0xFDF
 13802                           postinc2	equ	0xFDE
 13803                           postdec2	equ	0xFDD
 13804                           fsr2h	equ	0xFDA
 13805                           fsr2l	equ	0xFD9
 13806                           status	equ	0xFD8
 13807                           
 13808 ;; *************** function _PortTestPusher *****************
 13809 ;; Defined at:
 13810 ;;		line 675 in file "Test.c"
 13811 ;; Parameters:    Size  Location     Type
 13812 ;;		None
 13813 ;; Auto vars:     Size  Location     Type
 13814 ;;		None
 13815 ;; Return value:  Size  Location     Type
 13816 ;;                  1    wreg      void 
 13817 ;; Registers used:
 13818 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 0/0
 13821 ;;		On exit  : 0/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13828 ;;Total ram usage:        1 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:   10
 13831 ;; This function calls:
 13832 ;;		_lcdInst
 13833 ;;		_printf
 13834 ;; This function is called by:
 13835 ;;		_Test
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           	psect	text42
 13840  004DF6                     __ptext42:
 13841                           	opt stack 0
 13842  004DF6                     _PortTestPusher:
 13843                           	opt stack 19
 13844                           
 13845                           ;Test.c: 676: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13846                           
 13847                           ;incstack = 0
 13848  004DF6  0E01               	movlw	1
 13849  004DF8  EC5F  F02B         	call	_lcdInst
 13850  004DFC  0E68               	movlw	104
 13851  004DFE  0100               	movlb	0	; () banked
 13852  004E00  6FAB               	movwf	??_PortTestPusher& (0+255),b
 13853  004E02  0EE4               	movlw	228
 13854  004E04                     u10347:
 13855  004E04  2EE8               	decfsz	wreg,f,c
 13856  004E06  D7FE               	bra	u10347
 13857  004E08  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 13858  004E0A  D7FC               	bra	u10347
 13859  004E0C  F000               	nop	
 13860  004E0E  0E80               	movlw	128
 13861  004E10  EC5F  F02B         	call	_lcdInst
 13862                           
 13863                           ;Test.c: 677: printf("D WILL RETURN    ");
 13864  004E14  0EEB               	movlw	low STR_111
 13865  004E16  0100               	movlb	0	; () banked
 13866  004E18  6F8E               	movwf	printf@f& (0+255),b
 13867  004E1A  0EFA               	movlw	high STR_111
 13868  004E1C  0100               	movlb	0	; () banked
 13869  004E1E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13870  004E20  EC84  F00B         	call	_printf	;wreg free
 13871                           
 13872                           ;Test.c: 678: lcdInst(0b11000000);;
 13873  004E24  0EC0               	movlw	192
 13874  004E26  EC5F  F02B         	call	_lcdInst
 13875                           
 13876                           ;Test.c: 679: printf("OTHER SETS PUSHER");
 13877  004E2A  0E33               	movlw	low STR_129
 13878  004E2C  0100               	movlb	0	; () banked
 13879  004E2E  6F8E               	movwf	printf@f& (0+255),b
 13880  004E30  0EFB               	movlw	high STR_129
 13881  004E32  0100               	movlb	0	; () banked
 13882  004E34  6F8F               	movwf	(printf@f+1)& (0+255),b
 13883  004E36  EC84  F00B         	call	_printf	;wreg free
 13884  004E3A                     l1444:
 13885  004E3A  A281               	btfss	3969,1,c	;volatile
 13886  004E3C  D7FE               	goto	l1444
 13887                           
 13888                           ;Test.c: 684: }
 13889                           ;Test.c: 685: if(PORTB >> 4 == 0b1111){
 13890  004E3E  3881               	swapf	3969,w,c	;volatile
 13891  004E40  0B0F               	andlw	15
 13892  004E42  0A0F               	xorlw	15
 13893  004E44  B4D8               	btfsc	status,2,c
 13894  004E46  0012               	return	
 13895                           
 13896                           ;Test.c: 688: else{
 13897                           ;Test.c: 689: LATAbits.LATA4 = 1;
 13898                           
 13899                           ;Test.c: 687: }
 13900                           
 13901                           ;Test.c: 686: break;
 13902  004E48  8889               	bsf	3977,4,c	;volatile
 13903  004E4A                     l1450:
 13904  004E4A  B281               	btfsc	3969,1,c	;volatile
 13905  004E4C  D7FE               	goto	l1450
 13906                           
 13907                           ;Test.c: 692: }
 13908                           ;Test.c: 693: LATAbits.LATA4 = 0;
 13909  004E4E  9889               	bcf	3977,4,c	;volatile
 13910  004E50  D7F4               	goto	l1444
 13911  004E52                     __end_of_PortTestPusher:
 13912                           	opt stack 0
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodh	equ	0xFF4
 13918                           prodl	equ	0xFF3
 13919                           intcon	equ	0xFF2
 13920                           intcon2	equ	0xFF1
 13921                           intcon3	equ	0xFF0
 13922                           postinc0	equ	0xFEE
 13923                           wreg	equ	0xFE8
 13924                           postdec1	equ	0xFE5
 13925                           fsr1l	equ	0xFE1
 13926                           indf2	equ	0xFDF
 13927                           postinc2	equ	0xFDE
 13928                           postdec2	equ	0xFDD
 13929                           fsr2h	equ	0xFDA
 13930                           fsr2l	equ	0xFD9
 13931                           status	equ	0xFD8
 13932                           
 13933 ;; *************** function _PortTestDC *****************
 13934 ;; Defined at:
 13935 ;;		line 411 in file "Test.c"
 13936 ;; Parameters:    Size  Location     Type
 13937 ;;		None
 13938 ;; Auto vars:     Size  Location     Type
 13939 ;;		None
 13940 ;; Return value:  Size  Location     Type
 13941 ;;                  1    wreg      void 
 13942 ;; Registers used:
 13943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;Total ram usage:        1 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:   10
 13956 ;; This function calls:
 13957 ;;		_lcdInst
 13958 ;;		_printf
 13959 ;; This function is called by:
 13960 ;;		_Test
 13961 ;; This function uses a non-reentrant model
 13962 ;;
 13963                           
 13964                           	psect	text43
 13965  004E52                     __ptext43:
 13966                           	opt stack 0
 13967  004E52                     _PortTestDC:
 13968                           	opt stack 19
 13969                           
 13970                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13971                           
 13972                           ;incstack = 0
 13973  004E52  0E01               	movlw	1
 13974  004E54  EC5F  F02B         	call	_lcdInst
 13975  004E58  0E68               	movlw	104
 13976  004E5A  0100               	movlb	0	; () banked
 13977  004E5C  6FAB               	movwf	??_PortTestDC& (0+255),b
 13978  004E5E  0EE4               	movlw	228
 13979  004E60                     u10357:
 13980  004E60  2EE8               	decfsz	wreg,f,c
 13981  004E62  D7FE               	bra	u10357
 13982  004E64  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 13983  004E66  D7FC               	bra	u10357
 13984  004E68  F000               	nop	
 13985  004E6A  0E80               	movlw	128
 13986  004E6C  EC5F  F02B         	call	_lcdInst
 13987                           
 13988                           ;Test.c: 413: printf("D WILL RETURN    ");
 13989  004E70  0EEB               	movlw	low STR_111
 13990  004E72  0100               	movlb	0	; () banked
 13991  004E74  6F8E               	movwf	printf@f& (0+255),b
 13992  004E76  0EFA               	movlw	high STR_111
 13993  004E78  0100               	movlb	0	; () banked
 13994  004E7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13995  004E7C  EC84  F00B         	call	_printf	;wreg free
 13996                           
 13997                           ;Test.c: 414: lcdInst(0b11000000);;
 13998  004E80  0EC0               	movlw	192
 13999  004E82  EC5F  F02B         	call	_lcdInst
 14000                           
 14001                           ;Test.c: 415: printf("OTHER SETS DC   ");
 14002  004E86  0EE1               	movlw	low STR_112
 14003  004E88  0100               	movlb	0	; () banked
 14004  004E8A  6F8E               	movwf	printf@f& (0+255),b
 14005  004E8C  0EFB               	movlw	high STR_112
 14006  004E8E  0100               	movlb	0	; () banked
 14007  004E90  6F8F               	movwf	(printf@f+1)& (0+255),b
 14008  004E92  EC84  F00B         	call	_printf	;wreg free
 14009  004E96                     l1325:
 14010  004E96  A281               	btfss	3969,1,c	;volatile
 14011  004E98  D7FE               	goto	l1325
 14012                           
 14013                           ;Test.c: 420: }
 14014                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 14015  004E9A  3881               	swapf	3969,w,c	;volatile
 14016  004E9C  0B0F               	andlw	15
 14017  004E9E  0A0F               	xorlw	15
 14018  004EA0  B4D8               	btfsc	status,2,c
 14019  004EA2  0012               	return	
 14020                           
 14021                           ;Test.c: 424: else{
 14022                           ;Test.c: 425: LATBbits.LATB2 = 1;
 14023                           
 14024                           ;Test.c: 423: }
 14025                           
 14026                           ;Test.c: 422: break;
 14027  004EA4  848A               	bsf	3978,2,c	;volatile
 14028  004EA6                     l1331:
 14029  004EA6  B281               	btfsc	3969,1,c	;volatile
 14030  004EA8  D7FE               	goto	l1331
 14031                           
 14032                           ;Test.c: 428: }
 14033                           ;Test.c: 429: LATBbits.LATB2 = 0;
 14034  004EAA  948A               	bcf	3978,2,c	;volatile
 14035  004EAC  D7F4               	goto	l1325
 14036  004EAE                     __end_of_PortTestDC:
 14037                           	opt stack 0
 14038                           tblptru	equ	0xFF8
 14039                           tblptrh	equ	0xFF7
 14040                           tblptrl	equ	0xFF6
 14041                           tablat	equ	0xFF5
 14042                           prodh	equ	0xFF4
 14043                           prodl	equ	0xFF3
 14044                           intcon	equ	0xFF2
 14045                           intcon2	equ	0xFF1
 14046                           intcon3	equ	0xFF0
 14047                           postinc0	equ	0xFEE
 14048                           wreg	equ	0xFE8
 14049                           postdec1	equ	0xFE5
 14050                           fsr1l	equ	0xFE1
 14051                           indf2	equ	0xFDF
 14052                           postinc2	equ	0xFDE
 14053                           postdec2	equ	0xFDD
 14054                           fsr2h	equ	0xFDA
 14055                           fsr2l	equ	0xFD9
 14056                           status	equ	0xFD8
 14057                           
 14058 ;; *************** function _PlatformTest *****************
 14059 ;; Defined at:
 14060 ;;		line 434 in file "Test.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;		None
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;  i               2   51[BANK0 ] int 
 14065 ;;  i               2   49[BANK0 ] int 
 14066 ;;  res             2   47[BANK0 ] int 
 14067 ;;  res             2   45[BANK0 ] int 
 14068 ;;  on              2   53[BANK0 ] int 
 14069 ;; Return value:  Size  Location     Type
 14070 ;;                  1    wreg      void 
 14071 ;; Registers used:
 14072 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14073 ;; Tracked objects:
 14074 ;;		On entry : 0/0
 14075 ;;		On exit  : 0/0
 14076 ;;		Unchanged: 0/0
 14077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14079 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14081 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14082 ;;Total ram usage:       12 bytes
 14083 ;; Hardware stack levels used:    1
 14084 ;; Hardware stack levels required when called:   10
 14085 ;; This function calls:
 14086 ;;		_lcdInst
 14087 ;;		_printf
 14088 ;;		_readADC
 14089 ;;		_stopSignals
 14090 ;; This function is called by:
 14091 ;;		_Test
 14092 ;; This function uses a non-reentrant model
 14093 ;;
 14094                           
 14095                           	psect	text44
 14096  00229C                     __ptext44:
 14097                           	opt stack 0
 14098  00229C                     _PlatformTest:
 14099                           	opt stack 19
 14100                           
 14101                           ;Test.c: 435: LATCbits.LATC5 = 1;
 14102                           
 14103                           ;incstack = 0
 14104  00229C  8A8B               	bsf	3979,5,c	;volatile
 14105                           
 14106                           ;Test.c: 437: machine_state = Sorting_state;
 14107  00229E  0E01               	movlw	1
 14108  0022A0  0100               	movlb	0	; () banked
 14109  0022A2  6FFC               	movwf	_machine_state& (0+255),b
 14110                           
 14111                           ;Test.c: 438: f_arm_position = 0;
 14112  0022A4  0E00               	movlw	0
 14113  0022A6  0100               	movlb	0	; () banked
 14114  0022A8  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14115  0022AA  0E00               	movlw	0
 14116  0022AC  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14117                           
 14118                           ;Test.c: 439: timer2_counter = 0;
 14119  0022AE  0E00               	movlw	0
 14120  0022B0  6E74               	movwf	_timer2_counter+1,c	;volatile
 14121  0022B2  0E00               	movlw	0
 14122  0022B4  6E73               	movwf	_timer2_counter,c	;volatile
 14123                           
 14124                           ; BSR set to: 0
 14125                           ;Test.c: 440: LATBbits.LATB3 = 0;
 14126  0022B6  968A               	bcf	3978,3,c	;volatile
 14127                           
 14128                           ; BSR set to: 0
 14129                           ;Test.c: 441: TMR2ON = 1;
 14130  0022B8  84CA               	bsf	4042,2,c	;volatile
 14131                           
 14132                           ;Test.c: 442: was_low_2 = 0;
 14133  0022BA  0E00               	movlw	0
 14134  0022BC  6E7A               	movwf	_was_low_2+1,c	;volatile
 14135  0022BE  0E00               	movlw	0
 14136  0022C0  6E79               	movwf	_was_low_2,c	;volatile
 14137                           
 14138                           ;Test.c: 444: int on = 1;
 14139  0022C2  0E00               	movlw	0
 14140  0022C4  0100               	movlb	0	; () banked
 14141  0022C6  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 14142  0022C8  0E01               	movlw	1
 14143  0022CA  6FB5               	movwf	PlatformTest@on& (0+255),b
 14144                           
 14145                           ; BSR set to: 0
 14146                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14147  0022CC  0E01               	movlw	1
 14148  0022CE  EC5F  F02B         	call	_lcdInst
 14149  0022D2  0E68               	movlw	104
 14150  0022D4  0100               	movlb	0	; () banked
 14151  0022D6  6FAB               	movwf	??_PlatformTest& (0+255),b
 14152  0022D8  0EE4               	movlw	228
 14153  0022DA                     u10367:
 14154  0022DA  2EE8               	decfsz	wreg,f,c
 14155  0022DC  D7FE               	bra	u10367
 14156  0022DE  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14157  0022E0  D7FC               	bra	u10367
 14158  0022E2  F000               	nop	
 14159  0022E4  0E80               	movlw	128
 14160  0022E6  EC5F  F02B         	call	_lcdInst
 14161                           
 14162                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 14163  0022EA  0E14               	movlw	low STR_113
 14164  0022EC  0100               	movlb	0	; () banked
 14165  0022EE  6F8E               	movwf	printf@f& (0+255),b
 14166  0022F0  0EFC               	movlw	high STR_113
 14167  0022F2  0100               	movlb	0	; () banked
 14168  0022F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 14169  0022F6  EC84  F00B         	call	_printf	;wreg free
 14170                           
 14171                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 14172  0022FA  D058               	goto	l8506
 14173  0022FC                     l8488:
 14174                           
 14175                           ;Test.c: 449: readADC(0);
 14176  0022FC  0E00               	movlw	0
 14177  0022FE  EC55  F02A         	call	_readADC
 14178                           
 14179                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 14180  002302  50C3               	movf	4035,w,c	;volatile
 14181  002304  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14182  002308  0100               	movlb	0	; () banked
 14183  00230A  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14184  00230C  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14185  002310  0100               	movlb	0	; () banked
 14186  002312  6BAB               	clrf	??_PlatformTest& (0+255),b
 14187  002314  0100               	movlb	0	; () banked
 14188  002316  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14189  002318  0100               	movlb	0	; () banked
 14190  00231A  6FAD               	movwf	PlatformTest@res& (0+255),b
 14191  00231C  0100               	movlb	0	; () banked
 14192  00231E  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14193  002320  0100               	movlb	0	; () banked
 14194  002322  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 14198  002324  0100               	movlb	0	; () banked
 14199  002326  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 14200  002328  D00A               	goto	u7250
 14201  00232A  0E21               	movlw	33
 14202  00232C  0100               	movlb	0	; () banked
 14203  00232E  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 14204  002330  0E03               	movlw	3
 14205  002332  0100               	movlb	0	; () banked
 14206  002334  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 14207  002336  A0D8               	btfss	status,0,c
 14208  002338  D002               	goto	u7250
 14209  00233A  0E01               	movlw	1
 14210  00233C  D001               	goto	u7260
 14211  00233E                     u7250:
 14212  00233E  0E00               	movlw	0
 14213  002340                     u7260:
 14214  002340  0100               	movlb	0	; () banked
 14215  002342  6FE6               	movwf	_IR_signal& (0+255),b
 14216  002344  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14217                           
 14218                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14219  002346  0E01               	movlw	1
 14220  002348  EC5F  F02B         	call	_lcdInst
 14221  00234C  0E68               	movlw	104
 14222  00234E  0100               	movlb	0	; () banked
 14223  002350  6FAB               	movwf	??_PlatformTest& (0+255),b
 14224  002352  0EE4               	movlw	228
 14225  002354                     u10377:
 14226  002354  2EE8               	decfsz	wreg,f,c
 14227  002356  D7FE               	bra	u10377
 14228  002358  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14229  00235A  D7FC               	bra	u10377
 14230  00235C  F000               	nop	
 14231  00235E  0E80               	movlw	128
 14232  002360  EC5F  F02B         	call	_lcdInst
 14233                           
 14234                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 14235  002364  0E14               	movlw	low STR_113
 14236  002366  0100               	movlb	0	; () banked
 14237  002368  6F8E               	movwf	printf@f& (0+255),b
 14238  00236A  0EFC               	movlw	high STR_113
 14239  00236C  0100               	movlb	0	; () banked
 14240  00236E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14241  002370  EC84  F00B         	call	_printf	;wreg free
 14242                           
 14243                           ;Test.c: 455: lcdInst(0b11000000);;
 14244  002374  0EC0               	movlw	192
 14245  002376  EC5F  F02B         	call	_lcdInst
 14246                           
 14247                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 14248  00237A  0E03               	movlw	low STR_115
 14249  00237C  0100               	movlb	0	; () banked
 14250  00237E  6F8E               	movwf	printf@f& (0+255),b
 14251  002380  0EFC               	movlw	high STR_115
 14252  002382  0100               	movlb	0	; () banked
 14253  002384  6F8F               	movwf	(printf@f+1)& (0+255),b
 14254  002386  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 14255  00238A  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 14256  00238E  EC84  F00B         	call	_printf	;wreg free
 14257                           
 14258                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 14259  002392  0E05               	movlw	5
 14260  002394  0100               	movlb	0	; () banked
 14261  002396  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14262  002398  0E0F               	movlw	15
 14263  00239A  0100               	movlb	0	; () banked
 14264  00239C  6FAB               	movwf	??_PlatformTest& (0+255),b
 14265  00239E  0EF1               	movlw	241
 14266  0023A0                     u10387:
 14267  0023A0  2EE8               	decfsz	wreg,f,c
 14268  0023A2  D7FE               	bra	u10387
 14269  0023A4  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14270  0023A6  D7FC               	bra	u10387
 14271  0023A8  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14272  0023AA  D7FA               	bra	u10387
 14273  0023AC                     l8506:
 14274  0023AC  B281               	btfsc	3969,1,c	;volatile
 14275  0023AE  D059               	goto	l8526
 14276  0023B0  D7A5               	goto	l8488
 14277  0023B2                     l8508:
 14278                           
 14279                           ;Test.c: 462: readADC(0);
 14280  0023B2  0E00               	movlw	0
 14281  0023B4  EC55  F02A         	call	_readADC
 14282                           
 14283                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 14284  0023B8  50C3               	movf	4035,w,c	;volatile
 14285  0023BA  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14286  0023BE  0100               	movlb	0	; () banked
 14287  0023C0  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14288  0023C2  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14289  0023C6  0100               	movlb	0	; () banked
 14290  0023C8  6BAB               	clrf	??_PlatformTest& (0+255),b
 14291  0023CA  0100               	movlb	0	; () banked
 14292  0023CC  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14293  0023CE  0100               	movlb	0	; () banked
 14294  0023D0  6FAF               	movwf	PlatformTest@res_1807& (0+255),b
 14295  0023D2  0100               	movlb	0	; () banked
 14296  0023D4  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14297  0023D6  0100               	movlb	0	; () banked
 14298  0023D8  6FB0               	movwf	(PlatformTest@res_1807+1)& (0+255),b
 14299                           
 14300                           ; BSR set to: 0
 14301                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 14302  0023DA  0100               	movlb	0	; () banked
 14303  0023DC  BFB0               	btfsc	(PlatformTest@res_1807+1)& (0+255),7,b
 14304  0023DE  D00A               	goto	u7280
 14305  0023E0  0E21               	movlw	33
 14306  0023E2  0100               	movlb	0	; () banked
 14307  0023E4  5DAF               	subwf	PlatformTest@res_1807& (0+255),w,b
 14308  0023E6  0E03               	movlw	3
 14309  0023E8  0100               	movlb	0	; () banked
 14310  0023EA  59B0               	subwfb	(PlatformTest@res_1807+1)& (0+255),w,b
 14311  0023EC  A0D8               	btfss	status,0,c
 14312  0023EE  D002               	goto	u7280
 14313  0023F0  0E01               	movlw	1
 14314  0023F2  D001               	goto	u7290
 14315  0023F4                     u7280:
 14316  0023F4  0E00               	movlw	0
 14317  0023F6                     u7290:
 14318  0023F6  0100               	movlb	0	; () banked
 14319  0023F8  6FE6               	movwf	_IR_signal& (0+255),b
 14320  0023FA  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14321                           
 14322                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14323  0023FC  0E01               	movlw	1
 14324  0023FE  EC5F  F02B         	call	_lcdInst
 14325  002402  0E68               	movlw	104
 14326  002404  0100               	movlb	0	; () banked
 14327  002406  6FAB               	movwf	??_PlatformTest& (0+255),b
 14328  002408  0EE4               	movlw	228
 14329  00240A                     u10397:
 14330  00240A  2EE8               	decfsz	wreg,f,c
 14331  00240C  D7FE               	bra	u10397
 14332  00240E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14333  002410  D7FC               	bra	u10397
 14334  002412  F000               	nop	
 14335  002414  0E80               	movlw	128
 14336  002416  EC5F  F02B         	call	_lcdInst
 14337                           
 14338                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 14339  00241A  0E14               	movlw	low STR_113
 14340  00241C  0100               	movlb	0	; () banked
 14341  00241E  6F8E               	movwf	printf@f& (0+255),b
 14342  002420  0EFC               	movlw	high STR_113
 14343  002422  0100               	movlb	0	; () banked
 14344  002424  6F8F               	movwf	(printf@f+1)& (0+255),b
 14345  002426  EC84  F00B         	call	_printf	;wreg free
 14346                           
 14347                           ;Test.c: 468: lcdInst(0b11000000);;
 14348  00242A  0EC0               	movlw	192
 14349  00242C  EC5F  F02B         	call	_lcdInst
 14350                           
 14351                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 14352  002430  0E03               	movlw	low STR_115
 14353  002432  0100               	movlb	0	; () banked
 14354  002434  6F8E               	movwf	printf@f& (0+255),b
 14355  002436  0EFC               	movlw	high STR_115
 14356  002438  0100               	movlb	0	; () banked
 14357  00243A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14358  00243C  C0AF  F090         	movff	PlatformTest@res_1807,?_printf+2
 14359  002440  C0B0  F091         	movff	PlatformTest@res_1807+1,?_printf+3
 14360  002444  EC84  F00B         	call	_printf	;wreg free
 14361                           
 14362                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 14363  002448  0E05               	movlw	5
 14364  00244A  0100               	movlb	0	; () banked
 14365  00244C  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14366  00244E  0E0F               	movlw	15
 14367  002450  0100               	movlb	0	; () banked
 14368  002452  6FAB               	movwf	??_PlatformTest& (0+255),b
 14369  002454  0EF1               	movlw	241
 14370  002456                     u10407:
 14371  002456  2EE8               	decfsz	wreg,f,c
 14372  002458  D7FE               	bra	u10407
 14373  00245A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14374  00245C  D7FC               	bra	u10407
 14375  00245E  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14376  002460  D7FA               	bra	u10407
 14377  002462                     l8526:
 14378  002462  A281               	btfss	3969,1,c	;volatile
 14379  002464  D7A6               	goto	l8508
 14380                           
 14381                           ;Test.c: 471: }
 14382                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 14383  002466  3881               	swapf	3969,w,c	;volatile
 14384  002468  0B0F               	andlw	15
 14385  00246A  0A0F               	xorlw	15
 14386  00246C  B4D8               	btfsc	status,2,c
 14387  00246E  D09A               	goto	l1346
 14388                           
 14389                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 14390                           
 14391                           ;Test.c: 474: }
 14392                           
 14393                           ;Test.c: 473: break;
 14394  002470  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 14395  002474  0100               	movlb	0	; () banked
 14396  002476  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 14397  002478  0E0F               	movlw	15
 14398  00247A  17AB               	andwf	??_PlatformTest& (0+255),f,b
 14399  00247C  A4D8               	btfss	status,2,c
 14400  00247E  D012               	goto	l8538
 14401                           
 14402                           ; BSR set to: 0
 14403                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 14404  002480  B48A               	btfsc	3978,2,c	;volatile
 14405  002482  D004               	goto	u7330
 14406  002484  0100               	movlb	0	; () banked
 14407  002486  6BAB               	clrf	??_PlatformTest& (0+255),b
 14408  002488  2BAB               	incf	??_PlatformTest& (0+255),f,b
 14409  00248A  D002               	goto	u7348
 14410  00248C                     u7330:
 14411  00248C  0100               	movlb	0	; () banked
 14412  00248E  6BAB               	clrf	??_PlatformTest& (0+255),b
 14413  002490                     u7348:
 14414  002490  0100               	movlb	0	; () banked
 14415  002492  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14416  002494  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14417  002496  508A               	movf	3978,w,c	;volatile
 14418  002498  0100               	movlb	0	; () banked
 14419  00249A  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14420  00249C  0BFB               	andlw	-5
 14421  00249E  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14422  0024A0  6E8A               	movwf	3978,c	;volatile
 14423                           
 14424                           ;Test.c: 477: }
 14425  0024A2  D07D               	goto	l1361
 14426  0024A4                     l8538:
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 14430  0024A4  3881               	swapf	3969,w,c	;volatile
 14431  0024A6  0B0F               	andlw	15
 14432  0024A8  0A03               	xorlw	3
 14433  0024AA  A4D8               	btfss	status,2,c
 14434  0024AC  D020               	goto	l8550
 14435                           
 14436                           ; BSR set to: 0
 14437                           ;Test.c: 479: if(on){
 14438  0024AE  0100               	movlb	0	; () banked
 14439  0024B0  51B5               	movf	PlatformTest@on& (0+255),w,b
 14440  0024B2  0100               	movlb	0	; () banked
 14441  0024B4  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14442  0024B6  B4D8               	btfsc	status,2,c
 14443  0024B8  D010               	goto	l8546
 14444                           
 14445                           ; BSR set to: 0
 14446                           ;Test.c: 480: f_arm_position = 1;
 14447  0024BA  0E00               	movlw	0
 14448  0024BC  0100               	movlb	0	; () banked
 14449  0024BE  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14450  0024C0  0E01               	movlw	1
 14451  0024C2  D00F               	goto	L15
 14452  0024C4                     l8544:
 14453                           
 14454                           ; BSR set to: 0
 14455                           ;Test.c: 481: on = !on;
 14456  0024C4  0100               	movlb	0	; () banked
 14457  0024C6  51B5               	movf	PlatformTest@on& (0+255),w,b
 14458  0024C8  0100               	movlb	0	; () banked
 14459  0024CA  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14460  0024CC  A4D8               	btfss	status,2,c
 14461  0024CE  D00D               	goto	u7390
 14462  0024D0  D00A               	goto	u7391
 14463  0024D2                     u7380:
 14464  0024D2  0100               	movlb	0	; () banked
 14465  0024D4  6FB5               	movwf	PlatformTest@on& (0+255),b
 14466  0024D6  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 14467                           
 14468                           ;Test.c: 482: }
 14469  0024D8  D062               	goto	l1361
 14470  0024DA                     l8546:
 14471                           
 14472                           ; BSR set to: 0
 14473                           ;Test.c: 483: else{
 14474                           ;Test.c: 484: f_arm_position = 0;
 14475  0024DA  0E00               	movlw	0
 14476  0024DC  0100               	movlb	0	; () banked
 14477  0024DE  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14478  0024E0  0E00               	movlw	0
 14479  0024E2                     L15:
 14480  0024E2  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14481  0024E4  D7EF               	goto	l8544
 14482  0024E6                     u7391:
 14483  0024E6  0E01               	movlw	1
 14484  0024E8  D7F4               	goto	u7380
 14485  0024EA                     u7390:
 14486  0024EA  0E00               	movlw	0
 14487  0024EC  D7F2               	goto	u7380
 14488  0024EE                     l8550:
 14489                           
 14490                           ; BSR set to: 0
 14491                           ;Test.c: 489: else if(PORTB >> 4 == 0b0101){
 14492  0024EE  3881               	swapf	3969,w,c	;volatile
 14493  0024F0  0B0F               	andlw	15
 14494  0024F2  0A05               	xorlw	5
 14495  0024F4  A4D8               	btfss	status,2,c
 14496  0024F6  D027               	goto	l8564
 14497                           
 14498                           ; BSR set to: 0
 14499                           ;Test.c: 491: for(int i = 0; i<30; i++){
 14500  0024F8  0E00               	movlw	0
 14501  0024FA  0100               	movlb	0	; () banked
 14502  0024FC  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 14503  0024FE  0E00               	movlw	0
 14504  002500  6FB1               	movwf	PlatformTest@i& (0+255),b
 14505  002502                     l8554:
 14506                           
 14507                           ; BSR set to: 0
 14508  002502  0100               	movlb	0	; () banked
 14509  002504  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 14510  002506  D008               	goto	l1355
 14511  002508  0100               	movlb	0	; () banked
 14512  00250A  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 14513  00250C  E148               	bnz	l1361
 14514  00250E  0E1E               	movlw	30
 14515  002510  0100               	movlb	0	; () banked
 14516  002512  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 14517  002514  B0D8               	btfsc	status,0,c
 14518  002516  D043               	goto	l1361
 14519  002518                     l1355:
 14520                           
 14521                           ; BSR set to: 0
 14522                           ;Test.c: 492: LATAbits.LATA4 = 1;
 14523  002518  8889               	bsf	3977,4,c	;volatile
 14524                           
 14525                           ; BSR set to: 0
 14526                           ;Test.c: 493: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 14527  00251A  0E4E               	movlw	78
 14528  00251C  0100               	movlb	0	; () banked
 14529  00251E  6FAB               	movwf	??_PlatformTest& (0+255),b
 14530  002520  0EEB               	movlw	235
 14531  002522                     u10417:
 14532  002522  2EE8               	decfsz	wreg,f,c
 14533  002524  D7FE               	bra	u10417
 14534  002526  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14535  002528  D7FC               	bra	u10417
 14536                           
 14537                           ;Test.c: 494: LATAbits.LATA4 = 0;
 14538  00252A  9889               	bcf	3977,4,c	;volatile
 14539                           
 14540                           ;Test.c: 495: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 14541  00252C  0E1A               	movlw	26
 14542  00252E  0100               	movlb	0	; () banked
 14543  002530  6FAB               	movwf	??_PlatformTest& (0+255),b
 14544  002532  0EF8               	movlw	248
 14545  002534                     u10427:
 14546  002534  2EE8               	decfsz	wreg,f,c
 14547  002536  D7FE               	bra	u10427
 14548  002538  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14549  00253A  D7FC               	bra	u10427
 14550  00253C  F000               	nop	
 14551  00253E  0100               	movlb	0	; () banked
 14552  002540  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 14553  002542  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 14554  002544  D7DE               	goto	l8554
 14555  002546                     l8564:
 14556                           
 14557                           ; BSR set to: 0
 14558                           ;Test.c: 498: else if (PORTB >> 4 == 0b0110){
 14559  002546  3881               	swapf	3969,w,c	;volatile
 14560  002548  0B0F               	andlw	15
 14561  00254A  0A06               	xorlw	6
 14562  00254C  A4D8               	btfss	status,2,c
 14563  00254E  D027               	goto	l1361
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;Test.c: 500: for(int i = 0; i<30; i++){
 14567  002550  0E00               	movlw	0
 14568  002552  0100               	movlb	0	; () banked
 14569  002554  6FB4               	movwf	(PlatformTest@i_1811+1)& (0+255),b
 14570  002556  0E00               	movlw	0
 14571  002558  6FB3               	movwf	PlatformTest@i_1811& (0+255),b
 14572  00255A                     l8568:
 14573                           
 14574                           ; BSR set to: 0
 14575  00255A  0100               	movlb	0	; () banked
 14576  00255C  BFB4               	btfsc	(PlatformTest@i_1811+1)& (0+255),7,b
 14577  00255E  D008               	goto	l1359
 14578  002560  0100               	movlb	0	; () banked
 14579  002562  51B4               	movf	(PlatformTest@i_1811+1)& (0+255),w,b
 14580  002564  E11C               	bnz	l1361
 14581  002566  0E1E               	movlw	30
 14582  002568  0100               	movlb	0	; () banked
 14583  00256A  5DB3               	subwf	PlatformTest@i_1811& (0+255),w,b
 14584  00256C  B0D8               	btfsc	status,0,c
 14585  00256E  D017               	goto	l1361
 14586  002570                     l1359:
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;Test.c: 501: LATAbits.LATA4 = 1;
 14590  002570  8889               	bsf	3977,4,c	;volatile
 14591                           
 14592                           ; BSR set to: 0
 14593                           ;Test.c: 502: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 14594  002572  0E3D               	movlw	61
 14595  002574  0100               	movlb	0	; () banked
 14596  002576  6FAB               	movwf	??_PlatformTest& (0+255),b
 14597  002578  0E41               	movlw	65
 14598  00257A                     u10437:
 14599  00257A  2EE8               	decfsz	wreg,f,c
 14600  00257C  D7FE               	bra	u10437
 14601  00257E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14602  002580  D7FC               	bra	u10437
 14603                           
 14604                           ;Test.c: 503: LATAbits.LATA4 = 0;
 14605  002582  9889               	bcf	3977,4,c	;volatile
 14606                           
 14607                           ;Test.c: 504: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 14608  002584  0E2C               	movlw	44
 14609  002586  0100               	movlb	0	; () banked
 14610  002588  6FAB               	movwf	??_PlatformTest& (0+255),b
 14611  00258A  0EA1               	movlw	161
 14612  00258C                     u10447:
 14613  00258C  2EE8               	decfsz	wreg,f,c
 14614  00258E  D7FE               	bra	u10447
 14615  002590  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14616  002592  D7FC               	bra	u10447
 14617  002594  D000               	nop2	
 14618  002596  0100               	movlb	0	; () banked
 14619  002598  4BB3               	infsnz	PlatformTest@i_1811& (0+255),f,b
 14620  00259A  2BB4               	incf	(PlatformTest@i_1811+1)& (0+255),f,b
 14621  00259C  D7DE               	goto	l8568
 14622  00259E                     l1361:
 14623  00259E  A281               	btfss	3969,1,c	;volatile
 14624  0025A0  D760               	goto	l8526
 14625  0025A2  D7FD               	goto	l1361
 14626  0025A4                     l1346:
 14627                           
 14628                           ;Test.c: 509: }
 14629                           ;Test.c: 511: LATCbits.LATC5 = 0;
 14630  0025A4  9A8B               	bcf	3979,5,c	;volatile
 14631                           
 14632                           ;Test.c: 512: stopSignals();
 14633  0025A6  EC11  F02B         	call	_stopSignals	;wreg free
 14634                           
 14635                           ;Test.c: 513: machine_state = Testing_state;
 14636  0025AA  0E03               	movlw	3
 14637  0025AC  0100               	movlb	0	; () banked
 14638  0025AE  6FFC               	movwf	_machine_state& (0+255),b
 14639                           
 14640                           ; BSR set to: 0
 14641  0025B0  0012               	return		;funcret
 14642  0025B2                     __end_of_PlatformTest:
 14643                           	opt stack 0
 14644                           tblptru	equ	0xFF8
 14645                           tblptrh	equ	0xFF7
 14646                           tblptrl	equ	0xFF6
 14647                           tablat	equ	0xFF5
 14648                           prodh	equ	0xFF4
 14649                           prodl	equ	0xFF3
 14650                           intcon	equ	0xFF2
 14651                           intcon2	equ	0xFF1
 14652                           intcon3	equ	0xFF0
 14653                           postinc0	equ	0xFEE
 14654                           wreg	equ	0xFE8
 14655                           postdec1	equ	0xFE5
 14656                           fsr1l	equ	0xFE1
 14657                           indf2	equ	0xFDF
 14658                           postinc2	equ	0xFDE
 14659                           postdec2	equ	0xFDD
 14660                           fsr2h	equ	0xFDA
 14661                           fsr2l	equ	0xFD9
 14662                           status	equ	0xFD8
 14663                           
 14664 ;; *************** function _readADC *****************
 14665 ;; Defined at:
 14666 ;;		line 15 in file "ADCFunctionality.c"
 14667 ;; Parameters:    Size  Location     Type
 14668 ;;  channel         1    wreg     unsigned char 
 14669 ;; Auto vars:     Size  Location     Type
 14670 ;;  channel         1    1[BANK0 ] unsigned char 
 14671 ;; Return value:  Size  Location     Type
 14672 ;;                  1    wreg      void 
 14673 ;; Registers used:
 14674 ;;		wreg, status,2, status,0, cstack
 14675 ;; Tracked objects:
 14676 ;;		On entry : 0/0
 14677 ;;		On exit  : 0/0
 14678 ;;		Unchanged: 0/0
 14679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14684 ;;Total ram usage:        2 bytes
 14685 ;; Hardware stack levels used:    1
 14686 ;; Hardware stack levels required when called:    7
 14687 ;; This function calls:
 14688 ;;		Nothing
 14689 ;; This function is called by:
 14690 ;;		_readIR
 14691 ;;		_readMAG
 14692 ;;		_sensorTest
 14693 ;;		_PlatformTest
 14694 ;; This function uses a non-reentrant model
 14695 ;;
 14696                           
 14697                           	psect	text45
 14698  0054AA                     __ptext45:
 14699                           	opt stack 0
 14700  0054AA                     _readADC:
 14701                           	opt stack 20
 14702                           
 14703                           ; BSR set to: 0
 14704                           ;incstack = 0
 14705                           ;readADC@channel stored from wreg
 14706  0054AA  0100               	movlb	0	; () banked
 14707  0054AC  6F81               	movwf	readADC@channel& (0+255),b
 14708                           
 14709                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14710  0054AE  0100               	movlb	0	; () banked
 14711  0054B0  4581               	rlncf	readADC@channel& (0+255),w,b
 14712  0054B2  46E8               	rlncf	wreg,f,c
 14713  0054B4  0BFC               	andlw	252
 14714  0054B6  6EC2               	movwf	4034,c	;volatile
 14715                           
 14716                           ; BSR set to: 0
 14717                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14718  0054B8  80C2               	bsf	4034,0,c	;volatile
 14719                           
 14720                           ; BSR set to: 0
 14721                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14722  0054BA  82C2               	bsf	4034,1,c	;volatile
 14723                           
 14724                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14725  0054BC  D009               	goto	l6290
 14726  0054BE                     l6288:
 14727  0054BE  0E34               	movlw	52
 14728  0054C0  0100               	movlb	0	; () banked
 14729  0054C2  6F80               	movwf	??_readADC& (0+255),b
 14730  0054C4  0EF1               	movlw	241
 14731  0054C6                     u10457:
 14732  0054C6  2EE8               	decfsz	wreg,f,c
 14733  0054C8  D7FE               	bra	u10457
 14734  0054CA  2F80               	decfsz	??_readADC& (0+255),f,b
 14735  0054CC  D7FC               	bra	u10457
 14736  0054CE  D000               	nop2	
 14737  0054D0                     l6290:
 14738  0054D0  A2C2               	btfss	4034,1,c	;volatile
 14739  0054D2  0012               	return	
 14740  0054D4  D7F4               	goto	l6288
 14741  0054D6                     __end_of_readADC:
 14742                           	opt stack 0
 14743                           tblptru	equ	0xFF8
 14744                           tblptrh	equ	0xFF7
 14745                           tblptrl	equ	0xFF6
 14746                           tablat	equ	0xFF5
 14747                           prodh	equ	0xFF4
 14748                           prodl	equ	0xFF3
 14749                           intcon	equ	0xFF2
 14750                           intcon2	equ	0xFF1
 14751                           intcon3	equ	0xFF0
 14752                           postinc0	equ	0xFEE
 14753                           wreg	equ	0xFE8
 14754                           postdec1	equ	0xFE5
 14755                           fsr1l	equ	0xFE1
 14756                           indf2	equ	0xFDF
 14757                           postinc2	equ	0xFDE
 14758                           postdec2	equ	0xFDD
 14759                           fsr2h	equ	0xFDA
 14760                           fsr2l	equ	0xFD9
 14761                           status	equ	0xFD8
 14762                           
 14763 ;; *************** function _BothServos *****************
 14764 ;; Defined at:
 14765 ;;		line 351 in file "Test.c"
 14766 ;; Parameters:    Size  Location     Type
 14767 ;;		None
 14768 ;; Auto vars:     Size  Location     Type
 14769 ;;		None
 14770 ;; Return value:  Size  Location     Type
 14771 ;;                  1    wreg      void 
 14772 ;; Registers used:
 14773 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14774 ;; Tracked objects:
 14775 ;;		On entry : 0/0
 14776 ;;		On exit  : 0/0
 14777 ;;		Unchanged: 0/0
 14778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14781 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14783 ;;Total ram usage:        2 bytes
 14784 ;; Hardware stack levels used:    1
 14785 ;; Hardware stack levels required when called:   10
 14786 ;; This function calls:
 14787 ;;		_initServos
 14788 ;;		_lcdInst
 14789 ;;		_printf
 14790 ;;		_stopSignals
 14791 ;;		_updateServoPosition
 14792 ;; This function is called by:
 14793 ;;		_Test
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           	psect	text46
 14798  001B40                     __ptext46:
 14799                           	opt stack 0
 14800  001B40                     _BothServos:
 14801                           	opt stack 19
 14802                           
 14803                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14804                           
 14805                           ;incstack = 0
 14806  001B40  0E01               	movlw	1
 14807  001B42  EC5F  F02B         	call	_lcdInst
 14808  001B46  0E68               	movlw	104
 14809  001B48  0100               	movlb	0	; () banked
 14810  001B4A  6FAB               	movwf	??_BothServos& (0+255),b
 14811  001B4C  0EE4               	movlw	228
 14812  001B4E                     u10467:
 14813  001B4E  2EE8               	decfsz	wreg,f,c
 14814  001B50  D7FE               	bra	u10467
 14815  001B52  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14816  001B54  D7FC               	bra	u10467
 14817  001B56  F000               	nop	
 14818  001B58  0E80               	movlw	128
 14819  001B5A  EC5F  F02B         	call	_lcdInst
 14820                           
 14821                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 14822  001B5E  0EBE               	movlw	low STR_110
 14823  001B60  0100               	movlb	0	; () banked
 14824  001B62  6F8E               	movwf	printf@f& (0+255),b
 14825  001B64  0EFC               	movlw	high STR_110
 14826  001B66  0100               	movlb	0	; () banked
 14827  001B68  6F8F               	movwf	(printf@f+1)& (0+255),b
 14828  001B6A  EC84  F00B         	call	_printf	;wreg free
 14829                           
 14830                           ;Test.c: 354: TMR1ON = 1;
 14831  001B6E  80CD               	bsf	4045,0,c	;volatile
 14832                           
 14833                           ;Test.c: 355: TMR3ON = 1;
 14834  001B70  80B1               	bsf	4017,0,c	;volatile
 14835                           
 14836                           ;Test.c: 356: machine_state = Sorting_state;
 14837  001B72  0E01               	movlw	1
 14838  001B74  0100               	movlb	0	; () banked
 14839  001B76  6FFC               	movwf	_machine_state& (0+255),b
 14840                           
 14841                           ; BSR set to: 0
 14842                           ;Test.c: 357: was_low_1 = 0;
 14843  001B78  0E00               	movlw	0
 14844  001B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 14845  001B7C  0E00               	movlw	0
 14846  001B7E  6E77               	movwf	_was_low_1,c	;volatile
 14847                           
 14848                           ; BSR set to: 0
 14849                           ;Test.c: 358: was_low_3 = 0;
 14850  001B80  0E00               	movlw	0
 14851  001B82  6E7C               	movwf	_was_low_3+1,c	;volatile
 14852  001B84  0E00               	movlw	0
 14853  001B86  6E7B               	movwf	_was_low_3,c	;volatile
 14854                           
 14855                           ; BSR set to: 0
 14856                           ;Test.c: 364: initServos();
 14857  001B88  EC10  F025         	call	_initServos	;wreg free
 14858                           
 14859                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14860  001B8C  0E3D               	movlw	61
 14861  001B8E  0100               	movlb	0	; () banked
 14862  001B90  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14863  001B92  0EE1               	movlw	225
 14864  001B94  0100               	movlb	0	; () banked
 14865  001B96  6FAB               	movwf	??_BothServos& (0+255),b
 14866  001B98  0E3F               	movlw	63
 14867  001B9A                     u10477:
 14868  001B9A  2EE8               	decfsz	wreg,f,c
 14869  001B9C  D7FE               	bra	u10477
 14870  001B9E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14871  001BA0  D7FC               	bra	u10477
 14872  001BA2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14873  001BA4  D7FA               	bra	u10477
 14874  001BA6  D000               	nop2	
 14875                           
 14876                           ;Test.c: 367: updateServoPosition(500, 1);
 14877  001BA8  0E01               	movlw	1
 14878  001BAA  0100               	movlb	0	; () banked
 14879  001BAC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14880  001BAE  0EF4               	movlw	244
 14881  001BB0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14882  001BB2  0E00               	movlw	0
 14883  001BB4  0100               	movlb	0	; () banked
 14884  001BB6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14885  001BB8  0E01               	movlw	1
 14886  001BBA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14887  001BBC  EC8B  F024         	call	_updateServoPosition	;wreg free
 14888                           
 14889                           ;Test.c: 368: updateServoPosition(1050, 3);
 14890  001BC0  0E04               	movlw	4
 14891  001BC2  0100               	movlb	0	; () banked
 14892  001BC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14893  001BC6  0E1A               	movlw	26
 14894  001BC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14895  001BCA  0E00               	movlw	0
 14896  001BCC  0100               	movlb	0	; () banked
 14897  001BCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14898  001BD0  0E03               	movlw	3
 14899  001BD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14900  001BD4  EC8B  F024         	call	_updateServoPosition	;wreg free
 14901                           
 14902                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 14903  001BD8  0E1F               	movlw	31
 14904  001BDA  0100               	movlb	0	; () banked
 14905  001BDC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14906  001BDE  0E71               	movlw	113
 14907  001BE0  0100               	movlb	0	; () banked
 14908  001BE2  6FAB               	movwf	??_BothServos& (0+255),b
 14909  001BE4  0E1E               	movlw	30
 14910  001BE6                     u10487:
 14911  001BE6  2EE8               	decfsz	wreg,f,c
 14912  001BE8  D7FE               	bra	u10487
 14913  001BEA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14914  001BEC  D7FC               	bra	u10487
 14915  001BEE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14916  001BF0  D7FA               	bra	u10487
 14917  001BF2  F000               	nop	
 14918                           
 14919                           ;Test.c: 370: updateServoPosition(1260, 3);
 14920  001BF4  0E04               	movlw	4
 14921  001BF6  0100               	movlb	0	; () banked
 14922  001BF8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14923  001BFA  0EEC               	movlw	236
 14924  001BFC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14925  001BFE  0E00               	movlw	0
 14926  001C00  0100               	movlb	0	; () banked
 14927  001C02  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14928  001C04  0E03               	movlw	3
 14929  001C06  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14930  001C08  EC8B  F024         	call	_updateServoPosition	;wreg free
 14931                           
 14932                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 14933  001C0C  0E1D               	movlw	29
 14934  001C0E  0100               	movlb	0	; () banked
 14935  001C10  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14936  001C12  0E69               	movlw	105
 14937  001C14  0100               	movlb	0	; () banked
 14938  001C16  6FAB               	movwf	??_BothServos& (0+255),b
 14939  001C18  0EA5               	movlw	165
 14940  001C1A                     u10497:
 14941  001C1A  2EE8               	decfsz	wreg,f,c
 14942  001C1C  D7FE               	bra	u10497
 14943  001C1E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14944  001C20  D7FC               	bra	u10497
 14945  001C22  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14946  001C24  D7FA               	bra	u10497
 14947                           
 14948                           ;Test.c: 372: updateServoPosition(1050, 3);
 14949  001C26  0E04               	movlw	4
 14950  001C28  0100               	movlb	0	; () banked
 14951  001C2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14952  001C2C  0E1A               	movlw	26
 14953  001C2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14954  001C30  0E00               	movlw	0
 14955  001C32  0100               	movlb	0	; () banked
 14956  001C34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14957  001C36  0E03               	movlw	3
 14958  001C38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14959  001C3A  EC8B  F024         	call	_updateServoPosition	;wreg free
 14960                           
 14961                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 14962  001C3E  0E1F               	movlw	31
 14963  001C40  0100               	movlb	0	; () banked
 14964  001C42  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14965  001C44  0E71               	movlw	113
 14966  001C46  0100               	movlb	0	; () banked
 14967  001C48  6FAB               	movwf	??_BothServos& (0+255),b
 14968  001C4A  0E1E               	movlw	30
 14969  001C4C                     u10507:
 14970  001C4C  2EE8               	decfsz	wreg,f,c
 14971  001C4E  D7FE               	bra	u10507
 14972  001C50  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14973  001C52  D7FC               	bra	u10507
 14974  001C54  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14975  001C56  D7FA               	bra	u10507
 14976  001C58  F000               	nop	
 14977                           
 14978                           ;Test.c: 375: updateServoPosition(850, 1);
 14979  001C5A  0E03               	movlw	3
 14980  001C5C  0100               	movlb	0	; () banked
 14981  001C5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14982  001C60  0E52               	movlw	82
 14983  001C62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14984  001C64  0E00               	movlw	0
 14985  001C66  0100               	movlb	0	; () banked
 14986  001C68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14987  001C6A  0E01               	movlw	1
 14988  001C6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14989  001C6E  EC8B  F024         	call	_updateServoPosition	;wreg free
 14990                           
 14991                           ;Test.c: 376: updateServoPosition(1050, 3);
 14992  001C72  0E04               	movlw	4
 14993  001C74  0100               	movlb	0	; () banked
 14994  001C76  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14995  001C78  0E1A               	movlw	26
 14996  001C7A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14997  001C7C  0E00               	movlw	0
 14998  001C7E  0100               	movlb	0	; () banked
 14999  001C80  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15000  001C82  0E03               	movlw	3
 15001  001C84  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15002  001C86  EC8B  F024         	call	_updateServoPosition	;wreg free
 15003                           
 15004                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 15005  001C8A  0E1F               	movlw	31
 15006  001C8C  0100               	movlb	0	; () banked
 15007  001C8E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15008  001C90  0E71               	movlw	113
 15009  001C92  0100               	movlb	0	; () banked
 15010  001C94  6FAB               	movwf	??_BothServos& (0+255),b
 15011  001C96  0E1E               	movlw	30
 15012  001C98                     u10517:
 15013  001C98  2EE8               	decfsz	wreg,f,c
 15014  001C9A  D7FE               	bra	u10517
 15015  001C9C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15016  001C9E  D7FC               	bra	u10517
 15017  001CA0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15018  001CA2  D7FA               	bra	u10517
 15019  001CA4  F000               	nop	
 15020                           
 15021                           ;Test.c: 378: updateServoPosition(1260, 3);
 15022  001CA6  0E04               	movlw	4
 15023  001CA8  0100               	movlb	0	; () banked
 15024  001CAA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15025  001CAC  0EEC               	movlw	236
 15026  001CAE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15027  001CB0  0E00               	movlw	0
 15028  001CB2  0100               	movlb	0	; () banked
 15029  001CB4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15030  001CB6  0E03               	movlw	3
 15031  001CB8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15032  001CBA  EC8B  F024         	call	_updateServoPosition	;wreg free
 15033                           
 15034                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 15035  001CBE  0E1D               	movlw	29
 15036  001CC0  0100               	movlb	0	; () banked
 15037  001CC2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15038  001CC4  0E69               	movlw	105
 15039  001CC6  0100               	movlb	0	; () banked
 15040  001CC8  6FAB               	movwf	??_BothServos& (0+255),b
 15041  001CCA  0EA5               	movlw	165
 15042  001CCC                     u10527:
 15043  001CCC  2EE8               	decfsz	wreg,f,c
 15044  001CCE  D7FE               	bra	u10527
 15045  001CD0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15046  001CD2  D7FC               	bra	u10527
 15047  001CD4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15048  001CD6  D7FA               	bra	u10527
 15049                           
 15050                           ;Test.c: 380: updateServoPosition(1050, 3);
 15051  001CD8  0E04               	movlw	4
 15052  001CDA  0100               	movlb	0	; () banked
 15053  001CDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15054  001CDE  0E1A               	movlw	26
 15055  001CE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15056  001CE2  0E00               	movlw	0
 15057  001CE4  0100               	movlb	0	; () banked
 15058  001CE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15059  001CE8  0E03               	movlw	3
 15060  001CEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15061  001CEC  EC8B  F024         	call	_updateServoPosition	;wreg free
 15062                           
 15063                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 15064  001CF0  0E1F               	movlw	31
 15065  001CF2  0100               	movlb	0	; () banked
 15066  001CF4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15067  001CF6  0E71               	movlw	113
 15068  001CF8  0100               	movlb	0	; () banked
 15069  001CFA  6FAB               	movwf	??_BothServos& (0+255),b
 15070  001CFC  0E1E               	movlw	30
 15071  001CFE                     u10537:
 15072  001CFE  2EE8               	decfsz	wreg,f,c
 15073  001D00  D7FE               	bra	u10537
 15074  001D02  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15075  001D04  D7FC               	bra	u10537
 15076  001D06  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15077  001D08  D7FA               	bra	u10537
 15078  001D0A  F000               	nop	
 15079                           
 15080                           ;Test.c: 383: updateServoPosition(500, 1);
 15081  001D0C  0E01               	movlw	1
 15082  001D0E  0100               	movlb	0	; () banked
 15083  001D10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15084  001D12  0EF4               	movlw	244
 15085  001D14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15086  001D16  0E00               	movlw	0
 15087  001D18  0100               	movlb	0	; () banked
 15088  001D1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15089  001D1C  0E01               	movlw	1
 15090  001D1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15091  001D20  EC8B  F024         	call	_updateServoPosition	;wreg free
 15092                           
 15093                           ;Test.c: 384: updateServoPosition(1050, 3);
 15094  001D24  0E04               	movlw	4
 15095  001D26  0100               	movlb	0	; () banked
 15096  001D28  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15097  001D2A  0E1A               	movlw	26
 15098  001D2C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15099  001D2E  0E00               	movlw	0
 15100  001D30  0100               	movlb	0	; () banked
 15101  001D32  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15102  001D34  0E03               	movlw	3
 15103  001D36  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15104  001D38  EC8B  F024         	call	_updateServoPosition	;wreg free
 15105                           
 15106                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 15107  001D3C  0E1F               	movlw	31
 15108  001D3E  0100               	movlb	0	; () banked
 15109  001D40  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15110  001D42  0E71               	movlw	113
 15111  001D44  0100               	movlb	0	; () banked
 15112  001D46  6FAB               	movwf	??_BothServos& (0+255),b
 15113  001D48  0E1E               	movlw	30
 15114  001D4A                     u10547:
 15115  001D4A  2EE8               	decfsz	wreg,f,c
 15116  001D4C  D7FE               	bra	u10547
 15117  001D4E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15118  001D50  D7FC               	bra	u10547
 15119  001D52  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15120  001D54  D7FA               	bra	u10547
 15121  001D56  F000               	nop	
 15122                           
 15123                           ;Test.c: 386: updateServoPosition(1260, 3);
 15124  001D58  0E04               	movlw	4
 15125  001D5A  0100               	movlb	0	; () banked
 15126  001D5C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15127  001D5E  0EEC               	movlw	236
 15128  001D60  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15129  001D62  0E00               	movlw	0
 15130  001D64  0100               	movlb	0	; () banked
 15131  001D66  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15132  001D68  0E03               	movlw	3
 15133  001D6A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15134  001D6C  EC8B  F024         	call	_updateServoPosition	;wreg free
 15135                           
 15136                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 15137  001D70  0E1D               	movlw	29
 15138  001D72  0100               	movlb	0	; () banked
 15139  001D74  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15140  001D76  0E69               	movlw	105
 15141  001D78  0100               	movlb	0	; () banked
 15142  001D7A  6FAB               	movwf	??_BothServos& (0+255),b
 15143  001D7C  0EA5               	movlw	165
 15144  001D7E                     u10557:
 15145  001D7E  2EE8               	decfsz	wreg,f,c
 15146  001D80  D7FE               	bra	u10557
 15147  001D82  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15148  001D84  D7FC               	bra	u10557
 15149  001D86  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15150  001D88  D7FA               	bra	u10557
 15151                           
 15152                           ;Test.c: 388: updateServoPosition(1050, 3);
 15153  001D8A  0E04               	movlw	4
 15154  001D8C  0100               	movlb	0	; () banked
 15155  001D8E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15156  001D90  0E1A               	movlw	26
 15157  001D92  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15158  001D94  0E00               	movlw	0
 15159  001D96  0100               	movlb	0	; () banked
 15160  001D98  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15161  001D9A  0E03               	movlw	3
 15162  001D9C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15163  001D9E  EC8B  F024         	call	_updateServoPosition	;wreg free
 15164                           
 15165                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15166  001DA2  0E3D               	movlw	61
 15167  001DA4  0100               	movlb	0	; () banked
 15168  001DA6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15169  001DA8  0EE1               	movlw	225
 15170  001DAA  0100               	movlb	0	; () banked
 15171  001DAC  6FAB               	movwf	??_BothServos& (0+255),b
 15172  001DAE  0E3F               	movlw	63
 15173  001DB0                     u10567:
 15174  001DB0  2EE8               	decfsz	wreg,f,c
 15175  001DB2  D7FE               	bra	u10567
 15176  001DB4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15177  001DB6  D7FC               	bra	u10567
 15178  001DB8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15179  001DBA  D7FA               	bra	u10567
 15180  001DBC  D000               	nop2	
 15181                           
 15182                           ;Test.c: 391: updateServoPosition(1670, 1);
 15183  001DBE  0E06               	movlw	6
 15184  001DC0  0100               	movlb	0	; () banked
 15185  001DC2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15186  001DC4  0E86               	movlw	134
 15187  001DC6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15188  001DC8  0E00               	movlw	0
 15189  001DCA  0100               	movlb	0	; () banked
 15190  001DCC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15191  001DCE  0E01               	movlw	1
 15192  001DD0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15193  001DD2  EC8B  F024         	call	_updateServoPosition	;wreg free
 15194                           
 15195                           ;Test.c: 392: updateServoPosition(1050, 3);
 15196  001DD6  0E04               	movlw	4
 15197  001DD8  0100               	movlb	0	; () banked
 15198  001DDA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15199  001DDC  0E1A               	movlw	26
 15200  001DDE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15201  001DE0  0E00               	movlw	0
 15202  001DE2  0100               	movlb	0	; () banked
 15203  001DE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15204  001DE6  0E03               	movlw	3
 15205  001DE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15206  001DEA  EC8B  F024         	call	_updateServoPosition	;wreg free
 15207                           
 15208                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 15209  001DEE  0E1F               	movlw	31
 15210  001DF0  0100               	movlb	0	; () banked
 15211  001DF2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15212  001DF4  0E71               	movlw	113
 15213  001DF6  0100               	movlb	0	; () banked
 15214  001DF8  6FAB               	movwf	??_BothServos& (0+255),b
 15215  001DFA  0E1E               	movlw	30
 15216  001DFC                     u10577:
 15217  001DFC  2EE8               	decfsz	wreg,f,c
 15218  001DFE  D7FE               	bra	u10577
 15219  001E00  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15220  001E02  D7FC               	bra	u10577
 15221  001E04  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15222  001E06  D7FA               	bra	u10577
 15223  001E08  F000               	nop	
 15224                           
 15225                           ;Test.c: 394: updateServoPosition(1390, 3);
 15226  001E0A  0E05               	movlw	5
 15227  001E0C  0100               	movlb	0	; () banked
 15228  001E0E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15229  001E10  0E6E               	movlw	110
 15230  001E12  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15231  001E14  0E00               	movlw	0
 15232  001E16  0100               	movlb	0	; () banked
 15233  001E18  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15234  001E1A  0E03               	movlw	3
 15235  001E1C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15236  001E1E  EC8B  F024         	call	_updateServoPosition	;wreg free
 15237                           
 15238                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 15239  001E22  0E1D               	movlw	29
 15240  001E24  0100               	movlb	0	; () banked
 15241  001E26  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15242  001E28  0E69               	movlw	105
 15243  001E2A  0100               	movlb	0	; () banked
 15244  001E2C  6FAB               	movwf	??_BothServos& (0+255),b
 15245  001E2E  0EA5               	movlw	165
 15246  001E30                     u10587:
 15247  001E30  2EE8               	decfsz	wreg,f,c
 15248  001E32  D7FE               	bra	u10587
 15249  001E34  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15250  001E36  D7FC               	bra	u10587
 15251  001E38  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15252  001E3A  D7FA               	bra	u10587
 15253                           
 15254                           ;Test.c: 396: updateServoPosition(1050, 3);
 15255  001E3C  0E04               	movlw	4
 15256  001E3E  0100               	movlb	0	; () banked
 15257  001E40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15258  001E42  0E1A               	movlw	26
 15259  001E44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15260  001E46  0E00               	movlw	0
 15261  001E48  0100               	movlb	0	; () banked
 15262  001E4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15263  001E4C  0E03               	movlw	3
 15264  001E4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15265  001E50  EC8B  F024         	call	_updateServoPosition	;wreg free
 15266                           
 15267                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 15268  001E54  0E1F               	movlw	31
 15269  001E56  0100               	movlb	0	; () banked
 15270  001E58  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15271  001E5A  0E71               	movlw	113
 15272  001E5C  0100               	movlb	0	; () banked
 15273  001E5E  6FAB               	movwf	??_BothServos& (0+255),b
 15274  001E60  0E1E               	movlw	30
 15275  001E62                     u10597:
 15276  001E62  2EE8               	decfsz	wreg,f,c
 15277  001E64  D7FE               	bra	u10597
 15278  001E66  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15279  001E68  D7FC               	bra	u10597
 15280  001E6A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15281  001E6C  D7FA               	bra	u10597
 15282  001E6E  F000               	nop	
 15283                           
 15284                           ;Test.c: 399: updateServoPosition(2400, 1);
 15285  001E70  0E09               	movlw	9
 15286  001E72  0100               	movlb	0	; () banked
 15287  001E74  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15288  001E76  0E60               	movlw	96
 15289  001E78  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15290  001E7A  0E00               	movlw	0
 15291  001E7C  0100               	movlb	0	; () banked
 15292  001E7E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15293  001E80  0E01               	movlw	1
 15294  001E82  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15295  001E84  EC8B  F024         	call	_updateServoPosition	;wreg free
 15296                           
 15297                           ;Test.c: 400: updateServoPosition(1050, 3);
 15298  001E88  0E04               	movlw	4
 15299  001E8A  0100               	movlb	0	; () banked
 15300  001E8C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15301  001E8E  0E1A               	movlw	26
 15302  001E90  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15303  001E92  0E00               	movlw	0
 15304  001E94  0100               	movlb	0	; () banked
 15305  001E96  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15306  001E98  0E03               	movlw	3
 15307  001E9A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15308  001E9C  EC8B  F024         	call	_updateServoPosition	;wreg free
 15309                           
 15310                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 15311  001EA0  0E1F               	movlw	31
 15312  001EA2  0100               	movlb	0	; () banked
 15313  001EA4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15314  001EA6  0E71               	movlw	113
 15315  001EA8  0100               	movlb	0	; () banked
 15316  001EAA  6FAB               	movwf	??_BothServos& (0+255),b
 15317  001EAC  0E1E               	movlw	30
 15318  001EAE                     u10607:
 15319  001EAE  2EE8               	decfsz	wreg,f,c
 15320  001EB0  D7FE               	bra	u10607
 15321  001EB2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15322  001EB4  D7FC               	bra	u10607
 15323  001EB6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15324  001EB8  D7FA               	bra	u10607
 15325  001EBA  F000               	nop	
 15326                           
 15327                           ;Test.c: 402: updateServoPosition(1390, 3);
 15328  001EBC  0E05               	movlw	5
 15329  001EBE  0100               	movlb	0	; () banked
 15330  001EC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15331  001EC2  0E6E               	movlw	110
 15332  001EC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15333  001EC6  0E00               	movlw	0
 15334  001EC8  0100               	movlb	0	; () banked
 15335  001ECA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15336  001ECC  0E03               	movlw	3
 15337  001ECE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15338  001ED0  EC8B  F024         	call	_updateServoPosition	;wreg free
 15339                           
 15340                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 15341  001ED4  0E1D               	movlw	29
 15342  001ED6  0100               	movlb	0	; () banked
 15343  001ED8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15344  001EDA  0E69               	movlw	105
 15345  001EDC  0100               	movlb	0	; () banked
 15346  001EDE  6FAB               	movwf	??_BothServos& (0+255),b
 15347  001EE0  0EA5               	movlw	165
 15348  001EE2                     u10617:
 15349  001EE2  2EE8               	decfsz	wreg,f,c
 15350  001EE4  D7FE               	bra	u10617
 15351  001EE6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15352  001EE8  D7FC               	bra	u10617
 15353  001EEA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15354  001EEC  D7FA               	bra	u10617
 15355                           
 15356                           ;Test.c: 404: updateServoPosition(1050, 3);
 15357  001EEE  0E04               	movlw	4
 15358  001EF0  0100               	movlb	0	; () banked
 15359  001EF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15360  001EF4  0E1A               	movlw	26
 15361  001EF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15362  001EF8  0E00               	movlw	0
 15363  001EFA  0100               	movlb	0	; () banked
 15364  001EFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15365  001EFE  0E03               	movlw	3
 15366  001F00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15367  001F02  EC8B  F024         	call	_updateServoPosition	;wreg free
 15368                           
 15369                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 15370  001F06  0E1F               	movlw	31
 15371  001F08  0100               	movlb	0	; () banked
 15372  001F0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15373  001F0C  0E71               	movlw	113
 15374  001F0E  0100               	movlb	0	; () banked
 15375  001F10  6FAB               	movwf	??_BothServos& (0+255),b
 15376  001F12  0E1E               	movlw	30
 15377  001F14                     u10627:
 15378  001F14  2EE8               	decfsz	wreg,f,c
 15379  001F16  D7FE               	bra	u10627
 15380  001F18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15381  001F1A  D7FC               	bra	u10627
 15382  001F1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15383  001F1E  D7FA               	bra	u10627
 15384  001F20  F000               	nop	
 15385                           
 15386                           ;Test.c: 407: stopSignals();
 15387  001F22  EC11  F02B         	call	_stopSignals	;wreg free
 15388                           
 15389                           ;Test.c: 408: machine_state = Testing_state;
 15390  001F26  0E03               	movlw	3
 15391  001F28  0100               	movlb	0	; () banked
 15392  001F2A  6FFC               	movwf	_machine_state& (0+255),b
 15393                           
 15394                           ; BSR set to: 0
 15395  001F2C  0012               	return		;funcret
 15396  001F2E                     __end_of_BothServos:
 15397                           	opt stack 0
 15398                           tblptru	equ	0xFF8
 15399                           tblptrh	equ	0xFF7
 15400                           tblptrl	equ	0xFF6
 15401                           tablat	equ	0xFF5
 15402                           prodh	equ	0xFF4
 15403                           prodl	equ	0xFF3
 15404                           intcon	equ	0xFF2
 15405                           intcon2	equ	0xFF1
 15406                           intcon3	equ	0xFF0
 15407                           postinc0	equ	0xFEE
 15408                           wreg	equ	0xFE8
 15409                           postdec1	equ	0xFE5
 15410                           fsr1l	equ	0xFE1
 15411                           indf2	equ	0xFDF
 15412                           postinc2	equ	0xFDE
 15413                           postdec2	equ	0xFDD
 15414                           fsr2h	equ	0xFDA
 15415                           fsr2l	equ	0xFD9
 15416                           status	equ	0xFD8
 15417                           
 15418 ;; *************** function _stopSignals *****************
 15419 ;; Defined at:
 15420 ;;		line 70 in file "main.c"
 15421 ;; Parameters:    Size  Location     Type
 15422 ;;		None
 15423 ;; Auto vars:     Size  Location     Type
 15424 ;;		None
 15425 ;; Return value:  Size  Location     Type
 15426 ;;                  1    wreg      void 
 15427 ;; Registers used:
 15428 ;;		wreg, status,2
 15429 ;; Tracked objects:
 15430 ;;		On entry : 0/0
 15431 ;;		On exit  : 0/0
 15432 ;;		Unchanged: 0/0
 15433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15438 ;;Total ram usage:        0 bytes
 15439 ;; Hardware stack levels used:    1
 15440 ;; Hardware stack levels required when called:    7
 15441 ;; This function calls:
 15442 ;;		Nothing
 15443 ;; This function is called by:
 15444 ;;		_main
 15445 ;;		_BothServos
 15446 ;;		_PlatformTest
 15447 ;;		_arm
 15448 ;; This function uses a non-reentrant model
 15449 ;;
 15450                           
 15451                           	psect	text47
 15452  005622                     __ptext47:
 15453                           	opt stack 0
 15454  005622                     _stopSignals:
 15455                           	opt stack 23
 15456                           
 15457                           ;main.c: 71: LATA = 0x00;
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;incstack = 0
 15461  005622  0E00               	movlw	0
 15462  005624  6E89               	movwf	3977,c	;volatile
 15463                           
 15464                           ;main.c: 72: LATB = 0x00;
 15465  005626  0E00               	movlw	0
 15466  005628  6E8A               	movwf	3978,c	;volatile
 15467                           
 15468                           ;main.c: 73: LATC = 0x00;
 15469  00562A  0E00               	movlw	0
 15470  00562C  6E8B               	movwf	3979,c	;volatile
 15471                           
 15472                           ;main.c: 74: LATD = 0x00;
 15473  00562E  0E00               	movlw	0
 15474  005630  6E8C               	movwf	3980,c	;volatile
 15475                           
 15476                           ;main.c: 75: LATE = 0x00;
 15477  005632  0E00               	movlw	0
 15478  005634  6E8D               	movwf	3981,c	;volatile
 15479                           
 15480                           ;main.c: 76: TMR1ON = 0;
 15481  005636  90CD               	bcf	4045,0,c	;volatile
 15482                           
 15483                           ;main.c: 77: TMR2ON = 0;
 15484  005638  94CA               	bcf	4042,2,c	;volatile
 15485                           
 15486                           ;main.c: 78: TMR3ON = 0;
 15487  00563A  90B1               	bcf	4017,0,c	;volatile
 15488  00563C  0012               	return		;funcret
 15489  00563E                     __end_of_stopSignals:
 15490                           	opt stack 0
 15491                           tblptru	equ	0xFF8
 15492                           tblptrh	equ	0xFF7
 15493                           tblptrl	equ	0xFF6
 15494                           tablat	equ	0xFF5
 15495                           prodh	equ	0xFF4
 15496                           prodl	equ	0xFF3
 15497                           intcon	equ	0xFF2
 15498                           intcon2	equ	0xFF1
 15499                           intcon3	equ	0xFF0
 15500                           postinc0	equ	0xFEE
 15501                           wreg	equ	0xFE8
 15502                           postdec1	equ	0xFE5
 15503                           fsr1l	equ	0xFE1
 15504                           indf2	equ	0xFDF
 15505                           postinc2	equ	0xFDE
 15506                           postdec2	equ	0xFDD
 15507                           fsr2h	equ	0xFDA
 15508                           fsr2l	equ	0xFD9
 15509                           status	equ	0xFD8
 15510                           
 15511 ;; *************** function _initServos *****************
 15512 ;; Defined at:
 15513 ;;		line 436 in file "sort.c"
 15514 ;; Parameters:    Size  Location     Type
 15515 ;;		None
 15516 ;; Auto vars:     Size  Location     Type
 15517 ;;		None
 15518 ;; Return value:  Size  Location     Type
 15519 ;;                  1    wreg      void 
 15520 ;; Registers used:
 15521 ;;		wreg, status,2, status,0, cstack
 15522 ;; Tracked objects:
 15523 ;;		On entry : 0/0
 15524 ;;		On exit  : 0/0
 15525 ;;		Unchanged: 0/0
 15526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15530 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15531 ;;Total ram usage:        1 bytes
 15532 ;; Hardware stack levels used:    1
 15533 ;; Hardware stack levels required when called:    8
 15534 ;; This function calls:
 15535 ;;		_updateServoPosition
 15536 ;; This function is called by:
 15537 ;;		_Loading
 15538 ;;		_BothServos
 15539 ;; This function uses a non-reentrant model
 15540 ;;
 15541                           
 15542                           	psect	text48
 15543  004A20                     __ptext48:
 15544                           	opt stack 0
 15545  004A20                     _initServos:
 15546                           	opt stack 20
 15547                           
 15548                           ;sort.c: 438: updateServoPosition(1200, 1);
 15549                           
 15550                           ;incstack = 0
 15551  004A20  0E04               	movlw	4
 15552  004A22  0100               	movlb	0	; () banked
 15553  004A24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15554  004A26  0EB0               	movlw	176
 15555  004A28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15556  004A2A  0E00               	movlw	0
 15557  004A2C  0100               	movlb	0	; () banked
 15558  004A2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15559  004A30  0E01               	movlw	1
 15560  004A32  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15561  004A34  EC8B  F024         	call	_updateServoPosition	;wreg free
 15562                           
 15563                           ;sort.c: 439: updateServoPosition(1050, 3);
 15564  004A38  0E04               	movlw	4
 15565  004A3A  0100               	movlb	0	; () banked
 15566  004A3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15567  004A3E  0E1A               	movlw	26
 15568  004A40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15569  004A42  0E00               	movlw	0
 15570  004A44  0100               	movlb	0	; () banked
 15571  004A46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15572  004A48  0E03               	movlw	3
 15573  004A4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15574  004A4C  EC8B  F024         	call	_updateServoPosition	;wreg free
 15575                           
 15576                           ;sort.c: 440: TMR1ON = 1;
 15577  004A50  80CD               	bsf	4045,0,c	;volatile
 15578                           
 15579                           ;sort.c: 441: was_low_1 = 0;
 15580  004A52  0E00               	movlw	0
 15581  004A54  6E78               	movwf	_was_low_1+1,c	;volatile
 15582  004A56  0E00               	movlw	0
 15583  004A58  6E77               	movwf	_was_low_1,c	;volatile
 15584                           
 15585                           ;sort.c: 443: _delay((unsigned long)((5)*(32000000/4000.0)));
 15586  004A5A  0E34               	movlw	52
 15587  004A5C  0100               	movlb	0	; () banked
 15588  004A5E  6F88               	movwf	??_initServos& (0+255),b
 15589  004A60  0EF1               	movlw	241
 15590  004A62                     u10637:
 15591  004A62  2EE8               	decfsz	wreg,f,c
 15592  004A64  D7FE               	bra	u10637
 15593  004A66  2F88               	decfsz	??_initServos& (0+255),f,b
 15594  004A68  D7FC               	bra	u10637
 15595  004A6A  D000               	nop2	
 15596                           
 15597                           ;sort.c: 445: TMR3ON = 1;
 15598  004A6C  80B1               	bsf	4017,0,c	;volatile
 15599                           
 15600                           ;sort.c: 446: was_low_3 = 0;
 15601  004A6E  0E00               	movlw	0
 15602  004A70  6E7C               	movwf	_was_low_3+1,c	;volatile
 15603  004A72  0E00               	movlw	0
 15604  004A74  6E7B               	movwf	_was_low_3,c	;volatile
 15605                           
 15606                           ;sort.c: 449: _delay((unsigned long)((1)*(32000000/4000.0)));
 15607  004A76  0E0B               	movlw	11
 15608  004A78  0100               	movlb	0	; () banked
 15609  004A7A  6F88               	movwf	??_initServos& (0+255),b
 15610  004A7C  0E62               	movlw	98
 15611  004A7E                     u10647:
 15612  004A7E  2EE8               	decfsz	wreg,f,c
 15613  004A80  D7FE               	bra	u10647
 15614  004A82  2F88               	decfsz	??_initServos& (0+255),f,b
 15615  004A84  D7FC               	bra	u10647
 15616  004A86  F000               	nop	
 15617                           
 15618                           ;sort.c: 450: LATBbits.LATB3 = 0;
 15619  004A88  968A               	bcf	3978,3,c	;volatile
 15620                           
 15621                           ;sort.c: 451: TMR2ON = 1;
 15622  004A8A  84CA               	bsf	4042,2,c	;volatile
 15623                           
 15624                           ;sort.c: 452: was_low_2 = 0;
 15625  004A8C  0E00               	movlw	0
 15626  004A8E  6E7A               	movwf	_was_low_2+1,c	;volatile
 15627  004A90  0E00               	movlw	0
 15628  004A92  6E79               	movwf	_was_low_2,c	;volatile
 15629                           
 15630                           ;sort.c: 454: LATCbits.LATC0 = 1;
 15631  004A94  808B               	bsf	3979,0,c	;volatile
 15632  004A96  0012               	return		;funcret
 15633  004A98                     __end_of_initServos:
 15634                           	opt stack 0
 15635                           tblptru	equ	0xFF8
 15636                           tblptrh	equ	0xFF7
 15637                           tblptrl	equ	0xFF6
 15638                           tablat	equ	0xFF5
 15639                           prodh	equ	0xFF4
 15640                           prodl	equ	0xFF3
 15641                           intcon	equ	0xFF2
 15642                           intcon2	equ	0xFF1
 15643                           intcon3	equ	0xFF0
 15644                           postinc0	equ	0xFEE
 15645                           wreg	equ	0xFE8
 15646                           postdec1	equ	0xFE5
 15647                           fsr1l	equ	0xFE1
 15648                           indf2	equ	0xFDF
 15649                           postinc2	equ	0xFDE
 15650                           postdec2	equ	0xFDD
 15651                           fsr2h	equ	0xFDA
 15652                           fsr2l	equ	0xFD9
 15653                           status	equ	0xFD8
 15654                           
 15655 ;; *************** function _updateServoPosition *****************
 15656 ;; Defined at:
 15657 ;;		line 522 in file "sort.c"
 15658 ;; Parameters:    Size  Location     Type
 15659 ;;  time_us         2    0[BANK0 ] int 
 15660 ;;  timer           2    2[BANK0 ] int 
 15661 ;; Auto vars:     Size  Location     Type
 15662 ;;  my_time         2    6[BANK0 ] unsigned int 
 15663 ;; Return value:  Size  Location     Type
 15664 ;;                  1    wreg      void 
 15665 ;; Registers used:
 15666 ;;		wreg, status,2, status,0
 15667 ;; Tracked objects:
 15668 ;;		On entry : 0/0
 15669 ;;		On exit  : 0/0
 15670 ;;		Unchanged: 0/0
 15671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15672 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15673 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15675 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15676 ;;Total ram usage:        8 bytes
 15677 ;; Hardware stack levels used:    1
 15678 ;; Hardware stack levels required when called:    7
 15679 ;; This function calls:
 15680 ;;		Nothing
 15681 ;; This function is called by:
 15682 ;;		_Distribution
 15683 ;;		_initServos
 15684 ;;		_actuatorTest
 15685 ;;		_BothServos
 15686 ;; This function uses a non-reentrant model
 15687 ;;
 15688                           
 15689                           	psect	text49
 15690  004916                     __ptext49:
 15691                           	opt stack 0
 15692  004916                     _updateServoPosition:
 15693                           	opt stack 20
 15694                           
 15695                           ;sort.c: 523: unsigned int my_time = 65535 - time_us;
 15696                           
 15697                           ;incstack = 0
 15698  004916  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15699  00491A  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15700  00491E  0100               	movlb	0	; () banked
 15701  004920  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15702  004922  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15703  004924  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15704  004926  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15705  004928  0EFF               	movlw	255
 15706  00492A  0100               	movlb	0	; () banked
 15707  00492C  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15708  00492E  0100               	movlb	0	; () banked
 15709  004930  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15710  004932  0EFF               	movlw	255
 15711  004934  0100               	movlb	0	; () banked
 15712  004936  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15713  004938  0100               	movlb	0	; () banked
 15714  00493A  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15715                           
 15716                           ;sort.c: 524: switch(timer){
 15717  00493C  D01D               	goto	l6658
 15718  00493E                     l6652:
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;sort.c: 526: servoTimes[0] = my_time >> 8;
 15722  00493E  0100               	movlb	0	; () banked
 15723  004940  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15724  004942  0100               	movlb	0	; () banked
 15725  004944  6FDA               	movwf	_servoTimes& (0+255),b
 15726  004946  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15727                           
 15728                           ;sort.c: 527: servoTimes[1] = my_time & 0xFF;
 15729  004948  0100               	movlb	0	; () banked
 15730  00494A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15731  00494C  0100               	movlb	0	; () banked
 15732  00494E  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15733  004950  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15734                           
 15735                           ; BSR set to: 0
 15736                           ;sort.c: 529: pan_servo_state = time_us;
 15737  004952  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15738  004956  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15739  00495A                     l892:
 15740                           
 15741                           ; BSR set to: 0
 15742                           ;sort.c: 531: servoTimes[2] = my_time >> 8;
 15743  00495A  0100               	movlb	0	; () banked
 15744  00495C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15745  00495E  0100               	movlb	0	; () banked
 15746  004960  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15747  004962  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15748                           
 15749                           ;sort.c: 532: servoTimes[3] = my_time & 0xFF;
 15750  004964  0100               	movlb	0	; () banked
 15751  004966  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15752  004968  0100               	movlb	0	; () banked
 15753  00496A  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15754  00496C  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;sort.c: 534: tilt_servo_state = time_us;
 15758  00496E  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15759  004972  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15760                           
 15761                           ;sort.c: 535: }
 15762  004976  0012               	return	
 15763  004978                     l6658:
 15764                           
 15765                           ; BSR set to: 0
 15766  004978  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15767  00497C  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15768                           
 15769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15770                           ; Switch size 1, requested type "space"
 15771                           ; Number of cases is 1, Range of values is 0 to 0
 15772                           ; switch strategies available:
 15773                           ; Name         Instructions Cycles
 15774                           ; simple_byte            4     3 (average)
 15775                           ;	Chosen strategy is simple_byte
 15776  004980  0100               	movlb	0	; () banked
 15777  004982  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15778  004984  0A00               	xorlw	0	; case 0
 15779  004986  A4D8               	btfss	status,2,c
 15780  004988  0012               	return	
 15781                           
 15782                           ; BSR set to: 0
 15783                           ; Switch size 1, requested type "space"
 15784                           ; Number of cases is 2, Range of values is 1 to 3
 15785                           ; switch strategies available:
 15786                           ; Name         Instructions Cycles
 15787                           ; simple_byte            7     4 (average)
 15788                           ;	Chosen strategy is simple_byte
 15789  00498A  0100               	movlb	0	; () banked
 15790  00498C  5184               	movf	??_updateServoPosition& (0+255),w,b
 15791  00498E  0A01               	xorlw	1	; case 1
 15792  004990  B4D8               	btfsc	status,2,c
 15793  004992  D7D5               	goto	l6652
 15794  004994  0A02               	xorlw	2	; case 3
 15795  004996  A4D8               	btfss	status,2,c
 15796  004998  0012               	return	
 15797  00499A  D7DF               	goto	l892
 15798  00499C                     __end_of_updateServoPosition:
 15799                           	opt stack 0
 15800                           tblptru	equ	0xFF8
 15801                           tblptrh	equ	0xFF7
 15802                           tblptrl	equ	0xFF6
 15803                           tablat	equ	0xFF5
 15804                           prodh	equ	0xFF4
 15805                           prodl	equ	0xFF3
 15806                           intcon	equ	0xFF2
 15807                           intcon2	equ	0xFF1
 15808                           intcon3	equ	0xFF0
 15809                           postinc0	equ	0xFEE
 15810                           wreg	equ	0xFE8
 15811                           postdec1	equ	0xFE5
 15812                           fsr1l	equ	0xFE1
 15813                           indf2	equ	0xFDF
 15814                           postinc2	equ	0xFDE
 15815                           postdec2	equ	0xFDD
 15816                           fsr2h	equ	0xFDA
 15817                           fsr2l	equ	0xFD9
 15818                           status	equ	0xFD8
 15819                           
 15820 ;; *************** function _BlockerTest *****************
 15821 ;; Defined at:
 15822 ;;		line 582 in file "Test.c"
 15823 ;; Parameters:    Size  Location     Type
 15824 ;;		None
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;  i               2   44[BANK0 ] int 
 15827 ;;  cond_flag       2   48[BANK0 ] int 
 15828 ;;  cam_flag        2   46[BANK0 ] int 
 15829 ;; Return value:  Size  Location     Type
 15830 ;;                  1    wreg      void 
 15831 ;; Registers used:
 15832 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15833 ;; Tracked objects:
 15834 ;;		On entry : 0/0
 15835 ;;		On exit  : 0/0
 15836 ;;		Unchanged: 0/0
 15837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15841 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15842 ;;Total ram usage:        7 bytes
 15843 ;; Hardware stack levels used:    1
 15844 ;; Hardware stack levels required when called:   10
 15845 ;; This function calls:
 15846 ;;		_lcdInst
 15847 ;;		_printf
 15848 ;; This function is called by:
 15849 ;;		_Test
 15850 ;; This function uses a non-reentrant model
 15851 ;;
 15852                           
 15853                           	psect	text50
 15854  003B30                     __ptext50:
 15855                           	opt stack 0
 15856  003B30                     _BlockerTest:
 15857                           	opt stack 19
 15858                           
 15859                           ;Test.c: 583: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15860                           
 15861                           ; BSR set to: 0
 15862                           ;incstack = 0
 15863  003B30  0E01               	movlw	1
 15864  003B32  EC5F  F02B         	call	_lcdInst
 15865  003B36  0E68               	movlw	104
 15866  003B38  0100               	movlb	0	; () banked
 15867  003B3A  6FAB               	movwf	??_BlockerTest& (0+255),b
 15868  003B3C  0EE4               	movlw	228
 15869  003B3E                     u10657:
 15870  003B3E  2EE8               	decfsz	wreg,f,c
 15871  003B40  D7FE               	bra	u10657
 15872  003B42  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15873  003B44  D7FC               	bra	u10657
 15874  003B46  F000               	nop	
 15875  003B48  0E80               	movlw	128
 15876  003B4A  EC5F  F02B         	call	_lcdInst
 15877                           
 15878                           ;Test.c: 584: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15879  003B4E  0E45               	movlw	low STR_122
 15880  003B50  0100               	movlb	0	; () banked
 15881  003B52  6F8E               	movwf	printf@f& (0+255),b
 15882  003B54  0EFB               	movlw	high STR_122
 15883  003B56  0100               	movlb	0	; () banked
 15884  003B58  6F8F               	movwf	(printf@f+1)& (0+255),b
 15885  003B5A  A480               	btfss	3968,2,c	;volatile
 15886  003B5C  D004               	goto	u7480
 15887  003B5E  0100               	movlb	0	; () banked
 15888  003B60  6BAB               	clrf	??_BlockerTest& (0+255),b
 15889  003B62  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15890  003B64  D002               	goto	u7488
 15891  003B66                     u7480:
 15892  003B66  0100               	movlb	0	; () banked
 15893  003B68  6BAB               	clrf	??_BlockerTest& (0+255),b
 15894  003B6A                     u7488:
 15895  003B6A  0100               	movlb	0	; () banked
 15896  003B6C  51AB               	movf	??_BlockerTest& (0+255),w,b
 15897  003B6E  0100               	movlb	0	; () banked
 15898  003B70  6F90               	movwf	(?_printf+2)& (0+255),b
 15899  003B72  6B91               	clrf	(?_printf+3)& (0+255),b
 15900  003B74  EC84  F00B         	call	_printf	;wreg free
 15901                           
 15902                           ;Test.c: 585: lcdInst(0b11000000);;
 15903  003B78  0EC0               	movlw	192
 15904  003B7A  EC5F  F02B         	call	_lcdInst
 15905                           
 15906                           ;Test.c: 586: printf("OTHER: CAM TOGGLE");
 15907  003B7E  0E21               	movlw	low STR_123
 15908  003B80  0100               	movlb	0	; () banked
 15909  003B82  6F8E               	movwf	printf@f& (0+255),b
 15910  003B84  0EFB               	movlw	high STR_123
 15911  003B86  0100               	movlb	0	; () banked
 15912  003B88  6F8F               	movwf	(printf@f+1)& (0+255),b
 15913  003B8A  EC84  F00B         	call	_printf	;wreg free
 15914                           
 15915                           ;Test.c: 587: int cam_flag = 1;
 15916  003B8E  0E00               	movlw	0
 15917  003B90  0100               	movlb	0	; () banked
 15918  003B92  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15919  003B94  0E01               	movlw	1
 15920  003B96  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15921                           
 15922                           ; BSR set to: 0
 15923                           ;Test.c: 588: int cond_flag = 0;
 15924  003B98  0E00               	movlw	0
 15925  003B9A  0100               	movlb	0	; () banked
 15926  003B9C  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15927  003B9E  0E00               	movlw	0
 15928  003BA0  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15929                           
 15930                           ; BSR set to: 0
 15931                           ;Test.c: 590: while(PORTBbits.RB1 == 0){
 15932                           
 15933                           ;Test.c: 589: while(1){
 15934  003BA2  D018               	goto	l8698
 15935  003BA4                     l8694:
 15936                           
 15937                           ;Test.c: 591: lcdInst(0b10000000);;
 15938  003BA4  0E80               	movlw	128
 15939  003BA6  EC5F  F02B         	call	_lcdInst
 15940                           
 15941                           ;Test.c: 592: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15942  003BAA  0E45               	movlw	low STR_122
 15943  003BAC  0100               	movlb	0	; () banked
 15944  003BAE  6F8E               	movwf	printf@f& (0+255),b
 15945  003BB0  0EFB               	movlw	high STR_122
 15946  003BB2  0100               	movlb	0	; () banked
 15947  003BB4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15948  003BB6  A480               	btfss	3968,2,c	;volatile
 15949  003BB8  D004               	goto	u7490
 15950  003BBA  0100               	movlb	0	; () banked
 15951  003BBC  6BAB               	clrf	??_BlockerTest& (0+255),b
 15952  003BBE  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15953  003BC0  D002               	goto	u7498
 15954  003BC2                     u7490:
 15955  003BC2  0100               	movlb	0	; () banked
 15956  003BC4  6BAB               	clrf	??_BlockerTest& (0+255),b
 15957  003BC6                     u7498:
 15958  003BC6  0100               	movlb	0	; () banked
 15959  003BC8  51AB               	movf	??_BlockerTest& (0+255),w,b
 15960  003BCA  0100               	movlb	0	; () banked
 15961  003BCC  6F90               	movwf	(?_printf+2)& (0+255),b
 15962  003BCE  6B91               	clrf	(?_printf+3)& (0+255),b
 15963  003BD0  EC84  F00B         	call	_printf	;wreg free
 15964  003BD4                     l8698:
 15965  003BD4  A281               	btfss	3969,1,c	;volatile
 15966  003BD6  D7E6               	goto	l8694
 15967                           
 15968                           ;Test.c: 593: }
 15969                           ;Test.c: 594: if(PORTB >> 4 == 0b1111){
 15970  003BD8  3881               	swapf	3969,w,c	;volatile
 15971  003BDA  0B0F               	andlw	15
 15972  003BDC  0A0F               	xorlw	15
 15973  003BDE  B4D8               	btfsc	status,2,c
 15974  003BE0  0012               	return	
 15975                           
 15976                           ;Test.c: 597: else if(PORTB >> 4 == 0b0001){
 15977                           
 15978                           ;Test.c: 596: }
 15979                           
 15980                           ;Test.c: 595: break;
 15981  003BE2  3881               	swapf	3969,w,c	;volatile
 15982  003BE4  0B0F               	andlw	15
 15983  003BE6  06E8               	decf	wreg,f,c
 15984  003BE8  A4D8               	btfss	status,2,c
 15985  003BEA  D016               	goto	l8716
 15986                           
 15987                           ;Test.c: 598: if(cond_flag){
 15988  003BEC  0100               	movlb	0	; () banked
 15989  003BEE  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15990  003BF0  0100               	movlb	0	; () banked
 15991  003BF2  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15992  003BF4  B4D8               	btfsc	status,2,c
 15993  003BF6  D007               	goto	l1407
 15994                           
 15995                           ; BSR set to: 0
 15996                           ;Test.c: 599: LATAbits.LATA3 = 1;
 15997  003BF8  8689               	bsf	3977,3,c	;volatile
 15998  003BFA  D006               	goto	l8714
 15999  003BFC                     u7541:
 16000  003BFC  0E01               	movlw	1
 16001  003BFE                     u7550:
 16002  003BFE  0100               	movlb	0	; () banked
 16003  003C00  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 16004  003C02  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 16005                           
 16006                           ;Test.c: 601: }
 16007  003C04  D054               	goto	l8740
 16008  003C06                     l1407:
 16009                           
 16010                           ; BSR set to: 0
 16011                           ;Test.c: 602: else{
 16012                           ;Test.c: 603: LATAbits.LATA3 = 0;
 16013  003C06  9689               	bcf	3977,3,c	;volatile
 16014  003C08                     l8714:
 16015                           
 16016                           ; BSR set to: 0
 16017                           ;Test.c: 604: cond_flag = !cond_flag;
 16018  003C08  0100               	movlb	0	; () banked
 16019  003C0A  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 16020  003C0C  0100               	movlb	0	; () banked
 16021  003C0E  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16022  003C10  B4D8               	btfsc	status,2,c
 16023  003C12  D7F4               	goto	u7541
 16024  003C14  0E00               	movlw	0
 16025  003C16  D7F3               	goto	u7550
 16026  003C18                     l8716:
 16027                           
 16028                           ;Test.c: 607: else{
 16029                           ;Test.c: 608: if(cam_flag){
 16030  003C18  0100               	movlb	0	; () banked
 16031  003C1A  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 16032  003C1C  0100               	movlb	0	; () banked
 16033  003C1E  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16034  003C20  B4D8               	btfsc	status,2,c
 16035  003C22  D007               	goto	l8722
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;Test.c: 609: LATCbits.LATC0 = 1;
 16039  003C24  808B               	bsf	3979,0,c	;volatile
 16040  003C26  D023               	goto	l8734
 16041  003C28                     u7591:
 16042  003C28  0E01               	movlw	1
 16043  003C2A                     u7600:
 16044  003C2A  0100               	movlb	0	; () banked
 16045  003C2C  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 16046  003C2E  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 16047                           
 16048                           ;Test.c: 611: }
 16049  003C30  D03E               	goto	l8740
 16050  003C32                     l8722:
 16051                           
 16052                           ; BSR set to: 0
 16053                           ;Test.c: 612: else{
 16054                           ;Test.c: 613: for(int i=0;i<5000;i++)
 16055  003C32  0E00               	movlw	0
 16056  003C34  0100               	movlb	0	; () banked
 16057  003C36  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 16058  003C38  0E00               	movlw	0
 16059  003C3A  6FAC               	movwf	BlockerTest@i& (0+255),b
 16060  003C3C                     l8724:
 16061                           
 16062                           ; BSR set to: 0
 16063  003C3C  0100               	movlb	0	; () banked
 16064  003C3E  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 16065  003C40  D008               	goto	l1412
 16066  003C42  0E88               	movlw	136
 16067  003C44  0100               	movlb	0	; () banked
 16068  003C46  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 16069  003C48  0E13               	movlw	19
 16070  003C4A  0100               	movlb	0	; () banked
 16071  003C4C  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 16072  003C4E  B0D8               	btfsc	status,0,c
 16073  003C50  D00D               	goto	l1413
 16074  003C52                     l1412:
 16075                           
 16076                           ; BSR set to: 0
 16077                           ;Test.c: 614: {
 16078                           ;Test.c: 615: LATCbits.LATC0 = 1;
 16079  003C52  808B               	bsf	3979,0,c	;volatile
 16080                           
 16081                           ; BSR set to: 0
 16082                           ;Test.c: 616: _delay((unsigned long)((10)*(32000000/4000000.0)));
 16083  003C54  0E1A               	movlw	26
 16084  003C56                     u10667:
 16085  003C56  2EE8               	decfsz	wreg,f,c
 16086  003C58  D7FE               	bra	u10667
 16087  003C5A  D000               	nop2	
 16088                           
 16089                           ;Test.c: 617: LATCbits.LATC0 = 0;
 16090  003C5C  908B               	bcf	3979,0,c	;volatile
 16091                           
 16092                           ;Test.c: 618: _delay((unsigned long)((90)*(32000000/4000000.0)));
 16093  003C5E  0EF0               	movlw	240
 16094  003C60                     u10677:
 16095  003C60  2EE8               	decfsz	wreg,f,c
 16096  003C62  D7FE               	bra	u10677
 16097  003C64  0100               	movlb	0	; () banked
 16098  003C66  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 16099  003C68  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 16100  003C6A  D7E8               	goto	l8724
 16101  003C6C                     l1413:
 16102                           
 16103                           ; BSR set to: 0
 16104                           ;Test.c: 619: }
 16105                           ;Test.c: 620: LATCbits.LATC0 = 0;
 16106  003C6C  908B               	bcf	3979,0,c	;volatile
 16107  003C6E                     l8734:
 16108                           
 16109                           ; BSR set to: 0
 16110                           ;Test.c: 621: cam_flag = !cam_flag;
 16111  003C6E  0100               	movlb	0	; () banked
 16112  003C70  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 16113  003C72  0100               	movlb	0	; () banked
 16114  003C74  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16115  003C76  B4D8               	btfsc	status,2,c
 16116  003C78  D7D7               	goto	u7591
 16117  003C7A  0E00               	movlw	0
 16118  003C7C  D7D6               	goto	u7600
 16119  003C7E                     l8736:
 16120                           
 16121                           ;Test.c: 626: lcdInst(0b10000000);;
 16122  003C7E  0E80               	movlw	128
 16123  003C80  EC5F  F02B         	call	_lcdInst
 16124                           
 16125                           ;Test.c: 627: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16126  003C84  0E45               	movlw	low STR_122
 16127  003C86  0100               	movlb	0	; () banked
 16128  003C88  6F8E               	movwf	printf@f& (0+255),b
 16129  003C8A  0EFB               	movlw	high STR_122
 16130  003C8C  0100               	movlb	0	; () banked
 16131  003C8E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16132  003C90  A480               	btfss	3968,2,c	;volatile
 16133  003C92  D004               	goto	u7650
 16134  003C94  0100               	movlb	0	; () banked
 16135  003C96  6BAB               	clrf	??_BlockerTest& (0+255),b
 16136  003C98  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16137  003C9A  D002               	goto	u7658
 16138  003C9C                     u7650:
 16139  003C9C  0100               	movlb	0	; () banked
 16140  003C9E  6BAB               	clrf	??_BlockerTest& (0+255),b
 16141  003CA0                     u7658:
 16142  003CA0  0100               	movlb	0	; () banked
 16143  003CA2  51AB               	movf	??_BlockerTest& (0+255),w,b
 16144  003CA4  0100               	movlb	0	; () banked
 16145  003CA6  6F90               	movwf	(?_printf+2)& (0+255),b
 16146  003CA8  6B91               	clrf	(?_printf+3)& (0+255),b
 16147  003CAA  EC84  F00B         	call	_printf	;wreg free
 16148  003CAE                     l8740:
 16149  003CAE  A281               	btfss	3969,1,c	;volatile
 16150  003CB0  D791               	goto	l8698
 16151  003CB2  D7E5               	goto	l8736
 16152  003CB4                     __end_of_BlockerTest:
 16153                           	opt stack 0
 16154                           tblptru	equ	0xFF8
 16155                           tblptrh	equ	0xFF7
 16156                           tblptrl	equ	0xFF6
 16157                           tablat	equ	0xFF5
 16158                           prodh	equ	0xFF4
 16159                           prodl	equ	0xFF3
 16160                           intcon	equ	0xFF2
 16161                           intcon2	equ	0xFF1
 16162                           intcon3	equ	0xFF0
 16163                           postinc0	equ	0xFEE
 16164                           wreg	equ	0xFE8
 16165                           postdec1	equ	0xFE5
 16166                           fsr1l	equ	0xFE1
 16167                           indf2	equ	0xFDF
 16168                           postinc2	equ	0xFDE
 16169                           postdec2	equ	0xFDD
 16170                           fsr2h	equ	0xFDA
 16171                           fsr2l	equ	0xFD9
 16172                           status	equ	0xFD8
 16173                           
 16174 ;; *************** function _printf *****************
 16175 ;; Defined at:
 16176 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 16177 ;; Parameters:    Size  Location     Type
 16178 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 16179 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 16180 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 16181 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 16182 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 16183 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 16184 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 16185 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 16186 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 16187 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 16188 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 16189 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 16190 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 16191 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 16192 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 16193 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 16194 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 16195 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 16196 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 16197 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 16198 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 16199 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 16200 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 16201 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 16202 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 16203 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 16204 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 16205 ;; Auto vars:     Size  Location     Type
 16206 ;;  tmpval          4    0        struct .
 16207 ;;  width           2   41[BANK0 ] int 
 16208 ;;  val             2   37[BANK0 ] unsigned int 
 16209 ;;  len             2   35[BANK0 ] unsigned int 
 16210 ;;  ap              2   33[BANK0 ] PTR void [1]
 16211 ;;		 -> ?i2_printf(2), ?_printf(2), 
 16212 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 16213 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 16214 ;;  c               1   40[BANK0 ] char 
 16215 ;;  flag            1   39[BANK0 ] unsigned char 
 16216 ;;  prec            1   30[BANK0 ] char 
 16217 ;; Return value:  Size  Location     Type
 16218 ;;                  2   14[BANK0 ] int 
 16219 ;; Registers used:
 16220 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16221 ;; Tracked objects:
 16222 ;;		On entry : 0/0
 16223 ;;		On exit  : 0/0
 16224 ;;		Unchanged: 0/0
 16225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16226 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16227 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16229 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16230 ;;Total ram usage:       29 bytes
 16231 ;; Hardware stack levels used:    1
 16232 ;; Hardware stack levels required when called:    9
 16233 ;; This function calls:
 16234 ;;		___lwdiv
 16235 ;;		___lwmod
 16236 ;;		___wmul
 16237 ;;		_isdigit
 16238 ;;		_putch
 16239 ;; This function is called by:
 16240 ;;		_UI
 16241 ;;		_change_state_to_menu_start
 16242 ;;		_change_state_to_menu_12
 16243 ;;		_change_state_to_menu_22
 16244 ;;		_printRTC
 16245 ;;		_EEPROM_write
 16246 ;;		_Test
 16247 ;;		_algorithmTest
 16248 ;;		_sensorTest
 16249 ;;		_actuatorTest
 16250 ;;		_BothServos
 16251 ;;		_PortTestDC
 16252 ;;		_PlatformTest
 16253 ;;		_SpeedTest
 16254 ;;		_BlockerTest
 16255 ;;		_arm
 16256 ;;		_PortTestPusher
 16257 ;;		_ToggleTestA5
 16258 ;; This function uses a non-reentrant model
 16259 ;;
 16260                           
 16261                           	psect	text51
 16262  001708                     __ptext51:
 16263                           	opt stack 0
 16264  001708                     _printf:
 16265                           	opt stack 18
 16266                           
 16267                           ;doprnt.c: 466: va_list ap;
 16268                           ;doprnt.c: 499: signed char c;
 16269                           ;doprnt.c: 501: int width;
 16270                           ;doprnt.c: 506: signed char prec;
 16271                           ;doprnt.c: 508: unsigned char flag;
 16272                           ;doprnt.c: 523: union {
 16273                           ;doprnt.c: 524: unsigned long vd;
 16274                           ;doprnt.c: 525: double integ;
 16275                           ;doprnt.c: 526: } tmpval;
 16276                           ;doprnt.c: 528: unsigned int val;
 16277                           ;doprnt.c: 529: unsigned len;
 16278                           ;doprnt.c: 530: const char * cp;
 16279                           ;doprnt.c: 533: *ap = __va_start();
 16280                           
 16281                           ;incstack = 0
 16282  001708  0E90               	movlw	low (?_printf+2)
 16283  00170A  0100               	movlb	0	; () banked
 16284  00170C  6FA1               	movwf	printf@ap& (0+255),b
 16285  00170E  0E00               	movlw	high (?_printf+2)
 16286  001710  0100               	movlb	0	; () banked
 16287  001712  6FA2               	movwf	(printf@ap+1)& (0+255),b
 16288                           
 16289                           ;doprnt.c: 536: while(c = *f++) {
 16290  001714  D205               	goto	l6612
 16291  001716                     l6482:
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;doprnt.c: 538: if(c != '%')
 16295  001716  0E25               	movlw	37
 16296  001718  0100               	movlb	0	; () banked
 16297  00171A  19A8               	xorwf	printf@c& (0+255),w,b
 16298  00171C  B4D8               	btfsc	status,2,c
 16299  00171E  D005               	goto	l6486
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;doprnt.c: 540: {
 16303                           ;doprnt.c: 541: (putch(c) );
 16304  001720  0100               	movlb	0	; () banked
 16305  001722  51A8               	movf	printf@c& (0+255),w,b
 16306  001724  EC57  F02B         	call	_putch
 16307                           
 16308                           ;doprnt.c: 542: continue;
 16309  001728  D1FB               	goto	l6612
 16310  00172A                     l6486:
 16311                           
 16312                           ;doprnt.c: 543: }
 16313                           ;doprnt.c: 546: width = 0;
 16314  00172A  0E00               	movlw	0
 16315  00172C  0100               	movlb	0	; () banked
 16316  00172E  6FAA               	movwf	(printf@width+1)& (0+255),b
 16317  001730  0E00               	movlw	0
 16318  001732  6FA9               	movwf	printf@width& (0+255),b
 16319                           
 16320                           ;doprnt.c: 548: flag = 0;
 16321  001734  0E00               	movlw	0
 16322  001736  0100               	movlb	0	; () banked
 16323  001738  6FA7               	movwf	printf@flag& (0+255),b
 16324                           
 16325                           ; BSR set to: 0
 16326                           ;doprnt.c: 551: switch(*f) {
 16327                           
 16328                           ;doprnt.c: 550: for(;;) {
 16329  00173A  D005               	goto	l6492
 16330  00173C                     l6488:
 16331                           
 16332                           ;doprnt.c: 580: flag |= 0x04;
 16333  00173C  0100               	movlb	0	; () banked
 16334  00173E  85A7               	bsf	printf@flag& (0+255),2,b
 16335                           
 16336                           ;doprnt.c: 581: f++;
 16337  001740  0100               	movlb	0	; () banked
 16338  001742  4B8E               	infsnz	printf@f& (0+255),f,b
 16339  001744  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16340  001746                     l6492:
 16341  001746  C08E  FFF6         	movff	printf@f,tblptrl
 16342  00174A  C08F  FFF7         	movff	printf@f+1,tblptrh
 16343  00174E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16344  00174E  6AF8               	clrf	tblptru,c
 16345  001750                     	endif
 16346  001750                     	if	0	;tblptru may be non-zero
 16347  001750                     	endif
 16348  001750  0008               	tblrd		*
 16349  001752  50F5               	movf	tablat,w,c
 16350                           
 16351                           ; Switch size 1, requested type "space"
 16352                           ; Number of cases is 1, Range of values is 48 to 48
 16353                           ; switch strategies available:
 16354                           ; Name         Instructions Cycles
 16355                           ; simple_byte            4     3 (average)
 16356                           ;	Chosen strategy is simple_byte
 16357  001754  0A30               	xorlw	48	; case 48
 16358  001756  B4D8               	btfsc	status,2,c
 16359  001758  D7F1               	goto	l6488
 16360                           
 16361                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 16362                           
 16363                           ;doprnt.c: 586: }
 16364                           
 16365                           ;doprnt.c: 585: break;
 16366  00175A  C08E  FFF6         	movff	printf@f,tblptrl
 16367  00175E  C08F  FFF7         	movff	printf@f+1,tblptrh
 16368  001762                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16369  001762  6AF8               	clrf	tblptru,c
 16370  001764                     	endif
 16371  001764                     	if	0	;tblptru may be non-zero
 16372  001764                     	endif
 16373  001764  0008               	tblrd		*
 16374  001766  50F5               	movf	tablat,w,c
 16375  001768  EC6B  F02A         	call	_isdigit
 16376  00176C  A0D8               	btfss	status,0,c
 16377  00176E  D0D2               	goto	l6540
 16378                           
 16379                           ;doprnt.c: 598: width = 0;
 16380  001770  0E00               	movlw	0
 16381  001772  0100               	movlb	0	; () banked
 16382  001774  6FAA               	movwf	(printf@width+1)& (0+255),b
 16383  001776  0E00               	movlw	0
 16384  001778  6FA9               	movwf	printf@width& (0+255),b
 16385  00177A                     l6498:
 16386                           
 16387                           ;doprnt.c: 600: width *= 10;
 16388  00177A  C0A9  F080         	movff	printf@width,___wmul@multiplier
 16389  00177E  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 16390  001782  0E00               	movlw	0
 16391  001784  0100               	movlb	0	; () banked
 16392  001786  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16393  001788  0E0A               	movlw	10
 16394  00178A  6F82               	movwf	___wmul@multiplicand& (0+255),b
 16395  00178C  ECD4  F028         	call	___wmul	;wreg free
 16396  001790  C080  F0A9         	movff	?___wmul,printf@width
 16397  001794  C081  F0AA         	movff	?___wmul+1,printf@width+1
 16398                           
 16399                           ;doprnt.c: 601: width += *f++ - '0';
 16400  001798  0ED0               	movlw	208
 16401  00179A  0100               	movlb	0	; () banked
 16402  00179C  6F9A               	movwf	??_printf& (0+255),b
 16403  00179E  0EFF               	movlw	255
 16404  0017A0  0100               	movlb	0	; () banked
 16405  0017A2  6F9B               	movwf	(??_printf+1)& (0+255),b
 16406  0017A4  C08E  FFF6         	movff	printf@f,tblptrl
 16407  0017A8  C08F  FFF7         	movff	printf@f+1,tblptrh
 16408  0017AC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16409  0017AC  6AF8               	clrf	tblptru,c
 16410  0017AE                     	endif
 16411  0017AE                     	if	0	;tblptru may be non-zero
 16412  0017AE                     	endif
 16413  0017AE  0008               	tblrd		*
 16414  0017B0  50F5               	movf	tablat,w,c
 16415  0017B2  0100               	movlb	0	; () banked
 16416  0017B4  6F9C               	movwf	(??_printf+2)& (0+255),b
 16417  0017B6  6B9D               	clrf	(??_printf+3)& (0+255),b
 16418  0017B8  0100               	movlb	0	; () banked
 16419  0017BA  519A               	movf	??_printf& (0+255),w,b
 16420  0017BC  0100               	movlb	0	; () banked
 16421  0017BE  279C               	addwf	(??_printf+2)& (0+255),f,b
 16422  0017C0  0100               	movlb	0	; () banked
 16423  0017C2  519B               	movf	(??_printf+1)& (0+255),w,b
 16424  0017C4  0100               	movlb	0	; () banked
 16425  0017C6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 16426  0017C8  0100               	movlb	0	; () banked
 16427  0017CA  519C               	movf	(??_printf+2)& (0+255),w,b
 16428  0017CC  0100               	movlb	0	; () banked
 16429  0017CE  27A9               	addwf	printf@width& (0+255),f,b
 16430  0017D0  0100               	movlb	0	; () banked
 16431  0017D2  519D               	movf	(??_printf+3)& (0+255),w,b
 16432  0017D4  0100               	movlb	0	; () banked
 16433  0017D6  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 16434                           
 16435                           ; BSR set to: 0
 16436  0017D8  0100               	movlb	0	; () banked
 16437  0017DA  4B8E               	infsnz	printf@f& (0+255),f,b
 16438  0017DC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16439                           
 16440                           ; BSR set to: 0
 16441                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 16442  0017DE  C08E  FFF6         	movff	printf@f,tblptrl
 16443  0017E2  C08F  FFF7         	movff	printf@f+1,tblptrh
 16444  0017E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16445  0017E6  6AF8               	clrf	tblptru,c
 16446  0017E8                     	endif
 16447  0017E8                     	if	0	;tblptru may be non-zero
 16448  0017E8                     	endif
 16449  0017E8  0008               	tblrd		*
 16450  0017EA  50F5               	movf	tablat,w,c
 16451  0017EC  EC6B  F02A         	call	_isdigit
 16452  0017F0  A0D8               	btfss	status,0,c
 16453  0017F2  D090               	goto	l6540
 16454  0017F4  D7C2               	goto	l6498
 16455  0017F6                     l6506:
 16456                           
 16457                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 16458  0017F6  C0A1  FFD9         	movff	printf@ap,fsr2l
 16459  0017FA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16460  0017FE  CFDE F09F          	movff	postinc2,printf@cp
 16461  001802  CFDD F0A0          	movff	postdec2,printf@cp+1
 16462  001806  0E02               	movlw	2
 16463  001808  0100               	movlb	0	; () banked
 16464  00180A  27A1               	addwf	printf@ap& (0+255),f,b
 16465  00180C  0E00               	movlw	0
 16466  00180E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16467                           
 16468                           ; BSR set to: 0
 16469                           ;doprnt.c: 740: if(!cp)
 16470  001810  0100               	movlb	0	; () banked
 16471  001812  519F               	movf	printf@cp& (0+255),w,b
 16472  001814  0100               	movlb	0	; () banked
 16473  001816  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 16474  001818  A4D8               	btfss	status,2,c
 16475  00181A  D006               	goto	l6514
 16476                           
 16477                           ; BSR set to: 0
 16478                           ;doprnt.c: 741: cp = "(null)";
 16479  00181C  0EB5               	movlw	low STR_130
 16480  00181E  0100               	movlb	0	; () banked
 16481  001820  6F9F               	movwf	printf@cp& (0+255),b
 16482  001822  0EFF               	movlw	high STR_130
 16483  001824  0100               	movlb	0	; () banked
 16484  001826  6FA0               	movwf	(printf@cp+1)& (0+255),b
 16485  001828                     l6514:
 16486                           
 16487                           ; BSR set to: 0
 16488                           ;doprnt.c: 745: len = 0;
 16489  001828  0E00               	movlw	0
 16490  00182A  0100               	movlb	0	; () banked
 16491  00182C  6FA4               	movwf	(printf@len+1)& (0+255),b
 16492  00182E  0E00               	movlw	0
 16493  001830  6FA3               	movwf	printf@len& (0+255),b
 16494                           
 16495                           ;doprnt.c: 746: while(cp[len])
 16496  001832  D003               	goto	l6518
 16497  001834                     l6516:
 16498                           
 16499                           ;doprnt.c: 747: len++;
 16500  001834  0100               	movlb	0	; () banked
 16501  001836  4BA3               	infsnz	printf@len& (0+255),f,b
 16502  001838  2BA4               	incf	(printf@len+1)& (0+255),f,b
 16503  00183A                     l6518:
 16504                           
 16505                           ; BSR set to: 0
 16506  00183A  0100               	movlb	0	; () banked
 16507  00183C  51A3               	movf	printf@len& (0+255),w,b
 16508  00183E  0100               	movlb	0	; () banked
 16509  001840  259F               	addwf	printf@cp& (0+255),w,b
 16510  001842  0100               	movlb	0	; () banked
 16511  001844  6F9A               	movwf	??_printf& (0+255),b
 16512  001846  0100               	movlb	0	; () banked
 16513  001848  51A4               	movf	(printf@len+1)& (0+255),w,b
 16514  00184A  0100               	movlb	0	; () banked
 16515  00184C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 16516  00184E  0100               	movlb	0	; () banked
 16517  001850  6F9B               	movwf	(??_printf+1)& (0+255),b
 16518  001852  C09A  FFF6         	movff	??_printf,tblptrl
 16519  001856  C09B  FFF7         	movff	??_printf+1,tblptrh
 16520  00185A  0E00               	movlw	low (__mediumconst shr (0+16))
 16521  00185C  6EF8               	movwf	tblptru,c
 16522  00185E  0E0F               	movlw	(high __ramtop+-1)
 16523  001860  64F7               	cpfsgt	tblptrh,c
 16524  001862  D003               	bra	u4897
 16525  001864  0008               	tblrd		*
 16526  001866  50F5               	movf	tablat,w,c
 16527  001868  D005               	bra	u4890
 16528  00186A                     u4897:
 16529  00186A  CFF6 FFE9          	movff	tblptrl,fsr0l
 16530  00186E  CFF7 FFEA          	movff	tblptrh,fsr0h
 16531  001872  50EF               	movf	indf0,w,c
 16532  001874                     u4890:
 16533  001874  0900               	iorlw	0
 16534  001876  A4D8               	btfss	status,2,c
 16535  001878  D7DD               	goto	l6516
 16536                           
 16537                           ;doprnt.c: 757: if(width > len)
 16538  00187A  0100               	movlb	0	; () banked
 16539  00187C  51A9               	movf	printf@width& (0+255),w,b
 16540  00187E  0100               	movlb	0	; () banked
 16541  001880  5DA3               	subwf	printf@len& (0+255),w,b
 16542  001882  0100               	movlb	0	; () banked
 16543  001884  51AA               	movf	(printf@width+1)& (0+255),w,b
 16544  001886  0100               	movlb	0	; () banked
 16545  001888  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 16546  00188A  B0D8               	btfsc	status,0,c
 16547  00188C  D009               	goto	l6524
 16548                           
 16549                           ; BSR set to: 0
 16550                           ;doprnt.c: 758: width -= len;
 16551  00188E  0100               	movlb	0	; () banked
 16552  001890  51A3               	movf	printf@len& (0+255),w,b
 16553  001892  0100               	movlb	0	; () banked
 16554  001894  5FA9               	subwf	printf@width& (0+255),f,b
 16555  001896  0100               	movlb	0	; () banked
 16556  001898  51A4               	movf	(printf@len+1)& (0+255),w,b
 16557  00189A  0100               	movlb	0	; () banked
 16558  00189C  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16559  00189E  D009               	goto	l6528
 16560  0018A0                     l6524:
 16561                           
 16562                           ; BSR set to: 0
 16563                           ;doprnt.c: 759: else
 16564                           ;doprnt.c: 760: width = 0;
 16565  0018A0  0E00               	movlw	0
 16566  0018A2  0100               	movlb	0	; () banked
 16567  0018A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 16568  0018A6  0E00               	movlw	0
 16569  0018A8  6FA9               	movwf	printf@width& (0+255),b
 16570                           
 16571                           ; BSR set to: 0
 16572                           ;doprnt.c: 764: while(width--)
 16573  0018AA  D003               	goto	l6528
 16574  0018AC                     l6526:
 16575                           
 16576                           ; BSR set to: 0
 16577                           ;doprnt.c: 765: (putch(' ') );
 16578  0018AC  0E20               	movlw	32
 16579  0018AE  EC57  F02B         	call	_putch
 16580  0018B2                     l6528:
 16581  0018B2  0100               	movlb	0	; () banked
 16582  0018B4  07A9               	decf	printf@width& (0+255),f,b
 16583  0018B6  A0D8               	btfss	status,0,c
 16584  0018B8  07AA               	decf	(printf@width+1)& (0+255),f,b
 16585  0018BA  0100               	movlb	0	; () banked
 16586  0018BC  29A9               	incf	printf@width& (0+255),w,b
 16587  0018BE  E1F6               	bnz	l6526
 16588  0018C0  0100               	movlb	0	; () banked
 16589  0018C2  29AA               	incf	(printf@width+1)& (0+255),w,b
 16590  0018C4  B4D8               	btfsc	status,2,c
 16591  0018C6  D017               	goto	l6534
 16592  0018C8  D7F1               	goto	l6526
 16593  0018CA                     l6530:
 16594                           
 16595                           ; BSR set to: 0
 16596                           ;doprnt.c: 768: (putch(*cp++) );
 16597  0018CA  C09F  FFF6         	movff	printf@cp,tblptrl
 16598  0018CE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16599  0018D2  0E00               	movlw	low (__mediumconst shr (0+16))
 16600  0018D4  6EF8               	movwf	tblptru,c
 16601  0018D6  0E0F               	movlw	(high __ramtop+-1)
 16602  0018D8  64F7               	cpfsgt	tblptrh,c
 16603  0018DA  D003               	bra	u4937
 16604  0018DC  0008               	tblrd		*
 16605  0018DE  50F5               	movf	tablat,w,c
 16606  0018E0  D005               	bra	u4930
 16607  0018E2                     u4937:
 16608  0018E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 16609  0018E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 16610  0018EA  50EF               	movf	indf0,w,c
 16611  0018EC                     u4930:
 16612  0018EC  EC57  F02B         	call	_putch
 16613  0018F0  0100               	movlb	0	; () banked
 16614  0018F2  4B9F               	infsnz	printf@cp& (0+255),f,b
 16615  0018F4  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16616  0018F6                     l6534:
 16617                           
 16618                           ; BSR set to: 0
 16619  0018F6  0100               	movlb	0	; () banked
 16620  0018F8  07A3               	decf	printf@len& (0+255),f,b
 16621  0018FA  A0D8               	btfss	status,0,c
 16622  0018FC  07A4               	decf	(printf@len+1)& (0+255),f,b
 16623  0018FE  0100               	movlb	0	; () banked
 16624  001900  29A3               	incf	printf@len& (0+255),w,b
 16625  001902  E1E3               	bnz	l6530
 16626  001904  0100               	movlb	0	; () banked
 16627  001906  29A4               	incf	(printf@len+1)& (0+255),w,b
 16628  001908  B4D8               	btfsc	status,2,c
 16629  00190A  D10A               	goto	l6612
 16630  00190C  D7DE               	goto	l6530
 16631  00190E                     l6536:
 16632                           
 16633                           ; BSR set to: 0
 16634                           ;doprnt.c: 818: flag |= 0x40;
 16635  00190E  0100               	movlb	0	; () banked
 16636  001910  8DA7               	bsf	printf@flag& (0+255),6,b
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;doprnt.c: 822: }
 16640                           
 16641                           ;doprnt.c: 819: break;
 16642  001912  D01D               	goto	l1484
 16643  001914                     l6540:
 16644  001914  C08E  FFF6         	movff	printf@f,tblptrl
 16645  001918  C08F  FFF7         	movff	printf@f+1,tblptrh
 16646  00191C  0100               	movlb	0	; () banked
 16647  00191E  4B8E               	infsnz	printf@f& (0+255),f,b
 16648  001920  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16649  001922                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16650  001922  6AF8               	clrf	tblptru,c
 16651  001924                     	endif
 16652  001924                     	if	0	;tblptru may be non-zero
 16653  001924                     	endif
 16654  001924  0008               	tblrd		*
 16655  001926  CFF5 F0A8          	movff	tablat,printf@c
 16656  00192A  0100               	movlb	0	; () banked
 16657  00192C  51A8               	movf	printf@c& (0+255),w,b
 16658                           
 16659                           ; Switch size 1, requested type "space"
 16660                           ; Number of cases is 5, Range of values is 0 to 117
 16661                           ; switch strategies available:
 16662                           ; Name         Instructions Cycles
 16663                           ; simple_byte           16     9 (average)
 16664                           ;	Chosen strategy is simple_byte
 16665  00192E  0A00               	xorlw	0	; case 0
 16666  001930  B4D8               	btfsc	status,2,c
 16667  001932  0012               	return	
 16668  001934  0A64               	xorlw	100	; case 100
 16669  001936  B4D8               	btfsc	status,2,c
 16670  001938  D00A               	goto	l1484
 16671  00193A  0A0D               	xorlw	13	; case 105
 16672  00193C  B4D8               	btfsc	status,2,c
 16673  00193E  D007               	goto	l1484
 16674  001940  0A1A               	xorlw	26	; case 115
 16675  001942  B4D8               	btfsc	status,2,c
 16676  001944  D758               	goto	l6506
 16677  001946  0A06               	xorlw	6	; case 117
 16678  001948  B4D8               	btfsc	status,2,c
 16679  00194A  D7E1               	goto	l6536
 16680  00194C  D0E9               	goto	l6612
 16681  00194E                     l1484:
 16682                           
 16683                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16684  00194E  0100               	movlb	0	; () banked
 16685  001950  BDA7               	btfsc	printf@flag& (0+255),6,b
 16686  001952  D019               	goto	l6552
 16687                           
 16688                           ; BSR set to: 0
 16689                           ;doprnt.c: 1253: {
 16690                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16691  001954  C0A1  FFD9         	movff	printf@ap,fsr2l
 16692  001958  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16693  00195C  CFDE F0A5          	movff	postinc2,printf@val
 16694  001960  CFDD F0A6          	movff	postdec2,printf@val+1
 16695                           
 16696                           ; BSR set to: 0
 16697  001964  0E02               	movlw	2
 16698  001966  0100               	movlb	0	; () banked
 16699  001968  27A1               	addwf	printf@ap& (0+255),f,b
 16700  00196A  0E00               	movlw	0
 16701  00196C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16702                           
 16703                           ; BSR set to: 0
 16704                           ;doprnt.c: 1261: if((int)val < 0) {
 16705  00196E  0100               	movlb	0	; () banked
 16706  001970  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16707  001972  D016               	goto	l6556
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;doprnt.c: 1262: flag |= 0x03;
 16711  001974  0E03               	movlw	3
 16712  001976  0100               	movlb	0	; () banked
 16713  001978  13A7               	iorwf	printf@flag& (0+255),f,b
 16714                           
 16715                           ; BSR set to: 0
 16716                           ;doprnt.c: 1263: val = -val;
 16717  00197A  0100               	movlb	0	; () banked
 16718  00197C  6DA5               	negf	printf@val& (0+255),b
 16719  00197E  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16720  001980  B0D8               	btfsc	status,0,c
 16721  001982  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16722                           
 16723                           ; BSR set to: 0
 16724                           ;doprnt.c: 1264: }
 16725                           ;doprnt.c: 1266: }
 16726  001984  D00D               	goto	l6556
 16727  001986                     l6552:
 16728                           
 16729                           ; BSR set to: 0
 16730                           ;doprnt.c: 1268: else
 16731                           ;doprnt.c: 1273: {
 16732                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16733  001986  C0A1  FFD9         	movff	printf@ap,fsr2l
 16734  00198A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16735  00198E  CFDE F0A5          	movff	postinc2,printf@val
 16736  001992  CFDD F0A6          	movff	postdec2,printf@val+1
 16737                           
 16738                           ; BSR set to: 0
 16739  001996  0E02               	movlw	2
 16740  001998  0100               	movlb	0	; () banked
 16741  00199A  27A1               	addwf	printf@ap& (0+255),f,b
 16742  00199C  0E00               	movlw	0
 16743  00199E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16744  0019A0                     l6556:
 16745                           
 16746                           ; BSR set to: 0
 16747                           ;doprnt.c: 1287: }
 16748                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16749  0019A0  0E01               	movlw	1
 16750  0019A2  0100               	movlb	0	; () banked
 16751  0019A4  6FA8               	movwf	printf@c& (0+255),b
 16752  0019A6                     l6558:
 16753                           
 16754                           ; BSR set to: 0
 16755  0019A6  0E05               	movlw	5
 16756  0019A8  0100               	movlb	0	; () banked
 16757  0019AA  19A8               	xorwf	printf@c& (0+255),w,b
 16758  0019AC  B4D8               	btfsc	status,2,c
 16759  0019AE  D019               	goto	l6570
 16760                           
 16761                           ; BSR set to: 0
 16762                           ;doprnt.c: 1306: if(val < dpowers[c])
 16763                           
 16764                           ; BSR set to: 0
 16765                           
 16766                           ; BSR set to: 0
 16767  0019B0  0100               	movlb	0	; () banked
 16768  0019B2  51A8               	movf	printf@c& (0+255),w,b
 16769  0019B4  0D02               	mullw	2
 16770  0019B6  0EB4               	movlw	low _dpowers
 16771  0019B8  24F3               	addwf	prodl,w,c
 16772  0019BA  6EF6               	movwf	tblptrl,c
 16773  0019BC  0EFA               	movlw	high _dpowers
 16774  0019BE  20F4               	addwfc	prodh,w,c
 16775  0019C0  6EF7               	movwf	tblptrh,c
 16776  0019C2                     	if	1	;There are 3 active tblptr bytes
 16777  0019C2  6AF8               	clrf	tblptru,c
 16778  0019C4  0E00               	movlw	low (__mediumconst shr (0+16))
 16779  0019C6  22F8               	addwfc	tblptru,f,c
 16780  0019C8                     	endif
 16781  0019C8  0009               	tblrd		*+
 16782  0019CA  50F5               	movf	tablat,w,c
 16783  0019CC  0100               	movlb	0	; () banked
 16784  0019CE  5DA5               	subwf	printf@val& (0+255),w,b
 16785  0019D0  0009               	tblrd		*+
 16786  0019D2  50F5               	movf	tablat,w,c
 16787  0019D4  0100               	movlb	0	; () banked
 16788  0019D6  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16789  0019D8  A0D8               	btfss	status,0,c
 16790  0019DA  D003               	goto	l6570
 16791                           
 16792                           ; BSR set to: 0
 16793                           
 16794                           ; BSR set to: 0
 16795                           
 16796                           ; BSR set to: 0
 16797                           ;doprnt.c: 1307: break;
 16798  0019DC  0100               	movlb	0	; () banked
 16799  0019DE  2BA8               	incf	printf@c& (0+255),f,b
 16800  0019E0  D7E2               	goto	l6558
 16801  0019E2                     l6570:
 16802                           
 16803                           ; BSR set to: 0
 16804                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16805  0019E2  0100               	movlb	0	; () banked
 16806  0019E4  51A9               	movf	printf@width& (0+255),w,b
 16807  0019E6  0100               	movlb	0	; () banked
 16808  0019E8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16809  0019EA  B4D8               	btfsc	status,2,c
 16810  0019EC  D00B               	goto	l6576
 16811                           
 16812                           ; BSR set to: 0
 16813  0019EE  C0A7  F09A         	movff	printf@flag,??_printf
 16814  0019F2  0E03               	movlw	3
 16815  0019F4  0100               	movlb	0	; () banked
 16816  0019F6  179A               	andwf	??_printf& (0+255),f,b
 16817  0019F8  B4D8               	btfsc	status,2,c
 16818  0019FA  D004               	goto	l6576
 16819                           
 16820                           ; BSR set to: 0
 16821                           ;doprnt.c: 1346: width--;
 16822  0019FC  0100               	movlb	0	; () banked
 16823  0019FE  07A9               	decf	printf@width& (0+255),f,b
 16824  001A00  A0D8               	btfss	status,0,c
 16825  001A02  07AA               	decf	(printf@width+1)& (0+255),f,b
 16826  001A04                     l6576:
 16827                           
 16828                           ; BSR set to: 0
 16829                           ;doprnt.c: 1381: if(width > c)
 16830  001A04  0E80               	movlw	128
 16831  001A06  0100               	movlb	0	; () banked
 16832  001A08  BFA8               	btfsc	printf@c& (0+255),7,b
 16833  001A0A  0E7F               	movlw	127
 16834  001A0C  0100               	movlb	0	; () banked
 16835  001A0E  6F9A               	movwf	??_printf& (0+255),b
 16836  001A10  0100               	movlb	0	; () banked
 16837  001A12  51A9               	movf	printf@width& (0+255),w,b
 16838  001A14  0100               	movlb	0	; () banked
 16839  001A16  5DA8               	subwf	printf@c& (0+255),w,b
 16840  001A18  0100               	movlb	0	; () banked
 16841  001A1A  51AA               	movf	(printf@width+1)& (0+255),w,b
 16842  001A1C  0A80               	xorlw	128
 16843  001A1E  0100               	movlb	0	; () banked
 16844  001A20  599A               	subwfb	??_printf& (0+255),w,b
 16845  001A22  B0D8               	btfsc	status,0,c
 16846  001A24  D00B               	goto	l6580
 16847                           
 16848                           ; BSR set to: 0
 16849                           ;doprnt.c: 1382: width -= c;
 16850  001A26  0100               	movlb	0	; () banked
 16851  001A28  51A8               	movf	printf@c& (0+255),w,b
 16852  001A2A  0100               	movlb	0	; () banked
 16853  001A2C  5FA9               	subwf	printf@width& (0+255),f,b
 16854  001A2E  0E00               	movlw	0
 16855  001A30  0100               	movlb	0	; () banked
 16856  001A32  BFA8               	btfsc	printf@c& (0+255),7,b
 16857  001A34  0EFF               	movlw	255
 16858  001A36  0100               	movlb	0	; () banked
 16859  001A38  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16860  001A3A  D005               	goto	l6582
 16861  001A3C                     l6580:
 16862                           
 16863                           ; BSR set to: 0
 16864                           ;doprnt.c: 1383: else
 16865                           ;doprnt.c: 1384: width = 0;
 16866  001A3C  0E00               	movlw	0
 16867  001A3E  0100               	movlb	0	; () banked
 16868  001A40  6FAA               	movwf	(printf@width+1)& (0+255),b
 16869  001A42  0E00               	movlw	0
 16870  001A44  6FA9               	movwf	printf@width& (0+255),b
 16871  001A46                     l6582:
 16872                           
 16873                           ; BSR set to: 0
 16874                           ;doprnt.c: 1387: if(flag & 0x04) {
 16875  001A46  0100               	movlb	0	; () banked
 16876  001A48  A5A7               	btfss	printf@flag& (0+255),2,b
 16877  001A4A  D018               	goto	l6594
 16878                           
 16879                           ; BSR set to: 0
 16880                           ;doprnt.c: 1392: if(flag & 0x03)
 16881  001A4C  C0A7  F09A         	movff	printf@flag,??_printf
 16882  001A50  0E03               	movlw	3
 16883  001A52  0100               	movlb	0	; () banked
 16884  001A54  179A               	andwf	??_printf& (0+255),f,b
 16885  001A56  B4D8               	btfsc	status,2,c
 16886  001A58  D003               	goto	l6588
 16887                           
 16888                           ; BSR set to: 0
 16889                           ;doprnt.c: 1393: (putch('-') );
 16890  001A5A  0E2D               	movlw	45
 16891  001A5C  EC57  F02B         	call	_putch
 16892  001A60                     l6588:
 16893                           
 16894                           ;doprnt.c: 1415: if(width)
 16895  001A60  0100               	movlb	0	; () banked
 16896  001A62  51A9               	movf	printf@width& (0+255),w,b
 16897  001A64  0100               	movlb	0	; () banked
 16898  001A66  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16899  001A68  B4D8               	btfsc	status,2,c
 16900  001A6A  D025               	goto	l6604
 16901                           
 16902                           ; BSR set to: 0
 16903                           ;doprnt.c: 1417: (putch('0') );
 16904                           
 16905                           ; BSR set to: 0
 16906                           
 16907                           ;doprnt.c: 1416: do
 16908  001A6C  0E30               	movlw	48
 16909  001A6E  EC57  F02B         	call	_putch
 16910                           
 16911                           ;doprnt.c: 1418: while(--width);
 16912  001A72  0100               	movlb	0	; () banked
 16913  001A74  07A9               	decf	printf@width& (0+255),f,b
 16914  001A76  A0D8               	btfss	status,0,c
 16915  001A78  07AA               	decf	(printf@width+1)& (0+255),f,b
 16916  001A7A  D7F2               	goto	l6588
 16917  001A7C                     l6594:
 16918                           
 16919                           ; BSR set to: 0
 16920                           ;doprnt.c: 1422: {
 16921                           ;doprnt.c: 1424: if(width
 16922                           ;doprnt.c: 1428: )
 16923  001A7C  0100               	movlb	0	; () banked
 16924  001A7E  51A9               	movf	printf@width& (0+255),w,b
 16925  001A80  0100               	movlb	0	; () banked
 16926  001A82  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16927  001A84  B4D8               	btfsc	status,2,c
 16928  001A86  D00D               	goto	l6600
 16929  001A88                     l6596:
 16930                           
 16931                           ; BSR set to: 0
 16932                           ;doprnt.c: 1430: (putch(' ') );
 16933  001A88  0E20               	movlw	32
 16934  001A8A  EC57  F02B         	call	_putch
 16935                           
 16936                           ;doprnt.c: 1431: while(--width);
 16937  001A8E  0100               	movlb	0	; () banked
 16938  001A90  07A9               	decf	printf@width& (0+255),f,b
 16939  001A92  A0D8               	btfss	status,0,c
 16940  001A94  07AA               	decf	(printf@width+1)& (0+255),f,b
 16941  001A96  0100               	movlb	0	; () banked
 16942  001A98  51A9               	movf	printf@width& (0+255),w,b
 16943  001A9A  0100               	movlb	0	; () banked
 16944  001A9C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16945  001A9E  A4D8               	btfss	status,2,c
 16946  001AA0  D7F3               	goto	l6596
 16947  001AA2                     l6600:
 16948                           
 16949                           ; BSR set to: 0
 16950                           ;doprnt.c: 1438: if(flag & 0x03)
 16951  001AA2  C0A7  F09A         	movff	printf@flag,??_printf
 16952  001AA6  0E03               	movlw	3
 16953  001AA8  0100               	movlb	0	; () banked
 16954  001AAA  179A               	andwf	??_printf& (0+255),f,b
 16955  001AAC  B4D8               	btfsc	status,2,c
 16956  001AAE  D003               	goto	l6604
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;doprnt.c: 1439: (putch('-') );
 16960  001AB0  0E2D               	movlw	45
 16961  001AB2  EC57  F02B         	call	_putch
 16962  001AB6                     l6604:
 16963                           
 16964                           ;doprnt.c: 1469: }
 16965                           ;doprnt.c: 1472: prec = c;
 16966  001AB6  C0A8  F09E         	movff	printf@c,printf@prec
 16967                           
 16968                           ;doprnt.c: 1474: while(prec--) {
 16969  001ABA  D02C               	goto	l6610
 16970  001ABC                     l6606:
 16971                           
 16972                           ;doprnt.c: 1478: {
 16973                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16974  001ABC  0100               	movlb	0	; () banked
 16975  001ABE  519E               	movf	printf@prec& (0+255),w,b
 16976  001AC0  0D02               	mullw	2
 16977  001AC2  0EB4               	movlw	low _dpowers
 16978  001AC4  24F3               	addwf	prodl,w,c
 16979  001AC6  6EF6               	movwf	tblptrl,c
 16980  001AC8  0EFA               	movlw	high _dpowers
 16981  001ACA  20F4               	addwfc	prodh,w,c
 16982  001ACC  6EF7               	movwf	tblptrh,c
 16983  001ACE                     	if	1	;There are 3 active tblptr bytes
 16984  001ACE  6AF8               	clrf	tblptru,c
 16985  001AD0  0E00               	movlw	low (__mediumconst shr (0+16))
 16986  001AD2  22F8               	addwfc	tblptru,f,c
 16987  001AD4                     	endif
 16988  001AD4  0009               	tblrd		*+
 16989  001AD6  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16990  001ADA  000A               	tblrd		*-
 16991  001ADC  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16992  001AE0  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16993  001AE4  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16994  001AE8  EC4C  F025         	call	___lwdiv	;wreg free
 16995  001AEC  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16996  001AF0  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16997  001AF4  0E00               	movlw	0
 16998  001AF6  0100               	movlb	0	; () banked
 16999  001AF8  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 17000  001AFA  0E0A               	movlw	10
 17001  001AFC  6F89               	movwf	___lwmod@divisor& (0+255),b
 17002  001AFE  EC9A  F026         	call	___lwmod	;wreg free
 17003  001B02  0100               	movlb	0	; () banked
 17004  001B04  5187               	movf	?___lwmod& (0+255),w,b
 17005  001B06  0F30               	addlw	48
 17006  001B08  0100               	movlb	0	; () banked
 17007  001B0A  6FA8               	movwf	printf@c& (0+255),b
 17008                           
 17009                           ; BSR set to: 0
 17010                           ;doprnt.c: 1523: }
 17011                           ;doprnt.c: 1524: (putch(c) );
 17012  001B0C  0100               	movlb	0	; () banked
 17013  001B0E  51A8               	movf	printf@c& (0+255),w,b
 17014  001B10  EC57  F02B         	call	_putch
 17015  001B14                     l6610:
 17016  001B14  0100               	movlb	0	; () banked
 17017  001B16  079E               	decf	printf@prec& (0+255),f,b
 17018  001B18  0100               	movlb	0	; () banked
 17019  001B1A  299E               	incf	printf@prec& (0+255),w,b
 17020  001B1C  A4D8               	btfss	status,2,c
 17021  001B1E  D7CE               	goto	l6606
 17022  001B20                     l6612:
 17023  001B20  C08E  FFF6         	movff	printf@f,tblptrl
 17024  001B24  C08F  FFF7         	movff	printf@f+1,tblptrh
 17025  001B28  0100               	movlb	0	; () banked
 17026  001B2A  4B8E               	infsnz	printf@f& (0+255),f,b
 17027  001B2C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17028  001B2E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17029  001B2E  6AF8               	clrf	tblptru,c
 17030  001B30                     	endif
 17031  001B30                     	if	0	;tblptru may be non-zero
 17032  001B30                     	endif
 17033  001B30  0008               	tblrd		*
 17034  001B32  CFF5 F0A8          	movff	tablat,printf@c
 17035  001B36  0100               	movlb	0	; () banked
 17036  001B38  51A8               	movf	printf@c& (0+255),w,b
 17037  001B3A  B4D8               	btfsc	status,2,c
 17038  001B3C  0012               	return	
 17039  001B3E  D5EB               	goto	l6482
 17040  001B40                     __end_of_printf:
 17041                           	opt stack 0
 17042                           tblptru	equ	0xFF8
 17043                           tblptrh	equ	0xFF7
 17044                           tblptrl	equ	0xFF6
 17045                           tablat	equ	0xFF5
 17046                           prodh	equ	0xFF4
 17047                           prodl	equ	0xFF3
 17048                           intcon	equ	0xFF2
 17049                           intcon2	equ	0xFF1
 17050                           intcon3	equ	0xFF0
 17051                           indf0	equ	0xFEF
 17052                           postinc0	equ	0xFEE
 17053                           fsr0h	equ	0xFEA
 17054                           fsr0l	equ	0xFE9
 17055                           wreg	equ	0xFE8
 17056                           postdec1	equ	0xFE5
 17057                           fsr1l	equ	0xFE1
 17058                           indf2	equ	0xFDF
 17059                           postinc2	equ	0xFDE
 17060                           postdec2	equ	0xFDD
 17061                           fsr2h	equ	0xFDA
 17062                           fsr2l	equ	0xFD9
 17063                           status	equ	0xFD8
 17064                           
 17065 ;; *************** function _putch *****************
 17066 ;; Defined at:
 17067 ;;		line 20 in file "lcd.c"
 17068 ;; Parameters:    Size  Location     Type
 17069 ;;  data            1    wreg     unsigned char 
 17070 ;; Auto vars:     Size  Location     Type
 17071 ;;  data            1    2[BANK0 ] unsigned char 
 17072 ;; Return value:  Size  Location     Type
 17073 ;;                  1    wreg      void 
 17074 ;; Registers used:
 17075 ;;		wreg, status,2, status,0, cstack
 17076 ;; Tracked objects:
 17077 ;;		On entry : 0/0
 17078 ;;		On exit  : 0/0
 17079 ;;		Unchanged: 0/0
 17080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17084 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17085 ;;Total ram usage:        1 bytes
 17086 ;; Hardware stack levels used:    1
 17087 ;; Hardware stack levels required when called:    8
 17088 ;; This function calls:
 17089 ;;		_lcdNibble
 17090 ;; This function is called by:
 17091 ;;		_printf
 17092 ;; This function uses a non-reentrant model
 17093 ;;
 17094                           
 17095                           	psect	text52
 17096  0056AE                     __ptext52:
 17097                           	opt stack 0
 17098  0056AE                     _putch:
 17099                           	opt stack 18
 17100                           
 17101                           ;incstack = 0
 17102                           ;putch@data stored from wreg
 17103  0056AE  0100               	movlb	0	; () banked
 17104  0056B0  6F82               	movwf	putch@data& (0+255),b
 17105                           
 17106                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 17107  0056B2  848C               	bsf	3980,2,c	;volatile
 17108                           
 17109                           ;lcd.c: 22: lcdNibble(data);
 17110  0056B4  0100               	movlb	0	; () banked
 17111  0056B6  5182               	movf	putch@data& (0+255),w,b
 17112  0056B8  EC32  F026         	call	_lcdNibble
 17113  0056BC  0012               	return		;funcret
 17114  0056BE                     __end_of_putch:
 17115                           	opt stack 0
 17116                           tblptru	equ	0xFF8
 17117                           tblptrh	equ	0xFF7
 17118                           tblptrl	equ	0xFF6
 17119                           tablat	equ	0xFF5
 17120                           prodh	equ	0xFF4
 17121                           prodl	equ	0xFF3
 17122                           intcon	equ	0xFF2
 17123                           intcon2	equ	0xFF1
 17124                           intcon3	equ	0xFF0
 17125                           indf0	equ	0xFEF
 17126                           postinc0	equ	0xFEE
 17127                           fsr0h	equ	0xFEA
 17128                           fsr0l	equ	0xFE9
 17129                           wreg	equ	0xFE8
 17130                           postdec1	equ	0xFE5
 17131                           fsr1l	equ	0xFE1
 17132                           indf2	equ	0xFDF
 17133                           postinc2	equ	0xFDE
 17134                           postdec2	equ	0xFDD
 17135                           fsr2h	equ	0xFDA
 17136                           fsr2l	equ	0xFD9
 17137                           status	equ	0xFD8
 17138                           
 17139 ;; *************** function _isdigit *****************
 17140 ;; Defined at:
 17141 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;  c               1    wreg     unsigned char 
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;  c               1    2[BANK0 ] unsigned char 
 17146 ;; Return value:  Size  Location     Type
 17147 ;;		None               void
 17148 ;; Registers used:
 17149 ;;		wreg, status,2, status,0
 17150 ;; Tracked objects:
 17151 ;;		On entry : 0/0
 17152 ;;		On exit  : 0/0
 17153 ;;		Unchanged: 0/0
 17154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17156 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17157 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17158 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;Total ram usage:        3 bytes
 17160 ;; Hardware stack levels used:    1
 17161 ;; Hardware stack levels required when called:    7
 17162 ;; This function calls:
 17163 ;;		Nothing
 17164 ;; This function is called by:
 17165 ;;		_printf
 17166 ;; This function uses a non-reentrant model
 17167 ;;
 17168                           
 17169                           	psect	text53
 17170  0054D6                     __ptext53:
 17171                           	opt stack 0
 17172  0054D6                     _isdigit:
 17173                           	opt stack 19
 17174                           
 17175                           ;incstack = 0
 17176                           ;isdigit@c stored from wreg
 17177  0054D6  0100               	movlb	0	; () banked
 17178  0054D8  6F82               	movwf	isdigit@c& (0+255),b
 17179  0054DA  0E00               	movlw	0
 17180  0054DC  0100               	movlb	0	; () banked
 17181  0054DE  6F81               	movwf	_isdigit$2083& (0+255),b
 17182                           
 17183                           ; BSR set to: 0
 17184  0054E0  0E3A               	movlw	58
 17185  0054E2  0100               	movlb	0	; () banked
 17186  0054E4  6182               	cpfslt	isdigit@c& (0+255),b
 17187  0054E6  D007               	goto	l6330
 17188                           
 17189                           ; BSR set to: 0
 17190  0054E8  0E2F               	movlw	47
 17191  0054EA  0100               	movlb	0	; () banked
 17192  0054EC  6582               	cpfsgt	isdigit@c& (0+255),b
 17193  0054EE  D003               	goto	l6330
 17194                           
 17195                           ; BSR set to: 0
 17196  0054F0  0E01               	movlw	1
 17197  0054F2  0100               	movlb	0	; () banked
 17198  0054F4  6F81               	movwf	_isdigit$2083& (0+255),b
 17199  0054F6                     l6330:
 17200                           
 17201                           ; BSR set to: 0
 17202  0054F6  C081  F080         	movff	_isdigit$2083,??_isdigit
 17203  0054FA  0100               	movlb	0	; () banked
 17204  0054FC  3180               	rrcf	??_isdigit& (0+255),w,b
 17205  0054FE  0012               	return	
 17206  005500                     __end_of_isdigit:
 17207                           	opt stack 0
 17208                           tblptru	equ	0xFF8
 17209                           tblptrh	equ	0xFF7
 17210                           tblptrl	equ	0xFF6
 17211                           tablat	equ	0xFF5
 17212                           prodh	equ	0xFF4
 17213                           prodl	equ	0xFF3
 17214                           intcon	equ	0xFF2
 17215                           intcon2	equ	0xFF1
 17216                           intcon3	equ	0xFF0
 17217                           indf0	equ	0xFEF
 17218                           postinc0	equ	0xFEE
 17219                           fsr0h	equ	0xFEA
 17220                           fsr0l	equ	0xFE9
 17221                           wreg	equ	0xFE8
 17222                           postdec1	equ	0xFE5
 17223                           fsr1l	equ	0xFE1
 17224                           indf2	equ	0xFDF
 17225                           postinc2	equ	0xFDE
 17226                           postdec2	equ	0xFDD
 17227                           fsr2h	equ	0xFDA
 17228                           fsr2l	equ	0xFD9
 17229                           status	equ	0xFD8
 17230                           
 17231 ;; *************** function ___wmul *****************
 17232 ;; Defined at:
 17233 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 17234 ;; Parameters:    Size  Location     Type
 17235 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17236 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17237 ;; Auto vars:     Size  Location     Type
 17238 ;;  product         2    4[BANK0 ] unsigned int 
 17239 ;; Return value:  Size  Location     Type
 17240 ;;                  2    0[BANK0 ] unsigned int 
 17241 ;; Registers used:
 17242 ;;		wreg, status,2, status,0, prodl, prodh
 17243 ;; Tracked objects:
 17244 ;;		On entry : 0/0
 17245 ;;		On exit  : 0/0
 17246 ;;		Unchanged: 0/0
 17247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17248 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17249 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17251 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17252 ;;Total ram usage:        6 bytes
 17253 ;; Hardware stack levels used:    1
 17254 ;; Hardware stack levels required when called:    7
 17255 ;; This function calls:
 17256 ;;		Nothing
 17257 ;; This function is called by:
 17258 ;;		_printf
 17259 ;; This function uses a non-reentrant model
 17260 ;;
 17261                           
 17262                           	psect	text54
 17263  0051A8                     __ptext54:
 17264                           	opt stack 0
 17265  0051A8                     ___wmul:
 17266                           	opt stack 19
 17267                           
 17268                           ; BSR set to: 0
 17269                           ;incstack = 0
 17270  0051A8  0100               	movlb	0	; () banked
 17271  0051AA  5180               	movf	___wmul@multiplier& (0+255),w,b
 17272  0051AC  0100               	movlb	0	; () banked
 17273  0051AE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17274  0051B0  CFF3 F084          	movff	prodl,___wmul@product
 17275  0051B4  CFF4 F085          	movff	prodh,___wmul@product+1
 17276  0051B8  0100               	movlb	0	; () banked
 17277  0051BA  5180               	movf	___wmul@multiplier& (0+255),w,b
 17278  0051BC  0100               	movlb	0	; () banked
 17279  0051BE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 17280  0051C0  50F3               	movf	prodl,w,c
 17281  0051C2  0100               	movlb	0	; () banked
 17282  0051C4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17283  0051C6  0100               	movlb	0	; () banked
 17284  0051C8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 17285  0051CA  0100               	movlb	0	; () banked
 17286  0051CC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17287  0051CE  50F3               	movf	prodl,w,c
 17288  0051D0  0100               	movlb	0	; () banked
 17289  0051D2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17290                           
 17291                           ; BSR set to: 0
 17292  0051D4  C084  F080         	movff	___wmul@product,?___wmul
 17293  0051D8  C085  F081         	movff	___wmul@product+1,?___wmul+1
 17294  0051DC  0012               	return	
 17295  0051DE                     __end_of___wmul:
 17296                           	opt stack 0
 17297                           tblptru	equ	0xFF8
 17298                           tblptrh	equ	0xFF7
 17299                           tblptrl	equ	0xFF6
 17300                           tablat	equ	0xFF5
 17301                           prodh	equ	0xFF4
 17302                           prodl	equ	0xFF3
 17303                           intcon	equ	0xFF2
 17304                           intcon2	equ	0xFF1
 17305                           intcon3	equ	0xFF0
 17306                           indf0	equ	0xFEF
 17307                           postinc0	equ	0xFEE
 17308                           fsr0h	equ	0xFEA
 17309                           fsr0l	equ	0xFE9
 17310                           wreg	equ	0xFE8
 17311                           postdec1	equ	0xFE5
 17312                           fsr1l	equ	0xFE1
 17313                           indf2	equ	0xFDF
 17314                           postinc2	equ	0xFDE
 17315                           postdec2	equ	0xFDD
 17316                           fsr2h	equ	0xFDA
 17317                           fsr2l	equ	0xFD9
 17318                           status	equ	0xFD8
 17319                           
 17320 ;; *************** function ___lwmod *****************
 17321 ;; Defined at:
 17322 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 17323 ;; Parameters:    Size  Location     Type
 17324 ;;  dividend        2    7[BANK0 ] unsigned int 
 17325 ;;  divisor         2    9[BANK0 ] unsigned int 
 17326 ;; Auto vars:     Size  Location     Type
 17327 ;;  counter         1   11[BANK0 ] unsigned char 
 17328 ;; Return value:  Size  Location     Type
 17329 ;;                  2    7[BANK0 ] unsigned int 
 17330 ;; Registers used:
 17331 ;;		wreg, status,2, status,0
 17332 ;; Tracked objects:
 17333 ;;		On entry : 0/0
 17334 ;;		On exit  : 0/0
 17335 ;;		Unchanged: 0/0
 17336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17337 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17340 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17341 ;;Total ram usage:        5 bytes
 17342 ;; Hardware stack levels used:    1
 17343 ;; Hardware stack levels required when called:    7
 17344 ;; This function calls:
 17345 ;;		Nothing
 17346 ;; This function is called by:
 17347 ;;		_printf
 17348 ;; This function uses a non-reentrant model
 17349 ;;
 17350                           
 17351                           	psect	text55
 17352  004D34                     __ptext55:
 17353                           	opt stack 0
 17354  004D34                     ___lwmod:
 17355                           	opt stack 19
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;incstack = 0
 17359  004D34  0100               	movlb	0	; () banked
 17360  004D36  5189               	movf	___lwmod@divisor& (0+255),w,b
 17361  004D38  0100               	movlb	0	; () banked
 17362  004D3A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17363  004D3C  B4D8               	btfsc	status,2,c
 17364  004D3E  D026               	goto	l1941
 17365                           
 17366                           ; BSR set to: 0
 17367  004D40  0E01               	movlw	1
 17368  004D42  0100               	movlb	0	; () banked
 17369  004D44  6F8B               	movwf	___lwmod@counter& (0+255),b
 17370  004D46  D006               	goto	l6368
 17371  004D48                     l6366:
 17372                           
 17373                           ; BSR set to: 0
 17374  004D48  0100               	movlb	0	; () banked
 17375  004D4A  90D8               	bcf	status,0,c
 17376  004D4C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 17377  004D4E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17378  004D50  0100               	movlb	0	; () banked
 17379  004D52  2B8B               	incf	___lwmod@counter& (0+255),f,b
 17380  004D54                     l6368:
 17381                           
 17382                           ; BSR set to: 0
 17383  004D54  0100               	movlb	0	; () banked
 17384  004D56  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17385  004D58  D7F7               	goto	l6366
 17386  004D5A                     l6370:
 17387                           
 17388                           ; BSR set to: 0
 17389  004D5A  0100               	movlb	0	; () banked
 17390  004D5C  5189               	movf	___lwmod@divisor& (0+255),w,b
 17391  004D5E  0100               	movlb	0	; () banked
 17392  004D60  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 17393  004D62  0100               	movlb	0	; () banked
 17394  004D64  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17395  004D66  0100               	movlb	0	; () banked
 17396  004D68  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17397  004D6A  A0D8               	btfss	status,0,c
 17398  004D6C  D008               	goto	l6374
 17399                           
 17400                           ; BSR set to: 0
 17401  004D6E  0100               	movlb	0	; () banked
 17402  004D70  5189               	movf	___lwmod@divisor& (0+255),w,b
 17403  004D72  0100               	movlb	0	; () banked
 17404  004D74  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 17405  004D76  0100               	movlb	0	; () banked
 17406  004D78  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17407  004D7A  0100               	movlb	0	; () banked
 17408  004D7C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17409  004D7E                     l6374:
 17410                           
 17411                           ; BSR set to: 0
 17412  004D7E  0100               	movlb	0	; () banked
 17413  004D80  90D8               	bcf	status,0,c
 17414  004D82  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17415  004D84  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 17416                           
 17417                           ; BSR set to: 0
 17418  004D86  0100               	movlb	0	; () banked
 17419  004D88  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 17420  004D8A  D7E7               	goto	l6370
 17421  004D8C                     l1941:
 17422                           
 17423                           ; BSR set to: 0
 17424  004D8C  C087  F087         	movff	___lwmod@dividend,?___lwmod
 17425  004D90  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 17426                           
 17427                           ; BSR set to: 0
 17428  004D94  0012               	return		;funcret
 17429  004D96                     __end_of___lwmod:
 17430                           	opt stack 0
 17431                           tblptru	equ	0xFF8
 17432                           tblptrh	equ	0xFF7
 17433                           tblptrl	equ	0xFF6
 17434                           tablat	equ	0xFF5
 17435                           prodh	equ	0xFF4
 17436                           prodl	equ	0xFF3
 17437                           intcon	equ	0xFF2
 17438                           intcon2	equ	0xFF1
 17439                           intcon3	equ	0xFF0
 17440                           indf0	equ	0xFEF
 17441                           postinc0	equ	0xFEE
 17442                           fsr0h	equ	0xFEA
 17443                           fsr0l	equ	0xFE9
 17444                           wreg	equ	0xFE8
 17445                           postdec1	equ	0xFE5
 17446                           fsr1l	equ	0xFE1
 17447                           indf2	equ	0xFDF
 17448                           postinc2	equ	0xFDE
 17449                           postdec2	equ	0xFDD
 17450                           fsr2h	equ	0xFDA
 17451                           fsr2l	equ	0xFD9
 17452                           status	equ	0xFD8
 17453                           
 17454 ;; *************** function ___lwdiv *****************
 17455 ;; Defined at:
 17456 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 17457 ;; Parameters:    Size  Location     Type
 17458 ;;  dividend        2    0[BANK0 ] unsigned int 
 17459 ;;  divisor         2    2[BANK0 ] unsigned int 
 17460 ;; Auto vars:     Size  Location     Type
 17461 ;;  quotient        2    4[BANK0 ] unsigned int 
 17462 ;;  counter         1    6[BANK0 ] unsigned char 
 17463 ;; Return value:  Size  Location     Type
 17464 ;;                  2    0[BANK0 ] unsigned int 
 17465 ;; Registers used:
 17466 ;;		wreg, status,2, status,0
 17467 ;; Tracked objects:
 17468 ;;		On entry : 0/0
 17469 ;;		On exit  : 0/0
 17470 ;;		Unchanged: 0/0
 17471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17472 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17473 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17475 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17476 ;;Total ram usage:        7 bytes
 17477 ;; Hardware stack levels used:    1
 17478 ;; Hardware stack levels required when called:    7
 17479 ;; This function calls:
 17480 ;;		Nothing
 17481 ;; This function is called by:
 17482 ;;		_printf
 17483 ;; This function uses a non-reentrant model
 17484 ;;
 17485                           
 17486                           	psect	text56
 17487  004A98                     __ptext56:
 17488                           	opt stack 0
 17489  004A98                     ___lwdiv:
 17490                           	opt stack 19
 17491                           
 17492                           ; BSR set to: 0
 17493                           ;incstack = 0
 17494  004A98  0E00               	movlw	0
 17495  004A9A  0100               	movlb	0	; () banked
 17496  004A9C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17497  004A9E  0E00               	movlw	0
 17498  004AA0  6F84               	movwf	___lwdiv@quotient& (0+255),b
 17499                           
 17500                           ; BSR set to: 0
 17501  004AA2  0100               	movlb	0	; () banked
 17502  004AA4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17503  004AA6  0100               	movlb	0	; () banked
 17504  004AA8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17505  004AAA  B4D8               	btfsc	status,2,c
 17506  004AAC  D02C               	goto	l1931
 17507                           
 17508                           ; BSR set to: 0
 17509  004AAE  0E01               	movlw	1
 17510  004AB0  0100               	movlb	0	; () banked
 17511  004AB2  6F86               	movwf	___lwdiv@counter& (0+255),b
 17512  004AB4  D006               	goto	l6348
 17513  004AB6                     l6346:
 17514                           
 17515                           ; BSR set to: 0
 17516  004AB6  0100               	movlb	0	; () banked
 17517  004AB8  90D8               	bcf	status,0,c
 17518  004ABA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17519  004ABC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17520  004ABE  0100               	movlb	0	; () banked
 17521  004AC0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17522  004AC2                     l6348:
 17523                           
 17524                           ; BSR set to: 0
 17525  004AC2  0100               	movlb	0	; () banked
 17526  004AC4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17527  004AC6  D7F7               	goto	l6346
 17528  004AC8                     l6350:
 17529                           
 17530                           ; BSR set to: 0
 17531  004AC8  0100               	movlb	0	; () banked
 17532  004ACA  90D8               	bcf	status,0,c
 17533  004ACC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17534  004ACE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17535                           
 17536                           ; BSR set to: 0
 17537  004AD0  0100               	movlb	0	; () banked
 17538  004AD2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17539  004AD4  0100               	movlb	0	; () banked
 17540  004AD6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17541  004AD8  0100               	movlb	0	; () banked
 17542  004ADA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17543  004ADC  0100               	movlb	0	; () banked
 17544  004ADE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17545  004AE0  A0D8               	btfss	status,0,c
 17546  004AE2  D00A               	goto	l6358
 17547                           
 17548                           ; BSR set to: 0
 17549  004AE4  0100               	movlb	0	; () banked
 17550  004AE6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17551  004AE8  0100               	movlb	0	; () banked
 17552  004AEA  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17553  004AEC  0100               	movlb	0	; () banked
 17554  004AEE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17555  004AF0  0100               	movlb	0	; () banked
 17556  004AF2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17557                           
 17558                           ; BSR set to: 0
 17559  004AF4  0100               	movlb	0	; () banked
 17560  004AF6  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17561  004AF8                     l6358:
 17562                           
 17563                           ; BSR set to: 0
 17564  004AF8  0100               	movlb	0	; () banked
 17565  004AFA  90D8               	bcf	status,0,c
 17566  004AFC  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17567  004AFE  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17568                           
 17569                           ; BSR set to: 0
 17570  004B00  0100               	movlb	0	; () banked
 17571  004B02  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17572  004B04  D7E1               	goto	l6350
 17573  004B06                     l1931:
 17574                           
 17575                           ; BSR set to: 0
 17576  004B06  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17577  004B0A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17578                           
 17579                           ; BSR set to: 0
 17580  004B0E  0012               	return		;funcret
 17581  004B10                     __end_of___lwdiv:
 17582                           	opt stack 0
 17583                           tblptru	equ	0xFF8
 17584                           tblptrh	equ	0xFF7
 17585                           tblptrl	equ	0xFF6
 17586                           tablat	equ	0xFF5
 17587                           prodh	equ	0xFF4
 17588                           prodl	equ	0xFF3
 17589                           intcon	equ	0xFF2
 17590                           intcon2	equ	0xFF1
 17591                           intcon3	equ	0xFF0
 17592                           indf0	equ	0xFEF
 17593                           postinc0	equ	0xFEE
 17594                           fsr0h	equ	0xFEA
 17595                           fsr0l	equ	0xFE9
 17596                           wreg	equ	0xFE8
 17597                           postdec1	equ	0xFE5
 17598                           fsr1l	equ	0xFE1
 17599                           indf2	equ	0xFDF
 17600                           postinc2	equ	0xFDE
 17601                           postdec2	equ	0xFDD
 17602                           fsr2h	equ	0xFDA
 17603                           fsr2l	equ	0xFD9
 17604                           status	equ	0xFD8
 17605                           
 17606 ;; *************** function _lcdInst *****************
 17607 ;; Defined at:
 17608 ;;		line 15 in file "lcd.c"
 17609 ;; Parameters:    Size  Location     Type
 17610 ;;  data            1    wreg     unsigned char 
 17611 ;; Auto vars:     Size  Location     Type
 17612 ;;  data            1    2[BANK0 ] unsigned char 
 17613 ;; Return value:  Size  Location     Type
 17614 ;;                  1    wreg      void 
 17615 ;; Registers used:
 17616 ;;		wreg, status,2, status,0, cstack
 17617 ;; Tracked objects:
 17618 ;;		On entry : 0/0
 17619 ;;		On exit  : 0/0
 17620 ;;		Unchanged: 0/0
 17621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17625 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17626 ;;Total ram usage:        1 bytes
 17627 ;; Hardware stack levels used:    1
 17628 ;; Hardware stack levels required when called:    8
 17629 ;; This function calls:
 17630 ;;		_lcdNibble
 17631 ;; This function is called by:
 17632 ;;		_UI
 17633 ;;		_change_state_to_menu_start
 17634 ;;		_change_state_to_menu_12
 17635 ;;		_change_state_to_menu_22
 17636 ;;		_initLCD
 17637 ;;		_printRTC
 17638 ;;		_Loading
 17639 ;;		_EEPROM_write
 17640 ;;		_Test
 17641 ;;		_algorithmTest
 17642 ;;		_sensorTest
 17643 ;;		_actuatorTest
 17644 ;;		_BothServos
 17645 ;;		_PortTestDC
 17646 ;;		_PlatformTest
 17647 ;;		_SpeedTest
 17648 ;;		_BlockerTest
 17649 ;;		_arm
 17650 ;;		_PortTestPusher
 17651 ;;		_ToggleTestA5
 17652 ;; This function uses a non-reentrant model
 17653 ;;
 17654                           
 17655                           	psect	text57
 17656  0056BE                     __ptext57:
 17657                           	opt stack 0
 17658  0056BE                     _lcdInst:
 17659                           	opt stack 20
 17660                           
 17661                           ; BSR set to: 0
 17662                           ;incstack = 0
 17663                           ;lcdInst@data stored from wreg
 17664  0056BE  0100               	movlb	0	; () banked
 17665  0056C0  6F82               	movwf	lcdInst@data& (0+255),b
 17666                           
 17667                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17668  0056C2  948C               	bcf	3980,2,c	;volatile
 17669                           
 17670                           ;lcd.c: 17: lcdNibble(data);
 17671  0056C4  0100               	movlb	0	; () banked
 17672  0056C6  5182               	movf	lcdInst@data& (0+255),w,b
 17673  0056C8  EC32  F026         	call	_lcdNibble
 17674  0056CC  0012               	return		;funcret
 17675  0056CE                     __end_of_lcdInst:
 17676                           	opt stack 0
 17677                           tblptru	equ	0xFF8
 17678                           tblptrh	equ	0xFF7
 17679                           tblptrl	equ	0xFF6
 17680                           tablat	equ	0xFF5
 17681                           prodh	equ	0xFF4
 17682                           prodl	equ	0xFF3
 17683                           intcon	equ	0xFF2
 17684                           intcon2	equ	0xFF1
 17685                           intcon3	equ	0xFF0
 17686                           indf0	equ	0xFEF
 17687                           postinc0	equ	0xFEE
 17688                           fsr0h	equ	0xFEA
 17689                           fsr0l	equ	0xFE9
 17690                           wreg	equ	0xFE8
 17691                           postdec1	equ	0xFE5
 17692                           fsr1l	equ	0xFE1
 17693                           indf2	equ	0xFDF
 17694                           postinc2	equ	0xFDE
 17695                           postdec2	equ	0xFDD
 17696                           fsr2h	equ	0xFDA
 17697                           fsr2l	equ	0xFD9
 17698                           status	equ	0xFD8
 17699                           
 17700 ;; *************** function _lcdNibble *****************
 17701 ;; Defined at:
 17702 ;;		line 25 in file "lcd.c"
 17703 ;; Parameters:    Size  Location     Type
 17704 ;;  data            1    wreg     unsigned char 
 17705 ;; Auto vars:     Size  Location     Type
 17706 ;;  data            1    1[BANK0 ] unsigned char 
 17707 ;;  temp            1    0[BANK0 ] unsigned char 
 17708 ;; Return value:  Size  Location     Type
 17709 ;;                  1    wreg      void 
 17710 ;; Registers used:
 17711 ;;		wreg, status,2, status,0
 17712 ;; Tracked objects:
 17713 ;;		On entry : 0/0
 17714 ;;		On exit  : 0/0
 17715 ;;		Unchanged: 0/0
 17716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17718 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17721 ;;Total ram usage:        2 bytes
 17722 ;; Hardware stack levels used:    1
 17723 ;; Hardware stack levels required when called:    7
 17724 ;; This function calls:
 17725 ;;		Nothing
 17726 ;; This function is called by:
 17727 ;;		_lcdInst
 17728 ;;		_putch
 17729 ;; This function uses a non-reentrant model
 17730 ;;
 17731                           
 17732                           	psect	text58
 17733  004C64                     __ptext58:
 17734                           	opt stack 0
 17735  004C64                     _lcdNibble:
 17736                           	opt stack 20
 17737                           
 17738                           ;incstack = 0
 17739                           ;lcdNibble@data stored from wreg
 17740  004C64  0100               	movlb	0	; () banked
 17741  004C66  6F81               	movwf	lcdNibble@data& (0+255),b
 17742                           
 17743                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 17744  004C68  9EF2               	bcf	intcon,7,c	;volatile
 17745                           
 17746                           ;lcd.c: 28: char temp = data & 0xF0;
 17747  004C6A  0100               	movlb	0	; () banked
 17748  004C6C  5181               	movf	lcdNibble@data& (0+255),w,b
 17749  004C6E  0BF0               	andlw	240
 17750  004C70  0100               	movlb	0	; () banked
 17751  004C72  6F80               	movwf	lcdNibble@temp& (0+255),b
 17752                           
 17753                           ;lcd.c: 29: LATD = LATD & 0x0F;
 17754  004C74  508C               	movf	3980,w,c	;volatile
 17755  004C76  0B0F               	andlw	15
 17756  004C78  6E8C               	movwf	3980,c	;volatile
 17757                           
 17758                           ;lcd.c: 30: LATD = temp | LATD;
 17759  004C7A  0100               	movlb	0	; () banked
 17760  004C7C  5180               	movf	lcdNibble@temp& (0+255),w,b
 17761  004C7E  108C               	iorwf	3980,w,c	;volatile
 17762  004C80  6E8C               	movwf	3980,c	;volatile
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 17766  004C82  868C               	bsf	3980,3,c	;volatile
 17767                           
 17768                           ; BSR set to: 0
 17769                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17770  004C84  0E42               	movlw	66
 17771  004C86                     u10687:
 17772  004C86  2EE8               	decfsz	wreg,f,c
 17773  004C88  D7FE               	bra	u10687
 17774  004C8A  D000               	nop2	
 17775                           
 17776                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 17777  004C8C  968C               	bcf	3980,3,c	;volatile
 17778                           
 17779                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17780  004C8E  0E42               	movlw	66
 17781  004C90                     u10697:
 17782  004C90  2EE8               	decfsz	wreg,f,c
 17783  004C92  D7FE               	bra	u10697
 17784  004C94  D000               	nop2	
 17785                           
 17786                           ;lcd.c: 37: data = data << 4;
 17787  004C96  0100               	movlb	0	; () banked
 17788  004C98  3981               	swapf	lcdNibble@data& (0+255),w,b
 17789  004C9A  0BF0               	andlw	240
 17790  004C9C  0100               	movlb	0	; () banked
 17791  004C9E  6F81               	movwf	lcdNibble@data& (0+255),b
 17792                           
 17793                           ;lcd.c: 39: temp = data & 0xF0;
 17794  004CA0  0100               	movlb	0	; () banked
 17795  004CA2  5181               	movf	lcdNibble@data& (0+255),w,b
 17796  004CA4  0BF0               	andlw	240
 17797  004CA6  0100               	movlb	0	; () banked
 17798  004CA8  6F80               	movwf	lcdNibble@temp& (0+255),b
 17799                           
 17800                           ;lcd.c: 40: LATD = LATD & 0x0F;
 17801  004CAA  508C               	movf	3980,w,c	;volatile
 17802  004CAC  0B0F               	andlw	15
 17803  004CAE  6E8C               	movwf	3980,c	;volatile
 17804                           
 17805                           ;lcd.c: 41: LATD = temp | LATD;
 17806  004CB0  0100               	movlb	0	; () banked
 17807  004CB2  5180               	movf	lcdNibble@temp& (0+255),w,b
 17808  004CB4  108C               	iorwf	3980,w,c	;volatile
 17809  004CB6  6E8C               	movwf	3980,c	;volatile
 17810                           
 17811                           ; BSR set to: 0
 17812                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 17813  004CB8  868C               	bsf	3980,3,c	;volatile
 17814                           
 17815                           ; BSR set to: 0
 17816                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17817  004CBA  0E42               	movlw	66
 17818  004CBC                     u10707:
 17819  004CBC  2EE8               	decfsz	wreg,f,c
 17820  004CBE  D7FE               	bra	u10707
 17821  004CC0  D000               	nop2	
 17822                           
 17823                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 17824  004CC2  968C               	bcf	3980,3,c	;volatile
 17825                           
 17826                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17827  004CC4  0E42               	movlw	66
 17828  004CC6                     u10717:
 17829  004CC6  2EE8               	decfsz	wreg,f,c
 17830  004CC8  D7FE               	bra	u10717
 17831  004CCA  D000               	nop2	
 17832                           
 17833                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 17834  004CCC  8EF2               	bsf	intcon,7,c	;volatile
 17835  004CCE  0012               	return		;funcret
 17836  004CD0                     __end_of_lcdNibble:
 17837                           	opt stack 0
 17838                           tblptru	equ	0xFF8
 17839                           tblptrh	equ	0xFF7
 17840                           tblptrl	equ	0xFF6
 17841                           tablat	equ	0xFF5
 17842                           prodh	equ	0xFF4
 17843                           prodl	equ	0xFF3
 17844                           intcon	equ	0xFF2
 17845                           intcon2	equ	0xFF1
 17846                           intcon3	equ	0xFF0
 17847                           indf0	equ	0xFEF
 17848                           postinc0	equ	0xFEE
 17849                           fsr0h	equ	0xFEA
 17850                           fsr0l	equ	0xFE9
 17851                           wreg	equ	0xFE8
 17852                           postdec1	equ	0xFE5
 17853                           fsr1l	equ	0xFE1
 17854                           indf2	equ	0xFDF
 17855                           postinc2	equ	0xFDE
 17856                           postdec2	equ	0xFDD
 17857                           fsr2h	equ	0xFDA
 17858                           fsr2l	equ	0xFD9
 17859                           status	equ	0xFD8
 17860                           
 17861 ;; *************** function _handler *****************
 17862 ;; Defined at:
 17863 ;;		line 16 in file "interruptHandler.c"
 17864 ;; Parameters:    Size  Location     Type
 17865 ;;		None
 17866 ;; Auto vars:     Size  Location     Type
 17867 ;;		None
 17868 ;; Return value:  Size  Location     Type
 17869 ;;                  1    wreg      void 
 17870 ;; Registers used:
 17871 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17872 ;; Tracked objects:
 17873 ;;		On entry : 0/0
 17874 ;;		On exit  : 0/0
 17875 ;;		Unchanged: 0/0
 17876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17879 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17880 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17881 ;;Total ram usage:       16 bytes
 17882 ;; Hardware stack levels used:    1
 17883 ;; Hardware stack levels required when called:    6
 17884 ;; This function calls:
 17885 ;;		_printSortTimer
 17886 ;;		_updateArmState
 17887 ;;		_updateMenu
 17888 ;;		_updateServoStates
 17889 ;;		i2_change_state_to_menu_start
 17890 ;; This function is called by:
 17891 ;;		Interrupt level 2
 17892 ;; This function uses a non-reentrant model
 17893 ;;
 17894                           
 17895                           	psect	intcode
 17896  000008                     __pintcode:
 17897                           	opt stack 0
 17898  000008                     _handler:
 17899                           	opt stack 18
 17900                           
 17901                           ;incstack = 0
 17902  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17903  00000A  EDC5  F01A         	call	int_func,f	;refresh shadow registers
 17904                           tblptru	equ	0xFF8
 17905                           tblptrh	equ	0xFF7
 17906                           tblptrl	equ	0xFF6
 17907                           tablat	equ	0xFF5
 17908                           prodh	equ	0xFF4
 17909                           prodl	equ	0xFF3
 17910                           intcon	equ	0xFF2
 17911                           intcon2	equ	0xFF1
 17912                           intcon3	equ	0xFF0
 17913                           indf0	equ	0xFEF
 17914                           postinc0	equ	0xFEE
 17915                           fsr0h	equ	0xFEA
 17916                           fsr0l	equ	0xFE9
 17917                           wreg	equ	0xFE8
 17918                           postdec1	equ	0xFE5
 17919                           fsr1l	equ	0xFE1
 17920                           indf2	equ	0xFDF
 17921                           postinc2	equ	0xFDE
 17922                           postdec2	equ	0xFDD
 17923                           fsr2h	equ	0xFDA
 17924                           fsr2l	equ	0xFD9
 17925                           status	equ	0xFD8
 17926                           
 17927                           	psect	intcode_body
 17928  00358A                     __pintcode_body:
 17929                           	opt stack 18
 17930  00358A                     int_func:
 17931                           	opt stack 18
 17932  00358A  0006               	pop		; remove dummy address from shadow register refresh
 17933  00358C  CFFA F04D          	movff	pclath,??_handler+2
 17934  003590  CFFB F04E          	movff	pclatu,??_handler+3
 17935  003594  CFE9 F04F          	movff	fsr0l,??_handler+4
 17936  003598  CFEA F050          	movff	fsr0h,??_handler+5
 17937  00359C  CFE1 F051          	movff	fsr1l,??_handler+6
 17938  0035A0  CFE2 F052          	movff	fsr1h,??_handler+7
 17939  0035A4  CFD9 F053          	movff	fsr2l,??_handler+8
 17940  0035A8  CFDA F054          	movff	fsr2h,??_handler+9
 17941  0035AC  CFF3 F055          	movff	prodl,??_handler+10
 17942  0035B0  CFF4 F056          	movff	prodh,??_handler+11
 17943  0035B4  CFF6 F057          	movff	tblptrl,??_handler+12
 17944  0035B8  CFF7 F058          	movff	tblptrh,??_handler+13
 17945  0035BC  CFF8 F059          	movff	tblptru,??_handler+14
 17946  0035C0  CFF5 F05A          	movff	tablat,??_handler+15
 17947                           
 17948                           ;interruptHandler.c: 18: if(INT1IF){
 17949  0035C4  A0F0               	btfss	intcon3,0,c	;volatile
 17950  0035C6  D034               	goto	i2l9786
 17951                           
 17952                           ;interruptHandler.c: 19: INT1IF = 0;
 17953  0035C8  90F0               	bcf	intcon3,0,c	;volatile
 17954                           
 17955                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 17956  0035CA  3881               	swapf	3969,w,c	;volatile
 17957  0035CC  0B0F               	andlw	15
 17958  0035CE  0B0F               	andlw	15
 17959  0035D0  6E4B               	movwf	??_handler& (0+255),c
 17960  0035D2  6A4C               	clrf	(??_handler+1)& (0+255),c
 17961  0035D4  0EA3               	movlw	low _keys
 17962  0035D6  244B               	addwf	??_handler,w,c
 17963  0035D8  6EF6               	movwf	tblptrl,c
 17964  0035DA  0EFA               	movlw	high _keys
 17965  0035DC  204C               	addwfc	??_handler+1,w,c
 17966  0035DE  6EF7               	movwf	tblptrh,c
 17967  0035E0                     	if	1	;There are 3 active tblptr bytes
 17968  0035E0  6AF8               	clrf	tblptru,c
 17969  0035E2  0E00               	movlw	low (__mediumconst shr (0+16))
 17970  0035E4  22F8               	addwfc	tblptru,f,c
 17971  0035E6                     	endif
 17972  0035E6  0008               	tblrd		*
 17973  0035E8  CFF5 F07D          	movff	tablat,_input	;volatile
 17974                           
 17975                           ;interruptHandler.c: 21: if(input == '*'){
 17976  0035EC  0E2A               	movlw	42
 17977  0035EE  187D               	xorwf	_input,w,c	;volatile
 17978  0035F0  B4D8               	btfsc	status,2,c
 17979  0035F2  D00D               	goto	i2l9780
 17980  0035F4  D018               	goto	i2l9782
 17981  0035F6                     i2l9770:
 17982                           
 17983                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17984  0035F6  0E03               	movlw	3
 17985  0035F8  D007               	goto	L16
 17986  0035FA                     i2l9772:
 17987                           
 17988                           ; BSR set to: 0
 17989                           ;interruptHandler.c: 27: machine_state = UI_state;
 17990  0035FA  0E00               	movlw	0
 17991  0035FC  0100               	movlb	0	; () banked
 17992  0035FE  6FFC               	movwf	_machine_state& (0+255),b
 17993                           
 17994                           ; BSR set to: 0
 17995                           ;interruptHandler.c: 28: change_state_to_menu_start();
 17996  003600  EC94  F02A         	call	i2_change_state_to_menu_start	;wreg free
 17997                           
 17998                           ;interruptHandler.c: 29: break;
 17999  003604  D015               	goto	i2l9786
 18000  003606                     i2l9776:
 18001                           
 18002                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 18003  003606  0E02               	movlw	2
 18004  003608                     L16:
 18005  003608  0100               	movlb	0	; () banked
 18006  00360A  6FFC               	movwf	_machine_state& (0+255),b
 18007                           
 18008                           ; BSR set to: 0
 18009                           ;interruptHandler.c: 33: }
 18010                           
 18011                           ;interruptHandler.c: 32: break;
 18012  00360C  D011               	goto	i2l9786
 18013  00360E                     i2l9780:
 18014  00360E  0100               	movlb	0	; () banked
 18015  003610  51FC               	movf	_machine_state& (0+255),w,b
 18016                           
 18017                           ; Switch size 1, requested type "space"
 18018                           ; Number of cases is 3, Range of values is 0 to 3
 18019                           ; switch strategies available:
 18020                           ; Name         Instructions Cycles
 18021                           ; simple_byte           10     6 (average)
 18022                           ;	Chosen strategy is simple_byte
 18023  003612  0A00               	xorlw	0	; case 0
 18024  003614  B4D8               	btfsc	status,2,c
 18025  003616  D7EF               	goto	i2l9770
 18026  003618  0A01               	xorlw	1	; case 1
 18027  00361A  B4D8               	btfsc	status,2,c
 18028  00361C  D7F4               	goto	i2l9776
 18029  00361E  0A02               	xorlw	2	; case 3
 18030  003620  B4D8               	btfsc	status,2,c
 18031  003622  D7EB               	goto	i2l9772
 18032                           
 18033                           ; BSR set to: 0
 18034                           ;interruptHandler.c: 34: }
 18035  003624  D005               	goto	i2l9786
 18036  003626                     i2l9782:
 18037                           
 18038                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 18039  003626  0100               	movlb	0	; () banked
 18040  003628  51FC               	movf	_machine_state& (0+255),w,b
 18041  00362A  B4D8               	btfsc	status,2,c
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;interruptHandler.c: 36: updateMenu();
 18045  00362C  ECBD  F015         	call	_updateMenu	;wreg free
 18046  003630                     i2l9786:
 18047                           
 18048                           ;interruptHandler.c: 37: }
 18049                           ;interruptHandler.c: 38: }
 18050                           ;interruptHandler.c: 41: if(TMR0IF){
 18051  003630  A4F2               	btfss	intcon,2,c	;volatile
 18052  003632  D00C               	goto	i2l9800
 18053                           
 18054                           ;interruptHandler.c: 42: TMR0IF = 0;
 18055  003634  94F2               	bcf	intcon,2,c	;volatile
 18056                           
 18057                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 18058  003636  0100               	movlb	0	; () banked
 18059  003638  05FC               	decf	_machine_state& (0+255),w,b
 18060  00363A  A4D8               	btfss	status,2,c
 18061  00363C  D007               	goto	i2l9800
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;interruptHandler.c: 44: printSortTimer();
 18065  00363E  EC1D  F017         	call	_printSortTimer	;wreg free
 18066                           
 18067                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 18068  003642  0E85               	movlw	133
 18069  003644  6ED7               	movwf	4055,c	;volatile
 18070                           
 18071                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 18072  003646  0EEE               	movlw	238
 18073  003648  6ED6               	movwf	4054,c	;volatile
 18074                           
 18075                           ;interruptHandler.c: 48: TMR0ON = 1;
 18076  00364A  8ED5               	bsf	4053,7,c	;volatile
 18077  00364C                     i2l9800:
 18078                           
 18079                           ;interruptHandler.c: 49: }
 18080                           ;interruptHandler.c: 50: }
 18081                           ;interruptHandler.c: 53: if(TMR1IF){
 18082  00364C  A09E               	btfss	3998,0,c	;volatile
 18083  00364E  D02A               	goto	i2l9828
 18084                           
 18085                           ;interruptHandler.c: 54: TMR1IF = 0;
 18086  003650  909E               	bcf	3998,0,c	;volatile
 18087                           
 18088                           ;interruptHandler.c: 55: TMR1ON = 0;
 18089  003652  90CD               	bcf	4045,0,c	;volatile
 18090                           
 18091                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 18092  003654  0100               	movlb	0	; () banked
 18093  003656  05FC               	decf	_machine_state& (0+255),w,b
 18094  003658  A4D8               	btfss	status,2,c
 18095  00365A  D024               	goto	i2l9828
 18096                           
 18097                           ; BSR set to: 0
 18098                           ;interruptHandler.c: 57: if(was_low_1){
 18099  00365C  5077               	movf	_was_low_1,w,c	;volatile
 18100  00365E  1078               	iorwf	_was_low_1+1,w,c	;volatile
 18101  003660  B4D8               	btfsc	status,2,c
 18102  003662  D00A               	goto	i2l1011
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 18106  003664  828B               	bsf	3979,1,c	;volatile
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;interruptHandler.c: 59: was_low_1 = 0;
 18110  003666  0E00               	movlw	0
 18111  003668  6E78               	movwf	_was_low_1+1,c	;volatile
 18112  00366A  0E00               	movlw	0
 18113  00366C  6E77               	movwf	_was_low_1,c	;volatile
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 18117  00366E  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 18121  003672  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 18122                           
 18123                           ;interruptHandler.c: 62: }
 18124  003676  D00F               	goto	i2l9822
 18125  003678                     i2l1011:
 18126                           
 18127                           ; BSR set to: 0
 18128                           ;interruptHandler.c: 63: else{
 18129                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 18130  003678  928B               	bcf	3979,1,c	;volatile
 18131                           
 18132                           ; BSR set to: 0
 18133                           ;interruptHandler.c: 65: was_low_1 = 1;
 18134  00367A  0E00               	movlw	0
 18135  00367C  6E78               	movwf	_was_low_1+1,c	;volatile
 18136  00367E  0E01               	movlw	1
 18137  003680  6E77               	movwf	_was_low_1,c	;volatile
 18138                           
 18139                           ; BSR set to: 0
 18140                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 18141  003682  0100               	movlb	0	; () banked
 18142  003684  51DA               	movf	_servoTimes& (0+255),w,b
 18143  003686  0800               	sublw	0
 18144  003688  0F20               	addlw	32
 18145  00368A  6ECF               	movwf	4047,c	;volatile
 18146                           
 18147                           ; BSR set to: 0
 18148                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 18149  00368C  0100               	movlb	0	; () banked
 18150  00368E  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 18151  003690  0800               	sublw	0
 18152  003692  0F20               	addlw	32
 18153  003694  6ECE               	movwf	4046,c	;volatile
 18154  003696                     i2l9822:
 18155                           
 18156                           ; BSR set to: 0
 18157                           ;interruptHandler.c: 68: }
 18158                           ;interruptHandler.c: 69: TMR1ON = 1;
 18159  003696  80CD               	bsf	4045,0,c	;volatile
 18160                           
 18161                           ; BSR set to: 0
 18162                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 18163  003698  0E0A               	movlw	10
 18164  00369A  266D               	addwf	_servo_timer_counter,f,c	;volatile
 18165  00369C  0E00               	movlw	0
 18166  00369E  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;interruptHandler.c: 72: updateServoStates();
 18170  0036A0  ECB4  F01C         	call	_updateServoStates	;wreg free
 18171  0036A4                     i2l9828:
 18172                           
 18173                           ;interruptHandler.c: 73: }
 18174                           ;interruptHandler.c: 74: }
 18175                           ;interruptHandler.c: 77: if(TMR2IF){
 18176  0036A4  A29E               	btfss	3998,1,c	;volatile
 18177  0036A6  D026               	goto	i2l9854
 18178                           
 18179                           ;interruptHandler.c: 80: TMR2IF = 0;
 18180  0036A8  929E               	bcf	3998,1,c	;volatile
 18181                           
 18182                           ;interruptHandler.c: 81: TMR2ON = 0;
 18183  0036AA  94CA               	bcf	4042,2,c	;volatile
 18184                           
 18185                           ;interruptHandler.c: 82: timer2_counter++;
 18186  0036AC  4A73               	infsnz	_timer2_counter,f,c	;volatile
 18187  0036AE  2A74               	incf	_timer2_counter+1,f,c	;volatile
 18188                           
 18189                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 18190  0036B0  0100               	movlb	0	; () banked
 18191  0036B2  05FC               	decf	_machine_state& (0+255),w,b
 18192  0036B4  A4D8               	btfss	status,2,c
 18193  0036B6  D01E               	goto	i2l9854
 18194                           
 18195                           ; BSR set to: 0
 18196                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 18197  0036B8  5079               	movf	_was_low_2,w,c	;volatile
 18198  0036BA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18199  0036BC  B4D8               	btfsc	status,2,c
 18200  0036BE  D00A               	goto	i2l9844
 18201                           
 18202                           ; BSR set to: 0
 18203  0036C0  0E02               	movlw	2
 18204  0036C2  1873               	xorwf	_timer2_counter,w,c	;volatile
 18205  0036C4  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 18206  0036C6  A4D8               	btfss	status,2,c
 18207  0036C8  D005               	goto	i2l9844
 18208                           
 18209                           ; BSR set to: 0
 18210                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 18211  0036CA  868A               	bsf	3978,3,c	;volatile
 18212                           
 18213                           ; BSR set to: 0
 18214                           ;interruptHandler.c: 87: was_low_2 = 0;
 18215  0036CC  0E00               	movlw	0
 18216  0036CE  6E7A               	movwf	_was_low_2+1,c	;volatile
 18217  0036D0  0E00               	movlw	0
 18218  0036D2  D008               	goto	L17
 18219  0036D4                     i2l9844:
 18220                           
 18221                           ; BSR set to: 0
 18222                           ;interruptHandler.c: 90: else if(!was_low_2){
 18223  0036D4  5079               	movf	_was_low_2,w,c	;volatile
 18224  0036D6  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18225  0036D8  A4D8               	btfss	status,2,c
 18226  0036DA  D009               	goto	i2l9850
 18227                           
 18228                           ; BSR set to: 0
 18229                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 18230  0036DC  968A               	bcf	3978,3,c	;volatile
 18231                           
 18232                           ; BSR set to: 0
 18233                           ;interruptHandler.c: 92: was_low_2 = 1;
 18234  0036DE  0E00               	movlw	0
 18235  0036E0  6E7A               	movwf	_was_low_2+1,c	;volatile
 18236  0036E2  0E01               	movlw	1
 18237  0036E4                     L17:
 18238  0036E4  6E79               	movwf	_was_low_2,c	;volatile
 18239                           
 18240                           ;interruptHandler.c: 93: timer2_counter = 0;
 18241  0036E6  0E00               	movlw	0
 18242  0036E8  6E74               	movwf	_timer2_counter+1,c	;volatile
 18243  0036EA  0E00               	movlw	0
 18244  0036EC  6E73               	movwf	_timer2_counter,c	;volatile
 18245  0036EE                     i2l9850:
 18246                           
 18247                           ; BSR set to: 0
 18248                           ;interruptHandler.c: 94: }
 18249                           ;interruptHandler.c: 95: updateArmState();
 18250  0036EE  EC64  F028         	call	_updateArmState	;wreg free
 18251                           
 18252                           ;interruptHandler.c: 96: TMR2ON = 1;
 18253  0036F2  84CA               	bsf	4042,2,c	;volatile
 18254  0036F4                     i2l9854:
 18255                           
 18256                           ;interruptHandler.c: 97: }
 18257                           ;interruptHandler.c: 98: }
 18258                           ;interruptHandler.c: 101: if(TMR3IF){
 18259  0036F4  A2A1               	btfss	4001,1,c	;volatile
 18260  0036F6  D024               	goto	i2l1022
 18261                           
 18262                           ;interruptHandler.c: 102: TMR3IF = 0;
 18263  0036F8  92A1               	bcf	4001,1,c	;volatile
 18264                           
 18265                           ;interruptHandler.c: 103: TMR3ON = 0;
 18266  0036FA  90B1               	bcf	4017,0,c	;volatile
 18267                           
 18268                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 18269  0036FC  0100               	movlb	0	; () banked
 18270  0036FE  05FC               	decf	_machine_state& (0+255),w,b
 18271  003700  A4D8               	btfss	status,2,c
 18272  003702  D01E               	goto	i2l1022
 18273                           
 18274                           ; BSR set to: 0
 18275                           ;interruptHandler.c: 105: if(was_low_3){
 18276  003704  507B               	movf	_was_low_3,w,c	;volatile
 18277  003706  107C               	iorwf	_was_low_3+1,w,c	;volatile
 18278  003708  B4D8               	btfsc	status,2,c
 18279  00370A  D00A               	goto	i2l1020
 18280                           
 18281                           ; BSR set to: 0
 18282                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 18283  00370C  848B               	bsf	3979,2,c	;volatile
 18284                           
 18285                           ; BSR set to: 0
 18286                           ;interruptHandler.c: 107: was_low_3 = 0;
 18287  00370E  0E00               	movlw	0
 18288  003710  6E7C               	movwf	_was_low_3+1,c	;volatile
 18289  003712  0E00               	movlw	0
 18290  003714  6E7B               	movwf	_was_low_3,c	;volatile
 18291                           
 18292                           ; BSR set to: 0
 18293                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 18294  003716  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 18295                           
 18296                           ; BSR set to: 0
 18297                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 18298  00371A  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 18299                           
 18300                           ;interruptHandler.c: 110: }
 18301  00371E  D00F               	goto	i2l9876
 18302  003720                     i2l1020:
 18303                           
 18304                           ; BSR set to: 0
 18305                           ;interruptHandler.c: 111: else{
 18306                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 18307  003720  948B               	bcf	3979,2,c	;volatile
 18308                           
 18309                           ; BSR set to: 0
 18310                           ;interruptHandler.c: 113: was_low_3 = 1;
 18311  003722  0E00               	movlw	0
 18312  003724  6E7C               	movwf	_was_low_3+1,c	;volatile
 18313  003726  0E01               	movlw	1
 18314  003728  6E7B               	movwf	_was_low_3,c	;volatile
 18315                           
 18316                           ; BSR set to: 0
 18317                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 18318  00372A  0100               	movlb	0	; () banked
 18319  00372C  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 18320  00372E  0800               	sublw	0
 18321  003730  0F20               	addlw	32
 18322  003732  6EB3               	movwf	4019,c	;volatile
 18323                           
 18324                           ; BSR set to: 0
 18325                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 18326  003734  0100               	movlb	0	; () banked
 18327  003736  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 18328  003738  0800               	sublw	0
 18329  00373A  0F20               	addlw	32
 18330  00373C  6EB2               	movwf	4018,c	;volatile
 18331  00373E                     i2l9876:
 18332                           
 18333                           ; BSR set to: 0
 18334                           ;interruptHandler.c: 116: }
 18335                           ;interruptHandler.c: 117: TMR3ON = 1;
 18336  00373E  80B1               	bsf	4017,0,c	;volatile
 18337  003740                     i2l1022:
 18338  003740  C05A  FFF5         	movff	??_handler+15,tablat
 18339  003744  C059  FFF8         	movff	??_handler+14,tblptru
 18340  003748  C058  FFF7         	movff	??_handler+13,tblptrh
 18341  00374C  C057  FFF6         	movff	??_handler+12,tblptrl
 18342  003750  C056  FFF4         	movff	??_handler+11,prodh
 18343  003754  C055  FFF3         	movff	??_handler+10,prodl
 18344  003758  C054  FFDA         	movff	??_handler+9,fsr2h
 18345  00375C  C053  FFD9         	movff	??_handler+8,fsr2l
 18346  003760  C052  FFE2         	movff	??_handler+7,fsr1h
 18347  003764  C051  FFE1         	movff	??_handler+6,fsr1l
 18348  003768  C050  FFEA         	movff	??_handler+5,fsr0h
 18349  00376C  C04F  FFE9         	movff	??_handler+4,fsr0l
 18350  003770  C04E  FFFB         	movff	??_handler+3,pclatu
 18351  003774  C04D  FFFA         	movff	??_handler+2,pclath
 18352  003778  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 18353  00377A  0011               	retfie		f
 18354  00377C                     __end_of_handler:
 18355                           	opt stack 0
 18356                           pclatu	equ	0xFFB
 18357                           pclath	equ	0xFFA
 18358                           tblptru	equ	0xFF8
 18359                           tblptrh	equ	0xFF7
 18360                           tblptrl	equ	0xFF6
 18361                           tablat	equ	0xFF5
 18362                           prodh	equ	0xFF4
 18363                           prodl	equ	0xFF3
 18364                           intcon	equ	0xFF2
 18365                           intcon2	equ	0xFF1
 18366                           intcon3	equ	0xFF0
 18367                           indf0	equ	0xFEF
 18368                           postinc0	equ	0xFEE
 18369                           fsr0h	equ	0xFEA
 18370                           fsr0l	equ	0xFE9
 18371                           wreg	equ	0xFE8
 18372                           postdec1	equ	0xFE5
 18373                           fsr1h	equ	0xFE2
 18374                           fsr1l	equ	0xFE1
 18375                           indf2	equ	0xFDF
 18376                           postinc2	equ	0xFDE
 18377                           postdec2	equ	0xFDD
 18378                           fsr2h	equ	0xFDA
 18379                           fsr2l	equ	0xFD9
 18380                           status	equ	0xFD8
 18381                           
 18382 ;; *************** function _updateServoStates *****************
 18383 ;; Defined at:
 18384 ;;		line 537 in file "sort.c"
 18385 ;; Parameters:    Size  Location     Type
 18386 ;;		None
 18387 ;; Auto vars:     Size  Location     Type
 18388 ;;		None
 18389 ;; Return value:  Size  Location     Type
 18390 ;;                  1    wreg      void 
 18391 ;; Registers used:
 18392 ;;		wreg, status,2, status,0, cstack
 18393 ;; Tracked objects:
 18394 ;;		On entry : 0/0
 18395 ;;		On exit  : 0/0
 18396 ;;		Unchanged: 0/0
 18397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18401 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18402 ;;Total ram usage:        2 bytes
 18403 ;; Hardware stack levels used:    1
 18404 ;; Hardware stack levels required when called:    1
 18405 ;; This function calls:
 18406 ;;		i2_updateServoPosition
 18407 ;; This function is called by:
 18408 ;;		_handler
 18409 ;; This function uses a non-reentrant model
 18410 ;;
 18411                           
 18412                           	psect	text60
 18413  003968                     __ptext60:
 18414                           	opt stack 0
 18415  003968                     _updateServoStates:
 18416                           	opt stack 22
 18417                           
 18418                           ;sort.c: 539: if(servo_timer_counter >= servo_timer_target){
 18419                           
 18420                           ;incstack = 0
 18421  003968  506F               	movf	_servo_timer_target,w,c	;volatile
 18422  00396A  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 18423  00396C  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 18424  00396E  0A80               	xorlw	128
 18425  003970  6E09               	movwf	??_updateServoStates& (0+255),c
 18426  003972  5070               	movf	_servo_timer_target+1,w,c	;volatile
 18427  003974  0A80               	xorlw	128
 18428  003976  5809               	subwfb	??_updateServoStates& (0+255),w,c
 18429  003978  A0D8               	btfss	status,0,c
 18430  00397A  0012               	return	
 18431                           
 18432                           ;sort.c: 541: if(f_panning_to_bin){
 18433  00397C  5061               	movf	_f_panning_to_bin,w,c	;volatile
 18434  00397E  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 18435  003980  A4D8               	btfss	status,2,c
 18436  003982  D036               	goto	i2l9646
 18437  003984  D05F               	goto	i2l9650
 18438  003986                     i2l9620:
 18439                           
 18440                           ;sort.c: 545: updateServoPosition(1260, 3);
 18441  003986  0E04               	movlw	4
 18442  003988  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18443  00398A  0EEC               	movlw	236
 18444  00398C  6E01               	movwf	i2updateServoPosition@time_us,c
 18445  00398E  0E00               	movlw	0
 18446  003990  6E04               	movwf	i2updateServoPosition@timer+1,c
 18447  003992  0E03               	movlw	3
 18448  003994  6E03               	movwf	i2updateServoPosition@timer,c
 18449  003996  ECFA  F025         	call	i2_updateServoPosition	;wreg free
 18450  00399A  D025               	goto	i2l9640
 18451  00399C                     i2l9624:
 18452                           
 18453                           ;sort.c: 547: servo_timer_target = 700;
 18454  00399C  0E02               	movlw	2
 18455  00399E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18456  0039A0  0EBC               	movlw	188
 18457  0039A2  6E6F               	movwf	_servo_timer_target,c	;volatile
 18458                           
 18459                           ;sort.c: 548: break;
 18460  0039A4  D04A               	goto	i2l9648
 18461  0039A6                     i2l9626:
 18462                           
 18463                           ;sort.c: 550: updateServoPosition(1260, 3);
 18464  0039A6  0E04               	movlw	4
 18465  0039A8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18466  0039AA  0EEC               	movlw	236
 18467  0039AC  6E01               	movwf	i2updateServoPosition@time_us,c
 18468  0039AE  0E00               	movlw	0
 18469  0039B0  6E04               	movwf	i2updateServoPosition@timer+1,c
 18470  0039B2  0E03               	movlw	3
 18471  0039B4  6E03               	movwf	i2updateServoPosition@timer,c
 18472  0039B6  ECFA  F025         	call	i2_updateServoPosition	;wreg free
 18473  0039BA  D015               	goto	i2l9640
 18474  0039BC                     i2l9632:
 18475                           
 18476                           ;sort.c: 556: updateServoPosition(1390, 3);
 18477  0039BC  0E05               	movlw	5
 18478  0039BE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18479  0039C0  0E6E               	movlw	110
 18480  0039C2  6E01               	movwf	i2updateServoPosition@time_us,c
 18481  0039C4  0E00               	movlw	0
 18482  0039C6  6E04               	movwf	i2updateServoPosition@timer+1,c
 18483  0039C8  0E03               	movlw	3
 18484  0039CA  6E03               	movwf	i2updateServoPosition@timer,c
 18485  0039CC  ECFA  F025         	call	i2_updateServoPosition	;wreg free
 18486  0039D0  D00A               	goto	i2l9640
 18487  0039D2                     i2l9638:
 18488                           
 18489                           ;sort.c: 561: updateServoPosition(1390, 3);
 18490  0039D2  0E05               	movlw	5
 18491  0039D4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18492  0039D6  0E6E               	movlw	110
 18493  0039D8  6E01               	movwf	i2updateServoPosition@time_us,c
 18494  0039DA  0E00               	movlw	0
 18495  0039DC  6E04               	movwf	i2updateServoPosition@timer+1,c
 18496  0039DE  0E03               	movlw	3
 18497  0039E0  6E03               	movwf	i2updateServoPosition@timer,c
 18498  0039E2  ECFA  F025         	call	i2_updateServoPosition	;wreg free
 18499  0039E6                     i2l9640:
 18500                           
 18501                           ;sort.c: 562: servo_timer_counter = 0;
 18502  0039E6  0E00               	movlw	0
 18503  0039E8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18504  0039EA  0E00               	movlw	0
 18505  0039EC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18506  0039EE  D7D6               	goto	i2l9624
 18507  0039F0                     i2l9646:
 18508  0039F0  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 18509  0039F4  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 18510                           
 18511                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18512                           ; Switch size 1, requested type "space"
 18513                           ; Number of cases is 4, Range of values is 1 to 9
 18514                           ; switch strategies available:
 18515                           ; Name         Instructions Cycles
 18516                           ; simple_byte           13     7 (average)
 18517                           ;	Chosen strategy is simple_byte
 18518  0039F8  500A               	movf	??_updateServoStates+1,w,c
 18519  0039FA  0A01               	xorlw	1	; case 1
 18520  0039FC  B4D8               	btfsc	status,2,c
 18521  0039FE  D00A               	goto	i2l10324
 18522  003A00  0A02               	xorlw	2	; case 3
 18523  003A02  B4D8               	btfsc	status,2,c
 18524  003A04  D00C               	goto	i2l10326
 18525  003A06  0A05               	xorlw	5	; case 6
 18526  003A08  B4D8               	btfsc	status,2,c
 18527  003A0A  D00E               	goto	i2l10328
 18528  003A0C  0A0F               	xorlw	15	; case 9
 18529  003A0E  B4D8               	btfsc	status,2,c
 18530  003A10  D010               	goto	i2l10330
 18531  003A12  D013               	goto	i2l9648
 18532  003A14                     i2l10324:
 18533                           
 18534                           ; Switch size 1, requested type "space"
 18535                           ; Number of cases is 1, Range of values is 244 to 244
 18536                           ; switch strategies available:
 18537                           ; Name         Instructions Cycles
 18538                           ; simple_byte            4     3 (average)
 18539                           ;	Chosen strategy is simple_byte
 18540  003A14  5009               	movf	??_updateServoStates,w,c
 18541  003A16  0AF4               	xorlw	244	; case 244
 18542  003A18  B4D8               	btfsc	status,2,c
 18543  003A1A  D7B5               	goto	i2l9620
 18544  003A1C  D00E               	goto	i2l9648
 18545  003A1E                     i2l10326:
 18546                           
 18547                           ; Switch size 1, requested type "space"
 18548                           ; Number of cases is 1, Range of values is 82 to 82
 18549                           ; switch strategies available:
 18550                           ; Name         Instructions Cycles
 18551                           ; simple_byte            4     3 (average)
 18552                           ;	Chosen strategy is simple_byte
 18553  003A1E  5009               	movf	??_updateServoStates,w,c
 18554  003A20  0A52               	xorlw	82	; case 82
 18555  003A22  B4D8               	btfsc	status,2,c
 18556  003A24  D7C0               	goto	i2l9626
 18557  003A26  D009               	goto	i2l9648
 18558  003A28                     i2l10328:
 18559                           
 18560                           ; Switch size 1, requested type "space"
 18561                           ; Number of cases is 1, Range of values is 134 to 134
 18562                           ; switch strategies available:
 18563                           ; Name         Instructions Cycles
 18564                           ; simple_byte            4     3 (average)
 18565                           ;	Chosen strategy is simple_byte
 18566  003A28  5009               	movf	??_updateServoStates,w,c
 18567  003A2A  0A86               	xorlw	134	; case 134
 18568  003A2C  B4D8               	btfsc	status,2,c
 18569  003A2E  D7C6               	goto	i2l9632
 18570  003A30  D004               	goto	i2l9648
 18571  003A32                     i2l10330:
 18572                           
 18573                           ; Switch size 1, requested type "space"
 18574                           ; Number of cases is 1, Range of values is 96 to 96
 18575                           ; switch strategies available:
 18576                           ; Name         Instructions Cycles
 18577                           ; simple_byte            4     3 (average)
 18578                           ;	Chosen strategy is simple_byte
 18579  003A32  5009               	movf	??_updateServoStates,w,c
 18580  003A34  0A60               	xorlw	96	; case 96
 18581  003A36  B4D8               	btfsc	status,2,c
 18582  003A38  D7CC               	goto	i2l9638
 18583  003A3A                     i2l9648:
 18584                           
 18585                           ;sort.c: 568: f_panning_to_bin = 0;
 18586  003A3A  0E00               	movlw	0
 18587  003A3C  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 18588  003A3E  0E00               	movlw	0
 18589  003A40  6E61               	movwf	_f_panning_to_bin,c	;volatile
 18590                           
 18591                           ;sort.c: 569: }
 18592  003A42  0012               	return	
 18593  003A44                     i2l9650:
 18594                           
 18595                           ;sort.c: 570: else if(pan_servo_state == 1200){
 18596  003A44  0EB0               	movlw	176
 18597  003A46  186B               	xorwf	_pan_servo_state,w,c	;volatile
 18598  003A48  E15A               	bnz	i2l9680
 18599  003A4A  0E04               	movlw	4
 18600  003A4C  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 18601  003A4E  A4D8               	btfss	status,2,c
 18602  003A50  D056               	goto	i2l9680
 18603                           
 18604                           ;sort.c: 572: servo_timer_counter = 0;
 18605  003A52  0E00               	movlw	0
 18606  003A54  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18607  003A56  0E00               	movlw	0
 18608  003A58  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18609                           
 18610                           ;sort.c: 573: }
 18611  003A5A  0012               	return	
 18612  003A5C                     i2l9654:
 18613                           
 18614                           ;sort.c: 578: updateServoPosition(1050, 3);
 18615  003A5C  0E04               	movlw	4
 18616  003A5E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18617  003A60  0E1A               	movlw	26
 18618  003A62  6E01               	movwf	i2updateServoPosition@time_us,c
 18619  003A64  0E00               	movlw	0
 18620  003A66  6E04               	movwf	i2updateServoPosition@timer+1,c
 18621  003A68  0E03               	movlw	3
 18622  003A6A  6E03               	movwf	i2updateServoPosition@timer,c
 18623  003A6C  ECFA  F025         	call	i2_updateServoPosition	;wreg free
 18624                           
 18625                           ;sort.c: 579: servo_timer_counter = 0;
 18626  003A70  0E00               	movlw	0
 18627  003A72  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18628  003A74  0E00               	movlw	0
 18629  003A76  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18630                           
 18631                           ;sort.c: 580: servo_timer_target = 750;
 18632  003A78  0E02               	movlw	2
 18633  003A7A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18634  003A7C  0EEE               	movlw	238
 18635  003A7E  6E6F               	movwf	_servo_timer_target,c	;volatile
 18636                           
 18637                           ;sort.c: 581: break;
 18638  003A80  0012               	return	
 18639  003A82                     i2l9660:
 18640                           
 18641                           ;sort.c: 583: updateServoPosition(1050, 3);
 18642  003A82  0E04               	movlw	4
 18643  003A84  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18644  003A86  0E1A               	movlw	26
 18645  003A88  6E01               	movwf	i2updateServoPosition@time_us,c
 18646  003A8A  0E00               	movlw	0
 18647  003A8C  6E04               	movwf	i2updateServoPosition@timer+1,c
 18648  003A8E  0E03               	movlw	3
 18649  003A90  6E03               	movwf	i2updateServoPosition@timer,c
 18650  003A92  ECFA  F025         	call	i2_updateServoPosition	;wreg free
 18651                           
 18652                           ;sort.c: 584: servo_timer_counter = 0;
 18653  003A96  0E00               	movlw	0
 18654  003A98  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18655  003A9A  0E00               	movlw	0
 18656  003A9C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18657                           
 18658                           ;sort.c: 585: servo_timer_target = 750;
 18659  003A9E  0E02               	movlw	2
 18660  003AA0  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18661  003AA2  0EEE               	movlw	238
 18662  003AA4  6E6F               	movwf	_servo_timer_target,c	;volatile
 18663                           
 18664                           ;sort.c: 586: break;
 18665  003AA6  0012               	return	
 18666  003AA8                     i2l9666:
 18667                           
 18668                           ;sort.c: 589: updateServoPosition(1200, 1);
 18669  003AA8  0E04               	movlw	4
 18670  003AAA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18671  003AAC  0EB0               	movlw	176
 18672  003AAE  6E01               	movwf	i2updateServoPosition@time_us,c
 18673  003AB0  0E00               	movlw	0
 18674  003AB2  6E04               	movwf	i2updateServoPosition@timer+1,c
 18675  003AB4  0E01               	movlw	1
 18676  003AB6  6E03               	movwf	i2updateServoPosition@timer,c
 18677  003AB8  ECFA  F025         	call	i2_updateServoPosition	;wreg free
 18678                           
 18679                           ;sort.c: 590: updateServoPosition(1050, 3);
 18680  003ABC  0E04               	movlw	4
 18681  003ABE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18682  003AC0  0E1A               	movlw	26
 18683  003AC2  6E01               	movwf	i2updateServoPosition@time_us,c
 18684  003AC4  0E00               	movlw	0
 18685  003AC6  6E04               	movwf	i2updateServoPosition@timer+1,c
 18686  003AC8  0E03               	movlw	3
 18687  003ACA  6E03               	movwf	i2updateServoPosition@timer,c
 18688  003ACC  ECFA  F025         	call	i2_updateServoPosition	;wreg free
 18689                           
 18690                           ;sort.c: 591: servo_timer_counter = 0;
 18691  003AD0  0E00               	movlw	0
 18692  003AD2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18693  003AD4  0E00               	movlw	0
 18694  003AD6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18695                           
 18696                           ;sort.c: 592: servo_timer_target = 9999;
 18697  003AD8  0E27               	movlw	39
 18698  003ADA  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18699  003ADC  0E0F               	movlw	15
 18700  003ADE  6E6F               	movwf	_servo_timer_target,c	;volatile
 18701                           
 18702                           ;sort.c: 594: f_can_distributed = 1;
 18703  003AE0  0E00               	movlw	0
 18704  003AE2  0101               	movlb	1	; () banked
 18705  003AE4  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18706  003AE6  0E01               	movlw	1
 18707  003AE8  6F35               	movwf	_f_can_distributed& (0+255),b
 18708                           
 18709                           ; BSR set to: 1
 18710                           ;sort.c: 595: if(f_lastCan == 1){
 18711  003AEA  0100               	movlb	0	; () banked
 18712  003AEC  05F0               	decf	_f_lastCan& (0+255),w,b
 18713  003AEE  0100               	movlb	0	; () banked
 18714  003AF0  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18715  003AF2  A4D8               	btfss	status,2,c
 18716  003AF4  0012               	return	
 18717                           
 18718                           ; BSR set to: 0
 18719                           ;sort.c: 596: machine_state = DoneSorting_state;
 18720  003AF6  0E02               	movlw	2
 18721  003AF8  0100               	movlb	0	; () banked
 18722  003AFA  6FFC               	movwf	_machine_state& (0+255),b
 18723                           
 18724                           ; BSR set to: 0
 18725                           ;sort.c: 602: }
 18726                           
 18727                           ; BSR set to: 0
 18728                           ;sort.c: 601: break;
 18729                           
 18730                           ;sort.c: 600: default:
 18731                           
 18732                           ; BSR set to: 0
 18733                           ;sort.c: 597: }
 18734                           ;sort.c: 598: break;
 18735  003AFC  0012               	return	
 18736  003AFE                     i2l9680:
 18737  003AFE  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18738  003B02  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18739                           
 18740                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18741                           ; Switch size 1, requested type "space"
 18742                           ; Number of cases is 2, Range of values is 4 to 5
 18743                           ; switch strategies available:
 18744                           ; Name         Instructions Cycles
 18745                           ; simple_byte            7     4 (average)
 18746                           ;	Chosen strategy is simple_byte
 18747  003B06  500A               	movf	??_updateServoStates+1,w,c
 18748  003B08  0A04               	xorlw	4	; case 4
 18749  003B0A  B4D8               	btfsc	status,2,c
 18750  003B0C  D004               	goto	i2l10332
 18751  003B0E  0A01               	xorlw	1	; case 5
 18752  003B10  A4D8               	btfss	status,2,c
 18753  003B12  0012               	return	
 18754  003B14  D008               	goto	i2l10334
 18755  003B16                     i2l10332:
 18756                           
 18757                           ; Switch size 1, requested type "space"
 18758                           ; Number of cases is 2, Range of values is 26 to 236
 18759                           ; switch strategies available:
 18760                           ; Name         Instructions Cycles
 18761                           ; simple_byte            7     4 (average)
 18762                           ;	Chosen strategy is simple_byte
 18763  003B16  5009               	movf	??_updateServoStates,w,c
 18764  003B18  0A1A               	xorlw	26	; case 26
 18765  003B1A  B4D8               	btfsc	status,2,c
 18766  003B1C  D7C5               	goto	i2l9666
 18767  003B1E  0AF6               	xorlw	246	; case 236
 18768  003B20  A4D8               	btfss	status,2,c
 18769  003B22  0012               	return	
 18770  003B24  D79B               	goto	i2l9654
 18771  003B26                     i2l10334:
 18772                           
 18773                           ; Switch size 1, requested type "space"
 18774                           ; Number of cases is 1, Range of values is 110 to 110
 18775                           ; switch strategies available:
 18776                           ; Name         Instructions Cycles
 18777                           ; simple_byte            4     3 (average)
 18778                           ;	Chosen strategy is simple_byte
 18779  003B26  5009               	movf	??_updateServoStates,w,c
 18780  003B28  0A6E               	xorlw	110	; case 110
 18781  003B2A  A4D8               	btfss	status,2,c
 18782  003B2C  0012               	return	
 18783  003B2E  D7A9               	goto	i2l9660
 18784  003B30                     __end_of_updateServoStates:
 18785                           	opt stack 0
 18786                           pclatu	equ	0xFFB
 18787                           pclath	equ	0xFFA
 18788                           tblptru	equ	0xFF8
 18789                           tblptrh	equ	0xFF7
 18790                           tblptrl	equ	0xFF6
 18791                           tablat	equ	0xFF5
 18792                           prodh	equ	0xFF4
 18793                           prodl	equ	0xFF3
 18794                           intcon	equ	0xFF2
 18795                           intcon2	equ	0xFF1
 18796                           intcon3	equ	0xFF0
 18797                           indf0	equ	0xFEF
 18798                           postinc0	equ	0xFEE
 18799                           fsr0h	equ	0xFEA
 18800                           fsr0l	equ	0xFE9
 18801                           wreg	equ	0xFE8
 18802                           postdec1	equ	0xFE5
 18803                           fsr1h	equ	0xFE2
 18804                           fsr1l	equ	0xFE1
 18805                           indf2	equ	0xFDF
 18806                           postinc2	equ	0xFDE
 18807                           postdec2	equ	0xFDD
 18808                           fsr2h	equ	0xFDA
 18809                           fsr2l	equ	0xFD9
 18810                           status	equ	0xFD8
 18811                           
 18812 ;; *************** function i2_updateServoPosition *****************
 18813 ;; Defined at:
 18814 ;;		line 522 in file "sort.c"
 18815 ;; Parameters:    Size  Location     Type
 18816 ;;  time_us         2    0[COMRAM] int 
 18817 ;;  timer           2    2[COMRAM] int 
 18818 ;; Auto vars:     Size  Location     Type
 18819 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18820 ;; Return value:  Size  Location     Type
 18821 ;;                  1    wreg      void 
 18822 ;; Registers used:
 18823 ;;		wreg, status,2, status,0
 18824 ;; Tracked objects:
 18825 ;;		On entry : 0/0
 18826 ;;		On exit  : 0/0
 18827 ;;		Unchanged: 0/0
 18828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18831 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18832 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;Total ram usage:        8 bytes
 18834 ;; Hardware stack levels used:    1
 18835 ;; This function calls:
 18836 ;;		Nothing
 18837 ;; This function is called by:
 18838 ;;		_updateServoStates
 18839 ;; This function uses a non-reentrant model
 18840 ;;
 18841                           
 18842                           	psect	text61
 18843  004BF4                     __ptext61:
 18844                           	opt stack 0
 18845  004BF4                     i2_updateServoPosition:
 18846                           	opt stack 22
 18847                           
 18848                           ;sort.c: 523: unsigned int my_time = 65535 - time_us;
 18849                           
 18850                           ;incstack = 0
 18851  004BF4  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18852  004BF8  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18853  004BFC  1E05               	comf	??i2_updateServoPosition,f,c
 18854  004BFE  1E06               	comf	??i2_updateServoPosition+1,f,c
 18855  004C00  4A05               	infsnz	??i2_updateServoPosition,f,c
 18856  004C02  2A06               	incf	??i2_updateServoPosition+1,f,c
 18857  004C04  0EFF               	movlw	255
 18858  004C06  2405               	addwf	??i2_updateServoPosition,w,c
 18859  004C08  6E07               	movwf	i2updateServoPosition@my_time,c
 18860  004C0A  0EFF               	movlw	255
 18861  004C0C  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18862  004C0E  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18863                           
 18864                           ;sort.c: 524: switch(timer){
 18865  004C10  D019               	goto	i2l8840
 18866  004C12                     i2l8834:
 18867                           
 18868                           ;sort.c: 526: servoTimes[0] = my_time >> 8;
 18869  004C12  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18870  004C14  0100               	movlb	0	; () banked
 18871  004C16  6FDA               	movwf	_servoTimes& (0+255),b
 18872  004C18  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18873                           
 18874                           ;sort.c: 527: servoTimes[1] = my_time & 0xFF;
 18875  004C1A  5007               	movf	i2updateServoPosition@my_time,w,c
 18876  004C1C  0100               	movlb	0	; () banked
 18877  004C1E  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18878  004C20  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18879                           
 18880                           ; BSR set to: 0
 18881                           ;sort.c: 529: pan_servo_state = time_us;
 18882  004C22  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18883  004C26  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18884  004C2A                     i2l892:
 18885                           
 18886                           ;sort.c: 531: servoTimes[2] = my_time >> 8;
 18887  004C2A  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18888  004C2C  0100               	movlb	0	; () banked
 18889  004C2E  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18890  004C30  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18891                           
 18892                           ;sort.c: 532: servoTimes[3] = my_time & 0xFF;
 18893  004C32  5007               	movf	i2updateServoPosition@my_time,w,c
 18894  004C34  0100               	movlb	0	; () banked
 18895  004C36  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18896  004C38  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18897                           
 18898                           ; BSR set to: 0
 18899                           ;sort.c: 534: tilt_servo_state = time_us;
 18900  004C3A  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18901  004C3E  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18902                           
 18903                           ;sort.c: 535: }
 18904  004C42  0012               	return	
 18905  004C44                     i2l8840:
 18906  004C44  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18907  004C48  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18908                           
 18909                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18910                           ; Switch size 1, requested type "space"
 18911                           ; Number of cases is 1, Range of values is 0 to 0
 18912                           ; switch strategies available:
 18913                           ; Name         Instructions Cycles
 18914                           ; simple_byte            4     3 (average)
 18915                           ;	Chosen strategy is simple_byte
 18916  004C4C  5006               	movf	??i2_updateServoPosition+1,w,c
 18917  004C4E  0A00               	xorlw	0	; case 0
 18918  004C50  A4D8               	btfss	status,2,c
 18919  004C52  0012               	return	
 18920                           
 18921                           ; Switch size 1, requested type "space"
 18922                           ; Number of cases is 2, Range of values is 1 to 3
 18923                           ; switch strategies available:
 18924                           ; Name         Instructions Cycles
 18925                           ; simple_byte            7     4 (average)
 18926                           ;	Chosen strategy is simple_byte
 18927  004C54  5005               	movf	??i2_updateServoPosition,w,c
 18928  004C56  0A01               	xorlw	1	; case 1
 18929  004C58  B4D8               	btfsc	status,2,c
 18930  004C5A  D7DB               	goto	i2l8834
 18931  004C5C  0A02               	xorlw	2	; case 3
 18932  004C5E  A4D8               	btfss	status,2,c
 18933  004C60  0012               	return	
 18934  004C62  D7E3               	goto	i2l892
 18935  004C64                     __end_ofi2_updateServoPosition:
 18936                           	opt stack 0
 18937                           pclatu	equ	0xFFB
 18938                           pclath	equ	0xFFA
 18939                           tblptru	equ	0xFF8
 18940                           tblptrh	equ	0xFF7
 18941                           tblptrl	equ	0xFF6
 18942                           tablat	equ	0xFF5
 18943                           prodh	equ	0xFF4
 18944                           prodl	equ	0xFF3
 18945                           intcon	equ	0xFF2
 18946                           intcon2	equ	0xFF1
 18947                           intcon3	equ	0xFF0
 18948                           indf0	equ	0xFEF
 18949                           postinc0	equ	0xFEE
 18950                           fsr0h	equ	0xFEA
 18951                           fsr0l	equ	0xFE9
 18952                           wreg	equ	0xFE8
 18953                           postdec1	equ	0xFE5
 18954                           fsr1h	equ	0xFE2
 18955                           fsr1l	equ	0xFE1
 18956                           indf2	equ	0xFDF
 18957                           postinc2	equ	0xFDE
 18958                           postdec2	equ	0xFDD
 18959                           fsr2h	equ	0xFDA
 18960                           fsr2l	equ	0xFD9
 18961                           status	equ	0xFD8
 18962                           
 18963 ;; *************** function _updateMenu *****************
 18964 ;; Defined at:
 18965 ;;		line 216 in file "UI.c"
 18966 ;; Parameters:    Size  Location     Type
 18967 ;;		None
 18968 ;; Auto vars:     Size  Location     Type
 18969 ;;		None
 18970 ;; Return value:  Size  Location     Type
 18971 ;;                  1    wreg      void 
 18972 ;; Registers used:
 18973 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18974 ;; Tracked objects:
 18975 ;;		On entry : 0/0
 18976 ;;		On exit  : 0/0
 18977 ;;		Unchanged: 0/0
 18978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18981 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18983 ;;Total ram usage:        2 bytes
 18984 ;; Hardware stack levels used:    1
 18985 ;; Hardware stack levels required when called:    5
 18986 ;; This function calls:
 18987 ;;		_change_state_to_logs_11
 18988 ;;		_change_state_to_logs_12
 18989 ;;		_change_state_to_logs_22
 18990 ;;		_change_state_to_logs_23
 18991 ;;		_change_state_to_logs_33
 18992 ;;		_change_state_to_logs_34
 18993 ;;		_change_state_to_menu_11
 18994 ;;		_change_state_to_menu_23
 18995 ;;		_dispLogs
 18996 ;;		_inputHandler
 18997 ;;		i2_change_state_to_menu_12
 18998 ;;		i2_change_state_to_menu_22
 18999 ;;		i2_change_state_to_menu_start
 19000 ;; This function is called by:
 19001 ;;		_handler
 19002 ;; This function uses a non-reentrant model
 19003 ;;
 19004                           
 19005                           	psect	text62
 19006  002B7A                     __ptext62:
 19007                           	opt stack 0
 19008  002B7A                     _updateMenu:
 19009                           	opt stack 18
 19010                           
 19011                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 19012                           
 19013                           ;incstack = 0
 19014  002B7A  0E00               	movlw	0
 19015  002B7C  6E76               	movwf	_up+1,c
 19016  002B7E  0E00               	movlw	0
 19017  002B80  6E75               	movwf	_up,c
 19018  002B82  0E00               	movlw	0
 19019  002B84  6E5E               	movwf	_down+1,c
 19020  002B86  0E00               	movlw	0
 19021  002B88  6E5D               	movwf	_down,c
 19022  002B8A  0E00               	movlw	0
 19023  002B8C  6E60               	movwf	_enter+1,c
 19024  002B8E  0E00               	movlw	0
 19025  002B90  6E5F               	movwf	_enter,c
 19026  002B92  0E00               	movlw	0
 19027  002B94  6E5C               	movwf	_back+1,c
 19028  002B96  0E00               	movlw	0
 19029  002B98  6E5B               	movwf	_back,c
 19030                           
 19031                           ;UI.c: 218: (INTCONbits.GIE = 0);
 19032  002B9A  9EF2               	bcf	intcon,7,c	;volatile
 19033                           
 19034                           ;UI.c: 220: if (inputHandler()
 19035                           ;UI.c: 223: ){
 19036  002B9C  ECBE  F01B         	call	_inputHandler	;wreg free
 19037  002BA0  502A               	movf	?_inputHandler,w,c
 19038  002BA2  102B               	iorwf	?_inputHandler+1,w,c
 19039  002BA4  A4D8               	btfss	status,2,c
 19040  002BA6  D112               	goto	i2l9374
 19041  002BA8  D146               	goto	i2l263
 19042  002BAA                     i2l9226:
 19043                           
 19044                           ;UI.c: 227: change_state_to_menu_11();
 19045  002BAA  EC81  F029         	call	_change_state_to_menu_11	;wreg free
 19046                           
 19047                           ;UI.c: 228: break;
 19048  002BAE  D143               	goto	i2l263
 19049  002BB0                     i2l9228:
 19050                           
 19051                           ;UI.c: 231: if(up){
 19052  002BB0  5075               	movf	_up,w,c
 19053  002BB2  1076               	iorwf	_up+1,w,c
 19054  002BB4  B4D8               	btfsc	status,2,c
 19055  002BB6  D003               	goto	i2l9232
 19056                           
 19057                           ;UI.c: 232: change_state_to_menu_23();
 19058  002BB8  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19059                           
 19060                           ;UI.c: 233: }
 19061  002BBC  D13C               	goto	i2l263
 19062  002BBE                     i2l9232:
 19063                           
 19064                           ;UI.c: 234: else if(down){
 19065  002BBE  505D               	movf	_down,w,c
 19066  002BC0  105E               	iorwf	_down+1,w,c
 19067  002BC2  B4D8               	btfsc	status,2,c
 19068  002BC4  D003               	goto	i2l9236
 19069                           
 19070                           ;UI.c: 235: change_state_to_menu_12();
 19071  002BC6  EC51  F029         	call	i2_change_state_to_menu_12	;wreg free
 19072                           
 19073                           ;UI.c: 236: }
 19074  002BCA  D135               	goto	i2l263
 19075  002BCC                     i2l9236:
 19076                           
 19077                           ;UI.c: 237: else if(enter){
 19078  002BCC  505F               	movf	_enter,w,c
 19079  002BCE  1060               	iorwf	_enter+1,w,c
 19080  002BD0  B4D8               	btfsc	status,2,c
 19081  002BD2  D131               	goto	i2l263
 19082                           
 19083                           ;UI.c: 238: change_state_to_menu_start();
 19084  002BD4  EC94  F02A         	call	i2_change_state_to_menu_start	;wreg free
 19085                           
 19086                           ;UI.c: 239: }
 19087                           ;UI.c: 240: break;
 19088  002BD8  D12E               	goto	i2l263
 19089  002BDA                     i2l9240:
 19090                           
 19091                           ;UI.c: 243: if(up){
 19092  002BDA  5075               	movf	_up,w,c
 19093  002BDC  1076               	iorwf	_up+1,w,c
 19094  002BDE  B4D8               	btfsc	status,2,c
 19095  002BE0  D003               	goto	i2l9244
 19096                           
 19097                           ;UI.c: 244: change_state_to_menu_11();
 19098  002BE2  EC81  F029         	call	_change_state_to_menu_11	;wreg free
 19099                           
 19100                           ;UI.c: 245: }
 19101  002BE6  D127               	goto	i2l263
 19102  002BE8                     i2l9244:
 19103                           
 19104                           ;UI.c: 246: else if(down){
 19105  002BE8  505D               	movf	_down,w,c
 19106  002BEA  105E               	iorwf	_down+1,w,c
 19107  002BEC  B4D8               	btfsc	status,2,c
 19108  002BEE  D011               	goto	i2l9260
 19109                           
 19110                           ;UI.c: 247: change_state_to_menu_23();
 19111  002BF0  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19112                           
 19113                           ;UI.c: 248: }
 19114  002BF4  D120               	goto	i2l263
 19115  002BF6                     i2l9252:
 19116                           
 19117                           ;UI.c: 255: if(up){
 19118  002BF6  5075               	movf	_up,w,c
 19119  002BF8  1076               	iorwf	_up+1,w,c
 19120  002BFA  B4D8               	btfsc	status,2,c
 19121  002BFC  D003               	goto	i2l9256
 19122                           
 19123                           ;UI.c: 256: change_state_to_menu_11();
 19124  002BFE  EC81  F029         	call	_change_state_to_menu_11	;wreg free
 19125                           
 19126                           ;UI.c: 257: }
 19127  002C02  D119               	goto	i2l263
 19128  002C04                     i2l9256:
 19129                           
 19130                           ;UI.c: 258: else if(down){
 19131  002C04  505D               	movf	_down,w,c
 19132  002C06  105E               	iorwf	_down+1,w,c
 19133  002C08  B4D8               	btfsc	status,2,c
 19134  002C0A  D003               	goto	i2l9260
 19135                           
 19136                           ;UI.c: 259: change_state_to_menu_23();
 19137  002C0C  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19138                           
 19139                           ;UI.c: 260: }
 19140  002C10  D112               	goto	i2l263
 19141  002C12                     i2l9260:
 19142                           
 19143                           ;UI.c: 261: else if(enter){
 19144  002C12  505F               	movf	_enter,w,c
 19145  002C14  1060               	iorwf	_enter+1,w,c
 19146  002C16  B4D8               	btfsc	status,2,c
 19147  002C18  D10E               	goto	i2l263
 19148                           
 19149                           ;UI.c: 262: machine_state = Sorting_state;
 19150  002C1A  0E01               	movlw	1
 19151  002C1C  0100               	movlb	0	; () banked
 19152  002C1E  6FFC               	movwf	_machine_state& (0+255),b
 19153                           
 19154                           ; BSR set to: 0
 19155                           ;UI.c: 263: }
 19156                           ;UI.c: 264: break;
 19157                           
 19158                           ; BSR set to: 0
 19159                           
 19160                           ; BSR set to: 0
 19161  002C20  D10A               	goto	i2l263
 19162  002C22                     i2l9264:
 19163                           
 19164                           ;UI.c: 267: if(up){
 19165  002C22  5075               	movf	_up,w,c
 19166  002C24  1076               	iorwf	_up+1,w,c
 19167  002C26  B4D8               	btfsc	status,2,c
 19168  002C28  D003               	goto	i2l9268
 19169                           
 19170                           ;UI.c: 268: change_state_to_menu_22();
 19171  002C2A  EC39  F029         	call	i2_change_state_to_menu_22	;wreg free
 19172                           
 19173                           ;UI.c: 269: }
 19174  002C2E  D103               	goto	i2l263
 19175  002C30                     i2l9268:
 19176                           
 19177                           ;UI.c: 270: else if(down){
 19178  002C30  505D               	movf	_down,w,c
 19179  002C32  105E               	iorwf	_down+1,w,c
 19180  002C34  B4D8               	btfsc	status,2,c
 19181  002C36  D003               	goto	i2l9272
 19182                           
 19183                           ;UI.c: 271: change_state_to_menu_11();
 19184  002C38  EC81  F029         	call	_change_state_to_menu_11	;wreg free
 19185                           
 19186                           ;UI.c: 272: }
 19187  002C3C  D0FC               	goto	i2l263
 19188  002C3E                     i2l9272:
 19189                           
 19190                           ;UI.c: 273: else if(enter){
 19191  002C3E  505F               	movf	_enter,w,c
 19192  002C40  1060               	iorwf	_enter+1,w,c
 19193  002C42  B4D8               	btfsc	status,2,c
 19194  002C44  D0F8               	goto	i2l263
 19195                           
 19196                           ;UI.c: 274: change_state_to_logs_11();
 19197  002C46  ECF9  F029         	call	_change_state_to_logs_11	;wreg free
 19198                           
 19199                           ;UI.c: 275: }
 19200                           ;UI.c: 276: break;
 19201  002C4A  D0F5               	goto	i2l263
 19202  002C4C                     i2l9276:
 19203                           
 19204                           ;UI.c: 279: if(up){
 19205  002C4C  5075               	movf	_up,w,c
 19206  002C4E  1076               	iorwf	_up+1,w,c
 19207  002C50  B4D8               	btfsc	status,2,c
 19208  002C52  D003               	goto	i2l9280
 19209                           
 19210                           ;UI.c: 280: change_state_to_logs_34();
 19211  002C54  EC99  F029         	call	_change_state_to_logs_34	;wreg free
 19212                           
 19213                           ;UI.c: 281: }
 19214  002C58  D0EE               	goto	i2l263
 19215  002C5A                     i2l9280:
 19216                           
 19217                           ;UI.c: 282: else if(down){
 19218  002C5A  505D               	movf	_down,w,c
 19219  002C5C  105E               	iorwf	_down+1,w,c
 19220  002C5E  B4D8               	btfsc	status,2,c
 19221  002C60  D003               	goto	i2l9284
 19222                           
 19223                           ;UI.c: 283: change_state_to_logs_12();
 19224  002C62  ECE1  F029         	call	_change_state_to_logs_12	;wreg free
 19225                           
 19226                           ;UI.c: 284: }
 19227  002C66  D0E7               	goto	i2l263
 19228  002C68                     i2l9284:
 19229                           
 19230                           ;UI.c: 285: else if(enter){
 19231  002C68  505F               	movf	_enter,w,c
 19232  002C6A  1060               	iorwf	_enter+1,w,c
 19233  002C6C  B4D8               	btfsc	status,2,c
 19234  002C6E  D007               	goto	i2l9288
 19235                           
 19236                           ;UI.c: 286: dispLogs(1);
 19237  002C70  0E00               	movlw	0
 19238  002C72  6E13               	movwf	dispLogs@myLog+1,c
 19239  002C74  0E01               	movlw	1
 19240  002C76  6E12               	movwf	dispLogs@myLog,c
 19241  002C78  ECCE  F02A         	call	_dispLogs	;wreg free
 19242                           
 19243                           ;UI.c: 287: }
 19244  002C7C  D0DC               	goto	i2l263
 19245  002C7E                     i2l9288:
 19246                           
 19247                           ;UI.c: 288: else if(back){
 19248  002C7E  505B               	movf	_back,w,c
 19249  002C80  105C               	iorwf	_back+1,w,c
 19250  002C82  B4D8               	btfsc	status,2,c
 19251  002C84  D0D8               	goto	i2l263
 19252                           
 19253                           ;UI.c: 289: change_state_to_menu_23();
 19254  002C86  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19255                           
 19256                           ;UI.c: 290: }
 19257                           ;UI.c: 291: break;
 19258  002C8A  D0D5               	goto	i2l263
 19259  002C8C                     i2l9292:
 19260                           
 19261                           ;UI.c: 294: if(up){
 19262  002C8C  5075               	movf	_up,w,c
 19263  002C8E  1076               	iorwf	_up+1,w,c
 19264  002C90  B4D8               	btfsc	status,2,c
 19265  002C92  D003               	goto	i2l9296
 19266                           
 19267                           ;UI.c: 295: change_state_to_logs_11();
 19268  002C94  ECF9  F029         	call	_change_state_to_logs_11	;wreg free
 19269                           
 19270                           ;UI.c: 296: }
 19271  002C98  D0CE               	goto	i2l263
 19272  002C9A                     i2l9296:
 19273                           
 19274                           ;UI.c: 297: else if(down){
 19275  002C9A  505D               	movf	_down,w,c
 19276  002C9C  105E               	iorwf	_down+1,w,c
 19277  002C9E  B4D8               	btfsc	status,2,c
 19278  002CA0  D003               	goto	i2l9300
 19279                           
 19280                           ;UI.c: 298: change_state_to_logs_23();
 19281  002CA2  EC28  F02A         	call	_change_state_to_logs_23	;wreg free
 19282                           
 19283                           ;UI.c: 299: }
 19284  002CA6  D0C7               	goto	i2l263
 19285  002CA8                     i2l9300:
 19286                           
 19287                           ;UI.c: 300: else if(enter){
 19288  002CA8  505F               	movf	_enter,w,c
 19289  002CAA  1060               	iorwf	_enter+1,w,c
 19290  002CAC  B4D8               	btfsc	status,2,c
 19291  002CAE  D007               	goto	i2l9304
 19292                           
 19293                           ;UI.c: 301: dispLogs(2);
 19294  002CB0  0E00               	movlw	0
 19295  002CB2  6E13               	movwf	dispLogs@myLog+1,c
 19296  002CB4  0E02               	movlw	2
 19297  002CB6  6E12               	movwf	dispLogs@myLog,c
 19298  002CB8  ECCE  F02A         	call	_dispLogs	;wreg free
 19299                           
 19300                           ;UI.c: 302: }
 19301  002CBC  D0BC               	goto	i2l263
 19302  002CBE                     i2l9304:
 19303                           
 19304                           ;UI.c: 303: else if(back){
 19305  002CBE  505B               	movf	_back,w,c
 19306  002CC0  105C               	iorwf	_back+1,w,c
 19307  002CC2  B4D8               	btfsc	status,2,c
 19308  002CC4  D0B8               	goto	i2l263
 19309                           
 19310                           ;UI.c: 304: change_state_to_menu_23();
 19311  002CC6  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19312                           
 19313                           ;UI.c: 305: }
 19314                           ;UI.c: 306: break;
 19315  002CCA  D0B5               	goto	i2l263
 19316  002CCC                     i2l9308:
 19317                           
 19318                           ;UI.c: 309: if(up){
 19319  002CCC  5075               	movf	_up,w,c
 19320  002CCE  1076               	iorwf	_up+1,w,c
 19321  002CD0  B4D8               	btfsc	status,2,c
 19322  002CD2  D003               	goto	i2l9312
 19323                           
 19324                           ;UI.c: 310: change_state_to_logs_11();
 19325  002CD4  ECF9  F029         	call	_change_state_to_logs_11	;wreg free
 19326                           
 19327                           ;UI.c: 311: }
 19328  002CD8  D0AE               	goto	i2l263
 19329  002CDA                     i2l9312:
 19330                           
 19331                           ;UI.c: 312: else if(down){
 19332  002CDA  505D               	movf	_down,w,c
 19333  002CDC  105E               	iorwf	_down+1,w,c
 19334  002CDE  B4D8               	btfsc	status,2,c
 19335  002CE0  D003               	goto	i2l9316
 19336                           
 19337                           ;UI.c: 313: change_state_to_logs_23();
 19338  002CE2  EC28  F02A         	call	_change_state_to_logs_23	;wreg free
 19339                           
 19340                           ;UI.c: 314: }
 19341  002CE6  D0A7               	goto	i2l263
 19342  002CE8                     i2l9316:
 19343                           
 19344                           ;UI.c: 315: else if(enter){
 19345  002CE8  505F               	movf	_enter,w,c
 19346  002CEA  1060               	iorwf	_enter+1,w,c
 19347  002CEC  B4D8               	btfsc	status,2,c
 19348  002CEE  D007               	goto	i2l9320
 19349                           
 19350                           ;UI.c: 316: dispLogs(2);
 19351  002CF0  0E00               	movlw	0
 19352  002CF2  6E13               	movwf	dispLogs@myLog+1,c
 19353  002CF4  0E02               	movlw	2
 19354  002CF6  6E12               	movwf	dispLogs@myLog,c
 19355  002CF8  ECCE  F02A         	call	_dispLogs	;wreg free
 19356                           
 19357                           ;UI.c: 317: }
 19358  002CFC  D09C               	goto	i2l263
 19359  002CFE                     i2l9320:
 19360                           
 19361                           ;UI.c: 318: else if(back){
 19362  002CFE  505B               	movf	_back,w,c
 19363  002D00  105C               	iorwf	_back+1,w,c
 19364  002D02  B4D8               	btfsc	status,2,c
 19365  002D04  D098               	goto	i2l263
 19366                           
 19367                           ;UI.c: 319: change_state_to_menu_23();
 19368  002D06  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19369                           
 19370                           ;UI.c: 320: }
 19371                           ;UI.c: 321: break;
 19372  002D0A  D095               	goto	i2l263
 19373  002D0C                     i2l9324:
 19374                           
 19375                           ;UI.c: 324: if(up){
 19376  002D0C  5075               	movf	_up,w,c
 19377  002D0E  1076               	iorwf	_up+1,w,c
 19378  002D10  B4D8               	btfsc	status,2,c
 19379  002D12  D003               	goto	i2l9328
 19380                           
 19381                           ;UI.c: 325: change_state_to_logs_22();
 19382  002D14  ECC9  F029         	call	_change_state_to_logs_22	;wreg free
 19383                           
 19384                           ;UI.c: 326: }
 19385  002D18  D08E               	goto	i2l263
 19386  002D1A                     i2l9328:
 19387                           
 19388                           ;UI.c: 327: else if(down){
 19389  002D1A  505D               	movf	_down,w,c
 19390  002D1C  105E               	iorwf	_down+1,w,c
 19391  002D1E  B4D8               	btfsc	status,2,c
 19392  002D20  D003               	goto	i2l9332
 19393                           
 19394                           ;UI.c: 328: change_state_to_logs_34();
 19395  002D22  EC99  F029         	call	_change_state_to_logs_34	;wreg free
 19396                           
 19397                           ;UI.c: 329: }
 19398  002D26  D087               	goto	i2l263
 19399  002D28                     i2l9332:
 19400                           
 19401                           ;UI.c: 330: else if(enter){
 19402  002D28  505F               	movf	_enter,w,c
 19403  002D2A  1060               	iorwf	_enter+1,w,c
 19404  002D2C  B4D8               	btfsc	status,2,c
 19405  002D2E  D007               	goto	i2l9336
 19406                           
 19407                           ;UI.c: 331: dispLogs(3);
 19408  002D30  0E00               	movlw	0
 19409  002D32  6E13               	movwf	dispLogs@myLog+1,c
 19410  002D34  0E03               	movlw	3
 19411  002D36  6E12               	movwf	dispLogs@myLog,c
 19412  002D38  ECCE  F02A         	call	_dispLogs	;wreg free
 19413                           
 19414                           ;UI.c: 332: }
 19415  002D3C  D07C               	goto	i2l263
 19416  002D3E                     i2l9336:
 19417                           
 19418                           ;UI.c: 333: else if(back){
 19419  002D3E  505B               	movf	_back,w,c
 19420  002D40  105C               	iorwf	_back+1,w,c
 19421  002D42  B4D8               	btfsc	status,2,c
 19422  002D44  D078               	goto	i2l263
 19423                           
 19424                           ;UI.c: 334: change_state_to_menu_23();
 19425  002D46  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19426                           
 19427                           ;UI.c: 335: }
 19428                           ;UI.c: 336: break;
 19429  002D4A  D075               	goto	i2l263
 19430  002D4C                     i2l9340:
 19431                           
 19432                           ;UI.c: 339: if(up){
 19433  002D4C  5075               	movf	_up,w,c
 19434  002D4E  1076               	iorwf	_up+1,w,c
 19435  002D50  B4D8               	btfsc	status,2,c
 19436  002D52  D003               	goto	i2l9344
 19437                           
 19438                           ;UI.c: 340: change_state_to_logs_22();
 19439  002D54  ECC9  F029         	call	_change_state_to_logs_22	;wreg free
 19440                           
 19441                           ;UI.c: 341: }
 19442  002D58  D06E               	goto	i2l263
 19443  002D5A                     i2l9344:
 19444                           
 19445                           ;UI.c: 342: else if(down){
 19446  002D5A  505D               	movf	_down,w,c
 19447  002D5C  105E               	iorwf	_down+1,w,c
 19448  002D5E  B4D8               	btfsc	status,2,c
 19449  002D60  D003               	goto	i2l9348
 19450                           
 19451                           ;UI.c: 343: change_state_to_logs_34();
 19452  002D62  EC99  F029         	call	_change_state_to_logs_34	;wreg free
 19453                           
 19454                           ;UI.c: 344: }
 19455  002D66  D067               	goto	i2l263
 19456  002D68                     i2l9348:
 19457                           
 19458                           ;UI.c: 345: else if(enter){
 19459  002D68  505F               	movf	_enter,w,c
 19460  002D6A  1060               	iorwf	_enter+1,w,c
 19461  002D6C  B4D8               	btfsc	status,2,c
 19462  002D6E  D007               	goto	i2l9352
 19463                           
 19464                           ;UI.c: 346: dispLogs(3);
 19465  002D70  0E00               	movlw	0
 19466  002D72  6E13               	movwf	dispLogs@myLog+1,c
 19467  002D74  0E03               	movlw	3
 19468  002D76  6E12               	movwf	dispLogs@myLog,c
 19469  002D78  ECCE  F02A         	call	_dispLogs	;wreg free
 19470                           
 19471                           ;UI.c: 347: }
 19472  002D7C  D05C               	goto	i2l263
 19473  002D7E                     i2l9352:
 19474                           
 19475                           ;UI.c: 348: else if(back){
 19476  002D7E  505B               	movf	_back,w,c
 19477  002D80  105C               	iorwf	_back+1,w,c
 19478  002D82  B4D8               	btfsc	status,2,c
 19479  002D84  D058               	goto	i2l263
 19480                           
 19481                           ;UI.c: 349: change_state_to_menu_23();
 19482  002D86  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19483                           
 19484                           ;UI.c: 350: }
 19485                           ;UI.c: 351: break;
 19486  002D8A  D055               	goto	i2l263
 19487  002D8C                     i2l9356:
 19488                           
 19489                           ;UI.c: 354: if(up){
 19490  002D8C  5075               	movf	_up,w,c
 19491  002D8E  1076               	iorwf	_up+1,w,c
 19492  002D90  B4D8               	btfsc	status,2,c
 19493  002D92  D003               	goto	i2l9360
 19494                           
 19495                           ;UI.c: 355: change_state_to_logs_33();
 19496  002D94  ECB1  F029         	call	_change_state_to_logs_33	;wreg free
 19497                           
 19498                           ;UI.c: 356: }
 19499  002D98  D04E               	goto	i2l263
 19500  002D9A                     i2l9360:
 19501                           
 19502                           ;UI.c: 357: else if(down){
 19503  002D9A  505D               	movf	_down,w,c
 19504  002D9C  105E               	iorwf	_down+1,w,c
 19505  002D9E  B4D8               	btfsc	status,2,c
 19506  002DA0  D003               	goto	i2l9364
 19507                           
 19508                           ;UI.c: 358: change_state_to_logs_11();
 19509  002DA2  ECF9  F029         	call	_change_state_to_logs_11	;wreg free
 19510                           
 19511                           ;UI.c: 359: }
 19512  002DA6  D047               	goto	i2l263
 19513  002DA8                     i2l9364:
 19514                           
 19515                           ;UI.c: 360: else if(enter){
 19516  002DA8  505F               	movf	_enter,w,c
 19517  002DAA  1060               	iorwf	_enter+1,w,c
 19518  002DAC  B4D8               	btfsc	status,2,c
 19519  002DAE  D007               	goto	i2l9368
 19520                           
 19521                           ;UI.c: 361: dispLogs(4);
 19522  002DB0  0E00               	movlw	0
 19523  002DB2  6E13               	movwf	dispLogs@myLog+1,c
 19524  002DB4  0E04               	movlw	4
 19525  002DB6  6E12               	movwf	dispLogs@myLog,c
 19526  002DB8  ECCE  F02A         	call	_dispLogs	;wreg free
 19527                           
 19528                           ;UI.c: 362: }
 19529  002DBC  D03C               	goto	i2l263
 19530  002DBE                     i2l9368:
 19531                           
 19532                           ;UI.c: 363: else if(back){
 19533  002DBE  505B               	movf	_back,w,c
 19534  002DC0  105C               	iorwf	_back+1,w,c
 19535  002DC2  B4D8               	btfsc	status,2,c
 19536  002DC4  D038               	goto	i2l263
 19537                           
 19538                           ;UI.c: 364: change_state_to_menu_23();
 19539  002DC6  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 19540                           
 19541                           ;UI.c: 370: }
 19542                           
 19543                           ;UI.c: 369: break;
 19544                           
 19545                           ;UI.c: 368: default:
 19546                           
 19547                           ;UI.c: 365: }
 19548                           ;UI.c: 366: break;
 19549  002DCA  D035               	goto	i2l263
 19550  002DCC                     i2l9374:
 19551  002DCC  C0EC  F043         	movff	_cur_state,??_updateMenu
 19552  002DD0  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 19553                           
 19554                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19555                           ; Switch size 1, requested type "space"
 19556                           ; Number of cases is 3, Range of values is 0 to 4
 19557                           ; switch strategies available:
 19558                           ; Name         Instructions Cycles
 19559                           ; simple_byte           10     6 (average)
 19560                           ;	Chosen strategy is simple_byte
 19561  002DD4  5044               	movf	??_updateMenu+1,w,c
 19562  002DD6  0A00               	xorlw	0	; case 0
 19563  002DD8  B4D8               	btfsc	status,2,c
 19564  002DDA  D007               	goto	i2l10338
 19565  002DDC  0A03               	xorlw	3	; case 3
 19566  002DDE  B4D8               	btfsc	status,2,c
 19567  002DE0  D015               	goto	i2l10340
 19568  002DE2  0A07               	xorlw	7	; case 4
 19569  002DE4  B4D8               	btfsc	status,2,c
 19570  002DE6  D020               	goto	i2l10342
 19571  002DE8  D026               	goto	i2l263
 19572  002DEA                     i2l10338:
 19573                           
 19574                           ; Switch size 1, requested type "space"
 19575                           ; Number of cases is 5, Range of values is 0 to 23
 19576                           ; switch strategies available:
 19577                           ; Name         Instructions Cycles
 19578                           ; simple_byte           16     9 (average)
 19579                           ;	Chosen strategy is simple_byte
 19580  002DEA  5043               	movf	??_updateMenu,w,c
 19581  002DEC  0A00               	xorlw	0	; case 0
 19582  002DEE  B4D8               	btfsc	status,2,c
 19583  002DF0  D6DC               	goto	i2l9226
 19584  002DF2  0A0B               	xorlw	11	; case 11
 19585  002DF4  B4D8               	btfsc	status,2,c
 19586  002DF6  D6DC               	goto	i2l9228
 19587  002DF8  0A07               	xorlw	7	; case 12
 19588  002DFA  B4D8               	btfsc	status,2,c
 19589  002DFC  D6EE               	goto	i2l9240
 19590  002DFE  0A1A               	xorlw	26	; case 22
 19591  002E00  B4D8               	btfsc	status,2,c
 19592  002E02  D6F9               	goto	i2l9252
 19593  002E04  0A01               	xorlw	1	; case 23
 19594  002E06  B4D8               	btfsc	status,2,c
 19595  002E08  D70C               	goto	i2l9264
 19596  002E0A  D015               	goto	i2l263
 19597  002E0C                     i2l10340:
 19598                           
 19599                           ; Switch size 1, requested type "space"
 19600                           ; Number of cases is 4, Range of values is 243 to 255
 19601                           ; switch strategies available:
 19602                           ; Name         Instructions Cycles
 19603                           ; simple_byte           13     7 (average)
 19604                           ;	Chosen strategy is simple_byte
 19605  002E0C  5043               	movf	??_updateMenu,w,c
 19606  002E0E  0AF3               	xorlw	243	; case 243
 19607  002E10  B4D8               	btfsc	status,2,c
 19608  002E12  D71C               	goto	i2l9276
 19609  002E14  0A07               	xorlw	7	; case 244
 19610  002E16  B4D8               	btfsc	status,2,c
 19611  002E18  D739               	goto	i2l9292
 19612  002E1A  0A0A               	xorlw	10	; case 254
 19613  002E1C  B4D8               	btfsc	status,2,c
 19614  002E1E  D756               	goto	i2l9308
 19615  002E20  0A01               	xorlw	1	; case 255
 19616  002E22  B4D8               	btfsc	status,2,c
 19617  002E24  D773               	goto	i2l9324
 19618  002E26  D007               	goto	i2l263
 19619  002E28                     i2l10342:
 19620                           
 19621                           ; Switch size 1, requested type "space"
 19622                           ; Number of cases is 2, Range of values is 9 to 10
 19623                           ; switch strategies available:
 19624                           ; Name         Instructions Cycles
 19625                           ; simple_byte            7     4 (average)
 19626                           ;	Chosen strategy is simple_byte
 19627  002E28  5043               	movf	??_updateMenu,w,c
 19628  002E2A  0A09               	xorlw	9	; case 9
 19629  002E2C  B4D8               	btfsc	status,2,c
 19630  002E2E  D78E               	goto	i2l9340
 19631  002E30  0A03               	xorlw	3	; case 10
 19632  002E32  B4D8               	btfsc	status,2,c
 19633  002E34  D7AB               	goto	i2l9356
 19634  002E36                     i2l263:
 19635                           
 19636                           ;UI.c: 371: }
 19637                           ;UI.c: 372: (INTCONbits.GIE = 1);
 19638  002E36  8EF2               	bsf	intcon,7,c	;volatile
 19639  002E38  0012               	return		;funcret
 19640  002E3A                     __end_of_updateMenu:
 19641                           	opt stack 0
 19642                           pclatu	equ	0xFFB
 19643                           pclath	equ	0xFFA
 19644                           tblptru	equ	0xFF8
 19645                           tblptrh	equ	0xFF7
 19646                           tblptrl	equ	0xFF6
 19647                           tablat	equ	0xFF5
 19648                           prodh	equ	0xFF4
 19649                           prodl	equ	0xFF3
 19650                           intcon	equ	0xFF2
 19651                           intcon2	equ	0xFF1
 19652                           intcon3	equ	0xFF0
 19653                           indf0	equ	0xFEF
 19654                           postinc0	equ	0xFEE
 19655                           fsr0h	equ	0xFEA
 19656                           fsr0l	equ	0xFE9
 19657                           wreg	equ	0xFE8
 19658                           postdec1	equ	0xFE5
 19659                           fsr1h	equ	0xFE2
 19660                           fsr1l	equ	0xFE1
 19661                           indf2	equ	0xFDF
 19662                           postinc2	equ	0xFDE
 19663                           postdec2	equ	0xFDD
 19664                           fsr2h	equ	0xFDA
 19665                           fsr2l	equ	0xFD9
 19666                           status	equ	0xFD8
 19667                           
 19668 ;; *************** function i2_change_state_to_menu_start *****************
 19669 ;; Defined at:
 19670 ;;		line 477 in file "UI.c"
 19671 ;; Parameters:    Size  Location     Type
 19672 ;;		None
 19673 ;; Auto vars:     Size  Location     Type
 19674 ;;		None
 19675 ;; Return value:  Size  Location     Type
 19676 ;;                  1    wreg      void 
 19677 ;; Registers used:
 19678 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19679 ;; Tracked objects:
 19680 ;;		On entry : 0/0
 19681 ;;		On exit  : 0/0
 19682 ;;		Unchanged: 0/0
 19683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19688 ;;Total ram usage:        0 bytes
 19689 ;; Hardware stack levels used:    1
 19690 ;; Hardware stack levels required when called:    4
 19691 ;; This function calls:
 19692 ;;		i2_lcdInst
 19693 ;;		i2_printRTC
 19694 ;;		i2_printf
 19695 ;; This function is called by:
 19696 ;;		_updateMenu
 19697 ;;		_handler
 19698 ;; This function uses a non-reentrant model
 19699 ;;
 19700                           
 19701                           	psect	text63
 19702  005528                     __ptext63:
 19703                           	opt stack 0
 19704  005528                     i2_change_state_to_menu_start:
 19705                           	opt stack 19
 19706                           
 19707                           ;UI.c: 478: cur_state = 0;
 19708                           
 19709                           ;incstack = 0
 19710  005528  0E00               	movlw	0
 19711  00552A  0100               	movlb	0	; () banked
 19712  00552C  6FED               	movwf	(_cur_state+1)& (0+255),b
 19713  00552E  0E00               	movlw	0
 19714  005530  6FEC               	movwf	_cur_state& (0+255),b
 19715                           
 19716                           ; BSR set to: 0
 19717                           ;UI.c: 480: lcdInst(0b10000000);;
 19718  005532  0E80               	movlw	128
 19719  005534  EC6D  F02B         	call	i2_lcdInst
 19720                           
 19721                           ;UI.c: 481: printRTC();
 19722  005538  ECAA  F019         	call	i2_printRTC	;wreg free
 19723                           
 19724                           ;UI.c: 482: lcdInst(0b11000000);;
 19725  00553C  0EC0               	movlw	192
 19726  00553E  EC6D  F02B         	call	i2_lcdInst
 19727                           
 19728                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 19729  005542  0E01               	movlw	low STR_30
 19730  005544  6E0D               	movwf	i2printf@f,c
 19731  005546  0EFE               	movlw	high STR_30
 19732  005548  6E0E               	movwf	i2printf@f+1,c
 19733  00554A  EC97  F00F         	call	i2_printf	;wreg free
 19734  00554E  0012               	return		;funcret
 19735  005550                     __end_ofi2_change_state_to_menu_start:
 19736                           	opt stack 0
 19737                           pclatu	equ	0xFFB
 19738                           pclath	equ	0xFFA
 19739                           tblptru	equ	0xFF8
 19740                           tblptrh	equ	0xFF7
 19741                           tblptrl	equ	0xFF6
 19742                           tablat	equ	0xFF5
 19743                           prodh	equ	0xFF4
 19744                           prodl	equ	0xFF3
 19745                           intcon	equ	0xFF2
 19746                           intcon2	equ	0xFF1
 19747                           intcon3	equ	0xFF0
 19748                           indf0	equ	0xFEF
 19749                           postinc0	equ	0xFEE
 19750                           fsr0h	equ	0xFEA
 19751                           fsr0l	equ	0xFE9
 19752                           wreg	equ	0xFE8
 19753                           postdec1	equ	0xFE5
 19754                           fsr1h	equ	0xFE2
 19755                           fsr1l	equ	0xFE1
 19756                           indf2	equ	0xFDF
 19757                           postinc2	equ	0xFDE
 19758                           postdec2	equ	0xFDD
 19759                           fsr2h	equ	0xFDA
 19760                           fsr2l	equ	0xFD9
 19761                           status	equ	0xFD8
 19762                           
 19763 ;; *************** function i2_printRTC *****************
 19764 ;; Defined at:
 19765 ;;		line 63 in file "RTC.c"
 19766 ;; Parameters:    Size  Location     Type
 19767 ;;		None
 19768 ;; Auto vars:     Size  Location     Type
 19769 ;;  printRTC       14   44[COMRAM] int [7]
 19770 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19771 ;;  printRTC        2   64[COMRAM] int 
 19772 ;;  printRTC        2   58[COMRAM] int 
 19773 ;; Return value:  Size  Location     Type
 19774 ;;                  1    wreg      void 
 19775 ;; Registers used:
 19776 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19777 ;; Tracked objects:
 19778 ;;		On entry : 0/0
 19779 ;;		On exit  : 0/0
 19780 ;;		Unchanged: 0/0
 19781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19783 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19784 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19785 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19786 ;;Total ram usage:       25 bytes
 19787 ;; Hardware stack levels used:    1
 19788 ;; Hardware stack levels required when called:    3
 19789 ;; This function calls:
 19790 ;;		i2_getRTC
 19791 ;;		i2_lcdInst
 19792 ;;		i2_printf
 19793 ;;		i2_strcpy
 19794 ;; This function is called by:
 19795 ;;		i2_change_state_to_menu_start
 19796 ;; This function uses a non-reentrant model
 19797 ;;
 19798                           
 19799                           	psect	text64
 19800  003354                     __ptext64:
 19801                           	opt stack 0
 19802  003354                     i2_printRTC:
 19803                           	opt stack 19
 19804                           
 19805                           ;RTC.c: 64: getRTC();
 19806                           
 19807                           ;incstack = 0
 19808  003354  ECC1  F025         	call	i2_getRTC	;wreg free
 19809                           
 19810                           ;RTC.c: 65: char month[] = "MMM";
 19811  003358  C14B  F03D         	movff	printRTC@F3231,i2printRTC@month
 19812  00335C  C14C  F03E         	movff	printRTC@F3231+1,i2printRTC@month+1
 19813  003360  C14D  F03F         	movff	printRTC@F3231+2,i2printRTC@month+2
 19814  003364  C14E  F040         	movff	printRTC@F3231+3,i2printRTC@month+3
 19815                           
 19816                           ;RTC.c: 66: int INT_time[7];
 19817                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19818  003368  0E00               	movlw	0
 19819  00336A  6E42               	movwf	i2printRTC@i+1,c
 19820  00336C  0E00               	movlw	0
 19821  00336E  6E41               	movwf	i2printRTC@i,c
 19822  003370  BE42               	btfsc	i2printRTC@i+1,7,c
 19823  003372  D006               	goto	i2l7220
 19824  003374  5042               	movf	i2printRTC@i+1,w,c
 19825  003376  E135               	bnz	i2l620
 19826  003378  0E07               	movlw	7
 19827  00337A  5C41               	subwf	i2printRTC@i,w,c
 19828  00337C  B0D8               	btfsc	status,0,c
 19829  00337E  D031               	goto	i2l620
 19830  003380                     i2l7220:
 19831                           
 19832                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19833  003380  0E1C               	movlw	low _time
 19834  003382  2441               	addwf	i2printRTC@i,w,c
 19835  003384  6ED9               	movwf	fsr2l,c
 19836  003386  0E01               	movlw	high _time
 19837  003388  2042               	addwfc	i2printRTC@i+1,w,c
 19838  00338A  6EDA               	movwf	fsr2h,c
 19839  00338C  50DF               	movf	indf2,w,c
 19840  00338E  6E2A               	movwf	??i2_printRTC& (0+255),c
 19841  003390  3A2A               	swapf	??i2_printRTC,f,c
 19842  003392  0E0F               	movlw	15
 19843  003394  162A               	andwf	??i2_printRTC,f,c
 19844  003396  0E0F               	movlw	15
 19845  003398  162A               	andwf	??i2_printRTC,f,c
 19846  00339A  502A               	movf	??i2_printRTC,w,c
 19847  00339C  0D0A               	mullw	10
 19848  00339E  0E1C               	movlw	low _time
 19849  0033A0  2441               	addwf	i2printRTC@i,w,c
 19850  0033A2  6ED9               	movwf	fsr2l,c
 19851  0033A4  0E01               	movlw	high _time
 19852  0033A6  2042               	addwfc	i2printRTC@i+1,w,c
 19853  0033A8  6EDA               	movwf	fsr2h,c
 19854  0033AA  50DF               	movf	indf2,w,c
 19855  0033AC  0B0F               	andlw	15
 19856  0033AE  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19857  0033B0  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19858  0033B2  50F3               	movf	prodl,w,c
 19859  0033B4  262B               	addwf	??i2_printRTC+1,f,c
 19860  0033B6  50F4               	movf	prodh,w,c
 19861  0033B8  222C               	addwfc	??i2_printRTC+2,f,c
 19862  0033BA  90D8               	bcf	status,0,c
 19863  0033BC  3441               	rlcf	i2printRTC@i,w,c
 19864  0033BE  6ED9               	movwf	fsr2l,c
 19865  0033C0  3442               	rlcf	i2printRTC@i+1,w,c
 19866  0033C2  6EDA               	movwf	fsr2h,c
 19867  0033C4  0E2D               	movlw	low i2printRTC@INT_time
 19868  0033C6  26D9               	addwf	fsr2l,f,c
 19869  0033C8  0E00               	movlw	high i2printRTC@INT_time
 19870  0033CA  22DA               	addwfc	fsr2h,f,c
 19871  0033CC  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19872  0033D0  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19873  0033D4  4A41               	infsnz	i2printRTC@i,f,c
 19874  0033D6  2A42               	incf	i2printRTC@i+1,f,c
 19875  0033D8  BE42               	btfsc	i2printRTC@i+1,7,c
 19876  0033DA  D7D2               	goto	i2l7220
 19877  0033DC  5042               	movf	i2printRTC@i+1,w,c
 19878  0033DE  E101               	bnz	i2u571_40
 19879  0033E0  D7CB               	goto	L18
 19880  0033E2                     i2u571_40:
 19881  0033E2                     i2l620:
 19882                           
 19883                           ;RTC.c: 69: }
 19884                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19885  0033E2  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19886  0033E6  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19887                           
 19888                           ;RTC.c: 72: switch(RTC_month){
 19889  0033EA  D084               	goto	i2l7252
 19890  0033EC                     i2l7226:
 19891                           
 19892                           ;RTC.c: 74: strcpy(month, "JAN");
 19893  0033EC  0E3D               	movlw	low i2printRTC@month
 19894  0033EE  6E01               	movwf	i2strcpy@to,c
 19895  0033F0  0E00               	movlw	high i2printRTC@month
 19896  0033F2  6E02               	movwf	i2strcpy@to+1,c
 19897  0033F4  0EDA               	movlw	low STR_8
 19898  0033F6  6E03               	movwf	i2strcpy@from,c
 19899  0033F8  0EFF               	movlw	high STR_8
 19900  0033FA  6E04               	movwf	i2strcpy@from+1,c
 19901  0033FC  EC08  F029         	call	i2_strcpy	;wreg free
 19902                           
 19903                           ;RTC.c: 75: break;
 19904  003400  D0A6               	goto	i2l7254
 19905  003402                     i2l7228:
 19906                           
 19907                           ;RTC.c: 77: strcpy(month, "FEB");
 19908  003402  0E3D               	movlw	low i2printRTC@month
 19909  003404  6E01               	movwf	i2strcpy@to,c
 19910  003406  0E00               	movlw	high i2printRTC@month
 19911  003408  6E02               	movwf	i2strcpy@to+1,c
 19912  00340A  0ECA               	movlw	low STR_9
 19913  00340C  6E03               	movwf	i2strcpy@from,c
 19914  00340E  0EFF               	movlw	high STR_9
 19915  003410  6E04               	movwf	i2strcpy@from+1,c
 19916  003412  EC08  F029         	call	i2_strcpy	;wreg free
 19917                           
 19918                           ;RTC.c: 78: break;
 19919  003416  D09B               	goto	i2l7254
 19920  003418                     i2l7230:
 19921                           
 19922                           ;RTC.c: 80: strcpy(month, "MAR");
 19923  003418  0E3D               	movlw	low i2printRTC@month
 19924  00341A  6E01               	movwf	i2strcpy@to,c
 19925  00341C  0E00               	movlw	high i2printRTC@month
 19926  00341E  6E02               	movwf	i2strcpy@to+1,c
 19927  003420  0EE6               	movlw	low STR_10
 19928  003422  6E03               	movwf	i2strcpy@from,c
 19929  003424  0EFF               	movlw	high STR_10
 19930  003426  6E04               	movwf	i2strcpy@from+1,c
 19931  003428  EC08  F029         	call	i2_strcpy	;wreg free
 19932                           
 19933                           ;RTC.c: 81: break;
 19934  00342C  D090               	goto	i2l7254
 19935  00342E                     i2l7232:
 19936                           
 19937                           ;RTC.c: 83: strcpy(month, "APR");
 19938  00342E  0E3D               	movlw	low i2printRTC@month
 19939  003430  6E01               	movwf	i2strcpy@to,c
 19940  003432  0E00               	movlw	high i2printRTC@month
 19941  003434  6E02               	movwf	i2strcpy@to+1,c
 19942  003436  0EEA               	movlw	low STR_11
 19943  003438  6E03               	movwf	i2strcpy@from,c
 19944  00343A  0EFF               	movlw	high STR_11
 19945  00343C  6E04               	movwf	i2strcpy@from+1,c
 19946  00343E  EC08  F029         	call	i2_strcpy	;wreg free
 19947                           
 19948                           ;RTC.c: 84: break;
 19949  003442  D085               	goto	i2l7254
 19950  003444                     i2l7234:
 19951                           
 19952                           ;RTC.c: 86: strcpy(month, "MAY");
 19953  003444  0E3D               	movlw	low i2printRTC@month
 19954  003446  6E01               	movwf	i2strcpy@to,c
 19955  003448  0E00               	movlw	high i2printRTC@month
 19956  00344A  6E02               	movwf	i2strcpy@to+1,c
 19957  00344C  0EFA               	movlw	low STR_12
 19958  00344E  6E03               	movwf	i2strcpy@from,c
 19959  003450  0EFF               	movlw	high STR_12
 19960  003452  6E04               	movwf	i2strcpy@from+1,c
 19961  003454  EC08  F029         	call	i2_strcpy	;wreg free
 19962                           
 19963                           ;RTC.c: 87: break;
 19964  003458  D07A               	goto	i2l7254
 19965  00345A                     i2l7236:
 19966                           
 19967                           ;RTC.c: 89: strcpy(month, "JUN");
 19968  00345A  0E3D               	movlw	low i2printRTC@month
 19969  00345C  6E01               	movwf	i2strcpy@to,c
 19970  00345E  0E00               	movlw	high i2printRTC@month
 19971  003460  6E02               	movwf	i2strcpy@to+1,c
 19972  003462  0EDE               	movlw	low STR_13
 19973  003464  6E03               	movwf	i2strcpy@from,c
 19974  003466  0EFF               	movlw	high STR_13
 19975  003468  6E04               	movwf	i2strcpy@from+1,c
 19976  00346A  EC08  F029         	call	i2_strcpy	;wreg free
 19977                           
 19978                           ;RTC.c: 90: break;
 19979  00346E  D06F               	goto	i2l7254
 19980  003470                     i2l7238:
 19981                           
 19982                           ;RTC.c: 92: strcpy(month, "JUL");
 19983  003470  0E3D               	movlw	low i2printRTC@month
 19984  003472  6E01               	movwf	i2strcpy@to,c
 19985  003474  0E00               	movlw	high i2printRTC@month
 19986  003476  6E02               	movwf	i2strcpy@to+1,c
 19987  003478  0ED6               	movlw	low STR_14
 19988  00347A  6E03               	movwf	i2strcpy@from,c
 19989  00347C  0EFF               	movlw	high STR_14
 19990  00347E  6E04               	movwf	i2strcpy@from+1,c
 19991  003480  EC08  F029         	call	i2_strcpy	;wreg free
 19992                           
 19993                           ;RTC.c: 93: break;
 19994  003484  D064               	goto	i2l7254
 19995  003486                     i2l7240:
 19996                           
 19997                           ;RTC.c: 95: strcpy(month, "AUG");
 19998  003486  0E3D               	movlw	low i2printRTC@month
 19999  003488  6E01               	movwf	i2strcpy@to,c
 20000  00348A  0E00               	movlw	high i2printRTC@month
 20001  00348C  6E02               	movwf	i2strcpy@to+1,c
 20002  00348E  0ED2               	movlw	low STR_15
 20003  003490  6E03               	movwf	i2strcpy@from,c
 20004  003492  0EFF               	movlw	high STR_15
 20005  003494  6E04               	movwf	i2strcpy@from+1,c
 20006  003496  EC08  F029         	call	i2_strcpy	;wreg free
 20007                           
 20008                           ;RTC.c: 96: break;
 20009  00349A  D059               	goto	i2l7254
 20010  00349C                     i2l7242:
 20011                           
 20012                           ;RTC.c: 98: strcpy(month, "SEP");
 20013  00349C  0E3D               	movlw	low i2printRTC@month
 20014  00349E  6E01               	movwf	i2strcpy@to,c
 20015  0034A0  0E00               	movlw	high i2printRTC@month
 20016  0034A2  6E02               	movwf	i2strcpy@to+1,c
 20017  0034A4  0EE2               	movlw	low STR_16
 20018  0034A6  6E03               	movwf	i2strcpy@from,c
 20019  0034A8  0EFF               	movlw	high STR_16
 20020  0034AA  6E04               	movwf	i2strcpy@from+1,c
 20021  0034AC  EC08  F029         	call	i2_strcpy	;wreg free
 20022                           
 20023                           ;RTC.c: 99: break;
 20024  0034B0  D04E               	goto	i2l7254
 20025  0034B2                     i2l7244:
 20026                           
 20027                           ;RTC.c: 101: strcpy(month, "OCT");
 20028  0034B2  0E3D               	movlw	low i2printRTC@month
 20029  0034B4  6E01               	movwf	i2strcpy@to,c
 20030  0034B6  0E00               	movlw	high i2printRTC@month
 20031  0034B8  6E02               	movwf	i2strcpy@to+1,c
 20032  0034BA  0EF2               	movlw	low STR_17
 20033  0034BC  6E03               	movwf	i2strcpy@from,c
 20034  0034BE  0EFF               	movlw	high STR_17
 20035  0034C0  6E04               	movwf	i2strcpy@from+1,c
 20036  0034C2  EC08  F029         	call	i2_strcpy	;wreg free
 20037                           
 20038                           ;RTC.c: 102: break;
 20039  0034C6  D043               	goto	i2l7254
 20040  0034C8                     i2l7246:
 20041                           
 20042                           ;RTC.c: 104: strcpy(month, "NOV");
 20043  0034C8  0E3D               	movlw	low i2printRTC@month
 20044  0034CA  6E01               	movwf	i2strcpy@to,c
 20045  0034CC  0E00               	movlw	high i2printRTC@month
 20046  0034CE  6E02               	movwf	i2strcpy@to+1,c
 20047  0034D0  0EF6               	movlw	low STR_18
 20048  0034D2  6E03               	movwf	i2strcpy@from,c
 20049  0034D4  0EFF               	movlw	high STR_18
 20050  0034D6  6E04               	movwf	i2strcpy@from+1,c
 20051  0034D8  EC08  F029         	call	i2_strcpy	;wreg free
 20052                           
 20053                           ;RTC.c: 105: break;
 20054  0034DC  D038               	goto	i2l7254
 20055  0034DE                     i2l7248:
 20056                           
 20057                           ;RTC.c: 107: strcpy(month, "DEC");
 20058  0034DE  0E3D               	movlw	low i2printRTC@month
 20059  0034E0  6E01               	movwf	i2strcpy@to,c
 20060  0034E2  0E00               	movlw	high i2printRTC@month
 20061  0034E4  6E02               	movwf	i2strcpy@to+1,c
 20062  0034E6  0ECE               	movlw	low STR_19
 20063  0034E8  6E03               	movwf	i2strcpy@from,c
 20064  0034EA  0EFF               	movlw	high STR_19
 20065  0034EC  6E04               	movwf	i2strcpy@from+1,c
 20066  0034EE  EC08  F029         	call	i2_strcpy	;wreg free
 20067                           
 20068                           ;RTC.c: 109: }
 20069                           
 20070                           ;RTC.c: 108: break;
 20071  0034F2  D02D               	goto	i2l7254
 20072  0034F4                     i2l7252:
 20073  0034F4  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 20074  0034F8  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 20075                           
 20076                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20077                           ; Switch size 1, requested type "space"
 20078                           ; Number of cases is 1, Range of values is 0 to 0
 20079                           ; switch strategies available:
 20080                           ; Name         Instructions Cycles
 20081                           ; simple_byte            4     3 (average)
 20082                           ;	Chosen strategy is simple_byte
 20083  0034FC  502B               	movf	??i2_printRTC+1,w,c
 20084  0034FE  0A00               	xorlw	0	; case 0
 20085  003500  A4D8               	btfss	status,2,c
 20086  003502  D025               	goto	i2l7254
 20087                           
 20088                           ; Switch size 1, requested type "space"
 20089                           ; Number of cases is 12, Range of values is 1 to 12
 20090                           ; switch strategies available:
 20091                           ; Name         Instructions Cycles
 20092                           ; simple_byte           37    19 (average)
 20093                           ;	Chosen strategy is simple_byte
 20094  003504  502A               	movf	??i2_printRTC,w,c
 20095  003506  0A01               	xorlw	1	; case 1
 20096  003508  B4D8               	btfsc	status,2,c
 20097  00350A  D770               	goto	i2l7226
 20098  00350C  0A03               	xorlw	3	; case 2
 20099  00350E  B4D8               	btfsc	status,2,c
 20100  003510  D778               	goto	i2l7228
 20101  003512  0A01               	xorlw	1	; case 3
 20102  003514  B4D8               	btfsc	status,2,c
 20103  003516  D780               	goto	i2l7230
 20104  003518  0A07               	xorlw	7	; case 4
 20105  00351A  B4D8               	btfsc	status,2,c
 20106  00351C  D788               	goto	i2l7232
 20107  00351E  0A01               	xorlw	1	; case 5
 20108  003520  B4D8               	btfsc	status,2,c
 20109  003522  D790               	goto	i2l7234
 20110  003524  0A03               	xorlw	3	; case 6
 20111  003526  B4D8               	btfsc	status,2,c
 20112  003528  D798               	goto	i2l7236
 20113  00352A  0A01               	xorlw	1	; case 7
 20114  00352C  B4D8               	btfsc	status,2,c
 20115  00352E  D7A0               	goto	i2l7238
 20116  003530  0A0F               	xorlw	15	; case 8
 20117  003532  B4D8               	btfsc	status,2,c
 20118  003534  D7A8               	goto	i2l7240
 20119  003536  0A01               	xorlw	1	; case 9
 20120  003538  B4D8               	btfsc	status,2,c
 20121  00353A  D7B0               	goto	i2l7242
 20122  00353C  0A03               	xorlw	3	; case 10
 20123  00353E  B4D8               	btfsc	status,2,c
 20124  003540  D7B8               	goto	i2l7244
 20125  003542  0A01               	xorlw	1	; case 11
 20126  003544  B4D8               	btfsc	status,2,c
 20127  003546  D7C0               	goto	i2l7246
 20128  003548  0A07               	xorlw	7	; case 12
 20129  00354A  B4D8               	btfsc	status,2,c
 20130  00354C  D7C8               	goto	i2l7248
 20131  00354E                     i2l7254:
 20132                           
 20133                           ;RTC.c: 110: lcdInst(0b10000000);;
 20134  00354E  0E80               	movlw	128
 20135  003550  EC6D  F02B         	call	i2_lcdInst
 20136                           
 20137                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 20138  003554  0EBE               	movlw	low STR_21
 20139  003556  6E0D               	movwf	i2printf@f,c
 20140  003558  0EFA               	movlw	high STR_21
 20141  00355A  6E0E               	movwf	i2printf@f+1,c
 20142  00355C  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 20143  003560  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 20144  003564  0E3D               	movlw	low i2printRTC@month
 20145  003566  6E11               	movwf	?i2_printf+4,c
 20146  003568  0E00               	movlw	high i2printRTC@month
 20147  00356A  6E12               	movwf	?i2_printf+5,c
 20148  00356C  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 20149  003570  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 20150  003574  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 20151  003578  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 20152  00357C  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 20153  003580  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 20154  003584  EC97  F00F         	call	i2_printf	;wreg free
 20155  003588  0012               	return		;funcret
 20156  00358A                     __end_ofi2_printRTC:
 20157                           	opt stack 0
 20158                           pclatu	equ	0xFFB
 20159                           pclath	equ	0xFFA
 20160                           tblptru	equ	0xFF8
 20161                           tblptrh	equ	0xFF7
 20162                           tblptrl	equ	0xFF6
 20163                           tablat	equ	0xFF5
 20164                           prodh	equ	0xFF4
 20165                           prodl	equ	0xFF3
 20166                           intcon	equ	0xFF2
 20167                           intcon2	equ	0xFF1
 20168                           intcon3	equ	0xFF0
 20169                           indf0	equ	0xFEF
 20170                           postinc0	equ	0xFEE
 20171                           fsr0h	equ	0xFEA
 20172                           fsr0l	equ	0xFE9
 20173                           wreg	equ	0xFE8
 20174                           postdec1	equ	0xFE5
 20175                           fsr1h	equ	0xFE2
 20176                           fsr1l	equ	0xFE1
 20177                           indf2	equ	0xFDF
 20178                           postinc2	equ	0xFDE
 20179                           postdec2	equ	0xFDD
 20180                           fsr2h	equ	0xFDA
 20181                           fsr2l	equ	0xFD9
 20182                           status	equ	0xFD8
 20183                           
 20184 ;; *************** function i2_strcpy *****************
 20185 ;; Defined at:
 20186 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 20187 ;; Parameters:    Size  Location     Type
 20188 ;;  to              2    0[COMRAM] PTR unsigned char 
 20189 ;;		 -> printRTC@month(4), UI@month(4), 
 20190 ;;  from            2    2[COMRAM] PTR const unsigned char 
 20191 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 20192 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 20193 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 20194 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 20195 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 20196 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 20197 ;;		 -> STR_8(4), 
 20198 ;; Auto vars:     Size  Location     Type
 20199 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 20200 ;;		 -> printRTC@month(4), UI@month(4), 
 20201 ;; Return value:  Size  Location     Type
 20202 ;;                  2    0[COMRAM] PTR unsigned char 
 20203 ;; Registers used:
 20204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20205 ;; Tracked objects:
 20206 ;;		On entry : 0/0
 20207 ;;		On exit  : 0/0
 20208 ;;		Unchanged: 0/0
 20209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20210 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20213 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20214 ;;Total ram usage:        6 bytes
 20215 ;; Hardware stack levels used:    1
 20216 ;; This function calls:
 20217 ;;		Nothing
 20218 ;; This function is called by:
 20219 ;;		i2_printRTC
 20220 ;; This function uses a non-reentrant model
 20221 ;;
 20222                           
 20223                           	psect	text65
 20224  005210                     __ptext65:
 20225                           	opt stack 0
 20226  005210                     i2_strcpy:
 20227                           	opt stack 21
 20228                           
 20229                           ;incstack = 0
 20230  005210  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 20231  005214  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 20232  005218  D004               	goto	i2l6858
 20233  00521A                     i2l6856:
 20234  00521A  4A05               	infsnz	i2strcpy@cp,f,c
 20235  00521C  2A06               	incf	i2strcpy@cp+1,f,c
 20236  00521E  4A03               	infsnz	i2strcpy@from,f,c
 20237  005220  2A04               	incf	i2strcpy@from+1,f,c
 20238  005222                     i2l6858:
 20239  005222  C003  FFF6         	movff	i2strcpy@from,tblptrl
 20240  005226  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 20241  00522A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20242  00522A  6AF8               	clrf	tblptru,c
 20243  00522C                     	endif
 20244  00522C                     	if	0	;tblptru may be non-zero
 20245  00522C                     	endif
 20246  00522C  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 20247  005230  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 20248  005234  0008               	tblrd		*
 20249  005236  CFF5 FFDF          	movff	tablat,indf2
 20250  00523A  50DF               	movf	indf2,w,c
 20251  00523C  B4D8               	btfsc	status,2,c
 20252  00523E  0012               	return	
 20253  005240  D7EC               	goto	i2l6856
 20254  005242                     __end_ofi2_strcpy:
 20255                           	opt stack 0
 20256                           pclatu	equ	0xFFB
 20257                           pclath	equ	0xFFA
 20258                           tblptru	equ	0xFF8
 20259                           tblptrh	equ	0xFF7
 20260                           tblptrl	equ	0xFF6
 20261                           tablat	equ	0xFF5
 20262                           prodh	equ	0xFF4
 20263                           prodl	equ	0xFF3
 20264                           intcon	equ	0xFF2
 20265                           intcon2	equ	0xFF1
 20266                           intcon3	equ	0xFF0
 20267                           indf0	equ	0xFEF
 20268                           postinc0	equ	0xFEE
 20269                           fsr0h	equ	0xFEA
 20270                           fsr0l	equ	0xFE9
 20271                           wreg	equ	0xFE8
 20272                           postdec1	equ	0xFE5
 20273                           fsr1h	equ	0xFE2
 20274                           fsr1l	equ	0xFE1
 20275                           indf2	equ	0xFDF
 20276                           postinc2	equ	0xFDE
 20277                           postdec2	equ	0xFDD
 20278                           fsr2h	equ	0xFDA
 20279                           fsr2l	equ	0xFD9
 20280                           status	equ	0xFD8
 20281                           
 20282 ;; *************** function _inputHandler *****************
 20283 ;; Defined at:
 20284 ;;		line 375 in file "UI.c"
 20285 ;; Parameters:    Size  Location     Type
 20286 ;;		None
 20287 ;; Auto vars:     Size  Location     Type
 20288 ;;		None
 20289 ;; Return value:  Size  Location     Type
 20290 ;;                  2   41[COMRAM] int 
 20291 ;; Registers used:
 20292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20293 ;; Tracked objects:
 20294 ;;		On entry : 0/0
 20295 ;;		On exit  : 0/0
 20296 ;;		Unchanged: 0/0
 20297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20300 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20301 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20302 ;;Total ram usage:        4 bytes
 20303 ;; Hardware stack levels used:    1
 20304 ;; Hardware stack levels required when called:    4
 20305 ;; This function calls:
 20306 ;;		_change_state_to_logs_11
 20307 ;;		_change_state_to_logs_12
 20308 ;;		_change_state_to_logs_22
 20309 ;;		_change_state_to_logs_23
 20310 ;;		_change_state_to_logs_33
 20311 ;;		_change_state_to_logs_34
 20312 ;;		_change_state_to_menu_11
 20313 ;;		_change_state_to_menu_23
 20314 ;;		i2_change_state_to_menu_12
 20315 ;;		i2_change_state_to_menu_22
 20316 ;; This function is called by:
 20317 ;;		_updateMenu
 20318 ;; This function uses a non-reentrant model
 20319 ;;
 20320                           
 20321                           	psect	text66
 20322  00377C                     __ptext66:
 20323                           	opt stack 0
 20324  00377C                     _inputHandler:
 20325                           	opt stack 18
 20326                           
 20327                           ;UI.c: 380: if(firstboot){
 20328                           
 20329                           ;incstack = 0
 20330  00377C  0101               	movlb	1	; () banked
 20331  00377E  513B               	movf	_firstboot& (0+255),w,b
 20332  003780  0101               	movlb	1	; () banked
 20333  003782  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 20334  003784  B4D8               	btfsc	status,2,c
 20335  003786  D00C               	goto	i2l7322
 20336                           
 20337                           ; BSR set to: 1
 20338                           ;UI.c: 381: change_state_to_menu_11();
 20339  003788  EC81  F029         	call	_change_state_to_menu_11	;wreg free
 20340                           
 20341                           ;UI.c: 382: firstboot = 0;
 20342  00378C  0E00               	movlw	0
 20343  00378E  0101               	movlb	1	; () banked
 20344  003790  6F3C               	movwf	(_firstboot+1)& (0+255),b
 20345  003792  0E00               	movlw	0
 20346  003794  6F3B               	movwf	_firstboot& (0+255),b
 20347                           
 20348                           ; BSR set to: 1
 20349                           ;UI.c: 383: return 0;
 20350  003796  0E00               	movlw	0
 20351  003798  6E2B               	movwf	?_inputHandler+1,c
 20352  00379A  0E00               	movlw	0
 20353  00379C  6E2A               	movwf	?_inputHandler,c
 20354                           
 20355                           ; BSR set to: 1
 20356  00379E  0012               	return	
 20357  0037A0                     i2l7322:
 20358                           
 20359                           ; BSR set to: 1
 20360                           ;UI.c: 384: }
 20361                           ;UI.c: 385: if (logstate){
 20362  0037A0  0100               	movlb	0	; () banked
 20363  0037A2  51F8               	movf	_logstate& (0+255),w,b
 20364  0037A4  0100               	movlb	0	; () banked
 20365  0037A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 20366  0037A8  B4D8               	btfsc	status,2,c
 20367  0037AA  D0C7               	goto	i2l7440
 20368                           
 20369                           ; BSR set to: 0
 20370                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 20371  0037AC  0E43               	movlw	67
 20372  0037AE  187D               	xorwf	_input,w,c	;volatile
 20373  0037B0  A4D8               	btfss	status,2,c
 20374  0037B2  D012               	goto	i2l7340
 20375                           
 20376                           ; BSR set to: 0
 20377  0037B4  B281               	btfsc	3969,1,c	;volatile
 20378  0037B6  D009               	goto	i2l7332
 20379  0037B8  D00F               	goto	i2l7340
 20380  0037BA                     i2l7330:
 20381                           
 20382                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 20383  0037BA  0E68               	movlw	104
 20384  0037BC  6E2C               	movwf	??_inputHandler& (0+255),c
 20385  0037BE  0EE4               	movlw	228
 20386  0037C0                     i2u1072_47:
 20387  0037C0  2EE8               	decfsz	wreg,f,c
 20388  0037C2  D7FE               	bra	i2u1072_47
 20389  0037C4  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 20390  0037C6  D7FC               	bra	i2u1072_47
 20391  0037C8  D000               	nop2	
 20392  0037CA                     i2l7332:
 20393  0037CA  B281               	btfsc	3969,1,c	;volatile
 20394  0037CC  D7F6               	goto	i2l7330
 20395  0037CE                     i2l7334:
 20396                           
 20397                           ;UI.c: 390: }
 20398                           ;UI.c: 391: return 0;
 20399  0037CE  0E00               	movlw	0
 20400  0037D0  6E2B               	movwf	?_inputHandler+1,c
 20401  0037D2  0E00               	movlw	0
 20402  0037D4  6E2A               	movwf	?_inputHandler,c
 20403  0037D6  0012               	return	
 20404  0037D8                     i2l7340:
 20405                           
 20406                           ;UI.c: 393: else if (input == 'D'){
 20407  0037D8  0E44               	movlw	68
 20408  0037DA  187D               	xorwf	_input,w,c	;volatile
 20409  0037DC  A4D8               	btfss	status,2,c
 20410  0037DE  D7F7               	goto	i2l7334
 20411                           
 20412                           ;UI.c: 395: logstate = 0;
 20413  0037E0  0E00               	movlw	0
 20414  0037E2  0100               	movlb	0	; () banked
 20415  0037E4  6FF9               	movwf	(_logstate+1)& (0+255),b
 20416  0037E6  0E00               	movlw	0
 20417  0037E8  6FF8               	movwf	_logstate& (0+255),b
 20418                           
 20419                           ;UI.c: 396: switch(cur_state){
 20420  0037EA  D012               	goto	i2l7358
 20421  0037EC                     i2l7344:
 20422                           
 20423                           ;UI.c: 398: change_state_to_logs_11();
 20424  0037EC  ECF9  F029         	call	_change_state_to_logs_11	;wreg free
 20425                           
 20426                           ;UI.c: 399: break;
 20427  0037F0  D7EE               	goto	i2l7334
 20428  0037F2                     i2l7346:
 20429                           
 20430                           ;UI.c: 401: change_state_to_logs_12();
 20431  0037F2  ECE1  F029         	call	_change_state_to_logs_12	;wreg free
 20432                           
 20433                           ;UI.c: 402: break;
 20434  0037F6  D7EB               	goto	i2l7334
 20435  0037F8                     i2l7348:
 20436                           
 20437                           ;UI.c: 404: change_state_to_logs_22();
 20438  0037F8  ECC9  F029         	call	_change_state_to_logs_22	;wreg free
 20439                           
 20440                           ;UI.c: 405: break;
 20441  0037FC  D7E8               	goto	i2l7334
 20442  0037FE                     i2l7350:
 20443                           
 20444                           ;UI.c: 407: change_state_to_logs_23();
 20445  0037FE  EC28  F02A         	call	_change_state_to_logs_23	;wreg free
 20446                           
 20447                           ;UI.c: 408: break;
 20448  003802  D7E5               	goto	i2l7334
 20449  003804                     i2l7352:
 20450                           
 20451                           ;UI.c: 410: change_state_to_logs_33();
 20452  003804  ECB1  F029         	call	_change_state_to_logs_33	;wreg free
 20453                           
 20454                           ;UI.c: 411: break;
 20455  003808  D7E2               	goto	i2l7334
 20456  00380A                     i2l7354:
 20457                           
 20458                           ;UI.c: 413: change_state_to_logs_34();
 20459  00380A  EC99  F029         	call	_change_state_to_logs_34	;wreg free
 20460                           
 20461                           ;UI.c: 415: }
 20462                           
 20463                           ;UI.c: 414: break;
 20464  00380E  D7DF               	goto	i2l7334
 20465  003810                     i2l7358:
 20466  003810  C0EC  F02C         	movff	_cur_state,??_inputHandler
 20467  003814  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 20468                           
 20469                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20470                           ; Switch size 1, requested type "space"
 20471                           ; Number of cases is 2, Range of values is 3 to 4
 20472                           ; switch strategies available:
 20473                           ; Name         Instructions Cycles
 20474                           ; simple_byte            7     4 (average)
 20475                           ;	Chosen strategy is simple_byte
 20476  003818  502D               	movf	??_inputHandler+1,w,c
 20477  00381A  0A03               	xorlw	3	; case 3
 20478  00381C  B4D8               	btfsc	status,2,c
 20479  00381E  D004               	goto	i2l10346
 20480  003820  0A07               	xorlw	7	; case 4
 20481  003822  B4D8               	btfsc	status,2,c
 20482  003824  D00F               	goto	i2l10348
 20483  003826  D7D3               	goto	i2l7334
 20484  003828                     i2l10346:
 20485                           
 20486                           ; Switch size 1, requested type "space"
 20487                           ; Number of cases is 4, Range of values is 243 to 255
 20488                           ; switch strategies available:
 20489                           ; Name         Instructions Cycles
 20490                           ; simple_byte           13     7 (average)
 20491                           ;	Chosen strategy is simple_byte
 20492  003828  502C               	movf	??_inputHandler,w,c
 20493  00382A  0AF3               	xorlw	243	; case 243
 20494  00382C  B4D8               	btfsc	status,2,c
 20495  00382E  D7DE               	goto	i2l7344
 20496  003830  0A07               	xorlw	7	; case 244
 20497  003832  B4D8               	btfsc	status,2,c
 20498  003834  D7DE               	goto	i2l7346
 20499  003836  0A0A               	xorlw	10	; case 254
 20500  003838  B4D8               	btfsc	status,2,c
 20501  00383A  D7DE               	goto	i2l7348
 20502  00383C  0A01               	xorlw	1	; case 255
 20503  00383E  B4D8               	btfsc	status,2,c
 20504  003840  D7DE               	goto	i2l7350
 20505  003842  D7C5               	goto	i2l7334
 20506  003844                     i2l10348:
 20507                           
 20508                           ; Switch size 1, requested type "space"
 20509                           ; Number of cases is 2, Range of values is 9 to 10
 20510                           ; switch strategies available:
 20511                           ; Name         Instructions Cycles
 20512                           ; simple_byte            7     4 (average)
 20513                           ;	Chosen strategy is simple_byte
 20514  003844  502C               	movf	??_inputHandler,w,c
 20515  003846  0A09               	xorlw	9	; case 9
 20516  003848  B4D8               	btfsc	status,2,c
 20517  00384A  D7DC               	goto	i2l7352
 20518  00384C  0A03               	xorlw	3	; case 10
 20519  00384E  B4D8               	btfsc	status,2,c
 20520  003850  D7DC               	goto	i2l7354
 20521  003852  D7BD               	goto	i2l7334
 20522  003854                     i2l7370:
 20523                           
 20524                           ;UI.c: 425: if(cur_state == 11){
 20525  003854  0E0B               	movlw	11
 20526  003856  0100               	movlb	0	; () banked
 20527  003858  19EC               	xorwf	_cur_state& (0+255),w,b
 20528  00385A  0100               	movlb	0	; () banked
 20529  00385C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20530  00385E  A4D8               	btfss	status,2,c
 20531  003860  D005               	goto	i2l7378
 20532                           
 20533                           ; BSR set to: 0
 20534                           ;UI.c: 426: return 0;
 20535  003862  0E00               	movlw	0
 20536  003864  6E2B               	movwf	?_inputHandler+1,c
 20537  003866  0E00               	movlw	0
 20538  003868  6E2A               	movwf	?_inputHandler,c
 20539                           
 20540                           ; BSR set to: 0
 20541  00386A  0012               	return	
 20542  00386C                     i2l7378:
 20543                           
 20544                           ; BSR set to: 0
 20545                           ;UI.c: 428: else{
 20546                           ;UI.c: 429: change_state_to_menu_11();
 20547  00386C  EC81  F029         	call	_change_state_to_menu_11	;wreg free
 20548                           
 20549                           ;UI.c: 430: }
 20550                           ;UI.c: 431: return 0;
 20551  003870  0E00               	movlw	0
 20552  003872  6E2B               	movwf	?_inputHandler+1,c
 20553  003874  0E00               	movlw	0
 20554  003876  6E2A               	movwf	?_inputHandler,c
 20555  003878  0012               	return	
 20556  00387A                     i2l7384:
 20557                           
 20558                           ;UI.c: 433: if(cur_state == 22 | cur_state == 12){
 20559  00387A  0E16               	movlw	22
 20560  00387C  0100               	movlb	0	; () banked
 20561  00387E  19EC               	xorwf	_cur_state& (0+255),w,b
 20562  003880  0100               	movlb	0	; () banked
 20563  003882  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20564  003884  B4D8               	btfsc	status,2,c
 20565  003886  D007               	goto	i2l7388
 20566                           
 20567                           ; BSR set to: 0
 20568  003888  0E0C               	movlw	12
 20569  00388A  0100               	movlb	0	; () banked
 20570  00388C  19EC               	xorwf	_cur_state& (0+255),w,b
 20571  00388E  0100               	movlb	0	; () banked
 20572  003890  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20573  003892  A4D8               	btfss	status,2,c
 20574  003894  D005               	goto	i2l7394
 20575  003896                     i2l7388:
 20576                           
 20577                           ; BSR set to: 0
 20578                           ;UI.c: 434: return 0;
 20579  003896  0E00               	movlw	0
 20580  003898  6E2B               	movwf	?_inputHandler+1,c
 20581  00389A  0E00               	movlw	0
 20582  00389C  6E2A               	movwf	?_inputHandler,c
 20583                           
 20584                           ; BSR set to: 0
 20585  00389E  0012               	return	
 20586  0038A0                     i2l7394:
 20587                           
 20588                           ; BSR set to: 0
 20589                           ;UI.c: 436: else if(cur_state == 23){
 20590  0038A0  0E17               	movlw	23
 20591  0038A2  0100               	movlb	0	; () banked
 20592  0038A4  19EC               	xorwf	_cur_state& (0+255),w,b
 20593  0038A6  0100               	movlb	0	; () banked
 20594  0038A8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20595  0038AA  A4D8               	btfss	status,2,c
 20596  0038AC  D003               	goto	i2l7398
 20597                           
 20598                           ; BSR set to: 0
 20599                           ;UI.c: 437: change_state_to_menu_22();
 20600  0038AE  EC39  F029         	call	i2_change_state_to_menu_22	;wreg free
 20601                           
 20602                           ;UI.c: 438: }
 20603  0038B2  D002               	goto	i2l7400
 20604  0038B4                     i2l7398:
 20605                           
 20606                           ;UI.c: 439: else{
 20607                           ;UI.c: 440: change_state_to_menu_12();
 20608  0038B4  EC51  F029         	call	i2_change_state_to_menu_12	;wreg free
 20609  0038B8                     i2l7400:
 20610                           
 20611                           ;UI.c: 441: }
 20612                           ;UI.c: 442: return 0;
 20613  0038B8  0E00               	movlw	0
 20614  0038BA  6E2B               	movwf	?_inputHandler+1,c
 20615  0038BC  0E00               	movlw	0
 20616  0038BE  6E2A               	movwf	?_inputHandler,c
 20617  0038C0  0012               	return	
 20618  0038C2                     i2l7404:
 20619                           
 20620                           ;UI.c: 444: if(cur_state == 23){
 20621  0038C2  0E17               	movlw	23
 20622  0038C4  0100               	movlb	0	; () banked
 20623  0038C6  19EC               	xorwf	_cur_state& (0+255),w,b
 20624  0038C8  0100               	movlb	0	; () banked
 20625  0038CA  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20626  0038CC  A4D8               	btfss	status,2,c
 20627  0038CE  D005               	goto	i2l7412
 20628                           
 20629                           ; BSR set to: 0
 20630                           ;UI.c: 445: return 0;
 20631  0038D0  0E00               	movlw	0
 20632  0038D2  6E2B               	movwf	?_inputHandler+1,c
 20633  0038D4  0E00               	movlw	0
 20634  0038D6  6E2A               	movwf	?_inputHandler,c
 20635                           
 20636                           ; BSR set to: 0
 20637  0038D8  0012               	return	
 20638  0038DA                     i2l7412:
 20639                           
 20640                           ; BSR set to: 0
 20641                           ;UI.c: 447: else{
 20642                           ;UI.c: 448: change_state_to_menu_23();
 20643  0038DA  EC69  F029         	call	_change_state_to_menu_23	;wreg free
 20644                           
 20645                           ;UI.c: 449: }
 20646                           ;UI.c: 450: return 0;
 20647  0038DE  0E00               	movlw	0
 20648  0038E0  6E2B               	movwf	?_inputHandler+1,c
 20649  0038E2  0E00               	movlw	0
 20650  0038E4  6E2A               	movwf	?_inputHandler,c
 20651  0038E6  0012               	return	
 20652  0038E8                     i2l7418:
 20653                           
 20654                           ;UI.c: 453: up = 1;
 20655  0038E8  0E00               	movlw	0
 20656  0038EA  6E76               	movwf	_up+1,c
 20657  0038EC  0E01               	movlw	1
 20658  0038EE  6E75               	movwf	_up,c
 20659                           
 20660                           ;UI.c: 454: return 1;
 20661  0038F0  0E00               	movlw	0
 20662  0038F2  6E2B               	movwf	?_inputHandler+1,c
 20663  0038F4  0E01               	movlw	1
 20664  0038F6  6E2A               	movwf	?_inputHandler,c
 20665  0038F8  0012               	return	
 20666  0038FA                     i2l7422:
 20667                           
 20668                           ;UI.c: 456: down = 1;
 20669  0038FA  0E00               	movlw	0
 20670  0038FC  6E5E               	movwf	_down+1,c
 20671  0038FE  0E01               	movlw	1
 20672  003900  6E5D               	movwf	_down,c
 20673                           
 20674                           ;UI.c: 457: return 1;
 20675  003902  0E00               	movlw	0
 20676  003904  6E2B               	movwf	?_inputHandler+1,c
 20677  003906  0E01               	movlw	1
 20678  003908  6E2A               	movwf	?_inputHandler,c
 20679  00390A  0012               	return	
 20680  00390C                     i2l7426:
 20681                           
 20682                           ;UI.c: 459: enter = 1;
 20683  00390C  0E00               	movlw	0
 20684  00390E  6E60               	movwf	_enter+1,c
 20685  003910  0E01               	movlw	1
 20686  003912  6E5F               	movwf	_enter,c
 20687                           
 20688                           ;UI.c: 460: return 1;
 20689  003914  0E00               	movlw	0
 20690  003916  6E2B               	movwf	?_inputHandler+1,c
 20691  003918  0E01               	movlw	1
 20692  00391A  6E2A               	movwf	?_inputHandler,c
 20693  00391C  0012               	return	
 20694  00391E                     i2l7430:
 20695                           
 20696                           ;UI.c: 462: back = 1;
 20697  00391E  0E00               	movlw	0
 20698  003920  6E5C               	movwf	_back+1,c
 20699  003922  0E01               	movlw	1
 20700  003924  6E5B               	movwf	_back,c
 20701                           
 20702                           ;UI.c: 463: return 1;
 20703  003926  0E00               	movlw	0
 20704  003928  6E2B               	movwf	?_inputHandler+1,c
 20705  00392A  0E01               	movlw	1
 20706  00392C  6E2A               	movwf	?_inputHandler,c
 20707  00392E  0012               	return	
 20708  003930                     i2l7434:
 20709                           
 20710                           ;UI.c: 466: return 1;
 20711  003930  0E00               	movlw	0
 20712  003932  6E2B               	movwf	?_inputHandler+1,c
 20713  003934  0E01               	movlw	1
 20714  003936  6E2A               	movwf	?_inputHandler,c
 20715                           
 20716                           ;UI.c: 467: }
 20717  003938  0012               	return	
 20718  00393A                     i2l7440:
 20719  00393A  507D               	movf	_input,w,c	;volatile
 20720                           
 20721                           ; Switch size 1, requested type "space"
 20722                           ; Number of cases is 7, Range of values is 49 to 68
 20723                           ; switch strategies available:
 20724                           ; Name         Instructions Cycles
 20725                           ; simple_byte           22    12 (average)
 20726                           ;	Chosen strategy is simple_byte
 20727  00393C  0A31               	xorlw	49	; case 49
 20728  00393E  B4D8               	btfsc	status,2,c
 20729  003940  D789               	goto	i2l7370
 20730  003942  0A03               	xorlw	3	; case 50
 20731  003944  B4D8               	btfsc	status,2,c
 20732  003946  D799               	goto	i2l7384
 20733  003948  0A01               	xorlw	1	; case 51
 20734  00394A  B4D8               	btfsc	status,2,c
 20735  00394C  D7BA               	goto	i2l7404
 20736  00394E  0A72               	xorlw	114	; case 65
 20737  003950  B4D8               	btfsc	status,2,c
 20738  003952  D7CA               	goto	i2l7418
 20739  003954  0A03               	xorlw	3	; case 66
 20740  003956  B4D8               	btfsc	status,2,c
 20741  003958  D7D0               	goto	i2l7422
 20742  00395A  0A01               	xorlw	1	; case 67
 20743  00395C  B4D8               	btfsc	status,2,c
 20744  00395E  D7D6               	goto	i2l7426
 20745  003960  0A07               	xorlw	7	; case 68
 20746  003962  B4D8               	btfsc	status,2,c
 20747  003964  D7DC               	goto	i2l7430
 20748  003966  D7E4               	goto	i2l7434
 20749  003968                     __end_of_inputHandler:
 20750                           	opt stack 0
 20751                           pclatu	equ	0xFFB
 20752                           pclath	equ	0xFFA
 20753                           tblptru	equ	0xFF8
 20754                           tblptrh	equ	0xFF7
 20755                           tblptrl	equ	0xFF6
 20756                           tablat	equ	0xFF5
 20757                           prodh	equ	0xFF4
 20758                           prodl	equ	0xFF3
 20759                           intcon	equ	0xFF2
 20760                           intcon2	equ	0xFF1
 20761                           intcon3	equ	0xFF0
 20762                           indf0	equ	0xFEF
 20763                           postinc0	equ	0xFEE
 20764                           fsr0h	equ	0xFEA
 20765                           fsr0l	equ	0xFE9
 20766                           wreg	equ	0xFE8
 20767                           postdec1	equ	0xFE5
 20768                           fsr1h	equ	0xFE2
 20769                           fsr1l	equ	0xFE1
 20770                           indf2	equ	0xFDF
 20771                           postinc2	equ	0xFDE
 20772                           postdec2	equ	0xFDD
 20773                           fsr2h	equ	0xFDA
 20774                           fsr2l	equ	0xFD9
 20775                           status	equ	0xFD8
 20776                           
 20777 ;; *************** function i2_change_state_to_menu_22 *****************
 20778 ;; Defined at:
 20779 ;;		line 501 in file "UI.c"
 20780 ;; Parameters:    Size  Location     Type
 20781 ;;		None
 20782 ;; Auto vars:     Size  Location     Type
 20783 ;;		None
 20784 ;; Return value:  Size  Location     Type
 20785 ;;                  1    wreg      void 
 20786 ;; Registers used:
 20787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20788 ;; Tracked objects:
 20789 ;;		On entry : 0/0
 20790 ;;		On exit  : 0/0
 20791 ;;		Unchanged: 0/0
 20792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20797 ;;Total ram usage:        0 bytes
 20798 ;; Hardware stack levels used:    1
 20799 ;; Hardware stack levels required when called:    3
 20800 ;; This function calls:
 20801 ;;		i2_lcdInst
 20802 ;;		i2_printf
 20803 ;; This function is called by:
 20804 ;;		_updateMenu
 20805 ;;		_inputHandler
 20806 ;; This function uses a non-reentrant model
 20807 ;;
 20808                           
 20809                           	psect	text67
 20810  005272                     __ptext67:
 20811                           	opt stack 0
 20812  005272                     i2_change_state_to_menu_22:
 20813                           	opt stack 19
 20814                           
 20815                           ;UI.c: 502: cur_state = 22;
 20816                           
 20817                           ;incstack = 0
 20818  005272  0E00               	movlw	0
 20819  005274  0100               	movlb	0	; () banked
 20820  005276  6FED               	movwf	(_cur_state+1)& (0+255),b
 20821  005278  0E16               	movlw	22
 20822  00527A  6FEC               	movwf	_cur_state& (0+255),b
 20823                           
 20824                           ; BSR set to: 0
 20825                           ;UI.c: 504: lcdInst(0b10000000);;
 20826  00527C  0E80               	movlw	128
 20827  00527E  EC6D  F02B         	call	i2_lcdInst
 20828                           
 20829                           ;UI.c: 505: printf("2. SORT        <");
 20830  005282  0ECE               	movlw	low STR_34
 20831  005284  6E0D               	movwf	i2printf@f,c
 20832  005286  0EFD               	movlw	high STR_34
 20833  005288  6E0E               	movwf	i2printf@f+1,c
 20834  00528A  EC97  F00F         	call	i2_printf	;wreg free
 20835                           
 20836                           ;UI.c: 506: lcdInst(0b11000000);;
 20837  00528E  0EC0               	movlw	192
 20838  005290  EC6D  F02B         	call	i2_lcdInst
 20839                           
 20840                           ;UI.c: 507: printf("3. LOGS         ");
 20841  005294  0E13               	movlw	low STR_36
 20842  005296  6E0D               	movwf	i2printf@f,c
 20843  005298  0EFD               	movlw	high STR_36
 20844  00529A  6E0E               	movwf	i2printf@f+1,c
 20845  00529C  EC97  F00F         	call	i2_printf	;wreg free
 20846  0052A0  0012               	return		;funcret
 20847  0052A2                     __end_ofi2_change_state_to_menu_22:
 20848                           	opt stack 0
 20849                           pclatu	equ	0xFFB
 20850                           pclath	equ	0xFFA
 20851                           tblptru	equ	0xFF8
 20852                           tblptrh	equ	0xFF7
 20853                           tblptrl	equ	0xFF6
 20854                           tablat	equ	0xFF5
 20855                           prodh	equ	0xFF4
 20856                           prodl	equ	0xFF3
 20857                           intcon	equ	0xFF2
 20858                           intcon2	equ	0xFF1
 20859                           intcon3	equ	0xFF0
 20860                           indf0	equ	0xFEF
 20861                           postinc0	equ	0xFEE
 20862                           fsr0h	equ	0xFEA
 20863                           fsr0l	equ	0xFE9
 20864                           wreg	equ	0xFE8
 20865                           postdec1	equ	0xFE5
 20866                           fsr1h	equ	0xFE2
 20867                           fsr1l	equ	0xFE1
 20868                           indf2	equ	0xFDF
 20869                           postinc2	equ	0xFDE
 20870                           postdec2	equ	0xFDD
 20871                           fsr2h	equ	0xFDA
 20872                           fsr2l	equ	0xFD9
 20873                           status	equ	0xFD8
 20874                           
 20875 ;; *************** function i2_change_state_to_menu_12 *****************
 20876 ;; Defined at:
 20877 ;;		line 493 in file "UI.c"
 20878 ;; Parameters:    Size  Location     Type
 20879 ;;		None
 20880 ;; Auto vars:     Size  Location     Type
 20881 ;;		None
 20882 ;; Return value:  Size  Location     Type
 20883 ;;                  1    wreg      void 
 20884 ;; Registers used:
 20885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20886 ;; Tracked objects:
 20887 ;;		On entry : 0/0
 20888 ;;		On exit  : 0/0
 20889 ;;		Unchanged: 0/0
 20890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20895 ;;Total ram usage:        0 bytes
 20896 ;; Hardware stack levels used:    1
 20897 ;; Hardware stack levels required when called:    3
 20898 ;; This function calls:
 20899 ;;		i2_lcdInst
 20900 ;;		i2_printf
 20901 ;; This function is called by:
 20902 ;;		_updateMenu
 20903 ;;		_inputHandler
 20904 ;; This function uses a non-reentrant model
 20905 ;;
 20906                           
 20907                           	psect	text68
 20908  0052A2                     __ptext68:
 20909                           	opt stack 0
 20910  0052A2                     i2_change_state_to_menu_12:
 20911                           	opt stack 19
 20912                           
 20913                           ;UI.c: 494: cur_state = 12;
 20914                           
 20915                           ;incstack = 0
 20916  0052A2  0E00               	movlw	0
 20917  0052A4  0100               	movlb	0	; () banked
 20918  0052A6  6FED               	movwf	(_cur_state+1)& (0+255),b
 20919  0052A8  0E0C               	movlw	12
 20920  0052AA  6FEC               	movwf	_cur_state& (0+255),b
 20921                           
 20922                           ; BSR set to: 0
 20923                           ;UI.c: 496: lcdInst(0b10000000);;
 20924  0052AC  0E80               	movlw	128
 20925  0052AE  EC6D  F02B         	call	i2_lcdInst
 20926                           
 20927                           ;UI.c: 497: printf("1. DATE/TIME    ");
 20928  0052B2  0E35               	movlw	low STR_33
 20929  0052B4  6E0D               	movwf	i2printf@f,c
 20930  0052B6  0EFD               	movlw	high STR_33
 20931  0052B8  6E0E               	movwf	i2printf@f+1,c
 20932  0052BA  EC97  F00F         	call	i2_printf	;wreg free
 20933                           
 20934                           ;UI.c: 498: lcdInst(0b11000000);;
 20935  0052BE  0EC0               	movlw	192
 20936  0052C0  EC6D  F02B         	call	i2_lcdInst
 20937                           
 20938                           ;UI.c: 499: printf("2. SORT        <");
 20939  0052C4  0ECE               	movlw	low STR_34
 20940  0052C6  6E0D               	movwf	i2printf@f,c
 20941  0052C8  0EFD               	movlw	high STR_34
 20942  0052CA  6E0E               	movwf	i2printf@f+1,c
 20943  0052CC  EC97  F00F         	call	i2_printf	;wreg free
 20944  0052D0  0012               	return		;funcret
 20945  0052D2                     __end_ofi2_change_state_to_menu_12:
 20946                           	opt stack 0
 20947                           pclatu	equ	0xFFB
 20948                           pclath	equ	0xFFA
 20949                           tblptru	equ	0xFF8
 20950                           tblptrh	equ	0xFF7
 20951                           tblptrl	equ	0xFF6
 20952                           tablat	equ	0xFF5
 20953                           prodh	equ	0xFF4
 20954                           prodl	equ	0xFF3
 20955                           intcon	equ	0xFF2
 20956                           intcon2	equ	0xFF1
 20957                           intcon3	equ	0xFF0
 20958                           indf0	equ	0xFEF
 20959                           postinc0	equ	0xFEE
 20960                           fsr0h	equ	0xFEA
 20961                           fsr0l	equ	0xFE9
 20962                           wreg	equ	0xFE8
 20963                           postdec1	equ	0xFE5
 20964                           fsr1h	equ	0xFE2
 20965                           fsr1l	equ	0xFE1
 20966                           indf2	equ	0xFDF
 20967                           postinc2	equ	0xFDE
 20968                           postdec2	equ	0xFDD
 20969                           fsr2h	equ	0xFDA
 20970                           fsr2l	equ	0xFD9
 20971                           status	equ	0xFD8
 20972                           
 20973 ;; *************** function _change_state_to_menu_23 *****************
 20974 ;; Defined at:
 20975 ;;		line 509 in file "UI.c"
 20976 ;; Parameters:    Size  Location     Type
 20977 ;;		None
 20978 ;; Auto vars:     Size  Location     Type
 20979 ;;		None
 20980 ;; Return value:  Size  Location     Type
 20981 ;;                  1    wreg      void 
 20982 ;; Registers used:
 20983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20984 ;; Tracked objects:
 20985 ;;		On entry : 0/0
 20986 ;;		On exit  : 0/0
 20987 ;;		Unchanged: 0/0
 20988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;Total ram usage:        0 bytes
 20994 ;; Hardware stack levels used:    1
 20995 ;; Hardware stack levels required when called:    3
 20996 ;; This function calls:
 20997 ;;		i2_lcdInst
 20998 ;;		i2_printf
 20999 ;; This function is called by:
 21000 ;;		_updateMenu
 21001 ;;		_inputHandler
 21002 ;; This function uses a non-reentrant model
 21003 ;;
 21004                           
 21005                           	psect	text69
 21006  0052D2                     __ptext69:
 21007                           	opt stack 0
 21008  0052D2                     _change_state_to_menu_23:
 21009                           	opt stack 18
 21010                           
 21011                           ;UI.c: 510: cur_state = 23;
 21012                           
 21013                           ;incstack = 0
 21014  0052D2  0E00               	movlw	0
 21015  0052D4  0100               	movlb	0	; () banked
 21016  0052D6  6FED               	movwf	(_cur_state+1)& (0+255),b
 21017  0052D8  0E17               	movlw	23
 21018  0052DA  6FEC               	movwf	_cur_state& (0+255),b
 21019                           
 21020                           ; BSR set to: 0
 21021                           ;UI.c: 512: lcdInst(0b10000000);;
 21022  0052DC  0E80               	movlw	128
 21023  0052DE  EC6D  F02B         	call	i2_lcdInst
 21024                           
 21025                           ;UI.c: 513: printf("2. SORT         ");
 21026  0052E2  0E24               	movlw	low STR_32
 21027  0052E4  6E0D               	movwf	i2printf@f,c
 21028  0052E6  0EFD               	movlw	high STR_32
 21029  0052E8  6E0E               	movwf	i2printf@f+1,c
 21030  0052EA  EC97  F00F         	call	i2_printf	;wreg free
 21031                           
 21032                           ;UI.c: 514: lcdInst(0b11000000);;
 21033  0052EE  0EC0               	movlw	192
 21034  0052F0  EC6D  F02B         	call	i2_lcdInst
 21035                           
 21036                           ;UI.c: 515: printf("3. LOGS        <");
 21037  0052F4  0EBD               	movlw	low STR_38
 21038  0052F6  6E0D               	movwf	i2printf@f,c
 21039  0052F8  0EFD               	movlw	high STR_38
 21040  0052FA  6E0E               	movwf	i2printf@f+1,c
 21041  0052FC  EC97  F00F         	call	i2_printf	;wreg free
 21042  005300  0012               	return		;funcret
 21043  005302                     __end_of_change_state_to_menu_23:
 21044                           	opt stack 0
 21045                           pclatu	equ	0xFFB
 21046                           pclath	equ	0xFFA
 21047                           tblptru	equ	0xFF8
 21048                           tblptrh	equ	0xFF7
 21049                           tblptrl	equ	0xFF6
 21050                           tablat	equ	0xFF5
 21051                           prodh	equ	0xFF4
 21052                           prodl	equ	0xFF3
 21053                           intcon	equ	0xFF2
 21054                           intcon2	equ	0xFF1
 21055                           intcon3	equ	0xFF0
 21056                           indf0	equ	0xFEF
 21057                           postinc0	equ	0xFEE
 21058                           fsr0h	equ	0xFEA
 21059                           fsr0l	equ	0xFE9
 21060                           wreg	equ	0xFE8
 21061                           postdec1	equ	0xFE5
 21062                           fsr1h	equ	0xFE2
 21063                           fsr1l	equ	0xFE1
 21064                           indf2	equ	0xFDF
 21065                           postinc2	equ	0xFDE
 21066                           postdec2	equ	0xFDD
 21067                           fsr2h	equ	0xFDA
 21068                           fsr2l	equ	0xFD9
 21069                           status	equ	0xFD8
 21070                           
 21071 ;; *************** function _change_state_to_menu_11 *****************
 21072 ;; Defined at:
 21073 ;;		line 485 in file "UI.c"
 21074 ;; Parameters:    Size  Location     Type
 21075 ;;		None
 21076 ;; Auto vars:     Size  Location     Type
 21077 ;;		None
 21078 ;; Return value:  Size  Location     Type
 21079 ;;                  1    wreg      void 
 21080 ;; Registers used:
 21081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21082 ;; Tracked objects:
 21083 ;;		On entry : 0/0
 21084 ;;		On exit  : 0/0
 21085 ;;		Unchanged: 0/0
 21086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21091 ;;Total ram usage:        0 bytes
 21092 ;; Hardware stack levels used:    1
 21093 ;; Hardware stack levels required when called:    3
 21094 ;; This function calls:
 21095 ;;		i2_lcdInst
 21096 ;;		i2_printf
 21097 ;; This function is called by:
 21098 ;;		_updateMenu
 21099 ;;		_inputHandler
 21100 ;; This function uses a non-reentrant model
 21101 ;;
 21102                           
 21103                           	psect	text70
 21104  005302                     __ptext70:
 21105                           	opt stack 0
 21106  005302                     _change_state_to_menu_11:
 21107                           	opt stack 18
 21108                           
 21109                           ;UI.c: 486: cur_state = 11;
 21110                           
 21111                           ;incstack = 0
 21112  005302  0E00               	movlw	0
 21113  005304  0100               	movlb	0	; () banked
 21114  005306  6FED               	movwf	(_cur_state+1)& (0+255),b
 21115  005308  0E0B               	movlw	11
 21116  00530A  6FEC               	movwf	_cur_state& (0+255),b
 21117                           
 21118                           ; BSR set to: 0
 21119                           ;UI.c: 488: lcdInst(0b10000000);;
 21120  00530C  0E80               	movlw	128
 21121  00530E  EC6D  F02B         	call	i2_lcdInst
 21122                           
 21123                           ;UI.c: 489: printf("1. DATE/TIME   <");
 21124  005312  0EDF               	movlw	low STR_31
 21125  005314  6E0D               	movwf	i2printf@f,c
 21126  005316  0EFD               	movlw	high STR_31
 21127  005318  6E0E               	movwf	i2printf@f+1,c
 21128  00531A  EC97  F00F         	call	i2_printf	;wreg free
 21129                           
 21130                           ;UI.c: 490: lcdInst(0b11000000);;
 21131  00531E  0EC0               	movlw	192
 21132  005320  EC6D  F02B         	call	i2_lcdInst
 21133                           
 21134                           ;UI.c: 491: printf("2. SORT         ");
 21135  005324  0E24               	movlw	low STR_32
 21136  005326  6E0D               	movwf	i2printf@f,c
 21137  005328  0EFD               	movlw	high STR_32
 21138  00532A  6E0E               	movwf	i2printf@f+1,c
 21139  00532C  EC97  F00F         	call	i2_printf	;wreg free
 21140  005330  0012               	return		;funcret
 21141  005332                     __end_of_change_state_to_menu_11:
 21142                           	opt stack 0
 21143                           pclatu	equ	0xFFB
 21144                           pclath	equ	0xFFA
 21145                           tblptru	equ	0xFF8
 21146                           tblptrh	equ	0xFF7
 21147                           tblptrl	equ	0xFF6
 21148                           tablat	equ	0xFF5
 21149                           prodh	equ	0xFF4
 21150                           prodl	equ	0xFF3
 21151                           intcon	equ	0xFF2
 21152                           intcon2	equ	0xFF1
 21153                           intcon3	equ	0xFF0
 21154                           indf0	equ	0xFEF
 21155                           postinc0	equ	0xFEE
 21156                           fsr0h	equ	0xFEA
 21157                           fsr0l	equ	0xFE9
 21158                           wreg	equ	0xFE8
 21159                           postdec1	equ	0xFE5
 21160                           fsr1h	equ	0xFE2
 21161                           fsr1l	equ	0xFE1
 21162                           indf2	equ	0xFDF
 21163                           postinc2	equ	0xFDE
 21164                           postdec2	equ	0xFDD
 21165                           fsr2h	equ	0xFDA
 21166                           fsr2l	equ	0xFD9
 21167                           status	equ	0xFD8
 21168                           
 21169 ;; *************** function _change_state_to_logs_34 *****************
 21170 ;; Defined at:
 21171 ;;		line 552 in file "UI.c"
 21172 ;; Parameters:    Size  Location     Type
 21173 ;;		None
 21174 ;; Auto vars:     Size  Location     Type
 21175 ;;		None
 21176 ;; Return value:  Size  Location     Type
 21177 ;;                  1    wreg      void 
 21178 ;; Registers used:
 21179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21180 ;; Tracked objects:
 21181 ;;		On entry : 0/0
 21182 ;;		On exit  : 0/0
 21183 ;;		Unchanged: 0/0
 21184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21189 ;;Total ram usage:        0 bytes
 21190 ;; Hardware stack levels used:    1
 21191 ;; Hardware stack levels required when called:    3
 21192 ;; This function calls:
 21193 ;;		i2_lcdInst
 21194 ;;		i2_printf
 21195 ;; This function is called by:
 21196 ;;		_updateMenu
 21197 ;;		_inputHandler
 21198 ;; This function uses a non-reentrant model
 21199 ;;
 21200                           
 21201                           	psect	text71
 21202  005332                     __ptext71:
 21203                           	opt stack 0
 21204  005332                     _change_state_to_logs_34:
 21205                           	opt stack 18
 21206                           
 21207                           ;UI.c: 553: cur_state = 1034;
 21208                           
 21209                           ;incstack = 0
 21210  005332  0E04               	movlw	4
 21211  005334  0100               	movlb	0	; () banked
 21212  005336  6FED               	movwf	(_cur_state+1)& (0+255),b
 21213  005338  0E0A               	movlw	10
 21214  00533A  6FEC               	movwf	_cur_state& (0+255),b
 21215                           
 21216                           ; BSR set to: 0
 21217                           ;UI.c: 554: lcdInst(0b10000000);;
 21218  00533C  0E80               	movlw	128
 21219  00533E  EC6D  F02B         	call	i2_lcdInst
 21220                           
 21221                           ;UI.c: 555: printf("LOG 3           ");
 21222  005342  0EF1               	movlw	low STR_44
 21223  005344  6E0D               	movwf	i2printf@f,c
 21224  005346  0EFC               	movlw	high STR_44
 21225  005348  6E0E               	movwf	i2printf@f+1,c
 21226  00534A  EC97  F00F         	call	i2_printf	;wreg free
 21227                           
 21228                           ;UI.c: 556: lcdInst(0b11000000);;
 21229  00534E  0EC0               	movlw	192
 21230  005350  EC6D  F02B         	call	i2_lcdInst
 21231                           
 21232                           ;UI.c: 557: printf("LOG 4          <");
 21233  005354  0EAC               	movlw	low STR_50
 21234  005356  6E0D               	movwf	i2printf@f,c
 21235  005358  0EFD               	movlw	high STR_50
 21236  00535A  6E0E               	movwf	i2printf@f+1,c
 21237  00535C  EC97  F00F         	call	i2_printf	;wreg free
 21238  005360  0012               	return		;funcret
 21239  005362                     __end_of_change_state_to_logs_34:
 21240                           	opt stack 0
 21241                           pclatu	equ	0xFFB
 21242                           pclath	equ	0xFFA
 21243                           tblptru	equ	0xFF8
 21244                           tblptrh	equ	0xFF7
 21245                           tblptrl	equ	0xFF6
 21246                           tablat	equ	0xFF5
 21247                           prodh	equ	0xFF4
 21248                           prodl	equ	0xFF3
 21249                           intcon	equ	0xFF2
 21250                           intcon2	equ	0xFF1
 21251                           intcon3	equ	0xFF0
 21252                           indf0	equ	0xFEF
 21253                           postinc0	equ	0xFEE
 21254                           fsr0h	equ	0xFEA
 21255                           fsr0l	equ	0xFE9
 21256                           wreg	equ	0xFE8
 21257                           postdec1	equ	0xFE5
 21258                           fsr1h	equ	0xFE2
 21259                           fsr1l	equ	0xFE1
 21260                           indf2	equ	0xFDF
 21261                           postinc2	equ	0xFDE
 21262                           postdec2	equ	0xFDD
 21263                           fsr2h	equ	0xFDA
 21264                           fsr2l	equ	0xFD9
 21265                           status	equ	0xFD8
 21266                           
 21267 ;; *************** function _change_state_to_logs_33 *****************
 21268 ;; Defined at:
 21269 ;;		line 545 in file "UI.c"
 21270 ;; Parameters:    Size  Location     Type
 21271 ;;		None
 21272 ;; Auto vars:     Size  Location     Type
 21273 ;;		None
 21274 ;; Return value:  Size  Location     Type
 21275 ;;                  1    wreg      void 
 21276 ;; Registers used:
 21277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21278 ;; Tracked objects:
 21279 ;;		On entry : 0/0
 21280 ;;		On exit  : 0/0
 21281 ;;		Unchanged: 0/0
 21282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21287 ;;Total ram usage:        0 bytes
 21288 ;; Hardware stack levels used:    1
 21289 ;; Hardware stack levels required when called:    3
 21290 ;; This function calls:
 21291 ;;		i2_lcdInst
 21292 ;;		i2_printf
 21293 ;; This function is called by:
 21294 ;;		_updateMenu
 21295 ;;		_inputHandler
 21296 ;; This function uses a non-reentrant model
 21297 ;;
 21298                           
 21299                           	psect	text72
 21300  005362                     __ptext72:
 21301                           	opt stack 0
 21302  005362                     _change_state_to_logs_33:
 21303                           	opt stack 18
 21304                           
 21305                           ;UI.c: 546: cur_state = 1033;
 21306                           
 21307                           ;incstack = 0
 21308  005362  0E04               	movlw	4
 21309  005364  0100               	movlb	0	; () banked
 21310  005366  6FED               	movwf	(_cur_state+1)& (0+255),b
 21311  005368  0E09               	movlw	9
 21312  00536A  6FEC               	movwf	_cur_state& (0+255),b
 21313                           
 21314                           ; BSR set to: 0
 21315                           ;UI.c: 547: lcdInst(0b10000000);;
 21316  00536C  0E80               	movlw	128
 21317  00536E  EC6D  F02B         	call	i2_lcdInst
 21318                           
 21319                           ;UI.c: 548: printf("LOG 3          <");
 21320  005372  0E9B               	movlw	low STR_46
 21321  005374  6E0D               	movwf	i2printf@f,c
 21322  005376  0EFD               	movlw	high STR_46
 21323  005378  6E0E               	movwf	i2printf@f+1,c
 21324  00537A  EC97  F00F         	call	i2_printf	;wreg free
 21325                           
 21326                           ;UI.c: 549: lcdInst(0b11000000);;
 21327  00537E  0EC0               	movlw	192
 21328  005380  EC6D  F02B         	call	i2_lcdInst
 21329                           
 21330                           ;UI.c: 550: printf("LOG 4           ");
 21331  005384  0E02               	movlw	low STR_48
 21332  005386  6E0D               	movwf	i2printf@f,c
 21333  005388  0EFD               	movlw	high STR_48
 21334  00538A  6E0E               	movwf	i2printf@f+1,c
 21335  00538C  EC97  F00F         	call	i2_printf	;wreg free
 21336  005390  0012               	return		;funcret
 21337  005392                     __end_of_change_state_to_logs_33:
 21338                           	opt stack 0
 21339                           pclatu	equ	0xFFB
 21340                           pclath	equ	0xFFA
 21341                           tblptru	equ	0xFF8
 21342                           tblptrh	equ	0xFF7
 21343                           tblptrl	equ	0xFF6
 21344                           tablat	equ	0xFF5
 21345                           prodh	equ	0xFF4
 21346                           prodl	equ	0xFF3
 21347                           intcon	equ	0xFF2
 21348                           intcon2	equ	0xFF1
 21349                           intcon3	equ	0xFF0
 21350                           indf0	equ	0xFEF
 21351                           postinc0	equ	0xFEE
 21352                           fsr0h	equ	0xFEA
 21353                           fsr0l	equ	0xFE9
 21354                           wreg	equ	0xFE8
 21355                           postdec1	equ	0xFE5
 21356                           fsr1h	equ	0xFE2
 21357                           fsr1l	equ	0xFE1
 21358                           indf2	equ	0xFDF
 21359                           postinc2	equ	0xFDE
 21360                           postdec2	equ	0xFDD
 21361                           fsr2h	equ	0xFDA
 21362                           fsr2l	equ	0xFD9
 21363                           status	equ	0xFD8
 21364                           
 21365 ;; *************** function _change_state_to_logs_23 *****************
 21366 ;; Defined at:
 21367 ;;		line 538 in file "UI.c"
 21368 ;; Parameters:    Size  Location     Type
 21369 ;;		None
 21370 ;; Auto vars:     Size  Location     Type
 21371 ;;		None
 21372 ;; Return value:  Size  Location     Type
 21373 ;;                  1    wreg      void 
 21374 ;; Registers used:
 21375 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21376 ;; Tracked objects:
 21377 ;;		On entry : 0/0
 21378 ;;		On exit  : 0/0
 21379 ;;		Unchanged: 0/0
 21380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21385 ;;Total ram usage:        0 bytes
 21386 ;; Hardware stack levels used:    1
 21387 ;; Hardware stack levels required when called:    3
 21388 ;; This function calls:
 21389 ;;		i2_lcdInst
 21390 ;;		i2_printf
 21391 ;; This function is called by:
 21392 ;;		_updateMenu
 21393 ;;		_inputHandler
 21394 ;; This function uses a non-reentrant model
 21395 ;;
 21396                           
 21397                           	psect	text73
 21398  005450                     __ptext73:
 21399                           	opt stack 0
 21400  005450                     _change_state_to_logs_23:
 21401                           	opt stack 18
 21402                           
 21403                           ;UI.c: 539: cur_state = 1023;
 21404                           
 21405                           ;incstack = 0
 21406  005450  0E03               	movlw	3
 21407  005452  0100               	movlb	0	; () banked
 21408  005454  6FED               	movwf	(_cur_state+1)& (0+255),b
 21409  005456  69EC               	setf	_cur_state& (0+255),b
 21410                           
 21411                           ; BSR set to: 0
 21412                           ;UI.c: 540: lcdInst(0b10000000);;
 21413  005458  0E80               	movlw	128
 21414  00545A  EC6D  F02B         	call	i2_lcdInst
 21415                           
 21416                           ;UI.c: 541: printf("LOG 2           ");
 21417  00545E  0EE0               	movlw	low STR_40
 21418  005460  6E0D               	movwf	i2printf@f,c
 21419  005462  0EFC               	movlw	high STR_40
 21420  005464  6E0E               	movwf	i2printf@f+1,c
 21421  005466  EC97  F00F         	call	i2_printf	;wreg free
 21422                           
 21423                           ;UI.c: 542: lcdInst(0b11000000);;
 21424  00546A  0EC0               	movlw	192
 21425  00546C  EC6D  F02B         	call	i2_lcdInst
 21426                           
 21427                           ;UI.c: 543: printf("LOG 3          <");
 21428  005470  0E9B               	movlw	low STR_46
 21429  005472  6E0D               	movwf	i2printf@f,c
 21430  005474  0EFD               	movlw	high STR_46
 21431  005476  6E0E               	movwf	i2printf@f+1,c
 21432  005478  EC97  F00F         	call	i2_printf	;wreg free
 21433  00547C  0012               	return		;funcret
 21434  00547E                     __end_of_change_state_to_logs_23:
 21435                           	opt stack 0
 21436                           pclatu	equ	0xFFB
 21437                           pclath	equ	0xFFA
 21438                           tblptru	equ	0xFF8
 21439                           tblptrh	equ	0xFF7
 21440                           tblptrl	equ	0xFF6
 21441                           tablat	equ	0xFF5
 21442                           prodh	equ	0xFF4
 21443                           prodl	equ	0xFF3
 21444                           intcon	equ	0xFF2
 21445                           intcon2	equ	0xFF1
 21446                           intcon3	equ	0xFF0
 21447                           indf0	equ	0xFEF
 21448                           postinc0	equ	0xFEE
 21449                           fsr0h	equ	0xFEA
 21450                           fsr0l	equ	0xFE9
 21451                           wreg	equ	0xFE8
 21452                           postdec1	equ	0xFE5
 21453                           fsr1h	equ	0xFE2
 21454                           fsr1l	equ	0xFE1
 21455                           indf2	equ	0xFDF
 21456                           postinc2	equ	0xFDE
 21457                           postdec2	equ	0xFDD
 21458                           fsr2h	equ	0xFDA
 21459                           fsr2l	equ	0xFD9
 21460                           status	equ	0xFD8
 21461                           
 21462 ;; *************** function _change_state_to_logs_22 *****************
 21463 ;; Defined at:
 21464 ;;		line 531 in file "UI.c"
 21465 ;; Parameters:    Size  Location     Type
 21466 ;;		None
 21467 ;; Auto vars:     Size  Location     Type
 21468 ;;		None
 21469 ;; Return value:  Size  Location     Type
 21470 ;;                  1    wreg      void 
 21471 ;; Registers used:
 21472 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21473 ;; Tracked objects:
 21474 ;;		On entry : 0/0
 21475 ;;		On exit  : 0/0
 21476 ;;		Unchanged: 0/0
 21477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21482 ;;Total ram usage:        0 bytes
 21483 ;; Hardware stack levels used:    1
 21484 ;; Hardware stack levels required when called:    3
 21485 ;; This function calls:
 21486 ;;		i2_lcdInst
 21487 ;;		i2_printf
 21488 ;; This function is called by:
 21489 ;;		_updateMenu
 21490 ;;		_inputHandler
 21491 ;; This function uses a non-reentrant model
 21492 ;;
 21493                           
 21494                           	psect	text74
 21495  005392                     __ptext74:
 21496                           	opt stack 0
 21497  005392                     _change_state_to_logs_22:
 21498                           	opt stack 18
 21499                           
 21500                           ;UI.c: 532: cur_state = 1022;
 21501                           
 21502                           ;incstack = 0
 21503  005392  0E03               	movlw	3
 21504  005394  0100               	movlb	0	; () banked
 21505  005396  6FED               	movwf	(_cur_state+1)& (0+255),b
 21506  005398  0EFE               	movlw	254
 21507  00539A  6FEC               	movwf	_cur_state& (0+255),b
 21508                           
 21509                           ; BSR set to: 0
 21510                           ;UI.c: 533: lcdInst(0b10000000);;
 21511  00539C  0E80               	movlw	128
 21512  00539E  EC6D  F02B         	call	i2_lcdInst
 21513                           
 21514                           ;UI.c: 534: printf("LOG 2          <");
 21515  0053A2  0E8A               	movlw	low STR_42
 21516  0053A4  6E0D               	movwf	i2printf@f,c
 21517  0053A6  0EFD               	movlw	high STR_42
 21518  0053A8  6E0E               	movwf	i2printf@f+1,c
 21519  0053AA  EC97  F00F         	call	i2_printf	;wreg free
 21520                           
 21521                           ;UI.c: 535: lcdInst(0b11000000);;
 21522  0053AE  0EC0               	movlw	192
 21523  0053B0  EC6D  F02B         	call	i2_lcdInst
 21524                           
 21525                           ;UI.c: 536: printf("LOG 3           ");
 21526  0053B4  0EF1               	movlw	low STR_44
 21527  0053B6  6E0D               	movwf	i2printf@f,c
 21528  0053B8  0EFC               	movlw	high STR_44
 21529  0053BA  6E0E               	movwf	i2printf@f+1,c
 21530  0053BC  EC97  F00F         	call	i2_printf	;wreg free
 21531  0053C0  0012               	return		;funcret
 21532  0053C2                     __end_of_change_state_to_logs_22:
 21533                           	opt stack 0
 21534                           pclatu	equ	0xFFB
 21535                           pclath	equ	0xFFA
 21536                           tblptru	equ	0xFF8
 21537                           tblptrh	equ	0xFF7
 21538                           tblptrl	equ	0xFF6
 21539                           tablat	equ	0xFF5
 21540                           prodh	equ	0xFF4
 21541                           prodl	equ	0xFF3
 21542                           intcon	equ	0xFF2
 21543                           intcon2	equ	0xFF1
 21544                           intcon3	equ	0xFF0
 21545                           indf0	equ	0xFEF
 21546                           postinc0	equ	0xFEE
 21547                           fsr0h	equ	0xFEA
 21548                           fsr0l	equ	0xFE9
 21549                           wreg	equ	0xFE8
 21550                           postdec1	equ	0xFE5
 21551                           fsr1h	equ	0xFE2
 21552                           fsr1l	equ	0xFE1
 21553                           indf2	equ	0xFDF
 21554                           postinc2	equ	0xFDE
 21555                           postdec2	equ	0xFDD
 21556                           fsr2h	equ	0xFDA
 21557                           fsr2l	equ	0xFD9
 21558                           status	equ	0xFD8
 21559                           
 21560 ;; *************** function _change_state_to_logs_12 *****************
 21561 ;; Defined at:
 21562 ;;		line 524 in file "UI.c"
 21563 ;; Parameters:    Size  Location     Type
 21564 ;;		None
 21565 ;; Auto vars:     Size  Location     Type
 21566 ;;		None
 21567 ;; Return value:  Size  Location     Type
 21568 ;;                  1    wreg      void 
 21569 ;; Registers used:
 21570 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21571 ;; Tracked objects:
 21572 ;;		On entry : 0/0
 21573 ;;		On exit  : 0/0
 21574 ;;		Unchanged: 0/0
 21575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21580 ;;Total ram usage:        0 bytes
 21581 ;; Hardware stack levels used:    1
 21582 ;; Hardware stack levels required when called:    3
 21583 ;; This function calls:
 21584 ;;		i2_lcdInst
 21585 ;;		i2_printf
 21586 ;; This function is called by:
 21587 ;;		_updateMenu
 21588 ;;		_inputHandler
 21589 ;; This function uses a non-reentrant model
 21590 ;;
 21591                           
 21592                           	psect	text75
 21593  0053C2                     __ptext75:
 21594                           	opt stack 0
 21595  0053C2                     _change_state_to_logs_12:
 21596                           	opt stack 18
 21597                           
 21598                           ;UI.c: 525: cur_state = 1012;
 21599                           
 21600                           ;incstack = 0
 21601  0053C2  0E03               	movlw	3
 21602  0053C4  0100               	movlb	0	; () banked
 21603  0053C6  6FED               	movwf	(_cur_state+1)& (0+255),b
 21604  0053C8  0EF4               	movlw	244
 21605  0053CA  6FEC               	movwf	_cur_state& (0+255),b
 21606                           
 21607                           ; BSR set to: 0
 21608                           ;UI.c: 526: lcdInst(0b10000000);;
 21609  0053CC  0E80               	movlw	128
 21610  0053CE  EC6D  F02B         	call	i2_lcdInst
 21611                           
 21612                           ;UI.c: 527: printf("LOG 1           ");
 21613  0053D2  0ECF               	movlw	low STR_41
 21614  0053D4  6E0D               	movwf	i2printf@f,c
 21615  0053D6  0EFC               	movlw	high STR_41
 21616  0053D8  6E0E               	movwf	i2printf@f+1,c
 21617  0053DA  EC97  F00F         	call	i2_printf	;wreg free
 21618                           
 21619                           ;UI.c: 528: lcdInst(0b11000000);;
 21620  0053DE  0EC0               	movlw	192
 21621  0053E0  EC6D  F02B         	call	i2_lcdInst
 21622                           
 21623                           ;UI.c: 529: printf("LOG 2          <");
 21624  0053E4  0E8A               	movlw	low STR_42
 21625  0053E6  6E0D               	movwf	i2printf@f,c
 21626  0053E8  0EFD               	movlw	high STR_42
 21627  0053EA  6E0E               	movwf	i2printf@f+1,c
 21628  0053EC  EC97  F00F         	call	i2_printf	;wreg free
 21629  0053F0  0012               	return		;funcret
 21630  0053F2                     __end_of_change_state_to_logs_12:
 21631                           	opt stack 0
 21632                           pclatu	equ	0xFFB
 21633                           pclath	equ	0xFFA
 21634                           tblptru	equ	0xFF8
 21635                           tblptrh	equ	0xFF7
 21636                           tblptrl	equ	0xFF6
 21637                           tablat	equ	0xFF5
 21638                           prodh	equ	0xFF4
 21639                           prodl	equ	0xFF3
 21640                           intcon	equ	0xFF2
 21641                           intcon2	equ	0xFF1
 21642                           intcon3	equ	0xFF0
 21643                           indf0	equ	0xFEF
 21644                           postinc0	equ	0xFEE
 21645                           fsr0h	equ	0xFEA
 21646                           fsr0l	equ	0xFE9
 21647                           wreg	equ	0xFE8
 21648                           postdec1	equ	0xFE5
 21649                           fsr1h	equ	0xFE2
 21650                           fsr1l	equ	0xFE1
 21651                           indf2	equ	0xFDF
 21652                           postinc2	equ	0xFDE
 21653                           postdec2	equ	0xFDD
 21654                           fsr2h	equ	0xFDA
 21655                           fsr2l	equ	0xFD9
 21656                           status	equ	0xFD8
 21657                           
 21658 ;; *************** function _change_state_to_logs_11 *****************
 21659 ;; Defined at:
 21660 ;;		line 517 in file "UI.c"
 21661 ;; Parameters:    Size  Location     Type
 21662 ;;		None
 21663 ;; Auto vars:     Size  Location     Type
 21664 ;;		None
 21665 ;; Return value:  Size  Location     Type
 21666 ;;                  1    wreg      void 
 21667 ;; Registers used:
 21668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21669 ;; Tracked objects:
 21670 ;;		On entry : 0/0
 21671 ;;		On exit  : 0/0
 21672 ;;		Unchanged: 0/0
 21673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21678 ;;Total ram usage:        0 bytes
 21679 ;; Hardware stack levels used:    1
 21680 ;; Hardware stack levels required when called:    3
 21681 ;; This function calls:
 21682 ;;		i2_lcdInst
 21683 ;;		i2_printf
 21684 ;; This function is called by:
 21685 ;;		_updateMenu
 21686 ;;		_inputHandler
 21687 ;; This function uses a non-reentrant model
 21688 ;;
 21689                           
 21690                           	psect	text76
 21691  0053F2                     __ptext76:
 21692                           	opt stack 0
 21693  0053F2                     _change_state_to_logs_11:
 21694                           	opt stack 18
 21695                           
 21696                           ;UI.c: 518: cur_state = 1011;
 21697                           
 21698                           ;incstack = 0
 21699  0053F2  0E03               	movlw	3
 21700  0053F4  0100               	movlb	0	; () banked
 21701  0053F6  6FED               	movwf	(_cur_state+1)& (0+255),b
 21702  0053F8  0EF3               	movlw	243
 21703  0053FA  6FEC               	movwf	_cur_state& (0+255),b
 21704                           
 21705                           ; BSR set to: 0
 21706                           ;UI.c: 519: lcdInst(0b10000000);;
 21707  0053FC  0E80               	movlw	128
 21708  0053FE  EC6D  F02B         	call	i2_lcdInst
 21709                           
 21710                           ;UI.c: 520: printf("LOG 1          <");
 21711  005402  0E79               	movlw	low STR_39
 21712  005404  6E0D               	movwf	i2printf@f,c
 21713  005406  0EFD               	movlw	high STR_39
 21714  005408  6E0E               	movwf	i2printf@f+1,c
 21715  00540A  EC97  F00F         	call	i2_printf	;wreg free
 21716                           
 21717                           ;UI.c: 521: lcdInst(0b11000000);;
 21718  00540E  0EC0               	movlw	192
 21719  005410  EC6D  F02B         	call	i2_lcdInst
 21720                           
 21721                           ;UI.c: 522: printf("LOG 2           ");
 21722  005414  0EE0               	movlw	low STR_40
 21723  005416  6E0D               	movwf	i2printf@f,c
 21724  005418  0EFC               	movlw	high STR_40
 21725  00541A  6E0E               	movwf	i2printf@f+1,c
 21726  00541C  EC97  F00F         	call	i2_printf	;wreg free
 21727  005420  0012               	return		;funcret
 21728  005422                     __end_of_change_state_to_logs_11:
 21729                           	opt stack 0
 21730                           pclatu	equ	0xFFB
 21731                           pclath	equ	0xFFA
 21732                           tblptru	equ	0xFF8
 21733                           tblptrh	equ	0xFF7
 21734                           tblptrl	equ	0xFF6
 21735                           tablat	equ	0xFF5
 21736                           prodh	equ	0xFF4
 21737                           prodl	equ	0xFF3
 21738                           intcon	equ	0xFF2
 21739                           intcon2	equ	0xFF1
 21740                           intcon3	equ	0xFF0
 21741                           indf0	equ	0xFEF
 21742                           postinc0	equ	0xFEE
 21743                           fsr0h	equ	0xFEA
 21744                           fsr0l	equ	0xFE9
 21745                           wreg	equ	0xFE8
 21746                           postdec1	equ	0xFE5
 21747                           fsr1h	equ	0xFE2
 21748                           fsr1l	equ	0xFE1
 21749                           indf2	equ	0xFDF
 21750                           postinc2	equ	0xFDE
 21751                           postdec2	equ	0xFDD
 21752                           fsr2h	equ	0xFDA
 21753                           fsr2l	equ	0xFD9
 21754                           status	equ	0xFD8
 21755                           
 21756 ;; *************** function _dispLogs *****************
 21757 ;; Defined at:
 21758 ;;		line 470 in file "UI.c"
 21759 ;; Parameters:    Size  Location     Type
 21760 ;;  myLog           2   17[COMRAM] int 
 21761 ;; Auto vars:     Size  Location     Type
 21762 ;;		None
 21763 ;; Return value:  Size  Location     Type
 21764 ;;                  1    wreg      void 
 21765 ;; Registers used:
 21766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21767 ;; Tracked objects:
 21768 ;;		On entry : 0/0
 21769 ;;		On exit  : 0/0
 21770 ;;		Unchanged: 0/0
 21771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21772 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21775 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21776 ;;Total ram usage:        2 bytes
 21777 ;; Hardware stack levels used:    1
 21778 ;; Hardware stack levels required when called:    2
 21779 ;; This function calls:
 21780 ;;		_retrieveLog
 21781 ;; This function is called by:
 21782 ;;		_updateMenu
 21783 ;; This function uses a non-reentrant model
 21784 ;;
 21785                           
 21786                           	psect	text77
 21787  00559C                     __ptext77:
 21788                           	opt stack 0
 21789  00559C                     _dispLogs:
 21790                           	opt stack 20
 21791                           
 21792                           ;UI.c: 471: logstate = 1;
 21793                           
 21794                           ;incstack = 0
 21795  00559C  0E00               	movlw	0
 21796  00559E  0100               	movlb	0	; () banked
 21797  0055A0  6FF9               	movwf	(_logstate+1)& (0+255),b
 21798  0055A2  0E01               	movlw	1
 21799  0055A4  6FF8               	movwf	_logstate& (0+255),b
 21800                           
 21801                           ; BSR set to: 0
 21802                           ;UI.c: 472: log = myLog;
 21803  0055A6  C012  F0F4         	movff	dispLogs@myLog,_log
 21804  0055AA  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 21805                           
 21806                           ; BSR set to: 0
 21807                           ;UI.c: 473: retrieveLog(myLog - 1);
 21808  0055AE  0EFF               	movlw	255
 21809  0055B0  2412               	addwf	dispLogs@myLog,w,c
 21810  0055B2  6E07               	movwf	retrieveLog@logNum,c
 21811  0055B4  0EFF               	movlw	255
 21812  0055B6  2013               	addwfc	dispLogs@myLog+1,w,c
 21813  0055B8  6E08               	movwf	retrieveLog@logNum+1,c
 21814  0055BA  ECFC  F01E         	call	_retrieveLog	;wreg free
 21815  0055BE  0012               	return		;funcret
 21816  0055C0                     __end_of_dispLogs:
 21817                           	opt stack 0
 21818                           pclatu	equ	0xFFB
 21819                           pclath	equ	0xFFA
 21820                           tblptru	equ	0xFF8
 21821                           tblptrh	equ	0xFF7
 21822                           tblptrl	equ	0xFF6
 21823                           tablat	equ	0xFF5
 21824                           prodh	equ	0xFF4
 21825                           prodl	equ	0xFF3
 21826                           intcon	equ	0xFF2
 21827                           intcon2	equ	0xFF1
 21828                           intcon3	equ	0xFF0
 21829                           indf0	equ	0xFEF
 21830                           postinc0	equ	0xFEE
 21831                           fsr0h	equ	0xFEA
 21832                           fsr0l	equ	0xFE9
 21833                           wreg	equ	0xFE8
 21834                           postdec1	equ	0xFE5
 21835                           fsr1h	equ	0xFE2
 21836                           fsr1l	equ	0xFE1
 21837                           indf2	equ	0xFDF
 21838                           postinc2	equ	0xFDE
 21839                           postdec2	equ	0xFDD
 21840                           fsr2h	equ	0xFDA
 21841                           fsr2l	equ	0xFD9
 21842                           status	equ	0xFD8
 21843                           
 21844 ;; *************** function _retrieveLog *****************
 21845 ;; Defined at:
 21846 ;;		line 134 in file "EEPROM.c"
 21847 ;; Parameters:    Size  Location     Type
 21848 ;;  logNum          2    6[COMRAM] int 
 21849 ;; Auto vars:     Size  Location     Type
 21850 ;;  i               2   13[COMRAM] int 
 21851 ;;  addr            2   15[COMRAM] unsigned short 
 21852 ;;  byte3           1   12[COMRAM] unsigned char 
 21853 ;;  byte2           1   11[COMRAM] unsigned char 
 21854 ;;  byte1           1   10[COMRAM] unsigned char 
 21855 ;; Return value:  Size  Location     Type
 21856 ;;                  1    wreg      void 
 21857 ;; Registers used:
 21858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21859 ;; Tracked objects:
 21860 ;;		On entry : 0/0
 21861 ;;		On exit  : 0/0
 21862 ;;		Unchanged: 0/0
 21863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21865 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21866 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21867 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21868 ;;Total ram usage:       11 bytes
 21869 ;; Hardware stack levels used:    1
 21870 ;; Hardware stack levels required when called:    1
 21871 ;; This function calls:
 21872 ;;		i2_EEPROM_read
 21873 ;;		i2___wmul
 21874 ;; This function is called by:
 21875 ;;		_dispLogs
 21876 ;; This function uses a non-reentrant model
 21877 ;;
 21878                           
 21879                           	psect	text78
 21880  003DF8                     __ptext78:
 21881                           	opt stack 0
 21882  003DF8                     _retrieveLog:
 21883                           	opt stack 20
 21884                           
 21885                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21886                           
 21887                           ;incstack = 0
 21888  003DF8  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21889  003DFC  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21890  003E00  0E00               	movlw	0
 21891  003E02  6E04               	movwf	i2___wmul@multiplicand+1,c
 21892  003E04  0E0B               	movlw	11
 21893  003E06  6E03               	movwf	i2___wmul@multiplicand,c
 21894  003E08  ECA8  F02A         	call	i2___wmul	;wreg free
 21895  003E0C  0E01               	movlw	1
 21896  003E0E  2401               	addwf	?i2___wmul,w,c
 21897  003E10  6E10               	movwf	retrieveLog@addr,c
 21898  003E12  0E00               	movlw	0
 21899  003E14  2002               	addwfc	?i2___wmul+1,w,c
 21900  003E16  6E11               	movwf	retrieveLog@addr+1,c
 21901                           
 21902                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21903  003E18  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21904  003E1C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21905  003E20  EC39  F02B         	call	i2_EEPROM_read	;wreg free
 21906  003E24  6E0B               	movwf	retrieveLog@byte1,c
 21907                           
 21908                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21909  003E26  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21910  003E2A  0E80               	movlw	128
 21911  003E2C  1609               	andwf	??_retrieveLog,f,c
 21912  003E2E  5009               	movf	??_retrieveLog,w,c
 21913  003E30  6E63               	movwf	_log_completion,c
 21914  003E32  6A64               	clrf	_log_completion+1,c
 21915                           
 21916                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21917  003E34  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21918  003E38  0E0F               	movlw	15
 21919  003E3A  1609               	andwf	??_retrieveLog,f,c
 21920  003E3C  5009               	movf	??_retrieveLog,w,c
 21921  003E3E  0101               	movlb	1	; () banked
 21922  003E40  6F43               	movwf	_log_count_total& (0+255),b
 21923  003E42  6B44               	clrf	(_log_count_total+1)& (0+255),b
 21924                           
 21925                           ; BSR set to: 1
 21926                           ;EEPROM.c: 146: addr++;
 21927  003E44  4A10               	infsnz	retrieveLog@addr,f,c
 21928  003E46  2A11               	incf	retrieveLog@addr+1,f,c
 21929                           
 21930                           ; BSR set to: 1
 21931                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21932  003E48  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21933  003E4C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21934  003E50  EC39  F02B         	call	i2_EEPROM_read	;wreg free
 21935  003E54  6E0C               	movwf	retrieveLog@byte2,c
 21936                           
 21937                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21938  003E56  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21939  003E5A  3A09               	swapf	??_retrieveLog,f,c
 21940  003E5C  0E0F               	movlw	15
 21941  003E5E  1609               	andwf	??_retrieveLog,f,c
 21942  003E60  0E0F               	movlw	15
 21943  003E62  1609               	andwf	??_retrieveLog,f,c
 21944  003E64  5009               	movf	??_retrieveLog,w,c
 21945  003E66  6E65               	movwf	_log_count_pop_no_tab,c
 21946  003E68  6A66               	clrf	_log_count_pop_no_tab+1,c
 21947                           
 21948                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21949  003E6A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21950  003E6E  0E0F               	movlw	15
 21951  003E70  1609               	andwf	??_retrieveLog,f,c
 21952  003E72  5009               	movf	??_retrieveLog,w,c
 21953  003E74  6E67               	movwf	_log_count_pop_w_tab,c
 21954  003E76  6A68               	clrf	_log_count_pop_w_tab+1,c
 21955                           
 21956                           ;EEPROM.c: 152: addr++;
 21957  003E78  4A10               	infsnz	retrieveLog@addr,f,c
 21958  003E7A  2A11               	incf	retrieveLog@addr+1,f,c
 21959                           
 21960                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21961  003E7C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21962  003E80  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21963  003E84  EC39  F02B         	call	i2_EEPROM_read	;wreg free
 21964  003E88  6E0D               	movwf	retrieveLog@byte3,c
 21965                           
 21966                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21967  003E8A  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21968  003E8E  3A09               	swapf	??_retrieveLog,f,c
 21969  003E90  0E0F               	movlw	15
 21970  003E92  1609               	andwf	??_retrieveLog,f,c
 21971  003E94  0E0F               	movlw	15
 21972  003E96  1609               	andwf	??_retrieveLog,f,c
 21973  003E98  5009               	movf	??_retrieveLog,w,c
 21974  003E9A  0101               	movlb	1	; () banked
 21975  003E9C  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 21976  003E9E  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 21977                           
 21978                           ; BSR set to: 1
 21979                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21980  003EA0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21981  003EA4  0E0F               	movlw	15
 21982  003EA6  1609               	andwf	??_retrieveLog,f,c
 21983  003EA8  5009               	movf	??_retrieveLog,w,c
 21984  003EAA  0101               	movlb	1	; () banked
 21985  003EAC  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 21986  003EAE  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 21987                           
 21988                           ; BSR set to: 1
 21989                           ;EEPROM.c: 156: addr++;
 21990  003EB0  4A10               	infsnz	retrieveLog@addr,f,c
 21991  003EB2  2A11               	incf	retrieveLog@addr+1,f,c
 21992                           
 21993                           ; BSR set to: 1
 21994                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21995  003EB4  0E00               	movlw	0
 21996  003EB6  6E0F               	movwf	retrieveLog@i+1,c
 21997  003EB8  0E00               	movlw	0
 21998  003EBA  6E0E               	movwf	retrieveLog@i,c
 21999  003EBC                     i2l7028:
 22000                           
 22001                           ; BSR set to: 1
 22002  003EBC  BE0F               	btfsc	retrieveLog@i+1,7,c
 22003  003EBE  D006               	goto	i2l7032
 22004  003EC0  500F               	movf	retrieveLog@i+1,w,c
 22005  003EC2  E11E               	bnz	i2l7040
 22006  003EC4  0E07               	movlw	7
 22007  003EC6  5C0E               	subwf	retrieveLog@i,w,c
 22008  003EC8  B0D8               	btfsc	status,0,c
 22009  003ECA  D01A               	goto	i2l7040
 22010  003ECC                     i2l7032:
 22011                           
 22012                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 22013  003ECC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22014  003ED0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22015  003ED4  EC39  F02B         	call	i2_EEPROM_read	;wreg free
 22016  003ED8  6E09               	movwf	??_retrieveLog& (0+255),c
 22017  003EDA  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 22018  003EDC  90D8               	bcf	status,0,c
 22019  003EDE  340E               	rlcf	retrieveLog@i,w,c
 22020  003EE0  6ED9               	movwf	fsr2l,c
 22021  003EE2  340F               	rlcf	retrieveLog@i+1,w,c
 22022  003EE4  6EDA               	movwf	fsr2h,c
 22023  003EE6  0E00               	movlw	low _log_startTime
 22024  003EE8  26D9               	addwf	fsr2l,f,c
 22025  003EEA  0E01               	movlw	high _log_startTime
 22026  003EEC  22DA               	addwfc	fsr2h,f,c
 22027  003EEE  C009  FFDE         	movff	??_retrieveLog,postinc2
 22028  003EF2  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 22029                           
 22030                           ;EEPROM.c: 161: addr++;
 22031  003EF6  4A10               	infsnz	retrieveLog@addr,f,c
 22032  003EF8  2A11               	incf	retrieveLog@addr+1,f,c
 22033  003EFA  4A0E               	infsnz	retrieveLog@i,f,c
 22034  003EFC  2A0F               	incf	retrieveLog@i+1,f,c
 22035  003EFE  D7DE               	goto	i2l7028
 22036  003F00                     i2l7040:
 22037                           
 22038                           ;EEPROM.c: 162: }
 22039                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 22040  003F00  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22041  003F04  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22042  003F08  EC39  F02B         	call	i2_EEPROM_read	;wreg free
 22043  003F0C  6E09               	movwf	??_retrieveLog& (0+255),c
 22044  003F0E  5009               	movf	??_retrieveLog,w,c
 22045  003F10  0100               	movlb	0	; () banked
 22046  003F12  6FF6               	movwf	_log_total_time& (0+255),b
 22047  003F14  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 22048                           
 22049                           ; BSR set to: 0
 22050  003F16  0012               	return		;funcret
 22051  003F18                     __end_of_retrieveLog:
 22052                           	opt stack 0
 22053                           pclatu	equ	0xFFB
 22054                           pclath	equ	0xFFA
 22055                           tblptru	equ	0xFF8
 22056                           tblptrh	equ	0xFF7
 22057                           tblptrl	equ	0xFF6
 22058                           tablat	equ	0xFF5
 22059                           prodh	equ	0xFF4
 22060                           prodl	equ	0xFF3
 22061                           intcon	equ	0xFF2
 22062                           intcon2	equ	0xFF1
 22063                           intcon3	equ	0xFF0
 22064                           indf0	equ	0xFEF
 22065                           postinc0	equ	0xFEE
 22066                           fsr0h	equ	0xFEA
 22067                           fsr0l	equ	0xFE9
 22068                           wreg	equ	0xFE8
 22069                           postdec1	equ	0xFE5
 22070                           fsr1h	equ	0xFE2
 22071                           fsr1l	equ	0xFE1
 22072                           indf2	equ	0xFDF
 22073                           postinc2	equ	0xFDE
 22074                           postdec2	equ	0xFDD
 22075                           fsr2h	equ	0xFDA
 22076                           fsr2l	equ	0xFD9
 22077                           status	equ	0xFD8
 22078                           
 22079 ;; *************** function i2_EEPROM_read *****************
 22080 ;; Defined at:
 22081 ;;		line 68 in file "EEPROM.c"
 22082 ;; Parameters:    Size  Location     Type
 22083 ;;  address         2    0[COMRAM] unsigned short 
 22084 ;; Auto vars:     Size  Location     Type
 22085 ;;		None
 22086 ;; Return value:  Size  Location     Type
 22087 ;;                  1    wreg      unsigned char 
 22088 ;; Registers used:
 22089 ;;		wreg, status,2
 22090 ;; Tracked objects:
 22091 ;;		On entry : 0/0
 22092 ;;		On exit  : 0/0
 22093 ;;		Unchanged: 0/0
 22094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22098 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22099 ;;Total ram usage:        2 bytes
 22100 ;; Hardware stack levels used:    1
 22101 ;; This function calls:
 22102 ;;		Nothing
 22103 ;; This function is called by:
 22104 ;;		_retrieveLog
 22105 ;; This function uses a non-reentrant model
 22106 ;;
 22107                           
 22108                           	psect	text79
 22109  005672                     __ptext79:
 22110                           	opt stack 0
 22111  005672                     i2_EEPROM_read:
 22112                           	opt stack 20
 22113                           
 22114                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 22115                           
 22116                           ; BSR set to: 0
 22117                           ;incstack = 0
 22118  005672  5002               	movf	i2EEPROM_read@address+1,w,c
 22119  005674  6EAA               	movwf	4010,c	;volatile
 22120                           
 22121                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 22122  005676  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 22123                           
 22124                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 22125  00567A  9EA6               	bcf	4006,7,c	;volatile
 22126                           
 22127                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 22128  00567C  9CA6               	bcf	4006,6,c	;volatile
 22129                           
 22130                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 22131  00567E  80A6               	bsf	4006,0,c	;volatile
 22132  005680                     i2l1098:
 22133  005680  B0A6               	btfsc	4006,0,c	;volatile
 22134  005682  D7FE               	goto	i2l1098
 22135                           
 22136                           ;EEPROM.c: 81: return EEDATA;
 22137  005684  50A8               	movf	4008,w,c	;volatile
 22138  005686  0012               	return	
 22139  005688                     __end_ofi2_EEPROM_read:
 22140                           	opt stack 0
 22141                           pclatu	equ	0xFFB
 22142                           pclath	equ	0xFFA
 22143                           tblptru	equ	0xFF8
 22144                           tblptrh	equ	0xFF7
 22145                           tblptrl	equ	0xFF6
 22146                           tablat	equ	0xFF5
 22147                           prodh	equ	0xFF4
 22148                           prodl	equ	0xFF3
 22149                           intcon	equ	0xFF2
 22150                           intcon2	equ	0xFF1
 22151                           intcon3	equ	0xFF0
 22152                           indf0	equ	0xFEF
 22153                           postinc0	equ	0xFEE
 22154                           fsr0h	equ	0xFEA
 22155                           fsr0l	equ	0xFE9
 22156                           wreg	equ	0xFE8
 22157                           postdec1	equ	0xFE5
 22158                           fsr1h	equ	0xFE2
 22159                           fsr1l	equ	0xFE1
 22160                           indf2	equ	0xFDF
 22161                           postinc2	equ	0xFDE
 22162                           postdec2	equ	0xFDD
 22163                           fsr2h	equ	0xFDA
 22164                           fsr2l	equ	0xFD9
 22165                           status	equ	0xFD8
 22166                           
 22167 ;; *************** function _updateArmState *****************
 22168 ;; Defined at:
 22169 ;;		line 606 in file "sort.c"
 22170 ;; Parameters:    Size  Location     Type
 22171 ;;		None
 22172 ;; Auto vars:     Size  Location     Type
 22173 ;;		None
 22174 ;; Return value:  Size  Location     Type
 22175 ;;                  1    wreg      void 
 22176 ;; Registers used:
 22177 ;;		wreg, status,2, status,0
 22178 ;; Tracked objects:
 22179 ;;		On entry : 0/0
 22180 ;;		On exit  : 0/0
 22181 ;;		Unchanged: 0/0
 22182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22185 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22186 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22187 ;;Total ram usage:        2 bytes
 22188 ;; Hardware stack levels used:    1
 22189 ;; This function calls:
 22190 ;;		Nothing
 22191 ;; This function is called by:
 22192 ;;		_handler
 22193 ;; This function uses a non-reentrant model
 22194 ;;
 22195                           
 22196                           	psect	text80
 22197  0050C8                     __ptext80:
 22198                           	opt stack 0
 22199  0050C8                     _updateArmState:
 22200                           	opt stack 23
 22201                           
 22202                           ;sort.c: 613: if(!was_low_2){
 22203                           
 22204                           ;incstack = 0
 22205  0050C8  5079               	movf	_was_low_2,w,c	;volatile
 22206  0050CA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 22207  0050CC  B4D8               	btfsc	status,2,c
 22208  0050CE  D007               	goto	i2l9716
 22209  0050D0  D016               	goto	i2l919
 22210  0050D2                     i2l9710:
 22211                           
 22212                           ;sort.c: 618: PR2 = 0x20;
 22213  0050D2  0E20               	movlw	32
 22214  0050D4  6ECB               	movwf	4043,c	;volatile
 22215                           
 22216                           ;sort.c: 619: break;
 22217  0050D6  0012               	return	
 22218  0050D8                     i2l9712:
 22219                           
 22220                           ;sort.c: 622: PR2 = 0x40;
 22221  0050D8  0E40               	movlw	64
 22222  0050DA  6ECB               	movwf	4043,c	;volatile
 22223                           
 22224                           ;sort.c: 624: }
 22225                           
 22226                           ;sort.c: 623: break;
 22227  0050DC  0012               	return	
 22228  0050DE                     i2l9716:
 22229  0050DE  C0EE  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 22230  0050E2  C0EF  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 22231                           
 22232                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22233                           ; Switch size 1, requested type "space"
 22234                           ; Number of cases is 1, Range of values is 0 to 0
 22235                           ; switch strategies available:
 22236                           ; Name         Instructions Cycles
 22237                           ; simple_byte            4     3 (average)
 22238                           ;	Chosen strategy is simple_byte
 22239  0050E6  5002               	movf	??_updateArmState+1,w,c
 22240  0050E8  0A00               	xorlw	0	; case 0
 22241  0050EA  A4D8               	btfss	status,2,c
 22242  0050EC  0012               	return	
 22243                           
 22244                           ; Switch size 1, requested type "space"
 22245                           ; Number of cases is 2, Range of values is 0 to 1
 22246                           ; switch strategies available:
 22247                           ; Name         Instructions Cycles
 22248                           ; simple_byte            7     4 (average)
 22249                           ;	Chosen strategy is simple_byte
 22250  0050EE  5001               	movf	??_updateArmState,w,c
 22251  0050F0  0A00               	xorlw	0	; case 0
 22252  0050F2  B4D8               	btfsc	status,2,c
 22253  0050F4  D7EE               	goto	i2l9710
 22254  0050F6  0A01               	xorlw	1	; case 1
 22255  0050F8  A4D8               	btfss	status,2,c
 22256                           
 22257                           ;sort.c: 625: }
 22258  0050FA  0012               	return	
 22259  0050FC  D7ED               	goto	i2l9712
 22260  0050FE                     i2l919:
 22261                           
 22262                           ;sort.c: 626: else{
 22263                           ;sort.c: 628: PR2 = 0xFF;
 22264  0050FE  68CB               	setf	4043,c	;volatile
 22265  005100  0012               	return	
 22266  005102                     __end_of_updateArmState:
 22267                           	opt stack 0
 22268                           pclatu	equ	0xFFB
 22269                           pclath	equ	0xFFA
 22270                           tblptru	equ	0xFF8
 22271                           tblptrh	equ	0xFF7
 22272                           tblptrl	equ	0xFF6
 22273                           tablat	equ	0xFF5
 22274                           prodh	equ	0xFF4
 22275                           prodl	equ	0xFF3
 22276                           intcon	equ	0xFF2
 22277                           intcon2	equ	0xFF1
 22278                           intcon3	equ	0xFF0
 22279                           indf0	equ	0xFEF
 22280                           postinc0	equ	0xFEE
 22281                           fsr0h	equ	0xFEA
 22282                           fsr0l	equ	0xFE9
 22283                           wreg	equ	0xFE8
 22284                           postdec1	equ	0xFE5
 22285                           fsr1h	equ	0xFE2
 22286                           fsr1l	equ	0xFE1
 22287                           indf2	equ	0xFDF
 22288                           postinc2	equ	0xFDE
 22289                           postdec2	equ	0xFDD
 22290                           fsr2h	equ	0xFDA
 22291                           fsr2l	equ	0xFD9
 22292                           status	equ	0xFD8
 22293                           
 22294 ;; *************** function _printSortTimer *****************
 22295 ;; Defined at:
 22296 ;;		line 456 in file "sort.c"
 22297 ;; Parameters:    Size  Location     Type
 22298 ;;		None
 22299 ;; Auto vars:     Size  Location     Type
 22300 ;;  i               2   70[COMRAM] int 
 22301 ;;  i               2   72[COMRAM] int 
 22302 ;;  curTime        14   44[COMRAM] int [7]
 22303 ;;  timeDiff        2   68[COMRAM] unsigned int 
 22304 ;;  sec             2   64[COMRAM] int 
 22305 ;;  min             2   62[COMRAM] int 
 22306 ;;  cur_sec         2   60[COMRAM] unsigned int 
 22307 ;;  start_sec       2   58[COMRAM] unsigned int 
 22308 ;; Return value:  Size  Location     Type
 22309 ;;                  1    wreg      void 
 22310 ;; Registers used:
 22311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22312 ;; Tracked objects:
 22313 ;;		On entry : 0/0
 22314 ;;		On exit  : 0/0
 22315 ;;		Unchanged: 0/0
 22316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22318 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22319 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22320 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22321 ;;Total ram usage:       33 bytes
 22322 ;; Hardware stack levels used:    1
 22323 ;; Hardware stack levels required when called:    3
 22324 ;; This function calls:
 22325 ;;		i2___lwdiv
 22326 ;;		i2___lwmod
 22327 ;;		i2___wmul
 22328 ;;		i2_delay_ms
 22329 ;;		i2_getRTC
 22330 ;;		i2_lcdInst
 22331 ;;		i2_printf
 22332 ;; This function is called by:
 22333 ;;		_handler
 22334 ;; This function uses a non-reentrant model
 22335 ;;
 22336                           
 22337                           	psect	text81
 22338  002E3A                     __ptext81:
 22339                           	opt stack 0
 22340  002E3A                     _printSortTimer:
 22341                           	opt stack 20
 22342                           
 22343                           ;sort.c: 457: getRTC();
 22344                           
 22345                           ;incstack = 0
 22346  002E3A  ECC1  F025         	call	i2_getRTC	;wreg free
 22347                           
 22348                           ;sort.c: 458: int curTime[7];
 22349                           ;sort.c: 459: for(int i = 0; i < 7; i++){
 22350  002E3E  0E00               	movlw	0
 22351  002E40  6E4A               	movwf	printSortTimer@i+1,c
 22352  002E42  0E00               	movlw	0
 22353  002E44  6E49               	movwf	printSortTimer@i,c
 22354  002E46                     i2l9552:
 22355  002E46  BE4A               	btfsc	printSortTimer@i+1,7,c
 22356  002E48  D006               	goto	i2l9556
 22357  002E4A  504A               	movf	printSortTimer@i+1,w,c
 22358  002E4C  E131               	bnz	i2l9562
 22359  002E4E  0E07               	movlw	7
 22360  002E50  5C49               	subwf	printSortTimer@i,w,c
 22361  002E52  B0D8               	btfsc	status,0,c
 22362  002E54  D02D               	goto	i2l9562
 22363  002E56                     i2l9556:
 22364                           
 22365                           ;sort.c: 460: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 22366  002E56  0E1C               	movlw	low _time
 22367  002E58  2449               	addwf	printSortTimer@i,w,c
 22368  002E5A  6ED9               	movwf	fsr2l,c
 22369  002E5C  0E01               	movlw	high _time
 22370  002E5E  204A               	addwfc	printSortTimer@i+1,w,c
 22371  002E60  6EDA               	movwf	fsr2h,c
 22372  002E62  50DF               	movf	indf2,w,c
 22373  002E64  6E2A               	movwf	??_printSortTimer& (0+255),c
 22374  002E66  3A2A               	swapf	??_printSortTimer,f,c
 22375  002E68  0E0F               	movlw	15
 22376  002E6A  162A               	andwf	??_printSortTimer,f,c
 22377  002E6C  0E0F               	movlw	15
 22378  002E6E  162A               	andwf	??_printSortTimer,f,c
 22379  002E70  502A               	movf	??_printSortTimer,w,c
 22380  002E72  0D0A               	mullw	10
 22381  002E74  0E1C               	movlw	low _time
 22382  002E76  2449               	addwf	printSortTimer@i,w,c
 22383  002E78  6ED9               	movwf	fsr2l,c
 22384  002E7A  0E01               	movlw	high _time
 22385  002E7C  204A               	addwfc	printSortTimer@i+1,w,c
 22386  002E7E  6EDA               	movwf	fsr2h,c
 22387  002E80  50DF               	movf	indf2,w,c
 22388  002E82  0B0F               	andlw	15
 22389  002E84  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22390  002E86  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 22391  002E88  50F3               	movf	prodl,w,c
 22392  002E8A  262B               	addwf	??_printSortTimer+1,f,c
 22393  002E8C  50F4               	movf	prodh,w,c
 22394  002E8E  222C               	addwfc	??_printSortTimer+2,f,c
 22395  002E90  90D8               	bcf	status,0,c
 22396  002E92  3449               	rlcf	printSortTimer@i,w,c
 22397  002E94  6ED9               	movwf	fsr2l,c
 22398  002E96  344A               	rlcf	printSortTimer@i+1,w,c
 22399  002E98  6EDA               	movwf	fsr2h,c
 22400  002E9A  0E2D               	movlw	low printSortTimer@curTime
 22401  002E9C  26D9               	addwf	fsr2l,f,c
 22402  002E9E  0E00               	movlw	high printSortTimer@curTime
 22403  002EA0  22DA               	addwfc	fsr2h,f,c
 22404  002EA2  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 22405  002EA6  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 22406  002EAA  4A49               	infsnz	printSortTimer@i,f,c
 22407  002EAC  2A4A               	incf	printSortTimer@i+1,f,c
 22408  002EAE  D7CB               	goto	i2l9552
 22409  002EB0                     i2l9562:
 22410                           
 22411                           ;sort.c: 461: }
 22412                           ;sort.c: 462: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 22413  002EB0  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 22414  002EB4  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 22415  002EB8  0E00               	movlw	0
 22416  002EBA  6E04               	movwf	i2___wmul@multiplicand+1,c
 22417  002EBC  0E3C               	movlw	60
 22418  002EBE  6E03               	movwf	i2___wmul@multiplicand,c
 22419  002EC0  ECA8  F02A         	call	i2___wmul	;wreg free
 22420  002EC4  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22421  002EC8  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22422  002ECC  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 22423  002ED0  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 22424  002ED4  0E0E               	movlw	14
 22425  002ED6  6E04               	movwf	i2___wmul@multiplicand+1,c
 22426  002ED8  0E10               	movlw	16
 22427  002EDA  6E03               	movwf	i2___wmul@multiplicand,c
 22428  002EDC  ECA8  F02A         	call	i2___wmul	;wreg free
 22429  002EE0  5001               	movf	?i2___wmul,w,c
 22430  002EE2  262A               	addwf	??_printSortTimer,f,c
 22431  002EE4  5002               	movf	?i2___wmul+1,w,c
 22432  002EE6  222B               	addwfc	??_printSortTimer+1,f,c
 22433  002EE8  0101               	movlb	1	; () banked
 22434  002EEA  510E               	movf	_startTime& (0+255),w,b
 22435  002EEC  242A               	addwf	??_printSortTimer,w,c
 22436  002EEE  6E3B               	movwf	printSortTimer@start_sec,c
 22437  002EF0  0101               	movlb	1	; () banked
 22438  002EF2  510F               	movf	(_startTime+1)& (0+255),w,b
 22439  002EF4  202B               	addwfc	??_printSortTimer+1,w,c
 22440  002EF6  6E3C               	movwf	printSortTimer@start_sec+1,c
 22441                           
 22442                           ;sort.c: 463: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 22443  002EF8  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 22444  002EFC  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 22445  002F00  0E00               	movlw	0
 22446  002F02  6E04               	movwf	i2___wmul@multiplicand+1,c
 22447  002F04  0E3C               	movlw	60
 22448  002F06  6E03               	movwf	i2___wmul@multiplicand,c
 22449  002F08  ECA8  F02A         	call	i2___wmul	;wreg free
 22450  002F0C  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22451  002F10  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22452  002F14  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 22453  002F18  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 22454  002F1C  0E0E               	movlw	14
 22455  002F1E  6E04               	movwf	i2___wmul@multiplicand+1,c
 22456  002F20  0E10               	movlw	16
 22457  002F22  6E03               	movwf	i2___wmul@multiplicand,c
 22458  002F24  ECA8  F02A         	call	i2___wmul	;wreg free
 22459  002F28  5001               	movf	?i2___wmul,w,c
 22460  002F2A  262A               	addwf	??_printSortTimer,f,c
 22461  002F2C  5002               	movf	?i2___wmul+1,w,c
 22462  002F2E  222B               	addwfc	??_printSortTimer+1,f,c
 22463  002F30  502D               	movf	printSortTimer@curTime,w,c
 22464  002F32  242A               	addwf	??_printSortTimer,w,c
 22465  002F34  6E3D               	movwf	printSortTimer@cur_sec,c
 22466  002F36  502E               	movf	printSortTimer@curTime+1,w,c
 22467  002F38  202B               	addwfc	??_printSortTimer+1,w,c
 22468  002F3A  6E3E               	movwf	printSortTimer@cur_sec+1,c
 22469                           
 22470                           ;sort.c: 464: unsigned int timeDiff = cur_sec - start_sec;
 22471  002F3C  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 22472  002F40  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 22473  002F44  1E2A               	comf	??_printSortTimer,f,c
 22474  002F46  1E2B               	comf	??_printSortTimer+1,f,c
 22475  002F48  4A2A               	infsnz	??_printSortTimer,f,c
 22476  002F4A  2A2B               	incf	??_printSortTimer+1,f,c
 22477  002F4C  503D               	movf	printSortTimer@cur_sec,w,c
 22478  002F4E  242A               	addwf	??_printSortTimer,w,c
 22479  002F50  6E45               	movwf	printSortTimer@timeDiff,c
 22480  002F52  503E               	movf	printSortTimer@cur_sec+1,w,c
 22481  002F54  202B               	addwfc	??_printSortTimer+1,w,c
 22482  002F56  6E46               	movwf	printSortTimer@timeDiff+1,c
 22483                           
 22484                           ;sort.c: 466: total_time = timeDiff;
 22485  002F58  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 22486  002F5C  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 22487                           
 22488                           ;sort.c: 468: if(f_most_recent_sort_time){
 22489  002F60  0101               	movlb	1	; () banked
 22490  002F62  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 22491  002F64  0101               	movlb	1	; () banked
 22492  002F66  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 22493  002F68  B4D8               	btfsc	status,2,c
 22494  002F6A  D009               	goto	i2l9574
 22495                           
 22496                           ; BSR set to: 1
 22497                           ;sort.c: 469: most_recent_sort_time = total_time;
 22498  002F6C  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 22499  002F70  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 22500                           
 22501                           ; BSR set to: 1
 22502                           ;sort.c: 470: f_most_recent_sort_time = 0;
 22503  002F74  0E00               	movlw	0
 22504  002F76  0101               	movlb	1	; () banked
 22505  002F78  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 22506  002F7A  0E00               	movlw	0
 22507  002F7C  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 22508  002F7E                     i2l9574:
 22509                           
 22510                           ; BSR set to: 1
 22511                           ;sort.c: 471: }
 22512                           ;sort.c: 473: if(total_time - most_recent_sort_time == 20){
 22513  002F7E  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22514  002F82  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22515  002F86  1E2A               	comf	??_printSortTimer,f,c
 22516  002F88  1E2B               	comf	??_printSortTimer+1,f,c
 22517  002F8A  4A2A               	infsnz	??_printSortTimer,f,c
 22518  002F8C  2A2B               	incf	??_printSortTimer+1,f,c
 22519  002F8E  0100               	movlb	0	; () banked
 22520  002F90  51FA               	movf	_total_time& (0+255),w,b
 22521  002F92  262A               	addwf	??_printSortTimer,f,c
 22522  002F94  0100               	movlb	0	; () banked
 22523  002F96  51FB               	movf	(_total_time+1)& (0+255),w,b
 22524  002F98  222B               	addwfc	??_printSortTimer+1,f,c
 22525  002F9A  0E14               	movlw	20
 22526  002F9C  182A               	xorwf	??_printSortTimer,w,c
 22527  002F9E  102B               	iorwf	??_printSortTimer+1,w,c
 22528  002FA0  A4D8               	btfss	status,2,c
 22529  002FA2  D033               	goto	i2l9594
 22530                           
 22531                           ; BSR set to: 0
 22532                           ;sort.c: 474: LATBbits.LATB2 = 0;
 22533  002FA4  948A               	bcf	3978,2,c	;volatile
 22534                           
 22535                           ; BSR set to: 0
 22536                           ;sort.c: 475: _delay((unsigned long)((2000)*(32000000/4000.0)));
 22537  002FA6  0E52               	movlw	82
 22538  002FA8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22539  002FAA  0E2B               	movlw	43
 22540  002FAC  6E2A               	movwf	??_printSortTimer& (0+255),c
 22541  002FAE  0E00               	movlw	0
 22542  002FB0                     i2u1073_47:
 22543  002FB0  2EE8               	decfsz	wreg,f,c
 22544  002FB2  D7FE               	bra	i2u1073_47
 22545  002FB4  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 22546  002FB6  D7FC               	bra	i2u1073_47
 22547  002FB8  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 22548  002FBA  D7FA               	bra	i2u1073_47
 22549  002FBC  D000               	nop2	
 22550                           
 22551                           ;sort.c: 476: for(int i=0; i<46; i++){
 22552  002FBE  0E00               	movlw	0
 22553  002FC0  6E48               	movwf	printSortTimer@i_1221+1,c
 22554  002FC2  0E00               	movlw	0
 22555  002FC4  6E47               	movwf	printSortTimer@i_1221,c
 22556  002FC6  BE48               	btfsc	printSortTimer@i_1221+1,7,c
 22557  002FC8  D006               	goto	i2l9586
 22558  002FCA  5048               	movf	printSortTimer@i_1221+1,w,c
 22559  002FCC  E11D               	bnz	i2l871
 22560  002FCE  0E2E               	movlw	46
 22561  002FD0  5C47               	subwf	printSortTimer@i_1221,w,c
 22562  002FD2  B0D8               	btfsc	status,0,c
 22563  002FD4  D019               	goto	i2l871
 22564  002FD6                     i2l9586:
 22565                           
 22566                           ;sort.c: 477: LATBbits.LATB2 = !LATBbits.LATB2;
 22567  002FD6  B48A               	btfsc	3978,2,c	;volatile
 22568  002FD8  D003               	goto	i2u882_40
 22569  002FDA  6A2A               	clrf	??_printSortTimer& (0+255),c
 22570  002FDC  2A2A               	incf	??_printSortTimer& (0+255),f,c
 22571  002FDE  D001               	goto	i2u883_48
 22572  002FE0                     i2u882_40:
 22573  002FE0  6A2A               	clrf	??_printSortTimer& (0+255),c
 22574  002FE2                     i2u883_48:
 22575  002FE2  462A               	rlncf	??_printSortTimer,f,c
 22576  002FE4  462A               	rlncf	??_printSortTimer,f,c
 22577  002FE6  508A               	movf	3978,w,c	;volatile
 22578  002FE8  182A               	xorwf	??_printSortTimer,w,c
 22579  002FEA  0BFB               	andlw	-5
 22580  002FEC  182A               	xorwf	??_printSortTimer,w,c
 22581  002FEE  6E8A               	movwf	3978,c	;volatile
 22582                           
 22583                           ;sort.c: 478: delay_ms(45-i);
 22584  002FF0  5047               	movf	printSortTimer@i_1221,w,c
 22585  002FF2  0800               	sublw	0
 22586  002FF4  0F2D               	addlw	45
 22587  002FF6  EC1F  F02B         	call	i2_delay_ms
 22588  002FFA  4A47               	infsnz	printSortTimer@i_1221,f,c
 22589  002FFC  2A48               	incf	printSortTimer@i_1221+1,f,c
 22590  002FFE  BE48               	btfsc	printSortTimer@i_1221+1,7,c
 22591  003000  D7EA               	goto	i2l9586
 22592  003002  5048               	movf	printSortTimer@i_1221+1,w,c
 22593  003004  E101               	bnz	i2u884_40
 22594  003006  D7E3               	goto	L19
 22595  003008                     i2u884_40:
 22596  003008                     i2l871:
 22597                           
 22598                           ;sort.c: 479: }
 22599                           ;sort.c: 480: LATBbits.LATB2 = 1;
 22600  003008  848A               	bsf	3978,2,c	;volatile
 22601  00300A                     i2l9594:
 22602                           
 22603                           ;sort.c: 481: }
 22604                           ;sort.c: 483: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 22605  00300A  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22606  00300E  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22607  003012  1E2A               	comf	??_printSortTimer,f,c
 22608  003014  1E2B               	comf	??_printSortTimer+1,f,c
 22609  003016  4A2A               	infsnz	??_printSortTimer,f,c
 22610  003018  2A2B               	incf	??_printSortTimer+1,f,c
 22611  00301A  0100               	movlb	0	; () banked
 22612  00301C  51FA               	movf	_total_time& (0+255),w,b
 22613  00301E  262A               	addwf	??_printSortTimer,f,c
 22614  003020  0100               	movlb	0	; () banked
 22615  003022  51FB               	movf	(_total_time+1)& (0+255),w,b
 22616  003024  222B               	addwfc	??_printSortTimer+1,f,c
 22617  003026  0E2A               	movlw	42
 22618  003028  182A               	xorwf	??_printSortTimer,w,c
 22619  00302A  102B               	iorwf	??_printSortTimer+1,w,c
 22620  00302C  B4D8               	btfsc	status,2,c
 22621  00302E  D007               	goto	i2l9598
 22622                           
 22623                           ; BSR set to: 0
 22624  003030  0EB3               	movlw	179
 22625  003032  0100               	movlb	0	; () banked
 22626  003034  19FA               	xorwf	_total_time& (0+255),w,b
 22627  003036  0100               	movlb	0	; () banked
 22628  003038  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 22629  00303A  A4D8               	btfss	status,2,c
 22630  00303C  D003               	goto	i2l9600
 22631  00303E                     i2l9598:
 22632                           
 22633                           ; BSR set to: 0
 22634                           ;sort.c: 484: machine_state = DoneSorting_state;
 22635  00303E  0E02               	movlw	2
 22636  003040  0100               	movlb	0	; () banked
 22637  003042  6FFC               	movwf	_machine_state& (0+255),b
 22638  003044                     i2l9600:
 22639                           
 22640                           ; BSR set to: 0
 22641                           ;sort.c: 486: }
 22642                           ;sort.c: 488: int min = (timeDiff % 3600) / 60;
 22643  003044  0E0E               	movlw	14
 22644  003046  6E04               	movwf	i2___lwmod@divisor+1,c
 22645  003048  0E10               	movlw	16
 22646  00304A  6E03               	movwf	i2___lwmod@divisor,c
 22647  00304C  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22648  003050  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22649  003054  EC43  F028         	call	i2___lwmod	;wreg free
 22650  003058  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 22651  00305C  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 22652  003060  0E00               	movlw	0
 22653  003062  6E09               	movwf	i2___lwdiv@divisor+1,c
 22654  003064  0E3C               	movlw	60
 22655  003066  6E08               	movwf	i2___lwdiv@divisor,c
 22656  003068  EC84  F027         	call	i2___lwdiv	;wreg free
 22657  00306C  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 22658  003070  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 22659                           
 22660                           ;sort.c: 489: int sec = (timeDiff % 3600) % 60;
 22661  003074  0E0E               	movlw	14
 22662  003076  6E04               	movwf	i2___lwmod@divisor+1,c
 22663  003078  0E10               	movlw	16
 22664  00307A  6E03               	movwf	i2___lwmod@divisor,c
 22665  00307C  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22666  003080  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22667  003084  EC43  F028         	call	i2___lwmod	;wreg free
 22668  003088  C001  F043         	movff	?i2___lwmod,_printSortTimer$2578
 22669  00308C  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2578+1
 22670                           
 22671                           ;sort.c: 489: int sec = (timeDiff % 3600) % 60;
 22672  003090  C043  F001         	movff	_printSortTimer$2578,i2___lwmod@dividend
 22673  003094  C044  F002         	movff	_printSortTimer$2578+1,i2___lwmod@dividend+1
 22674  003098  0E00               	movlw	0
 22675  00309A  6E04               	movwf	i2___lwmod@divisor+1,c
 22676  00309C  0E3C               	movlw	60
 22677  00309E  6E03               	movwf	i2___lwmod@divisor,c
 22678  0030A0  EC43  F028         	call	i2___lwmod	;wreg free
 22679  0030A4  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 22680  0030A8  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22681                           
 22682                           ;sort.c: 491: lcdInst(0b10000000);;
 22683  0030AC  0E80               	movlw	128
 22684  0030AE  EC6D  F02B         	call	i2_lcdInst
 22685                           
 22686                           ;sort.c: 492: printf("SORTING...");
 22687  0030B2  0E7B               	movlw	low STR_64
 22688  0030B4  6E0D               	movwf	i2printf@f,c
 22689  0030B6  0EFF               	movlw	high STR_64
 22690  0030B8  6E0E               	movwf	i2printf@f+1,c
 22691  0030BA  EC97  F00F         	call	i2_printf	;wreg free
 22692                           
 22693                           ;sort.c: 493: lcdInst(0b11000000);;
 22694  0030BE  0EC0               	movlw	192
 22695  0030C0  EC6D  F02B         	call	i2_lcdInst
 22696                           
 22697                           ;sort.c: 494: printf("TIME %d:%02d", min, sec);
 22698  0030C4  0E4C               	movlw	low STR_65
 22699  0030C6  6E0D               	movwf	i2printf@f,c
 22700  0030C8  0EFF               	movlw	high STR_65
 22701  0030CA  6E0E               	movwf	i2printf@f+1,c
 22702  0030CC  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22703  0030D0  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22704  0030D4  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22705  0030D8  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22706  0030DC  EC97  F00F         	call	i2_printf	;wreg free
 22707  0030E0  0012               	return		;funcret
 22708  0030E2                     __end_of_printSortTimer:
 22709                           	opt stack 0
 22710                           pclatu	equ	0xFFB
 22711                           pclath	equ	0xFFA
 22712                           tblptru	equ	0xFF8
 22713                           tblptrh	equ	0xFF7
 22714                           tblptrl	equ	0xFF6
 22715                           tablat	equ	0xFF5
 22716                           prodh	equ	0xFF4
 22717                           prodl	equ	0xFF3
 22718                           intcon	equ	0xFF2
 22719                           intcon2	equ	0xFF1
 22720                           intcon3	equ	0xFF0
 22721                           indf0	equ	0xFEF
 22722                           postinc0	equ	0xFEE
 22723                           fsr0h	equ	0xFEA
 22724                           fsr0l	equ	0xFE9
 22725                           wreg	equ	0xFE8
 22726                           postdec1	equ	0xFE5
 22727                           fsr1h	equ	0xFE2
 22728                           fsr1l	equ	0xFE1
 22729                           indf2	equ	0xFDF
 22730                           postinc2	equ	0xFDE
 22731                           postdec2	equ	0xFDD
 22732                           fsr2h	equ	0xFDA
 22733                           fsr2l	equ	0xFD9
 22734                           status	equ	0xFD8
 22735                           
 22736 ;; *************** function i2_printf *****************
 22737 ;; Defined at:
 22738 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22739 ;; Parameters:    Size  Location     Type
 22740 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22741 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 22742 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 22743 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 22744 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 22745 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 22746 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 22747 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 22748 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 22749 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 22750 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 22751 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 22752 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 22753 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 22754 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 22755 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 22756 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 22757 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 22758 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 22759 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 22760 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 22761 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 22762 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 22763 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 22764 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 22765 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 22766 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 22767 ;; Auto vars:     Size  Location     Type
 22768 ;;  printf          4    0        struct .
 22769 ;;  printf          2   39[COMRAM] int 
 22770 ;;  printf          2   35[COMRAM] unsigned int 
 22771 ;;  printf          2   33[COMRAM] unsigned int 
 22772 ;;  printf          2   31[COMRAM] PTR void [1]
 22773 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22774 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 22775 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 22776 ;;  printf          1   38[COMRAM] char 
 22777 ;;  printf          1   37[COMRAM] unsigned char 
 22778 ;;  printf          1   28[COMRAM] char 
 22779 ;; Return value:  Size  Location     Type
 22780 ;;                  2   12[COMRAM] int 
 22781 ;; Registers used:
 22782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22783 ;; Tracked objects:
 22784 ;;		On entry : 0/0
 22785 ;;		On exit  : 0/0
 22786 ;;		Unchanged: 0/0
 22787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22788 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22789 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22790 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22791 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22792 ;;Total ram usage:       29 bytes
 22793 ;; Hardware stack levels used:    1
 22794 ;; Hardware stack levels required when called:    2
 22795 ;; This function calls:
 22796 ;;		i2___lwdiv
 22797 ;;		i2___lwmod
 22798 ;;		i2___wmul
 22799 ;;		i2_isdigit
 22800 ;;		i2_putch
 22801 ;; This function is called by:
 22802 ;;		_change_state_to_menu_11
 22803 ;;		_change_state_to_menu_23
 22804 ;;		_change_state_to_logs_11
 22805 ;;		_change_state_to_logs_12
 22806 ;;		_change_state_to_logs_22
 22807 ;;		_change_state_to_logs_23
 22808 ;;		_change_state_to_logs_33
 22809 ;;		_change_state_to_logs_34
 22810 ;;		_printSortTimer
 22811 ;;		i2_change_state_to_menu_start
 22812 ;;		i2_change_state_to_menu_12
 22813 ;;		i2_change_state_to_menu_22
 22814 ;;		i2_printRTC
 22815 ;; This function uses a non-reentrant model
 22816 ;;
 22817                           
 22818                           	psect	text82
 22819  001F2E                     __ptext82:
 22820                           	opt stack 0
 22821  001F2E                     i2_printf:
 22822                           	opt stack 20
 22823                           
 22824                           ;doprnt.c: 466: va_list ap;
 22825                           ;doprnt.c: 499: signed char c;
 22826                           ;doprnt.c: 501: int width;
 22827                           ;doprnt.c: 506: signed char prec;
 22828                           ;doprnt.c: 508: unsigned char flag;
 22829                           ;doprnt.c: 523: union {
 22830                           ;doprnt.c: 524: unsigned long vd;
 22831                           ;doprnt.c: 525: double integ;
 22832                           ;doprnt.c: 526: } tmpval;
 22833                           ;doprnt.c: 528: unsigned int val;
 22834                           ;doprnt.c: 529: unsigned len;
 22835                           ;doprnt.c: 530: const char * cp;
 22836                           ;doprnt.c: 533: *ap = __va_start();
 22837                           
 22838                           ;incstack = 0
 22839  001F2E  0E0F               	movlw	low (?i2_printf+2)
 22840  001F30  6E20               	movwf	i2printf@ap,c
 22841  001F32  0E00               	movlw	high (?i2_printf+2)
 22842  001F34  6E21               	movwf	i2printf@ap+1,c
 22843                           
 22844                           ;doprnt.c: 536: while(c = *f++) {
 22845  001F36  D1A4               	goto	i2l6852
 22846  001F38                     i2l6722:
 22847                           
 22848                           ;doprnt.c: 538: if(c != '%')
 22849  001F38  0E25               	movlw	37
 22850  001F3A  1827               	xorwf	i2printf@c,w,c
 22851  001F3C  B4D8               	btfsc	status,2,c
 22852  001F3E  D004               	goto	i2l6726
 22853                           
 22854                           ;doprnt.c: 540: {
 22855                           ;doprnt.c: 541: (putch(c) );
 22856  001F40  5027               	movf	i2printf@c,w,c
 22857  001F42  EC67  F02B         	call	i2_putch
 22858                           
 22859                           ;doprnt.c: 542: continue;
 22860  001F46  D19C               	goto	i2l6852
 22861  001F48                     i2l6726:
 22862                           
 22863                           ;doprnt.c: 543: }
 22864                           ;doprnt.c: 546: width = 0;
 22865  001F48  0E00               	movlw	0
 22866  001F4A  6E29               	movwf	i2printf@width+1,c
 22867  001F4C  0E00               	movlw	0
 22868  001F4E  6E28               	movwf	i2printf@width,c
 22869                           
 22870                           ;doprnt.c: 548: flag = 0;
 22871  001F50  0E00               	movlw	0
 22872  001F52  6E26               	movwf	i2printf@flag,c
 22873                           
 22874                           ;doprnt.c: 551: switch(*f) {
 22875                           
 22876                           ;doprnt.c: 550: for(;;) {
 22877  001F54  D003               	goto	i2l6732
 22878  001F56                     i2l6728:
 22879                           
 22880                           ;doprnt.c: 580: flag |= 0x04;
 22881  001F56  8426               	bsf	i2printf@flag,2,c
 22882                           
 22883                           ;doprnt.c: 581: f++;
 22884  001F58  4A0D               	infsnz	i2printf@f,f,c
 22885  001F5A  2A0E               	incf	i2printf@f+1,f,c
 22886  001F5C                     i2l6732:
 22887  001F5C  C00D  FFF6         	movff	i2printf@f,tblptrl
 22888  001F60  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22889  001F64                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22890  001F64  6AF8               	clrf	tblptru,c
 22891  001F66                     	endif
 22892  001F66                     	if	0	;tblptru may be non-zero
 22893  001F66                     	endif
 22894  001F66  0008               	tblrd		*
 22895  001F68  50F5               	movf	tablat,w,c
 22896                           
 22897                           ; Switch size 1, requested type "space"
 22898                           ; Number of cases is 1, Range of values is 48 to 48
 22899                           ; switch strategies available:
 22900                           ; Name         Instructions Cycles
 22901                           ; simple_byte            4     3 (average)
 22902                           ;	Chosen strategy is simple_byte
 22903  001F6A  0A30               	xorlw	48	; case 48
 22904  001F6C  B4D8               	btfsc	status,2,c
 22905  001F6E  D7F3               	goto	i2l6728
 22906                           
 22907                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22908                           
 22909                           ;doprnt.c: 586: }
 22910                           
 22911                           ;doprnt.c: 585: break;
 22912  001F70  C00D  FFF6         	movff	i2printf@f,tblptrl
 22913  001F74  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22914  001F78                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22915  001F78  6AF8               	clrf	tblptru,c
 22916  001F7A                     	endif
 22917  001F7A                     	if	0	;tblptru may be non-zero
 22918  001F7A                     	endif
 22919  001F7A  0008               	tblrd		*
 22920  001F7C  50F5               	movf	tablat,w,c
 22921  001F7E  EC02  F02B         	call	i2_isdigit
 22922  001F82  A0D8               	btfss	status,0,c
 22923  001F84  D0A6               	goto	i2l6780
 22924                           
 22925                           ;doprnt.c: 598: width = 0;
 22926  001F86  0E00               	movlw	0
 22927  001F88  6E29               	movwf	i2printf@width+1,c
 22928  001F8A  0E00               	movlw	0
 22929  001F8C  6E28               	movwf	i2printf@width,c
 22930  001F8E                     i2l6738:
 22931                           
 22932                           ;doprnt.c: 600: width *= 10;
 22933  001F8E  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22934  001F92  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22935  001F96  0E00               	movlw	0
 22936  001F98  6E04               	movwf	i2___wmul@multiplicand+1,c
 22937  001F9A  0E0A               	movlw	10
 22938  001F9C  6E03               	movwf	i2___wmul@multiplicand,c
 22939  001F9E  ECA8  F02A         	call	i2___wmul	;wreg free
 22940  001FA2  C001  F028         	movff	?i2___wmul,i2printf@width
 22941  001FA6  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22942                           
 22943                           ;doprnt.c: 601: width += *f++ - '0';
 22944  001FAA  0ED0               	movlw	208
 22945  001FAC  6E19               	movwf	??i2_printf& (0+255),c
 22946  001FAE  0EFF               	movlw	255
 22947  001FB0  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22948  001FB2  C00D  FFF6         	movff	i2printf@f,tblptrl
 22949  001FB6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22950  001FBA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22951  001FBA  6AF8               	clrf	tblptru,c
 22952  001FBC                     	endif
 22953  001FBC                     	if	0	;tblptru may be non-zero
 22954  001FBC                     	endif
 22955  001FBC  0008               	tblrd		*
 22956  001FBE  50F5               	movf	tablat,w,c
 22957  001FC0  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22958  001FC2  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22959  001FC4  5019               	movf	??i2_printf,w,c
 22960  001FC6  261B               	addwf	??i2_printf+2,f,c
 22961  001FC8  501A               	movf	??i2_printf+1,w,c
 22962  001FCA  221C               	addwfc	??i2_printf+3,f,c
 22963  001FCC  501B               	movf	??i2_printf+2,w,c
 22964  001FCE  2628               	addwf	i2printf@width,f,c
 22965  001FD0  501C               	movf	??i2_printf+3,w,c
 22966  001FD2  2229               	addwfc	i2printf@width+1,f,c
 22967  001FD4  4A0D               	infsnz	i2printf@f,f,c
 22968  001FD6  2A0E               	incf	i2printf@f+1,f,c
 22969                           
 22970                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22971  001FD8  C00D  FFF6         	movff	i2printf@f,tblptrl
 22972  001FDC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22973  001FE0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22974  001FE0  6AF8               	clrf	tblptru,c
 22975  001FE2                     	endif
 22976  001FE2                     	if	0	;tblptru may be non-zero
 22977  001FE2                     	endif
 22978  001FE2  0008               	tblrd		*
 22979  001FE4  50F5               	movf	tablat,w,c
 22980  001FE6  EC02  F02B         	call	i2_isdigit
 22981  001FEA  A0D8               	btfss	status,0,c
 22982  001FEC  D072               	goto	i2l6780
 22983  001FEE  D7CF               	goto	i2l6738
 22984  001FF0                     i2l6746:
 22985                           
 22986                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22987  001FF0  C020  FFD9         	movff	i2printf@ap,fsr2l
 22988  001FF4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22989  001FF8  CFDE F01E          	movff	postinc2,i2printf@cp
 22990  001FFC  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22991  002000  0E02               	movlw	2
 22992  002002  2620               	addwf	i2printf@ap,f,c
 22993  002004  0E00               	movlw	0
 22994  002006  2221               	addwfc	i2printf@ap+1,f,c
 22995                           
 22996                           ;doprnt.c: 740: if(!cp)
 22997  002008  501E               	movf	i2printf@cp,w,c
 22998  00200A  101F               	iorwf	i2printf@cp+1,w,c
 22999  00200C  A4D8               	btfss	status,2,c
 23000  00200E  D004               	goto	i2l6754
 23001                           
 23002                           ;doprnt.c: 741: cp = "(null)";
 23003  002010  0EB5               	movlw	low STR_130
 23004  002012  6E1E               	movwf	i2printf@cp,c
 23005  002014  0EFF               	movlw	high STR_130
 23006  002016  6E1F               	movwf	i2printf@cp+1,c
 23007  002018                     i2l6754:
 23008                           
 23009                           ;doprnt.c: 745: len = 0;
 23010  002018  0E00               	movlw	0
 23011  00201A  6E23               	movwf	i2printf@len+1,c
 23012  00201C  0E00               	movlw	0
 23013  00201E  6E22               	movwf	i2printf@len,c
 23014                           
 23015                           ;doprnt.c: 746: while(cp[len])
 23016  002020  D002               	goto	i2l6758
 23017  002022                     i2l6756:
 23018                           
 23019                           ;doprnt.c: 747: len++;
 23020  002022  4A22               	infsnz	i2printf@len,f,c
 23021  002024  2A23               	incf	i2printf@len+1,f,c
 23022  002026                     i2l6758:
 23023  002026  5022               	movf	i2printf@len,w,c
 23024  002028  241E               	addwf	i2printf@cp,w,c
 23025  00202A  6E19               	movwf	??i2_printf& (0+255),c
 23026  00202C  5023               	movf	i2printf@len+1,w,c
 23027  00202E  201F               	addwfc	i2printf@cp+1,w,c
 23028  002030  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23029  002032  C019  FFF6         	movff	??i2_printf,tblptrl
 23030  002036  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 23031  00203A  0E00               	movlw	low (__mediumconst shr (0+16))
 23032  00203C  6EF8               	movwf	tblptru,c
 23033  00203E  0E0F               	movlw	(high __ramtop+-1)
 23034  002040  64F7               	cpfsgt	tblptrh,c
 23035  002042  D003               	bra	i2u526_47
 23036  002044  0008               	tblrd		*
 23037  002046  50F5               	movf	tablat,w,c
 23038  002048  D005               	bra	i2u526_40
 23039  00204A                     i2u526_47:
 23040  00204A  CFF6 FFE9          	movff	tblptrl,fsr0l
 23041  00204E  CFF7 FFEA          	movff	tblptrh,fsr0h
 23042  002052  50EF               	movf	indf0,w,c
 23043  002054                     i2u526_40:
 23044  002054  0900               	iorlw	0
 23045  002056  A4D8               	btfss	status,2,c
 23046  002058  D7E4               	goto	i2l6756
 23047                           
 23048                           ;doprnt.c: 757: if(width > len)
 23049  00205A  5028               	movf	i2printf@width,w,c
 23050  00205C  5C22               	subwf	i2printf@len,w,c
 23051  00205E  5029               	movf	i2printf@width+1,w,c
 23052  002060  5823               	subwfb	i2printf@len+1,w,c
 23053  002062  B0D8               	btfsc	status,0,c
 23054  002064  D005               	goto	i2l6764
 23055                           
 23056                           ;doprnt.c: 758: width -= len;
 23057  002066  5022               	movf	i2printf@len,w,c
 23058  002068  5E28               	subwf	i2printf@width,f,c
 23059  00206A  5023               	movf	i2printf@len+1,w,c
 23060  00206C  5A29               	subwfb	i2printf@width+1,f,c
 23061  00206E  D008               	goto	i2l6768
 23062  002070                     i2l6764:
 23063                           
 23064                           ;doprnt.c: 759: else
 23065                           ;doprnt.c: 760: width = 0;
 23066  002070  0E00               	movlw	0
 23067  002072  6E29               	movwf	i2printf@width+1,c
 23068  002074  0E00               	movlw	0
 23069  002076  6E28               	movwf	i2printf@width,c
 23070                           
 23071                           ;doprnt.c: 764: while(width--)
 23072  002078  D003               	goto	i2l6768
 23073  00207A                     i2l6766:
 23074                           
 23075                           ;doprnt.c: 765: (putch(' ') );
 23076  00207A  0E20               	movlw	32
 23077  00207C  EC67  F02B         	call	i2_putch
 23078  002080                     i2l6768:
 23079  002080  0628               	decf	i2printf@width,f,c
 23080  002082  A0D8               	btfss	status,0,c
 23081  002084  0629               	decf	i2printf@width+1,f,c
 23082  002086  2828               	incf	i2printf@width,w,c
 23083  002088  E1F8               	bnz	i2l6766
 23084  00208A  2829               	incf	i2printf@width+1,w,c
 23085  00208C  B4D8               	btfsc	status,2,c
 23086  00208E  D016               	goto	i2l6774
 23087  002090  D7F4               	goto	i2l6766
 23088  002092                     i2l6770:
 23089                           
 23090                           ;doprnt.c: 768: (putch(*cp++) );
 23091  002092  C01E  FFF6         	movff	i2printf@cp,tblptrl
 23092  002096  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 23093  00209A  0E00               	movlw	low (__mediumconst shr (0+16))
 23094  00209C  6EF8               	movwf	tblptru,c
 23095  00209E  0E0F               	movlw	(high __ramtop+-1)
 23096  0020A0  64F7               	cpfsgt	tblptrh,c
 23097  0020A2  D003               	bra	i2u530_47
 23098  0020A4  0008               	tblrd		*
 23099  0020A6  50F5               	movf	tablat,w,c
 23100  0020A8  D005               	bra	i2u530_40
 23101  0020AA                     i2u530_47:
 23102  0020AA  CFF6 FFE9          	movff	tblptrl,fsr0l
 23103  0020AE  CFF7 FFEA          	movff	tblptrh,fsr0h
 23104  0020B2  50EF               	movf	indf0,w,c
 23105  0020B4                     i2u530_40:
 23106  0020B4  EC67  F02B         	call	i2_putch
 23107  0020B8  4A1E               	infsnz	i2printf@cp,f,c
 23108  0020BA  2A1F               	incf	i2printf@cp+1,f,c
 23109  0020BC                     i2l6774:
 23110  0020BC  0622               	decf	i2printf@len,f,c
 23111  0020BE  A0D8               	btfss	status,0,c
 23112  0020C0  0623               	decf	i2printf@len+1,f,c
 23113  0020C2  2822               	incf	i2printf@len,w,c
 23114  0020C4  E1E6               	bnz	i2l6770
 23115  0020C6  2823               	incf	i2printf@len+1,w,c
 23116  0020C8  B4D8               	btfsc	status,2,c
 23117  0020CA  D0DA               	goto	i2l6852
 23118  0020CC  D7E2               	goto	i2l6770
 23119  0020CE                     i2l6776:
 23120                           
 23121                           ;doprnt.c: 818: flag |= 0x40;
 23122  0020CE  8C26               	bsf	i2printf@flag,6,c
 23123                           
 23124                           ;doprnt.c: 822: }
 23125                           
 23126                           ;doprnt.c: 819: break;
 23127  0020D0  D01B               	goto	i2l1484
 23128  0020D2                     i2l6780:
 23129  0020D2  C00D  FFF6         	movff	i2printf@f,tblptrl
 23130  0020D6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23131  0020DA  4A0D               	infsnz	i2printf@f,f,c
 23132  0020DC  2A0E               	incf	i2printf@f+1,f,c
 23133  0020DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23134  0020DE  6AF8               	clrf	tblptru,c
 23135  0020E0                     	endif
 23136  0020E0                     	if	0	;tblptru may be non-zero
 23137  0020E0                     	endif
 23138  0020E0  0008               	tblrd		*
 23139  0020E2  CFF5 F027          	movff	tablat,i2printf@c
 23140  0020E6  5027               	movf	i2printf@c,w,c
 23141                           
 23142                           ; Switch size 1, requested type "space"
 23143                           ; Number of cases is 5, Range of values is 0 to 117
 23144                           ; switch strategies available:
 23145                           ; Name         Instructions Cycles
 23146                           ; simple_byte           16     9 (average)
 23147                           ;	Chosen strategy is simple_byte
 23148  0020E8  0A00               	xorlw	0	; case 0
 23149  0020EA  B4D8               	btfsc	status,2,c
 23150  0020EC  0012               	return	
 23151  0020EE  0A64               	xorlw	100	; case 100
 23152  0020F0  B4D8               	btfsc	status,2,c
 23153  0020F2  D00A               	goto	i2l1484
 23154  0020F4  0A0D               	xorlw	13	; case 105
 23155  0020F6  B4D8               	btfsc	status,2,c
 23156  0020F8  D007               	goto	i2l1484
 23157  0020FA  0A1A               	xorlw	26	; case 115
 23158  0020FC  B4D8               	btfsc	status,2,c
 23159  0020FE  D778               	goto	i2l6746
 23160  002100  0A06               	xorlw	6	; case 117
 23161  002102  B4D8               	btfsc	status,2,c
 23162  002104  D7E4               	goto	i2l6776
 23163  002106  D0BC               	goto	i2l6852
 23164  002108                     i2l1484:
 23165                           
 23166                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 23167  002108  BC26               	btfsc	i2printf@flag,6,c
 23168  00210A  D015               	goto	i2l6792
 23169                           
 23170                           ;doprnt.c: 1253: {
 23171                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 23172  00210C  C020  FFD9         	movff	i2printf@ap,fsr2l
 23173  002110  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23174  002114  CFDE F024          	movff	postinc2,i2printf@val
 23175  002118  CFDD F025          	movff	postdec2,i2printf@val+1
 23176  00211C  0E02               	movlw	2
 23177  00211E  2620               	addwf	i2printf@ap,f,c
 23178  002120  0E00               	movlw	0
 23179  002122  2221               	addwfc	i2printf@ap+1,f,c
 23180                           
 23181                           ;doprnt.c: 1261: if((int)val < 0) {
 23182  002124  AE25               	btfss	i2printf@val+1,7,c
 23183  002126  D013               	goto	i2l6796
 23184                           
 23185                           ;doprnt.c: 1262: flag |= 0x03;
 23186  002128  0E03               	movlw	3
 23187  00212A  1226               	iorwf	i2printf@flag,f,c
 23188                           
 23189                           ;doprnt.c: 1263: val = -val;
 23190  00212C  6C24               	negf	i2printf@val,c
 23191  00212E  1E25               	comf	i2printf@val+1,f,c
 23192  002130  B0D8               	btfsc	status,0,c
 23193  002132  2A25               	incf	i2printf@val+1,f,c
 23194                           
 23195                           ;doprnt.c: 1264: }
 23196                           ;doprnt.c: 1266: }
 23197  002134  D00C               	goto	i2l6796
 23198  002136                     i2l6792:
 23199                           
 23200                           ;doprnt.c: 1268: else
 23201                           ;doprnt.c: 1273: {
 23202                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 23203  002136  C020  FFD9         	movff	i2printf@ap,fsr2l
 23204  00213A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23205  00213E  CFDE F024          	movff	postinc2,i2printf@val
 23206  002142  CFDD F025          	movff	postdec2,i2printf@val+1
 23207  002146  0E02               	movlw	2
 23208  002148  2620               	addwf	i2printf@ap,f,c
 23209  00214A  0E00               	movlw	0
 23210  00214C  2221               	addwfc	i2printf@ap+1,f,c
 23211  00214E                     i2l6796:
 23212                           
 23213                           ;doprnt.c: 1287: }
 23214                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23215  00214E  0E01               	movlw	1
 23216  002150  6E27               	movwf	i2printf@c,c
 23217  002152                     i2l6798:
 23218  002152  0E05               	movlw	5
 23219  002154  1827               	xorwf	i2printf@c,w,c
 23220  002156  B4D8               	btfsc	status,2,c
 23221  002158  D015               	goto	i2l6810
 23222                           
 23223                           ;doprnt.c: 1306: if(val < dpowers[c])
 23224  00215A  5027               	movf	i2printf@c,w,c
 23225  00215C  0D02               	mullw	2
 23226  00215E  0EB4               	movlw	low _dpowers
 23227  002160  24F3               	addwf	prodl,w,c
 23228  002162  6EF6               	movwf	tblptrl,c
 23229  002164  0EFA               	movlw	high _dpowers
 23230  002166  20F4               	addwfc	prodh,w,c
 23231  002168  6EF7               	movwf	tblptrh,c
 23232  00216A                     	if	1	;There are 3 active tblptr bytes
 23233  00216A  6AF8               	clrf	tblptru,c
 23234  00216C  0E00               	movlw	low (__mediumconst shr (0+16))
 23235  00216E  22F8               	addwfc	tblptru,f,c
 23236  002170                     	endif
 23237  002170  0009               	tblrd		*+
 23238  002172  50F5               	movf	tablat,w,c
 23239  002174  5C24               	subwf	i2printf@val,w,c
 23240  002176  0009               	tblrd		*+
 23241  002178  50F5               	movf	tablat,w,c
 23242  00217A  5825               	subwfb	i2printf@val+1,w,c
 23243  00217C  A0D8               	btfss	status,0,c
 23244  00217E  D002               	goto	i2l6810
 23245                           
 23246                           ;doprnt.c: 1307: break;
 23247  002180  2A27               	incf	i2printf@c,f,c
 23248  002182  D7E7               	goto	i2l6798
 23249  002184                     i2l6810:
 23250                           
 23251                           ;doprnt.c: 1345: if(width && flag & 0x03)
 23252  002184  5028               	movf	i2printf@width,w,c
 23253  002186  1029               	iorwf	i2printf@width+1,w,c
 23254  002188  B4D8               	btfsc	status,2,c
 23255  00218A  D009               	goto	i2l6816
 23256  00218C  C026  F019         	movff	i2printf@flag,??i2_printf
 23257  002190  0E03               	movlw	3
 23258  002192  1619               	andwf	??i2_printf,f,c
 23259  002194  B4D8               	btfsc	status,2,c
 23260  002196  D003               	goto	i2l6816
 23261                           
 23262                           ;doprnt.c: 1346: width--;
 23263  002198  0628               	decf	i2printf@width,f,c
 23264  00219A  A0D8               	btfss	status,0,c
 23265  00219C  0629               	decf	i2printf@width+1,f,c
 23266  00219E                     i2l6816:
 23267                           
 23268                           ;doprnt.c: 1381: if(width > c)
 23269  00219E  0E80               	movlw	128
 23270  0021A0  BE27               	btfsc	i2printf@c,7,c
 23271  0021A2  0E7F               	movlw	127
 23272  0021A4  6E19               	movwf	??i2_printf& (0+255),c
 23273  0021A6  5028               	movf	i2printf@width,w,c
 23274  0021A8  5C27               	subwf	i2printf@c,w,c
 23275  0021AA  5029               	movf	i2printf@width+1,w,c
 23276  0021AC  0A80               	xorlw	128
 23277  0021AE  5819               	subwfb	??i2_printf& (0+255),w,c
 23278  0021B0  B0D8               	btfsc	status,0,c
 23279  0021B2  D007               	goto	i2l6820
 23280                           
 23281                           ;doprnt.c: 1382: width -= c;
 23282  0021B4  5027               	movf	i2printf@c,w,c
 23283  0021B6  5E28               	subwf	i2printf@width,f,c
 23284  0021B8  0E00               	movlw	0
 23285  0021BA  BE27               	btfsc	i2printf@c,7,c
 23286  0021BC  0EFF               	movlw	255
 23287  0021BE  5A29               	subwfb	i2printf@width+1,f,c
 23288  0021C0  D004               	goto	i2l6822
 23289  0021C2                     i2l6820:
 23290                           
 23291                           ;doprnt.c: 1383: else
 23292                           ;doprnt.c: 1384: width = 0;
 23293  0021C2  0E00               	movlw	0
 23294  0021C4  6E29               	movwf	i2printf@width+1,c
 23295  0021C6  0E00               	movlw	0
 23296  0021C8  6E28               	movwf	i2printf@width,c
 23297  0021CA                     i2l6822:
 23298                           
 23299                           ;doprnt.c: 1387: if(flag & 0x04) {
 23300  0021CA  A426               	btfss	i2printf@flag,2,c
 23301  0021CC  D014               	goto	i2l6834
 23302                           
 23303                           ;doprnt.c: 1392: if(flag & 0x03)
 23304  0021CE  C026  F019         	movff	i2printf@flag,??i2_printf
 23305  0021D2  0E03               	movlw	3
 23306  0021D4  1619               	andwf	??i2_printf,f,c
 23307  0021D6  B4D8               	btfsc	status,2,c
 23308  0021D8  D003               	goto	i2l6828
 23309                           
 23310                           ;doprnt.c: 1393: (putch('-') );
 23311  0021DA  0E2D               	movlw	45
 23312  0021DC  EC67  F02B         	call	i2_putch
 23313  0021E0                     i2l6828:
 23314                           
 23315                           ;doprnt.c: 1415: if(width)
 23316  0021E0  5028               	movf	i2printf@width,w,c
 23317  0021E2  1029               	iorwf	i2printf@width+1,w,c
 23318  0021E4  B4D8               	btfsc	status,2,c
 23319  0021E6  D01E               	goto	i2l6844
 23320                           
 23321                           ;doprnt.c: 1417: (putch('0') );
 23322                           
 23323                           ;doprnt.c: 1416: do
 23324  0021E8  0E30               	movlw	48
 23325  0021EA  EC67  F02B         	call	i2_putch
 23326                           
 23327                           ;doprnt.c: 1418: while(--width);
 23328  0021EE  0628               	decf	i2printf@width,f,c
 23329  0021F0  A0D8               	btfss	status,0,c
 23330  0021F2  0629               	decf	i2printf@width+1,f,c
 23331  0021F4  D7F5               	goto	i2l6828
 23332  0021F6                     i2l6834:
 23333                           
 23334                           ;doprnt.c: 1422: {
 23335                           ;doprnt.c: 1424: if(width
 23336                           ;doprnt.c: 1428: )
 23337  0021F6  5028               	movf	i2printf@width,w,c
 23338  0021F8  1029               	iorwf	i2printf@width+1,w,c
 23339  0021FA  B4D8               	btfsc	status,2,c
 23340  0021FC  D00A               	goto	i2l6840
 23341  0021FE                     i2l6836:
 23342                           
 23343                           ;doprnt.c: 1430: (putch(' ') );
 23344  0021FE  0E20               	movlw	32
 23345  002200  EC67  F02B         	call	i2_putch
 23346                           
 23347                           ;doprnt.c: 1431: while(--width);
 23348  002204  0628               	decf	i2printf@width,f,c
 23349  002206  A0D8               	btfss	status,0,c
 23350  002208  0629               	decf	i2printf@width+1,f,c
 23351  00220A  5028               	movf	i2printf@width,w,c
 23352  00220C  1029               	iorwf	i2printf@width+1,w,c
 23353  00220E  A4D8               	btfss	status,2,c
 23354  002210  D7F6               	goto	i2l6836
 23355  002212                     i2l6840:
 23356                           
 23357                           ;doprnt.c: 1438: if(flag & 0x03)
 23358  002212  C026  F019         	movff	i2printf@flag,??i2_printf
 23359  002216  0E03               	movlw	3
 23360  002218  1619               	andwf	??i2_printf,f,c
 23361  00221A  B4D8               	btfsc	status,2,c
 23362  00221C  D003               	goto	i2l6844
 23363                           
 23364                           ;doprnt.c: 1439: (putch('-') );
 23365  00221E  0E2D               	movlw	45
 23366  002220  EC67  F02B         	call	i2_putch
 23367  002224                     i2l6844:
 23368                           
 23369                           ;doprnt.c: 1469: }
 23370                           ;doprnt.c: 1472: prec = c;
 23371  002224  C027  F01D         	movff	i2printf@c,i2printf@prec
 23372                           
 23373                           ;doprnt.c: 1474: while(prec--) {
 23374  002228  D027               	goto	i2l6850
 23375  00222A                     i2l6846:
 23376                           
 23377                           ;doprnt.c: 1478: {
 23378                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23379  00222A  501D               	movf	i2printf@prec,w,c
 23380  00222C  0D02               	mullw	2
 23381  00222E  0EB4               	movlw	low _dpowers
 23382  002230  24F3               	addwf	prodl,w,c
 23383  002232  6EF6               	movwf	tblptrl,c
 23384  002234  0EFA               	movlw	high _dpowers
 23385  002236  20F4               	addwfc	prodh,w,c
 23386  002238  6EF7               	movwf	tblptrh,c
 23387  00223A                     	if	1	;There are 3 active tblptr bytes
 23388  00223A  6AF8               	clrf	tblptru,c
 23389  00223C  0E00               	movlw	low (__mediumconst shr (0+16))
 23390  00223E  22F8               	addwfc	tblptru,f,c
 23391  002240                     	endif
 23392  002240  0009               	tblrd		*+
 23393  002242  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 23394  002246  000A               	tblrd		*-
 23395  002248  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 23396  00224C  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 23397  002250  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 23398  002254  EC84  F027         	call	i2___lwdiv	;wreg free
 23399  002258  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 23400  00225C  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 23401  002260  0E00               	movlw	0
 23402  002262  6E04               	movwf	i2___lwmod@divisor+1,c
 23403  002264  0E0A               	movlw	10
 23404  002266  6E03               	movwf	i2___lwmod@divisor,c
 23405  002268  EC43  F028         	call	i2___lwmod	;wreg free
 23406  00226C  5001               	movf	?i2___lwmod,w,c
 23407  00226E  0F30               	addlw	48
 23408  002270  6E27               	movwf	i2printf@c,c
 23409                           
 23410                           ;doprnt.c: 1523: }
 23411                           ;doprnt.c: 1524: (putch(c) );
 23412  002272  5027               	movf	i2printf@c,w,c
 23413  002274  EC67  F02B         	call	i2_putch
 23414  002278                     i2l6850:
 23415  002278  061D               	decf	i2printf@prec,f,c
 23416  00227A  281D               	incf	i2printf@prec,w,c
 23417  00227C  A4D8               	btfss	status,2,c
 23418  00227E  D7D5               	goto	i2l6846
 23419  002280                     i2l6852:
 23420  002280  C00D  FFF6         	movff	i2printf@f,tblptrl
 23421  002284  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23422  002288  4A0D               	infsnz	i2printf@f,f,c
 23423  00228A  2A0E               	incf	i2printf@f+1,f,c
 23424  00228C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23425  00228C  6AF8               	clrf	tblptru,c
 23426  00228E                     	endif
 23427  00228E                     	if	0	;tblptru may be non-zero
 23428  00228E                     	endif
 23429  00228E  0008               	tblrd		*
 23430  002290  CFF5 F027          	movff	tablat,i2printf@c
 23431  002294  5027               	movf	i2printf@c,w,c
 23432  002296  B4D8               	btfsc	status,2,c
 23433  002298  0012               	return	
 23434  00229A  D64E               	goto	i2l6722
 23435  00229C                     __end_ofi2_printf:
 23436                           	opt stack 0
 23437                           pclatu	equ	0xFFB
 23438                           pclath	equ	0xFFA
 23439                           tblptru	equ	0xFF8
 23440                           tblptrh	equ	0xFF7
 23441                           tblptrl	equ	0xFF6
 23442                           tablat	equ	0xFF5
 23443                           prodh	equ	0xFF4
 23444                           prodl	equ	0xFF3
 23445                           intcon	equ	0xFF2
 23446                           intcon2	equ	0xFF1
 23447                           intcon3	equ	0xFF0
 23448                           indf0	equ	0xFEF
 23449                           postinc0	equ	0xFEE
 23450                           fsr0h	equ	0xFEA
 23451                           fsr0l	equ	0xFE9
 23452                           wreg	equ	0xFE8
 23453                           postdec1	equ	0xFE5
 23454                           fsr1h	equ	0xFE2
 23455                           fsr1l	equ	0xFE1
 23456                           indf2	equ	0xFDF
 23457                           postinc2	equ	0xFDE
 23458                           postdec2	equ	0xFDD
 23459                           fsr2h	equ	0xFDA
 23460                           fsr2l	equ	0xFD9
 23461                           status	equ	0xFD8
 23462                           
 23463 ;; *************** function i2_putch *****************
 23464 ;; Defined at:
 23465 ;;		line 20 in file "lcd.c"
 23466 ;; Parameters:    Size  Location     Type
 23467 ;;  data            1    wreg     unsigned char 
 23468 ;; Auto vars:     Size  Location     Type
 23469 ;;  data            1    2[COMRAM] unsigned char 
 23470 ;; Return value:  Size  Location     Type
 23471 ;;                  1    wreg      void 
 23472 ;; Registers used:
 23473 ;;		wreg, status,2, status,0, cstack
 23474 ;; Tracked objects:
 23475 ;;		On entry : 0/0
 23476 ;;		On exit  : 0/0
 23477 ;;		Unchanged: 0/0
 23478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23482 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23483 ;;Total ram usage:        1 bytes
 23484 ;; Hardware stack levels used:    1
 23485 ;; Hardware stack levels required when called:    1
 23486 ;; This function calls:
 23487 ;;		i2_lcdNibble
 23488 ;; This function is called by:
 23489 ;;		i2_printf
 23490 ;; This function uses a non-reentrant model
 23491 ;;
 23492                           
 23493                           	psect	text83
 23494  0056CE                     __ptext83:
 23495                           	opt stack 0
 23496  0056CE                     i2_putch:
 23497                           	opt stack 20
 23498                           
 23499                           ;incstack = 0
 23500                           ;i2putch@data stored from wreg
 23501  0056CE  6E03               	movwf	i2putch@data,c
 23502                           
 23503                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 23504  0056D0  848C               	bsf	3980,2,c	;volatile
 23505                           
 23506                           ;lcd.c: 22: lcdNibble(data);
 23507  0056D2  5003               	movf	i2putch@data,w,c
 23508  0056D4  EC57  F027         	call	i2_lcdNibble
 23509  0056D8  0012               	return		;funcret
 23510  0056DA                     __end_ofi2_putch:
 23511                           	opt stack 0
 23512                           pclatu	equ	0xFFB
 23513                           pclath	equ	0xFFA
 23514                           tblptru	equ	0xFF8
 23515                           tblptrh	equ	0xFF7
 23516                           tblptrl	equ	0xFF6
 23517                           tablat	equ	0xFF5
 23518                           prodh	equ	0xFF4
 23519                           prodl	equ	0xFF3
 23520                           intcon	equ	0xFF2
 23521                           intcon2	equ	0xFF1
 23522                           intcon3	equ	0xFF0
 23523                           indf0	equ	0xFEF
 23524                           postinc0	equ	0xFEE
 23525                           fsr0h	equ	0xFEA
 23526                           fsr0l	equ	0xFE9
 23527                           wreg	equ	0xFE8
 23528                           postdec1	equ	0xFE5
 23529                           fsr1h	equ	0xFE2
 23530                           fsr1l	equ	0xFE1
 23531                           indf2	equ	0xFDF
 23532                           postinc2	equ	0xFDE
 23533                           postdec2	equ	0xFDD
 23534                           fsr2h	equ	0xFDA
 23535                           fsr2l	equ	0xFD9
 23536                           status	equ	0xFD8
 23537                           
 23538 ;; *************** function i2_isdigit *****************
 23539 ;; Defined at:
 23540 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 23541 ;; Parameters:    Size  Location     Type
 23542 ;;  c               1    wreg     unsigned char 
 23543 ;; Auto vars:     Size  Location     Type
 23544 ;;  c               1    2[COMRAM] unsigned char 
 23545 ;; Return value:  Size  Location     Type
 23546 ;;		None               void
 23547 ;; Registers used:
 23548 ;;		wreg, status,2, status,0
 23549 ;; Tracked objects:
 23550 ;;		On entry : 0/0
 23551 ;;		On exit  : 0/0
 23552 ;;		Unchanged: 0/0
 23553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23555 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23556 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23557 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23558 ;;Total ram usage:        3 bytes
 23559 ;; Hardware stack levels used:    1
 23560 ;; This function calls:
 23561 ;;		Nothing
 23562 ;; This function is called by:
 23563 ;;		i2_printf
 23564 ;; This function uses a non-reentrant model
 23565 ;;
 23566                           
 23567                           	psect	text84
 23568  005604                     __ptext84:
 23569                           	opt stack 0
 23570  005604                     i2_isdigit:
 23571                           	opt stack 21
 23572                           
 23573                           ;incstack = 0
 23574                           ;i2isdigit@c stored from wreg
 23575  005604  6E03               	movwf	i2isdigit@c,c
 23576  005606  0E00               	movlw	0
 23577  005608  6E02               	movwf	i2_isdigit$2083,c
 23578  00560A  0E3A               	movlw	58
 23579  00560C  6003               	cpfslt	i2isdigit@c,c
 23580  00560E  D005               	goto	i2l6422
 23581  005610  0E2F               	movlw	47
 23582  005612  6403               	cpfsgt	i2isdigit@c,c
 23583  005614  D002               	goto	i2l6422
 23584  005616  0E01               	movlw	1
 23585  005618  6E02               	movwf	i2_isdigit$2083,c
 23586  00561A                     i2l6422:
 23587  00561A  C002  F001         	movff	i2_isdigit$2083,??i2_isdigit
 23588  00561E  3001               	rrcf	??i2_isdigit,w,c
 23589  005620  0012               	return	
 23590  005622                     __end_ofi2_isdigit:
 23591                           	opt stack 0
 23592                           pclatu	equ	0xFFB
 23593                           pclath	equ	0xFFA
 23594                           tblptru	equ	0xFF8
 23595                           tblptrh	equ	0xFF7
 23596                           tblptrl	equ	0xFF6
 23597                           tablat	equ	0xFF5
 23598                           prodh	equ	0xFF4
 23599                           prodl	equ	0xFF3
 23600                           intcon	equ	0xFF2
 23601                           intcon2	equ	0xFF1
 23602                           intcon3	equ	0xFF0
 23603                           indf0	equ	0xFEF
 23604                           postinc0	equ	0xFEE
 23605                           fsr0h	equ	0xFEA
 23606                           fsr0l	equ	0xFE9
 23607                           wreg	equ	0xFE8
 23608                           postdec1	equ	0xFE5
 23609                           fsr1h	equ	0xFE2
 23610                           fsr1l	equ	0xFE1
 23611                           indf2	equ	0xFDF
 23612                           postinc2	equ	0xFDE
 23613                           postdec2	equ	0xFDD
 23614                           fsr2h	equ	0xFDA
 23615                           fsr2l	equ	0xFD9
 23616                           status	equ	0xFD8
 23617                           
 23618 ;; *************** function i2___wmul *****************
 23619 ;; Defined at:
 23620 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 23621 ;; Parameters:    Size  Location     Type
 23622 ;;  multiplier      2    0[COMRAM] unsigned int 
 23623 ;;  multiplicand    2    2[COMRAM] unsigned int 
 23624 ;; Auto vars:     Size  Location     Type
 23625 ;;  __wmul          2    4[COMRAM] unsigned int 
 23626 ;; Return value:  Size  Location     Type
 23627 ;;                  2    0[COMRAM] unsigned int 
 23628 ;; Registers used:
 23629 ;;		wreg, status,2, status,0, prodl, prodh
 23630 ;; Tracked objects:
 23631 ;;		On entry : 0/0
 23632 ;;		On exit  : 0/0
 23633 ;;		Unchanged: 0/0
 23634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23638 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23639 ;;Total ram usage:        6 bytes
 23640 ;; Hardware stack levels used:    1
 23641 ;; This function calls:
 23642 ;;		Nothing
 23643 ;; This function is called by:
 23644 ;;		_printSortTimer
 23645 ;;		_retrieveLog
 23646 ;;		i2_printf
 23647 ;; This function uses a non-reentrant model
 23648 ;;
 23649                           
 23650                           	psect	text85
 23651  005550                     __ptext85:
 23652                           	opt stack 0
 23653  005550                     i2___wmul:
 23654                           	opt stack 21
 23655                           
 23656                           ;incstack = 0
 23657  005550  5001               	movf	i2___wmul@multiplier,w,c
 23658  005552  0203               	mulwf	i2___wmul@multiplicand,c
 23659  005554  CFF3 F005          	movff	prodl,i2___wmul@product
 23660  005558  CFF4 F006          	movff	prodh,i2___wmul@product+1
 23661  00555C  5001               	movf	i2___wmul@multiplier,w,c
 23662  00555E  0204               	mulwf	i2___wmul@multiplicand+1,c
 23663  005560  50F3               	movf	prodl,w,c
 23664  005562  2606               	addwf	i2___wmul@product+1,f,c
 23665  005564  5002               	movf	i2___wmul@multiplier+1,w,c
 23666  005566  0203               	mulwf	i2___wmul@multiplicand,c
 23667  005568  50F3               	movf	prodl,w,c
 23668  00556A  2606               	addwf	i2___wmul@product+1,f,c
 23669  00556C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 23670  005570  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 23671  005574  0012               	return	
 23672  005576                     __end_ofi2___wmul:
 23673                           	opt stack 0
 23674                           pclatu	equ	0xFFB
 23675                           pclath	equ	0xFFA
 23676                           tblptru	equ	0xFF8
 23677                           tblptrh	equ	0xFF7
 23678                           tblptrl	equ	0xFF6
 23679                           tablat	equ	0xFF5
 23680                           prodh	equ	0xFF4
 23681                           prodl	equ	0xFF3
 23682                           intcon	equ	0xFF2
 23683                           intcon2	equ	0xFF1
 23684                           intcon3	equ	0xFF0
 23685                           indf0	equ	0xFEF
 23686                           postinc0	equ	0xFEE
 23687                           fsr0h	equ	0xFEA
 23688                           fsr0l	equ	0xFE9
 23689                           wreg	equ	0xFE8
 23690                           postdec1	equ	0xFE5
 23691                           fsr1h	equ	0xFE2
 23692                           fsr1l	equ	0xFE1
 23693                           indf2	equ	0xFDF
 23694                           postinc2	equ	0xFDE
 23695                           postdec2	equ	0xFDD
 23696                           fsr2h	equ	0xFDA
 23697                           fsr2l	equ	0xFD9
 23698                           status	equ	0xFD8
 23699                           
 23700 ;; *************** function i2___lwmod *****************
 23701 ;; Defined at:
 23702 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23703 ;; Parameters:    Size  Location     Type
 23704 ;;  dividend        2    0[COMRAM] unsigned int 
 23705 ;;  divisor         2    2[COMRAM] unsigned int 
 23706 ;; Auto vars:     Size  Location     Type
 23707 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23708 ;; Return value:  Size  Location     Type
 23709 ;;                  2    0[COMRAM] unsigned int 
 23710 ;; Registers used:
 23711 ;;		wreg, status,2, status,0
 23712 ;; Tracked objects:
 23713 ;;		On entry : 0/0
 23714 ;;		On exit  : 0/0
 23715 ;;		Unchanged: 0/0
 23716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23717 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23720 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23721 ;;Total ram usage:        5 bytes
 23722 ;; Hardware stack levels used:    1
 23723 ;; This function calls:
 23724 ;;		Nothing
 23725 ;; This function is called by:
 23726 ;;		_printSortTimer
 23727 ;;		i2_printf
 23728 ;; This function uses a non-reentrant model
 23729 ;;
 23730                           
 23731                           	psect	text86
 23732  005086                     __ptext86:
 23733                           	opt stack 0
 23734  005086                     i2___lwmod:
 23735                           	opt stack 21
 23736                           
 23737                           ;incstack = 0
 23738  005086  5003               	movf	i2___lwmod@divisor,w,c
 23739  005088  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23740  00508A  B4D8               	btfsc	status,2,c
 23741  00508C  D018               	goto	i2l1941
 23742  00508E  0E01               	movlw	1
 23743  005090  6E05               	movwf	i2___lwmod@counter,c
 23744  005092  D004               	goto	i2l6454
 23745  005094                     i2l6452:
 23746  005094  90D8               	bcf	status,0,c
 23747  005096  3603               	rlcf	i2___lwmod@divisor,f,c
 23748  005098  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23749  00509A  2A05               	incf	i2___lwmod@counter,f,c
 23750  00509C                     i2l6454:
 23751  00509C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23752  00509E  D7FA               	goto	i2l6452
 23753  0050A0                     i2l6456:
 23754  0050A0  5003               	movf	i2___lwmod@divisor,w,c
 23755  0050A2  5C01               	subwf	i2___lwmod@dividend,w,c
 23756  0050A4  5004               	movf	i2___lwmod@divisor+1,w,c
 23757  0050A6  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23758  0050A8  A0D8               	btfss	status,0,c
 23759  0050AA  D004               	goto	i2l6460
 23760  0050AC  5003               	movf	i2___lwmod@divisor,w,c
 23761  0050AE  5E01               	subwf	i2___lwmod@dividend,f,c
 23762  0050B0  5004               	movf	i2___lwmod@divisor+1,w,c
 23763  0050B2  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23764  0050B4                     i2l6460:
 23765  0050B4  90D8               	bcf	status,0,c
 23766  0050B6  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23767  0050B8  3203               	rrcf	i2___lwmod@divisor,f,c
 23768  0050BA  2E05               	decfsz	i2___lwmod@counter,f,c
 23769  0050BC  D7F1               	goto	i2l6456
 23770  0050BE                     i2l1941:
 23771  0050BE  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23772  0050C2  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23773  0050C6  0012               	return		;funcret
 23774  0050C8                     __end_ofi2___lwmod:
 23775                           	opt stack 0
 23776                           pclatu	equ	0xFFB
 23777                           pclath	equ	0xFFA
 23778                           tblptru	equ	0xFF8
 23779                           tblptrh	equ	0xFF7
 23780                           tblptrl	equ	0xFF6
 23781                           tablat	equ	0xFF5
 23782                           prodh	equ	0xFF4
 23783                           prodl	equ	0xFF3
 23784                           intcon	equ	0xFF2
 23785                           intcon2	equ	0xFF1
 23786                           intcon3	equ	0xFF0
 23787                           indf0	equ	0xFEF
 23788                           postinc0	equ	0xFEE
 23789                           fsr0h	equ	0xFEA
 23790                           fsr0l	equ	0xFE9
 23791                           wreg	equ	0xFE8
 23792                           postdec1	equ	0xFE5
 23793                           fsr1h	equ	0xFE2
 23794                           fsr1l	equ	0xFE1
 23795                           indf2	equ	0xFDF
 23796                           postinc2	equ	0xFDE
 23797                           postdec2	equ	0xFDD
 23798                           fsr2h	equ	0xFDA
 23799                           fsr2l	equ	0xFD9
 23800                           status	equ	0xFD8
 23801                           
 23802 ;; *************** function i2___lwdiv *****************
 23803 ;; Defined at:
 23804 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23805 ;; Parameters:    Size  Location     Type
 23806 ;;  dividend        2    5[COMRAM] unsigned int 
 23807 ;;  divisor         2    7[COMRAM] unsigned int 
 23808 ;; Auto vars:     Size  Location     Type
 23809 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23810 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23811 ;; Return value:  Size  Location     Type
 23812 ;;                  2    5[COMRAM] unsigned int 
 23813 ;; Registers used:
 23814 ;;		wreg, status,2, status,0
 23815 ;; Tracked objects:
 23816 ;;		On entry : 0/0
 23817 ;;		On exit  : 0/0
 23818 ;;		Unchanged: 0/0
 23819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23821 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23823 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23824 ;;Total ram usage:        7 bytes
 23825 ;; Hardware stack levels used:    1
 23826 ;; This function calls:
 23827 ;;		Nothing
 23828 ;; This function is called by:
 23829 ;;		_printSortTimer
 23830 ;;		i2_printf
 23831 ;; This function uses a non-reentrant model
 23832 ;;
 23833                           
 23834                           	psect	text87
 23835  004F08                     __ptext87:
 23836                           	opt stack 0
 23837  004F08                     i2___lwdiv:
 23838                           	opt stack 21
 23839                           
 23840                           ;incstack = 0
 23841  004F08  0E00               	movlw	0
 23842  004F0A  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23843  004F0C  0E00               	movlw	0
 23844  004F0E  6E0A               	movwf	i2___lwdiv@quotient,c
 23845  004F10  5008               	movf	i2___lwdiv@divisor,w,c
 23846  004F12  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23847  004F14  B4D8               	btfsc	status,2,c
 23848  004F16  D01C               	goto	i2l1931
 23849  004F18  0E01               	movlw	1
 23850  004F1A  6E0C               	movwf	i2___lwdiv@counter,c
 23851  004F1C  D004               	goto	i2l6434
 23852  004F1E                     i2l6432:
 23853  004F1E  90D8               	bcf	status,0,c
 23854  004F20  3608               	rlcf	i2___lwdiv@divisor,f,c
 23855  004F22  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23856  004F24  2A0C               	incf	i2___lwdiv@counter,f,c
 23857  004F26                     i2l6434:
 23858  004F26  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23859  004F28  D7FA               	goto	i2l6432
 23860  004F2A                     i2l6436:
 23861  004F2A  90D8               	bcf	status,0,c
 23862  004F2C  360A               	rlcf	i2___lwdiv@quotient,f,c
 23863  004F2E  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23864  004F30  5008               	movf	i2___lwdiv@divisor,w,c
 23865  004F32  5C06               	subwf	i2___lwdiv@dividend,w,c
 23866  004F34  5009               	movf	i2___lwdiv@divisor+1,w,c
 23867  004F36  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23868  004F38  A0D8               	btfss	status,0,c
 23869  004F3A  D005               	goto	i2l6444
 23870  004F3C  5008               	movf	i2___lwdiv@divisor,w,c
 23871  004F3E  5E06               	subwf	i2___lwdiv@dividend,f,c
 23872  004F40  5009               	movf	i2___lwdiv@divisor+1,w,c
 23873  004F42  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23874  004F44  800A               	bsf	i2___lwdiv@quotient,0,c
 23875  004F46                     i2l6444:
 23876  004F46  90D8               	bcf	status,0,c
 23877  004F48  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 23878  004F4A  3208               	rrcf	i2___lwdiv@divisor,f,c
 23879  004F4C  2E0C               	decfsz	i2___lwdiv@counter,f,c
 23880  004F4E  D7ED               	goto	i2l6436
 23881  004F50                     i2l1931:
 23882  004F50  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23883  004F54  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23884  004F58  0012               	return		;funcret
 23885  004F5A                     __end_ofi2___lwdiv:
 23886                           	opt stack 0
 23887                           pclatu	equ	0xFFB
 23888                           pclath	equ	0xFFA
 23889                           tblptru	equ	0xFF8
 23890                           tblptrh	equ	0xFF7
 23891                           tblptrl	equ	0xFF6
 23892                           tablat	equ	0xFF5
 23893                           prodh	equ	0xFF4
 23894                           prodl	equ	0xFF3
 23895                           intcon	equ	0xFF2
 23896                           intcon2	equ	0xFF1
 23897                           intcon3	equ	0xFF0
 23898                           indf0	equ	0xFEF
 23899                           postinc0	equ	0xFEE
 23900                           fsr0h	equ	0xFEA
 23901                           fsr0l	equ	0xFE9
 23902                           wreg	equ	0xFE8
 23903                           postdec1	equ	0xFE5
 23904                           fsr1h	equ	0xFE2
 23905                           fsr1l	equ	0xFE1
 23906                           indf2	equ	0xFDF
 23907                           postinc2	equ	0xFDE
 23908                           postdec2	equ	0xFDD
 23909                           fsr2h	equ	0xFDA
 23910                           fsr2l	equ	0xFD9
 23911                           status	equ	0xFD8
 23912                           
 23913 ;; *************** function i2_lcdInst *****************
 23914 ;; Defined at:
 23915 ;;		line 15 in file "lcd.c"
 23916 ;; Parameters:    Size  Location     Type
 23917 ;;  data            1    wreg     unsigned char 
 23918 ;; Auto vars:     Size  Location     Type
 23919 ;;  data            1    2[COMRAM] unsigned char 
 23920 ;; Return value:  Size  Location     Type
 23921 ;;                  1    wreg      void 
 23922 ;; Registers used:
 23923 ;;		wreg, status,2, status,0, cstack
 23924 ;; Tracked objects:
 23925 ;;		On entry : 0/0
 23926 ;;		On exit  : 0/0
 23927 ;;		Unchanged: 0/0
 23928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23933 ;;Total ram usage:        1 bytes
 23934 ;; Hardware stack levels used:    1
 23935 ;; Hardware stack levels required when called:    1
 23936 ;; This function calls:
 23937 ;;		i2_lcdNibble
 23938 ;; This function is called by:
 23939 ;;		_change_state_to_menu_11
 23940 ;;		_change_state_to_menu_23
 23941 ;;		_change_state_to_logs_11
 23942 ;;		_change_state_to_logs_12
 23943 ;;		_change_state_to_logs_22
 23944 ;;		_change_state_to_logs_23
 23945 ;;		_change_state_to_logs_33
 23946 ;;		_change_state_to_logs_34
 23947 ;;		_printSortTimer
 23948 ;;		i2_change_state_to_menu_start
 23949 ;;		i2_change_state_to_menu_12
 23950 ;;		i2_change_state_to_menu_22
 23951 ;;		i2_printRTC
 23952 ;; This function uses a non-reentrant model
 23953 ;;
 23954                           
 23955                           	psect	text88
 23956  0056DA                     __ptext88:
 23957                           	opt stack 0
 23958  0056DA                     i2_lcdInst:
 23959                           	opt stack 20
 23960                           
 23961                           ;incstack = 0
 23962                           ;i2lcdInst@data stored from wreg
 23963  0056DA  6E03               	movwf	i2lcdInst@data,c
 23964                           
 23965                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23966  0056DC  948C               	bcf	3980,2,c	;volatile
 23967                           
 23968                           ;lcd.c: 17: lcdNibble(data);
 23969  0056DE  5003               	movf	i2lcdInst@data,w,c
 23970  0056E0  EC57  F027         	call	i2_lcdNibble
 23971  0056E4  0012               	return		;funcret
 23972  0056E6                     __end_ofi2_lcdInst:
 23973                           	opt stack 0
 23974                           pclatu	equ	0xFFB
 23975                           pclath	equ	0xFFA
 23976                           tblptru	equ	0xFF8
 23977                           tblptrh	equ	0xFF7
 23978                           tblptrl	equ	0xFF6
 23979                           tablat	equ	0xFF5
 23980                           prodh	equ	0xFF4
 23981                           prodl	equ	0xFF3
 23982                           intcon	equ	0xFF2
 23983                           intcon2	equ	0xFF1
 23984                           intcon3	equ	0xFF0
 23985                           indf0	equ	0xFEF
 23986                           postinc0	equ	0xFEE
 23987                           fsr0h	equ	0xFEA
 23988                           fsr0l	equ	0xFE9
 23989                           wreg	equ	0xFE8
 23990                           postdec1	equ	0xFE5
 23991                           fsr1h	equ	0xFE2
 23992                           fsr1l	equ	0xFE1
 23993                           indf2	equ	0xFDF
 23994                           postinc2	equ	0xFDE
 23995                           postdec2	equ	0xFDD
 23996                           fsr2h	equ	0xFDA
 23997                           fsr2l	equ	0xFD9
 23998                           status	equ	0xFD8
 23999                           
 24000 ;; *************** function i2_lcdNibble *****************
 24001 ;; Defined at:
 24002 ;;		line 25 in file "lcd.c"
 24003 ;; Parameters:    Size  Location     Type
 24004 ;;  data            1    wreg     unsigned char 
 24005 ;; Auto vars:     Size  Location     Type
 24006 ;;  data            1    1[COMRAM] unsigned char 
 24007 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 24008 ;; Return value:  Size  Location     Type
 24009 ;;                  1    wreg      void 
 24010 ;; Registers used:
 24011 ;;		wreg, status,2, status,0
 24012 ;; Tracked objects:
 24013 ;;		On entry : 0/0
 24014 ;;		On exit  : 0/0
 24015 ;;		Unchanged: 0/0
 24016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24018 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24020 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24021 ;;Total ram usage:        2 bytes
 24022 ;; Hardware stack levels used:    1
 24023 ;; This function calls:
 24024 ;;		Nothing
 24025 ;; This function is called by:
 24026 ;;		i2_lcdInst
 24027 ;;		i2_putch
 24028 ;; This function uses a non-reentrant model
 24029 ;;
 24030                           
 24031                           	psect	text89
 24032  004EAE                     __ptext89:
 24033                           	opt stack 0
 24034  004EAE                     i2_lcdNibble:
 24035                           	opt stack 20
 24036                           
 24037                           ;incstack = 0
 24038                           ;i2lcdNibble@data stored from wreg
 24039  004EAE  6E02               	movwf	i2lcdNibble@data,c
 24040                           
 24041                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 24042  004EB0  9EF2               	bcf	intcon,7,c	;volatile
 24043                           
 24044                           ;lcd.c: 28: char temp = data & 0xF0;
 24045  004EB2  5002               	movf	i2lcdNibble@data,w,c
 24046  004EB4  0BF0               	andlw	240
 24047  004EB6  6E01               	movwf	i2lcdNibble@temp,c
 24048                           
 24049                           ;lcd.c: 29: LATD = LATD & 0x0F;
 24050  004EB8  508C               	movf	3980,w,c	;volatile
 24051  004EBA  0B0F               	andlw	15
 24052  004EBC  6E8C               	movwf	3980,c	;volatile
 24053                           
 24054                           ;lcd.c: 30: LATD = temp | LATD;
 24055  004EBE  5001               	movf	i2lcdNibble@temp,w,c
 24056  004EC0  108C               	iorwf	3980,w,c	;volatile
 24057  004EC2  6E8C               	movwf	3980,c	;volatile
 24058                           
 24059                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 24060  004EC4  868C               	bsf	3980,3,c	;volatile
 24061                           
 24062                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24063  004EC6  0E42               	movlw	66
 24064  004EC8                     i2u1074_47:
 24065  004EC8  2EE8               	decfsz	wreg,f,c
 24066  004ECA  D7FE               	bra	i2u1074_47
 24067  004ECC  D000               	nop2	
 24068                           
 24069                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 24070  004ECE  968C               	bcf	3980,3,c	;volatile
 24071                           
 24072                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24073  004ED0  0E42               	movlw	66
 24074  004ED2                     i2u1075_47:
 24075  004ED2  2EE8               	decfsz	wreg,f,c
 24076  004ED4  D7FE               	bra	i2u1075_47
 24077  004ED6  D000               	nop2	
 24078                           
 24079                           ;lcd.c: 37: data = data << 4;
 24080  004ED8  3802               	swapf	i2lcdNibble@data,w,c
 24081  004EDA  0BF0               	andlw	240
 24082  004EDC  6E02               	movwf	i2lcdNibble@data,c
 24083                           
 24084                           ;lcd.c: 39: temp = data & 0xF0;
 24085  004EDE  5002               	movf	i2lcdNibble@data,w,c
 24086  004EE0  0BF0               	andlw	240
 24087  004EE2  6E01               	movwf	i2lcdNibble@temp,c
 24088                           
 24089                           ;lcd.c: 40: LATD = LATD & 0x0F;
 24090  004EE4  508C               	movf	3980,w,c	;volatile
 24091  004EE6  0B0F               	andlw	15
 24092  004EE8  6E8C               	movwf	3980,c	;volatile
 24093                           
 24094                           ;lcd.c: 41: LATD = temp | LATD;
 24095  004EEA  5001               	movf	i2lcdNibble@temp,w,c
 24096  004EEC  108C               	iorwf	3980,w,c	;volatile
 24097  004EEE  6E8C               	movwf	3980,c	;volatile
 24098                           
 24099                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 24100  004EF0  868C               	bsf	3980,3,c	;volatile
 24101                           
 24102                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24103  004EF2  0E42               	movlw	66
 24104  004EF4                     i2u1076_47:
 24105  004EF4  2EE8               	decfsz	wreg,f,c
 24106  004EF6  D7FE               	bra	i2u1076_47
 24107  004EF8  D000               	nop2	
 24108                           
 24109                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 24110  004EFA  968C               	bcf	3980,3,c	;volatile
 24111                           
 24112                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24113  004EFC  0E42               	movlw	66
 24114  004EFE                     i2u1077_47:
 24115  004EFE  2EE8               	decfsz	wreg,f,c
 24116  004F00  D7FE               	bra	i2u1077_47
 24117  004F02  D000               	nop2	
 24118                           
 24119                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 24120  004F04  8EF2               	bsf	intcon,7,c	;volatile
 24121  004F06  0012               	return		;funcret
 24122  004F08                     __end_ofi2_lcdNibble:
 24123                           	opt stack 0
 24124                           pclatu	equ	0xFFB
 24125                           pclath	equ	0xFFA
 24126                           tblptru	equ	0xFF8
 24127                           tblptrh	equ	0xFF7
 24128                           tblptrl	equ	0xFF6
 24129                           tablat	equ	0xFF5
 24130                           prodh	equ	0xFF4
 24131                           prodl	equ	0xFF3
 24132                           intcon	equ	0xFF2
 24133                           intcon2	equ	0xFF1
 24134                           intcon3	equ	0xFF0
 24135                           indf0	equ	0xFEF
 24136                           postinc0	equ	0xFEE
 24137                           fsr0h	equ	0xFEA
 24138                           fsr0l	equ	0xFE9
 24139                           wreg	equ	0xFE8
 24140                           postdec1	equ	0xFE5
 24141                           fsr1h	equ	0xFE2
 24142                           fsr1l	equ	0xFE1
 24143                           indf2	equ	0xFDF
 24144                           postinc2	equ	0xFDE
 24145                           postdec2	equ	0xFDD
 24146                           fsr2h	equ	0xFDA
 24147                           fsr2l	equ	0xFD9
 24148                           status	equ	0xFD8
 24149                           
 24150 ;; *************** function i2_getRTC *****************
 24151 ;; Defined at:
 24152 ;;		line 44 in file "RTC.c"
 24153 ;; Parameters:    Size  Location     Type
 24154 ;;		None
 24155 ;; Auto vars:     Size  Location     Type
 24156 ;;  getRTC          2    3[COMRAM] int 
 24157 ;; Return value:  Size  Location     Type
 24158 ;;                  1    wreg      void 
 24159 ;; Registers used:
 24160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24161 ;; Tracked objects:
 24162 ;;		On entry : 0/0
 24163 ;;		On exit  : 0/0
 24164 ;;		Unchanged: 0/0
 24165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24167 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24169 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24170 ;;Total ram usage:        2 bytes
 24171 ;; Hardware stack levels used:    1
 24172 ;; Hardware stack levels required when called:    2
 24173 ;; This function calls:
 24174 ;;		i2_I2C_Master_Read
 24175 ;;		i2_I2C_Master_Start
 24176 ;;		i2_I2C_Master_Stop
 24177 ;;		i2_I2C_Master_Write
 24178 ;; This function is called by:
 24179 ;;		_printSortTimer
 24180 ;;		i2_printRTC
 24181 ;; This function uses a non-reentrant model
 24182 ;;
 24183                           
 24184                           	psect	text90
 24185  004B82                     __ptext90:
 24186                           	opt stack 0
 24187  004B82                     i2_getRTC:
 24188                           	opt stack 19
 24189                           
 24190                           ;RTC.c: 48: I2C_Master_Start();
 24191                           
 24192                           ;incstack = 0
 24193  004B82  EC8D  F02B         	call	i2_I2C_Master_Start	;wreg free
 24194                           
 24195                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 24196  004B86  0E00               	movlw	0
 24197  004B88  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24198  004B8A  0ED0               	movlw	208
 24199  004B8C  6E02               	movwf	i2I2C_Master_Write@d,c
 24200  004B8E  EC78  F02B         	call	i2_I2C_Master_Write	;wreg free
 24201                           
 24202                           ;RTC.c: 50: I2C_Master_Write(0x00);
 24203  004B92  0E00               	movlw	0
 24204  004B94  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24205  004B96  0E00               	movlw	0
 24206  004B98  6E02               	movwf	i2I2C_Master_Write@d,c
 24207  004B9A  EC78  F02B         	call	i2_I2C_Master_Write	;wreg free
 24208                           
 24209                           ;RTC.c: 51: I2C_Master_Stop();
 24210  004B9E  EC89  F02B         	call	i2_I2C_Master_Stop	;wreg free
 24211                           
 24212                           ;RTC.c: 54: I2C_Master_Start();
 24213  004BA2  EC8D  F02B         	call	i2_I2C_Master_Start	;wreg free
 24214                           
 24215                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 24216  004BA6  0E00               	movlw	0
 24217  004BA8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24218  004BAA  0ED1               	movlw	209
 24219  004BAC  6E02               	movwf	i2I2C_Master_Write@d,c
 24220  004BAE  EC78  F02B         	call	i2_I2C_Master_Write	;wreg free
 24221                           
 24222                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 24223  004BB2  0E00               	movlw	0
 24224  004BB4  6E05               	movwf	i2getRTC@i+1,c
 24225  004BB6  0E00               	movlw	0
 24226  004BB8  6E04               	movwf	i2getRTC@i,c
 24227  004BBA                     i2l6694:
 24228  004BBA  BE05               	btfsc	i2getRTC@i+1,7,c
 24229  004BBC  D006               	goto	i2l6698
 24230  004BBE  5005               	movf	i2getRTC@i+1,w,c
 24231  004BC0  E111               	bnz	i2l6704
 24232  004BC2  0E06               	movlw	6
 24233  004BC4  5C04               	subwf	i2getRTC@i,w,c
 24234  004BC6  B0D8               	btfsc	status,0,c
 24235  004BC8  D00D               	goto	i2l6704
 24236  004BCA                     i2l6698:
 24237                           
 24238                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 24239  004BCA  0E1C               	movlw	low _time
 24240  004BCC  2404               	addwf	i2getRTC@i,w,c
 24241  004BCE  6ED9               	movwf	fsr2l,c
 24242  004BD0  0E01               	movlw	high _time
 24243  004BD2  2005               	addwfc	i2getRTC@i+1,w,c
 24244  004BD4  6EDA               	movwf	fsr2h,c
 24245  004BD6  0E01               	movlw	1
 24246  004BD8  ECBB  F02A         	call	i2_I2C_Master_Read
 24247  004BDC  6EDF               	movwf	indf2,c
 24248  004BDE  4A04               	infsnz	i2getRTC@i,f,c
 24249  004BE0  2A05               	incf	i2getRTC@i+1,f,c
 24250  004BE2  D7EB               	goto	i2l6694
 24251  004BE4                     i2l6704:
 24252                           
 24253                           ;RTC.c: 58: }
 24254                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 24255  004BE4  0E00               	movlw	0
 24256  004BE6  ECBB  F02A         	call	i2_I2C_Master_Read
 24257  004BEA  0101               	movlb	1	; () banked
 24258  004BEC  6F22               	movwf	(_time+6)& (0+255),b
 24259                           
 24260                           ;RTC.c: 60: I2C_Master_Stop();
 24261  004BEE  EC89  F02B         	call	i2_I2C_Master_Stop	;wreg free
 24262  004BF2  0012               	return		;funcret
 24263  004BF4                     __end_ofi2_getRTC:
 24264                           	opt stack 0
 24265                           pclatu	equ	0xFFB
 24266                           pclath	equ	0xFFA
 24267                           tblptru	equ	0xFF8
 24268                           tblptrh	equ	0xFF7
 24269                           tblptrl	equ	0xFF6
 24270                           tablat	equ	0xFF5
 24271                           prodh	equ	0xFF4
 24272                           prodl	equ	0xFF3
 24273                           intcon	equ	0xFF2
 24274                           intcon2	equ	0xFF1
 24275                           intcon3	equ	0xFF0
 24276                           indf0	equ	0xFEF
 24277                           postinc0	equ	0xFEE
 24278                           fsr0h	equ	0xFEA
 24279                           fsr0l	equ	0xFE9
 24280                           wreg	equ	0xFE8
 24281                           postdec1	equ	0xFE5
 24282                           fsr1h	equ	0xFE2
 24283                           fsr1l	equ	0xFE1
 24284                           indf2	equ	0xFDF
 24285                           postinc2	equ	0xFDE
 24286                           postdec2	equ	0xFDD
 24287                           fsr2h	equ	0xFDA
 24288                           fsr2l	equ	0xFD9
 24289                           status	equ	0xFD8
 24290                           
 24291 ;; *************** function i2_I2C_Master_Write *****************
 24292 ;; Defined at:
 24293 ;;		line 49 in file "I2C.c"
 24294 ;; Parameters:    Size  Location     Type
 24295 ;;  d               2    1[COMRAM] unsigned int 
 24296 ;; Auto vars:     Size  Location     Type
 24297 ;;		None
 24298 ;; Return value:  Size  Location     Type
 24299 ;;                  1    wreg      void 
 24300 ;; Registers used:
 24301 ;;		wreg, status,2, status,0, cstack
 24302 ;; Tracked objects:
 24303 ;;		On entry : 0/0
 24304 ;;		On exit  : 0/0
 24305 ;;		Unchanged: 0/0
 24306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24307 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24310 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24311 ;;Total ram usage:        2 bytes
 24312 ;; Hardware stack levels used:    1
 24313 ;; Hardware stack levels required when called:    1
 24314 ;; This function calls:
 24315 ;;		i2_I2C_Master_Wait
 24316 ;; This function is called by:
 24317 ;;		i2_getRTC
 24318 ;; This function uses a non-reentrant model
 24319 ;;
 24320                           
 24321                           	psect	text91
 24322  0056F0                     __ptext91:
 24323                           	opt stack 0
 24324  0056F0                     i2_I2C_Master_Write:
 24325                           	opt stack 19
 24326                           
 24327                           ;I2C.c: 51: I2C_Master_Wait();
 24328                           
 24329                           ;incstack = 0
 24330  0056F0  EC4E  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24331                           
 24332                           ;I2C.c: 52: SSPBUF = d;
 24333  0056F4  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 24334  0056F8  0012               	return		;funcret
 24335  0056FA                     __end_ofi2_I2C_Master_Write:
 24336                           	opt stack 0
 24337                           pclatu	equ	0xFFB
 24338                           pclath	equ	0xFFA
 24339                           tblptru	equ	0xFF8
 24340                           tblptrh	equ	0xFF7
 24341                           tblptrl	equ	0xFF6
 24342                           tablat	equ	0xFF5
 24343                           prodh	equ	0xFF4
 24344                           prodl	equ	0xFF3
 24345                           intcon	equ	0xFF2
 24346                           intcon2	equ	0xFF1
 24347                           intcon3	equ	0xFF0
 24348                           indf0	equ	0xFEF
 24349                           postinc0	equ	0xFEE
 24350                           fsr0h	equ	0xFEA
 24351                           fsr0l	equ	0xFE9
 24352                           wreg	equ	0xFE8
 24353                           postdec1	equ	0xFE5
 24354                           fsr1h	equ	0xFE2
 24355                           fsr1l	equ	0xFE1
 24356                           indf2	equ	0xFDF
 24357                           postinc2	equ	0xFDE
 24358                           postdec2	equ	0xFDD
 24359                           fsr2h	equ	0xFDA
 24360                           fsr2l	equ	0xFD9
 24361                           status	equ	0xFD8
 24362                           
 24363 ;; *************** function i2_I2C_Master_Stop *****************
 24364 ;; Defined at:
 24365 ;;		line 43 in file "I2C.c"
 24366 ;; Parameters:    Size  Location     Type
 24367 ;;		None
 24368 ;; Auto vars:     Size  Location     Type
 24369 ;;		None
 24370 ;; Return value:  Size  Location     Type
 24371 ;;                  1    wreg      void 
 24372 ;; Registers used:
 24373 ;;		wreg, status,2, status,0, cstack
 24374 ;; Tracked objects:
 24375 ;;		On entry : 0/0
 24376 ;;		On exit  : 0/0
 24377 ;;		Unchanged: 0/0
 24378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24383 ;;Total ram usage:        0 bytes
 24384 ;; Hardware stack levels used:    1
 24385 ;; Hardware stack levels required when called:    1
 24386 ;; This function calls:
 24387 ;;		i2_I2C_Master_Wait
 24388 ;; This function is called by:
 24389 ;;		i2_getRTC
 24390 ;; This function uses a non-reentrant model
 24391 ;;
 24392                           
 24393                           	psect	text92
 24394  005712                     __ptext92:
 24395                           	opt stack 0
 24396  005712                     i2_I2C_Master_Stop:
 24397                           	opt stack 19
 24398                           
 24399                           ;I2C.c: 45: I2C_Master_Wait();
 24400                           
 24401                           ;incstack = 0
 24402  005712  EC4E  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24403                           
 24404                           ;I2C.c: 46: PEN = 1;
 24405  005716  84C5               	bsf	4037,2,c	;volatile
 24406  005718  0012               	return		;funcret
 24407  00571A                     __end_ofi2_I2C_Master_Stop:
 24408                           	opt stack 0
 24409                           pclatu	equ	0xFFB
 24410                           pclath	equ	0xFFA
 24411                           tblptru	equ	0xFF8
 24412                           tblptrh	equ	0xFF7
 24413                           tblptrl	equ	0xFF6
 24414                           tablat	equ	0xFF5
 24415                           prodh	equ	0xFF4
 24416                           prodl	equ	0xFF3
 24417                           intcon	equ	0xFF2
 24418                           intcon2	equ	0xFF1
 24419                           intcon3	equ	0xFF0
 24420                           indf0	equ	0xFEF
 24421                           postinc0	equ	0xFEE
 24422                           fsr0h	equ	0xFEA
 24423                           fsr0l	equ	0xFE9
 24424                           wreg	equ	0xFE8
 24425                           postdec1	equ	0xFE5
 24426                           fsr1h	equ	0xFE2
 24427                           fsr1l	equ	0xFE1
 24428                           indf2	equ	0xFDF
 24429                           postinc2	equ	0xFDE
 24430                           postdec2	equ	0xFDD
 24431                           fsr2h	equ	0xFDA
 24432                           fsr2l	equ	0xFD9
 24433                           status	equ	0xFD8
 24434                           
 24435 ;; *************** function i2_I2C_Master_Start *****************
 24436 ;; Defined at:
 24437 ;;		line 31 in file "I2C.c"
 24438 ;; Parameters:    Size  Location     Type
 24439 ;;		None
 24440 ;; Auto vars:     Size  Location     Type
 24441 ;;		None
 24442 ;; Return value:  Size  Location     Type
 24443 ;;                  1    wreg      void 
 24444 ;; Registers used:
 24445 ;;		wreg, status,2, status,0, cstack
 24446 ;; Tracked objects:
 24447 ;;		On entry : 0/0
 24448 ;;		On exit  : 0/0
 24449 ;;		Unchanged: 0/0
 24450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24455 ;;Total ram usage:        0 bytes
 24456 ;; Hardware stack levels used:    1
 24457 ;; Hardware stack levels required when called:    1
 24458 ;; This function calls:
 24459 ;;		i2_I2C_Master_Wait
 24460 ;; This function is called by:
 24461 ;;		i2_getRTC
 24462 ;; This function uses a non-reentrant model
 24463 ;;
 24464                           
 24465                           	psect	text93
 24466  00571A                     __ptext93:
 24467                           	opt stack 0
 24468  00571A                     i2_I2C_Master_Start:
 24469                           	opt stack 19
 24470                           
 24471                           ;I2C.c: 33: I2C_Master_Wait();
 24472                           
 24473                           ;incstack = 0
 24474  00571A  EC4E  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24475                           
 24476                           ;I2C.c: 34: SEN = 1;
 24477  00571E  80C5               	bsf	4037,0,c	;volatile
 24478  005720  0012               	return		;funcret
 24479  005722                     __end_ofi2_I2C_Master_Start:
 24480                           	opt stack 0
 24481                           pclatu	equ	0xFFB
 24482                           pclath	equ	0xFFA
 24483                           tblptru	equ	0xFF8
 24484                           tblptrh	equ	0xFF7
 24485                           tblptrl	equ	0xFF6
 24486                           tablat	equ	0xFF5
 24487                           prodh	equ	0xFF4
 24488                           prodl	equ	0xFF3
 24489                           intcon	equ	0xFF2
 24490                           intcon2	equ	0xFF1
 24491                           intcon3	equ	0xFF0
 24492                           indf0	equ	0xFEF
 24493                           postinc0	equ	0xFEE
 24494                           fsr0h	equ	0xFEA
 24495                           fsr0l	equ	0xFE9
 24496                           wreg	equ	0xFE8
 24497                           postdec1	equ	0xFE5
 24498                           fsr1h	equ	0xFE2
 24499                           fsr1l	equ	0xFE1
 24500                           indf2	equ	0xFDF
 24501                           postinc2	equ	0xFDE
 24502                           postdec2	equ	0xFDD
 24503                           fsr2h	equ	0xFDA
 24504                           fsr2l	equ	0xFD9
 24505                           status	equ	0xFD8
 24506                           
 24507 ;; *************** function i2_I2C_Master_Read *****************
 24508 ;; Defined at:
 24509 ;;		line 55 in file "I2C.c"
 24510 ;; Parameters:    Size  Location     Type
 24511 ;;  a               1    wreg     unsigned char 
 24512 ;; Auto vars:     Size  Location     Type
 24513 ;;  a               1    1[COMRAM] unsigned char 
 24514 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 24515 ;; Return value:  Size  Location     Type
 24516 ;;                  1    wreg      unsigned char 
 24517 ;; Registers used:
 24518 ;;		wreg, status,2, status,0, cstack
 24519 ;; Tracked objects:
 24520 ;;		On entry : 0/0
 24521 ;;		On exit  : 0/0
 24522 ;;		Unchanged: 0/0
 24523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24527 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24528 ;;Total ram usage:        2 bytes
 24529 ;; Hardware stack levels used:    1
 24530 ;; Hardware stack levels required when called:    1
 24531 ;; This function calls:
 24532 ;;		i2_I2C_Master_Wait
 24533 ;; This function is called by:
 24534 ;;		i2_getRTC
 24535 ;; This function uses a non-reentrant model
 24536 ;;
 24537                           
 24538                           	psect	text94
 24539  005576                     __ptext94:
 24540                           	opt stack 0
 24541  005576                     i2_I2C_Master_Read:
 24542                           	opt stack 19
 24543                           
 24544                           ;incstack = 0
 24545                           ;i2I2C_Master_Read@a stored from wreg
 24546  005576  6E02               	movwf	i2I2C_Master_Read@a,c
 24547                           
 24548                           ;I2C.c: 57: unsigned char temp;
 24549                           ;I2C.c: 58: I2C_Master_Wait();
 24550  005578  EC4E  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24551                           
 24552                           ;I2C.c: 59: RCEN = 1;
 24553  00557C  86C5               	bsf	4037,3,c	;volatile
 24554                           
 24555                           ;I2C.c: 60: I2C_Master_Wait();
 24556  00557E  EC4E  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24557                           
 24558                           ;I2C.c: 61: temp = SSPBUF;
 24559  005582  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 24560                           
 24561                           ;I2C.c: 62: I2C_Master_Wait();
 24562  005586  EC4E  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24563                           
 24564                           ;I2C.c: 63: ACKDT = (a)?0:1;
 24565  00558A  5002               	movf	i2I2C_Master_Read@a,w,c
 24566  00558C  A4D8               	btfss	status,2,c
 24567  00558E  D002               	goto	i2u471_40
 24568  005590  8AC5               	bsf	4037,5,c	;volatile
 24569  005592  D001               	goto	i2l6398
 24570  005594                     i2u471_40:
 24571  005594  9AC5               	bcf	4037,5,c	;volatile
 24572  005596                     i2l6398:
 24573                           
 24574                           ;I2C.c: 64: ACKEN = 1;
 24575  005596  88C5               	bsf	4037,4,c	;volatile
 24576                           
 24577                           ;I2C.c: 65: return temp;
 24578  005598  5003               	movf	i2I2C_Master_Read@temp,w,c
 24579  00559A  0012               	return	
 24580  00559C                     __end_ofi2_I2C_Master_Read:
 24581                           	opt stack 0
 24582                           pclatu	equ	0xFFB
 24583                           pclath	equ	0xFFA
 24584                           tblptru	equ	0xFF8
 24585                           tblptrh	equ	0xFF7
 24586                           tblptrl	equ	0xFF6
 24587                           tablat	equ	0xFF5
 24588                           prodh	equ	0xFF4
 24589                           prodl	equ	0xFF3
 24590                           intcon	equ	0xFF2
 24591                           intcon2	equ	0xFF1
 24592                           intcon3	equ	0xFF0
 24593                           indf0	equ	0xFEF
 24594                           postinc0	equ	0xFEE
 24595                           fsr0h	equ	0xFEA
 24596                           fsr0l	equ	0xFE9
 24597                           wreg	equ	0xFE8
 24598                           postdec1	equ	0xFE5
 24599                           fsr1h	equ	0xFE2
 24600                           fsr1l	equ	0xFE1
 24601                           indf2	equ	0xFDF
 24602                           postinc2	equ	0xFDE
 24603                           postdec2	equ	0xFDD
 24604                           fsr2h	equ	0xFDA
 24605                           fsr2l	equ	0xFD9
 24606                           status	equ	0xFD8
 24607                           
 24608 ;; *************** function i2_I2C_Master_Wait *****************
 24609 ;; Defined at:
 24610 ;;		line 26 in file "I2C.c"
 24611 ;; Parameters:    Size  Location     Type
 24612 ;;		None
 24613 ;; Auto vars:     Size  Location     Type
 24614 ;;		None
 24615 ;; Return value:  Size  Location     Type
 24616 ;;                  1    wreg      void 
 24617 ;; Registers used:
 24618 ;;		wreg, status,2, status,0
 24619 ;; Tracked objects:
 24620 ;;		On entry : 0/0
 24621 ;;		On exit  : 0/0
 24622 ;;		Unchanged: 0/0
 24623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24628 ;;Total ram usage:        1 bytes
 24629 ;; Hardware stack levels used:    1
 24630 ;; This function calls:
 24631 ;;		Nothing
 24632 ;; This function is called by:
 24633 ;;		i2_I2C_Master_Start
 24634 ;;		i2_I2C_Master_Stop
 24635 ;;		i2_I2C_Master_Write
 24636 ;;		i2_I2C_Master_Read
 24637 ;; This function uses a non-reentrant model
 24638 ;;
 24639                           
 24640                           	psect	text95
 24641  00569C                     __ptext95:
 24642                           	opt stack 0
 24643  00569C                     i2_I2C_Master_Wait:
 24644                           	opt stack 19
 24645  00569C                     i2l66:
 24646  00569C  B4C7               	btfsc	4039,2,c	;volatile
 24647  00569E  D7FE               	goto	i2l66
 24648  0056A0  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 24649  0056A4  0E1F               	movlw	31
 24650  0056A6  1601               	andwf	??i2_I2C_Master_Wait,f,c
 24651  0056A8  B4D8               	btfsc	status,2,c
 24652  0056AA  0012               	return	
 24653  0056AC  D7F7               	goto	i2l66
 24654  0056AE                     __end_ofi2_I2C_Master_Wait:
 24655                           	opt stack 0
 24656                           pclatu	equ	0xFFB
 24657                           pclath	equ	0xFFA
 24658                           tblptru	equ	0xFF8
 24659                           tblptrh	equ	0xFF7
 24660                           tblptrl	equ	0xFF6
 24661                           tablat	equ	0xFF5
 24662                           prodh	equ	0xFF4
 24663                           prodl	equ	0xFF3
 24664                           intcon	equ	0xFF2
 24665                           intcon2	equ	0xFF1
 24666                           intcon3	equ	0xFF0
 24667                           indf0	equ	0xFEF
 24668                           postinc0	equ	0xFEE
 24669                           fsr0h	equ	0xFEA
 24670                           fsr0l	equ	0xFE9
 24671                           wreg	equ	0xFE8
 24672                           postdec1	equ	0xFE5
 24673                           fsr1h	equ	0xFE2
 24674                           fsr1l	equ	0xFE1
 24675                           indf2	equ	0xFDF
 24676                           postinc2	equ	0xFDE
 24677                           postdec2	equ	0xFDD
 24678                           fsr2h	equ	0xFDA
 24679                           fsr2l	equ	0xFD9
 24680                           status	equ	0xFD8
 24681                           
 24682 ;; *************** function i2_delay_ms *****************
 24683 ;; Defined at:
 24684 ;;		line 632 in file "sort.c"
 24685 ;; Parameters:    Size  Location     Type
 24686 ;;  milliseconds    1    wreg     unsigned char 
 24687 ;; Auto vars:     Size  Location     Type
 24688 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24689 ;; Return value:  Size  Location     Type
 24690 ;;                  1    wreg      void 
 24691 ;; Registers used:
 24692 ;;		wreg, status,2, status,0, cstack
 24693 ;; Tracked objects:
 24694 ;;		On entry : 0/0
 24695 ;;		On exit  : 0/0
 24696 ;;		Unchanged: 0/0
 24697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24702 ;;Total ram usage:        2 bytes
 24703 ;; Hardware stack levels used:    1
 24704 ;; This function calls:
 24705 ;;		Nothing
 24706 ;; This function is called by:
 24707 ;;		_printSortTimer
 24708 ;; This function uses a non-reentrant model
 24709 ;;
 24710                           
 24711                           	psect	text96
 24712  00563E                     __ptext96:
 24713                           	opt stack 0
 24714  00563E                     i2_delay_ms:
 24715                           	opt stack 22
 24716                           
 24717                           ;incstack = 0
 24718                           ;i2delay_ms@milliseconds stored from wreg
 24719  00563E  6E02               	movwf	i2delay_ms@milliseconds,c
 24720                           
 24721                           ;sort.c: 633: while(milliseconds > 0)
 24722  005640  D008               	goto	i2l8852
 24723  005642                     i2l8848:
 24724                           
 24725                           ;sort.c: 634: {
 24726                           ;sort.c: 635: milliseconds--;
 24727  005642  0602               	decf	i2delay_ms@milliseconds,f,c
 24728                           
 24729                           ;sort.c: 636: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24730  005644  0E0B               	movlw	11
 24731  005646  6E01               	movwf	??i2_delay_ms& (0+255),c
 24732  005648  0E48               	movlw	72
 24733  00564A                     i2u1078_47:
 24734  00564A  2EE8               	decfsz	wreg,f,c
 24735  00564C  D7FE               	bra	i2u1078_47
 24736  00564E  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24737  005650  D7FC               	bra	i2u1078_47
 24738  005652                     i2l8852:
 24739  005652  5002               	movf	i2delay_ms@milliseconds,w,c
 24740  005654  B4D8               	btfsc	status,2,c
 24741  005656  0012               	return	
 24742  005658  D7F4               	goto	i2l8848
 24743  00565A                     __end_ofi2_delay_ms:
 24744                           	opt stack 0
 24745                           pclatu	equ	0xFFB
 24746                           pclath	equ	0xFFA
 24747                           tblptru	equ	0xFF8
 24748                           tblptrh	equ	0xFF7
 24749                           tblptrl	equ	0xFF6
 24750                           tablat	equ	0xFF5
 24751                           prodh	equ	0xFF4
 24752                           prodl	equ	0xFF3
 24753                           intcon	equ	0xFF2
 24754                           intcon2	equ	0xFF1
 24755                           intcon3	equ	0xFF0
 24756                           indf0	equ	0xFEF
 24757                           postinc0	equ	0xFEE
 24758                           fsr0h	equ	0xFEA
 24759                           fsr0l	equ	0xFE9
 24760                           wreg	equ	0xFE8
 24761                           postdec1	equ	0xFE5
 24762                           fsr1h	equ	0xFE2
 24763                           fsr1l	equ	0xFE1
 24764                           indf2	equ	0xFDF
 24765                           postinc2	equ	0xFDE
 24766                           postdec2	equ	0xFDD
 24767                           fsr2h	equ	0xFDA
 24768                           fsr2l	equ	0xFD9
 24769                           status	equ	0xFD8
 24770                           pclatu	equ	0xFFB
 24771                           pclath	equ	0xFFA
 24772                           tblptru	equ	0xFF8
 24773                           tblptrh	equ	0xFF7
 24774                           tblptrl	equ	0xFF6
 24775                           tablat	equ	0xFF5
 24776                           prodh	equ	0xFF4
 24777                           prodl	equ	0xFF3
 24778                           intcon	equ	0xFF2
 24779                           intcon2	equ	0xFF1
 24780                           intcon3	equ	0xFF0
 24781                           indf0	equ	0xFEF
 24782                           postinc0	equ	0xFEE
 24783                           fsr0h	equ	0xFEA
 24784                           fsr0l	equ	0xFE9
 24785                           wreg	equ	0xFE8
 24786                           postdec1	equ	0xFE5
 24787                           fsr1h	equ	0xFE2
 24788                           fsr1l	equ	0xFE1
 24789                           indf2	equ	0xFDF
 24790                           postinc2	equ	0xFDE
 24791                           postdec2	equ	0xFDD
 24792                           fsr2h	equ	0xFDA
 24793                           fsr2l	equ	0xFD9
 24794                           status	equ	0xFD8
 24795                           
 24796                           	psect	rparam
 24797  0000                     pclatu	equ	0xFFB
 24798                           pclath	equ	0xFFA
 24799                           tblptru	equ	0xFF8
 24800                           tblptrh	equ	0xFF7
 24801                           tblptrl	equ	0xFF6
 24802                           tablat	equ	0xFF5
 24803                           prodh	equ	0xFF4
 24804                           prodl	equ	0xFF3
 24805                           intcon	equ	0xFF2
 24806                           intcon2	equ	0xFF1
 24807                           intcon3	equ	0xFF0
 24808                           indf0	equ	0xFEF
 24809                           postinc0	equ	0xFEE
 24810                           fsr0h	equ	0xFEA
 24811                           fsr0l	equ	0xFE9
 24812                           wreg	equ	0xFE8
 24813                           postdec1	equ	0xFE5
 24814                           fsr1h	equ	0xFE2
 24815                           fsr1l	equ	0xFE1
 24816                           indf2	equ	0xFDF
 24817                           postinc2	equ	0xFDE
 24818                           postdec2	equ	0xFDD
 24819                           fsr2h	equ	0xFDA
 24820                           fsr2l	equ	0xFD9
 24821                           status	equ	0xFD8
 24822                           
 24823                           	psect	temp
 24824  00007E                     btemp:
 24825                           	opt stack 0
 24826  00007E                     	ds	1
 24827  0000                     int$flags	set	btemp
 24828                           pclatu	equ	0xFFB
 24829                           pclath	equ	0xFFA
 24830                           tblptru	equ	0xFF8
 24831                           tblptrh	equ	0xFF7
 24832                           tblptrl	equ	0xFF6
 24833                           tablat	equ	0xFF5
 24834                           prodh	equ	0xFF4
 24835                           prodl	equ	0xFF3
 24836                           intcon	equ	0xFF2
 24837                           intcon2	equ	0xFF1
 24838                           intcon3	equ	0xFF0
 24839                           indf0	equ	0xFEF
 24840                           postinc0	equ	0xFEE
 24841                           fsr0h	equ	0xFEA
 24842                           fsr0l	equ	0xFE9
 24843                           wreg	equ	0xFE8
 24844                           postdec1	equ	0xFE5
 24845                           fsr1h	equ	0xFE2
 24846                           fsr1l	equ	0xFE1
 24847                           indf2	equ	0xFDF
 24848                           postinc2	equ	0xFDE
 24849                           postdec2	equ	0xFDD
 24850                           fsr2h	equ	0xFDA
 24851                           fsr2l	equ	0xFD9
 24852                           status	equ	0xFD8


Data Sizes:
    Strings     1344
    Constant    27
    Data        8
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_130(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_129(CODE[18]), STR_128(CODE[18]), STR_127(CODE[17]), STR_126(CODE[17]), 
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), 
		 -> STR_113(CODE[17]), STR_112(CODE[17]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  224547
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23551
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17975
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11542
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10795
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23480
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22566
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46712
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13467
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118149
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9211
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9168
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9099
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15735
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9372
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19885
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9283
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8964
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 17:25:12 2017

                                    _i 013D                     i2_I2C_Master_Start 571A  
                   i2_I2C_Master_Write 56F0                                     l66 5688  
                                   _ID 30E2                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5102                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 00E2  
                                  l501 445A                                    l183 00E6  
                                  l620 2966                                    l188 0102  
                                  l811 15AC                                    l803 16AE  
                                  l812 15D4                                    l813 15FC  
                                  l814 1624                                    l815 164E  
                                  l840 3346                                    l833 3256  
                                  l809 1586                                    l834 3270  
                                  l835 32AE                                    l819 16FA  
                                  l836 3294                                    l776 125E  
                                  l794 141E                                    l786 1322  
                                  l892 495A                                    l797 146C  
                                  l789 1370                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3B30                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 401E  
                                  _log 00F4                                    _sel 00FD  
                                  _var 0145                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3CB4                    _log_count_can_w_lab 0141  
                           i2_delay_ms 563E        __end_of_change_state_to_menu_11 5332  
      __end_of_change_state_to_menu_12 5172        __end_of_change_state_to_menu_22 513A  
      __end_of_change_state_to_menu_23 5302           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5422  
      __end_of_change_state_to_logs_12 53F2        __end_of_change_state_to_logs_22 53C2  
      __end_of_change_state_to_logs_23 547E        __end_of_change_state_to_logs_33 5392  
      __end_of_change_state_to_logs_34 5362                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1200 3F5E  
                                 l1203 3F7E                                   l1107 3DE2  
                                 l1223 4344                                   l1312 111C  
                                 l1232 2610                                   l1226 4348  
                                 l1331 4EA6                                   l1307 1046  
                                 l1235 2614                                   l1412 3C52  
                                 l1413 3C6C                                   l1325 4E96  
                                 l1261 0944                                   l1085 413E  
                                 l1270 0B04                                   l1407 3C06  
                                 l1271 0B52                                   l1361 259E  
                                 l1265 09EA                                   l1346 25A4  
                                 l1450 4E4A                                   l1258 0940  
                                 l1098 566A                                   l1355 2518  
                                 l1427 410E                                   l1444 4E3A  
                                 l1268 0A50                                   l1436 4108  
                                 l1428 40D0                                   l1269 0A9E  
                                 l1390 49F0                                   l1359 2570  
                                 l1383 49E0                                   l1295 0EAC  
                                 l1484 194E                                   ?_arm 0001  
                                 l1931 4B06                                   l1941 4D8C  
                                 l1878 46A6                                   l7110 41B4  
                                 l6312 5448                                   l6330 54F6  
                                 l7122 41EC                                   l7106 41AA  
                                 l7114 41CC                                   l7132 551C  
                                 l7060 46C6                                   l6350 4AC8  
                                 l8110 0CD6                                   l8102 0C9C  
                                 l7118 41E2                                   l7070 4752  
                                 l6600 1AA2                                   l8120 0CFE  
                                 l9000 0388                                   l7128 5506  
                                 l7160 4B1E                                   l7064 46DC  
                                 l6346 4AB6                                   l6370 4D5A  
                                 l6610 1B14                                   l6530 18CA  
                                 l6514 1828                                   l6506 17F6  
                                 l6290 54D0                                   l8202 0E94  
                                 l8114 0CE0                                   l9010 041E  
                                 l9002 03A6                                   l6348 4AC2  
                                 l6604 1AB6                                   l6524 18A0  
                                 l6516 1834                                   l6540 1914  
                                 l6612 1B20                                   l8220 0EFE  
                                 l8140 0D64                                   l8124 0D08  
                                 l9012 043C                                   l9004 03C4  
                                 l9020 04DC                                   l7180 4B76  
                                 l7164 4B34                                   l6358 4AF8  
                                 l6374 4D7E                                   l6366 4D48  
                                 l6606 1ABC                                   l6534 18F6  
                                 l6526 18AC                                   l6518 183A  
                                 l8310 10B8                                   l8302 1096  
                                 l8230 0F26                                   l8150 0D8C  
                                 l8118 0CF8                                   l8062 0BD8  
                                 l9110 0700                                   l9014 045A  
                                 l9006 03E2                                   l7510 12A2  
                                 _ADIE 007CEE                                   l6368 4D54  
                                 l6552 1986                                   l6536 190E  
                                 l6528 18B2                                   l6288 54BE  
                                 l8320 10E0                                   l8312 10BE  
                                 l8224 0F16                                   l8216 0EF4  
                                 l8144 0D7C                                   l8136 0D5A  
                                 l8128 0D20                                   l8072 0C00  
                                 l8400 40F0                                   l6624 48D0  
                                 l6616 517C                                   l9200 089A  
                                 l9120 072A                                   l9032 0540  
                                 l9024 051E                                   l9008 0400  
                                 l7272 485C                                   l7176 4B5E  
                                 l7600 14FE                                   l6570 19E2  
                                 l6482 1716                                   l8306 10A0  
                                 l8250 0F9A                                   l8242 0F78  
                                 l8234 0F3E                                   l8226 0F1C  
                                 l8170 0E00                                   l8162 0DDE  
                                 l8154 0DA4                                   l8146 0D82  
                                 l8066 0BF0                                   l8058 0BCE  
                                 l8402 40FA                                   l6634 4906  
                                 l6618 5188                                   l9114 0718  
                                 l9106 06F6                                   l9042 055C  
                                 l9018 0478                                   l6580 1A3C  
                                 l6556 19A0                                   l6492 1746  
                                 l6652 493E                                   l8316 10C8  
                                 l8260 0FC2                                   l8252 0FA0  
                                 l8180 0E28                                   l8172 0E06  
                                 l8092 0C74                                   l8084 0C52  
                                 l8076 0C18                                   l8068 0BF6  
                                 l6628 48E6                                   l6900 2A60  
                                 l9204 08A4                                   l9124 0734  
                                 l9028 0528                                   l9212 08C8  
                                 l7268 4846                                   l7540 135A  
                                 l6582 1A46                                   l6558 19A6  
                                 l6486 172A                                   l8342 1146  
                                 l8326 1106                                   l8246 0F82  
                                 l8166 0DE8                                   l8094 0C7A  
                                 l6902 2A7E                                   l6910 2AD8  
                                 l9150 07BC                                   l9070 0644  
                                 l9046 0574                                   l9038 0552  
                                 l6670 462A                                   l7278 4888  
                                 l7550 139E                                   l6576 1A04  
                                 l6488 173C                                   l8352 116E  
                                 l8336 1136                                   l8272 1006  
                                 l8256 0FAA                                   l8192 0E6C  
                                 l8176 0E10                                   l8088 0C5C  
                                 l6904 2A9C                                   l6912 2B36  
                                 l9208 08BC                                   l9160 07E6  
                                 l9128 074C                                   l9080 066E  
                                 l6672 463A                                   l7720 321A  
                                 l7704 31D2                                   l7616 1562  
                                 l7528 130C                                   l6594 1A7C  
                                 l6498 177A                                   l6658 4978  
                                 l8506 23AC                                   l8346 115E  
                                 l8338 113C                                   l8282 102E  
                                 l8098 0C84                                   l6906 2ABA  
                                 l9154 07D4                                   l9146 07B2  
                                 l9074 065C                                   l9066 063A  
                                 l6682 4694                                   l6674 4640  
                                 l7730 3240                                   l7722 321C  
                                 l7538 1350                                   l6596 1A88  
                                 l6588 1A60                                   l8508 23B2  
                                 l8452 4A18                                   l8356 1186  
                                 l8348 1164                                   l8276 101E  
                                 l8268 0FFC                                   l8196 0E84  
                                 l8188 0E62                                   l9164 07F0  
                                 l9084 0678                                   l7740 3274  
                                 l7716 320A                                   l7708 31E2  
                                 l7484 121C                                   l8550 24EE  
                                 l8526 2462                                   l8278 1024  
                                 l8198 0E8A                                   l8390 40B8  
                                 l9502 3F1A                                   l9190 0870  
                                 l7742 327E                                   l7646 1664  
                                 l7654 16B6                                   l7566 1408  
                                 l7494 1266                                   l8544 24C4  
                                 l8392 40C2                                   l7920 2860  
                                 l9520 3F8A                                   l9168 0808  
                                 l9088 0690                                   l7648 169A  
                                 l7592 14C0                                   l7576 144C  
                                 l8722 3C32                                   l8714 3C08  
                                 l8554 2502                                   l8546 24DA  
                                 l8538 24A4                                   l8386 4092  
                                 l9530 3FA8                                   l9522 3F90  
                                 l8810 47D8                                   l8802 47A2  
                                 l6890 29CA                                   l9194 0888  
                                 l9186 0866                                   l7666 16EE  
                                 l7578 1456                                   l8724 3C3C  
                                 l8716 3C18                                   l8740 3CAE  
                                 l8564 2546                                   l7932 28A8  
                                 l7916 282A                                   l7908 27FA  
                                 l7860 2664                                   l9532 3FAE  
                                 l9524 3F96                                   l9540 3FC0  
                                 l8804 47AE                                   l6892 29E8  
                                 l6884 2970                                   l8900 0144  
                                 l7780 421C                                   l7588 149A  
                                 l7668 16FC                                   l8734 3C6E  
                                 l8398 40D6                                   l9534 3FB4  
                                 l9526 3F9C                                   l9518 3F84  
                                 l9542 4012                                   l8750 455A  
                                 l8806 47B4                                   l8814 47E6  
                                 l6894 2A06                                   l6886 298E  
                                 l6878 28E4                                   l9462 3D00  
                                 l7782 4236                                   l7790 4284  
                                 l7766 3304                                   l7774 3348  
                                 l8736 3C7E                                   l8568 255A  
                                 l8488 22FC                                   l7928 2872  
                                 l9536 3FBA                                   l9528 3FA2  
                                 l6896 2A24                                   l6888 29AC  
                                 l8904 015C                                   l9464 3D14  
                                 l7784 4250                                   l7792 42B2  
                                 l7890 276C                                   l8762 458E  
                                 l8818 47FA                                   l6898 2A42  
                                 l8922 01C2                                   l7786 426A  
                                 l7972 09AE                                   l8764 459A  
                                 l8756 4570                                   l8932 01EA  
                                 l8924 01C8                                   l8908 016E  
                                 l9740 442C                                   l8694 3BA4  
                                 l7982 09D6                                   l7974 09B4  
                                 l7878 271C                                   l8782 45F2  
                                 l8774 45D0                                   l8766 45A0  
                                 l9742 4432                                   l9734 4406  
                                 l7896 27AE                                   l8960 026C  
                                 l8952 024A                                   l8928 01D2  
                                 l9488 3D9C                                   l9752 4450  
                                 l9744 4438                                   l9736 441C  
                                 l8698 3BD4                                   l7978 09BE  
                                 l8778 45DE                                   l8794 477E  
                                 l8970 0288                                   l8938 01F8  
                                 l9754 4456                                   l8956 0254  
                                 l8892 0128                                   l8798 478E  
                                 l8990 02F2                                   l8974 02A0  
                                 l8966 027E                                   l8886 00FE  
                                 l9758 445C                                   STR_1 FB69  
                                 l8992 0310                                   l8896 013A  
                                 STR_2 FF31                                   STR_3 FB57  
                                 l8994 032E                                   STR_4 FE54  
                                 STR_5 FB57                                   l8996 034C  
                                 STR_6 FDF0                                   STR_7 FFC3  
                                 l8998 036A                                   STR_8 FFDA  
                                 STR_9 FFCA                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u6120 1584  
                                 u4610 5446                                   _PEIE 007F96  
                                 u7110 40E6                                   u6070 14DE  
                                 u7120 40E8                                   u6400 26A6  
                                 u5520 2966                                   u6320 3310  
                                 u5505 4DC6                                   u6410 26A8  
                                 u4810 4FEA                                   u7060 40AE  
                                 u6340 3346                                   u6180 313C  
                                 u4820 4FEC                                   _RCEN 007E2B  
                                 u7070 40B0                                   u4830 5036  
                                 u6190 3192                                   u4831 5032  
                                 u4840 5038                                   u6440 284E  
                                 u6088 14E2                                   u4930 18EC  
                                 u7330 248C                                   u7250 233E  
                                 u6338 3314                                   u7260 2340  
                                 u6540 09EA                                   u6188 3140  
                                 u6470 2896                                   u6198 3196  
                                 u7600 3C2A                                   u7280 23F4  
                                 u6560 0A9E                                   u6448 2852  
                                 u4937 18E2                                   i2l66 569C  
                                 u4890 1874                                   u7290 23F6  
                                 u7380 24D2                                   u7348 2490  
                                 u6580 0B52                                   u7541 3BFC  
                                 u9117 11AC                                   u7550 3BFE  
                                 u7390 24EA                                   u6478 289A  
                                 u5870 1228                                   u7391 24E6  
                                 u9207 143A                                   u9127 12D0  
                                 u7480 3B66                                   u4897 186A  
                                 u9217 1476                                   u9137 132C  
                                 u7650 3C9C                                   u7490 3BC2  
                                 u5890 125E                                   u9307 15DE  
                                 u9227 1488                                   u9147 133E  
                                 u9317 15F2                                   u9237 14A8  
                                 u9157 137A                                   u7591 3C28  
                                 u9407 30FC                                   u9327 1606  
                                 u9247 1518                                   u9167 138C  
                                 u7488 3B6A                                   u5888 122C  
                                 u9417 3122                                   u9337 161A  
                                 u9257 1550                                   u9177 13AC  
                                 u7658 3CA0                                   u7498 3BC6  
                                 u8730 3DE2                                   u9507 4160  
                                 u9427 315A                                   u9347 162E  
                                 u9267 1590                                   u9187 13D6  
                                 u9517 41BC                                   u9437 3178  
                                 u9357 1642                                   u9277 15A2  
                                 u9197 1428                                   u9607 0206  
                                 u9527 41F4                                   u9447 325A  
                                 u9367 1658                                   u9287 15B6  
                                 u9617 025C                                   u9537 5048  
                                 u9457 3264                                   u9377 16D0  
                                 u9297 15CA                                   u9707 0708  
                                 u9627 0290                                   u9547 507C  
                                 u9467 3298                                   u9387 51FC  
                                 u9717 073C                                   u9637 02BA  
                                 u9557 002A                                   u9477 32A2  
                                 u9397 4B3C                                   u9807 2604  
                                 u9727 0766                                   u9647 0530  
                                 u9567 0114                                   u9487 32C8  
                                 u9817 2626                                   u9737 07C4  
                                 u9657 0564                                   u9577 014C  
                                 u9497 5512                                   u9907 2808  
                                 u9827 2654                                   u9747 07F8  
                                 u9667 058E                                   u9587 0184  
                                 u9917 402C                                   u9837 26BC  
                                 u9757 0822                                   u9677 064C  
                                 u9597 01DA                                   u9927 42F4  
                                 u9847 2710                                   u9767 0878  
                                 u9687 0680                                   u9937 4338  
                                 u9857 2730                                   u9777 08AC  
                                 u9697 06AA                                   u9947 435A  
                                 u9867 275E                                   u9787 3F28  
                                 u9957 08F0                                   u9877 27A2  
                                 u9797 25C0                                   u9967 0934  
                                 u9887 27C0                                   u9977 0956  
                                 u9897 27EE                                   u9987 09C6  
                                 _RSEN 007E29                                   u9997 09FA  
                          _stopSignals 5622                                   _Test 3F18  
                                 _back 005B                                   _main 43BC  
                                 _down 005D                                   _keys FAA3  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 55C0                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013F                        __end_ofi2_putch 56DA  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 3354                            i2_lcdNibble 4EAE  
                      __end_of_Loading 1708                   __end_of_actuatorTest 118E  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 4204  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 45FC  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FABE  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FE01                                  STR_15 FFD2  
                                STR_23 FF23                                  STR_31 FDDF  
                                STR_16 FFE2                                  STR_24 FD46  
                                STR_32 FD24                                  STR_40 FCE0  
                                STR_17 FFF2                                  STR_25 FE23  
                                STR_33 FD35                                  STR_41 FCCF  
                                STR_18 FFF6                                  STR_34 FDCE  
                                STR_50 FDAC                                  STR_42 FD8A  
                                STR_26 FD57                                  STR_43 FD8A  
                                STR_35 FDCE                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE12  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD68                                  STR_36 FD13  
                                STR_44 FCF1                        __end_of___awmod 4804  
                                STR_45 FCE0                                  STR_37 FD24  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE20                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEDC  
                                STR_38 FDBD                                  STR_46 FD9B  
                                STR_47 FD9B                                  STR_55 FFFA  
                                STR_63 FABE                                  STR_71 FF15  
                                STR_39 FD79                                  STR_56 FFDE  
                                STR_64 FF7B                                  STR_80 FE64  
                                STR_48 FD02                                  STR_72 FC58  
                                STR_49 FCF1                                  STR_57 FFD6  
                                STR_81 FE20                                  STR_65 FF4C  
                                STR_73 FEF9                                  STR_58 FFD2  
                                STR_74 FF59                                  STR_90 FECD  
                                STR_82 FE91                                  STR_66 FAD6  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FEEB                                  STR_75 FEBE  
                                STR_83 FE34                                  STR_84 FF86  
                                STR_76 FF07                                  STR_68 FC8B  
                                STR_92 FC69                                  STR_85 FF86  
                                STR_77 FFAD                                  STR_93 FF65  
                                STR_69 FC9C                                  STR_78 FF15  
                                STR_86 FFA4                                  STR_94 FC7A  
                                STR_87 FFA4                                  STR_95 FF70  
                                STR_79 FF3F                                  STR_88 FF90  
                                STR_96 FEAF                                  STR_89 FF15  
                                STR_97 FBD0                                  STR_98 FBBF  
                                STR_99 FB9D           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 46B8  
         i2updateServoPosition@time_us 0001                                  u10007 0A60  
                                u10017 0A7E                                  u10107 0CE8  
                                u10027 0AAE                                  u10117 0D10  
                                u10037 0B14                                  u10207 0F8A  
                                u10127 0D6C                                  u10047 0B32  
                                u10217 0FB2                                  u10137 0D94  
                                u10057 0B62                                  u10307 1176  
                                u10227 100E                                  u10147 0DF0  
                                u10067 0BE0                                  u10317 49AA  
                                u10237 1036                                  u10157 0E18  
                                u10077 0C08                                  u10407 2456  
                                u10327 49FA                                  u10247 1058  
                                u10167 0E74                                  u10087 0C64  
                                _T0CON 000FD5                                  u10417 2522  
                                u10337 4A0E                                  u10257 10A8  
                                u10177 0E9C                                  u10097 0C8C  
                                u10507 1C4C                                  u10427 2534  
                                u10347 4E04                                  u10267 10D0  
                                u10187 0F06                        ___awdiv@divisor 0088  
                                u10517 1C98                                  u10437 257A  
                                u10357 4E60                                  u10277 1120  
                                u10197 0F2E                                  u10607 1EAE  
                                u10527 1CCC                                  u10447 258C  
                                u10367 22DA                                  u10287 112A  
                                _T1CON 000FCD                                  u10617 1EE2  
                                u10537 1CFE                                  u10457 54C6  
                                u10377 2354                                  u10297 114E  
                                u10707 4CBC                                  u10627 1F14  
                                u10547 1D4A                                  u10467 1B4E  
                                u10387 23A0                                  u10717 4CC6  
                                u10637 4A62                                  u10557 1D7E  
                                u10477 1B9A                                  u10397 240A  
                                u10647 4A7E                                  u10567 1DB0  
                                u10487 1BE6                                  _T2CON 000FCA  
                                u10657 3B3E                                  u10577 1DFC  
                                u10497 1C1A                                  u10667 3C56  
                                u10587 1E30                                  u10677 3C60  
                                u10597 1E62                                  u10687 4C86  
                                _T3CON 000FB1                                  u10697 4C90  
                      __end_of___lwdiv 4B10                        __end_of___lwmod 4D96  
                                i2l263 2E36                                  i2l620 33E2  
                                i2l871 3008                                  i2l919 50FE  
                                i2l892 4C2A                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1B40                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 56CE                        __end_of_handler 377C  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 54D6  
                      __end_of_initLCD 5086                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                                _getIR 4B10                        __end_of_loadRTC 4890  
                      __end_of_readMAG 5040                        __end_of_dpowers FABE  
                                _first 0139                                  _enter 005F  
                                arm@on 00AC                        __end_of_isdigit 5500  
                                _input 007D                                  _putch 56AE  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5576                       __end_ofi2_getRTC 4BF4  
                  _log_count_pop_w_tab 0067                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 229C                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 5242  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1221 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4F5A                           __end_of_Test 401E  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4480  
                         __end_of_keys FAB4                           __end_of_sort 55E2  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3B30  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01C8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC25                                 STR_101 FC36  
                               STR_110 FCBE                                 STR_102 FB7B  
                               STR_103 FE44                                 STR_111 FAEB  
                               STR_112 FBE1                                 STR_104 FBAE  
                               STR_120 FB0F                                 STR_113 FC14  
                               STR_105 FB8C                                 STR_121 FAFD  
                               STR_106 FBAE                                 STR_114 FC14  
                               STR_130 FFB5                                 STR_122 FB45  
                               _ADRESH 000FC4                                 STR_107 FEA0  
                               STR_115 FC03                                 STR_123 FB21  
                               STR_116 FC14                                 STR_124 FB45  
                               STR_108 FE82                                 _EEADRH 000FAA  
                               STR_117 FC03                                 STR_125 FB45  
                               STR_109 FE73                                 STR_126 FBF2  
                               STR_118 FBF2                                 _ADRESL 000FC3  
                               STR_127 FCAD                                 STR_119 FC47  
                               STR_128 FAEB                                 STR_129 FB33  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 52A2  
            i2_change_state_to_menu_22 5272                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1011 3678                                 i2l1020 3720  
                               i2l1022 3740                                 i2l1098 5680  
                               i2l1484 2108                                 i2l1931 4F50  
                               i2l1941 50BE                                 i2l7040 3F00  
                               i2l7032 3ECC                                 i2l7028 3EBC  
                               i2l7220 3380                                 i2l6422 561A  
                               i2l7230 3418                                 i2l6432 4F1E  
                               i2l7400 38B8                                 i2l7240 3486  
                               i2l7232 342E                                 i2l6434 4F26  
                               i2l7330 37BA                                 i2l7322 37A0  
                               i2l7242 349C                                 i2l7234 3444  
                               i2l7226 33EC                                 i2l6444 4F46  
                               i2l6436 4F2A                                 i2l6460 50B4  
                               i2l6452 5094                                 i2l7412 38DA  
                               i2l7404 38C2                                 i2l7332 37CA  
                               i2l7340 37D8                                 i2l7244 34B2  
                               i2l7236 345A                                 i2l7228 3402  
                               i2l7252 34F4                                 i2l6454 509C  
                               i2l7430 391E                                 i2l7422 38FA  
                               i2l7350 37FE                                 i2l7334 37CE  
                               i2l7246 34C8                                 i2l7238 3470  
                               i2l7254 354E                                 i2l6704 4BE4  
                               i2l6456 50A0                                 i2l7352 3804  
                               i2l7344 37EC                                 i2l7440 393A  
                               i2l7248 34DE                                 i2l6810 2184  
                               i2l6722 1F38                                 i2l7434 3930  
                               i2l7426 390C                                 i2l7418 38E8  
                               i2l7370 3854                                 i2l7354 380A  
                               i2l7346 37F2                                 i2l6820 21C2  
                               i2l6732 1F5C                                 i2l7348 37F8  
                               i2l9300 2CA8                                 i2l6398 5596  
                               i2l6822 21CA                                 i2l6726 1F48  
                               i2l7358 3810                                 i2l6840 2212  
                               i2l6816 219E                                 i2l6728 1F56  
                               i2l7384 387A                                 i2l9320 2CFE  
                               i2l9312 2CDA                                 i2l9304 2CBE  
                               i2l9240 2BDA                                 i2l9232 2BBE  
                               i2l6850 2278                                 i2l6834 21F6  
                               i2l6770 2092                                 i2l6754 2018  
                               i2l6746 1FF0                                 i2l6738 1F8E  
                               i2l7394 38A0                                 i2l7378 386C  
                               i2l9226 2BAA                                 i2l6836 21FE  
                               i2l6844 2224                                 i2l6828 21E0  
                               i2l6764 2070                                 i2l6756 2022  
                               i2l6780 20D2                                 i2l6852 2280  
                               i2l7388 3896                                 i2l9340 2D4C  
                               i2l9332 2D28                                 i2l9324 2D0C  
                               i2l9316 2CE8                                 i2l9308 2CCC  
                               i2l9260 2C12                                 i2l9252 2BF6  
                               i2l9244 2BE8                                 i2l9236 2BCC  
                               i2l9228 2BB0                                 i2l6694 4BBA  
                               i2l6846 222A                                 i2l6774 20BC  
                               i2l6766 207A                                 i2l6758 2026  
                               i2l7398 38B4                                 i2l6792 2136  
                               i2l6776 20CE                                 i2l6768 2080  
                               i2l9600 3044                                 i2l6856 521A  
                               i2l9360 2D9A                                 i2l9352 2D7E  
                               i2l9344 2D5A                                 i2l9336 2D3E  
                               i2l9328 2D1A                                 i2l9280 2C5A  
                               i2l9272 2C3E                                 i2l9264 2C22  
                               i2l9256 2C04                                 i2l6698 4BCA  
                               i2l6858 5222                                 i2l6796 214E  
                               i2l9364 2DA8                                 i2l9356 2D8C  
                               i2l9348 2D68                                 i2l9292 2C8C  
                               i2l9284 2C68                                 i2l9276 2C4C  
                               i2l9268 2C30                                 i2l9620 3986  
                               i2l6798 2152                                 i2l9710 50D2  
                               i2l9374 2DCC                                 i2l9552 2E46  
                               i2l9712 50D8                                 i2l9368 2DBE  
                               i2l9296 2C9A                                 i2l9288 2C7E  
                               i2l8840 4C44                                 i2l9640 39E6  
                               i2l9632 39BC                                 i2l9624 399C  
                               i2l9800 364C                                 i2l9562 2EB0  
                               i2l8834 4C12                                 i2l9626 39A6  
                               i2l9650 3A44                                 i2l8852 5652  
                               i2l9556 2E56                                 i2l9716 50DE  
                               i2l9660 3A82                                 i2l9574 2F7E  
                               i2l9654 3A5C                                 i2l9638 39D2  
                               i2l9646 39F0                                 i2l9822 3696  
                               i2l8848 5642                                 i2l9680 3AFE  
                               i2l9648 3A3A                                 i2l9586 2FD6  
                               i2l9594 300A                                 i2l9666 3AA8  
                               i2l9850 36EE                                 i2l9770 35F6  
                               i2l9844 36D4                                 i2l9828 36A4  
                               i2l9772 35FA                                 i2l9780 360E  
                               i2l9598 303E                                 i2l9854 36F4  
                               i2l9782 3626                                 i2l9776 3606  
                               i2l9786 3630                                 i2l9876 373E  
              _f_most_recent_sort_time 0137                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5528  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 55C0                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 42E6  
                               ___wmul 51A8                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 51DE  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 4890                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5604  
                               _initUI 5242                                 _readIR 4FA8  
                               _logRun 3CB4                                 getIR@i 0087  
                               clear_0 4F80                                 clear_1 4F8C  
                               clear_2 4F98                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4E52  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1708                              ??_handler 004B  
              __size_of_initGlobalVars 00BE                           ?_retrieveLog 0007  
                               _strcpy 5172                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5550  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5528                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 4F5A  
                     __end_of_printRTC 2B7A                           __mediumconst FAA2  
                    __end_ofi2___lwmod 50C8                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0065                  __end_of_algorithmTest 43BC  
                    __end_ofi2_lcdInst 56E6                      __end_ofi2_isdigit 5622  
                           __accesstop 0080                __end_of__initialization 4F9E  
                        ?_inputHandler 002A                  _most_recent_sort_time 0069  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 5672                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 56FA                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 4B82                            i2printRTC@i 0041  
                        _initSortTimer 46B8            __end_of_updateServoPosition 499C  
                        __end_of_putch 56BE                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 3354  
                           __end_of_UI 08D6                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 54AA          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 547E                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08D6                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 4C64  
                         _EEPROM_write 411C                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3241 0147               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 4A20  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03EE  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2446 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10330 3A32                                i2l10340 2E0C  
                              i2l10332 3B16                                i2l10324 3A14  
                              i2l10342 2E28                                i2l10334 3B26  
                              i2l10326 3A1E                                i2l10328 3A28  
                              i2l10346 3828                                i2l10338 2DEA  
                              i2l10348 3844                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00EA  
                              i2_putch 56CE                              ?_initTime 0080  
                      _f_loadingNewCan 00F2                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4CD0                                _Loading 118E  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 453E  
                              ___awmod 4762                             _initServos 4A20  
                              ___lldiv 45FC                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4A98  
                              ___lwmod 4D34                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 4F5A  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4480                                _lcdInst 56BE  
                              _handler 0008                                __ptext0 43BC  
                              __ptext1 55C0                                __ptext2 118E  
                              __ptext3 46B8                                __ptext4 4480  
                              __ptext5 51DE                                __ptext6 4B10  
                              __ptext7 4FA8                                __ptext8 30E2  
                              __ptext9 5500                        __size_of_printf 0438  
                              _readADC 54AA                        __size_of_strcpy 0036  
                              _initLCD 5040                                _cur_can 012B  
                              _loadRTC 4804                                _readMAG 4FF4  
                              _dpowers FAB4                     actuatorTest@i_1762 00AE  
                   actuatorTest@i_1771 00B4                     actuatorTest@i_1763 00AF  
                   actuatorTest@i_1755 00AD                           __size_of_arm 00FE  
                   actuatorTest@i_1772 00B5                     actuatorTest@i_1781 00BA  
                   actuatorTest@i_1765 00B0                     actuatorTest@i_1782 00BB  
                   actuatorTest@i_1774 00B6                     actuatorTest@i_1766 00B1  
                   actuatorTest@i_1791 00C0                     actuatorTest@i_1775 00B7  
                   actuatorTest@i_1792 00C1                     actuatorTest@i_1784 00BC  
                   actuatorTest@i_1768 00B2                     actuatorTest@i_1785 00BD  
                   actuatorTest@i_1777 00B8                     actuatorTest@i_1769 00B3  
                   actuatorTest@i_1794 00C2                     actuatorTest@i_1778 00B9  
                   actuatorTest@i_1795 00C3                     actuatorTest@i_1787 00BE  
                   actuatorTest@i_1788 00BF                                _isdigit 54D6  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 4204  
                 PlatformTest@res_1807 00AF                         __pintcode_body 358A  
                 end_of_initialization 4F9E                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 358A                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1072_47 37C0                              i2u1073_47 2FB0  
                            i2u1074_47 4EC8                              i2u1075_47 4ED2  
                            i2u1076_47 4EF4                              i2u1077_47 4EFE  
                            i2u1078_47 564A              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 565A                 __end_of_initGlobalVars 453E  
                           _sensorTest 25B2                             _servoTimes 00DA  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3968                           ??_BothServos 00AB  
                __end_of_machineConfig 4D34                   __end_of_PlatformTest 25B2  
                           _updateMenu 2B7A                      i2_I2C_Master_Read 5576  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 569C  
                    i2_I2C_Master_Stop 5712                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 4DF6  
                            i2___lwdiv 4F08                              i2___lwmod 5086  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 358A  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 56DA  
                        Loading@i_1183 00B6                          Loading@i_1192 00B8  
                        Loading@i_1194 00BA                          Loading@i_1195 00BC  
                           _total_time 00FA                          Loading@i_1197 00BE  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5604  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1F2E  
                  __end_of_EEPROM_read 5672                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 51DE  
                       __end_of_getMAG 5210                         __end_of_getRTC 4916  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5272                         __end_of_readIR 4FF4  
                       __end_of_logRun 3DF8                       i2___wmul@product 0005  
                       __end_of_printf 1B40                           i2printf@flag 0026  
                       __end_of_strcpy 51A8              __end_ofi2_I2C_Master_Read 559C  
            __end_ofi2_I2C_Master_Wait 56AE                           i2printf@prec 001D  
                  start_initialization 4F5A              __end_ofi2_I2C_Master_Stop 571A  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 4E52  
                          __end_of_arm 411C                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1463 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 499C                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0147                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1208 0086  
                             ID@i_1209 0088                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                   __size_of_BlockerTest 0184  
                  _printSortTimer$2578 0043                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2083 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                            _EEPROM_read 565A  
                     _I2C_Master_Start 570A                     __end_of_PortTestDC 4EAE  
                            _f_lastCan 00F0                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 56E6  
                    __size_of_initTime 0022                  i2_updateServoPosition 4BF4  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAA2                              _lcdNibble 4C64  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 0316  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 42E6  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0272  
                          __size_of_UI 08C4                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5722             __end_ofi2_I2C_Master_Write 56FA  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 377C                            ??i2_isdigit 0001  
                         _PlatformTest 229C                           BlockerTest@i 00AC  
                             i2u530_40 20B4                               i2u530_47 20AA  
                             _PIR2bits 000FA1                               i2u526_40 2054  
                             i2u526_47 204A                               i2u471_40 5594  
                      PlatformTest@res 00AD                               i2u571_40 33E2  
                             i2u882_40 2FE0                               i2u884_40 3008  
                             i2u883_48 2FE2                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5550                          lcdNibble@data 0081  
                             i2_getRTC 4B82                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1F2E  
                             i2_strcpy 5210                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4F6E  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5688                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 057A  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4762                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 5302             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 513A             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 5102                _change_state_to_menu_23 52D2  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 53F2  
              _change_state_to_logs_12 53C2                _change_state_to_logs_22 5392  
              _change_state_to_logs_23 5450                _change_state_to_logs_33 5362  
              _change_state_to_logs_34 5332                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3774  
                      _I2C_Master_Init 4D96                       __size_of_readADC 002C  
                      _I2C_Master_Read 5422                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5688  
                      _I2C_Master_Stop 5702                       __size_of_isdigit 002A  
                             _delay_ms 5500                         _printSortTimer 2E3A  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3F18                               __ptext10 4204  
                             __ptext11 4CD0                               __ptext20 55E2  
                             __ptext12 3CB4                               __ptext21 5040  
                             __ptext13 411C                               __ptext30 5688  
                             __ptext22 0012                               __ptext14 565A  
                             __ptext31 5102                               __ptext23 28B0  
                             __ptext15 5242                               __ptext40 08D6  
                             __ptext32 513A                               __ptext24 5172  
                             __ptext16 4804                               __ptext41 499C  
                             __ptext33 4762                               __ptext25 4890  
                             __ptext17 4D96                               __ptext50 3B30  
                             __ptext42 4DF6                               __ptext34 453E  
                             __ptext26 56E6                               __ptext18 45FC  
                             __ptext51 1708                               __ptext43 4E52  
                             __ptext35 3F18                               __ptext27 5702  
                             __ptext19 547E                               __ptext60 3968  
                             __ptext52 56AE                               __ptext44 229C  
                             __ptext36 25B2                               __ptext28 570A  
                             __ptext61 4BF4                               __ptext53 54D6  
                             __ptext45 54AA                               __ptext37 4FF4  
                             __ptext29 5422                               __ptext70 5302  
                             __ptext62 2B7A                               __ptext54 51A8  
                             __ptext46 1B40                               __ptext38 401E  
                             __ptext71 5332                               __ptext63 5528  
                             __ptext55 4D34                               __ptext47 5622  
                             __ptext39 42E6                               __ptext80 50C8  
                             __ptext72 5362                               __ptext64 3354  
                             __ptext56 4A98                               __ptext48 4A20  
                             __ptext81 2E3A                               __ptext73 5450  
                             __ptext65 5210                               __ptext57 56BE  
                             __ptext49 4916                               __ptext90 4B82  
                             __ptext82 1F2E                               __ptext74 5392  
                             __ptext66 377C                               __ptext58 4C64  
                             __ptext91 56F0                               __ptext83 56CE  
                             __ptext75 53C2                               __ptext67 5272  
                             __ptext92 5712                               __ptext84 5604  
                             __ptext76 53F2                               __ptext68 52A2  
                             __ptext93 571A                               __ptext85 5550  
                             __ptext77 559C                               __ptext69 52D2  
                             __ptext94 5576                               __ptext86 5086  
                             __ptext78 3DF8                               __ptext95 569C  
                             __ptext87 4F08                               __ptext79 5672  
                             __ptext96 563E                               __ptext88 56DA  
                             __ptext89 4EAE                               _dispLogs 559C  
                        ?_actuatorTest 0001                     PlatformTest@i_1811 00B3  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2083 0002                     __end_of_initServos 4A98  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 55E2                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4916  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 28B0                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 52D2  
    __end_ofi2_change_state_to_menu_22 52A2                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 30E2  
                            putch@data 0082               __end_of_I2C_Master_Start 5712  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 56F0  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 28B0  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 563E  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2E3A                __end_of_I2C_Master_Init 4DF6  
              __end_of_I2C_Master_Read 5450                __end_of_I2C_Master_Wait 569C  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 570A  
                        printRTC@F3231 014B                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 3DF8  
                  __end_ofi2_lcdNibble 4F08                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 50C8  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4CD0  
                      ___lwmod@counter 008B                      _updateServoStates 3968  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EE  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
