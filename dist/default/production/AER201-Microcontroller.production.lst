

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Apr 08 16:28:15 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.40
   117                           ; Generated 01/12/2016 GMT
   118                           ; 
   119                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F4620 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataBANK1
   152  005636                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for UI@F3241
   156  005636  4D                 	db	77
   157  005637  4D                 	db	77
   158  005638  4D                 	db	77
   159  005639  00                 	db	0
   160                           
   161                           ;initializer for printRTC@F3231
   162  00563A  4D                 	db	77
   163  00563B  4D                 	db	77
   164  00563C  4D                 	db	77
   165  00563D  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  00FAA2                     __pmediumconst:
   169                           	opt stack 0
   170  00FAA2  00                 	db	0
   171  00FAA3                     _keys:
   172                           	opt stack 0
   173  00FAA3  31                 	db	49
   174  00FAA4  32                 	db	50
   175  00FAA5  33                 	db	51
   176  00FAA6  41                 	db	65
   177  00FAA7  34                 	db	52
   178  00FAA8  35                 	db	53
   179  00FAA9  36                 	db	54
   180  00FAAA  42                 	db	66
   181  00FAAB  37                 	db	55
   182  00FAAC  38                 	db	56
   183  00FAAD  39                 	db	57
   184  00FAAE  43                 	db	67
   185  00FAAF  2A                 	db	42
   186  00FAB0  30                 	db	48
   187  00FAB1  23                 	db	35
   188  00FAB2  44                 	db	68
   189  00FAB3  00                 	db	0
   190  00FAB4                     __end_of_keys:
   191                           	opt stack 0
   192  00FAB4                     _dpowers:
   193                           	opt stack 0
   194  00FAB4  0001               	dw	1
   195  00FAB6  000A               	dw	10
   196  00FAB8  0064               	dw	100
   197  00FABA  03E8               	dw	1000
   198  00FABC  2710               	dw	10000
   199  00FABE                     __end_of_dpowers:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _CMCONbits	set	4020
   208  0000                     _CVRCON	set	4021
   209  0000                     _EEADR	set	4009
   210  0000                     _EEADRH	set	4010
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _LATA	set	3977
   216  0000                     _LATAbits	set	3977
   217  0000                     _LATB	set	3978
   218  0000                     _LATBbits	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATCbits	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _PR2	set	4043
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T0CON	set	4053
   237  0000                     _T1CON	set	4045
   238  0000                     _T2CON	set	4042
   239  0000                     _T3CON	set	4017
   240  0000                     _TMR0H	set	4055
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR3H	set	4019
   245  0000                     _TMR3L	set	4018
   246  0000                     _TRISA	set	3986
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISE	set	3990
   251  0000                     _ACKDT	set	32301
   252  0000                     _ACKEN	set	32300
   253  0000                     _ADIE	set	31982
   254  0000                     _INT1IE	set	32643
   255  0000                     _INT1IF	set	32640
   256  0000                     _PEIE	set	32662
   257  0000                     _PEN	set	32298
   258  0000                     _RCEN	set	32299
   259  0000                     _RSEN	set	32297
   260  0000                     _SEN	set	32296
   261  0000                     _TMR0IE	set	32661
   262  0000                     _TMR0IF	set	32658
   263  0000                     _TMR0ON	set	32431
   264  0000                     _TMR1IE	set	31976
   265  0000                     _TMR1IF	set	31984
   266  0000                     _TMR1ON	set	32360
   267  0000                     _TMR2IE	set	31977
   268  0000                     _TMR2IF	set	31985
   269  0000                     _TMR2ON	set	32338
   270  0000                     _TMR3IE	set	32001
   271  0000                     _TMR3IF	set	32009
   272  0000                     _TMR3ON	set	32136
   273  0000                     _TRISC3	set	31907
   274  0000                     _TRISC4	set	31908
   275  0000                     _nRBPU	set	32655
   276  00FABE                     STR_21:
   277  00FABE  25                 	db	37
   278  00FABF  30                 	db	48	;'0'
   279  00FAC0  32                 	db	50	;'2'
   280  00FAC1  64                 	db	100	;'d'
   281  00FAC2  25                 	db	37
   282  00FAC3  73                 	db	115	;'s'
   283  00FAC4  20                 	db	32
   284  00FAC5  7C                 	db	124
   285  00FAC6  20                 	db	32
   286  00FAC7  25                 	db	37
   287  00FAC8  30                 	db	48	;'0'
   288  00FAC9  32                 	db	50	;'2'
   289  00FACA  64                 	db	100	;'d'
   290  00FACB  3A                 	db	58	;':'
   291  00FACC  25                 	db	37
   292  00FACD  30                 	db	48	;'0'
   293  00FACE  32                 	db	50	;'2'
   294  00FACF  64                 	db	100	;'d'
   295  00FAD0  3A                 	db	58	;':'
   296  00FAD1  25                 	db	37
   297  00FAD2  30                 	db	48	;'0'
   298  00FAD3  32                 	db	50	;'2'
   299  00FAD4  64                 	db	100	;'d'
   300  00FAD5  00                 	db	0
   301  00FAD6                     STR_66:
   302  00FAD6  28                 	db	40
   303  00FAD7  64                 	db	100	;'d'
   304  00FAD8  61                 	db	97	;'a'
   305  00FAD9  74                 	db	116	;'t'
   306  00FADA  61                 	db	97	;'a'
   307  00FADB  3A                 	db	58	;':'
   308  00FADC  20                 	db	32
   309  00FADD  25                 	db	37
   310  00FADE  75                 	db	117	;'u'
   311  00FADF  2C                 	db	44
   312  00FAE0  20                 	db	32
   313  00FAE1  61                 	db	97	;'a'
   314  00FAE2  64                 	db	100	;'d'
   315  00FAE3  64                 	db	100	;'d'
   316  00FAE4  72                 	db	114	;'r'
   317  00FAE5  3A                 	db	58	;':'
   318  00FAE6  20                 	db	32
   319  00FAE7  25                 	db	37
   320  00FAE8  75                 	db	117	;'u'
   321  00FAE9  29                 	db	41
   322  00FAEA  00                 	db	0
   323  00FAEB                     STR_111:
   324  00FAEB  44                 	db	68	;'D'
   325  00FAEC  20                 	db	32
   326  00FAED  57                 	db	87	;'W'
   327  00FAEE  49                 	db	73	;'I'
   328  00FAEF  4C                 	db	76	;'L'
   329  00FAF0  4C                 	db	76	;'L'
   330  00FAF1  20                 	db	32
   331  00FAF2  52                 	db	82	;'R'
   332  00FAF3  45                 	db	69	;'E'
   333  00FAF4  54                 	db	84	;'T'
   334  00FAF5  55                 	db	85	;'U'
   335  00FAF6  52                 	db	82	;'R'
   336  00FAF7  4E                 	db	78	;'N'
   337  00FAF8  20                 	db	32
   338  00FAF9  20                 	db	32
   339  00FAFA  20                 	db	32
   340  00FAFB  20                 	db	32
   341  00FAFC  00                 	db	0
   342  00FAFD                     STR_119:
   343  00FAFD  4F                 	db	79	;'O'
   344  00FAFE  54                 	db	84	;'T'
   345  00FAFF  48                 	db	72	;'H'
   346  00FB00  45                 	db	69	;'E'
   347  00FB01  52                 	db	82	;'R'
   348  00FB02  20                 	db	32
   349  00FB03  53                 	db	83	;'S'
   350  00FB04  45                 	db	69	;'E'
   351  00FB05  54                 	db	84	;'T'
   352  00FB06  53                 	db	83	;'S'
   353  00FB07  20                 	db	32
   354  00FB08  52                 	db	82	;'R'
   355  00FB09  41                 	db	65	;'A'
   356  00FB0A  35                 	db	53	;'5'
   357  00FB0B  20                 	db	32
   358  00FB0C  20                 	db	32
   359  00FB0D  20                 	db	32
   360  00FB0E  00                 	db	0
   361  00FB0F                     STR_118:
   362  00FB0F  53                 	db	83	;'S'
   363  00FB10  3A                 	db	58	;':'
   364  00FB11  20                 	db	32
   365  00FB12  44                 	db	68	;'D'
   366  00FB13  20                 	db	32
   367  00FB14  57                 	db	87	;'W'
   368  00FB15  49                 	db	73	;'I'
   369  00FB16  4C                 	db	76	;'L'
   370  00FB17  4C                 	db	76	;'L'
   371  00FB18  20                 	db	32
   372  00FB19  52                 	db	82	;'R'
   373  00FB1A  45                 	db	69	;'E'
   374  00FB1B  54                 	db	84	;'T'
   375  00FB1C  55                 	db	85	;'U'
   376  00FB1D  52                 	db	82	;'R'
   377  00FB1E  4E                 	db	78	;'N'
   378  00FB1F  20                 	db	32
   379  00FB20  00                 	db	0
   380  00FB21                     STR_121:
   381  00FB21  4F                 	db	79	;'O'
   382  00FB22  54                 	db	84	;'T'
   383  00FB23  48                 	db	72	;'H'
   384  00FB24  45                 	db	69	;'E'
   385  00FB25  52                 	db	82	;'R'
   386  00FB26  3A                 	db	58	;':'
   387  00FB27  20                 	db	32
   388  00FB28  43                 	db	67	;'C'
   389  00FB29  41                 	db	65	;'A'
   390  00FB2A  4D                 	db	77	;'M'
   391  00FB2B  20                 	db	32
   392  00FB2C  54                 	db	84	;'T'
   393  00FB2D  4F                 	db	79	;'O'
   394  00FB2E  47                 	db	71	;'G'
   395  00FB2F  47                 	db	71	;'G'
   396  00FB30  4C                 	db	76	;'L'
   397  00FB31  45                 	db	69	;'E'
   398  00FB32  00                 	db	0
   399  00FB33                     STR_127:
   400  00FB33  4F                 	db	79	;'O'
   401  00FB34  54                 	db	84	;'T'
   402  00FB35  48                 	db	72	;'H'
   403  00FB36  45                 	db	69	;'E'
   404  00FB37  52                 	db	82	;'R'
   405  00FB38  20                 	db	32
   406  00FB39  53                 	db	83	;'S'
   407  00FB3A  45                 	db	69	;'E'
   408  00FB3B  54                 	db	84	;'T'
   409  00FB3C  53                 	db	83	;'S'
   410  00FB3D  20                 	db	32
   411  00FB3E  50                 	db	80	;'P'
   412  00FB3F  55                 	db	85	;'U'
   413  00FB40  53                 	db	83	;'S'
   414  00FB41  48                 	db	72	;'H'
   415  00FB42  45                 	db	69	;'E'
   416  00FB43  52                 	db	82	;'R'
   417  00FB44  00                 	db	0
   418  00FB45                     STR_120:
   419  00FB45  44                 	db	68	;'D'
   420  00FB46  3A                 	db	58	;':'
   421  00FB47  20                 	db	32
   422  00FB48  52                 	db	82	;'R'
   423  00FB49  45                 	db	69	;'E'
   424  00FB4A  54                 	db	84	;'T'
   425  00FB4B  7C                 	db	124
   426  00FB4C  32                 	db	50	;'2'
   427  00FB4D  3A                 	db	58	;':'
   428  00FB4E  20                 	db	32
   429  00FB4F  43                 	db	67	;'C'
   430  00FB50  4F                 	db	79	;'O'
   431  00FB51  4E                 	db	78	;'N'
   432  00FB52  44                 	db	68	;'D'
   433  00FB53  20                 	db	32
   434  00FB54  25                 	db	37
   435  00FB55  64                 	db	100	;'d'
   436  00FB56  00                 	db	0
   437  00FB57                     STR_3:
   438  00FB57  2D                 	db	45
   439  00FB58  2D                 	db	45
   440  00FB59  20                 	db	32
   441  00FB5A  4C                 	db	76	;'L'
   442  00FB5B  4F                 	db	79	;'O'
   443  00FB5C  47                 	db	71	;'G'
   444  00FB5D  20                 	db	32
   445  00FB5E  25                 	db	37
   446  00FB5F  32                 	db	50	;'2'
   447  00FB60  64                 	db	100	;'d'
   448  00FB61  20                 	db	32
   449  00FB62  48                 	db	72	;'H'
   450  00FB63  45                 	db	69	;'E'
   451  00FB64  52                 	db	82	;'R'
   452  00FB65  45                 	db	69	;'E'
   453  00FB66  2D                 	db	45
   454  00FB67  2D                 	db	45
   455  00FB68  00                 	db	0
   456  00FB69                     STR_1:
   457  00FB69  52                 	db	82	;'R'
   458  00FB6A  45                 	db	69	;'E'
   459  00FB6B  53                 	db	83	;'S'
   460  00FB6C  55                 	db	85	;'U'
   461  00FB6D  4C                 	db	76	;'L'
   462  00FB6E  54                 	db	84	;'T'
   463  00FB6F  53                 	db	83	;'S'
   464  00FB70  20                 	db	32
   465  00FB71  49                 	db	73	;'I'
   466  00FB72  4E                 	db	78	;'N'
   467  00FB73  20                 	db	32
   468  00FB74  4C                 	db	76	;'L'
   469  00FB75  4F                 	db	79	;'O'
   470  00FB76  47                 	db	71	;'G'
   471  00FB77  20                 	db	32
   472  00FB78  25                 	db	37
   473  00FB79  64                 	db	100	;'d'
   474  00FB7A  00                 	db	0
   475  00FB7B                     STR_102:
   476  00FB7B  4D                 	db	77	;'M'
   477  00FB7C  49                 	db	73	;'I'
   478  00FB7D  44                 	db	68	;'D'
   479  00FB7E  20                 	db	32
   480  00FB7F  2D                 	db	45
   481  00FB80  2D                 	db	45
   482  00FB81  20                 	db	32
   483  00FB82  32                 	db	50	;'2'
   484  00FB83  73                 	db	115	;'s'
   485  00FB84  20                 	db	32
   486  00FB85  20                 	db	32
   487  00FB86  20                 	db	32
   488  00FB87  20                 	db	32
   489  00FB88  20                 	db	32
   490  00FB89  20                 	db	32
   491  00FB8A  20                 	db	32
   492  00FB8B  00                 	db	0
   493  00FB8C                     STR_105:
   494  00FB8C  44                 	db	68	;'D'
   495  00FB8D  52                 	db	82	;'R'
   496  00FB8E  4F                 	db	79	;'O'
   497  00FB8F  50                 	db	80	;'P'
   498  00FB90  20                 	db	32
   499  00FB91  2D                 	db	45
   500  00FB92  2D                 	db	45
   501  00FB93  20                 	db	32
   502  00FB94  32                 	db	50	;'2'
   503  00FB95  73                 	db	115	;'s'
   504  00FB96  20                 	db	32
   505  00FB97  20                 	db	32
   506  00FB98  20                 	db	32
   507  00FB99  20                 	db	32
   508  00FB9A  20                 	db	32
   509  00FB9B  20                 	db	32
   510  00FB9C  00                 	db	0
   511  00FB9D                     STR_99:
   512  00FB9D  4C                 	db	76	;'L'
   513  00FB9E  45                 	db	69	;'E'
   514  00FB9F  46                 	db	70	;'F'
   515  00FBA0  54                 	db	84	;'T'
   516  00FBA1  20                 	db	32
   517  00FBA2  2D                 	db	45
   518  00FBA3  2D                 	db	45
   519  00FBA4  20                 	db	32
   520  00FBA5  32                 	db	50	;'2'
   521  00FBA6  73                 	db	115	;'s'
   522  00FBA7  20                 	db	32
   523  00FBA8  20                 	db	32
   524  00FBA9  20                 	db	32
   525  00FBAA  20                 	db	32
   526  00FBAB  20                 	db	32
   527  00FBAC  20                 	db	32
   528  00FBAD  00                 	db	0
   529  00FBAE                     STR_104:
   530  00FBAE  4C                 	db	76	;'L'
   531  00FBAF  45                 	db	69	;'E'
   532  00FBB0  56                 	db	86	;'V'
   533  00FBB1  45                 	db	69	;'E'
   534  00FBB2  4C                 	db	76	;'L'
   535  00FBB3  20                 	db	32
   536  00FBB4  2D                 	db	45
   537  00FBB5  2D                 	db	45
   538  00FBB6  20                 	db	32
   539  00FBB7  32                 	db	50	;'2'
   540  00FBB8  73                 	db	115	;'s'
   541  00FBB9  20                 	db	32
   542  00FBBA  20                 	db	32
   543  00FBBB  20                 	db	32
   544  00FBBC  20                 	db	32
   545  00FBBD  20                 	db	32
   546  00FBBE  00                 	db	0
   547  00FBBF                     STR_98:
   548  00FBBF  52                 	db	82	;'R'
   549  00FBC0  49                 	db	73	;'I'
   550  00FBC1  47                 	db	71	;'G'
   551  00FBC2  48                 	db	72	;'H'
   552  00FBC3  54                 	db	84	;'T'
   553  00FBC4  20                 	db	32
   554  00FBC5  2D                 	db	45
   555  00FBC6  2D                 	db	45
   556  00FBC7  20                 	db	32
   557  00FBC8  32                 	db	50	;'2'
   558  00FBC9  73                 	db	115	;'s'
   559  00FBCA  20                 	db	32
   560  00FBCB  20                 	db	32
   561  00FBCC  20                 	db	32
   562  00FBCD  20                 	db	32
   563  00FBCE  20                 	db	32
   564  00FBCF  00                 	db	0
   565  00FBD0                     STR_97:
   566  00FBD0  4D                 	db	77	;'M'
   567  00FBD1  49                 	db	73	;'I'
   568  00FBD2  44                 	db	68	;'D'
   569  00FBD3  44                 	db	68	;'D'
   570  00FBD4  4C                 	db	76	;'L'
   571  00FBD5  45                 	db	69	;'E'
   572  00FBD6  20                 	db	32
   573  00FBD7  2D                 	db	45
   574  00FBD8  2D                 	db	45
   575  00FBD9  20                 	db	32
   576  00FBDA  32                 	db	50	;'2'
   577  00FBDB  73                 	db	115	;'s'
   578  00FBDC  20                 	db	32
   579  00FBDD  20                 	db	32
   580  00FBDE  20                 	db	32
   581  00FBDF  20                 	db	32
   582  00FBE0  00                 	db	0
   583  00FBE1                     STR_112:
   584  00FBE1  4F                 	db	79	;'O'
   585  00FBE2  54                 	db	84	;'T'
   586  00FBE3  48                 	db	72	;'H'
   587  00FBE4  45                 	db	69	;'E'
   588  00FBE5  52                 	db	82	;'R'
   589  00FBE6  20                 	db	32
   590  00FBE7  53                 	db	83	;'S'
   591  00FBE8  45                 	db	69	;'E'
   592  00FBE9  54                 	db	84	;'T'
   593  00FBEA  53                 	db	83	;'S'
   594  00FBEB  20                 	db	32
   595  00FBEC  44                 	db	68	;'D'
   596  00FBED  43                 	db	67	;'C'
   597  00FBEE  20                 	db	32
   598  00FBEF  20                 	db	32
   599  00FBF0  20                 	db	32
   600  00FBF1  00                 	db	0
   601  00FBF2                     STR_116:
   602  00FBF2  44                 	db	68	;'D'
   603  00FBF3  20                 	db	32
   604  00FBF4  57                 	db	87	;'W'
   605  00FBF5  49                 	db	73	;'I'
   606  00FBF6  4C                 	db	76	;'L'
   607  00FBF7  4C                 	db	76	;'L'
   608  00FBF8  20                 	db	32
   609  00FBF9  52                 	db	82	;'R'
   610  00FBFA  45                 	db	69	;'E'
   611  00FBFB  54                 	db	84	;'T'
   612  00FBFC  55                 	db	85	;'U'
   613  00FBFD  52                 	db	82	;'R'
   614  00FBFE  4E                 	db	78	;'N'
   615  00FBFF  20                 	db	32
   616  00FC00  20                 	db	32
   617  00FC01  20                 	db	32
   618  00FC02  00                 	db	0
   619  00FC03                     STR_114:
   620  00FC03  35                 	db	53	;'5'
   621  00FC04  3A                 	db	58	;':'
   622  00FC05  48                 	db	72	;'H'
   623  00FC06  7C                 	db	124
   624  00FC07  36                 	db	54	;'6'
   625  00FC08  3A                 	db	58	;':'
   626  00FC09  4C                 	db	76	;'L'
   627  00FC0A  7C                 	db	124
   628  00FC0B  49                 	db	73	;'I'
   629  00FC0C  52                 	db	82	;'R'
   630  00FC0D  3A                 	db	58	;':'
   631  00FC0E  25                 	db	37
   632  00FC0F  64                 	db	100	;'d'
   633  00FC10  20                 	db	32
   634  00FC11  20                 	db	32
   635  00FC12  20                 	db	32
   636  00FC13  00                 	db	0
   637  00FC14                     STR_113:
   638  00FC14  31                 	db	49	;'1'
   639  00FC15  3A                 	db	58	;':'
   640  00FC16  20                 	db	32
   641  00FC17  44                 	db	68	;'D'
   642  00FC18  43                 	db	67	;'C'
   643  00FC19  20                 	db	32
   644  00FC1A  7C                 	db	124
   645  00FC1B  20                 	db	32
   646  00FC1C  41                 	db	65	;'A'
   647  00FC1D  3A                 	db	58	;':'
   648  00FC1E  20                 	db	32
   649  00FC1F  41                 	db	65	;'A'
   650  00FC20  52                 	db	82	;'R'
   651  00FC21  4D                 	db	77	;'M'
   652  00FC22  20                 	db	32
   653  00FC23  20                 	db	32
   654  00FC24  00                 	db	0
   655  00FC25                     STR_100:
   656  00FC25  4D                 	db	77	;'M'
   657  00FC26  49                 	db	73	;'I'
   658  00FC27  44                 	db	68	;'D'
   659  00FC28  2D                 	db	45
   660  00FC29  4C                 	db	76	;'L'
   661  00FC2A  45                 	db	69	;'E'
   662  00FC2B  46                 	db	70	;'F'
   663  00FC2C  54                 	db	84	;'T'
   664  00FC2D  20                 	db	32
   665  00FC2E  2D                 	db	45
   666  00FC2F  2D                 	db	45
   667  00FC30  20                 	db	32
   668  00FC31  32                 	db	50	;'2'
   669  00FC32  73                 	db	115	;'s'
   670  00FC33  20                 	db	32
   671  00FC34  20                 	db	32
   672  00FC35  00                 	db	0
   673  00FC36                     STR_101:
   674  00FC36  4D                 	db	77	;'M'
   675  00FC37  49                 	db	73	;'I'
   676  00FC38  44                 	db	68	;'D'
   677  00FC39  2D                 	db	45
   678  00FC3A  52                 	db	82	;'R'
   679  00FC3B  49                 	db	73	;'I'
   680  00FC3C  47                 	db	71	;'G'
   681  00FC3D  48                 	db	72	;'H'
   682  00FC3E  54                 	db	84	;'T'
   683  00FC3F  20                 	db	32
   684  00FC40  2D                 	db	45
   685  00FC41  2D                 	db	45
   686  00FC42  20                 	db	32
   687  00FC43  32                 	db	50	;'2'
   688  00FC44  73                 	db	115	;'s'
   689  00FC45  20                 	db	32
   690  00FC46  00                 	db	0
   691  00FC47  45                 	db	69	;'E'
   692  00FC48  4C                 	db	76	;'L'
   693  00FC49  53                 	db	83	;'S'
   694  00FC4A  45                 	db	69	;'E'
   695  00FC4B  20                 	db	32
   696  00FC4C  54                 	db	84	;'T'
   697  00FC4D  4F                 	db	79	;'O'
   698  00FC4E  47                 	db	71	;'G'
   699  00FC4F  47                 	db	71	;'G'
   700  00FC50  4C                 	db	76	;'L'
   701  00FC51  45                 	db	69	;'E'
   702  00FC52  53                 	db	83	;'S'
   703  00FC53  20                 	db	32
   704  00FC54  52                 	db	82	;'R'
   705  00FC55  41                 	db	65	;'A'
   706  00FC56  35                 	db	53	;'5'
   707  00FC57  00                 	db	0
   708  00FC58                     STR_72:
   709  00FC58  41                 	db	65	;'A'
   710  00FC59  4C                 	db	76	;'L'
   711  00FC5A  47                 	db	71	;'G'
   712  00FC5B  31                 	db	49	;'1'
   713  00FC5C  3A                 	db	58	;':'
   714  00FC5D  20                 	db	32
   715  00FC5E  39                 	db	57	;'9'
   716  00FC5F  20                 	db	32
   717  00FC60  50                 	db	80	;'P'
   718  00FC61  4F                 	db	79	;'O'
   719  00FC62  50                 	db	80	;'P'
   720  00FC63  4E                 	db	78	;'N'
   721  00FC64  4F                 	db	79	;'O'
   722  00FC65  54                 	db	84	;'T'
   723  00FC66  41                 	db	65	;'A'
   724  00FC67  42                 	db	66	;'B'
   725  00FC68  00                 	db	0
   726  00FC69                     STR_92:
   727  00FC69  54                 	db	84	;'T'
   728  00FC6A  53                 	db	83	;'S'
   729  00FC6B  54                 	db	84	;'T'
   730  00FC6C  3A                 	db	58	;':'
   731  00FC6D  20                 	db	32
   732  00FC6E  43                 	db	67	;'C'
   733  00FC6F  4F                 	db	79	;'O'
   734  00FC70  4E                 	db	78	;'N'
   735  00FC71  44                 	db	68	;'D'
   736  00FC72  20                 	db	32
   737  00FC73  53                 	db	83	;'S'
   738  00FC74  4F                 	db	79	;'O'
   739  00FC75  4C                 	db	76	;'L'
   740  00FC76  4E                 	db	78	;'N'
   741  00FC77  27                 	db	39
   742  00FC78  44                 	db	68	;'D'
   743  00FC79  00                 	db	0
   744  00FC7A                     STR_94:
   745  00FC7A  54                 	db	84	;'T'
   746  00FC7B  53                 	db	83	;'S'
   747  00FC7C  54                 	db	84	;'T'
   748  00FC7D  3A                 	db	58	;':'
   749  00FC7E  20                 	db	32
   750  00FC7F  50                 	db	80	;'P'
   751  00FC80  55                 	db	85	;'U'
   752  00FC81  53                 	db	83	;'S'
   753  00FC82  48                 	db	72	;'H'
   754  00FC83  20                 	db	32
   755  00FC84  53                 	db	83	;'S'
   756  00FC85  4F                 	db	79	;'O'
   757  00FC86  4C                 	db	76	;'L'
   758  00FC87  4E                 	db	78	;'N'
   759  00FC88  27                 	db	39
   760  00FC89  44                 	db	68	;'D'
   761  00FC8A  00                 	db	0
   762  00FC8B                     STR_68:
   763  00FC8B  32                 	db	50	;'2'
   764  00FC8C  2E                 	db	46
   765  00FC8D  53                 	db	83	;'S'
   766  00FC8E  4E                 	db	78	;'N'
   767  00FC8F  52                 	db	82	;'R'
   768  00FC90  7C                 	db	124
   769  00FC91  34                 	db	52	;'4'
   770  00FC92  2E                 	db	46
   771  00FC93  48                 	db	72	;'H'
   772  00FC94  49                 	db	73	;'I'
   773  00FC95  7C                 	db	124
   774  00FC96  35                 	db	53	;'5'
   775  00FC97  2E                 	db	46
   776  00FC98  4D                 	db	77	;'M'
   777  00FC99  45                 	db	69	;'E'
   778  00FC9A  44                 	db	68	;'D'
   779  00FC9B  00                 	db	0
   780  00FC9C                     STR_69:
   781  00FC9C  42                 	db	66	;'B'
   782  00FC9D  2E                 	db	46
   783  00FC9E  50                 	db	80	;'P'
   784  00FC9F  4C                 	db	76	;'L'
   785  00FCA0  41                 	db	65	;'A'
   786  00FCA1  7C                 	db	124
   787  00FCA2  38                 	db	56	;'8'
   788  00FCA3  2E                 	db	46
   789  00FCA4  53                 	db	83	;'S'
   790  00FCA5  56                 	db	86	;'V'
   791  00FCA6  7C                 	db	124
   792  00FCA7  39                 	db	57	;'9'
   793  00FCA8  2E                 	db	46
   794  00FCA9  42                 	db	66	;'B'
   795  00FCAA  4C                 	db	76	;'L'
   796  00FCAB  4B                 	db	75	;'K'
   797  00FCAC  00                 	db	0
   798  00FCAD                     STR_125:
   799  00FCAD  45                 	db	69	;'E'
   800  00FCAE  4C                 	db	76	;'L'
   801  00FCAF  53                 	db	83	;'S'
   802  00FCB0  45                 	db	69	;'E'
   803  00FCB1  20                 	db	32
   804  00FCB2  54                 	db	84	;'T'
   805  00FCB3  4F                 	db	79	;'O'
   806  00FCB4  47                 	db	71	;'G'
   807  00FCB5  47                 	db	71	;'G'
   808  00FCB6  4C                 	db	76	;'L'
   809  00FCB7  45                 	db	69	;'E'
   810  00FCB8  53                 	db	83	;'S'
   811  00FCB9  20                 	db	32
   812  00FCBA  41                 	db	65	;'A'
   813  00FCBB  52                 	db	82	;'R'
   814  00FCBC  4D                 	db	77	;'M'
   815  00FCBD  00                 	db	0
   816  00FCBE                     STR_110:
   817  00FCBE  54                 	db	84	;'T'
   818  00FCBF  53                 	db	83	;'S'
   819  00FCC0  54                 	db	84	;'T'
   820  00FCC1  3A                 	db	58	;':'
   821  00FCC2  20                 	db	32
   822  00FCC3  42                 	db	66	;'B'
   823  00FCC4  4F                 	db	79	;'O'
   824  00FCC5  54                 	db	84	;'T'
   825  00FCC6  48                 	db	72	;'H'
   826  00FCC7  20                 	db	32
   827  00FCC8  53                 	db	83	;'S'
   828  00FCC9  45                 	db	69	;'E'
   829  00FCCA  52                 	db	82	;'R'
   830  00FCCB  56                 	db	86	;'V'
   831  00FCCC  4F                 	db	79	;'O'
   832  00FCCD  53                 	db	83	;'S'
   833  00FCCE  00                 	db	0
   834  00FCCF                     STR_41:
   835  00FCCF  4C                 	db	76	;'L'
   836  00FCD0  4F                 	db	79	;'O'
   837  00FCD1  47                 	db	71	;'G'
   838  00FCD2  20                 	db	32
   839  00FCD3  31                 	db	49	;'1'
   840  00FCD4  20                 	db	32
   841  00FCD5  20                 	db	32
   842  00FCD6  20                 	db	32
   843  00FCD7  20                 	db	32
   844  00FCD8  20                 	db	32
   845  00FCD9  20                 	db	32
   846  00FCDA  20                 	db	32
   847  00FCDB  20                 	db	32
   848  00FCDC  20                 	db	32
   849  00FCDD  20                 	db	32
   850  00FCDE  20                 	db	32
   851  00FCDF  00                 	db	0
   852  00FCE0                     STR_40:
   853  00FCE0  4C                 	db	76	;'L'
   854  00FCE1  4F                 	db	79	;'O'
   855  00FCE2  47                 	db	71	;'G'
   856  00FCE3  20                 	db	32
   857  00FCE4  32                 	db	50	;'2'
   858  00FCE5  20                 	db	32
   859  00FCE6  20                 	db	32
   860  00FCE7  20                 	db	32
   861  00FCE8  20                 	db	32
   862  00FCE9  20                 	db	32
   863  00FCEA  20                 	db	32
   864  00FCEB  20                 	db	32
   865  00FCEC  20                 	db	32
   866  00FCED  20                 	db	32
   867  00FCEE  20                 	db	32
   868  00FCEF  20                 	db	32
   869  00FCF0  00                 	db	0
   870  00FCF1                     STR_44:
   871  00FCF1  4C                 	db	76	;'L'
   872  00FCF2  4F                 	db	79	;'O'
   873  00FCF3  47                 	db	71	;'G'
   874  00FCF4  20                 	db	32
   875  00FCF5  33                 	db	51	;'3'
   876  00FCF6  20                 	db	32
   877  00FCF7  20                 	db	32
   878  00FCF8  20                 	db	32
   879  00FCF9  20                 	db	32
   880  00FCFA  20                 	db	32
   881  00FCFB  20                 	db	32
   882  00FCFC  20                 	db	32
   883  00FCFD  20                 	db	32
   884  00FCFE  20                 	db	32
   885  00FCFF  20                 	db	32
   886  00FD00  20                 	db	32
   887  00FD01  00                 	db	0
   888  00FD02                     STR_48:
   889  00FD02  4C                 	db	76	;'L'
   890  00FD03  4F                 	db	79	;'O'
   891  00FD04  47                 	db	71	;'G'
   892  00FD05  20                 	db	32
   893  00FD06  34                 	db	52	;'4'
   894  00FD07  20                 	db	32
   895  00FD08  20                 	db	32
   896  00FD09  20                 	db	32
   897  00FD0A  20                 	db	32
   898  00FD0B  20                 	db	32
   899  00FD0C  20                 	db	32
   900  00FD0D  20                 	db	32
   901  00FD0E  20                 	db	32
   902  00FD0F  20                 	db	32
   903  00FD10  20                 	db	32
   904  00FD11  20                 	db	32
   905  00FD12  00                 	db	0
   906  00FD13                     STR_36:
   907  00FD13  33                 	db	51	;'3'
   908  00FD14  2E                 	db	46
   909  00FD15  20                 	db	32
   910  00FD16  4C                 	db	76	;'L'
   911  00FD17  4F                 	db	79	;'O'
   912  00FD18  47                 	db	71	;'G'
   913  00FD19  53                 	db	83	;'S'
   914  00FD1A  20                 	db	32
   915  00FD1B  20                 	db	32
   916  00FD1C  20                 	db	32
   917  00FD1D  20                 	db	32
   918  00FD1E  20                 	db	32
   919  00FD1F  20                 	db	32
   920  00FD20  20                 	db	32
   921  00FD21  20                 	db	32
   922  00FD22  20                 	db	32
   923  00FD23  00                 	db	0
   924  00FD24                     STR_32:
   925  00FD24  32                 	db	50	;'2'
   926  00FD25  2E                 	db	46
   927  00FD26  20                 	db	32
   928  00FD27  53                 	db	83	;'S'
   929  00FD28  4F                 	db	79	;'O'
   930  00FD29  52                 	db	82	;'R'
   931  00FD2A  54                 	db	84	;'T'
   932  00FD2B  20                 	db	32
   933  00FD2C  20                 	db	32
   934  00FD2D  20                 	db	32
   935  00FD2E  20                 	db	32
   936  00FD2F  20                 	db	32
   937  00FD30  20                 	db	32
   938  00FD31  20                 	db	32
   939  00FD32  20                 	db	32
   940  00FD33  20                 	db	32
   941  00FD34  00                 	db	0
   942  00FD35                     STR_33:
   943  00FD35  31                 	db	49	;'1'
   944  00FD36  2E                 	db	46
   945  00FD37  20                 	db	32
   946  00FD38  44                 	db	68	;'D'
   947  00FD39  41                 	db	65	;'A'
   948  00FD3A  54                 	db	84	;'T'
   949  00FD3B  45                 	db	69	;'E'
   950  00FD3C  2F                 	db	47
   951  00FD3D  54                 	db	84	;'T'
   952  00FD3E  49                 	db	73	;'I'
   953  00FD3F  4D                 	db	77	;'M'
   954  00FD40  45                 	db	69	;'E'
   955  00FD41  20                 	db	32
   956  00FD42  20                 	db	32
   957  00FD43  20                 	db	32
   958  00FD44  20                 	db	32
   959  00FD45  00                 	db	0
   960  00FD46                     STR_24:
   961  00FD46  20                 	db	32
   962  00FD47  2D                 	db	45
   963  00FD48  2D                 	db	45
   964  00FD49  20                 	db	32
   965  00FD4A  50                 	db	80	;'P'
   966  00FD4B  4F                 	db	79	;'O'
   967  00FD4C  50                 	db	80	;'P'
   968  00FD4D  20                 	db	32
   969  00FD4E  20                 	db	32
   970  00FD4F  43                 	db	67	;'C'
   971  00FD50  41                 	db	65	;'A'
   972  00FD51  4E                 	db	78	;'N'
   973  00FD52  20                 	db	32
   974  00FD53  2D                 	db	45
   975  00FD54  2D                 	db	45
   976  00FD55  20                 	db	32
   977  00FD56  00                 	db	0
   978  00FD57                     STR_26:
   979  00FD57  20                 	db	32
   980  00FD58  2D                 	db	45
   981  00FD59  2D                 	db	45
   982  00FD5A  20                 	db	32
   983  00FD5B  53                 	db	83	;'S'
   984  00FD5C  4F                 	db	79	;'O'
   985  00FD5D  55                 	db	85	;'U'
   986  00FD5E  50                 	db	80	;'P'
   987  00FD5F  20                 	db	32
   988  00FD60  43                 	db	67	;'C'
   989  00FD61  41                 	db	65	;'A'
   990  00FD62  4E                 	db	78	;'N'
   991  00FD63  20                 	db	32
   992  00FD64  2D                 	db	45
   993  00FD65  2D                 	db	45
   994  00FD66  20                 	db	32
   995  00FD67  00                 	db	0
   996  00FD68                     STR_28:
   997  00FD68  2D                 	db	45
   998  00FD69  2D                 	db	45
   999  00FD6A  20                 	db	32
  1000  00FD6B  54                 	db	84	;'T'
  1001  00FD6C  4F                 	db	79	;'O'
  1002  00FD6D  54                 	db	84	;'T'
  1003  00FD6E  41                 	db	65	;'A'
  1004  00FD6F  4C                 	db	76	;'L'
  1005  00FD70  20                 	db	32
  1006  00FD71  43                 	db	67	;'C'
  1007  00FD72  41                 	db	65	;'A'
  1008  00FD73  4E                 	db	78	;'N'
  1009  00FD74  53                 	db	83	;'S'
  1010  00FD75  20                 	db	32
  1011  00FD76  2D                 	db	45
  1012  00FD77  2D                 	db	45
  1013  00FD78  00                 	db	0
  1014  00FD79                     STR_39:
  1015  00FD79  4C                 	db	76	;'L'
  1016  00FD7A  4F                 	db	79	;'O'
  1017  00FD7B  47                 	db	71	;'G'
  1018  00FD7C  20                 	db	32
  1019  00FD7D  31                 	db	49	;'1'
  1020  00FD7E  20                 	db	32
  1021  00FD7F  20                 	db	32
  1022  00FD80  20                 	db	32
  1023  00FD81  20                 	db	32
  1024  00FD82  20                 	db	32
  1025  00FD83  20                 	db	32
  1026  00FD84  20                 	db	32
  1027  00FD85  20                 	db	32
  1028  00FD86  20                 	db	32
  1029  00FD87  20                 	db	32
  1030  00FD88  3C                 	db	60	;'<'
  1031  00FD89  00                 	db	0
  1032  00FD8A                     STR_42:
  1033  00FD8A  4C                 	db	76	;'L'
  1034  00FD8B  4F                 	db	79	;'O'
  1035  00FD8C  47                 	db	71	;'G'
  1036  00FD8D  20                 	db	32
  1037  00FD8E  32                 	db	50	;'2'
  1038  00FD8F  20                 	db	32
  1039  00FD90  20                 	db	32
  1040  00FD91  20                 	db	32
  1041  00FD92  20                 	db	32
  1042  00FD93  20                 	db	32
  1043  00FD94  20                 	db	32
  1044  00FD95  20                 	db	32
  1045  00FD96  20                 	db	32
  1046  00FD97  20                 	db	32
  1047  00FD98  20                 	db	32
  1048  00FD99  3C                 	db	60	;'<'
  1049  00FD9A  00                 	db	0
  1050  00FD9B                     STR_46:
  1051  00FD9B  4C                 	db	76	;'L'
  1052  00FD9C  4F                 	db	79	;'O'
  1053  00FD9D  47                 	db	71	;'G'
  1054  00FD9E  20                 	db	32
  1055  00FD9F  33                 	db	51	;'3'
  1056  00FDA0  20                 	db	32
  1057  00FDA1  20                 	db	32
  1058  00FDA2  20                 	db	32
  1059  00FDA3  20                 	db	32
  1060  00FDA4  20                 	db	32
  1061  00FDA5  20                 	db	32
  1062  00FDA6  20                 	db	32
  1063  00FDA7  20                 	db	32
  1064  00FDA8  20                 	db	32
  1065  00FDA9  20                 	db	32
  1066  00FDAA  3C                 	db	60	;'<'
  1067  00FDAB  00                 	db	0
  1068  00FDAC                     STR_50:
  1069  00FDAC  4C                 	db	76	;'L'
  1070  00FDAD  4F                 	db	79	;'O'
  1071  00FDAE  47                 	db	71	;'G'
  1072  00FDAF  20                 	db	32
  1073  00FDB0  34                 	db	52	;'4'
  1074  00FDB1  20                 	db	32
  1075  00FDB2  20                 	db	32
  1076  00FDB3  20                 	db	32
  1077  00FDB4  20                 	db	32
  1078  00FDB5  20                 	db	32
  1079  00FDB6  20                 	db	32
  1080  00FDB7  20                 	db	32
  1081  00FDB8  20                 	db	32
  1082  00FDB9  20                 	db	32
  1083  00FDBA  20                 	db	32
  1084  00FDBB  3C                 	db	60	;'<'
  1085  00FDBC  00                 	db	0
  1086  00FDBD                     STR_38:
  1087  00FDBD  33                 	db	51	;'3'
  1088  00FDBE  2E                 	db	46
  1089  00FDBF  20                 	db	32
  1090  00FDC0  4C                 	db	76	;'L'
  1091  00FDC1  4F                 	db	79	;'O'
  1092  00FDC2  47                 	db	71	;'G'
  1093  00FDC3  53                 	db	83	;'S'
  1094  00FDC4  20                 	db	32
  1095  00FDC5  20                 	db	32
  1096  00FDC6  20                 	db	32
  1097  00FDC7  20                 	db	32
  1098  00FDC8  20                 	db	32
  1099  00FDC9  20                 	db	32
  1100  00FDCA  20                 	db	32
  1101  00FDCB  20                 	db	32
  1102  00FDCC  3C                 	db	60	;'<'
  1103  00FDCD  00                 	db	0
  1104  00FDCE                     STR_34:
  1105  00FDCE  32                 	db	50	;'2'
  1106  00FDCF  2E                 	db	46
  1107  00FDD0  20                 	db	32
  1108  00FDD1  53                 	db	83	;'S'
  1109  00FDD2  4F                 	db	79	;'O'
  1110  00FDD3  52                 	db	82	;'R'
  1111  00FDD4  54                 	db	84	;'T'
  1112  00FDD5  20                 	db	32
  1113  00FDD6  20                 	db	32
  1114  00FDD7  20                 	db	32
  1115  00FDD8  20                 	db	32
  1116  00FDD9  20                 	db	32
  1117  00FDDA  20                 	db	32
  1118  00FDDB  20                 	db	32
  1119  00FDDC  20                 	db	32
  1120  00FDDD  3C                 	db	60	;'<'
  1121  00FDDE  00                 	db	0
  1122  00FDDF                     STR_31:
  1123  00FDDF  31                 	db	49	;'1'
  1124  00FDE0  2E                 	db	46
  1125  00FDE1  20                 	db	32
  1126  00FDE2  44                 	db	68	;'D'
  1127  00FDE3  41                 	db	65	;'A'
  1128  00FDE4  54                 	db	84	;'T'
  1129  00FDE5  45                 	db	69	;'E'
  1130  00FDE6  2F                 	db	47
  1131  00FDE7  54                 	db	84	;'T'
  1132  00FDE8  49                 	db	73	;'I'
  1133  00FDE9  4D                 	db	77	;'M'
  1134  00FDEA  45                 	db	69	;'E'
  1135  00FDEB  20                 	db	32
  1136  00FDEC  20                 	db	32
  1137  00FDED  20                 	db	32
  1138  00FDEE  3C                 	db	60	;'<'
  1139  00FDEF  00                 	db	0
  1140  00FDF0                     STR_6:
  1141  00FDF0  50                 	db	80	;'P'
  1142  00FDF1  41                 	db	65	;'A'
  1143  00FDF2  55                 	db	85	;'U'
  1144  00FDF3  53                 	db	83	;'S'
  1145  00FDF4  45                 	db	69	;'E'
  1146  00FDF5  20                 	db	32
  1147  00FDF6  3C                 	db	60	;'<'
  1148  00FDF7  20                 	db	32
  1149  00FDF8  7C                 	db	124
  1150  00FDF9  20                 	db	32
  1151  00FDFA  42                 	db	66	;'B'
  1152  00FDFB  41                 	db	65	;'A'
  1153  00FDFC  43                 	db	67	;'C'
  1154  00FDFD  4B                 	db	75	;'K'
  1155  00FDFE  20                 	db	32
  1156  00FDFF  3E                 	db	62	;'>'
  1157  00FE00  00                 	db	0
  1158  00FE01                     STR_30:
  1159  00FE01  50                 	db	80	;'P'
  1160  00FE02  55                 	db	85	;'U'
  1161  00FE03  53                 	db	83	;'S'
  1162  00FE04  48                 	db	72	;'H'
  1163  00FE05  20                 	db	32
  1164  00FE06  54                 	db	84	;'T'
  1165  00FE07  4F                 	db	79	;'O'
  1166  00FE08  20                 	db	32
  1167  00FE09  43                 	db	67	;'C'
  1168  00FE0A  4F                 	db	79	;'O'
  1169  00FE0B  4E                 	db	78	;'N'
  1170  00FE0C  54                 	db	84	;'T'
  1171  00FE0D  49                 	db	73	;'I'
  1172  00FE0E  4E                 	db	78	;'N'
  1173  00FE0F  55                 	db	85	;'U'
  1174  00FE10  45                 	db	69	;'E'
  1175  00FE11  00                 	db	0
  1176  00FE12                     STR_27:
  1177  00FE12  4E                 	db	78	;'N'
  1178  00FE13  4C                 	db	76	;'L'
  1179  00FE14  41                 	db	65	;'A'
  1180  00FE15  42                 	db	66	;'B'
  1181  00FE16  3A                 	db	58	;':'
  1182  00FE17  20                 	db	32
  1183  00FE18  25                 	db	37
  1184  00FE19  64                 	db	100	;'d'
  1185  00FE1A  7C                 	db	124
  1186  00FE1B  4C                 	db	76	;'L'
  1187  00FE1C  41                 	db	65	;'A'
  1188  00FE1D  42                 	db	66	;'B'
  1189  00FE1E  3A                 	db	58	;':'
  1190  00FE1F  20                 	db	32
  1191  00FE20  25                 	db	37
  1192  00FE21  64                 	db	100	;'d'
  1193  00FE22  00                 	db	0
  1194  00FE23                     STR_25:
  1195  00FE23  4E                 	db	78	;'N'
  1196  00FE24  54                 	db	84	;'T'
  1197  00FE25  41                 	db	65	;'A'
  1198  00FE26  42                 	db	66	;'B'
  1199  00FE27  3A                 	db	58	;':'
  1200  00FE28  20                 	db	32
  1201  00FE29  25                 	db	37
  1202  00FE2A  64                 	db	100	;'d'
  1203  00FE2B  7C                 	db	124
  1204  00FE2C  54                 	db	84	;'T'
  1205  00FE2D  41                 	db	65	;'A'
  1206  00FE2E  42                 	db	66	;'B'
  1207  00FE2F  3A                 	db	58	;':'
  1208  00FE30  20                 	db	32
  1209  00FE31  25                 	db	37
  1210  00FE32  64                 	db	100	;'d'
  1211  00FE33  00                 	db	0
  1212  00FE34                     STR_83:
  1213  00FE34  4D                 	db	77	;'M'
  1214  00FE35  41                 	db	65	;'A'
  1215  00FE36  47                 	db	71	;'G'
  1216  00FE37  5F                 	db	95	;'_'
  1217  00FE38  73                 	db	115	;'s'
  1218  00FE39  69                 	db	105	;'i'
  1219  00FE3A  67                 	db	103	;'g'
  1220  00FE3B  6E                 	db	110	;'n'
  1221  00FE3C  61                 	db	97	;'a'
  1222  00FE3D  6C                 	db	108	;'l'
  1223  00FE3E  3A                 	db	58	;':'
  1224  00FE3F  20                 	db	32
  1225  00FE40  25                 	db	37
  1226  00FE41  64                 	db	100	;'d'
  1227  00FE42  20                 	db	32
  1228  00FE43  00                 	db	0
  1229  00FE44                     STR_103:
  1230  00FE44  54                 	db	84	;'T'
  1231  00FE45  53                 	db	83	;'S'
  1232  00FE46  54                 	db	84	;'T'
  1233  00FE47  3A                 	db	58	;':'
  1234  00FE48  20                 	db	32
  1235  00FE49  54                 	db	84	;'T'
  1236  00FE4A  49                 	db	73	;'I'
  1237  00FE4B  4C                 	db	76	;'L'
  1238  00FE4C  54                 	db	84	;'T'
  1239  00FE4D  20                 	db	32
  1240  00FE4E  53                 	db	83	;'S'
  1241  00FE4F  45                 	db	69	;'E'
  1242  00FE50  52                 	db	82	;'R'
  1243  00FE51  56                 	db	86	;'V'
  1244  00FE52  4F                 	db	79	;'O'
  1245  00FE53  00                 	db	0
  1246  00FE54                     STR_4:
  1247  00FE54  44                 	db	68	;'D'
  1248  00FE55  49                 	db	73	;'I'
  1249  00FE56  44                 	db	68	;'D'
  1250  00FE57  4E                 	db	78	;'N'
  1251  00FE58  27                 	db	39
  1252  00FE59  54                 	db	84	;'T'
  1253  00FE5A  20                 	db	32
  1254  00FE5B  43                 	db	67	;'C'
  1255  00FE5C  4F                 	db	79	;'O'
  1256  00FE5D  4D                 	db	77	;'M'
  1257  00FE5E  50                 	db	80	;'P'
  1258  00FE5F  4C                 	db	76	;'L'
  1259  00FE60  45                 	db	69	;'E'
  1260  00FE61  54                 	db	84	;'T'
  1261  00FE62  45                 	db	69	;'E'
  1262  00FE63  00                 	db	0
  1263  00FE64                     STR_80:
  1264  00FE64  49                 	db	73	;'I'
  1265  00FE65  52                 	db	82	;'R'
  1266  00FE66  5F                 	db	95	;'_'
  1267  00FE67  73                 	db	115	;'s'
  1268  00FE68  69                 	db	105	;'i'
  1269  00FE69  67                 	db	103	;'g'
  1270  00FE6A  6E                 	db	110	;'n'
  1271  00FE6B  61                 	db	97	;'a'
  1272  00FE6C  6C                 	db	108	;'l'
  1273  00FE6D  3A                 	db	58	;':'
  1274  00FE6E  20                 	db	32
  1275  00FE6F  25                 	db	37
  1276  00FE70  64                 	db	100	;'d'
  1277  00FE71  20                 	db	32
  1278  00FE72  00                 	db	0
  1279  00FE73                     STR_109:
  1280  00FE73  43                 	db	67	;'C'
  1281  00FE74  41                 	db	65	;'A'
  1282  00FE75  4D                 	db	77	;'M'
  1283  00FE76  20                 	db	32
  1284  00FE77  44                 	db	68	;'D'
  1285  00FE78  57                 	db	87	;'W'
  1286  00FE79  4E                 	db	78	;'N'
  1287  00FE7A  20                 	db	32
  1288  00FE7B  7C                 	db	124
  1289  00FE7C  52                 	db	82	;'R'
  1290  00FE7D  43                 	db	67	;'C'
  1291  00FE7E  30                 	db	48	;'0'
  1292  00FE7F  3D                 	db	61	;'='
  1293  00FE80  30                 	db	48	;'0'
  1294  00FE81  00                 	db	0
  1295  00FE82                     STR_108:
  1296  00FE82  43                 	db	67	;'C'
  1297  00FE83  41                 	db	65	;'A'
  1298  00FE84  4D                 	db	77	;'M'
  1299  00FE85  20                 	db	32
  1300  00FE86  55                 	db	85	;'U'
  1301  00FE87  50                 	db	80	;'P'
  1302  00FE88  20                 	db	32
  1303  00FE89  20                 	db	32
  1304  00FE8A  7C                 	db	124
  1305  00FE8B  52                 	db	82	;'R'
  1306  00FE8C  43                 	db	67	;'C'
  1307  00FE8D  30                 	db	48	;'0'
  1308  00FE8E  3D                 	db	61	;'='
  1309  00FE8F  31                 	db	49	;'1'
  1310  00FE90  00                 	db	0
  1311  00FE91                     STR_82:
  1312  00FE91  54                 	db	84	;'T'
  1313  00FE92  53                 	db	83	;'S'
  1314  00FE93  54                 	db	84	;'T'
  1315  00FE94  3A                 	db	58	;':'
  1316  00FE95  20                 	db	32
  1317  00FE96  4D                 	db	77	;'M'
  1318  00FE97  41                 	db	65	;'A'
  1319  00FE98  47                 	db	71	;'G'
  1320  00FE99  4E                 	db	78	;'N'
  1321  00FE9A  45                 	db	69	;'E'
  1322  00FE9B  54                 	db	84	;'T'
  1323  00FE9C  49                 	db	73	;'I'
  1324  00FE9D  53                 	db	83	;'S'
  1325  00FE9E  4D                 	db	77	;'M'
  1326  00FE9F  00                 	db	0
  1327  00FEA0                     STR_107:
  1328  00FEA0  54                 	db	84	;'T'
  1329  00FEA1  53                 	db	83	;'S'
  1330  00FEA2  54                 	db	84	;'T'
  1331  00FEA3  3A                 	db	58	;':'
  1332  00FEA4  20                 	db	32
  1333  00FEA5  43                 	db	67	;'C'
  1334  00FEA6  41                 	db	65	;'A'
  1335  00FEA7  4D                 	db	77	;'M'
  1336  00FEA8  20                 	db	32
  1337  00FEA9  53                 	db	83	;'S'
  1338  00FEAA  45                 	db	69	;'E'
  1339  00FEAB  52                 	db	82	;'R'
  1340  00FEAC  56                 	db	86	;'V'
  1341  00FEAD  4F                 	db	79	;'O'
  1342  00FEAE  00                 	db	0
  1343  00FEAF                     STR_96:
  1344  00FEAF  54                 	db	84	;'T'
  1345  00FEB0  53                 	db	83	;'S'
  1346  00FEB1  54                 	db	84	;'T'
  1347  00FEB2  3A                 	db	58	;':'
  1348  00FEB3  20                 	db	32
  1349  00FEB4  50                 	db	80	;'P'
  1350  00FEB5  41                 	db	65	;'A'
  1351  00FEB6  4E                 	db	78	;'N'
  1352  00FEB7  20                 	db	32
  1353  00FEB8  53                 	db	83	;'S'
  1354  00FEB9  45                 	db	69	;'E'
  1355  00FEBA  52                 	db	82	;'R'
  1356  00FEBB  56                 	db	86	;'V'
  1357  00FEBC  4F                 	db	79	;'O'
  1358  00FEBD  00                 	db	0
  1359  00FEBE                     STR_75:
  1360  00FEBE  41                 	db	65	;'A'
  1361  00FEBF  4C                 	db	76	;'L'
  1362  00FEC0  47                 	db	71	;'G'
  1363  00FEC1  34                 	db	52	;'4'
  1364  00FEC2  3A                 	db	58	;':'
  1365  00FEC3  20                 	db	32
  1366  00FEC4  41                 	db	65	;'A'
  1367  00FEC5  4C                 	db	76	;'L'
  1368  00FEC6  4C                 	db	76	;'L'
  1369  00FEC7  20                 	db	32
  1370  00FEC8  43                 	db	67	;'C'
  1371  00FEC9  41                 	db	65	;'A'
  1372  00FECA  4E                 	db	78	;'N'
  1373  00FECB  53                 	db	83	;'S'
  1374  00FECC  00                 	db	0
  1375  00FECD                     STR_90:
  1376  00FECD  54                 	db	84	;'T'
  1377  00FECE  53                 	db	83	;'S'
  1378  00FECF  54                 	db	84	;'T'
  1379  00FED0  3A                 	db	58	;':'
  1380  00FED1  20                 	db	32
  1381  00FED2  44                 	db	68	;'D'
  1382  00FED3  43                 	db	67	;'C'
  1383  00FED4  20                 	db	32
  1384  00FED5  4D                 	db	77	;'M'
  1385  00FED6  4F                 	db	79	;'O'
  1386  00FED7  54                 	db	84	;'T'
  1387  00FED8  4F                 	db	79	;'O'
  1388  00FED9  52                 	db	82	;'R'
  1389  00FEDA  53                 	db	83	;'S'
  1390  00FEDB  00                 	db	0
  1391  00FEDC                     STR_70:
  1392  00FEDC  41                 	db	65	;'A'
  1393  00FEDD  4C                 	db	76	;'L'
  1394  00FEDE  47                 	db	71	;'G'
  1395  00FEDF  4F                 	db	79	;'O'
  1396  00FEE0  52                 	db	82	;'R'
  1397  00FEE1  49                 	db	73	;'I'
  1398  00FEE2  54                 	db	84	;'T'
  1399  00FEE3  48                 	db	72	;'H'
  1400  00FEE4  4D                 	db	77	;'M'
  1401  00FEE5  20                 	db	32
  1402  00FEE6  54                 	db	84	;'T'
  1403  00FEE7  45                 	db	69	;'E'
  1404  00FEE8  53                 	db	83	;'S'
  1405  00FEE9  54                 	db	84	;'T'
  1406  00FEEA  00                 	db	0
  1407  00FEEB                     STR_91:
  1408  00FEEB  50                 	db	80	;'P'
  1409  00FEEC  49                 	db	73	;'I'
  1410  00FEED  4E                 	db	78	;'N'
  1411  00FEEE  20                 	db	32
  1412  00FEEF  52                 	db	82	;'R'
  1413  00FEF0  41                 	db	65	;'A'
  1414  00FEF1  35                 	db	53	;'5'
  1415  00FEF2  20                 	db	32
  1416  00FEF3  48                 	db	72	;'H'
  1417  00FEF4  49                 	db	73	;'I'
  1418  00FEF5  47                 	db	71	;'G'
  1419  00FEF6  48                 	db	72	;'H'
  1420  00FEF7  2E                 	db	46
  1421  00FEF8  00                 	db	0
  1422  00FEF9                     STR_73:
  1423  00FEF9  41                 	db	65	;'A'
  1424  00FEFA  4C                 	db	76	;'L'
  1425  00FEFB  47                 	db	71	;'G'
  1426  00FEFC  32                 	db	50	;'2'
  1427  00FEFD  3A                 	db	58	;':'
  1428  00FEFE  20                 	db	32
  1429  00FEFF  31                 	db	49	;'1'
  1430  00FF00  32                 	db	50	;'2'
  1431  00FF01  20                 	db	32
  1432  00FF02  43                 	db	67	;'C'
  1433  00FF03  41                 	db	65	;'A'
  1434  00FF04  4E                 	db	78	;'N'
  1435  00FF05  53                 	db	83	;'S'
  1436  00FF06  00                 	db	0
  1437  00FF07                     STR_76:
  1438  00FF07  41                 	db	65	;'A'
  1439  00FF08  4C                 	db	76	;'L'
  1440  00FF09  47                 	db	71	;'G'
  1441  00FF0A  35                 	db	53	;'5'
  1442  00FF0B  3A                 	db	58	;':'
  1443  00FF0C  20                 	db	32
  1444  00FF0D  4E                 	db	78	;'N'
  1445  00FF0E  4F                 	db	79	;'O'
  1446  00FF0F  20                 	db	32
  1447  00FF10  43                 	db	67	;'C'
  1448  00FF11  41                 	db	65	;'A'
  1449  00FF12  4E                 	db	78	;'N'
  1450  00FF13  53                 	db	83	;'S'
  1451  00FF14  00                 	db	0
  1452  00FF15                     STR_71:
  1453  00FF15  50                 	db	80	;'P'
  1454  00FF16  55                 	db	85	;'U'
  1455  00FF17  53                 	db	83	;'S'
  1456  00FF18  48                 	db	72	;'H'
  1457  00FF19  20                 	db	32
  1458  00FF1A  54                 	db	84	;'T'
  1459  00FF1B  4F                 	db	79	;'O'
  1460  00FF1C  20                 	db	32
  1461  00FF1D  53                 	db	83	;'S'
  1462  00FF1E  54                 	db	84	;'T'
  1463  00FF1F  41                 	db	65	;'A'
  1464  00FF20  52                 	db	82	;'R'
  1465  00FF21  54                 	db	84	;'T'
  1466  00FF22  00                 	db	0
  1467  00FF23                     STR_23:
  1468  00FF23  25                 	db	37
  1469  00FF24  64                 	db	100	;'d'
  1470  00FF25  20                 	db	32
  1471  00FF26  4D                 	db	77	;'M'
  1472  00FF27  49                 	db	73	;'I'
  1473  00FF28  4E                 	db	78	;'N'
  1474  00FF29  20                 	db	32
  1475  00FF2A  25                 	db	37
  1476  00FF2B  64                 	db	100	;'d'
  1477  00FF2C  20                 	db	32
  1478  00FF2D  53                 	db	83	;'S'
  1479  00FF2E  45                 	db	69	;'E'
  1480  00FF2F  43                 	db	67	;'C'
  1481  00FF30  00                 	db	0
  1482  00FF31                     STR_2:
  1483  00FF31  54                 	db	84	;'T'
  1484  00FF32  49                 	db	73	;'I'
  1485  00FF33  4D                 	db	77	;'M'
  1486  00FF34  45                 	db	69	;'E'
  1487  00FF35  3A                 	db	58	;':'
  1488  00FF36  20                 	db	32
  1489  00FF37  25                 	db	37
  1490  00FF38  64                 	db	100	;'d'
  1491  00FF39  3A                 	db	58	;':'
  1492  00FF3A  25                 	db	37
  1493  00FF3B  30                 	db	48	;'0'
  1494  00FF3C  32                 	db	50	;'2'
  1495  00FF3D  64                 	db	100	;'d'
  1496  00FF3E  00                 	db	0
  1497  00FF3F                     STR_79:
  1498  00FF3F  54                 	db	84	;'T'
  1499  00FF40  53                 	db	83	;'S'
  1500  00FF41  54                 	db	84	;'T'
  1501  00FF42  3A                 	db	58	;':'
  1502  00FF43  20                 	db	32
  1503  00FF44  49                 	db	73	;'I'
  1504  00FF45  52                 	db	82	;'R'
  1505  00FF46  20                 	db	32
  1506  00FF47  53                 	db	83	;'S'
  1507  00FF48  4E                 	db	78	;'N'
  1508  00FF49  53                 	db	83	;'S'
  1509  00FF4A  52                 	db	82	;'R'
  1510  00FF4B  00                 	db	0
  1511  00FF4C                     STR_65:
  1512  00FF4C  54                 	db	84	;'T'
  1513  00FF4D  49                 	db	73	;'I'
  1514  00FF4E  4D                 	db	77	;'M'
  1515  00FF4F  45                 	db	69	;'E'
  1516  00FF50  20                 	db	32
  1517  00FF51  25                 	db	37
  1518  00FF52  64                 	db	100	;'d'
  1519  00FF53  3A                 	db	58	;':'
  1520  00FF54  25                 	db	37
  1521  00FF55  30                 	db	48	;'0'
  1522  00FF56  32                 	db	50	;'2'
  1523  00FF57  64                 	db	100	;'d'
  1524  00FF58  00                 	db	0
  1525  00FF59                     STR_74:
  1526  00FF59  41                 	db	65	;'A'
  1527  00FF5A  4C                 	db	76	;'L'
  1528  00FF5B  47                 	db	71	;'G'
  1529  00FF5C  33                 	db	51	;'3'
  1530  00FF5D  3A                 	db	58	;':'
  1531  00FF5E  20                 	db	32
  1532  00FF5F  31                 	db	49	;'1'
  1533  00FF60  20                 	db	32
  1534  00FF61  43                 	db	67	;'C'
  1535  00FF62  41                 	db	65	;'A'
  1536  00FF63  4E                 	db	78	;'N'
  1537  00FF64  00                 	db	0
  1538  00FF65                     STR_93:
  1539  00FF65  50                 	db	80	;'P'
  1540  00FF66  49                 	db	73	;'I'
  1541  00FF67  4E                 	db	78	;'N'
  1542  00FF68  20                 	db	32
  1543  00FF69  52                 	db	82	;'R'
  1544  00FF6A  41                 	db	65	;'A'
  1545  00FF6B  33                 	db	51	;'3'
  1546  00FF6C  2E                 	db	46
  1547  00FF6D  2E                 	db	46
  1548  00FF6E  2E                 	db	46
  1549  00FF6F  00                 	db	0
  1550  00FF70                     STR_95:
  1551  00FF70  50                 	db	80	;'P'
  1552  00FF71  49                 	db	73	;'I'
  1553  00FF72  4E                 	db	78	;'N'
  1554  00FF73  20                 	db	32
  1555  00FF74  52                 	db	82	;'R'
  1556  00FF75  41                 	db	65	;'A'
  1557  00FF76  34                 	db	52	;'4'
  1558  00FF77  2E                 	db	46
  1559  00FF78  2E                 	db	46
  1560  00FF79  2E                 	db	46
  1561  00FF7A  00                 	db	0
  1562  00FF7B                     STR_64:
  1563  00FF7B  53                 	db	83	;'S'
  1564  00FF7C  4F                 	db	79	;'O'
  1565  00FF7D  52                 	db	82	;'R'
  1566  00FF7E  54                 	db	84	;'T'
  1567  00FF7F  49                 	db	73	;'I'
  1568  00FF80  4E                 	db	78	;'N'
  1569  00FF81  47                 	db	71	;'G'
  1570  00FF82  2E                 	db	46
  1571  00FF83  2E                 	db	46
  1572  00FF84  2E                 	db	46
  1573  00FF85  00                 	db	0
  1574  00FF86                     STR_84:
  1575  00FF86  54                 	db	84	;'T'
  1576  00FF87  53                 	db	83	;'S'
  1577  00FF88  54                 	db	84	;'T'
  1578  00FF89  3A                 	db	58	;':'
  1579  00FF8A  20                 	db	32
  1580  00FF8B  43                 	db	67	;'C'
  1581  00FF8C  4F                 	db	79	;'O'
  1582  00FF8D  4E                 	db	78	;'N'
  1583  00FF8E  44                 	db	68	;'D'
  1584  00FF8F  00                 	db	0
  1585  00FF90                     STR_88:
  1586  00FF90  41                 	db	65	;'A'
  1587  00FF91  43                 	db	67	;'C'
  1588  00FF92  54                 	db	84	;'T'
  1589  00FF93  55                 	db	85	;'U'
  1590  00FF94  41                 	db	65	;'A'
  1591  00FF95  54                 	db	84	;'T'
  1592  00FF96  4F                 	db	79	;'O'
  1593  00FF97  52                 	db	82	;'R'
  1594  00FF98  53                 	db	83	;'S'
  1595  00FF99  00                 	db	0
  1596  00FF9A                     STR_22:
  1597  00FF9A  44                 	db	68	;'D'
  1598  00FF9B  55                 	db	85	;'U'
  1599  00FF9C  52                 	db	82	;'R'
  1600  00FF9D  41                 	db	65	;'A'
  1601  00FF9E  54                 	db	84	;'T'
  1602  00FF9F  49                 	db	73	;'I'
  1603  00FFA0  4F                 	db	79	;'O'
  1604  00FFA1  4E                 	db	78	;'N'
  1605  00FFA2  3A                 	db	58	;':'
  1606  00FFA3  00                 	db	0
  1607  00FFA4                     STR_86:
  1608  00FFA4  43                 	db	67	;'C'
  1609  00FFA5  4F                 	db	79	;'O'
  1610  00FFA6  4E                 	db	78	;'N'
  1611  00FFA7  44                 	db	68	;'D'
  1612  00FFA8  3A                 	db	58	;':'
  1613  00FFA9  20                 	db	32
  1614  00FFAA  25                 	db	37
  1615  00FFAB  64                 	db	100	;'d'
  1616  00FFAC  00                 	db	0
  1617  00FFAD                     STR_77:
  1618  00FFAD  53                 	db	83	;'S'
  1619  00FFAE  45                 	db	69	;'E'
  1620  00FFAF  4E                 	db	78	;'N'
  1621  00FFB0  53                 	db	83	;'S'
  1622  00FFB1  4F                 	db	79	;'O'
  1623  00FFB2  52                 	db	82	;'R'
  1624  00FFB3  53                 	db	83	;'S'
  1625  00FFB4  00                 	db	0
  1626  00FFB5                     STR_128:
  1627  00FFB5  28                 	db	40
  1628  00FFB6  6E                 	db	110	;'n'
  1629  00FFB7  75                 	db	117	;'u'
  1630  00FFB8  6C                 	db	108	;'l'
  1631  00FFB9  6C                 	db	108	;'l'
  1632  00FFBA  29                 	db	41
  1633  00FFBB  00                 	db	0
  1634  00FFBC                     STR_67:
  1635  00FFBC  46                 	db	70	;'F'
  1636  00FFBD  41                 	db	65	;'A'
  1637  00FFBE  49                 	db	73	;'I'
  1638  00FFBF  4C                 	db	76	;'L'
  1639  00FFC0  45                 	db	69	;'E'
  1640  00FFC1  44                 	db	68	;'D'
  1641  00FFC2  00                 	db	0
  1642  00FFC3                     STR_7:
  1643  00FFC3  53                 	db	83	;'S'
  1644  00FFC4  54                 	db	84	;'T'
  1645  00FFC5  41                 	db	65	;'A'
  1646  00FFC6  52                 	db	82	;'R'
  1647  00FFC7  54                 	db	84	;'T'
  1648  00FFC8  3A                 	db	58	;':'
  1649  00FFC9  00                 	db	0
  1650  00FFCA                     STR_9:
  1651  00FFCA  46                 	db	70	;'F'
  1652  00FFCB  45                 	db	69	;'E'
  1653  00FFCC  42                 	db	66	;'B'
  1654  00FFCD  00                 	db	0
  1655  00FFCE                     STR_19:
  1656  00FFCE  44                 	db	68	;'D'
  1657  00FFCF  45                 	db	69	;'E'
  1658  00FFD0  43                 	db	67	;'C'
  1659  00FFD1  00                 	db	0
  1660  00FFD2                     STR_15:
  1661  00FFD2  41                 	db	65	;'A'
  1662  00FFD3  55                 	db	85	;'U'
  1663  00FFD4  47                 	db	71	;'G'
  1664  00FFD5  00                 	db	0
  1665  00FFD6                     STR_14:
  1666  00FFD6  4A                 	db	74	;'J'
  1667  00FFD7  55                 	db	85	;'U'
  1668  00FFD8  4C                 	db	76	;'L'
  1669  00FFD9  00                 	db	0
  1670  00FFDA                     STR_8:
  1671  00FFDA  4A                 	db	74	;'J'
  1672  00FFDB  41                 	db	65	;'A'
  1673  00FFDC  4E                 	db	78	;'N'
  1674  00FFDD  00                 	db	0
  1675  00FFDE                     STR_13:
  1676  00FFDE  4A                 	db	74	;'J'
  1677  00FFDF  55                 	db	85	;'U'
  1678  00FFE0  4E                 	db	78	;'N'
  1679  00FFE1  00                 	db	0
  1680  00FFE2                     STR_16:
  1681  00FFE2  53                 	db	83	;'S'
  1682  00FFE3  45                 	db	69	;'E'
  1683  00FFE4  50                 	db	80	;'P'
  1684  00FFE5  00                 	db	0
  1685  00FFE6                     STR_10:
  1686  00FFE6  4D                 	db	77	;'M'
  1687  00FFE7  41                 	db	65	;'A'
  1688  00FFE8  52                 	db	82	;'R'
  1689  00FFE9  00                 	db	0
  1690  00FFEA                     STR_11:
  1691  00FFEA  41                 	db	65	;'A'
  1692  00FFEB  50                 	db	80	;'P'
  1693  00FFEC  52                 	db	82	;'R'
  1694  00FFED  00                 	db	0
  1695  00FFEE                     STR_20:
  1696  00FFEE  45                 	db	69	;'E'
  1697  00FFEF  52                 	db	82	;'R'
  1698  00FFF0  52                 	db	82	;'R'
  1699  00FFF1  00                 	db	0
  1700  00FFF2                     STR_17:
  1701  00FFF2  4F                 	db	79	;'O'
  1702  00FFF3  43                 	db	67	;'C'
  1703  00FFF4  54                 	db	84	;'T'
  1704  00FFF5  00                 	db	0
  1705  00FFF6                     STR_18:
  1706  00FFF6  4E                 	db	78	;'N'
  1707  00FFF7  4F                 	db	79	;'O'
  1708  00FFF8  56                 	db	86	;'V'
  1709  00FFF9  00                 	db	0
  1710  00FFFA                     STR_12:
  1711  00FFFA  4D                 	db	77	;'M'
  1712  00FFFB  41                 	db	65	;'A'
  1713  00FFFC  59                 	db	89	;'Y'
  1714  00FFFD  00                 	db	0
  1715  0000                     
  1716                           ; #config settings
  1717  00FFFE  00                 	db	0	; dummy byte at the end
  1718  0000                     
  1719                           	psect	cinit
  1720  004E96                     __pcinit:
  1721                           	opt stack 0
  1722  004E96                     start_initialization:
  1723                           	opt stack 0
  1724  004E96                     __initialization:
  1725                           	opt stack 0
  1726                           
  1727                           ; Initialize objects allocated to BANK1 (8 bytes)
  1728                           ; load TBLPTR registers with __pidataBANK1
  1729  004E96  0E36               	movlw	low __pidataBANK1
  1730  004E98  6EF6               	movwf	tblptrl,c
  1731  004E9A  0E56               	movlw	high __pidataBANK1
  1732  004E9C  6EF7               	movwf	tblptrh,c
  1733  004E9E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1734  004EA0  6EF8               	movwf	tblptru,c
  1735  004EA2  EE01  F047         	lfsr	0,__pdataBANK1
  1736  004EA6  EE10 F008          	lfsr	1,8
  1737  004EAA                     copy_data0:
  1738  004EAA  0009               	tblrd		*+
  1739  004EAC  CFF5 FFEE          	movff	tablat,postinc0
  1740  004EB0  50E5               	movf	postdec1,w,c
  1741  004EB2  50E1               	movf	fsr1l,w,c
  1742  004EB4  E1FA               	bnz	copy_data0
  1743                           
  1744                           ; Clear objects allocated to BANK1 (71 bytes)
  1745  004EB6  EE01  F000         	lfsr	0,__pbssBANK1
  1746  004EBA  0E47               	movlw	71
  1747  004EBC                     clear_0:
  1748  004EBC  6AEE               	clrf	postinc0,c
  1749  004EBE  06E8               	decf	wreg,f,c
  1750  004EC0  E1FD               	bnz	clear_0
  1751                           
  1752                           ; Clear objects allocated to BANK0 (38 bytes)
  1753  004EC2  EE00  F0DA         	lfsr	0,__pbssBANK0
  1754  004EC6  0E26               	movlw	38
  1755  004EC8                     clear_1:
  1756  004EC8  6AEE               	clrf	postinc0,c
  1757  004ECA  06E8               	decf	wreg,f,c
  1758  004ECC  E1FD               	bnz	clear_1
  1759                           
  1760                           ; Clear objects allocated to COMRAM (35 bytes)
  1761  004ECE  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1762  004ED2  0E23               	movlw	35
  1763  004ED4                     clear_2:
  1764  004ED4  6AEE               	clrf	postinc0,c
  1765  004ED6  06E8               	decf	wreg,f,c
  1766  004ED8  E1FD               	bnz	clear_2
  1767  004EDA                     end_of_initialization:
  1768                           	opt stack 0
  1769  004EDA                     __end_of__initialization:
  1770                           	opt stack 0
  1771  004EDA  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1772  004EDC  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1773  004EDE  0100               	movlb	0
  1774  004EE0  EF80  F021         	goto	_main	;jump to C main() function
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           
  1784                           	psect	bssCOMRAM
  1785  00005B                     __pbssCOMRAM:
  1786                           	opt stack 0
  1787  00005B                     _back:
  1788                           	opt stack 0
  1789  00005B                     	ds	2
  1790  00005D                     _down:
  1791                           	opt stack 0
  1792  00005D                     	ds	2
  1793  00005F                     _enter:
  1794                           	opt stack 0
  1795  00005F                     	ds	2
  1796  000061                     _f_panning_to_bin:
  1797                           	opt stack 0
  1798  000061                     	ds	2
  1799  000063                     _log_completion:
  1800                           	opt stack 0
  1801  000063                     	ds	2
  1802  000065                     _log_count_pop_no_tab:
  1803                           	opt stack 0
  1804  000065                     	ds	2
  1805  000067                     _log_count_pop_w_tab:
  1806                           	opt stack 0
  1807  000067                     	ds	2
  1808  000069                     _most_recent_sort_time:
  1809                           	opt stack 0
  1810  000069                     	ds	2
  1811  00006B                     _pan_servo_state:
  1812                           	opt stack 0
  1813  00006B                     	ds	2
  1814  00006D                     _servo_timer_counter:
  1815                           	opt stack 0
  1816  00006D                     	ds	2
  1817  00006F                     _servo_timer_target:
  1818                           	opt stack 0
  1819  00006F                     	ds	2
  1820  000071                     _tilt_servo_state:
  1821                           	opt stack 0
  1822  000071                     	ds	2
  1823  000073                     _timer2_counter:
  1824                           	opt stack 0
  1825  000073                     	ds	2
  1826  000075                     _up:
  1827                           	opt stack 0
  1828  000075                     	ds	2
  1829  000077                     _was_low_1:
  1830                           	opt stack 0
  1831  000077                     	ds	2
  1832  000079                     _was_low_2:
  1833                           	opt stack 0
  1834  000079                     	ds	2
  1835  00007B                     _was_low_3:
  1836                           	opt stack 0
  1837  00007B                     	ds	2
  1838  00007D                     _input:
  1839                           	opt stack 0
  1840  00007D                     	ds	1
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1l	equ	0xFE1
  1849                           
  1850                           	psect	bssBANK0
  1851  0000DA                     __pbssBANK0:
  1852                           	opt stack 0
  1853  0000DA                     _servoTimes:
  1854                           	opt stack 0
  1855  0000DA                     	ds	8
  1856  0000E2                     _sensor_outputs:
  1857                           	opt stack 0
  1858  0000E2                     	ds	4
  1859  0000E6                     _IR_signal:
  1860                           	opt stack 0
  1861  0000E6                     	ds	2
  1862  0000E8                     _MAG_signal:
  1863                           	opt stack 0
  1864  0000E8                     	ds	2
  1865  0000EA                     _RTCflag:
  1866                           	opt stack 0
  1867  0000EA                     	ds	2
  1868  0000EC                     _cur_state:
  1869                           	opt stack 0
  1870  0000EC                     	ds	2
  1871  0000EE                     _f_arm_position:
  1872                           	opt stack 0
  1873  0000EE                     	ds	2
  1874  0000F0                     _f_lastCan:
  1875                           	opt stack 0
  1876  0000F0                     	ds	2
  1877  0000F2                     _f_loadingNewCan:
  1878                           	opt stack 0
  1879  0000F2                     	ds	2
  1880  0000F4                     _log:
  1881                           	opt stack 0
  1882  0000F4                     	ds	2
  1883  0000F6                     _log_total_time:
  1884                           	opt stack 0
  1885  0000F6                     	ds	2
  1886  0000F8                     _logstate:
  1887                           	opt stack 0
  1888  0000F8                     	ds	2
  1889  0000FA                     _total_time:
  1890                           	opt stack 0
  1891  0000FA                     	ds	2
  1892  0000FC                     _machine_state:
  1893                           	opt stack 0
  1894  0000FC                     	ds	1
  1895  0000FD                     _sel:
  1896                           	opt stack 0
  1897  0000FD                     	ds	1
  1898  0000FE                     _count_total:
  1899                           	opt stack 0
  1900  0000FE                     	ds	2
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	bssBANK1
  1911  000100                     __pbssBANK1:
  1912                           	opt stack 0
  1913  000100                     _log_startTime:
  1914                           	opt stack 0
  1915  000100                     	ds	14
  1916  00010E                     _startTime:
  1917                           	opt stack 0
  1918  00010E                     	ds	14
  1919  00011C                     _time:
  1920                           	opt stack 0
  1921  00011C                     	ds	7
  1922  000123                     _count_can_no_lab:
  1923                           	opt stack 0
  1924  000123                     	ds	2
  1925  000125                     _count_can_w_lab:
  1926                           	opt stack 0
  1927  000125                     	ds	2
  1928  000127                     _count_pop_no_tab:
  1929                           	opt stack 0
  1930  000127                     	ds	2
  1931  000129                     _count_pop_w_tab:
  1932                           	opt stack 0
  1933  000129                     	ds	2
  1934  00012B                     _cur_can:
  1935                           	opt stack 0
  1936  00012B                     	ds	2
  1937  00012D                     _debug:
  1938                           	opt stack 0
  1939  00012D                     	ds	2
  1940  00012F                     _f_ID_receive:
  1941                           	opt stack 0
  1942  00012F                     	ds	2
  1943  000131                     _f_can_coming_to_ID:
  1944                           	opt stack 0
  1945  000131                     	ds	2
  1946  000133                     _f_can_coming_to_distribution:
  1947                           	opt stack 0
  1948  000133                     	ds	2
  1949  000135                     _f_can_distributed:
  1950                           	opt stack 0
  1951  000135                     	ds	2
  1952  000137                     _f_most_recent_sort_time:
  1953                           	opt stack 0
  1954  000137                     	ds	2
  1955  000139                     _first:
  1956                           	opt stack 0
  1957  000139                     	ds	2
  1958  00013B                     _firstboot:
  1959                           	opt stack 0
  1960  00013B                     	ds	2
  1961  00013D                     _i:
  1962                           	opt stack 0
  1963  00013D                     	ds	2
  1964  00013F                     _log_count_can_no_lab:
  1965                           	opt stack 0
  1966  00013F                     	ds	2
  1967  000141                     _log_count_can_w_lab:
  1968                           	opt stack 0
  1969  000141                     	ds	2
  1970  000143                     _log_count_total:
  1971                           	opt stack 0
  1972  000143                     	ds	2
  1973  000145                     _var:
  1974                           	opt stack 0
  1975  000145                     	ds	2
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           postinc0	equ	0xFEE
  1981                           wreg	equ	0xFE8
  1982                           postdec1	equ	0xFE5
  1983                           fsr1l	equ	0xFE1
  1984                           
  1985                           	psect	dataBANK1
  1986  000147                     __pdataBANK1:
  1987                           	opt stack 0
  1988  000147                     UI@F3241:
  1989                           	opt stack 0
  1990  000147                     	ds	4
  1991  00014B                     printRTC@F3231:
  1992                           	opt stack 0
  1993  00014B                     	ds	4
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1l	equ	0xFE1
  2002                           
  2003                           	psect	cstackBANK0
  2004  000080                     __pcstackBANK0:
  2005                           	opt stack 0
  2006  000080                     ??_delay_ms:
  2007  000080                     ??_isdigit:
  2008  000080                     ??_readADC:
  2009  000080                     ??_I2C_Master_Wait:
  2010  000080                     ?___wmul:
  2011                           	opt stack 0
  2012  000080                     ?___awmod:
  2013                           	opt stack 0
  2014  000080                     ?___lwdiv:
  2015                           	opt stack 0
  2016  000080                     ?___lldiv:
  2017                           	opt stack 0
  2018  000080                     lcdNibble@temp:
  2019                           	opt stack 0
  2020  000080                     initTime@m:
  2021                           	opt stack 0
  2022  000080                     updateServoPosition@time_us:
  2023                           	opt stack 0
  2024  000080                     EEPROM_read@address:
  2025                           	opt stack 0
  2026  000080                     ___wmul@multiplier:
  2027                           	opt stack 0
  2028  000080                     ___awmod@dividend:
  2029                           	opt stack 0
  2030  000080                     ___lwdiv@dividend:
  2031                           	opt stack 0
  2032  000080                     strcpy@to:
  2033                           	opt stack 0
  2034  000080                     ___lldiv@dividend:
  2035                           	opt stack 0
  2036                           
  2037                           ; 4 bytes @ 0x0
  2038  000080                     	ds	1
  2039  000081                     readADC@channel:
  2040                           	opt stack 0
  2041  000081                     I2C_Master_Read@a:
  2042                           	opt stack 0
  2043  000081                     lcdNibble@data:
  2044                           	opt stack 0
  2045  000081                     initTime@h:
  2046                           	opt stack 0
  2047  000081                     delay_ms@milliseconds:
  2048                           	opt stack 0
  2049  000081                     _isdigit$2056:
  2050                           	opt stack 0
  2051  000081                     I2C_Master_Write@d:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x1
  2055  000081                     	ds	1
  2056  000082                     ??_ID:
  2057  000082                     ??_readIR:
  2058  000082                     ??_readMAG:
  2059  000082                     I2C_Master_Read@temp:
  2060                           	opt stack 0
  2061  000082                     lcdInst@data:
  2062                           	opt stack 0
  2063  000082                     putch@data:
  2064                           	opt stack 0
  2065  000082                     initTime@w:
  2066                           	opt stack 0
  2067  000082                     isdigit@c:
  2068                           	opt stack 0
  2069  000082                     updateServoPosition@timer:
  2070                           	opt stack 0
  2071  000082                     ___wmul@multiplicand:
  2072                           	opt stack 0
  2073  000082                     ___awmod@divisor:
  2074                           	opt stack 0
  2075  000082                     ___lwdiv@divisor:
  2076                           	opt stack 0
  2077  000082                     strcpy@from:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x2
  2081  000082                     	ds	1
  2082  000083                     ??_initLCD:
  2083  000083                     initTime@DD:
  2084                           	opt stack 0
  2085  000083                     getRTC@i:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x3
  2089  000083                     	ds	1
  2090  000084                     ??_updateServoPosition:
  2091  000084                     initTime@MM:
  2092                           	opt stack 0
  2093  000084                     ___awmod@counter:
  2094                           	opt stack 0
  2095  000084                     readIR@res:
  2096                           	opt stack 0
  2097  000084                     readMAG@res:
  2098                           	opt stack 0
  2099  000084                     ID@i:
  2100                           	opt stack 0
  2101  000084                     ___wmul@product:
  2102                           	opt stack 0
  2103  000084                     ___lwdiv@quotient:
  2104                           	opt stack 0
  2105  000084                     strcpy@cp:
  2106                           	opt stack 0
  2107  000084                     ___lldiv@divisor:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0x4
  2111  000084                     	ds	1
  2112  000085                     ??_initSortTimer:
  2113  000085                     initTime@YY:
  2114                           	opt stack 0
  2115  000085                     ___awmod@sign:
  2116                           	opt stack 0
  2117                           
  2118                           ; 1 bytes @ 0x5
  2119  000085                     	ds	1
  2120  000086                     ??_getIR:
  2121  000086                     ??_getMAG:
  2122  000086                     ?___awdiv:
  2123                           	opt stack 0
  2124  000086                     initTime@s:
  2125                           	opt stack 0
  2126  000086                     ___lwdiv@counter:
  2127                           	opt stack 0
  2128  000086                     ID@i_1181:
  2129                           	opt stack 0
  2130  000086                     updateServoPosition@my_time:
  2131                           	opt stack 0
  2132  000086                     ___awdiv@dividend:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x6
  2136  000086                     	ds	1
  2137  000087                     ?___lwmod:
  2138                           	opt stack 0
  2139  000087                     getIR@i:
  2140                           	opt stack 0
  2141  000087                     ___lwmod@dividend:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x7
  2145  000087                     	ds	1
  2146  000088                     ??_Distribution:
  2147  000088                     ??_initServos:
  2148  000088                     ID@i_1182:
  2149                           	opt stack 0
  2150  000088                     initSortTimer@i:
  2151                           	opt stack 0
  2152  000088                     ___awdiv@divisor:
  2153                           	opt stack 0
  2154  000088                     ___lldiv@quotient:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x8
  2158  000088                     	ds	1
  2159  000089                     ___lwmod@divisor:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x9
  2163  000089                     	ds	1
  2164  00008A                     ___awdiv@counter:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0xA
  2168  00008A                     	ds	1
  2169  00008B                     ___awdiv@sign:
  2170                           	opt stack 0
  2171  00008B                     ___lwmod@counter:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0xB
  2175  00008B                     	ds	1
  2176  00008C                     ___lldiv@counter:
  2177                           	opt stack 0
  2178  00008C                     ___awdiv@quotient:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0xC
  2182  00008C                     	ds	1
  2183  00008D                     I2C_Master_Init@c:
  2184                           	opt stack 0
  2185                           
  2186                           ; 4 bytes @ 0xD
  2187  00008D                     	ds	1
  2188  00008E                     ?_printf:
  2189                           	opt stack 0
  2190  00008E                     printf@f:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0xE
  2194  00008E                     	ds	3
  2195  000091                     ??_I2C_Master_Init:
  2196                           
  2197                           ; 1 bytes @ 0x11
  2198  000091                     	ds	4
  2199  000095                     ??_loadRTC:
  2200                           
  2201                           ; 1 bytes @ 0x15
  2202  000095                     	ds	1
  2203  000096                     loadRTC@i:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x16
  2207  000096                     	ds	4
  2208  00009A                     ??_printf:
  2209                           
  2210                           ; 1 bytes @ 0x1A
  2211  00009A                     	ds	4
  2212  00009E                     printf@prec:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x1E
  2216  00009E                     	ds	1
  2217  00009F                     printf@cp:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x1F
  2221  00009F                     	ds	2
  2222  0000A1                     printf@ap:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x21
  2226  0000A1                     	ds	2
  2227  0000A3                     printf@len:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0x23
  2231  0000A3                     	ds	2
  2232  0000A5                     printf@val:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0x25
  2236  0000A5                     	ds	2
  2237  0000A7                     printf@flag:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x27
  2241  0000A7                     	ds	1
  2242  0000A8                     printf@c:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x28
  2246  0000A8                     	ds	1
  2247  0000A9                     printf@width:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x29
  2251  0000A9                     	ds	2
  2252  0000AB                     ??_printRTC:
  2253  0000AB                     ??_algorithmTest:
  2254  0000AB                     ??_sensorTest:
  2255  0000AB                     ??_actuatorTest:
  2256  0000AB                     ??_arm:
  2257  0000AB                     ??_PortTestDC:
  2258  0000AB                     ??_SpeedTest:
  2259  0000AB                     ??_PortTestPusher:
  2260  0000AB                     ??_PlatformTest:
  2261  0000AB                     ??_BothServos:
  2262  0000AB                     ??_BlockerTest:
  2263  0000AB                     EEPROM_write@address:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x2B
  2267  0000AB                     	ds	1
  2268  0000AC                     BlockerTest@i:
  2269                           	opt stack 0
  2270  0000AC                     arm@on:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x2C
  2274  0000AC                     	ds	1
  2275  0000AD                     EEPROM_write@data:
  2276                           	opt stack 0
  2277  0000AD                     actuatorTest@i_1730:
  2278                           	opt stack 0
  2279  0000AD                     sensorTest@res:
  2280                           	opt stack 0
  2281  0000AD                     PlatformTest@res:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x2D
  2285  0000AD                     	ds	1
  2286  0000AE                     ??_EEPROM_write:
  2287  0000AE                     actuatorTest@i_1737:
  2288                           	opt stack 0
  2289  0000AE                     BlockerTest@cam_flag:
  2290                           	opt stack 0
  2291  0000AE                     printRTC@INT_time:
  2292                           	opt stack 0
  2293                           
  2294                           ; 14 bytes @ 0x2E
  2295  0000AE                     	ds	1
  2296  0000AF                     EEPROM_write@i:
  2297                           	opt stack 0
  2298  0000AF                     actuatorTest@i_1738:
  2299                           	opt stack 0
  2300  0000AF                     PlatformTest@res_1781:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x2F
  2304  0000AF                     	ds	1
  2305  0000B0                     EEPROM_write@i_1436:
  2306                           	opt stack 0
  2307  0000B0                     actuatorTest@i_1740:
  2308                           	opt stack 0
  2309  0000B0                     BlockerTest@cond_flag:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x30
  2313  0000B0                     	ds	1
  2314  0000B1                     ??_Loading:
  2315  0000B1                     logRun@num:
  2316                           	opt stack 0
  2317  0000B1                     actuatorTest@i_1741:
  2318                           	opt stack 0
  2319  0000B1                     PlatformTest@i:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x31
  2323  0000B1                     	ds	1
  2324  0000B2                     logRun@byte1:
  2325                           	opt stack 0
  2326  0000B2                     actuatorTest@i_1743:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x32
  2330  0000B2                     	ds	1
  2331  0000B3                     logRun@byte2:
  2332                           	opt stack 0
  2333  0000B3                     actuatorTest@i_1744:
  2334                           	opt stack 0
  2335  0000B3                     Loading@addr:
  2336                           	opt stack 0
  2337  0000B3                     PlatformTest@i_1784:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x33
  2341  0000B3                     	ds	1
  2342  0000B4                     logRun@byte3:
  2343                           	opt stack 0
  2344  0000B4                     actuatorTest@i_1746:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x34
  2348  0000B4                     	ds	1
  2349  0000B5                     Loading@byte1:
  2350                           	opt stack 0
  2351  0000B5                     logRun@byte_i:
  2352                           	opt stack 0
  2353  0000B5                     actuatorTest@i_1747:
  2354                           	opt stack 0
  2355  0000B5                     PlatformTest@on:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x35
  2359  0000B5                     	ds	1
  2360  0000B6                     logRun@byte11:
  2361                           	opt stack 0
  2362  0000B6                     actuatorTest@i_1749:
  2363                           	opt stack 0
  2364  0000B6                     Loading@i_1156:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x36
  2368  0000B6                     	ds	1
  2369  0000B7                     actuatorTest@i_1750:
  2370                           	opt stack 0
  2371  0000B7                     logRun@i:
  2372                           	opt stack 0
  2373                           
  2374                           ; 2 bytes @ 0x37
  2375  0000B7                     	ds	1
  2376  0000B8                     actuatorTest@i_1752:
  2377                           	opt stack 0
  2378  0000B8                     Loading@i_1165:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x38
  2382  0000B8                     	ds	1
  2383  0000B9                     actuatorTest@i_1753:
  2384                           	opt stack 0
  2385  0000B9                     logRun@addr:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x39
  2389  0000B9                     	ds	1
  2390  0000BA                     actuatorTest@i_1756:
  2391                           	opt stack 0
  2392  0000BA                     Loading@i_1167:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x3A
  2396  0000BA                     	ds	1
  2397  0000BB                     actuatorTest@i_1757:
  2398                           	opt stack 0
  2399                           
  2400                           ; 1 bytes @ 0x3B
  2401  0000BB                     	ds	1
  2402  0000BC                     actuatorTest@i_1759:
  2403                           	opt stack 0
  2404  0000BC                     printRTC@RTC_month:
  2405                           	opt stack 0
  2406  0000BC                     Loading@i_1168:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x3C
  2410  0000BC                     	ds	1
  2411  0000BD                     actuatorTest@i_1760:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x3D
  2415  0000BD                     	ds	1
  2416  0000BE                     actuatorTest@i_1762:
  2417                           	opt stack 0
  2418  0000BE                     Loading@i_1170:
  2419                           	opt stack 0
  2420  0000BE                     printRTC@month:
  2421                           	opt stack 0
  2422                           
  2423                           ; 4 bytes @ 0x3E
  2424  0000BE                     	ds	1
  2425  0000BF                     actuatorTest@i_1763:
  2426                           	opt stack 0
  2427                           
  2428                           ; 1 bytes @ 0x3F
  2429  0000BF                     	ds	1
  2430  0000C0                     actuatorTest@i_1766:
  2431                           	opt stack 0
  2432  0000C0                     Loading@j:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x40
  2436  0000C0                     	ds	1
  2437  0000C1                     actuatorTest@i_1767:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0x41
  2441  0000C1                     	ds	1
  2442  0000C2                     actuatorTest@i_1769:
  2443                           	opt stack 0
  2444  0000C2                     printRTC@i:
  2445                           	opt stack 0
  2446  0000C2                     Loading@i:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x42
  2450  0000C2                     	ds	1
  2451  0000C3                     actuatorTest@i_1770:
  2452                           	opt stack 0
  2453                           
  2454                           ; 1 bytes @ 0x43
  2455  0000C3                     	ds	1
  2456  0000C4                     ??_UI:
  2457  0000C4                     actuatorTest@i:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x44
  2461  0000C4                     	ds	2
  2462  0000C6                     ??_Test:
  2463  0000C6                     _UI$2419:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x46
  2467  0000C6                     	ds	2
  2468  0000C8                     UI@i:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x48
  2472  0000C8                     	ds	1
  2473  0000C9                     UI@i_409:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x49
  2477  0000C9                     	ds	1
  2478  0000CA                     UI@i_412:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x4A
  2482  0000CA                     	ds	1
  2483  0000CB                     UI@i_413:
  2484                           	opt stack 0
  2485                           
  2486                           ; 1 bytes @ 0x4B
  2487  0000CB                     	ds	1
  2488  0000CC                     UI@i_431:
  2489                           	opt stack 0
  2490                           
  2491                           ; 1 bytes @ 0x4C
  2492  0000CC                     	ds	1
  2493  0000CD                     UI@i_432:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x4D
  2497  0000CD                     	ds	1
  2498  0000CE                     UI@i_435:
  2499                           	opt stack 0
  2500                           
  2501                           ; 1 bytes @ 0x4E
  2502  0000CE                     	ds	1
  2503  0000CF                     UI@i_436:
  2504                           	opt stack 0
  2505                           
  2506                           ; 1 bytes @ 0x4F
  2507  0000CF                     	ds	1
  2508  0000D0                     UI@i_439:
  2509                           	opt stack 0
  2510                           
  2511                           ; 1 bytes @ 0x50
  2512  0000D0                     	ds	1
  2513  0000D1                     UI@i_440:
  2514                           	opt stack 0
  2515                           
  2516                           ; 1 bytes @ 0x51
  2517  0000D1                     	ds	1
  2518  0000D2                     UI@i_443:
  2519                           	opt stack 0
  2520                           
  2521                           ; 1 bytes @ 0x52
  2522  0000D2                     	ds	1
  2523  0000D3                     UI@i_444:
  2524                           	opt stack 0
  2525                           
  2526                           ; 1 bytes @ 0x53
  2527  0000D3                     	ds	1
  2528  0000D4                     UI@i_447:
  2529                           	opt stack 0
  2530                           
  2531                           ; 1 bytes @ 0x54
  2532  0000D4                     	ds	1
  2533  0000D5                     UI@i_448:
  2534                           	opt stack 0
  2535                           
  2536                           ; 1 bytes @ 0x55
  2537  0000D5                     	ds	1
  2538  0000D6                     UI@month:
  2539                           	opt stack 0
  2540                           
  2541                           ; 4 bytes @ 0x56
  2542  0000D6                     	ds	4
  2543  0000DA                     tblptru	equ	0xFF8
  2544                           tblptrh	equ	0xFF7
  2545                           tblptrl	equ	0xFF6
  2546                           tablat	equ	0xFF5
  2547                           postinc0	equ	0xFEE
  2548                           wreg	equ	0xFE8
  2549                           postdec1	equ	0xFE5
  2550                           fsr1l	equ	0xFE1
  2551                           
  2552                           ; 1 bytes @ 0x5A
  2553                           
  2554                           	psect	cstackCOMRAM
  2555  000001                     __pcstackCOMRAM:
  2556                           	opt stack 0
  2557  000001                     ??_updateArmState:
  2558  000001                     ??i2_I2C_Master_Wait:
  2559  000001                     ??i2_delay_ms:
  2560  000001                     ??i2_isdigit:
  2561  000001                     ?i2___wmul:
  2562                           	opt stack 0
  2563  000001                     ?i2___lwmod:
  2564                           	opt stack 0
  2565  000001                     i2lcdNibble@temp:
  2566                           	opt stack 0
  2567  000001                     i2updateServoPosition@time_us:
  2568                           	opt stack 0
  2569  000001                     i2EEPROM_read@address:
  2570                           	opt stack 0
  2571  000001                     i2___wmul@multiplier:
  2572                           	opt stack 0
  2573  000001                     i2___lwmod@dividend:
  2574                           	opt stack 0
  2575  000001                     i2strcpy@to:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0x0
  2579  000001                     	ds	1
  2580  000002                     i2I2C_Master_Read@a:
  2581                           	opt stack 0
  2582  000002                     i2lcdNibble@data:
  2583                           	opt stack 0
  2584  000002                     i2delay_ms@milliseconds:
  2585                           	opt stack 0
  2586  000002                     i2_isdigit$2056:
  2587                           	opt stack 0
  2588  000002                     i2I2C_Master_Write@d:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x1
  2592  000002                     	ds	1
  2593  000003                     i2I2C_Master_Read@temp:
  2594                           	opt stack 0
  2595  000003                     i2lcdInst@data:
  2596                           	opt stack 0
  2597  000003                     i2putch@data:
  2598                           	opt stack 0
  2599  000003                     i2isdigit@c:
  2600                           	opt stack 0
  2601  000003                     i2updateServoPosition@timer:
  2602                           	opt stack 0
  2603  000003                     i2___wmul@multiplicand:
  2604                           	opt stack 0
  2605  000003                     i2___lwmod@divisor:
  2606                           	opt stack 0
  2607  000003                     i2strcpy@from:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x2
  2611  000003                     	ds	1
  2612  000004                     i2getRTC@i:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x3
  2616  000004                     	ds	1
  2617  000005                     ??i2_updateServoPosition:
  2618  000005                     i2___lwmod@counter:
  2619                           	opt stack 0
  2620  000005                     i2___wmul@product:
  2621                           	opt stack 0
  2622  000005                     i2strcpy@cp:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x4
  2626  000005                     	ds	1
  2627  000006                     ?i2___lwdiv:
  2628                           	opt stack 0
  2629  000006                     i2___lwdiv@dividend:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x5
  2633  000006                     	ds	1
  2634  000007                     retrieveLog@logNum:
  2635                           	opt stack 0
  2636  000007                     i2updateServoPosition@my_time:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x6
  2640  000007                     	ds	1
  2641  000008                     i2___lwdiv@divisor:
  2642                           	opt stack 0
  2643                           
  2644                           ; 2 bytes @ 0x7
  2645  000008                     	ds	1
  2646  000009                     ??_retrieveLog:
  2647  000009                     ??_updateServoStates:
  2648                           
  2649                           ; 1 bytes @ 0x8
  2650  000009                     	ds	1
  2651  00000A                     i2___lwdiv@quotient:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x9
  2655  00000A                     	ds	1
  2656  00000B                     retrieveLog@byte1:
  2657                           	opt stack 0
  2658                           
  2659                           ; 1 bytes @ 0xA
  2660  00000B                     	ds	1
  2661  00000C                     retrieveLog@byte2:
  2662                           	opt stack 0
  2663  00000C                     i2___lwdiv@counter:
  2664                           	opt stack 0
  2665                           
  2666                           ; 1 bytes @ 0xB
  2667  00000C                     	ds	1
  2668  00000D                     ?i2_printf:
  2669                           	opt stack 0
  2670  00000D                     retrieveLog@byte3:
  2671                           	opt stack 0
  2672  00000D                     i2printf@f:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0xC
  2676  00000D                     	ds	1
  2677  00000E                     retrieveLog@i:
  2678                           	opt stack 0
  2679                           
  2680                           ; 2 bytes @ 0xD
  2681  00000E                     	ds	2
  2682  000010                     retrieveLog@addr:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0xF
  2686  000010                     	ds	2
  2687  000012                     dispLogs@myLog:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x11
  2691  000012                     	ds	2
  2692  000014                     
  2693                           ; 1 bytes @ 0x13
  2694  000014                     	ds	5
  2695  000019                     ??i2_printf:
  2696                           
  2697                           ; 1 bytes @ 0x18
  2698  000019                     	ds	4
  2699  00001D                     i2printf@prec:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x1C
  2703  00001D                     	ds	1
  2704  00001E                     i2printf@cp:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x1D
  2708  00001E                     	ds	2
  2709  000020                     i2printf@ap:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x1F
  2713  000020                     	ds	2
  2714  000022                     i2printf@len:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x21
  2718  000022                     	ds	2
  2719  000024                     i2printf@val:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x23
  2723  000024                     	ds	2
  2724  000026                     i2printf@flag:
  2725                           	opt stack 0
  2726                           
  2727                           ; 1 bytes @ 0x25
  2728  000026                     	ds	1
  2729  000027                     i2printf@c:
  2730                           	opt stack 0
  2731                           
  2732                           ; 1 bytes @ 0x26
  2733  000027                     	ds	1
  2734  000028                     i2printf@width:
  2735                           	opt stack 0
  2736                           
  2737                           ; 2 bytes @ 0x27
  2738  000028                     	ds	2
  2739  00002A                     ??_printSortTimer:
  2740  00002A                     ??i2_printRTC:
  2741  00002A                     ?_inputHandler:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x29
  2745  00002A                     	ds	2
  2746  00002C                     ??_inputHandler:
  2747                           
  2748                           ; 1 bytes @ 0x2B
  2749  00002C                     	ds	1
  2750  00002D                     printSortTimer@curTime:
  2751                           	opt stack 0
  2752  00002D                     i2printRTC@INT_time:
  2753                           	opt stack 0
  2754                           
  2755                           ; 14 bytes @ 0x2C
  2756  00002D                     	ds	14
  2757  00003B                     printSortTimer@start_sec:
  2758                           	opt stack 0
  2759  00003B                     i2printRTC@RTC_month:
  2760                           	opt stack 0
  2761                           
  2762                           ; 2 bytes @ 0x3A
  2763  00003B                     	ds	2
  2764  00003D                     printSortTimer@cur_sec:
  2765                           	opt stack 0
  2766  00003D                     i2printRTC@month:
  2767                           	opt stack 0
  2768                           
  2769                           ; 4 bytes @ 0x3C
  2770  00003D                     	ds	2
  2771  00003F                     printSortTimer@min:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x3E
  2775  00003F                     	ds	2
  2776  000041                     printSortTimer@sec:
  2777                           	opt stack 0
  2778  000041                     i2printRTC@i:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0x40
  2782  000041                     	ds	2
  2783  000043                     ??_updateMenu:
  2784  000043                     _printSortTimer$2551:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0x42
  2788  000043                     	ds	2
  2789  000045                     printSortTimer@timeDiff:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x44
  2793  000045                     	ds	2
  2794  000047                     printSortTimer@i_1194:
  2795                           	opt stack 0
  2796                           
  2797                           ; 2 bytes @ 0x46
  2798  000047                     	ds	2
  2799  000049                     printSortTimer@i:
  2800                           	opt stack 0
  2801                           
  2802                           ; 2 bytes @ 0x48
  2803  000049                     	ds	2
  2804  00004B                     ??_handler:
  2805                           
  2806                           ; 1 bytes @ 0x4A
  2807  00004B                     	ds	16
  2808                           tblptru	equ	0xFF8
  2809                           tblptrh	equ	0xFF7
  2810                           tblptrl	equ	0xFF6
  2811                           tablat	equ	0xFF5
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           postdec1	equ	0xFE5
  2815                           fsr1l	equ	0xFE1
  2816                           
  2817 ;;
  2818 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2819 ;;
  2820 ;; *************** function _main *****************
  2821 ;; Defined at:
  2822 ;;		line 19 in file "main.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;Total ram usage:        0 bytes
  2841 ;; Hardware stack levels required when called:   13
  2842 ;; This function calls:
  2843 ;;		_I2C_Master_Init
  2844 ;;		_Test
  2845 ;;		_UI
  2846 ;;		_initLCD
  2847 ;;		_initTime
  2848 ;;		_initUI
  2849 ;;		_logRun
  2850 ;;		_machineConfig
  2851 ;;		_sort
  2852 ;;		_stopSignals
  2853 ;; This function is called by:
  2854 ;;		Startup code after reset
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text0
  2859  004300                     __ptext0:
  2860                           	opt stack 0
  2861  004300                     _main:
  2862                           	opt stack 18
  2863                           
  2864                           ;main.c: 20: machineConfig();
  2865                           
  2866                           ;incstack = 0
  2867  004300  EC08  F026         	call	_machineConfig	;wreg free
  2868                           
  2869                           ;main.c: 21: initLCD();
  2870  004304  ECBE  F027         	call	_initLCD	;wreg free
  2871                           
  2872                           ;main.c: 24: RTCflag = 0;
  2873  004308  0E00               	movlw	0
  2874  00430A  0100               	movlb	0	; () banked
  2875  00430C  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2876  00430E  0E00               	movlw	0
  2877  004310  6FEA               	movwf	_RTCflag& (0+255),b
  2878                           
  2879                           ;main.c: 25: if(RTCflag){
  2880  004312  0100               	movlb	0	; () banked
  2881  004314  51EA               	movf	_RTCflag& (0+255),w,b
  2882  004316  0100               	movlb	0	; () banked
  2883  004318  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2884  00431A  B4D8               	btfsc	status,2,c
  2885  00431C  D016               	goto	l9680
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 26: initTime(0x42, 0x36, 0x13, 0x06, 0x07, 0x04, 0x17);
  2889  00431E  0E36               	movlw	54
  2890  004320  0100               	movlb	0	; () banked
  2891  004322  6F80               	movwf	initTime@m& (0+255),b
  2892  004324  0E13               	movlw	19
  2893  004326  0100               	movlb	0	; () banked
  2894  004328  6F81               	movwf	initTime@h& (0+255),b
  2895  00432A  0E06               	movlw	6
  2896  00432C  0100               	movlb	0	; () banked
  2897  00432E  6F82               	movwf	initTime@w& (0+255),b
  2898  004330  0E07               	movlw	7
  2899  004332  0100               	movlb	0	; () banked
  2900  004334  6F83               	movwf	initTime@DD& (0+255),b
  2901  004336  0E04               	movlw	4
  2902  004338  0100               	movlb	0	; () banked
  2903  00433A  6F84               	movwf	initTime@MM& (0+255),b
  2904  00433C  0E17               	movlw	23
  2905  00433E  0100               	movlb	0	; () banked
  2906  004340  6F85               	movwf	initTime@YY& (0+255),b
  2907  004342  0E42               	movlw	66
  2908  004344  EC8F  F02A         	call	_initTime
  2909                           
  2910                           ;main.c: 27: }
  2911  004348  D00B               	goto	l9682
  2912  00434A                     l9680:
  2913                           
  2914                           ;main.c: 28: else{
  2915                           ;main.c: 29: I2C_Master_Init(10000);
  2916  00434A  0E10               	movlw	16
  2917  00434C  0100               	movlb	0	; () banked
  2918  00434E  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2919  004350  0E27               	movlw	39
  2920  004352  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2921  004354  0E00               	movlw	0
  2922  004356  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2923  004358  0E00               	movlw	0
  2924  00435A  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2925  00435C  EC6B  F026         	call	_I2C_Master_Init	;wreg free
  2926  004360                     l9682:
  2927                           
  2928                           ;main.c: 30: }
  2929                           ;main.c: 32: initUI();
  2930  004360  ECBF  F028         	call	_initUI	;wreg free
  2931                           
  2932                           ;main.c: 33: first = 1;
  2933  004364  0E00               	movlw	0
  2934  004366  0101               	movlb	1	; () banked
  2935  004368  6F3A               	movwf	(_first+1)& (0+255),b
  2936  00436A  0E01               	movlw	1
  2937  00436C  6F39               	movwf	_first& (0+255),b
  2938                           
  2939                           ; BSR set to: 1
  2940                           ;main.c: 44: switch(machine_state){
  2941                           
  2942                           ;main.c: 43: while(1){
  2943  00436E  D018               	goto	l9704
  2944  004370                     l9686:
  2945                           
  2946                           ;main.c: 46: UI();
  2947  004370  EC09  F000         	call	_UI	;wreg free
  2948                           
  2949                           ;main.c: 47: break;
  2950  004374  D015               	goto	l9704
  2951  004376                     l9688:
  2952                           
  2953                           ;main.c: 49: sort();
  2954  004376  EC7E  F02A         	call	_sort	;wreg free
  2955                           
  2956                           ;main.c: 50: break;
  2957  00437A  D012               	goto	l9704
  2958  00437C                     l9690:
  2959                           
  2960                           ;main.c: 52: stopSignals();
  2961  00437C  ECAF  F02A         	call	_stopSignals	;wreg free
  2962                           
  2963                           ;main.c: 53: logRun();
  2964  004380  ECFC  F01D         	call	_logRun	;wreg free
  2965                           
  2966                           ;main.c: 54: first = 1;
  2967  004384  0E00               	movlw	0
  2968  004386  0101               	movlb	1	; () banked
  2969  004388  6F3A               	movwf	(_first+1)& (0+255),b
  2970  00438A  0E01               	movlw	1
  2971  00438C  6F39               	movwf	_first& (0+255),b
  2972                           
  2973                           ; BSR set to: 1
  2974                           ;main.c: 55: UI();
  2975  00438E  EC09  F000         	call	_UI	;wreg free
  2976                           
  2977                           ;main.c: 56: break;
  2978  004392  D006               	goto	l9704
  2979  004394                     l9698:
  2980                           
  2981                           ;main.c: 58: Test();
  2982  004394  EC2E  F01F         	call	_Test	;wreg free
  2983                           
  2984                           ;main.c: 59: break;
  2985  004398  D003               	goto	l9704
  2986  00439A                     l9700:
  2987                           
  2988                           ;main.c: 61: stopSignals();
  2989  00439A  ECAF  F02A         	call	_stopSignals	;wreg free
  2990  00439E                     l499:
  2991  00439E  D7FF               	goto	l499
  2992  0043A0                     l9704:
  2993  0043A0  0100               	movlb	0	; () banked
  2994  0043A2  51FC               	movf	_machine_state& (0+255),w,b
  2995                           
  2996                           ; Switch size 1, requested type "space"
  2997                           ; Number of cases is 5, Range of values is 0 to 4
  2998                           ; switch strategies available:
  2999                           ; Name         Instructions Cycles
  3000                           ; simple_byte           16     9 (average)
  3001                           ;	Chosen strategy is simple_byte
  3002  0043A4  0A00               	xorlw	0	; case 0
  3003  0043A6  B4D8               	btfsc	status,2,c
  3004  0043A8  D7E3               	goto	l9686
  3005  0043AA  0A01               	xorlw	1	; case 1
  3006  0043AC  B4D8               	btfsc	status,2,c
  3007  0043AE  D7E3               	goto	l9688
  3008  0043B0  0A03               	xorlw	3	; case 2
  3009  0043B2  B4D8               	btfsc	status,2,c
  3010  0043B4  D7E3               	goto	l9690
  3011  0043B6  0A01               	xorlw	1	; case 3
  3012  0043B8  B4D8               	btfsc	status,2,c
  3013  0043BA  D7EC               	goto	l9698
  3014  0043BC  0A07               	xorlw	7	; case 4
  3015  0043BE  B4D8               	btfsc	status,2,c
  3016  0043C0  D7EC               	goto	l9700
  3017                           
  3018                           ; BSR set to: 0
  3019                           
  3020                           ; BSR set to: 0
  3021  0043C2  D7EE               	goto	l9704
  3022  0043C4                     __end_of_main:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           postinc0	equ	0xFEE
  3029                           wreg	equ	0xFE8
  3030                           postdec1	equ	0xFE5
  3031                           fsr1l	equ	0xFE1
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _sort *****************
  3035 ;; Defined at:
  3036 ;;		line 66 in file "sort.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:   12
  3057 ;; This function calls:
  3058 ;;		_Distribution
  3059 ;;		_ID
  3060 ;;		_Loading
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text1
  3067  0054FC                     __ptext1:
  3068                           	opt stack 0
  3069  0054FC                     _sort:
  3070                           	opt stack 18
  3071                           
  3072                           ;sort.c: 67: if(machine_state == Sorting_state){
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;incstack = 0
  3076  0054FC  0100               	movlb	0	; () banked
  3077  0054FE  05FC               	decf	_machine_state& (0+255),w,b
  3078  005500  B4D8               	btfsc	status,2,c
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;sort.c: 68: Loading();
  3082  005502  ECC7  F008         	call	_Loading	;wreg free
  3083                           
  3084                           ;sort.c: 69: }
  3085                           ;sort.c: 70: if(machine_state == Sorting_state){
  3086  005506  0100               	movlb	0	; () banked
  3087  005508  05FC               	decf	_machine_state& (0+255),w,b
  3088  00550A  B4D8               	btfsc	status,2,c
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;sort.c: 71: ID();
  3092  00550C  EC13  F018         	call	_ID	;wreg free
  3093                           
  3094                           ;sort.c: 72: }
  3095                           ;sort.c: 73: if(machine_state == Sorting_state){
  3096  005510  0100               	movlb	0	; () banked
  3097  005512  05FC               	decf	_machine_state& (0+255),w,b
  3098  005514  A4D8               	btfss	status,2,c
  3099  005516  0012               	return	
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;sort.c: 74: Distribution();
  3103  005518  ECA4  F020         	call	_Distribution	;wreg free
  3104  00551C  0012               	return	
  3105  00551E                     __end_of_sort:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           postinc0	equ	0xFEE
  3112                           wreg	equ	0xFE8
  3113                           postdec1	equ	0xFE5
  3114                           fsr1l	equ	0xFE1
  3115                           status	equ	0xFD8
  3116                           
  3117 ;; *************** function _Loading *****************
  3118 ;; Defined at:
  3119 ;;		line 78 in file "sort.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  i               2   62[BANK0 ] int 
  3124 ;;  i               2   60[BANK0 ] int 
  3125 ;;  i               2   58[BANK0 ] int 
  3126 ;;  i               2   56[BANK0 ] int 
  3127 ;;  i               2   54[BANK0 ] int 
  3128 ;;  j               2   64[BANK0 ] int 
  3129 ;;  i               2   66[BANK0 ] int 
  3130 ;;  addr            2   51[BANK0 ] unsigned short 
  3131 ;;  byte1           1   53[BANK0 ] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;Total ram usage:       19 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:   11
  3148 ;; This function calls:
  3149 ;;		_EEPROM_read
  3150 ;;		_EEPROM_write
  3151 ;;		_delay_ms
  3152 ;;		_getIR
  3153 ;;		_getMAG
  3154 ;;		_initGlobalVars
  3155 ;;		_initServos
  3156 ;;		_initSortTimer
  3157 ;;		_lcdInst
  3158 ;;		_readIR
  3159 ;; This function is called by:
  3160 ;;		_sort
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text2
  3165  00118E                     __ptext2:
  3166                           	opt stack 0
  3167  00118E                     _Loading:
  3168                           	opt stack 18
  3169                           
  3170                           ;sort.c: 79: if(first){
  3171                           
  3172                           ;incstack = 0
  3173  00118E  0101               	movlb	1	; () banked
  3174  001190  5139               	movf	_first& (0+255),w,b
  3175  001192  0101               	movlb	1	; () banked
  3176  001194  113A               	iorwf	(_first+1)& (0+255),w,b
  3177  001196  B4D8               	btfsc	status,2,c
  3178  001198  D066               	goto	l7460
  3179                           
  3180                           ; BSR set to: 1
  3181                           ;sort.c: 80: initGlobalVars();
  3182  00119A  ECE2  F021         	call	_initGlobalVars	;wreg free
  3183                           
  3184                           ;sort.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3185  00119E  0E01               	movlw	1
  3186  0011A0  ECFD  F02A         	call	_lcdInst
  3187  0011A4  0E68               	movlw	104
  3188  0011A6  0100               	movlb	0	; () banked
  3189  0011A8  6FB1               	movwf	??_Loading& (0+255),b
  3190  0011AA  0EE4               	movlw	228
  3191  0011AC                     u9117:
  3192  0011AC  2EE8               	decfsz	wreg,f,c
  3193  0011AE  D7FE               	bra	u9117
  3194  0011B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3195  0011B2  D7FC               	bra	u9117
  3196  0011B4  F000               	nop	
  3197                           
  3198                           ;sort.c: 82: initSortTimer();
  3199  0011B6  ECFE  F022         	call	_initSortTimer	;wreg free
  3200                           
  3201                           ;sort.c: 83: LATCbits.LATC5 = 1;
  3202  0011BA  8A8B               	bsf	3979,5,c	;volatile
  3203                           
  3204                           ;sort.c: 88: sel = EEPROM_read(0);
  3205  0011BC  0E00               	movlw	0
  3206  0011BE  0100               	movlb	0	; () banked
  3207  0011C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3208  0011C2  0E00               	movlw	0
  3209  0011C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3210  0011C6  ECCB  F02A         	call	_EEPROM_read	;wreg free
  3211  0011CA  0100               	movlb	0	; () banked
  3212  0011CC  6FFD               	movwf	_sel& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 89: unsigned short addr = 1 + 11 * sel;
  3216  0011CE  0100               	movlb	0	; () banked
  3217  0011D0  51FD               	movf	_sel& (0+255),w,b
  3218  0011D2  0D0B               	mullw	11
  3219  0011D4  0E01               	movlw	1
  3220  0011D6  24F3               	addwf	prodl,w,c
  3221  0011D8  0100               	movlb	0	; () banked
  3222  0011DA  6FB3               	movwf	Loading@addr& (0+255),b
  3223  0011DC  0E00               	movlw	0
  3224  0011DE  20F4               	addwfc	prodh,w,c
  3225  0011E0  0100               	movlb	0	; () banked
  3226  0011E2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;sort.c: 90: unsigned char byte1 = 0b01111111;
  3230  0011E4  0E7F               	movlw	127
  3231  0011E6  0100               	movlb	0	; () banked
  3232  0011E8  6FB5               	movwf	Loading@byte1& (0+255),b
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;sort.c: 91: EEPROM_write(addr, byte1);
  3236  0011EA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3237  0011EE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3238  0011F2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3239  0011F6  EC30  F020         	call	_EEPROM_write	;wreg free
  3240                           
  3241                           ;sort.c: 94: LATBbits.LATB2 = 0;
  3242  0011FA  948A               	bcf	3978,2,c	;volatile
  3243                           
  3244                           ;sort.c: 96: for(int i=0; i<46; i++){
  3245  0011FC  0E00               	movlw	0
  3246  0011FE  0100               	movlb	0	; () banked
  3247  001200  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3248  001202  0E00               	movlw	0
  3249  001204  6FC2               	movwf	Loading@i& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252  001206  0100               	movlb	0	; () banked
  3253  001208  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3254  00120A  D008               	goto	l7450
  3255  00120C  0100               	movlb	0	; () banked
  3256  00120E  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3257  001210  E126               	bnz	l774
  3258  001212  0E2E               	movlw	46
  3259  001214  0100               	movlb	0	; () banked
  3260  001216  5DC2               	subwf	Loading@i& (0+255),w,b
  3261  001218  B0D8               	btfsc	status,0,c
  3262  00121A  D021               	goto	l774
  3263  00121C                     l7450:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;sort.c: 97: LATBbits.LATB2 = !LATBbits.LATB2;
  3267  00121C  B48A               	btfsc	3978,2,c	;volatile
  3268  00121E  D004               	goto	u5870
  3269  001220  0100               	movlb	0	; () banked
  3270  001222  6BB1               	clrf	??_Loading& (0+255),b
  3271  001224  2BB1               	incf	??_Loading& (0+255),f,b
  3272  001226  D002               	goto	u5888
  3273  001228                     u5870:
  3274  001228  0100               	movlb	0	; () banked
  3275  00122A  6BB1               	clrf	??_Loading& (0+255),b
  3276  00122C                     u5888:
  3277  00122C  0100               	movlb	0	; () banked
  3278  00122E  47B1               	rlncf	??_Loading& (0+255),f,b
  3279  001230  47B1               	rlncf	??_Loading& (0+255),f,b
  3280  001232  508A               	movf	3978,w,c	;volatile
  3281  001234  0100               	movlb	0	; () banked
  3282  001236  19B1               	xorwf	??_Loading& (0+255),w,b
  3283  001238  0BFB               	andlw	-5
  3284  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3285  00123C  6E8A               	movwf	3978,c	;volatile
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;sort.c: 98: delay_ms(45-i);
  3289  00123E  0100               	movlb	0	; () banked
  3290  001240  51C2               	movf	Loading@i& (0+255),w,b
  3291  001242  0800               	sublw	0
  3292  001244  0F2D               	addlw	45
  3293  001246  EC1E  F02A         	call	_delay_ms
  3294  00124A  0100               	movlb	0	; () banked
  3295  00124C  4BC2               	infsnz	Loading@i& (0+255),f,b
  3296  00124E  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3297                           
  3298                           ; BSR set to: 0
  3299  001250  0100               	movlb	0	; () banked
  3300  001252  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3301  001254  D7E3               	goto	l7450
  3302  001256  0100               	movlb	0	; () banked
  3303  001258  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3304  00125A  E101               	bnz	u5890
  3305  00125C  D7DA               	goto	L1
  3306  00125E                     u5890:
  3307  00125E                     l774:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 99: }
  3311                           ;sort.c: 100: LATBbits.LATB2 = 1;
  3312  00125E  848A               	bsf	3978,2,c	;volatile
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;sort.c: 103: initServos();
  3316  001260  ECB2  F024         	call	_initServos	;wreg free
  3317                           
  3318                           ;sort.c: 104: }
  3319  001264  0012               	return	
  3320  001266                     l7460:
  3321                           
  3322                           ;sort.c: 105: else{
  3323                           ;sort.c: 108: if(!f_loadingNewCan){
  3324  001266  0100               	movlb	0	; () banked
  3325  001268  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3326  00126A  0100               	movlb	0	; () banked
  3327  00126C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3328  00126E  A4D8               	btfss	status,2,c
  3329  001270  D018               	goto	l7476
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;sort.c: 110: getIR();
  3333  001272  EC2A  F025         	call	_getIR	;wreg free
  3334                           
  3335                           ;sort.c: 112: if(!f_loadingNewCan){
  3336  001276  0100               	movlb	0	; () banked
  3337  001278  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3338  00127A  0100               	movlb	0	; () banked
  3339  00127C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3340  00127E  B4D8               	btfsc	status,2,c
  3341  001280  0012               	return	
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;sort.c: 116: else{
  3345                           ;sort.c: 117: count_total++;
  3346                           
  3347                           ; BSR set to: 0
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;sort.c: 114: }
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;sort.c: 113: return;
  3354  001282  0100               	movlb	0	; () banked
  3355  001284  4BFE               	infsnz	_count_total& (0+255),f,b
  3356  001286  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;sort.c: 118: if(count_total == 12){
  3360  001288  0E0C               	movlw	12
  3361  00128A  0100               	movlb	0	; () banked
  3362  00128C  19FE               	xorwf	_count_total& (0+255),w,b
  3363  00128E  0100               	movlb	0	; () banked
  3364  001290  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3365  001292  A4D8               	btfss	status,2,c
  3366  001294  0012               	return	
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;sort.c: 119: f_lastCan = 1;
  3370  001296  0E00               	movlw	0
  3371  001298  0100               	movlb	0	; () banked
  3372  00129A  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  3373  00129C  0E01               	movlw	1
  3374  00129E  6FF0               	movwf	_f_lastCan& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;sort.c: 120: }
  3378                           ;sort.c: 121: }
  3379                           ;sort.c: 122: }
  3380                           
  3381                           ; BSR set to: 0
  3382  0012A0  0012               	return	
  3383  0012A2                     l7476:
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;sort.c: 125: else if(f_ID_receive){
  3387  0012A2  0101               	movlb	1	; () banked
  3388  0012A4  512F               	movf	_f_ID_receive& (0+255),w,b
  3389  0012A6  0101               	movlb	1	; () banked
  3390  0012A8  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3391  0012AA  B4D8               	btfsc	status,2,c
  3392  0012AC  0012               	return	
  3393                           
  3394                           ; BSR set to: 1
  3395                           ;sort.c: 126: f_most_recent_sort_time = 1;
  3396  0012AE  0E00               	movlw	0
  3397  0012B0  0101               	movlb	1	; () banked
  3398  0012B2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3399  0012B4  0E01               	movlw	1
  3400  0012B6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3401                           
  3402                           ;sort.c: 127: f_loadingNewCan = 0;
  3403  0012B8  0E00               	movlw	0
  3404  0012BA  0100               	movlb	0	; () banked
  3405  0012BC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3406  0012BE  0E00               	movlw	0
  3407  0012C0  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3411  0012C2  0E1F               	movlw	31
  3412  0012C4  0100               	movlb	0	; () banked
  3413  0012C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3414  0012C8  0E71               	movlw	113
  3415  0012CA  0100               	movlb	0	; () banked
  3416  0012CC  6FB1               	movwf	??_Loading& (0+255),b
  3417  0012CE  0E1E               	movlw	30
  3418  0012D0                     u9127:
  3419  0012D0  2EE8               	decfsz	wreg,f,c
  3420  0012D2  D7FE               	bra	u9127
  3421  0012D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3422  0012D6  D7FC               	bra	u9127
  3423  0012D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3424  0012DA  D7FA               	bra	u9127
  3425  0012DC  F000               	nop	
  3426                           
  3427                           ;sort.c: 129: LATBbits.LATB2 = 0;
  3428  0012DE  948A               	bcf	3978,2,c	;volatile
  3429                           
  3430                           ;sort.c: 133: f_arm_position = 1;
  3431  0012E0  0E00               	movlw	0
  3432  0012E2  0100               	movlb	0	; () banked
  3433  0012E4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3434  0012E6  0E01               	movlw	1
  3435  0012E8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 134: getMAG();
  3439  0012EA  EC8D  F028         	call	_getMAG	;wreg free
  3440                           
  3441                           ;sort.c: 135: sensor_outputs[0] = MAG_signal;
  3442  0012EE  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3443  0012F2  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3444                           
  3445                           ;sort.c: 137: if(sensor_outputs[0]){
  3446  0012F6  0100               	movlb	0	; () banked
  3447  0012F8  51E2               	movf	_sensor_outputs& (0+255),w,b
  3448  0012FA  0100               	movlb	0	; () banked
  3449  0012FC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3450  0012FE  B4D8               	btfsc	status,2,c
  3451  001300  D027               	goto	l7504
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;sort.c: 138: for(int i = 0; i<25; i++){
  3455  001302  0E00               	movlw	0
  3456  001304  0100               	movlb	0	; () banked
  3457  001306  6FB7               	movwf	(Loading@i_1156+1)& (0+255),b
  3458  001308  0E00               	movlw	0
  3459  00130A  6FB6               	movwf	Loading@i_1156& (0+255),b
  3460  00130C                     l7494:
  3461                           
  3462                           ; BSR set to: 0
  3463  00130C  0100               	movlb	0	; () banked
  3464  00130E  BFB7               	btfsc	(Loading@i_1156+1)& (0+255),7,b
  3465  001310  D008               	goto	l784
  3466  001312  0100               	movlb	0	; () banked
  3467  001314  51B7               	movf	(Loading@i_1156+1)& (0+255),w,b
  3468  001316  E143               	bnz	l7516
  3469  001318  0E19               	movlw	25
  3470  00131A  0100               	movlb	0	; () banked
  3471  00131C  5DB6               	subwf	Loading@i_1156& (0+255),w,b
  3472  00131E  B0D8               	btfsc	status,0,c
  3473  001320  D03E               	goto	l7516
  3474  001322                     l784:
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;sort.c: 139: LATAbits.LATA4 = 1;
  3478  001322  8889               	bsf	3977,4,c	;volatile
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;sort.c: 140: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3482  001324  0E4E               	movlw	78
  3483  001326  0100               	movlb	0	; () banked
  3484  001328  6FB1               	movwf	??_Loading& (0+255),b
  3485  00132A  0EEB               	movlw	235
  3486  00132C                     u9137:
  3487  00132C  2EE8               	decfsz	wreg,f,c
  3488  00132E  D7FE               	bra	u9137
  3489  001330  2FB1               	decfsz	??_Loading& (0+255),f,b
  3490  001332  D7FC               	bra	u9137
  3491                           
  3492                           ;sort.c: 141: LATAbits.LATA4 = 0;
  3493  001334  9889               	bcf	3977,4,c	;volatile
  3494                           
  3495                           ;sort.c: 142: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3496  001336  0E1A               	movlw	26
  3497  001338  0100               	movlb	0	; () banked
  3498  00133A  6FB1               	movwf	??_Loading& (0+255),b
  3499  00133C  0EF8               	movlw	248
  3500  00133E                     u9147:
  3501  00133E  2EE8               	decfsz	wreg,f,c
  3502  001340  D7FE               	bra	u9147
  3503  001342  2FB1               	decfsz	??_Loading& (0+255),f,b
  3504  001344  D7FC               	bra	u9147
  3505  001346  F000               	nop	
  3506  001348  0100               	movlb	0	; () banked
  3507  00134A  4BB6               	infsnz	Loading@i_1156& (0+255),f,b
  3508  00134C  2BB7               	incf	(Loading@i_1156+1)& (0+255),f,b
  3509  00134E  D7DE               	goto	l7494
  3510  001350                     l7504:
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;sort.c: 145: else{
  3514                           ;sort.c: 146: for(int i = 0; i<25; i++){
  3515  001350  0E00               	movlw	0
  3516  001352  0100               	movlb	0	; () banked
  3517  001354  6FB9               	movwf	(Loading@i_1165+1)& (0+255),b
  3518  001356  0E00               	movlw	0
  3519  001358  6FB8               	movwf	Loading@i_1165& (0+255),b
  3520  00135A                     l7506:
  3521                           
  3522                           ; BSR set to: 0
  3523  00135A  0100               	movlb	0	; () banked
  3524  00135C  BFB9               	btfsc	(Loading@i_1165+1)& (0+255),7,b
  3525  00135E  D008               	goto	l787
  3526  001360  0100               	movlb	0	; () banked
  3527  001362  51B9               	movf	(Loading@i_1165+1)& (0+255),w,b
  3528  001364  E11C               	bnz	l7516
  3529  001366  0E19               	movlw	25
  3530  001368  0100               	movlb	0	; () banked
  3531  00136A  5DB8               	subwf	Loading@i_1165& (0+255),w,b
  3532  00136C  B0D8               	btfsc	status,0,c
  3533  00136E  D017               	goto	l7516
  3534  001370                     l787:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;sort.c: 147: LATAbits.LATA4 = 1;
  3538  001370  8889               	bsf	3977,4,c	;volatile
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;sort.c: 148: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3542  001372  0E3D               	movlw	61
  3543  001374  0100               	movlb	0	; () banked
  3544  001376  6FB1               	movwf	??_Loading& (0+255),b
  3545  001378  0E41               	movlw	65
  3546  00137A                     u9157:
  3547  00137A  2EE8               	decfsz	wreg,f,c
  3548  00137C  D7FE               	bra	u9157
  3549  00137E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3550  001380  D7FC               	bra	u9157
  3551                           
  3552                           ;sort.c: 149: LATAbits.LATA4 = 0;
  3553  001382  9889               	bcf	3977,4,c	;volatile
  3554                           
  3555                           ;sort.c: 150: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3556  001384  0E2C               	movlw	44
  3557  001386  0100               	movlb	0	; () banked
  3558  001388  6FB1               	movwf	??_Loading& (0+255),b
  3559  00138A  0EA1               	movlw	161
  3560  00138C                     u9167:
  3561  00138C  2EE8               	decfsz	wreg,f,c
  3562  00138E  D7FE               	bra	u9167
  3563  001390  2FB1               	decfsz	??_Loading& (0+255),f,b
  3564  001392  D7FC               	bra	u9167
  3565  001394  D000               	nop2	
  3566  001396  0100               	movlb	0	; () banked
  3567  001398  4BB8               	infsnz	Loading@i_1165& (0+255),f,b
  3568  00139A  2BB9               	incf	(Loading@i_1165+1)& (0+255),f,b
  3569  00139C  D7DE               	goto	l7506
  3570  00139E                     l7516:
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;sort.c: 151: }
  3574                           ;sort.c: 152: }
  3575                           ;sort.c: 154: _delay((unsigned long)((350)*(32000000/4000.0)));
  3576  00139E  0E0F               	movlw	15
  3577  0013A0  0100               	movlb	0	; () banked
  3578  0013A2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3579  0013A4  0E35               	movlw	53
  3580  0013A6  0100               	movlb	0	; () banked
  3581  0013A8  6FB1               	movwf	??_Loading& (0+255),b
  3582  0013AA  0E51               	movlw	81
  3583  0013AC                     u9177:
  3584  0013AC  2EE8               	decfsz	wreg,f,c
  3585  0013AE  D7FE               	bra	u9177
  3586  0013B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3587  0013B2  D7FC               	bra	u9177
  3588  0013B4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3589  0013B6  D7FA               	bra	u9177
  3590                           
  3591                           ;sort.c: 156: readIR();
  3592  0013B8  EC72  F027         	call	_readIR	;wreg free
  3593                           
  3594                           ;sort.c: 157: if(IR_signal==1){
  3595  0013BC  0100               	movlb	0	; () banked
  3596  0013BE  05E6               	decf	_IR_signal& (0+255),w,b
  3597  0013C0  0100               	movlb	0	; () banked
  3598  0013C2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3599  0013C4  A4D8               	btfss	status,2,c
  3600  0013C6  D19A               	goto	l7634
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;sort.c: 158: _delay((unsigned long)((100)*(32000000/4000.0)));
  3604  0013C8  0E05               	movlw	5
  3605  0013CA  0100               	movlb	0	; () banked
  3606  0013CC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3607  0013CE  0E0F               	movlw	15
  3608  0013D0  0100               	movlb	0	; () banked
  3609  0013D2  6FB1               	movwf	??_Loading& (0+255),b
  3610  0013D4  0EF1               	movlw	241
  3611  0013D6                     u9187:
  3612  0013D6  2EE8               	decfsz	wreg,f,c
  3613  0013D8  D7FE               	bra	u9187
  3614  0013DA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3615  0013DC  D7FC               	bra	u9187
  3616  0013DE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3617  0013E0  D7FA               	bra	u9187
  3618                           
  3619                           ;sort.c: 159: readIR();
  3620  0013E2  EC72  F027         	call	_readIR	;wreg free
  3621                           
  3622                           ;sort.c: 160: if(IR_signal==1){
  3623  0013E6  0100               	movlb	0	; () banked
  3624  0013E8  05E6               	decf	_IR_signal& (0+255),w,b
  3625  0013EA  0100               	movlb	0	; () banked
  3626  0013EC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3627  0013EE  A4D8               	btfss	status,2,c
  3628  0013F0  D054               	goto	l7554
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;sort.c: 161: if(sensor_outputs[0]){
  3632  0013F2  0100               	movlb	0	; () banked
  3633  0013F4  51E2               	movf	_sensor_outputs& (0+255),w,b
  3634  0013F6  0100               	movlb	0	; () banked
  3635  0013F8  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3636  0013FA  B4D8               	btfsc	status,2,c
  3637  0013FC  D027               	goto	l7542
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;sort.c: 162: for(int i = 0; i<25; i++){
  3641  0013FE  0E00               	movlw	0
  3642  001400  0100               	movlb	0	; () banked
  3643  001402  6FBB               	movwf	(Loading@i_1167+1)& (0+255),b
  3644  001404  0E00               	movlw	0
  3645  001406  6FBA               	movwf	Loading@i_1167& (0+255),b
  3646  001408                     l7532:
  3647                           
  3648                           ; BSR set to: 0
  3649  001408  0100               	movlb	0	; () banked
  3650  00140A  BFBB               	btfsc	(Loading@i_1167+1)& (0+255),7,b
  3651  00140C  D008               	goto	l792
  3652  00140E  0100               	movlb	0	; () banked
  3653  001410  51BB               	movf	(Loading@i_1167+1)& (0+255),w,b
  3654  001412  E143               	bnz	l7554
  3655  001414  0E19               	movlw	25
  3656  001416  0100               	movlb	0	; () banked
  3657  001418  5DBA               	subwf	Loading@i_1167& (0+255),w,b
  3658  00141A  B0D8               	btfsc	status,0,c
  3659  00141C  D03E               	goto	l7554
  3660  00141E                     l792:
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;sort.c: 163: LATAbits.LATA4 = 1;
  3664  00141E  8889               	bsf	3977,4,c	;volatile
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;sort.c: 164: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3668  001420  0E4E               	movlw	78
  3669  001422  0100               	movlb	0	; () banked
  3670  001424  6FB1               	movwf	??_Loading& (0+255),b
  3671  001426  0EEB               	movlw	235
  3672  001428                     u9197:
  3673  001428  2EE8               	decfsz	wreg,f,c
  3674  00142A  D7FE               	bra	u9197
  3675  00142C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3676  00142E  D7FC               	bra	u9197
  3677                           
  3678                           ;sort.c: 165: LATAbits.LATA4 = 0;
  3679  001430  9889               	bcf	3977,4,c	;volatile
  3680                           
  3681                           ;sort.c: 166: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3682  001432  0E1A               	movlw	26
  3683  001434  0100               	movlb	0	; () banked
  3684  001436  6FB1               	movwf	??_Loading& (0+255),b
  3685  001438  0EF8               	movlw	248
  3686  00143A                     u9207:
  3687  00143A  2EE8               	decfsz	wreg,f,c
  3688  00143C  D7FE               	bra	u9207
  3689  00143E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3690  001440  D7FC               	bra	u9207
  3691  001442  F000               	nop	
  3692  001444  0100               	movlb	0	; () banked
  3693  001446  4BBA               	infsnz	Loading@i_1167& (0+255),f,b
  3694  001448  2BBB               	incf	(Loading@i_1167+1)& (0+255),f,b
  3695  00144A  D7DE               	goto	l7532
  3696  00144C                     l7542:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;sort.c: 169: else{
  3700                           ;sort.c: 170: for(int i = 0; i<25; i++){
  3701  00144C  0E00               	movlw	0
  3702  00144E  0100               	movlb	0	; () banked
  3703  001450  6FBD               	movwf	(Loading@i_1168+1)& (0+255),b
  3704  001452  0E00               	movlw	0
  3705  001454  6FBC               	movwf	Loading@i_1168& (0+255),b
  3706  001456                     l7544:
  3707                           
  3708                           ; BSR set to: 0
  3709  001456  0100               	movlb	0	; () banked
  3710  001458  BFBD               	btfsc	(Loading@i_1168+1)& (0+255),7,b
  3711  00145A  D008               	goto	l795
  3712  00145C  0100               	movlb	0	; () banked
  3713  00145E  51BD               	movf	(Loading@i_1168+1)& (0+255),w,b
  3714  001460  E11C               	bnz	l7554
  3715  001462  0E19               	movlw	25
  3716  001464  0100               	movlb	0	; () banked
  3717  001466  5DBC               	subwf	Loading@i_1168& (0+255),w,b
  3718  001468  B0D8               	btfsc	status,0,c
  3719  00146A  D017               	goto	l7554
  3720  00146C                     l795:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;sort.c: 171: LATAbits.LATA4 = 1;
  3724  00146C  8889               	bsf	3977,4,c	;volatile
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;sort.c: 172: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3728  00146E  0E3D               	movlw	61
  3729  001470  0100               	movlb	0	; () banked
  3730  001472  6FB1               	movwf	??_Loading& (0+255),b
  3731  001474  0E41               	movlw	65
  3732  001476                     u9217:
  3733  001476  2EE8               	decfsz	wreg,f,c
  3734  001478  D7FE               	bra	u9217
  3735  00147A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3736  00147C  D7FC               	bra	u9217
  3737                           
  3738                           ;sort.c: 173: LATAbits.LATA4 = 0;
  3739  00147E  9889               	bcf	3977,4,c	;volatile
  3740                           
  3741                           ;sort.c: 174: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3742  001480  0E2C               	movlw	44
  3743  001482  0100               	movlb	0	; () banked
  3744  001484  6FB1               	movwf	??_Loading& (0+255),b
  3745  001486  0EA1               	movlw	161
  3746  001488                     u9227:
  3747  001488  2EE8               	decfsz	wreg,f,c
  3748  00148A  D7FE               	bra	u9227
  3749  00148C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3750  00148E  D7FC               	bra	u9227
  3751  001490  D000               	nop2	
  3752  001492  0100               	movlb	0	; () banked
  3753  001494  4BBC               	infsnz	Loading@i_1168& (0+255),f,b
  3754  001496  2BBD               	incf	(Loading@i_1168+1)& (0+255),f,b
  3755  001498  D7DE               	goto	l7544
  3756  00149A                     l7554:
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;sort.c: 175: }
  3760                           ;sort.c: 176: }
  3761                           ;sort.c: 177: }
  3762                           ;sort.c: 179: _delay((unsigned long)((350)*(32000000/4000.0)));
  3763  00149A  0E0F               	movlw	15
  3764  00149C  0100               	movlb	0	; () banked
  3765  00149E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3766  0014A0  0E35               	movlw	53
  3767  0014A2  0100               	movlb	0	; () banked
  3768  0014A4  6FB1               	movwf	??_Loading& (0+255),b
  3769  0014A6  0E51               	movlw	81
  3770  0014A8                     u9237:
  3771  0014A8  2EE8               	decfsz	wreg,f,c
  3772  0014AA  D7FE               	bra	u9237
  3773  0014AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3774  0014AE  D7FC               	bra	u9237
  3775  0014B0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3776  0014B2  D7FA               	bra	u9237
  3777                           
  3778                           ;sort.c: 181: int j = 1;
  3779  0014B4  0E00               	movlw	0
  3780  0014B6  0100               	movlb	0	; () banked
  3781  0014B8  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3782  0014BA  0E01               	movlw	1
  3783  0014BC  6FC0               	movwf	Loading@j& (0+255),b
  3784                           
  3785                           ;sort.c: 182: while(IR_signal == 1){
  3786  0014BE  D117               	goto	l7632
  3787  0014C0                     l7558:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;sort.c: 183: readIR();
  3791  0014C0  EC72  F027         	call	_readIR	;wreg free
  3792                           
  3793                           ;sort.c: 184: if(j == 10){
  3794  0014C4  0E0A               	movlw	10
  3795  0014C6  0100               	movlb	0	; () banked
  3796  0014C8  19C0               	xorwf	Loading@j& (0+255),w,b
  3797  0014CA  0100               	movlb	0	; () banked
  3798  0014CC  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3799  0014CE  A4D8               	btfss	status,2,c
  3800  0014D0  D016               	goto	l7566
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;sort.c: 185: LATBbits.LATB2 = !LATBbits.LATB2;
  3804  0014D2  B48A               	btfsc	3978,2,c	;volatile
  3805  0014D4  D004               	goto	u6070
  3806  0014D6  0100               	movlb	0	; () banked
  3807  0014D8  6BB1               	clrf	??_Loading& (0+255),b
  3808  0014DA  2BB1               	incf	??_Loading& (0+255),f,b
  3809  0014DC  D002               	goto	u6088
  3810  0014DE                     u6070:
  3811  0014DE  0100               	movlb	0	; () banked
  3812  0014E0  6BB1               	clrf	??_Loading& (0+255),b
  3813  0014E2                     u6088:
  3814  0014E2  0100               	movlb	0	; () banked
  3815  0014E4  47B1               	rlncf	??_Loading& (0+255),f,b
  3816  0014E6  47B1               	rlncf	??_Loading& (0+255),f,b
  3817  0014E8  508A               	movf	3978,w,c	;volatile
  3818  0014EA  0100               	movlb	0	; () banked
  3819  0014EC  19B1               	xorwf	??_Loading& (0+255),w,b
  3820  0014EE  0BFB               	andlw	-5
  3821  0014F0  19B1               	xorwf	??_Loading& (0+255),w,b
  3822  0014F2  6E8A               	movwf	3978,c	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;sort.c: 186: j = 0;
  3826  0014F4  0E00               	movlw	0
  3827  0014F6  0100               	movlb	0	; () banked
  3828  0014F8  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3829  0014FA  0E00               	movlw	0
  3830  0014FC  6FC0               	movwf	Loading@j& (0+255),b
  3831  0014FE                     l7566:
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;sort.c: 187: }
  3835                           ;sort.c: 188: if(IR_signal==1){
  3836  0014FE  0100               	movlb	0	; () banked
  3837  001500  05E6               	decf	_IR_signal& (0+255),w,b
  3838  001502  0100               	movlb	0	; () banked
  3839  001504  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3840  001506  A4D8               	btfss	status,2,c
  3841  001508  D0D6               	goto	l7620
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;sort.c: 189: _delay((unsigned long)((350)*(32000000/4000.0)));
  3845  00150A  0E0F               	movlw	15
  3846  00150C  0100               	movlb	0	; () banked
  3847  00150E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3848  001510  0E35               	movlw	53
  3849  001512  0100               	movlb	0	; () banked
  3850  001514  6FB1               	movwf	??_Loading& (0+255),b
  3851  001516  0E51               	movlw	81
  3852  001518                     u9247:
  3853  001518  2EE8               	decfsz	wreg,f,c
  3854  00151A  D7FE               	bra	u9247
  3855  00151C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3856  00151E  D7FC               	bra	u9247
  3857  001520  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3858  001522  D7FA               	bra	u9247
  3859                           
  3860                           ;sort.c: 190: readIR();
  3861  001524  EC72  F027         	call	_readIR	;wreg free
  3862                           
  3863                           ;sort.c: 191: if(IR_signal==1){
  3864  001528  0100               	movlb	0	; () banked
  3865  00152A  05E6               	decf	_IR_signal& (0+255),w,b
  3866  00152C  0100               	movlb	0	; () banked
  3867  00152E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3868  001530  A4D8               	btfss	status,2,c
  3869  001532  D0BD               	goto	l801
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;sort.c: 192: if(sensor_outputs[0]){
  3873  001534  0100               	movlb	0	; () banked
  3874  001536  51E2               	movf	_sensor_outputs& (0+255),w,b
  3875  001538  0100               	movlb	0	; () banked
  3876  00153A  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3877  00153C  B4D8               	btfsc	status,2,c
  3878  00153E  D011               	goto	l7582
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;sort.c: 193: LATAbits.LATA4 = 1;
  3882  001540  8889               	bsf	3977,4,c	;volatile
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;sort.c: 194: _delay((unsigned long)((250)*(32000000/4000.0)));
  3886  001542  0E0B               	movlw	11
  3887  001544  0100               	movlb	0	; () banked
  3888  001546  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3889  001548  0E26               	movlw	38
  3890  00154A  0100               	movlb	0	; () banked
  3891  00154C  6FB1               	movwf	??_Loading& (0+255),b
  3892  00154E  0E5D               	movlw	93
  3893  001550                     u9257:
  3894  001550  2EE8               	decfsz	wreg,f,c
  3895  001552  D7FE               	bra	u9257
  3896  001554  2FB1               	decfsz	??_Loading& (0+255),f,b
  3897  001556  D7FC               	bra	u9257
  3898  001558  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3899  00155A  D7FA               	bra	u9257
  3900  00155C  D000               	nop2	
  3901                           
  3902                           ;sort.c: 195: LATAbits.LATA4 = 0;
  3903  00155E  9889               	bcf	3977,4,c	;volatile
  3904                           
  3905                           ;sort.c: 196: }
  3906  001560  D0A6               	goto	l801
  3907  001562                     l7582:
  3908                           
  3909                           ;sort.c: 197: else{
  3910                           ;sort.c: 198: for(int i = 0; i<25; i++){
  3911  001562  0E00               	movlw	0
  3912  001564  0100               	movlb	0	; () banked
  3913  001566  6FBF               	movwf	(Loading@i_1170+1)& (0+255),b
  3914  001568  0E00               	movlw	0
  3915  00156A  6FBE               	movwf	Loading@i_1170& (0+255),b
  3916                           
  3917                           ; BSR set to: 0
  3918  00156C  0100               	movlb	0	; () banked
  3919  00156E  BFBF               	btfsc	(Loading@i_1170+1)& (0+255),7,b
  3920  001570  D079               	goto	l7612
  3921  001572  0100               	movlb	0	; () banked
  3922  001574  51BF               	movf	(Loading@i_1170+1)& (0+255),w,b
  3923  001576  E106               	bnz	u6120
  3924  001578  0E19               	movlw	25
  3925  00157A  0100               	movlb	0	; () banked
  3926  00157C  5DBE               	subwf	Loading@i_1170& (0+255),w,b
  3927  00157E  B0D8               	btfsc	status,0,c
  3928  001580  D096               	goto	l801
  3929  001582  D070               	goto	l7612
  3930  001584                     u6120:
  3931                           
  3932                           ; BSR set to: 0
  3933  001584  D094               	goto	l801
  3934  001586                     l807:
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;sort.c: 201: LATAbits.LATA4 = 1;
  3938  001586  8889               	bsf	3977,4,c	;volatile
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;sort.c: 202: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3942  001588  0E4E               	movlw	78
  3943  00158A  0100               	movlb	0	; () banked
  3944  00158C  6FB1               	movwf	??_Loading& (0+255),b
  3945  00158E  0EEB               	movlw	235
  3946  001590                     u9267:
  3947  001590  2EE8               	decfsz	wreg,f,c
  3948  001592  D7FE               	bra	u9267
  3949  001594  2FB1               	decfsz	??_Loading& (0+255),f,b
  3950  001596  D7FC               	bra	u9267
  3951                           
  3952                           ;sort.c: 203: LATAbits.LATA4 = 0;
  3953  001598  9889               	bcf	3977,4,c	;volatile
  3954                           
  3955                           ;sort.c: 204: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3956  00159A  0E1A               	movlw	26
  3957  00159C  0100               	movlb	0	; () banked
  3958  00159E  6FB1               	movwf	??_Loading& (0+255),b
  3959  0015A0  0EF8               	movlw	248
  3960  0015A2                     u9277:
  3961  0015A2  2EE8               	decfsz	wreg,f,c
  3962  0015A4  D7FE               	bra	u9277
  3963  0015A6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3964  0015A8  D7FC               	bra	u9277
  3965  0015AA  D05A               	goto	L5
  3966  0015AC                     l809:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;sort.c: 207: LATAbits.LATA4 = 1;
  3970  0015AC  8889               	bsf	3977,4,c	;volatile
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;sort.c: 208: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  3974  0015AE  0E54               	movlw	84
  3975  0015B0  0100               	movlb	0	; () banked
  3976  0015B2  6FB1               	movwf	??_Loading& (0+255),b
  3977  0015B4  0E1C               	movlw	28
  3978  0015B6                     u9287:
  3979  0015B6  2EE8               	decfsz	wreg,f,c
  3980  0015B8  D7FE               	bra	u9287
  3981  0015BA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3982  0015BC  D7FC               	bra	u9287
  3983  0015BE  F000               	nop	
  3984                           
  3985                           ;sort.c: 209: LATAbits.LATA4 = 0;
  3986  0015C0  9889               	bcf	3977,4,c	;volatile
  3987                           
  3988                           ;sort.c: 210: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  3989  0015C2  0E15               	movlw	21
  3990  0015C4  0100               	movlb	0	; () banked
  3991  0015C6  6FB1               	movwf	??_Loading& (0+255),b
  3992  0015C8  0EC6               	movlw	198
  3993  0015CA                     u9297:
  3994  0015CA  2EE8               	decfsz	wreg,f,c
  3995  0015CC  D7FE               	bra	u9297
  3996  0015CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3997  0015D0  D7FC               	bra	u9297
  3998  0015D2  D046               	goto	L5
  3999  0015D4                     l810:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;sort.c: 213: LATAbits.LATA4 = 1;
  4003  0015D4  8889               	bsf	3977,4,c	;volatile
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;sort.c: 214: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4007  0015D6  0E59               	movlw	89
  4008  0015D8  0100               	movlb	0	; () banked
  4009  0015DA  6FB1               	movwf	??_Loading& (0+255),b
  4010  0015DC  0E4E               	movlw	78
  4011  0015DE                     u9307:
  4012  0015DE  2EE8               	decfsz	wreg,f,c
  4013  0015E0  D7FE               	bra	u9307
  4014  0015E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4015  0015E4  D7FC               	bra	u9307
  4016  0015E6  F000               	nop	
  4017                           
  4018                           ;sort.c: 215: LATAbits.LATA4 = 0;
  4019  0015E8  9889               	bcf	3977,4,c	;volatile
  4020                           
  4021                           ;sort.c: 216: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4022  0015EA  0E10               	movlw	16
  4023  0015EC  0100               	movlb	0	; () banked
  4024  0015EE  6FB1               	movwf	??_Loading& (0+255),b
  4025  0015F0  0E94               	movlw	148
  4026  0015F2                     u9317:
  4027  0015F2  2EE8               	decfsz	wreg,f,c
  4028  0015F4  D7FE               	bra	u9317
  4029  0015F6  2FB1               	decfsz	??_Loading& (0+255),f,b
  4030  0015F8  D7FC               	bra	u9317
  4031  0015FA  D032               	goto	L5
  4032  0015FC                     l811:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 219: LATAbits.LATA4 = 1;
  4036  0015FC  8889               	bsf	3977,4,c	;volatile
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;sort.c: 220: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4040  0015FE  0E5E               	movlw	94
  4041  001600  0100               	movlb	0	; () banked
  4042  001602  6FB1               	movwf	??_Loading& (0+255),b
  4043  001604  0E80               	movlw	128
  4044  001606                     u9327:
  4045  001606  2EE8               	decfsz	wreg,f,c
  4046  001608  D7FE               	bra	u9327
  4047  00160A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4048  00160C  D7FC               	bra	u9327
  4049  00160E  F000               	nop	
  4050                           
  4051                           ;sort.c: 221: LATAbits.LATA4 = 0;
  4052  001610  9889               	bcf	3977,4,c	;volatile
  4053                           
  4054                           ;sort.c: 222: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4055  001612  0E0B               	movlw	11
  4056  001614  0100               	movlb	0	; () banked
  4057  001616  6FB1               	movwf	??_Loading& (0+255),b
  4058  001618  0E62               	movlw	98
  4059  00161A                     u9337:
  4060  00161A  2EE8               	decfsz	wreg,f,c
  4061  00161C  D7FE               	bra	u9337
  4062  00161E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4063  001620  D7FC               	bra	u9337
  4064  001622  D01E               	goto	L5
  4065  001624                     l812:
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;sort.c: 225: LATAbits.LATA4 = 1;
  4069  001624  8889               	bsf	3977,4,c	;volatile
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;sort.c: 226: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4073  001626  0E63               	movlw	99
  4074  001628  0100               	movlb	0	; () banked
  4075  00162A  6FB1               	movwf	??_Loading& (0+255),b
  4076  00162C  0EB2               	movlw	178
  4077  00162E                     u9347:
  4078  00162E  2EE8               	decfsz	wreg,f,c
  4079  001630  D7FE               	bra	u9347
  4080  001632  2FB1               	decfsz	??_Loading& (0+255),f,b
  4081  001634  D7FC               	bra	u9347
  4082  001636  F000               	nop	
  4083                           
  4084                           ;sort.c: 227: LATAbits.LATA4 = 0;
  4085  001638  9889               	bcf	3977,4,c	;volatile
  4086                           
  4087                           ;sort.c: 228: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4088  00163A  0E34               	movlw	52
  4089  00163C  0100               	movlb	0	; () banked
  4090  00163E  6FB1               	movwf	??_Loading& (0+255),b
  4091  001640  0EF1               	movlw	241
  4092  001642                     u9357:
  4093  001642  2EE8               	decfsz	wreg,f,c
  4094  001644  D7FE               	bra	u9357
  4095  001646  2FB1               	decfsz	??_Loading& (0+255),f,b
  4096  001648  D7FC               	bra	u9357
  4097  00164A  D000               	nop2	
  4098                           
  4099                           ;sort.c: 229: break;
  4100  00164C  D026               	goto	l7614
  4101  00164E                     l813:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;sort.c: 231: LATAbits.LATA4 = 1;
  4105  00164E  8889               	bsf	3977,4,c	;volatile
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;sort.c: 232: _delay((unsigned long)((10)*(32000000/4000.0)));
  4109  001650  0E68               	movlw	104
  4110  001652  0100               	movlb	0	; () banked
  4111  001654  6FB1               	movwf	??_Loading& (0+255),b
  4112  001656  0EE4               	movlw	228
  4113  001658                     u9367:
  4114  001658  2EE8               	decfsz	wreg,f,c
  4115  00165A  D7FE               	bra	u9367
  4116  00165C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4117  00165E  D7FC               	bra	u9367
  4118  001660                     L5:
  4119  001660  F000               	nop	
  4120                           
  4121                           ;sort.c: 234: }
  4122                           
  4123                           ;sort.c: 233: break;
  4124  001662  D01B               	goto	l7614
  4125  001664                     l7612:
  4126  001664  C0C0  F0B1         	movff	Loading@j,??_Loading
  4127  001668  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4128                           
  4129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4130                           ; Switch size 1, requested type "space"
  4131                           ; Number of cases is 1, Range of values is 0 to 0
  4132                           ; switch strategies available:
  4133                           ; Name         Instructions Cycles
  4134                           ; simple_byte            4     3 (average)
  4135                           ;	Chosen strategy is simple_byte
  4136  00166C  0100               	movlb	0	; () banked
  4137  00166E  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4138  001670  0A00               	xorlw	0	; case 0
  4139  001672  A4D8               	btfss	status,2,c
  4140  001674  D7EC               	goto	l813
  4141                           
  4142                           ; BSR set to: 0
  4143                           ; Switch size 1, requested type "space"
  4144                           ; Number of cases is 5, Range of values is 1 to 5
  4145                           ; switch strategies available:
  4146                           ; Name         Instructions Cycles
  4147                           ; simple_byte           16     9 (average)
  4148                           ;	Chosen strategy is simple_byte
  4149  001676  0100               	movlb	0	; () banked
  4150  001678  51B1               	movf	??_Loading& (0+255),w,b
  4151  00167A  0A01               	xorlw	1	; case 1
  4152  00167C  B4D8               	btfsc	status,2,c
  4153  00167E  D783               	goto	l807
  4154  001680  0A03               	xorlw	3	; case 2
  4155  001682  B4D8               	btfsc	status,2,c
  4156  001684  D793               	goto	l809
  4157  001686  0A01               	xorlw	1	; case 3
  4158  001688  B4D8               	btfsc	status,2,c
  4159  00168A  D7A4               	goto	l810
  4160  00168C  0A07               	xorlw	7	; case 4
  4161  00168E  B4D8               	btfsc	status,2,c
  4162  001690  D7B5               	goto	l811
  4163  001692  0A01               	xorlw	1	; case 5
  4164  001694  B4D8               	btfsc	status,2,c
  4165  001696  D7C6               	goto	l812
  4166  001698  D7DA               	goto	l813
  4167  00169A                     l7614:
  4168  00169A  0100               	movlb	0	; () banked
  4169  00169C  4BBE               	infsnz	Loading@i_1170& (0+255),f,b
  4170  00169E  2BBF               	incf	(Loading@i_1170+1)& (0+255),f,b
  4171                           
  4172                           ; BSR set to: 0
  4173  0016A0  0100               	movlb	0	; () banked
  4174  0016A2  BFBF               	btfsc	(Loading@i_1170+1)& (0+255),7,b
  4175  0016A4  D7DF               	goto	l7612
  4176  0016A6  0100               	movlb	0	; () banked
  4177  0016A8  51BF               	movf	(Loading@i_1170+1)& (0+255),w,b
  4178  0016AA  E101               	bnz	l801
  4179  0016AC  D765               	goto	L6
  4180  0016AE                     l801:
  4181                           
  4182                           ;sort.c: 235: }
  4183                           ;sort.c: 236: }
  4184                           ;sort.c: 237: }
  4185                           ;sort.c: 238: LATAbits.LATA4 = 0;
  4186  0016AE  9889               	bcf	3977,4,c	;volatile
  4187                           
  4188                           ;sort.c: 239: j++;
  4189  0016B0  0100               	movlb	0	; () banked
  4190  0016B2  4BC0               	infsnz	Loading@j& (0+255),f,b
  4191  0016B4  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4192  0016B6                     l7620:
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;sort.c: 240: }
  4196                           ;sort.c: 242: if(!IR_signal){
  4197  0016B6  0100               	movlb	0	; () banked
  4198  0016B8  51E6               	movf	_IR_signal& (0+255),w,b
  4199  0016BA  0100               	movlb	0	; () banked
  4200  0016BC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4201  0016BE  A4D8               	btfss	status,2,c
  4202  0016C0  D016               	goto	l7632
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 243: _delay((unsigned long)((500)*(32000000/4000.0)));
  4206  0016C2  0E15               	movlw	21
  4207  0016C4  0100               	movlb	0	; () banked
  4208  0016C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4209  0016C8  0E4B               	movlw	75
  4210  0016CA  0100               	movlb	0	; () banked
  4211  0016CC  6FB1               	movwf	??_Loading& (0+255),b
  4212  0016CE  0EBE               	movlw	190
  4213  0016D0                     u9377:
  4214  0016D0  2EE8               	decfsz	wreg,f,c
  4215  0016D2  D7FE               	bra	u9377
  4216  0016D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  4217  0016D6  D7FC               	bra	u9377
  4218  0016D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4219  0016DA  D7FA               	bra	u9377
  4220  0016DC  F000               	nop	
  4221                           
  4222                           ;sort.c: 244: readIR();
  4223  0016DE  EC72  F027         	call	_readIR	;wreg free
  4224                           
  4225                           ;sort.c: 245: if(IR_signal==1){
  4226  0016E2  0100               	movlb	0	; () banked
  4227  0016E4  05E6               	decf	_IR_signal& (0+255),w,b
  4228  0016E6  0100               	movlb	0	; () banked
  4229  0016E8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4230  0016EA  A4D8               	btfss	status,2,c
  4231  0016EC  D006               	goto	l817
  4232  0016EE                     l7632:
  4233                           
  4234                           ; BSR set to: 0
  4235  0016EE  0100               	movlb	0	; () banked
  4236  0016F0  05E6               	decf	_IR_signal& (0+255),w,b
  4237  0016F2  0100               	movlb	0	; () banked
  4238  0016F4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4239  0016F6  B4D8               	btfsc	status,2,c
  4240  0016F8  D6E3               	goto	l7558
  4241  0016FA                     l817:
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;sort.c: 250: }
  4245                           ;sort.c: 251: }
  4246                           ;sort.c: 252: }
  4247                           ;sort.c: 253: LATBbits.LATB2 = 0;
  4248  0016FA  948A               	bcf	3978,2,c	;volatile
  4249  0016FC                     l7634:
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;sort.c: 254: }
  4253                           ;sort.c: 255: f_can_coming_to_ID = 1;
  4254  0016FC  0E00               	movlw	0
  4255  0016FE  0101               	movlb	1	; () banked
  4256  001700  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4257  001702  0E01               	movlw	1
  4258  001704  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4259                           
  4260                           ; BSR set to: 1
  4261                           
  4262                           ; BSR set to: 1
  4263  001706  0012               	return	
  4264  001708                     __end_of_Loading:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           fsr1l	equ	0xFE1
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _initSortTimer *****************
  4279 ;; Defined at:
  4280 ;;		line 416 in file "sort.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;		None
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  i               2    8[BANK0 ] int 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      void 
  4287 ;; Registers used:
  4288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;Total ram usage:        5 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:   10
  4301 ;; This function calls:
  4302 ;;		_getRTC
  4303 ;; This function is called by:
  4304 ;;		_Loading
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text3
  4309  0045FC                     __ptext3:
  4310                           	opt stack 0
  4311  0045FC                     _initSortTimer:
  4312                           	opt stack 18
  4313                           
  4314                           ;sort.c: 418: getRTC();
  4315                           
  4316                           ;incstack = 0
  4317  0045FC  ECEA  F023         	call	_getRTC	;wreg free
  4318                           
  4319                           ;sort.c: 419: for(int i = 0; i < 7; i++){
  4320  004600  0E00               	movlw	0
  4321  004602  0100               	movlb	0	; () banked
  4322  004604  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4323  004606  0E00               	movlw	0
  4324  004608  6F88               	movwf	initSortTimer@i& (0+255),b
  4325  00460A                     l7026:
  4326                           
  4327                           ; BSR set to: 0
  4328  00460A  0100               	movlb	0	; () banked
  4329  00460C  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4330  00460E  D008               	goto	l7030
  4331  004610  0100               	movlb	0	; () banked
  4332  004612  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4333  004614  E140               	bnz	l7036
  4334  004616  0E07               	movlw	7
  4335  004618  0100               	movlb	0	; () banked
  4336  00461A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4337  00461C  B0D8               	btfsc	status,0,c
  4338  00461E  D03B               	goto	l7036
  4339  004620                     l7030:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;sort.c: 420: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4343  004620  0E1C               	movlw	low _time
  4344  004622  0100               	movlb	0	; () banked
  4345  004624  2588               	addwf	initSortTimer@i& (0+255),w,b
  4346  004626  6ED9               	movwf	fsr2l,c
  4347  004628  0E01               	movlw	high _time
  4348  00462A  0100               	movlb	0	; () banked
  4349  00462C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4350  00462E  6EDA               	movwf	fsr2h,c
  4351  004630  50DF               	movf	indf2,w,c
  4352  004632  0100               	movlb	0	; () banked
  4353  004634  6F85               	movwf	??_initSortTimer& (0+255),b
  4354  004636  0100               	movlb	0	; () banked
  4355  004638  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4356  00463A  0E0F               	movlw	15
  4357  00463C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4358  00463E  0E0F               	movlw	15
  4359  004640  0100               	movlb	0	; () banked
  4360  004642  1785               	andwf	??_initSortTimer& (0+255),f,b
  4361  004644  0100               	movlb	0	; () banked
  4362  004646  5185               	movf	??_initSortTimer& (0+255),w,b
  4363  004648  0D0A               	mullw	10
  4364  00464A  0E1C               	movlw	low _time
  4365  00464C  0100               	movlb	0	; () banked
  4366  00464E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4367  004650  6ED9               	movwf	fsr2l,c
  4368  004652  0E01               	movlw	high _time
  4369  004654  0100               	movlb	0	; () banked
  4370  004656  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4371  004658  6EDA               	movwf	fsr2h,c
  4372  00465A  50DF               	movf	indf2,w,c
  4373  00465C  0B0F               	andlw	15
  4374  00465E  0100               	movlb	0	; () banked
  4375  004660  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4376  004662  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4377  004664  50F3               	movf	prodl,w,c
  4378  004666  0100               	movlb	0	; () banked
  4379  004668  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4380  00466A  50F4               	movf	prodh,w,c
  4381  00466C  0100               	movlb	0	; () banked
  4382  00466E  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4383  004670  90D8               	bcf	status,0,c
  4384  004672  0100               	movlb	0	; () banked
  4385  004674  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4386  004676  6ED9               	movwf	fsr2l,c
  4387  004678  0100               	movlb	0	; () banked
  4388  00467A  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4389  00467C  6EDA               	movwf	fsr2h,c
  4390  00467E  0E0E               	movlw	low _startTime
  4391  004680  26D9               	addwf	fsr2l,f,c
  4392  004682  0E01               	movlw	high _startTime
  4393  004684  22DA               	addwfc	fsr2h,f,c
  4394  004686  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4395  00468A  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4396                           
  4397                           ; BSR set to: 0
  4398  00468E  0100               	movlb	0	; () banked
  4399  004690  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4400  004692  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4401  004694  D7BA               	goto	l7026
  4402  004696                     l7036:
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;sort.c: 421: }
  4406                           ;sort.c: 423: T0CON = 0b00010111;
  4407  004696  0E17               	movlw	23
  4408  004698  6ED5               	movwf	4053,c	;volatile
  4409                           
  4410                           ;sort.c: 432: TMR0H = 0b10000101;
  4411  00469A  0E85               	movlw	133
  4412  00469C  6ED7               	movwf	4055,c	;volatile
  4413                           
  4414                           ;sort.c: 433: TMR0L = 0b11101110;
  4415  00469E  0EEE               	movlw	238
  4416  0046A0  6ED6               	movwf	4054,c	;volatile
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;sort.c: 434: TMR0ON = 1;
  4420  0046A2  8ED5               	bsf	4053,7,c	;volatile
  4421                           
  4422                           ; BSR set to: 0
  4423  0046A4  0012               	return		;funcret
  4424  0046A6                     __end_of_initSortTimer:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           postinc0	equ	0xFEE
  4433                           wreg	equ	0xFE8
  4434                           postdec1	equ	0xFE5
  4435                           fsr1l	equ	0xFE1
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function _initGlobalVars *****************
  4444 ;; Defined at:
  4445 ;;		line 384 in file "sort.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;Total ram usage:        0 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    7
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_Loading
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text4
  4474  0043C4                     __ptext4:
  4475                           	opt stack 0
  4476  0043C4                     _initGlobalVars:
  4477                           	opt stack 21
  4478                           
  4479                           ;sort.c: 386: first = 0;
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;incstack = 0
  4483  0043C4  0E00               	movlw	0
  4484  0043C6  0101               	movlb	1	; () banked
  4485  0043C8  6F3A               	movwf	(_first+1)& (0+255),b
  4486  0043CA  0E00               	movlw	0
  4487  0043CC  6F39               	movwf	_first& (0+255),b
  4488                           
  4489                           ;sort.c: 389: f_loadingNewCan = 0;
  4490  0043CE  0E00               	movlw	0
  4491  0043D0  0100               	movlb	0	; () banked
  4492  0043D2  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4493  0043D4  0E00               	movlw	0
  4494  0043D6  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4495                           
  4496                           ;sort.c: 390: f_lastCan = 0;
  4497  0043D8  0E00               	movlw	0
  4498  0043DA  0100               	movlb	0	; () banked
  4499  0043DC  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  4500  0043DE  0E00               	movlw	0
  4501  0043E0  6FF0               	movwf	_f_lastCan& (0+255),b
  4502                           
  4503                           ;sort.c: 391: f_ID_receive = 1;
  4504  0043E2  0E00               	movlw	0
  4505  0043E4  0101               	movlb	1	; () banked
  4506  0043E6  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4507  0043E8  0E01               	movlw	1
  4508  0043EA  6F2F               	movwf	_f_ID_receive& (0+255),b
  4509                           
  4510                           ;sort.c: 392: f_can_coming_to_ID = 0;
  4511  0043EC  0E00               	movlw	0
  4512  0043EE  0101               	movlb	1	; () banked
  4513  0043F0  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4514  0043F2  0E00               	movlw	0
  4515  0043F4  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4516                           
  4517                           ;sort.c: 393: f_can_coming_to_distribution = 0;
  4518  0043F6  0E00               	movlw	0
  4519  0043F8  0101               	movlb	1	; () banked
  4520  0043FA  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4521  0043FC  0E00               	movlw	0
  4522  0043FE  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4523                           
  4524                           ;sort.c: 394: f_can_distributed = 1;
  4525  004400  0E00               	movlw	0
  4526  004402  0101               	movlb	1	; () banked
  4527  004404  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4528  004406  0E01               	movlw	1
  4529  004408  6F35               	movwf	_f_can_distributed& (0+255),b
  4530                           
  4531                           ;sort.c: 395: f_most_recent_sort_time = 0;
  4532  00440A  0E00               	movlw	0
  4533  00440C  0101               	movlb	1	; () banked
  4534  00440E  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4535  004410  0E00               	movlw	0
  4536  004412  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4537                           
  4538                           ;sort.c: 398: count_total = 0;
  4539  004414  0E00               	movlw	0
  4540  004416  0100               	movlb	0	; () banked
  4541  004418  6FFF               	movwf	(_count_total+1)& (0+255),b
  4542  00441A  0E00               	movlw	0
  4543  00441C  6FFE               	movwf	_count_total& (0+255),b
  4544                           
  4545                           ;sort.c: 399: count_pop_no_tab = 0;
  4546  00441E  0E00               	movlw	0
  4547  004420  0101               	movlb	1	; () banked
  4548  004422  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4549  004424  0E00               	movlw	0
  4550  004426  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4551                           
  4552                           ;sort.c: 400: count_pop_w_tab = 0;
  4553  004428  0E00               	movlw	0
  4554  00442A  0101               	movlb	1	; () banked
  4555  00442C  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4556  00442E  0E00               	movlw	0
  4557  004430  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4558                           
  4559                           ;sort.c: 401: count_can_w_lab = 0;
  4560  004432  0E00               	movlw	0
  4561  004434  0101               	movlb	1	; () banked
  4562  004436  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4563  004438  0E00               	movlw	0
  4564  00443A  6F25               	movwf	_count_can_w_lab& (0+255),b
  4565                           
  4566                           ;sort.c: 402: count_can_no_lab = 0;
  4567  00443C  0E00               	movlw	0
  4568  00443E  0101               	movlb	1	; () banked
  4569  004440  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4570  004442  0E00               	movlw	0
  4571  004444  6F23               	movwf	_count_can_no_lab& (0+255),b
  4572                           
  4573                           ;sort.c: 405: most_recent_sort_time = 999;
  4574  004446  0E03               	movlw	3
  4575  004448  6E6A               	movwf	_most_recent_sort_time+1,c
  4576  00444A  0EE7               	movlw	231
  4577  00444C  6E69               	movwf	_most_recent_sort_time,c
  4578                           
  4579                           ;sort.c: 408: servo_timer_counter = 0;
  4580  00444E  0E00               	movlw	0
  4581  004450  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4582  004452  0E00               	movlw	0
  4583  004454  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4584                           
  4585                           ;sort.c: 409: servo_timer_target = 9999;
  4586  004456  0E27               	movlw	39
  4587  004458  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4588  00445A  0E0F               	movlw	15
  4589  00445C  6E6F               	movwf	_servo_timer_target,c	;volatile
  4590                           
  4591                           ;sort.c: 410: timer2_counter = 0;
  4592  00445E  0E00               	movlw	0
  4593  004460  6E74               	movwf	_timer2_counter+1,c	;volatile
  4594  004462  0E00               	movlw	0
  4595  004464  6E73               	movwf	_timer2_counter,c	;volatile
  4596                           
  4597                           ;sort.c: 411: f_arm_position = 0;
  4598  004466  0E00               	movlw	0
  4599  004468  0100               	movlb	0	; () banked
  4600  00446A  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4601  00446C  0E00               	movlw	0
  4602  00446E  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;sort.c: 412: pan_servo_state = -1;
  4606  004470  686B               	setf	_pan_servo_state,c	;volatile
  4607  004472  686C               	setf	_pan_servo_state+1,c	;volatile
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;sort.c: 413: tilt_servo_state = -1;
  4611  004474  6871               	setf	_tilt_servo_state,c	;volatile
  4612  004476  6872               	setf	_tilt_servo_state+1,c	;volatile
  4613                           
  4614                           ;sort.c: 414: f_panning_to_bin = 0;
  4615  004478  0E00               	movlw	0
  4616  00447A  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4617  00447C  0E00               	movlw	0
  4618  00447E  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4619                           
  4620                           ; BSR set to: 0
  4621  004480  0012               	return		;funcret
  4622  004482                     __end_of_initGlobalVars:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           postinc0	equ	0xFEE
  4631                           wreg	equ	0xFE8
  4632                           postdec1	equ	0xFE5
  4633                           fsr1l	equ	0xFE1
  4634                           indf2	equ	0xFDF
  4635                           postinc2	equ	0xFDE
  4636                           postdec2	equ	0xFDD
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function _getMAG *****************
  4642 ;; Defined at:
  4643 ;;		line 513 in file "sort.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;Total ram usage:        2 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    9
  4664 ;; This function calls:
  4665 ;;		_readMAG
  4666 ;; This function is called by:
  4667 ;;		_Loading
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text5
  4672  00511A                     __ptext5:
  4673                           	opt stack 0
  4674  00511A                     _getMAG:
  4675                           	opt stack 19
  4676                           
  4677                           ;sort.c: 514: readMAG();
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;incstack = 0
  4681  00511A  EC98  F027         	call	_readMAG	;wreg free
  4682                           
  4683                           ;sort.c: 516: if(MAG_signal==1){
  4684  00511E  0100               	movlb	0	; () banked
  4685  005120  05E8               	decf	_MAG_signal& (0+255),w,b
  4686  005122  0100               	movlb	0	; () banked
  4687  005124  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4688  005126  A4D8               	btfss	status,2,c
  4689  005128  0012               	return	
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;sort.c: 517: _delay((unsigned long)((500)*(32000000/4000.0)));
  4693  00512A  0E15               	movlw	21
  4694  00512C  0100               	movlb	0	; () banked
  4695  00512E  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4696  005130  0E4B               	movlw	75
  4697  005132  0100               	movlb	0	; () banked
  4698  005134  6F86               	movwf	??_getMAG& (0+255),b
  4699  005136  0EBE               	movlw	190
  4700  005138                     u9387:
  4701  005138  2EE8               	decfsz	wreg,f,c
  4702  00513A  D7FE               	bra	u9387
  4703  00513C  2F86               	decfsz	??_getMAG& (0+255),f,b
  4704  00513E  D7FC               	bra	u9387
  4705  005140  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4706  005142  D7FA               	bra	u9387
  4707  005144  F000               	nop	
  4708                           
  4709                           ;sort.c: 518: readMAG();
  4710  005146  EC98  F027         	call	_readMAG	;wreg free
  4711  00514A  0012               	return	
  4712  00514C                     __end_of_getMAG:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           postdec1	equ	0xFE5
  4723                           fsr1l	equ	0xFE1
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _getIR *****************
  4732 ;; Defined at:
  4733 ;;		line 497 in file "sort.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  i               2    7[BANK0 ] int 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, status,2, status,0, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        3 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    9
  4754 ;; This function calls:
  4755 ;;		_readIR
  4756 ;; This function is called by:
  4757 ;;		_Loading
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text6
  4762  004A54                     __ptext6:
  4763                           	opt stack 0
  4764  004A54                     _getIR:
  4765                           	opt stack 19
  4766                           
  4767                           ;sort.c: 498: readIR();
  4768                           
  4769                           ;incstack = 0
  4770  004A54  EC72  F027         	call	_readIR	;wreg free
  4771                           
  4772                           ;sort.c: 499: for(int i = 0; i < 150; i++){
  4773  004A58  0E00               	movlw	0
  4774  004A5A  0100               	movlb	0	; () banked
  4775  004A5C  6F88               	movwf	(getIR@i+1)& (0+255),b
  4776  004A5E  0E00               	movlw	0
  4777  004A60  6F87               	movwf	getIR@i& (0+255),b
  4778  004A62                     l7126:
  4779                           
  4780                           ; BSR set to: 0
  4781  004A62  0100               	movlb	0	; () banked
  4782  004A64  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4783  004A66  D008               	goto	l7130
  4784  004A68  0100               	movlb	0	; () banked
  4785  004A6A  5188               	movf	(getIR@i+1)& (0+255),w,b
  4786  004A6C  E11A               	bnz	l7142
  4787  004A6E  0E96               	movlw	150
  4788  004A70  0100               	movlb	0	; () banked
  4789  004A72  5D87               	subwf	getIR@i& (0+255),w,b
  4790  004A74  B0D8               	btfsc	status,0,c
  4791  004A76  D015               	goto	l7142
  4792  004A78                     l7130:
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;sort.c: 500: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4796  004A78  0E06               	movlw	6
  4797  004A7A  0100               	movlb	0	; () banked
  4798  004A7C  6F86               	movwf	??_getIR& (0+255),b
  4799  004A7E  0E30               	movlw	48
  4800  004A80                     u9397:
  4801  004A80  2EE8               	decfsz	wreg,f,c
  4802  004A82  D7FE               	bra	u9397
  4803  004A84  2F86               	decfsz	??_getIR& (0+255),f,b
  4804  004A86  D7FC               	bra	u9397
  4805  004A88  F000               	nop	
  4806                           
  4807                           ;sort.c: 501: readIR();
  4808  004A8A  EC72  F027         	call	_readIR	;wreg free
  4809                           
  4810                           ;sort.c: 502: if(!IR_signal){
  4811  004A8E  0100               	movlb	0	; () banked
  4812  004A90  51E6               	movf	_IR_signal& (0+255),w,b
  4813  004A92  0100               	movlb	0	; () banked
  4814  004A94  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4815  004A96  B4D8               	btfsc	status,2,c
  4816  004A98  D004               	goto	l7142
  4817                           
  4818                           ; BSR set to: 0
  4819                           
  4820                           ; BSR set to: 0
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;sort.c: 503: break;
  4824  004A9A  0100               	movlb	0	; () banked
  4825  004A9C  4B87               	infsnz	getIR@i& (0+255),f,b
  4826  004A9E  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4827  004AA0  D7E0               	goto	l7126
  4828  004AA2                     l7142:
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;sort.c: 504: }
  4832                           ;sort.c: 505: }
  4833                           ;sort.c: 506: if(IR_signal==1){
  4834  004AA2  0100               	movlb	0	; () banked
  4835  004AA4  05E6               	decf	_IR_signal& (0+255),w,b
  4836  004AA6  0100               	movlb	0	; () banked
  4837  004AA8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4838  004AAA  A4D8               	btfss	status,2,c
  4839  004AAC  D006               	goto	l7146
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;sort.c: 507: f_loadingNewCan = 1;
  4843  004AAE  0E00               	movlw	0
  4844  004AB0  0100               	movlb	0	; () banked
  4845  004AB2  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4846  004AB4  0E01               	movlw	1
  4847  004AB6  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4848                           
  4849                           ;sort.c: 508: }
  4850  004AB8  0012               	return	
  4851  004ABA                     l7146:
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;sort.c: 509: else{
  4855                           ;sort.c: 510: f_loadingNewCan = 0;
  4856  004ABA  0E00               	movlw	0
  4857  004ABC  0100               	movlb	0	; () banked
  4858  004ABE  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4859  004AC0  0E00               	movlw	0
  4860  004AC2  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4861  004AC4  0012               	return	
  4862  004AC6                     __end_of_getIR:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           postinc0	equ	0xFEE
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _readIR *****************
  4882 ;; Defined at:
  4883 ;;		line 23 in file "ADCFunctionality.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  res             2    4[BANK0 ] int 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;Total ram usage:        4 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    8
  4904 ;; This function calls:
  4905 ;;		_readADC
  4906 ;; This function is called by:
  4907 ;;		_Loading
  4908 ;;		_getIR
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text7
  4913  004EE4                     __ptext7:
  4914                           	opt stack 0
  4915  004EE4                     _readIR:
  4916                           	opt stack 20
  4917                           
  4918                           ;ADCFunctionality.c: 24: readADC(0);
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;incstack = 0
  4922  004EE4  0E00               	movlw	0
  4923  004EE6  ECF3  F029         	call	_readADC
  4924                           
  4925                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4926  004EEA  50C3               	movf	4035,w,c	;volatile
  4927  004EEC  CFC4 F082          	movff	4036,??_readIR	;volatile
  4928  004EF0  0100               	movlb	0	; () banked
  4929  004EF2  6B83               	clrf	(??_readIR+1)& (0+255),b
  4930  004EF4  C082  F083         	movff	??_readIR,??_readIR+1
  4931  004EF8  0100               	movlb	0	; () banked
  4932  004EFA  6B82               	clrf	??_readIR& (0+255),b
  4933  004EFC  0100               	movlb	0	; () banked
  4934  004EFE  1182               	iorwf	??_readIR& (0+255),w,b
  4935  004F00  0100               	movlb	0	; () banked
  4936  004F02  6F84               	movwf	readIR@res& (0+255),b
  4937  004F04  0100               	movlb	0	; () banked
  4938  004F06  5183               	movf	(??_readIR+1)& (0+255),w,b
  4939  004F08  0100               	movlb	0	; () banked
  4940  004F0A  6F85               	movwf	(readIR@res+1)& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4944  004F0C  0100               	movlb	0	; () banked
  4945  004F0E  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4946  004F10  D00A               	goto	u4810
  4947  004F12  0E21               	movlw	33
  4948  004F14  0100               	movlb	0	; () banked
  4949  004F16  5D84               	subwf	readIR@res& (0+255),w,b
  4950  004F18  0E03               	movlw	3
  4951  004F1A  0100               	movlb	0	; () banked
  4952  004F1C  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4953  004F1E  A0D8               	btfss	status,0,c
  4954  004F20  D002               	goto	u4810
  4955  004F22  0E01               	movlw	1
  4956  004F24  D001               	goto	u4820
  4957  004F26                     u4810:
  4958  004F26  0E00               	movlw	0
  4959  004F28                     u4820:
  4960  004F28  0100               	movlb	0	; () banked
  4961  004F2A  6FE6               	movwf	_IR_signal& (0+255),b
  4962  004F2C  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4963                           
  4964                           ; BSR set to: 0
  4965  004F2E  0012               	return		;funcret
  4966  004F30                     __end_of_readIR:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           postinc0	equ	0xFEE
  4975                           wreg	equ	0xFE8
  4976                           postdec1	equ	0xFE5
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _ID *****************
  4986 ;; Defined at:
  4987 ;;		line 259 in file "sort.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  i               2    8[BANK0 ] int 
  4992 ;;  i               2    6[BANK0 ] int 
  4993 ;;  i               2    4[BANK0 ] int 
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;Total ram usage:        8 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    8
  5010 ;; This function calls:
  5011 ;;		_delay_ms
  5012 ;; This function is called by:
  5013 ;;		_sort
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text8
  5018  003026                     __ptext8:
  5019                           	opt stack 0
  5020  003026                     _ID:
  5021                           	opt stack 21
  5022                           
  5023                           ;sort.c: 260: if(f_can_coming_to_ID){
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027  003026  0101               	movlb	1	; () banked
  5028  003028  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5029  00302A  0101               	movlb	1	; () banked
  5030  00302C  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5031  00302E  B4D8               	btfsc	status,2,c
  5032  003030  0012               	return	
  5033                           
  5034                           ; BSR set to: 1
  5035                           ;sort.c: 262: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5036  003032  0E29               	movlw	41
  5037  003034  0100               	movlb	0	; () banked
  5038  003036  6F83               	movwf	(??_ID+1)& (0+255),b
  5039  003038  0E96               	movlw	150
  5040  00303A  0100               	movlb	0	; () banked
  5041  00303C  6F82               	movwf	??_ID& (0+255),b
  5042  00303E  0E7F               	movlw	127
  5043  003040                     u9407:
  5044  003040  2EE8               	decfsz	wreg,f,c
  5045  003042  D7FE               	bra	u9407
  5046  003044  2F82               	decfsz	??_ID& (0+255),f,b
  5047  003046  D7FC               	bra	u9407
  5048  003048  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5049  00304A  D7FA               	bra	u9407
  5050                           
  5051                           ;sort.c: 264: f_arm_position = 0;
  5052  00304C  0E00               	movlw	0
  5053  00304E  0100               	movlb	0	; () banked
  5054  003050  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5055  003052  0E00               	movlw	0
  5056  003054  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;sort.c: 266: LATAbits.LATA3 = 1;
  5060  003056  8689               	bsf	3977,3,c	;volatile
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;sort.c: 267: _delay((unsigned long)((600)*(32000000/4000.0)));
  5064  003058  0E19               	movlw	25
  5065  00305A  0100               	movlb	0	; () banked
  5066  00305C  6F83               	movwf	(??_ID+1)& (0+255),b
  5067  00305E  0E5A               	movlw	90
  5068  003060  0100               	movlb	0	; () banked
  5069  003062  6F82               	movwf	??_ID& (0+255),b
  5070  003064  0EB1               	movlw	177
  5071  003066                     u9417:
  5072  003066  2EE8               	decfsz	wreg,f,c
  5073  003068  D7FE               	bra	u9417
  5074  00306A  2F82               	decfsz	??_ID& (0+255),f,b
  5075  00306C  D7FC               	bra	u9417
  5076  00306E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5077  003070  D7FA               	bra	u9417
  5078  003072  D000               	nop2	
  5079                           
  5080                           ;sort.c: 268: sensor_outputs[1] = PORTAbits.RA2;
  5081  003074  A480               	btfss	3968,2,c	;volatile
  5082  003076  D004               	goto	u6180
  5083  003078  0100               	movlb	0	; () banked
  5084  00307A  6B82               	clrf	??_ID& (0+255),b
  5085  00307C  2B82               	incf	??_ID& (0+255),f,b
  5086  00307E  D002               	goto	u6188
  5087  003080                     u6180:
  5088  003080  0100               	movlb	0	; () banked
  5089  003082  6B82               	clrf	??_ID& (0+255),b
  5090  003084                     u6188:
  5091  003084  0100               	movlb	0	; () banked
  5092  003086  5182               	movf	??_ID& (0+255),w,b
  5093  003088  0100               	movlb	0	; () banked
  5094  00308A  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5095  00308C  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;sort.c: 269: LATAbits.LATA3 = 0;
  5099  00308E  9689               	bcf	3977,3,c	;volatile
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;sort.c: 271: _delay((unsigned long)((200)*(32000000/4000.0)));
  5103  003090  0E09               	movlw	9
  5104  003092  0100               	movlb	0	; () banked
  5105  003094  6F83               	movwf	(??_ID+1)& (0+255),b
  5106  003096  0E1E               	movlw	30
  5107  003098  0100               	movlb	0	; () banked
  5108  00309A  6F82               	movwf	??_ID& (0+255),b
  5109  00309C  0EE4               	movlw	228
  5110  00309E                     u9427:
  5111  00309E  2EE8               	decfsz	wreg,f,c
  5112  0030A0  D7FE               	bra	u9427
  5113  0030A2  2F82               	decfsz	??_ID& (0+255),f,b
  5114  0030A4  D7FC               	bra	u9427
  5115  0030A6  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5116  0030A8  D7FA               	bra	u9427
  5117  0030AA  F000               	nop	
  5118                           
  5119                           ;sort.c: 272: LATAbits.LATA3 = 1;
  5120  0030AC  8689               	bsf	3977,3,c	;volatile
  5121                           
  5122                           ;sort.c: 273: _delay((unsigned long)((600)*(32000000/4000.0)));
  5123  0030AE  0E19               	movlw	25
  5124  0030B0  0100               	movlb	0	; () banked
  5125  0030B2  6F83               	movwf	(??_ID+1)& (0+255),b
  5126  0030B4  0E5A               	movlw	90
  5127  0030B6  0100               	movlb	0	; () banked
  5128  0030B8  6F82               	movwf	??_ID& (0+255),b
  5129  0030BA  0EB1               	movlw	177
  5130  0030BC                     u9437:
  5131  0030BC  2EE8               	decfsz	wreg,f,c
  5132  0030BE  D7FE               	bra	u9437
  5133  0030C0  2F82               	decfsz	??_ID& (0+255),f,b
  5134  0030C2  D7FC               	bra	u9437
  5135  0030C4  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5136  0030C6  D7FA               	bra	u9437
  5137  0030C8  D000               	nop2	
  5138                           
  5139                           ;sort.c: 274: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  5140  0030CA  A480               	btfss	3968,2,c	;volatile
  5141  0030CC  D004               	goto	u6190
  5142  0030CE  0100               	movlb	0	; () banked
  5143  0030D0  6B82               	clrf	??_ID& (0+255),b
  5144  0030D2  2B82               	incf	??_ID& (0+255),f,b
  5145  0030D4  D002               	goto	u6198
  5146  0030D6                     u6190:
  5147  0030D6  0100               	movlb	0	; () banked
  5148  0030D8  6B82               	clrf	??_ID& (0+255),b
  5149  0030DA                     u6198:
  5150  0030DA  0100               	movlb	0	; () banked
  5151  0030DC  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5152  0030DE  0100               	movlb	0	; () banked
  5153  0030E0  1182               	iorwf	??_ID& (0+255),w,b
  5154  0030E2  0100               	movlb	0	; () banked
  5155  0030E4  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5156  0030E6  0100               	movlb	0	; () banked
  5157  0030E8  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5158  0030EA  0100               	movlb	0	; () banked
  5159  0030EC  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;sort.c: 282: if(!sensor_outputs[0]){
  5163  0030EE  0100               	movlb	0	; () banked
  5164  0030F0  51E2               	movf	_sensor_outputs& (0+255),w,b
  5165  0030F2  0100               	movlb	0	; () banked
  5166  0030F4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5167  0030F6  A4D8               	btfss	status,2,c
  5168  0030F8  D016               	goto	l7674
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;sort.c: 283: if(!sensor_outputs[1]){
  5172  0030FA  0100               	movlb	0	; () banked
  5173  0030FC  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5174  0030FE  0100               	movlb	0	; () banked
  5175  003100  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5176  003102  A4D8               	btfss	status,2,c
  5177  003104  D008               	goto	l7670
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;sort.c: 284: count_pop_no_tab++;
  5181  003106  0101               	movlb	1	; () banked
  5182  003108  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5183  00310A  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5184                           
  5185                           ; BSR set to: 1
  5186                           ;sort.c: 285: cur_can = 0;
  5187  00310C  0E00               	movlw	0
  5188  00310E  0101               	movlb	1	; () banked
  5189  003110  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5190  003112  0E00               	movlw	0
  5191  003114  D007               	goto	L7
  5192  003116                     l7670:
  5193                           
  5194                           ;sort.c: 287: else{
  5195                           ;sort.c: 288: count_pop_w_tab++;
  5196  003116  0101               	movlb	1	; () banked
  5197  003118  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5198  00311A  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5199                           
  5200                           ; BSR set to: 1
  5201                           ;sort.c: 289: cur_can = 1;
  5202  00311C  0E00               	movlw	0
  5203  00311E  0101               	movlb	1	; () banked
  5204  003120  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5205  003122  0E01               	movlw	1
  5206  003124                     L7:
  5207  003124  6F2B               	movwf	_cur_can& (0+255),b
  5208  003126                     l7674:
  5209                           
  5210                           ;sort.c: 290: }
  5211                           ;sort.c: 291: }
  5212                           ;sort.c: 292: if(sensor_outputs[0]){
  5213  003126  0100               	movlb	0	; () banked
  5214  003128  51E2               	movf	_sensor_outputs& (0+255),w,b
  5215  00312A  0100               	movlb	0	; () banked
  5216  00312C  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5217  00312E  B4D8               	btfsc	status,2,c
  5218  003130  D016               	goto	l7686
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;sort.c: 293: if(!sensor_outputs[1]){
  5222  003132  0100               	movlb	0	; () banked
  5223  003134  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5224  003136  0100               	movlb	0	; () banked
  5225  003138  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5226  00313A  A4D8               	btfss	status,2,c
  5227  00313C  D008               	goto	l7682
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;sort.c: 294: count_can_w_lab++;
  5231  00313E  0101               	movlb	1	; () banked
  5232  003140  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5233  003142  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5234                           
  5235                           ; BSR set to: 1
  5236                           ;sort.c: 295: cur_can = 2;
  5237  003144  0E00               	movlw	0
  5238  003146  0101               	movlb	1	; () banked
  5239  003148  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5240  00314A  0E02               	movlw	2
  5241  00314C  D007               	goto	L8
  5242  00314E                     l7682:
  5243                           
  5244                           ;sort.c: 297: else{
  5245                           ;sort.c: 298: count_can_no_lab++;
  5246  00314E  0101               	movlb	1	; () banked
  5247  003150  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5248  003152  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5249                           
  5250                           ; BSR set to: 1
  5251                           ;sort.c: 299: cur_can = 3;
  5252  003154  0E00               	movlw	0
  5253  003156  0101               	movlb	1	; () banked
  5254  003158  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5255  00315A  0E03               	movlw	3
  5256  00315C                     L8:
  5257  00315C  6F2B               	movwf	_cur_can& (0+255),b
  5258  00315E                     l7686:
  5259                           
  5260                           ;sort.c: 300: }
  5261                           ;sort.c: 301: }
  5262                           ;sort.c: 302: LATAbits.LATA3 = 0;
  5263  00315E  9689               	bcf	3977,3,c	;volatile
  5264  003160                     l7688:
  5265  003160  0101               	movlb	1	; () banked
  5266  003162  5135               	movf	_f_can_distributed& (0+255),w,b
  5267  003164  0101               	movlb	1	; () banked
  5268  003166  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5269  003168  B4D8               	btfsc	status,2,c
  5270  00316A  D7FA               	goto	l7688
  5271                           
  5272                           ; BSR set to: 1
  5273                           ;sort.c: 306: if(sensor_outputs[0]){
  5274                           
  5275                           ; BSR set to: 1
  5276  00316C  0100               	movlb	0	; () banked
  5277  00316E  51E2               	movf	_sensor_outputs& (0+255),w,b
  5278  003170  0100               	movlb	0	; () banked
  5279  003172  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5280  003174  B4D8               	btfsc	status,2,c
  5281  003176  D020               	goto	l7706
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;sort.c: 308: LATAbits.LATA3 = 1;
  5285  003178  8689               	bsf	3977,3,c	;volatile
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;sort.c: 311: for(int i=0;i<10000;i++)
  5289  00317A  0E00               	movlw	0
  5290  00317C  0100               	movlb	0	; () banked
  5291  00317E  6F85               	movwf	(ID@i+1)& (0+255),b
  5292  003180  0E00               	movlw	0
  5293  003182  6F84               	movwf	ID@i& (0+255),b
  5294  003184                     l7696:
  5295                           
  5296                           ; BSR set to: 0
  5297  003184  0100               	movlb	0	; () banked
  5298  003186  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5299  003188  D008               	goto	l831
  5300  00318A  0E10               	movlw	16
  5301  00318C  0100               	movlb	0	; () banked
  5302  00318E  5D84               	subwf	ID@i& (0+255),w,b
  5303  003190  0E27               	movlw	39
  5304  003192  0100               	movlb	0	; () banked
  5305  003194  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5306  003196  B0D8               	btfsc	status,0,c
  5307  003198  D00D               	goto	l832
  5308  00319A                     l831:
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;sort.c: 312: {
  5312                           ;sort.c: 313: LATCbits.LATC0 = 1;
  5313  00319A  808B               	bsf	3979,0,c	;volatile
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;sort.c: 314: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5317  00319C  0E1A               	movlw	26
  5318  00319E                     u9447:
  5319  00319E  2EE8               	decfsz	wreg,f,c
  5320  0031A0  D7FE               	bra	u9447
  5321  0031A2  D000               	nop2	
  5322                           
  5323                           ;sort.c: 315: LATCbits.LATC0 = 0;
  5324  0031A4  908B               	bcf	3979,0,c	;volatile
  5325                           
  5326                           ;sort.c: 316: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5327  0031A6  0EF0               	movlw	240
  5328  0031A8                     u9457:
  5329  0031A8  2EE8               	decfsz	wreg,f,c
  5330  0031AA  D7FE               	bra	u9457
  5331  0031AC  0100               	movlb	0	; () banked
  5332  0031AE  4B84               	infsnz	ID@i& (0+255),f,b
  5333  0031B0  2B85               	incf	(ID@i+1)& (0+255),f,b
  5334  0031B2  D7E8               	goto	l7696
  5335  0031B4                     l832:
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;sort.c: 317: }
  5339                           ;sort.c: 319: LATAbits.LATA3 = 0;
  5340  0031B4  9689               	bcf	3977,3,c	;volatile
  5341                           
  5342                           ;sort.c: 322: }
  5343  0031B6  D01D               	goto	l833
  5344  0031B8                     l7706:
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;sort.c: 323: else{
  5348                           ;sort.c: 325: for(int i=0;i<10000;i++)
  5349  0031B8  0E00               	movlw	0
  5350  0031BA  0100               	movlb	0	; () banked
  5351  0031BC  6F87               	movwf	(ID@i_1181+1)& (0+255),b
  5352  0031BE  0E00               	movlw	0
  5353  0031C0  6F86               	movwf	ID@i_1181& (0+255),b
  5354  0031C2                     l7708:
  5355                           
  5356                           ; BSR set to: 0
  5357  0031C2  0100               	movlb	0	; () banked
  5358  0031C4  BF87               	btfsc	(ID@i_1181+1)& (0+255),7,b
  5359  0031C6  D008               	goto	l834
  5360  0031C8  0E10               	movlw	16
  5361  0031CA  0100               	movlb	0	; () banked
  5362  0031CC  5D86               	subwf	ID@i_1181& (0+255),w,b
  5363  0031CE  0E27               	movlw	39
  5364  0031D0  0100               	movlb	0	; () banked
  5365  0031D2  5987               	subwfb	(ID@i_1181+1)& (0+255),w,b
  5366  0031D4  B0D8               	btfsc	status,0,c
  5367  0031D6  D00D               	goto	l833
  5368  0031D8                     l834:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;sort.c: 326: {
  5372                           ;sort.c: 327: LATCbits.LATC0 = 1;
  5373  0031D8  808B               	bsf	3979,0,c	;volatile
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;sort.c: 328: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5377  0031DA  0E1A               	movlw	26
  5378  0031DC                     u9467:
  5379  0031DC  2EE8               	decfsz	wreg,f,c
  5380  0031DE  D7FE               	bra	u9467
  5381  0031E0  D000               	nop2	
  5382                           
  5383                           ;sort.c: 329: LATCbits.LATC0 = 0;
  5384  0031E2  908B               	bcf	3979,0,c	;volatile
  5385                           
  5386                           ;sort.c: 330: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5387  0031E4  0EF0               	movlw	240
  5388  0031E6                     u9477:
  5389  0031E6  2EE8               	decfsz	wreg,f,c
  5390  0031E8  D7FE               	bra	u9477
  5391  0031EA  0100               	movlb	0	; () banked
  5392  0031EC  4B86               	infsnz	ID@i_1181& (0+255),f,b
  5393  0031EE  2B87               	incf	(ID@i_1181+1)& (0+255),f,b
  5394  0031F0  D7E8               	goto	l7708
  5395  0031F2                     l833:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;sort.c: 331: }
  5399                           ;sort.c: 332: }
  5400                           ;sort.c: 334: LATCbits.LATC0 = 0;
  5401  0031F2  908B               	bcf	3979,0,c	;volatile
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;sort.c: 336: f_can_coming_to_distribution = 1;
  5405  0031F4  0E00               	movlw	0
  5406  0031F6  0101               	movlb	1	; () banked
  5407  0031F8  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5408  0031FA  0E01               	movlw	1
  5409  0031FC  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5410                           
  5411                           ; BSR set to: 1
  5412                           ;sort.c: 337: _delay((unsigned long)((750)*(32000000/4000.0)));
  5413  0031FE  0E1F               	movlw	31
  5414  003200  0100               	movlb	0	; () banked
  5415  003202  6F83               	movwf	(??_ID+1)& (0+255),b
  5416  003204  0E71               	movlw	113
  5417  003206  0100               	movlb	0	; () banked
  5418  003208  6F82               	movwf	??_ID& (0+255),b
  5419  00320A  0E1E               	movlw	30
  5420  00320C                     u9487:
  5421  00320C  2EE8               	decfsz	wreg,f,c
  5422  00320E  D7FE               	bra	u9487
  5423  003210  2F82               	decfsz	??_ID& (0+255),f,b
  5424  003212  D7FC               	bra	u9487
  5425  003214  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5426  003216  D7FA               	bra	u9487
  5427  003218  F000               	nop	
  5428                           
  5429                           ;sort.c: 338: LATCbits.LATC0 = 1;
  5430  00321A  808B               	bsf	3979,0,c	;volatile
  5431                           
  5432                           ;sort.c: 341: if(!f_lastCan){
  5433  00321C  0100               	movlb	0	; () banked
  5434  00321E  51F0               	movf	_f_lastCan& (0+255),w,b
  5435  003220  0100               	movlb	0	; () banked
  5436  003222  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5437  003224  A4D8               	btfss	status,2,c
  5438  003226  D032               	goto	l7740
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;sort.c: 342: for(int i=0; i<46; i++){
  5442  003228  0E00               	movlw	0
  5443  00322A  0100               	movlb	0	; () banked
  5444  00322C  6F89               	movwf	(ID@i_1182+1)& (0+255),b
  5445  00322E  0E00               	movlw	0
  5446  003230  6F88               	movwf	ID@i_1182& (0+255),b
  5447                           
  5448                           ; BSR set to: 0
  5449  003232  0100               	movlb	0	; () banked
  5450  003234  BF89               	btfsc	(ID@i_1182+1)& (0+255),7,b
  5451  003236  D008               	goto	l7732
  5452  003238  0100               	movlb	0	; () banked
  5453  00323A  5189               	movf	(ID@i_1182+1)& (0+255),w,b
  5454  00323C  E126               	bnz	l838
  5455  00323E  0E2E               	movlw	46
  5456  003240  0100               	movlb	0	; () banked
  5457  003242  5D88               	subwf	ID@i_1182& (0+255),w,b
  5458  003244  B0D8               	btfsc	status,0,c
  5459  003246  D021               	goto	l838
  5460  003248                     l7732:
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;sort.c: 343: LATBbits.LATB2 = !LATBbits.LATB2;
  5464  003248  B48A               	btfsc	3978,2,c	;volatile
  5465  00324A  D004               	goto	u6320
  5466  00324C  0100               	movlb	0	; () banked
  5467  00324E  6B82               	clrf	??_ID& (0+255),b
  5468  003250  2B82               	incf	??_ID& (0+255),f,b
  5469  003252  D002               	goto	u6338
  5470  003254                     u6320:
  5471  003254  0100               	movlb	0	; () banked
  5472  003256  6B82               	clrf	??_ID& (0+255),b
  5473  003258                     u6338:
  5474  003258  0100               	movlb	0	; () banked
  5475  00325A  4782               	rlncf	??_ID& (0+255),f,b
  5476  00325C  4782               	rlncf	??_ID& (0+255),f,b
  5477  00325E  508A               	movf	3978,w,c	;volatile
  5478  003260  0100               	movlb	0	; () banked
  5479  003262  1982               	xorwf	??_ID& (0+255),w,b
  5480  003264  0BFB               	andlw	-5
  5481  003266  1982               	xorwf	??_ID& (0+255),w,b
  5482  003268  6E8A               	movwf	3978,c	;volatile
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;sort.c: 344: delay_ms(45-i);
  5486  00326A  0100               	movlb	0	; () banked
  5487  00326C  5188               	movf	ID@i_1182& (0+255),w,b
  5488  00326E  0800               	sublw	0
  5489  003270  0F2D               	addlw	45
  5490  003272  EC1E  F02A         	call	_delay_ms
  5491  003276  0100               	movlb	0	; () banked
  5492  003278  4B88               	infsnz	ID@i_1182& (0+255),f,b
  5493  00327A  2B89               	incf	(ID@i_1182+1)& (0+255),f,b
  5494                           
  5495                           ; BSR set to: 0
  5496  00327C  0100               	movlb	0	; () banked
  5497  00327E  BF89               	btfsc	(ID@i_1182+1)& (0+255),7,b
  5498  003280  D7E3               	goto	l7732
  5499  003282  0100               	movlb	0	; () banked
  5500  003284  5189               	movf	(ID@i_1182+1)& (0+255),w,b
  5501  003286  E101               	bnz	u6340
  5502  003288  D7DA               	goto	L9
  5503  00328A                     u6340:
  5504  00328A                     l838:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;sort.c: 345: }
  5508                           ;sort.c: 346: LATBbits.LATB2 = 1;
  5509  00328A  848A               	bsf	3978,2,c	;volatile
  5510  00328C                     l7740:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;sort.c: 347: }
  5514                           ;sort.c: 349: f_can_coming_to_ID = 0;
  5515  00328C  0E00               	movlw	0
  5516  00328E  0101               	movlb	1	; () banked
  5517  003290  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5518  003292  0E00               	movlw	0
  5519  003294  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5520  003296  0012               	return	
  5521  003298                     __end_of_ID:
  5522                           	opt stack 0
  5523                           tblptru	equ	0xFF8
  5524                           tblptrh	equ	0xFF7
  5525                           tblptrl	equ	0xFF6
  5526                           tablat	equ	0xFF5
  5527                           prodh	equ	0xFF4
  5528                           prodl	equ	0xFF3
  5529                           postinc0	equ	0xFEE
  5530                           wreg	equ	0xFE8
  5531                           postdec1	equ	0xFE5
  5532                           fsr1l	equ	0xFE1
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           fsr2h	equ	0xFDA
  5537                           fsr2l	equ	0xFD9
  5538                           status	equ	0xFD8
  5539                           
  5540 ;; *************** function _delay_ms *****************
  5541 ;; Defined at:
  5542 ;;		line 632 in file "sort.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  milliseconds    1    wreg     unsigned char 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;Total ram usage:        2 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    7
  5563 ;; This function calls:
  5564 ;;		Nothing
  5565 ;; This function is called by:
  5566 ;;		_Loading
  5567 ;;		_ID
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text9
  5572  00543C                     __ptext9:
  5573                           	opt stack 0
  5574  00543C                     _delay_ms:
  5575                           	opt stack 21
  5576                           
  5577                           ; BSR set to: 1
  5578                           ;incstack = 0
  5579                           ;delay_ms@milliseconds stored from wreg
  5580  00543C  0100               	movlb	0	; () banked
  5581  00543E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5582                           
  5583                           ;sort.c: 633: while(milliseconds > 0)
  5584  005440  D00B               	goto	l7098
  5585  005442                     l7094:
  5586                           
  5587                           ;sort.c: 634: {
  5588                           ;sort.c: 635: milliseconds--;
  5589  005442  0100               	movlb	0	; () banked
  5590  005444  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;sort.c: 636: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5594  005446  0E0B               	movlw	11
  5595  005448  0100               	movlb	0	; () banked
  5596  00544A  6F80               	movwf	??_delay_ms& (0+255),b
  5597  00544C  0E47               	movlw	71
  5598  00544E                     u9497:
  5599  00544E  2EE8               	decfsz	wreg,f,c
  5600  005450  D7FE               	bra	u9497
  5601  005452  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5602  005454  D7FC               	bra	u9497
  5603  005456  D000               	nop2	
  5604  005458                     l7098:
  5605  005458  0100               	movlb	0	; () banked
  5606  00545A  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5607  00545C  0100               	movlb	0	; () banked
  5608  00545E  B4D8               	btfsc	status,2,c
  5609  005460  0012               	return	
  5610  005462  D7EF               	goto	l7094
  5611  005464                     __end_of_delay_ms:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           postinc0	equ	0xFEE
  5620                           wreg	equ	0xFE8
  5621                           postdec1	equ	0xFE5
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           postdec2	equ	0xFDD
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function _Distribution *****************
  5631 ;; Defined at:
  5632 ;;		line 352 in file "sort.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;		None
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    8
  5653 ;; This function calls:
  5654 ;;		_updateServoPosition
  5655 ;; This function is called by:
  5656 ;;		_sort
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text10
  5661  004148                     __ptext10:
  5662                           	opt stack 0
  5663  004148                     _Distribution:
  5664                           	opt stack 21
  5665                           
  5666                           ;sort.c: 353: if(f_can_coming_to_distribution){
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;incstack = 0
  5670  004148  0101               	movlb	1	; () banked
  5671  00414A  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5672  00414C  0101               	movlb	1	; () banked
  5673  00414E  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5674  004150  B4D8               	btfsc	status,2,c
  5675  004152  0012               	return	
  5676                           
  5677                           ; BSR set to: 1
  5678                           ;sort.c: 354: f_can_distributed = 0;
  5679  004154  0E00               	movlw	0
  5680  004156  0101               	movlb	1	; () banked
  5681  004158  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5682  00415A  0E00               	movlw	0
  5683  00415C  6F35               	movwf	_f_can_distributed& (0+255),b
  5684                           
  5685                           ;sort.c: 361: switch(cur_can){
  5686  00415E  D034               	goto	l7756
  5687  004160                     l7746:
  5688                           
  5689                           ;sort.c: 363: updateServoPosition(500, 1);
  5690  004160  0E01               	movlw	1
  5691  004162  0100               	movlb	0	; () banked
  5692  004164  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5693  004166  0EF4               	movlw	244
  5694  004168  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5695  00416A  0E00               	movlw	0
  5696  00416C  0100               	movlb	0	; () banked
  5697  00416E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5698  004170  0E01               	movlw	1
  5699  004172  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5700  004174  EC2D  F024         	call	_updateServoPosition	;wreg free
  5701                           
  5702                           ;sort.c: 364: break;
  5703  004178  D03E               	goto	l7758
  5704  00417A                     l7748:
  5705                           
  5706                           ;sort.c: 366: updateServoPosition(850, 1);
  5707  00417A  0E03               	movlw	3
  5708  00417C  0100               	movlb	0	; () banked
  5709  00417E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5710  004180  0E52               	movlw	82
  5711  004182  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5712  004184  0E00               	movlw	0
  5713  004186  0100               	movlb	0	; () banked
  5714  004188  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5715  00418A  0E01               	movlw	1
  5716  00418C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5717  00418E  EC2D  F024         	call	_updateServoPosition	;wreg free
  5718                           
  5719                           ;sort.c: 367: break;
  5720  004192  D031               	goto	l7758
  5721  004194                     l7750:
  5722                           
  5723                           ;sort.c: 369: updateServoPosition(1670, 1);
  5724  004194  0E06               	movlw	6
  5725  004196  0100               	movlb	0	; () banked
  5726  004198  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5727  00419A  0E86               	movlw	134
  5728  00419C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5729  00419E  0E00               	movlw	0
  5730  0041A0  0100               	movlb	0	; () banked
  5731  0041A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5732  0041A4  0E01               	movlw	1
  5733  0041A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5734  0041A8  EC2D  F024         	call	_updateServoPosition	;wreg free
  5735                           
  5736                           ;sort.c: 370: break;
  5737  0041AC  D024               	goto	l7758
  5738  0041AE                     l7752:
  5739                           
  5740                           ;sort.c: 372: updateServoPosition(2400, 1);
  5741  0041AE  0E09               	movlw	9
  5742  0041B0  0100               	movlb	0	; () banked
  5743  0041B2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5744  0041B4  0E60               	movlw	96
  5745  0041B6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5746  0041B8  0E00               	movlw	0
  5747  0041BA  0100               	movlb	0	; () banked
  5748  0041BC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5749  0041BE  0E01               	movlw	1
  5750  0041C0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5751  0041C2  EC2D  F024         	call	_updateServoPosition	;wreg free
  5752                           
  5753                           ;sort.c: 376: }
  5754                           
  5755                           ;sort.c: 375: break;
  5756                           
  5757                           ;sort.c: 374: default:
  5758                           
  5759                           ;sort.c: 373: break;
  5760  0041C6  D017               	goto	l7758
  5761  0041C8                     l7756:
  5762  0041C8  C12B  F088         	movff	_cur_can,??_Distribution
  5763  0041CC  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5764                           
  5765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5766                           ; Switch size 1, requested type "space"
  5767                           ; Number of cases is 1, Range of values is 0 to 0
  5768                           ; switch strategies available:
  5769                           ; Name         Instructions Cycles
  5770                           ; simple_byte            4     3 (average)
  5771                           ;	Chosen strategy is simple_byte
  5772  0041D0  0100               	movlb	0	; () banked
  5773  0041D2  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5774  0041D4  0A00               	xorlw	0	; case 0
  5775  0041D6  A4D8               	btfss	status,2,c
  5776  0041D8  D00E               	goto	l7758
  5777                           
  5778                           ; BSR set to: 0
  5779                           ; Switch size 1, requested type "space"
  5780                           ; Number of cases is 4, Range of values is 0 to 3
  5781                           ; switch strategies available:
  5782                           ; Name         Instructions Cycles
  5783                           ; simple_byte           13     7 (average)
  5784                           ;	Chosen strategy is simple_byte
  5785  0041DA  0100               	movlb	0	; () banked
  5786  0041DC  5188               	movf	??_Distribution& (0+255),w,b
  5787  0041DE  0A00               	xorlw	0	; case 0
  5788  0041E0  B4D8               	btfsc	status,2,c
  5789  0041E2  D7BE               	goto	l7746
  5790  0041E4  0A01               	xorlw	1	; case 1
  5791  0041E6  B4D8               	btfsc	status,2,c
  5792  0041E8  D7C8               	goto	l7748
  5793  0041EA  0A03               	xorlw	3	; case 2
  5794  0041EC  B4D8               	btfsc	status,2,c
  5795  0041EE  D7D2               	goto	l7750
  5796  0041F0  0A01               	xorlw	1	; case 3
  5797  0041F2  B4D8               	btfsc	status,2,c
  5798  0041F4  D7DC               	goto	l7752
  5799  0041F6                     l7758:
  5800                           
  5801                           ;sort.c: 377: updateServoPosition(1050, 3);
  5802  0041F6  0E04               	movlw	4
  5803  0041F8  0100               	movlb	0	; () banked
  5804  0041FA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5805  0041FC  0E1A               	movlw	26
  5806  0041FE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5807  004200  0E00               	movlw	0
  5808  004202  0100               	movlb	0	; () banked
  5809  004204  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5810  004206  0E03               	movlw	3
  5811  004208  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5812  00420A  EC2D  F024         	call	_updateServoPosition	;wreg free
  5813                           
  5814                           ;sort.c: 378: servo_timer_target = 750;
  5815  00420E  0E02               	movlw	2
  5816  004210  6E70               	movwf	_servo_timer_target+1,c	;volatile
  5817  004212  0EEE               	movlw	238
  5818  004214  6E6F               	movwf	_servo_timer_target,c	;volatile
  5819                           
  5820                           ;sort.c: 379: f_panning_to_bin = 1;
  5821  004216  0E00               	movlw	0
  5822  004218  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5823  00421A  0E01               	movlw	1
  5824  00421C  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5825                           
  5826                           ;sort.c: 380: f_can_coming_to_distribution = 0;
  5827  00421E  0E00               	movlw	0
  5828  004220  0101               	movlb	1	; () banked
  5829  004222  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5830  004224  0E00               	movlw	0
  5831  004226  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5832  004228  0012               	return	
  5833  00422A                     __end_of_Distribution:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           postinc0	equ	0xFEE
  5842                           wreg	equ	0xFE8
  5843                           postdec1	equ	0xFE5
  5844                           fsr1l	equ	0xFE1
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _machineConfig *****************
  5853 ;; Defined at:
  5854 ;;		line 15 in file "MachineConfig.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;		None
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;Total ram usage:        0 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    7
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_main
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text11
  5883  004C10                     __ptext11:
  5884                           	opt stack 0
  5885  004C10                     _machineConfig:
  5886                           	opt stack 23
  5887                           
  5888                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5889                           
  5890                           ; BSR set to: 1
  5891                           ;incstack = 0
  5892  004C10  0EF0               	movlw	240
  5893  004C12  6ED3               	movwf	4051,c	;volatile
  5894                           
  5895                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5896  004C14  8C9B               	bsf	3995,6,c	;volatile
  5897                           
  5898                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5899  004C16  0E07               	movlw	7
  5900  004C18  6E92               	movwf	3986,c	;volatile
  5901                           
  5902                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5903  004C1A  0EF2               	movlw	242
  5904  004C1C  6E93               	movwf	3987,c	;volatile
  5905                           
  5906                           ;MachineConfig.c: 27: TRISC = 0x00;
  5907  004C1E  0E00               	movlw	0
  5908  004C20  6E94               	movwf	3988,c	;volatile
  5909                           
  5910                           ;MachineConfig.c: 31: TRISD = 0x00;
  5911  004C22  0E00               	movlw	0
  5912  004C24  6E95               	movwf	3989,c	;volatile
  5913                           
  5914                           ;MachineConfig.c: 34: TRISE = 0x00;
  5915  004C26  0E00               	movlw	0
  5916  004C28  6E96               	movwf	3990,c	;volatile
  5917                           
  5918                           ;MachineConfig.c: 37: LATA = 0x00;
  5919  004C2A  0E00               	movlw	0
  5920  004C2C  6E89               	movwf	3977,c	;volatile
  5921                           
  5922                           ;MachineConfig.c: 38: LATB = 0x00;
  5923  004C2E  0E00               	movlw	0
  5924  004C30  6E8A               	movwf	3978,c	;volatile
  5925                           
  5926                           ;MachineConfig.c: 39: LATC = 0x00;
  5927  004C32  0E00               	movlw	0
  5928  004C34  6E8B               	movwf	3979,c	;volatile
  5929                           
  5930                           ;MachineConfig.c: 40: LATD = 0x00;
  5931  004C36  0E00               	movlw	0
  5932  004C38  6E8C               	movwf	3980,c	;volatile
  5933                           
  5934                           ;MachineConfig.c: 41: LATE = 0x00;
  5935  004C3A  0E00               	movlw	0
  5936  004C3C  6E8D               	movwf	3981,c	;volatile
  5937                           
  5938                           ;MachineConfig.c: 43: nRBPU = 0;
  5939  004C3E  9EF1               	bcf	intcon2,7,c	;volatile
  5940                           
  5941                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5942  004C40  0E00               	movlw	0
  5943  004C42  6EC2               	movwf	4034,c	;volatile
  5944                           
  5945                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5946  004C44  0E0D               	movlw	13
  5947  004C46  6EC1               	movwf	4033,c	;volatile
  5948                           
  5949                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5950  004C48  0E00               	movlw	0
  5951  004C4A  6EB5               	movwf	4021,c	;volatile
  5952                           
  5953                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5954  004C4C  96B4               	bcf	4020,3,c	;volatile
  5955                           
  5956                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5957  004C4E  0EB1               	movlw	177
  5958  004C50  6EC0               	movwf	4032,c	;volatile
  5959                           
  5960                           ;MachineConfig.c: 55: INT1IE = 1;
  5961  004C52  86F0               	bsf	intcon3,3,c	;volatile
  5962                           
  5963                           ;MachineConfig.c: 57: TMR0IE = 1;
  5964  004C54  8AF2               	bsf	intcon,5,c	;volatile
  5965                           
  5966                           ;MachineConfig.c: 58: TMR1IE = 1;
  5967  004C56  809D               	bsf	3997,0,c	;volatile
  5968                           
  5969                           ;MachineConfig.c: 59: TMR2IE = 1;
  5970  004C58  829D               	bsf	3997,1,c	;volatile
  5971                           
  5972                           ;MachineConfig.c: 60: TMR3IE = 1;
  5973  004C5A  82A0               	bsf	4000,1,c	;volatile
  5974                           
  5975                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  5976  004C5C  0EB0               	movlw	176
  5977  004C5E  6ECD               	movwf	4045,c	;volatile
  5978                           
  5979                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  5980  004C60  0E7B               	movlw	123
  5981  004C62  6ECA               	movwf	4042,c	;volatile
  5982                           
  5983                           ;MachineConfig.c: 64: PR2 = 0x22;
  5984  004C64  0E22               	movlw	34
  5985  004C66  6ECB               	movwf	4043,c	;volatile
  5986                           
  5987                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  5988  004C68  0EB0               	movlw	176
  5989  004C6A  6EB1               	movwf	4017,c	;volatile
  5990                           
  5991                           ;MachineConfig.c: 66: PEIE = 1;
  5992  004C6C  8CF2               	bsf	intcon,6,c	;volatile
  5993                           
  5994                           ;MachineConfig.c: 67: ADIE = 0;
  5995  004C6E  9C9D               	bcf	3997,6,c	;volatile
  5996                           
  5997                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  5998  004C70  9EF2               	bcf	intcon,7,c	;volatile
  5999  004C72  0012               	return		;funcret
  6000  004C74                     __end_of_machineConfig:
  6001                           	opt stack 0
  6002                           tblptru	equ	0xFF8
  6003                           tblptrh	equ	0xFF7
  6004                           tblptrl	equ	0xFF6
  6005                           tablat	equ	0xFF5
  6006                           prodh	equ	0xFF4
  6007                           prodl	equ	0xFF3
  6008                           intcon	equ	0xFF2
  6009                           intcon2	equ	0xFF1
  6010                           intcon3	equ	0xFF0
  6011                           postinc0	equ	0xFEE
  6012                           wreg	equ	0xFE8
  6013                           postdec1	equ	0xFE5
  6014                           fsr1l	equ	0xFE1
  6015                           indf2	equ	0xFDF
  6016                           postinc2	equ	0xFDE
  6017                           postdec2	equ	0xFDD
  6018                           fsr2h	equ	0xFDA
  6019                           fsr2l	equ	0xFD9
  6020                           status	equ	0xFD8
  6021                           
  6022 ;; *************** function _logRun *****************
  6023 ;; Defined at:
  6024 ;;		line 84 in file "EEPROM.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;  byte_i          1   53[BANK0 ] unsigned char 
  6029 ;;  i               2   55[BANK0 ] int 
  6030 ;;  num             1   49[BANK0 ] unsigned char 
  6031 ;;  addr            2   57[BANK0 ] unsigned short 
  6032 ;;  byte11          1   54[BANK0 ] unsigned char 
  6033 ;;  byte3           1   52[BANK0 ] unsigned char 
  6034 ;;  byte2           1   51[BANK0 ] unsigned char 
  6035 ;;  byte1           1   50[BANK0 ] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;Total ram usage:       10 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:   11
  6052 ;; This function calls:
  6053 ;;		_EEPROM_read
  6054 ;;		_EEPROM_write
  6055 ;; This function is called by:
  6056 ;;		_main
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           	psect	text12
  6061  003BF8                     __ptext12:
  6062                           	opt stack 0
  6063  003BF8                     _logRun:
  6064                           	opt stack 19
  6065                           
  6066                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  6067                           
  6068                           ;incstack = 0
  6069  003BF8  0E00               	movlw	0
  6070  003BFA  0100               	movlb	0	; () banked
  6071  003BFC  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  6072  003BFE  0E00               	movlw	0
  6073  003C00  6F80               	movwf	EEPROM_read@address& (0+255),b
  6074  003C02  ECCB  F02A         	call	_EEPROM_read	;wreg free
  6075  003C06  0100               	movlb	0	; () banked
  6076  003C08  6FFD               	movwf	_sel& (0+255),b
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  6080  003C0A  0100               	movlb	0	; () banked
  6081  003C0C  51FD               	movf	_sel& (0+255),w,b
  6082  003C0E  0D0B               	mullw	11
  6083  003C10  0E01               	movlw	1
  6084  003C12  24F3               	addwf	prodl,w,c
  6085  003C14  0100               	movlb	0	; () banked
  6086  003C16  6FB9               	movwf	logRun@addr& (0+255),b
  6087  003C18  0E00               	movlw	0
  6088  003C1A  20F4               	addwfc	prodh,w,c
  6089  003C1C  0100               	movlb	0	; () banked
  6090  003C1E  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;EEPROM.c: 101: if (sel < 3){
  6094  003C20  0E03               	movlw	3
  6095  003C22  0100               	movlb	0	; () banked
  6096  003C24  61FD               	cpfslt	_sel& (0+255),b
  6097  003C26  D00E               	goto	l9408
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;EEPROM.c: 102: unsigned char num = sel+1;
  6101  003C28  0100               	movlb	0	; () banked
  6102  003C2A  29FD               	incf	_sel& (0+255),w,b
  6103  003C2C  0100               	movlb	0	; () banked
  6104  003C2E  6FB1               	movwf	logRun@num& (0+255),b
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;EEPROM.c: 103: EEPROM_write(0, num);
  6108  003C30  0E00               	movlw	0
  6109  003C32  0100               	movlb	0	; () banked
  6110  003C34  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6111  003C36  0E00               	movlw	0
  6112  003C38  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6113  003C3A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  6114  003C3E  EC30  F020         	call	_EEPROM_write	;wreg free
  6115                           
  6116                           ;EEPROM.c: 104: }
  6117  003C42  D00A               	goto	l9410
  6118  003C44                     l9408:
  6119                           
  6120                           ;EEPROM.c: 105: else{
  6121                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6122  003C44  0E00               	movlw	0
  6123  003C46  0100               	movlb	0	; () banked
  6124  003C48  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6125  003C4A  0E00               	movlw	0
  6126  003C4C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6127  003C4E  0E00               	movlw	0
  6128  003C50  0100               	movlb	0	; () banked
  6129  003C52  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6130  003C54  EC30  F020         	call	_EEPROM_write	;wreg free
  6131  003C58                     l9410:
  6132                           
  6133                           ;EEPROM.c: 107: }
  6134                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6135  003C58  0100               	movlb	0	; () banked
  6136  003C5A  51FE               	movf	_count_total& (0+255),w,b
  6137  003C5C  0980               	iorlw	128
  6138  003C5E  0100               	movlb	0	; () banked
  6139  003C60  6FB2               	movwf	logRun@byte1& (0+255),b
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6143  003C62  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6144  003C66  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6145  003C6A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6146  003C6E  EC30  F020         	call	_EEPROM_write	;wreg free
  6147                           
  6148                           ;EEPROM.c: 112: addr++;
  6149  003C72  0100               	movlb	0	; () banked
  6150  003C74  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6151  003C76  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6155  003C78  0101               	movlb	1	; () banked
  6156  003C7A  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6157  003C7C  0BF0               	andlw	240
  6158  003C7E  0101               	movlb	1	; () banked
  6159  003C80  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6160  003C82  0100               	movlb	0	; () banked
  6161  003C84  6FB3               	movwf	logRun@byte2& (0+255),b
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6165  003C86  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6166  003C8A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6167  003C8E  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6168  003C92  EC30  F020         	call	_EEPROM_write	;wreg free
  6169                           
  6170                           ;EEPROM.c: 117: addr++;
  6171  003C96  0100               	movlb	0	; () banked
  6172  003C98  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6173  003C9A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6177  003C9C  0101               	movlb	1	; () banked
  6178  003C9E  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6179  003CA0  0BF0               	andlw	240
  6180  003CA2  0101               	movlb	1	; () banked
  6181  003CA4  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6182  003CA6  0100               	movlb	0	; () banked
  6183  003CA8  6FB4               	movwf	logRun@byte3& (0+255),b
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6187  003CAA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6188  003CAE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6189  003CB2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6190  003CB6  EC30  F020         	call	_EEPROM_write	;wreg free
  6191                           
  6192                           ;EEPROM.c: 120: addr++;
  6193  003CBA  0100               	movlb	0	; () banked
  6194  003CBC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6195  003CBE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6199  003CC0  0E00               	movlw	0
  6200  003CC2  0100               	movlb	0	; () banked
  6201  003CC4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6202  003CC6  0E00               	movlw	0
  6203  003CC8  6FB7               	movwf	logRun@i& (0+255),b
  6204                           
  6205                           ; BSR set to: 0
  6206  003CCA  0100               	movlb	0	; () banked
  6207  003CCC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6208  003CCE  D008               	goto	l9434
  6209  003CD0  0100               	movlb	0	; () banked
  6210  003CD2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6211  003CD4  E128               	bnz	l1105
  6212  003CD6  0E07               	movlw	7
  6213  003CD8  0100               	movlb	0	; () banked
  6214  003CDA  5DB7               	subwf	logRun@i& (0+255),w,b
  6215  003CDC  B0D8               	btfsc	status,0,c
  6216  003CDE  D023               	goto	l1105
  6217  003CE0                     l9434:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6221  003CE0  90D8               	bcf	status,0,c
  6222  003CE2  0100               	movlb	0	; () banked
  6223  003CE4  35B7               	rlcf	logRun@i& (0+255),w,b
  6224  003CE6  6ED9               	movwf	fsr2l,c
  6225  003CE8  0100               	movlb	0	; () banked
  6226  003CEA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6227  003CEC  6EDA               	movwf	fsr2h,c
  6228  003CEE  0E0E               	movlw	low _startTime
  6229  003CF0  26D9               	addwf	fsr2l,f,c
  6230  003CF2  0E01               	movlw	high _startTime
  6231  003CF4  22DA               	addwfc	fsr2h,f,c
  6232  003CF6  50DF               	movf	indf2,w,c
  6233  003CF8  0100               	movlb	0	; () banked
  6234  003CFA  6FB5               	movwf	logRun@byte_i& (0+255),b
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6238  003CFC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6239  003D00  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6240  003D04  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6241  003D08  EC30  F020         	call	_EEPROM_write	;wreg free
  6242                           
  6243                           ;EEPROM.c: 126: addr++;
  6244  003D0C  0100               	movlb	0	; () banked
  6245  003D0E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6246  003D10  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6247                           
  6248                           ; BSR set to: 0
  6249  003D12  0100               	movlb	0	; () banked
  6250  003D14  4BB7               	infsnz	logRun@i& (0+255),f,b
  6251  003D16  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6252                           
  6253                           ; BSR set to: 0
  6254  003D18  0100               	movlb	0	; () banked
  6255  003D1A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6256  003D1C  D7E1               	goto	l9434
  6257  003D1E  0100               	movlb	0	; () banked
  6258  003D20  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6259  003D22  E101               	bnz	u8730
  6260  003D24  D7D8               	goto	L10
  6261  003D26                     u8730:
  6262  003D26                     l1105:
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;EEPROM.c: 127: }
  6266                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6267  003D26  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6271  003D2A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6272  003D2E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6273  003D32  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6274  003D36  EC30  F020         	call	_EEPROM_write	;wreg free
  6275  003D3A  0012               	return		;funcret
  6276  003D3C                     __end_of_logRun:
  6277                           	opt stack 0
  6278                           tblptru	equ	0xFF8
  6279                           tblptrh	equ	0xFF7
  6280                           tblptrl	equ	0xFF6
  6281                           tablat	equ	0xFF5
  6282                           prodh	equ	0xFF4
  6283                           prodl	equ	0xFF3
  6284                           intcon	equ	0xFF2
  6285                           intcon2	equ	0xFF1
  6286                           intcon3	equ	0xFF0
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _EEPROM_write *****************
  6299 ;; Defined at:
  6300 ;;		line 32 in file "EEPROM.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  address         2   43[BANK0 ] unsigned short 
  6303 ;;  data            1   45[BANK0 ] unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  i               1   48[BANK0 ] unsigned char 
  6306 ;;  i               1   47[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      void 
  6309 ;; Registers used:
  6310 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6316 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;Total ram usage:        6 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:   10
  6323 ;; This function calls:
  6324 ;;		_EEPROM_read
  6325 ;;		_lcdInst
  6326 ;;		_printf
  6327 ;; This function is called by:
  6328 ;;		_Loading
  6329 ;;		_logRun
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text13
  6334  004060                     __ptext13:
  6335                           	opt stack 0
  6336  004060                     _EEPROM_write:
  6337                           	opt stack 18
  6338                           
  6339                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6340                           
  6341                           ;incstack = 0
  6342  004060  84A6               	bsf	4006,2,c	;volatile
  6343                           
  6344                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6345  004062  0100               	movlb	0	; () banked
  6346  004064  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6347  004066  6EAA               	movwf	4010,c	;volatile
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6351  004068  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;EEPROM.c: 39: EEDATA = data;
  6355  00406C  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6359  004070  9EA6               	bcf	4006,7,c	;volatile
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6363  004072  9CA6               	bcf	4006,6,c	;volatile
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6367  004074  9EF2               	bcf	intcon,7,c	;volatile
  6368                           
  6369                           ;EEPROM.c: 45: EECON2 = 0x55;
  6370  004076  0E55               	movlw	85
  6371  004078  6EA7               	movwf	4007,c	;volatile
  6372                           
  6373                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6374  00407A  0EAA               	movlw	170
  6375  00407C  6EA7               	movwf	4007,c	;volatile
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6379  00407E  82A6               	bsf	4006,1,c	;volatile
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6383  004080  8EF2               	bsf	intcon,7,c	;volatile
  6384  004082                     l1083:
  6385  004082  A8A1               	btfss	4001,4,c	;volatile
  6386  004084  D7FE               	goto	l1083
  6387                           
  6388                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6389  004086  98A1               	bcf	4001,4,c	;volatile
  6390                           
  6391                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6392  004088  94A6               	bcf	4006,2,c	;volatile
  6393                           
  6394                           ;EEPROM.c: 57: if(debug){
  6395  00408A  0101               	movlb	1	; () banked
  6396  00408C  512D               	movf	_debug& (0+255),w,b
  6397  00408E  0101               	movlb	1	; () banked
  6398  004090  112E               	iorwf	(_debug+1)& (0+255),w,b
  6399  004092  B4D8               	btfsc	status,2,c
  6400  004094  0012               	return	
  6401                           
  6402                           ; BSR set to: 1
  6403                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6404  004096  0E01               	movlw	1
  6405  004098  ECFD  F02A         	call	_lcdInst
  6406  00409C  0E68               	movlw	104
  6407  00409E  0100               	movlb	0	; () banked
  6408  0040A0  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6409  0040A2  0EE4               	movlw	228
  6410  0040A4                     u9507:
  6411  0040A4  2EE8               	decfsz	wreg,f,c
  6412  0040A6  D7FE               	bra	u9507
  6413  0040A8  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6414  0040AA  D7FC               	bra	u9507
  6415  0040AC  F000               	nop	
  6416                           
  6417                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6418  0040AE  0E80               	movlw	128
  6419  0040B0  ECFD  F02A         	call	_lcdInst
  6420                           
  6421                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6422  0040B4  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6423  0040B8  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6424  0040BC  ECCB  F02A         	call	_EEPROM_read	;wreg free
  6425  0040C0  0100               	movlb	0	; () banked
  6426  0040C2  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6427  0040C4  A4D8               	btfss	status,2,c
  6428  0040C6  D024               	goto	l7080
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6432  0040C8  0ED6               	movlw	low STR_66
  6433  0040CA  0100               	movlb	0	; () banked
  6434  0040CC  6F8E               	movwf	printf@f& (0+255),b
  6435  0040CE  0EFA               	movlw	high STR_66
  6436  0040D0  0100               	movlb	0	; () banked
  6437  0040D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  6438  0040D4  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6439  0040D8  0100               	movlb	0	; () banked
  6440  0040DA  6B91               	clrf	(?_printf+3)& (0+255),b
  6441  0040DC  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6442  0040E0  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6443  0040E4  EC84  F00B         	call	_printf	;wreg free
  6444                           
  6445                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6446  0040E8  0E00               	movlw	0
  6447  0040EA  0100               	movlb	0	; () banked
  6448  0040EC  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6449  0040EE                     l7072:
  6450                           
  6451                           ; BSR set to: 0
  6452  0040EE  0E63               	movlw	99
  6453  0040F0  0100               	movlb	0	; () banked
  6454  0040F2  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6455  0040F4  D001               	goto	l7076
  6456  0040F6  0012               	return	
  6457  0040F8                     l7076:
  6458                           
  6459                           ; BSR set to: 0
  6460  0040F8  0E68               	movlw	104
  6461  0040FA  0100               	movlb	0	; () banked
  6462  0040FC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6463  0040FE  0EE4               	movlw	228
  6464  004100                     u9517:
  6465  004100  2EE8               	decfsz	wreg,f,c
  6466  004102  D7FE               	bra	u9517
  6467  004104  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6468  004106  D7FC               	bra	u9517
  6469  004108  F000               	nop	
  6470  00410A  0100               	movlb	0	; () banked
  6471  00410C  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6472  00410E  D7EF               	goto	l7072
  6473  004110                     l7080:
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6477  004110  0EBC               	movlw	low STR_67
  6478  004112  0100               	movlb	0	; () banked
  6479  004114  6F8E               	movwf	printf@f& (0+255),b
  6480  004116  0EFF               	movlw	high STR_67
  6481  004118  0100               	movlb	0	; () banked
  6482  00411A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6483  00411C  EC84  F00B         	call	_printf	;wreg free
  6484  004120  0E00               	movlw	0
  6485  004122  0100               	movlb	0	; () banked
  6486  004124  6FB0               	movwf	EEPROM_write@i_1436& (0+255),b
  6487  004126                     l7084:
  6488                           
  6489                           ; BSR set to: 0
  6490  004126  0E63               	movlw	99
  6491  004128  0100               	movlb	0	; () banked
  6492  00412A  65B0               	cpfsgt	EEPROM_write@i_1436& (0+255),b
  6493  00412C  D001               	goto	l7088
  6494  00412E  0012               	return	
  6495  004130                     l7088:
  6496                           
  6497                           ; BSR set to: 0
  6498  004130  0E68               	movlw	104
  6499  004132  0100               	movlb	0	; () banked
  6500  004134  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6501  004136  0EE4               	movlw	228
  6502  004138                     u9527:
  6503  004138  2EE8               	decfsz	wreg,f,c
  6504  00413A  D7FE               	bra	u9527
  6505  00413C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6506  00413E  D7FC               	bra	u9527
  6507  004140  F000               	nop	
  6508  004142  0100               	movlb	0	; () banked
  6509  004144  2BB0               	incf	EEPROM_write@i_1436& (0+255),f,b
  6510  004146  D7EF               	goto	l7084
  6511  004148                     __end_of_EEPROM_write:
  6512                           	opt stack 0
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           intcon	equ	0xFF2
  6520                           intcon2	equ	0xFF1
  6521                           intcon3	equ	0xFF0
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           postdec2	equ	0xFDD
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function _EEPROM_read *****************
  6534 ;; Defined at:
  6535 ;;		line 68 in file "EEPROM.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  address         2    0[BANK0 ] unsigned short 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      unsigned char 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;Total ram usage:        2 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    7
  6556 ;; This function calls:
  6557 ;;		Nothing
  6558 ;; This function is called by:
  6559 ;;		_Loading
  6560 ;;		_EEPROM_write
  6561 ;;		_logRun
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text14
  6566  005596                     __ptext14:
  6567                           	opt stack 0
  6568  005596                     _EEPROM_read:
  6569                           	opt stack 20
  6570                           
  6571                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6572                           
  6573                           ;incstack = 0
  6574  005596  0100               	movlb	0	; () banked
  6575  005598  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6576  00559A  6EAA               	movwf	4010,c	;volatile
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6580  00559C  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6584  0055A0  9EA6               	bcf	4006,7,c	;volatile
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6588  0055A2  9CA6               	bcf	4006,6,c	;volatile
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6592  0055A4  80A6               	bsf	4006,0,c	;volatile
  6593  0055A6                     l1096:
  6594  0055A6  B0A6               	btfsc	4006,0,c	;volatile
  6595  0055A8  D7FE               	goto	l1096
  6596                           
  6597                           ;EEPROM.c: 81: return EEDATA;
  6598  0055AA  50A8               	movf	4008,w,c	;volatile
  6599  0055AC  0012               	return	
  6600  0055AE                     __end_of_EEPROM_read:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           intcon2	equ	0xFF1
  6610                           intcon3	equ	0xFF0
  6611                           postinc0	equ	0xFEE
  6612                           wreg	equ	0xFE8
  6613                           postdec1	equ	0xFE5
  6614                           fsr1l	equ	0xFE1
  6615                           indf2	equ	0xFDF
  6616                           postinc2	equ	0xFDE
  6617                           postdec2	equ	0xFDD
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           
  6622 ;; *************** function _initUI *****************
  6623 ;; Defined at:
  6624 ;;		line 62 in file "UI.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;		None
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      void 
  6631 ;; Registers used:
  6632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;Total ram usage:        0 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:   12
  6645 ;; This function calls:
  6646 ;;		_change_state_to_menu_start
  6647 ;;		_loadRTC
  6648 ;; This function is called by:
  6649 ;;		_main
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text15
  6654  00517E                     __ptext15:
  6655                           	opt stack 0
  6656  00517E                     _initUI:
  6657                           	opt stack 18
  6658                           
  6659                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6660                           
  6661                           ;incstack = 0
  6662  00517E  8EF2               	bsf	intcon,7,c	;volatile
  6663                           
  6664                           ;UI.c: 64: machine_state = UI_state;
  6665  005180  0E00               	movlw	0
  6666  005182  0100               	movlb	0	; () banked
  6667  005184  6FFC               	movwf	_machine_state& (0+255),b
  6668                           
  6669                           ;UI.c: 65: logstate = 0;
  6670  005186  0E00               	movlw	0
  6671  005188  0100               	movlb	0	; () banked
  6672  00518A  6FF9               	movwf	(_logstate+1)& (0+255),b
  6673  00518C  0E00               	movlw	0
  6674  00518E  6FF8               	movwf	_logstate& (0+255),b
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;UI.c: 67: if(RTCflag){
  6678  005190  0100               	movlb	0	; () banked
  6679  005192  51EA               	movf	_RTCflag& (0+255),w,b
  6680  005194  0100               	movlb	0	; () banked
  6681  005196  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6682  005198  A4D8               	btfss	status,2,c
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;UI.c: 68: loadRTC();
  6686  00519A  ECA4  F023         	call	_loadRTC	;wreg free
  6687                           
  6688                           ;UI.c: 69: }
  6689                           ;UI.c: 71: change_state_to_menu_start();
  6690  00519E  ECDD  F029         	call	_change_state_to_menu_start	;wreg free
  6691                           
  6692                           ;UI.c: 72: firstboot = 1;
  6693  0051A2  0E00               	movlw	0
  6694  0051A4  0101               	movlb	1	; () banked
  6695  0051A6  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6696  0051A8  0E01               	movlw	1
  6697  0051AA  6F3B               	movwf	_firstboot& (0+255),b
  6698                           
  6699                           ; BSR set to: 1
  6700  0051AC  0012               	return		;funcret
  6701  0051AE                     __end_of_initUI:
  6702                           	opt stack 0
  6703                           tblptru	equ	0xFF8
  6704                           tblptrh	equ	0xFF7
  6705                           tblptrl	equ	0xFF6
  6706                           tablat	equ	0xFF5
  6707                           prodh	equ	0xFF4
  6708                           prodl	equ	0xFF3
  6709                           intcon	equ	0xFF2
  6710                           intcon2	equ	0xFF1
  6711                           intcon3	equ	0xFF0
  6712                           postinc0	equ	0xFEE
  6713                           wreg	equ	0xFE8
  6714                           postdec1	equ	0xFE5
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           fsr2h	equ	0xFDA
  6720                           fsr2l	equ	0xFD9
  6721                           status	equ	0xFD8
  6722                           
  6723 ;; *************** function _loadRTC *****************
  6724 ;; Defined at:
  6725 ;;		line 28 in file "RTC.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;		None
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;  i               2   22[BANK0 ] int 
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;Total ram usage:        3 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    9
  6746 ;; This function calls:
  6747 ;;		_I2C_Master_Init
  6748 ;;		_I2C_Master_Start
  6749 ;;		_I2C_Master_Stop
  6750 ;;		_I2C_Master_Write
  6751 ;; This function is called by:
  6752 ;;		_initUI
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text16
  6757  004748                     __ptext16:
  6758                           	opt stack 0
  6759  004748                     _loadRTC:
  6760                           	opt stack 20
  6761                           
  6762                           ;RTC.c: 30: I2C_Master_Init(10000);
  6763                           
  6764                           ; BSR set to: 1
  6765                           ;incstack = 0
  6766  004748  0E10               	movlw	16
  6767  00474A  0100               	movlb	0	; () banked
  6768  00474C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6769  00474E  0E27               	movlw	39
  6770  004750  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6771  004752  0E00               	movlw	0
  6772  004754  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6773  004756  0E00               	movlw	0
  6774  004758  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6775  00475A  EC6B  F026         	call	_I2C_Master_Init	;wreg free
  6776                           
  6777                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6778  00475E  9EF2               	bcf	intcon,7,c	;volatile
  6779                           
  6780                           ;RTC.c: 34: I2C_Master_Start();
  6781  004760  EC23  F02B         	call	_I2C_Master_Start	;wreg free
  6782                           
  6783                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6784  004764  0E00               	movlw	0
  6785  004766  0100               	movlb	0	; () banked
  6786  004768  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6787  00476A  0ED0               	movlw	208
  6788  00476C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6789  00476E  EC11  F02B         	call	_I2C_Master_Write	;wreg free
  6790                           
  6791                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6792  004772  0E00               	movlw	0
  6793  004774  0100               	movlb	0	; () banked
  6794  004776  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6795  004778  0E00               	movlw	0
  6796  00477A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6797  00477C  EC11  F02B         	call	_I2C_Master_Write	;wreg free
  6798                           
  6799                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6800  004780  0E00               	movlw	0
  6801  004782  0100               	movlb	0	; () banked
  6802  004784  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6803  004786  0E00               	movlw	0
  6804  004788  6F96               	movwf	loadRTC@i& (0+255),b
  6805  00478A                     l7234:
  6806                           
  6807                           ; BSR set to: 0
  6808  00478A  0100               	movlb	0	; () banked
  6809  00478C  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6810  00478E  D008               	goto	l7238
  6811  004790  0100               	movlb	0	; () banked
  6812  004792  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6813  004794  E11B               	bnz	l7244
  6814  004796  0E07               	movlw	7
  6815  004798  0100               	movlb	0	; () banked
  6816  00479A  5D96               	subwf	loadRTC@i& (0+255),w,b
  6817  00479C  B0D8               	btfsc	status,0,c
  6818  00479E  D016               	goto	l7244
  6819  0047A0                     l7238:
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6823  0047A0  0E1C               	movlw	low _time
  6824  0047A2  0100               	movlb	0	; () banked
  6825  0047A4  2596               	addwf	loadRTC@i& (0+255),w,b
  6826  0047A6  6ED9               	movwf	fsr2l,c
  6827  0047A8  0E01               	movlw	high _time
  6828  0047AA  0100               	movlb	0	; () banked
  6829  0047AC  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6830  0047AE  6EDA               	movwf	fsr2h,c
  6831  0047B0  50DF               	movf	indf2,w,c
  6832  0047B2  0100               	movlb	0	; () banked
  6833  0047B4  6F95               	movwf	??_loadRTC& (0+255),b
  6834  0047B6  0100               	movlb	0	; () banked
  6835  0047B8  5195               	movf	??_loadRTC& (0+255),w,b
  6836  0047BA  0100               	movlb	0	; () banked
  6837  0047BC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6838  0047BE  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6839  0047C0  EC11  F02B         	call	_I2C_Master_Write	;wreg free
  6840  0047C4  0100               	movlb	0	; () banked
  6841  0047C6  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6842  0047C8  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6843  0047CA  D7DF               	goto	l7234
  6844  0047CC                     l7244:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;RTC.c: 39: }
  6848                           ;RTC.c: 40: I2C_Master_Stop();
  6849  0047CC  EC1F  F02B         	call	_I2C_Master_Stop	;wreg free
  6850                           
  6851                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6852  0047D0  8EF2               	bsf	intcon,7,c	;volatile
  6853  0047D2  0012               	return		;funcret
  6854  0047D4                     __end_of_loadRTC:
  6855                           	opt stack 0
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           intcon	equ	0xFF2
  6863                           intcon2	equ	0xFF1
  6864                           intcon3	equ	0xFF0
  6865                           postinc0	equ	0xFEE
  6866                           wreg	equ	0xFE8
  6867                           postdec1	equ	0xFE5
  6868                           fsr1l	equ	0xFE1
  6869                           indf2	equ	0xFDF
  6870                           postinc2	equ	0xFDE
  6871                           postdec2	equ	0xFDD
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function _I2C_Master_Init *****************
  6877 ;; Defined at:
  6878 ;;		line 15 in file "I2C.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  c               4   13[BANK0 ] const unsigned long 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;		None
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  1    wreg      void 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6892 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;Total ram usage:        8 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    8
  6899 ;; This function calls:
  6900 ;;		___lldiv
  6901 ;; This function is called by:
  6902 ;;		_main
  6903 ;;		_loadRTC
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           	psect	text17
  6908  004CD6                     __ptext17:
  6909                           	opt stack 0
  6910  004CD6                     _I2C_Master_Init:
  6911                           	opt stack 20
  6912                           
  6913                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6914                           
  6915                           ;incstack = 0
  6916  004CD6  0E00               	movlw	0
  6917  004CD8  6EC7               	movwf	4039,c	;volatile
  6918                           
  6919                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6920  004CDA  0E28               	movlw	40
  6921  004CDC  6EC6               	movwf	4038,c	;volatile
  6922                           
  6923                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6924  004CDE  0E00               	movlw	0
  6925  004CE0  6EC5               	movwf	4037,c	;volatile
  6926                           
  6927                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6928  004CE2  0E00               	movlw	0
  6929  004CE4  0100               	movlb	0	; () banked
  6930  004CE6  6F80               	movwf	___lldiv@dividend& (0+255),b
  6931  004CE8  0E48               	movlw	72
  6932  004CEA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6933  004CEC  0EE8               	movlw	232
  6934  004CEE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6935  004CF0  0E01               	movlw	1
  6936  004CF2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6937  004CF4  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6938  004CF8  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6939  004CFC  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6940  004D00  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6941  004D04  0E02               	movlw	2
  6942  004D06                     u5505:
  6943  004D06  90D8               	bcf	status,0,c
  6944  004D08  0100               	movlb	0	; () banked
  6945  004D0A  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6946  004D0C  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6947  004D0E  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6948  004D10  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6949  004D12  2EE8               	decfsz	wreg,f,c
  6950  004D14  D7F8               	goto	u5505
  6951  004D16  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6952  004D1A  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6953  004D1E  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6954  004D22  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6955  004D26  ECA0  F022         	call	___lldiv	;wreg free
  6956  004D2A  0100               	movlb	0	; () banked
  6957  004D2C  0580               	decf	?___lldiv& (0+255),w,b
  6958  004D2E  6EC8               	movwf	4040,c	;volatile
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;I2C.c: 22: TRISC3 = 1;
  6962  004D30  8694               	bsf	3988,3,c	;volatile
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;I2C.c: 23: TRISC4 = 1;
  6966  004D32  8894               	bsf	3988,4,c	;volatile
  6967                           
  6968                           ; BSR set to: 0
  6969  004D34  0012               	return		;funcret
  6970  004D36                     __end_of_I2C_Master_Init:
  6971                           	opt stack 0
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           intcon2	equ	0xFF1
  6980                           intcon3	equ	0xFF0
  6981                           postinc0	equ	0xFEE
  6982                           wreg	equ	0xFE8
  6983                           postdec1	equ	0xFE5
  6984                           fsr1l	equ	0xFE1
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992 ;; *************** function ___lldiv *****************
  6993 ;; Defined at:
  6994 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;  dividend        4    0[BANK0 ] unsigned long 
  6997 ;;  divisor         4    4[BANK0 ] unsigned long 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  quotient        4    8[BANK0 ] unsigned long 
  7000 ;;  counter         1   12[BANK0 ] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  4    0[BANK0 ] unsigned long 
  7003 ;; Registers used:
  7004 ;;		wreg, status,2, status,0
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7010 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;Total ram usage:       13 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    7
  7017 ;; This function calls:
  7018 ;;		Nothing
  7019 ;; This function is called by:
  7020 ;;		_I2C_Master_Init
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           	psect	text18
  7025  004540                     __ptext18:
  7026                           	opt stack 0
  7027  004540                     ___lldiv:
  7028                           	opt stack 20
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;incstack = 0
  7032  004540  0E00               	movlw	0
  7033  004542  0100               	movlb	0	; () banked
  7034  004544  6F88               	movwf	___lldiv@quotient& (0+255),b
  7035  004546  0E00               	movlw	0
  7036  004548  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7037  00454A  0E00               	movlw	0
  7038  00454C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7039  00454E  0E00               	movlw	0
  7040  004550  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7041                           
  7042                           ; BSR set to: 0
  7043  004552  0100               	movlb	0	; () banked
  7044  004554  5184               	movf	___lldiv@divisor& (0+255),w,b
  7045  004556  0100               	movlb	0	; () banked
  7046  004558  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7047  00455A  0100               	movlb	0	; () banked
  7048  00455C  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7049  00455E  0100               	movlb	0	; () banked
  7050  004560  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7051  004562  B4D8               	btfsc	status,2,c
  7052  004564  D042               	goto	l1880
  7053                           
  7054                           ; BSR set to: 0
  7055  004566  0E01               	movlw	1
  7056  004568  0100               	movlb	0	; () banked
  7057  00456A  6F8C               	movwf	___lldiv@counter& (0+255),b
  7058  00456C  D008               	goto	l6638
  7059  00456E                     l6636:
  7060                           
  7061                           ; BSR set to: 0
  7062  00456E  0100               	movlb	0	; () banked
  7063  004570  90D8               	bcf	status,0,c
  7064  004572  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7065  004574  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7066  004576  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7067  004578  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7068  00457A  0100               	movlb	0	; () banked
  7069  00457C  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7070  00457E                     l6638:
  7071                           
  7072                           ; BSR set to: 0
  7073  00457E  0100               	movlb	0	; () banked
  7074  004580  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7075  004582  D7F5               	goto	l6636
  7076  004584                     l6640:
  7077                           
  7078                           ; BSR set to: 0
  7079  004584  0100               	movlb	0	; () banked
  7080  004586  90D8               	bcf	status,0,c
  7081  004588  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7082  00458A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7083  00458C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7084  00458E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7085                           
  7086                           ; BSR set to: 0
  7087  004590  0100               	movlb	0	; () banked
  7088  004592  5184               	movf	___lldiv@divisor& (0+255),w,b
  7089  004594  0100               	movlb	0	; () banked
  7090  004596  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7091  004598  0100               	movlb	0	; () banked
  7092  00459A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7093  00459C  0100               	movlb	0	; () banked
  7094  00459E  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7095  0045A0  0100               	movlb	0	; () banked
  7096  0045A2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7097  0045A4  0100               	movlb	0	; () banked
  7098  0045A6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7099  0045A8  0100               	movlb	0	; () banked
  7100  0045AA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7101  0045AC  0100               	movlb	0	; () banked
  7102  0045AE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7103  0045B0  A0D8               	btfss	status,0,c
  7104  0045B2  D012               	goto	l6648
  7105                           
  7106                           ; BSR set to: 0
  7107  0045B4  0100               	movlb	0	; () banked
  7108  0045B6  5184               	movf	___lldiv@divisor& (0+255),w,b
  7109  0045B8  0100               	movlb	0	; () banked
  7110  0045BA  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7111  0045BC  0100               	movlb	0	; () banked
  7112  0045BE  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7113  0045C0  0100               	movlb	0	; () banked
  7114  0045C2  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7115  0045C4  0100               	movlb	0	; () banked
  7116  0045C6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7117  0045C8  0100               	movlb	0	; () banked
  7118  0045CA  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7119  0045CC  0100               	movlb	0	; () banked
  7120  0045CE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7121  0045D0  0100               	movlb	0	; () banked
  7122  0045D2  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7123                           
  7124                           ; BSR set to: 0
  7125  0045D4  0100               	movlb	0	; () banked
  7126  0045D6  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7127  0045D8                     l6648:
  7128                           
  7129                           ; BSR set to: 0
  7130  0045D8  0100               	movlb	0	; () banked
  7131  0045DA  90D8               	bcf	status,0,c
  7132  0045DC  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7133  0045DE  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7134  0045E0  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7135  0045E2  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7136                           
  7137                           ; BSR set to: 0
  7138  0045E4  0100               	movlb	0	; () banked
  7139  0045E6  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7140  0045E8  D7CD               	goto	l6640
  7141  0045EA                     l1880:
  7142                           
  7143                           ; BSR set to: 0
  7144  0045EA  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7145  0045EE  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7146  0045F2  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7147  0045F6  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7148                           
  7149                           ; BSR set to: 0
  7150  0045FA  0012               	return		;funcret
  7151  0045FC                     __end_of___lldiv:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           intcon	equ	0xFF2
  7160                           intcon2	equ	0xFF1
  7161                           intcon3	equ	0xFF0
  7162                           postinc0	equ	0xFEE
  7163                           wreg	equ	0xFE8
  7164                           postdec1	equ	0xFE5
  7165                           fsr1l	equ	0xFE1
  7166                           indf2	equ	0xFDF
  7167                           postinc2	equ	0xFDE
  7168                           postdec2	equ	0xFDD
  7169                           fsr2h	equ	0xFDA
  7170                           fsr2l	equ	0xFD9
  7171                           status	equ	0xFD8
  7172                           
  7173 ;; *************** function _change_state_to_menu_start *****************
  7174 ;; Defined at:
  7175 ;;		line 477 in file "UI.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;		None
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;		None
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      void 
  7182 ;; Registers used:
  7183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;Total ram usage:        0 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:   11
  7196 ;; This function calls:
  7197 ;;		_lcdInst
  7198 ;;		_printRTC
  7199 ;;		_printf
  7200 ;; This function is called by:
  7201 ;;		_initUI
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           	psect	text19
  7206  0053BA                     __ptext19:
  7207                           	opt stack 0
  7208  0053BA                     _change_state_to_menu_start:
  7209                           	opt stack 18
  7210                           
  7211                           ;UI.c: 478: cur_state = 0;
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;incstack = 0
  7215  0053BA  0E00               	movlw	0
  7216  0053BC  0100               	movlb	0	; () banked
  7217  0053BE  6FED               	movwf	(_cur_state+1)& (0+255),b
  7218  0053C0  0E00               	movlw	0
  7219  0053C2  6FEC               	movwf	_cur_state& (0+255),b
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;UI.c: 480: lcdInst(0b10000000);;
  7223  0053C4  0E80               	movlw	128
  7224  0053C6  ECFD  F02A         	call	_lcdInst
  7225                           
  7226                           ;UI.c: 481: printRTC();
  7227  0053CA  EC9B  F012         	call	_printRTC	;wreg free
  7228                           
  7229                           ;UI.c: 482: lcdInst(0b11000000);;
  7230  0053CE  0EC0               	movlw	192
  7231  0053D0  ECFD  F02A         	call	_lcdInst
  7232                           
  7233                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7234  0053D4  0E01               	movlw	low STR_30
  7235  0053D6  0100               	movlb	0	; () banked
  7236  0053D8  6F8E               	movwf	printf@f& (0+255),b
  7237  0053DA  0EFE               	movlw	high STR_30
  7238  0053DC  0100               	movlb	0	; () banked
  7239  0053DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  7240  0053E0  EC84  F00B         	call	_printf	;wreg free
  7241  0053E4  0012               	return		;funcret
  7242  0053E6                     __end_of_change_state_to_menu_start:
  7243                           	opt stack 0
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           intcon2	equ	0xFF1
  7252                           intcon3	equ	0xFF0
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           postdec1	equ	0xFE5
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function _initTime *****************
  7265 ;; Defined at:
  7266 ;;		line 17 in file "RTC.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  s               1    wreg     unsigned char 
  7269 ;;  m               1    0[BANK0 ] unsigned char 
  7270 ;;  h               1    1[BANK0 ] unsigned char 
  7271 ;;  w               1    2[BANK0 ] unsigned char 
  7272 ;;  DD              1    3[BANK0 ] unsigned char 
  7273 ;;  MM              1    4[BANK0 ] unsigned char 
  7274 ;;  YY              1    5[BANK0 ] unsigned char 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  s               1    6[BANK0 ] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7286 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;Total ram usage:        7 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    7
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_main
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text20
  7301  00551E                     __ptext20:
  7302                           	opt stack 0
  7303  00551E                     _initTime:
  7304                           	opt stack 23
  7305                           
  7306                           ;incstack = 0
  7307                           ;initTime@s stored from wreg
  7308  00551E  0100               	movlb	0	; () banked
  7309  005520  6F86               	movwf	initTime@s& (0+255),b
  7310                           
  7311                           ;RTC.c: 19: time[0] = s;
  7312  005522  C086  F11C         	movff	initTime@s,_time
  7313                           
  7314                           ;RTC.c: 20: time[1] = m;
  7315  005526  C080  F11D         	movff	initTime@m,_time+1
  7316                           
  7317                           ;RTC.c: 21: time[2] = h;
  7318  00552A  C081  F11E         	movff	initTime@h,_time+2
  7319                           
  7320                           ;RTC.c: 22: time[3] = w;
  7321  00552E  C082  F11F         	movff	initTime@w,_time+3
  7322                           
  7323                           ;RTC.c: 23: time[4] = DD;
  7324  005532  C083  F120         	movff	initTime@DD,_time+4
  7325                           
  7326                           ;RTC.c: 24: time[5] = MM;
  7327  005536  C084  F121         	movff	initTime@MM,_time+5
  7328                           
  7329                           ;RTC.c: 25: time[6] = YY;
  7330  00553A  C085  F122         	movff	initTime@YY,_time+6
  7331  00553E  0012               	return		;funcret
  7332  005540                     __end_of_initTime:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           intcon2	equ	0xFF1
  7342                           intcon3	equ	0xFF0
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           postdec1	equ	0xFE5
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           postinc2	equ	0xFDE
  7349                           postdec2	equ	0xFDD
  7350                           fsr2h	equ	0xFDA
  7351                           fsr2l	equ	0xFD9
  7352                           status	equ	0xFD8
  7353                           
  7354 ;; *************** function _initLCD *****************
  7355 ;; Defined at:
  7356 ;;		line 48 in file "lcd.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;		None
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;		None
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		wreg, status,2, status,0, cstack
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;Total ram usage:        1 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    9
  7377 ;; This function calls:
  7378 ;;		_lcdInst
  7379 ;; This function is called by:
  7380 ;;		_main
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text21
  7385  004F7C                     __ptext21:
  7386                           	opt stack 0
  7387  004F7C                     _initLCD:
  7388                           	opt stack 21
  7389                           
  7390                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7391                           
  7392                           ;incstack = 0
  7393  004F7C  0E9C               	movlw	156
  7394  004F7E  0100               	movlb	0	; () banked
  7395  004F80  6F83               	movwf	??_initLCD& (0+255),b
  7396  004F82  0ED7               	movlw	215
  7397  004F84                     u9537:
  7398  004F84  2EE8               	decfsz	wreg,f,c
  7399  004F86  D7FE               	bra	u9537
  7400  004F88  2F83               	decfsz	??_initLCD& (0+255),f,b
  7401  004F8A  D7FC               	bra	u9537
  7402                           
  7403                           ;lcd.c: 50: lcdInst(0b00110011);
  7404  004F8C  0E33               	movlw	51
  7405  004F8E  ECFD  F02A         	call	_lcdInst
  7406                           
  7407                           ;lcd.c: 51: lcdInst(0b00110010);
  7408  004F92  0E32               	movlw	50
  7409  004F94  ECFD  F02A         	call	_lcdInst
  7410                           
  7411                           ;lcd.c: 53: lcdInst(0b00101000);
  7412  004F98  0E28               	movlw	40
  7413  004F9A  ECFD  F02A         	call	_lcdInst
  7414                           
  7415                           ;lcd.c: 54: lcdInst(0b00001100);
  7416  004F9E  0E0C               	movlw	12
  7417  004FA0  ECFD  F02A         	call	_lcdInst
  7418                           
  7419                           ;lcd.c: 55: lcdInst(0b00000110);
  7420  004FA4  0E06               	movlw	6
  7421  004FA6  ECFD  F02A         	call	_lcdInst
  7422                           
  7423                           ;lcd.c: 56: lcdInst(0b00000001);
  7424  004FAA  0E01               	movlw	1
  7425  004FAC  ECFD  F02A         	call	_lcdInst
  7426                           
  7427                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7428  004FB0  0E9C               	movlw	156
  7429  004FB2  0100               	movlb	0	; () banked
  7430  004FB4  6F83               	movwf	??_initLCD& (0+255),b
  7431  004FB6  0ED7               	movlw	215
  7432  004FB8                     u9547:
  7433  004FB8  2EE8               	decfsz	wreg,f,c
  7434  004FBA  D7FE               	bra	u9547
  7435  004FBC  2F83               	decfsz	??_initLCD& (0+255),f,b
  7436  004FBE  D7FC               	bra	u9547
  7437  004FC0  0012               	return		;funcret
  7438  004FC2                     __end_of_initLCD:
  7439                           	opt stack 0
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           intcon2	equ	0xFF1
  7448                           intcon3	equ	0xFF0
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _UI *****************
  7461 ;; Defined at:
  7462 ;;		line 76 in file "UI.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  i               1   73[BANK0 ] unsigned char 
  7467 ;;  i               1   85[BANK0 ] unsigned char 
  7468 ;;  i               1   84[BANK0 ] unsigned char 
  7469 ;;  i               1   83[BANK0 ] unsigned char 
  7470 ;;  i               1   82[BANK0 ] unsigned char 
  7471 ;;  i               1   81[BANK0 ] unsigned char 
  7472 ;;  i               1   80[BANK0 ] unsigned char 
  7473 ;;  i               1   79[BANK0 ] unsigned char 
  7474 ;;  i               1   78[BANK0 ] unsigned char 
  7475 ;;  i               1   77[BANK0 ] unsigned char 
  7476 ;;  i               1   76[BANK0 ] unsigned char 
  7477 ;;  i               1   75[BANK0 ] unsigned char 
  7478 ;;  i               1   74[BANK0 ] unsigned char 
  7479 ;;  month           4   86[BANK0 ] unsigned char [4]
  7480 ;;  i               1   72[BANK0 ] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;Total ram usage:       22 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:   11
  7497 ;; This function calls:
  7498 ;;		___awdiv
  7499 ;;		___awmod
  7500 ;;		_change_state_to_menu_12
  7501 ;;		_change_state_to_menu_22
  7502 ;;		_lcdInst
  7503 ;;		_printRTC
  7504 ;;		_printf
  7505 ;;		_strcpy
  7506 ;; This function is called by:
  7507 ;;		_main
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           	psect	text22
  7512  000012                     __ptext22:
  7513                           	opt stack 0
  7514  000012                     _UI:
  7515                           	opt stack 19
  7516                           
  7517                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7518                           
  7519                           ;incstack = 0
  7520  000012  0E02               	movlw	2
  7521  000014  0100               	movlb	0	; () banked
  7522  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  7523  000018  A4D8               	btfss	status,2,c
  7524  00001A  D086               	goto	l8838
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7528  00001C  0E01               	movlw	1
  7529  00001E  ECFD  F02A         	call	_lcdInst
  7530  000022  0E68               	movlw	104
  7531  000024  0100               	movlb	0	; () banked
  7532  000026  6FC4               	movwf	??_UI& (0+255),b
  7533  000028  0EE4               	movlw	228
  7534  00002A                     u9557:
  7535  00002A  2EE8               	decfsz	wreg,f,c
  7536  00002C  D7FE               	bra	u9557
  7537  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  7538  000030  D7FC               	bra	u9557
  7539  000032  F000               	nop	
  7540                           
  7541                           ;UI.c: 79: lcdInst(0b10000000);;
  7542  000034  0E80               	movlw	128
  7543  000036  ECFD  F02A         	call	_lcdInst
  7544                           
  7545                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7546  00003A  0E69               	movlw	low STR_1
  7547  00003C  0100               	movlb	0	; () banked
  7548  00003E  6F8E               	movwf	printf@f& (0+255),b
  7549  000040  0EFB               	movlw	high STR_1
  7550  000042  0100               	movlb	0	; () banked
  7551  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  7552  000046  0E01               	movlw	1
  7553  000048  0100               	movlb	0	; () banked
  7554  00004A  25FD               	addwf	_sel& (0+255),w,b
  7555  00004C  0100               	movlb	0	; () banked
  7556  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  7557  000050  0100               	movlb	0	; () banked
  7558  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  7559  000054  0E00               	movlw	0
  7560  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7561  000058  EC84  F00B         	call	_printf	;wreg free
  7562                           
  7563                           ;UI.c: 81: lcdInst(0b11000000);;
  7564  00005C  0EC0               	movlw	192
  7565  00005E  ECFD  F02A         	call	_lcdInst
  7566                           
  7567                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7568  000062  0E0E               	movlw	14
  7569  000064  0100               	movlb	0	; () banked
  7570  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7571  000068  0E10               	movlw	16
  7572  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  7573  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  7574  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7575  000074  EC53  F023         	call	___awmod	;wreg free
  7576  000078  C080  F0C6         	movff	?___awmod,_UI$2419
  7577  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2419+1
  7578                           
  7579                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7580  000080  0E31               	movlw	low STR_2
  7581  000082  0100               	movlb	0	; () banked
  7582  000084  6F8E               	movwf	printf@f& (0+255),b
  7583  000086  0EFF               	movlw	high STR_2
  7584  000088  0100               	movlb	0	; () banked
  7585  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7586  00008C  0E0E               	movlw	14
  7587  00008E  0100               	movlb	0	; () banked
  7588  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7589  000092  0E10               	movlw	16
  7590  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  7591  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  7592  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7593  00009E  EC53  F023         	call	___awmod	;wreg free
  7594  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  7595  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7596  0000AA  0E00               	movlw	0
  7597  0000AC  0100               	movlb	0	; () banked
  7598  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7599  0000B0  0E3C               	movlw	60
  7600  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  7601  0000B4  EC41  F022         	call	___awdiv	;wreg free
  7602  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  7603  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  7604  0000C0  C0C6  F080         	movff	_UI$2419,___awmod@dividend
  7605  0000C4  C0C7  F081         	movff	_UI$2419+1,___awmod@dividend+1
  7606  0000C8  0E00               	movlw	0
  7607  0000CA  0100               	movlb	0	; () banked
  7608  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7609  0000CE  0E3C               	movlw	60
  7610  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  7611  0000D2  EC53  F023         	call	___awmod	;wreg free
  7612  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  7613  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  7614  0000DE  EC84  F00B         	call	_printf	;wreg free
  7615  0000E2                     l180:
  7616  0000E2  B281               	btfsc	3969,1,c	;volatile
  7617  0000E4  D7FE               	goto	l180
  7618  0000E6                     l183:
  7619  0000E6  A281               	btfss	3969,1,c	;volatile
  7620  0000E8  D7FE               	goto	l183
  7621                           
  7622                           ;UI.c: 86: }
  7623                           ;UI.c: 87: if(cur_state == 12){
  7624  0000EA  0E0C               	movlw	12
  7625  0000EC  0100               	movlb	0	; () banked
  7626  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  7627  0000F0  0100               	movlb	0	; () banked
  7628  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7629  0000F4  A4D8               	btfss	status,2,c
  7630  0000F6  D003               	goto	l8832
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;UI.c: 88: change_state_to_menu_12();
  7634  0000F8  EC3B  F028         	call	_change_state_to_menu_12	;wreg free
  7635                           
  7636                           ;UI.c: 89: }
  7637  0000FC  D002               	goto	l188
  7638  0000FE                     l8832:
  7639                           
  7640                           ;UI.c: 90: else{
  7641                           ;UI.c: 91: change_state_to_menu_22();
  7642  0000FE  EC1F  F028         	call	_change_state_to_menu_22	;wreg free
  7643  000102                     l188:
  7644  000102  B281               	btfsc	3969,1,c	;volatile
  7645  000104  D7FE               	goto	l188
  7646                           
  7647                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  7648  000106  0E05               	movlw	5
  7649  000108  0100               	movlb	0	; () banked
  7650  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  7651  00010C  0E0F               	movlw	15
  7652  00010E  0100               	movlb	0	; () banked
  7653  000110  6FC4               	movwf	??_UI& (0+255),b
  7654  000112  0EF1               	movlw	241
  7655  000114                     u9567:
  7656  000114  2EE8               	decfsz	wreg,f,c
  7657  000116  D7FE               	bra	u9567
  7658  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  7659  00011A  D7FC               	bra	u9567
  7660  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  7661  00011E  D7FA               	bra	u9567
  7662                           
  7663                           ;UI.c: 95: machine_state = UI_state;
  7664  000120  0E00               	movlw	0
  7665  000122  0100               	movlb	0	; () banked
  7666  000124  6FFC               	movwf	_machine_state& (0+255),b
  7667                           
  7668                           ;UI.c: 96: }
  7669  000126  D3D0               	goto	l9158
  7670  000128                     l8838:
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;UI.c: 97: else if(cur_state == 0){
  7674  000128  0100               	movlb	0	; () banked
  7675  00012A  51EC               	movf	_cur_state& (0+255),w,b
  7676  00012C  0100               	movlb	0	; () banked
  7677  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7678  000130  A4D8               	btfss	status,2,c
  7679  000132  D3CA               	goto	l9158
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7683  000134  0E00               	movlw	0
  7684  000136  0100               	movlb	0	; () banked
  7685  000138  6FC8               	movwf	UI@i& (0+255),b
  7686  00013A                     l8842:
  7687                           
  7688                           ; BSR set to: 0
  7689  00013A  0E63               	movlw	99
  7690  00013C  0100               	movlb	0	; () banked
  7691  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  7692  000140  D001               	goto	l8846
  7693  000142  D00C               	goto	l8850
  7694  000144                     l8846:
  7695                           
  7696                           ; BSR set to: 0
  7697  000144  0E68               	movlw	104
  7698  000146  0100               	movlb	0	; () banked
  7699  000148  6FC4               	movwf	??_UI& (0+255),b
  7700  00014A  0EE4               	movlw	228
  7701  00014C                     u9577:
  7702  00014C  2EE8               	decfsz	wreg,f,c
  7703  00014E  D7FE               	bra	u9577
  7704  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  7705  000152  D7FC               	bra	u9577
  7706  000154  F000               	nop	
  7707  000156  0100               	movlb	0	; () banked
  7708  000158  2BC8               	incf	UI@i& (0+255),f,b
  7709  00015A  D7EF               	goto	l8842
  7710  00015C                     l8850:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;UI.c: 99: if(cur_state == 0){
  7714  00015C  0100               	movlb	0	; () banked
  7715  00015E  51EC               	movf	_cur_state& (0+255),w,b
  7716  000160  0100               	movlb	0	; () banked
  7717  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7718  000164  A4D8               	btfss	status,2,c
  7719  000166  D3B0               	goto	l9158
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;UI.c: 100: printRTC();
  7723  000168  EC9B  F012         	call	_printRTC	;wreg free
  7724                           
  7725                           ;UI.c: 101: }
  7726                           ;UI.c: 102: }
  7727                           ;UI.c: 103: while(logstate){
  7728  00016C  D3AD               	goto	l9158
  7729  00016E                     l8854:
  7730                           
  7731                           ;UI.c: 105: if(!log_completion){
  7732  00016E  5063               	movf	_log_completion,w,c
  7733  000170  1064               	iorwf	_log_completion+1,w,c
  7734  000172  A4D8               	btfss	status,2,c
  7735  000174  D041               	goto	l8884
  7736                           
  7737                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7738  000176  0E01               	movlw	1
  7739  000178  ECFD  F02A         	call	_lcdInst
  7740  00017C  0E68               	movlw	104
  7741  00017E  0100               	movlb	0	; () banked
  7742  000180  6FC4               	movwf	??_UI& (0+255),b
  7743  000182  0EE4               	movlw	228
  7744  000184                     u9587:
  7745  000184  2EE8               	decfsz	wreg,f,c
  7746  000186  D7FE               	bra	u9587
  7747  000188  2FC4               	decfsz	??_UI& (0+255),f,b
  7748  00018A  D7FC               	bra	u9587
  7749  00018C  F000               	nop	
  7750                           
  7751                           ;UI.c: 107: lcdInst(0b10000000);;
  7752  00018E  0E80               	movlw	128
  7753  000190  ECFD  F02A         	call	_lcdInst
  7754                           
  7755                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  7756  000194  0E57               	movlw	low STR_3
  7757  000196  0100               	movlb	0	; () banked
  7758  000198  6F8E               	movwf	printf@f& (0+255),b
  7759  00019A  0EFB               	movlw	high STR_3
  7760  00019C  0100               	movlb	0	; () banked
  7761  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7762  0001A0  C0F4  F090         	movff	_log,?_printf+2
  7763  0001A4  C0F5  F091         	movff	_log+1,?_printf+3
  7764  0001A8  EC84  F00B         	call	_printf	;wreg free
  7765                           
  7766                           ;UI.c: 109: lcdInst(0b11000000);;
  7767  0001AC  0EC0               	movlw	192
  7768  0001AE  ECFD  F02A         	call	_lcdInst
  7769                           
  7770                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  7771  0001B2  0E54               	movlw	low STR_4
  7772  0001B4  0100               	movlb	0	; () banked
  7773  0001B6  6F8E               	movwf	printf@f& (0+255),b
  7774  0001B8  0EFE               	movlw	high STR_4
  7775  0001BA  0100               	movlb	0	; () banked
  7776  0001BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7777  0001BE  EC84  F00B         	call	_printf	;wreg free
  7778  0001C2                     l8868:
  7779  0001C2  0E00               	movlw	0
  7780  0001C4  0100               	movlb	0	; () banked
  7781  0001C6  6FC9               	movwf	UI@i_409& (0+255),b
  7782  0001C8                     l8870:
  7783                           
  7784                           ; BSR set to: 0
  7785  0001C8  0E63               	movlw	99
  7786  0001CA  0100               	movlb	0	; () banked
  7787  0001CC  65C9               	cpfsgt	UI@i_409& (0+255),b
  7788  0001CE  D001               	goto	l8874
  7789  0001D0  D00C               	goto	l8878
  7790  0001D2                     l8874:
  7791                           
  7792                           ; BSR set to: 0
  7793  0001D2  0E68               	movlw	104
  7794  0001D4  0100               	movlb	0	; () banked
  7795  0001D6  6FC4               	movwf	??_UI& (0+255),b
  7796  0001D8  0EE4               	movlw	228
  7797  0001DA                     u9597:
  7798  0001DA  2EE8               	decfsz	wreg,f,c
  7799  0001DC  D7FE               	bra	u9597
  7800  0001DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7801  0001E0  D7FC               	bra	u9597
  7802  0001E2  F000               	nop	
  7803  0001E4  0100               	movlb	0	; () banked
  7804  0001E6  2BC9               	incf	UI@i_409& (0+255),f,b
  7805  0001E8  D7EF               	goto	l8870
  7806  0001EA                     l8878:
  7807                           
  7808                           ; BSR set to: 0
  7809  0001EA  0100               	movlb	0	; () banked
  7810  0001EC  51F8               	movf	_logstate& (0+255),w,b
  7811  0001EE  0100               	movlb	0	; () banked
  7812  0001F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7813  0001F2  B4D8               	btfsc	status,2,c
  7814  0001F4  0012               	return	
  7815  0001F6  D7E5               	goto	l8868
  7816  0001F8                     l8884:
  7817                           
  7818                           ;UI.c: 114: else{
  7819                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7820  0001F8  0E01               	movlw	1
  7821  0001FA  ECFD  F02A         	call	_lcdInst
  7822  0001FE  0E68               	movlw	104
  7823  000200  0100               	movlb	0	; () banked
  7824  000202  6FC4               	movwf	??_UI& (0+255),b
  7825  000204  0EE4               	movlw	228
  7826  000206                     u9607:
  7827  000206  2EE8               	decfsz	wreg,f,c
  7828  000208  D7FE               	bra	u9607
  7829  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  7830  00020C  D7FC               	bra	u9607
  7831  00020E  F000               	nop	
  7832                           
  7833                           ;UI.c: 116: lcdInst(0b10000000);;
  7834  000210  0E80               	movlw	128
  7835  000212  ECFD  F02A         	call	_lcdInst
  7836                           
  7837                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  7838  000216  0E57               	movlw	low STR_3
  7839  000218  0100               	movlb	0	; () banked
  7840  00021A  6F8E               	movwf	printf@f& (0+255),b
  7841  00021C  0EFB               	movlw	high STR_3
  7842  00021E  0100               	movlb	0	; () banked
  7843  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  7844  000222  C0F4  F090         	movff	_log,?_printf+2
  7845  000226  C0F5  F091         	movff	_log+1,?_printf+3
  7846  00022A  EC84  F00B         	call	_printf	;wreg free
  7847                           
  7848                           ;UI.c: 118: lcdInst(0b11000000);;
  7849  00022E  0EC0               	movlw	192
  7850  000230  ECFD  F02A         	call	_lcdInst
  7851                           
  7852                           ;UI.c: 119: printf("PAUSE < | BACK >");
  7853  000234  0EF0               	movlw	low STR_6
  7854  000236  0100               	movlb	0	; () banked
  7855  000238  6F8E               	movwf	printf@f& (0+255),b
  7856  00023A  0EFD               	movlw	high STR_6
  7857  00023C  0100               	movlb	0	; () banked
  7858  00023E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7859  000240  EC84  F00B         	call	_printf	;wreg free
  7860                           
  7861                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7862  000244  0E00               	movlw	0
  7863  000246  0100               	movlb	0	; () banked
  7864  000248  6FCA               	movwf	UI@i_412& (0+255),b
  7865  00024A                     l8898:
  7866                           
  7867                           ; BSR set to: 0
  7868  00024A  0E63               	movlw	99
  7869  00024C  0100               	movlb	0	; () banked
  7870  00024E  65CA               	cpfsgt	UI@i_412& (0+255),b
  7871  000250  D001               	goto	l8902
  7872  000252  D00C               	goto	l8906
  7873  000254                     l8902:
  7874                           
  7875                           ; BSR set to: 0
  7876  000254  0E68               	movlw	104
  7877  000256  0100               	movlb	0	; () banked
  7878  000258  6FC4               	movwf	??_UI& (0+255),b
  7879  00025A  0EE4               	movlw	228
  7880  00025C                     u9617:
  7881  00025C  2EE8               	decfsz	wreg,f,c
  7882  00025E  D7FE               	bra	u9617
  7883  000260  2FC4               	decfsz	??_UI& (0+255),f,b
  7884  000262  D7FC               	bra	u9617
  7885  000264  F000               	nop	
  7886  000266  0100               	movlb	0	; () banked
  7887  000268  2BCA               	incf	UI@i_412& (0+255),f,b
  7888  00026A  D7EF               	goto	l8898
  7889  00026C                     l8906:
  7890                           
  7891                           ; BSR set to: 0
  7892  00026C  0100               	movlb	0	; () banked
  7893  00026E  51F8               	movf	_logstate& (0+255),w,b
  7894  000270  0100               	movlb	0	; () banked
  7895  000272  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7896  000274  B4D8               	btfsc	status,2,c
  7897  000276  0012               	return	
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7901                           
  7902                           ; BSR set to: 0
  7903                           
  7904                           ; BSR set to: 0
  7905  000278  0E00               	movlw	0
  7906  00027A  0100               	movlb	0	; () banked
  7907  00027C  6FCB               	movwf	UI@i_413& (0+255),b
  7908  00027E                     l8912:
  7909                           
  7910                           ; BSR set to: 0
  7911  00027E  0E63               	movlw	99
  7912  000280  0100               	movlb	0	; () banked
  7913  000282  65CB               	cpfsgt	UI@i_413& (0+255),b
  7914  000284  D001               	goto	l8916
  7915  000286  D00C               	goto	l8920
  7916  000288                     l8916:
  7917                           
  7918                           ; BSR set to: 0
  7919  000288  0E68               	movlw	104
  7920  00028A  0100               	movlb	0	; () banked
  7921  00028C  6FC4               	movwf	??_UI& (0+255),b
  7922  00028E  0EE4               	movlw	228
  7923  000290                     u9627:
  7924  000290  2EE8               	decfsz	wreg,f,c
  7925  000292  D7FE               	bra	u9627
  7926  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  7927  000296  D7FC               	bra	u9627
  7928  000298  F000               	nop	
  7929  00029A  0100               	movlb	0	; () banked
  7930  00029C  2BCB               	incf	UI@i_413& (0+255),f,b
  7931  00029E  D7EF               	goto	l8912
  7932  0002A0                     l8920:
  7933                           
  7934                           ; BSR set to: 0
  7935  0002A0  0100               	movlb	0	; () banked
  7936  0002A2  51F8               	movf	_logstate& (0+255),w,b
  7937  0002A4  0100               	movlb	0	; () banked
  7938  0002A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7939  0002A8  B4D8               	btfsc	status,2,c
  7940  0002AA  0012               	return	
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7944                           
  7945                           ; BSR set to: 0
  7946                           
  7947                           ; BSR set to: 0
  7948  0002AC  0E01               	movlw	1
  7949  0002AE  ECFD  F02A         	call	_lcdInst
  7950  0002B2  0E68               	movlw	104
  7951  0002B4  0100               	movlb	0	; () banked
  7952  0002B6  6FC4               	movwf	??_UI& (0+255),b
  7953  0002B8  0EE4               	movlw	228
  7954  0002BA                     u9637:
  7955  0002BA  2EE8               	decfsz	wreg,f,c
  7956  0002BC  D7FE               	bra	u9637
  7957  0002BE  2FC4               	decfsz	??_UI& (0+255),f,b
  7958  0002C0  D7FC               	bra	u9637
  7959  0002C2  F000               	nop	
  7960                           
  7961                           ;UI.c: 125: lcdInst(0b10000000);;
  7962  0002C4  0E80               	movlw	128
  7963  0002C6  ECFD  F02A         	call	_lcdInst
  7964                           
  7965                           ;UI.c: 126: printf("START:");
  7966  0002CA  0EC3               	movlw	low STR_7
  7967  0002CC  0100               	movlb	0	; () banked
  7968  0002CE  6F8E               	movwf	printf@f& (0+255),b
  7969  0002D0  0EFF               	movlw	high STR_7
  7970  0002D2  0100               	movlb	0	; () banked
  7971  0002D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7972  0002D6  EC84  F00B         	call	_printf	;wreg free
  7973                           
  7974                           ;UI.c: 127: lcdInst(0b11000000);;
  7975  0002DA  0EC0               	movlw	192
  7976  0002DC  ECFD  F02A         	call	_lcdInst
  7977                           
  7978                           ;UI.c: 128: char month[] = "MMM";
  7979  0002E0  C147  F0D6         	movff	UI@F3241,UI@month
  7980  0002E4  C148  F0D7         	movff	UI@F3241+1,UI@month+1
  7981  0002E8  C149  F0D8         	movff	UI@F3241+2,UI@month+2
  7982  0002EC  C14A  F0D9         	movff	UI@F3241+3,UI@month+3
  7983                           
  7984                           ;UI.c: 129: switch(log_startTime[5]){
  7985  0002F0  D0C3               	goto	l8964
  7986  0002F2                     l8936:
  7987                           
  7988                           ;UI.c: 131: strcpy(month, "JAN");
  7989  0002F2  0ED6               	movlw	low UI@month
  7990  0002F4  0100               	movlb	0	; () banked
  7991  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  7992  0002F8  0E00               	movlw	high UI@month
  7993  0002FA  0100               	movlb	0	; () banked
  7994  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7995  0002FE  0EDA               	movlw	low STR_8
  7996  000300  0100               	movlb	0	; () banked
  7997  000302  6F82               	movwf	strcpy@from& (0+255),b
  7998  000304  0EFF               	movlw	high STR_8
  7999  000306  0100               	movlb	0	; () banked
  8000  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8001  00030A  EC57  F028         	call	_strcpy	;wreg free
  8002                           
  8003                           ;UI.c: 132: break;
  8004  00030E  D0E6               	goto	l8966
  8005  000310                     l8938:
  8006                           
  8007                           ;UI.c: 134: strcpy(month, "FEB");
  8008  000310  0ED6               	movlw	low UI@month
  8009  000312  0100               	movlb	0	; () banked
  8010  000314  6F80               	movwf	strcpy@to& (0+255),b
  8011  000316  0E00               	movlw	high UI@month
  8012  000318  0100               	movlb	0	; () banked
  8013  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8014  00031C  0ECA               	movlw	low STR_9
  8015  00031E  0100               	movlb	0	; () banked
  8016  000320  6F82               	movwf	strcpy@from& (0+255),b
  8017  000322  0EFF               	movlw	high STR_9
  8018  000324  0100               	movlb	0	; () banked
  8019  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8020  000328  EC57  F028         	call	_strcpy	;wreg free
  8021                           
  8022                           ;UI.c: 135: break;
  8023  00032C  D0D7               	goto	l8966
  8024  00032E                     l8940:
  8025                           
  8026                           ;UI.c: 137: strcpy(month, "MAR");
  8027  00032E  0ED6               	movlw	low UI@month
  8028  000330  0100               	movlb	0	; () banked
  8029  000332  6F80               	movwf	strcpy@to& (0+255),b
  8030  000334  0E00               	movlw	high UI@month
  8031  000336  0100               	movlb	0	; () banked
  8032  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8033  00033A  0EE6               	movlw	low STR_10
  8034  00033C  0100               	movlb	0	; () banked
  8035  00033E  6F82               	movwf	strcpy@from& (0+255),b
  8036  000340  0EFF               	movlw	high STR_10
  8037  000342  0100               	movlb	0	; () banked
  8038  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8039  000346  EC57  F028         	call	_strcpy	;wreg free
  8040                           
  8041                           ;UI.c: 138: break;
  8042  00034A  D0C8               	goto	l8966
  8043  00034C                     l8942:
  8044                           
  8045                           ;UI.c: 140: strcpy(month, "APR");
  8046  00034C  0ED6               	movlw	low UI@month
  8047  00034E  0100               	movlb	0	; () banked
  8048  000350  6F80               	movwf	strcpy@to& (0+255),b
  8049  000352  0E00               	movlw	high UI@month
  8050  000354  0100               	movlb	0	; () banked
  8051  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8052  000358  0EEA               	movlw	low STR_11
  8053  00035A  0100               	movlb	0	; () banked
  8054  00035C  6F82               	movwf	strcpy@from& (0+255),b
  8055  00035E  0EFF               	movlw	high STR_11
  8056  000360  0100               	movlb	0	; () banked
  8057  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8058  000364  EC57  F028         	call	_strcpy	;wreg free
  8059                           
  8060                           ;UI.c: 141: break;
  8061  000368  D0B9               	goto	l8966
  8062  00036A                     l8944:
  8063                           
  8064                           ;UI.c: 143: strcpy(month, "MAY");
  8065  00036A  0ED6               	movlw	low UI@month
  8066  00036C  0100               	movlb	0	; () banked
  8067  00036E  6F80               	movwf	strcpy@to& (0+255),b
  8068  000370  0E00               	movlw	high UI@month
  8069  000372  0100               	movlb	0	; () banked
  8070  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8071  000376  0EFA               	movlw	low STR_12
  8072  000378  0100               	movlb	0	; () banked
  8073  00037A  6F82               	movwf	strcpy@from& (0+255),b
  8074  00037C  0EFF               	movlw	high STR_12
  8075  00037E  0100               	movlb	0	; () banked
  8076  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8077  000382  EC57  F028         	call	_strcpy	;wreg free
  8078                           
  8079                           ;UI.c: 144: break;
  8080  000386  D0AA               	goto	l8966
  8081  000388                     l8946:
  8082                           
  8083                           ;UI.c: 146: strcpy(month, "JUN");
  8084  000388  0ED6               	movlw	low UI@month
  8085  00038A  0100               	movlb	0	; () banked
  8086  00038C  6F80               	movwf	strcpy@to& (0+255),b
  8087  00038E  0E00               	movlw	high UI@month
  8088  000390  0100               	movlb	0	; () banked
  8089  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8090  000394  0EDE               	movlw	low STR_13
  8091  000396  0100               	movlb	0	; () banked
  8092  000398  6F82               	movwf	strcpy@from& (0+255),b
  8093  00039A  0EFF               	movlw	high STR_13
  8094  00039C  0100               	movlb	0	; () banked
  8095  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8096  0003A0  EC57  F028         	call	_strcpy	;wreg free
  8097                           
  8098                           ;UI.c: 147: break;
  8099  0003A4  D09B               	goto	l8966
  8100  0003A6                     l8948:
  8101                           
  8102                           ;UI.c: 149: strcpy(month, "JUL");
  8103  0003A6  0ED6               	movlw	low UI@month
  8104  0003A8  0100               	movlb	0	; () banked
  8105  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  8106  0003AC  0E00               	movlw	high UI@month
  8107  0003AE  0100               	movlb	0	; () banked
  8108  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8109  0003B2  0ED6               	movlw	low STR_14
  8110  0003B4  0100               	movlb	0	; () banked
  8111  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  8112  0003B8  0EFF               	movlw	high STR_14
  8113  0003BA  0100               	movlb	0	; () banked
  8114  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8115  0003BE  EC57  F028         	call	_strcpy	;wreg free
  8116                           
  8117                           ;UI.c: 150: break;
  8118  0003C2  D08C               	goto	l8966
  8119  0003C4                     l8950:
  8120                           
  8121                           ;UI.c: 152: strcpy(month, "AUG");
  8122  0003C4  0ED6               	movlw	low UI@month
  8123  0003C6  0100               	movlb	0	; () banked
  8124  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  8125  0003CA  0E00               	movlw	high UI@month
  8126  0003CC  0100               	movlb	0	; () banked
  8127  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8128  0003D0  0ED2               	movlw	low STR_15
  8129  0003D2  0100               	movlb	0	; () banked
  8130  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  8131  0003D6  0EFF               	movlw	high STR_15
  8132  0003D8  0100               	movlb	0	; () banked
  8133  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8134  0003DC  EC57  F028         	call	_strcpy	;wreg free
  8135                           
  8136                           ;UI.c: 153: break;
  8137  0003E0  D07D               	goto	l8966
  8138  0003E2                     l8952:
  8139                           
  8140                           ;UI.c: 155: strcpy(month, "SEP");
  8141  0003E2  0ED6               	movlw	low UI@month
  8142  0003E4  0100               	movlb	0	; () banked
  8143  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  8144  0003E8  0E00               	movlw	high UI@month
  8145  0003EA  0100               	movlb	0	; () banked
  8146  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8147  0003EE  0EE2               	movlw	low STR_16
  8148  0003F0  0100               	movlb	0	; () banked
  8149  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  8150  0003F4  0EFF               	movlw	high STR_16
  8151  0003F6  0100               	movlb	0	; () banked
  8152  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8153  0003FA  EC57  F028         	call	_strcpy	;wreg free
  8154                           
  8155                           ;UI.c: 156: break;
  8156  0003FE  D06E               	goto	l8966
  8157  000400                     l8954:
  8158                           
  8159                           ;UI.c: 158: strcpy(month, "OCT");
  8160  000400  0ED6               	movlw	low UI@month
  8161  000402  0100               	movlb	0	; () banked
  8162  000404  6F80               	movwf	strcpy@to& (0+255),b
  8163  000406  0E00               	movlw	high UI@month
  8164  000408  0100               	movlb	0	; () banked
  8165  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8166  00040C  0EF2               	movlw	low STR_17
  8167  00040E  0100               	movlb	0	; () banked
  8168  000410  6F82               	movwf	strcpy@from& (0+255),b
  8169  000412  0EFF               	movlw	high STR_17
  8170  000414  0100               	movlb	0	; () banked
  8171  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8172  000418  EC57  F028         	call	_strcpy	;wreg free
  8173                           
  8174                           ;UI.c: 159: break;
  8175  00041C  D05F               	goto	l8966
  8176  00041E                     l8956:
  8177                           
  8178                           ;UI.c: 161: strcpy(month, "NOV");
  8179  00041E  0ED6               	movlw	low UI@month
  8180  000420  0100               	movlb	0	; () banked
  8181  000422  6F80               	movwf	strcpy@to& (0+255),b
  8182  000424  0E00               	movlw	high UI@month
  8183  000426  0100               	movlb	0	; () banked
  8184  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8185  00042A  0EF6               	movlw	low STR_18
  8186  00042C  0100               	movlb	0	; () banked
  8187  00042E  6F82               	movwf	strcpy@from& (0+255),b
  8188  000430  0EFF               	movlw	high STR_18
  8189  000432  0100               	movlb	0	; () banked
  8190  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8191  000436  EC57  F028         	call	_strcpy	;wreg free
  8192                           
  8193                           ;UI.c: 162: break;
  8194  00043A  D050               	goto	l8966
  8195  00043C                     l8958:
  8196                           
  8197                           ;UI.c: 164: strcpy(month, "DEC");
  8198  00043C  0ED6               	movlw	low UI@month
  8199  00043E  0100               	movlb	0	; () banked
  8200  000440  6F80               	movwf	strcpy@to& (0+255),b
  8201  000442  0E00               	movlw	high UI@month
  8202  000444  0100               	movlb	0	; () banked
  8203  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8204  000448  0ECE               	movlw	low STR_19
  8205  00044A  0100               	movlb	0	; () banked
  8206  00044C  6F82               	movwf	strcpy@from& (0+255),b
  8207  00044E  0EFF               	movlw	high STR_19
  8208  000450  0100               	movlb	0	; () banked
  8209  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8210  000454  EC57  F028         	call	_strcpy	;wreg free
  8211                           
  8212                           ;UI.c: 165: break;
  8213  000458  D041               	goto	l8966
  8214  00045A                     l8960:
  8215                           
  8216                           ;UI.c: 167: strcpy(month, "ERR");
  8217  00045A  0ED6               	movlw	low UI@month
  8218  00045C  0100               	movlb	0	; () banked
  8219  00045E  6F80               	movwf	strcpy@to& (0+255),b
  8220  000460  0E00               	movlw	high UI@month
  8221  000462  0100               	movlb	0	; () banked
  8222  000464  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8223  000466  0EEE               	movlw	low STR_20
  8224  000468  0100               	movlb	0	; () banked
  8225  00046A  6F82               	movwf	strcpy@from& (0+255),b
  8226  00046C  0EFF               	movlw	high STR_20
  8227  00046E  0100               	movlb	0	; () banked
  8228  000470  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8229  000472  EC57  F028         	call	_strcpy	;wreg free
  8230                           
  8231                           ;UI.c: 169: }
  8232                           
  8233                           ;UI.c: 168: break;
  8234  000476  D032               	goto	l8966
  8235  000478                     l8964:
  8236  000478  EE21  F00A         	lfsr	2,_log_startTime+10
  8237  00047C  CFDE F0C4          	movff	postinc2,??_UI
  8238  000480  CFDD F0C5          	movff	postdec2,??_UI+1
  8239                           
  8240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8241                           ; Switch size 1, requested type "space"
  8242                           ; Number of cases is 1, Range of values is 0 to 0
  8243                           ; switch strategies available:
  8244                           ; Name         Instructions Cycles
  8245                           ; simple_byte            4     3 (average)
  8246                           ;	Chosen strategy is simple_byte
  8247  000484  0100               	movlb	0	; () banked
  8248  000486  51C5               	movf	(??_UI+1)& (0+255),w,b
  8249  000488  0A00               	xorlw	0	; case 0
  8250  00048A  A4D8               	btfss	status,2,c
  8251  00048C  D7E6               	goto	l8960
  8252                           
  8253                           ; BSR set to: 0
  8254                           ; Switch size 1, requested type "space"
  8255                           ; Number of cases is 12, Range of values is 1 to 12
  8256                           ; switch strategies available:
  8257                           ; Name         Instructions Cycles
  8258                           ; simple_byte           37    19 (average)
  8259                           ;	Chosen strategy is simple_byte
  8260  00048E  0100               	movlb	0	; () banked
  8261  000490  51C4               	movf	??_UI& (0+255),w,b
  8262  000492  0A01               	xorlw	1	; case 1
  8263  000494  B4D8               	btfsc	status,2,c
  8264  000496  D72D               	goto	l8936
  8265  000498  0A03               	xorlw	3	; case 2
  8266  00049A  B4D8               	btfsc	status,2,c
  8267  00049C  D739               	goto	l8938
  8268  00049E  0A01               	xorlw	1	; case 3
  8269  0004A0  B4D8               	btfsc	status,2,c
  8270  0004A2  D745               	goto	l8940
  8271  0004A4  0A07               	xorlw	7	; case 4
  8272  0004A6  B4D8               	btfsc	status,2,c
  8273  0004A8  D751               	goto	l8942
  8274  0004AA  0A01               	xorlw	1	; case 5
  8275  0004AC  B4D8               	btfsc	status,2,c
  8276  0004AE  D75D               	goto	l8944
  8277  0004B0  0A03               	xorlw	3	; case 6
  8278  0004B2  B4D8               	btfsc	status,2,c
  8279  0004B4  D769               	goto	l8946
  8280  0004B6  0A01               	xorlw	1	; case 7
  8281  0004B8  B4D8               	btfsc	status,2,c
  8282  0004BA  D775               	goto	l8948
  8283  0004BC  0A0F               	xorlw	15	; case 8
  8284  0004BE  B4D8               	btfsc	status,2,c
  8285  0004C0  D781               	goto	l8950
  8286  0004C2  0A01               	xorlw	1	; case 9
  8287  0004C4  B4D8               	btfsc	status,2,c
  8288  0004C6  D78D               	goto	l8952
  8289  0004C8  0A03               	xorlw	3	; case 10
  8290  0004CA  B4D8               	btfsc	status,2,c
  8291  0004CC  D799               	goto	l8954
  8292  0004CE  0A01               	xorlw	1	; case 11
  8293  0004D0  B4D8               	btfsc	status,2,c
  8294  0004D2  D7A5               	goto	l8956
  8295  0004D4  0A07               	xorlw	7	; case 12
  8296  0004D6  B4D8               	btfsc	status,2,c
  8297  0004D8  D7B1               	goto	l8958
  8298  0004DA  D7BF               	goto	l8960
  8299  0004DC                     l8966:
  8300                           
  8301                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8302  0004DC  0EBE               	movlw	low STR_21
  8303  0004DE  0100               	movlb	0	; () banked
  8304  0004E0  6F8E               	movwf	printf@f& (0+255),b
  8305  0004E2  0EFA               	movlw	high STR_21
  8306  0004E4  0100               	movlb	0	; () banked
  8307  0004E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8308  0004E8  C108  F090         	movff	_log_startTime+8,?_printf+2
  8309  0004EC  C109  F091         	movff	_log_startTime+9,?_printf+3
  8310  0004F0  0ED6               	movlw	low UI@month
  8311  0004F2  0100               	movlb	0	; () banked
  8312  0004F4  6F92               	movwf	(?_printf+4)& (0+255),b
  8313  0004F6  0E00               	movlw	high UI@month
  8314  0004F8  0100               	movlb	0	; () banked
  8315  0004FA  6F93               	movwf	(?_printf+5)& (0+255),b
  8316  0004FC  C104  F094         	movff	_log_startTime+4,?_printf+6
  8317  000500  C105  F095         	movff	_log_startTime+5,?_printf+7
  8318  000504  C102  F096         	movff	_log_startTime+2,?_printf+8
  8319  000508  C103  F097         	movff	_log_startTime+3,?_printf+9
  8320  00050C  C100  F098         	movff	_log_startTime,?_printf+10
  8321  000510  C101  F099         	movff	_log_startTime+1,?_printf+11
  8322  000514  EC84  F00B         	call	_printf	;wreg free
  8323                           
  8324                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8325  000518  0E00               	movlw	0
  8326  00051A  0100               	movlb	0	; () banked
  8327  00051C  6FCC               	movwf	UI@i_431& (0+255),b
  8328  00051E                     l8970:
  8329                           
  8330                           ; BSR set to: 0
  8331  00051E  0E63               	movlw	99
  8332  000520  0100               	movlb	0	; () banked
  8333  000522  65CC               	cpfsgt	UI@i_431& (0+255),b
  8334  000524  D001               	goto	l8974
  8335  000526  D00C               	goto	l8978
  8336  000528                     l8974:
  8337                           
  8338                           ; BSR set to: 0
  8339  000528  0E68               	movlw	104
  8340  00052A  0100               	movlb	0	; () banked
  8341  00052C  6FC4               	movwf	??_UI& (0+255),b
  8342  00052E  0EE4               	movlw	228
  8343  000530                     u9647:
  8344  000530  2EE8               	decfsz	wreg,f,c
  8345  000532  D7FE               	bra	u9647
  8346  000534  2FC4               	decfsz	??_UI& (0+255),f,b
  8347  000536  D7FC               	bra	u9647
  8348  000538  F000               	nop	
  8349  00053A  0100               	movlb	0	; () banked
  8350  00053C  2BCC               	incf	UI@i_431& (0+255),f,b
  8351  00053E  D7EF               	goto	l8970
  8352  000540                     l8978:
  8353                           
  8354                           ; BSR set to: 0
  8355  000540  0100               	movlb	0	; () banked
  8356  000542  51F8               	movf	_logstate& (0+255),w,b
  8357  000544  0100               	movlb	0	; () banked
  8358  000546  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8359  000548  B4D8               	btfsc	status,2,c
  8360  00054A  0012               	return	
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8364                           
  8365                           ; BSR set to: 0
  8366                           
  8367                           ; BSR set to: 0
  8368  00054C  0E00               	movlw	0
  8369  00054E  0100               	movlb	0	; () banked
  8370  000550  6FCD               	movwf	UI@i_432& (0+255),b
  8371  000552                     l8984:
  8372                           
  8373                           ; BSR set to: 0
  8374  000552  0E63               	movlw	99
  8375  000554  0100               	movlb	0	; () banked
  8376  000556  65CD               	cpfsgt	UI@i_432& (0+255),b
  8377  000558  D001               	goto	l8988
  8378  00055A  D00C               	goto	l8992
  8379  00055C                     l8988:
  8380                           
  8381                           ; BSR set to: 0
  8382  00055C  0E68               	movlw	104
  8383  00055E  0100               	movlb	0	; () banked
  8384  000560  6FC4               	movwf	??_UI& (0+255),b
  8385  000562  0EE4               	movlw	228
  8386  000564                     u9657:
  8387  000564  2EE8               	decfsz	wreg,f,c
  8388  000566  D7FE               	bra	u9657
  8389  000568  2FC4               	decfsz	??_UI& (0+255),f,b
  8390  00056A  D7FC               	bra	u9657
  8391  00056C  F000               	nop	
  8392  00056E  0100               	movlb	0	; () banked
  8393  000570  2BCD               	incf	UI@i_432& (0+255),f,b
  8394  000572  D7EF               	goto	l8984
  8395  000574                     l8992:
  8396                           
  8397                           ; BSR set to: 0
  8398  000574  0100               	movlb	0	; () banked
  8399  000576  51F8               	movf	_logstate& (0+255),w,b
  8400  000578  0100               	movlb	0	; () banked
  8401  00057A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8402  00057C  B4D8               	btfsc	status,2,c
  8403  00057E  0012               	return	
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8407                           
  8408                           ; BSR set to: 0
  8409                           
  8410                           ; BSR set to: 0
  8411  000580  0E01               	movlw	1
  8412  000582  ECFD  F02A         	call	_lcdInst
  8413  000586  0E68               	movlw	104
  8414  000588  0100               	movlb	0	; () banked
  8415  00058A  6FC4               	movwf	??_UI& (0+255),b
  8416  00058C  0EE4               	movlw	228
  8417  00058E                     u9667:
  8418  00058E  2EE8               	decfsz	wreg,f,c
  8419  000590  D7FE               	bra	u9667
  8420  000592  2FC4               	decfsz	??_UI& (0+255),f,b
  8421  000594  D7FC               	bra	u9667
  8422  000596  F000               	nop	
  8423                           
  8424                           ;UI.c: 176: lcdInst(0b10000000);;
  8425  000598  0E80               	movlw	128
  8426  00059A  ECFD  F02A         	call	_lcdInst
  8427                           
  8428                           ;UI.c: 177: printf("DURATION:");
  8429  00059E  0E9A               	movlw	low STR_22
  8430  0005A0  0100               	movlb	0	; () banked
  8431  0005A2  6F8E               	movwf	printf@f& (0+255),b
  8432  0005A4  0EFF               	movlw	high STR_22
  8433  0005A6  0100               	movlb	0	; () banked
  8434  0005A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8435  0005AA  EC84  F00B         	call	_printf	;wreg free
  8436                           
  8437                           ;UI.c: 178: lcdInst(0b11000000);;
  8438  0005AE  0EC0               	movlw	192
  8439  0005B0  ECFD  F02A         	call	_lcdInst
  8440                           
  8441                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8442  0005B4  0E0E               	movlw	14
  8443  0005B6  0100               	movlb	0	; () banked
  8444  0005B8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8445  0005BA  0E10               	movlw	16
  8446  0005BC  6F82               	movwf	___awmod@divisor& (0+255),b
  8447  0005BE  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8448  0005C2  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8449  0005C6  EC53  F023         	call	___awmod	;wreg free
  8450  0005CA  C080  F0C6         	movff	?___awmod,_UI$2419
  8451  0005CE  C081  F0C7         	movff	?___awmod+1,_UI$2419+1
  8452                           
  8453                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8454  0005D2  0E23               	movlw	low STR_23
  8455  0005D4  0100               	movlb	0	; () banked
  8456  0005D6  6F8E               	movwf	printf@f& (0+255),b
  8457  0005D8  0EFF               	movlw	high STR_23
  8458  0005DA  0100               	movlb	0	; () banked
  8459  0005DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8460  0005DE  0E0E               	movlw	14
  8461  0005E0  0100               	movlb	0	; () banked
  8462  0005E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8463  0005E4  0E10               	movlw	16
  8464  0005E6  6F82               	movwf	___awmod@divisor& (0+255),b
  8465  0005E8  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8466  0005EC  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8467  0005F0  EC53  F023         	call	___awmod	;wreg free
  8468  0005F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  8469  0005F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8470  0005FC  0E00               	movlw	0
  8471  0005FE  0100               	movlb	0	; () banked
  8472  000600  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8473  000602  0E3C               	movlw	60
  8474  000604  6F88               	movwf	___awdiv@divisor& (0+255),b
  8475  000606  EC41  F022         	call	___awdiv	;wreg free
  8476  00060A  C086  F090         	movff	?___awdiv,?_printf+2
  8477  00060E  C087  F091         	movff	?___awdiv+1,?_printf+3
  8478  000612  C0C6  F080         	movff	_UI$2419,___awmod@dividend
  8479  000616  C0C7  F081         	movff	_UI$2419+1,___awmod@dividend+1
  8480  00061A  0E00               	movlw	0
  8481  00061C  0100               	movlb	0	; () banked
  8482  00061E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8483  000620  0E3C               	movlw	60
  8484  000622  6F82               	movwf	___awmod@divisor& (0+255),b
  8485  000624  EC53  F023         	call	___awmod	;wreg free
  8486  000628  C080  F092         	movff	?___awmod,?_printf+4
  8487  00062C  C081  F093         	movff	?___awmod+1,?_printf+5
  8488  000630  EC84  F00B         	call	_printf	;wreg free
  8489                           
  8490                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8491  000634  0E00               	movlw	0
  8492  000636  0100               	movlb	0	; () banked
  8493  000638  6FCE               	movwf	UI@i_435& (0+255),b
  8494  00063A                     l9012:
  8495                           
  8496                           ; BSR set to: 0
  8497  00063A  0E63               	movlw	99
  8498  00063C  0100               	movlb	0	; () banked
  8499  00063E  65CE               	cpfsgt	UI@i_435& (0+255),b
  8500  000640  D001               	goto	l9016
  8501  000642  D00C               	goto	l9020
  8502  000644                     l9016:
  8503                           
  8504                           ; BSR set to: 0
  8505  000644  0E68               	movlw	104
  8506  000646  0100               	movlb	0	; () banked
  8507  000648  6FC4               	movwf	??_UI& (0+255),b
  8508  00064A  0EE4               	movlw	228
  8509  00064C                     u9677:
  8510  00064C  2EE8               	decfsz	wreg,f,c
  8511  00064E  D7FE               	bra	u9677
  8512  000650  2FC4               	decfsz	??_UI& (0+255),f,b
  8513  000652  D7FC               	bra	u9677
  8514  000654  F000               	nop	
  8515  000656  0100               	movlb	0	; () banked
  8516  000658  2BCE               	incf	UI@i_435& (0+255),f,b
  8517  00065A  D7EF               	goto	l9012
  8518  00065C                     l9020:
  8519                           
  8520                           ; BSR set to: 0
  8521  00065C  0100               	movlb	0	; () banked
  8522  00065E  51F8               	movf	_logstate& (0+255),w,b
  8523  000660  0100               	movlb	0	; () banked
  8524  000662  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8525  000664  B4D8               	btfsc	status,2,c
  8526  000666  0012               	return	
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8530                           
  8531                           ; BSR set to: 0
  8532                           
  8533                           ; BSR set to: 0
  8534  000668  0E00               	movlw	0
  8535  00066A  0100               	movlb	0	; () banked
  8536  00066C  6FCF               	movwf	UI@i_436& (0+255),b
  8537  00066E                     l9026:
  8538                           
  8539                           ; BSR set to: 0
  8540  00066E  0E63               	movlw	99
  8541  000670  0100               	movlb	0	; () banked
  8542  000672  65CF               	cpfsgt	UI@i_436& (0+255),b
  8543  000674  D001               	goto	l9030
  8544  000676  D00C               	goto	l9034
  8545  000678                     l9030:
  8546                           
  8547                           ; BSR set to: 0
  8548  000678  0E68               	movlw	104
  8549  00067A  0100               	movlb	0	; () banked
  8550  00067C  6FC4               	movwf	??_UI& (0+255),b
  8551  00067E  0EE4               	movlw	228
  8552  000680                     u9687:
  8553  000680  2EE8               	decfsz	wreg,f,c
  8554  000682  D7FE               	bra	u9687
  8555  000684  2FC4               	decfsz	??_UI& (0+255),f,b
  8556  000686  D7FC               	bra	u9687
  8557  000688  F000               	nop	
  8558  00068A  0100               	movlb	0	; () banked
  8559  00068C  2BCF               	incf	UI@i_436& (0+255),f,b
  8560  00068E  D7EF               	goto	l9026
  8561  000690                     l9034:
  8562                           
  8563                           ; BSR set to: 0
  8564  000690  0100               	movlb	0	; () banked
  8565  000692  51F8               	movf	_logstate& (0+255),w,b
  8566  000694  0100               	movlb	0	; () banked
  8567  000696  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8568  000698  B4D8               	btfsc	status,2,c
  8569  00069A  0012               	return	
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8573                           
  8574                           ; BSR set to: 0
  8575                           
  8576                           ; BSR set to: 0
  8577  00069C  0E01               	movlw	1
  8578  00069E  ECFD  F02A         	call	_lcdInst
  8579  0006A2  0E68               	movlw	104
  8580  0006A4  0100               	movlb	0	; () banked
  8581  0006A6  6FC4               	movwf	??_UI& (0+255),b
  8582  0006A8  0EE4               	movlw	228
  8583  0006AA                     u9697:
  8584  0006AA  2EE8               	decfsz	wreg,f,c
  8585  0006AC  D7FE               	bra	u9697
  8586  0006AE  2FC4               	decfsz	??_UI& (0+255),f,b
  8587  0006B0  D7FC               	bra	u9697
  8588  0006B2  F000               	nop	
  8589                           
  8590                           ;UI.c: 185: lcdInst(0b10000000);;
  8591  0006B4  0E80               	movlw	128
  8592  0006B6  ECFD  F02A         	call	_lcdInst
  8593                           
  8594                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  8595  0006BA  0E46               	movlw	low STR_24
  8596  0006BC  0100               	movlb	0	; () banked
  8597  0006BE  6F8E               	movwf	printf@f& (0+255),b
  8598  0006C0  0EFD               	movlw	high STR_24
  8599  0006C2  0100               	movlb	0	; () banked
  8600  0006C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8601  0006C6  EC84  F00B         	call	_printf	;wreg free
  8602                           
  8603                           ;UI.c: 187: lcdInst(0b11000000);;
  8604  0006CA  0EC0               	movlw	192
  8605  0006CC  ECFD  F02A         	call	_lcdInst
  8606                           
  8607                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8608  0006D0  0E23               	movlw	low STR_25
  8609  0006D2  0100               	movlb	0	; () banked
  8610  0006D4  6F8E               	movwf	printf@f& (0+255),b
  8611  0006D6  0EFE               	movlw	high STR_25
  8612  0006D8  0100               	movlb	0	; () banked
  8613  0006DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8614  0006DC  C065  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8615  0006E0  C066  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8616  0006E4  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8617  0006E8  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8618  0006EC  EC84  F00B         	call	_printf	;wreg free
  8619                           
  8620                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8621  0006F0  0E00               	movlw	0
  8622  0006F2  0100               	movlb	0	; () banked
  8623  0006F4  6FD0               	movwf	UI@i_439& (0+255),b
  8624  0006F6                     l9052:
  8625                           
  8626                           ; BSR set to: 0
  8627  0006F6  0E63               	movlw	99
  8628  0006F8  0100               	movlb	0	; () banked
  8629  0006FA  65D0               	cpfsgt	UI@i_439& (0+255),b
  8630  0006FC  D001               	goto	l9056
  8631  0006FE  D00C               	goto	l9060
  8632  000700                     l9056:
  8633                           
  8634                           ; BSR set to: 0
  8635  000700  0E68               	movlw	104
  8636  000702  0100               	movlb	0	; () banked
  8637  000704  6FC4               	movwf	??_UI& (0+255),b
  8638  000706  0EE4               	movlw	228
  8639  000708                     u9707:
  8640  000708  2EE8               	decfsz	wreg,f,c
  8641  00070A  D7FE               	bra	u9707
  8642  00070C  2FC4               	decfsz	??_UI& (0+255),f,b
  8643  00070E  D7FC               	bra	u9707
  8644  000710  F000               	nop	
  8645  000712  0100               	movlb	0	; () banked
  8646  000714  2BD0               	incf	UI@i_439& (0+255),f,b
  8647  000716  D7EF               	goto	l9052
  8648  000718                     l9060:
  8649                           
  8650                           ; BSR set to: 0
  8651  000718  0100               	movlb	0	; () banked
  8652  00071A  51F8               	movf	_logstate& (0+255),w,b
  8653  00071C  0100               	movlb	0	; () banked
  8654  00071E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8655  000720  B4D8               	btfsc	status,2,c
  8656  000722  0012               	return	
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8660                           
  8661                           ; BSR set to: 0
  8662                           
  8663                           ; BSR set to: 0
  8664  000724  0E00               	movlw	0
  8665  000726  0100               	movlb	0	; () banked
  8666  000728  6FD1               	movwf	UI@i_440& (0+255),b
  8667  00072A                     l9066:
  8668                           
  8669                           ; BSR set to: 0
  8670  00072A  0E63               	movlw	99
  8671  00072C  0100               	movlb	0	; () banked
  8672  00072E  65D1               	cpfsgt	UI@i_440& (0+255),b
  8673  000730  D001               	goto	l9070
  8674  000732  D00C               	goto	l9074
  8675  000734                     l9070:
  8676                           
  8677                           ; BSR set to: 0
  8678  000734  0E68               	movlw	104
  8679  000736  0100               	movlb	0	; () banked
  8680  000738  6FC4               	movwf	??_UI& (0+255),b
  8681  00073A  0EE4               	movlw	228
  8682  00073C                     u9717:
  8683  00073C  2EE8               	decfsz	wreg,f,c
  8684  00073E  D7FE               	bra	u9717
  8685  000740  2FC4               	decfsz	??_UI& (0+255),f,b
  8686  000742  D7FC               	bra	u9717
  8687  000744  F000               	nop	
  8688  000746  0100               	movlb	0	; () banked
  8689  000748  2BD1               	incf	UI@i_440& (0+255),f,b
  8690  00074A  D7EF               	goto	l9066
  8691  00074C                     l9074:
  8692                           
  8693                           ; BSR set to: 0
  8694  00074C  0100               	movlb	0	; () banked
  8695  00074E  51F8               	movf	_logstate& (0+255),w,b
  8696  000750  0100               	movlb	0	; () banked
  8697  000752  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8698  000754  B4D8               	btfsc	status,2,c
  8699  000756  0012               	return	
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8703                           
  8704                           ; BSR set to: 0
  8705                           
  8706                           ; BSR set to: 0
  8707  000758  0E01               	movlw	1
  8708  00075A  ECFD  F02A         	call	_lcdInst
  8709  00075E  0E68               	movlw	104
  8710  000760  0100               	movlb	0	; () banked
  8711  000762  6FC4               	movwf	??_UI& (0+255),b
  8712  000764  0EE4               	movlw	228
  8713  000766                     u9727:
  8714  000766  2EE8               	decfsz	wreg,f,c
  8715  000768  D7FE               	bra	u9727
  8716  00076A  2FC4               	decfsz	??_UI& (0+255),f,b
  8717  00076C  D7FC               	bra	u9727
  8718  00076E  F000               	nop	
  8719                           
  8720                           ;UI.c: 194: lcdInst(0b10000000);;
  8721  000770  0E80               	movlw	128
  8722  000772  ECFD  F02A         	call	_lcdInst
  8723                           
  8724                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  8725  000776  0E57               	movlw	low STR_26
  8726  000778  0100               	movlb	0	; () banked
  8727  00077A  6F8E               	movwf	printf@f& (0+255),b
  8728  00077C  0EFD               	movlw	high STR_26
  8729  00077E  0100               	movlb	0	; () banked
  8730  000780  6F8F               	movwf	(printf@f+1)& (0+255),b
  8731  000782  EC84  F00B         	call	_printf	;wreg free
  8732                           
  8733                           ;UI.c: 196: lcdInst(0b11000000);;
  8734  000786  0EC0               	movlw	192
  8735  000788  ECFD  F02A         	call	_lcdInst
  8736                           
  8737                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8738  00078C  0E12               	movlw	low STR_27
  8739  00078E  0100               	movlb	0	; () banked
  8740  000790  6F8E               	movwf	printf@f& (0+255),b
  8741  000792  0EFE               	movlw	high STR_27
  8742  000794  0100               	movlb	0	; () banked
  8743  000796  6F8F               	movwf	(printf@f+1)& (0+255),b
  8744  000798  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8745  00079C  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8746  0007A0  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  8747  0007A4  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8748  0007A8  EC84  F00B         	call	_printf	;wreg free
  8749                           
  8750                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8751  0007AC  0E00               	movlw	0
  8752  0007AE  0100               	movlb	0	; () banked
  8753  0007B0  6FD2               	movwf	UI@i_443& (0+255),b
  8754  0007B2                     l9092:
  8755                           
  8756                           ; BSR set to: 0
  8757  0007B2  0E63               	movlw	99
  8758  0007B4  0100               	movlb	0	; () banked
  8759  0007B6  65D2               	cpfsgt	UI@i_443& (0+255),b
  8760  0007B8  D001               	goto	l9096
  8761  0007BA  D00C               	goto	l9100
  8762  0007BC                     l9096:
  8763                           
  8764                           ; BSR set to: 0
  8765  0007BC  0E68               	movlw	104
  8766  0007BE  0100               	movlb	0	; () banked
  8767  0007C0  6FC4               	movwf	??_UI& (0+255),b
  8768  0007C2  0EE4               	movlw	228
  8769  0007C4                     u9737:
  8770  0007C4  2EE8               	decfsz	wreg,f,c
  8771  0007C6  D7FE               	bra	u9737
  8772  0007C8  2FC4               	decfsz	??_UI& (0+255),f,b
  8773  0007CA  D7FC               	bra	u9737
  8774  0007CC  F000               	nop	
  8775  0007CE  0100               	movlb	0	; () banked
  8776  0007D0  2BD2               	incf	UI@i_443& (0+255),f,b
  8777  0007D2  D7EF               	goto	l9092
  8778  0007D4                     l9100:
  8779                           
  8780                           ; BSR set to: 0
  8781  0007D4  0100               	movlb	0	; () banked
  8782  0007D6  51F8               	movf	_logstate& (0+255),w,b
  8783  0007D8  0100               	movlb	0	; () banked
  8784  0007DA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8785  0007DC  B4D8               	btfsc	status,2,c
  8786  0007DE  0012               	return	
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8790                           
  8791                           ; BSR set to: 0
  8792                           
  8793                           ; BSR set to: 0
  8794  0007E0  0E00               	movlw	0
  8795  0007E2  0100               	movlb	0	; () banked
  8796  0007E4  6FD3               	movwf	UI@i_444& (0+255),b
  8797  0007E6                     l9106:
  8798                           
  8799                           ; BSR set to: 0
  8800  0007E6  0E63               	movlw	99
  8801  0007E8  0100               	movlb	0	; () banked
  8802  0007EA  65D3               	cpfsgt	UI@i_444& (0+255),b
  8803  0007EC  D001               	goto	l9110
  8804  0007EE  D00C               	goto	l9114
  8805  0007F0                     l9110:
  8806                           
  8807                           ; BSR set to: 0
  8808  0007F0  0E68               	movlw	104
  8809  0007F2  0100               	movlb	0	; () banked
  8810  0007F4  6FC4               	movwf	??_UI& (0+255),b
  8811  0007F6  0EE4               	movlw	228
  8812  0007F8                     u9747:
  8813  0007F8  2EE8               	decfsz	wreg,f,c
  8814  0007FA  D7FE               	bra	u9747
  8815  0007FC  2FC4               	decfsz	??_UI& (0+255),f,b
  8816  0007FE  D7FC               	bra	u9747
  8817  000800  F000               	nop	
  8818  000802  0100               	movlb	0	; () banked
  8819  000804  2BD3               	incf	UI@i_444& (0+255),f,b
  8820  000806  D7EF               	goto	l9106
  8821  000808                     l9114:
  8822                           
  8823                           ; BSR set to: 0
  8824  000808  0100               	movlb	0	; () banked
  8825  00080A  51F8               	movf	_logstate& (0+255),w,b
  8826  00080C  0100               	movlb	0	; () banked
  8827  00080E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8828  000810  B4D8               	btfsc	status,2,c
  8829  000812  0012               	return	
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8833                           
  8834                           ; BSR set to: 0
  8835                           
  8836                           ; BSR set to: 0
  8837  000814  0E01               	movlw	1
  8838  000816  ECFD  F02A         	call	_lcdInst
  8839  00081A  0E68               	movlw	104
  8840  00081C  0100               	movlb	0	; () banked
  8841  00081E  6FC4               	movwf	??_UI& (0+255),b
  8842  000820  0EE4               	movlw	228
  8843  000822                     u9757:
  8844  000822  2EE8               	decfsz	wreg,f,c
  8845  000824  D7FE               	bra	u9757
  8846  000826  2FC4               	decfsz	??_UI& (0+255),f,b
  8847  000828  D7FC               	bra	u9757
  8848  00082A  F000               	nop	
  8849                           
  8850                           ;UI.c: 203: lcdInst(0b10000000);;
  8851  00082C  0E80               	movlw	128
  8852  00082E  ECFD  F02A         	call	_lcdInst
  8853                           
  8854                           ;UI.c: 204: printf("-- TOTAL CANS --");
  8855  000832  0E68               	movlw	low STR_28
  8856  000834  0100               	movlb	0	; () banked
  8857  000836  6F8E               	movwf	printf@f& (0+255),b
  8858  000838  0EFD               	movlw	high STR_28
  8859  00083A  0100               	movlb	0	; () banked
  8860  00083C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8861  00083E  EC84  F00B         	call	_printf	;wreg free
  8862                           
  8863                           ;UI.c: 205: lcdInst(0b11000000);;
  8864  000842  0EC0               	movlw	192
  8865  000844  ECFD  F02A         	call	_lcdInst
  8866                           
  8867                           ;UI.c: 206: printf("%d", log_count_total);
  8868  000848  0E20               	movlw	low (STR_27+14)
  8869  00084A  0100               	movlb	0	; () banked
  8870  00084C  6F8E               	movwf	printf@f& (0+255),b
  8871  00084E  0EFE               	movlw	high (STR_27+14)
  8872  000850  0100               	movlb	0	; () banked
  8873  000852  6F8F               	movwf	(printf@f+1)& (0+255),b
  8874  000854  C143  F090         	movff	_log_count_total,?_printf+2
  8875  000858  C144  F091         	movff	_log_count_total+1,?_printf+3
  8876  00085C  EC84  F00B         	call	_printf	;wreg free
  8877                           
  8878                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8879  000860  0E00               	movlw	0
  8880  000862  0100               	movlb	0	; () banked
  8881  000864  6FD4               	movwf	UI@i_447& (0+255),b
  8882  000866                     l9132:
  8883                           
  8884                           ; BSR set to: 0
  8885  000866  0E63               	movlw	99
  8886  000868  0100               	movlb	0	; () banked
  8887  00086A  65D4               	cpfsgt	UI@i_447& (0+255),b
  8888  00086C  D001               	goto	l9136
  8889  00086E  D00C               	goto	l9140
  8890  000870                     l9136:
  8891                           
  8892                           ; BSR set to: 0
  8893  000870  0E68               	movlw	104
  8894  000872  0100               	movlb	0	; () banked
  8895  000874  6FC4               	movwf	??_UI& (0+255),b
  8896  000876  0EE4               	movlw	228
  8897  000878                     u9767:
  8898  000878  2EE8               	decfsz	wreg,f,c
  8899  00087A  D7FE               	bra	u9767
  8900  00087C  2FC4               	decfsz	??_UI& (0+255),f,b
  8901  00087E  D7FC               	bra	u9767
  8902  000880  F000               	nop	
  8903  000882  0100               	movlb	0	; () banked
  8904  000884  2BD4               	incf	UI@i_447& (0+255),f,b
  8905  000886  D7EF               	goto	l9132
  8906  000888                     l9140:
  8907                           
  8908                           ; BSR set to: 0
  8909  000888  0100               	movlb	0	; () banked
  8910  00088A  51F8               	movf	_logstate& (0+255),w,b
  8911  00088C  0100               	movlb	0	; () banked
  8912  00088E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8913  000890  B4D8               	btfsc	status,2,c
  8914  000892  0012               	return	
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8918                           
  8919                           ; BSR set to: 0
  8920                           
  8921                           ; BSR set to: 0
  8922  000894  0E00               	movlw	0
  8923  000896  0100               	movlb	0	; () banked
  8924  000898  6FD5               	movwf	UI@i_448& (0+255),b
  8925  00089A                     l9146:
  8926                           
  8927                           ; BSR set to: 0
  8928  00089A  0E63               	movlw	99
  8929  00089C  0100               	movlb	0	; () banked
  8930  00089E  65D5               	cpfsgt	UI@i_448& (0+255),b
  8931  0008A0  D001               	goto	l9150
  8932  0008A2  D00C               	goto	l9154
  8933  0008A4                     l9150:
  8934                           
  8935                           ; BSR set to: 0
  8936  0008A4  0E68               	movlw	104
  8937  0008A6  0100               	movlb	0	; () banked
  8938  0008A8  6FC4               	movwf	??_UI& (0+255),b
  8939  0008AA  0EE4               	movlw	228
  8940  0008AC                     u9777:
  8941  0008AC  2EE8               	decfsz	wreg,f,c
  8942  0008AE  D7FE               	bra	u9777
  8943  0008B0  2FC4               	decfsz	??_UI& (0+255),f,b
  8944  0008B2  D7FC               	bra	u9777
  8945  0008B4  F000               	nop	
  8946  0008B6  0100               	movlb	0	; () banked
  8947  0008B8  2BD5               	incf	UI@i_448& (0+255),f,b
  8948  0008BA  D7EF               	goto	l9146
  8949  0008BC                     l9154:
  8950                           
  8951                           ; BSR set to: 0
  8952  0008BC  0100               	movlb	0	; () banked
  8953  0008BE  51F8               	movf	_logstate& (0+255),w,b
  8954  0008C0  0100               	movlb	0	; () banked
  8955  0008C2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8956  0008C4  B4D8               	btfsc	status,2,c
  8957  0008C6  0012               	return	
  8958  0008C8                     l9158:
  8959  0008C8  0100               	movlb	0	; () banked
  8960  0008CA  51F8               	movf	_logstate& (0+255),w,b
  8961  0008CC  0100               	movlb	0	; () banked
  8962  0008CE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8963  0008D0  B4D8               	btfsc	status,2,c
  8964  0008D2  0012               	return	
  8965  0008D4  D44C               	goto	l8854
  8966  0008D6                     __end_of_UI:
  8967                           	opt stack 0
  8968                           tblptru	equ	0xFF8
  8969                           tblptrh	equ	0xFF7
  8970                           tblptrl	equ	0xFF6
  8971                           tablat	equ	0xFF5
  8972                           prodh	equ	0xFF4
  8973                           prodl	equ	0xFF3
  8974                           intcon	equ	0xFF2
  8975                           intcon2	equ	0xFF1
  8976                           intcon3	equ	0xFF0
  8977                           postinc0	equ	0xFEE
  8978                           wreg	equ	0xFE8
  8979                           postdec1	equ	0xFE5
  8980                           fsr1l	equ	0xFE1
  8981                           indf2	equ	0xFDF
  8982                           postinc2	equ	0xFDE
  8983                           postdec2	equ	0xFDD
  8984                           fsr2h	equ	0xFDA
  8985                           fsr2l	equ	0xFD9
  8986                           status	equ	0xFD8
  8987                           
  8988 ;; *************** function _printRTC *****************
  8989 ;; Defined at:
  8990 ;;		line 63 in file "RTC.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;		None
  8993 ;; Auto vars:     Size  Location     Type
  8994 ;;  i               2   66[BANK0 ] int 
  8995 ;;  INT_time       14   46[BANK0 ] int [7]
  8996 ;;  month           4   62[BANK0 ] unsigned char [4]
  8997 ;;  RTC_month       2   60[BANK0 ] int 
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  1    wreg      void 
  9000 ;; Registers used:
  9001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9008 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9009 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;Total ram usage:       25 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:   10
  9014 ;; This function calls:
  9015 ;;		_getRTC
  9016 ;;		_lcdInst
  9017 ;;		_printf
  9018 ;;		_strcpy
  9019 ;; This function is called by:
  9020 ;;		_UI
  9021 ;;		_change_state_to_menu_start
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text23
  9026  002536                     __ptext23:
  9027                           	opt stack 0
  9028  002536                     _printRTC:
  9029                           	opt stack 18
  9030                           
  9031                           ;RTC.c: 64: getRTC();
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;incstack = 0
  9035  002536  ECEA  F023         	call	_getRTC	;wreg free
  9036                           
  9037                           ;RTC.c: 65: char month[] = "MMM";
  9038  00253A  C14B  F0BE         	movff	printRTC@F3231,printRTC@month
  9039  00253E  C14C  F0BF         	movff	printRTC@F3231+1,printRTC@month+1
  9040  002542  C14D  F0C0         	movff	printRTC@F3231+2,printRTC@month+2
  9041  002546  C14E  F0C1         	movff	printRTC@F3231+3,printRTC@month+3
  9042                           
  9043                           ;RTC.c: 66: int INT_time[7];
  9044                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  9045  00254A  0E00               	movlw	0
  9046  00254C  0100               	movlb	0	; () banked
  9047  00254E  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  9048  002550  0E00               	movlw	0
  9049  002552  6FC2               	movwf	printRTC@i& (0+255),b
  9050                           
  9051                           ; BSR set to: 0
  9052  002554  0100               	movlb	0	; () banked
  9053  002556  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9054  002558  D008               	goto	l6844
  9055  00255A  0100               	movlb	0	; () banked
  9056  00255C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9057  00255E  E146               	bnz	l618
  9058  002560  0E07               	movlw	7
  9059  002562  0100               	movlb	0	; () banked
  9060  002564  5DC2               	subwf	printRTC@i& (0+255),w,b
  9061  002566  B0D8               	btfsc	status,0,c
  9062  002568  D041               	goto	l618
  9063  00256A                     l6844:
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9067  00256A  0E1C               	movlw	low _time
  9068  00256C  0100               	movlb	0	; () banked
  9069  00256E  25C2               	addwf	printRTC@i& (0+255),w,b
  9070  002570  6ED9               	movwf	fsr2l,c
  9071  002572  0E01               	movlw	high _time
  9072  002574  0100               	movlb	0	; () banked
  9073  002576  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9074  002578  6EDA               	movwf	fsr2h,c
  9075  00257A  50DF               	movf	indf2,w,c
  9076  00257C  0100               	movlb	0	; () banked
  9077  00257E  6FAB               	movwf	??_printRTC& (0+255),b
  9078  002580  0100               	movlb	0	; () banked
  9079  002582  3BAB               	swapf	??_printRTC& (0+255),f,b
  9080  002584  0E0F               	movlw	15
  9081  002586  17AB               	andwf	??_printRTC& (0+255),f,b
  9082  002588  0E0F               	movlw	15
  9083  00258A  0100               	movlb	0	; () banked
  9084  00258C  17AB               	andwf	??_printRTC& (0+255),f,b
  9085  00258E  0100               	movlb	0	; () banked
  9086  002590  51AB               	movf	??_printRTC& (0+255),w,b
  9087  002592  0D0A               	mullw	10
  9088  002594  0E1C               	movlw	low _time
  9089  002596  0100               	movlb	0	; () banked
  9090  002598  25C2               	addwf	printRTC@i& (0+255),w,b
  9091  00259A  6ED9               	movwf	fsr2l,c
  9092  00259C  0E01               	movlw	high _time
  9093  00259E  0100               	movlb	0	; () banked
  9094  0025A0  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9095  0025A2  6EDA               	movwf	fsr2h,c
  9096  0025A4  50DF               	movf	indf2,w,c
  9097  0025A6  0B0F               	andlw	15
  9098  0025A8  0100               	movlb	0	; () banked
  9099  0025AA  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  9100  0025AC  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  9101  0025AE  50F3               	movf	prodl,w,c
  9102  0025B0  0100               	movlb	0	; () banked
  9103  0025B2  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  9104  0025B4  50F4               	movf	prodh,w,c
  9105  0025B6  0100               	movlb	0	; () banked
  9106  0025B8  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  9107  0025BA  90D8               	bcf	status,0,c
  9108  0025BC  0100               	movlb	0	; () banked
  9109  0025BE  35C2               	rlcf	printRTC@i& (0+255),w,b
  9110  0025C0  6ED9               	movwf	fsr2l,c
  9111  0025C2  0100               	movlb	0	; () banked
  9112  0025C4  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  9113  0025C6  6EDA               	movwf	fsr2h,c
  9114  0025C8  0EAE               	movlw	low printRTC@INT_time
  9115  0025CA  26D9               	addwf	fsr2l,f,c
  9116  0025CC  0E00               	movlw	high printRTC@INT_time
  9117  0025CE  22DA               	addwfc	fsr2h,f,c
  9118  0025D0  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  9119  0025D4  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  9120                           
  9121                           ; BSR set to: 0
  9122  0025D8  0100               	movlb	0	; () banked
  9123  0025DA  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9124  0025DC  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9125                           
  9126                           ; BSR set to: 0
  9127  0025DE  0100               	movlb	0	; () banked
  9128  0025E0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9129  0025E2  D7C3               	goto	l6844
  9130  0025E4  0100               	movlb	0	; () banked
  9131  0025E6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9132  0025E8  E101               	bnz	u5520
  9133  0025EA  D7BA               	goto	L11
  9134  0025EC                     u5520:
  9135  0025EC                     l618:
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;RTC.c: 69: }
  9139                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9140  0025EC  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9141  0025F0  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9142                           
  9143                           ;RTC.c: 72: switch(RTC_month){
  9144  0025F4  D0B4               	goto	l6876
  9145  0025F6                     l6850:
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;RTC.c: 74: strcpy(month, "JAN");
  9149  0025F6  0EBE               	movlw	low printRTC@month
  9150  0025F8  0100               	movlb	0	; () banked
  9151  0025FA  6F80               	movwf	strcpy@to& (0+255),b
  9152  0025FC  0E00               	movlw	high printRTC@month
  9153  0025FE  0100               	movlb	0	; () banked
  9154  002600  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9155  002602  0EDA               	movlw	low STR_8
  9156  002604  0100               	movlb	0	; () banked
  9157  002606  6F82               	movwf	strcpy@from& (0+255),b
  9158  002608  0EFF               	movlw	high STR_8
  9159  00260A  0100               	movlb	0	; () banked
  9160  00260C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9161  00260E  EC57  F028         	call	_strcpy	;wreg free
  9162                           
  9163                           ;RTC.c: 75: break;
  9164  002612  D0D4               	goto	l6878
  9165  002614                     l6852:
  9166                           
  9167                           ;RTC.c: 77: strcpy(month, "FEB");
  9168  002614  0EBE               	movlw	low printRTC@month
  9169  002616  0100               	movlb	0	; () banked
  9170  002618  6F80               	movwf	strcpy@to& (0+255),b
  9171  00261A  0E00               	movlw	high printRTC@month
  9172  00261C  0100               	movlb	0	; () banked
  9173  00261E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9174  002620  0ECA               	movlw	low STR_9
  9175  002622  0100               	movlb	0	; () banked
  9176  002624  6F82               	movwf	strcpy@from& (0+255),b
  9177  002626  0EFF               	movlw	high STR_9
  9178  002628  0100               	movlb	0	; () banked
  9179  00262A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9180  00262C  EC57  F028         	call	_strcpy	;wreg free
  9181                           
  9182                           ;RTC.c: 78: break;
  9183  002630  D0C5               	goto	l6878
  9184  002632                     l6854:
  9185                           
  9186                           ;RTC.c: 80: strcpy(month, "MAR");
  9187  002632  0EBE               	movlw	low printRTC@month
  9188  002634  0100               	movlb	0	; () banked
  9189  002636  6F80               	movwf	strcpy@to& (0+255),b
  9190  002638  0E00               	movlw	high printRTC@month
  9191  00263A  0100               	movlb	0	; () banked
  9192  00263C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9193  00263E  0EE6               	movlw	low STR_10
  9194  002640  0100               	movlb	0	; () banked
  9195  002642  6F82               	movwf	strcpy@from& (0+255),b
  9196  002644  0EFF               	movlw	high STR_10
  9197  002646  0100               	movlb	0	; () banked
  9198  002648  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9199  00264A  EC57  F028         	call	_strcpy	;wreg free
  9200                           
  9201                           ;RTC.c: 81: break;
  9202  00264E  D0B6               	goto	l6878
  9203  002650                     l6856:
  9204                           
  9205                           ;RTC.c: 83: strcpy(month, "APR");
  9206  002650  0EBE               	movlw	low printRTC@month
  9207  002652  0100               	movlb	0	; () banked
  9208  002654  6F80               	movwf	strcpy@to& (0+255),b
  9209  002656  0E00               	movlw	high printRTC@month
  9210  002658  0100               	movlb	0	; () banked
  9211  00265A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9212  00265C  0EEA               	movlw	low STR_11
  9213  00265E  0100               	movlb	0	; () banked
  9214  002660  6F82               	movwf	strcpy@from& (0+255),b
  9215  002662  0EFF               	movlw	high STR_11
  9216  002664  0100               	movlb	0	; () banked
  9217  002666  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9218  002668  EC57  F028         	call	_strcpy	;wreg free
  9219                           
  9220                           ;RTC.c: 84: break;
  9221  00266C  D0A7               	goto	l6878
  9222  00266E                     l6858:
  9223                           
  9224                           ;RTC.c: 86: strcpy(month, "MAY");
  9225  00266E  0EBE               	movlw	low printRTC@month
  9226  002670  0100               	movlb	0	; () banked
  9227  002672  6F80               	movwf	strcpy@to& (0+255),b
  9228  002674  0E00               	movlw	high printRTC@month
  9229  002676  0100               	movlb	0	; () banked
  9230  002678  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9231  00267A  0EFA               	movlw	low STR_12
  9232  00267C  0100               	movlb	0	; () banked
  9233  00267E  6F82               	movwf	strcpy@from& (0+255),b
  9234  002680  0EFF               	movlw	high STR_12
  9235  002682  0100               	movlb	0	; () banked
  9236  002684  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9237  002686  EC57  F028         	call	_strcpy	;wreg free
  9238                           
  9239                           ;RTC.c: 87: break;
  9240  00268A  D098               	goto	l6878
  9241  00268C                     l6860:
  9242                           
  9243                           ;RTC.c: 89: strcpy(month, "JUN");
  9244  00268C  0EBE               	movlw	low printRTC@month
  9245  00268E  0100               	movlb	0	; () banked
  9246  002690  6F80               	movwf	strcpy@to& (0+255),b
  9247  002692  0E00               	movlw	high printRTC@month
  9248  002694  0100               	movlb	0	; () banked
  9249  002696  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9250  002698  0EDE               	movlw	low STR_13
  9251  00269A  0100               	movlb	0	; () banked
  9252  00269C  6F82               	movwf	strcpy@from& (0+255),b
  9253  00269E  0EFF               	movlw	high STR_13
  9254  0026A0  0100               	movlb	0	; () banked
  9255  0026A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9256  0026A4  EC57  F028         	call	_strcpy	;wreg free
  9257                           
  9258                           ;RTC.c: 90: break;
  9259  0026A8  D089               	goto	l6878
  9260  0026AA                     l6862:
  9261                           
  9262                           ;RTC.c: 92: strcpy(month, "JUL");
  9263  0026AA  0EBE               	movlw	low printRTC@month
  9264  0026AC  0100               	movlb	0	; () banked
  9265  0026AE  6F80               	movwf	strcpy@to& (0+255),b
  9266  0026B0  0E00               	movlw	high printRTC@month
  9267  0026B2  0100               	movlb	0	; () banked
  9268  0026B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9269  0026B6  0ED6               	movlw	low STR_14
  9270  0026B8  0100               	movlb	0	; () banked
  9271  0026BA  6F82               	movwf	strcpy@from& (0+255),b
  9272  0026BC  0EFF               	movlw	high STR_14
  9273  0026BE  0100               	movlb	0	; () banked
  9274  0026C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9275  0026C2  EC57  F028         	call	_strcpy	;wreg free
  9276                           
  9277                           ;RTC.c: 93: break;
  9278  0026C6  D07A               	goto	l6878
  9279  0026C8                     l6864:
  9280                           
  9281                           ;RTC.c: 95: strcpy(month, "AUG");
  9282  0026C8  0EBE               	movlw	low printRTC@month
  9283  0026CA  0100               	movlb	0	; () banked
  9284  0026CC  6F80               	movwf	strcpy@to& (0+255),b
  9285  0026CE  0E00               	movlw	high printRTC@month
  9286  0026D0  0100               	movlb	0	; () banked
  9287  0026D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9288  0026D4  0ED2               	movlw	low STR_15
  9289  0026D6  0100               	movlb	0	; () banked
  9290  0026D8  6F82               	movwf	strcpy@from& (0+255),b
  9291  0026DA  0EFF               	movlw	high STR_15
  9292  0026DC  0100               	movlb	0	; () banked
  9293  0026DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9294  0026E0  EC57  F028         	call	_strcpy	;wreg free
  9295                           
  9296                           ;RTC.c: 96: break;
  9297  0026E4  D06B               	goto	l6878
  9298  0026E6                     l6866:
  9299                           
  9300                           ;RTC.c: 98: strcpy(month, "SEP");
  9301  0026E6  0EBE               	movlw	low printRTC@month
  9302  0026E8  0100               	movlb	0	; () banked
  9303  0026EA  6F80               	movwf	strcpy@to& (0+255),b
  9304  0026EC  0E00               	movlw	high printRTC@month
  9305  0026EE  0100               	movlb	0	; () banked
  9306  0026F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9307  0026F2  0EE2               	movlw	low STR_16
  9308  0026F4  0100               	movlb	0	; () banked
  9309  0026F6  6F82               	movwf	strcpy@from& (0+255),b
  9310  0026F8  0EFF               	movlw	high STR_16
  9311  0026FA  0100               	movlb	0	; () banked
  9312  0026FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9313  0026FE  EC57  F028         	call	_strcpy	;wreg free
  9314                           
  9315                           ;RTC.c: 99: break;
  9316  002702  D05C               	goto	l6878
  9317  002704                     l6868:
  9318                           
  9319                           ;RTC.c: 101: strcpy(month, "OCT");
  9320  002704  0EBE               	movlw	low printRTC@month
  9321  002706  0100               	movlb	0	; () banked
  9322  002708  6F80               	movwf	strcpy@to& (0+255),b
  9323  00270A  0E00               	movlw	high printRTC@month
  9324  00270C  0100               	movlb	0	; () banked
  9325  00270E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9326  002710  0EF2               	movlw	low STR_17
  9327  002712  0100               	movlb	0	; () banked
  9328  002714  6F82               	movwf	strcpy@from& (0+255),b
  9329  002716  0EFF               	movlw	high STR_17
  9330  002718  0100               	movlb	0	; () banked
  9331  00271A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9332  00271C  EC57  F028         	call	_strcpy	;wreg free
  9333                           
  9334                           ;RTC.c: 102: break;
  9335  002720  D04D               	goto	l6878
  9336  002722                     l6870:
  9337                           
  9338                           ;RTC.c: 104: strcpy(month, "NOV");
  9339  002722  0EBE               	movlw	low printRTC@month
  9340  002724  0100               	movlb	0	; () banked
  9341  002726  6F80               	movwf	strcpy@to& (0+255),b
  9342  002728  0E00               	movlw	high printRTC@month
  9343  00272A  0100               	movlb	0	; () banked
  9344  00272C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9345  00272E  0EF6               	movlw	low STR_18
  9346  002730  0100               	movlb	0	; () banked
  9347  002732  6F82               	movwf	strcpy@from& (0+255),b
  9348  002734  0EFF               	movlw	high STR_18
  9349  002736  0100               	movlb	0	; () banked
  9350  002738  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9351  00273A  EC57  F028         	call	_strcpy	;wreg free
  9352                           
  9353                           ;RTC.c: 105: break;
  9354  00273E  D03E               	goto	l6878
  9355  002740                     l6872:
  9356                           
  9357                           ;RTC.c: 107: strcpy(month, "DEC");
  9358  002740  0EBE               	movlw	low printRTC@month
  9359  002742  0100               	movlb	0	; () banked
  9360  002744  6F80               	movwf	strcpy@to& (0+255),b
  9361  002746  0E00               	movlw	high printRTC@month
  9362  002748  0100               	movlb	0	; () banked
  9363  00274A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9364  00274C  0ECE               	movlw	low STR_19
  9365  00274E  0100               	movlb	0	; () banked
  9366  002750  6F82               	movwf	strcpy@from& (0+255),b
  9367  002752  0EFF               	movlw	high STR_19
  9368  002754  0100               	movlb	0	; () banked
  9369  002756  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9370  002758  EC57  F028         	call	_strcpy	;wreg free
  9371                           
  9372                           ;RTC.c: 109: }
  9373                           
  9374                           ;RTC.c: 108: break;
  9375  00275C  D02F               	goto	l6878
  9376  00275E                     l6876:
  9377  00275E  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9378  002762  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9379                           
  9380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9381                           ; Switch size 1, requested type "space"
  9382                           ; Number of cases is 1, Range of values is 0 to 0
  9383                           ; switch strategies available:
  9384                           ; Name         Instructions Cycles
  9385                           ; simple_byte            4     3 (average)
  9386                           ;	Chosen strategy is simple_byte
  9387  002766  0100               	movlb	0	; () banked
  9388  002768  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9389  00276A  0A00               	xorlw	0	; case 0
  9390  00276C  A4D8               	btfss	status,2,c
  9391  00276E  D026               	goto	l6878
  9392                           
  9393                           ; BSR set to: 0
  9394                           ; Switch size 1, requested type "space"
  9395                           ; Number of cases is 12, Range of values is 1 to 12
  9396                           ; switch strategies available:
  9397                           ; Name         Instructions Cycles
  9398                           ; simple_byte           37    19 (average)
  9399                           ;	Chosen strategy is simple_byte
  9400  002770  0100               	movlb	0	; () banked
  9401  002772  51AB               	movf	??_printRTC& (0+255),w,b
  9402  002774  0A01               	xorlw	1	; case 1
  9403  002776  B4D8               	btfsc	status,2,c
  9404  002778  D73E               	goto	l6850
  9405  00277A  0A03               	xorlw	3	; case 2
  9406  00277C  B4D8               	btfsc	status,2,c
  9407  00277E  D74A               	goto	l6852
  9408  002780  0A01               	xorlw	1	; case 3
  9409  002782  B4D8               	btfsc	status,2,c
  9410  002784  D756               	goto	l6854
  9411  002786  0A07               	xorlw	7	; case 4
  9412  002788  B4D8               	btfsc	status,2,c
  9413  00278A  D762               	goto	l6856
  9414  00278C  0A01               	xorlw	1	; case 5
  9415  00278E  B4D8               	btfsc	status,2,c
  9416  002790  D76E               	goto	l6858
  9417  002792  0A03               	xorlw	3	; case 6
  9418  002794  B4D8               	btfsc	status,2,c
  9419  002796  D77A               	goto	l6860
  9420  002798  0A01               	xorlw	1	; case 7
  9421  00279A  B4D8               	btfsc	status,2,c
  9422  00279C  D786               	goto	l6862
  9423  00279E  0A0F               	xorlw	15	; case 8
  9424  0027A0  B4D8               	btfsc	status,2,c
  9425  0027A2  D792               	goto	l6864
  9426  0027A4  0A01               	xorlw	1	; case 9
  9427  0027A6  B4D8               	btfsc	status,2,c
  9428  0027A8  D79E               	goto	l6866
  9429  0027AA  0A03               	xorlw	3	; case 10
  9430  0027AC  B4D8               	btfsc	status,2,c
  9431  0027AE  D7AA               	goto	l6868
  9432  0027B0  0A01               	xorlw	1	; case 11
  9433  0027B2  B4D8               	btfsc	status,2,c
  9434  0027B4  D7B6               	goto	l6870
  9435  0027B6  0A07               	xorlw	7	; case 12
  9436  0027B8  B4D8               	btfsc	status,2,c
  9437  0027BA  D7C2               	goto	l6872
  9438  0027BC                     l6878:
  9439                           
  9440                           ;RTC.c: 110: lcdInst(0b10000000);;
  9441  0027BC  0E80               	movlw	128
  9442  0027BE  ECFD  F02A         	call	_lcdInst
  9443                           
  9444                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9445  0027C2  0EBE               	movlw	low STR_21
  9446  0027C4  0100               	movlb	0	; () banked
  9447  0027C6  6F8E               	movwf	printf@f& (0+255),b
  9448  0027C8  0EFA               	movlw	high STR_21
  9449  0027CA  0100               	movlb	0	; () banked
  9450  0027CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9451  0027CE  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9452  0027D2  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9453  0027D6  0EBE               	movlw	low printRTC@month
  9454  0027D8  0100               	movlb	0	; () banked
  9455  0027DA  6F92               	movwf	(?_printf+4)& (0+255),b
  9456  0027DC  0E00               	movlw	high printRTC@month
  9457  0027DE  0100               	movlb	0	; () banked
  9458  0027E0  6F93               	movwf	(?_printf+5)& (0+255),b
  9459  0027E2  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9460  0027E6  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9461  0027EA  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9462  0027EE  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9463  0027F2  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9464  0027F6  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9465  0027FA  EC84  F00B         	call	_printf	;wreg free
  9466  0027FE  0012               	return		;funcret
  9467  002800                     __end_of_printRTC:
  9468                           	opt stack 0
  9469                           tblptru	equ	0xFF8
  9470                           tblptrh	equ	0xFF7
  9471                           tblptrl	equ	0xFF6
  9472                           tablat	equ	0xFF5
  9473                           prodh	equ	0xFF4
  9474                           prodl	equ	0xFF3
  9475                           intcon	equ	0xFF2
  9476                           intcon2	equ	0xFF1
  9477                           intcon3	equ	0xFF0
  9478                           postinc0	equ	0xFEE
  9479                           wreg	equ	0xFE8
  9480                           postdec1	equ	0xFE5
  9481                           fsr1l	equ	0xFE1
  9482                           indf2	equ	0xFDF
  9483                           postinc2	equ	0xFDE
  9484                           postdec2	equ	0xFDD
  9485                           fsr2h	equ	0xFDA
  9486                           fsr2l	equ	0xFD9
  9487                           status	equ	0xFD8
  9488                           
  9489 ;; *************** function _strcpy *****************
  9490 ;; Defined at:
  9491 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9492 ;; Parameters:    Size  Location     Type
  9493 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9494 ;;		 -> printRTC@month(4), UI@month(4), 
  9495 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9496 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9497 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9498 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9499 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9500 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9501 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9502 ;;		 -> STR_8(4), 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9505 ;;		 -> printRTC@month(4), UI@month(4), 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  2    0[BANK0 ] PTR unsigned char 
  9508 ;; Registers used:
  9509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;Total ram usage:        6 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    7
  9522 ;; This function calls:
  9523 ;;		Nothing
  9524 ;; This function is called by:
  9525 ;;		_UI
  9526 ;;		_printRTC
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text24
  9531  0050AE                     __ptext24:
  9532                           	opt stack 0
  9533  0050AE                     _strcpy:
  9534                           	opt stack 20
  9535                           
  9536                           ;incstack = 0
  9537  0050AE  C080  F084         	movff	strcpy@to,strcpy@cp
  9538  0050B2  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9539  0050B6  D006               	goto	l6584
  9540  0050B8                     l6582:
  9541  0050B8  0100               	movlb	0	; () banked
  9542  0050BA  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9543  0050BC  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9544  0050BE  0100               	movlb	0	; () banked
  9545  0050C0  4B82               	infsnz	strcpy@from& (0+255),f,b
  9546  0050C2  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9547  0050C4                     l6584:
  9548  0050C4  C082  FFF6         	movff	strcpy@from,tblptrl
  9549  0050C8  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9550  0050CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9551  0050CC  6AF8               	clrf	tblptru,c
  9552  0050CE                     	endif
  9553  0050CE                     	if	0	;tblptru may be non-zero
  9554  0050CE                     	endif
  9555  0050CE  C084  FFD9         	movff	strcpy@cp,fsr2l
  9556  0050D2  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9557  0050D6  0008               	tblrd		*
  9558  0050D8  CFF5 FFDF          	movff	tablat,indf2
  9559  0050DC  50DF               	movf	indf2,w,c
  9560  0050DE  B4D8               	btfsc	status,2,c
  9561  0050E0  0012               	return	
  9562  0050E2  D7EA               	goto	l6582
  9563  0050E4                     __end_of_strcpy:
  9564                           	opt stack 0
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           prodh	equ	0xFF4
  9570                           prodl	equ	0xFF3
  9571                           intcon	equ	0xFF2
  9572                           intcon2	equ	0xFF1
  9573                           intcon3	equ	0xFF0
  9574                           postinc0	equ	0xFEE
  9575                           wreg	equ	0xFE8
  9576                           postdec1	equ	0xFE5
  9577                           fsr1l	equ	0xFE1
  9578                           indf2	equ	0xFDF
  9579                           postinc2	equ	0xFDE
  9580                           postdec2	equ	0xFDD
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function _getRTC *****************
  9586 ;; Defined at:
  9587 ;;		line 44 in file "RTC.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  i               2    3[BANK0 ] int 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      void 
  9594 ;; Registers used:
  9595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;Total ram usage:        2 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    9
  9608 ;; This function calls:
  9609 ;;		_I2C_Master_Read
  9610 ;;		_I2C_Master_Start
  9611 ;;		_I2C_Master_Stop
  9612 ;;		_I2C_Master_Write
  9613 ;; This function is called by:
  9614 ;;		_printRTC
  9615 ;;		_initSortTimer
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text25
  9620  0047D4                     __ptext25:
  9621                           	opt stack 0
  9622  0047D4                     _getRTC:
  9623                           	opt stack 18
  9624                           
  9625                           ;RTC.c: 48: I2C_Master_Start();
  9626                           
  9627                           ;incstack = 0
  9628  0047D4  EC23  F02B         	call	_I2C_Master_Start	;wreg free
  9629                           
  9630                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9631  0047D8  0E00               	movlw	0
  9632  0047DA  0100               	movlb	0	; () banked
  9633  0047DC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9634  0047DE  0ED0               	movlw	208
  9635  0047E0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9636  0047E2  EC11  F02B         	call	_I2C_Master_Write	;wreg free
  9637                           
  9638                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9639  0047E6  0E00               	movlw	0
  9640  0047E8  0100               	movlb	0	; () banked
  9641  0047EA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9642  0047EC  0E00               	movlw	0
  9643  0047EE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9644  0047F0  EC11  F02B         	call	_I2C_Master_Write	;wreg free
  9645                           
  9646                           ;RTC.c: 51: I2C_Master_Stop();
  9647  0047F4  EC1F  F02B         	call	_I2C_Master_Stop	;wreg free
  9648                           
  9649                           ;RTC.c: 54: I2C_Master_Start();
  9650  0047F8  EC23  F02B         	call	_I2C_Master_Start	;wreg free
  9651                           
  9652                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9653  0047FC  0E00               	movlw	0
  9654  0047FE  0100               	movlb	0	; () banked
  9655  004800  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9656  004802  0ED1               	movlw	209
  9657  004804  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9658  004806  EC11  F02B         	call	_I2C_Master_Write	;wreg free
  9659                           
  9660                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9661  00480A  0E00               	movlw	0
  9662  00480C  0100               	movlb	0	; () banked
  9663  00480E  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9664  004810  0E00               	movlw	0
  9665  004812  6F83               	movwf	getRTC@i& (0+255),b
  9666  004814                     l6590:
  9667                           
  9668                           ; BSR set to: 0
  9669  004814  0100               	movlb	0	; () banked
  9670  004816  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9671  004818  D008               	goto	l6594
  9672  00481A  0100               	movlb	0	; () banked
  9673  00481C  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9674  00481E  E115               	bnz	l6600
  9675  004820  0E06               	movlw	6
  9676  004822  0100               	movlb	0	; () banked
  9677  004824  5D83               	subwf	getRTC@i& (0+255),w,b
  9678  004826  B0D8               	btfsc	status,0,c
  9679  004828  D010               	goto	l6600
  9680  00482A                     l6594:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9684  00482A  0E1C               	movlw	low _time
  9685  00482C  0100               	movlb	0	; () banked
  9686  00482E  2583               	addwf	getRTC@i& (0+255),w,b
  9687  004830  6ED9               	movwf	fsr2l,c
  9688  004832  0E01               	movlw	high _time
  9689  004834  0100               	movlb	0	; () banked
  9690  004836  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9691  004838  6EDA               	movwf	fsr2h,c
  9692  00483A  0E01               	movlw	1
  9693  00483C  ECAF  F029         	call	_I2C_Master_Read
  9694  004840  6EDF               	movwf	indf2,c
  9695  004842  0100               	movlb	0	; () banked
  9696  004844  4B83               	infsnz	getRTC@i& (0+255),f,b
  9697  004846  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9698  004848  D7E5               	goto	l6590
  9699  00484A                     l6600:
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;RTC.c: 58: }
  9703                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9704  00484A  0E00               	movlw	0
  9705  00484C  ECAF  F029         	call	_I2C_Master_Read
  9706  004850  0101               	movlb	1	; () banked
  9707  004852  6F22               	movwf	(_time+6)& (0+255),b
  9708                           
  9709                           ;RTC.c: 60: I2C_Master_Stop();
  9710  004854  EC1F  F02B         	call	_I2C_Master_Stop	;wreg free
  9711  004858  0012               	return		;funcret
  9712  00485A                     __end_of_getRTC:
  9713                           	opt stack 0
  9714                           tblptru	equ	0xFF8
  9715                           tblptrh	equ	0xFF7
  9716                           tblptrl	equ	0xFF6
  9717                           tablat	equ	0xFF5
  9718                           prodh	equ	0xFF4
  9719                           prodl	equ	0xFF3
  9720                           intcon	equ	0xFF2
  9721                           intcon2	equ	0xFF1
  9722                           intcon3	equ	0xFF0
  9723                           postinc0	equ	0xFEE
  9724                           wreg	equ	0xFE8
  9725                           postdec1	equ	0xFE5
  9726                           fsr1l	equ	0xFE1
  9727                           indf2	equ	0xFDF
  9728                           postinc2	equ	0xFDE
  9729                           postdec2	equ	0xFDD
  9730                           fsr2h	equ	0xFDA
  9731                           fsr2l	equ	0xFD9
  9732                           status	equ	0xFD8
  9733                           
  9734 ;; *************** function _I2C_Master_Write *****************
  9735 ;; Defined at:
  9736 ;;		line 49 in file "I2C.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;  d               2    1[BANK0 ] unsigned int 
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  1    wreg      void 
  9743 ;; Registers used:
  9744 ;;		wreg, status,2, status,0, cstack
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9750 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9753 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9754 ;;Total ram usage:        2 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    8
  9757 ;; This function calls:
  9758 ;;		_I2C_Master_Wait
  9759 ;; This function is called by:
  9760 ;;		_loadRTC
  9761 ;;		_getRTC
  9762 ;; This function uses a non-reentrant model
  9763 ;;
  9764                           
  9765                           	psect	text26
  9766  005622                     __ptext26:
  9767                           	opt stack 0
  9768  005622                     _I2C_Master_Write:
  9769                           	opt stack 18
  9770                           
  9771                           ;I2C.c: 51: I2C_Master_Wait();
  9772                           
  9773                           ;incstack = 0
  9774  005622  ECE2  F02A         	call	_I2C_Master_Wait	;wreg free
  9775                           
  9776                           ;I2C.c: 52: SSPBUF = d;
  9777  005626  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9778  00562A  0012               	return		;funcret
  9779  00562C                     __end_of_I2C_Master_Write:
  9780                           	opt stack 0
  9781                           tblptru	equ	0xFF8
  9782                           tblptrh	equ	0xFF7
  9783                           tblptrl	equ	0xFF6
  9784                           tablat	equ	0xFF5
  9785                           prodh	equ	0xFF4
  9786                           prodl	equ	0xFF3
  9787                           intcon	equ	0xFF2
  9788                           intcon2	equ	0xFF1
  9789                           intcon3	equ	0xFF0
  9790                           postinc0	equ	0xFEE
  9791                           wreg	equ	0xFE8
  9792                           postdec1	equ	0xFE5
  9793                           fsr1l	equ	0xFE1
  9794                           indf2	equ	0xFDF
  9795                           postinc2	equ	0xFDE
  9796                           postdec2	equ	0xFDD
  9797                           fsr2h	equ	0xFDA
  9798                           fsr2l	equ	0xFD9
  9799                           status	equ	0xFD8
  9800                           
  9801 ;; *************** function _I2C_Master_Stop *****************
  9802 ;; Defined at:
  9803 ;;		line 43 in file "I2C.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;		None
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;		None
  9808 ;; Return value:  Size  Location     Type
  9809 ;;                  1    wreg      void 
  9810 ;; Registers used:
  9811 ;;		wreg, status,2, status,0, cstack
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;Total ram usage:        0 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    8
  9824 ;; This function calls:
  9825 ;;		_I2C_Master_Wait
  9826 ;; This function is called by:
  9827 ;;		_loadRTC
  9828 ;;		_getRTC
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           	psect	text27
  9833  00563E                     __ptext27:
  9834                           	opt stack 0
  9835  00563E                     _I2C_Master_Stop:
  9836                           	opt stack 18
  9837                           
  9838                           ;I2C.c: 45: I2C_Master_Wait();
  9839                           
  9840                           ;incstack = 0
  9841  00563E  ECE2  F02A         	call	_I2C_Master_Wait	;wreg free
  9842                           
  9843                           ;I2C.c: 46: PEN = 1;
  9844  005642  84C5               	bsf	4037,2,c	;volatile
  9845  005644  0012               	return		;funcret
  9846  005646                     __end_of_I2C_Master_Stop:
  9847                           	opt stack 0
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           intcon	equ	0xFF2
  9855                           intcon2	equ	0xFF1
  9856                           intcon3	equ	0xFF0
  9857                           postinc0	equ	0xFEE
  9858                           wreg	equ	0xFE8
  9859                           postdec1	equ	0xFE5
  9860                           fsr1l	equ	0xFE1
  9861                           indf2	equ	0xFDF
  9862                           postinc2	equ	0xFDE
  9863                           postdec2	equ	0xFDD
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function _I2C_Master_Start *****************
  9869 ;; Defined at:
  9870 ;;		line 31 in file "I2C.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      void 
  9877 ;; Registers used:
  9878 ;;		wreg, status,2, status,0, cstack
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;Total ram usage:        0 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    8
  9891 ;; This function calls:
  9892 ;;		_I2C_Master_Wait
  9893 ;; This function is called by:
  9894 ;;		_loadRTC
  9895 ;;		_getRTC
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text28
  9900  005646                     __ptext28:
  9901                           	opt stack 0
  9902  005646                     _I2C_Master_Start:
  9903                           	opt stack 18
  9904                           
  9905                           ;I2C.c: 33: I2C_Master_Wait();
  9906                           
  9907                           ;incstack = 0
  9908  005646  ECE2  F02A         	call	_I2C_Master_Wait	;wreg free
  9909                           
  9910                           ;I2C.c: 34: SEN = 1;
  9911  00564A  80C5               	bsf	4037,0,c	;volatile
  9912  00564C  0012               	return		;funcret
  9913  00564E                     __end_of_I2C_Master_Start:
  9914                           	opt stack 0
  9915                           tblptru	equ	0xFF8
  9916                           tblptrh	equ	0xFF7
  9917                           tblptrl	equ	0xFF6
  9918                           tablat	equ	0xFF5
  9919                           prodh	equ	0xFF4
  9920                           prodl	equ	0xFF3
  9921                           intcon	equ	0xFF2
  9922                           intcon2	equ	0xFF1
  9923                           intcon3	equ	0xFF0
  9924                           postinc0	equ	0xFEE
  9925                           wreg	equ	0xFE8
  9926                           postdec1	equ	0xFE5
  9927                           fsr1l	equ	0xFE1
  9928                           indf2	equ	0xFDF
  9929                           postinc2	equ	0xFDE
  9930                           postdec2	equ	0xFDD
  9931                           fsr2h	equ	0xFDA
  9932                           fsr2l	equ	0xFD9
  9933                           status	equ	0xFD8
  9934                           
  9935 ;; *************** function _I2C_Master_Read *****************
  9936 ;; Defined at:
  9937 ;;		line 55 in file "I2C.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  a               1    wreg     unsigned char 
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;  a               1    1[BANK0 ] unsigned char 
  9942 ;;  temp            1    2[BANK0 ] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  1    wreg      unsigned char 
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;Total ram usage:        2 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    8
  9959 ;; This function calls:
  9960 ;;		_I2C_Master_Wait
  9961 ;; This function is called by:
  9962 ;;		_getRTC
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           	psect	text29
  9967  00535E                     __ptext29:
  9968                           	opt stack 0
  9969  00535E                     _I2C_Master_Read:
  9970                           	opt stack 18
  9971                           
  9972                           ;incstack = 0
  9973                           ;I2C_Master_Read@a stored from wreg
  9974  00535E  0100               	movlb	0	; () banked
  9975  005360  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9976                           
  9977                           ;I2C.c: 57: unsigned char temp;
  9978                           ;I2C.c: 58: I2C_Master_Wait();
  9979  005362  ECE2  F02A         	call	_I2C_Master_Wait	;wreg free
  9980                           
  9981                           ;I2C.c: 59: RCEN = 1;
  9982  005366  86C5               	bsf	4037,3,c	;volatile
  9983                           
  9984                           ;I2C.c: 60: I2C_Master_Wait();
  9985  005368  ECE2  F02A         	call	_I2C_Master_Wait	;wreg free
  9986                           
  9987                           ;I2C.c: 61: temp = SSPBUF;
  9988  00536C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9989                           
  9990                           ;I2C.c: 62: I2C_Master_Wait();
  9991  005370  ECE2  F02A         	call	_I2C_Master_Wait	;wreg free
  9992                           
  9993                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9994  005374  0100               	movlb	0	; () banked
  9995  005376  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9996  005378  0100               	movlb	0	; () banked
  9997  00537A  A4D8               	btfss	status,2,c
  9998  00537C  D002               	goto	u4610
  9999  00537E  8AC5               	bsf	4037,5,c	;volatile
 10000  005380  D001               	goto	l6278
 10001  005382                     u4610:
 10002  005382  9AC5               	bcf	4037,5,c	;volatile
 10003  005384                     l6278:
 10004                           
 10005                           ;I2C.c: 64: ACKEN = 1;
 10006  005384  88C5               	bsf	4037,4,c	;volatile
 10007                           
 10008                           ;I2C.c: 65: return temp;
 10009  005386  0100               	movlb	0	; () banked
 10010  005388  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 10011  00538A  0012               	return	
 10012  00538C                     __end_of_I2C_Master_Read:
 10013                           	opt stack 0
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           intcon	equ	0xFF2
 10021                           intcon2	equ	0xFF1
 10022                           intcon3	equ	0xFF0
 10023                           postinc0	equ	0xFEE
 10024                           wreg	equ	0xFE8
 10025                           postdec1	equ	0xFE5
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           postdec2	equ	0xFDD
 10030                           fsr2h	equ	0xFDA
 10031                           fsr2l	equ	0xFD9
 10032                           status	equ	0xFD8
 10033                           
 10034 ;; *************** function _I2C_Master_Wait *****************
 10035 ;; Defined at:
 10036 ;;		line 26 in file "I2C.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;		None
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  1    wreg      void 
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;Total ram usage:        1 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    7
 10057 ;; This function calls:
 10058 ;;		Nothing
 10059 ;; This function is called by:
 10060 ;;		_I2C_Master_Start
 10061 ;;		_I2C_Master_Stop
 10062 ;;		_I2C_Master_Write
 10063 ;;		_I2C_Master_Read
 10064 ;;		_I2C_Master_RepeatedStart
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           	psect	text30
 10069  0055C4                     __ptext30:
 10070                           	opt stack 0
 10071  0055C4                     _I2C_Master_Wait:
 10072                           	opt stack 18
 10073  0055C4                     l66:
 10074  0055C4  B4C7               	btfsc	4039,2,c	;volatile
 10075  0055C6  D7FE               	goto	l66
 10076  0055C8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 10077  0055CC  0E1F               	movlw	31
 10078  0055CE  0100               	movlb	0	; () banked
 10079  0055D0  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 10080  0055D2  B4D8               	btfsc	status,2,c
 10081  0055D4  0012               	return	
 10082  0055D6  D7F6               	goto	l66
 10083  0055D8                     __end_of_I2C_Master_Wait:
 10084                           	opt stack 0
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           intcon2	equ	0xFF1
 10093                           intcon3	equ	0xFF0
 10094                           postinc0	equ	0xFEE
 10095                           wreg	equ	0xFE8
 10096                           postdec1	equ	0xFE5
 10097                           fsr1l	equ	0xFE1
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           postdec2	equ	0xFDD
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function _change_state_to_menu_22 *****************
 10106 ;; Defined at:
 10107 ;;		line 501 in file "UI.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;		None
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;		None
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;Total ram usage:        0 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:   10
 10128 ;; This function calls:
 10129 ;;		_lcdInst
 10130 ;;		_printf
 10131 ;; This function is called by:
 10132 ;;		_UI
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           	psect	text31
 10137  00503E                     __ptext31:
 10138                           	opt stack 0
 10139  00503E                     _change_state_to_menu_22:
 10140                           	opt stack 19
 10141                           
 10142                           ;UI.c: 502: cur_state = 22;
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;incstack = 0
 10146  00503E  0E00               	movlw	0
 10147  005040  0100               	movlb	0	; () banked
 10148  005042  6FED               	movwf	(_cur_state+1)& (0+255),b
 10149  005044  0E16               	movlw	22
 10150  005046  6FEC               	movwf	_cur_state& (0+255),b
 10151                           
 10152                           ; BSR set to: 0
 10153                           ;UI.c: 504: lcdInst(0b10000000);;
 10154  005048  0E80               	movlw	128
 10155  00504A  ECFD  F02A         	call	_lcdInst
 10156                           
 10157                           ;UI.c: 505: printf("2. SORT        <");
 10158  00504E  0ECE               	movlw	low STR_34
 10159  005050  0100               	movlb	0	; () banked
 10160  005052  6F8E               	movwf	printf@f& (0+255),b
 10161  005054  0EFD               	movlw	high STR_34
 10162  005056  0100               	movlb	0	; () banked
 10163  005058  6F8F               	movwf	(printf@f+1)& (0+255),b
 10164  00505A  EC84  F00B         	call	_printf	;wreg free
 10165                           
 10166                           ;UI.c: 506: lcdInst(0b11000000);;
 10167  00505E  0EC0               	movlw	192
 10168  005060  ECFD  F02A         	call	_lcdInst
 10169                           
 10170                           ;UI.c: 507: printf("3. LOGS         ");
 10171  005064  0E13               	movlw	low STR_36
 10172  005066  0100               	movlb	0	; () banked
 10173  005068  6F8E               	movwf	printf@f& (0+255),b
 10174  00506A  0EFD               	movlw	high STR_36
 10175  00506C  0100               	movlb	0	; () banked
 10176  00506E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10177  005070  EC84  F00B         	call	_printf	;wreg free
 10178  005074  0012               	return		;funcret
 10179  005076                     __end_of_change_state_to_menu_22:
 10180                           	opt stack 0
 10181                           tblptru	equ	0xFF8
 10182                           tblptrh	equ	0xFF7
 10183                           tblptrl	equ	0xFF6
 10184                           tablat	equ	0xFF5
 10185                           prodh	equ	0xFF4
 10186                           prodl	equ	0xFF3
 10187                           intcon	equ	0xFF2
 10188                           intcon2	equ	0xFF1
 10189                           intcon3	equ	0xFF0
 10190                           postinc0	equ	0xFEE
 10191                           wreg	equ	0xFE8
 10192                           postdec1	equ	0xFE5
 10193                           fsr1l	equ	0xFE1
 10194                           indf2	equ	0xFDF
 10195                           postinc2	equ	0xFDE
 10196                           postdec2	equ	0xFDD
 10197                           fsr2h	equ	0xFDA
 10198                           fsr2l	equ	0xFD9
 10199                           status	equ	0xFD8
 10200                           
 10201 ;; *************** function _change_state_to_menu_12 *****************
 10202 ;; Defined at:
 10203 ;;		line 493 in file "UI.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;		None
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  1    wreg      void 
 10210 ;; Registers used:
 10211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10221 ;;Total ram usage:        0 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:   10
 10224 ;; This function calls:
 10225 ;;		_lcdInst
 10226 ;;		_printf
 10227 ;; This function is called by:
 10228 ;;		_UI
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text32
 10233  005076                     __ptext32:
 10234                           	opt stack 0
 10235  005076                     _change_state_to_menu_12:
 10236                           	opt stack 19
 10237                           
 10238                           ;UI.c: 494: cur_state = 12;
 10239                           
 10240                           ;incstack = 0
 10241  005076  0E00               	movlw	0
 10242  005078  0100               	movlb	0	; () banked
 10243  00507A  6FED               	movwf	(_cur_state+1)& (0+255),b
 10244  00507C  0E0C               	movlw	12
 10245  00507E  6FEC               	movwf	_cur_state& (0+255),b
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;UI.c: 496: lcdInst(0b10000000);;
 10249  005080  0E80               	movlw	128
 10250  005082  ECFD  F02A         	call	_lcdInst
 10251                           
 10252                           ;UI.c: 497: printf("1. DATE/TIME    ");
 10253  005086  0E35               	movlw	low STR_33
 10254  005088  0100               	movlb	0	; () banked
 10255  00508A  6F8E               	movwf	printf@f& (0+255),b
 10256  00508C  0EFD               	movlw	high STR_33
 10257  00508E  0100               	movlb	0	; () banked
 10258  005090  6F8F               	movwf	(printf@f+1)& (0+255),b
 10259  005092  EC84  F00B         	call	_printf	;wreg free
 10260                           
 10261                           ;UI.c: 498: lcdInst(0b11000000);;
 10262  005096  0EC0               	movlw	192
 10263  005098  ECFD  F02A         	call	_lcdInst
 10264                           
 10265                           ;UI.c: 499: printf("2. SORT        <");
 10266  00509C  0ECE               	movlw	low STR_34
 10267  00509E  0100               	movlb	0	; () banked
 10268  0050A0  6F8E               	movwf	printf@f& (0+255),b
 10269  0050A2  0EFD               	movlw	high STR_34
 10270  0050A4  0100               	movlb	0	; () banked
 10271  0050A6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10272  0050A8  EC84  F00B         	call	_printf	;wreg free
 10273  0050AC  0012               	return		;funcret
 10274  0050AE                     __end_of_change_state_to_menu_12:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           intcon2	equ	0xFF1
 10284                           intcon3	equ	0xFF0
 10285                           postinc0	equ	0xFEE
 10286                           wreg	equ	0xFE8
 10287                           postdec1	equ	0xFE5
 10288                           fsr1l	equ	0xFE1
 10289                           indf2	equ	0xFDF
 10290                           postinc2	equ	0xFDE
 10291                           postdec2	equ	0xFDD
 10292                           fsr2h	equ	0xFDA
 10293                           fsr2l	equ	0xFD9
 10294                           status	equ	0xFD8
 10295                           
 10296 ;; *************** function ___awmod *****************
 10297 ;; Defined at:
 10298 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;  dividend        2    0[BANK0 ] int 
 10301 ;;  divisor         2    2[BANK0 ] int 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  sign            1    5[BANK0 ] unsigned char 
 10304 ;;  counter         1    4[BANK0 ] unsigned char 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  2    0[BANK0 ] int 
 10307 ;; Registers used:
 10308 ;;		wreg, status,2, status,0
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10314 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10318 ;;Total ram usage:        6 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    7
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_UI
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           	psect	text33
 10329  0046A6                     __ptext33:
 10330                           	opt stack 0
 10331  0046A6                     ___awmod:
 10332                           	opt stack 22
 10333                           
 10334                           ;incstack = 0
 10335  0046A6  0E00               	movlw	0
 10336  0046A8  0100               	movlb	0	; () banked
 10337  0046AA  6F85               	movwf	___awmod@sign& (0+255),b
 10338                           
 10339                           ; BSR set to: 0
 10340  0046AC  0100               	movlb	0	; () banked
 10341  0046AE  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10342  0046B0  D008               	goto	l8740
 10343                           
 10344                           ; BSR set to: 0
 10345  0046B2  0100               	movlb	0	; () banked
 10346  0046B4  6D80               	negf	___awmod@dividend& (0+255),b
 10347  0046B6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10348  0046B8  B0D8               	btfsc	status,0,c
 10349  0046BA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10350                           
 10351                           ; BSR set to: 0
 10352  0046BC  0E01               	movlw	1
 10353  0046BE  0100               	movlb	0	; () banked
 10354  0046C0  6F85               	movwf	___awmod@sign& (0+255),b
 10355  0046C2                     l8740:
 10356                           
 10357                           ; BSR set to: 0
 10358  0046C2  0100               	movlb	0	; () banked
 10359  0046C4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10360  0046C6  D005               	goto	l8744
 10361                           
 10362                           ; BSR set to: 0
 10363  0046C8  0100               	movlb	0	; () banked
 10364  0046CA  6D82               	negf	___awmod@divisor& (0+255),b
 10365  0046CC  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10366  0046CE  B0D8               	btfsc	status,0,c
 10367  0046D0  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10368  0046D2                     l8744:
 10369                           
 10370                           ; BSR set to: 0
 10371  0046D2  0100               	movlb	0	; () banked
 10372  0046D4  5182               	movf	___awmod@divisor& (0+255),w,b
 10373  0046D6  0100               	movlb	0	; () banked
 10374  0046D8  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10375  0046DA  B4D8               	btfsc	status,2,c
 10376  0046DC  D026               	goto	l8760
 10377                           
 10378                           ; BSR set to: 0
 10379  0046DE  0E01               	movlw	1
 10380  0046E0  0100               	movlb	0	; () banked
 10381  0046E2  6F84               	movwf	___awmod@counter& (0+255),b
 10382  0046E4  D006               	goto	l8750
 10383  0046E6                     l8748:
 10384                           
 10385                           ; BSR set to: 0
 10386  0046E6  0100               	movlb	0	; () banked
 10387  0046E8  90D8               	bcf	status,0,c
 10388  0046EA  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10389  0046EC  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10390  0046EE  0100               	movlb	0	; () banked
 10391  0046F0  2B84               	incf	___awmod@counter& (0+255),f,b
 10392  0046F2                     l8750:
 10393                           
 10394                           ; BSR set to: 0
 10395  0046F2  0100               	movlb	0	; () banked
 10396  0046F4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10397  0046F6  D7F7               	goto	l8748
 10398  0046F8                     l8752:
 10399                           
 10400                           ; BSR set to: 0
 10401  0046F8  0100               	movlb	0	; () banked
 10402  0046FA  5182               	movf	___awmod@divisor& (0+255),w,b
 10403  0046FC  0100               	movlb	0	; () banked
 10404  0046FE  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10405  004700  0100               	movlb	0	; () banked
 10406  004702  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10407  004704  0100               	movlb	0	; () banked
 10408  004706  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10409  004708  A0D8               	btfss	status,0,c
 10410  00470A  D008               	goto	l8756
 10411                           
 10412                           ; BSR set to: 0
 10413  00470C  0100               	movlb	0	; () banked
 10414  00470E  5182               	movf	___awmod@divisor& (0+255),w,b
 10415  004710  0100               	movlb	0	; () banked
 10416  004712  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10417  004714  0100               	movlb	0	; () banked
 10418  004716  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10419  004718  0100               	movlb	0	; () banked
 10420  00471A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10421  00471C                     l8756:
 10422                           
 10423                           ; BSR set to: 0
 10424  00471C  0100               	movlb	0	; () banked
 10425  00471E  90D8               	bcf	status,0,c
 10426  004720  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10427  004722  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10428                           
 10429                           ; BSR set to: 0
 10430  004724  0100               	movlb	0	; () banked
 10431  004726  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10432  004728  D7E7               	goto	l8752
 10433  00472A                     l8760:
 10434                           
 10435                           ; BSR set to: 0
 10436  00472A  0100               	movlb	0	; () banked
 10437  00472C  5185               	movf	___awmod@sign& (0+255),w,b
 10438  00472E  0100               	movlb	0	; () banked
 10439  004730  B4D8               	btfsc	status,2,c
 10440  004732  D005               	goto	l8764
 10441                           
 10442                           ; BSR set to: 0
 10443  004734  0100               	movlb	0	; () banked
 10444  004736  6D80               	negf	___awmod@dividend& (0+255),b
 10445  004738  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10446  00473A  B0D8               	btfsc	status,0,c
 10447  00473C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10448  00473E                     l8764:
 10449                           
 10450                           ; BSR set to: 0
 10451  00473E  C080  F080         	movff	___awmod@dividend,?___awmod
 10452  004742  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10453  004746  0012               	return	
 10454  004748                     __end_of___awmod:
 10455                           	opt stack 0
 10456                           tblptru	equ	0xFF8
 10457                           tblptrh	equ	0xFF7
 10458                           tblptrl	equ	0xFF6
 10459                           tablat	equ	0xFF5
 10460                           prodh	equ	0xFF4
 10461                           prodl	equ	0xFF3
 10462                           intcon	equ	0xFF2
 10463                           intcon2	equ	0xFF1
 10464                           intcon3	equ	0xFF0
 10465                           postinc0	equ	0xFEE
 10466                           wreg	equ	0xFE8
 10467                           postdec1	equ	0xFE5
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function ___awdiv *****************
 10477 ;; Defined at:
 10478 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  dividend        2    6[BANK0 ] int 
 10481 ;;  divisor         2    8[BANK0 ] int 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  quotient        2   12[BANK0 ] int 
 10484 ;;  sign            1   11[BANK0 ] unsigned char 
 10485 ;;  counter         1   10[BANK0 ] unsigned char 
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  2    6[BANK0 ] int 
 10488 ;; Registers used:
 10489 ;;		wreg, status,2, status,0
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        8 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    7
 10502 ;; This function calls:
 10503 ;;		Nothing
 10504 ;; This function is called by:
 10505 ;;		_UI
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text34
 10510  004482                     __ptext34:
 10511                           	opt stack 0
 10512  004482                     ___awdiv:
 10513                           	opt stack 22
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;incstack = 0
 10517  004482  0E00               	movlw	0
 10518  004484  0100               	movlb	0	; () banked
 10519  004486  6F8B               	movwf	___awdiv@sign& (0+255),b
 10520                           
 10521                           ; BSR set to: 0
 10522  004488  0100               	movlb	0	; () banked
 10523  00448A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10524  00448C  D008               	goto	l8696
 10525                           
 10526                           ; BSR set to: 0
 10527  00448E  0100               	movlb	0	; () banked
 10528  004490  6D88               	negf	___awdiv@divisor& (0+255),b
 10529  004492  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10530  004494  B0D8               	btfsc	status,0,c
 10531  004496  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10532                           
 10533                           ; BSR set to: 0
 10534  004498  0E01               	movlw	1
 10535  00449A  0100               	movlb	0	; () banked
 10536  00449C  6F8B               	movwf	___awdiv@sign& (0+255),b
 10537  00449E                     l8696:
 10538                           
 10539                           ; BSR set to: 0
 10540  00449E  0100               	movlb	0	; () banked
 10541  0044A0  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10542  0044A2  D008               	goto	l8702
 10543                           
 10544                           ; BSR set to: 0
 10545  0044A4  0100               	movlb	0	; () banked
 10546  0044A6  6D86               	negf	___awdiv@dividend& (0+255),b
 10547  0044A8  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10548  0044AA  B0D8               	btfsc	status,0,c
 10549  0044AC  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10550                           
 10551                           ; BSR set to: 0
 10552  0044AE  0E01               	movlw	1
 10553  0044B0  0100               	movlb	0	; () banked
 10554  0044B2  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10555  0044B4                     l8702:
 10556                           
 10557                           ; BSR set to: 0
 10558  0044B4  0E00               	movlw	0
 10559  0044B6  0100               	movlb	0	; () banked
 10560  0044B8  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10561  0044BA  0E00               	movlw	0
 10562  0044BC  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10563                           
 10564                           ; BSR set to: 0
 10565  0044BE  0100               	movlb	0	; () banked
 10566  0044C0  5188               	movf	___awdiv@divisor& (0+255),w,b
 10567  0044C2  0100               	movlb	0	; () banked
 10568  0044C4  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10569  0044C6  B4D8               	btfsc	status,2,c
 10570  0044C8  D02C               	goto	l8724
 10571                           
 10572                           ; BSR set to: 0
 10573  0044CA  0E01               	movlw	1
 10574  0044CC  0100               	movlb	0	; () banked
 10575  0044CE  6F8A               	movwf	___awdiv@counter& (0+255),b
 10576  0044D0  D006               	goto	l8710
 10577  0044D2                     l8708:
 10578                           
 10579                           ; BSR set to: 0
 10580  0044D2  0100               	movlb	0	; () banked
 10581  0044D4  90D8               	bcf	status,0,c
 10582  0044D6  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10583  0044D8  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10584  0044DA  0100               	movlb	0	; () banked
 10585  0044DC  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10586  0044DE                     l8710:
 10587                           
 10588                           ; BSR set to: 0
 10589  0044DE  0100               	movlb	0	; () banked
 10590  0044E0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10591  0044E2  D7F7               	goto	l8708
 10592  0044E4                     l8712:
 10593                           
 10594                           ; BSR set to: 0
 10595  0044E4  0100               	movlb	0	; () banked
 10596  0044E6  90D8               	bcf	status,0,c
 10597  0044E8  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10598  0044EA  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10599                           
 10600                           ; BSR set to: 0
 10601  0044EC  0100               	movlb	0	; () banked
 10602  0044EE  5188               	movf	___awdiv@divisor& (0+255),w,b
 10603  0044F0  0100               	movlb	0	; () banked
 10604  0044F2  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10605  0044F4  0100               	movlb	0	; () banked
 10606  0044F6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10607  0044F8  0100               	movlb	0	; () banked
 10608  0044FA  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10609  0044FC  A0D8               	btfss	status,0,c
 10610  0044FE  D00A               	goto	l8720
 10611                           
 10612                           ; BSR set to: 0
 10613  004500  0100               	movlb	0	; () banked
 10614  004502  5188               	movf	___awdiv@divisor& (0+255),w,b
 10615  004504  0100               	movlb	0	; () banked
 10616  004506  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10617  004508  0100               	movlb	0	; () banked
 10618  00450A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10619  00450C  0100               	movlb	0	; () banked
 10620  00450E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10621                           
 10622                           ; BSR set to: 0
 10623  004510  0100               	movlb	0	; () banked
 10624  004512  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10625  004514                     l8720:
 10626                           
 10627                           ; BSR set to: 0
 10628  004514  0100               	movlb	0	; () banked
 10629  004516  90D8               	bcf	status,0,c
 10630  004518  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10631  00451A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10632                           
 10633                           ; BSR set to: 0
 10634  00451C  0100               	movlb	0	; () banked
 10635  00451E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10636  004520  D7E1               	goto	l8712
 10637  004522                     l8724:
 10638                           
 10639                           ; BSR set to: 0
 10640  004522  0100               	movlb	0	; () banked
 10641  004524  518B               	movf	___awdiv@sign& (0+255),w,b
 10642  004526  0100               	movlb	0	; () banked
 10643  004528  B4D8               	btfsc	status,2,c
 10644  00452A  D005               	goto	l8728
 10645                           
 10646                           ; BSR set to: 0
 10647  00452C  0100               	movlb	0	; () banked
 10648  00452E  6D8C               	negf	___awdiv@quotient& (0+255),b
 10649  004530  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10650  004532  B0D8               	btfsc	status,0,c
 10651  004534  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10652  004536                     l8728:
 10653                           
 10654                           ; BSR set to: 0
 10655  004536  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10656  00453A  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10657  00453E  0012               	return	
 10658  004540                     __end_of___awdiv:
 10659                           	opt stack 0
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           prodh	equ	0xFF4
 10665                           prodl	equ	0xFF3
 10666                           intcon	equ	0xFF2
 10667                           intcon2	equ	0xFF1
 10668                           intcon3	equ	0xFF0
 10669                           postinc0	equ	0xFEE
 10670                           wreg	equ	0xFE8
 10671                           postdec1	equ	0xFE5
 10672                           fsr1l	equ	0xFE1
 10673                           indf2	equ	0xFDF
 10674                           postinc2	equ	0xFDE
 10675                           postdec2	equ	0xFDD
 10676                           fsr2h	equ	0xFDA
 10677                           fsr2l	equ	0xFD9
 10678                           status	equ	0xFD8
 10679                           
 10680 ;; *************** function _Test *****************
 10681 ;; Defined at:
 10682 ;;		line 31 in file "Test.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;		None
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;		None
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;Total ram usage:        2 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:   11
 10703 ;; This function calls:
 10704 ;;		_BlockerTest
 10705 ;;		_BothServos
 10706 ;;		_PlatformTest
 10707 ;;		_PortTestDC
 10708 ;;		_PortTestPusher
 10709 ;;		_SpeedTest
 10710 ;;		_actuatorTest
 10711 ;;		_algorithmTest
 10712 ;;		_arm
 10713 ;;		_lcdInst
 10714 ;;		_printf
 10715 ;;		_sensorTest
 10716 ;; This function is called by:
 10717 ;;		_main
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           	psect	text35
 10722  003E5C                     __ptext35:
 10723                           	opt stack 0
 10724  003E5C                     _Test:
 10725                           	opt stack 19
 10726                           
 10727                           ;Test.c: 33: while(machine_state == Testing_state){
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;incstack = 0
 10731  003E5C  D07C               	goto	l9488
 10732  003E5E                     l9448:
 10733                           
 10734                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10735  003E5E  0E01               	movlw	1
 10736  003E60  ECFD  F02A         	call	_lcdInst
 10737  003E64  0E68               	movlw	104
 10738  003E66  0100               	movlb	0	; () banked
 10739  003E68  6FC6               	movwf	??_Test& (0+255),b
 10740  003E6A  0EE4               	movlw	228
 10741  003E6C                     u9787:
 10742  003E6C  2EE8               	decfsz	wreg,f,c
 10743  003E6E  D7FE               	bra	u9787
 10744  003E70  2FC6               	decfsz	??_Test& (0+255),f,b
 10745  003E72  D7FC               	bra	u9787
 10746  003E74  F000               	nop	
 10747  003E76  0E80               	movlw	128
 10748  003E78  ECFD  F02A         	call	_lcdInst
 10749                           
 10750                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 10751  003E7C  0E8B               	movlw	low STR_68
 10752  003E7E  0100               	movlb	0	; () banked
 10753  003E80  6F8E               	movwf	printf@f& (0+255),b
 10754  003E82  0EFC               	movlw	high STR_68
 10755  003E84  0100               	movlb	0	; () banked
 10756  003E86  6F8F               	movwf	(printf@f+1)& (0+255),b
 10757  003E88  EC84  F00B         	call	_printf	;wreg free
 10758                           
 10759                           ;Test.c: 36: lcdInst(0b11000000);;
 10760  003E8C  0EC0               	movlw	192
 10761  003E8E  ECFD  F02A         	call	_lcdInst
 10762                           
 10763                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 10764  003E92  0E9C               	movlw	low STR_69
 10765  003E94  0100               	movlb	0	; () banked
 10766  003E96  6F8E               	movwf	printf@f& (0+255),b
 10767  003E98  0EFC               	movlw	high STR_69
 10768  003E9A  0100               	movlb	0	; () banked
 10769  003E9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10770  003E9E  EC84  F00B         	call	_printf	;wreg free
 10771  003EA2                     l1202:
 10772  003EA2  A281               	btfss	3969,1,c	;volatile
 10773  003EA4  D7FE               	goto	l1202
 10774                           
 10775                           ;Test.c: 39: var = PORTB >> 4;
 10776  003EA6  CF81 F0C6          	movff	3969,??_Test	;volatile
 10777  003EAA  0100               	movlb	0	; () banked
 10778  003EAC  3BC6               	swapf	??_Test& (0+255),f,b
 10779  003EAE  0E0F               	movlw	15
 10780  003EB0  17C6               	andwf	??_Test& (0+255),f,b
 10781  003EB2  0100               	movlb	0	; () banked
 10782  003EB4  51C6               	movf	??_Test& (0+255),w,b
 10783  003EB6  0101               	movlb	1	; () banked
 10784  003EB8  6F45               	movwf	_var& (0+255),b
 10785  003EBA  6B46               	clrf	(_var+1)& (0+255),b
 10786                           
 10787                           ; BSR set to: 1
 10788                           ;Test.c: 40: var++;
 10789  003EBC  0101               	movlb	1	; () banked
 10790  003EBE  4B45               	infsnz	_var& (0+255),f,b
 10791  003EC0  2B46               	incf	(_var+1)& (0+255),f,b
 10792  003EC2                     l1205:
 10793  003EC2  A281               	btfss	3969,1,c	;volatile
 10794  003EC4  D01F               	goto	l9486
 10795  003EC6  D7FD               	goto	l1205
 10796  003EC8                     l9464:
 10797                           
 10798                           ;Test.c: 44: algorithmTest();
 10799  003EC8  EC15  F021         	call	_algorithmTest	;wreg free
 10800                           
 10801                           ;Test.c: 45: break;
 10802  003ECC  D044               	goto	l9488
 10803  003ECE                     l9466:
 10804                           
 10805                           ;Test.c: 47: sensorTest();
 10806  003ECE  EC1C  F011         	call	_sensorTest	;wreg free
 10807                           
 10808                           ;Test.c: 48: break;
 10809  003ED2  D041               	goto	l9488
 10810  003ED4                     l9468:
 10811                           
 10812                           ;Test.c: 50: actuatorTest();
 10813  003ED4  EC6B  F004         	call	_actuatorTest	;wreg free
 10814                           
 10815                           ;Test.c: 51: break;
 10816  003ED8  D03E               	goto	l9488
 10817  003EDA                     l9470:
 10818                           
 10819                           ;Test.c: 53: arm();
 10820  003EDA  ECB1  F01F         	call	_arm	;wreg free
 10821                           
 10822                           ;Test.c: 54: break;
 10823  003EDE  D03B               	goto	l9488
 10824  003EE0                     l9472:
 10825                           
 10826                           ;Test.c: 56: PortTestDC();
 10827  003EE0  ECC9  F026         	call	_PortTestDC	;wreg free
 10828                           
 10829                           ;Test.c: 57: break;
 10830  003EE4  D038               	goto	l9488
 10831  003EE6                     l9474:
 10832                           
 10833                           ;Test.c: 59: SpeedTest();
 10834  003EE6  EC70  F024         	call	_SpeedTest	;wreg free
 10835                           
 10836                           ;Test.c: 60: break;
 10837  003EEA  D035               	goto	l9488
 10838  003EEC                     l9476:
 10839                           
 10840                           ;Test.c: 62: PortTestPusher();
 10841  003EEC  EC9B  F026         	call	_PortTestPusher	;wreg free
 10842                           
 10843                           ;Test.c: 63: break;
 10844  003EF0  D032               	goto	l9488
 10845  003EF2                     l9478:
 10846                           
 10847                           ;Test.c: 65: PlatformTest();
 10848  003EF2  EC60  F015         	call	_PlatformTest	;wreg free
 10849                           
 10850                           ;Test.c: 66: break;
 10851  003EF6  D02F               	goto	l9488
 10852  003EF8                     l9480:
 10853                           
 10854                           ;Test.c: 68: BothServos();
 10855  003EF8  ECA0  F00D         	call	_BothServos	;wreg free
 10856                           
 10857                           ;Test.c: 69: break;
 10858  003EFC  D02C               	goto	l9488
 10859  003EFE                     l9482:
 10860                           
 10861                           ;Test.c: 71: BlockerTest();
 10862  003EFE  EC3A  F01D         	call	_BlockerTest	;wreg free
 10863                           
 10864                           ;Test.c: 75: }
 10865                           
 10866                           ;Test.c: 74: break;
 10867                           
 10868                           ;Test.c: 73: default:
 10869                           
 10870                           ;Test.c: 72: break;
 10871  003F02  D029               	goto	l9488
 10872  003F04                     l9486:
 10873  003F04  C145  F0C6         	movff	_var,??_Test
 10874  003F08  C146  F0C7         	movff	_var+1,??_Test+1
 10875                           
 10876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10877                           ; Switch size 1, requested type "space"
 10878                           ; Number of cases is 1, Range of values is 0 to 0
 10879                           ; switch strategies available:
 10880                           ; Name         Instructions Cycles
 10881                           ; simple_byte            4     3 (average)
 10882                           ;	Chosen strategy is simple_byte
 10883  003F0C  0100               	movlb	0	; () banked
 10884  003F0E  51C7               	movf	(??_Test+1)& (0+255),w,b
 10885  003F10  0A00               	xorlw	0	; case 0
 10886  003F12  A4D8               	btfss	status,2,c
 10887  003F14  D020               	goto	l9488
 10888                           
 10889                           ; BSR set to: 0
 10890                           ; Switch size 1, requested type "space"
 10891                           ; Number of cases is 10, Range of values is 1 to 11
 10892                           ; switch strategies available:
 10893                           ; Name         Instructions Cycles
 10894                           ; simple_byte           31    16 (average)
 10895                           ;	Chosen strategy is simple_byte
 10896  003F16  0100               	movlb	0	; () banked
 10897  003F18  51C6               	movf	??_Test& (0+255),w,b
 10898  003F1A  0A01               	xorlw	1	; case 1
 10899  003F1C  B4D8               	btfsc	status,2,c
 10900  003F1E  D7D4               	goto	l9464
 10901  003F20  0A03               	xorlw	3	; case 2
 10902  003F22  B4D8               	btfsc	status,2,c
 10903  003F24  D7D4               	goto	l9466
 10904  003F26  0A01               	xorlw	1	; case 3
 10905  003F28  B4D8               	btfsc	status,2,c
 10906  003F2A  D7D4               	goto	l9468
 10907  003F2C  0A07               	xorlw	7	; case 4
 10908  003F2E  B4D8               	btfsc	status,2,c
 10909  003F30  D7D4               	goto	l9470
 10910  003F32  0A01               	xorlw	1	; case 5
 10911  003F34  B4D8               	btfsc	status,2,c
 10912  003F36  D7D4               	goto	l9472
 10913  003F38  0A03               	xorlw	3	; case 6
 10914  003F3A  B4D8               	btfsc	status,2,c
 10915  003F3C  D7D4               	goto	l9474
 10916  003F3E  0A01               	xorlw	1	; case 7
 10917  003F40  B4D8               	btfsc	status,2,c
 10918  003F42  D7D4               	goto	l9476
 10919  003F44  0A0F               	xorlw	15	; case 8
 10920  003F46  B4D8               	btfsc	status,2,c
 10921  003F48  D7D4               	goto	l9478
 10922  003F4A  0A02               	xorlw	2	; case 10
 10923  003F4C  B4D8               	btfsc	status,2,c
 10924  003F4E  D7D4               	goto	l9480
 10925  003F50  0A01               	xorlw	1	; case 11
 10926  003F52  B4D8               	btfsc	status,2,c
 10927  003F54  D7D4               	goto	l9482
 10928  003F56                     l9488:
 10929  003F56  0E03               	movlw	3
 10930  003F58  0100               	movlb	0	; () banked
 10931  003F5A  19FC               	xorwf	_machine_state& (0+255),w,b
 10932  003F5C  A4D8               	btfss	status,2,c
 10933  003F5E  0012               	return	
 10934  003F60  D77E               	goto	l9448
 10935  003F62                     __end_of_Test:
 10936                           	opt stack 0
 10937                           tblptru	equ	0xFF8
 10938                           tblptrh	equ	0xFF7
 10939                           tblptrl	equ	0xFF6
 10940                           tablat	equ	0xFF5
 10941                           prodh	equ	0xFF4
 10942                           prodl	equ	0xFF3
 10943                           intcon	equ	0xFF2
 10944                           intcon2	equ	0xFF1
 10945                           intcon3	equ	0xFF0
 10946                           postinc0	equ	0xFEE
 10947                           wreg	equ	0xFE8
 10948                           postdec1	equ	0xFE5
 10949                           fsr1l	equ	0xFE1
 10950                           indf2	equ	0xFDF
 10951                           postinc2	equ	0xFDE
 10952                           postdec2	equ	0xFDD
 10953                           fsr2h	equ	0xFDA
 10954                           fsr2l	equ	0xFD9
 10955                           status	equ	0xFD8
 10956                           
 10957 ;; *************** function _sensorTest *****************
 10958 ;; Defined at:
 10959 ;;		line 123 in file "Test.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  res             2   45[BANK0 ] int 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  1    wreg      void 
 10966 ;; Registers used:
 10967 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10977 ;;Total ram usage:        4 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:   10
 10980 ;; This function calls:
 10981 ;;		_lcdInst
 10982 ;;		_printf
 10983 ;;		_readADC
 10984 ;;		_readMAG
 10985 ;; This function is called by:
 10986 ;;		_Test
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           	psect	text36
 10991  002238                     __ptext36:
 10992                           	opt stack 0
 10993  002238                     _sensorTest:
 10994                           	opt stack 19
 10995                           
 10996                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;incstack = 0
 11000  002238  0E01               	movlw	1
 11001  00223A  ECFD  F02A         	call	_lcdInst
 11002  00223E  0E68               	movlw	104
 11003  002240  0100               	movlb	0	; () banked
 11004  002242  6FAB               	movwf	??_sensorTest& (0+255),b
 11005  002244  0EE4               	movlw	228
 11006  002246                     u9797:
 11007  002246  2EE8               	decfsz	wreg,f,c
 11008  002248  D7FE               	bra	u9797
 11009  00224A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11010  00224C  D7FC               	bra	u9797
 11011  00224E  F000               	nop	
 11012  002250  0E80               	movlw	128
 11013  002252  ECFD  F02A         	call	_lcdInst
 11014                           
 11015                           ;Test.c: 126: printf("SENSORS");
 11016  002256  0EAD               	movlw	low STR_77
 11017  002258  0100               	movlb	0	; () banked
 11018  00225A  6F8E               	movwf	printf@f& (0+255),b
 11019  00225C  0EFF               	movlw	high STR_77
 11020  00225E  0100               	movlb	0	; () banked
 11021  002260  6F8F               	movwf	(printf@f+1)& (0+255),b
 11022  002262  EC84  F00B         	call	_printf	;wreg free
 11023                           
 11024                           ;Test.c: 127: lcdInst(0b11000000);;
 11025  002266  0EC0               	movlw	192
 11026  002268  ECFD  F02A         	call	_lcdInst
 11027                           
 11028                           ;Test.c: 128: printf("PUSH TO START");
 11029  00226C  0E15               	movlw	low STR_71
 11030  00226E  0100               	movlb	0	; () banked
 11031  002270  6F8E               	movwf	printf@f& (0+255),b
 11032  002272  0EFF               	movlw	high STR_71
 11033  002274  0100               	movlb	0	; () banked
 11034  002276  6F8F               	movwf	(printf@f+1)& (0+255),b
 11035  002278  EC84  F00B         	call	_printf	;wreg free
 11036                           
 11037                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 11038  00227C  0E05               	movlw	5
 11039  00227E  0100               	movlb	0	; () banked
 11040  002280  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11041  002282  0E0F               	movlw	15
 11042  002284  0100               	movlb	0	; () banked
 11043  002286  6FAB               	movwf	??_sensorTest& (0+255),b
 11044  002288  0EF1               	movlw	241
 11045  00228A                     u9807:
 11046  00228A  2EE8               	decfsz	wreg,f,c
 11047  00228C  D7FE               	bra	u9807
 11048  00228E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11049  002290  D7FC               	bra	u9807
 11050  002292  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11051  002294  D7FA               	bra	u9807
 11052  002296                     l1234:
 11053  002296  A281               	btfss	3969,1,c	;volatile
 11054  002298  D7FE               	goto	l1234
 11055  00229A                     l1237:
 11056  00229A  B281               	btfsc	3969,1,c	;volatile
 11057  00229C  D7FE               	goto	l1237
 11058                           
 11059                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11060  00229E  0E01               	movlw	1
 11061  0022A0  ECFD  F02A         	call	_lcdInst
 11062  0022A4  0E68               	movlw	104
 11063  0022A6  0100               	movlb	0	; () banked
 11064  0022A8  6FAB               	movwf	??_sensorTest& (0+255),b
 11065  0022AA  0EE4               	movlw	228
 11066  0022AC                     u9817:
 11067  0022AC  2EE8               	decfsz	wreg,f,c
 11068  0022AE  D7FE               	bra	u9817
 11069  0022B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11070  0022B2  D7FC               	bra	u9817
 11071  0022B4  F000               	nop	
 11072  0022B6  0E80               	movlw	128
 11073  0022B8  ECFD  F02A         	call	_lcdInst
 11074                           
 11075                           ;Test.c: 137: printf("TST: IR SNSR");
 11076  0022BC  0E3F               	movlw	low STR_79
 11077  0022BE  0100               	movlb	0	; () banked
 11078  0022C0  6F8E               	movwf	printf@f& (0+255),b
 11079  0022C2  0EFF               	movlw	high STR_79
 11080  0022C4  0100               	movlb	0	; () banked
 11081  0022C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11082  0022C8  EC84  F00B         	call	_printf	;wreg free
 11083                           
 11084                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 11085  0022CC  0E05               	movlw	5
 11086  0022CE  0100               	movlb	0	; () banked
 11087  0022D0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11088  0022D2  0E0F               	movlw	15
 11089  0022D4  0100               	movlb	0	; () banked
 11090  0022D6  6FAB               	movwf	??_sensorTest& (0+255),b
 11091  0022D8  0EF1               	movlw	241
 11092  0022DA                     u9827:
 11093  0022DA  2EE8               	decfsz	wreg,f,c
 11094  0022DC  D7FE               	bra	u9827
 11095  0022DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11096  0022E0  D7FC               	bra	u9827
 11097  0022E2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11098  0022E4  D7FA               	bra	u9827
 11099                           
 11100                           ;Test.c: 139: LATCbits.LATC5 = 1;
 11101  0022E6  8A8B               	bsf	3979,5,c	;volatile
 11102                           
 11103                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 11104  0022E8  D05C               	goto	l7844
 11105  0022EA                     l7826:
 11106                           
 11107                           ;Test.c: 142: readADC(0);
 11108  0022EA  0E00               	movlw	0
 11109  0022EC  ECF3  F029         	call	_readADC
 11110                           
 11111                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 11112  0022F0  50C3               	movf	4035,w,c	;volatile
 11113  0022F2  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 11114  0022F6  0100               	movlb	0	; () banked
 11115  0022F8  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11116  0022FA  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11117  0022FE  0100               	movlb	0	; () banked
 11118  002300  6BAB               	clrf	??_sensorTest& (0+255),b
 11119  002302  0100               	movlb	0	; () banked
 11120  002304  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11121  002306  0100               	movlb	0	; () banked
 11122  002308  6FAD               	movwf	sensorTest@res& (0+255),b
 11123  00230A  0100               	movlb	0	; () banked
 11124  00230C  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11125  00230E  0100               	movlb	0	; () banked
 11126  002310  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 11130  002312  0100               	movlb	0	; () banked
 11131  002314  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11132  002316  D00A               	goto	u6400
 11133  002318  0E21               	movlw	33
 11134  00231A  0100               	movlb	0	; () banked
 11135  00231C  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11136  00231E  0E03               	movlw	3
 11137  002320  0100               	movlb	0	; () banked
 11138  002322  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11139  002324  A0D8               	btfss	status,0,c
 11140  002326  D002               	goto	u6400
 11141  002328  0E01               	movlw	1
 11142  00232A  D001               	goto	u6410
 11143  00232C                     u6400:
 11144  00232C  0E00               	movlw	0
 11145  00232E                     u6410:
 11146  00232E  0100               	movlb	0	; () banked
 11147  002330  6FE6               	movwf	_IR_signal& (0+255),b
 11148  002332  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11149                           
 11150                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11151  002334  0E01               	movlw	1
 11152  002336  ECFD  F02A         	call	_lcdInst
 11153  00233A  0E68               	movlw	104
 11154  00233C  0100               	movlb	0	; () banked
 11155  00233E  6FAB               	movwf	??_sensorTest& (0+255),b
 11156  002340  0EE4               	movlw	228
 11157  002342                     u9837:
 11158  002342  2EE8               	decfsz	wreg,f,c
 11159  002344  D7FE               	bra	u9837
 11160  002346  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11161  002348  D7FC               	bra	u9837
 11162  00234A  F000               	nop	
 11163  00234C  0E80               	movlw	128
 11164  00234E  ECFD  F02A         	call	_lcdInst
 11165                           
 11166                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 11167  002352  0E64               	movlw	low STR_80
 11168  002354  0100               	movlb	0	; () banked
 11169  002356  6F8E               	movwf	printf@f& (0+255),b
 11170  002358  0EFE               	movlw	high STR_80
 11171  00235A  0100               	movlb	0	; () banked
 11172  00235C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11173  00235E  C0E6  F090         	movff	_IR_signal,?_printf+2
 11174  002362  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11175  002366  EC84  F00B         	call	_printf	;wreg free
 11176                           
 11177                           ;Test.c: 148: lcdInst(0b11000000);;
 11178  00236A  0EC0               	movlw	192
 11179  00236C  ECFD  F02A         	call	_lcdInst
 11180                           
 11181                           ;Test.c: 149: printf("%d", res);
 11182  002370  0E20               	movlw	low (STR_27+14)
 11183  002372  0100               	movlb	0	; () banked
 11184  002374  6F8E               	movwf	printf@f& (0+255),b
 11185  002376  0EFE               	movlw	high (STR_27+14)
 11186  002378  0100               	movlb	0	; () banked
 11187  00237A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11188  00237C  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11189  002380  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11190  002384  EC84  F00B         	call	_printf	;wreg free
 11191                           
 11192                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 11193  002388  0E05               	movlw	5
 11194  00238A  0100               	movlb	0	; () banked
 11195  00238C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11196  00238E  0E0F               	movlw	15
 11197  002390  0100               	movlb	0	; () banked
 11198  002392  6FAB               	movwf	??_sensorTest& (0+255),b
 11199  002394  0EF1               	movlw	241
 11200  002396                     u9847:
 11201  002396  2EE8               	decfsz	wreg,f,c
 11202  002398  D7FE               	bra	u9847
 11203  00239A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11204  00239C  D7FC               	bra	u9847
 11205  00239E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11206  0023A0  D7FA               	bra	u9847
 11207  0023A2                     l7844:
 11208  0023A2  A281               	btfss	3969,1,c	;volatile
 11209  0023A4  D7A2               	goto	l7826
 11210                           
 11211                           ;Test.c: 151: }
 11212                           ;Test.c: 152: LATCbits.LATC5 = 0;
 11213  0023A6  9A8B               	bcf	3979,5,c	;volatile
 11214                           
 11215                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11216  0023A8  0E01               	movlw	1
 11217  0023AA  ECFD  F02A         	call	_lcdInst
 11218  0023AE  0E68               	movlw	104
 11219  0023B0  0100               	movlb	0	; () banked
 11220  0023B2  6FAB               	movwf	??_sensorTest& (0+255),b
 11221  0023B4  0EE4               	movlw	228
 11222  0023B6                     u9857:
 11223  0023B6  2EE8               	decfsz	wreg,f,c
 11224  0023B8  D7FE               	bra	u9857
 11225  0023BA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11226  0023BC  D7FC               	bra	u9857
 11227  0023BE  F000               	nop	
 11228  0023C0  0E80               	movlw	128
 11229  0023C2  ECFD  F02A         	call	_lcdInst
 11230                           
 11231                           ;Test.c: 161: printf("TST: MAGNETISM");
 11232  0023C6  0E91               	movlw	low STR_82
 11233  0023C8  0100               	movlb	0	; () banked
 11234  0023CA  6F8E               	movwf	printf@f& (0+255),b
 11235  0023CC  0EFE               	movlw	high STR_82
 11236  0023CE  0100               	movlb	0	; () banked
 11237  0023D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11238  0023D2  EC84  F00B         	call	_printf	;wreg free
 11239                           
 11240                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 11241  0023D6  0E05               	movlw	5
 11242  0023D8  0100               	movlb	0	; () banked
 11243  0023DA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11244  0023DC  0E0F               	movlw	15
 11245  0023DE  0100               	movlb	0	; () banked
 11246  0023E0  6FAB               	movwf	??_sensorTest& (0+255),b
 11247  0023E2  0EF1               	movlw	241
 11248  0023E4                     u9867:
 11249  0023E4  2EE8               	decfsz	wreg,f,c
 11250  0023E6  D7FE               	bra	u9867
 11251  0023E8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11252  0023EA  D7FC               	bra	u9867
 11253  0023EC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11254  0023EE  D7FA               	bra	u9867
 11255                           
 11256                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 11257  0023F0  D021               	goto	l7862
 11258  0023F2                     l7856:
 11259                           
 11260                           ;Test.c: 164: readMAG();
 11261  0023F2  EC98  F027         	call	_readMAG	;wreg free
 11262                           
 11263                           ;Test.c: 165: lcdInst(0b10000000);;
 11264  0023F6  0E80               	movlw	128
 11265  0023F8  ECFD  F02A         	call	_lcdInst
 11266                           
 11267                           ;Test.c: 166: lcdInst(0b11000000);;
 11268  0023FC  0EC0               	movlw	192
 11269  0023FE  ECFD  F02A         	call	_lcdInst
 11270                           
 11271                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 11272  002402  0E34               	movlw	low STR_83
 11273  002404  0100               	movlb	0	; () banked
 11274  002406  6F8E               	movwf	printf@f& (0+255),b
 11275  002408  0EFE               	movlw	high STR_83
 11276  00240A  0100               	movlb	0	; () banked
 11277  00240C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11278  00240E  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11279  002412  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11280  002416  EC84  F00B         	call	_printf	;wreg free
 11281                           
 11282                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 11283  00241A  0E05               	movlw	5
 11284  00241C  0100               	movlb	0	; () banked
 11285  00241E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11286  002420  0E0F               	movlw	15
 11287  002422  0100               	movlb	0	; () banked
 11288  002424  6FAB               	movwf	??_sensorTest& (0+255),b
 11289  002426  0EF1               	movlw	241
 11290  002428                     u9877:
 11291  002428  2EE8               	decfsz	wreg,f,c
 11292  00242A  D7FE               	bra	u9877
 11293  00242C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11294  00242E  D7FC               	bra	u9877
 11295  002430  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11296  002432  D7FA               	bra	u9877
 11297  002434                     l7862:
 11298  002434  A281               	btfss	3969,1,c	;volatile
 11299  002436  D7DD               	goto	l7856
 11300                           
 11301                           ;Test.c: 169: }
 11302                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11303  002438  0E01               	movlw	1
 11304  00243A  ECFD  F02A         	call	_lcdInst
 11305  00243E  0E68               	movlw	104
 11306  002440  0100               	movlb	0	; () banked
 11307  002442  6FAB               	movwf	??_sensorTest& (0+255),b
 11308  002444  0EE4               	movlw	228
 11309  002446                     u9887:
 11310  002446  2EE8               	decfsz	wreg,f,c
 11311  002448  D7FE               	bra	u9887
 11312  00244A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11313  00244C  D7FC               	bra	u9887
 11314  00244E  F000               	nop	
 11315  002450  0E80               	movlw	128
 11316  002452  ECFD  F02A         	call	_lcdInst
 11317                           
 11318                           ;Test.c: 175: printf("TST: COND");
 11319  002456  0E86               	movlw	low STR_84
 11320  002458  0100               	movlb	0	; () banked
 11321  00245A  6F8E               	movwf	printf@f& (0+255),b
 11322  00245C  0EFF               	movlw	high STR_84
 11323  00245E  0100               	movlb	0	; () banked
 11324  002460  6F8F               	movwf	(printf@f+1)& (0+255),b
 11325  002462  EC84  F00B         	call	_printf	;wreg free
 11326                           
 11327                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 11328  002466  0E05               	movlw	5
 11329  002468  0100               	movlb	0	; () banked
 11330  00246A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11331  00246C  0E0F               	movlw	15
 11332  00246E  0100               	movlb	0	; () banked
 11333  002470  6FAB               	movwf	??_sensorTest& (0+255),b
 11334  002472  0EF1               	movlw	241
 11335  002474                     u9897:
 11336  002474  2EE8               	decfsz	wreg,f,c
 11337  002476  D7FE               	bra	u9897
 11338  002478  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11339  00247A  D7FC               	bra	u9897
 11340  00247C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11341  00247E  D7FA               	bra	u9897
 11342  002480                     l7874:
 11343                           
 11344                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11345  002480  0E01               	movlw	1
 11346  002482  ECFD  F02A         	call	_lcdInst
 11347  002486  0E68               	movlw	104
 11348  002488  0100               	movlb	0	; () banked
 11349  00248A  6FAB               	movwf	??_sensorTest& (0+255),b
 11350  00248C  0EE4               	movlw	228
 11351  00248E                     u9907:
 11352  00248E  2EE8               	decfsz	wreg,f,c
 11353  002490  D7FE               	bra	u9907
 11354  002492  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11355  002494  D7FC               	bra	u9907
 11356  002496  F000               	nop	
 11357  002498  0E80               	movlw	128
 11358  00249A  ECFD  F02A         	call	_lcdInst
 11359                           
 11360                           ;Test.c: 179: printf("TST: COND");
 11361  00249E  0E86               	movlw	low STR_84
 11362  0024A0  0100               	movlb	0	; () banked
 11363  0024A2  6F8E               	movwf	printf@f& (0+255),b
 11364  0024A4  0EFF               	movlw	high STR_84
 11365  0024A6  0100               	movlb	0	; () banked
 11366  0024A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11367  0024AA  EC84  F00B         	call	_printf	;wreg free
 11368                           
 11369                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 11370  0024AE  D01B               	goto	l7886
 11371  0024B0                     l7882:
 11372                           
 11373                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11374  0024B0  0E80               	movlw	128
 11375  0024B2  ECFD  F02A         	call	_lcdInst
 11376  0024B6  0EC0               	movlw	192
 11377  0024B8  ECFD  F02A         	call	_lcdInst
 11378                           
 11379                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 11380  0024BC  0EA4               	movlw	low STR_86
 11381  0024BE  0100               	movlb	0	; () banked
 11382  0024C0  6F8E               	movwf	printf@f& (0+255),b
 11383  0024C2  0EFF               	movlw	high STR_86
 11384  0024C4  0100               	movlb	0	; () banked
 11385  0024C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11386  0024C8  A480               	btfss	3968,2,c	;volatile
 11387  0024CA  D004               	goto	u6440
 11388  0024CC  0100               	movlb	0	; () banked
 11389  0024CE  6BAB               	clrf	??_sensorTest& (0+255),b
 11390  0024D0  2BAB               	incf	??_sensorTest& (0+255),f,b
 11391  0024D2  D002               	goto	u6448
 11392  0024D4                     u6440:
 11393  0024D4  0100               	movlb	0	; () banked
 11394  0024D6  6BAB               	clrf	??_sensorTest& (0+255),b
 11395  0024D8                     u6448:
 11396  0024D8  0100               	movlb	0	; () banked
 11397  0024DA  51AB               	movf	??_sensorTest& (0+255),w,b
 11398  0024DC  0100               	movlb	0	; () banked
 11399  0024DE  6F90               	movwf	(?_printf+2)& (0+255),b
 11400  0024E0  6B91               	clrf	(?_printf+3)& (0+255),b
 11401  0024E2  EC84  F00B         	call	_printf	;wreg free
 11402  0024E6                     l7886:
 11403  0024E6  A281               	btfss	3969,1,c	;volatile
 11404  0024E8  D7E3               	goto	l7882
 11405                           
 11406                           ;Test.c: 186: }
 11407                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 11408  0024EA  3881               	swapf	3969,w,c	;volatile
 11409  0024EC  0B0F               	andlw	15
 11410  0024EE  0A0F               	xorlw	15
 11411  0024F0  B4D8               	btfsc	status,2,c
 11412  0024F2  0012               	return	
 11413                           
 11414                           ;Test.c: 190: else{
 11415                           ;Test.c: 191: LATAbits.LATA3 = 1;
 11416                           
 11417                           ;Test.c: 189: }
 11418                           
 11419                           ;Test.c: 188: break;
 11420  0024F4  8689               	bsf	3977,3,c	;volatile
 11421                           
 11422                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 11423  0024F6  D01B               	goto	l7898
 11424  0024F8                     l7894:
 11425                           
 11426                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11427  0024F8  0E80               	movlw	128
 11428  0024FA  ECFD  F02A         	call	_lcdInst
 11429  0024FE  0EC0               	movlw	192
 11430  002500  ECFD  F02A         	call	_lcdInst
 11431                           
 11432                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 11433  002504  0EA4               	movlw	low STR_86
 11434  002506  0100               	movlb	0	; () banked
 11435  002508  6F8E               	movwf	printf@f& (0+255),b
 11436  00250A  0EFF               	movlw	high STR_86
 11437  00250C  0100               	movlb	0	; () banked
 11438  00250E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11439  002510  A480               	btfss	3968,2,c	;volatile
 11440  002512  D004               	goto	u6470
 11441  002514  0100               	movlb	0	; () banked
 11442  002516  6BAB               	clrf	??_sensorTest& (0+255),b
 11443  002518  2BAB               	incf	??_sensorTest& (0+255),f,b
 11444  00251A  D002               	goto	u6478
 11445  00251C                     u6470:
 11446  00251C  0100               	movlb	0	; () banked
 11447  00251E  6BAB               	clrf	??_sensorTest& (0+255),b
 11448  002520                     u6478:
 11449  002520  0100               	movlb	0	; () banked
 11450  002522  51AB               	movf	??_sensorTest& (0+255),w,b
 11451  002524  0100               	movlb	0	; () banked
 11452  002526  6F90               	movwf	(?_printf+2)& (0+255),b
 11453  002528  6B91               	clrf	(?_printf+3)& (0+255),b
 11454  00252A  EC84  F00B         	call	_printf	;wreg free
 11455  00252E                     l7898:
 11456  00252E  B281               	btfsc	3969,1,c	;volatile
 11457  002530  D7E3               	goto	l7894
 11458                           
 11459                           ;Test.c: 196: }
 11460                           ;Test.c: 197: LATAbits.LATA3 = !1;
 11461  002532  9689               	bcf	3977,3,c	;volatile
 11462  002534  D7A5               	goto	l7874
 11463  002536                     __end_of_sensorTest:
 11464                           	opt stack 0
 11465                           tblptru	equ	0xFF8
 11466                           tblptrh	equ	0xFF7
 11467                           tblptrl	equ	0xFF6
 11468                           tablat	equ	0xFF5
 11469                           prodh	equ	0xFF4
 11470                           prodl	equ	0xFF3
 11471                           intcon	equ	0xFF2
 11472                           intcon2	equ	0xFF1
 11473                           intcon3	equ	0xFF0
 11474                           postinc0	equ	0xFEE
 11475                           wreg	equ	0xFE8
 11476                           postdec1	equ	0xFE5
 11477                           fsr1l	equ	0xFE1
 11478                           indf2	equ	0xFDF
 11479                           postinc2	equ	0xFDE
 11480                           postdec2	equ	0xFDD
 11481                           fsr2h	equ	0xFDA
 11482                           fsr2l	equ	0xFD9
 11483                           status	equ	0xFD8
 11484                           
 11485 ;; *************** function _readMAG *****************
 11486 ;; Defined at:
 11487 ;;		line 29 in file "ADCFunctionality.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;		None
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;  res             2    4[BANK0 ] int 
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  1    wreg      void 
 11494 ;; Registers used:
 11495 ;;		wreg, status,2, status,0, cstack
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;Total ram usage:        4 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    8
 11508 ;; This function calls:
 11509 ;;		_readADC
 11510 ;; This function is called by:
 11511 ;;		_getMAG
 11512 ;;		_sensorTest
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text37
 11517  004F30                     __ptext37:
 11518                           	opt stack 0
 11519  004F30                     _readMAG:
 11520                           	opt stack 19
 11521                           
 11522                           ;ADCFunctionality.c: 30: readADC(1);
 11523                           
 11524                           ;incstack = 0
 11525  004F30  0E01               	movlw	1
 11526  004F32  ECF3  F029         	call	_readADC
 11527                           
 11528                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11529  004F36  50C3               	movf	4035,w,c	;volatile
 11530  004F38  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11531  004F3C  0100               	movlb	0	; () banked
 11532  004F3E  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11533  004F40  C082  F083         	movff	??_readMAG,??_readMAG+1
 11534  004F44  0100               	movlb	0	; () banked
 11535  004F46  6B82               	clrf	??_readMAG& (0+255),b
 11536  004F48  0100               	movlb	0	; () banked
 11537  004F4A  1182               	iorwf	??_readMAG& (0+255),w,b
 11538  004F4C  0100               	movlb	0	; () banked
 11539  004F4E  6F84               	movwf	readMAG@res& (0+255),b
 11540  004F50  0100               	movlb	0	; () banked
 11541  004F52  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11542  004F54  0100               	movlb	0	; () banked
 11543  004F56  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11544                           
 11545                           ; BSR set to: 0
 11546                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11547  004F58  0100               	movlb	0	; () banked
 11548  004F5A  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11549  004F5C  D008               	goto	u4831
 11550  004F5E  0100               	movlb	0	; () banked
 11551  004F60  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11552  004F62  E107               	bnz	u4830
 11553  004F64  0E96               	movlw	150
 11554  004F66  0100               	movlb	0	; () banked
 11555  004F68  5D84               	subwf	readMAG@res& (0+255),w,b
 11556  004F6A  B0D8               	btfsc	status,0,c
 11557  004F6C  D002               	goto	u4830
 11558  004F6E                     u4831:
 11559  004F6E  0E01               	movlw	1
 11560  004F70  D001               	goto	u4840
 11561  004F72                     u4830:
 11562  004F72  0E00               	movlw	0
 11563  004F74                     u4840:
 11564  004F74  0100               	movlb	0	; () banked
 11565  004F76  6FE8               	movwf	_MAG_signal& (0+255),b
 11566  004F78  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11567                           
 11568                           ; BSR set to: 0
 11569  004F7A  0012               	return		;funcret
 11570  004F7C                     __end_of_readMAG:
 11571                           	opt stack 0
 11572                           tblptru	equ	0xFF8
 11573                           tblptrh	equ	0xFF7
 11574                           tblptrl	equ	0xFF6
 11575                           tablat	equ	0xFF5
 11576                           prodh	equ	0xFF4
 11577                           prodl	equ	0xFF3
 11578                           intcon	equ	0xFF2
 11579                           intcon2	equ	0xFF1
 11580                           intcon3	equ	0xFF0
 11581                           postinc0	equ	0xFEE
 11582                           wreg	equ	0xFE8
 11583                           postdec1	equ	0xFE5
 11584                           fsr1l	equ	0xFE1
 11585                           indf2	equ	0xFDF
 11586                           postinc2	equ	0xFDE
 11587                           postdec2	equ	0xFDD
 11588                           fsr2h	equ	0xFDA
 11589                           fsr2l	equ	0xFD9
 11590                           status	equ	0xFD8
 11591                           
 11592 ;; *************** function _arm *****************
 11593 ;; Defined at:
 11594 ;;		line 627 in file "Test.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;		None
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;  on              2   44[BANK0 ] int 
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  1    wreg      void 
 11601 ;; Registers used:
 11602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;Total ram usage:        3 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:   10
 11615 ;; This function calls:
 11616 ;;		_lcdInst
 11617 ;;		_printf
 11618 ;;		_stopSignals
 11619 ;; This function is called by:
 11620 ;;		_Test
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           	psect	text38
 11625  003F62                     __ptext38:
 11626                           	opt stack 0
 11627  003F62                     _arm:
 11628                           	opt stack 19
 11629                           
 11630                           ;Test.c: 628: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;incstack = 0
 11634  003F62  0E01               	movlw	1
 11635  003F64  ECFD  F02A         	call	_lcdInst
 11636  003F68  0E68               	movlw	104
 11637  003F6A  0100               	movlb	0	; () banked
 11638  003F6C  6FAB               	movwf	??_arm& (0+255),b
 11639  003F6E  0EE4               	movlw	228
 11640  003F70                     u9917:
 11641  003F70  2EE8               	decfsz	wreg,f,c
 11642  003F72  D7FE               	bra	u9917
 11643  003F74  2FAB               	decfsz	??_arm& (0+255),f,b
 11644  003F76  D7FC               	bra	u9917
 11645  003F78  F000               	nop	
 11646  003F7A  0E80               	movlw	128
 11647  003F7C  ECFD  F02A         	call	_lcdInst
 11648                           
 11649                           ;Test.c: 629: printf("D WILL RETURN   ");
 11650  003F80  0EF2               	movlw	low STR_116
 11651  003F82  0100               	movlb	0	; () banked
 11652  003F84  6F8E               	movwf	printf@f& (0+255),b
 11653  003F86  0EFB               	movlw	high STR_116
 11654  003F88  0100               	movlb	0	; () banked
 11655  003F8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11656  003F8C  EC84  F00B         	call	_printf	;wreg free
 11657                           
 11658                           ;Test.c: 630: lcdInst(0b11000000);;
 11659  003F90  0EC0               	movlw	192
 11660  003F92  ECFD  F02A         	call	_lcdInst
 11661                           
 11662                           ;Test.c: 631: printf("ELSE TOGGLES ARM");
 11663  003F96  0EAD               	movlw	low STR_125
 11664  003F98  0100               	movlb	0	; () banked
 11665  003F9A  6F8E               	movwf	printf@f& (0+255),b
 11666  003F9C  0EFC               	movlw	high STR_125
 11667  003F9E  0100               	movlb	0	; () banked
 11668  003FA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11669  003FA2  EC84  F00B         	call	_printf	;wreg free
 11670                           
 11671                           ;Test.c: 633: (INTCONbits.GIE = 1);
 11672  003FA6  8EF2               	bsf	intcon,7,c	;volatile
 11673                           
 11674                           ;Test.c: 634: machine_state = Sorting_state;
 11675  003FA8  0E01               	movlw	1
 11676  003FAA  0100               	movlb	0	; () banked
 11677  003FAC  6FFC               	movwf	_machine_state& (0+255),b
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;Test.c: 635: f_arm_position = 2;
 11681  003FAE  0E00               	movlw	0
 11682  003FB0  0100               	movlb	0	; () banked
 11683  003FB2  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11684  003FB4  0E02               	movlw	2
 11685  003FB6  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;Test.c: 636: timer2_counter = 0;
 11689  003FB8  0E00               	movlw	0
 11690  003FBA  6E74               	movwf	_timer2_counter+1,c	;volatile
 11691  003FBC  0E00               	movlw	0
 11692  003FBE  6E73               	movwf	_timer2_counter,c	;volatile
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;Test.c: 637: LATBbits.LATB3 = 1;
 11696  003FC0  868A               	bsf	3978,3,c	;volatile
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;Test.c: 638: TMR2ON = 1;
 11700  003FC2  84CA               	bsf	4042,2,c	;volatile
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;Test.c: 639: was_low_2 = 0;
 11704  003FC4  0E00               	movlw	0
 11705  003FC6  6E7A               	movwf	_was_low_2+1,c	;volatile
 11706  003FC8  0E00               	movlw	0
 11707  003FCA  6E79               	movwf	_was_low_2,c	;volatile
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;Test.c: 641: int on = 0;
 11711  003FCC  0E00               	movlw	0
 11712  003FCE  0100               	movlb	0	; () banked
 11713  003FD0  6FAD               	movwf	(arm@on+1)& (0+255),b
 11714  003FD2  0E00               	movlw	0
 11715  003FD4  6FAC               	movwf	arm@on& (0+255),b
 11716  003FD6                     l8352:
 11717                           
 11718                           ;Test.c: 643: if(on){
 11719  003FD6  0100               	movlb	0	; () banked
 11720  003FD8  51AC               	movf	arm@on& (0+255),w,b
 11721  003FDA  0100               	movlb	0	; () banked
 11722  003FDC  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11723  003FDE  B4D8               	btfsc	status,2,c
 11724  003FE0  D01C               	goto	l8364
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;Test.c: 644: on = !on;
 11728  003FE2  0100               	movlb	0	; () banked
 11729  003FE4  51AC               	movf	arm@on& (0+255),w,b
 11730  003FE6  0100               	movlb	0	; () banked
 11731  003FE8  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11732  003FEA  A4D8               	btfss	status,2,c
 11733  003FEC  D002               	goto	u7060
 11734  003FEE  0E01               	movlw	1
 11735  003FF0  D001               	goto	u7070
 11736  003FF2                     u7060:
 11737  003FF2  0E00               	movlw	0
 11738  003FF4                     u7070:
 11739  003FF4  0100               	movlb	0	; () banked
 11740  003FF6  6FAC               	movwf	arm@on& (0+255),b
 11741  003FF8  6BAD               	clrf	(arm@on+1)& (0+255),b
 11742                           
 11743                           ;Test.c: 645: while(PORTBbits.RB1 == 0){
 11744  003FFA  D005               	goto	l8358
 11745  003FFC                     l8356:
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;Test.c: 646: f_arm_position = 0;
 11749  003FFC  0E00               	movlw	0
 11750  003FFE  0100               	movlb	0	; () banked
 11751  004000  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11752  004002  0E00               	movlw	0
 11753  004004  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11754  004006                     l8358:
 11755                           
 11756                           ; BSR set to: 0
 11757  004006  A281               	btfss	3969,1,c	;volatile
 11758  004008  D7F9               	goto	l8356
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;Test.c: 647: }
 11762                           ;Test.c: 648: if(PORTB >> 4 == 0b1111){
 11763                           
 11764                           ; BSR set to: 0
 11765  00400A  3881               	swapf	3969,w,c	;volatile
 11766  00400C  0B0F               	andlw	15
 11767  00400E  0A0F               	xorlw	15
 11768  004010  B4D8               	btfsc	status,2,c
 11769  004012  D01F               	goto	l1429
 11770  004014                     l1430:
 11771  004014  A281               	btfss	3969,1,c	;volatile
 11772  004016  D7DF               	goto	l8352
 11773  004018  D7FD               	goto	l1430
 11774  00401A                     l8364:
 11775                           
 11776                           ;Test.c: 653: else{
 11777                           ;Test.c: 654: on = !on;
 11778  00401A  0100               	movlb	0	; () banked
 11779  00401C  51AC               	movf	arm@on& (0+255),w,b
 11780  00401E  0100               	movlb	0	; () banked
 11781  004020  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11782  004022  A4D8               	btfss	status,2,c
 11783  004024  D002               	goto	u7110
 11784  004026  0E01               	movlw	1
 11785  004028  D001               	goto	u7120
 11786  00402A                     u7110:
 11787  00402A  0E00               	movlw	0
 11788  00402C                     u7120:
 11789  00402C  0100               	movlb	0	; () banked
 11790  00402E  6FAC               	movwf	arm@on& (0+255),b
 11791  004030  6BAD               	clrf	(arm@on+1)& (0+255),b
 11792                           
 11793                           ;Test.c: 655: while(PORTBbits.RB1 == 0){
 11794  004032  D005               	goto	l8368
 11795  004034                     l8366:
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;Test.c: 656: f_arm_position = 1;
 11799  004034  0E00               	movlw	0
 11800  004036  0100               	movlb	0	; () banked
 11801  004038  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11802  00403A  0E01               	movlw	1
 11803  00403C  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11804  00403E                     l8368:
 11805                           
 11806                           ; BSR set to: 0
 11807  00403E  A281               	btfss	3969,1,c	;volatile
 11808  004040  D7F9               	goto	l8366
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;Test.c: 657: }
 11812                           ;Test.c: 658: if(PORTB >> 4 == 0b1111){
 11813                           
 11814                           ; BSR set to: 0
 11815  004042  3881               	swapf	3969,w,c	;volatile
 11816  004044  0B0F               	andlw	15
 11817  004046  0A0F               	xorlw	15
 11818  004048  B4D8               	btfsc	status,2,c
 11819  00404A  D003               	goto	l1429
 11820  00404C                     l1438:
 11821  00404C  A281               	btfss	3969,1,c	;volatile
 11822  00404E  D7C3               	goto	l8352
 11823  004050  D7FD               	goto	l1438
 11824  004052                     l1429:
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;Test.c: 662: }
 11828                           ;Test.c: 663: }
 11829                           ;Test.c: 665: (INTCONbits.GIE = 0);
 11830  004052  9EF2               	bcf	intcon,7,c	;volatile
 11831                           
 11832                           ; BSR set to: 0
 11833                           ;Test.c: 666: stopSignals();
 11834  004054  ECAF  F02A         	call	_stopSignals	;wreg free
 11835                           
 11836                           ;Test.c: 667: machine_state = Testing_state;
 11837  004058  0E03               	movlw	3
 11838  00405A  0100               	movlb	0	; () banked
 11839  00405C  6FFC               	movwf	_machine_state& (0+255),b
 11840                           
 11841                           ; BSR set to: 0
 11842  00405E  0012               	return		;funcret
 11843  004060                     __end_of_arm:
 11844                           	opt stack 0
 11845                           tblptru	equ	0xFF8
 11846                           tblptrh	equ	0xFF7
 11847                           tblptrl	equ	0xFF6
 11848                           tablat	equ	0xFF5
 11849                           prodh	equ	0xFF4
 11850                           prodl	equ	0xFF3
 11851                           intcon	equ	0xFF2
 11852                           intcon2	equ	0xFF1
 11853                           intcon3	equ	0xFF0
 11854                           postinc0	equ	0xFEE
 11855                           wreg	equ	0xFE8
 11856                           postdec1	equ	0xFE5
 11857                           fsr1l	equ	0xFE1
 11858                           indf2	equ	0xFDF
 11859                           postinc2	equ	0xFDE
 11860                           postdec2	equ	0xFDD
 11861                           fsr2h	equ	0xFDA
 11862                           fsr2l	equ	0xFD9
 11863                           status	equ	0xFD8
 11864                           
 11865 ;; *************** function _algorithmTest *****************
 11866 ;; Defined at:
 11867 ;;		line 79 in file "Test.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;		None
 11870 ;; Auto vars:     Size  Location     Type
 11871 ;;		None
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  1    wreg      void 
 11874 ;; Registers used:
 11875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/0
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11885 ;;Total ram usage:        2 bytes
 11886 ;; Hardware stack levels used:    1
 11887 ;; Hardware stack levels required when called:   10
 11888 ;; This function calls:
 11889 ;;		_lcdInst
 11890 ;;		_printf
 11891 ;; This function is called by:
 11892 ;;		_Test
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           	psect	text39
 11897  00422A                     __ptext39:
 11898                           	opt stack 0
 11899  00422A                     _algorithmTest:
 11900                           	opt stack 19
 11901                           
 11902                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;incstack = 0
 11906  00422A  0E01               	movlw	1
 11907  00422C  ECFD  F02A         	call	_lcdInst
 11908  004230  0E68               	movlw	104
 11909  004232  0100               	movlb	0	; () banked
 11910  004234  6FAB               	movwf	??_algorithmTest& (0+255),b
 11911  004236  0EE4               	movlw	228
 11912  004238                     u9927:
 11913  004238  2EE8               	decfsz	wreg,f,c
 11914  00423A  D7FE               	bra	u9927
 11915  00423C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11916  00423E  D7FC               	bra	u9927
 11917  004240  F000               	nop	
 11918  004242  0E80               	movlw	128
 11919  004244  ECFD  F02A         	call	_lcdInst
 11920                           
 11921                           ;Test.c: 82: printf("ALGORITHM TEST");
 11922  004248  0EDC               	movlw	low STR_70
 11923  00424A  0100               	movlb	0	; () banked
 11924  00424C  6F8E               	movwf	printf@f& (0+255),b
 11925  00424E  0EFE               	movlw	high STR_70
 11926  004250  0100               	movlb	0	; () banked
 11927  004252  6F8F               	movwf	(printf@f+1)& (0+255),b
 11928  004254  EC84  F00B         	call	_printf	;wreg free
 11929                           
 11930                           ;Test.c: 83: lcdInst(0b11000000);;
 11931  004258  0EC0               	movlw	192
 11932  00425A  ECFD  F02A         	call	_lcdInst
 11933                           
 11934                           ;Test.c: 84: printf("PUSH TO START");
 11935  00425E  0E15               	movlw	low STR_71
 11936  004260  0100               	movlb	0	; () banked
 11937  004262  6F8E               	movwf	printf@f& (0+255),b
 11938  004264  0EFF               	movlw	high STR_71
 11939  004266  0100               	movlb	0	; () banked
 11940  004268  6F8F               	movwf	(printf@f+1)& (0+255),b
 11941  00426A  EC84  F00B         	call	_printf	;wreg free
 11942                           
 11943                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 11944  00426E  0E05               	movlw	5
 11945  004270  0100               	movlb	0	; () banked
 11946  004272  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11947  004274  0E0F               	movlw	15
 11948  004276  0100               	movlb	0	; () banked
 11949  004278  6FAB               	movwf	??_algorithmTest& (0+255),b
 11950  00427A  0EF1               	movlw	241
 11951  00427C                     u9937:
 11952  00427C  2EE8               	decfsz	wreg,f,c
 11953  00427E  D7FE               	bra	u9937
 11954  004280  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11955  004282  D7FC               	bra	u9937
 11956  004284  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11957  004286  D7FA               	bra	u9937
 11958  004288                     l1225:
 11959  004288  A281               	btfss	3969,1,c	;volatile
 11960  00428A  D7FE               	goto	l1225
 11961  00428C                     l1228:
 11962  00428C  B281               	btfsc	3969,1,c	;volatile
 11963  00428E  D7FE               	goto	l1228
 11964                           
 11965                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11966  004290  0E01               	movlw	1
 11967  004292  ECFD  F02A         	call	_lcdInst
 11968  004296  0E68               	movlw	104
 11969  004298  0100               	movlb	0	; () banked
 11970  00429A  6FAB               	movwf	??_algorithmTest& (0+255),b
 11971  00429C  0EE4               	movlw	228
 11972  00429E                     u9947:
 11973  00429E  2EE8               	decfsz	wreg,f,c
 11974  0042A0  D7FE               	bra	u9947
 11975  0042A2  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11976  0042A4  D7FC               	bra	u9947
 11977  0042A6  F000               	nop	
 11978  0042A8  0E80               	movlw	128
 11979  0042AA  ECFD  F02A         	call	_lcdInst
 11980                           
 11981                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 11982  0042AE  0E58               	movlw	low STR_72
 11983  0042B0  0100               	movlb	0	; () banked
 11984  0042B2  6F8E               	movwf	printf@f& (0+255),b
 11985  0042B4  0EFC               	movlw	high STR_72
 11986  0042B6  0100               	movlb	0	; () banked
 11987  0042B8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11988  0042BA  EC84  F00B         	call	_printf	;wreg free
 11989                           
 11990                           ;Test.c: 100: printf("ALG2: 12 CANS");
 11991  0042BE  0EF9               	movlw	low STR_73
 11992  0042C0  0100               	movlb	0	; () banked
 11993  0042C2  6F8E               	movwf	printf@f& (0+255),b
 11994  0042C4  0EFE               	movlw	high STR_73
 11995  0042C6  0100               	movlb	0	; () banked
 11996  0042C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11997  0042CA  EC84  F00B         	call	_printf	;wreg free
 11998                           
 11999                           ;Test.c: 109: printf("ALG3: 1 CAN");
 12000  0042CE  0E59               	movlw	low STR_74
 12001  0042D0  0100               	movlb	0	; () banked
 12002  0042D2  6F8E               	movwf	printf@f& (0+255),b
 12003  0042D4  0EFF               	movlw	high STR_74
 12004  0042D6  0100               	movlb	0	; () banked
 12005  0042D8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12006  0042DA  EC84  F00B         	call	_printf	;wreg free
 12007                           
 12008                           ;Test.c: 115: printf("ALG4: ALL CANS");
 12009  0042DE  0EBE               	movlw	low STR_75
 12010  0042E0  0100               	movlb	0	; () banked
 12011  0042E2  6F8E               	movwf	printf@f& (0+255),b
 12012  0042E4  0EFE               	movlw	high STR_75
 12013  0042E6  0100               	movlb	0	; () banked
 12014  0042E8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12015  0042EA  EC84  F00B         	call	_printf	;wreg free
 12016                           
 12017                           ;Test.c: 120: printf("ALG5: NO CANS");
 12018  0042EE  0E07               	movlw	low STR_76
 12019  0042F0  0100               	movlb	0	; () banked
 12020  0042F2  6F8E               	movwf	printf@f& (0+255),b
 12021  0042F4  0EFF               	movlw	high STR_76
 12022  0042F6  0100               	movlb	0	; () banked
 12023  0042F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12024  0042FA  EC84  F00B         	call	_printf	;wreg free
 12025  0042FE  0012               	return		;funcret
 12026  004300                     __end_of_algorithmTest:
 12027                           	opt stack 0
 12028                           tblptru	equ	0xFF8
 12029                           tblptrh	equ	0xFF7
 12030                           tblptrl	equ	0xFF6
 12031                           tablat	equ	0xFF5
 12032                           prodh	equ	0xFF4
 12033                           prodl	equ	0xFF3
 12034                           intcon	equ	0xFF2
 12035                           intcon2	equ	0xFF1
 12036                           intcon3	equ	0xFF0
 12037                           postinc0	equ	0xFEE
 12038                           wreg	equ	0xFE8
 12039                           postdec1	equ	0xFE5
 12040                           fsr1l	equ	0xFE1
 12041                           indf2	equ	0xFDF
 12042                           postinc2	equ	0xFDE
 12043                           postdec2	equ	0xFDD
 12044                           fsr2h	equ	0xFDA
 12045                           fsr2l	equ	0xFD9
 12046                           status	equ	0xFD8
 12047                           
 12048 ;; *************** function _actuatorTest *****************
 12049 ;; Defined at:
 12050 ;;		line 202 in file "Test.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;		None
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;  i               1   45[BANK0 ] unsigned char 
 12055 ;;  i               1   67[BANK0 ] unsigned char 
 12056 ;;  i               1   66[BANK0 ] unsigned char 
 12057 ;;  i               1   65[BANK0 ] unsigned char 
 12058 ;;  i               1   64[BANK0 ] unsigned char 
 12059 ;;  i               1   63[BANK0 ] unsigned char 
 12060 ;;  i               1   62[BANK0 ] unsigned char 
 12061 ;;  i               1   61[BANK0 ] unsigned char 
 12062 ;;  i               1   60[BANK0 ] unsigned char 
 12063 ;;  i               1   59[BANK0 ] unsigned char 
 12064 ;;  i               1   58[BANK0 ] unsigned char 
 12065 ;;  i               1   57[BANK0 ] unsigned char 
 12066 ;;  i               1   56[BANK0 ] unsigned char 
 12067 ;;  i               1   55[BANK0 ] unsigned char 
 12068 ;;  i               1   54[BANK0 ] unsigned char 
 12069 ;;  i               1   53[BANK0 ] unsigned char 
 12070 ;;  i               1   52[BANK0 ] unsigned char 
 12071 ;;  i               1   51[BANK0 ] unsigned char 
 12072 ;;  i               1   50[BANK0 ] unsigned char 
 12073 ;;  i               1   49[BANK0 ] unsigned char 
 12074 ;;  i               1   48[BANK0 ] unsigned char 
 12075 ;;  i               1   47[BANK0 ] unsigned char 
 12076 ;;  i               1   46[BANK0 ] unsigned char 
 12077 ;;  i               2   68[BANK0 ] int 
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  1    wreg      void 
 12080 ;; Registers used:
 12081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12082 ;; Tracked objects:
 12083 ;;		On entry : 0/0
 12084 ;;		On exit  : 0/0
 12085 ;;		Unchanged: 0/0
 12086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12088 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;Total ram usage:       27 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:   10
 12094 ;; This function calls:
 12095 ;;		_lcdInst
 12096 ;;		_printf
 12097 ;;		_updateServoPosition
 12098 ;; This function is called by:
 12099 ;;		_Test
 12100 ;; This function uses a non-reentrant model
 12101 ;;
 12102                           
 12103                           	psect	text40
 12104  0008D6                     __ptext40:
 12105                           	opt stack 0
 12106  0008D6                     _actuatorTest:
 12107                           	opt stack 19
 12108                           
 12109                           ;Test.c: 204: int i = 0;
 12110                           
 12111                           ;incstack = 0
 12112  0008D6  0E00               	movlw	0
 12113  0008D8  0100               	movlb	0	; () banked
 12114  0008DA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12115  0008DC  0E00               	movlw	0
 12116  0008DE  6FC4               	movwf	actuatorTest@i& (0+255),b
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;Test.c: 206: (INTCONbits.GIE = 1);
 12120  0008E0  8EF2               	bsf	intcon,7,c	;volatile
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12124  0008E2  0E01               	movlw	1
 12125  0008E4  ECFD  F02A         	call	_lcdInst
 12126  0008E8  0E68               	movlw	104
 12127  0008EA  0100               	movlb	0	; () banked
 12128  0008EC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12129  0008EE  0EE4               	movlw	228
 12130  0008F0                     u9957:
 12131  0008F0  2EE8               	decfsz	wreg,f,c
 12132  0008F2  D7FE               	bra	u9957
 12133  0008F4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12134  0008F6  D7FC               	bra	u9957
 12135  0008F8  F000               	nop	
 12136  0008FA  0E80               	movlw	128
 12137  0008FC  ECFD  F02A         	call	_lcdInst
 12138                           
 12139                           ;Test.c: 208: printf("ACTUATORS");
 12140  000900  0E90               	movlw	low STR_88
 12141  000902  0100               	movlb	0	; () banked
 12142  000904  6F8E               	movwf	printf@f& (0+255),b
 12143  000906  0EFF               	movlw	high STR_88
 12144  000908  0100               	movlb	0	; () banked
 12145  00090A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12146  00090C  EC84  F00B         	call	_printf	;wreg free
 12147                           
 12148                           ;Test.c: 209: lcdInst(0b11000000);;
 12149  000910  0EC0               	movlw	192
 12150  000912  ECFD  F02A         	call	_lcdInst
 12151                           
 12152                           ;Test.c: 210: printf("PUSH TO START");
 12153  000916  0E15               	movlw	low STR_71
 12154  000918  0100               	movlb	0	; () banked
 12155  00091A  6F8E               	movwf	printf@f& (0+255),b
 12156  00091C  0EFF               	movlw	high STR_71
 12157  00091E  0100               	movlb	0	; () banked
 12158  000920  6F8F               	movwf	(printf@f+1)& (0+255),b
 12159  000922  EC84  F00B         	call	_printf	;wreg free
 12160                           
 12161                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 12162  000926  0E05               	movlw	5
 12163  000928  0100               	movlb	0	; () banked
 12164  00092A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12165  00092C  0E0F               	movlw	15
 12166  00092E  0100               	movlb	0	; () banked
 12167  000930  6FAB               	movwf	??_actuatorTest& (0+255),b
 12168  000932  0EF1               	movlw	241
 12169  000934                     u9967:
 12170  000934  2EE8               	decfsz	wreg,f,c
 12171  000936  D7FE               	bra	u9967
 12172  000938  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12173  00093A  D7FC               	bra	u9967
 12174  00093C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12175  00093E  D7FA               	bra	u9967
 12176  000940                     l1260:
 12177  000940  A281               	btfss	3969,1,c	;volatile
 12178  000942  D7FE               	goto	l1260
 12179  000944                     l1263:
 12180  000944  B281               	btfsc	3969,1,c	;volatile
 12181  000946  D7FE               	goto	l1263
 12182                           
 12183                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12184  000948  0E01               	movlw	1
 12185  00094A  ECFD  F02A         	call	_lcdInst
 12186  00094E  0E68               	movlw	104
 12187  000950  0100               	movlb	0	; () banked
 12188  000952  6FAB               	movwf	??_actuatorTest& (0+255),b
 12189  000954  0EE4               	movlw	228
 12190  000956                     u9977:
 12191  000956  2EE8               	decfsz	wreg,f,c
 12192  000958  D7FE               	bra	u9977
 12193  00095A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12194  00095C  D7FC               	bra	u9977
 12195  00095E  F000               	nop	
 12196  000960  0E80               	movlw	128
 12197  000962  ECFD  F02A         	call	_lcdInst
 12198                           
 12199                           ;Test.c: 219: printf("TST: DC MOTORS");
 12200  000966  0ECD               	movlw	low STR_90
 12201  000968  0100               	movlb	0	; () banked
 12202  00096A  6F8E               	movwf	printf@f& (0+255),b
 12203  00096C  0EFE               	movlw	high STR_90
 12204  00096E  0100               	movlb	0	; () banked
 12205  000970  6F8F               	movwf	(printf@f+1)& (0+255),b
 12206  000972  EC84  F00B         	call	_printf	;wreg free
 12207                           
 12208                           ;Test.c: 220: lcdInst(0b11000000);;
 12209  000976  0EC0               	movlw	192
 12210  000978  ECFD  F02A         	call	_lcdInst
 12211                           
 12212                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 12213  00097C  0EEB               	movlw	low STR_91
 12214  00097E  0100               	movlb	0	; () banked
 12215  000980  6F8E               	movwf	printf@f& (0+255),b
 12216  000982  0EFE               	movlw	high STR_91
 12217  000984  0100               	movlb	0	; () banked
 12218  000986  6F8F               	movwf	(printf@f+1)& (0+255),b
 12219  000988  EC84  F00B         	call	_printf	;wreg free
 12220                           
 12221                           ;Test.c: 222: LATBbits.LATB2 = 1;
 12222  00098C  848A               	bsf	3978,2,c	;volatile
 12223                           
 12224                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12225  00098E  0E00               	movlw	0
 12226  000990  0100               	movlb	0	; () banked
 12227  000992  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12228  000994  0E00               	movlw	0
 12229  000996  6FC4               	movwf	actuatorTest@i& (0+255),b
 12230                           
 12231                           ; BSR set to: 0
 12232  000998  0100               	movlb	0	; () banked
 12233  00099A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12234  00099C  D008               	goto	l7938
 12235  00099E  0100               	movlb	0	; () banked
 12236  0009A0  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12237  0009A2  E123               	bnz	l1267
 12238  0009A4  0E05               	movlw	5
 12239  0009A6  0100               	movlb	0	; () banked
 12240  0009A8  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12241  0009AA  B0D8               	btfsc	status,0,c
 12242  0009AC  D01E               	goto	l1267
 12243  0009AE                     l7938:
 12244                           
 12245                           ; BSR set to: 0
 12246  0009AE  0E00               	movlw	0
 12247  0009B0  0100               	movlb	0	; () banked
 12248  0009B2  6FAD               	movwf	actuatorTest@i_1730& (0+255),b
 12249  0009B4                     l7940:
 12250                           
 12251                           ; BSR set to: 0
 12252  0009B4  0E63               	movlw	99
 12253  0009B6  0100               	movlb	0	; () banked
 12254  0009B8  65AD               	cpfsgt	actuatorTest@i_1730& (0+255),b
 12255  0009BA  D001               	goto	l7944
 12256  0009BC  D00C               	goto	l7948
 12257  0009BE                     l7944:
 12258                           
 12259                           ; BSR set to: 0
 12260  0009BE  0E68               	movlw	104
 12261  0009C0  0100               	movlb	0	; () banked
 12262  0009C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12263  0009C4  0EE4               	movlw	228
 12264  0009C6                     u9987:
 12265  0009C6  2EE8               	decfsz	wreg,f,c
 12266  0009C8  D7FE               	bra	u9987
 12267  0009CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12268  0009CC  D7FC               	bra	u9987
 12269  0009CE  F000               	nop	
 12270  0009D0  0100               	movlb	0	; () banked
 12271  0009D2  2BAD               	incf	actuatorTest@i_1730& (0+255),f,b
 12272  0009D4  D7EF               	goto	l7940
 12273  0009D6                     l7948:
 12274                           
 12275                           ; BSR set to: 0
 12276  0009D6  0100               	movlb	0	; () banked
 12277  0009D8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12278  0009DA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12279                           
 12280                           ; BSR set to: 0
 12281  0009DC  0100               	movlb	0	; () banked
 12282  0009DE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12283  0009E0  D7E6               	goto	l7938
 12284  0009E2  0100               	movlb	0	; () banked
 12285  0009E4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12286  0009E6  E101               	bnz	u6540
 12287  0009E8  D7DD               	goto	L12
 12288  0009EA                     u6540:
 12289  0009EA                     l1267:
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;Test.c: 224: LATBbits.LATB2 = 0;
 12293  0009EA  948A               	bcf	3978,2,c	;volatile
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12297  0009EC  0E01               	movlw	1
 12298  0009EE  ECFD  F02A         	call	_lcdInst
 12299  0009F2  0E68               	movlw	104
 12300  0009F4  0100               	movlb	0	; () banked
 12301  0009F6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12302  0009F8  0EE4               	movlw	228
 12303  0009FA                     u9997:
 12304  0009FA  2EE8               	decfsz	wreg,f,c
 12305  0009FC  D7FE               	bra	u9997
 12306  0009FE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12307  000A00  D7FC               	bra	u9997
 12308  000A02  F000               	nop	
 12309  000A04  0E80               	movlw	128
 12310  000A06  ECFD  F02A         	call	_lcdInst
 12311                           
 12312                           ;Test.c: 231: printf("TST: COND SOLN'D");
 12313  000A0A  0E69               	movlw	low STR_92
 12314  000A0C  0100               	movlb	0	; () banked
 12315  000A0E  6F8E               	movwf	printf@f& (0+255),b
 12316  000A10  0EFC               	movlw	high STR_92
 12317  000A12  0100               	movlb	0	; () banked
 12318  000A14  6F8F               	movwf	(printf@f+1)& (0+255),b
 12319  000A16  EC84  F00B         	call	_printf	;wreg free
 12320                           
 12321                           ;Test.c: 232: lcdInst(0b11000000);;
 12322  000A1A  0EC0               	movlw	192
 12323  000A1C  ECFD  F02A         	call	_lcdInst
 12324                           
 12325                           ;Test.c: 233: printf("PIN RA3...");
 12326  000A20  0E65               	movlw	low STR_93
 12327  000A22  0100               	movlb	0	; () banked
 12328  000A24  6F8E               	movwf	printf@f& (0+255),b
 12329  000A26  0EFF               	movlw	high STR_93
 12330  000A28  0100               	movlb	0	; () banked
 12331  000A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12332  000A2C  EC84  F00B         	call	_printf	;wreg free
 12333                           
 12334                           ;Test.c: 234: for(i=0;i<5;i++){
 12335  000A30  0E00               	movlw	0
 12336  000A32  0100               	movlb	0	; () banked
 12337  000A34  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12338  000A36  0E00               	movlw	0
 12339  000A38  6FC4               	movwf	actuatorTest@i& (0+255),b
 12340                           
 12341                           ; BSR set to: 0
 12342  000A3A  0100               	movlb	0	; () banked
 12343  000A3C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12344  000A3E  D008               	goto	l1270
 12345  000A40  0100               	movlb	0	; () banked
 12346  000A42  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12347  000A44  E12C               	bnz	l1271
 12348  000A46  0E05               	movlw	5
 12349  000A48  0100               	movlb	0	; () banked
 12350  000A4A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12351  000A4C  B0D8               	btfsc	status,0,c
 12352  000A4E  D027               	goto	l1271
 12353  000A50                     l1270:
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;Test.c: 235: LATAbits.LATA3 = 1;
 12357  000A50  8689               	bsf	3977,3,c	;volatile
 12358                           
 12359                           ; BSR set to: 0
 12360                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 12361  000A52  0E0D               	movlw	13
 12362  000A54  0100               	movlb	0	; () banked
 12363  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12364  000A58  0E2D               	movlw	45
 12365  000A5A  0100               	movlb	0	; () banked
 12366  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12367  000A5E  0ED7               	movlw	215
 12368  000A60                     u10007:
 12369  000A60  2EE8               	decfsz	wreg,f,c
 12370  000A62  D7FE               	bra	u10007
 12371  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12372  000A66  D7FC               	bra	u10007
 12373  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12374  000A6A  D7FA               	bra	u10007
 12375  000A6C  D000               	nop2	
 12376                           
 12377                           ;Test.c: 237: LATAbits.LATA3 = !1;
 12378  000A6E  9689               	bcf	3977,3,c	;volatile
 12379                           
 12380                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12381  000A70  0E1D               	movlw	29
 12382  000A72  0100               	movlb	0	; () banked
 12383  000A74  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12384  000A76  0E69               	movlw	105
 12385  000A78  0100               	movlb	0	; () banked
 12386  000A7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12387  000A7C  0EA5               	movlw	165
 12388  000A7E                     u10017:
 12389  000A7E  2EE8               	decfsz	wreg,f,c
 12390  000A80  D7FE               	bra	u10017
 12391  000A82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12392  000A84  D7FC               	bra	u10017
 12393  000A86  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12394  000A88  D7FA               	bra	u10017
 12395  000A8A  0100               	movlb	0	; () banked
 12396  000A8C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12397  000A8E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12398  000A90  0100               	movlb	0	; () banked
 12399  000A92  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12400  000A94  D7DD               	goto	l1270
 12401  000A96  0100               	movlb	0	; () banked
 12402  000A98  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12403  000A9A  E101               	bnz	u6560
 12404  000A9C  D7D4               	goto	L13
 12405  000A9E                     u6560:
 12406  000A9E                     l1271:
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;Test.c: 239: }
 12410                           ;Test.c: 240: LATAbits.LATA3 = !1;
 12411  000A9E  9689               	bcf	3977,3,c	;volatile
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12415  000AA0  0E01               	movlw	1
 12416  000AA2  ECFD  F02A         	call	_lcdInst
 12417  000AA6  0E68               	movlw	104
 12418  000AA8  0100               	movlb	0	; () banked
 12419  000AAA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12420  000AAC  0EE4               	movlw	228
 12421  000AAE                     u10027:
 12422  000AAE  2EE8               	decfsz	wreg,f,c
 12423  000AB0  D7FE               	bra	u10027
 12424  000AB2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12425  000AB4  D7FC               	bra	u10027
 12426  000AB6  F000               	nop	
 12427  000AB8  0E80               	movlw	128
 12428  000ABA  ECFD  F02A         	call	_lcdInst
 12429                           
 12430                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 12431  000ABE  0E7A               	movlw	low STR_94
 12432  000AC0  0100               	movlb	0	; () banked
 12433  000AC2  6F8E               	movwf	printf@f& (0+255),b
 12434  000AC4  0EFC               	movlw	high STR_94
 12435  000AC6  0100               	movlb	0	; () banked
 12436  000AC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12437  000ACA  EC84  F00B         	call	_printf	;wreg free
 12438                           
 12439                           ;Test.c: 248: lcdInst(0b11000000);;
 12440  000ACE  0EC0               	movlw	192
 12441  000AD0  ECFD  F02A         	call	_lcdInst
 12442                           
 12443                           ;Test.c: 249: printf("PIN RA4...");
 12444  000AD4  0E70               	movlw	low STR_95
 12445  000AD6  0100               	movlb	0	; () banked
 12446  000AD8  6F8E               	movwf	printf@f& (0+255),b
 12447  000ADA  0EFF               	movlw	high STR_95
 12448  000ADC  0100               	movlb	0	; () banked
 12449  000ADE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12450  000AE0  EC84  F00B         	call	_printf	;wreg free
 12451                           
 12452                           ;Test.c: 250: for(i=0;i<5;i++){
 12453  000AE4  0E00               	movlw	0
 12454  000AE6  0100               	movlb	0	; () banked
 12455  000AE8  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12456  000AEA  0E00               	movlw	0
 12457  000AEC  6FC4               	movwf	actuatorTest@i& (0+255),b
 12458                           
 12459                           ; BSR set to: 0
 12460  000AEE  0100               	movlb	0	; () banked
 12461  000AF0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12462  000AF2  D008               	goto	l1272
 12463  000AF4  0100               	movlb	0	; () banked
 12464  000AF6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12465  000AF8  E12C               	bnz	l1273
 12466  000AFA  0E05               	movlw	5
 12467  000AFC  0100               	movlb	0	; () banked
 12468  000AFE  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12469  000B00  B0D8               	btfsc	status,0,c
 12470  000B02  D027               	goto	l1273
 12471  000B04                     l1272:
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;Test.c: 251: LATAbits.LATA4 = 1;
 12475  000B04  8889               	bsf	3977,4,c	;volatile
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 12479  000B06  0E0D               	movlw	13
 12480  000B08  0100               	movlb	0	; () banked
 12481  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12482  000B0C  0E2D               	movlw	45
 12483  000B0E  0100               	movlb	0	; () banked
 12484  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 12485  000B12  0ED7               	movlw	215
 12486  000B14                     u10037:
 12487  000B14  2EE8               	decfsz	wreg,f,c
 12488  000B16  D7FE               	bra	u10037
 12489  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12490  000B1A  D7FC               	bra	u10037
 12491  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12492  000B1E  D7FA               	bra	u10037
 12493  000B20  D000               	nop2	
 12494                           
 12495                           ;Test.c: 253: LATAbits.LATA4 = !1;
 12496  000B22  9889               	bcf	3977,4,c	;volatile
 12497                           
 12498                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12499  000B24  0E1D               	movlw	29
 12500  000B26  0100               	movlb	0	; () banked
 12501  000B28  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12502  000B2A  0E69               	movlw	105
 12503  000B2C  0100               	movlb	0	; () banked
 12504  000B2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12505  000B30  0EA5               	movlw	165
 12506  000B32                     u10047:
 12507  000B32  2EE8               	decfsz	wreg,f,c
 12508  000B34  D7FE               	bra	u10047
 12509  000B36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12510  000B38  D7FC               	bra	u10047
 12511  000B3A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12512  000B3C  D7FA               	bra	u10047
 12513  000B3E  0100               	movlb	0	; () banked
 12514  000B40  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12515  000B42  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12516  000B44  0100               	movlb	0	; () banked
 12517  000B46  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12518  000B48  D7DD               	goto	l1272
 12519  000B4A  0100               	movlb	0	; () banked
 12520  000B4C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12521  000B4E  E101               	bnz	u6580
 12522  000B50  D7D4               	goto	L14
 12523  000B52                     u6580:
 12524  000B52                     l1273:
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;Test.c: 255: }
 12528                           ;Test.c: 256: LATAbits.LATA4 = !1;
 12529  000B52  9889               	bcf	3977,4,c	;volatile
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12533  000B54  0E01               	movlw	1
 12534  000B56  ECFD  F02A         	call	_lcdInst
 12535  000B5A  0E68               	movlw	104
 12536  000B5C  0100               	movlb	0	; () banked
 12537  000B5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12538  000B60  0EE4               	movlw	228
 12539  000B62                     u10057:
 12540  000B62  2EE8               	decfsz	wreg,f,c
 12541  000B64  D7FE               	bra	u10057
 12542  000B66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12543  000B68  D7FC               	bra	u10057
 12544  000B6A  F000               	nop	
 12545  000B6C  0E80               	movlw	128
 12546  000B6E  ECFD  F02A         	call	_lcdInst
 12547                           
 12548                           ;Test.c: 260: machine_state = Sorting_state;
 12549  000B72  0E01               	movlw	1
 12550  000B74  0100               	movlb	0	; () banked
 12551  000B76  6FFC               	movwf	_machine_state& (0+255),b
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;Test.c: 261: was_low_1 = 0;
 12555  000B78  0E00               	movlw	0
 12556  000B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 12557  000B7C  0E00               	movlw	0
 12558  000B7E  6E77               	movwf	_was_low_1,c	;volatile
 12559                           
 12560                           ; BSR set to: 0
 12561                           ;Test.c: 262: was_low_1 = 0;
 12562  000B80  0E00               	movlw	0
 12563  000B82  6E78               	movwf	_was_low_1+1,c	;volatile
 12564  000B84  0E00               	movlw	0
 12565  000B86  6E77               	movwf	_was_low_1,c	;volatile
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;Test.c: 269: printf("TST: PAN SERVO");
 12569  000B88  0EAF               	movlw	low STR_96
 12570  000B8A  0100               	movlb	0	; () banked
 12571  000B8C  6F8E               	movwf	printf@f& (0+255),b
 12572  000B8E  0EFE               	movlw	high STR_96
 12573  000B90  0100               	movlb	0	; () banked
 12574  000B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 12575  000B94  EC84  F00B         	call	_printf	;wreg free
 12576                           
 12577                           ;Test.c: 270: lcdInst(0b11000000);;
 12578  000B98  0EC0               	movlw	192
 12579  000B9A  ECFD  F02A         	call	_lcdInst
 12580                           
 12581                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 12582  000B9E  0ED0               	movlw	low STR_97
 12583  000BA0  0100               	movlb	0	; () banked
 12584  000BA2  6F8E               	movwf	printf@f& (0+255),b
 12585  000BA4  0EFB               	movlw	high STR_97
 12586  000BA6  0100               	movlb	0	; () banked
 12587  000BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12588  000BAA  EC84  F00B         	call	_printf	;wreg free
 12589                           
 12590                           ;Test.c: 272: updateServoPosition(1200, 1);
 12591  000BAE  0E04               	movlw	4
 12592  000BB0  0100               	movlb	0	; () banked
 12593  000BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12594  000BB4  0EB0               	movlw	176
 12595  000BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12596  000BB8  0E00               	movlw	0
 12597  000BBA  0100               	movlb	0	; () banked
 12598  000BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12599  000BBE  0E01               	movlw	1
 12600  000BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12601  000BC2  EC2D  F024         	call	_updateServoPosition	;wreg free
 12602                           
 12603                           ;Test.c: 273: TMR1ON = 1;
 12604  000BC6  80CD               	bsf	4045,0,c	;volatile
 12605                           
 12606                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12607  000BC8  0E00               	movlw	0
 12608  000BCA  0100               	movlb	0	; () banked
 12609  000BCC  6FAE               	movwf	actuatorTest@i_1737& (0+255),b
 12610  000BCE                     l8024:
 12611                           
 12612                           ; BSR set to: 0
 12613  000BCE  0E63               	movlw	99
 12614  000BD0  0100               	movlb	0	; () banked
 12615  000BD2  65AE               	cpfsgt	actuatorTest@i_1737& (0+255),b
 12616  000BD4  D001               	goto	l8028
 12617  000BD6  D00C               	goto	l8032
 12618  000BD8                     l8028:
 12619                           
 12620                           ; BSR set to: 0
 12621  000BD8  0E68               	movlw	104
 12622  000BDA  0100               	movlb	0	; () banked
 12623  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12624  000BDE  0EE4               	movlw	228
 12625  000BE0                     u10067:
 12626  000BE0  2EE8               	decfsz	wreg,f,c
 12627  000BE2  D7FE               	bra	u10067
 12628  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12629  000BE6  D7FC               	bra	u10067
 12630  000BE8  F000               	nop	
 12631  000BEA  0100               	movlb	0	; () banked
 12632  000BEC  2BAE               	incf	actuatorTest@i_1737& (0+255),f,b
 12633  000BEE  D7EF               	goto	l8024
 12634  000BF0                     l8032:
 12635                           
 12636                           ; BSR set to: 0
 12637  000BF0  0E00               	movlw	0
 12638  000BF2  0100               	movlb	0	; () banked
 12639  000BF4  6FAF               	movwf	actuatorTest@i_1738& (0+255),b
 12640  000BF6                     l8034:
 12641                           
 12642                           ; BSR set to: 0
 12643  000BF6  0E63               	movlw	99
 12644  000BF8  0100               	movlb	0	; () banked
 12645  000BFA  65AF               	cpfsgt	actuatorTest@i_1738& (0+255),b
 12646  000BFC  D001               	goto	l8038
 12647  000BFE  D00C               	goto	l8042
 12648  000C00                     l8038:
 12649                           
 12650                           ; BSR set to: 0
 12651  000C00  0E68               	movlw	104
 12652  000C02  0100               	movlb	0	; () banked
 12653  000C04  6FAB               	movwf	??_actuatorTest& (0+255),b
 12654  000C06  0EE4               	movlw	228
 12655  000C08                     u10077:
 12656  000C08  2EE8               	decfsz	wreg,f,c
 12657  000C0A  D7FE               	bra	u10077
 12658  000C0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12659  000C0E  D7FC               	bra	u10077
 12660  000C10  F000               	nop	
 12661  000C12  0100               	movlb	0	; () banked
 12662  000C14  2BAF               	incf	actuatorTest@i_1738& (0+255),f,b
 12663  000C16  D7EF               	goto	l8034
 12664  000C18                     l8042:
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12668  000C18  0E80               	movlw	128
 12669  000C1A  ECFD  F02A         	call	_lcdInst
 12670  000C1E  0EC0               	movlw	192
 12671  000C20  ECFD  F02A         	call	_lcdInst
 12672                           
 12673                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 12674  000C24  0EBF               	movlw	low STR_98
 12675  000C26  0100               	movlb	0	; () banked
 12676  000C28  6F8E               	movwf	printf@f& (0+255),b
 12677  000C2A  0EFB               	movlw	high STR_98
 12678  000C2C  0100               	movlb	0	; () banked
 12679  000C2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12680  000C30  EC84  F00B         	call	_printf	;wreg free
 12681                           
 12682                           ;Test.c: 278: updateServoPosition(500, 1);
 12683  000C34  0E01               	movlw	1
 12684  000C36  0100               	movlb	0	; () banked
 12685  000C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12686  000C3A  0EF4               	movlw	244
 12687  000C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12688  000C3E  0E00               	movlw	0
 12689  000C40  0100               	movlb	0	; () banked
 12690  000C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12691  000C44  0E01               	movlw	1
 12692  000C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12693  000C48  EC2D  F024         	call	_updateServoPosition	;wreg free
 12694                           
 12695                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12696  000C4C  0E00               	movlw	0
 12697  000C4E  0100               	movlb	0	; () banked
 12698  000C50  6FB0               	movwf	actuatorTest@i_1740& (0+255),b
 12699  000C52                     l8050:
 12700                           
 12701                           ; BSR set to: 0
 12702  000C52  0E63               	movlw	99
 12703  000C54  0100               	movlb	0	; () banked
 12704  000C56  65B0               	cpfsgt	actuatorTest@i_1740& (0+255),b
 12705  000C58  D001               	goto	l8054
 12706  000C5A  D00C               	goto	l8058
 12707  000C5C                     l8054:
 12708                           
 12709                           ; BSR set to: 0
 12710  000C5C  0E68               	movlw	104
 12711  000C5E  0100               	movlb	0	; () banked
 12712  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 12713  000C62  0EE4               	movlw	228
 12714  000C64                     u10087:
 12715  000C64  2EE8               	decfsz	wreg,f,c
 12716  000C66  D7FE               	bra	u10087
 12717  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12718  000C6A  D7FC               	bra	u10087
 12719  000C6C  F000               	nop	
 12720  000C6E  0100               	movlb	0	; () banked
 12721  000C70  2BB0               	incf	actuatorTest@i_1740& (0+255),f,b
 12722  000C72  D7EF               	goto	l8050
 12723  000C74                     l8058:
 12724                           
 12725                           ; BSR set to: 0
 12726  000C74  0E00               	movlw	0
 12727  000C76  0100               	movlb	0	; () banked
 12728  000C78  6FB1               	movwf	actuatorTest@i_1741& (0+255),b
 12729  000C7A                     l8060:
 12730                           
 12731                           ; BSR set to: 0
 12732  000C7A  0E63               	movlw	99
 12733  000C7C  0100               	movlb	0	; () banked
 12734  000C7E  65B1               	cpfsgt	actuatorTest@i_1741& (0+255),b
 12735  000C80  D001               	goto	l8064
 12736  000C82  D00C               	goto	l8068
 12737  000C84                     l8064:
 12738                           
 12739                           ; BSR set to: 0
 12740  000C84  0E68               	movlw	104
 12741  000C86  0100               	movlb	0	; () banked
 12742  000C88  6FAB               	movwf	??_actuatorTest& (0+255),b
 12743  000C8A  0EE4               	movlw	228
 12744  000C8C                     u10097:
 12745  000C8C  2EE8               	decfsz	wreg,f,c
 12746  000C8E  D7FE               	bra	u10097
 12747  000C90  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12748  000C92  D7FC               	bra	u10097
 12749  000C94  F000               	nop	
 12750  000C96  0100               	movlb	0	; () banked
 12751  000C98  2BB1               	incf	actuatorTest@i_1741& (0+255),f,b
 12752  000C9A  D7EF               	goto	l8060
 12753  000C9C                     l8068:
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12757  000C9C  0E80               	movlw	128
 12758  000C9E  ECFD  F02A         	call	_lcdInst
 12759  000CA2  0EC0               	movlw	192
 12760  000CA4  ECFD  F02A         	call	_lcdInst
 12761                           
 12762                           ;Test.c: 282: printf("LEFT -- 2s      ");
 12763  000CA8  0E9D               	movlw	low STR_99
 12764  000CAA  0100               	movlb	0	; () banked
 12765  000CAC  6F8E               	movwf	printf@f& (0+255),b
 12766  000CAE  0EFB               	movlw	high STR_99
 12767  000CB0  0100               	movlb	0	; () banked
 12768  000CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12769  000CB4  EC84  F00B         	call	_printf	;wreg free
 12770                           
 12771                           ;Test.c: 283: updateServoPosition(2400, 1);
 12772  000CB8  0E09               	movlw	9
 12773  000CBA  0100               	movlb	0	; () banked
 12774  000CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12775  000CBE  0E60               	movlw	96
 12776  000CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12777  000CC2  0E00               	movlw	0
 12778  000CC4  0100               	movlb	0	; () banked
 12779  000CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12780  000CC8  0E01               	movlw	1
 12781  000CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12782  000CCC  EC2D  F024         	call	_updateServoPosition	;wreg free
 12783                           
 12784                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12785  000CD0  0E00               	movlw	0
 12786  000CD2  0100               	movlb	0	; () banked
 12787  000CD4  6FB2               	movwf	actuatorTest@i_1743& (0+255),b
 12788  000CD6                     l8076:
 12789                           
 12790                           ; BSR set to: 0
 12791  000CD6  0E63               	movlw	99
 12792  000CD8  0100               	movlb	0	; () banked
 12793  000CDA  65B2               	cpfsgt	actuatorTest@i_1743& (0+255),b
 12794  000CDC  D001               	goto	l8080
 12795  000CDE  D00C               	goto	l8084
 12796  000CE0                     l8080:
 12797                           
 12798                           ; BSR set to: 0
 12799  000CE0  0E68               	movlw	104
 12800  000CE2  0100               	movlb	0	; () banked
 12801  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12802  000CE6  0EE4               	movlw	228
 12803  000CE8                     u10107:
 12804  000CE8  2EE8               	decfsz	wreg,f,c
 12805  000CEA  D7FE               	bra	u10107
 12806  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12807  000CEE  D7FC               	bra	u10107
 12808  000CF0  F000               	nop	
 12809  000CF2  0100               	movlb	0	; () banked
 12810  000CF4  2BB2               	incf	actuatorTest@i_1743& (0+255),f,b
 12811  000CF6  D7EF               	goto	l8076
 12812  000CF8                     l8084:
 12813                           
 12814                           ; BSR set to: 0
 12815  000CF8  0E00               	movlw	0
 12816  000CFA  0100               	movlb	0	; () banked
 12817  000CFC  6FB3               	movwf	actuatorTest@i_1744& (0+255),b
 12818  000CFE                     l8086:
 12819                           
 12820                           ; BSR set to: 0
 12821  000CFE  0E63               	movlw	99
 12822  000D00  0100               	movlb	0	; () banked
 12823  000D02  65B3               	cpfsgt	actuatorTest@i_1744& (0+255),b
 12824  000D04  D001               	goto	l8090
 12825  000D06  D00C               	goto	l8094
 12826  000D08                     l8090:
 12827                           
 12828                           ; BSR set to: 0
 12829  000D08  0E68               	movlw	104
 12830  000D0A  0100               	movlb	0	; () banked
 12831  000D0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12832  000D0E  0EE4               	movlw	228
 12833  000D10                     u10117:
 12834  000D10  2EE8               	decfsz	wreg,f,c
 12835  000D12  D7FE               	bra	u10117
 12836  000D14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12837  000D16  D7FC               	bra	u10117
 12838  000D18  F000               	nop	
 12839  000D1A  0100               	movlb	0	; () banked
 12840  000D1C  2BB3               	incf	actuatorTest@i_1744& (0+255),f,b
 12841  000D1E  D7EF               	goto	l8086
 12842  000D20                     l8094:
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12846  000D20  0E80               	movlw	128
 12847  000D22  ECFD  F02A         	call	_lcdInst
 12848  000D26  0EC0               	movlw	192
 12849  000D28  ECFD  F02A         	call	_lcdInst
 12850                           
 12851                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 12852  000D2C  0E25               	movlw	low STR_100
 12853  000D2E  0100               	movlb	0	; () banked
 12854  000D30  6F8E               	movwf	printf@f& (0+255),b
 12855  000D32  0EFC               	movlw	high STR_100
 12856  000D34  0100               	movlb	0	; () banked
 12857  000D36  6F8F               	movwf	(printf@f+1)& (0+255),b
 12858  000D38  EC84  F00B         	call	_printf	;wreg free
 12859                           
 12860                           ;Test.c: 288: updateServoPosition(1670, 1);
 12861  000D3C  0E06               	movlw	6
 12862  000D3E  0100               	movlb	0	; () banked
 12863  000D40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12864  000D42  0E86               	movlw	134
 12865  000D44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12866  000D46  0E00               	movlw	0
 12867  000D48  0100               	movlb	0	; () banked
 12868  000D4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12869  000D4C  0E01               	movlw	1
 12870  000D4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12871  000D50  EC2D  F024         	call	_updateServoPosition	;wreg free
 12872                           
 12873                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12874  000D54  0E00               	movlw	0
 12875  000D56  0100               	movlb	0	; () banked
 12876  000D58  6FB4               	movwf	actuatorTest@i_1746& (0+255),b
 12877  000D5A                     l8102:
 12878                           
 12879                           ; BSR set to: 0
 12880  000D5A  0E63               	movlw	99
 12881  000D5C  0100               	movlb	0	; () banked
 12882  000D5E  65B4               	cpfsgt	actuatorTest@i_1746& (0+255),b
 12883  000D60  D001               	goto	l8106
 12884  000D62  D00C               	goto	l8110
 12885  000D64                     l8106:
 12886                           
 12887                           ; BSR set to: 0
 12888  000D64  0E68               	movlw	104
 12889  000D66  0100               	movlb	0	; () banked
 12890  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 12891  000D6A  0EE4               	movlw	228
 12892  000D6C                     u10127:
 12893  000D6C  2EE8               	decfsz	wreg,f,c
 12894  000D6E  D7FE               	bra	u10127
 12895  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12896  000D72  D7FC               	bra	u10127
 12897  000D74  F000               	nop	
 12898  000D76  0100               	movlb	0	; () banked
 12899  000D78  2BB4               	incf	actuatorTest@i_1746& (0+255),f,b
 12900  000D7A  D7EF               	goto	l8102
 12901  000D7C                     l8110:
 12902                           
 12903                           ; BSR set to: 0
 12904  000D7C  0E00               	movlw	0
 12905  000D7E  0100               	movlb	0	; () banked
 12906  000D80  6FB5               	movwf	actuatorTest@i_1747& (0+255),b
 12907  000D82                     l8112:
 12908                           
 12909                           ; BSR set to: 0
 12910  000D82  0E63               	movlw	99
 12911  000D84  0100               	movlb	0	; () banked
 12912  000D86  65B5               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12913  000D88  D001               	goto	l8116
 12914  000D8A  D00C               	goto	l8120
 12915  000D8C                     l8116:
 12916                           
 12917                           ; BSR set to: 0
 12918  000D8C  0E68               	movlw	104
 12919  000D8E  0100               	movlb	0	; () banked
 12920  000D90  6FAB               	movwf	??_actuatorTest& (0+255),b
 12921  000D92  0EE4               	movlw	228
 12922  000D94                     u10137:
 12923  000D94  2EE8               	decfsz	wreg,f,c
 12924  000D96  D7FE               	bra	u10137
 12925  000D98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12926  000D9A  D7FC               	bra	u10137
 12927  000D9C  F000               	nop	
 12928  000D9E  0100               	movlb	0	; () banked
 12929  000DA0  2BB5               	incf	actuatorTest@i_1747& (0+255),f,b
 12930  000DA2  D7EF               	goto	l8112
 12931  000DA4                     l8120:
 12932                           
 12933                           ; BSR set to: 0
 12934                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12935  000DA4  0E80               	movlw	128
 12936  000DA6  ECFD  F02A         	call	_lcdInst
 12937  000DAA  0EC0               	movlw	192
 12938  000DAC  ECFD  F02A         	call	_lcdInst
 12939                           
 12940                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 12941  000DB0  0E36               	movlw	low STR_101
 12942  000DB2  0100               	movlb	0	; () banked
 12943  000DB4  6F8E               	movwf	printf@f& (0+255),b
 12944  000DB6  0EFC               	movlw	high STR_101
 12945  000DB8  0100               	movlb	0	; () banked
 12946  000DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12947  000DBC  EC84  F00B         	call	_printf	;wreg free
 12948                           
 12949                           ;Test.c: 293: updateServoPosition(850, 1);
 12950  000DC0  0E03               	movlw	3
 12951  000DC2  0100               	movlb	0	; () banked
 12952  000DC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12953  000DC6  0E52               	movlw	82
 12954  000DC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12955  000DCA  0E00               	movlw	0
 12956  000DCC  0100               	movlb	0	; () banked
 12957  000DCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12958  000DD0  0E01               	movlw	1
 12959  000DD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12960  000DD4  EC2D  F024         	call	_updateServoPosition	;wreg free
 12961                           
 12962                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12963  000DD8  0E00               	movlw	0
 12964  000DDA  0100               	movlb	0	; () banked
 12965  000DDC  6FB6               	movwf	actuatorTest@i_1749& (0+255),b
 12966  000DDE                     l8128:
 12967                           
 12968                           ; BSR set to: 0
 12969  000DDE  0E63               	movlw	99
 12970  000DE0  0100               	movlb	0	; () banked
 12971  000DE2  65B6               	cpfsgt	actuatorTest@i_1749& (0+255),b
 12972  000DE4  D001               	goto	l8132
 12973  000DE6  D00C               	goto	l8136
 12974  000DE8                     l8132:
 12975                           
 12976                           ; BSR set to: 0
 12977  000DE8  0E68               	movlw	104
 12978  000DEA  0100               	movlb	0	; () banked
 12979  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12980  000DEE  0EE4               	movlw	228
 12981  000DF0                     u10147:
 12982  000DF0  2EE8               	decfsz	wreg,f,c
 12983  000DF2  D7FE               	bra	u10147
 12984  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12985  000DF6  D7FC               	bra	u10147
 12986  000DF8  F000               	nop	
 12987  000DFA  0100               	movlb	0	; () banked
 12988  000DFC  2BB6               	incf	actuatorTest@i_1749& (0+255),f,b
 12989  000DFE  D7EF               	goto	l8128
 12990  000E00                     l8136:
 12991                           
 12992                           ; BSR set to: 0
 12993  000E00  0E00               	movlw	0
 12994  000E02  0100               	movlb	0	; () banked
 12995  000E04  6FB7               	movwf	actuatorTest@i_1750& (0+255),b
 12996  000E06                     l8138:
 12997                           
 12998                           ; BSR set to: 0
 12999  000E06  0E63               	movlw	99
 13000  000E08  0100               	movlb	0	; () banked
 13001  000E0A  65B7               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13002  000E0C  D001               	goto	l8142
 13003  000E0E  D00C               	goto	l8146
 13004  000E10                     l8142:
 13005                           
 13006                           ; BSR set to: 0
 13007  000E10  0E68               	movlw	104
 13008  000E12  0100               	movlb	0	; () banked
 13009  000E14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13010  000E16  0EE4               	movlw	228
 13011  000E18                     u10157:
 13012  000E18  2EE8               	decfsz	wreg,f,c
 13013  000E1A  D7FE               	bra	u10157
 13014  000E1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13015  000E1E  D7FC               	bra	u10157
 13016  000E20  F000               	nop	
 13017  000E22  0100               	movlb	0	; () banked
 13018  000E24  2BB7               	incf	actuatorTest@i_1750& (0+255),f,b
 13019  000E26  D7EF               	goto	l8138
 13020  000E28                     l8146:
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13024  000E28  0E80               	movlw	128
 13025  000E2A  ECFD  F02A         	call	_lcdInst
 13026  000E2E  0EC0               	movlw	192
 13027  000E30  ECFD  F02A         	call	_lcdInst
 13028                           
 13029                           ;Test.c: 297: printf("MID -- 2s       ");
 13030  000E34  0E7B               	movlw	low STR_102
 13031  000E36  0100               	movlb	0	; () banked
 13032  000E38  6F8E               	movwf	printf@f& (0+255),b
 13033  000E3A  0EFB               	movlw	high STR_102
 13034  000E3C  0100               	movlb	0	; () banked
 13035  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13036  000E40  EC84  F00B         	call	_printf	;wreg free
 13037                           
 13038                           ;Test.c: 298: updateServoPosition(1200, 1);
 13039  000E44  0E04               	movlw	4
 13040  000E46  0100               	movlb	0	; () banked
 13041  000E48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13042  000E4A  0EB0               	movlw	176
 13043  000E4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13044  000E4E  0E00               	movlw	0
 13045  000E50  0100               	movlb	0	; () banked
 13046  000E52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13047  000E54  0E01               	movlw	1
 13048  000E56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13049  000E58  EC2D  F024         	call	_updateServoPosition	;wreg free
 13050                           
 13051                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13052  000E5C  0E00               	movlw	0
 13053  000E5E  0100               	movlb	0	; () banked
 13054  000E60  6FB8               	movwf	actuatorTest@i_1752& (0+255),b
 13055  000E62                     l8154:
 13056                           
 13057                           ; BSR set to: 0
 13058  000E62  0E63               	movlw	99
 13059  000E64  0100               	movlb	0	; () banked
 13060  000E66  65B8               	cpfsgt	actuatorTest@i_1752& (0+255),b
 13061  000E68  D001               	goto	l8158
 13062  000E6A  D00C               	goto	l8162
 13063  000E6C                     l8158:
 13064                           
 13065                           ; BSR set to: 0
 13066  000E6C  0E68               	movlw	104
 13067  000E6E  0100               	movlb	0	; () banked
 13068  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 13069  000E72  0EE4               	movlw	228
 13070  000E74                     u10167:
 13071  000E74  2EE8               	decfsz	wreg,f,c
 13072  000E76  D7FE               	bra	u10167
 13073  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13074  000E7A  D7FC               	bra	u10167
 13075  000E7C  F000               	nop	
 13076  000E7E  0100               	movlb	0	; () banked
 13077  000E80  2BB8               	incf	actuatorTest@i_1752& (0+255),f,b
 13078  000E82  D7EF               	goto	l8154
 13079  000E84                     l8162:
 13080                           
 13081                           ; BSR set to: 0
 13082  000E84  0E00               	movlw	0
 13083  000E86  0100               	movlb	0	; () banked
 13084  000E88  6FB9               	movwf	actuatorTest@i_1753& (0+255),b
 13085  000E8A                     l8164:
 13086                           
 13087                           ; BSR set to: 0
 13088  000E8A  0E63               	movlw	99
 13089  000E8C  0100               	movlb	0	; () banked
 13090  000E8E  65B9               	cpfsgt	actuatorTest@i_1753& (0+255),b
 13091  000E90  D001               	goto	l8168
 13092  000E92  D00C               	goto	l1297
 13093  000E94                     l8168:
 13094                           
 13095                           ; BSR set to: 0
 13096  000E94  0E68               	movlw	104
 13097  000E96  0100               	movlb	0	; () banked
 13098  000E98  6FAB               	movwf	??_actuatorTest& (0+255),b
 13099  000E9A  0EE4               	movlw	228
 13100  000E9C                     u10177:
 13101  000E9C  2EE8               	decfsz	wreg,f,c
 13102  000E9E  D7FE               	bra	u10177
 13103  000EA0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13104  000EA2  D7FC               	bra	u10177
 13105  000EA4  F000               	nop	
 13106  000EA6  0100               	movlb	0	; () banked
 13107  000EA8  2BB9               	incf	actuatorTest@i_1753& (0+255),f,b
 13108  000EAA  D7EF               	goto	l8164
 13109  000EAC                     l1297:
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;Test.c: 300: TMR1ON = 0;
 13113  000EAC  90CD               	bcf	4045,0,c	;volatile
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;Test.c: 307: printf("TST: TILT SERVO");
 13117  000EAE  0E44               	movlw	low STR_103
 13118  000EB0  0100               	movlb	0	; () banked
 13119  000EB2  6F8E               	movwf	printf@f& (0+255),b
 13120  000EB4  0EFE               	movlw	high STR_103
 13121  000EB6  0100               	movlb	0	; () banked
 13122  000EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13123  000EBA  EC84  F00B         	call	_printf	;wreg free
 13124                           
 13125                           ;Test.c: 308: lcdInst(0b11000000);;
 13126  000EBE  0EC0               	movlw	192
 13127  000EC0  ECFD  F02A         	call	_lcdInst
 13128                           
 13129                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 13130  000EC4  0EAE               	movlw	low STR_104
 13131  000EC6  0100               	movlb	0	; () banked
 13132  000EC8  6F8E               	movwf	printf@f& (0+255),b
 13133  000ECA  0EFB               	movlw	high STR_104
 13134  000ECC  0100               	movlb	0	; () banked
 13135  000ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13136  000ED0  EC84  F00B         	call	_printf	;wreg free
 13137                           
 13138                           ;Test.c: 310: updateServoPosition(1050, 3);
 13139  000ED4  0E04               	movlw	4
 13140  000ED6  0100               	movlb	0	; () banked
 13141  000ED8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13142  000EDA  0E1A               	movlw	26
 13143  000EDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13144  000EDE  0E00               	movlw	0
 13145  000EE0  0100               	movlb	0	; () banked
 13146  000EE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13147  000EE4  0E03               	movlw	3
 13148  000EE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13149  000EE8  EC2D  F024         	call	_updateServoPosition	;wreg free
 13150                           
 13151                           ;Test.c: 311: TMR3ON = 1;
 13152  000EEC  80B1               	bsf	4017,0,c	;volatile
 13153                           
 13154                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13155  000EEE  0E00               	movlw	0
 13156  000EF0  0100               	movlb	0	; () banked
 13157  000EF2  6FBA               	movwf	actuatorTest@i_1756& (0+255),b
 13158  000EF4                     l8182:
 13159                           
 13160                           ; BSR set to: 0
 13161  000EF4  0E63               	movlw	99
 13162  000EF6  0100               	movlb	0	; () banked
 13163  000EF8  65BA               	cpfsgt	actuatorTest@i_1756& (0+255),b
 13164  000EFA  D001               	goto	l8186
 13165  000EFC  D00C               	goto	l8190
 13166  000EFE                     l8186:
 13167                           
 13168                           ; BSR set to: 0
 13169  000EFE  0E68               	movlw	104
 13170  000F00  0100               	movlb	0	; () banked
 13171  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 13172  000F04  0EE4               	movlw	228
 13173  000F06                     u10187:
 13174  000F06  2EE8               	decfsz	wreg,f,c
 13175  000F08  D7FE               	bra	u10187
 13176  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13177  000F0C  D7FC               	bra	u10187
 13178  000F0E  F000               	nop	
 13179  000F10  0100               	movlb	0	; () banked
 13180  000F12  2BBA               	incf	actuatorTest@i_1756& (0+255),f,b
 13181  000F14  D7EF               	goto	l8182
 13182  000F16                     l8190:
 13183                           
 13184                           ; BSR set to: 0
 13185  000F16  0E00               	movlw	0
 13186  000F18  0100               	movlb	0	; () banked
 13187  000F1A  6FBB               	movwf	actuatorTest@i_1757& (0+255),b
 13188  000F1C                     l8192:
 13189                           
 13190                           ; BSR set to: 0
 13191  000F1C  0E63               	movlw	99
 13192  000F1E  0100               	movlb	0	; () banked
 13193  000F20  65BB               	cpfsgt	actuatorTest@i_1757& (0+255),b
 13194  000F22  D001               	goto	l8196
 13195  000F24  D00C               	goto	l8200
 13196  000F26                     l8196:
 13197                           
 13198                           ; BSR set to: 0
 13199  000F26  0E68               	movlw	104
 13200  000F28  0100               	movlb	0	; () banked
 13201  000F2A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13202  000F2C  0EE4               	movlw	228
 13203  000F2E                     u10197:
 13204  000F2E  2EE8               	decfsz	wreg,f,c
 13205  000F30  D7FE               	bra	u10197
 13206  000F32  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13207  000F34  D7FC               	bra	u10197
 13208  000F36  F000               	nop	
 13209  000F38  0100               	movlb	0	; () banked
 13210  000F3A  2BBB               	incf	actuatorTest@i_1757& (0+255),f,b
 13211  000F3C  D7EF               	goto	l8192
 13212  000F3E                     l8200:
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13216  000F3E  0E80               	movlw	128
 13217  000F40  ECFD  F02A         	call	_lcdInst
 13218  000F44  0EC0               	movlw	192
 13219  000F46  ECFD  F02A         	call	_lcdInst
 13220                           
 13221                           ;Test.c: 315: printf("DROP -- 2s      ");
 13222  000F4A  0E8C               	movlw	low STR_105
 13223  000F4C  0100               	movlb	0	; () banked
 13224  000F4E  6F8E               	movwf	printf@f& (0+255),b
 13225  000F50  0EFB               	movlw	high STR_105
 13226  000F52  0100               	movlb	0	; () banked
 13227  000F54  6F8F               	movwf	(printf@f+1)& (0+255),b
 13228  000F56  EC84  F00B         	call	_printf	;wreg free
 13229                           
 13230                           ;Test.c: 316: updateServoPosition(1260, 3);
 13231  000F5A  0E04               	movlw	4
 13232  000F5C  0100               	movlb	0	; () banked
 13233  000F5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13234  000F60  0EEC               	movlw	236
 13235  000F62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13236  000F64  0E00               	movlw	0
 13237  000F66  0100               	movlb	0	; () banked
 13238  000F68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13239  000F6A  0E03               	movlw	3
 13240  000F6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13241  000F6E  EC2D  F024         	call	_updateServoPosition	;wreg free
 13242                           
 13243                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13244  000F72  0E00               	movlw	0
 13245  000F74  0100               	movlb	0	; () banked
 13246  000F76  6FBC               	movwf	actuatorTest@i_1759& (0+255),b
 13247  000F78                     l8208:
 13248                           
 13249                           ; BSR set to: 0
 13250  000F78  0E63               	movlw	99
 13251  000F7A  0100               	movlb	0	; () banked
 13252  000F7C  65BC               	cpfsgt	actuatorTest@i_1759& (0+255),b
 13253  000F7E  D001               	goto	l8212
 13254  000F80  D00C               	goto	l8216
 13255  000F82                     l8212:
 13256                           
 13257                           ; BSR set to: 0
 13258  000F82  0E68               	movlw	104
 13259  000F84  0100               	movlb	0	; () banked
 13260  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 13261  000F88  0EE4               	movlw	228
 13262  000F8A                     u10207:
 13263  000F8A  2EE8               	decfsz	wreg,f,c
 13264  000F8C  D7FE               	bra	u10207
 13265  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13266  000F90  D7FC               	bra	u10207
 13267  000F92  F000               	nop	
 13268  000F94  0100               	movlb	0	; () banked
 13269  000F96  2BBC               	incf	actuatorTest@i_1759& (0+255),f,b
 13270  000F98  D7EF               	goto	l8208
 13271  000F9A                     l8216:
 13272                           
 13273                           ; BSR set to: 0
 13274  000F9A  0E00               	movlw	0
 13275  000F9C  0100               	movlb	0	; () banked
 13276  000F9E  6FBD               	movwf	actuatorTest@i_1760& (0+255),b
 13277  000FA0                     l8218:
 13278                           
 13279                           ; BSR set to: 0
 13280  000FA0  0E63               	movlw	99
 13281  000FA2  0100               	movlb	0	; () banked
 13282  000FA4  65BD               	cpfsgt	actuatorTest@i_1760& (0+255),b
 13283  000FA6  D001               	goto	l8222
 13284  000FA8  D00C               	goto	l8226
 13285  000FAA                     l8222:
 13286                           
 13287                           ; BSR set to: 0
 13288  000FAA  0E68               	movlw	104
 13289  000FAC  0100               	movlb	0	; () banked
 13290  000FAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13291  000FB0  0EE4               	movlw	228
 13292  000FB2                     u10217:
 13293  000FB2  2EE8               	decfsz	wreg,f,c
 13294  000FB4  D7FE               	bra	u10217
 13295  000FB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13296  000FB8  D7FC               	bra	u10217
 13297  000FBA  F000               	nop	
 13298  000FBC  0100               	movlb	0	; () banked
 13299  000FBE  2BBD               	incf	actuatorTest@i_1760& (0+255),f,b
 13300  000FC0  D7EF               	goto	l8218
 13301  000FC2                     l8226:
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13305  000FC2  0E80               	movlw	128
 13306  000FC4  ECFD  F02A         	call	_lcdInst
 13307  000FC8  0EC0               	movlw	192
 13308  000FCA  ECFD  F02A         	call	_lcdInst
 13309                           
 13310                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 13311  000FCE  0EAE               	movlw	low STR_104
 13312  000FD0  0100               	movlb	0	; () banked
 13313  000FD2  6F8E               	movwf	printf@f& (0+255),b
 13314  000FD4  0EFB               	movlw	high STR_104
 13315  000FD6  0100               	movlb	0	; () banked
 13316  000FD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13317  000FDA  EC84  F00B         	call	_printf	;wreg free
 13318                           
 13319                           ;Test.c: 321: updateServoPosition(1050, 3);
 13320  000FDE  0E04               	movlw	4
 13321  000FE0  0100               	movlb	0	; () banked
 13322  000FE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13323  000FE4  0E1A               	movlw	26
 13324  000FE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13325  000FE8  0E00               	movlw	0
 13326  000FEA  0100               	movlb	0	; () banked
 13327  000FEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13328  000FEE  0E03               	movlw	3
 13329  000FF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13330  000FF2  EC2D  F024         	call	_updateServoPosition	;wreg free
 13331                           
 13332                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13333  000FF6  0E00               	movlw	0
 13334  000FF8  0100               	movlb	0	; () banked
 13335  000FFA  6FBE               	movwf	actuatorTest@i_1762& (0+255),b
 13336  000FFC                     l8234:
 13337                           
 13338                           ; BSR set to: 0
 13339  000FFC  0E63               	movlw	99
 13340  000FFE  0100               	movlb	0	; () banked
 13341  001000  65BE               	cpfsgt	actuatorTest@i_1762& (0+255),b
 13342  001002  D001               	goto	l8238
 13343  001004  D00C               	goto	l8242
 13344  001006                     l8238:
 13345                           
 13346                           ; BSR set to: 0
 13347  001006  0E68               	movlw	104
 13348  001008  0100               	movlb	0	; () banked
 13349  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13350  00100C  0EE4               	movlw	228
 13351  00100E                     u10227:
 13352  00100E  2EE8               	decfsz	wreg,f,c
 13353  001010  D7FE               	bra	u10227
 13354  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13355  001014  D7FC               	bra	u10227
 13356  001016  F000               	nop	
 13357  001018  0100               	movlb	0	; () banked
 13358  00101A  2BBE               	incf	actuatorTest@i_1762& (0+255),f,b
 13359  00101C  D7EF               	goto	l8234
 13360  00101E                     l8242:
 13361                           
 13362                           ; BSR set to: 0
 13363  00101E  0E00               	movlw	0
 13364  001020  0100               	movlb	0	; () banked
 13365  001022  6FBF               	movwf	actuatorTest@i_1763& (0+255),b
 13366  001024                     l8244:
 13367                           
 13368                           ; BSR set to: 0
 13369  001024  0E63               	movlw	99
 13370  001026  0100               	movlb	0	; () banked
 13371  001028  65BF               	cpfsgt	actuatorTest@i_1763& (0+255),b
 13372  00102A  D001               	goto	l8248
 13373  00102C  D00C               	goto	l1309
 13374  00102E                     l8248:
 13375                           
 13376                           ; BSR set to: 0
 13377  00102E  0E68               	movlw	104
 13378  001030  0100               	movlb	0	; () banked
 13379  001032  6FAB               	movwf	??_actuatorTest& (0+255),b
 13380  001034  0EE4               	movlw	228
 13381  001036                     u10237:
 13382  001036  2EE8               	decfsz	wreg,f,c
 13383  001038  D7FE               	bra	u10237
 13384  00103A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13385  00103C  D7FC               	bra	u10237
 13386  00103E  F000               	nop	
 13387  001040  0100               	movlb	0	; () banked
 13388  001042  2BBF               	incf	actuatorTest@i_1763& (0+255),f,b
 13389  001044  D7EF               	goto	l8244
 13390  001046                     l1309:
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;Test.c: 323: TMR3ON = 0;
 13394  001046  90B1               	bcf	4017,0,c	;volatile
 13395                           
 13396                           ;Test.c: 324: (INTCONbits.GIE = 0);
 13397  001048  9EF2               	bcf	intcon,7,c	;volatile
 13398                           
 13399                           ; BSR set to: 0
 13400                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13401  00104A  0E01               	movlw	1
 13402  00104C  ECFD  F02A         	call	_lcdInst
 13403  001050  0E68               	movlw	104
 13404  001052  0100               	movlb	0	; () banked
 13405  001054  6FAB               	movwf	??_actuatorTest& (0+255),b
 13406  001056  0EE4               	movlw	228
 13407  001058                     u10247:
 13408  001058  2EE8               	decfsz	wreg,f,c
 13409  00105A  D7FE               	bra	u10247
 13410  00105C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13411  00105E  D7FC               	bra	u10247
 13412  001060  F000               	nop	
 13413  001062  0E80               	movlw	128
 13414  001064  ECFD  F02A         	call	_lcdInst
 13415                           
 13416                           ;Test.c: 330: printf("TST: CAM SERVO");
 13417  001068  0EA0               	movlw	low STR_107
 13418  00106A  0100               	movlb	0	; () banked
 13419  00106C  6F8E               	movwf	printf@f& (0+255),b
 13420  00106E  0EFE               	movlw	high STR_107
 13421  001070  0100               	movlb	0	; () banked
 13422  001072  6F8F               	movwf	(printf@f+1)& (0+255),b
 13423  001074  EC84  F00B         	call	_printf	;wreg free
 13424                           
 13425                           ;Test.c: 331: lcdInst(0b11000000);;
 13426  001078  0EC0               	movlw	192
 13427  00107A  ECFD  F02A         	call	_lcdInst
 13428                           
 13429                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 13430  00107E  0E82               	movlw	low STR_108
 13431  001080  0100               	movlb	0	; () banked
 13432  001082  6F8E               	movwf	printf@f& (0+255),b
 13433  001084  0EFE               	movlw	high STR_108
 13434  001086  0100               	movlb	0	; () banked
 13435  001088  6F8F               	movwf	(printf@f+1)& (0+255),b
 13436  00108A  EC84  F00B         	call	_printf	;wreg free
 13437                           
 13438                           ;Test.c: 333: LATCbits.LATC0 = 1;
 13439  00108E  808B               	bsf	3979,0,c	;volatile
 13440                           
 13441                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13442  001090  0E00               	movlw	0
 13443  001092  0100               	movlb	0	; () banked
 13444  001094  6FC0               	movwf	actuatorTest@i_1766& (0+255),b
 13445  001096                     l8268:
 13446                           
 13447                           ; BSR set to: 0
 13448  001096  0E63               	movlw	99
 13449  001098  0100               	movlb	0	; () banked
 13450  00109A  65C0               	cpfsgt	actuatorTest@i_1766& (0+255),b
 13451  00109C  D001               	goto	l8272
 13452  00109E  D00C               	goto	l8276
 13453  0010A0                     l8272:
 13454                           
 13455                           ; BSR set to: 0
 13456  0010A0  0E68               	movlw	104
 13457  0010A2  0100               	movlb	0	; () banked
 13458  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 13459  0010A6  0EE4               	movlw	228
 13460  0010A8                     u10257:
 13461  0010A8  2EE8               	decfsz	wreg,f,c
 13462  0010AA  D7FE               	bra	u10257
 13463  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13464  0010AE  D7FC               	bra	u10257
 13465  0010B0  F000               	nop	
 13466  0010B2  0100               	movlb	0	; () banked
 13467  0010B4  2BC0               	incf	actuatorTest@i_1766& (0+255),f,b
 13468  0010B6  D7EF               	goto	l8268
 13469  0010B8                     l8276:
 13470                           
 13471                           ; BSR set to: 0
 13472  0010B8  0E00               	movlw	0
 13473  0010BA  0100               	movlb	0	; () banked
 13474  0010BC  6FC1               	movwf	actuatorTest@i_1767& (0+255),b
 13475  0010BE                     l8278:
 13476                           
 13477                           ; BSR set to: 0
 13478  0010BE  0E63               	movlw	99
 13479  0010C0  0100               	movlb	0	; () banked
 13480  0010C2  65C1               	cpfsgt	actuatorTest@i_1767& (0+255),b
 13481  0010C4  D001               	goto	l8282
 13482  0010C6  D00C               	goto	l8286
 13483  0010C8                     l8282:
 13484                           
 13485                           ; BSR set to: 0
 13486  0010C8  0E68               	movlw	104
 13487  0010CA  0100               	movlb	0	; () banked
 13488  0010CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13489  0010CE  0EE4               	movlw	228
 13490  0010D0                     u10267:
 13491  0010D0  2EE8               	decfsz	wreg,f,c
 13492  0010D2  D7FE               	bra	u10267
 13493  0010D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13494  0010D6  D7FC               	bra	u10267
 13495  0010D8  F000               	nop	
 13496  0010DA  0100               	movlb	0	; () banked
 13497  0010DC  2BC1               	incf	actuatorTest@i_1767& (0+255),f,b
 13498  0010DE  D7EF               	goto	l8278
 13499  0010E0                     l8286:
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13503  0010E0  0E80               	movlw	128
 13504  0010E2  ECFD  F02A         	call	_lcdInst
 13505  0010E6  0EC0               	movlw	192
 13506  0010E8  ECFD  F02A         	call	_lcdInst
 13507                           
 13508                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 13509  0010EC  0E73               	movlw	low STR_109
 13510  0010EE  0100               	movlb	0	; () banked
 13511  0010F0  6F8E               	movwf	printf@f& (0+255),b
 13512  0010F2  0EFE               	movlw	high STR_109
 13513  0010F4  0100               	movlb	0	; () banked
 13514  0010F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13515  0010F8  EC84  F00B         	call	_printf	;wreg free
 13516                           
 13517                           ;Test.c: 339: for(i=0;i<10000;i++)
 13518  0010FC  0E00               	movlw	0
 13519  0010FE  0100               	movlb	0	; () banked
 13520  001100  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13521  001102  0E00               	movlw	0
 13522  001104  6FC4               	movwf	actuatorTest@i& (0+255),b
 13523  001106                     l8292:
 13524                           
 13525                           ; BSR set to: 0
 13526  001106  0100               	movlb	0	; () banked
 13527  001108  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13528  00110A  D008               	goto	l1314
 13529  00110C  0E10               	movlw	16
 13530  00110E  0100               	movlb	0	; () banked
 13531  001110  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13532  001112  0E27               	movlw	39
 13533  001114  0100               	movlb	0	; () banked
 13534  001116  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13535  001118  B0D8               	btfsc	status,0,c
 13536  00111A  D00D               	goto	l8302
 13537  00111C                     l1314:
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;Test.c: 340: {
 13541                           ;Test.c: 341: LATCbits.LATC0 = 1;
 13542  00111C  808B               	bsf	3979,0,c	;volatile
 13543                           
 13544                           ; BSR set to: 0
 13545                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13546  00111E  0E1A               	movlw	26
 13547  001120                     u10277:
 13548  001120  2EE8               	decfsz	wreg,f,c
 13549  001122  D7FE               	bra	u10277
 13550  001124  D000               	nop2	
 13551                           
 13552                           ;Test.c: 343: LATCbits.LATC0 = 0;
 13553  001126  908B               	bcf	3979,0,c	;volatile
 13554                           
 13555                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13556  001128  0EF0               	movlw	240
 13557  00112A                     u10287:
 13558  00112A  2EE8               	decfsz	wreg,f,c
 13559  00112C  D7FE               	bra	u10287
 13560  00112E  0100               	movlb	0	; () banked
 13561  001130  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13562  001132  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13563  001134  D7E8               	goto	l8292
 13564  001136                     l8302:
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;Test.c: 345: }
 13568                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13569  001136  0E00               	movlw	0
 13570  001138  0100               	movlb	0	; () banked
 13571  00113A  6FC2               	movwf	actuatorTest@i_1769& (0+255),b
 13572  00113C                     l8304:
 13573                           
 13574                           ; BSR set to: 0
 13575  00113C  0E63               	movlw	99
 13576  00113E  0100               	movlb	0	; () banked
 13577  001140  65C2               	cpfsgt	actuatorTest@i_1769& (0+255),b
 13578  001142  D001               	goto	l8308
 13579  001144  D00C               	goto	l8312
 13580  001146                     l8308:
 13581                           
 13582                           ; BSR set to: 0
 13583  001146  0E68               	movlw	104
 13584  001148  0100               	movlb	0	; () banked
 13585  00114A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13586  00114C  0EE4               	movlw	228
 13587  00114E                     u10297:
 13588  00114E  2EE8               	decfsz	wreg,f,c
 13589  001150  D7FE               	bra	u10297
 13590  001152  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13591  001154  D7FC               	bra	u10297
 13592  001156  F000               	nop	
 13593  001158  0100               	movlb	0	; () banked
 13594  00115A  2BC2               	incf	actuatorTest@i_1769& (0+255),f,b
 13595  00115C  D7EF               	goto	l8304
 13596  00115E                     l8312:
 13597                           
 13598                           ; BSR set to: 0
 13599  00115E  0E00               	movlw	0
 13600  001160  0100               	movlb	0	; () banked
 13601  001162  6FC3               	movwf	actuatorTest@i_1770& (0+255),b
 13602  001164                     l8314:
 13603                           
 13604                           ; BSR set to: 0
 13605  001164  0E63               	movlw	99
 13606  001166  0100               	movlb	0	; () banked
 13607  001168  65C3               	cpfsgt	actuatorTest@i_1770& (0+255),b
 13608  00116A  D001               	goto	l8318
 13609  00116C  D00C               	goto	l8322
 13610  00116E                     l8318:
 13611                           
 13612                           ; BSR set to: 0
 13613  00116E  0E68               	movlw	104
 13614  001170  0100               	movlb	0	; () banked
 13615  001172  6FAB               	movwf	??_actuatorTest& (0+255),b
 13616  001174  0EE4               	movlw	228
 13617  001176                     u10307:
 13618  001176  2EE8               	decfsz	wreg,f,c
 13619  001178  D7FE               	bra	u10307
 13620  00117A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13621  00117C  D7FC               	bra	u10307
 13622  00117E  F000               	nop	
 13623  001180  0100               	movlb	0	; () banked
 13624  001182  2BC3               	incf	actuatorTest@i_1770& (0+255),f,b
 13625  001184  D7EF               	goto	l8314
 13626  001186                     l8322:
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;Test.c: 348: machine_state = Testing_state;
 13630  001186  0E03               	movlw	3
 13631  001188  0100               	movlb	0	; () banked
 13632  00118A  6FFC               	movwf	_machine_state& (0+255),b
 13633                           
 13634                           ; BSR set to: 0
 13635  00118C  0012               	return		;funcret
 13636  00118E                     __end_of_actuatorTest:
 13637                           	opt stack 0
 13638                           tblptru	equ	0xFF8
 13639                           tblptrh	equ	0xFF7
 13640                           tblptrl	equ	0xFF6
 13641                           tablat	equ	0xFF5
 13642                           prodh	equ	0xFF4
 13643                           prodl	equ	0xFF3
 13644                           intcon	equ	0xFF2
 13645                           intcon2	equ	0xFF1
 13646                           intcon3	equ	0xFF0
 13647                           postinc0	equ	0xFEE
 13648                           wreg	equ	0xFE8
 13649                           postdec1	equ	0xFE5
 13650                           fsr1l	equ	0xFE1
 13651                           indf2	equ	0xFDF
 13652                           postinc2	equ	0xFDE
 13653                           postdec2	equ	0xFDD
 13654                           fsr2h	equ	0xFDA
 13655                           fsr2l	equ	0xFD9
 13656                           status	equ	0xFD8
 13657                           
 13658 ;; *************** function _SpeedTest *****************
 13659 ;; Defined at:
 13660 ;;		line 537 in file "Test.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;		None
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;		None
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  1    wreg      void 
 13667 ;; Registers used:
 13668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;Total ram usage:        1 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:   10
 13681 ;; This function calls:
 13682 ;;		_lcdInst
 13683 ;;		_printf
 13684 ;; This function is called by:
 13685 ;;		_Test
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           	psect	text41
 13690  0048E0                     __ptext41:
 13691                           	opt stack 0
 13692  0048E0                     _SpeedTest:
 13693                           	opt stack 19
 13694                           
 13695                           ;Test.c: 539: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13696                           
 13697                           ; BSR set to: 0
 13698                           ;incstack = 0
 13699  0048E0  0E01               	movlw	1
 13700  0048E2  ECFD  F02A         	call	_lcdInst
 13701  0048E6  0E68               	movlw	104
 13702  0048E8  0100               	movlb	0	; () banked
 13703  0048EA  6FAB               	movwf	??_SpeedTest& (0+255),b
 13704  0048EC  0EE4               	movlw	228
 13705  0048EE                     u10317:
 13706  0048EE  2EE8               	decfsz	wreg,f,c
 13707  0048F0  D7FE               	bra	u10317
 13708  0048F2  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13709  0048F4  D7FC               	bra	u10317
 13710  0048F6  F000               	nop	
 13711  0048F8  0E80               	movlw	128
 13712  0048FA  ECFD  F02A         	call	_lcdInst
 13713                           
 13714                           ;Test.c: 540: printf("S: D WILL RETURN ");
 13715  0048FE  0E0F               	movlw	low STR_118
 13716  004900  0100               	movlb	0	; () banked
 13717  004902  6F8E               	movwf	printf@f& (0+255),b
 13718  004904  0EFB               	movlw	high STR_118
 13719  004906  0100               	movlb	0	; () banked
 13720  004908  6F8F               	movwf	(printf@f+1)& (0+255),b
 13721  00490A  EC84  F00B         	call	_printf	;wreg free
 13722                           
 13723                           ;Test.c: 541: lcdInst(0b11000000);;
 13724  00490E  0EC0               	movlw	192
 13725  004910  ECFD  F02A         	call	_lcdInst
 13726                           
 13727                           ;Test.c: 542: printf("OTHER SETS RA5   ");
 13728  004914  0EFD               	movlw	low STR_119
 13729  004916  0100               	movlb	0	; () banked
 13730  004918  6F8E               	movwf	printf@f& (0+255),b
 13731  00491A  0EFA               	movlw	high STR_119
 13732  00491C  0100               	movlb	0	; () banked
 13733  00491E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13734  004920  EC84  F00B         	call	_printf	;wreg free
 13735  004924                     l1385:
 13736  004924  A281               	btfss	3969,1,c	;volatile
 13737  004926  D7FE               	goto	l1385
 13738                           
 13739                           ;Test.c: 547: }
 13740                           ;Test.c: 548: if(PORTB >> 4 == 0b1111){
 13741  004928  3881               	swapf	3969,w,c	;volatile
 13742  00492A  0B0F               	andlw	15
 13743  00492C  0A0F               	xorlw	15
 13744  00492E  B4D8               	btfsc	status,2,c
 13745  004930  0012               	return	
 13746  004932  D014               	goto	l8418
 13747  004934                     l1392:
 13748                           
 13749                           ;Test.c: 553: LATBbits.LATB2 = 1;
 13750  004934  848A               	bsf	3978,2,c	;volatile
 13751                           
 13752                           ;Test.c: 554: _delay((unsigned long)((5)*(32000000/4000.0)));
 13753  004936  0E34               	movlw	52
 13754  004938  0100               	movlb	0	; () banked
 13755  00493A  6FAB               	movwf	??_SpeedTest& (0+255),b
 13756  00493C  0EF1               	movlw	241
 13757  00493E                     u10327:
 13758  00493E  2EE8               	decfsz	wreg,f,c
 13759  004940  D7FE               	bra	u10327
 13760  004942  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13761  004944  D7FC               	bra	u10327
 13762  004946  D000               	nop2	
 13763                           
 13764                           ;Test.c: 555: LATBbits.LATB2 = 0;
 13765  004948  948A               	bcf	3978,2,c	;volatile
 13766                           
 13767                           ;Test.c: 556: _delay((unsigned long)((5)*(32000000/4000.0)));
 13768  00494A  0E34               	movlw	52
 13769  00494C  0100               	movlb	0	; () banked
 13770  00494E  6FAB               	movwf	??_SpeedTest& (0+255),b
 13771  004950  0EF1               	movlw	241
 13772  004952                     u10337:
 13773  004952  2EE8               	decfsz	wreg,f,c
 13774  004954  D7FE               	bra	u10337
 13775  004956  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13776  004958  D7FC               	bra	u10337
 13777  00495A  D000               	nop2	
 13778  00495C                     l8418:
 13779  00495C  B281               	btfsc	3969,1,c	;volatile
 13780  00495E  D7EA               	goto	l1392
 13781                           
 13782                           ;Test.c: 559: }
 13783                           ;Test.c: 560: LATBbits.LATB2 = 0;
 13784  004960  948A               	bcf	3978,2,c	;volatile
 13785  004962  D7E0               	goto	l1385
 13786  004964                     __end_of_SpeedTest:
 13787                           	opt stack 0
 13788                           tblptru	equ	0xFF8
 13789                           tblptrh	equ	0xFF7
 13790                           tblptrl	equ	0xFF6
 13791                           tablat	equ	0xFF5
 13792                           prodh	equ	0xFF4
 13793                           prodl	equ	0xFF3
 13794                           intcon	equ	0xFF2
 13795                           intcon2	equ	0xFF1
 13796                           intcon3	equ	0xFF0
 13797                           postinc0	equ	0xFEE
 13798                           wreg	equ	0xFE8
 13799                           postdec1	equ	0xFE5
 13800                           fsr1l	equ	0xFE1
 13801                           indf2	equ	0xFDF
 13802                           postinc2	equ	0xFDE
 13803                           postdec2	equ	0xFDD
 13804                           fsr2h	equ	0xFDA
 13805                           fsr2l	equ	0xFD9
 13806                           status	equ	0xFD8
 13807                           
 13808 ;; *************** function _PortTestPusher *****************
 13809 ;; Defined at:
 13810 ;;		line 670 in file "Test.c"
 13811 ;; Parameters:    Size  Location     Type
 13812 ;;		None
 13813 ;; Auto vars:     Size  Location     Type
 13814 ;;		None
 13815 ;; Return value:  Size  Location     Type
 13816 ;;                  1    wreg      void 
 13817 ;; Registers used:
 13818 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 0/0
 13821 ;;		On exit  : 0/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13828 ;;Total ram usage:        1 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:   10
 13831 ;; This function calls:
 13832 ;;		_lcdInst
 13833 ;;		_printf
 13834 ;; This function is called by:
 13835 ;;		_Test
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           	psect	text42
 13840  004D36                     __ptext42:
 13841                           	opt stack 0
 13842  004D36                     _PortTestPusher:
 13843                           	opt stack 19
 13844                           
 13845                           ;Test.c: 671: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13846                           
 13847                           ;incstack = 0
 13848  004D36  0E01               	movlw	1
 13849  004D38  ECFD  F02A         	call	_lcdInst
 13850  004D3C  0E68               	movlw	104
 13851  004D3E  0100               	movlb	0	; () banked
 13852  004D40  6FAB               	movwf	??_PortTestPusher& (0+255),b
 13853  004D42  0EE4               	movlw	228
 13854  004D44                     u10347:
 13855  004D44  2EE8               	decfsz	wreg,f,c
 13856  004D46  D7FE               	bra	u10347
 13857  004D48  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 13858  004D4A  D7FC               	bra	u10347
 13859  004D4C  F000               	nop	
 13860  004D4E  0E80               	movlw	128
 13861  004D50  ECFD  F02A         	call	_lcdInst
 13862                           
 13863                           ;Test.c: 672: printf("D WILL RETURN    ");
 13864  004D54  0EEB               	movlw	low STR_111
 13865  004D56  0100               	movlb	0	; () banked
 13866  004D58  6F8E               	movwf	printf@f& (0+255),b
 13867  004D5A  0EFA               	movlw	high STR_111
 13868  004D5C  0100               	movlb	0	; () banked
 13869  004D5E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13870  004D60  EC84  F00B         	call	_printf	;wreg free
 13871                           
 13872                           ;Test.c: 673: lcdInst(0b11000000);;
 13873  004D64  0EC0               	movlw	192
 13874  004D66  ECFD  F02A         	call	_lcdInst
 13875                           
 13876                           ;Test.c: 674: printf("OTHER SETS PUSHER");
 13877  004D6A  0E33               	movlw	low STR_127
 13878  004D6C  0100               	movlb	0	; () banked
 13879  004D6E  6F8E               	movwf	printf@f& (0+255),b
 13880  004D70  0EFB               	movlw	high STR_127
 13881  004D72  0100               	movlb	0	; () banked
 13882  004D74  6F8F               	movwf	(printf@f+1)& (0+255),b
 13883  004D76  EC84  F00B         	call	_printf	;wreg free
 13884  004D7A                     l1446:
 13885  004D7A  A281               	btfss	3969,1,c	;volatile
 13886  004D7C  D7FE               	goto	l1446
 13887                           
 13888                           ;Test.c: 679: }
 13889                           ;Test.c: 680: if(PORTB >> 4 == 0b1111){
 13890  004D7E  3881               	swapf	3969,w,c	;volatile
 13891  004D80  0B0F               	andlw	15
 13892  004D82  0A0F               	xorlw	15
 13893  004D84  B4D8               	btfsc	status,2,c
 13894  004D86  0012               	return	
 13895                           
 13896                           ;Test.c: 683: else{
 13897                           ;Test.c: 684: LATAbits.LATA4 = 1;
 13898                           
 13899                           ;Test.c: 682: }
 13900                           
 13901                           ;Test.c: 681: break;
 13902  004D88  8889               	bsf	3977,4,c	;volatile
 13903  004D8A                     l1452:
 13904  004D8A  B281               	btfsc	3969,1,c	;volatile
 13905  004D8C  D7FE               	goto	l1452
 13906                           
 13907                           ;Test.c: 687: }
 13908                           ;Test.c: 688: LATAbits.LATA4 = 0;
 13909  004D8E  9889               	bcf	3977,4,c	;volatile
 13910  004D90  D7F4               	goto	l1446
 13911  004D92                     __end_of_PortTestPusher:
 13912                           	opt stack 0
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodh	equ	0xFF4
 13918                           prodl	equ	0xFF3
 13919                           intcon	equ	0xFF2
 13920                           intcon2	equ	0xFF1
 13921                           intcon3	equ	0xFF0
 13922                           postinc0	equ	0xFEE
 13923                           wreg	equ	0xFE8
 13924                           postdec1	equ	0xFE5
 13925                           fsr1l	equ	0xFE1
 13926                           indf2	equ	0xFDF
 13927                           postinc2	equ	0xFDE
 13928                           postdec2	equ	0xFDD
 13929                           fsr2h	equ	0xFDA
 13930                           fsr2l	equ	0xFD9
 13931                           status	equ	0xFD8
 13932                           
 13933 ;; *************** function _PortTestDC *****************
 13934 ;; Defined at:
 13935 ;;		line 409 in file "Test.c"
 13936 ;; Parameters:    Size  Location     Type
 13937 ;;		None
 13938 ;; Auto vars:     Size  Location     Type
 13939 ;;		None
 13940 ;; Return value:  Size  Location     Type
 13941 ;;                  1    wreg      void 
 13942 ;; Registers used:
 13943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;Total ram usage:        1 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:   10
 13956 ;; This function calls:
 13957 ;;		_lcdInst
 13958 ;;		_printf
 13959 ;; This function is called by:
 13960 ;;		_Test
 13961 ;; This function uses a non-reentrant model
 13962 ;;
 13963                           
 13964                           	psect	text43
 13965  004D92                     __ptext43:
 13966                           	opt stack 0
 13967  004D92                     _PortTestDC:
 13968                           	opt stack 19
 13969                           
 13970                           ;Test.c: 410: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13971                           
 13972                           ;incstack = 0
 13973  004D92  0E01               	movlw	1
 13974  004D94  ECFD  F02A         	call	_lcdInst
 13975  004D98  0E68               	movlw	104
 13976  004D9A  0100               	movlb	0	; () banked
 13977  004D9C  6FAB               	movwf	??_PortTestDC& (0+255),b
 13978  004D9E  0EE4               	movlw	228
 13979  004DA0                     u10357:
 13980  004DA0  2EE8               	decfsz	wreg,f,c
 13981  004DA2  D7FE               	bra	u10357
 13982  004DA4  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 13983  004DA6  D7FC               	bra	u10357
 13984  004DA8  F000               	nop	
 13985  004DAA  0E80               	movlw	128
 13986  004DAC  ECFD  F02A         	call	_lcdInst
 13987                           
 13988                           ;Test.c: 411: printf("D WILL RETURN    ");
 13989  004DB0  0EEB               	movlw	low STR_111
 13990  004DB2  0100               	movlb	0	; () banked
 13991  004DB4  6F8E               	movwf	printf@f& (0+255),b
 13992  004DB6  0EFA               	movlw	high STR_111
 13993  004DB8  0100               	movlb	0	; () banked
 13994  004DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13995  004DBC  EC84  F00B         	call	_printf	;wreg free
 13996                           
 13997                           ;Test.c: 412: lcdInst(0b11000000);;
 13998  004DC0  0EC0               	movlw	192
 13999  004DC2  ECFD  F02A         	call	_lcdInst
 14000                           
 14001                           ;Test.c: 413: printf("OTHER SETS DC   ");
 14002  004DC6  0EE1               	movlw	low STR_112
 14003  004DC8  0100               	movlb	0	; () banked
 14004  004DCA  6F8E               	movwf	printf@f& (0+255),b
 14005  004DCC  0EFB               	movlw	high STR_112
 14006  004DCE  0100               	movlb	0	; () banked
 14007  004DD0  6F8F               	movwf	(printf@f+1)& (0+255),b
 14008  004DD2  EC84  F00B         	call	_printf	;wreg free
 14009  004DD6                     l1327:
 14010  004DD6  A281               	btfss	3969,1,c	;volatile
 14011  004DD8  D7FE               	goto	l1327
 14012                           
 14013                           ;Test.c: 418: }
 14014                           ;Test.c: 419: if(PORTB >> 4 == 0b1111){
 14015  004DDA  3881               	swapf	3969,w,c	;volatile
 14016  004DDC  0B0F               	andlw	15
 14017  004DDE  0A0F               	xorlw	15
 14018  004DE0  B4D8               	btfsc	status,2,c
 14019  004DE2  0012               	return	
 14020                           
 14021                           ;Test.c: 422: else{
 14022                           ;Test.c: 423: LATBbits.LATB2 = 1;
 14023                           
 14024                           ;Test.c: 421: }
 14025                           
 14026                           ;Test.c: 420: break;
 14027  004DE4  848A               	bsf	3978,2,c	;volatile
 14028  004DE6                     l1333:
 14029  004DE6  B281               	btfsc	3969,1,c	;volatile
 14030  004DE8  D7FE               	goto	l1333
 14031                           
 14032                           ;Test.c: 426: }
 14033                           ;Test.c: 427: LATBbits.LATB2 = 0;
 14034  004DEA  948A               	bcf	3978,2,c	;volatile
 14035  004DEC  D7F4               	goto	l1327
 14036  004DEE                     __end_of_PortTestDC:
 14037                           	opt stack 0
 14038                           tblptru	equ	0xFF8
 14039                           tblptrh	equ	0xFF7
 14040                           tblptrl	equ	0xFF6
 14041                           tablat	equ	0xFF5
 14042                           prodh	equ	0xFF4
 14043                           prodl	equ	0xFF3
 14044                           intcon	equ	0xFF2
 14045                           intcon2	equ	0xFF1
 14046                           intcon3	equ	0xFF0
 14047                           postinc0	equ	0xFEE
 14048                           wreg	equ	0xFE8
 14049                           postdec1	equ	0xFE5
 14050                           fsr1l	equ	0xFE1
 14051                           indf2	equ	0xFDF
 14052                           postinc2	equ	0xFDE
 14053                           postdec2	equ	0xFDD
 14054                           fsr2h	equ	0xFDA
 14055                           fsr2l	equ	0xFD9
 14056                           status	equ	0xFD8
 14057                           
 14058 ;; *************** function _PlatformTest *****************
 14059 ;; Defined at:
 14060 ;;		line 432 in file "Test.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;		None
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;  i               2   51[BANK0 ] int 
 14065 ;;  i               2   49[BANK0 ] int 
 14066 ;;  res             2   47[BANK0 ] int 
 14067 ;;  res             2   45[BANK0 ] int 
 14068 ;;  on              2   53[BANK0 ] int 
 14069 ;; Return value:  Size  Location     Type
 14070 ;;                  1    wreg      void 
 14071 ;; Registers used:
 14072 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14073 ;; Tracked objects:
 14074 ;;		On entry : 0/0
 14075 ;;		On exit  : 0/0
 14076 ;;		Unchanged: 0/0
 14077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14079 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14081 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14082 ;;Total ram usage:       12 bytes
 14083 ;; Hardware stack levels used:    1
 14084 ;; Hardware stack levels required when called:   10
 14085 ;; This function calls:
 14086 ;;		_lcdInst
 14087 ;;		_printf
 14088 ;;		_readADC
 14089 ;;		_stopSignals
 14090 ;; This function is called by:
 14091 ;;		_Test
 14092 ;; This function uses a non-reentrant model
 14093 ;;
 14094                           
 14095                           	psect	text44
 14096  002AC0                     __ptext44:
 14097                           	opt stack 0
 14098  002AC0                     _PlatformTest:
 14099                           	opt stack 19
 14100                           
 14101                           ;Test.c: 433: LATCbits.LATC5 = 1;
 14102                           
 14103                           ;incstack = 0
 14104  002AC0  8A8B               	bsf	3979,5,c	;volatile
 14105                           
 14106                           ;Test.c: 435: machine_state = Sorting_state;
 14107  002AC2  0E01               	movlw	1
 14108  002AC4  0100               	movlb	0	; () banked
 14109  002AC6  6FFC               	movwf	_machine_state& (0+255),b
 14110                           
 14111                           ;Test.c: 436: f_arm_position = 2;
 14112  002AC8  0E00               	movlw	0
 14113  002ACA  0100               	movlb	0	; () banked
 14114  002ACC  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14115  002ACE  0E02               	movlw	2
 14116  002AD0  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14117                           
 14118                           ;Test.c: 437: timer2_counter = 0;
 14119  002AD2  0E00               	movlw	0
 14120  002AD4  6E74               	movwf	_timer2_counter+1,c	;volatile
 14121  002AD6  0E00               	movlw	0
 14122  002AD8  6E73               	movwf	_timer2_counter,c	;volatile
 14123                           
 14124                           ; BSR set to: 0
 14125                           ;Test.c: 438: LATBbits.LATB3 = 1;
 14126  002ADA  868A               	bsf	3978,3,c	;volatile
 14127                           
 14128                           ; BSR set to: 0
 14129                           ;Test.c: 439: TMR2ON = 1;
 14130  002ADC  84CA               	bsf	4042,2,c	;volatile
 14131                           
 14132                           ;Test.c: 440: was_low_2 = 0;
 14133  002ADE  0E00               	movlw	0
 14134  002AE0  6E7A               	movwf	_was_low_2+1,c	;volatile
 14135  002AE2  0E00               	movlw	0
 14136  002AE4  6E79               	movwf	_was_low_2,c	;volatile
 14137                           
 14138                           ;Test.c: 442: int on = 1;
 14139  002AE6  0E00               	movlw	0
 14140  002AE8  0100               	movlb	0	; () banked
 14141  002AEA  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 14142  002AEC  0E01               	movlw	1
 14143  002AEE  6FB5               	movwf	PlatformTest@on& (0+255),b
 14144                           
 14145                           ; BSR set to: 0
 14146                           ;Test.c: 443: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14147  002AF0  0E01               	movlw	1
 14148  002AF2  ECFD  F02A         	call	_lcdInst
 14149  002AF6  0E68               	movlw	104
 14150  002AF8  0100               	movlb	0	; () banked
 14151  002AFA  6FAB               	movwf	??_PlatformTest& (0+255),b
 14152  002AFC  0EE4               	movlw	228
 14153  002AFE                     u10367:
 14154  002AFE  2EE8               	decfsz	wreg,f,c
 14155  002B00  D7FE               	bra	u10367
 14156  002B02  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14157  002B04  D7FC               	bra	u10367
 14158  002B06  F000               	nop	
 14159  002B08  0E80               	movlw	128
 14160  002B0A  ECFD  F02A         	call	_lcdInst
 14161                           
 14162                           ;Test.c: 444: printf("1: DC | A: ARM  ");
 14163  002B0E  0E14               	movlw	low STR_113
 14164  002B10  0100               	movlb	0	; () banked
 14165  002B12  6F8E               	movwf	printf@f& (0+255),b
 14166  002B14  0EFC               	movlw	high STR_113
 14167  002B16  0100               	movlb	0	; () banked
 14168  002B18  6F8F               	movwf	(printf@f+1)& (0+255),b
 14169  002B1A  EC84  F00B         	call	_printf	;wreg free
 14170                           
 14171                           ;Test.c: 446: while(PORTBbits.RB1 == 0){
 14172  002B1E  D041               	goto	l8464
 14173  002B20                     l8454:
 14174                           
 14175                           ;Test.c: 447: readADC(0);
 14176  002B20  0E00               	movlw	0
 14177  002B22  ECF3  F029         	call	_readADC
 14178                           
 14179                           ;Test.c: 448: int res = ADRESH<<8 | ADRESL;
 14180  002B26  50C3               	movf	4035,w,c	;volatile
 14181  002B28  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14182  002B2C  0100               	movlb	0	; () banked
 14183  002B2E  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14184  002B30  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14185  002B34  0100               	movlb	0	; () banked
 14186  002B36  6BAB               	clrf	??_PlatformTest& (0+255),b
 14187  002B38  0100               	movlb	0	; () banked
 14188  002B3A  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14189  002B3C  0100               	movlb	0	; () banked
 14190  002B3E  6FAD               	movwf	PlatformTest@res& (0+255),b
 14191  002B40  0100               	movlb	0	; () banked
 14192  002B42  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14193  002B44  0100               	movlb	0	; () banked
 14194  002B46  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;Test.c: 449: IR_signal = (res > 800) ? 1 : 0;
 14198  002B48  0100               	movlb	0	; () banked
 14199  002B4A  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 14200  002B4C  D00A               	goto	u7250
 14201  002B4E  0E21               	movlw	33
 14202  002B50  0100               	movlb	0	; () banked
 14203  002B52  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 14204  002B54  0E03               	movlw	3
 14205  002B56  0100               	movlb	0	; () banked
 14206  002B58  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 14207  002B5A  A0D8               	btfss	status,0,c
 14208  002B5C  D002               	goto	u7250
 14209  002B5E  0E01               	movlw	1
 14210  002B60  D001               	goto	u7260
 14211  002B62                     u7250:
 14212  002B62  0E00               	movlw	0
 14213  002B64                     u7260:
 14214  002B64  0100               	movlb	0	; () banked
 14215  002B66  6FE6               	movwf	_IR_signal& (0+255),b
 14216  002B68  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14217                           
 14218                           ;Test.c: 451: lcdInst(0b11000000);;
 14219  002B6A  0EC0               	movlw	192
 14220  002B6C  ECFD  F02A         	call	_lcdInst
 14221                           
 14222                           ;Test.c: 452: printf("5:H|6:L|IR:%d   ", res);
 14223  002B70  0E03               	movlw	low STR_114
 14224  002B72  0100               	movlb	0	; () banked
 14225  002B74  6F8E               	movwf	printf@f& (0+255),b
 14226  002B76  0EFC               	movlw	high STR_114
 14227  002B78  0100               	movlb	0	; () banked
 14228  002B7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14229  002B7C  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 14230  002B80  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 14231  002B84  EC84  F00B         	call	_printf	;wreg free
 14232                           
 14233                           ;Test.c: 453: _delay((unsigned long)((100)*(32000000/4000.0)));
 14234  002B88  0E05               	movlw	5
 14235  002B8A  0100               	movlb	0	; () banked
 14236  002B8C  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14237  002B8E  0E0F               	movlw	15
 14238  002B90  0100               	movlb	0	; () banked
 14239  002B92  6FAB               	movwf	??_PlatformTest& (0+255),b
 14240  002B94  0EF1               	movlw	241
 14241  002B96                     u10377:
 14242  002B96  2EE8               	decfsz	wreg,f,c
 14243  002B98  D7FE               	bra	u10377
 14244  002B9A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14245  002B9C  D7FC               	bra	u10377
 14246  002B9E  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14247  002BA0  D7FA               	bra	u10377
 14248  002BA2                     l8464:
 14249  002BA2  B281               	btfsc	3969,1,c	;volatile
 14250  002BA4  D042               	goto	l8476
 14251  002BA6  D7BC               	goto	l8454
 14252  002BA8                     l8466:
 14253                           
 14254                           ;Test.c: 458: readADC(0);
 14255  002BA8  0E00               	movlw	0
 14256  002BAA  ECF3  F029         	call	_readADC
 14257                           
 14258                           ;Test.c: 459: int res = ADRESH<<8 | ADRESL;
 14259  002BAE  50C3               	movf	4035,w,c	;volatile
 14260  002BB0  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14261  002BB4  0100               	movlb	0	; () banked
 14262  002BB6  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14263  002BB8  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14264  002BBC  0100               	movlb	0	; () banked
 14265  002BBE  6BAB               	clrf	??_PlatformTest& (0+255),b
 14266  002BC0  0100               	movlb	0	; () banked
 14267  002BC2  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14268  002BC4  0100               	movlb	0	; () banked
 14269  002BC6  6FAF               	movwf	PlatformTest@res_1781& (0+255),b
 14270  002BC8  0100               	movlb	0	; () banked
 14271  002BCA  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14272  002BCC  0100               	movlb	0	; () banked
 14273  002BCE  6FB0               	movwf	(PlatformTest@res_1781+1)& (0+255),b
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;Test.c: 460: IR_signal = (res > 800) ? 1 : 0;
 14277  002BD0  0100               	movlb	0	; () banked
 14278  002BD2  BFB0               	btfsc	(PlatformTest@res_1781+1)& (0+255),7,b
 14279  002BD4  D00A               	goto	u7280
 14280  002BD6  0E21               	movlw	33
 14281  002BD8  0100               	movlb	0	; () banked
 14282  002BDA  5DAF               	subwf	PlatformTest@res_1781& (0+255),w,b
 14283  002BDC  0E03               	movlw	3
 14284  002BDE  0100               	movlb	0	; () banked
 14285  002BE0  59B0               	subwfb	(PlatformTest@res_1781+1)& (0+255),w,b
 14286  002BE2  A0D8               	btfss	status,0,c
 14287  002BE4  D002               	goto	u7280
 14288  002BE6  0E01               	movlw	1
 14289  002BE8  D001               	goto	u7290
 14290  002BEA                     u7280:
 14291  002BEA  0E00               	movlw	0
 14292  002BEC                     u7290:
 14293  002BEC  0100               	movlb	0	; () banked
 14294  002BEE  6FE6               	movwf	_IR_signal& (0+255),b
 14295  002BF0  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14296                           
 14297                           ;Test.c: 461: lcdInst(0b11000000);;
 14298  002BF2  0EC0               	movlw	192
 14299  002BF4  ECFD  F02A         	call	_lcdInst
 14300                           
 14301                           ;Test.c: 462: printf("5:H|6:L|IR:%d   ", res);
 14302  002BF8  0E03               	movlw	low STR_114
 14303  002BFA  0100               	movlb	0	; () banked
 14304  002BFC  6F8E               	movwf	printf@f& (0+255),b
 14305  002BFE  0EFC               	movlw	high STR_114
 14306  002C00  0100               	movlb	0	; () banked
 14307  002C02  6F8F               	movwf	(printf@f+1)& (0+255),b
 14308  002C04  C0AF  F090         	movff	PlatformTest@res_1781,?_printf+2
 14309  002C08  C0B0  F091         	movff	PlatformTest@res_1781+1,?_printf+3
 14310  002C0C  EC84  F00B         	call	_printf	;wreg free
 14311                           
 14312                           ;Test.c: 463: _delay((unsigned long)((100)*(32000000/4000.0)));
 14313  002C10  0E05               	movlw	5
 14314  002C12  0100               	movlb	0	; () banked
 14315  002C14  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14316  002C16  0E0F               	movlw	15
 14317  002C18  0100               	movlb	0	; () banked
 14318  002C1A  6FAB               	movwf	??_PlatformTest& (0+255),b
 14319  002C1C  0EF1               	movlw	241
 14320  002C1E                     u10387:
 14321  002C1E  2EE8               	decfsz	wreg,f,c
 14322  002C20  D7FE               	bra	u10387
 14323  002C22  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14324  002C24  D7FC               	bra	u10387
 14325  002C26  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14326  002C28  D7FA               	bra	u10387
 14327  002C2A                     l8476:
 14328  002C2A  A281               	btfss	3969,1,c	;volatile
 14329  002C2C  D7BD               	goto	l8466
 14330                           
 14331                           ;Test.c: 464: }
 14332                           ;Test.c: 465: if(PORTB >> 4 == 0b1111){
 14333  002C2E  3881               	swapf	3969,w,c	;volatile
 14334  002C30  0B0F               	andlw	15
 14335  002C32  0A0F               	xorlw	15
 14336  002C34  B4D8               	btfsc	status,2,c
 14337  002C36  D09A               	goto	l1348
 14338                           
 14339                           ;Test.c: 468: else if(PORTB >> 4 == 0b0000){
 14340                           
 14341                           ;Test.c: 467: }
 14342                           
 14343                           ;Test.c: 466: break;
 14344  002C38  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 14345  002C3C  0100               	movlb	0	; () banked
 14346  002C3E  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 14347  002C40  0E0F               	movlw	15
 14348  002C42  17AB               	andwf	??_PlatformTest& (0+255),f,b
 14349  002C44  A4D8               	btfss	status,2,c
 14350  002C46  D012               	goto	l8488
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;Test.c: 469: LATBbits.LATB2 = !LATBbits.LATB2;
 14354  002C48  B48A               	btfsc	3978,2,c	;volatile
 14355  002C4A  D004               	goto	u7330
 14356  002C4C  0100               	movlb	0	; () banked
 14357  002C4E  6BAB               	clrf	??_PlatformTest& (0+255),b
 14358  002C50  2BAB               	incf	??_PlatformTest& (0+255),f,b
 14359  002C52  D002               	goto	u7348
 14360  002C54                     u7330:
 14361  002C54  0100               	movlb	0	; () banked
 14362  002C56  6BAB               	clrf	??_PlatformTest& (0+255),b
 14363  002C58                     u7348:
 14364  002C58  0100               	movlb	0	; () banked
 14365  002C5A  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14366  002C5C  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14367  002C5E  508A               	movf	3978,w,c	;volatile
 14368  002C60  0100               	movlb	0	; () banked
 14369  002C62  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14370  002C64  0BFB               	andlw	-5
 14371  002C66  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14372  002C68  6E8A               	movwf	3978,c	;volatile
 14373                           
 14374                           ;Test.c: 470: }
 14375  002C6A  D07D               	goto	l1363
 14376  002C6C                     l8488:
 14377                           
 14378                           ; BSR set to: 0
 14379                           ;Test.c: 471: else if(PORTB >> 4 == 0b0011){
 14380  002C6C  3881               	swapf	3969,w,c	;volatile
 14381  002C6E  0B0F               	andlw	15
 14382  002C70  0A03               	xorlw	3
 14383  002C72  A4D8               	btfss	status,2,c
 14384  002C74  D020               	goto	l8500
 14385                           
 14386                           ; BSR set to: 0
 14387                           ;Test.c: 472: if(on){
 14388  002C76  0100               	movlb	0	; () banked
 14389  002C78  51B5               	movf	PlatformTest@on& (0+255),w,b
 14390  002C7A  0100               	movlb	0	; () banked
 14391  002C7C  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14392  002C7E  B4D8               	btfsc	status,2,c
 14393  002C80  D010               	goto	l8496
 14394                           
 14395                           ; BSR set to: 0
 14396                           ;Test.c: 473: f_arm_position = 1;
 14397  002C82  0E00               	movlw	0
 14398  002C84  0100               	movlb	0	; () banked
 14399  002C86  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14400  002C88  0E01               	movlw	1
 14401  002C8A  D00F               	goto	L15
 14402  002C8C                     l8494:
 14403                           
 14404                           ; BSR set to: 0
 14405                           ;Test.c: 474: on = !on;
 14406  002C8C  0100               	movlb	0	; () banked
 14407  002C8E  51B5               	movf	PlatformTest@on& (0+255),w,b
 14408  002C90  0100               	movlb	0	; () banked
 14409  002C92  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14410  002C94  A4D8               	btfss	status,2,c
 14411  002C96  D00D               	goto	u7390
 14412  002C98  D00A               	goto	u7391
 14413  002C9A                     u7380:
 14414  002C9A  0100               	movlb	0	; () banked
 14415  002C9C  6FB5               	movwf	PlatformTest@on& (0+255),b
 14416  002C9E  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 14417                           
 14418                           ;Test.c: 475: }
 14419  002CA0  D062               	goto	l1363
 14420  002CA2                     l8496:
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;Test.c: 476: else{
 14424                           ;Test.c: 477: f_arm_position = 0;
 14425  002CA2  0E00               	movlw	0
 14426  002CA4  0100               	movlb	0	; () banked
 14427  002CA6  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14428  002CA8  0E00               	movlw	0
 14429  002CAA                     L15:
 14430  002CAA  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14431  002CAC  D7EF               	goto	l8494
 14432  002CAE                     u7391:
 14433  002CAE  0E01               	movlw	1
 14434  002CB0  D7F4               	goto	u7380
 14435  002CB2                     u7390:
 14436  002CB2  0E00               	movlw	0
 14437  002CB4  D7F2               	goto	u7380
 14438  002CB6                     l8500:
 14439                           
 14440                           ; BSR set to: 0
 14441                           ;Test.c: 482: else if(PORTB >> 4 == 0b0101){
 14442  002CB6  3881               	swapf	3969,w,c	;volatile
 14443  002CB8  0B0F               	andlw	15
 14444  002CBA  0A05               	xorlw	5
 14445  002CBC  A4D8               	btfss	status,2,c
 14446  002CBE  D027               	goto	l8514
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;Test.c: 484: for(int i = 0; i<30; i++){
 14450  002CC0  0E00               	movlw	0
 14451  002CC2  0100               	movlb	0	; () banked
 14452  002CC4  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 14453  002CC6  0E00               	movlw	0
 14454  002CC8  6FB1               	movwf	PlatformTest@i& (0+255),b
 14455  002CCA                     l8504:
 14456                           
 14457                           ; BSR set to: 0
 14458  002CCA  0100               	movlb	0	; () banked
 14459  002CCC  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 14460  002CCE  D008               	goto	l1357
 14461  002CD0  0100               	movlb	0	; () banked
 14462  002CD2  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 14463  002CD4  E148               	bnz	l1363
 14464  002CD6  0E1E               	movlw	30
 14465  002CD8  0100               	movlb	0	; () banked
 14466  002CDA  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 14467  002CDC  B0D8               	btfsc	status,0,c
 14468  002CDE  D043               	goto	l1363
 14469  002CE0                     l1357:
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;Test.c: 485: LATAbits.LATA4 = 1;
 14473  002CE0  8889               	bsf	3977,4,c	;volatile
 14474                           
 14475                           ; BSR set to: 0
 14476                           ;Test.c: 486: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 14477  002CE2  0E4E               	movlw	78
 14478  002CE4  0100               	movlb	0	; () banked
 14479  002CE6  6FAB               	movwf	??_PlatformTest& (0+255),b
 14480  002CE8  0EEB               	movlw	235
 14481  002CEA                     u10397:
 14482  002CEA  2EE8               	decfsz	wreg,f,c
 14483  002CEC  D7FE               	bra	u10397
 14484  002CEE  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14485  002CF0  D7FC               	bra	u10397
 14486                           
 14487                           ;Test.c: 487: LATAbits.LATA4 = 0;
 14488  002CF2  9889               	bcf	3977,4,c	;volatile
 14489                           
 14490                           ;Test.c: 488: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 14491  002CF4  0E1A               	movlw	26
 14492  002CF6  0100               	movlb	0	; () banked
 14493  002CF8  6FAB               	movwf	??_PlatformTest& (0+255),b
 14494  002CFA  0EF8               	movlw	248
 14495  002CFC                     u10407:
 14496  002CFC  2EE8               	decfsz	wreg,f,c
 14497  002CFE  D7FE               	bra	u10407
 14498  002D00  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14499  002D02  D7FC               	bra	u10407
 14500  002D04  F000               	nop	
 14501  002D06  0100               	movlb	0	; () banked
 14502  002D08  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 14503  002D0A  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 14504  002D0C  D7DE               	goto	l8504
 14505  002D0E                     l8514:
 14506                           
 14507                           ; BSR set to: 0
 14508                           ;Test.c: 491: else if (PORTB >> 4 == 0b0110){
 14509  002D0E  3881               	swapf	3969,w,c	;volatile
 14510  002D10  0B0F               	andlw	15
 14511  002D12  0A06               	xorlw	6
 14512  002D14  A4D8               	btfss	status,2,c
 14513  002D16  D027               	goto	l1363
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;Test.c: 493: for(int i = 0; i<30; i++){
 14517  002D18  0E00               	movlw	0
 14518  002D1A  0100               	movlb	0	; () banked
 14519  002D1C  6FB4               	movwf	(PlatformTest@i_1784+1)& (0+255),b
 14520  002D1E  0E00               	movlw	0
 14521  002D20  6FB3               	movwf	PlatformTest@i_1784& (0+255),b
 14522  002D22                     l8518:
 14523                           
 14524                           ; BSR set to: 0
 14525  002D22  0100               	movlb	0	; () banked
 14526  002D24  BFB4               	btfsc	(PlatformTest@i_1784+1)& (0+255),7,b
 14527  002D26  D008               	goto	l1361
 14528  002D28  0100               	movlb	0	; () banked
 14529  002D2A  51B4               	movf	(PlatformTest@i_1784+1)& (0+255),w,b
 14530  002D2C  E11C               	bnz	l1363
 14531  002D2E  0E1E               	movlw	30
 14532  002D30  0100               	movlb	0	; () banked
 14533  002D32  5DB3               	subwf	PlatformTest@i_1784& (0+255),w,b
 14534  002D34  B0D8               	btfsc	status,0,c
 14535  002D36  D017               	goto	l1363
 14536  002D38                     l1361:
 14537                           
 14538                           ; BSR set to: 0
 14539                           ;Test.c: 494: LATAbits.LATA4 = 1;
 14540  002D38  8889               	bsf	3977,4,c	;volatile
 14541                           
 14542                           ; BSR set to: 0
 14543                           ;Test.c: 495: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 14544  002D3A  0E3D               	movlw	61
 14545  002D3C  0100               	movlb	0	; () banked
 14546  002D3E  6FAB               	movwf	??_PlatformTest& (0+255),b
 14547  002D40  0E41               	movlw	65
 14548  002D42                     u10417:
 14549  002D42  2EE8               	decfsz	wreg,f,c
 14550  002D44  D7FE               	bra	u10417
 14551  002D46  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14552  002D48  D7FC               	bra	u10417
 14553                           
 14554                           ;Test.c: 496: LATAbits.LATA4 = 0;
 14555  002D4A  9889               	bcf	3977,4,c	;volatile
 14556                           
 14557                           ;Test.c: 497: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 14558  002D4C  0E2C               	movlw	44
 14559  002D4E  0100               	movlb	0	; () banked
 14560  002D50  6FAB               	movwf	??_PlatformTest& (0+255),b
 14561  002D52  0EA1               	movlw	161
 14562  002D54                     u10427:
 14563  002D54  2EE8               	decfsz	wreg,f,c
 14564  002D56  D7FE               	bra	u10427
 14565  002D58  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14566  002D5A  D7FC               	bra	u10427
 14567  002D5C  D000               	nop2	
 14568  002D5E  0100               	movlb	0	; () banked
 14569  002D60  4BB3               	infsnz	PlatformTest@i_1784& (0+255),f,b
 14570  002D62  2BB4               	incf	(PlatformTest@i_1784+1)& (0+255),f,b
 14571  002D64  D7DE               	goto	l8518
 14572  002D66                     l1363:
 14573  002D66  A281               	btfss	3969,1,c	;volatile
 14574  002D68  D760               	goto	l8476
 14575  002D6A  D7FD               	goto	l1363
 14576  002D6C                     l1348:
 14577                           
 14578                           ;Test.c: 502: }
 14579                           ;Test.c: 504: LATCbits.LATC5 = 0;
 14580  002D6C  9A8B               	bcf	3979,5,c	;volatile
 14581                           
 14582                           ;Test.c: 505: TMR1IF = 1;
 14583  002D6E  809E               	bsf	3998,0,c	;volatile
 14584                           
 14585                           ;Test.c: 506: TMR3IF = 1;
 14586  002D70  82A1               	bsf	4001,1,c	;volatile
 14587                           
 14588                           ;Test.c: 507: stopSignals();
 14589  002D72  ECAF  F02A         	call	_stopSignals	;wreg free
 14590                           
 14591                           ;Test.c: 508: machine_state = Testing_state;
 14592  002D76  0E03               	movlw	3
 14593  002D78  0100               	movlb	0	; () banked
 14594  002D7A  6FFC               	movwf	_machine_state& (0+255),b
 14595                           
 14596                           ; BSR set to: 0
 14597  002D7C  0012               	return		;funcret
 14598  002D7E                     __end_of_PlatformTest:
 14599                           	opt stack 0
 14600                           tblptru	equ	0xFF8
 14601                           tblptrh	equ	0xFF7
 14602                           tblptrl	equ	0xFF6
 14603                           tablat	equ	0xFF5
 14604                           prodh	equ	0xFF4
 14605                           prodl	equ	0xFF3
 14606                           intcon	equ	0xFF2
 14607                           intcon2	equ	0xFF1
 14608                           intcon3	equ	0xFF0
 14609                           postinc0	equ	0xFEE
 14610                           wreg	equ	0xFE8
 14611                           postdec1	equ	0xFE5
 14612                           fsr1l	equ	0xFE1
 14613                           indf2	equ	0xFDF
 14614                           postinc2	equ	0xFDE
 14615                           postdec2	equ	0xFDD
 14616                           fsr2h	equ	0xFDA
 14617                           fsr2l	equ	0xFD9
 14618                           status	equ	0xFD8
 14619                           
 14620 ;; *************** function _stopSignals *****************
 14621 ;; Defined at:
 14622 ;;		line 70 in file "main.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;		None
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;		None
 14627 ;; Return value:  Size  Location     Type
 14628 ;;                  1    wreg      void 
 14629 ;; Registers used:
 14630 ;;		wreg, status,2
 14631 ;; Tracked objects:
 14632 ;;		On entry : 0/0
 14633 ;;		On exit  : 0/0
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14640 ;;Total ram usage:        0 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; Hardware stack levels required when called:    7
 14643 ;; This function calls:
 14644 ;;		Nothing
 14645 ;; This function is called by:
 14646 ;;		_main
 14647 ;;		_PlatformTest
 14648 ;;		_arm
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652                           	psect	text45
 14653  00555E                     __ptext45:
 14654                           	opt stack 0
 14655  00555E                     _stopSignals:
 14656                           	opt stack 23
 14657                           
 14658                           ;main.c: 71: LATA = 0x00;
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;incstack = 0
 14662  00555E  0E00               	movlw	0
 14663  005560  6E89               	movwf	3977,c	;volatile
 14664                           
 14665                           ;main.c: 72: LATB = 0x00;
 14666  005562  0E00               	movlw	0
 14667  005564  6E8A               	movwf	3978,c	;volatile
 14668                           
 14669                           ;main.c: 73: LATC = 0x00;
 14670  005566  0E00               	movlw	0
 14671  005568  6E8B               	movwf	3979,c	;volatile
 14672                           
 14673                           ;main.c: 74: LATD = 0x00;
 14674  00556A  0E00               	movlw	0
 14675  00556C  6E8C               	movwf	3980,c	;volatile
 14676                           
 14677                           ;main.c: 75: LATE = 0x00;
 14678  00556E  0E00               	movlw	0
 14679  005570  6E8D               	movwf	3981,c	;volatile
 14680                           
 14681                           ;main.c: 76: TMR1ON = 0;
 14682  005572  90CD               	bcf	4045,0,c	;volatile
 14683                           
 14684                           ;main.c: 77: TMR2ON = 0;
 14685  005574  94CA               	bcf	4042,2,c	;volatile
 14686                           
 14687                           ;main.c: 78: TMR3ON = 0;
 14688  005576  90B1               	bcf	4017,0,c	;volatile
 14689  005578  0012               	return		;funcret
 14690  00557A                     __end_of_stopSignals:
 14691                           	opt stack 0
 14692                           tblptru	equ	0xFF8
 14693                           tblptrh	equ	0xFF7
 14694                           tblptrl	equ	0xFF6
 14695                           tablat	equ	0xFF5
 14696                           prodh	equ	0xFF4
 14697                           prodl	equ	0xFF3
 14698                           intcon	equ	0xFF2
 14699                           intcon2	equ	0xFF1
 14700                           intcon3	equ	0xFF0
 14701                           postinc0	equ	0xFEE
 14702                           wreg	equ	0xFE8
 14703                           postdec1	equ	0xFE5
 14704                           fsr1l	equ	0xFE1
 14705                           indf2	equ	0xFDF
 14706                           postinc2	equ	0xFDE
 14707                           postdec2	equ	0xFDD
 14708                           fsr2h	equ	0xFDA
 14709                           fsr2l	equ	0xFD9
 14710                           status	equ	0xFD8
 14711                           
 14712 ;; *************** function _readADC *****************
 14713 ;; Defined at:
 14714 ;;		line 15 in file "ADCFunctionality.c"
 14715 ;; Parameters:    Size  Location     Type
 14716 ;;  channel         1    wreg     unsigned char 
 14717 ;; Auto vars:     Size  Location     Type
 14718 ;;  channel         1    1[BANK0 ] unsigned char 
 14719 ;; Return value:  Size  Location     Type
 14720 ;;                  1    wreg      void 
 14721 ;; Registers used:
 14722 ;;		wreg, status,2, status,0, cstack
 14723 ;; Tracked objects:
 14724 ;;		On entry : 0/0
 14725 ;;		On exit  : 0/0
 14726 ;;		Unchanged: 0/0
 14727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14732 ;;Total ram usage:        2 bytes
 14733 ;; Hardware stack levels used:    1
 14734 ;; Hardware stack levels required when called:    7
 14735 ;; This function calls:
 14736 ;;		Nothing
 14737 ;; This function is called by:
 14738 ;;		_readIR
 14739 ;;		_readMAG
 14740 ;;		_sensorTest
 14741 ;;		_PlatformTest
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           	psect	text46
 14746  0053E6                     __ptext46:
 14747                           	opt stack 0
 14748  0053E6                     _readADC:
 14749                           	opt stack 20
 14750                           
 14751                           ;incstack = 0
 14752                           ;readADC@channel stored from wreg
 14753  0053E6  0100               	movlb	0	; () banked
 14754  0053E8  6F81               	movwf	readADC@channel& (0+255),b
 14755                           
 14756                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14757  0053EA  0100               	movlb	0	; () banked
 14758  0053EC  4581               	rlncf	readADC@channel& (0+255),w,b
 14759  0053EE  46E8               	rlncf	wreg,f,c
 14760  0053F0  0BFC               	andlw	252
 14761  0053F2  6EC2               	movwf	4034,c	;volatile
 14762                           
 14763                           ; BSR set to: 0
 14764                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14765  0053F4  80C2               	bsf	4034,0,c	;volatile
 14766                           
 14767                           ; BSR set to: 0
 14768                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14769  0053F6  82C2               	bsf	4034,1,c	;volatile
 14770                           
 14771                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14772  0053F8  D009               	goto	l6256
 14773  0053FA                     l6254:
 14774  0053FA  0E34               	movlw	52
 14775  0053FC  0100               	movlb	0	; () banked
 14776  0053FE  6F80               	movwf	??_readADC& (0+255),b
 14777  005400  0EF1               	movlw	241
 14778  005402                     u10437:
 14779  005402  2EE8               	decfsz	wreg,f,c
 14780  005404  D7FE               	bra	u10437
 14781  005406  2F80               	decfsz	??_readADC& (0+255),f,b
 14782  005408  D7FC               	bra	u10437
 14783  00540A  D000               	nop2	
 14784  00540C                     l6256:
 14785  00540C  A2C2               	btfss	4034,1,c	;volatile
 14786  00540E  0012               	return	
 14787  005410  D7F4               	goto	l6254
 14788  005412                     __end_of_readADC:
 14789                           	opt stack 0
 14790                           tblptru	equ	0xFF8
 14791                           tblptrh	equ	0xFF7
 14792                           tblptrl	equ	0xFF6
 14793                           tablat	equ	0xFF5
 14794                           prodh	equ	0xFF4
 14795                           prodl	equ	0xFF3
 14796                           intcon	equ	0xFF2
 14797                           intcon2	equ	0xFF1
 14798                           intcon3	equ	0xFF0
 14799                           postinc0	equ	0xFEE
 14800                           wreg	equ	0xFE8
 14801                           postdec1	equ	0xFE5
 14802                           fsr1l	equ	0xFE1
 14803                           indf2	equ	0xFDF
 14804                           postinc2	equ	0xFDE
 14805                           postdec2	equ	0xFDD
 14806                           fsr2h	equ	0xFDA
 14807                           fsr2l	equ	0xFD9
 14808                           status	equ	0xFD8
 14809                           
 14810 ;; *************** function _BothServos *****************
 14811 ;; Defined at:
 14812 ;;		line 351 in file "Test.c"
 14813 ;; Parameters:    Size  Location     Type
 14814 ;;		None
 14815 ;; Auto vars:     Size  Location     Type
 14816 ;;		None
 14817 ;; Return value:  Size  Location     Type
 14818 ;;                  1    wreg      void 
 14819 ;; Registers used:
 14820 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14821 ;; Tracked objects:
 14822 ;;		On entry : 0/0
 14823 ;;		On exit  : 0/0
 14824 ;;		Unchanged: 0/0
 14825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14830 ;;Total ram usage:        2 bytes
 14831 ;; Hardware stack levels used:    1
 14832 ;; Hardware stack levels required when called:   10
 14833 ;; This function calls:
 14834 ;;		_initServos
 14835 ;;		_lcdInst
 14836 ;;		_printf
 14837 ;;		_updateServoPosition
 14838 ;; This function is called by:
 14839 ;;		_Test
 14840 ;; This function uses a non-reentrant model
 14841 ;;
 14842                           
 14843                           	psect	text47
 14844  001B40                     __ptext47:
 14845                           	opt stack 0
 14846  001B40                     _BothServos:
 14847                           	opt stack 19
 14848                           
 14849                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14850                           
 14851                           ;incstack = 0
 14852  001B40  0E01               	movlw	1
 14853  001B42  ECFD  F02A         	call	_lcdInst
 14854  001B46  0E68               	movlw	104
 14855  001B48  0100               	movlb	0	; () banked
 14856  001B4A  6FAB               	movwf	??_BothServos& (0+255),b
 14857  001B4C  0EE4               	movlw	228
 14858  001B4E                     u10447:
 14859  001B4E  2EE8               	decfsz	wreg,f,c
 14860  001B50  D7FE               	bra	u10447
 14861  001B52  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14862  001B54  D7FC               	bra	u10447
 14863  001B56  F000               	nop	
 14864  001B58  0E80               	movlw	128
 14865  001B5A  ECFD  F02A         	call	_lcdInst
 14866                           
 14867                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 14868  001B5E  0EBE               	movlw	low STR_110
 14869  001B60  0100               	movlb	0	; () banked
 14870  001B62  6F8E               	movwf	printf@f& (0+255),b
 14871  001B64  0EFC               	movlw	high STR_110
 14872  001B66  0100               	movlb	0	; () banked
 14873  001B68  6F8F               	movwf	(printf@f+1)& (0+255),b
 14874  001B6A  EC84  F00B         	call	_printf	;wreg free
 14875                           
 14876                           ;Test.c: 354: TMR1ON = 1;
 14877  001B6E  80CD               	bsf	4045,0,c	;volatile
 14878                           
 14879                           ;Test.c: 355: TMR3ON = 1;
 14880  001B70  80B1               	bsf	4017,0,c	;volatile
 14881                           
 14882                           ;Test.c: 356: machine_state = Sorting_state;
 14883  001B72  0E01               	movlw	1
 14884  001B74  0100               	movlb	0	; () banked
 14885  001B76  6FFC               	movwf	_machine_state& (0+255),b
 14886                           
 14887                           ; BSR set to: 0
 14888                           ;Test.c: 357: was_low_1 = 0;
 14889  001B78  0E00               	movlw	0
 14890  001B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 14891  001B7C  0E00               	movlw	0
 14892  001B7E  6E77               	movwf	_was_low_1,c	;volatile
 14893                           
 14894                           ; BSR set to: 0
 14895                           ;Test.c: 358: was_low_3 = 0;
 14896  001B80  0E00               	movlw	0
 14897  001B82  6E7C               	movwf	_was_low_3+1,c	;volatile
 14898  001B84  0E00               	movlw	0
 14899  001B86  6E7B               	movwf	_was_low_3,c	;volatile
 14900                           
 14901                           ; BSR set to: 0
 14902                           ;Test.c: 364: initServos();
 14903  001B88  ECB2  F024         	call	_initServos	;wreg free
 14904                           
 14905                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14906  001B8C  0E3D               	movlw	61
 14907  001B8E  0100               	movlb	0	; () banked
 14908  001B90  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14909  001B92  0EE1               	movlw	225
 14910  001B94  0100               	movlb	0	; () banked
 14911  001B96  6FAB               	movwf	??_BothServos& (0+255),b
 14912  001B98  0E3F               	movlw	63
 14913  001B9A                     u10457:
 14914  001B9A  2EE8               	decfsz	wreg,f,c
 14915  001B9C  D7FE               	bra	u10457
 14916  001B9E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14917  001BA0  D7FC               	bra	u10457
 14918  001BA2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14919  001BA4  D7FA               	bra	u10457
 14920  001BA6  D000               	nop2	
 14921                           
 14922                           ;Test.c: 367: updateServoPosition(500, 1);
 14923  001BA8  0E01               	movlw	1
 14924  001BAA  0100               	movlb	0	; () banked
 14925  001BAC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14926  001BAE  0EF4               	movlw	244
 14927  001BB0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14928  001BB2  0E00               	movlw	0
 14929  001BB4  0100               	movlb	0	; () banked
 14930  001BB6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14931  001BB8  0E01               	movlw	1
 14932  001BBA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14933  001BBC  EC2D  F024         	call	_updateServoPosition	;wreg free
 14934                           
 14935                           ;Test.c: 368: updateServoPosition(1050, 3);
 14936  001BC0  0E04               	movlw	4
 14937  001BC2  0100               	movlb	0	; () banked
 14938  001BC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14939  001BC6  0E1A               	movlw	26
 14940  001BC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14941  001BCA  0E00               	movlw	0
 14942  001BCC  0100               	movlb	0	; () banked
 14943  001BCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14944  001BD0  0E03               	movlw	3
 14945  001BD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14946  001BD4  EC2D  F024         	call	_updateServoPosition	;wreg free
 14947                           
 14948                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 14949  001BD8  0E1F               	movlw	31
 14950  001BDA  0100               	movlb	0	; () banked
 14951  001BDC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14952  001BDE  0E71               	movlw	113
 14953  001BE0  0100               	movlb	0	; () banked
 14954  001BE2  6FAB               	movwf	??_BothServos& (0+255),b
 14955  001BE4  0E1E               	movlw	30
 14956  001BE6                     u10467:
 14957  001BE6  2EE8               	decfsz	wreg,f,c
 14958  001BE8  D7FE               	bra	u10467
 14959  001BEA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14960  001BEC  D7FC               	bra	u10467
 14961  001BEE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14962  001BF0  D7FA               	bra	u10467
 14963  001BF2  F000               	nop	
 14964                           
 14965                           ;Test.c: 370: updateServoPosition(1260, 3);
 14966  001BF4  0E04               	movlw	4
 14967  001BF6  0100               	movlb	0	; () banked
 14968  001BF8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14969  001BFA  0EEC               	movlw	236
 14970  001BFC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14971  001BFE  0E00               	movlw	0
 14972  001C00  0100               	movlb	0	; () banked
 14973  001C02  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14974  001C04  0E03               	movlw	3
 14975  001C06  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14976  001C08  EC2D  F024         	call	_updateServoPosition	;wreg free
 14977                           
 14978                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 14979  001C0C  0E1D               	movlw	29
 14980  001C0E  0100               	movlb	0	; () banked
 14981  001C10  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14982  001C12  0E69               	movlw	105
 14983  001C14  0100               	movlb	0	; () banked
 14984  001C16  6FAB               	movwf	??_BothServos& (0+255),b
 14985  001C18  0EA5               	movlw	165
 14986  001C1A                     u10477:
 14987  001C1A  2EE8               	decfsz	wreg,f,c
 14988  001C1C  D7FE               	bra	u10477
 14989  001C1E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14990  001C20  D7FC               	bra	u10477
 14991  001C22  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14992  001C24  D7FA               	bra	u10477
 14993                           
 14994                           ;Test.c: 372: updateServoPosition(1050, 3);
 14995  001C26  0E04               	movlw	4
 14996  001C28  0100               	movlb	0	; () banked
 14997  001C2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14998  001C2C  0E1A               	movlw	26
 14999  001C2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15000  001C30  0E00               	movlw	0
 15001  001C32  0100               	movlb	0	; () banked
 15002  001C34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15003  001C36  0E03               	movlw	3
 15004  001C38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15005  001C3A  EC2D  F024         	call	_updateServoPosition	;wreg free
 15006                           
 15007                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 15008  001C3E  0E1F               	movlw	31
 15009  001C40  0100               	movlb	0	; () banked
 15010  001C42  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15011  001C44  0E71               	movlw	113
 15012  001C46  0100               	movlb	0	; () banked
 15013  001C48  6FAB               	movwf	??_BothServos& (0+255),b
 15014  001C4A  0E1E               	movlw	30
 15015  001C4C                     u10487:
 15016  001C4C  2EE8               	decfsz	wreg,f,c
 15017  001C4E  D7FE               	bra	u10487
 15018  001C50  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15019  001C52  D7FC               	bra	u10487
 15020  001C54  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15021  001C56  D7FA               	bra	u10487
 15022  001C58  F000               	nop	
 15023                           
 15024                           ;Test.c: 375: updateServoPosition(850, 1);
 15025  001C5A  0E03               	movlw	3
 15026  001C5C  0100               	movlb	0	; () banked
 15027  001C5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15028  001C60  0E52               	movlw	82
 15029  001C62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15030  001C64  0E00               	movlw	0
 15031  001C66  0100               	movlb	0	; () banked
 15032  001C68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15033  001C6A  0E01               	movlw	1
 15034  001C6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15035  001C6E  EC2D  F024         	call	_updateServoPosition	;wreg free
 15036                           
 15037                           ;Test.c: 376: updateServoPosition(1050, 3);
 15038  001C72  0E04               	movlw	4
 15039  001C74  0100               	movlb	0	; () banked
 15040  001C76  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15041  001C78  0E1A               	movlw	26
 15042  001C7A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15043  001C7C  0E00               	movlw	0
 15044  001C7E  0100               	movlb	0	; () banked
 15045  001C80  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15046  001C82  0E03               	movlw	3
 15047  001C84  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15048  001C86  EC2D  F024         	call	_updateServoPosition	;wreg free
 15049                           
 15050                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 15051  001C8A  0E1F               	movlw	31
 15052  001C8C  0100               	movlb	0	; () banked
 15053  001C8E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15054  001C90  0E71               	movlw	113
 15055  001C92  0100               	movlb	0	; () banked
 15056  001C94  6FAB               	movwf	??_BothServos& (0+255),b
 15057  001C96  0E1E               	movlw	30
 15058  001C98                     u10497:
 15059  001C98  2EE8               	decfsz	wreg,f,c
 15060  001C9A  D7FE               	bra	u10497
 15061  001C9C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15062  001C9E  D7FC               	bra	u10497
 15063  001CA0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15064  001CA2  D7FA               	bra	u10497
 15065  001CA4  F000               	nop	
 15066                           
 15067                           ;Test.c: 378: updateServoPosition(1260, 3);
 15068  001CA6  0E04               	movlw	4
 15069  001CA8  0100               	movlb	0	; () banked
 15070  001CAA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15071  001CAC  0EEC               	movlw	236
 15072  001CAE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15073  001CB0  0E00               	movlw	0
 15074  001CB2  0100               	movlb	0	; () banked
 15075  001CB4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15076  001CB6  0E03               	movlw	3
 15077  001CB8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15078  001CBA  EC2D  F024         	call	_updateServoPosition	;wreg free
 15079                           
 15080                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 15081  001CBE  0E1D               	movlw	29
 15082  001CC0  0100               	movlb	0	; () banked
 15083  001CC2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15084  001CC4  0E69               	movlw	105
 15085  001CC6  0100               	movlb	0	; () banked
 15086  001CC8  6FAB               	movwf	??_BothServos& (0+255),b
 15087  001CCA  0EA5               	movlw	165
 15088  001CCC                     u10507:
 15089  001CCC  2EE8               	decfsz	wreg,f,c
 15090  001CCE  D7FE               	bra	u10507
 15091  001CD0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15092  001CD2  D7FC               	bra	u10507
 15093  001CD4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15094  001CD6  D7FA               	bra	u10507
 15095                           
 15096                           ;Test.c: 380: updateServoPosition(1050, 3);
 15097  001CD8  0E04               	movlw	4
 15098  001CDA  0100               	movlb	0	; () banked
 15099  001CDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15100  001CDE  0E1A               	movlw	26
 15101  001CE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15102  001CE2  0E00               	movlw	0
 15103  001CE4  0100               	movlb	0	; () banked
 15104  001CE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15105  001CE8  0E03               	movlw	3
 15106  001CEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15107  001CEC  EC2D  F024         	call	_updateServoPosition	;wreg free
 15108                           
 15109                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 15110  001CF0  0E1F               	movlw	31
 15111  001CF2  0100               	movlb	0	; () banked
 15112  001CF4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15113  001CF6  0E71               	movlw	113
 15114  001CF8  0100               	movlb	0	; () banked
 15115  001CFA  6FAB               	movwf	??_BothServos& (0+255),b
 15116  001CFC  0E1E               	movlw	30
 15117  001CFE                     u10517:
 15118  001CFE  2EE8               	decfsz	wreg,f,c
 15119  001D00  D7FE               	bra	u10517
 15120  001D02  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15121  001D04  D7FC               	bra	u10517
 15122  001D06  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15123  001D08  D7FA               	bra	u10517
 15124  001D0A  F000               	nop	
 15125                           
 15126                           ;Test.c: 383: updateServoPosition(1200, 1);
 15127  001D0C  0E04               	movlw	4
 15128  001D0E  0100               	movlb	0	; () banked
 15129  001D10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15130  001D12  0EB0               	movlw	176
 15131  001D14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15132  001D16  0E00               	movlw	0
 15133  001D18  0100               	movlb	0	; () banked
 15134  001D1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15135  001D1C  0E01               	movlw	1
 15136  001D1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15137  001D20  EC2D  F024         	call	_updateServoPosition	;wreg free
 15138                           
 15139                           ;Test.c: 384: updateServoPosition(1050, 3);
 15140  001D24  0E04               	movlw	4
 15141  001D26  0100               	movlb	0	; () banked
 15142  001D28  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15143  001D2A  0E1A               	movlw	26
 15144  001D2C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15145  001D2E  0E00               	movlw	0
 15146  001D30  0100               	movlb	0	; () banked
 15147  001D32  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15148  001D34  0E03               	movlw	3
 15149  001D36  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15150  001D38  EC2D  F024         	call	_updateServoPosition	;wreg free
 15151                           
 15152                           ;Test.c: 385: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15153  001D3C  0E3D               	movlw	61
 15154  001D3E  0100               	movlb	0	; () banked
 15155  001D40  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15156  001D42  0EE1               	movlw	225
 15157  001D44  0100               	movlb	0	; () banked
 15158  001D46  6FAB               	movwf	??_BothServos& (0+255),b
 15159  001D48  0E3F               	movlw	63
 15160  001D4A                     u10527:
 15161  001D4A  2EE8               	decfsz	wreg,f,c
 15162  001D4C  D7FE               	bra	u10527
 15163  001D4E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15164  001D50  D7FC               	bra	u10527
 15165  001D52  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15166  001D54  D7FA               	bra	u10527
 15167  001D56  D000               	nop2	
 15168                           
 15169                           ;Test.c: 387: updateServoPosition(1670, 1);
 15170  001D58  0E06               	movlw	6
 15171  001D5A  0100               	movlb	0	; () banked
 15172  001D5C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15173  001D5E  0E86               	movlw	134
 15174  001D60  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15175  001D62  0E00               	movlw	0
 15176  001D64  0100               	movlb	0	; () banked
 15177  001D66  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15178  001D68  0E01               	movlw	1
 15179  001D6A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15180  001D6C  EC2D  F024         	call	_updateServoPosition	;wreg free
 15181                           
 15182                           ;Test.c: 388: updateServoPosition(1050, 3);
 15183  001D70  0E04               	movlw	4
 15184  001D72  0100               	movlb	0	; () banked
 15185  001D74  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15186  001D76  0E1A               	movlw	26
 15187  001D78  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15188  001D7A  0E00               	movlw	0
 15189  001D7C  0100               	movlb	0	; () banked
 15190  001D7E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15191  001D80  0E03               	movlw	3
 15192  001D82  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15193  001D84  EC2D  F024         	call	_updateServoPosition	;wreg free
 15194                           
 15195                           ;Test.c: 389: _delay((unsigned long)((750)*(32000000/4000.0)));
 15196  001D88  0E1F               	movlw	31
 15197  001D8A  0100               	movlb	0	; () banked
 15198  001D8C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15199  001D8E  0E71               	movlw	113
 15200  001D90  0100               	movlb	0	; () banked
 15201  001D92  6FAB               	movwf	??_BothServos& (0+255),b
 15202  001D94  0E1E               	movlw	30
 15203  001D96                     u10537:
 15204  001D96  2EE8               	decfsz	wreg,f,c
 15205  001D98  D7FE               	bra	u10537
 15206  001D9A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15207  001D9C  D7FC               	bra	u10537
 15208  001D9E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15209  001DA0  D7FA               	bra	u10537
 15210  001DA2  F000               	nop	
 15211                           
 15212                           ;Test.c: 390: updateServoPosition(1390, 3);
 15213  001DA4  0E05               	movlw	5
 15214  001DA6  0100               	movlb	0	; () banked
 15215  001DA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15216  001DAA  0E6E               	movlw	110
 15217  001DAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15218  001DAE  0E00               	movlw	0
 15219  001DB0  0100               	movlb	0	; () banked
 15220  001DB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15221  001DB4  0E03               	movlw	3
 15222  001DB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15223  001DB8  EC2D  F024         	call	_updateServoPosition	;wreg free
 15224                           
 15225                           ;Test.c: 391: _delay((unsigned long)((700)*(32000000/4000.0)));
 15226  001DBC  0E1D               	movlw	29
 15227  001DBE  0100               	movlb	0	; () banked
 15228  001DC0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15229  001DC2  0E69               	movlw	105
 15230  001DC4  0100               	movlb	0	; () banked
 15231  001DC6  6FAB               	movwf	??_BothServos& (0+255),b
 15232  001DC8  0EA5               	movlw	165
 15233  001DCA                     u10547:
 15234  001DCA  2EE8               	decfsz	wreg,f,c
 15235  001DCC  D7FE               	bra	u10547
 15236  001DCE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15237  001DD0  D7FC               	bra	u10547
 15238  001DD2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15239  001DD4  D7FA               	bra	u10547
 15240                           
 15241                           ;Test.c: 392: updateServoPosition(1050, 3);
 15242  001DD6  0E04               	movlw	4
 15243  001DD8  0100               	movlb	0	; () banked
 15244  001DDA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15245  001DDC  0E1A               	movlw	26
 15246  001DDE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15247  001DE0  0E00               	movlw	0
 15248  001DE2  0100               	movlb	0	; () banked
 15249  001DE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15250  001DE6  0E03               	movlw	3
 15251  001DE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15252  001DEA  EC2D  F024         	call	_updateServoPosition	;wreg free
 15253                           
 15254                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 15255  001DEE  0E1F               	movlw	31
 15256  001DF0  0100               	movlb	0	; () banked
 15257  001DF2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15258  001DF4  0E71               	movlw	113
 15259  001DF6  0100               	movlb	0	; () banked
 15260  001DF8  6FAB               	movwf	??_BothServos& (0+255),b
 15261  001DFA  0E1E               	movlw	30
 15262  001DFC                     u10557:
 15263  001DFC  2EE8               	decfsz	wreg,f,c
 15264  001DFE  D7FE               	bra	u10557
 15265  001E00  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15266  001E02  D7FC               	bra	u10557
 15267  001E04  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15268  001E06  D7FA               	bra	u10557
 15269  001E08  F000               	nop	
 15270                           
 15271                           ;Test.c: 395: updateServoPosition(2400, 1);
 15272  001E0A  0E09               	movlw	9
 15273  001E0C  0100               	movlb	0	; () banked
 15274  001E0E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15275  001E10  0E60               	movlw	96
 15276  001E12  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15277  001E14  0E00               	movlw	0
 15278  001E16  0100               	movlb	0	; () banked
 15279  001E18  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15280  001E1A  0E01               	movlw	1
 15281  001E1C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15282  001E1E  EC2D  F024         	call	_updateServoPosition	;wreg free
 15283                           
 15284                           ;Test.c: 396: updateServoPosition(1050, 3);
 15285  001E22  0E04               	movlw	4
 15286  001E24  0100               	movlb	0	; () banked
 15287  001E26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15288  001E28  0E1A               	movlw	26
 15289  001E2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15290  001E2C  0E00               	movlw	0
 15291  001E2E  0100               	movlb	0	; () banked
 15292  001E30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15293  001E32  0E03               	movlw	3
 15294  001E34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15295  001E36  EC2D  F024         	call	_updateServoPosition	;wreg free
 15296                           
 15297                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 15298  001E3A  0E1F               	movlw	31
 15299  001E3C  0100               	movlb	0	; () banked
 15300  001E3E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15301  001E40  0E71               	movlw	113
 15302  001E42  0100               	movlb	0	; () banked
 15303  001E44  6FAB               	movwf	??_BothServos& (0+255),b
 15304  001E46  0E1E               	movlw	30
 15305  001E48                     u10567:
 15306  001E48  2EE8               	decfsz	wreg,f,c
 15307  001E4A  D7FE               	bra	u10567
 15308  001E4C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15309  001E4E  D7FC               	bra	u10567
 15310  001E50  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15311  001E52  D7FA               	bra	u10567
 15312  001E54  F000               	nop	
 15313                           
 15314                           ;Test.c: 398: updateServoPosition(1390, 3);
 15315  001E56  0E05               	movlw	5
 15316  001E58  0100               	movlb	0	; () banked
 15317  001E5A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15318  001E5C  0E6E               	movlw	110
 15319  001E5E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15320  001E60  0E00               	movlw	0
 15321  001E62  0100               	movlb	0	; () banked
 15322  001E64  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15323  001E66  0E03               	movlw	3
 15324  001E68  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15325  001E6A  EC2D  F024         	call	_updateServoPosition	;wreg free
 15326                           
 15327                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 15328  001E6E  0E1D               	movlw	29
 15329  001E70  0100               	movlb	0	; () banked
 15330  001E72  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15331  001E74  0E69               	movlw	105
 15332  001E76  0100               	movlb	0	; () banked
 15333  001E78  6FAB               	movwf	??_BothServos& (0+255),b
 15334  001E7A  0EA5               	movlw	165
 15335  001E7C                     u10577:
 15336  001E7C  2EE8               	decfsz	wreg,f,c
 15337  001E7E  D7FE               	bra	u10577
 15338  001E80  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15339  001E82  D7FC               	bra	u10577
 15340  001E84  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15341  001E86  D7FA               	bra	u10577
 15342                           
 15343                           ;Test.c: 400: updateServoPosition(1050, 3);
 15344  001E88  0E04               	movlw	4
 15345  001E8A  0100               	movlb	0	; () banked
 15346  001E8C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15347  001E8E  0E1A               	movlw	26
 15348  001E90  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15349  001E92  0E00               	movlw	0
 15350  001E94  0100               	movlb	0	; () banked
 15351  001E96  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15352  001E98  0E03               	movlw	3
 15353  001E9A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15354  001E9C  EC2D  F024         	call	_updateServoPosition	;wreg free
 15355                           
 15356                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 15357  001EA0  0E1F               	movlw	31
 15358  001EA2  0100               	movlb	0	; () banked
 15359  001EA4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15360  001EA6  0E71               	movlw	113
 15361  001EA8  0100               	movlb	0	; () banked
 15362  001EAA  6FAB               	movwf	??_BothServos& (0+255),b
 15363  001EAC  0E1E               	movlw	30
 15364  001EAE                     u10587:
 15365  001EAE  2EE8               	decfsz	wreg,f,c
 15366  001EB0  D7FE               	bra	u10587
 15367  001EB2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15368  001EB4  D7FC               	bra	u10587
 15369  001EB6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15370  001EB8  D7FA               	bra	u10587
 15371  001EBA  F000               	nop	
 15372                           
 15373                           ;Test.c: 403: TMR1ON = 0;
 15374  001EBC  90CD               	bcf	4045,0,c	;volatile
 15375                           
 15376                           ;Test.c: 404: TMR3ON = 0;
 15377  001EBE  90B1               	bcf	4017,0,c	;volatile
 15378                           
 15379                           ;Test.c: 405: (INTCONbits.GIE = 0);
 15380  001EC0  9EF2               	bcf	intcon,7,c	;volatile
 15381                           
 15382                           ;Test.c: 406: machine_state = Testing_state;
 15383  001EC2  0E03               	movlw	3
 15384  001EC4  0100               	movlb	0	; () banked
 15385  001EC6  6FFC               	movwf	_machine_state& (0+255),b
 15386                           
 15387                           ; BSR set to: 0
 15388  001EC8  0012               	return		;funcret
 15389  001ECA                     __end_of_BothServos:
 15390                           	opt stack 0
 15391                           tblptru	equ	0xFF8
 15392                           tblptrh	equ	0xFF7
 15393                           tblptrl	equ	0xFF6
 15394                           tablat	equ	0xFF5
 15395                           prodh	equ	0xFF4
 15396                           prodl	equ	0xFF3
 15397                           intcon	equ	0xFF2
 15398                           intcon2	equ	0xFF1
 15399                           intcon3	equ	0xFF0
 15400                           postinc0	equ	0xFEE
 15401                           wreg	equ	0xFE8
 15402                           postdec1	equ	0xFE5
 15403                           fsr1l	equ	0xFE1
 15404                           indf2	equ	0xFDF
 15405                           postinc2	equ	0xFDE
 15406                           postdec2	equ	0xFDD
 15407                           fsr2h	equ	0xFDA
 15408                           fsr2l	equ	0xFD9
 15409                           status	equ	0xFD8
 15410                           
 15411 ;; *************** function _initServos *****************
 15412 ;; Defined at:
 15413 ;;		line 436 in file "sort.c"
 15414 ;; Parameters:    Size  Location     Type
 15415 ;;		None
 15416 ;; Auto vars:     Size  Location     Type
 15417 ;;		None
 15418 ;; Return value:  Size  Location     Type
 15419 ;;                  1    wreg      void 
 15420 ;; Registers used:
 15421 ;;		wreg, status,2, status,0, cstack
 15422 ;; Tracked objects:
 15423 ;;		On entry : 0/0
 15424 ;;		On exit  : 0/0
 15425 ;;		Unchanged: 0/0
 15426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15430 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15431 ;;Total ram usage:        1 bytes
 15432 ;; Hardware stack levels used:    1
 15433 ;; Hardware stack levels required when called:    8
 15434 ;; This function calls:
 15435 ;;		_updateServoPosition
 15436 ;; This function is called by:
 15437 ;;		_Loading
 15438 ;;		_BothServos
 15439 ;; This function uses a non-reentrant model
 15440 ;;
 15441                           
 15442                           	psect	text48
 15443  004964                     __ptext48:
 15444                           	opt stack 0
 15445  004964                     _initServos:
 15446                           	opt stack 20
 15447                           
 15448                           ;sort.c: 438: updateServoPosition(1200, 1);
 15449                           
 15450                           ; BSR set to: 0
 15451                           ;incstack = 0
 15452  004964  0E04               	movlw	4
 15453  004966  0100               	movlb	0	; () banked
 15454  004968  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15455  00496A  0EB0               	movlw	176
 15456  00496C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15457  00496E  0E00               	movlw	0
 15458  004970  0100               	movlb	0	; () banked
 15459  004972  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15460  004974  0E01               	movlw	1
 15461  004976  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15462  004978  EC2D  F024         	call	_updateServoPosition	;wreg free
 15463                           
 15464                           ;sort.c: 439: updateServoPosition(1050, 3);
 15465  00497C  0E04               	movlw	4
 15466  00497E  0100               	movlb	0	; () banked
 15467  004980  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15468  004982  0E1A               	movlw	26
 15469  004984  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15470  004986  0E00               	movlw	0
 15471  004988  0100               	movlb	0	; () banked
 15472  00498A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15473  00498C  0E03               	movlw	3
 15474  00498E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15475  004990  EC2D  F024         	call	_updateServoPosition	;wreg free
 15476                           
 15477                           ;sort.c: 440: TMR1ON = 1;
 15478  004994  80CD               	bsf	4045,0,c	;volatile
 15479                           
 15480                           ;sort.c: 441: was_low_1 = 0;
 15481  004996  0E00               	movlw	0
 15482  004998  6E78               	movwf	_was_low_1+1,c	;volatile
 15483  00499A  0E00               	movlw	0
 15484  00499C  6E77               	movwf	_was_low_1,c	;volatile
 15485                           
 15486                           ;sort.c: 443: _delay((unsigned long)((5)*(32000000/4000.0)));
 15487  00499E  0E34               	movlw	52
 15488  0049A0  0100               	movlb	0	; () banked
 15489  0049A2  6F88               	movwf	??_initServos& (0+255),b
 15490  0049A4  0EF1               	movlw	241
 15491  0049A6                     u10597:
 15492  0049A6  2EE8               	decfsz	wreg,f,c
 15493  0049A8  D7FE               	bra	u10597
 15494  0049AA  2F88               	decfsz	??_initServos& (0+255),f,b
 15495  0049AC  D7FC               	bra	u10597
 15496  0049AE  D000               	nop2	
 15497                           
 15498                           ;sort.c: 445: TMR3ON = 1;
 15499  0049B0  80B1               	bsf	4017,0,c	;volatile
 15500                           
 15501                           ;sort.c: 446: was_low_3 = 0;
 15502  0049B2  0E00               	movlw	0
 15503  0049B4  6E7C               	movwf	_was_low_3+1,c	;volatile
 15504  0049B6  0E00               	movlw	0
 15505  0049B8  6E7B               	movwf	_was_low_3,c	;volatile
 15506                           
 15507                           ;sort.c: 449: _delay((unsigned long)((1)*(32000000/4000.0)));
 15508  0049BA  0E0B               	movlw	11
 15509  0049BC  0100               	movlb	0	; () banked
 15510  0049BE  6F88               	movwf	??_initServos& (0+255),b
 15511  0049C0  0E62               	movlw	98
 15512  0049C2                     u10607:
 15513  0049C2  2EE8               	decfsz	wreg,f,c
 15514  0049C4  D7FE               	bra	u10607
 15515  0049C6  2F88               	decfsz	??_initServos& (0+255),f,b
 15516  0049C8  D7FC               	bra	u10607
 15517  0049CA  F000               	nop	
 15518                           
 15519                           ;sort.c: 450: LATBbits.LATB3 = 0;
 15520  0049CC  968A               	bcf	3978,3,c	;volatile
 15521                           
 15522                           ;sort.c: 451: TMR2ON = 1;
 15523  0049CE  84CA               	bsf	4042,2,c	;volatile
 15524                           
 15525                           ;sort.c: 452: was_low_2 = 0;
 15526  0049D0  0E00               	movlw	0
 15527  0049D2  6E7A               	movwf	_was_low_2+1,c	;volatile
 15528  0049D4  0E00               	movlw	0
 15529  0049D6  6E79               	movwf	_was_low_2,c	;volatile
 15530                           
 15531                           ;sort.c: 454: LATCbits.LATC0 = 1;
 15532  0049D8  808B               	bsf	3979,0,c	;volatile
 15533  0049DA  0012               	return		;funcret
 15534  0049DC                     __end_of_initServos:
 15535                           	opt stack 0
 15536                           tblptru	equ	0xFF8
 15537                           tblptrh	equ	0xFF7
 15538                           tblptrl	equ	0xFF6
 15539                           tablat	equ	0xFF5
 15540                           prodh	equ	0xFF4
 15541                           prodl	equ	0xFF3
 15542                           intcon	equ	0xFF2
 15543                           intcon2	equ	0xFF1
 15544                           intcon3	equ	0xFF0
 15545                           postinc0	equ	0xFEE
 15546                           wreg	equ	0xFE8
 15547                           postdec1	equ	0xFE5
 15548                           fsr1l	equ	0xFE1
 15549                           indf2	equ	0xFDF
 15550                           postinc2	equ	0xFDE
 15551                           postdec2	equ	0xFDD
 15552                           fsr2h	equ	0xFDA
 15553                           fsr2l	equ	0xFD9
 15554                           status	equ	0xFD8
 15555                           
 15556 ;; *************** function _updateServoPosition *****************
 15557 ;; Defined at:
 15558 ;;		line 522 in file "sort.c"
 15559 ;; Parameters:    Size  Location     Type
 15560 ;;  time_us         2    0[BANK0 ] int 
 15561 ;;  timer           2    2[BANK0 ] int 
 15562 ;; Auto vars:     Size  Location     Type
 15563 ;;  my_time         2    6[BANK0 ] unsigned int 
 15564 ;; Return value:  Size  Location     Type
 15565 ;;                  1    wreg      void 
 15566 ;; Registers used:
 15567 ;;		wreg, status,2, status,0
 15568 ;; Tracked objects:
 15569 ;;		On entry : 0/0
 15570 ;;		On exit  : 0/0
 15571 ;;		Unchanged: 0/0
 15572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15573 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15574 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15575 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15576 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15577 ;;Total ram usage:        8 bytes
 15578 ;; Hardware stack levels used:    1
 15579 ;; Hardware stack levels required when called:    7
 15580 ;; This function calls:
 15581 ;;		Nothing
 15582 ;; This function is called by:
 15583 ;;		_Distribution
 15584 ;;		_initServos
 15585 ;;		_actuatorTest
 15586 ;;		_BothServos
 15587 ;; This function uses a non-reentrant model
 15588 ;;
 15589                           
 15590                           	psect	text49
 15591  00485A                     __ptext49:
 15592                           	opt stack 0
 15593  00485A                     _updateServoPosition:
 15594                           	opt stack 20
 15595                           
 15596                           ;sort.c: 523: unsigned int my_time = 65535 - time_us;
 15597                           
 15598                           ;incstack = 0
 15599  00485A  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15600  00485E  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15601  004862  0100               	movlb	0	; () banked
 15602  004864  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15603  004866  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15604  004868  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15605  00486A  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15606  00486C  0EFF               	movlw	255
 15607  00486E  0100               	movlb	0	; () banked
 15608  004870  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15609  004872  0100               	movlb	0	; () banked
 15610  004874  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15611  004876  0EFF               	movlw	255
 15612  004878  0100               	movlb	0	; () banked
 15613  00487A  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15614  00487C  0100               	movlb	0	; () banked
 15615  00487E  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15616                           
 15617                           ;sort.c: 524: switch(timer){
 15618  004880  D01D               	goto	l6624
 15619  004882                     l6618:
 15620                           
 15621                           ; BSR set to: 0
 15622                           ;sort.c: 526: servoTimes[0] = my_time >> 8;
 15623  004882  0100               	movlb	0	; () banked
 15624  004884  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15625  004886  0100               	movlb	0	; () banked
 15626  004888  6FDA               	movwf	_servoTimes& (0+255),b
 15627  00488A  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15628                           
 15629                           ;sort.c: 527: servoTimes[1] = my_time & 0xFF;
 15630  00488C  0100               	movlb	0	; () banked
 15631  00488E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15632  004890  0100               	movlb	0	; () banked
 15633  004892  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15634  004894  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;sort.c: 529: pan_servo_state = time_us;
 15638  004896  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15639  00489A  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15640  00489E                     l890:
 15641                           
 15642                           ; BSR set to: 0
 15643                           ;sort.c: 531: servoTimes[2] = my_time >> 8;
 15644  00489E  0100               	movlb	0	; () banked
 15645  0048A0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15646  0048A2  0100               	movlb	0	; () banked
 15647  0048A4  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15648  0048A6  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15649                           
 15650                           ;sort.c: 532: servoTimes[3] = my_time & 0xFF;
 15651  0048A8  0100               	movlb	0	; () banked
 15652  0048AA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15653  0048AC  0100               	movlb	0	; () banked
 15654  0048AE  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15655  0048B0  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15656                           
 15657                           ; BSR set to: 0
 15658                           ;sort.c: 534: tilt_servo_state = time_us;
 15659  0048B2  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15660  0048B6  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15661                           
 15662                           ;sort.c: 535: }
 15663  0048BA  0012               	return	
 15664  0048BC                     l6624:
 15665                           
 15666                           ; BSR set to: 0
 15667  0048BC  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15668  0048C0  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15669                           
 15670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15671                           ; Switch size 1, requested type "space"
 15672                           ; Number of cases is 1, Range of values is 0 to 0
 15673                           ; switch strategies available:
 15674                           ; Name         Instructions Cycles
 15675                           ; simple_byte            4     3 (average)
 15676                           ;	Chosen strategy is simple_byte
 15677  0048C4  0100               	movlb	0	; () banked
 15678  0048C6  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15679  0048C8  0A00               	xorlw	0	; case 0
 15680  0048CA  A4D8               	btfss	status,2,c
 15681  0048CC  0012               	return	
 15682                           
 15683                           ; BSR set to: 0
 15684                           ; Switch size 1, requested type "space"
 15685                           ; Number of cases is 2, Range of values is 1 to 3
 15686                           ; switch strategies available:
 15687                           ; Name         Instructions Cycles
 15688                           ; simple_byte            7     4 (average)
 15689                           ;	Chosen strategy is simple_byte
 15690  0048CE  0100               	movlb	0	; () banked
 15691  0048D0  5184               	movf	??_updateServoPosition& (0+255),w,b
 15692  0048D2  0A01               	xorlw	1	; case 1
 15693  0048D4  B4D8               	btfsc	status,2,c
 15694  0048D6  D7D5               	goto	l6618
 15695  0048D8  0A02               	xorlw	2	; case 3
 15696  0048DA  A4D8               	btfss	status,2,c
 15697  0048DC  0012               	return	
 15698  0048DE  D7DF               	goto	l890
 15699  0048E0                     __end_of_updateServoPosition:
 15700                           	opt stack 0
 15701                           tblptru	equ	0xFF8
 15702                           tblptrh	equ	0xFF7
 15703                           tblptrl	equ	0xFF6
 15704                           tablat	equ	0xFF5
 15705                           prodh	equ	0xFF4
 15706                           prodl	equ	0xFF3
 15707                           intcon	equ	0xFF2
 15708                           intcon2	equ	0xFF1
 15709                           intcon3	equ	0xFF0
 15710                           postinc0	equ	0xFEE
 15711                           wreg	equ	0xFE8
 15712                           postdec1	equ	0xFE5
 15713                           fsr1l	equ	0xFE1
 15714                           indf2	equ	0xFDF
 15715                           postinc2	equ	0xFDE
 15716                           postdec2	equ	0xFDD
 15717                           fsr2h	equ	0xFDA
 15718                           fsr2l	equ	0xFD9
 15719                           status	equ	0xFD8
 15720                           
 15721 ;; *************** function _BlockerTest *****************
 15722 ;; Defined at:
 15723 ;;		line 577 in file "Test.c"
 15724 ;; Parameters:    Size  Location     Type
 15725 ;;		None
 15726 ;; Auto vars:     Size  Location     Type
 15727 ;;  i               2   44[BANK0 ] int 
 15728 ;;  cond_flag       2   48[BANK0 ] int 
 15729 ;;  cam_flag        2   46[BANK0 ] int 
 15730 ;; Return value:  Size  Location     Type
 15731 ;;                  1    wreg      void 
 15732 ;; Registers used:
 15733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15734 ;; Tracked objects:
 15735 ;;		On entry : 0/0
 15736 ;;		On exit  : 0/0
 15737 ;;		Unchanged: 0/0
 15738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15740 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15742 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15743 ;;Total ram usage:        7 bytes
 15744 ;; Hardware stack levels used:    1
 15745 ;; Hardware stack levels required when called:   10
 15746 ;; This function calls:
 15747 ;;		_lcdInst
 15748 ;;		_printf
 15749 ;; This function is called by:
 15750 ;;		_Test
 15751 ;; This function uses a non-reentrant model
 15752 ;;
 15753                           
 15754                           	psect	text50
 15755  003A74                     __ptext50:
 15756                           	opt stack 0
 15757  003A74                     _BlockerTest:
 15758                           	opt stack 19
 15759                           
 15760                           ;Test.c: 578: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15761                           
 15762                           ; BSR set to: 0
 15763                           ;incstack = 0
 15764  003A74  0E01               	movlw	1
 15765  003A76  ECFD  F02A         	call	_lcdInst
 15766  003A7A  0E68               	movlw	104
 15767  003A7C  0100               	movlb	0	; () banked
 15768  003A7E  6FAB               	movwf	??_BlockerTest& (0+255),b
 15769  003A80  0EE4               	movlw	228
 15770  003A82                     u10617:
 15771  003A82  2EE8               	decfsz	wreg,f,c
 15772  003A84  D7FE               	bra	u10617
 15773  003A86  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15774  003A88  D7FC               	bra	u10617
 15775  003A8A  F000               	nop	
 15776  003A8C  0E80               	movlw	128
 15777  003A8E  ECFD  F02A         	call	_lcdInst
 15778                           
 15779                           ;Test.c: 579: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15780  003A92  0E45               	movlw	low STR_120
 15781  003A94  0100               	movlb	0	; () banked
 15782  003A96  6F8E               	movwf	printf@f& (0+255),b
 15783  003A98  0EFB               	movlw	high STR_120
 15784  003A9A  0100               	movlb	0	; () banked
 15785  003A9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15786  003A9E  A480               	btfss	3968,2,c	;volatile
 15787  003AA0  D004               	goto	u7480
 15788  003AA2  0100               	movlb	0	; () banked
 15789  003AA4  6BAB               	clrf	??_BlockerTest& (0+255),b
 15790  003AA6  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15791  003AA8  D002               	goto	u7488
 15792  003AAA                     u7480:
 15793  003AAA  0100               	movlb	0	; () banked
 15794  003AAC  6BAB               	clrf	??_BlockerTest& (0+255),b
 15795  003AAE                     u7488:
 15796  003AAE  0100               	movlb	0	; () banked
 15797  003AB0  51AB               	movf	??_BlockerTest& (0+255),w,b
 15798  003AB2  0100               	movlb	0	; () banked
 15799  003AB4  6F90               	movwf	(?_printf+2)& (0+255),b
 15800  003AB6  6B91               	clrf	(?_printf+3)& (0+255),b
 15801  003AB8  EC84  F00B         	call	_printf	;wreg free
 15802                           
 15803                           ;Test.c: 580: lcdInst(0b11000000);;
 15804  003ABC  0EC0               	movlw	192
 15805  003ABE  ECFD  F02A         	call	_lcdInst
 15806                           
 15807                           ;Test.c: 581: printf("OTHER: CAM TOGGLE");
 15808  003AC2  0E21               	movlw	low STR_121
 15809  003AC4  0100               	movlb	0	; () banked
 15810  003AC6  6F8E               	movwf	printf@f& (0+255),b
 15811  003AC8  0EFB               	movlw	high STR_121
 15812  003ACA  0100               	movlb	0	; () banked
 15813  003ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15814  003ACE  EC84  F00B         	call	_printf	;wreg free
 15815                           
 15816                           ;Test.c: 582: int cam_flag = 1;
 15817  003AD2  0E00               	movlw	0
 15818  003AD4  0100               	movlb	0	; () banked
 15819  003AD6  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15820  003AD8  0E01               	movlw	1
 15821  003ADA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15822                           
 15823                           ; BSR set to: 0
 15824                           ;Test.c: 583: int cond_flag = 0;
 15825  003ADC  0E00               	movlw	0
 15826  003ADE  0100               	movlb	0	; () banked
 15827  003AE0  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15828  003AE2  0E00               	movlw	0
 15829  003AE4  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;Test.c: 585: while(PORTBbits.RB1 == 0){
 15833                           
 15834                           ;Test.c: 584: while(1){
 15835  003AE6  D018               	goto	l8644
 15836  003AE8                     l8640:
 15837                           
 15838                           ;Test.c: 586: lcdInst(0b10000000);;
 15839  003AE8  0E80               	movlw	128
 15840  003AEA  ECFD  F02A         	call	_lcdInst
 15841                           
 15842                           ;Test.c: 587: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15843  003AEE  0E45               	movlw	low STR_120
 15844  003AF0  0100               	movlb	0	; () banked
 15845  003AF2  6F8E               	movwf	printf@f& (0+255),b
 15846  003AF4  0EFB               	movlw	high STR_120
 15847  003AF6  0100               	movlb	0	; () banked
 15848  003AF8  6F8F               	movwf	(printf@f+1)& (0+255),b
 15849  003AFA  A480               	btfss	3968,2,c	;volatile
 15850  003AFC  D004               	goto	u7490
 15851  003AFE  0100               	movlb	0	; () banked
 15852  003B00  6BAB               	clrf	??_BlockerTest& (0+255),b
 15853  003B02  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15854  003B04  D002               	goto	u7498
 15855  003B06                     u7490:
 15856  003B06  0100               	movlb	0	; () banked
 15857  003B08  6BAB               	clrf	??_BlockerTest& (0+255),b
 15858  003B0A                     u7498:
 15859  003B0A  0100               	movlb	0	; () banked
 15860  003B0C  51AB               	movf	??_BlockerTest& (0+255),w,b
 15861  003B0E  0100               	movlb	0	; () banked
 15862  003B10  6F90               	movwf	(?_printf+2)& (0+255),b
 15863  003B12  6B91               	clrf	(?_printf+3)& (0+255),b
 15864  003B14  EC84  F00B         	call	_printf	;wreg free
 15865  003B18                     l8644:
 15866  003B18  A281               	btfss	3969,1,c	;volatile
 15867  003B1A  D7E6               	goto	l8640
 15868                           
 15869                           ;Test.c: 588: }
 15870                           ;Test.c: 589: if(PORTB >> 4 == 0b1111){
 15871  003B1C  3881               	swapf	3969,w,c	;volatile
 15872  003B1E  0B0F               	andlw	15
 15873  003B20  0A0F               	xorlw	15
 15874  003B22  B4D8               	btfsc	status,2,c
 15875  003B24  0012               	return	
 15876                           
 15877                           ;Test.c: 592: else if(PORTB >> 4 == 0b0001){
 15878                           
 15879                           ;Test.c: 591: }
 15880                           
 15881                           ;Test.c: 590: break;
 15882  003B26  3881               	swapf	3969,w,c	;volatile
 15883  003B28  0B0F               	andlw	15
 15884  003B2A  06E8               	decf	wreg,f,c
 15885  003B2C  A4D8               	btfss	status,2,c
 15886  003B2E  D016               	goto	l8662
 15887                           
 15888                           ;Test.c: 593: if(cond_flag){
 15889  003B30  0100               	movlb	0	; () banked
 15890  003B32  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15891  003B34  0100               	movlb	0	; () banked
 15892  003B36  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15893  003B38  B4D8               	btfsc	status,2,c
 15894  003B3A  D007               	goto	l1409
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;Test.c: 594: LATAbits.LATA3 = 1;
 15898  003B3C  8689               	bsf	3977,3,c	;volatile
 15899  003B3E  D006               	goto	l8660
 15900  003B40                     u7541:
 15901  003B40  0E01               	movlw	1
 15902  003B42                     u7550:
 15903  003B42  0100               	movlb	0	; () banked
 15904  003B44  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15905  003B46  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15906                           
 15907                           ;Test.c: 596: }
 15908  003B48  D054               	goto	l8686
 15909  003B4A                     l1409:
 15910                           
 15911                           ; BSR set to: 0
 15912                           ;Test.c: 597: else{
 15913                           ;Test.c: 598: LATAbits.LATA3 = 0;
 15914  003B4A  9689               	bcf	3977,3,c	;volatile
 15915  003B4C                     l8660:
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;Test.c: 599: cond_flag = !cond_flag;
 15919  003B4C  0100               	movlb	0	; () banked
 15920  003B4E  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15921  003B50  0100               	movlb	0	; () banked
 15922  003B52  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15923  003B54  B4D8               	btfsc	status,2,c
 15924  003B56  D7F4               	goto	u7541
 15925  003B58  0E00               	movlw	0
 15926  003B5A  D7F3               	goto	u7550
 15927  003B5C                     l8662:
 15928                           
 15929                           ;Test.c: 602: else{
 15930                           ;Test.c: 603: if(cam_flag){
 15931  003B5C  0100               	movlb	0	; () banked
 15932  003B5E  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15933  003B60  0100               	movlb	0	; () banked
 15934  003B62  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15935  003B64  B4D8               	btfsc	status,2,c
 15936  003B66  D007               	goto	l8668
 15937                           
 15938                           ; BSR set to: 0
 15939                           ;Test.c: 604: LATCbits.LATC0 = 1;
 15940  003B68  808B               	bsf	3979,0,c	;volatile
 15941  003B6A  D023               	goto	l8680
 15942  003B6C                     u7591:
 15943  003B6C  0E01               	movlw	1
 15944  003B6E                     u7600:
 15945  003B6E  0100               	movlb	0	; () banked
 15946  003B70  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15947  003B72  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15948                           
 15949                           ;Test.c: 606: }
 15950  003B74  D03E               	goto	l8686
 15951  003B76                     l8668:
 15952                           
 15953                           ; BSR set to: 0
 15954                           ;Test.c: 607: else{
 15955                           ;Test.c: 608: for(int i=0;i<5000;i++)
 15956  003B76  0E00               	movlw	0
 15957  003B78  0100               	movlb	0	; () banked
 15958  003B7A  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15959  003B7C  0E00               	movlw	0
 15960  003B7E  6FAC               	movwf	BlockerTest@i& (0+255),b
 15961  003B80                     l8670:
 15962                           
 15963                           ; BSR set to: 0
 15964  003B80  0100               	movlb	0	; () banked
 15965  003B82  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15966  003B84  D008               	goto	l1414
 15967  003B86  0E88               	movlw	136
 15968  003B88  0100               	movlb	0	; () banked
 15969  003B8A  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15970  003B8C  0E13               	movlw	19
 15971  003B8E  0100               	movlb	0	; () banked
 15972  003B90  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15973  003B92  B0D8               	btfsc	status,0,c
 15974  003B94  D00D               	goto	l1415
 15975  003B96                     l1414:
 15976                           
 15977                           ; BSR set to: 0
 15978                           ;Test.c: 609: {
 15979                           ;Test.c: 610: LATCbits.LATC0 = 1;
 15980  003B96  808B               	bsf	3979,0,c	;volatile
 15981                           
 15982                           ; BSR set to: 0
 15983                           ;Test.c: 611: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15984  003B98  0E1A               	movlw	26
 15985  003B9A                     u10627:
 15986  003B9A  2EE8               	decfsz	wreg,f,c
 15987  003B9C  D7FE               	bra	u10627
 15988  003B9E  D000               	nop2	
 15989                           
 15990                           ;Test.c: 612: LATCbits.LATC0 = 0;
 15991  003BA0  908B               	bcf	3979,0,c	;volatile
 15992                           
 15993                           ;Test.c: 613: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15994  003BA2  0EF0               	movlw	240
 15995  003BA4                     u10637:
 15996  003BA4  2EE8               	decfsz	wreg,f,c
 15997  003BA6  D7FE               	bra	u10637
 15998  003BA8  0100               	movlb	0	; () banked
 15999  003BAA  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 16000  003BAC  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 16001  003BAE  D7E8               	goto	l8670
 16002  003BB0                     l1415:
 16003                           
 16004                           ; BSR set to: 0
 16005                           ;Test.c: 614: }
 16006                           ;Test.c: 615: LATCbits.LATC0 = 0;
 16007  003BB0  908B               	bcf	3979,0,c	;volatile
 16008  003BB2                     l8680:
 16009                           
 16010                           ; BSR set to: 0
 16011                           ;Test.c: 616: cam_flag = !cam_flag;
 16012  003BB2  0100               	movlb	0	; () banked
 16013  003BB4  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 16014  003BB6  0100               	movlb	0	; () banked
 16015  003BB8  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16016  003BBA  B4D8               	btfsc	status,2,c
 16017  003BBC  D7D7               	goto	u7591
 16018  003BBE  0E00               	movlw	0
 16019  003BC0  D7D6               	goto	u7600
 16020  003BC2                     l8682:
 16021                           
 16022                           ;Test.c: 621: lcdInst(0b10000000);;
 16023  003BC2  0E80               	movlw	128
 16024  003BC4  ECFD  F02A         	call	_lcdInst
 16025                           
 16026                           ;Test.c: 622: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16027  003BC8  0E45               	movlw	low STR_120
 16028  003BCA  0100               	movlb	0	; () banked
 16029  003BCC  6F8E               	movwf	printf@f& (0+255),b
 16030  003BCE  0EFB               	movlw	high STR_120
 16031  003BD0  0100               	movlb	0	; () banked
 16032  003BD2  6F8F               	movwf	(printf@f+1)& (0+255),b
 16033  003BD4  A480               	btfss	3968,2,c	;volatile
 16034  003BD6  D004               	goto	u7650
 16035  003BD8  0100               	movlb	0	; () banked
 16036  003BDA  6BAB               	clrf	??_BlockerTest& (0+255),b
 16037  003BDC  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16038  003BDE  D002               	goto	u7658
 16039  003BE0                     u7650:
 16040  003BE0  0100               	movlb	0	; () banked
 16041  003BE2  6BAB               	clrf	??_BlockerTest& (0+255),b
 16042  003BE4                     u7658:
 16043  003BE4  0100               	movlb	0	; () banked
 16044  003BE6  51AB               	movf	??_BlockerTest& (0+255),w,b
 16045  003BE8  0100               	movlb	0	; () banked
 16046  003BEA  6F90               	movwf	(?_printf+2)& (0+255),b
 16047  003BEC  6B91               	clrf	(?_printf+3)& (0+255),b
 16048  003BEE  EC84  F00B         	call	_printf	;wreg free
 16049  003BF2                     l8686:
 16050  003BF2  A281               	btfss	3969,1,c	;volatile
 16051  003BF4  D791               	goto	l8644
 16052  003BF6  D7E5               	goto	l8682
 16053  003BF8                     __end_of_BlockerTest:
 16054                           	opt stack 0
 16055                           tblptru	equ	0xFF8
 16056                           tblptrh	equ	0xFF7
 16057                           tblptrl	equ	0xFF6
 16058                           tablat	equ	0xFF5
 16059                           prodh	equ	0xFF4
 16060                           prodl	equ	0xFF3
 16061                           intcon	equ	0xFF2
 16062                           intcon2	equ	0xFF1
 16063                           intcon3	equ	0xFF0
 16064                           postinc0	equ	0xFEE
 16065                           wreg	equ	0xFE8
 16066                           postdec1	equ	0xFE5
 16067                           fsr1l	equ	0xFE1
 16068                           indf2	equ	0xFDF
 16069                           postinc2	equ	0xFDE
 16070                           postdec2	equ	0xFDD
 16071                           fsr2h	equ	0xFDA
 16072                           fsr2l	equ	0xFD9
 16073                           status	equ	0xFD8
 16074                           
 16075 ;; *************** function _printf *****************
 16076 ;; Defined at:
 16077 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 16078 ;; Parameters:    Size  Location     Type
 16079 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 16080 ;;		 -> STR_127(18), STR_126(18), STR_125(17), STR_124(17), 
 16081 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 16082 ;;		 -> STR_119(18), STR_118(18), STR_117(17), STR_116(17), 
 16083 ;;		 -> STR_115(17), STR_114(17), STR_113(17), STR_112(17), 
 16084 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 16085 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 16086 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 16087 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 16088 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 16089 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 16090 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 16091 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 16092 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 16093 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 16094 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 16095 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 16096 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 16097 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 16098 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 16099 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 16100 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 16101 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 16102 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 16103 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 16104 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 16105 ;;		 -> STR_2(14), STR_1(18), 
 16106 ;; Auto vars:     Size  Location     Type
 16107 ;;  tmpval          4    0        struct .
 16108 ;;  width           2   41[BANK0 ] int 
 16109 ;;  val             2   37[BANK0 ] unsigned int 
 16110 ;;  len             2   35[BANK0 ] unsigned int 
 16111 ;;  ap              2   33[BANK0 ] PTR void [1]
 16112 ;;		 -> ?i2_printf(2), ?_printf(2), 
 16113 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 16114 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 16115 ;;  c               1   40[BANK0 ] char 
 16116 ;;  flag            1   39[BANK0 ] unsigned char 
 16117 ;;  prec            1   30[BANK0 ] char 
 16118 ;; Return value:  Size  Location     Type
 16119 ;;                  2   14[BANK0 ] int 
 16120 ;; Registers used:
 16121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16122 ;; Tracked objects:
 16123 ;;		On entry : 0/0
 16124 ;;		On exit  : 0/0
 16125 ;;		Unchanged: 0/0
 16126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16127 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16128 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16129 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16130 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16131 ;;Total ram usage:       29 bytes
 16132 ;; Hardware stack levels used:    1
 16133 ;; Hardware stack levels required when called:    9
 16134 ;; This function calls:
 16135 ;;		___lwdiv
 16136 ;;		___lwmod
 16137 ;;		___wmul
 16138 ;;		_isdigit
 16139 ;;		_putch
 16140 ;; This function is called by:
 16141 ;;		_UI
 16142 ;;		_change_state_to_menu_start
 16143 ;;		_change_state_to_menu_12
 16144 ;;		_change_state_to_menu_22
 16145 ;;		_printRTC
 16146 ;;		_EEPROM_write
 16147 ;;		_Test
 16148 ;;		_algorithmTest
 16149 ;;		_sensorTest
 16150 ;;		_actuatorTest
 16151 ;;		_BothServos
 16152 ;;		_PortTestDC
 16153 ;;		_PlatformTest
 16154 ;;		_SpeedTest
 16155 ;;		_BlockerTest
 16156 ;;		_arm
 16157 ;;		_PortTestPusher
 16158 ;;		_ToggleTestA5
 16159 ;; This function uses a non-reentrant model
 16160 ;;
 16161                           
 16162                           	psect	text51
 16163  001708                     __ptext51:
 16164                           	opt stack 0
 16165  001708                     _printf:
 16166                           	opt stack 18
 16167                           
 16168                           ;doprnt.c: 466: va_list ap;
 16169                           ;doprnt.c: 499: signed char c;
 16170                           ;doprnt.c: 501: int width;
 16171                           ;doprnt.c: 506: signed char prec;
 16172                           ;doprnt.c: 508: unsigned char flag;
 16173                           ;doprnt.c: 523: union {
 16174                           ;doprnt.c: 524: unsigned long vd;
 16175                           ;doprnt.c: 525: double integ;
 16176                           ;doprnt.c: 526: } tmpval;
 16177                           ;doprnt.c: 528: unsigned int val;
 16178                           ;doprnt.c: 529: unsigned len;
 16179                           ;doprnt.c: 530: const char * cp;
 16180                           ;doprnt.c: 533: *ap = __va_start();
 16181                           
 16182                           ;incstack = 0
 16183  001708  0E90               	movlw	low (?_printf+2)
 16184  00170A  0100               	movlb	0	; () banked
 16185  00170C  6FA1               	movwf	printf@ap& (0+255),b
 16186  00170E  0E00               	movlw	high (?_printf+2)
 16187  001710  0100               	movlb	0	; () banked
 16188  001712  6FA2               	movwf	(printf@ap+1)& (0+255),b
 16189                           
 16190                           ;doprnt.c: 536: while(c = *f++) {
 16191  001714  D205               	goto	l6578
 16192  001716                     l6448:
 16193                           
 16194                           ; BSR set to: 0
 16195                           ;doprnt.c: 538: if(c != '%')
 16196  001716  0E25               	movlw	37
 16197  001718  0100               	movlb	0	; () banked
 16198  00171A  19A8               	xorwf	printf@c& (0+255),w,b
 16199  00171C  B4D8               	btfsc	status,2,c
 16200  00171E  D005               	goto	l6452
 16201                           
 16202                           ; BSR set to: 0
 16203                           ;doprnt.c: 540: {
 16204                           ;doprnt.c: 541: (putch(c) );
 16205  001720  0100               	movlb	0	; () banked
 16206  001722  51A8               	movf	printf@c& (0+255),w,b
 16207  001724  ECF5  F02A         	call	_putch
 16208                           
 16209                           ;doprnt.c: 542: continue;
 16210  001728  D1FB               	goto	l6578
 16211  00172A                     l6452:
 16212                           
 16213                           ;doprnt.c: 543: }
 16214                           ;doprnt.c: 546: width = 0;
 16215  00172A  0E00               	movlw	0
 16216  00172C  0100               	movlb	0	; () banked
 16217  00172E  6FAA               	movwf	(printf@width+1)& (0+255),b
 16218  001730  0E00               	movlw	0
 16219  001732  6FA9               	movwf	printf@width& (0+255),b
 16220                           
 16221                           ;doprnt.c: 548: flag = 0;
 16222  001734  0E00               	movlw	0
 16223  001736  0100               	movlb	0	; () banked
 16224  001738  6FA7               	movwf	printf@flag& (0+255),b
 16225                           
 16226                           ; BSR set to: 0
 16227                           ;doprnt.c: 551: switch(*f) {
 16228                           
 16229                           ;doprnt.c: 550: for(;;) {
 16230  00173A  D005               	goto	l6458
 16231  00173C                     l6454:
 16232                           
 16233                           ;doprnt.c: 580: flag |= 0x04;
 16234  00173C  0100               	movlb	0	; () banked
 16235  00173E  85A7               	bsf	printf@flag& (0+255),2,b
 16236                           
 16237                           ;doprnt.c: 581: f++;
 16238  001740  0100               	movlb	0	; () banked
 16239  001742  4B8E               	infsnz	printf@f& (0+255),f,b
 16240  001744  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16241  001746                     l6458:
 16242  001746  C08E  FFF6         	movff	printf@f,tblptrl
 16243  00174A  C08F  FFF7         	movff	printf@f+1,tblptrh
 16244  00174E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16245  00174E  6AF8               	clrf	tblptru,c
 16246  001750                     	endif
 16247  001750                     	if	0	;tblptru may be non-zero
 16248  001750                     	endif
 16249  001750  0008               	tblrd		*
 16250  001752  50F5               	movf	tablat,w,c
 16251                           
 16252                           ; Switch size 1, requested type "space"
 16253                           ; Number of cases is 1, Range of values is 48 to 48
 16254                           ; switch strategies available:
 16255                           ; Name         Instructions Cycles
 16256                           ; simple_byte            4     3 (average)
 16257                           ;	Chosen strategy is simple_byte
 16258  001754  0A30               	xorlw	48	; case 48
 16259  001756  B4D8               	btfsc	status,2,c
 16260  001758  D7F1               	goto	l6454
 16261                           
 16262                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 16263                           
 16264                           ;doprnt.c: 586: }
 16265                           
 16266                           ;doprnt.c: 585: break;
 16267  00175A  C08E  FFF6         	movff	printf@f,tblptrl
 16268  00175E  C08F  FFF7         	movff	printf@f+1,tblptrh
 16269  001762                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16270  001762  6AF8               	clrf	tblptru,c
 16271  001764                     	endif
 16272  001764                     	if	0	;tblptru may be non-zero
 16273  001764                     	endif
 16274  001764  0008               	tblrd		*
 16275  001766  50F5               	movf	tablat,w,c
 16276  001768  EC09  F02A         	call	_isdigit
 16277  00176C  A0D8               	btfss	status,0,c
 16278  00176E  D0D2               	goto	l6506
 16279                           
 16280                           ;doprnt.c: 598: width = 0;
 16281  001770  0E00               	movlw	0
 16282  001772  0100               	movlb	0	; () banked
 16283  001774  6FAA               	movwf	(printf@width+1)& (0+255),b
 16284  001776  0E00               	movlw	0
 16285  001778  6FA9               	movwf	printf@width& (0+255),b
 16286  00177A                     l6464:
 16287                           
 16288                           ;doprnt.c: 600: width *= 10;
 16289  00177A  C0A9  F080         	movff	printf@width,___wmul@multiplier
 16290  00177E  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 16291  001782  0E00               	movlw	0
 16292  001784  0100               	movlb	0	; () banked
 16293  001786  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16294  001788  0E0A               	movlw	10
 16295  00178A  6F82               	movwf	___wmul@multiplicand& (0+255),b
 16296  00178C  EC72  F028         	call	___wmul	;wreg free
 16297  001790  C080  F0A9         	movff	?___wmul,printf@width
 16298  001794  C081  F0AA         	movff	?___wmul+1,printf@width+1
 16299                           
 16300                           ;doprnt.c: 601: width += *f++ - '0';
 16301  001798  0ED0               	movlw	208
 16302  00179A  0100               	movlb	0	; () banked
 16303  00179C  6F9A               	movwf	??_printf& (0+255),b
 16304  00179E  0EFF               	movlw	255
 16305  0017A0  0100               	movlb	0	; () banked
 16306  0017A2  6F9B               	movwf	(??_printf+1)& (0+255),b
 16307  0017A4  C08E  FFF6         	movff	printf@f,tblptrl
 16308  0017A8  C08F  FFF7         	movff	printf@f+1,tblptrh
 16309  0017AC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16310  0017AC  6AF8               	clrf	tblptru,c
 16311  0017AE                     	endif
 16312  0017AE                     	if	0	;tblptru may be non-zero
 16313  0017AE                     	endif
 16314  0017AE  0008               	tblrd		*
 16315  0017B0  50F5               	movf	tablat,w,c
 16316  0017B2  0100               	movlb	0	; () banked
 16317  0017B4  6F9C               	movwf	(??_printf+2)& (0+255),b
 16318  0017B6  6B9D               	clrf	(??_printf+3)& (0+255),b
 16319  0017B8  0100               	movlb	0	; () banked
 16320  0017BA  519A               	movf	??_printf& (0+255),w,b
 16321  0017BC  0100               	movlb	0	; () banked
 16322  0017BE  279C               	addwf	(??_printf+2)& (0+255),f,b
 16323  0017C0  0100               	movlb	0	; () banked
 16324  0017C2  519B               	movf	(??_printf+1)& (0+255),w,b
 16325  0017C4  0100               	movlb	0	; () banked
 16326  0017C6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 16327  0017C8  0100               	movlb	0	; () banked
 16328  0017CA  519C               	movf	(??_printf+2)& (0+255),w,b
 16329  0017CC  0100               	movlb	0	; () banked
 16330  0017CE  27A9               	addwf	printf@width& (0+255),f,b
 16331  0017D0  0100               	movlb	0	; () banked
 16332  0017D2  519D               	movf	(??_printf+3)& (0+255),w,b
 16333  0017D4  0100               	movlb	0	; () banked
 16334  0017D6  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 16335                           
 16336                           ; BSR set to: 0
 16337  0017D8  0100               	movlb	0	; () banked
 16338  0017DA  4B8E               	infsnz	printf@f& (0+255),f,b
 16339  0017DC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16340                           
 16341                           ; BSR set to: 0
 16342                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 16343  0017DE  C08E  FFF6         	movff	printf@f,tblptrl
 16344  0017E2  C08F  FFF7         	movff	printf@f+1,tblptrh
 16345  0017E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16346  0017E6  6AF8               	clrf	tblptru,c
 16347  0017E8                     	endif
 16348  0017E8                     	if	0	;tblptru may be non-zero
 16349  0017E8                     	endif
 16350  0017E8  0008               	tblrd		*
 16351  0017EA  50F5               	movf	tablat,w,c
 16352  0017EC  EC09  F02A         	call	_isdigit
 16353  0017F0  A0D8               	btfss	status,0,c
 16354  0017F2  D090               	goto	l6506
 16355  0017F4  D7C2               	goto	l6464
 16356  0017F6                     l6472:
 16357                           
 16358                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 16359  0017F6  C0A1  FFD9         	movff	printf@ap,fsr2l
 16360  0017FA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16361  0017FE  CFDE F09F          	movff	postinc2,printf@cp
 16362  001802  CFDD F0A0          	movff	postdec2,printf@cp+1
 16363  001806  0E02               	movlw	2
 16364  001808  0100               	movlb	0	; () banked
 16365  00180A  27A1               	addwf	printf@ap& (0+255),f,b
 16366  00180C  0E00               	movlw	0
 16367  00180E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;doprnt.c: 740: if(!cp)
 16371  001810  0100               	movlb	0	; () banked
 16372  001812  519F               	movf	printf@cp& (0+255),w,b
 16373  001814  0100               	movlb	0	; () banked
 16374  001816  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 16375  001818  A4D8               	btfss	status,2,c
 16376  00181A  D006               	goto	l6480
 16377                           
 16378                           ; BSR set to: 0
 16379                           ;doprnt.c: 741: cp = "(null)";
 16380  00181C  0EB5               	movlw	low STR_128
 16381  00181E  0100               	movlb	0	; () banked
 16382  001820  6F9F               	movwf	printf@cp& (0+255),b
 16383  001822  0EFF               	movlw	high STR_128
 16384  001824  0100               	movlb	0	; () banked
 16385  001826  6FA0               	movwf	(printf@cp+1)& (0+255),b
 16386  001828                     l6480:
 16387                           
 16388                           ; BSR set to: 0
 16389                           ;doprnt.c: 745: len = 0;
 16390  001828  0E00               	movlw	0
 16391  00182A  0100               	movlb	0	; () banked
 16392  00182C  6FA4               	movwf	(printf@len+1)& (0+255),b
 16393  00182E  0E00               	movlw	0
 16394  001830  6FA3               	movwf	printf@len& (0+255),b
 16395                           
 16396                           ;doprnt.c: 746: while(cp[len])
 16397  001832  D003               	goto	l6484
 16398  001834                     l6482:
 16399                           
 16400                           ;doprnt.c: 747: len++;
 16401  001834  0100               	movlb	0	; () banked
 16402  001836  4BA3               	infsnz	printf@len& (0+255),f,b
 16403  001838  2BA4               	incf	(printf@len+1)& (0+255),f,b
 16404  00183A                     l6484:
 16405                           
 16406                           ; BSR set to: 0
 16407  00183A  0100               	movlb	0	; () banked
 16408  00183C  51A3               	movf	printf@len& (0+255),w,b
 16409  00183E  0100               	movlb	0	; () banked
 16410  001840  259F               	addwf	printf@cp& (0+255),w,b
 16411  001842  0100               	movlb	0	; () banked
 16412  001844  6F9A               	movwf	??_printf& (0+255),b
 16413  001846  0100               	movlb	0	; () banked
 16414  001848  51A4               	movf	(printf@len+1)& (0+255),w,b
 16415  00184A  0100               	movlb	0	; () banked
 16416  00184C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 16417  00184E  0100               	movlb	0	; () banked
 16418  001850  6F9B               	movwf	(??_printf+1)& (0+255),b
 16419  001852  C09A  FFF6         	movff	??_printf,tblptrl
 16420  001856  C09B  FFF7         	movff	??_printf+1,tblptrh
 16421  00185A  0E00               	movlw	low (__mediumconst shr (0+16))
 16422  00185C  6EF8               	movwf	tblptru,c
 16423  00185E  0E0F               	movlw	(high __ramtop+-1)
 16424  001860  64F7               	cpfsgt	tblptrh,c
 16425  001862  D003               	bra	u4897
 16426  001864  0008               	tblrd		*
 16427  001866  50F5               	movf	tablat,w,c
 16428  001868  D005               	bra	u4890
 16429  00186A                     u4897:
 16430  00186A  CFF6 FFE9          	movff	tblptrl,fsr0l
 16431  00186E  CFF7 FFEA          	movff	tblptrh,fsr0h
 16432  001872  50EF               	movf	indf0,w,c
 16433  001874                     u4890:
 16434  001874  0900               	iorlw	0
 16435  001876  A4D8               	btfss	status,2,c
 16436  001878  D7DD               	goto	l6482
 16437                           
 16438                           ;doprnt.c: 757: if(width > len)
 16439  00187A  0100               	movlb	0	; () banked
 16440  00187C  51A9               	movf	printf@width& (0+255),w,b
 16441  00187E  0100               	movlb	0	; () banked
 16442  001880  5DA3               	subwf	printf@len& (0+255),w,b
 16443  001882  0100               	movlb	0	; () banked
 16444  001884  51AA               	movf	(printf@width+1)& (0+255),w,b
 16445  001886  0100               	movlb	0	; () banked
 16446  001888  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 16447  00188A  B0D8               	btfsc	status,0,c
 16448  00188C  D009               	goto	l6490
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;doprnt.c: 758: width -= len;
 16452  00188E  0100               	movlb	0	; () banked
 16453  001890  51A3               	movf	printf@len& (0+255),w,b
 16454  001892  0100               	movlb	0	; () banked
 16455  001894  5FA9               	subwf	printf@width& (0+255),f,b
 16456  001896  0100               	movlb	0	; () banked
 16457  001898  51A4               	movf	(printf@len+1)& (0+255),w,b
 16458  00189A  0100               	movlb	0	; () banked
 16459  00189C  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16460  00189E  D009               	goto	l6494
 16461  0018A0                     l6490:
 16462                           
 16463                           ; BSR set to: 0
 16464                           ;doprnt.c: 759: else
 16465                           ;doprnt.c: 760: width = 0;
 16466  0018A0  0E00               	movlw	0
 16467  0018A2  0100               	movlb	0	; () banked
 16468  0018A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 16469  0018A6  0E00               	movlw	0
 16470  0018A8  6FA9               	movwf	printf@width& (0+255),b
 16471                           
 16472                           ; BSR set to: 0
 16473                           ;doprnt.c: 764: while(width--)
 16474  0018AA  D003               	goto	l6494
 16475  0018AC                     l6492:
 16476                           
 16477                           ; BSR set to: 0
 16478                           ;doprnt.c: 765: (putch(' ') );
 16479  0018AC  0E20               	movlw	32
 16480  0018AE  ECF5  F02A         	call	_putch
 16481  0018B2                     l6494:
 16482  0018B2  0100               	movlb	0	; () banked
 16483  0018B4  07A9               	decf	printf@width& (0+255),f,b
 16484  0018B6  A0D8               	btfss	status,0,c
 16485  0018B8  07AA               	decf	(printf@width+1)& (0+255),f,b
 16486  0018BA  0100               	movlb	0	; () banked
 16487  0018BC  29A9               	incf	printf@width& (0+255),w,b
 16488  0018BE  E1F6               	bnz	l6492
 16489  0018C0  0100               	movlb	0	; () banked
 16490  0018C2  29AA               	incf	(printf@width+1)& (0+255),w,b
 16491  0018C4  B4D8               	btfsc	status,2,c
 16492  0018C6  D017               	goto	l6500
 16493  0018C8  D7F1               	goto	l6492
 16494  0018CA                     l6496:
 16495                           
 16496                           ; BSR set to: 0
 16497                           ;doprnt.c: 768: (putch(*cp++) );
 16498  0018CA  C09F  FFF6         	movff	printf@cp,tblptrl
 16499  0018CE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16500  0018D2  0E00               	movlw	low (__mediumconst shr (0+16))
 16501  0018D4  6EF8               	movwf	tblptru,c
 16502  0018D6  0E0F               	movlw	(high __ramtop+-1)
 16503  0018D8  64F7               	cpfsgt	tblptrh,c
 16504  0018DA  D003               	bra	u4937
 16505  0018DC  0008               	tblrd		*
 16506  0018DE  50F5               	movf	tablat,w,c
 16507  0018E0  D005               	bra	u4930
 16508  0018E2                     u4937:
 16509  0018E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 16510  0018E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 16511  0018EA  50EF               	movf	indf0,w,c
 16512  0018EC                     u4930:
 16513  0018EC  ECF5  F02A         	call	_putch
 16514  0018F0  0100               	movlb	0	; () banked
 16515  0018F2  4B9F               	infsnz	printf@cp& (0+255),f,b
 16516  0018F4  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16517  0018F6                     l6500:
 16518                           
 16519                           ; BSR set to: 0
 16520  0018F6  0100               	movlb	0	; () banked
 16521  0018F8  07A3               	decf	printf@len& (0+255),f,b
 16522  0018FA  A0D8               	btfss	status,0,c
 16523  0018FC  07A4               	decf	(printf@len+1)& (0+255),f,b
 16524  0018FE  0100               	movlb	0	; () banked
 16525  001900  29A3               	incf	printf@len& (0+255),w,b
 16526  001902  E1E3               	bnz	l6496
 16527  001904  0100               	movlb	0	; () banked
 16528  001906  29A4               	incf	(printf@len+1)& (0+255),w,b
 16529  001908  B4D8               	btfsc	status,2,c
 16530  00190A  D10A               	goto	l6578
 16531  00190C  D7DE               	goto	l6496
 16532  00190E                     l6502:
 16533                           
 16534                           ; BSR set to: 0
 16535                           ;doprnt.c: 818: flag |= 0x40;
 16536  00190E  0100               	movlb	0	; () banked
 16537  001910  8DA7               	bsf	printf@flag& (0+255),6,b
 16538                           
 16539                           ; BSR set to: 0
 16540                           ;doprnt.c: 822: }
 16541                           
 16542                           ;doprnt.c: 819: break;
 16543  001912  D01D               	goto	l1486
 16544  001914                     l6506:
 16545  001914  C08E  FFF6         	movff	printf@f,tblptrl
 16546  001918  C08F  FFF7         	movff	printf@f+1,tblptrh
 16547  00191C  0100               	movlb	0	; () banked
 16548  00191E  4B8E               	infsnz	printf@f& (0+255),f,b
 16549  001920  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16550  001922                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16551  001922  6AF8               	clrf	tblptru,c
 16552  001924                     	endif
 16553  001924                     	if	0	;tblptru may be non-zero
 16554  001924                     	endif
 16555  001924  0008               	tblrd		*
 16556  001926  CFF5 F0A8          	movff	tablat,printf@c
 16557  00192A  0100               	movlb	0	; () banked
 16558  00192C  51A8               	movf	printf@c& (0+255),w,b
 16559                           
 16560                           ; Switch size 1, requested type "space"
 16561                           ; Number of cases is 5, Range of values is 0 to 117
 16562                           ; switch strategies available:
 16563                           ; Name         Instructions Cycles
 16564                           ; simple_byte           16     9 (average)
 16565                           ;	Chosen strategy is simple_byte
 16566  00192E  0A00               	xorlw	0	; case 0
 16567  001930  B4D8               	btfsc	status,2,c
 16568  001932  0012               	return	
 16569  001934  0A64               	xorlw	100	; case 100
 16570  001936  B4D8               	btfsc	status,2,c
 16571  001938  D00A               	goto	l1486
 16572  00193A  0A0D               	xorlw	13	; case 105
 16573  00193C  B4D8               	btfsc	status,2,c
 16574  00193E  D007               	goto	l1486
 16575  001940  0A1A               	xorlw	26	; case 115
 16576  001942  B4D8               	btfsc	status,2,c
 16577  001944  D758               	goto	l6472
 16578  001946  0A06               	xorlw	6	; case 117
 16579  001948  B4D8               	btfsc	status,2,c
 16580  00194A  D7E1               	goto	l6502
 16581  00194C  D0E9               	goto	l6578
 16582  00194E                     l1486:
 16583                           
 16584                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16585  00194E  0100               	movlb	0	; () banked
 16586  001950  BDA7               	btfsc	printf@flag& (0+255),6,b
 16587  001952  D019               	goto	l6518
 16588                           
 16589                           ; BSR set to: 0
 16590                           ;doprnt.c: 1253: {
 16591                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16592  001954  C0A1  FFD9         	movff	printf@ap,fsr2l
 16593  001958  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16594  00195C  CFDE F0A5          	movff	postinc2,printf@val
 16595  001960  CFDD F0A6          	movff	postdec2,printf@val+1
 16596                           
 16597                           ; BSR set to: 0
 16598  001964  0E02               	movlw	2
 16599  001966  0100               	movlb	0	; () banked
 16600  001968  27A1               	addwf	printf@ap& (0+255),f,b
 16601  00196A  0E00               	movlw	0
 16602  00196C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16603                           
 16604                           ; BSR set to: 0
 16605                           ;doprnt.c: 1261: if((int)val < 0) {
 16606  00196E  0100               	movlb	0	; () banked
 16607  001970  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16608  001972  D016               	goto	l6522
 16609                           
 16610                           ; BSR set to: 0
 16611                           ;doprnt.c: 1262: flag |= 0x03;
 16612  001974  0E03               	movlw	3
 16613  001976  0100               	movlb	0	; () banked
 16614  001978  13A7               	iorwf	printf@flag& (0+255),f,b
 16615                           
 16616                           ; BSR set to: 0
 16617                           ;doprnt.c: 1263: val = -val;
 16618  00197A  0100               	movlb	0	; () banked
 16619  00197C  6DA5               	negf	printf@val& (0+255),b
 16620  00197E  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16621  001980  B0D8               	btfsc	status,0,c
 16622  001982  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16623                           
 16624                           ; BSR set to: 0
 16625                           ;doprnt.c: 1264: }
 16626                           ;doprnt.c: 1266: }
 16627  001984  D00D               	goto	l6522
 16628  001986                     l6518:
 16629                           
 16630                           ; BSR set to: 0
 16631                           ;doprnt.c: 1268: else
 16632                           ;doprnt.c: 1273: {
 16633                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16634  001986  C0A1  FFD9         	movff	printf@ap,fsr2l
 16635  00198A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16636  00198E  CFDE F0A5          	movff	postinc2,printf@val
 16637  001992  CFDD F0A6          	movff	postdec2,printf@val+1
 16638                           
 16639                           ; BSR set to: 0
 16640  001996  0E02               	movlw	2
 16641  001998  0100               	movlb	0	; () banked
 16642  00199A  27A1               	addwf	printf@ap& (0+255),f,b
 16643  00199C  0E00               	movlw	0
 16644  00199E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16645  0019A0                     l6522:
 16646                           
 16647                           ; BSR set to: 0
 16648                           ;doprnt.c: 1287: }
 16649                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16650  0019A0  0E01               	movlw	1
 16651  0019A2  0100               	movlb	0	; () banked
 16652  0019A4  6FA8               	movwf	printf@c& (0+255),b
 16653  0019A6                     l6524:
 16654                           
 16655                           ; BSR set to: 0
 16656  0019A6  0E05               	movlw	5
 16657  0019A8  0100               	movlb	0	; () banked
 16658  0019AA  19A8               	xorwf	printf@c& (0+255),w,b
 16659  0019AC  B4D8               	btfsc	status,2,c
 16660  0019AE  D019               	goto	l6536
 16661                           
 16662                           ; BSR set to: 0
 16663                           ;doprnt.c: 1306: if(val < dpowers[c])
 16664                           
 16665                           ; BSR set to: 0
 16666                           
 16667                           ; BSR set to: 0
 16668  0019B0  0100               	movlb	0	; () banked
 16669  0019B2  51A8               	movf	printf@c& (0+255),w,b
 16670  0019B4  0D02               	mullw	2
 16671  0019B6  0EB4               	movlw	low _dpowers
 16672  0019B8  24F3               	addwf	prodl,w,c
 16673  0019BA  6EF6               	movwf	tblptrl,c
 16674  0019BC  0EFA               	movlw	high _dpowers
 16675  0019BE  20F4               	addwfc	prodh,w,c
 16676  0019C0  6EF7               	movwf	tblptrh,c
 16677  0019C2                     	if	1	;There are 3 active tblptr bytes
 16678  0019C2  6AF8               	clrf	tblptru,c
 16679  0019C4  0E00               	movlw	low (__mediumconst shr (0+16))
 16680  0019C6  22F8               	addwfc	tblptru,f,c
 16681  0019C8                     	endif
 16682  0019C8  0009               	tblrd		*+
 16683  0019CA  50F5               	movf	tablat,w,c
 16684  0019CC  0100               	movlb	0	; () banked
 16685  0019CE  5DA5               	subwf	printf@val& (0+255),w,b
 16686  0019D0  0009               	tblrd		*+
 16687  0019D2  50F5               	movf	tablat,w,c
 16688  0019D4  0100               	movlb	0	; () banked
 16689  0019D6  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16690  0019D8  A0D8               	btfss	status,0,c
 16691  0019DA  D003               	goto	l6536
 16692                           
 16693                           ; BSR set to: 0
 16694                           
 16695                           ; BSR set to: 0
 16696                           
 16697                           ; BSR set to: 0
 16698                           ;doprnt.c: 1307: break;
 16699  0019DC  0100               	movlb	0	; () banked
 16700  0019DE  2BA8               	incf	printf@c& (0+255),f,b
 16701  0019E0  D7E2               	goto	l6524
 16702  0019E2                     l6536:
 16703                           
 16704                           ; BSR set to: 0
 16705                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16706  0019E2  0100               	movlb	0	; () banked
 16707  0019E4  51A9               	movf	printf@width& (0+255),w,b
 16708  0019E6  0100               	movlb	0	; () banked
 16709  0019E8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16710  0019EA  B4D8               	btfsc	status,2,c
 16711  0019EC  D00B               	goto	l6542
 16712                           
 16713                           ; BSR set to: 0
 16714  0019EE  C0A7  F09A         	movff	printf@flag,??_printf
 16715  0019F2  0E03               	movlw	3
 16716  0019F4  0100               	movlb	0	; () banked
 16717  0019F6  179A               	andwf	??_printf& (0+255),f,b
 16718  0019F8  B4D8               	btfsc	status,2,c
 16719  0019FA  D004               	goto	l6542
 16720                           
 16721                           ; BSR set to: 0
 16722                           ;doprnt.c: 1346: width--;
 16723  0019FC  0100               	movlb	0	; () banked
 16724  0019FE  07A9               	decf	printf@width& (0+255),f,b
 16725  001A00  A0D8               	btfss	status,0,c
 16726  001A02  07AA               	decf	(printf@width+1)& (0+255),f,b
 16727  001A04                     l6542:
 16728                           
 16729                           ; BSR set to: 0
 16730                           ;doprnt.c: 1381: if(width > c)
 16731  001A04  0E80               	movlw	128
 16732  001A06  0100               	movlb	0	; () banked
 16733  001A08  BFA8               	btfsc	printf@c& (0+255),7,b
 16734  001A0A  0E7F               	movlw	127
 16735  001A0C  0100               	movlb	0	; () banked
 16736  001A0E  6F9A               	movwf	??_printf& (0+255),b
 16737  001A10  0100               	movlb	0	; () banked
 16738  001A12  51A9               	movf	printf@width& (0+255),w,b
 16739  001A14  0100               	movlb	0	; () banked
 16740  001A16  5DA8               	subwf	printf@c& (0+255),w,b
 16741  001A18  0100               	movlb	0	; () banked
 16742  001A1A  51AA               	movf	(printf@width+1)& (0+255),w,b
 16743  001A1C  0A80               	xorlw	128
 16744  001A1E  0100               	movlb	0	; () banked
 16745  001A20  599A               	subwfb	??_printf& (0+255),w,b
 16746  001A22  B0D8               	btfsc	status,0,c
 16747  001A24  D00B               	goto	l6546
 16748                           
 16749                           ; BSR set to: 0
 16750                           ;doprnt.c: 1382: width -= c;
 16751  001A26  0100               	movlb	0	; () banked
 16752  001A28  51A8               	movf	printf@c& (0+255),w,b
 16753  001A2A  0100               	movlb	0	; () banked
 16754  001A2C  5FA9               	subwf	printf@width& (0+255),f,b
 16755  001A2E  0E00               	movlw	0
 16756  001A30  0100               	movlb	0	; () banked
 16757  001A32  BFA8               	btfsc	printf@c& (0+255),7,b
 16758  001A34  0EFF               	movlw	255
 16759  001A36  0100               	movlb	0	; () banked
 16760  001A38  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16761  001A3A  D005               	goto	l6548
 16762  001A3C                     l6546:
 16763                           
 16764                           ; BSR set to: 0
 16765                           ;doprnt.c: 1383: else
 16766                           ;doprnt.c: 1384: width = 0;
 16767  001A3C  0E00               	movlw	0
 16768  001A3E  0100               	movlb	0	; () banked
 16769  001A40  6FAA               	movwf	(printf@width+1)& (0+255),b
 16770  001A42  0E00               	movlw	0
 16771  001A44  6FA9               	movwf	printf@width& (0+255),b
 16772  001A46                     l6548:
 16773                           
 16774                           ; BSR set to: 0
 16775                           ;doprnt.c: 1387: if(flag & 0x04) {
 16776  001A46  0100               	movlb	0	; () banked
 16777  001A48  A5A7               	btfss	printf@flag& (0+255),2,b
 16778  001A4A  D018               	goto	l6560
 16779                           
 16780                           ; BSR set to: 0
 16781                           ;doprnt.c: 1392: if(flag & 0x03)
 16782  001A4C  C0A7  F09A         	movff	printf@flag,??_printf
 16783  001A50  0E03               	movlw	3
 16784  001A52  0100               	movlb	0	; () banked
 16785  001A54  179A               	andwf	??_printf& (0+255),f,b
 16786  001A56  B4D8               	btfsc	status,2,c
 16787  001A58  D003               	goto	l6554
 16788                           
 16789                           ; BSR set to: 0
 16790                           ;doprnt.c: 1393: (putch('-') );
 16791  001A5A  0E2D               	movlw	45
 16792  001A5C  ECF5  F02A         	call	_putch
 16793  001A60                     l6554:
 16794                           
 16795                           ;doprnt.c: 1415: if(width)
 16796  001A60  0100               	movlb	0	; () banked
 16797  001A62  51A9               	movf	printf@width& (0+255),w,b
 16798  001A64  0100               	movlb	0	; () banked
 16799  001A66  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16800  001A68  B4D8               	btfsc	status,2,c
 16801  001A6A  D025               	goto	l6570
 16802                           
 16803                           ; BSR set to: 0
 16804                           ;doprnt.c: 1417: (putch('0') );
 16805                           
 16806                           ; BSR set to: 0
 16807                           
 16808                           ;doprnt.c: 1416: do
 16809  001A6C  0E30               	movlw	48
 16810  001A6E  ECF5  F02A         	call	_putch
 16811                           
 16812                           ;doprnt.c: 1418: while(--width);
 16813  001A72  0100               	movlb	0	; () banked
 16814  001A74  07A9               	decf	printf@width& (0+255),f,b
 16815  001A76  A0D8               	btfss	status,0,c
 16816  001A78  07AA               	decf	(printf@width+1)& (0+255),f,b
 16817  001A7A  D7F2               	goto	l6554
 16818  001A7C                     l6560:
 16819                           
 16820                           ; BSR set to: 0
 16821                           ;doprnt.c: 1422: {
 16822                           ;doprnt.c: 1424: if(width
 16823                           ;doprnt.c: 1428: )
 16824  001A7C  0100               	movlb	0	; () banked
 16825  001A7E  51A9               	movf	printf@width& (0+255),w,b
 16826  001A80  0100               	movlb	0	; () banked
 16827  001A82  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16828  001A84  B4D8               	btfsc	status,2,c
 16829  001A86  D00D               	goto	l6566
 16830  001A88                     l6562:
 16831                           
 16832                           ; BSR set to: 0
 16833                           ;doprnt.c: 1430: (putch(' ') );
 16834  001A88  0E20               	movlw	32
 16835  001A8A  ECF5  F02A         	call	_putch
 16836                           
 16837                           ;doprnt.c: 1431: while(--width);
 16838  001A8E  0100               	movlb	0	; () banked
 16839  001A90  07A9               	decf	printf@width& (0+255),f,b
 16840  001A92  A0D8               	btfss	status,0,c
 16841  001A94  07AA               	decf	(printf@width+1)& (0+255),f,b
 16842  001A96  0100               	movlb	0	; () banked
 16843  001A98  51A9               	movf	printf@width& (0+255),w,b
 16844  001A9A  0100               	movlb	0	; () banked
 16845  001A9C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16846  001A9E  A4D8               	btfss	status,2,c
 16847  001AA0  D7F3               	goto	l6562
 16848  001AA2                     l6566:
 16849                           
 16850                           ; BSR set to: 0
 16851                           ;doprnt.c: 1438: if(flag & 0x03)
 16852  001AA2  C0A7  F09A         	movff	printf@flag,??_printf
 16853  001AA6  0E03               	movlw	3
 16854  001AA8  0100               	movlb	0	; () banked
 16855  001AAA  179A               	andwf	??_printf& (0+255),f,b
 16856  001AAC  B4D8               	btfsc	status,2,c
 16857  001AAE  D003               	goto	l6570
 16858                           
 16859                           ; BSR set to: 0
 16860                           ;doprnt.c: 1439: (putch('-') );
 16861  001AB0  0E2D               	movlw	45
 16862  001AB2  ECF5  F02A         	call	_putch
 16863  001AB6                     l6570:
 16864                           
 16865                           ;doprnt.c: 1469: }
 16866                           ;doprnt.c: 1472: prec = c;
 16867  001AB6  C0A8  F09E         	movff	printf@c,printf@prec
 16868                           
 16869                           ;doprnt.c: 1474: while(prec--) {
 16870  001ABA  D02C               	goto	l6576
 16871  001ABC                     l6572:
 16872                           
 16873                           ;doprnt.c: 1478: {
 16874                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16875  001ABC  0100               	movlb	0	; () banked
 16876  001ABE  519E               	movf	printf@prec& (0+255),w,b
 16877  001AC0  0D02               	mullw	2
 16878  001AC2  0EB4               	movlw	low _dpowers
 16879  001AC4  24F3               	addwf	prodl,w,c
 16880  001AC6  6EF6               	movwf	tblptrl,c
 16881  001AC8  0EFA               	movlw	high _dpowers
 16882  001ACA  20F4               	addwfc	prodh,w,c
 16883  001ACC  6EF7               	movwf	tblptrh,c
 16884  001ACE                     	if	1	;There are 3 active tblptr bytes
 16885  001ACE  6AF8               	clrf	tblptru,c
 16886  001AD0  0E00               	movlw	low (__mediumconst shr (0+16))
 16887  001AD2  22F8               	addwfc	tblptru,f,c
 16888  001AD4                     	endif
 16889  001AD4  0009               	tblrd		*+
 16890  001AD6  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16891  001ADA  000A               	tblrd		*-
 16892  001ADC  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16893  001AE0  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16894  001AE4  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16895  001AE8  ECEE  F024         	call	___lwdiv	;wreg free
 16896  001AEC  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16897  001AF0  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16898  001AF4  0E00               	movlw	0
 16899  001AF6  0100               	movlb	0	; () banked
 16900  001AF8  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16901  001AFA  0E0A               	movlw	10
 16902  001AFC  6F89               	movwf	___lwmod@divisor& (0+255),b
 16903  001AFE  EC3A  F026         	call	___lwmod	;wreg free
 16904  001B02  0100               	movlb	0	; () banked
 16905  001B04  5187               	movf	?___lwmod& (0+255),w,b
 16906  001B06  0F30               	addlw	48
 16907  001B08  0100               	movlb	0	; () banked
 16908  001B0A  6FA8               	movwf	printf@c& (0+255),b
 16909                           
 16910                           ; BSR set to: 0
 16911                           ;doprnt.c: 1523: }
 16912                           ;doprnt.c: 1524: (putch(c) );
 16913  001B0C  0100               	movlb	0	; () banked
 16914  001B0E  51A8               	movf	printf@c& (0+255),w,b
 16915  001B10  ECF5  F02A         	call	_putch
 16916  001B14                     l6576:
 16917  001B14  0100               	movlb	0	; () banked
 16918  001B16  079E               	decf	printf@prec& (0+255),f,b
 16919  001B18  0100               	movlb	0	; () banked
 16920  001B1A  299E               	incf	printf@prec& (0+255),w,b
 16921  001B1C  A4D8               	btfss	status,2,c
 16922  001B1E  D7CE               	goto	l6572
 16923  001B20                     l6578:
 16924  001B20  C08E  FFF6         	movff	printf@f,tblptrl
 16925  001B24  C08F  FFF7         	movff	printf@f+1,tblptrh
 16926  001B28  0100               	movlb	0	; () banked
 16927  001B2A  4B8E               	infsnz	printf@f& (0+255),f,b
 16928  001B2C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16929  001B2E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16930  001B2E  6AF8               	clrf	tblptru,c
 16931  001B30                     	endif
 16932  001B30                     	if	0	;tblptru may be non-zero
 16933  001B30                     	endif
 16934  001B30  0008               	tblrd		*
 16935  001B32  CFF5 F0A8          	movff	tablat,printf@c
 16936  001B36  0100               	movlb	0	; () banked
 16937  001B38  51A8               	movf	printf@c& (0+255),w,b
 16938  001B3A  B4D8               	btfsc	status,2,c
 16939  001B3C  0012               	return	
 16940  001B3E  D5EB               	goto	l6448
 16941  001B40                     __end_of_printf:
 16942                           	opt stack 0
 16943                           tblptru	equ	0xFF8
 16944                           tblptrh	equ	0xFF7
 16945                           tblptrl	equ	0xFF6
 16946                           tablat	equ	0xFF5
 16947                           prodh	equ	0xFF4
 16948                           prodl	equ	0xFF3
 16949                           intcon	equ	0xFF2
 16950                           intcon2	equ	0xFF1
 16951                           intcon3	equ	0xFF0
 16952                           indf0	equ	0xFEF
 16953                           postinc0	equ	0xFEE
 16954                           fsr0h	equ	0xFEA
 16955                           fsr0l	equ	0xFE9
 16956                           wreg	equ	0xFE8
 16957                           postdec1	equ	0xFE5
 16958                           fsr1l	equ	0xFE1
 16959                           indf2	equ	0xFDF
 16960                           postinc2	equ	0xFDE
 16961                           postdec2	equ	0xFDD
 16962                           fsr2h	equ	0xFDA
 16963                           fsr2l	equ	0xFD9
 16964                           status	equ	0xFD8
 16965                           
 16966 ;; *************** function _putch *****************
 16967 ;; Defined at:
 16968 ;;		line 20 in file "lcd.c"
 16969 ;; Parameters:    Size  Location     Type
 16970 ;;  data            1    wreg     unsigned char 
 16971 ;; Auto vars:     Size  Location     Type
 16972 ;;  data            1    2[BANK0 ] unsigned char 
 16973 ;; Return value:  Size  Location     Type
 16974 ;;                  1    wreg      void 
 16975 ;; Registers used:
 16976 ;;		wreg, status,2, status,0, cstack
 16977 ;; Tracked objects:
 16978 ;;		On entry : 0/0
 16979 ;;		On exit  : 0/0
 16980 ;;		Unchanged: 0/0
 16981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;Total ram usage:        1 bytes
 16987 ;; Hardware stack levels used:    1
 16988 ;; Hardware stack levels required when called:    8
 16989 ;; This function calls:
 16990 ;;		_lcdNibble
 16991 ;; This function is called by:
 16992 ;;		_printf
 16993 ;; This function uses a non-reentrant model
 16994 ;;
 16995                           
 16996                           	psect	text52
 16997  0055EA                     __ptext52:
 16998                           	opt stack 0
 16999  0055EA                     _putch:
 17000                           	opt stack 18
 17001                           
 17002                           ;incstack = 0
 17003                           ;putch@data stored from wreg
 17004  0055EA  0100               	movlb	0	; () banked
 17005  0055EC  6F82               	movwf	putch@data& (0+255),b
 17006                           
 17007                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 17008  0055EE  848C               	bsf	3980,2,c	;volatile
 17009                           
 17010                           ;lcd.c: 22: lcdNibble(data);
 17011  0055F0  0100               	movlb	0	; () banked
 17012  0055F2  5182               	movf	putch@data& (0+255),w,b
 17013  0055F4  ECD4  F025         	call	_lcdNibble
 17014  0055F8  0012               	return		;funcret
 17015  0055FA                     __end_of_putch:
 17016                           	opt stack 0
 17017                           tblptru	equ	0xFF8
 17018                           tblptrh	equ	0xFF7
 17019                           tblptrl	equ	0xFF6
 17020                           tablat	equ	0xFF5
 17021                           prodh	equ	0xFF4
 17022                           prodl	equ	0xFF3
 17023                           intcon	equ	0xFF2
 17024                           intcon2	equ	0xFF1
 17025                           intcon3	equ	0xFF0
 17026                           indf0	equ	0xFEF
 17027                           postinc0	equ	0xFEE
 17028                           fsr0h	equ	0xFEA
 17029                           fsr0l	equ	0xFE9
 17030                           wreg	equ	0xFE8
 17031                           postdec1	equ	0xFE5
 17032                           fsr1l	equ	0xFE1
 17033                           indf2	equ	0xFDF
 17034                           postinc2	equ	0xFDE
 17035                           postdec2	equ	0xFDD
 17036                           fsr2h	equ	0xFDA
 17037                           fsr2l	equ	0xFD9
 17038                           status	equ	0xFD8
 17039                           
 17040 ;; *************** function _isdigit *****************
 17041 ;; Defined at:
 17042 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 17043 ;; Parameters:    Size  Location     Type
 17044 ;;  c               1    wreg     unsigned char 
 17045 ;; Auto vars:     Size  Location     Type
 17046 ;;  c               1    2[BANK0 ] unsigned char 
 17047 ;; Return value:  Size  Location     Type
 17048 ;;		None               void
 17049 ;; Registers used:
 17050 ;;		wreg, status,2, status,0
 17051 ;; Tracked objects:
 17052 ;;		On entry : 0/0
 17053 ;;		On exit  : 0/0
 17054 ;;		Unchanged: 0/0
 17055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17059 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17060 ;;Total ram usage:        3 bytes
 17061 ;; Hardware stack levels used:    1
 17062 ;; Hardware stack levels required when called:    7
 17063 ;; This function calls:
 17064 ;;		Nothing
 17065 ;; This function is called by:
 17066 ;;		_printf
 17067 ;; This function uses a non-reentrant model
 17068 ;;
 17069                           
 17070                           	psect	text53
 17071  005412                     __ptext53:
 17072                           	opt stack 0
 17073  005412                     _isdigit:
 17074                           	opt stack 19
 17075                           
 17076                           ;incstack = 0
 17077                           ;isdigit@c stored from wreg
 17078  005412  0100               	movlb	0	; () banked
 17079  005414  6F82               	movwf	isdigit@c& (0+255),b
 17080  005416  0E00               	movlw	0
 17081  005418  0100               	movlb	0	; () banked
 17082  00541A  6F81               	movwf	_isdigit$2056& (0+255),b
 17083                           
 17084                           ; BSR set to: 0
 17085  00541C  0E3A               	movlw	58
 17086  00541E  0100               	movlb	0	; () banked
 17087  005420  6182               	cpfslt	isdigit@c& (0+255),b
 17088  005422  D007               	goto	l6296
 17089                           
 17090                           ; BSR set to: 0
 17091  005424  0E2F               	movlw	47
 17092  005426  0100               	movlb	0	; () banked
 17093  005428  6582               	cpfsgt	isdigit@c& (0+255),b
 17094  00542A  D003               	goto	l6296
 17095                           
 17096                           ; BSR set to: 0
 17097  00542C  0E01               	movlw	1
 17098  00542E  0100               	movlb	0	; () banked
 17099  005430  6F81               	movwf	_isdigit$2056& (0+255),b
 17100  005432                     l6296:
 17101                           
 17102                           ; BSR set to: 0
 17103  005432  C081  F080         	movff	_isdigit$2056,??_isdigit
 17104  005436  0100               	movlb	0	; () banked
 17105  005438  3180               	rrcf	??_isdigit& (0+255),w,b
 17106  00543A  0012               	return	
 17107  00543C                     __end_of_isdigit:
 17108                           	opt stack 0
 17109                           tblptru	equ	0xFF8
 17110                           tblptrh	equ	0xFF7
 17111                           tblptrl	equ	0xFF6
 17112                           tablat	equ	0xFF5
 17113                           prodh	equ	0xFF4
 17114                           prodl	equ	0xFF3
 17115                           intcon	equ	0xFF2
 17116                           intcon2	equ	0xFF1
 17117                           intcon3	equ	0xFF0
 17118                           indf0	equ	0xFEF
 17119                           postinc0	equ	0xFEE
 17120                           fsr0h	equ	0xFEA
 17121                           fsr0l	equ	0xFE9
 17122                           wreg	equ	0xFE8
 17123                           postdec1	equ	0xFE5
 17124                           fsr1l	equ	0xFE1
 17125                           indf2	equ	0xFDF
 17126                           postinc2	equ	0xFDE
 17127                           postdec2	equ	0xFDD
 17128                           fsr2h	equ	0xFDA
 17129                           fsr2l	equ	0xFD9
 17130                           status	equ	0xFD8
 17131                           
 17132 ;; *************** function ___wmul *****************
 17133 ;; Defined at:
 17134 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 17135 ;; Parameters:    Size  Location     Type
 17136 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17137 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17138 ;; Auto vars:     Size  Location     Type
 17139 ;;  product         2    4[BANK0 ] unsigned int 
 17140 ;; Return value:  Size  Location     Type
 17141 ;;                  2    0[BANK0 ] unsigned int 
 17142 ;; Registers used:
 17143 ;;		wreg, status,2, status,0, prodl, prodh
 17144 ;; Tracked objects:
 17145 ;;		On entry : 0/0
 17146 ;;		On exit  : 0/0
 17147 ;;		Unchanged: 0/0
 17148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17149 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17150 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17153 ;;Total ram usage:        6 bytes
 17154 ;; Hardware stack levels used:    1
 17155 ;; Hardware stack levels required when called:    7
 17156 ;; This function calls:
 17157 ;;		Nothing
 17158 ;; This function is called by:
 17159 ;;		_printf
 17160 ;; This function uses a non-reentrant model
 17161 ;;
 17162                           
 17163                           	psect	text54
 17164  0050E4                     __ptext54:
 17165                           	opt stack 0
 17166  0050E4                     ___wmul:
 17167                           	opt stack 19
 17168                           
 17169                           ; BSR set to: 0
 17170                           ;incstack = 0
 17171  0050E4  0100               	movlb	0	; () banked
 17172  0050E6  5180               	movf	___wmul@multiplier& (0+255),w,b
 17173  0050E8  0100               	movlb	0	; () banked
 17174  0050EA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17175  0050EC  CFF3 F084          	movff	prodl,___wmul@product
 17176  0050F0  CFF4 F085          	movff	prodh,___wmul@product+1
 17177  0050F4  0100               	movlb	0	; () banked
 17178  0050F6  5180               	movf	___wmul@multiplier& (0+255),w,b
 17179  0050F8  0100               	movlb	0	; () banked
 17180  0050FA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 17181  0050FC  50F3               	movf	prodl,w,c
 17182  0050FE  0100               	movlb	0	; () banked
 17183  005100  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17184  005102  0100               	movlb	0	; () banked
 17185  005104  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 17186  005106  0100               	movlb	0	; () banked
 17187  005108  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17188  00510A  50F3               	movf	prodl,w,c
 17189  00510C  0100               	movlb	0	; () banked
 17190  00510E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17191                           
 17192                           ; BSR set to: 0
 17193  005110  C084  F080         	movff	___wmul@product,?___wmul
 17194  005114  C085  F081         	movff	___wmul@product+1,?___wmul+1
 17195  005118  0012               	return	
 17196  00511A                     __end_of___wmul:
 17197                           	opt stack 0
 17198                           tblptru	equ	0xFF8
 17199                           tblptrh	equ	0xFF7
 17200                           tblptrl	equ	0xFF6
 17201                           tablat	equ	0xFF5
 17202                           prodh	equ	0xFF4
 17203                           prodl	equ	0xFF3
 17204                           intcon	equ	0xFF2
 17205                           intcon2	equ	0xFF1
 17206                           intcon3	equ	0xFF0
 17207                           indf0	equ	0xFEF
 17208                           postinc0	equ	0xFEE
 17209                           fsr0h	equ	0xFEA
 17210                           fsr0l	equ	0xFE9
 17211                           wreg	equ	0xFE8
 17212                           postdec1	equ	0xFE5
 17213                           fsr1l	equ	0xFE1
 17214                           indf2	equ	0xFDF
 17215                           postinc2	equ	0xFDE
 17216                           postdec2	equ	0xFDD
 17217                           fsr2h	equ	0xFDA
 17218                           fsr2l	equ	0xFD9
 17219                           status	equ	0xFD8
 17220                           
 17221 ;; *************** function ___lwmod *****************
 17222 ;; Defined at:
 17223 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 17224 ;; Parameters:    Size  Location     Type
 17225 ;;  dividend        2    7[BANK0 ] unsigned int 
 17226 ;;  divisor         2    9[BANK0 ] unsigned int 
 17227 ;; Auto vars:     Size  Location     Type
 17228 ;;  counter         1   11[BANK0 ] unsigned char 
 17229 ;; Return value:  Size  Location     Type
 17230 ;;                  2    7[BANK0 ] unsigned int 
 17231 ;; Registers used:
 17232 ;;		wreg, status,2, status,0
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17238 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17241 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17242 ;;Total ram usage:        5 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; Hardware stack levels required when called:    7
 17245 ;; This function calls:
 17246 ;;		Nothing
 17247 ;; This function is called by:
 17248 ;;		_printf
 17249 ;; This function uses a non-reentrant model
 17250 ;;
 17251                           
 17252                           	psect	text55
 17253  004C74                     __ptext55:
 17254                           	opt stack 0
 17255  004C74                     ___lwmod:
 17256                           	opt stack 19
 17257                           
 17258                           ; BSR set to: 0
 17259                           ;incstack = 0
 17260  004C74  0100               	movlb	0	; () banked
 17261  004C76  5189               	movf	___lwmod@divisor& (0+255),w,b
 17262  004C78  0100               	movlb	0	; () banked
 17263  004C7A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17264  004C7C  B4D8               	btfsc	status,2,c
 17265  004C7E  D026               	goto	l1943
 17266                           
 17267                           ; BSR set to: 0
 17268  004C80  0E01               	movlw	1
 17269  004C82  0100               	movlb	0	; () banked
 17270  004C84  6F8B               	movwf	___lwmod@counter& (0+255),b
 17271  004C86  D006               	goto	l6334
 17272  004C88                     l6332:
 17273                           
 17274                           ; BSR set to: 0
 17275  004C88  0100               	movlb	0	; () banked
 17276  004C8A  90D8               	bcf	status,0,c
 17277  004C8C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 17278  004C8E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17279  004C90  0100               	movlb	0	; () banked
 17280  004C92  2B8B               	incf	___lwmod@counter& (0+255),f,b
 17281  004C94                     l6334:
 17282                           
 17283                           ; BSR set to: 0
 17284  004C94  0100               	movlb	0	; () banked
 17285  004C96  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17286  004C98  D7F7               	goto	l6332
 17287  004C9A                     l6336:
 17288                           
 17289                           ; BSR set to: 0
 17290  004C9A  0100               	movlb	0	; () banked
 17291  004C9C  5189               	movf	___lwmod@divisor& (0+255),w,b
 17292  004C9E  0100               	movlb	0	; () banked
 17293  004CA0  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 17294  004CA2  0100               	movlb	0	; () banked
 17295  004CA4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17296  004CA6  0100               	movlb	0	; () banked
 17297  004CA8  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17298  004CAA  A0D8               	btfss	status,0,c
 17299  004CAC  D008               	goto	l6340
 17300                           
 17301                           ; BSR set to: 0
 17302  004CAE  0100               	movlb	0	; () banked
 17303  004CB0  5189               	movf	___lwmod@divisor& (0+255),w,b
 17304  004CB2  0100               	movlb	0	; () banked
 17305  004CB4  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 17306  004CB6  0100               	movlb	0	; () banked
 17307  004CB8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17308  004CBA  0100               	movlb	0	; () banked
 17309  004CBC  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17310  004CBE                     l6340:
 17311                           
 17312                           ; BSR set to: 0
 17313  004CBE  0100               	movlb	0	; () banked
 17314  004CC0  90D8               	bcf	status,0,c
 17315  004CC2  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17316  004CC4  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 17317                           
 17318                           ; BSR set to: 0
 17319  004CC6  0100               	movlb	0	; () banked
 17320  004CC8  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 17321  004CCA  D7E7               	goto	l6336
 17322  004CCC                     l1943:
 17323                           
 17324                           ; BSR set to: 0
 17325  004CCC  C087  F087         	movff	___lwmod@dividend,?___lwmod
 17326  004CD0  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 17327                           
 17328                           ; BSR set to: 0
 17329  004CD4  0012               	return		;funcret
 17330  004CD6                     __end_of___lwmod:
 17331                           	opt stack 0
 17332                           tblptru	equ	0xFF8
 17333                           tblptrh	equ	0xFF7
 17334                           tblptrl	equ	0xFF6
 17335                           tablat	equ	0xFF5
 17336                           prodh	equ	0xFF4
 17337                           prodl	equ	0xFF3
 17338                           intcon	equ	0xFF2
 17339                           intcon2	equ	0xFF1
 17340                           intcon3	equ	0xFF0
 17341                           indf0	equ	0xFEF
 17342                           postinc0	equ	0xFEE
 17343                           fsr0h	equ	0xFEA
 17344                           fsr0l	equ	0xFE9
 17345                           wreg	equ	0xFE8
 17346                           postdec1	equ	0xFE5
 17347                           fsr1l	equ	0xFE1
 17348                           indf2	equ	0xFDF
 17349                           postinc2	equ	0xFDE
 17350                           postdec2	equ	0xFDD
 17351                           fsr2h	equ	0xFDA
 17352                           fsr2l	equ	0xFD9
 17353                           status	equ	0xFD8
 17354                           
 17355 ;; *************** function ___lwdiv *****************
 17356 ;; Defined at:
 17357 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 17358 ;; Parameters:    Size  Location     Type
 17359 ;;  dividend        2    0[BANK0 ] unsigned int 
 17360 ;;  divisor         2    2[BANK0 ] unsigned int 
 17361 ;; Auto vars:     Size  Location     Type
 17362 ;;  quotient        2    4[BANK0 ] unsigned int 
 17363 ;;  counter         1    6[BANK0 ] unsigned char 
 17364 ;; Return value:  Size  Location     Type
 17365 ;;                  2    0[BANK0 ] unsigned int 
 17366 ;; Registers used:
 17367 ;;		wreg, status,2, status,0
 17368 ;; Tracked objects:
 17369 ;;		On entry : 0/0
 17370 ;;		On exit  : 0/0
 17371 ;;		Unchanged: 0/0
 17372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17373 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17374 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17376 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17377 ;;Total ram usage:        7 bytes
 17378 ;; Hardware stack levels used:    1
 17379 ;; Hardware stack levels required when called:    7
 17380 ;; This function calls:
 17381 ;;		Nothing
 17382 ;; This function is called by:
 17383 ;;		_printf
 17384 ;; This function uses a non-reentrant model
 17385 ;;
 17386                           
 17387                           	psect	text56
 17388  0049DC                     __ptext56:
 17389                           	opt stack 0
 17390  0049DC                     ___lwdiv:
 17391                           	opt stack 19
 17392                           
 17393                           ; BSR set to: 0
 17394                           ;incstack = 0
 17395  0049DC  0E00               	movlw	0
 17396  0049DE  0100               	movlb	0	; () banked
 17397  0049E0  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17398  0049E2  0E00               	movlw	0
 17399  0049E4  6F84               	movwf	___lwdiv@quotient& (0+255),b
 17400                           
 17401                           ; BSR set to: 0
 17402  0049E6  0100               	movlb	0	; () banked
 17403  0049E8  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17404  0049EA  0100               	movlb	0	; () banked
 17405  0049EC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17406  0049EE  B4D8               	btfsc	status,2,c
 17407  0049F0  D02C               	goto	l1933
 17408                           
 17409                           ; BSR set to: 0
 17410  0049F2  0E01               	movlw	1
 17411  0049F4  0100               	movlb	0	; () banked
 17412  0049F6  6F86               	movwf	___lwdiv@counter& (0+255),b
 17413  0049F8  D006               	goto	l6314
 17414  0049FA                     l6312:
 17415                           
 17416                           ; BSR set to: 0
 17417  0049FA  0100               	movlb	0	; () banked
 17418  0049FC  90D8               	bcf	status,0,c
 17419  0049FE  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17420  004A00  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17421  004A02  0100               	movlb	0	; () banked
 17422  004A04  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17423  004A06                     l6314:
 17424                           
 17425                           ; BSR set to: 0
 17426  004A06  0100               	movlb	0	; () banked
 17427  004A08  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17428  004A0A  D7F7               	goto	l6312
 17429  004A0C                     l6316:
 17430                           
 17431                           ; BSR set to: 0
 17432  004A0C  0100               	movlb	0	; () banked
 17433  004A0E  90D8               	bcf	status,0,c
 17434  004A10  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17435  004A12  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17436                           
 17437                           ; BSR set to: 0
 17438  004A14  0100               	movlb	0	; () banked
 17439  004A16  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17440  004A18  0100               	movlb	0	; () banked
 17441  004A1A  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17442  004A1C  0100               	movlb	0	; () banked
 17443  004A1E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17444  004A20  0100               	movlb	0	; () banked
 17445  004A22  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17446  004A24  A0D8               	btfss	status,0,c
 17447  004A26  D00A               	goto	l6324
 17448                           
 17449                           ; BSR set to: 0
 17450  004A28  0100               	movlb	0	; () banked
 17451  004A2A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17452  004A2C  0100               	movlb	0	; () banked
 17453  004A2E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17454  004A30  0100               	movlb	0	; () banked
 17455  004A32  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17456  004A34  0100               	movlb	0	; () banked
 17457  004A36  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17458                           
 17459                           ; BSR set to: 0
 17460  004A38  0100               	movlb	0	; () banked
 17461  004A3A  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17462  004A3C                     l6324:
 17463                           
 17464                           ; BSR set to: 0
 17465  004A3C  0100               	movlb	0	; () banked
 17466  004A3E  90D8               	bcf	status,0,c
 17467  004A40  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17468  004A42  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17469                           
 17470                           ; BSR set to: 0
 17471  004A44  0100               	movlb	0	; () banked
 17472  004A46  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17473  004A48  D7E1               	goto	l6316
 17474  004A4A                     l1933:
 17475                           
 17476                           ; BSR set to: 0
 17477  004A4A  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17478  004A4E  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17479                           
 17480                           ; BSR set to: 0
 17481  004A52  0012               	return		;funcret
 17482  004A54                     __end_of___lwdiv:
 17483                           	opt stack 0
 17484                           tblptru	equ	0xFF8
 17485                           tblptrh	equ	0xFF7
 17486                           tblptrl	equ	0xFF6
 17487                           tablat	equ	0xFF5
 17488                           prodh	equ	0xFF4
 17489                           prodl	equ	0xFF3
 17490                           intcon	equ	0xFF2
 17491                           intcon2	equ	0xFF1
 17492                           intcon3	equ	0xFF0
 17493                           indf0	equ	0xFEF
 17494                           postinc0	equ	0xFEE
 17495                           fsr0h	equ	0xFEA
 17496                           fsr0l	equ	0xFE9
 17497                           wreg	equ	0xFE8
 17498                           postdec1	equ	0xFE5
 17499                           fsr1l	equ	0xFE1
 17500                           indf2	equ	0xFDF
 17501                           postinc2	equ	0xFDE
 17502                           postdec2	equ	0xFDD
 17503                           fsr2h	equ	0xFDA
 17504                           fsr2l	equ	0xFD9
 17505                           status	equ	0xFD8
 17506                           
 17507 ;; *************** function _lcdInst *****************
 17508 ;; Defined at:
 17509 ;;		line 15 in file "lcd.c"
 17510 ;; Parameters:    Size  Location     Type
 17511 ;;  data            1    wreg     unsigned char 
 17512 ;; Auto vars:     Size  Location     Type
 17513 ;;  data            1    2[BANK0 ] unsigned char 
 17514 ;; Return value:  Size  Location     Type
 17515 ;;                  1    wreg      void 
 17516 ;; Registers used:
 17517 ;;		wreg, status,2, status,0, cstack
 17518 ;; Tracked objects:
 17519 ;;		On entry : 0/0
 17520 ;;		On exit  : 0/0
 17521 ;;		Unchanged: 0/0
 17522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17526 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17527 ;;Total ram usage:        1 bytes
 17528 ;; Hardware stack levels used:    1
 17529 ;; Hardware stack levels required when called:    8
 17530 ;; This function calls:
 17531 ;;		_lcdNibble
 17532 ;; This function is called by:
 17533 ;;		_UI
 17534 ;;		_change_state_to_menu_start
 17535 ;;		_change_state_to_menu_12
 17536 ;;		_change_state_to_menu_22
 17537 ;;		_initLCD
 17538 ;;		_printRTC
 17539 ;;		_Loading
 17540 ;;		_EEPROM_write
 17541 ;;		_Test
 17542 ;;		_algorithmTest
 17543 ;;		_sensorTest
 17544 ;;		_actuatorTest
 17545 ;;		_BothServos
 17546 ;;		_PortTestDC
 17547 ;;		_PlatformTest
 17548 ;;		_SpeedTest
 17549 ;;		_BlockerTest
 17550 ;;		_arm
 17551 ;;		_PortTestPusher
 17552 ;;		_ToggleTestA5
 17553 ;; This function uses a non-reentrant model
 17554 ;;
 17555                           
 17556                           	psect	text57
 17557  0055FA                     __ptext57:
 17558                           	opt stack 0
 17559  0055FA                     _lcdInst:
 17560                           	opt stack 20
 17561                           
 17562                           ; BSR set to: 0
 17563                           ;incstack = 0
 17564                           ;lcdInst@data stored from wreg
 17565  0055FA  0100               	movlb	0	; () banked
 17566  0055FC  6F82               	movwf	lcdInst@data& (0+255),b
 17567                           
 17568                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17569  0055FE  948C               	bcf	3980,2,c	;volatile
 17570                           
 17571                           ;lcd.c: 17: lcdNibble(data);
 17572  005600  0100               	movlb	0	; () banked
 17573  005602  5182               	movf	lcdInst@data& (0+255),w,b
 17574  005604  ECD4  F025         	call	_lcdNibble
 17575  005608  0012               	return		;funcret
 17576  00560A                     __end_of_lcdInst:
 17577                           	opt stack 0
 17578                           tblptru	equ	0xFF8
 17579                           tblptrh	equ	0xFF7
 17580                           tblptrl	equ	0xFF6
 17581                           tablat	equ	0xFF5
 17582                           prodh	equ	0xFF4
 17583                           prodl	equ	0xFF3
 17584                           intcon	equ	0xFF2
 17585                           intcon2	equ	0xFF1
 17586                           intcon3	equ	0xFF0
 17587                           indf0	equ	0xFEF
 17588                           postinc0	equ	0xFEE
 17589                           fsr0h	equ	0xFEA
 17590                           fsr0l	equ	0xFE9
 17591                           wreg	equ	0xFE8
 17592                           postdec1	equ	0xFE5
 17593                           fsr1l	equ	0xFE1
 17594                           indf2	equ	0xFDF
 17595                           postinc2	equ	0xFDE
 17596                           postdec2	equ	0xFDD
 17597                           fsr2h	equ	0xFDA
 17598                           fsr2l	equ	0xFD9
 17599                           status	equ	0xFD8
 17600                           
 17601 ;; *************** function _lcdNibble *****************
 17602 ;; Defined at:
 17603 ;;		line 25 in file "lcd.c"
 17604 ;; Parameters:    Size  Location     Type
 17605 ;;  data            1    wreg     unsigned char 
 17606 ;; Auto vars:     Size  Location     Type
 17607 ;;  data            1    1[BANK0 ] unsigned char 
 17608 ;;  temp            1    0[BANK0 ] unsigned char 
 17609 ;; Return value:  Size  Location     Type
 17610 ;;                  1    wreg      void 
 17611 ;; Registers used:
 17612 ;;		wreg, status,2, status,0
 17613 ;; Tracked objects:
 17614 ;;		On entry : 0/0
 17615 ;;		On exit  : 0/0
 17616 ;;		Unchanged: 0/0
 17617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17622 ;;Total ram usage:        2 bytes
 17623 ;; Hardware stack levels used:    1
 17624 ;; Hardware stack levels required when called:    7
 17625 ;; This function calls:
 17626 ;;		Nothing
 17627 ;; This function is called by:
 17628 ;;		_lcdInst
 17629 ;;		_putch
 17630 ;; This function uses a non-reentrant model
 17631 ;;
 17632                           
 17633                           	psect	text58
 17634  004BA8                     __ptext58:
 17635                           	opt stack 0
 17636  004BA8                     _lcdNibble:
 17637                           	opt stack 20
 17638                           
 17639                           ;incstack = 0
 17640                           ;lcdNibble@data stored from wreg
 17641  004BA8  0100               	movlb	0	; () banked
 17642  004BAA  6F81               	movwf	lcdNibble@data& (0+255),b
 17643                           
 17644                           ;lcd.c: 27: char temp = data & 0xF0;
 17645  004BAC  0100               	movlb	0	; () banked
 17646  004BAE  5181               	movf	lcdNibble@data& (0+255),w,b
 17647  004BB0  0BF0               	andlw	240
 17648  004BB2  0100               	movlb	0	; () banked
 17649  004BB4  6F80               	movwf	lcdNibble@temp& (0+255),b
 17650                           
 17651                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17652  004BB6  508C               	movf	3980,w,c	;volatile
 17653  004BB8  0B0F               	andlw	15
 17654  004BBA  6E8C               	movwf	3980,c	;volatile
 17655                           
 17656                           ;lcd.c: 29: LATD = temp | LATD;
 17657  004BBC  0100               	movlb	0	; () banked
 17658  004BBE  5180               	movf	lcdNibble@temp& (0+255),w,b
 17659  004BC0  108C               	iorwf	3980,w,c	;volatile
 17660  004BC2  6E8C               	movwf	3980,c	;volatile
 17661                           
 17662                           ; BSR set to: 0
 17663                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17664  004BC4  868C               	bsf	3980,3,c	;volatile
 17665                           
 17666                           ; BSR set to: 0
 17667                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17668  004BC6  0E42               	movlw	66
 17669  004BC8                     u10647:
 17670  004BC8  2EE8               	decfsz	wreg,f,c
 17671  004BCA  D7FE               	bra	u10647
 17672  004BCC  D000               	nop2	
 17673                           
 17674                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17675  004BCE  968C               	bcf	3980,3,c	;volatile
 17676                           
 17677                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17678  004BD0  0E42               	movlw	66
 17679  004BD2                     u10657:
 17680  004BD2  2EE8               	decfsz	wreg,f,c
 17681  004BD4  D7FE               	bra	u10657
 17682  004BD6  D000               	nop2	
 17683                           
 17684                           ;lcd.c: 36: data = data << 4;
 17685  004BD8  0100               	movlb	0	; () banked
 17686  004BDA  3981               	swapf	lcdNibble@data& (0+255),w,b
 17687  004BDC  0BF0               	andlw	240
 17688  004BDE  0100               	movlb	0	; () banked
 17689  004BE0  6F81               	movwf	lcdNibble@data& (0+255),b
 17690                           
 17691                           ;lcd.c: 38: temp = data & 0xF0;
 17692  004BE2  0100               	movlb	0	; () banked
 17693  004BE4  5181               	movf	lcdNibble@data& (0+255),w,b
 17694  004BE6  0BF0               	andlw	240
 17695  004BE8  0100               	movlb	0	; () banked
 17696  004BEA  6F80               	movwf	lcdNibble@temp& (0+255),b
 17697                           
 17698                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17699  004BEC  508C               	movf	3980,w,c	;volatile
 17700  004BEE  0B0F               	andlw	15
 17701  004BF0  6E8C               	movwf	3980,c	;volatile
 17702                           
 17703                           ;lcd.c: 40: LATD = temp | LATD;
 17704  004BF2  0100               	movlb	0	; () banked
 17705  004BF4  5180               	movf	lcdNibble@temp& (0+255),w,b
 17706  004BF6  108C               	iorwf	3980,w,c	;volatile
 17707  004BF8  6E8C               	movwf	3980,c	;volatile
 17708                           
 17709                           ; BSR set to: 0
 17710                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17711  004BFA  868C               	bsf	3980,3,c	;volatile
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17715  004BFC  0E42               	movlw	66
 17716  004BFE                     u10667:
 17717  004BFE  2EE8               	decfsz	wreg,f,c
 17718  004C00  D7FE               	bra	u10667
 17719  004C02  D000               	nop2	
 17720                           
 17721                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17722  004C04  968C               	bcf	3980,3,c	;volatile
 17723                           
 17724                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17725  004C06  0E42               	movlw	66
 17726  004C08                     u10677:
 17727  004C08  2EE8               	decfsz	wreg,f,c
 17728  004C0A  D7FE               	bra	u10677
 17729  004C0C  D000               	nop2	
 17730  004C0E  0012               	return		;funcret
 17731  004C10                     __end_of_lcdNibble:
 17732                           	opt stack 0
 17733                           tblptru	equ	0xFF8
 17734                           tblptrh	equ	0xFF7
 17735                           tblptrl	equ	0xFF6
 17736                           tablat	equ	0xFF5
 17737                           prodh	equ	0xFF4
 17738                           prodl	equ	0xFF3
 17739                           intcon	equ	0xFF2
 17740                           intcon2	equ	0xFF1
 17741                           intcon3	equ	0xFF0
 17742                           indf0	equ	0xFEF
 17743                           postinc0	equ	0xFEE
 17744                           fsr0h	equ	0xFEA
 17745                           fsr0l	equ	0xFE9
 17746                           wreg	equ	0xFE8
 17747                           postdec1	equ	0xFE5
 17748                           fsr1l	equ	0xFE1
 17749                           indf2	equ	0xFDF
 17750                           postinc2	equ	0xFDE
 17751                           postdec2	equ	0xFDD
 17752                           fsr2h	equ	0xFDA
 17753                           fsr2l	equ	0xFD9
 17754                           status	equ	0xFD8
 17755                           
 17756 ;; *************** function _handler *****************
 17757 ;; Defined at:
 17758 ;;		line 16 in file "interruptHandler.c"
 17759 ;; Parameters:    Size  Location     Type
 17760 ;;		None
 17761 ;; Auto vars:     Size  Location     Type
 17762 ;;		None
 17763 ;; Return value:  Size  Location     Type
 17764 ;;                  1    wreg      void 
 17765 ;; Registers used:
 17766 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17767 ;; Tracked objects:
 17768 ;;		On entry : 0/0
 17769 ;;		On exit  : 0/0
 17770 ;;		Unchanged: 0/0
 17771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17774 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17775 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17776 ;;Total ram usage:       16 bytes
 17777 ;; Hardware stack levels used:    1
 17778 ;; Hardware stack levels required when called:    6
 17779 ;; This function calls:
 17780 ;;		_printSortTimer
 17781 ;;		_updateArmState
 17782 ;;		_updateMenu
 17783 ;;		_updateServoStates
 17784 ;;		i2_change_state_to_menu_start
 17785 ;; This function is called by:
 17786 ;;		Interrupt level 2
 17787 ;; This function uses a non-reentrant model
 17788 ;;
 17789                           
 17790                           	psect	intcode
 17791  000008                     __pintcode:
 17792                           	opt stack 0
 17793  000008                     _handler:
 17794                           	opt stack 18
 17795                           
 17796                           ;incstack = 0
 17797  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17798  00000A  ED67  F01A         	call	int_func,f	;refresh shadow registers
 17799                           tblptru	equ	0xFF8
 17800                           tblptrh	equ	0xFF7
 17801                           tblptrl	equ	0xFF6
 17802                           tablat	equ	0xFF5
 17803                           prodh	equ	0xFF4
 17804                           prodl	equ	0xFF3
 17805                           intcon	equ	0xFF2
 17806                           intcon2	equ	0xFF1
 17807                           intcon3	equ	0xFF0
 17808                           indf0	equ	0xFEF
 17809                           postinc0	equ	0xFEE
 17810                           fsr0h	equ	0xFEA
 17811                           fsr0l	equ	0xFE9
 17812                           wreg	equ	0xFE8
 17813                           postdec1	equ	0xFE5
 17814                           fsr1l	equ	0xFE1
 17815                           indf2	equ	0xFDF
 17816                           postinc2	equ	0xFDE
 17817                           postdec2	equ	0xFDD
 17818                           fsr2h	equ	0xFDA
 17819                           fsr2l	equ	0xFD9
 17820                           status	equ	0xFD8
 17821                           
 17822                           	psect	intcode_body
 17823  0034CE                     __pintcode_body:
 17824                           	opt stack 18
 17825  0034CE                     int_func:
 17826                           	opt stack 18
 17827  0034CE  0006               	pop		; remove dummy address from shadow register refresh
 17828  0034D0  CFFA F04D          	movff	pclath,??_handler+2
 17829  0034D4  CFFB F04E          	movff	pclatu,??_handler+3
 17830  0034D8  CFE9 F04F          	movff	fsr0l,??_handler+4
 17831  0034DC  CFEA F050          	movff	fsr0h,??_handler+5
 17832  0034E0  CFE1 F051          	movff	fsr1l,??_handler+6
 17833  0034E4  CFE2 F052          	movff	fsr1h,??_handler+7
 17834  0034E8  CFD9 F053          	movff	fsr2l,??_handler+8
 17835  0034EC  CFDA F054          	movff	fsr2h,??_handler+9
 17836  0034F0  CFF3 F055          	movff	prodl,??_handler+10
 17837  0034F4  CFF4 F056          	movff	prodh,??_handler+11
 17838  0034F8  CFF6 F057          	movff	tblptrl,??_handler+12
 17839  0034FC  CFF7 F058          	movff	tblptrh,??_handler+13
 17840  003500  CFF8 F059          	movff	tblptru,??_handler+14
 17841  003504  CFF5 F05A          	movff	tablat,??_handler+15
 17842                           
 17843                           ;interruptHandler.c: 18: if(INT1IF){
 17844  003508  A0F0               	btfss	intcon3,0,c	;volatile
 17845  00350A  D034               	goto	i2l9732
 17846                           
 17847                           ;interruptHandler.c: 19: INT1IF = 0;
 17848  00350C  90F0               	bcf	intcon3,0,c	;volatile
 17849                           
 17850                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 17851  00350E  3881               	swapf	3969,w,c	;volatile
 17852  003510  0B0F               	andlw	15
 17853  003512  0B0F               	andlw	15
 17854  003514  6E4B               	movwf	??_handler& (0+255),c
 17855  003516  6A4C               	clrf	(??_handler+1)& (0+255),c
 17856  003518  0EA3               	movlw	low _keys
 17857  00351A  244B               	addwf	??_handler,w,c
 17858  00351C  6EF6               	movwf	tblptrl,c
 17859  00351E  0EFA               	movlw	high _keys
 17860  003520  204C               	addwfc	??_handler+1,w,c
 17861  003522  6EF7               	movwf	tblptrh,c
 17862  003524                     	if	1	;There are 3 active tblptr bytes
 17863  003524  6AF8               	clrf	tblptru,c
 17864  003526  0E00               	movlw	low (__mediumconst shr (0+16))
 17865  003528  22F8               	addwfc	tblptru,f,c
 17866  00352A                     	endif
 17867  00352A  0008               	tblrd		*
 17868  00352C  CFF5 F07D          	movff	tablat,_input	;volatile
 17869                           
 17870                           ;interruptHandler.c: 21: if(input == '*'){
 17871  003530  0E2A               	movlw	42
 17872  003532  187D               	xorwf	_input,w,c	;volatile
 17873  003534  B4D8               	btfsc	status,2,c
 17874  003536  D00D               	goto	i2l9726
 17875  003538  D018               	goto	i2l9728
 17876  00353A                     i2l9716:
 17877                           
 17878                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17879  00353A  0E03               	movlw	3
 17880  00353C  D007               	goto	L16
 17881  00353E                     i2l9718:
 17882                           
 17883                           ; BSR set to: 0
 17884                           ;interruptHandler.c: 27: machine_state = UI_state;
 17885  00353E  0E00               	movlw	0
 17886  003540  0100               	movlb	0	; () banked
 17887  003542  6FFC               	movwf	_machine_state& (0+255),b
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;interruptHandler.c: 28: change_state_to_menu_start();
 17891  003544  EC32  F02A         	call	i2_change_state_to_menu_start	;wreg free
 17892                           
 17893                           ;interruptHandler.c: 29: break;
 17894  003548  D015               	goto	i2l9732
 17895  00354A                     i2l9722:
 17896                           
 17897                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 17898  00354A  0E02               	movlw	2
 17899  00354C                     L16:
 17900  00354C  0100               	movlb	0	; () banked
 17901  00354E  6FFC               	movwf	_machine_state& (0+255),b
 17902                           
 17903                           ; BSR set to: 0
 17904                           ;interruptHandler.c: 33: }
 17905                           
 17906                           ;interruptHandler.c: 32: break;
 17907  003550  D011               	goto	i2l9732
 17908  003552                     i2l9726:
 17909  003552  0100               	movlb	0	; () banked
 17910  003554  51FC               	movf	_machine_state& (0+255),w,b
 17911                           
 17912                           ; Switch size 1, requested type "space"
 17913                           ; Number of cases is 3, Range of values is 0 to 3
 17914                           ; switch strategies available:
 17915                           ; Name         Instructions Cycles
 17916                           ; simple_byte           10     6 (average)
 17917                           ;	Chosen strategy is simple_byte
 17918  003556  0A00               	xorlw	0	; case 0
 17919  003558  B4D8               	btfsc	status,2,c
 17920  00355A  D7EF               	goto	i2l9716
 17921  00355C  0A01               	xorlw	1	; case 1
 17922  00355E  B4D8               	btfsc	status,2,c
 17923  003560  D7F4               	goto	i2l9722
 17924  003562  0A02               	xorlw	2	; case 3
 17925  003564  B4D8               	btfsc	status,2,c
 17926  003566  D7EB               	goto	i2l9718
 17927                           
 17928                           ; BSR set to: 0
 17929                           ;interruptHandler.c: 34: }
 17930  003568  D005               	goto	i2l9732
 17931  00356A                     i2l9728:
 17932                           
 17933                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 17934  00356A  0100               	movlb	0	; () banked
 17935  00356C  51FC               	movf	_machine_state& (0+255),w,b
 17936  00356E  B4D8               	btfsc	status,2,c
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;interruptHandler.c: 36: updateMenu();
 17940  003570  EC00  F014         	call	_updateMenu	;wreg free
 17941  003574                     i2l9732:
 17942                           
 17943                           ;interruptHandler.c: 37: }
 17944                           ;interruptHandler.c: 38: }
 17945                           ;interruptHandler.c: 41: if(TMR0IF){
 17946  003574  A4F2               	btfss	intcon,2,c	;volatile
 17947  003576  D00C               	goto	i2l9746
 17948                           
 17949                           ;interruptHandler.c: 42: TMR0IF = 0;
 17950  003578  94F2               	bcf	intcon,2,c	;volatile
 17951                           
 17952                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 17953  00357A  0100               	movlb	0	; () banked
 17954  00357C  05FC               	decf	_machine_state& (0+255),w,b
 17955  00357E  A4D8               	btfss	status,2,c
 17956  003580  D007               	goto	i2l9746
 17957                           
 17958                           ; BSR set to: 0
 17959                           ;interruptHandler.c: 44: printSortTimer();
 17960  003582  ECBF  F016         	call	_printSortTimer	;wreg free
 17961                           
 17962                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 17963  003586  0E85               	movlw	133
 17964  003588  6ED7               	movwf	4055,c	;volatile
 17965                           
 17966                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 17967  00358A  0EEE               	movlw	238
 17968  00358C  6ED6               	movwf	4054,c	;volatile
 17969                           
 17970                           ;interruptHandler.c: 48: TMR0ON = 1;
 17971  00358E  8ED5               	bsf	4053,7,c	;volatile
 17972  003590                     i2l9746:
 17973                           
 17974                           ;interruptHandler.c: 49: }
 17975                           ;interruptHandler.c: 50: }
 17976                           ;interruptHandler.c: 53: if(TMR1IF){
 17977  003590  A09E               	btfss	3998,0,c	;volatile
 17978  003592  D02A               	goto	i2l9774
 17979                           
 17980                           ;interruptHandler.c: 54: TMR1IF = 0;
 17981  003594  909E               	bcf	3998,0,c	;volatile
 17982                           
 17983                           ;interruptHandler.c: 55: TMR1ON = 0;
 17984  003596  90CD               	bcf	4045,0,c	;volatile
 17985                           
 17986                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 17987  003598  0100               	movlb	0	; () banked
 17988  00359A  05FC               	decf	_machine_state& (0+255),w,b
 17989  00359C  A4D8               	btfss	status,2,c
 17990  00359E  D024               	goto	i2l9774
 17991                           
 17992                           ; BSR set to: 0
 17993                           ;interruptHandler.c: 57: if(was_low_1){
 17994  0035A0  5077               	movf	_was_low_1,w,c	;volatile
 17995  0035A2  1078               	iorwf	_was_low_1+1,w,c	;volatile
 17996  0035A4  B4D8               	btfsc	status,2,c
 17997  0035A6  D00A               	goto	i2l1009
 17998                           
 17999                           ; BSR set to: 0
 18000                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 18001  0035A8  828B               	bsf	3979,1,c	;volatile
 18002                           
 18003                           ; BSR set to: 0
 18004                           ;interruptHandler.c: 59: was_low_1 = 0;
 18005  0035AA  0E00               	movlw	0
 18006  0035AC  6E78               	movwf	_was_low_1+1,c	;volatile
 18007  0035AE  0E00               	movlw	0
 18008  0035B0  6E77               	movwf	_was_low_1,c	;volatile
 18009                           
 18010                           ; BSR set to: 0
 18011                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 18012  0035B2  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 18013                           
 18014                           ; BSR set to: 0
 18015                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 18016  0035B6  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 18017                           
 18018                           ;interruptHandler.c: 62: }
 18019  0035BA  D00F               	goto	i2l9768
 18020  0035BC                     i2l1009:
 18021                           
 18022                           ; BSR set to: 0
 18023                           ;interruptHandler.c: 63: else{
 18024                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 18025  0035BC  928B               	bcf	3979,1,c	;volatile
 18026                           
 18027                           ; BSR set to: 0
 18028                           ;interruptHandler.c: 65: was_low_1 = 1;
 18029  0035BE  0E00               	movlw	0
 18030  0035C0  6E78               	movwf	_was_low_1+1,c	;volatile
 18031  0035C2  0E01               	movlw	1
 18032  0035C4  6E77               	movwf	_was_low_1,c	;volatile
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 18036  0035C6  0100               	movlb	0	; () banked
 18037  0035C8  51DA               	movf	_servoTimes& (0+255),w,b
 18038  0035CA  0800               	sublw	0
 18039  0035CC  0F20               	addlw	32
 18040  0035CE  6ECF               	movwf	4047,c	;volatile
 18041                           
 18042                           ; BSR set to: 0
 18043                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 18044  0035D0  0100               	movlb	0	; () banked
 18045  0035D2  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 18046  0035D4  0800               	sublw	0
 18047  0035D6  0F20               	addlw	32
 18048  0035D8  6ECE               	movwf	4046,c	;volatile
 18049  0035DA                     i2l9768:
 18050                           
 18051                           ; BSR set to: 0
 18052                           ;interruptHandler.c: 68: }
 18053                           ;interruptHandler.c: 69: TMR1ON = 1;
 18054  0035DA  80CD               	bsf	4045,0,c	;volatile
 18055                           
 18056                           ; BSR set to: 0
 18057                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 18058  0035DC  0E0A               	movlw	10
 18059  0035DE  266D               	addwf	_servo_timer_counter,f,c	;volatile
 18060  0035E0  0E00               	movlw	0
 18061  0035E2  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;interruptHandler.c: 72: updateServoStates();
 18065  0035E4  EC56  F01C         	call	_updateServoStates	;wreg free
 18066  0035E8                     i2l9774:
 18067                           
 18068                           ;interruptHandler.c: 73: }
 18069                           ;interruptHandler.c: 74: }
 18070                           ;interruptHandler.c: 77: if(TMR2IF){
 18071  0035E8  A29E               	btfss	3998,1,c	;volatile
 18072  0035EA  D026               	goto	i2l9800
 18073                           
 18074                           ;interruptHandler.c: 80: TMR2IF = 0;
 18075  0035EC  929E               	bcf	3998,1,c	;volatile
 18076                           
 18077                           ;interruptHandler.c: 81: TMR2ON = 0;
 18078  0035EE  94CA               	bcf	4042,2,c	;volatile
 18079                           
 18080                           ;interruptHandler.c: 82: timer2_counter++;
 18081  0035F0  4A73               	infsnz	_timer2_counter,f,c	;volatile
 18082  0035F2  2A74               	incf	_timer2_counter+1,f,c	;volatile
 18083                           
 18084                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 18085  0035F4  0100               	movlb	0	; () banked
 18086  0035F6  05FC               	decf	_machine_state& (0+255),w,b
 18087  0035F8  A4D8               	btfss	status,2,c
 18088  0035FA  D01E               	goto	i2l9800
 18089                           
 18090                           ; BSR set to: 0
 18091                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 18092  0035FC  5079               	movf	_was_low_2,w,c	;volatile
 18093  0035FE  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18094  003600  B4D8               	btfsc	status,2,c
 18095  003602  D00A               	goto	i2l9790
 18096                           
 18097                           ; BSR set to: 0
 18098  003604  0E02               	movlw	2
 18099  003606  1873               	xorwf	_timer2_counter,w,c	;volatile
 18100  003608  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 18101  00360A  A4D8               	btfss	status,2,c
 18102  00360C  D005               	goto	i2l9790
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 18106  00360E  868A               	bsf	3978,3,c	;volatile
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;interruptHandler.c: 87: was_low_2 = 0;
 18110  003610  0E00               	movlw	0
 18111  003612  6E7A               	movwf	_was_low_2+1,c	;volatile
 18112  003614  0E00               	movlw	0
 18113  003616  D008               	goto	L17
 18114  003618                     i2l9790:
 18115                           
 18116                           ; BSR set to: 0
 18117                           ;interruptHandler.c: 90: else if(!was_low_2){
 18118  003618  5079               	movf	_was_low_2,w,c	;volatile
 18119  00361A  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18120  00361C  A4D8               	btfss	status,2,c
 18121  00361E  D009               	goto	i2l9796
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 18125  003620  968A               	bcf	3978,3,c	;volatile
 18126                           
 18127                           ; BSR set to: 0
 18128                           ;interruptHandler.c: 92: was_low_2 = 1;
 18129  003622  0E00               	movlw	0
 18130  003624  6E7A               	movwf	_was_low_2+1,c	;volatile
 18131  003626  0E01               	movlw	1
 18132  003628                     L17:
 18133  003628  6E79               	movwf	_was_low_2,c	;volatile
 18134                           
 18135                           ;interruptHandler.c: 93: timer2_counter = 0;
 18136  00362A  0E00               	movlw	0
 18137  00362C  6E74               	movwf	_timer2_counter+1,c	;volatile
 18138  00362E  0E00               	movlw	0
 18139  003630  6E73               	movwf	_timer2_counter,c	;volatile
 18140  003632                     i2l9796:
 18141                           
 18142                           ; BSR set to: 0
 18143                           ;interruptHandler.c: 94: }
 18144                           ;interruptHandler.c: 95: updateArmState();
 18145  003632  EC02  F028         	call	_updateArmState	;wreg free
 18146                           
 18147                           ;interruptHandler.c: 96: TMR2ON = 1;
 18148  003636  84CA               	bsf	4042,2,c	;volatile
 18149  003638                     i2l9800:
 18150                           
 18151                           ;interruptHandler.c: 97: }
 18152                           ;interruptHandler.c: 98: }
 18153                           ;interruptHandler.c: 101: if(TMR3IF){
 18154  003638  A2A1               	btfss	4001,1,c	;volatile
 18155  00363A  D024               	goto	i2l1020
 18156                           
 18157                           ;interruptHandler.c: 102: TMR3IF = 0;
 18158  00363C  92A1               	bcf	4001,1,c	;volatile
 18159                           
 18160                           ;interruptHandler.c: 103: TMR3ON = 0;
 18161  00363E  90B1               	bcf	4017,0,c	;volatile
 18162                           
 18163                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 18164  003640  0100               	movlb	0	; () banked
 18165  003642  05FC               	decf	_machine_state& (0+255),w,b
 18166  003644  A4D8               	btfss	status,2,c
 18167  003646  D01E               	goto	i2l1020
 18168                           
 18169                           ; BSR set to: 0
 18170                           ;interruptHandler.c: 105: if(was_low_3){
 18171  003648  507B               	movf	_was_low_3,w,c	;volatile
 18172  00364A  107C               	iorwf	_was_low_3+1,w,c	;volatile
 18173  00364C  B4D8               	btfsc	status,2,c
 18174  00364E  D00A               	goto	i2l1018
 18175                           
 18176                           ; BSR set to: 0
 18177                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 18178  003650  848B               	bsf	3979,2,c	;volatile
 18179                           
 18180                           ; BSR set to: 0
 18181                           ;interruptHandler.c: 107: was_low_3 = 0;
 18182  003652  0E00               	movlw	0
 18183  003654  6E7C               	movwf	_was_low_3+1,c	;volatile
 18184  003656  0E00               	movlw	0
 18185  003658  6E7B               	movwf	_was_low_3,c	;volatile
 18186                           
 18187                           ; BSR set to: 0
 18188                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 18189  00365A  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 18190                           
 18191                           ; BSR set to: 0
 18192                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 18193  00365E  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 18194                           
 18195                           ;interruptHandler.c: 110: }
 18196  003662  D00F               	goto	i2l9822
 18197  003664                     i2l1018:
 18198                           
 18199                           ; BSR set to: 0
 18200                           ;interruptHandler.c: 111: else{
 18201                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 18202  003664  948B               	bcf	3979,2,c	;volatile
 18203                           
 18204                           ; BSR set to: 0
 18205                           ;interruptHandler.c: 113: was_low_3 = 1;
 18206  003666  0E00               	movlw	0
 18207  003668  6E7C               	movwf	_was_low_3+1,c	;volatile
 18208  00366A  0E01               	movlw	1
 18209  00366C  6E7B               	movwf	_was_low_3,c	;volatile
 18210                           
 18211                           ; BSR set to: 0
 18212                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 18213  00366E  0100               	movlb	0	; () banked
 18214  003670  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 18215  003672  0800               	sublw	0
 18216  003674  0F20               	addlw	32
 18217  003676  6EB3               	movwf	4019,c	;volatile
 18218                           
 18219                           ; BSR set to: 0
 18220                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 18221  003678  0100               	movlb	0	; () banked
 18222  00367A  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 18223  00367C  0800               	sublw	0
 18224  00367E  0F20               	addlw	32
 18225  003680  6EB2               	movwf	4018,c	;volatile
 18226  003682                     i2l9822:
 18227                           
 18228                           ; BSR set to: 0
 18229                           ;interruptHandler.c: 116: }
 18230                           ;interruptHandler.c: 117: TMR3ON = 1;
 18231  003682  80B1               	bsf	4017,0,c	;volatile
 18232  003684                     i2l1020:
 18233  003684  C05A  FFF5         	movff	??_handler+15,tablat
 18234  003688  C059  FFF8         	movff	??_handler+14,tblptru
 18235  00368C  C058  FFF7         	movff	??_handler+13,tblptrh
 18236  003690  C057  FFF6         	movff	??_handler+12,tblptrl
 18237  003694  C056  FFF4         	movff	??_handler+11,prodh
 18238  003698  C055  FFF3         	movff	??_handler+10,prodl
 18239  00369C  C054  FFDA         	movff	??_handler+9,fsr2h
 18240  0036A0  C053  FFD9         	movff	??_handler+8,fsr2l
 18241  0036A4  C052  FFE2         	movff	??_handler+7,fsr1h
 18242  0036A8  C051  FFE1         	movff	??_handler+6,fsr1l
 18243  0036AC  C050  FFEA         	movff	??_handler+5,fsr0h
 18244  0036B0  C04F  FFE9         	movff	??_handler+4,fsr0l
 18245  0036B4  C04E  FFFB         	movff	??_handler+3,pclatu
 18246  0036B8  C04D  FFFA         	movff	??_handler+2,pclath
 18247  0036BC  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 18248  0036BE  0011               	retfie		f
 18249  0036C0                     __end_of_handler:
 18250                           	opt stack 0
 18251                           pclatu	equ	0xFFB
 18252                           pclath	equ	0xFFA
 18253                           tblptru	equ	0xFF8
 18254                           tblptrh	equ	0xFF7
 18255                           tblptrl	equ	0xFF6
 18256                           tablat	equ	0xFF5
 18257                           prodh	equ	0xFF4
 18258                           prodl	equ	0xFF3
 18259                           intcon	equ	0xFF2
 18260                           intcon2	equ	0xFF1
 18261                           intcon3	equ	0xFF0
 18262                           indf0	equ	0xFEF
 18263                           postinc0	equ	0xFEE
 18264                           fsr0h	equ	0xFEA
 18265                           fsr0l	equ	0xFE9
 18266                           wreg	equ	0xFE8
 18267                           postdec1	equ	0xFE5
 18268                           fsr1h	equ	0xFE2
 18269                           fsr1l	equ	0xFE1
 18270                           indf2	equ	0xFDF
 18271                           postinc2	equ	0xFDE
 18272                           postdec2	equ	0xFDD
 18273                           fsr2h	equ	0xFDA
 18274                           fsr2l	equ	0xFD9
 18275                           status	equ	0xFD8
 18276                           
 18277 ;; *************** function _updateServoStates *****************
 18278 ;; Defined at:
 18279 ;;		line 537 in file "sort.c"
 18280 ;; Parameters:    Size  Location     Type
 18281 ;;		None
 18282 ;; Auto vars:     Size  Location     Type
 18283 ;;		None
 18284 ;; Return value:  Size  Location     Type
 18285 ;;                  1    wreg      void 
 18286 ;; Registers used:
 18287 ;;		wreg, status,2, status,0, cstack
 18288 ;; Tracked objects:
 18289 ;;		On entry : 0/0
 18290 ;;		On exit  : 0/0
 18291 ;;		Unchanged: 0/0
 18292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18295 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18296 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18297 ;;Total ram usage:        2 bytes
 18298 ;; Hardware stack levels used:    1
 18299 ;; Hardware stack levels required when called:    1
 18300 ;; This function calls:
 18301 ;;		i2_updateServoPosition
 18302 ;; This function is called by:
 18303 ;;		_handler
 18304 ;; This function uses a non-reentrant model
 18305 ;;
 18306                           
 18307                           	psect	text60
 18308  0038AC                     __ptext60:
 18309                           	opt stack 0
 18310  0038AC                     _updateServoStates:
 18311                           	opt stack 22
 18312                           
 18313                           ;sort.c: 539: if(servo_timer_counter >= servo_timer_target){
 18314                           
 18315                           ;incstack = 0
 18316  0038AC  506F               	movf	_servo_timer_target,w,c	;volatile
 18317  0038AE  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 18318  0038B0  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 18319  0038B2  0A80               	xorlw	128
 18320  0038B4  6E09               	movwf	??_updateServoStates& (0+255),c
 18321  0038B6  5070               	movf	_servo_timer_target+1,w,c	;volatile
 18322  0038B8  0A80               	xorlw	128
 18323  0038BA  5809               	subwfb	??_updateServoStates& (0+255),w,c
 18324  0038BC  A0D8               	btfss	status,0,c
 18325  0038BE  0012               	return	
 18326                           
 18327                           ;sort.c: 541: if(f_panning_to_bin){
 18328  0038C0  5061               	movf	_f_panning_to_bin,w,c	;volatile
 18329  0038C2  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 18330  0038C4  A4D8               	btfss	status,2,c
 18331  0038C6  D036               	goto	i2l9592
 18332  0038C8  D05F               	goto	i2l9596
 18333  0038CA                     i2l9566:
 18334                           
 18335                           ;sort.c: 545: updateServoPosition(1260, 3);
 18336  0038CA  0E04               	movlw	4
 18337  0038CC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18338  0038CE  0EEC               	movlw	236
 18339  0038D0  6E01               	movwf	i2updateServoPosition@time_us,c
 18340  0038D2  0E00               	movlw	0
 18341  0038D4  6E04               	movwf	i2updateServoPosition@timer+1,c
 18342  0038D6  0E03               	movlw	3
 18343  0038D8  6E03               	movwf	i2updateServoPosition@timer,c
 18344  0038DA  EC9C  F025         	call	i2_updateServoPosition	;wreg free
 18345  0038DE  D025               	goto	i2l9586
 18346  0038E0                     i2l9570:
 18347                           
 18348                           ;sort.c: 547: servo_timer_target = 700;
 18349  0038E0  0E02               	movlw	2
 18350  0038E2  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18351  0038E4  0EBC               	movlw	188
 18352  0038E6  6E6F               	movwf	_servo_timer_target,c	;volatile
 18353                           
 18354                           ;sort.c: 548: break;
 18355  0038E8  D04A               	goto	i2l9594
 18356  0038EA                     i2l9572:
 18357                           
 18358                           ;sort.c: 550: updateServoPosition(1260, 3);
 18359  0038EA  0E04               	movlw	4
 18360  0038EC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18361  0038EE  0EEC               	movlw	236
 18362  0038F0  6E01               	movwf	i2updateServoPosition@time_us,c
 18363  0038F2  0E00               	movlw	0
 18364  0038F4  6E04               	movwf	i2updateServoPosition@timer+1,c
 18365  0038F6  0E03               	movlw	3
 18366  0038F8  6E03               	movwf	i2updateServoPosition@timer,c
 18367  0038FA  EC9C  F025         	call	i2_updateServoPosition	;wreg free
 18368  0038FE  D015               	goto	i2l9586
 18369  003900                     i2l9578:
 18370                           
 18371                           ;sort.c: 556: updateServoPosition(1390, 3);
 18372  003900  0E05               	movlw	5
 18373  003902  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18374  003904  0E6E               	movlw	110
 18375  003906  6E01               	movwf	i2updateServoPosition@time_us,c
 18376  003908  0E00               	movlw	0
 18377  00390A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18378  00390C  0E03               	movlw	3
 18379  00390E  6E03               	movwf	i2updateServoPosition@timer,c
 18380  003910  EC9C  F025         	call	i2_updateServoPosition	;wreg free
 18381  003914  D00A               	goto	i2l9586
 18382  003916                     i2l9584:
 18383                           
 18384                           ;sort.c: 561: updateServoPosition(1390, 3);
 18385  003916  0E05               	movlw	5
 18386  003918  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18387  00391A  0E6E               	movlw	110
 18388  00391C  6E01               	movwf	i2updateServoPosition@time_us,c
 18389  00391E  0E00               	movlw	0
 18390  003920  6E04               	movwf	i2updateServoPosition@timer+1,c
 18391  003922  0E03               	movlw	3
 18392  003924  6E03               	movwf	i2updateServoPosition@timer,c
 18393  003926  EC9C  F025         	call	i2_updateServoPosition	;wreg free
 18394  00392A                     i2l9586:
 18395                           
 18396                           ;sort.c: 562: servo_timer_counter = 0;
 18397  00392A  0E00               	movlw	0
 18398  00392C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18399  00392E  0E00               	movlw	0
 18400  003930  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18401  003932  D7D6               	goto	i2l9570
 18402  003934                     i2l9592:
 18403  003934  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 18404  003938  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 18405                           
 18406                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18407                           ; Switch size 1, requested type "space"
 18408                           ; Number of cases is 4, Range of values is 1 to 9
 18409                           ; switch strategies available:
 18410                           ; Name         Instructions Cycles
 18411                           ; simple_byte           13     7 (average)
 18412                           ;	Chosen strategy is simple_byte
 18413  00393C  500A               	movf	??_updateServoStates+1,w,c
 18414  00393E  0A01               	xorlw	1	; case 1
 18415  003940  B4D8               	btfsc	status,2,c
 18416  003942  D00A               	goto	i2l10270
 18417  003944  0A02               	xorlw	2	; case 3
 18418  003946  B4D8               	btfsc	status,2,c
 18419  003948  D00C               	goto	i2l10272
 18420  00394A  0A05               	xorlw	5	; case 6
 18421  00394C  B4D8               	btfsc	status,2,c
 18422  00394E  D00E               	goto	i2l10274
 18423  003950  0A0F               	xorlw	15	; case 9
 18424  003952  B4D8               	btfsc	status,2,c
 18425  003954  D010               	goto	i2l10276
 18426  003956  D013               	goto	i2l9594
 18427  003958                     i2l10270:
 18428                           
 18429                           ; Switch size 1, requested type "space"
 18430                           ; Number of cases is 1, Range of values is 244 to 244
 18431                           ; switch strategies available:
 18432                           ; Name         Instructions Cycles
 18433                           ; simple_byte            4     3 (average)
 18434                           ;	Chosen strategy is simple_byte
 18435  003958  5009               	movf	??_updateServoStates,w,c
 18436  00395A  0AF4               	xorlw	244	; case 244
 18437  00395C  B4D8               	btfsc	status,2,c
 18438  00395E  D7B5               	goto	i2l9566
 18439  003960  D00E               	goto	i2l9594
 18440  003962                     i2l10272:
 18441                           
 18442                           ; Switch size 1, requested type "space"
 18443                           ; Number of cases is 1, Range of values is 82 to 82
 18444                           ; switch strategies available:
 18445                           ; Name         Instructions Cycles
 18446                           ; simple_byte            4     3 (average)
 18447                           ;	Chosen strategy is simple_byte
 18448  003962  5009               	movf	??_updateServoStates,w,c
 18449  003964  0A52               	xorlw	82	; case 82
 18450  003966  B4D8               	btfsc	status,2,c
 18451  003968  D7C0               	goto	i2l9572
 18452  00396A  D009               	goto	i2l9594
 18453  00396C                     i2l10274:
 18454                           
 18455                           ; Switch size 1, requested type "space"
 18456                           ; Number of cases is 1, Range of values is 134 to 134
 18457                           ; switch strategies available:
 18458                           ; Name         Instructions Cycles
 18459                           ; simple_byte            4     3 (average)
 18460                           ;	Chosen strategy is simple_byte
 18461  00396C  5009               	movf	??_updateServoStates,w,c
 18462  00396E  0A86               	xorlw	134	; case 134
 18463  003970  B4D8               	btfsc	status,2,c
 18464  003972  D7C6               	goto	i2l9578
 18465  003974  D004               	goto	i2l9594
 18466  003976                     i2l10276:
 18467                           
 18468                           ; Switch size 1, requested type "space"
 18469                           ; Number of cases is 1, Range of values is 96 to 96
 18470                           ; switch strategies available:
 18471                           ; Name         Instructions Cycles
 18472                           ; simple_byte            4     3 (average)
 18473                           ;	Chosen strategy is simple_byte
 18474  003976  5009               	movf	??_updateServoStates,w,c
 18475  003978  0A60               	xorlw	96	; case 96
 18476  00397A  B4D8               	btfsc	status,2,c
 18477  00397C  D7CC               	goto	i2l9584
 18478  00397E                     i2l9594:
 18479                           
 18480                           ;sort.c: 568: f_panning_to_bin = 0;
 18481  00397E  0E00               	movlw	0
 18482  003980  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 18483  003982  0E00               	movlw	0
 18484  003984  6E61               	movwf	_f_panning_to_bin,c	;volatile
 18485                           
 18486                           ;sort.c: 569: }
 18487  003986  0012               	return	
 18488  003988                     i2l9596:
 18489                           
 18490                           ;sort.c: 570: else if(pan_servo_state == 1200){
 18491  003988  0EB0               	movlw	176
 18492  00398A  186B               	xorwf	_pan_servo_state,w,c	;volatile
 18493  00398C  E15A               	bnz	i2l9626
 18494  00398E  0E04               	movlw	4
 18495  003990  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 18496  003992  A4D8               	btfss	status,2,c
 18497  003994  D056               	goto	i2l9626
 18498                           
 18499                           ;sort.c: 572: servo_timer_counter = 0;
 18500  003996  0E00               	movlw	0
 18501  003998  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18502  00399A  0E00               	movlw	0
 18503  00399C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18504                           
 18505                           ;sort.c: 573: }
 18506  00399E  0012               	return	
 18507  0039A0                     i2l9600:
 18508                           
 18509                           ;sort.c: 578: updateServoPosition(1050, 3);
 18510  0039A0  0E04               	movlw	4
 18511  0039A2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18512  0039A4  0E1A               	movlw	26
 18513  0039A6  6E01               	movwf	i2updateServoPosition@time_us,c
 18514  0039A8  0E00               	movlw	0
 18515  0039AA  6E04               	movwf	i2updateServoPosition@timer+1,c
 18516  0039AC  0E03               	movlw	3
 18517  0039AE  6E03               	movwf	i2updateServoPosition@timer,c
 18518  0039B0  EC9C  F025         	call	i2_updateServoPosition	;wreg free
 18519                           
 18520                           ;sort.c: 579: servo_timer_counter = 0;
 18521  0039B4  0E00               	movlw	0
 18522  0039B6  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18523  0039B8  0E00               	movlw	0
 18524  0039BA  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18525                           
 18526                           ;sort.c: 580: servo_timer_target = 750;
 18527  0039BC  0E02               	movlw	2
 18528  0039BE  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18529  0039C0  0EEE               	movlw	238
 18530  0039C2  6E6F               	movwf	_servo_timer_target,c	;volatile
 18531                           
 18532                           ;sort.c: 581: break;
 18533  0039C4  0012               	return	
 18534  0039C6                     i2l9606:
 18535                           
 18536                           ;sort.c: 583: updateServoPosition(1050, 3);
 18537  0039C6  0E04               	movlw	4
 18538  0039C8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18539  0039CA  0E1A               	movlw	26
 18540  0039CC  6E01               	movwf	i2updateServoPosition@time_us,c
 18541  0039CE  0E00               	movlw	0
 18542  0039D0  6E04               	movwf	i2updateServoPosition@timer+1,c
 18543  0039D2  0E03               	movlw	3
 18544  0039D4  6E03               	movwf	i2updateServoPosition@timer,c
 18545  0039D6  EC9C  F025         	call	i2_updateServoPosition	;wreg free
 18546                           
 18547                           ;sort.c: 584: servo_timer_counter = 0;
 18548  0039DA  0E00               	movlw	0
 18549  0039DC  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18550  0039DE  0E00               	movlw	0
 18551  0039E0  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18552                           
 18553                           ;sort.c: 585: servo_timer_target = 750;
 18554  0039E2  0E02               	movlw	2
 18555  0039E4  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18556  0039E6  0EEE               	movlw	238
 18557  0039E8  6E6F               	movwf	_servo_timer_target,c	;volatile
 18558                           
 18559                           ;sort.c: 586: break;
 18560  0039EA  0012               	return	
 18561  0039EC                     i2l9612:
 18562                           
 18563                           ;sort.c: 589: updateServoPosition(1200, 1);
 18564  0039EC  0E04               	movlw	4
 18565  0039EE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18566  0039F0  0EB0               	movlw	176
 18567  0039F2  6E01               	movwf	i2updateServoPosition@time_us,c
 18568  0039F4  0E00               	movlw	0
 18569  0039F6  6E04               	movwf	i2updateServoPosition@timer+1,c
 18570  0039F8  0E01               	movlw	1
 18571  0039FA  6E03               	movwf	i2updateServoPosition@timer,c
 18572  0039FC  EC9C  F025         	call	i2_updateServoPosition	;wreg free
 18573                           
 18574                           ;sort.c: 590: updateServoPosition(1050, 3);
 18575  003A00  0E04               	movlw	4
 18576  003A02  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18577  003A04  0E1A               	movlw	26
 18578  003A06  6E01               	movwf	i2updateServoPosition@time_us,c
 18579  003A08  0E00               	movlw	0
 18580  003A0A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18581  003A0C  0E03               	movlw	3
 18582  003A0E  6E03               	movwf	i2updateServoPosition@timer,c
 18583  003A10  EC9C  F025         	call	i2_updateServoPosition	;wreg free
 18584                           
 18585                           ;sort.c: 591: servo_timer_counter = 0;
 18586  003A14  0E00               	movlw	0
 18587  003A16  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18588  003A18  0E00               	movlw	0
 18589  003A1A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18590                           
 18591                           ;sort.c: 592: servo_timer_target = 9999;
 18592  003A1C  0E27               	movlw	39
 18593  003A1E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18594  003A20  0E0F               	movlw	15
 18595  003A22  6E6F               	movwf	_servo_timer_target,c	;volatile
 18596                           
 18597                           ;sort.c: 594: f_can_distributed = 1;
 18598  003A24  0E00               	movlw	0
 18599  003A26  0101               	movlb	1	; () banked
 18600  003A28  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18601  003A2A  0E01               	movlw	1
 18602  003A2C  6F35               	movwf	_f_can_distributed& (0+255),b
 18603                           
 18604                           ; BSR set to: 1
 18605                           ;sort.c: 595: if(f_lastCan == 1){
 18606  003A2E  0100               	movlb	0	; () banked
 18607  003A30  05F0               	decf	_f_lastCan& (0+255),w,b
 18608  003A32  0100               	movlb	0	; () banked
 18609  003A34  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18610  003A36  A4D8               	btfss	status,2,c
 18611  003A38  0012               	return	
 18612                           
 18613                           ; BSR set to: 0
 18614                           ;sort.c: 596: machine_state = DoneSorting_state;
 18615  003A3A  0E02               	movlw	2
 18616  003A3C  0100               	movlb	0	; () banked
 18617  003A3E  6FFC               	movwf	_machine_state& (0+255),b
 18618                           
 18619                           ; BSR set to: 0
 18620                           ;sort.c: 602: }
 18621                           
 18622                           ; BSR set to: 0
 18623                           ;sort.c: 601: break;
 18624                           
 18625                           ;sort.c: 600: default:
 18626                           
 18627                           ; BSR set to: 0
 18628                           ;sort.c: 597: }
 18629                           ;sort.c: 598: break;
 18630  003A40  0012               	return	
 18631  003A42                     i2l9626:
 18632  003A42  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18633  003A46  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18634                           
 18635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18636                           ; Switch size 1, requested type "space"
 18637                           ; Number of cases is 2, Range of values is 4 to 5
 18638                           ; switch strategies available:
 18639                           ; Name         Instructions Cycles
 18640                           ; simple_byte            7     4 (average)
 18641                           ;	Chosen strategy is simple_byte
 18642  003A4A  500A               	movf	??_updateServoStates+1,w,c
 18643  003A4C  0A04               	xorlw	4	; case 4
 18644  003A4E  B4D8               	btfsc	status,2,c
 18645  003A50  D004               	goto	i2l10278
 18646  003A52  0A01               	xorlw	1	; case 5
 18647  003A54  A4D8               	btfss	status,2,c
 18648  003A56  0012               	return	
 18649  003A58  D008               	goto	i2l10280
 18650  003A5A                     i2l10278:
 18651                           
 18652                           ; Switch size 1, requested type "space"
 18653                           ; Number of cases is 2, Range of values is 26 to 236
 18654                           ; switch strategies available:
 18655                           ; Name         Instructions Cycles
 18656                           ; simple_byte            7     4 (average)
 18657                           ;	Chosen strategy is simple_byte
 18658  003A5A  5009               	movf	??_updateServoStates,w,c
 18659  003A5C  0A1A               	xorlw	26	; case 26
 18660  003A5E  B4D8               	btfsc	status,2,c
 18661  003A60  D7C5               	goto	i2l9612
 18662  003A62  0AF6               	xorlw	246	; case 236
 18663  003A64  A4D8               	btfss	status,2,c
 18664  003A66  0012               	return	
 18665  003A68  D79B               	goto	i2l9600
 18666  003A6A                     i2l10280:
 18667                           
 18668                           ; Switch size 1, requested type "space"
 18669                           ; Number of cases is 1, Range of values is 110 to 110
 18670                           ; switch strategies available:
 18671                           ; Name         Instructions Cycles
 18672                           ; simple_byte            4     3 (average)
 18673                           ;	Chosen strategy is simple_byte
 18674  003A6A  5009               	movf	??_updateServoStates,w,c
 18675  003A6C  0A6E               	xorlw	110	; case 110
 18676  003A6E  A4D8               	btfss	status,2,c
 18677  003A70  0012               	return	
 18678  003A72  D7A9               	goto	i2l9606
 18679  003A74                     __end_of_updateServoStates:
 18680                           	opt stack 0
 18681                           pclatu	equ	0xFFB
 18682                           pclath	equ	0xFFA
 18683                           tblptru	equ	0xFF8
 18684                           tblptrh	equ	0xFF7
 18685                           tblptrl	equ	0xFF6
 18686                           tablat	equ	0xFF5
 18687                           prodh	equ	0xFF4
 18688                           prodl	equ	0xFF3
 18689                           intcon	equ	0xFF2
 18690                           intcon2	equ	0xFF1
 18691                           intcon3	equ	0xFF0
 18692                           indf0	equ	0xFEF
 18693                           postinc0	equ	0xFEE
 18694                           fsr0h	equ	0xFEA
 18695                           fsr0l	equ	0xFE9
 18696                           wreg	equ	0xFE8
 18697                           postdec1	equ	0xFE5
 18698                           fsr1h	equ	0xFE2
 18699                           fsr1l	equ	0xFE1
 18700                           indf2	equ	0xFDF
 18701                           postinc2	equ	0xFDE
 18702                           postdec2	equ	0xFDD
 18703                           fsr2h	equ	0xFDA
 18704                           fsr2l	equ	0xFD9
 18705                           status	equ	0xFD8
 18706                           
 18707 ;; *************** function i2_updateServoPosition *****************
 18708 ;; Defined at:
 18709 ;;		line 522 in file "sort.c"
 18710 ;; Parameters:    Size  Location     Type
 18711 ;;  time_us         2    0[COMRAM] int 
 18712 ;;  timer           2    2[COMRAM] int 
 18713 ;; Auto vars:     Size  Location     Type
 18714 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18715 ;; Return value:  Size  Location     Type
 18716 ;;                  1    wreg      void 
 18717 ;; Registers used:
 18718 ;;		wreg, status,2, status,0
 18719 ;; Tracked objects:
 18720 ;;		On entry : 0/0
 18721 ;;		On exit  : 0/0
 18722 ;;		Unchanged: 0/0
 18723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18724 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18725 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18727 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;Total ram usage:        8 bytes
 18729 ;; Hardware stack levels used:    1
 18730 ;; This function calls:
 18731 ;;		Nothing
 18732 ;; This function is called by:
 18733 ;;		_updateServoStates
 18734 ;; This function uses a non-reentrant model
 18735 ;;
 18736                           
 18737                           	psect	text61
 18738  004B38                     __ptext61:
 18739                           	opt stack 0
 18740  004B38                     i2_updateServoPosition:
 18741                           	opt stack 22
 18742                           
 18743                           ;sort.c: 523: unsigned int my_time = 65535 - time_us;
 18744                           
 18745                           ;incstack = 0
 18746  004B38  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18747  004B3C  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18748  004B40  1E05               	comf	??i2_updateServoPosition,f,c
 18749  004B42  1E06               	comf	??i2_updateServoPosition+1,f,c
 18750  004B44  4A05               	infsnz	??i2_updateServoPosition,f,c
 18751  004B46  2A06               	incf	??i2_updateServoPosition+1,f,c
 18752  004B48  0EFF               	movlw	255
 18753  004B4A  2405               	addwf	??i2_updateServoPosition,w,c
 18754  004B4C  6E07               	movwf	i2updateServoPosition@my_time,c
 18755  004B4E  0EFF               	movlw	255
 18756  004B50  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18757  004B52  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18758                           
 18759                           ;sort.c: 524: switch(timer){
 18760  004B54  D019               	goto	i2l8786
 18761  004B56                     i2l8780:
 18762                           
 18763                           ;sort.c: 526: servoTimes[0] = my_time >> 8;
 18764  004B56  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18765  004B58  0100               	movlb	0	; () banked
 18766  004B5A  6FDA               	movwf	_servoTimes& (0+255),b
 18767  004B5C  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18768                           
 18769                           ;sort.c: 527: servoTimes[1] = my_time & 0xFF;
 18770  004B5E  5007               	movf	i2updateServoPosition@my_time,w,c
 18771  004B60  0100               	movlb	0	; () banked
 18772  004B62  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18773  004B64  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18774                           
 18775                           ; BSR set to: 0
 18776                           ;sort.c: 529: pan_servo_state = time_us;
 18777  004B66  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18778  004B6A  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18779  004B6E                     i2l890:
 18780                           
 18781                           ;sort.c: 531: servoTimes[2] = my_time >> 8;
 18782  004B6E  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18783  004B70  0100               	movlb	0	; () banked
 18784  004B72  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18785  004B74  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18786                           
 18787                           ;sort.c: 532: servoTimes[3] = my_time & 0xFF;
 18788  004B76  5007               	movf	i2updateServoPosition@my_time,w,c
 18789  004B78  0100               	movlb	0	; () banked
 18790  004B7A  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18791  004B7C  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18792                           
 18793                           ; BSR set to: 0
 18794                           ;sort.c: 534: tilt_servo_state = time_us;
 18795  004B7E  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18796  004B82  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18797                           
 18798                           ;sort.c: 535: }
 18799  004B86  0012               	return	
 18800  004B88                     i2l8786:
 18801  004B88  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18802  004B8C  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18803                           
 18804                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18805                           ; Switch size 1, requested type "space"
 18806                           ; Number of cases is 1, Range of values is 0 to 0
 18807                           ; switch strategies available:
 18808                           ; Name         Instructions Cycles
 18809                           ; simple_byte            4     3 (average)
 18810                           ;	Chosen strategy is simple_byte
 18811  004B90  5006               	movf	??i2_updateServoPosition+1,w,c
 18812  004B92  0A00               	xorlw	0	; case 0
 18813  004B94  A4D8               	btfss	status,2,c
 18814  004B96  0012               	return	
 18815                           
 18816                           ; Switch size 1, requested type "space"
 18817                           ; Number of cases is 2, Range of values is 1 to 3
 18818                           ; switch strategies available:
 18819                           ; Name         Instructions Cycles
 18820                           ; simple_byte            7     4 (average)
 18821                           ;	Chosen strategy is simple_byte
 18822  004B98  5005               	movf	??i2_updateServoPosition,w,c
 18823  004B9A  0A01               	xorlw	1	; case 1
 18824  004B9C  B4D8               	btfsc	status,2,c
 18825  004B9E  D7DB               	goto	i2l8780
 18826  004BA0  0A02               	xorlw	2	; case 3
 18827  004BA2  A4D8               	btfss	status,2,c
 18828  004BA4  0012               	return	
 18829  004BA6  D7E3               	goto	i2l890
 18830  004BA8                     __end_ofi2_updateServoPosition:
 18831                           	opt stack 0
 18832                           pclatu	equ	0xFFB
 18833                           pclath	equ	0xFFA
 18834                           tblptru	equ	0xFF8
 18835                           tblptrh	equ	0xFF7
 18836                           tblptrl	equ	0xFF6
 18837                           tablat	equ	0xFF5
 18838                           prodh	equ	0xFF4
 18839                           prodl	equ	0xFF3
 18840                           intcon	equ	0xFF2
 18841                           intcon2	equ	0xFF1
 18842                           intcon3	equ	0xFF0
 18843                           indf0	equ	0xFEF
 18844                           postinc0	equ	0xFEE
 18845                           fsr0h	equ	0xFEA
 18846                           fsr0l	equ	0xFE9
 18847                           wreg	equ	0xFE8
 18848                           postdec1	equ	0xFE5
 18849                           fsr1h	equ	0xFE2
 18850                           fsr1l	equ	0xFE1
 18851                           indf2	equ	0xFDF
 18852                           postinc2	equ	0xFDE
 18853                           postdec2	equ	0xFDD
 18854                           fsr2h	equ	0xFDA
 18855                           fsr2l	equ	0xFD9
 18856                           status	equ	0xFD8
 18857                           
 18858 ;; *************** function _updateMenu *****************
 18859 ;; Defined at:
 18860 ;;		line 216 in file "UI.c"
 18861 ;; Parameters:    Size  Location     Type
 18862 ;;		None
 18863 ;; Auto vars:     Size  Location     Type
 18864 ;;		None
 18865 ;; Return value:  Size  Location     Type
 18866 ;;                  1    wreg      void 
 18867 ;; Registers used:
 18868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18869 ;; Tracked objects:
 18870 ;;		On entry : 0/0
 18871 ;;		On exit  : 0/0
 18872 ;;		Unchanged: 0/0
 18873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18877 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18878 ;;Total ram usage:        2 bytes
 18879 ;; Hardware stack levels used:    1
 18880 ;; Hardware stack levels required when called:    5
 18881 ;; This function calls:
 18882 ;;		_change_state_to_logs_11
 18883 ;;		_change_state_to_logs_12
 18884 ;;		_change_state_to_logs_22
 18885 ;;		_change_state_to_logs_23
 18886 ;;		_change_state_to_logs_33
 18887 ;;		_change_state_to_logs_34
 18888 ;;		_change_state_to_menu_11
 18889 ;;		_change_state_to_menu_23
 18890 ;;		_dispLogs
 18891 ;;		_inputHandler
 18892 ;;		i2_change_state_to_menu_12
 18893 ;;		i2_change_state_to_menu_22
 18894 ;;		i2_change_state_to_menu_start
 18895 ;; This function is called by:
 18896 ;;		_handler
 18897 ;; This function uses a non-reentrant model
 18898 ;;
 18899                           
 18900                           	psect	text62
 18901  002800                     __ptext62:
 18902                           	opt stack 0
 18903  002800                     _updateMenu:
 18904                           	opt stack 18
 18905                           
 18906                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 18907                           
 18908                           ;incstack = 0
 18909  002800  0E00               	movlw	0
 18910  002802  6E76               	movwf	_up+1,c
 18911  002804  0E00               	movlw	0
 18912  002806  6E75               	movwf	_up,c
 18913  002808  0E00               	movlw	0
 18914  00280A  6E5E               	movwf	_down+1,c
 18915  00280C  0E00               	movlw	0
 18916  00280E  6E5D               	movwf	_down,c
 18917  002810  0E00               	movlw	0
 18918  002812  6E60               	movwf	_enter+1,c
 18919  002814  0E00               	movlw	0
 18920  002816  6E5F               	movwf	_enter,c
 18921  002818  0E00               	movlw	0
 18922  00281A  6E5C               	movwf	_back+1,c
 18923  00281C  0E00               	movlw	0
 18924  00281E  6E5B               	movwf	_back,c
 18925                           
 18926                           ;UI.c: 218: (INTCONbits.GIE = 0);
 18927  002820  9EF2               	bcf	intcon,7,c	;volatile
 18928                           
 18929                           ;UI.c: 220: if (inputHandler()
 18930                           ;UI.c: 223: ){
 18931  002822  EC60  F01B         	call	_inputHandler	;wreg free
 18932  002826  502A               	movf	?_inputHandler,w,c
 18933  002828  102B               	iorwf	?_inputHandler+1,w,c
 18934  00282A  A4D8               	btfss	status,2,c
 18935  00282C  D112               	goto	i2l9320
 18936  00282E  D146               	goto	i2l263
 18937  002830                     i2l9172:
 18938                           
 18939                           ;UI.c: 227: change_state_to_menu_11();
 18940  002830  EC1F  F029         	call	_change_state_to_menu_11	;wreg free
 18941                           
 18942                           ;UI.c: 228: break;
 18943  002834  D143               	goto	i2l263
 18944  002836                     i2l9174:
 18945                           
 18946                           ;UI.c: 231: if(up){
 18947  002836  5075               	movf	_up,w,c
 18948  002838  1076               	iorwf	_up+1,w,c
 18949  00283A  B4D8               	btfsc	status,2,c
 18950  00283C  D003               	goto	i2l9178
 18951                           
 18952                           ;UI.c: 232: change_state_to_menu_23();
 18953  00283E  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 18954                           
 18955                           ;UI.c: 233: }
 18956  002842  D13C               	goto	i2l263
 18957  002844                     i2l9178:
 18958                           
 18959                           ;UI.c: 234: else if(down){
 18960  002844  505D               	movf	_down,w,c
 18961  002846  105E               	iorwf	_down+1,w,c
 18962  002848  B4D8               	btfsc	status,2,c
 18963  00284A  D003               	goto	i2l9182
 18964                           
 18965                           ;UI.c: 235: change_state_to_menu_12();
 18966  00284C  ECEF  F028         	call	i2_change_state_to_menu_12	;wreg free
 18967                           
 18968                           ;UI.c: 236: }
 18969  002850  D135               	goto	i2l263
 18970  002852                     i2l9182:
 18971                           
 18972                           ;UI.c: 237: else if(enter){
 18973  002852  505F               	movf	_enter,w,c
 18974  002854  1060               	iorwf	_enter+1,w,c
 18975  002856  B4D8               	btfsc	status,2,c
 18976  002858  D131               	goto	i2l263
 18977                           
 18978                           ;UI.c: 238: change_state_to_menu_start();
 18979  00285A  EC32  F02A         	call	i2_change_state_to_menu_start	;wreg free
 18980                           
 18981                           ;UI.c: 239: }
 18982                           ;UI.c: 240: break;
 18983  00285E  D12E               	goto	i2l263
 18984  002860                     i2l9186:
 18985                           
 18986                           ;UI.c: 243: if(up){
 18987  002860  5075               	movf	_up,w,c
 18988  002862  1076               	iorwf	_up+1,w,c
 18989  002864  B4D8               	btfsc	status,2,c
 18990  002866  D003               	goto	i2l9190
 18991                           
 18992                           ;UI.c: 244: change_state_to_menu_11();
 18993  002868  EC1F  F029         	call	_change_state_to_menu_11	;wreg free
 18994                           
 18995                           ;UI.c: 245: }
 18996  00286C  D127               	goto	i2l263
 18997  00286E                     i2l9190:
 18998                           
 18999                           ;UI.c: 246: else if(down){
 19000  00286E  505D               	movf	_down,w,c
 19001  002870  105E               	iorwf	_down+1,w,c
 19002  002872  B4D8               	btfsc	status,2,c
 19003  002874  D011               	goto	i2l9206
 19004                           
 19005                           ;UI.c: 247: change_state_to_menu_23();
 19006  002876  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 19007                           
 19008                           ;UI.c: 248: }
 19009  00287A  D120               	goto	i2l263
 19010  00287C                     i2l9198:
 19011                           
 19012                           ;UI.c: 255: if(up){
 19013  00287C  5075               	movf	_up,w,c
 19014  00287E  1076               	iorwf	_up+1,w,c
 19015  002880  B4D8               	btfsc	status,2,c
 19016  002882  D003               	goto	i2l9202
 19017                           
 19018                           ;UI.c: 256: change_state_to_menu_11();
 19019  002884  EC1F  F029         	call	_change_state_to_menu_11	;wreg free
 19020                           
 19021                           ;UI.c: 257: }
 19022  002888  D119               	goto	i2l263
 19023  00288A                     i2l9202:
 19024                           
 19025                           ;UI.c: 258: else if(down){
 19026  00288A  505D               	movf	_down,w,c
 19027  00288C  105E               	iorwf	_down+1,w,c
 19028  00288E  B4D8               	btfsc	status,2,c
 19029  002890  D003               	goto	i2l9206
 19030                           
 19031                           ;UI.c: 259: change_state_to_menu_23();
 19032  002892  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 19033                           
 19034                           ;UI.c: 260: }
 19035  002896  D112               	goto	i2l263
 19036  002898                     i2l9206:
 19037                           
 19038                           ;UI.c: 261: else if(enter){
 19039  002898  505F               	movf	_enter,w,c
 19040  00289A  1060               	iorwf	_enter+1,w,c
 19041  00289C  B4D8               	btfsc	status,2,c
 19042  00289E  D10E               	goto	i2l263
 19043                           
 19044                           ;UI.c: 262: machine_state = Sorting_state;
 19045  0028A0  0E01               	movlw	1
 19046  0028A2  0100               	movlb	0	; () banked
 19047  0028A4  6FFC               	movwf	_machine_state& (0+255),b
 19048                           
 19049                           ; BSR set to: 0
 19050                           ;UI.c: 263: }
 19051                           ;UI.c: 264: break;
 19052                           
 19053                           ; BSR set to: 0
 19054                           
 19055                           ; BSR set to: 0
 19056  0028A6  D10A               	goto	i2l263
 19057  0028A8                     i2l9210:
 19058                           
 19059                           ;UI.c: 267: if(up){
 19060  0028A8  5075               	movf	_up,w,c
 19061  0028AA  1076               	iorwf	_up+1,w,c
 19062  0028AC  B4D8               	btfsc	status,2,c
 19063  0028AE  D003               	goto	i2l9214
 19064                           
 19065                           ;UI.c: 268: change_state_to_menu_22();
 19066  0028B0  ECD7  F028         	call	i2_change_state_to_menu_22	;wreg free
 19067                           
 19068                           ;UI.c: 269: }
 19069  0028B4  D103               	goto	i2l263
 19070  0028B6                     i2l9214:
 19071                           
 19072                           ;UI.c: 270: else if(down){
 19073  0028B6  505D               	movf	_down,w,c
 19074  0028B8  105E               	iorwf	_down+1,w,c
 19075  0028BA  B4D8               	btfsc	status,2,c
 19076  0028BC  D003               	goto	i2l9218
 19077                           
 19078                           ;UI.c: 271: change_state_to_menu_11();
 19079  0028BE  EC1F  F029         	call	_change_state_to_menu_11	;wreg free
 19080                           
 19081                           ;UI.c: 272: }
 19082  0028C2  D0FC               	goto	i2l263
 19083  0028C4                     i2l9218:
 19084                           
 19085                           ;UI.c: 273: else if(enter){
 19086  0028C4  505F               	movf	_enter,w,c
 19087  0028C6  1060               	iorwf	_enter+1,w,c
 19088  0028C8  B4D8               	btfsc	status,2,c
 19089  0028CA  D0F8               	goto	i2l263
 19090                           
 19091                           ;UI.c: 274: change_state_to_logs_11();
 19092  0028CC  EC97  F029         	call	_change_state_to_logs_11	;wreg free
 19093                           
 19094                           ;UI.c: 275: }
 19095                           ;UI.c: 276: break;
 19096  0028D0  D0F5               	goto	i2l263
 19097  0028D2                     i2l9222:
 19098                           
 19099                           ;UI.c: 279: if(up){
 19100  0028D2  5075               	movf	_up,w,c
 19101  0028D4  1076               	iorwf	_up+1,w,c
 19102  0028D6  B4D8               	btfsc	status,2,c
 19103  0028D8  D003               	goto	i2l9226
 19104                           
 19105                           ;UI.c: 280: change_state_to_logs_34();
 19106  0028DA  EC37  F029         	call	_change_state_to_logs_34	;wreg free
 19107                           
 19108                           ;UI.c: 281: }
 19109  0028DE  D0EE               	goto	i2l263
 19110  0028E0                     i2l9226:
 19111                           
 19112                           ;UI.c: 282: else if(down){
 19113  0028E0  505D               	movf	_down,w,c
 19114  0028E2  105E               	iorwf	_down+1,w,c
 19115  0028E4  B4D8               	btfsc	status,2,c
 19116  0028E6  D003               	goto	i2l9230
 19117                           
 19118                           ;UI.c: 283: change_state_to_logs_12();
 19119  0028E8  EC7F  F029         	call	_change_state_to_logs_12	;wreg free
 19120                           
 19121                           ;UI.c: 284: }
 19122  0028EC  D0E7               	goto	i2l263
 19123  0028EE                     i2l9230:
 19124                           
 19125                           ;UI.c: 285: else if(enter){
 19126  0028EE  505F               	movf	_enter,w,c
 19127  0028F0  1060               	iorwf	_enter+1,w,c
 19128  0028F2  B4D8               	btfsc	status,2,c
 19129  0028F4  D007               	goto	i2l9234
 19130                           
 19131                           ;UI.c: 286: dispLogs(1);
 19132  0028F6  0E00               	movlw	0
 19133  0028F8  6E13               	movwf	dispLogs@myLog+1,c
 19134  0028FA  0E01               	movlw	1
 19135  0028FC  6E12               	movwf	dispLogs@myLog,c
 19136  0028FE  EC6C  F02A         	call	_dispLogs	;wreg free
 19137                           
 19138                           ;UI.c: 287: }
 19139  002902  D0DC               	goto	i2l263
 19140  002904                     i2l9234:
 19141                           
 19142                           ;UI.c: 288: else if(back){
 19143  002904  505B               	movf	_back,w,c
 19144  002906  105C               	iorwf	_back+1,w,c
 19145  002908  B4D8               	btfsc	status,2,c
 19146  00290A  D0D8               	goto	i2l263
 19147                           
 19148                           ;UI.c: 289: change_state_to_menu_23();
 19149  00290C  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 19150                           
 19151                           ;UI.c: 290: }
 19152                           ;UI.c: 291: break;
 19153  002910  D0D5               	goto	i2l263
 19154  002912                     i2l9238:
 19155                           
 19156                           ;UI.c: 294: if(up){
 19157  002912  5075               	movf	_up,w,c
 19158  002914  1076               	iorwf	_up+1,w,c
 19159  002916  B4D8               	btfsc	status,2,c
 19160  002918  D003               	goto	i2l9242
 19161                           
 19162                           ;UI.c: 295: change_state_to_logs_11();
 19163  00291A  EC97  F029         	call	_change_state_to_logs_11	;wreg free
 19164                           
 19165                           ;UI.c: 296: }
 19166  00291E  D0CE               	goto	i2l263
 19167  002920                     i2l9242:
 19168                           
 19169                           ;UI.c: 297: else if(down){
 19170  002920  505D               	movf	_down,w,c
 19171  002922  105E               	iorwf	_down+1,w,c
 19172  002924  B4D8               	btfsc	status,2,c
 19173  002926  D003               	goto	i2l9246
 19174                           
 19175                           ;UI.c: 298: change_state_to_logs_23();
 19176  002928  ECC6  F029         	call	_change_state_to_logs_23	;wreg free
 19177                           
 19178                           ;UI.c: 299: }
 19179  00292C  D0C7               	goto	i2l263
 19180  00292E                     i2l9246:
 19181                           
 19182                           ;UI.c: 300: else if(enter){
 19183  00292E  505F               	movf	_enter,w,c
 19184  002930  1060               	iorwf	_enter+1,w,c
 19185  002932  B4D8               	btfsc	status,2,c
 19186  002934  D007               	goto	i2l9250
 19187                           
 19188                           ;UI.c: 301: dispLogs(2);
 19189  002936  0E00               	movlw	0
 19190  002938  6E13               	movwf	dispLogs@myLog+1,c
 19191  00293A  0E02               	movlw	2
 19192  00293C  6E12               	movwf	dispLogs@myLog,c
 19193  00293E  EC6C  F02A         	call	_dispLogs	;wreg free
 19194                           
 19195                           ;UI.c: 302: }
 19196  002942  D0BC               	goto	i2l263
 19197  002944                     i2l9250:
 19198                           
 19199                           ;UI.c: 303: else if(back){
 19200  002944  505B               	movf	_back,w,c
 19201  002946  105C               	iorwf	_back+1,w,c
 19202  002948  B4D8               	btfsc	status,2,c
 19203  00294A  D0B8               	goto	i2l263
 19204                           
 19205                           ;UI.c: 304: change_state_to_menu_23();
 19206  00294C  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 19207                           
 19208                           ;UI.c: 305: }
 19209                           ;UI.c: 306: break;
 19210  002950  D0B5               	goto	i2l263
 19211  002952                     i2l9254:
 19212                           
 19213                           ;UI.c: 309: if(up){
 19214  002952  5075               	movf	_up,w,c
 19215  002954  1076               	iorwf	_up+1,w,c
 19216  002956  B4D8               	btfsc	status,2,c
 19217  002958  D003               	goto	i2l9258
 19218                           
 19219                           ;UI.c: 310: change_state_to_logs_11();
 19220  00295A  EC97  F029         	call	_change_state_to_logs_11	;wreg free
 19221                           
 19222                           ;UI.c: 311: }
 19223  00295E  D0AE               	goto	i2l263
 19224  002960                     i2l9258:
 19225                           
 19226                           ;UI.c: 312: else if(down){
 19227  002960  505D               	movf	_down,w,c
 19228  002962  105E               	iorwf	_down+1,w,c
 19229  002964  B4D8               	btfsc	status,2,c
 19230  002966  D003               	goto	i2l9262
 19231                           
 19232                           ;UI.c: 313: change_state_to_logs_23();
 19233  002968  ECC6  F029         	call	_change_state_to_logs_23	;wreg free
 19234                           
 19235                           ;UI.c: 314: }
 19236  00296C  D0A7               	goto	i2l263
 19237  00296E                     i2l9262:
 19238                           
 19239                           ;UI.c: 315: else if(enter){
 19240  00296E  505F               	movf	_enter,w,c
 19241  002970  1060               	iorwf	_enter+1,w,c
 19242  002972  B4D8               	btfsc	status,2,c
 19243  002974  D007               	goto	i2l9266
 19244                           
 19245                           ;UI.c: 316: dispLogs(2);
 19246  002976  0E00               	movlw	0
 19247  002978  6E13               	movwf	dispLogs@myLog+1,c
 19248  00297A  0E02               	movlw	2
 19249  00297C  6E12               	movwf	dispLogs@myLog,c
 19250  00297E  EC6C  F02A         	call	_dispLogs	;wreg free
 19251                           
 19252                           ;UI.c: 317: }
 19253  002982  D09C               	goto	i2l263
 19254  002984                     i2l9266:
 19255                           
 19256                           ;UI.c: 318: else if(back){
 19257  002984  505B               	movf	_back,w,c
 19258  002986  105C               	iorwf	_back+1,w,c
 19259  002988  B4D8               	btfsc	status,2,c
 19260  00298A  D098               	goto	i2l263
 19261                           
 19262                           ;UI.c: 319: change_state_to_menu_23();
 19263  00298C  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 19264                           
 19265                           ;UI.c: 320: }
 19266                           ;UI.c: 321: break;
 19267  002990  D095               	goto	i2l263
 19268  002992                     i2l9270:
 19269                           
 19270                           ;UI.c: 324: if(up){
 19271  002992  5075               	movf	_up,w,c
 19272  002994  1076               	iorwf	_up+1,w,c
 19273  002996  B4D8               	btfsc	status,2,c
 19274  002998  D003               	goto	i2l9274
 19275                           
 19276                           ;UI.c: 325: change_state_to_logs_22();
 19277  00299A  EC67  F029         	call	_change_state_to_logs_22	;wreg free
 19278                           
 19279                           ;UI.c: 326: }
 19280  00299E  D08E               	goto	i2l263
 19281  0029A0                     i2l9274:
 19282                           
 19283                           ;UI.c: 327: else if(down){
 19284  0029A0  505D               	movf	_down,w,c
 19285  0029A2  105E               	iorwf	_down+1,w,c
 19286  0029A4  B4D8               	btfsc	status,2,c
 19287  0029A6  D003               	goto	i2l9278
 19288                           
 19289                           ;UI.c: 328: change_state_to_logs_34();
 19290  0029A8  EC37  F029         	call	_change_state_to_logs_34	;wreg free
 19291                           
 19292                           ;UI.c: 329: }
 19293  0029AC  D087               	goto	i2l263
 19294  0029AE                     i2l9278:
 19295                           
 19296                           ;UI.c: 330: else if(enter){
 19297  0029AE  505F               	movf	_enter,w,c
 19298  0029B0  1060               	iorwf	_enter+1,w,c
 19299  0029B2  B4D8               	btfsc	status,2,c
 19300  0029B4  D007               	goto	i2l9282
 19301                           
 19302                           ;UI.c: 331: dispLogs(3);
 19303  0029B6  0E00               	movlw	0
 19304  0029B8  6E13               	movwf	dispLogs@myLog+1,c
 19305  0029BA  0E03               	movlw	3
 19306  0029BC  6E12               	movwf	dispLogs@myLog,c
 19307  0029BE  EC6C  F02A         	call	_dispLogs	;wreg free
 19308                           
 19309                           ;UI.c: 332: }
 19310  0029C2  D07C               	goto	i2l263
 19311  0029C4                     i2l9282:
 19312                           
 19313                           ;UI.c: 333: else if(back){
 19314  0029C4  505B               	movf	_back,w,c
 19315  0029C6  105C               	iorwf	_back+1,w,c
 19316  0029C8  B4D8               	btfsc	status,2,c
 19317  0029CA  D078               	goto	i2l263
 19318                           
 19319                           ;UI.c: 334: change_state_to_menu_23();
 19320  0029CC  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 19321                           
 19322                           ;UI.c: 335: }
 19323                           ;UI.c: 336: break;
 19324  0029D0  D075               	goto	i2l263
 19325  0029D2                     i2l9286:
 19326                           
 19327                           ;UI.c: 339: if(up){
 19328  0029D2  5075               	movf	_up,w,c
 19329  0029D4  1076               	iorwf	_up+1,w,c
 19330  0029D6  B4D8               	btfsc	status,2,c
 19331  0029D8  D003               	goto	i2l9290
 19332                           
 19333                           ;UI.c: 340: change_state_to_logs_22();
 19334  0029DA  EC67  F029         	call	_change_state_to_logs_22	;wreg free
 19335                           
 19336                           ;UI.c: 341: }
 19337  0029DE  D06E               	goto	i2l263
 19338  0029E0                     i2l9290:
 19339                           
 19340                           ;UI.c: 342: else if(down){
 19341  0029E0  505D               	movf	_down,w,c
 19342  0029E2  105E               	iorwf	_down+1,w,c
 19343  0029E4  B4D8               	btfsc	status,2,c
 19344  0029E6  D003               	goto	i2l9294
 19345                           
 19346                           ;UI.c: 343: change_state_to_logs_34();
 19347  0029E8  EC37  F029         	call	_change_state_to_logs_34	;wreg free
 19348                           
 19349                           ;UI.c: 344: }
 19350  0029EC  D067               	goto	i2l263
 19351  0029EE                     i2l9294:
 19352                           
 19353                           ;UI.c: 345: else if(enter){
 19354  0029EE  505F               	movf	_enter,w,c
 19355  0029F0  1060               	iorwf	_enter+1,w,c
 19356  0029F2  B4D8               	btfsc	status,2,c
 19357  0029F4  D007               	goto	i2l9298
 19358                           
 19359                           ;UI.c: 346: dispLogs(3);
 19360  0029F6  0E00               	movlw	0
 19361  0029F8  6E13               	movwf	dispLogs@myLog+1,c
 19362  0029FA  0E03               	movlw	3
 19363  0029FC  6E12               	movwf	dispLogs@myLog,c
 19364  0029FE  EC6C  F02A         	call	_dispLogs	;wreg free
 19365                           
 19366                           ;UI.c: 347: }
 19367  002A02  D05C               	goto	i2l263
 19368  002A04                     i2l9298:
 19369                           
 19370                           ;UI.c: 348: else if(back){
 19371  002A04  505B               	movf	_back,w,c
 19372  002A06  105C               	iorwf	_back+1,w,c
 19373  002A08  B4D8               	btfsc	status,2,c
 19374  002A0A  D058               	goto	i2l263
 19375                           
 19376                           ;UI.c: 349: change_state_to_menu_23();
 19377  002A0C  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 19378                           
 19379                           ;UI.c: 350: }
 19380                           ;UI.c: 351: break;
 19381  002A10  D055               	goto	i2l263
 19382  002A12                     i2l9302:
 19383                           
 19384                           ;UI.c: 354: if(up){
 19385  002A12  5075               	movf	_up,w,c
 19386  002A14  1076               	iorwf	_up+1,w,c
 19387  002A16  B4D8               	btfsc	status,2,c
 19388  002A18  D003               	goto	i2l9306
 19389                           
 19390                           ;UI.c: 355: change_state_to_logs_33();
 19391  002A1A  EC4F  F029         	call	_change_state_to_logs_33	;wreg free
 19392                           
 19393                           ;UI.c: 356: }
 19394  002A1E  D04E               	goto	i2l263
 19395  002A20                     i2l9306:
 19396                           
 19397                           ;UI.c: 357: else if(down){
 19398  002A20  505D               	movf	_down,w,c
 19399  002A22  105E               	iorwf	_down+1,w,c
 19400  002A24  B4D8               	btfsc	status,2,c
 19401  002A26  D003               	goto	i2l9310
 19402                           
 19403                           ;UI.c: 358: change_state_to_logs_11();
 19404  002A28  EC97  F029         	call	_change_state_to_logs_11	;wreg free
 19405                           
 19406                           ;UI.c: 359: }
 19407  002A2C  D047               	goto	i2l263
 19408  002A2E                     i2l9310:
 19409                           
 19410                           ;UI.c: 360: else if(enter){
 19411  002A2E  505F               	movf	_enter,w,c
 19412  002A30  1060               	iorwf	_enter+1,w,c
 19413  002A32  B4D8               	btfsc	status,2,c
 19414  002A34  D007               	goto	i2l9314
 19415                           
 19416                           ;UI.c: 361: dispLogs(4);
 19417  002A36  0E00               	movlw	0
 19418  002A38  6E13               	movwf	dispLogs@myLog+1,c
 19419  002A3A  0E04               	movlw	4
 19420  002A3C  6E12               	movwf	dispLogs@myLog,c
 19421  002A3E  EC6C  F02A         	call	_dispLogs	;wreg free
 19422                           
 19423                           ;UI.c: 362: }
 19424  002A42  D03C               	goto	i2l263
 19425  002A44                     i2l9314:
 19426                           
 19427                           ;UI.c: 363: else if(back){
 19428  002A44  505B               	movf	_back,w,c
 19429  002A46  105C               	iorwf	_back+1,w,c
 19430  002A48  B4D8               	btfsc	status,2,c
 19431  002A4A  D038               	goto	i2l263
 19432                           
 19433                           ;UI.c: 364: change_state_to_menu_23();
 19434  002A4C  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 19435                           
 19436                           ;UI.c: 370: }
 19437                           
 19438                           ;UI.c: 369: break;
 19439                           
 19440                           ;UI.c: 368: default:
 19441                           
 19442                           ;UI.c: 365: }
 19443                           ;UI.c: 366: break;
 19444  002A50  D035               	goto	i2l263
 19445  002A52                     i2l9320:
 19446  002A52  C0EC  F043         	movff	_cur_state,??_updateMenu
 19447  002A56  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 19448                           
 19449                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19450                           ; Switch size 1, requested type "space"
 19451                           ; Number of cases is 3, Range of values is 0 to 4
 19452                           ; switch strategies available:
 19453                           ; Name         Instructions Cycles
 19454                           ; simple_byte           10     6 (average)
 19455                           ;	Chosen strategy is simple_byte
 19456  002A5A  5044               	movf	??_updateMenu+1,w,c
 19457  002A5C  0A00               	xorlw	0	; case 0
 19458  002A5E  B4D8               	btfsc	status,2,c
 19459  002A60  D007               	goto	i2l10284
 19460  002A62  0A03               	xorlw	3	; case 3
 19461  002A64  B4D8               	btfsc	status,2,c
 19462  002A66  D015               	goto	i2l10286
 19463  002A68  0A07               	xorlw	7	; case 4
 19464  002A6A  B4D8               	btfsc	status,2,c
 19465  002A6C  D020               	goto	i2l10288
 19466  002A6E  D026               	goto	i2l263
 19467  002A70                     i2l10284:
 19468                           
 19469                           ; Switch size 1, requested type "space"
 19470                           ; Number of cases is 5, Range of values is 0 to 23
 19471                           ; switch strategies available:
 19472                           ; Name         Instructions Cycles
 19473                           ; simple_byte           16     9 (average)
 19474                           ;	Chosen strategy is simple_byte
 19475  002A70  5043               	movf	??_updateMenu,w,c
 19476  002A72  0A00               	xorlw	0	; case 0
 19477  002A74  B4D8               	btfsc	status,2,c
 19478  002A76  D6DC               	goto	i2l9172
 19479  002A78  0A0B               	xorlw	11	; case 11
 19480  002A7A  B4D8               	btfsc	status,2,c
 19481  002A7C  D6DC               	goto	i2l9174
 19482  002A7E  0A07               	xorlw	7	; case 12
 19483  002A80  B4D8               	btfsc	status,2,c
 19484  002A82  D6EE               	goto	i2l9186
 19485  002A84  0A1A               	xorlw	26	; case 22
 19486  002A86  B4D8               	btfsc	status,2,c
 19487  002A88  D6F9               	goto	i2l9198
 19488  002A8A  0A01               	xorlw	1	; case 23
 19489  002A8C  B4D8               	btfsc	status,2,c
 19490  002A8E  D70C               	goto	i2l9210
 19491  002A90  D015               	goto	i2l263
 19492  002A92                     i2l10286:
 19493                           
 19494                           ; Switch size 1, requested type "space"
 19495                           ; Number of cases is 4, Range of values is 243 to 255
 19496                           ; switch strategies available:
 19497                           ; Name         Instructions Cycles
 19498                           ; simple_byte           13     7 (average)
 19499                           ;	Chosen strategy is simple_byte
 19500  002A92  5043               	movf	??_updateMenu,w,c
 19501  002A94  0AF3               	xorlw	243	; case 243
 19502  002A96  B4D8               	btfsc	status,2,c
 19503  002A98  D71C               	goto	i2l9222
 19504  002A9A  0A07               	xorlw	7	; case 244
 19505  002A9C  B4D8               	btfsc	status,2,c
 19506  002A9E  D739               	goto	i2l9238
 19507  002AA0  0A0A               	xorlw	10	; case 254
 19508  002AA2  B4D8               	btfsc	status,2,c
 19509  002AA4  D756               	goto	i2l9254
 19510  002AA6  0A01               	xorlw	1	; case 255
 19511  002AA8  B4D8               	btfsc	status,2,c
 19512  002AAA  D773               	goto	i2l9270
 19513  002AAC  D007               	goto	i2l263
 19514  002AAE                     i2l10288:
 19515                           
 19516                           ; Switch size 1, requested type "space"
 19517                           ; Number of cases is 2, Range of values is 9 to 10
 19518                           ; switch strategies available:
 19519                           ; Name         Instructions Cycles
 19520                           ; simple_byte            7     4 (average)
 19521                           ;	Chosen strategy is simple_byte
 19522  002AAE  5043               	movf	??_updateMenu,w,c
 19523  002AB0  0A09               	xorlw	9	; case 9
 19524  002AB2  B4D8               	btfsc	status,2,c
 19525  002AB4  D78E               	goto	i2l9286
 19526  002AB6  0A03               	xorlw	3	; case 10
 19527  002AB8  B4D8               	btfsc	status,2,c
 19528  002ABA  D7AB               	goto	i2l9302
 19529  002ABC                     i2l263:
 19530                           
 19531                           ;UI.c: 371: }
 19532                           ;UI.c: 372: (INTCONbits.GIE = 1);
 19533  002ABC  8EF2               	bsf	intcon,7,c	;volatile
 19534  002ABE  0012               	return		;funcret
 19535  002AC0                     __end_of_updateMenu:
 19536                           	opt stack 0
 19537                           pclatu	equ	0xFFB
 19538                           pclath	equ	0xFFA
 19539                           tblptru	equ	0xFF8
 19540                           tblptrh	equ	0xFF7
 19541                           tblptrl	equ	0xFF6
 19542                           tablat	equ	0xFF5
 19543                           prodh	equ	0xFF4
 19544                           prodl	equ	0xFF3
 19545                           intcon	equ	0xFF2
 19546                           intcon2	equ	0xFF1
 19547                           intcon3	equ	0xFF0
 19548                           indf0	equ	0xFEF
 19549                           postinc0	equ	0xFEE
 19550                           fsr0h	equ	0xFEA
 19551                           fsr0l	equ	0xFE9
 19552                           wreg	equ	0xFE8
 19553                           postdec1	equ	0xFE5
 19554                           fsr1h	equ	0xFE2
 19555                           fsr1l	equ	0xFE1
 19556                           indf2	equ	0xFDF
 19557                           postinc2	equ	0xFDE
 19558                           postdec2	equ	0xFDD
 19559                           fsr2h	equ	0xFDA
 19560                           fsr2l	equ	0xFD9
 19561                           status	equ	0xFD8
 19562                           
 19563 ;; *************** function i2_change_state_to_menu_start *****************
 19564 ;; Defined at:
 19565 ;;		line 477 in file "UI.c"
 19566 ;; Parameters:    Size  Location     Type
 19567 ;;		None
 19568 ;; Auto vars:     Size  Location     Type
 19569 ;;		None
 19570 ;; Return value:  Size  Location     Type
 19571 ;;                  1    wreg      void 
 19572 ;; Registers used:
 19573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19574 ;; Tracked objects:
 19575 ;;		On entry : 0/0
 19576 ;;		On exit  : 0/0
 19577 ;;		Unchanged: 0/0
 19578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19583 ;;Total ram usage:        0 bytes
 19584 ;; Hardware stack levels used:    1
 19585 ;; Hardware stack levels required when called:    4
 19586 ;; This function calls:
 19587 ;;		i2_lcdInst
 19588 ;;		i2_printRTC
 19589 ;;		i2_printf
 19590 ;; This function is called by:
 19591 ;;		_updateMenu
 19592 ;;		_handler
 19593 ;; This function uses a non-reentrant model
 19594 ;;
 19595                           
 19596                           	psect	text63
 19597  005464                     __ptext63:
 19598                           	opt stack 0
 19599  005464                     i2_change_state_to_menu_start:
 19600                           	opt stack 19
 19601                           
 19602                           ;UI.c: 478: cur_state = 0;
 19603                           
 19604                           ;incstack = 0
 19605  005464  0E00               	movlw	0
 19606  005466  0100               	movlb	0	; () banked
 19607  005468  6FED               	movwf	(_cur_state+1)& (0+255),b
 19608  00546A  0E00               	movlw	0
 19609  00546C  6FEC               	movwf	_cur_state& (0+255),b
 19610                           
 19611                           ; BSR set to: 0
 19612                           ;UI.c: 480: lcdInst(0b10000000);;
 19613  00546E  0E80               	movlw	128
 19614  005470  EC0B  F02B         	call	i2_lcdInst
 19615                           
 19616                           ;UI.c: 481: printRTC();
 19617  005474  EC4C  F019         	call	i2_printRTC	;wreg free
 19618                           
 19619                           ;UI.c: 482: lcdInst(0b11000000);;
 19620  005478  0EC0               	movlw	192
 19621  00547A  EC0B  F02B         	call	i2_lcdInst
 19622                           
 19623                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 19624  00547E  0E01               	movlw	low STR_30
 19625  005480  6E0D               	movwf	i2printf@f,c
 19626  005482  0EFE               	movlw	high STR_30
 19627  005484  6E0E               	movwf	i2printf@f+1,c
 19628  005486  EC65  F00F         	call	i2_printf	;wreg free
 19629  00548A  0012               	return		;funcret
 19630  00548C                     __end_ofi2_change_state_to_menu_start:
 19631                           	opt stack 0
 19632                           pclatu	equ	0xFFB
 19633                           pclath	equ	0xFFA
 19634                           tblptru	equ	0xFF8
 19635                           tblptrh	equ	0xFF7
 19636                           tblptrl	equ	0xFF6
 19637                           tablat	equ	0xFF5
 19638                           prodh	equ	0xFF4
 19639                           prodl	equ	0xFF3
 19640                           intcon	equ	0xFF2
 19641                           intcon2	equ	0xFF1
 19642                           intcon3	equ	0xFF0
 19643                           indf0	equ	0xFEF
 19644                           postinc0	equ	0xFEE
 19645                           fsr0h	equ	0xFEA
 19646                           fsr0l	equ	0xFE9
 19647                           wreg	equ	0xFE8
 19648                           postdec1	equ	0xFE5
 19649                           fsr1h	equ	0xFE2
 19650                           fsr1l	equ	0xFE1
 19651                           indf2	equ	0xFDF
 19652                           postinc2	equ	0xFDE
 19653                           postdec2	equ	0xFDD
 19654                           fsr2h	equ	0xFDA
 19655                           fsr2l	equ	0xFD9
 19656                           status	equ	0xFD8
 19657                           
 19658 ;; *************** function i2_printRTC *****************
 19659 ;; Defined at:
 19660 ;;		line 63 in file "RTC.c"
 19661 ;; Parameters:    Size  Location     Type
 19662 ;;		None
 19663 ;; Auto vars:     Size  Location     Type
 19664 ;;  printRTC       14   44[COMRAM] int [7]
 19665 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19666 ;;  printRTC        2   64[COMRAM] int 
 19667 ;;  printRTC        2   58[COMRAM] int 
 19668 ;; Return value:  Size  Location     Type
 19669 ;;                  1    wreg      void 
 19670 ;; Registers used:
 19671 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19672 ;; Tracked objects:
 19673 ;;		On entry : 0/0
 19674 ;;		On exit  : 0/0
 19675 ;;		Unchanged: 0/0
 19676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19678 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19679 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19680 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19681 ;;Total ram usage:       25 bytes
 19682 ;; Hardware stack levels used:    1
 19683 ;; Hardware stack levels required when called:    3
 19684 ;; This function calls:
 19685 ;;		i2_getRTC
 19686 ;;		i2_lcdInst
 19687 ;;		i2_printf
 19688 ;;		i2_strcpy
 19689 ;; This function is called by:
 19690 ;;		i2_change_state_to_menu_start
 19691 ;; This function uses a non-reentrant model
 19692 ;;
 19693                           
 19694                           	psect	text64
 19695  003298                     __ptext64:
 19696                           	opt stack 0
 19697  003298                     i2_printRTC:
 19698                           	opt stack 19
 19699                           
 19700                           ;RTC.c: 64: getRTC();
 19701                           
 19702                           ;incstack = 0
 19703  003298  EC63  F025         	call	i2_getRTC	;wreg free
 19704                           
 19705                           ;RTC.c: 65: char month[] = "MMM";
 19706  00329C  C14B  F03D         	movff	printRTC@F3231,i2printRTC@month
 19707  0032A0  C14C  F03E         	movff	printRTC@F3231+1,i2printRTC@month+1
 19708  0032A4  C14D  F03F         	movff	printRTC@F3231+2,i2printRTC@month+2
 19709  0032A8  C14E  F040         	movff	printRTC@F3231+3,i2printRTC@month+3
 19710                           
 19711                           ;RTC.c: 66: int INT_time[7];
 19712                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19713  0032AC  0E00               	movlw	0
 19714  0032AE  6E42               	movwf	i2printRTC@i+1,c
 19715  0032B0  0E00               	movlw	0
 19716  0032B2  6E41               	movwf	i2printRTC@i,c
 19717  0032B4  BE42               	btfsc	i2printRTC@i+1,7,c
 19718  0032B6  D006               	goto	i2l7186
 19719  0032B8  5042               	movf	i2printRTC@i+1,w,c
 19720  0032BA  E135               	bnz	i2l618
 19721  0032BC  0E07               	movlw	7
 19722  0032BE  5C41               	subwf	i2printRTC@i,w,c
 19723  0032C0  B0D8               	btfsc	status,0,c
 19724  0032C2  D031               	goto	i2l618
 19725  0032C4                     i2l7186:
 19726                           
 19727                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19728  0032C4  0E1C               	movlw	low _time
 19729  0032C6  2441               	addwf	i2printRTC@i,w,c
 19730  0032C8  6ED9               	movwf	fsr2l,c
 19731  0032CA  0E01               	movlw	high _time
 19732  0032CC  2042               	addwfc	i2printRTC@i+1,w,c
 19733  0032CE  6EDA               	movwf	fsr2h,c
 19734  0032D0  50DF               	movf	indf2,w,c
 19735  0032D2  6E2A               	movwf	??i2_printRTC& (0+255),c
 19736  0032D4  3A2A               	swapf	??i2_printRTC,f,c
 19737  0032D6  0E0F               	movlw	15
 19738  0032D8  162A               	andwf	??i2_printRTC,f,c
 19739  0032DA  0E0F               	movlw	15
 19740  0032DC  162A               	andwf	??i2_printRTC,f,c
 19741  0032DE  502A               	movf	??i2_printRTC,w,c
 19742  0032E0  0D0A               	mullw	10
 19743  0032E2  0E1C               	movlw	low _time
 19744  0032E4  2441               	addwf	i2printRTC@i,w,c
 19745  0032E6  6ED9               	movwf	fsr2l,c
 19746  0032E8  0E01               	movlw	high _time
 19747  0032EA  2042               	addwfc	i2printRTC@i+1,w,c
 19748  0032EC  6EDA               	movwf	fsr2h,c
 19749  0032EE  50DF               	movf	indf2,w,c
 19750  0032F0  0B0F               	andlw	15
 19751  0032F2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19752  0032F4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19753  0032F6  50F3               	movf	prodl,w,c
 19754  0032F8  262B               	addwf	??i2_printRTC+1,f,c
 19755  0032FA  50F4               	movf	prodh,w,c
 19756  0032FC  222C               	addwfc	??i2_printRTC+2,f,c
 19757  0032FE  90D8               	bcf	status,0,c
 19758  003300  3441               	rlcf	i2printRTC@i,w,c
 19759  003302  6ED9               	movwf	fsr2l,c
 19760  003304  3442               	rlcf	i2printRTC@i+1,w,c
 19761  003306  6EDA               	movwf	fsr2h,c
 19762  003308  0E2D               	movlw	low i2printRTC@INT_time
 19763  00330A  26D9               	addwf	fsr2l,f,c
 19764  00330C  0E00               	movlw	high i2printRTC@INT_time
 19765  00330E  22DA               	addwfc	fsr2h,f,c
 19766  003310  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19767  003314  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19768  003318  4A41               	infsnz	i2printRTC@i,f,c
 19769  00331A  2A42               	incf	i2printRTC@i+1,f,c
 19770  00331C  BE42               	btfsc	i2printRTC@i+1,7,c
 19771  00331E  D7D2               	goto	i2l7186
 19772  003320  5042               	movf	i2printRTC@i+1,w,c
 19773  003322  E101               	bnz	i2u571_40
 19774  003324  D7CB               	goto	L18
 19775  003326                     i2u571_40:
 19776  003326                     i2l618:
 19777                           
 19778                           ;RTC.c: 69: }
 19779                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19780  003326  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19781  00332A  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19782                           
 19783                           ;RTC.c: 72: switch(RTC_month){
 19784  00332E  D084               	goto	i2l7218
 19785  003330                     i2l7192:
 19786                           
 19787                           ;RTC.c: 74: strcpy(month, "JAN");
 19788  003330  0E3D               	movlw	low i2printRTC@month
 19789  003332  6E01               	movwf	i2strcpy@to,c
 19790  003334  0E00               	movlw	high i2printRTC@month
 19791  003336  6E02               	movwf	i2strcpy@to+1,c
 19792  003338  0EDA               	movlw	low STR_8
 19793  00333A  6E03               	movwf	i2strcpy@from,c
 19794  00333C  0EFF               	movlw	high STR_8
 19795  00333E  6E04               	movwf	i2strcpy@from+1,c
 19796  003340  ECA6  F028         	call	i2_strcpy	;wreg free
 19797                           
 19798                           ;RTC.c: 75: break;
 19799  003344  D0A6               	goto	i2l7220
 19800  003346                     i2l7194:
 19801                           
 19802                           ;RTC.c: 77: strcpy(month, "FEB");
 19803  003346  0E3D               	movlw	low i2printRTC@month
 19804  003348  6E01               	movwf	i2strcpy@to,c
 19805  00334A  0E00               	movlw	high i2printRTC@month
 19806  00334C  6E02               	movwf	i2strcpy@to+1,c
 19807  00334E  0ECA               	movlw	low STR_9
 19808  003350  6E03               	movwf	i2strcpy@from,c
 19809  003352  0EFF               	movlw	high STR_9
 19810  003354  6E04               	movwf	i2strcpy@from+1,c
 19811  003356  ECA6  F028         	call	i2_strcpy	;wreg free
 19812                           
 19813                           ;RTC.c: 78: break;
 19814  00335A  D09B               	goto	i2l7220
 19815  00335C                     i2l7196:
 19816                           
 19817                           ;RTC.c: 80: strcpy(month, "MAR");
 19818  00335C  0E3D               	movlw	low i2printRTC@month
 19819  00335E  6E01               	movwf	i2strcpy@to,c
 19820  003360  0E00               	movlw	high i2printRTC@month
 19821  003362  6E02               	movwf	i2strcpy@to+1,c
 19822  003364  0EE6               	movlw	low STR_10
 19823  003366  6E03               	movwf	i2strcpy@from,c
 19824  003368  0EFF               	movlw	high STR_10
 19825  00336A  6E04               	movwf	i2strcpy@from+1,c
 19826  00336C  ECA6  F028         	call	i2_strcpy	;wreg free
 19827                           
 19828                           ;RTC.c: 81: break;
 19829  003370  D090               	goto	i2l7220
 19830  003372                     i2l7198:
 19831                           
 19832                           ;RTC.c: 83: strcpy(month, "APR");
 19833  003372  0E3D               	movlw	low i2printRTC@month
 19834  003374  6E01               	movwf	i2strcpy@to,c
 19835  003376  0E00               	movlw	high i2printRTC@month
 19836  003378  6E02               	movwf	i2strcpy@to+1,c
 19837  00337A  0EEA               	movlw	low STR_11
 19838  00337C  6E03               	movwf	i2strcpy@from,c
 19839  00337E  0EFF               	movlw	high STR_11
 19840  003380  6E04               	movwf	i2strcpy@from+1,c
 19841  003382  ECA6  F028         	call	i2_strcpy	;wreg free
 19842                           
 19843                           ;RTC.c: 84: break;
 19844  003386  D085               	goto	i2l7220
 19845  003388                     i2l7200:
 19846                           
 19847                           ;RTC.c: 86: strcpy(month, "MAY");
 19848  003388  0E3D               	movlw	low i2printRTC@month
 19849  00338A  6E01               	movwf	i2strcpy@to,c
 19850  00338C  0E00               	movlw	high i2printRTC@month
 19851  00338E  6E02               	movwf	i2strcpy@to+1,c
 19852  003390  0EFA               	movlw	low STR_12
 19853  003392  6E03               	movwf	i2strcpy@from,c
 19854  003394  0EFF               	movlw	high STR_12
 19855  003396  6E04               	movwf	i2strcpy@from+1,c
 19856  003398  ECA6  F028         	call	i2_strcpy	;wreg free
 19857                           
 19858                           ;RTC.c: 87: break;
 19859  00339C  D07A               	goto	i2l7220
 19860  00339E                     i2l7202:
 19861                           
 19862                           ;RTC.c: 89: strcpy(month, "JUN");
 19863  00339E  0E3D               	movlw	low i2printRTC@month
 19864  0033A0  6E01               	movwf	i2strcpy@to,c
 19865  0033A2  0E00               	movlw	high i2printRTC@month
 19866  0033A4  6E02               	movwf	i2strcpy@to+1,c
 19867  0033A6  0EDE               	movlw	low STR_13
 19868  0033A8  6E03               	movwf	i2strcpy@from,c
 19869  0033AA  0EFF               	movlw	high STR_13
 19870  0033AC  6E04               	movwf	i2strcpy@from+1,c
 19871  0033AE  ECA6  F028         	call	i2_strcpy	;wreg free
 19872                           
 19873                           ;RTC.c: 90: break;
 19874  0033B2  D06F               	goto	i2l7220
 19875  0033B4                     i2l7204:
 19876                           
 19877                           ;RTC.c: 92: strcpy(month, "JUL");
 19878  0033B4  0E3D               	movlw	low i2printRTC@month
 19879  0033B6  6E01               	movwf	i2strcpy@to,c
 19880  0033B8  0E00               	movlw	high i2printRTC@month
 19881  0033BA  6E02               	movwf	i2strcpy@to+1,c
 19882  0033BC  0ED6               	movlw	low STR_14
 19883  0033BE  6E03               	movwf	i2strcpy@from,c
 19884  0033C0  0EFF               	movlw	high STR_14
 19885  0033C2  6E04               	movwf	i2strcpy@from+1,c
 19886  0033C4  ECA6  F028         	call	i2_strcpy	;wreg free
 19887                           
 19888                           ;RTC.c: 93: break;
 19889  0033C8  D064               	goto	i2l7220
 19890  0033CA                     i2l7206:
 19891                           
 19892                           ;RTC.c: 95: strcpy(month, "AUG");
 19893  0033CA  0E3D               	movlw	low i2printRTC@month
 19894  0033CC  6E01               	movwf	i2strcpy@to,c
 19895  0033CE  0E00               	movlw	high i2printRTC@month
 19896  0033D0  6E02               	movwf	i2strcpy@to+1,c
 19897  0033D2  0ED2               	movlw	low STR_15
 19898  0033D4  6E03               	movwf	i2strcpy@from,c
 19899  0033D6  0EFF               	movlw	high STR_15
 19900  0033D8  6E04               	movwf	i2strcpy@from+1,c
 19901  0033DA  ECA6  F028         	call	i2_strcpy	;wreg free
 19902                           
 19903                           ;RTC.c: 96: break;
 19904  0033DE  D059               	goto	i2l7220
 19905  0033E0                     i2l7208:
 19906                           
 19907                           ;RTC.c: 98: strcpy(month, "SEP");
 19908  0033E0  0E3D               	movlw	low i2printRTC@month
 19909  0033E2  6E01               	movwf	i2strcpy@to,c
 19910  0033E4  0E00               	movlw	high i2printRTC@month
 19911  0033E6  6E02               	movwf	i2strcpy@to+1,c
 19912  0033E8  0EE2               	movlw	low STR_16
 19913  0033EA  6E03               	movwf	i2strcpy@from,c
 19914  0033EC  0EFF               	movlw	high STR_16
 19915  0033EE  6E04               	movwf	i2strcpy@from+1,c
 19916  0033F0  ECA6  F028         	call	i2_strcpy	;wreg free
 19917                           
 19918                           ;RTC.c: 99: break;
 19919  0033F4  D04E               	goto	i2l7220
 19920  0033F6                     i2l7210:
 19921                           
 19922                           ;RTC.c: 101: strcpy(month, "OCT");
 19923  0033F6  0E3D               	movlw	low i2printRTC@month
 19924  0033F8  6E01               	movwf	i2strcpy@to,c
 19925  0033FA  0E00               	movlw	high i2printRTC@month
 19926  0033FC  6E02               	movwf	i2strcpy@to+1,c
 19927  0033FE  0EF2               	movlw	low STR_17
 19928  003400  6E03               	movwf	i2strcpy@from,c
 19929  003402  0EFF               	movlw	high STR_17
 19930  003404  6E04               	movwf	i2strcpy@from+1,c
 19931  003406  ECA6  F028         	call	i2_strcpy	;wreg free
 19932                           
 19933                           ;RTC.c: 102: break;
 19934  00340A  D043               	goto	i2l7220
 19935  00340C                     i2l7212:
 19936                           
 19937                           ;RTC.c: 104: strcpy(month, "NOV");
 19938  00340C  0E3D               	movlw	low i2printRTC@month
 19939  00340E  6E01               	movwf	i2strcpy@to,c
 19940  003410  0E00               	movlw	high i2printRTC@month
 19941  003412  6E02               	movwf	i2strcpy@to+1,c
 19942  003414  0EF6               	movlw	low STR_18
 19943  003416  6E03               	movwf	i2strcpy@from,c
 19944  003418  0EFF               	movlw	high STR_18
 19945  00341A  6E04               	movwf	i2strcpy@from+1,c
 19946  00341C  ECA6  F028         	call	i2_strcpy	;wreg free
 19947                           
 19948                           ;RTC.c: 105: break;
 19949  003420  D038               	goto	i2l7220
 19950  003422                     i2l7214:
 19951                           
 19952                           ;RTC.c: 107: strcpy(month, "DEC");
 19953  003422  0E3D               	movlw	low i2printRTC@month
 19954  003424  6E01               	movwf	i2strcpy@to,c
 19955  003426  0E00               	movlw	high i2printRTC@month
 19956  003428  6E02               	movwf	i2strcpy@to+1,c
 19957  00342A  0ECE               	movlw	low STR_19
 19958  00342C  6E03               	movwf	i2strcpy@from,c
 19959  00342E  0EFF               	movlw	high STR_19
 19960  003430  6E04               	movwf	i2strcpy@from+1,c
 19961  003432  ECA6  F028         	call	i2_strcpy	;wreg free
 19962                           
 19963                           ;RTC.c: 109: }
 19964                           
 19965                           ;RTC.c: 108: break;
 19966  003436  D02D               	goto	i2l7220
 19967  003438                     i2l7218:
 19968  003438  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19969  00343C  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19970                           
 19971                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19972                           ; Switch size 1, requested type "space"
 19973                           ; Number of cases is 1, Range of values is 0 to 0
 19974                           ; switch strategies available:
 19975                           ; Name         Instructions Cycles
 19976                           ; simple_byte            4     3 (average)
 19977                           ;	Chosen strategy is simple_byte
 19978  003440  502B               	movf	??i2_printRTC+1,w,c
 19979  003442  0A00               	xorlw	0	; case 0
 19980  003444  A4D8               	btfss	status,2,c
 19981  003446  D025               	goto	i2l7220
 19982                           
 19983                           ; Switch size 1, requested type "space"
 19984                           ; Number of cases is 12, Range of values is 1 to 12
 19985                           ; switch strategies available:
 19986                           ; Name         Instructions Cycles
 19987                           ; simple_byte           37    19 (average)
 19988                           ;	Chosen strategy is simple_byte
 19989  003448  502A               	movf	??i2_printRTC,w,c
 19990  00344A  0A01               	xorlw	1	; case 1
 19991  00344C  B4D8               	btfsc	status,2,c
 19992  00344E  D770               	goto	i2l7192
 19993  003450  0A03               	xorlw	3	; case 2
 19994  003452  B4D8               	btfsc	status,2,c
 19995  003454  D778               	goto	i2l7194
 19996  003456  0A01               	xorlw	1	; case 3
 19997  003458  B4D8               	btfsc	status,2,c
 19998  00345A  D780               	goto	i2l7196
 19999  00345C  0A07               	xorlw	7	; case 4
 20000  00345E  B4D8               	btfsc	status,2,c
 20001  003460  D788               	goto	i2l7198
 20002  003462  0A01               	xorlw	1	; case 5
 20003  003464  B4D8               	btfsc	status,2,c
 20004  003466  D790               	goto	i2l7200
 20005  003468  0A03               	xorlw	3	; case 6
 20006  00346A  B4D8               	btfsc	status,2,c
 20007  00346C  D798               	goto	i2l7202
 20008  00346E  0A01               	xorlw	1	; case 7
 20009  003470  B4D8               	btfsc	status,2,c
 20010  003472  D7A0               	goto	i2l7204
 20011  003474  0A0F               	xorlw	15	; case 8
 20012  003476  B4D8               	btfsc	status,2,c
 20013  003478  D7A8               	goto	i2l7206
 20014  00347A  0A01               	xorlw	1	; case 9
 20015  00347C  B4D8               	btfsc	status,2,c
 20016  00347E  D7B0               	goto	i2l7208
 20017  003480  0A03               	xorlw	3	; case 10
 20018  003482  B4D8               	btfsc	status,2,c
 20019  003484  D7B8               	goto	i2l7210
 20020  003486  0A01               	xorlw	1	; case 11
 20021  003488  B4D8               	btfsc	status,2,c
 20022  00348A  D7C0               	goto	i2l7212
 20023  00348C  0A07               	xorlw	7	; case 12
 20024  00348E  B4D8               	btfsc	status,2,c
 20025  003490  D7C8               	goto	i2l7214
 20026  003492                     i2l7220:
 20027                           
 20028                           ;RTC.c: 110: lcdInst(0b10000000);;
 20029  003492  0E80               	movlw	128
 20030  003494  EC0B  F02B         	call	i2_lcdInst
 20031                           
 20032                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 20033  003498  0EBE               	movlw	low STR_21
 20034  00349A  6E0D               	movwf	i2printf@f,c
 20035  00349C  0EFA               	movlw	high STR_21
 20036  00349E  6E0E               	movwf	i2printf@f+1,c
 20037  0034A0  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 20038  0034A4  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 20039  0034A8  0E3D               	movlw	low i2printRTC@month
 20040  0034AA  6E11               	movwf	?i2_printf+4,c
 20041  0034AC  0E00               	movlw	high i2printRTC@month
 20042  0034AE  6E12               	movwf	?i2_printf+5,c
 20043  0034B0  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 20044  0034B4  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 20045  0034B8  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 20046  0034BC  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 20047  0034C0  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 20048  0034C4  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 20049  0034C8  EC65  F00F         	call	i2_printf	;wreg free
 20050  0034CC  0012               	return		;funcret
 20051  0034CE                     __end_ofi2_printRTC:
 20052                           	opt stack 0
 20053                           pclatu	equ	0xFFB
 20054                           pclath	equ	0xFFA
 20055                           tblptru	equ	0xFF8
 20056                           tblptrh	equ	0xFF7
 20057                           tblptrl	equ	0xFF6
 20058                           tablat	equ	0xFF5
 20059                           prodh	equ	0xFF4
 20060                           prodl	equ	0xFF3
 20061                           intcon	equ	0xFF2
 20062                           intcon2	equ	0xFF1
 20063                           intcon3	equ	0xFF0
 20064                           indf0	equ	0xFEF
 20065                           postinc0	equ	0xFEE
 20066                           fsr0h	equ	0xFEA
 20067                           fsr0l	equ	0xFE9
 20068                           wreg	equ	0xFE8
 20069                           postdec1	equ	0xFE5
 20070                           fsr1h	equ	0xFE2
 20071                           fsr1l	equ	0xFE1
 20072                           indf2	equ	0xFDF
 20073                           postinc2	equ	0xFDE
 20074                           postdec2	equ	0xFDD
 20075                           fsr2h	equ	0xFDA
 20076                           fsr2l	equ	0xFD9
 20077                           status	equ	0xFD8
 20078                           
 20079 ;; *************** function i2_strcpy *****************
 20080 ;; Defined at:
 20081 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 20082 ;; Parameters:    Size  Location     Type
 20083 ;;  to              2    0[COMRAM] PTR unsigned char 
 20084 ;;		 -> printRTC@month(4), UI@month(4), 
 20085 ;;  from            2    2[COMRAM] PTR const unsigned char 
 20086 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 20087 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 20088 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 20089 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 20090 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 20091 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 20092 ;;		 -> STR_8(4), 
 20093 ;; Auto vars:     Size  Location     Type
 20094 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 20095 ;;		 -> printRTC@month(4), UI@month(4), 
 20096 ;; Return value:  Size  Location     Type
 20097 ;;                  2    0[COMRAM] PTR unsigned char 
 20098 ;; Registers used:
 20099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20100 ;; Tracked objects:
 20101 ;;		On entry : 0/0
 20102 ;;		On exit  : 0/0
 20103 ;;		Unchanged: 0/0
 20104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20105 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20108 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20109 ;;Total ram usage:        6 bytes
 20110 ;; Hardware stack levels used:    1
 20111 ;; This function calls:
 20112 ;;		Nothing
 20113 ;; This function is called by:
 20114 ;;		i2_printRTC
 20115 ;; This function uses a non-reentrant model
 20116 ;;
 20117                           
 20118                           	psect	text65
 20119  00514C                     __ptext65:
 20120                           	opt stack 0
 20121  00514C                     i2_strcpy:
 20122                           	opt stack 21
 20123                           
 20124                           ;incstack = 0
 20125  00514C  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 20126  005150  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 20127  005154  D004               	goto	i2l6824
 20128  005156                     i2l6822:
 20129  005156  4A05               	infsnz	i2strcpy@cp,f,c
 20130  005158  2A06               	incf	i2strcpy@cp+1,f,c
 20131  00515A  4A03               	infsnz	i2strcpy@from,f,c
 20132  00515C  2A04               	incf	i2strcpy@from+1,f,c
 20133  00515E                     i2l6824:
 20134  00515E  C003  FFF6         	movff	i2strcpy@from,tblptrl
 20135  005162  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 20136  005166                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20137  005166  6AF8               	clrf	tblptru,c
 20138  005168                     	endif
 20139  005168                     	if	0	;tblptru may be non-zero
 20140  005168                     	endif
 20141  005168  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 20142  00516C  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 20143  005170  0008               	tblrd		*
 20144  005172  CFF5 FFDF          	movff	tablat,indf2
 20145  005176  50DF               	movf	indf2,w,c
 20146  005178  B4D8               	btfsc	status,2,c
 20147  00517A  0012               	return	
 20148  00517C  D7EC               	goto	i2l6822
 20149  00517E                     __end_ofi2_strcpy:
 20150                           	opt stack 0
 20151                           pclatu	equ	0xFFB
 20152                           pclath	equ	0xFFA
 20153                           tblptru	equ	0xFF8
 20154                           tblptrh	equ	0xFF7
 20155                           tblptrl	equ	0xFF6
 20156                           tablat	equ	0xFF5
 20157                           prodh	equ	0xFF4
 20158                           prodl	equ	0xFF3
 20159                           intcon	equ	0xFF2
 20160                           intcon2	equ	0xFF1
 20161                           intcon3	equ	0xFF0
 20162                           indf0	equ	0xFEF
 20163                           postinc0	equ	0xFEE
 20164                           fsr0h	equ	0xFEA
 20165                           fsr0l	equ	0xFE9
 20166                           wreg	equ	0xFE8
 20167                           postdec1	equ	0xFE5
 20168                           fsr1h	equ	0xFE2
 20169                           fsr1l	equ	0xFE1
 20170                           indf2	equ	0xFDF
 20171                           postinc2	equ	0xFDE
 20172                           postdec2	equ	0xFDD
 20173                           fsr2h	equ	0xFDA
 20174                           fsr2l	equ	0xFD9
 20175                           status	equ	0xFD8
 20176                           
 20177 ;; *************** function _inputHandler *****************
 20178 ;; Defined at:
 20179 ;;		line 375 in file "UI.c"
 20180 ;; Parameters:    Size  Location     Type
 20181 ;;		None
 20182 ;; Auto vars:     Size  Location     Type
 20183 ;;		None
 20184 ;; Return value:  Size  Location     Type
 20185 ;;                  2   41[COMRAM] int 
 20186 ;; Registers used:
 20187 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20188 ;; Tracked objects:
 20189 ;;		On entry : 0/0
 20190 ;;		On exit  : 0/0
 20191 ;;		Unchanged: 0/0
 20192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20196 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20197 ;;Total ram usage:        4 bytes
 20198 ;; Hardware stack levels used:    1
 20199 ;; Hardware stack levels required when called:    4
 20200 ;; This function calls:
 20201 ;;		_change_state_to_logs_11
 20202 ;;		_change_state_to_logs_12
 20203 ;;		_change_state_to_logs_22
 20204 ;;		_change_state_to_logs_23
 20205 ;;		_change_state_to_logs_33
 20206 ;;		_change_state_to_logs_34
 20207 ;;		_change_state_to_menu_11
 20208 ;;		_change_state_to_menu_23
 20209 ;;		i2_change_state_to_menu_12
 20210 ;;		i2_change_state_to_menu_22
 20211 ;; This function is called by:
 20212 ;;		_updateMenu
 20213 ;; This function uses a non-reentrant model
 20214 ;;
 20215                           
 20216                           	psect	text66
 20217  0036C0                     __ptext66:
 20218                           	opt stack 0
 20219  0036C0                     _inputHandler:
 20220                           	opt stack 18
 20221                           
 20222                           ;UI.c: 380: if(firstboot){
 20223                           
 20224                           ;incstack = 0
 20225  0036C0  0101               	movlb	1	; () banked
 20226  0036C2  513B               	movf	_firstboot& (0+255),w,b
 20227  0036C4  0101               	movlb	1	; () banked
 20228  0036C6  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 20229  0036C8  B4D8               	btfsc	status,2,c
 20230  0036CA  D00C               	goto	i2l7288
 20231                           
 20232                           ; BSR set to: 1
 20233                           ;UI.c: 381: change_state_to_menu_11();
 20234  0036CC  EC1F  F029         	call	_change_state_to_menu_11	;wreg free
 20235                           
 20236                           ;UI.c: 382: firstboot = 0;
 20237  0036D0  0E00               	movlw	0
 20238  0036D2  0101               	movlb	1	; () banked
 20239  0036D4  6F3C               	movwf	(_firstboot+1)& (0+255),b
 20240  0036D6  0E00               	movlw	0
 20241  0036D8  6F3B               	movwf	_firstboot& (0+255),b
 20242                           
 20243                           ; BSR set to: 1
 20244                           ;UI.c: 383: return 0;
 20245  0036DA  0E00               	movlw	0
 20246  0036DC  6E2B               	movwf	?_inputHandler+1,c
 20247  0036DE  0E00               	movlw	0
 20248  0036E0  6E2A               	movwf	?_inputHandler,c
 20249                           
 20250                           ; BSR set to: 1
 20251  0036E2  0012               	return	
 20252  0036E4                     i2l7288:
 20253                           
 20254                           ; BSR set to: 1
 20255                           ;UI.c: 384: }
 20256                           ;UI.c: 385: if (logstate){
 20257  0036E4  0100               	movlb	0	; () banked
 20258  0036E6  51F8               	movf	_logstate& (0+255),w,b
 20259  0036E8  0100               	movlb	0	; () banked
 20260  0036EA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 20261  0036EC  B4D8               	btfsc	status,2,c
 20262  0036EE  D0C7               	goto	i2l7406
 20263                           
 20264                           ; BSR set to: 0
 20265                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 20266  0036F0  0E43               	movlw	67
 20267  0036F2  187D               	xorwf	_input,w,c	;volatile
 20268  0036F4  A4D8               	btfss	status,2,c
 20269  0036F6  D012               	goto	i2l7306
 20270                           
 20271                           ; BSR set to: 0
 20272  0036F8  B281               	btfsc	3969,1,c	;volatile
 20273  0036FA  D009               	goto	i2l7298
 20274  0036FC  D00F               	goto	i2l7306
 20275  0036FE                     i2l7296:
 20276                           
 20277                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 20278  0036FE  0E68               	movlw	104
 20279  003700  6E2C               	movwf	??_inputHandler& (0+255),c
 20280  003702  0EE4               	movlw	228
 20281  003704                     i2u1068_47:
 20282  003704  2EE8               	decfsz	wreg,f,c
 20283  003706  D7FE               	bra	i2u1068_47
 20284  003708  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 20285  00370A  D7FC               	bra	i2u1068_47
 20286  00370C  D000               	nop2	
 20287  00370E                     i2l7298:
 20288  00370E  B281               	btfsc	3969,1,c	;volatile
 20289  003710  D7F6               	goto	i2l7296
 20290  003712                     i2l7300:
 20291                           
 20292                           ;UI.c: 390: }
 20293                           ;UI.c: 391: return 0;
 20294  003712  0E00               	movlw	0
 20295  003714  6E2B               	movwf	?_inputHandler+1,c
 20296  003716  0E00               	movlw	0
 20297  003718  6E2A               	movwf	?_inputHandler,c
 20298  00371A  0012               	return	
 20299  00371C                     i2l7306:
 20300                           
 20301                           ;UI.c: 393: else if (input == 'D'){
 20302  00371C  0E44               	movlw	68
 20303  00371E  187D               	xorwf	_input,w,c	;volatile
 20304  003720  A4D8               	btfss	status,2,c
 20305  003722  D7F7               	goto	i2l7300
 20306                           
 20307                           ;UI.c: 395: logstate = 0;
 20308  003724  0E00               	movlw	0
 20309  003726  0100               	movlb	0	; () banked
 20310  003728  6FF9               	movwf	(_logstate+1)& (0+255),b
 20311  00372A  0E00               	movlw	0
 20312  00372C  6FF8               	movwf	_logstate& (0+255),b
 20313                           
 20314                           ;UI.c: 396: switch(cur_state){
 20315  00372E  D012               	goto	i2l7324
 20316  003730                     i2l7310:
 20317                           
 20318                           ;UI.c: 398: change_state_to_logs_11();
 20319  003730  EC97  F029         	call	_change_state_to_logs_11	;wreg free
 20320                           
 20321                           ;UI.c: 399: break;
 20322  003734  D7EE               	goto	i2l7300
 20323  003736                     i2l7312:
 20324                           
 20325                           ;UI.c: 401: change_state_to_logs_12();
 20326  003736  EC7F  F029         	call	_change_state_to_logs_12	;wreg free
 20327                           
 20328                           ;UI.c: 402: break;
 20329  00373A  D7EB               	goto	i2l7300
 20330  00373C                     i2l7314:
 20331                           
 20332                           ;UI.c: 404: change_state_to_logs_22();
 20333  00373C  EC67  F029         	call	_change_state_to_logs_22	;wreg free
 20334                           
 20335                           ;UI.c: 405: break;
 20336  003740  D7E8               	goto	i2l7300
 20337  003742                     i2l7316:
 20338                           
 20339                           ;UI.c: 407: change_state_to_logs_23();
 20340  003742  ECC6  F029         	call	_change_state_to_logs_23	;wreg free
 20341                           
 20342                           ;UI.c: 408: break;
 20343  003746  D7E5               	goto	i2l7300
 20344  003748                     i2l7318:
 20345                           
 20346                           ;UI.c: 410: change_state_to_logs_33();
 20347  003748  EC4F  F029         	call	_change_state_to_logs_33	;wreg free
 20348                           
 20349                           ;UI.c: 411: break;
 20350  00374C  D7E2               	goto	i2l7300
 20351  00374E                     i2l7320:
 20352                           
 20353                           ;UI.c: 413: change_state_to_logs_34();
 20354  00374E  EC37  F029         	call	_change_state_to_logs_34	;wreg free
 20355                           
 20356                           ;UI.c: 415: }
 20357                           
 20358                           ;UI.c: 414: break;
 20359  003752  D7DF               	goto	i2l7300
 20360  003754                     i2l7324:
 20361  003754  C0EC  F02C         	movff	_cur_state,??_inputHandler
 20362  003758  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 20363                           
 20364                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20365                           ; Switch size 1, requested type "space"
 20366                           ; Number of cases is 2, Range of values is 3 to 4
 20367                           ; switch strategies available:
 20368                           ; Name         Instructions Cycles
 20369                           ; simple_byte            7     4 (average)
 20370                           ;	Chosen strategy is simple_byte
 20371  00375C  502D               	movf	??_inputHandler+1,w,c
 20372  00375E  0A03               	xorlw	3	; case 3
 20373  003760  B4D8               	btfsc	status,2,c
 20374  003762  D004               	goto	i2l10292
 20375  003764  0A07               	xorlw	7	; case 4
 20376  003766  B4D8               	btfsc	status,2,c
 20377  003768  D00F               	goto	i2l10294
 20378  00376A  D7D3               	goto	i2l7300
 20379  00376C                     i2l10292:
 20380                           
 20381                           ; Switch size 1, requested type "space"
 20382                           ; Number of cases is 4, Range of values is 243 to 255
 20383                           ; switch strategies available:
 20384                           ; Name         Instructions Cycles
 20385                           ; simple_byte           13     7 (average)
 20386                           ;	Chosen strategy is simple_byte
 20387  00376C  502C               	movf	??_inputHandler,w,c
 20388  00376E  0AF3               	xorlw	243	; case 243
 20389  003770  B4D8               	btfsc	status,2,c
 20390  003772  D7DE               	goto	i2l7310
 20391  003774  0A07               	xorlw	7	; case 244
 20392  003776  B4D8               	btfsc	status,2,c
 20393  003778  D7DE               	goto	i2l7312
 20394  00377A  0A0A               	xorlw	10	; case 254
 20395  00377C  B4D8               	btfsc	status,2,c
 20396  00377E  D7DE               	goto	i2l7314
 20397  003780  0A01               	xorlw	1	; case 255
 20398  003782  B4D8               	btfsc	status,2,c
 20399  003784  D7DE               	goto	i2l7316
 20400  003786  D7C5               	goto	i2l7300
 20401  003788                     i2l10294:
 20402                           
 20403                           ; Switch size 1, requested type "space"
 20404                           ; Number of cases is 2, Range of values is 9 to 10
 20405                           ; switch strategies available:
 20406                           ; Name         Instructions Cycles
 20407                           ; simple_byte            7     4 (average)
 20408                           ;	Chosen strategy is simple_byte
 20409  003788  502C               	movf	??_inputHandler,w,c
 20410  00378A  0A09               	xorlw	9	; case 9
 20411  00378C  B4D8               	btfsc	status,2,c
 20412  00378E  D7DC               	goto	i2l7318
 20413  003790  0A03               	xorlw	3	; case 10
 20414  003792  B4D8               	btfsc	status,2,c
 20415  003794  D7DC               	goto	i2l7320
 20416  003796  D7BD               	goto	i2l7300
 20417  003798                     i2l7336:
 20418                           
 20419                           ;UI.c: 425: if(cur_state == 11){
 20420  003798  0E0B               	movlw	11
 20421  00379A  0100               	movlb	0	; () banked
 20422  00379C  19EC               	xorwf	_cur_state& (0+255),w,b
 20423  00379E  0100               	movlb	0	; () banked
 20424  0037A0  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20425  0037A2  A4D8               	btfss	status,2,c
 20426  0037A4  D005               	goto	i2l7344
 20427                           
 20428                           ; BSR set to: 0
 20429                           ;UI.c: 426: return 0;
 20430  0037A6  0E00               	movlw	0
 20431  0037A8  6E2B               	movwf	?_inputHandler+1,c
 20432  0037AA  0E00               	movlw	0
 20433  0037AC  6E2A               	movwf	?_inputHandler,c
 20434                           
 20435                           ; BSR set to: 0
 20436  0037AE  0012               	return	
 20437  0037B0                     i2l7344:
 20438                           
 20439                           ; BSR set to: 0
 20440                           ;UI.c: 428: else{
 20441                           ;UI.c: 429: change_state_to_menu_11();
 20442  0037B0  EC1F  F029         	call	_change_state_to_menu_11	;wreg free
 20443                           
 20444                           ;UI.c: 430: }
 20445                           ;UI.c: 431: return 0;
 20446  0037B4  0E00               	movlw	0
 20447  0037B6  6E2B               	movwf	?_inputHandler+1,c
 20448  0037B8  0E00               	movlw	0
 20449  0037BA  6E2A               	movwf	?_inputHandler,c
 20450  0037BC  0012               	return	
 20451  0037BE                     i2l7350:
 20452                           
 20453                           ;UI.c: 433: if(cur_state == 22 | cur_state == 12){
 20454  0037BE  0E16               	movlw	22
 20455  0037C0  0100               	movlb	0	; () banked
 20456  0037C2  19EC               	xorwf	_cur_state& (0+255),w,b
 20457  0037C4  0100               	movlb	0	; () banked
 20458  0037C6  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20459  0037C8  B4D8               	btfsc	status,2,c
 20460  0037CA  D007               	goto	i2l7354
 20461                           
 20462                           ; BSR set to: 0
 20463  0037CC  0E0C               	movlw	12
 20464  0037CE  0100               	movlb	0	; () banked
 20465  0037D0  19EC               	xorwf	_cur_state& (0+255),w,b
 20466  0037D2  0100               	movlb	0	; () banked
 20467  0037D4  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20468  0037D6  A4D8               	btfss	status,2,c
 20469  0037D8  D005               	goto	i2l7360
 20470  0037DA                     i2l7354:
 20471                           
 20472                           ; BSR set to: 0
 20473                           ;UI.c: 434: return 0;
 20474  0037DA  0E00               	movlw	0
 20475  0037DC  6E2B               	movwf	?_inputHandler+1,c
 20476  0037DE  0E00               	movlw	0
 20477  0037E0  6E2A               	movwf	?_inputHandler,c
 20478                           
 20479                           ; BSR set to: 0
 20480  0037E2  0012               	return	
 20481  0037E4                     i2l7360:
 20482                           
 20483                           ; BSR set to: 0
 20484                           ;UI.c: 436: else if(cur_state == 23){
 20485  0037E4  0E17               	movlw	23
 20486  0037E6  0100               	movlb	0	; () banked
 20487  0037E8  19EC               	xorwf	_cur_state& (0+255),w,b
 20488  0037EA  0100               	movlb	0	; () banked
 20489  0037EC  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20490  0037EE  A4D8               	btfss	status,2,c
 20491  0037F0  D003               	goto	i2l7364
 20492                           
 20493                           ; BSR set to: 0
 20494                           ;UI.c: 437: change_state_to_menu_22();
 20495  0037F2  ECD7  F028         	call	i2_change_state_to_menu_22	;wreg free
 20496                           
 20497                           ;UI.c: 438: }
 20498  0037F6  D002               	goto	i2l7366
 20499  0037F8                     i2l7364:
 20500                           
 20501                           ;UI.c: 439: else{
 20502                           ;UI.c: 440: change_state_to_menu_12();
 20503  0037F8  ECEF  F028         	call	i2_change_state_to_menu_12	;wreg free
 20504  0037FC                     i2l7366:
 20505                           
 20506                           ;UI.c: 441: }
 20507                           ;UI.c: 442: return 0;
 20508  0037FC  0E00               	movlw	0
 20509  0037FE  6E2B               	movwf	?_inputHandler+1,c
 20510  003800  0E00               	movlw	0
 20511  003802  6E2A               	movwf	?_inputHandler,c
 20512  003804  0012               	return	
 20513  003806                     i2l7370:
 20514                           
 20515                           ;UI.c: 444: if(cur_state == 23){
 20516  003806  0E17               	movlw	23
 20517  003808  0100               	movlb	0	; () banked
 20518  00380A  19EC               	xorwf	_cur_state& (0+255),w,b
 20519  00380C  0100               	movlb	0	; () banked
 20520  00380E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20521  003810  A4D8               	btfss	status,2,c
 20522  003812  D005               	goto	i2l7378
 20523                           
 20524                           ; BSR set to: 0
 20525                           ;UI.c: 445: return 0;
 20526  003814  0E00               	movlw	0
 20527  003816  6E2B               	movwf	?_inputHandler+1,c
 20528  003818  0E00               	movlw	0
 20529  00381A  6E2A               	movwf	?_inputHandler,c
 20530                           
 20531                           ; BSR set to: 0
 20532  00381C  0012               	return	
 20533  00381E                     i2l7378:
 20534                           
 20535                           ; BSR set to: 0
 20536                           ;UI.c: 447: else{
 20537                           ;UI.c: 448: change_state_to_menu_23();
 20538  00381E  EC07  F029         	call	_change_state_to_menu_23	;wreg free
 20539                           
 20540                           ;UI.c: 449: }
 20541                           ;UI.c: 450: return 0;
 20542  003822  0E00               	movlw	0
 20543  003824  6E2B               	movwf	?_inputHandler+1,c
 20544  003826  0E00               	movlw	0
 20545  003828  6E2A               	movwf	?_inputHandler,c
 20546  00382A  0012               	return	
 20547  00382C                     i2l7384:
 20548                           
 20549                           ;UI.c: 453: up = 1;
 20550  00382C  0E00               	movlw	0
 20551  00382E  6E76               	movwf	_up+1,c
 20552  003830  0E01               	movlw	1
 20553  003832  6E75               	movwf	_up,c
 20554                           
 20555                           ;UI.c: 454: return 1;
 20556  003834  0E00               	movlw	0
 20557  003836  6E2B               	movwf	?_inputHandler+1,c
 20558  003838  0E01               	movlw	1
 20559  00383A  6E2A               	movwf	?_inputHandler,c
 20560  00383C  0012               	return	
 20561  00383E                     i2l7388:
 20562                           
 20563                           ;UI.c: 456: down = 1;
 20564  00383E  0E00               	movlw	0
 20565  003840  6E5E               	movwf	_down+1,c
 20566  003842  0E01               	movlw	1
 20567  003844  6E5D               	movwf	_down,c
 20568                           
 20569                           ;UI.c: 457: return 1;
 20570  003846  0E00               	movlw	0
 20571  003848  6E2B               	movwf	?_inputHandler+1,c
 20572  00384A  0E01               	movlw	1
 20573  00384C  6E2A               	movwf	?_inputHandler,c
 20574  00384E  0012               	return	
 20575  003850                     i2l7392:
 20576                           
 20577                           ;UI.c: 459: enter = 1;
 20578  003850  0E00               	movlw	0
 20579  003852  6E60               	movwf	_enter+1,c
 20580  003854  0E01               	movlw	1
 20581  003856  6E5F               	movwf	_enter,c
 20582                           
 20583                           ;UI.c: 460: return 1;
 20584  003858  0E00               	movlw	0
 20585  00385A  6E2B               	movwf	?_inputHandler+1,c
 20586  00385C  0E01               	movlw	1
 20587  00385E  6E2A               	movwf	?_inputHandler,c
 20588  003860  0012               	return	
 20589  003862                     i2l7396:
 20590                           
 20591                           ;UI.c: 462: back = 1;
 20592  003862  0E00               	movlw	0
 20593  003864  6E5C               	movwf	_back+1,c
 20594  003866  0E01               	movlw	1
 20595  003868  6E5B               	movwf	_back,c
 20596                           
 20597                           ;UI.c: 463: return 1;
 20598  00386A  0E00               	movlw	0
 20599  00386C  6E2B               	movwf	?_inputHandler+1,c
 20600  00386E  0E01               	movlw	1
 20601  003870  6E2A               	movwf	?_inputHandler,c
 20602  003872  0012               	return	
 20603  003874                     i2l7400:
 20604                           
 20605                           ;UI.c: 466: return 1;
 20606  003874  0E00               	movlw	0
 20607  003876  6E2B               	movwf	?_inputHandler+1,c
 20608  003878  0E01               	movlw	1
 20609  00387A  6E2A               	movwf	?_inputHandler,c
 20610                           
 20611                           ;UI.c: 467: }
 20612  00387C  0012               	return	
 20613  00387E                     i2l7406:
 20614  00387E  507D               	movf	_input,w,c	;volatile
 20615                           
 20616                           ; Switch size 1, requested type "space"
 20617                           ; Number of cases is 7, Range of values is 49 to 68
 20618                           ; switch strategies available:
 20619                           ; Name         Instructions Cycles
 20620                           ; simple_byte           22    12 (average)
 20621                           ;	Chosen strategy is simple_byte
 20622  003880  0A31               	xorlw	49	; case 49
 20623  003882  B4D8               	btfsc	status,2,c
 20624  003884  D789               	goto	i2l7336
 20625  003886  0A03               	xorlw	3	; case 50
 20626  003888  B4D8               	btfsc	status,2,c
 20627  00388A  D799               	goto	i2l7350
 20628  00388C  0A01               	xorlw	1	; case 51
 20629  00388E  B4D8               	btfsc	status,2,c
 20630  003890  D7BA               	goto	i2l7370
 20631  003892  0A72               	xorlw	114	; case 65
 20632  003894  B4D8               	btfsc	status,2,c
 20633  003896  D7CA               	goto	i2l7384
 20634  003898  0A03               	xorlw	3	; case 66
 20635  00389A  B4D8               	btfsc	status,2,c
 20636  00389C  D7D0               	goto	i2l7388
 20637  00389E  0A01               	xorlw	1	; case 67
 20638  0038A0  B4D8               	btfsc	status,2,c
 20639  0038A2  D7D6               	goto	i2l7392
 20640  0038A4  0A07               	xorlw	7	; case 68
 20641  0038A6  B4D8               	btfsc	status,2,c
 20642  0038A8  D7DC               	goto	i2l7396
 20643  0038AA  D7E4               	goto	i2l7400
 20644  0038AC                     __end_of_inputHandler:
 20645                           	opt stack 0
 20646                           pclatu	equ	0xFFB
 20647                           pclath	equ	0xFFA
 20648                           tblptru	equ	0xFF8
 20649                           tblptrh	equ	0xFF7
 20650                           tblptrl	equ	0xFF6
 20651                           tablat	equ	0xFF5
 20652                           prodh	equ	0xFF4
 20653                           prodl	equ	0xFF3
 20654                           intcon	equ	0xFF2
 20655                           intcon2	equ	0xFF1
 20656                           intcon3	equ	0xFF0
 20657                           indf0	equ	0xFEF
 20658                           postinc0	equ	0xFEE
 20659                           fsr0h	equ	0xFEA
 20660                           fsr0l	equ	0xFE9
 20661                           wreg	equ	0xFE8
 20662                           postdec1	equ	0xFE5
 20663                           fsr1h	equ	0xFE2
 20664                           fsr1l	equ	0xFE1
 20665                           indf2	equ	0xFDF
 20666                           postinc2	equ	0xFDE
 20667                           postdec2	equ	0xFDD
 20668                           fsr2h	equ	0xFDA
 20669                           fsr2l	equ	0xFD9
 20670                           status	equ	0xFD8
 20671                           
 20672 ;; *************** function i2_change_state_to_menu_22 *****************
 20673 ;; Defined at:
 20674 ;;		line 501 in file "UI.c"
 20675 ;; Parameters:    Size  Location     Type
 20676 ;;		None
 20677 ;; Auto vars:     Size  Location     Type
 20678 ;;		None
 20679 ;; Return value:  Size  Location     Type
 20680 ;;                  1    wreg      void 
 20681 ;; Registers used:
 20682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20683 ;; Tracked objects:
 20684 ;;		On entry : 0/0
 20685 ;;		On exit  : 0/0
 20686 ;;		Unchanged: 0/0
 20687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20692 ;;Total ram usage:        0 bytes
 20693 ;; Hardware stack levels used:    1
 20694 ;; Hardware stack levels required when called:    3
 20695 ;; This function calls:
 20696 ;;		i2_lcdInst
 20697 ;;		i2_printf
 20698 ;; This function is called by:
 20699 ;;		_updateMenu
 20700 ;;		_inputHandler
 20701 ;; This function uses a non-reentrant model
 20702 ;;
 20703                           
 20704                           	psect	text67
 20705  0051AE                     __ptext67:
 20706                           	opt stack 0
 20707  0051AE                     i2_change_state_to_menu_22:
 20708                           	opt stack 19
 20709                           
 20710                           ;UI.c: 502: cur_state = 22;
 20711                           
 20712                           ;incstack = 0
 20713  0051AE  0E00               	movlw	0
 20714  0051B0  0100               	movlb	0	; () banked
 20715  0051B2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20716  0051B4  0E16               	movlw	22
 20717  0051B6  6FEC               	movwf	_cur_state& (0+255),b
 20718                           
 20719                           ; BSR set to: 0
 20720                           ;UI.c: 504: lcdInst(0b10000000);;
 20721  0051B8  0E80               	movlw	128
 20722  0051BA  EC0B  F02B         	call	i2_lcdInst
 20723                           
 20724                           ;UI.c: 505: printf("2. SORT        <");
 20725  0051BE  0ECE               	movlw	low STR_34
 20726  0051C0  6E0D               	movwf	i2printf@f,c
 20727  0051C2  0EFD               	movlw	high STR_34
 20728  0051C4  6E0E               	movwf	i2printf@f+1,c
 20729  0051C6  EC65  F00F         	call	i2_printf	;wreg free
 20730                           
 20731                           ;UI.c: 506: lcdInst(0b11000000);;
 20732  0051CA  0EC0               	movlw	192
 20733  0051CC  EC0B  F02B         	call	i2_lcdInst
 20734                           
 20735                           ;UI.c: 507: printf("3. LOGS         ");
 20736  0051D0  0E13               	movlw	low STR_36
 20737  0051D2  6E0D               	movwf	i2printf@f,c
 20738  0051D4  0EFD               	movlw	high STR_36
 20739  0051D6  6E0E               	movwf	i2printf@f+1,c
 20740  0051D8  EC65  F00F         	call	i2_printf	;wreg free
 20741  0051DC  0012               	return		;funcret
 20742  0051DE                     __end_ofi2_change_state_to_menu_22:
 20743                           	opt stack 0
 20744                           pclatu	equ	0xFFB
 20745                           pclath	equ	0xFFA
 20746                           tblptru	equ	0xFF8
 20747                           tblptrh	equ	0xFF7
 20748                           tblptrl	equ	0xFF6
 20749                           tablat	equ	0xFF5
 20750                           prodh	equ	0xFF4
 20751                           prodl	equ	0xFF3
 20752                           intcon	equ	0xFF2
 20753                           intcon2	equ	0xFF1
 20754                           intcon3	equ	0xFF0
 20755                           indf0	equ	0xFEF
 20756                           postinc0	equ	0xFEE
 20757                           fsr0h	equ	0xFEA
 20758                           fsr0l	equ	0xFE9
 20759                           wreg	equ	0xFE8
 20760                           postdec1	equ	0xFE5
 20761                           fsr1h	equ	0xFE2
 20762                           fsr1l	equ	0xFE1
 20763                           indf2	equ	0xFDF
 20764                           postinc2	equ	0xFDE
 20765                           postdec2	equ	0xFDD
 20766                           fsr2h	equ	0xFDA
 20767                           fsr2l	equ	0xFD9
 20768                           status	equ	0xFD8
 20769                           
 20770 ;; *************** function i2_change_state_to_menu_12 *****************
 20771 ;; Defined at:
 20772 ;;		line 493 in file "UI.c"
 20773 ;; Parameters:    Size  Location     Type
 20774 ;;		None
 20775 ;; Auto vars:     Size  Location     Type
 20776 ;;		None
 20777 ;; Return value:  Size  Location     Type
 20778 ;;                  1    wreg      void 
 20779 ;; Registers used:
 20780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20781 ;; Tracked objects:
 20782 ;;		On entry : 0/0
 20783 ;;		On exit  : 0/0
 20784 ;;		Unchanged: 0/0
 20785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20790 ;;Total ram usage:        0 bytes
 20791 ;; Hardware stack levels used:    1
 20792 ;; Hardware stack levels required when called:    3
 20793 ;; This function calls:
 20794 ;;		i2_lcdInst
 20795 ;;		i2_printf
 20796 ;; This function is called by:
 20797 ;;		_updateMenu
 20798 ;;		_inputHandler
 20799 ;; This function uses a non-reentrant model
 20800 ;;
 20801                           
 20802                           	psect	text68
 20803  0051DE                     __ptext68:
 20804                           	opt stack 0
 20805  0051DE                     i2_change_state_to_menu_12:
 20806                           	opt stack 19
 20807                           
 20808                           ;UI.c: 494: cur_state = 12;
 20809                           
 20810                           ;incstack = 0
 20811  0051DE  0E00               	movlw	0
 20812  0051E0  0100               	movlb	0	; () banked
 20813  0051E2  6FED               	movwf	(_cur_state+1)& (0+255),b
 20814  0051E4  0E0C               	movlw	12
 20815  0051E6  6FEC               	movwf	_cur_state& (0+255),b
 20816                           
 20817                           ; BSR set to: 0
 20818                           ;UI.c: 496: lcdInst(0b10000000);;
 20819  0051E8  0E80               	movlw	128
 20820  0051EA  EC0B  F02B         	call	i2_lcdInst
 20821                           
 20822                           ;UI.c: 497: printf("1. DATE/TIME    ");
 20823  0051EE  0E35               	movlw	low STR_33
 20824  0051F0  6E0D               	movwf	i2printf@f,c
 20825  0051F2  0EFD               	movlw	high STR_33
 20826  0051F4  6E0E               	movwf	i2printf@f+1,c
 20827  0051F6  EC65  F00F         	call	i2_printf	;wreg free
 20828                           
 20829                           ;UI.c: 498: lcdInst(0b11000000);;
 20830  0051FA  0EC0               	movlw	192
 20831  0051FC  EC0B  F02B         	call	i2_lcdInst
 20832                           
 20833                           ;UI.c: 499: printf("2. SORT        <");
 20834  005200  0ECE               	movlw	low STR_34
 20835  005202  6E0D               	movwf	i2printf@f,c
 20836  005204  0EFD               	movlw	high STR_34
 20837  005206  6E0E               	movwf	i2printf@f+1,c
 20838  005208  EC65  F00F         	call	i2_printf	;wreg free
 20839  00520C  0012               	return		;funcret
 20840  00520E                     __end_ofi2_change_state_to_menu_12:
 20841                           	opt stack 0
 20842                           pclatu	equ	0xFFB
 20843                           pclath	equ	0xFFA
 20844                           tblptru	equ	0xFF8
 20845                           tblptrh	equ	0xFF7
 20846                           tblptrl	equ	0xFF6
 20847                           tablat	equ	0xFF5
 20848                           prodh	equ	0xFF4
 20849                           prodl	equ	0xFF3
 20850                           intcon	equ	0xFF2
 20851                           intcon2	equ	0xFF1
 20852                           intcon3	equ	0xFF0
 20853                           indf0	equ	0xFEF
 20854                           postinc0	equ	0xFEE
 20855                           fsr0h	equ	0xFEA
 20856                           fsr0l	equ	0xFE9
 20857                           wreg	equ	0xFE8
 20858                           postdec1	equ	0xFE5
 20859                           fsr1h	equ	0xFE2
 20860                           fsr1l	equ	0xFE1
 20861                           indf2	equ	0xFDF
 20862                           postinc2	equ	0xFDE
 20863                           postdec2	equ	0xFDD
 20864                           fsr2h	equ	0xFDA
 20865                           fsr2l	equ	0xFD9
 20866                           status	equ	0xFD8
 20867                           
 20868 ;; *************** function _change_state_to_menu_23 *****************
 20869 ;; Defined at:
 20870 ;;		line 509 in file "UI.c"
 20871 ;; Parameters:    Size  Location     Type
 20872 ;;		None
 20873 ;; Auto vars:     Size  Location     Type
 20874 ;;		None
 20875 ;; Return value:  Size  Location     Type
 20876 ;;                  1    wreg      void 
 20877 ;; Registers used:
 20878 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20879 ;; Tracked objects:
 20880 ;;		On entry : 0/0
 20881 ;;		On exit  : 0/0
 20882 ;;		Unchanged: 0/0
 20883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20888 ;;Total ram usage:        0 bytes
 20889 ;; Hardware stack levels used:    1
 20890 ;; Hardware stack levels required when called:    3
 20891 ;; This function calls:
 20892 ;;		i2_lcdInst
 20893 ;;		i2_printf
 20894 ;; This function is called by:
 20895 ;;		_updateMenu
 20896 ;;		_inputHandler
 20897 ;; This function uses a non-reentrant model
 20898 ;;
 20899                           
 20900                           	psect	text69
 20901  00520E                     __ptext69:
 20902                           	opt stack 0
 20903  00520E                     _change_state_to_menu_23:
 20904                           	opt stack 18
 20905                           
 20906                           ;UI.c: 510: cur_state = 23;
 20907                           
 20908                           ;incstack = 0
 20909  00520E  0E00               	movlw	0
 20910  005210  0100               	movlb	0	; () banked
 20911  005212  6FED               	movwf	(_cur_state+1)& (0+255),b
 20912  005214  0E17               	movlw	23
 20913  005216  6FEC               	movwf	_cur_state& (0+255),b
 20914                           
 20915                           ; BSR set to: 0
 20916                           ;UI.c: 512: lcdInst(0b10000000);;
 20917  005218  0E80               	movlw	128
 20918  00521A  EC0B  F02B         	call	i2_lcdInst
 20919                           
 20920                           ;UI.c: 513: printf("2. SORT         ");
 20921  00521E  0E24               	movlw	low STR_32
 20922  005220  6E0D               	movwf	i2printf@f,c
 20923  005222  0EFD               	movlw	high STR_32
 20924  005224  6E0E               	movwf	i2printf@f+1,c
 20925  005226  EC65  F00F         	call	i2_printf	;wreg free
 20926                           
 20927                           ;UI.c: 514: lcdInst(0b11000000);;
 20928  00522A  0EC0               	movlw	192
 20929  00522C  EC0B  F02B         	call	i2_lcdInst
 20930                           
 20931                           ;UI.c: 515: printf("3. LOGS        <");
 20932  005230  0EBD               	movlw	low STR_38
 20933  005232  6E0D               	movwf	i2printf@f,c
 20934  005234  0EFD               	movlw	high STR_38
 20935  005236  6E0E               	movwf	i2printf@f+1,c
 20936  005238  EC65  F00F         	call	i2_printf	;wreg free
 20937  00523C  0012               	return		;funcret
 20938  00523E                     __end_of_change_state_to_menu_23:
 20939                           	opt stack 0
 20940                           pclatu	equ	0xFFB
 20941                           pclath	equ	0xFFA
 20942                           tblptru	equ	0xFF8
 20943                           tblptrh	equ	0xFF7
 20944                           tblptrl	equ	0xFF6
 20945                           tablat	equ	0xFF5
 20946                           prodh	equ	0xFF4
 20947                           prodl	equ	0xFF3
 20948                           intcon	equ	0xFF2
 20949                           intcon2	equ	0xFF1
 20950                           intcon3	equ	0xFF0
 20951                           indf0	equ	0xFEF
 20952                           postinc0	equ	0xFEE
 20953                           fsr0h	equ	0xFEA
 20954                           fsr0l	equ	0xFE9
 20955                           wreg	equ	0xFE8
 20956                           postdec1	equ	0xFE5
 20957                           fsr1h	equ	0xFE2
 20958                           fsr1l	equ	0xFE1
 20959                           indf2	equ	0xFDF
 20960                           postinc2	equ	0xFDE
 20961                           postdec2	equ	0xFDD
 20962                           fsr2h	equ	0xFDA
 20963                           fsr2l	equ	0xFD9
 20964                           status	equ	0xFD8
 20965                           
 20966 ;; *************** function _change_state_to_menu_11 *****************
 20967 ;; Defined at:
 20968 ;;		line 485 in file "UI.c"
 20969 ;; Parameters:    Size  Location     Type
 20970 ;;		None
 20971 ;; Auto vars:     Size  Location     Type
 20972 ;;		None
 20973 ;; Return value:  Size  Location     Type
 20974 ;;                  1    wreg      void 
 20975 ;; Registers used:
 20976 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20977 ;; Tracked objects:
 20978 ;;		On entry : 0/0
 20979 ;;		On exit  : 0/0
 20980 ;;		Unchanged: 0/0
 20981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20986 ;;Total ram usage:        0 bytes
 20987 ;; Hardware stack levels used:    1
 20988 ;; Hardware stack levels required when called:    3
 20989 ;; This function calls:
 20990 ;;		i2_lcdInst
 20991 ;;		i2_printf
 20992 ;; This function is called by:
 20993 ;;		_updateMenu
 20994 ;;		_inputHandler
 20995 ;; This function uses a non-reentrant model
 20996 ;;
 20997                           
 20998                           	psect	text70
 20999  00523E                     __ptext70:
 21000                           	opt stack 0
 21001  00523E                     _change_state_to_menu_11:
 21002                           	opt stack 18
 21003                           
 21004                           ;UI.c: 486: cur_state = 11;
 21005                           
 21006                           ;incstack = 0
 21007  00523E  0E00               	movlw	0
 21008  005240  0100               	movlb	0	; () banked
 21009  005242  6FED               	movwf	(_cur_state+1)& (0+255),b
 21010  005244  0E0B               	movlw	11
 21011  005246  6FEC               	movwf	_cur_state& (0+255),b
 21012                           
 21013                           ; BSR set to: 0
 21014                           ;UI.c: 488: lcdInst(0b10000000);;
 21015  005248  0E80               	movlw	128
 21016  00524A  EC0B  F02B         	call	i2_lcdInst
 21017                           
 21018                           ;UI.c: 489: printf("1. DATE/TIME   <");
 21019  00524E  0EDF               	movlw	low STR_31
 21020  005250  6E0D               	movwf	i2printf@f,c
 21021  005252  0EFD               	movlw	high STR_31
 21022  005254  6E0E               	movwf	i2printf@f+1,c
 21023  005256  EC65  F00F         	call	i2_printf	;wreg free
 21024                           
 21025                           ;UI.c: 490: lcdInst(0b11000000);;
 21026  00525A  0EC0               	movlw	192
 21027  00525C  EC0B  F02B         	call	i2_lcdInst
 21028                           
 21029                           ;UI.c: 491: printf("2. SORT         ");
 21030  005260  0E24               	movlw	low STR_32
 21031  005262  6E0D               	movwf	i2printf@f,c
 21032  005264  0EFD               	movlw	high STR_32
 21033  005266  6E0E               	movwf	i2printf@f+1,c
 21034  005268  EC65  F00F         	call	i2_printf	;wreg free
 21035  00526C  0012               	return		;funcret
 21036  00526E                     __end_of_change_state_to_menu_11:
 21037                           	opt stack 0
 21038                           pclatu	equ	0xFFB
 21039                           pclath	equ	0xFFA
 21040                           tblptru	equ	0xFF8
 21041                           tblptrh	equ	0xFF7
 21042                           tblptrl	equ	0xFF6
 21043                           tablat	equ	0xFF5
 21044                           prodh	equ	0xFF4
 21045                           prodl	equ	0xFF3
 21046                           intcon	equ	0xFF2
 21047                           intcon2	equ	0xFF1
 21048                           intcon3	equ	0xFF0
 21049                           indf0	equ	0xFEF
 21050                           postinc0	equ	0xFEE
 21051                           fsr0h	equ	0xFEA
 21052                           fsr0l	equ	0xFE9
 21053                           wreg	equ	0xFE8
 21054                           postdec1	equ	0xFE5
 21055                           fsr1h	equ	0xFE2
 21056                           fsr1l	equ	0xFE1
 21057                           indf2	equ	0xFDF
 21058                           postinc2	equ	0xFDE
 21059                           postdec2	equ	0xFDD
 21060                           fsr2h	equ	0xFDA
 21061                           fsr2l	equ	0xFD9
 21062                           status	equ	0xFD8
 21063                           
 21064 ;; *************** function _change_state_to_logs_34 *****************
 21065 ;; Defined at:
 21066 ;;		line 552 in file "UI.c"
 21067 ;; Parameters:    Size  Location     Type
 21068 ;;		None
 21069 ;; Auto vars:     Size  Location     Type
 21070 ;;		None
 21071 ;; Return value:  Size  Location     Type
 21072 ;;                  1    wreg      void 
 21073 ;; Registers used:
 21074 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21075 ;; Tracked objects:
 21076 ;;		On entry : 0/0
 21077 ;;		On exit  : 0/0
 21078 ;;		Unchanged: 0/0
 21079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21084 ;;Total ram usage:        0 bytes
 21085 ;; Hardware stack levels used:    1
 21086 ;; Hardware stack levels required when called:    3
 21087 ;; This function calls:
 21088 ;;		i2_lcdInst
 21089 ;;		i2_printf
 21090 ;; This function is called by:
 21091 ;;		_updateMenu
 21092 ;;		_inputHandler
 21093 ;; This function uses a non-reentrant model
 21094 ;;
 21095                           
 21096                           	psect	text71
 21097  00526E                     __ptext71:
 21098                           	opt stack 0
 21099  00526E                     _change_state_to_logs_34:
 21100                           	opt stack 18
 21101                           
 21102                           ;UI.c: 553: cur_state = 1034;
 21103                           
 21104                           ;incstack = 0
 21105  00526E  0E04               	movlw	4
 21106  005270  0100               	movlb	0	; () banked
 21107  005272  6FED               	movwf	(_cur_state+1)& (0+255),b
 21108  005274  0E0A               	movlw	10
 21109  005276  6FEC               	movwf	_cur_state& (0+255),b
 21110                           
 21111                           ; BSR set to: 0
 21112                           ;UI.c: 554: lcdInst(0b10000000);;
 21113  005278  0E80               	movlw	128
 21114  00527A  EC0B  F02B         	call	i2_lcdInst
 21115                           
 21116                           ;UI.c: 555: printf("LOG 3           ");
 21117  00527E  0EF1               	movlw	low STR_44
 21118  005280  6E0D               	movwf	i2printf@f,c
 21119  005282  0EFC               	movlw	high STR_44
 21120  005284  6E0E               	movwf	i2printf@f+1,c
 21121  005286  EC65  F00F         	call	i2_printf	;wreg free
 21122                           
 21123                           ;UI.c: 556: lcdInst(0b11000000);;
 21124  00528A  0EC0               	movlw	192
 21125  00528C  EC0B  F02B         	call	i2_lcdInst
 21126                           
 21127                           ;UI.c: 557: printf("LOG 4          <");
 21128  005290  0EAC               	movlw	low STR_50
 21129  005292  6E0D               	movwf	i2printf@f,c
 21130  005294  0EFD               	movlw	high STR_50
 21131  005296  6E0E               	movwf	i2printf@f+1,c
 21132  005298  EC65  F00F         	call	i2_printf	;wreg free
 21133  00529C  0012               	return		;funcret
 21134  00529E                     __end_of_change_state_to_logs_34:
 21135                           	opt stack 0
 21136                           pclatu	equ	0xFFB
 21137                           pclath	equ	0xFFA
 21138                           tblptru	equ	0xFF8
 21139                           tblptrh	equ	0xFF7
 21140                           tblptrl	equ	0xFF6
 21141                           tablat	equ	0xFF5
 21142                           prodh	equ	0xFF4
 21143                           prodl	equ	0xFF3
 21144                           intcon	equ	0xFF2
 21145                           intcon2	equ	0xFF1
 21146                           intcon3	equ	0xFF0
 21147                           indf0	equ	0xFEF
 21148                           postinc0	equ	0xFEE
 21149                           fsr0h	equ	0xFEA
 21150                           fsr0l	equ	0xFE9
 21151                           wreg	equ	0xFE8
 21152                           postdec1	equ	0xFE5
 21153                           fsr1h	equ	0xFE2
 21154                           fsr1l	equ	0xFE1
 21155                           indf2	equ	0xFDF
 21156                           postinc2	equ	0xFDE
 21157                           postdec2	equ	0xFDD
 21158                           fsr2h	equ	0xFDA
 21159                           fsr2l	equ	0xFD9
 21160                           status	equ	0xFD8
 21161                           
 21162 ;; *************** function _change_state_to_logs_33 *****************
 21163 ;; Defined at:
 21164 ;;		line 545 in file "UI.c"
 21165 ;; Parameters:    Size  Location     Type
 21166 ;;		None
 21167 ;; Auto vars:     Size  Location     Type
 21168 ;;		None
 21169 ;; Return value:  Size  Location     Type
 21170 ;;                  1    wreg      void 
 21171 ;; Registers used:
 21172 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21173 ;; Tracked objects:
 21174 ;;		On entry : 0/0
 21175 ;;		On exit  : 0/0
 21176 ;;		Unchanged: 0/0
 21177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21182 ;;Total ram usage:        0 bytes
 21183 ;; Hardware stack levels used:    1
 21184 ;; Hardware stack levels required when called:    3
 21185 ;; This function calls:
 21186 ;;		i2_lcdInst
 21187 ;;		i2_printf
 21188 ;; This function is called by:
 21189 ;;		_updateMenu
 21190 ;;		_inputHandler
 21191 ;; This function uses a non-reentrant model
 21192 ;;
 21193                           
 21194                           	psect	text72
 21195  00529E                     __ptext72:
 21196                           	opt stack 0
 21197  00529E                     _change_state_to_logs_33:
 21198                           	opt stack 18
 21199                           
 21200                           ;UI.c: 546: cur_state = 1033;
 21201                           
 21202                           ;incstack = 0
 21203  00529E  0E04               	movlw	4
 21204  0052A0  0100               	movlb	0	; () banked
 21205  0052A2  6FED               	movwf	(_cur_state+1)& (0+255),b
 21206  0052A4  0E09               	movlw	9
 21207  0052A6  6FEC               	movwf	_cur_state& (0+255),b
 21208                           
 21209                           ; BSR set to: 0
 21210                           ;UI.c: 547: lcdInst(0b10000000);;
 21211  0052A8  0E80               	movlw	128
 21212  0052AA  EC0B  F02B         	call	i2_lcdInst
 21213                           
 21214                           ;UI.c: 548: printf("LOG 3          <");
 21215  0052AE  0E9B               	movlw	low STR_46
 21216  0052B0  6E0D               	movwf	i2printf@f,c
 21217  0052B2  0EFD               	movlw	high STR_46
 21218  0052B4  6E0E               	movwf	i2printf@f+1,c
 21219  0052B6  EC65  F00F         	call	i2_printf	;wreg free
 21220                           
 21221                           ;UI.c: 549: lcdInst(0b11000000);;
 21222  0052BA  0EC0               	movlw	192
 21223  0052BC  EC0B  F02B         	call	i2_lcdInst
 21224                           
 21225                           ;UI.c: 550: printf("LOG 4           ");
 21226  0052C0  0E02               	movlw	low STR_48
 21227  0052C2  6E0D               	movwf	i2printf@f,c
 21228  0052C4  0EFD               	movlw	high STR_48
 21229  0052C6  6E0E               	movwf	i2printf@f+1,c
 21230  0052C8  EC65  F00F         	call	i2_printf	;wreg free
 21231  0052CC  0012               	return		;funcret
 21232  0052CE                     __end_of_change_state_to_logs_33:
 21233                           	opt stack 0
 21234                           pclatu	equ	0xFFB
 21235                           pclath	equ	0xFFA
 21236                           tblptru	equ	0xFF8
 21237                           tblptrh	equ	0xFF7
 21238                           tblptrl	equ	0xFF6
 21239                           tablat	equ	0xFF5
 21240                           prodh	equ	0xFF4
 21241                           prodl	equ	0xFF3
 21242                           intcon	equ	0xFF2
 21243                           intcon2	equ	0xFF1
 21244                           intcon3	equ	0xFF0
 21245                           indf0	equ	0xFEF
 21246                           postinc0	equ	0xFEE
 21247                           fsr0h	equ	0xFEA
 21248                           fsr0l	equ	0xFE9
 21249                           wreg	equ	0xFE8
 21250                           postdec1	equ	0xFE5
 21251                           fsr1h	equ	0xFE2
 21252                           fsr1l	equ	0xFE1
 21253                           indf2	equ	0xFDF
 21254                           postinc2	equ	0xFDE
 21255                           postdec2	equ	0xFDD
 21256                           fsr2h	equ	0xFDA
 21257                           fsr2l	equ	0xFD9
 21258                           status	equ	0xFD8
 21259                           
 21260 ;; *************** function _change_state_to_logs_23 *****************
 21261 ;; Defined at:
 21262 ;;		line 538 in file "UI.c"
 21263 ;; Parameters:    Size  Location     Type
 21264 ;;		None
 21265 ;; Auto vars:     Size  Location     Type
 21266 ;;		None
 21267 ;; Return value:  Size  Location     Type
 21268 ;;                  1    wreg      void 
 21269 ;; Registers used:
 21270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21271 ;; Tracked objects:
 21272 ;;		On entry : 0/0
 21273 ;;		On exit  : 0/0
 21274 ;;		Unchanged: 0/0
 21275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21280 ;;Total ram usage:        0 bytes
 21281 ;; Hardware stack levels used:    1
 21282 ;; Hardware stack levels required when called:    3
 21283 ;; This function calls:
 21284 ;;		i2_lcdInst
 21285 ;;		i2_printf
 21286 ;; This function is called by:
 21287 ;;		_updateMenu
 21288 ;;		_inputHandler
 21289 ;; This function uses a non-reentrant model
 21290 ;;
 21291                           
 21292                           	psect	text73
 21293  00538C                     __ptext73:
 21294                           	opt stack 0
 21295  00538C                     _change_state_to_logs_23:
 21296                           	opt stack 18
 21297                           
 21298                           ;UI.c: 539: cur_state = 1023;
 21299                           
 21300                           ;incstack = 0
 21301  00538C  0E03               	movlw	3
 21302  00538E  0100               	movlb	0	; () banked
 21303  005390  6FED               	movwf	(_cur_state+1)& (0+255),b
 21304  005392  69EC               	setf	_cur_state& (0+255),b
 21305                           
 21306                           ; BSR set to: 0
 21307                           ;UI.c: 540: lcdInst(0b10000000);;
 21308  005394  0E80               	movlw	128
 21309  005396  EC0B  F02B         	call	i2_lcdInst
 21310                           
 21311                           ;UI.c: 541: printf("LOG 2           ");
 21312  00539A  0EE0               	movlw	low STR_40
 21313  00539C  6E0D               	movwf	i2printf@f,c
 21314  00539E  0EFC               	movlw	high STR_40
 21315  0053A0  6E0E               	movwf	i2printf@f+1,c
 21316  0053A2  EC65  F00F         	call	i2_printf	;wreg free
 21317                           
 21318                           ;UI.c: 542: lcdInst(0b11000000);;
 21319  0053A6  0EC0               	movlw	192
 21320  0053A8  EC0B  F02B         	call	i2_lcdInst
 21321                           
 21322                           ;UI.c: 543: printf("LOG 3          <");
 21323  0053AC  0E9B               	movlw	low STR_46
 21324  0053AE  6E0D               	movwf	i2printf@f,c
 21325  0053B0  0EFD               	movlw	high STR_46
 21326  0053B2  6E0E               	movwf	i2printf@f+1,c
 21327  0053B4  EC65  F00F         	call	i2_printf	;wreg free
 21328  0053B8  0012               	return		;funcret
 21329  0053BA                     __end_of_change_state_to_logs_23:
 21330                           	opt stack 0
 21331                           pclatu	equ	0xFFB
 21332                           pclath	equ	0xFFA
 21333                           tblptru	equ	0xFF8
 21334                           tblptrh	equ	0xFF7
 21335                           tblptrl	equ	0xFF6
 21336                           tablat	equ	0xFF5
 21337                           prodh	equ	0xFF4
 21338                           prodl	equ	0xFF3
 21339                           intcon	equ	0xFF2
 21340                           intcon2	equ	0xFF1
 21341                           intcon3	equ	0xFF0
 21342                           indf0	equ	0xFEF
 21343                           postinc0	equ	0xFEE
 21344                           fsr0h	equ	0xFEA
 21345                           fsr0l	equ	0xFE9
 21346                           wreg	equ	0xFE8
 21347                           postdec1	equ	0xFE5
 21348                           fsr1h	equ	0xFE2
 21349                           fsr1l	equ	0xFE1
 21350                           indf2	equ	0xFDF
 21351                           postinc2	equ	0xFDE
 21352                           postdec2	equ	0xFDD
 21353                           fsr2h	equ	0xFDA
 21354                           fsr2l	equ	0xFD9
 21355                           status	equ	0xFD8
 21356                           
 21357 ;; *************** function _change_state_to_logs_22 *****************
 21358 ;; Defined at:
 21359 ;;		line 531 in file "UI.c"
 21360 ;; Parameters:    Size  Location     Type
 21361 ;;		None
 21362 ;; Auto vars:     Size  Location     Type
 21363 ;;		None
 21364 ;; Return value:  Size  Location     Type
 21365 ;;                  1    wreg      void 
 21366 ;; Registers used:
 21367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21368 ;; Tracked objects:
 21369 ;;		On entry : 0/0
 21370 ;;		On exit  : 0/0
 21371 ;;		Unchanged: 0/0
 21372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21377 ;;Total ram usage:        0 bytes
 21378 ;; Hardware stack levels used:    1
 21379 ;; Hardware stack levels required when called:    3
 21380 ;; This function calls:
 21381 ;;		i2_lcdInst
 21382 ;;		i2_printf
 21383 ;; This function is called by:
 21384 ;;		_updateMenu
 21385 ;;		_inputHandler
 21386 ;; This function uses a non-reentrant model
 21387 ;;
 21388                           
 21389                           	psect	text74
 21390  0052CE                     __ptext74:
 21391                           	opt stack 0
 21392  0052CE                     _change_state_to_logs_22:
 21393                           	opt stack 18
 21394                           
 21395                           ;UI.c: 532: cur_state = 1022;
 21396                           
 21397                           ;incstack = 0
 21398  0052CE  0E03               	movlw	3
 21399  0052D0  0100               	movlb	0	; () banked
 21400  0052D2  6FED               	movwf	(_cur_state+1)& (0+255),b
 21401  0052D4  0EFE               	movlw	254
 21402  0052D6  6FEC               	movwf	_cur_state& (0+255),b
 21403                           
 21404                           ; BSR set to: 0
 21405                           ;UI.c: 533: lcdInst(0b10000000);;
 21406  0052D8  0E80               	movlw	128
 21407  0052DA  EC0B  F02B         	call	i2_lcdInst
 21408                           
 21409                           ;UI.c: 534: printf("LOG 2          <");
 21410  0052DE  0E8A               	movlw	low STR_42
 21411  0052E0  6E0D               	movwf	i2printf@f,c
 21412  0052E2  0EFD               	movlw	high STR_42
 21413  0052E4  6E0E               	movwf	i2printf@f+1,c
 21414  0052E6  EC65  F00F         	call	i2_printf	;wreg free
 21415                           
 21416                           ;UI.c: 535: lcdInst(0b11000000);;
 21417  0052EA  0EC0               	movlw	192
 21418  0052EC  EC0B  F02B         	call	i2_lcdInst
 21419                           
 21420                           ;UI.c: 536: printf("LOG 3           ");
 21421  0052F0  0EF1               	movlw	low STR_44
 21422  0052F2  6E0D               	movwf	i2printf@f,c
 21423  0052F4  0EFC               	movlw	high STR_44
 21424  0052F6  6E0E               	movwf	i2printf@f+1,c
 21425  0052F8  EC65  F00F         	call	i2_printf	;wreg free
 21426  0052FC  0012               	return		;funcret
 21427  0052FE                     __end_of_change_state_to_logs_22:
 21428                           	opt stack 0
 21429                           pclatu	equ	0xFFB
 21430                           pclath	equ	0xFFA
 21431                           tblptru	equ	0xFF8
 21432                           tblptrh	equ	0xFF7
 21433                           tblptrl	equ	0xFF6
 21434                           tablat	equ	0xFF5
 21435                           prodh	equ	0xFF4
 21436                           prodl	equ	0xFF3
 21437                           intcon	equ	0xFF2
 21438                           intcon2	equ	0xFF1
 21439                           intcon3	equ	0xFF0
 21440                           indf0	equ	0xFEF
 21441                           postinc0	equ	0xFEE
 21442                           fsr0h	equ	0xFEA
 21443                           fsr0l	equ	0xFE9
 21444                           wreg	equ	0xFE8
 21445                           postdec1	equ	0xFE5
 21446                           fsr1h	equ	0xFE2
 21447                           fsr1l	equ	0xFE1
 21448                           indf2	equ	0xFDF
 21449                           postinc2	equ	0xFDE
 21450                           postdec2	equ	0xFDD
 21451                           fsr2h	equ	0xFDA
 21452                           fsr2l	equ	0xFD9
 21453                           status	equ	0xFD8
 21454                           
 21455 ;; *************** function _change_state_to_logs_12 *****************
 21456 ;; Defined at:
 21457 ;;		line 524 in file "UI.c"
 21458 ;; Parameters:    Size  Location     Type
 21459 ;;		None
 21460 ;; Auto vars:     Size  Location     Type
 21461 ;;		None
 21462 ;; Return value:  Size  Location     Type
 21463 ;;                  1    wreg      void 
 21464 ;; Registers used:
 21465 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21466 ;; Tracked objects:
 21467 ;;		On entry : 0/0
 21468 ;;		On exit  : 0/0
 21469 ;;		Unchanged: 0/0
 21470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21475 ;;Total ram usage:        0 bytes
 21476 ;; Hardware stack levels used:    1
 21477 ;; Hardware stack levels required when called:    3
 21478 ;; This function calls:
 21479 ;;		i2_lcdInst
 21480 ;;		i2_printf
 21481 ;; This function is called by:
 21482 ;;		_updateMenu
 21483 ;;		_inputHandler
 21484 ;; This function uses a non-reentrant model
 21485 ;;
 21486                           
 21487                           	psect	text75
 21488  0052FE                     __ptext75:
 21489                           	opt stack 0
 21490  0052FE                     _change_state_to_logs_12:
 21491                           	opt stack 18
 21492                           
 21493                           ;UI.c: 525: cur_state = 1012;
 21494                           
 21495                           ;incstack = 0
 21496  0052FE  0E03               	movlw	3
 21497  005300  0100               	movlb	0	; () banked
 21498  005302  6FED               	movwf	(_cur_state+1)& (0+255),b
 21499  005304  0EF4               	movlw	244
 21500  005306  6FEC               	movwf	_cur_state& (0+255),b
 21501                           
 21502                           ; BSR set to: 0
 21503                           ;UI.c: 526: lcdInst(0b10000000);;
 21504  005308  0E80               	movlw	128
 21505  00530A  EC0B  F02B         	call	i2_lcdInst
 21506                           
 21507                           ;UI.c: 527: printf("LOG 1           ");
 21508  00530E  0ECF               	movlw	low STR_41
 21509  005310  6E0D               	movwf	i2printf@f,c
 21510  005312  0EFC               	movlw	high STR_41
 21511  005314  6E0E               	movwf	i2printf@f+1,c
 21512  005316  EC65  F00F         	call	i2_printf	;wreg free
 21513                           
 21514                           ;UI.c: 528: lcdInst(0b11000000);;
 21515  00531A  0EC0               	movlw	192
 21516  00531C  EC0B  F02B         	call	i2_lcdInst
 21517                           
 21518                           ;UI.c: 529: printf("LOG 2          <");
 21519  005320  0E8A               	movlw	low STR_42
 21520  005322  6E0D               	movwf	i2printf@f,c
 21521  005324  0EFD               	movlw	high STR_42
 21522  005326  6E0E               	movwf	i2printf@f+1,c
 21523  005328  EC65  F00F         	call	i2_printf	;wreg free
 21524  00532C  0012               	return		;funcret
 21525  00532E                     __end_of_change_state_to_logs_12:
 21526                           	opt stack 0
 21527                           pclatu	equ	0xFFB
 21528                           pclath	equ	0xFFA
 21529                           tblptru	equ	0xFF8
 21530                           tblptrh	equ	0xFF7
 21531                           tblptrl	equ	0xFF6
 21532                           tablat	equ	0xFF5
 21533                           prodh	equ	0xFF4
 21534                           prodl	equ	0xFF3
 21535                           intcon	equ	0xFF2
 21536                           intcon2	equ	0xFF1
 21537                           intcon3	equ	0xFF0
 21538                           indf0	equ	0xFEF
 21539                           postinc0	equ	0xFEE
 21540                           fsr0h	equ	0xFEA
 21541                           fsr0l	equ	0xFE9
 21542                           wreg	equ	0xFE8
 21543                           postdec1	equ	0xFE5
 21544                           fsr1h	equ	0xFE2
 21545                           fsr1l	equ	0xFE1
 21546                           indf2	equ	0xFDF
 21547                           postinc2	equ	0xFDE
 21548                           postdec2	equ	0xFDD
 21549                           fsr2h	equ	0xFDA
 21550                           fsr2l	equ	0xFD9
 21551                           status	equ	0xFD8
 21552                           
 21553 ;; *************** function _change_state_to_logs_11 *****************
 21554 ;; Defined at:
 21555 ;;		line 517 in file "UI.c"
 21556 ;; Parameters:    Size  Location     Type
 21557 ;;		None
 21558 ;; Auto vars:     Size  Location     Type
 21559 ;;		None
 21560 ;; Return value:  Size  Location     Type
 21561 ;;                  1    wreg      void 
 21562 ;; Registers used:
 21563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21564 ;; Tracked objects:
 21565 ;;		On entry : 0/0
 21566 ;;		On exit  : 0/0
 21567 ;;		Unchanged: 0/0
 21568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21573 ;;Total ram usage:        0 bytes
 21574 ;; Hardware stack levels used:    1
 21575 ;; Hardware stack levels required when called:    3
 21576 ;; This function calls:
 21577 ;;		i2_lcdInst
 21578 ;;		i2_printf
 21579 ;; This function is called by:
 21580 ;;		_updateMenu
 21581 ;;		_inputHandler
 21582 ;; This function uses a non-reentrant model
 21583 ;;
 21584                           
 21585                           	psect	text76
 21586  00532E                     __ptext76:
 21587                           	opt stack 0
 21588  00532E                     _change_state_to_logs_11:
 21589                           	opt stack 18
 21590                           
 21591                           ;UI.c: 518: cur_state = 1011;
 21592                           
 21593                           ;incstack = 0
 21594  00532E  0E03               	movlw	3
 21595  005330  0100               	movlb	0	; () banked
 21596  005332  6FED               	movwf	(_cur_state+1)& (0+255),b
 21597  005334  0EF3               	movlw	243
 21598  005336  6FEC               	movwf	_cur_state& (0+255),b
 21599                           
 21600                           ; BSR set to: 0
 21601                           ;UI.c: 519: lcdInst(0b10000000);;
 21602  005338  0E80               	movlw	128
 21603  00533A  EC0B  F02B         	call	i2_lcdInst
 21604                           
 21605                           ;UI.c: 520: printf("LOG 1          <");
 21606  00533E  0E79               	movlw	low STR_39
 21607  005340  6E0D               	movwf	i2printf@f,c
 21608  005342  0EFD               	movlw	high STR_39
 21609  005344  6E0E               	movwf	i2printf@f+1,c
 21610  005346  EC65  F00F         	call	i2_printf	;wreg free
 21611                           
 21612                           ;UI.c: 521: lcdInst(0b11000000);;
 21613  00534A  0EC0               	movlw	192
 21614  00534C  EC0B  F02B         	call	i2_lcdInst
 21615                           
 21616                           ;UI.c: 522: printf("LOG 2           ");
 21617  005350  0EE0               	movlw	low STR_40
 21618  005352  6E0D               	movwf	i2printf@f,c
 21619  005354  0EFC               	movlw	high STR_40
 21620  005356  6E0E               	movwf	i2printf@f+1,c
 21621  005358  EC65  F00F         	call	i2_printf	;wreg free
 21622  00535C  0012               	return		;funcret
 21623  00535E                     __end_of_change_state_to_logs_11:
 21624                           	opt stack 0
 21625                           pclatu	equ	0xFFB
 21626                           pclath	equ	0xFFA
 21627                           tblptru	equ	0xFF8
 21628                           tblptrh	equ	0xFF7
 21629                           tblptrl	equ	0xFF6
 21630                           tablat	equ	0xFF5
 21631                           prodh	equ	0xFF4
 21632                           prodl	equ	0xFF3
 21633                           intcon	equ	0xFF2
 21634                           intcon2	equ	0xFF1
 21635                           intcon3	equ	0xFF0
 21636                           indf0	equ	0xFEF
 21637                           postinc0	equ	0xFEE
 21638                           fsr0h	equ	0xFEA
 21639                           fsr0l	equ	0xFE9
 21640                           wreg	equ	0xFE8
 21641                           postdec1	equ	0xFE5
 21642                           fsr1h	equ	0xFE2
 21643                           fsr1l	equ	0xFE1
 21644                           indf2	equ	0xFDF
 21645                           postinc2	equ	0xFDE
 21646                           postdec2	equ	0xFDD
 21647                           fsr2h	equ	0xFDA
 21648                           fsr2l	equ	0xFD9
 21649                           status	equ	0xFD8
 21650                           
 21651 ;; *************** function _dispLogs *****************
 21652 ;; Defined at:
 21653 ;;		line 470 in file "UI.c"
 21654 ;; Parameters:    Size  Location     Type
 21655 ;;  myLog           2   17[COMRAM] int 
 21656 ;; Auto vars:     Size  Location     Type
 21657 ;;		None
 21658 ;; Return value:  Size  Location     Type
 21659 ;;                  1    wreg      void 
 21660 ;; Registers used:
 21661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21662 ;; Tracked objects:
 21663 ;;		On entry : 0/0
 21664 ;;		On exit  : 0/0
 21665 ;;		Unchanged: 0/0
 21666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21667 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21670 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21671 ;;Total ram usage:        2 bytes
 21672 ;; Hardware stack levels used:    1
 21673 ;; Hardware stack levels required when called:    2
 21674 ;; This function calls:
 21675 ;;		_retrieveLog
 21676 ;; This function is called by:
 21677 ;;		_updateMenu
 21678 ;; This function uses a non-reentrant model
 21679 ;;
 21680                           
 21681                           	psect	text77
 21682  0054D8                     __ptext77:
 21683                           	opt stack 0
 21684  0054D8                     _dispLogs:
 21685                           	opt stack 20
 21686                           
 21687                           ;UI.c: 471: logstate = 1;
 21688                           
 21689                           ;incstack = 0
 21690  0054D8  0E00               	movlw	0
 21691  0054DA  0100               	movlb	0	; () banked
 21692  0054DC  6FF9               	movwf	(_logstate+1)& (0+255),b
 21693  0054DE  0E01               	movlw	1
 21694  0054E0  6FF8               	movwf	_logstate& (0+255),b
 21695                           
 21696                           ; BSR set to: 0
 21697                           ;UI.c: 472: log = myLog;
 21698  0054E2  C012  F0F4         	movff	dispLogs@myLog,_log
 21699  0054E6  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 21700                           
 21701                           ; BSR set to: 0
 21702                           ;UI.c: 473: retrieveLog(myLog - 1);
 21703  0054EA  0EFF               	movlw	255
 21704  0054EC  2412               	addwf	dispLogs@myLog,w,c
 21705  0054EE  6E07               	movwf	retrieveLog@logNum,c
 21706  0054F0  0EFF               	movlw	255
 21707  0054F2  2013               	addwfc	dispLogs@myLog+1,w,c
 21708  0054F4  6E08               	movwf	retrieveLog@logNum+1,c
 21709  0054F6  EC9E  F01E         	call	_retrieveLog	;wreg free
 21710  0054FA  0012               	return		;funcret
 21711  0054FC                     __end_of_dispLogs:
 21712                           	opt stack 0
 21713                           pclatu	equ	0xFFB
 21714                           pclath	equ	0xFFA
 21715                           tblptru	equ	0xFF8
 21716                           tblptrh	equ	0xFF7
 21717                           tblptrl	equ	0xFF6
 21718                           tablat	equ	0xFF5
 21719                           prodh	equ	0xFF4
 21720                           prodl	equ	0xFF3
 21721                           intcon	equ	0xFF2
 21722                           intcon2	equ	0xFF1
 21723                           intcon3	equ	0xFF0
 21724                           indf0	equ	0xFEF
 21725                           postinc0	equ	0xFEE
 21726                           fsr0h	equ	0xFEA
 21727                           fsr0l	equ	0xFE9
 21728                           wreg	equ	0xFE8
 21729                           postdec1	equ	0xFE5
 21730                           fsr1h	equ	0xFE2
 21731                           fsr1l	equ	0xFE1
 21732                           indf2	equ	0xFDF
 21733                           postinc2	equ	0xFDE
 21734                           postdec2	equ	0xFDD
 21735                           fsr2h	equ	0xFDA
 21736                           fsr2l	equ	0xFD9
 21737                           status	equ	0xFD8
 21738                           
 21739 ;; *************** function _retrieveLog *****************
 21740 ;; Defined at:
 21741 ;;		line 134 in file "EEPROM.c"
 21742 ;; Parameters:    Size  Location     Type
 21743 ;;  logNum          2    6[COMRAM] int 
 21744 ;; Auto vars:     Size  Location     Type
 21745 ;;  i               2   13[COMRAM] int 
 21746 ;;  addr            2   15[COMRAM] unsigned short 
 21747 ;;  byte3           1   12[COMRAM] unsigned char 
 21748 ;;  byte2           1   11[COMRAM] unsigned char 
 21749 ;;  byte1           1   10[COMRAM] unsigned char 
 21750 ;; Return value:  Size  Location     Type
 21751 ;;                  1    wreg      void 
 21752 ;; Registers used:
 21753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21754 ;; Tracked objects:
 21755 ;;		On entry : 0/0
 21756 ;;		On exit  : 0/0
 21757 ;;		Unchanged: 0/0
 21758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21760 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21761 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21762 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21763 ;;Total ram usage:       11 bytes
 21764 ;; Hardware stack levels used:    1
 21765 ;; Hardware stack levels required when called:    1
 21766 ;; This function calls:
 21767 ;;		i2_EEPROM_read
 21768 ;;		i2___wmul
 21769 ;; This function is called by:
 21770 ;;		_dispLogs
 21771 ;; This function uses a non-reentrant model
 21772 ;;
 21773                           
 21774                           	psect	text78
 21775  003D3C                     __ptext78:
 21776                           	opt stack 0
 21777  003D3C                     _retrieveLog:
 21778                           	opt stack 20
 21779                           
 21780                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21781                           
 21782                           ;incstack = 0
 21783  003D3C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21784  003D40  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21785  003D44  0E00               	movlw	0
 21786  003D46  6E04               	movwf	i2___wmul@multiplicand+1,c
 21787  003D48  0E0B               	movlw	11
 21788  003D4A  6E03               	movwf	i2___wmul@multiplicand,c
 21789  003D4C  EC46  F02A         	call	i2___wmul	;wreg free
 21790  003D50  0E01               	movlw	1
 21791  003D52  2401               	addwf	?i2___wmul,w,c
 21792  003D54  6E10               	movwf	retrieveLog@addr,c
 21793  003D56  0E00               	movlw	0
 21794  003D58  2002               	addwfc	?i2___wmul+1,w,c
 21795  003D5A  6E11               	movwf	retrieveLog@addr+1,c
 21796                           
 21797                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21798  003D5C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21799  003D60  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21800  003D64  ECD7  F02A         	call	i2_EEPROM_read	;wreg free
 21801  003D68  6E0B               	movwf	retrieveLog@byte1,c
 21802                           
 21803                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21804  003D6A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21805  003D6E  0E80               	movlw	128
 21806  003D70  1609               	andwf	??_retrieveLog,f,c
 21807  003D72  5009               	movf	??_retrieveLog,w,c
 21808  003D74  6E63               	movwf	_log_completion,c
 21809  003D76  6A64               	clrf	_log_completion+1,c
 21810                           
 21811                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21812  003D78  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21813  003D7C  0E0F               	movlw	15
 21814  003D7E  1609               	andwf	??_retrieveLog,f,c
 21815  003D80  5009               	movf	??_retrieveLog,w,c
 21816  003D82  0101               	movlb	1	; () banked
 21817  003D84  6F43               	movwf	_log_count_total& (0+255),b
 21818  003D86  6B44               	clrf	(_log_count_total+1)& (0+255),b
 21819                           
 21820                           ; BSR set to: 1
 21821                           ;EEPROM.c: 146: addr++;
 21822  003D88  4A10               	infsnz	retrieveLog@addr,f,c
 21823  003D8A  2A11               	incf	retrieveLog@addr+1,f,c
 21824                           
 21825                           ; BSR set to: 1
 21826                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21827  003D8C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21828  003D90  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21829  003D94  ECD7  F02A         	call	i2_EEPROM_read	;wreg free
 21830  003D98  6E0C               	movwf	retrieveLog@byte2,c
 21831                           
 21832                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21833  003D9A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21834  003D9E  3A09               	swapf	??_retrieveLog,f,c
 21835  003DA0  0E0F               	movlw	15
 21836  003DA2  1609               	andwf	??_retrieveLog,f,c
 21837  003DA4  0E0F               	movlw	15
 21838  003DA6  1609               	andwf	??_retrieveLog,f,c
 21839  003DA8  5009               	movf	??_retrieveLog,w,c
 21840  003DAA  6E65               	movwf	_log_count_pop_no_tab,c
 21841  003DAC  6A66               	clrf	_log_count_pop_no_tab+1,c
 21842                           
 21843                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21844  003DAE  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21845  003DB2  0E0F               	movlw	15
 21846  003DB4  1609               	andwf	??_retrieveLog,f,c
 21847  003DB6  5009               	movf	??_retrieveLog,w,c
 21848  003DB8  6E67               	movwf	_log_count_pop_w_tab,c
 21849  003DBA  6A68               	clrf	_log_count_pop_w_tab+1,c
 21850                           
 21851                           ;EEPROM.c: 152: addr++;
 21852  003DBC  4A10               	infsnz	retrieveLog@addr,f,c
 21853  003DBE  2A11               	incf	retrieveLog@addr+1,f,c
 21854                           
 21855                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21856  003DC0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21857  003DC4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21858  003DC8  ECD7  F02A         	call	i2_EEPROM_read	;wreg free
 21859  003DCC  6E0D               	movwf	retrieveLog@byte3,c
 21860                           
 21861                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21862  003DCE  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21863  003DD2  3A09               	swapf	??_retrieveLog,f,c
 21864  003DD4  0E0F               	movlw	15
 21865  003DD6  1609               	andwf	??_retrieveLog,f,c
 21866  003DD8  0E0F               	movlw	15
 21867  003DDA  1609               	andwf	??_retrieveLog,f,c
 21868  003DDC  5009               	movf	??_retrieveLog,w,c
 21869  003DDE  0101               	movlb	1	; () banked
 21870  003DE0  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 21871  003DE2  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 21872                           
 21873                           ; BSR set to: 1
 21874                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21875  003DE4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21876  003DE8  0E0F               	movlw	15
 21877  003DEA  1609               	andwf	??_retrieveLog,f,c
 21878  003DEC  5009               	movf	??_retrieveLog,w,c
 21879  003DEE  0101               	movlb	1	; () banked
 21880  003DF0  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 21881  003DF2  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 21882                           
 21883                           ; BSR set to: 1
 21884                           ;EEPROM.c: 156: addr++;
 21885  003DF4  4A10               	infsnz	retrieveLog@addr,f,c
 21886  003DF6  2A11               	incf	retrieveLog@addr+1,f,c
 21887                           
 21888                           ; BSR set to: 1
 21889                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21890  003DF8  0E00               	movlw	0
 21891  003DFA  6E0F               	movwf	retrieveLog@i+1,c
 21892  003DFC  0E00               	movlw	0
 21893  003DFE  6E0E               	movwf	retrieveLog@i,c
 21894  003E00                     i2l6994:
 21895                           
 21896                           ; BSR set to: 1
 21897  003E00  BE0F               	btfsc	retrieveLog@i+1,7,c
 21898  003E02  D006               	goto	i2l6998
 21899  003E04  500F               	movf	retrieveLog@i+1,w,c
 21900  003E06  E11E               	bnz	i2l7006
 21901  003E08  0E07               	movlw	7
 21902  003E0A  5C0E               	subwf	retrieveLog@i,w,c
 21903  003E0C  B0D8               	btfsc	status,0,c
 21904  003E0E  D01A               	goto	i2l7006
 21905  003E10                     i2l6998:
 21906                           
 21907                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21908  003E10  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21909  003E14  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21910  003E18  ECD7  F02A         	call	i2_EEPROM_read	;wreg free
 21911  003E1C  6E09               	movwf	??_retrieveLog& (0+255),c
 21912  003E1E  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21913  003E20  90D8               	bcf	status,0,c
 21914  003E22  340E               	rlcf	retrieveLog@i,w,c
 21915  003E24  6ED9               	movwf	fsr2l,c
 21916  003E26  340F               	rlcf	retrieveLog@i+1,w,c
 21917  003E28  6EDA               	movwf	fsr2h,c
 21918  003E2A  0E00               	movlw	low _log_startTime
 21919  003E2C  26D9               	addwf	fsr2l,f,c
 21920  003E2E  0E01               	movlw	high _log_startTime
 21921  003E30  22DA               	addwfc	fsr2h,f,c
 21922  003E32  C009  FFDE         	movff	??_retrieveLog,postinc2
 21923  003E36  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21924                           
 21925                           ;EEPROM.c: 161: addr++;
 21926  003E3A  4A10               	infsnz	retrieveLog@addr,f,c
 21927  003E3C  2A11               	incf	retrieveLog@addr+1,f,c
 21928  003E3E  4A0E               	infsnz	retrieveLog@i,f,c
 21929  003E40  2A0F               	incf	retrieveLog@i+1,f,c
 21930  003E42  D7DE               	goto	i2l6994
 21931  003E44                     i2l7006:
 21932                           
 21933                           ;EEPROM.c: 162: }
 21934                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21935  003E44  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21936  003E48  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21937  003E4C  ECD7  F02A         	call	i2_EEPROM_read	;wreg free
 21938  003E50  6E09               	movwf	??_retrieveLog& (0+255),c
 21939  003E52  5009               	movf	??_retrieveLog,w,c
 21940  003E54  0100               	movlb	0	; () banked
 21941  003E56  6FF6               	movwf	_log_total_time& (0+255),b
 21942  003E58  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 21943                           
 21944                           ; BSR set to: 0
 21945  003E5A  0012               	return		;funcret
 21946  003E5C                     __end_of_retrieveLog:
 21947                           	opt stack 0
 21948                           pclatu	equ	0xFFB
 21949                           pclath	equ	0xFFA
 21950                           tblptru	equ	0xFF8
 21951                           tblptrh	equ	0xFF7
 21952                           tblptrl	equ	0xFF6
 21953                           tablat	equ	0xFF5
 21954                           prodh	equ	0xFF4
 21955                           prodl	equ	0xFF3
 21956                           intcon	equ	0xFF2
 21957                           intcon2	equ	0xFF1
 21958                           intcon3	equ	0xFF0
 21959                           indf0	equ	0xFEF
 21960                           postinc0	equ	0xFEE
 21961                           fsr0h	equ	0xFEA
 21962                           fsr0l	equ	0xFE9
 21963                           wreg	equ	0xFE8
 21964                           postdec1	equ	0xFE5
 21965                           fsr1h	equ	0xFE2
 21966                           fsr1l	equ	0xFE1
 21967                           indf2	equ	0xFDF
 21968                           postinc2	equ	0xFDE
 21969                           postdec2	equ	0xFDD
 21970                           fsr2h	equ	0xFDA
 21971                           fsr2l	equ	0xFD9
 21972                           status	equ	0xFD8
 21973                           
 21974 ;; *************** function i2_EEPROM_read *****************
 21975 ;; Defined at:
 21976 ;;		line 68 in file "EEPROM.c"
 21977 ;; Parameters:    Size  Location     Type
 21978 ;;  address         2    0[COMRAM] unsigned short 
 21979 ;; Auto vars:     Size  Location     Type
 21980 ;;		None
 21981 ;; Return value:  Size  Location     Type
 21982 ;;                  1    wreg      unsigned char 
 21983 ;; Registers used:
 21984 ;;		wreg, status,2
 21985 ;; Tracked objects:
 21986 ;;		On entry : 0/0
 21987 ;;		On exit  : 0/0
 21988 ;;		Unchanged: 0/0
 21989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21994 ;;Total ram usage:        2 bytes
 21995 ;; Hardware stack levels used:    1
 21996 ;; This function calls:
 21997 ;;		Nothing
 21998 ;; This function is called by:
 21999 ;;		_retrieveLog
 22000 ;; This function uses a non-reentrant model
 22001 ;;
 22002                           
 22003                           	psect	text79
 22004  0055AE                     __ptext79:
 22005                           	opt stack 0
 22006  0055AE                     i2_EEPROM_read:
 22007                           	opt stack 20
 22008                           
 22009                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 22010                           
 22011                           ; BSR set to: 0
 22012                           ;incstack = 0
 22013  0055AE  5002               	movf	i2EEPROM_read@address+1,w,c
 22014  0055B0  6EAA               	movwf	4010,c	;volatile
 22015                           
 22016                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 22017  0055B2  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 22018                           
 22019                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 22020  0055B6  9EA6               	bcf	4006,7,c	;volatile
 22021                           
 22022                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 22023  0055B8  9CA6               	bcf	4006,6,c	;volatile
 22024                           
 22025                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 22026  0055BA  80A6               	bsf	4006,0,c	;volatile
 22027  0055BC                     i2l1096:
 22028  0055BC  B0A6               	btfsc	4006,0,c	;volatile
 22029  0055BE  D7FE               	goto	i2l1096
 22030                           
 22031                           ;EEPROM.c: 81: return EEDATA;
 22032  0055C0  50A8               	movf	4008,w,c	;volatile
 22033  0055C2  0012               	return	
 22034  0055C4                     __end_ofi2_EEPROM_read:
 22035                           	opt stack 0
 22036                           pclatu	equ	0xFFB
 22037                           pclath	equ	0xFFA
 22038                           tblptru	equ	0xFF8
 22039                           tblptrh	equ	0xFF7
 22040                           tblptrl	equ	0xFF6
 22041                           tablat	equ	0xFF5
 22042                           prodh	equ	0xFF4
 22043                           prodl	equ	0xFF3
 22044                           intcon	equ	0xFF2
 22045                           intcon2	equ	0xFF1
 22046                           intcon3	equ	0xFF0
 22047                           indf0	equ	0xFEF
 22048                           postinc0	equ	0xFEE
 22049                           fsr0h	equ	0xFEA
 22050                           fsr0l	equ	0xFE9
 22051                           wreg	equ	0xFE8
 22052                           postdec1	equ	0xFE5
 22053                           fsr1h	equ	0xFE2
 22054                           fsr1l	equ	0xFE1
 22055                           indf2	equ	0xFDF
 22056                           postinc2	equ	0xFDE
 22057                           postdec2	equ	0xFDD
 22058                           fsr2h	equ	0xFDA
 22059                           fsr2l	equ	0xFD9
 22060                           status	equ	0xFD8
 22061                           
 22062 ;; *************** function _updateArmState *****************
 22063 ;; Defined at:
 22064 ;;		line 606 in file "sort.c"
 22065 ;; Parameters:    Size  Location     Type
 22066 ;;		None
 22067 ;; Auto vars:     Size  Location     Type
 22068 ;;		None
 22069 ;; Return value:  Size  Location     Type
 22070 ;;                  1    wreg      void 
 22071 ;; Registers used:
 22072 ;;		wreg, status,2, status,0
 22073 ;; Tracked objects:
 22074 ;;		On entry : 0/0
 22075 ;;		On exit  : 0/0
 22076 ;;		Unchanged: 0/0
 22077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22080 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22081 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22082 ;;Total ram usage:        2 bytes
 22083 ;; Hardware stack levels used:    1
 22084 ;; This function calls:
 22085 ;;		Nothing
 22086 ;; This function is called by:
 22087 ;;		_handler
 22088 ;; This function uses a non-reentrant model
 22089 ;;
 22090                           
 22091                           	psect	text80
 22092  005004                     __ptext80:
 22093                           	opt stack 0
 22094  005004                     _updateArmState:
 22095                           	opt stack 23
 22096                           
 22097                           ;sort.c: 613: if(!was_low_2){
 22098                           
 22099                           ;incstack = 0
 22100  005004  5079               	movf	_was_low_2,w,c	;volatile
 22101  005006  107A               	iorwf	_was_low_2+1,w,c	;volatile
 22102  005008  B4D8               	btfsc	status,2,c
 22103  00500A  D007               	goto	i2l9662
 22104  00500C  D016               	goto	i2l917
 22105  00500E                     i2l9656:
 22106                           
 22107                           ;sort.c: 618: PR2 = 0x20;
 22108  00500E  0E20               	movlw	32
 22109  005010  6ECB               	movwf	4043,c	;volatile
 22110                           
 22111                           ;sort.c: 619: break;
 22112  005012  0012               	return	
 22113  005014                     i2l9658:
 22114                           
 22115                           ;sort.c: 622: PR2 = 0x40;
 22116  005014  0E40               	movlw	64
 22117  005016  6ECB               	movwf	4043,c	;volatile
 22118                           
 22119                           ;sort.c: 624: }
 22120                           
 22121                           ;sort.c: 623: break;
 22122  005018  0012               	return	
 22123  00501A                     i2l9662:
 22124  00501A  C0EE  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 22125  00501E  C0EF  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 22126                           
 22127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22128                           ; Switch size 1, requested type "space"
 22129                           ; Number of cases is 1, Range of values is 0 to 0
 22130                           ; switch strategies available:
 22131                           ; Name         Instructions Cycles
 22132                           ; simple_byte            4     3 (average)
 22133                           ;	Chosen strategy is simple_byte
 22134  005022  5002               	movf	??_updateArmState+1,w,c
 22135  005024  0A00               	xorlw	0	; case 0
 22136  005026  A4D8               	btfss	status,2,c
 22137  005028  0012               	return	
 22138                           
 22139                           ; Switch size 1, requested type "space"
 22140                           ; Number of cases is 2, Range of values is 0 to 1
 22141                           ; switch strategies available:
 22142                           ; Name         Instructions Cycles
 22143                           ; simple_byte            7     4 (average)
 22144                           ;	Chosen strategy is simple_byte
 22145  00502A  5001               	movf	??_updateArmState,w,c
 22146  00502C  0A00               	xorlw	0	; case 0
 22147  00502E  B4D8               	btfsc	status,2,c
 22148  005030  D7EE               	goto	i2l9656
 22149  005032  0A01               	xorlw	1	; case 1
 22150  005034  A4D8               	btfss	status,2,c
 22151                           
 22152                           ;sort.c: 625: }
 22153  005036  0012               	return	
 22154  005038  D7ED               	goto	i2l9658
 22155  00503A                     i2l917:
 22156                           
 22157                           ;sort.c: 626: else{
 22158                           ;sort.c: 628: PR2 = 0xFF;
 22159  00503A  68CB               	setf	4043,c	;volatile
 22160  00503C  0012               	return	
 22161  00503E                     __end_of_updateArmState:
 22162                           	opt stack 0
 22163                           pclatu	equ	0xFFB
 22164                           pclath	equ	0xFFA
 22165                           tblptru	equ	0xFF8
 22166                           tblptrh	equ	0xFF7
 22167                           tblptrl	equ	0xFF6
 22168                           tablat	equ	0xFF5
 22169                           prodh	equ	0xFF4
 22170                           prodl	equ	0xFF3
 22171                           intcon	equ	0xFF2
 22172                           intcon2	equ	0xFF1
 22173                           intcon3	equ	0xFF0
 22174                           indf0	equ	0xFEF
 22175                           postinc0	equ	0xFEE
 22176                           fsr0h	equ	0xFEA
 22177                           fsr0l	equ	0xFE9
 22178                           wreg	equ	0xFE8
 22179                           postdec1	equ	0xFE5
 22180                           fsr1h	equ	0xFE2
 22181                           fsr1l	equ	0xFE1
 22182                           indf2	equ	0xFDF
 22183                           postinc2	equ	0xFDE
 22184                           postdec2	equ	0xFDD
 22185                           fsr2h	equ	0xFDA
 22186                           fsr2l	equ	0xFD9
 22187                           status	equ	0xFD8
 22188                           
 22189 ;; *************** function _printSortTimer *****************
 22190 ;; Defined at:
 22191 ;;		line 456 in file "sort.c"
 22192 ;; Parameters:    Size  Location     Type
 22193 ;;		None
 22194 ;; Auto vars:     Size  Location     Type
 22195 ;;  i               2   70[COMRAM] int 
 22196 ;;  i               2   72[COMRAM] int 
 22197 ;;  curTime        14   44[COMRAM] int [7]
 22198 ;;  timeDiff        2   68[COMRAM] unsigned int 
 22199 ;;  sec             2   64[COMRAM] int 
 22200 ;;  min             2   62[COMRAM] int 
 22201 ;;  cur_sec         2   60[COMRAM] unsigned int 
 22202 ;;  start_sec       2   58[COMRAM] unsigned int 
 22203 ;; Return value:  Size  Location     Type
 22204 ;;                  1    wreg      void 
 22205 ;; Registers used:
 22206 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22207 ;; Tracked objects:
 22208 ;;		On entry : 0/0
 22209 ;;		On exit  : 0/0
 22210 ;;		Unchanged: 0/0
 22211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22213 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22214 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22215 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22216 ;;Total ram usage:       33 bytes
 22217 ;; Hardware stack levels used:    1
 22218 ;; Hardware stack levels required when called:    3
 22219 ;; This function calls:
 22220 ;;		i2___lwdiv
 22221 ;;		i2___lwmod
 22222 ;;		i2___wmul
 22223 ;;		i2_delay_ms
 22224 ;;		i2_getRTC
 22225 ;;		i2_lcdInst
 22226 ;;		i2_printf
 22227 ;; This function is called by:
 22228 ;;		_handler
 22229 ;; This function uses a non-reentrant model
 22230 ;;
 22231                           
 22232                           	psect	text81
 22233  002D7E                     __ptext81:
 22234                           	opt stack 0
 22235  002D7E                     _printSortTimer:
 22236                           	opt stack 20
 22237                           
 22238                           ;sort.c: 457: getRTC();
 22239                           
 22240                           ;incstack = 0
 22241  002D7E  EC63  F025         	call	i2_getRTC	;wreg free
 22242                           
 22243                           ;sort.c: 458: int curTime[7];
 22244                           ;sort.c: 459: for(int i = 0; i < 7; i++){
 22245  002D82  0E00               	movlw	0
 22246  002D84  6E4A               	movwf	printSortTimer@i+1,c
 22247  002D86  0E00               	movlw	0
 22248  002D88  6E49               	movwf	printSortTimer@i,c
 22249  002D8A                     i2l9498:
 22250  002D8A  BE4A               	btfsc	printSortTimer@i+1,7,c
 22251  002D8C  D006               	goto	i2l9502
 22252  002D8E  504A               	movf	printSortTimer@i+1,w,c
 22253  002D90  E131               	bnz	i2l9508
 22254  002D92  0E07               	movlw	7
 22255  002D94  5C49               	subwf	printSortTimer@i,w,c
 22256  002D96  B0D8               	btfsc	status,0,c
 22257  002D98  D02D               	goto	i2l9508
 22258  002D9A                     i2l9502:
 22259                           
 22260                           ;sort.c: 460: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 22261  002D9A  0E1C               	movlw	low _time
 22262  002D9C  2449               	addwf	printSortTimer@i,w,c
 22263  002D9E  6ED9               	movwf	fsr2l,c
 22264  002DA0  0E01               	movlw	high _time
 22265  002DA2  204A               	addwfc	printSortTimer@i+1,w,c
 22266  002DA4  6EDA               	movwf	fsr2h,c
 22267  002DA6  50DF               	movf	indf2,w,c
 22268  002DA8  6E2A               	movwf	??_printSortTimer& (0+255),c
 22269  002DAA  3A2A               	swapf	??_printSortTimer,f,c
 22270  002DAC  0E0F               	movlw	15
 22271  002DAE  162A               	andwf	??_printSortTimer,f,c
 22272  002DB0  0E0F               	movlw	15
 22273  002DB2  162A               	andwf	??_printSortTimer,f,c
 22274  002DB4  502A               	movf	??_printSortTimer,w,c
 22275  002DB6  0D0A               	mullw	10
 22276  002DB8  0E1C               	movlw	low _time
 22277  002DBA  2449               	addwf	printSortTimer@i,w,c
 22278  002DBC  6ED9               	movwf	fsr2l,c
 22279  002DBE  0E01               	movlw	high _time
 22280  002DC0  204A               	addwfc	printSortTimer@i+1,w,c
 22281  002DC2  6EDA               	movwf	fsr2h,c
 22282  002DC4  50DF               	movf	indf2,w,c
 22283  002DC6  0B0F               	andlw	15
 22284  002DC8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22285  002DCA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 22286  002DCC  50F3               	movf	prodl,w,c
 22287  002DCE  262B               	addwf	??_printSortTimer+1,f,c
 22288  002DD0  50F4               	movf	prodh,w,c
 22289  002DD2  222C               	addwfc	??_printSortTimer+2,f,c
 22290  002DD4  90D8               	bcf	status,0,c
 22291  002DD6  3449               	rlcf	printSortTimer@i,w,c
 22292  002DD8  6ED9               	movwf	fsr2l,c
 22293  002DDA  344A               	rlcf	printSortTimer@i+1,w,c
 22294  002DDC  6EDA               	movwf	fsr2h,c
 22295  002DDE  0E2D               	movlw	low printSortTimer@curTime
 22296  002DE0  26D9               	addwf	fsr2l,f,c
 22297  002DE2  0E00               	movlw	high printSortTimer@curTime
 22298  002DE4  22DA               	addwfc	fsr2h,f,c
 22299  002DE6  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 22300  002DEA  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 22301  002DEE  4A49               	infsnz	printSortTimer@i,f,c
 22302  002DF0  2A4A               	incf	printSortTimer@i+1,f,c
 22303  002DF2  D7CB               	goto	i2l9498
 22304  002DF4                     i2l9508:
 22305                           
 22306                           ;sort.c: 461: }
 22307                           ;sort.c: 462: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 22308  002DF4  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 22309  002DF8  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 22310  002DFC  0E00               	movlw	0
 22311  002DFE  6E04               	movwf	i2___wmul@multiplicand+1,c
 22312  002E00  0E3C               	movlw	60
 22313  002E02  6E03               	movwf	i2___wmul@multiplicand,c
 22314  002E04  EC46  F02A         	call	i2___wmul	;wreg free
 22315  002E08  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22316  002E0C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22317  002E10  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 22318  002E14  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 22319  002E18  0E0E               	movlw	14
 22320  002E1A  6E04               	movwf	i2___wmul@multiplicand+1,c
 22321  002E1C  0E10               	movlw	16
 22322  002E1E  6E03               	movwf	i2___wmul@multiplicand,c
 22323  002E20  EC46  F02A         	call	i2___wmul	;wreg free
 22324  002E24  5001               	movf	?i2___wmul,w,c
 22325  002E26  262A               	addwf	??_printSortTimer,f,c
 22326  002E28  5002               	movf	?i2___wmul+1,w,c
 22327  002E2A  222B               	addwfc	??_printSortTimer+1,f,c
 22328  002E2C  0101               	movlb	1	; () banked
 22329  002E2E  510E               	movf	_startTime& (0+255),w,b
 22330  002E30  242A               	addwf	??_printSortTimer,w,c
 22331  002E32  6E3B               	movwf	printSortTimer@start_sec,c
 22332  002E34  0101               	movlb	1	; () banked
 22333  002E36  510F               	movf	(_startTime+1)& (0+255),w,b
 22334  002E38  202B               	addwfc	??_printSortTimer+1,w,c
 22335  002E3A  6E3C               	movwf	printSortTimer@start_sec+1,c
 22336                           
 22337                           ;sort.c: 463: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 22338  002E3C  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 22339  002E40  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 22340  002E44  0E00               	movlw	0
 22341  002E46  6E04               	movwf	i2___wmul@multiplicand+1,c
 22342  002E48  0E3C               	movlw	60
 22343  002E4A  6E03               	movwf	i2___wmul@multiplicand,c
 22344  002E4C  EC46  F02A         	call	i2___wmul	;wreg free
 22345  002E50  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22346  002E54  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22347  002E58  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 22348  002E5C  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 22349  002E60  0E0E               	movlw	14
 22350  002E62  6E04               	movwf	i2___wmul@multiplicand+1,c
 22351  002E64  0E10               	movlw	16
 22352  002E66  6E03               	movwf	i2___wmul@multiplicand,c
 22353  002E68  EC46  F02A         	call	i2___wmul	;wreg free
 22354  002E6C  5001               	movf	?i2___wmul,w,c
 22355  002E6E  262A               	addwf	??_printSortTimer,f,c
 22356  002E70  5002               	movf	?i2___wmul+1,w,c
 22357  002E72  222B               	addwfc	??_printSortTimer+1,f,c
 22358  002E74  502D               	movf	printSortTimer@curTime,w,c
 22359  002E76  242A               	addwf	??_printSortTimer,w,c
 22360  002E78  6E3D               	movwf	printSortTimer@cur_sec,c
 22361  002E7A  502E               	movf	printSortTimer@curTime+1,w,c
 22362  002E7C  202B               	addwfc	??_printSortTimer+1,w,c
 22363  002E7E  6E3E               	movwf	printSortTimer@cur_sec+1,c
 22364                           
 22365                           ;sort.c: 464: unsigned int timeDiff = cur_sec - start_sec;
 22366  002E80  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 22367  002E84  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 22368  002E88  1E2A               	comf	??_printSortTimer,f,c
 22369  002E8A  1E2B               	comf	??_printSortTimer+1,f,c
 22370  002E8C  4A2A               	infsnz	??_printSortTimer,f,c
 22371  002E8E  2A2B               	incf	??_printSortTimer+1,f,c
 22372  002E90  503D               	movf	printSortTimer@cur_sec,w,c
 22373  002E92  242A               	addwf	??_printSortTimer,w,c
 22374  002E94  6E45               	movwf	printSortTimer@timeDiff,c
 22375  002E96  503E               	movf	printSortTimer@cur_sec+1,w,c
 22376  002E98  202B               	addwfc	??_printSortTimer+1,w,c
 22377  002E9A  6E46               	movwf	printSortTimer@timeDiff+1,c
 22378                           
 22379                           ;sort.c: 466: total_time = timeDiff;
 22380  002E9C  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 22381  002EA0  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 22382                           
 22383                           ;sort.c: 468: if(f_most_recent_sort_time){
 22384  002EA4  0101               	movlb	1	; () banked
 22385  002EA6  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 22386  002EA8  0101               	movlb	1	; () banked
 22387  002EAA  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 22388  002EAC  B4D8               	btfsc	status,2,c
 22389  002EAE  D009               	goto	i2l9520
 22390                           
 22391                           ; BSR set to: 1
 22392                           ;sort.c: 469: most_recent_sort_time = total_time;
 22393  002EB0  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 22394  002EB4  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 22395                           
 22396                           ; BSR set to: 1
 22397                           ;sort.c: 470: f_most_recent_sort_time = 0;
 22398  002EB8  0E00               	movlw	0
 22399  002EBA  0101               	movlb	1	; () banked
 22400  002EBC  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 22401  002EBE  0E00               	movlw	0
 22402  002EC0  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 22403  002EC2                     i2l9520:
 22404                           
 22405                           ; BSR set to: 1
 22406                           ;sort.c: 471: }
 22407                           ;sort.c: 473: if(total_time - most_recent_sort_time == 20){
 22408  002EC2  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22409  002EC6  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22410  002ECA  1E2A               	comf	??_printSortTimer,f,c
 22411  002ECC  1E2B               	comf	??_printSortTimer+1,f,c
 22412  002ECE  4A2A               	infsnz	??_printSortTimer,f,c
 22413  002ED0  2A2B               	incf	??_printSortTimer+1,f,c
 22414  002ED2  0100               	movlb	0	; () banked
 22415  002ED4  51FA               	movf	_total_time& (0+255),w,b
 22416  002ED6  262A               	addwf	??_printSortTimer,f,c
 22417  002ED8  0100               	movlb	0	; () banked
 22418  002EDA  51FB               	movf	(_total_time+1)& (0+255),w,b
 22419  002EDC  222B               	addwfc	??_printSortTimer+1,f,c
 22420  002EDE  0E14               	movlw	20
 22421  002EE0  182A               	xorwf	??_printSortTimer,w,c
 22422  002EE2  102B               	iorwf	??_printSortTimer+1,w,c
 22423  002EE4  A4D8               	btfss	status,2,c
 22424  002EE6  D033               	goto	i2l9540
 22425                           
 22426                           ; BSR set to: 0
 22427                           ;sort.c: 474: LATBbits.LATB2 = 0;
 22428  002EE8  948A               	bcf	3978,2,c	;volatile
 22429                           
 22430                           ; BSR set to: 0
 22431                           ;sort.c: 475: _delay((unsigned long)((2000)*(32000000/4000.0)));
 22432  002EEA  0E52               	movlw	82
 22433  002EEC  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22434  002EEE  0E2B               	movlw	43
 22435  002EF0  6E2A               	movwf	??_printSortTimer& (0+255),c
 22436  002EF2  0E00               	movlw	0
 22437  002EF4                     i2u1069_47:
 22438  002EF4  2EE8               	decfsz	wreg,f,c
 22439  002EF6  D7FE               	bra	i2u1069_47
 22440  002EF8  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 22441  002EFA  D7FC               	bra	i2u1069_47
 22442  002EFC  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 22443  002EFE  D7FA               	bra	i2u1069_47
 22444  002F00  D000               	nop2	
 22445                           
 22446                           ;sort.c: 476: for(int i=0; i<46; i++){
 22447  002F02  0E00               	movlw	0
 22448  002F04  6E48               	movwf	printSortTimer@i_1194+1,c
 22449  002F06  0E00               	movlw	0
 22450  002F08  6E47               	movwf	printSortTimer@i_1194,c
 22451  002F0A  BE48               	btfsc	printSortTimer@i_1194+1,7,c
 22452  002F0C  D006               	goto	i2l9532
 22453  002F0E  5048               	movf	printSortTimer@i_1194+1,w,c
 22454  002F10  E11D               	bnz	i2l869
 22455  002F12  0E2E               	movlw	46
 22456  002F14  5C47               	subwf	printSortTimer@i_1194,w,c
 22457  002F16  B0D8               	btfsc	status,0,c
 22458  002F18  D019               	goto	i2l869
 22459  002F1A                     i2l9532:
 22460                           
 22461                           ;sort.c: 477: LATBbits.LATB2 = !LATBbits.LATB2;
 22462  002F1A  B48A               	btfsc	3978,2,c	;volatile
 22463  002F1C  D003               	goto	i2u882_40
 22464  002F1E  6A2A               	clrf	??_printSortTimer& (0+255),c
 22465  002F20  2A2A               	incf	??_printSortTimer& (0+255),f,c
 22466  002F22  D001               	goto	i2u883_48
 22467  002F24                     i2u882_40:
 22468  002F24  6A2A               	clrf	??_printSortTimer& (0+255),c
 22469  002F26                     i2u883_48:
 22470  002F26  462A               	rlncf	??_printSortTimer,f,c
 22471  002F28  462A               	rlncf	??_printSortTimer,f,c
 22472  002F2A  508A               	movf	3978,w,c	;volatile
 22473  002F2C  182A               	xorwf	??_printSortTimer,w,c
 22474  002F2E  0BFB               	andlw	-5
 22475  002F30  182A               	xorwf	??_printSortTimer,w,c
 22476  002F32  6E8A               	movwf	3978,c	;volatile
 22477                           
 22478                           ;sort.c: 478: delay_ms(45-i);
 22479  002F34  5047               	movf	printSortTimer@i_1194,w,c
 22480  002F36  0800               	sublw	0
 22481  002F38  0F2D               	addlw	45
 22482  002F3A  ECBD  F02A         	call	i2_delay_ms
 22483  002F3E  4A47               	infsnz	printSortTimer@i_1194,f,c
 22484  002F40  2A48               	incf	printSortTimer@i_1194+1,f,c
 22485  002F42  BE48               	btfsc	printSortTimer@i_1194+1,7,c
 22486  002F44  D7EA               	goto	i2l9532
 22487  002F46  5048               	movf	printSortTimer@i_1194+1,w,c
 22488  002F48  E101               	bnz	i2u884_40
 22489  002F4A  D7E3               	goto	L19
 22490  002F4C                     i2u884_40:
 22491  002F4C                     i2l869:
 22492                           
 22493                           ;sort.c: 479: }
 22494                           ;sort.c: 480: LATBbits.LATB2 = 1;
 22495  002F4C  848A               	bsf	3978,2,c	;volatile
 22496  002F4E                     i2l9540:
 22497                           
 22498                           ;sort.c: 481: }
 22499                           ;sort.c: 483: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 22500  002F4E  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22501  002F52  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22502  002F56  1E2A               	comf	??_printSortTimer,f,c
 22503  002F58  1E2B               	comf	??_printSortTimer+1,f,c
 22504  002F5A  4A2A               	infsnz	??_printSortTimer,f,c
 22505  002F5C  2A2B               	incf	??_printSortTimer+1,f,c
 22506  002F5E  0100               	movlb	0	; () banked
 22507  002F60  51FA               	movf	_total_time& (0+255),w,b
 22508  002F62  262A               	addwf	??_printSortTimer,f,c
 22509  002F64  0100               	movlb	0	; () banked
 22510  002F66  51FB               	movf	(_total_time+1)& (0+255),w,b
 22511  002F68  222B               	addwfc	??_printSortTimer+1,f,c
 22512  002F6A  0E2A               	movlw	42
 22513  002F6C  182A               	xorwf	??_printSortTimer,w,c
 22514  002F6E  102B               	iorwf	??_printSortTimer+1,w,c
 22515  002F70  B4D8               	btfsc	status,2,c
 22516  002F72  D007               	goto	i2l9544
 22517                           
 22518                           ; BSR set to: 0
 22519  002F74  0EB3               	movlw	179
 22520  002F76  0100               	movlb	0	; () banked
 22521  002F78  19FA               	xorwf	_total_time& (0+255),w,b
 22522  002F7A  0100               	movlb	0	; () banked
 22523  002F7C  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 22524  002F7E  A4D8               	btfss	status,2,c
 22525  002F80  D003               	goto	i2l9546
 22526  002F82                     i2l9544:
 22527                           
 22528                           ; BSR set to: 0
 22529                           ;sort.c: 484: machine_state = DoneSorting_state;
 22530  002F82  0E02               	movlw	2
 22531  002F84  0100               	movlb	0	; () banked
 22532  002F86  6FFC               	movwf	_machine_state& (0+255),b
 22533  002F88                     i2l9546:
 22534                           
 22535                           ; BSR set to: 0
 22536                           ;sort.c: 486: }
 22537                           ;sort.c: 488: int min = (timeDiff % 3600) / 60;
 22538  002F88  0E0E               	movlw	14
 22539  002F8A  6E04               	movwf	i2___lwmod@divisor+1,c
 22540  002F8C  0E10               	movlw	16
 22541  002F8E  6E03               	movwf	i2___lwmod@divisor,c
 22542  002F90  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22543  002F94  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22544  002F98  ECE1  F027         	call	i2___lwmod	;wreg free
 22545  002F9C  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 22546  002FA0  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 22547  002FA4  0E00               	movlw	0
 22548  002FA6  6E09               	movwf	i2___lwdiv@divisor+1,c
 22549  002FA8  0E3C               	movlw	60
 22550  002FAA  6E08               	movwf	i2___lwdiv@divisor,c
 22551  002FAC  EC22  F027         	call	i2___lwdiv	;wreg free
 22552  002FB0  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 22553  002FB4  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 22554                           
 22555                           ;sort.c: 489: int sec = (timeDiff % 3600) % 60;
 22556  002FB8  0E0E               	movlw	14
 22557  002FBA  6E04               	movwf	i2___lwmod@divisor+1,c
 22558  002FBC  0E10               	movlw	16
 22559  002FBE  6E03               	movwf	i2___lwmod@divisor,c
 22560  002FC0  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22561  002FC4  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22562  002FC8  ECE1  F027         	call	i2___lwmod	;wreg free
 22563  002FCC  C001  F043         	movff	?i2___lwmod,_printSortTimer$2551
 22564  002FD0  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2551+1
 22565                           
 22566                           ;sort.c: 489: int sec = (timeDiff % 3600) % 60;
 22567  002FD4  C043  F001         	movff	_printSortTimer$2551,i2___lwmod@dividend
 22568  002FD8  C044  F002         	movff	_printSortTimer$2551+1,i2___lwmod@dividend+1
 22569  002FDC  0E00               	movlw	0
 22570  002FDE  6E04               	movwf	i2___lwmod@divisor+1,c
 22571  002FE0  0E3C               	movlw	60
 22572  002FE2  6E03               	movwf	i2___lwmod@divisor,c
 22573  002FE4  ECE1  F027         	call	i2___lwmod	;wreg free
 22574  002FE8  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 22575  002FEC  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22576                           
 22577                           ;sort.c: 491: lcdInst(0b10000000);;
 22578  002FF0  0E80               	movlw	128
 22579  002FF2  EC0B  F02B         	call	i2_lcdInst
 22580                           
 22581                           ;sort.c: 492: printf("SORTING...");
 22582  002FF6  0E7B               	movlw	low STR_64
 22583  002FF8  6E0D               	movwf	i2printf@f,c
 22584  002FFA  0EFF               	movlw	high STR_64
 22585  002FFC  6E0E               	movwf	i2printf@f+1,c
 22586  002FFE  EC65  F00F         	call	i2_printf	;wreg free
 22587                           
 22588                           ;sort.c: 493: lcdInst(0b11000000);;
 22589  003002  0EC0               	movlw	192
 22590  003004  EC0B  F02B         	call	i2_lcdInst
 22591                           
 22592                           ;sort.c: 494: printf("TIME %d:%02d", min, sec);
 22593  003008  0E4C               	movlw	low STR_65
 22594  00300A  6E0D               	movwf	i2printf@f,c
 22595  00300C  0EFF               	movlw	high STR_65
 22596  00300E  6E0E               	movwf	i2printf@f+1,c
 22597  003010  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22598  003014  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22599  003018  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22600  00301C  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22601  003020  EC65  F00F         	call	i2_printf	;wreg free
 22602  003024  0012               	return		;funcret
 22603  003026                     __end_of_printSortTimer:
 22604                           	opt stack 0
 22605                           pclatu	equ	0xFFB
 22606                           pclath	equ	0xFFA
 22607                           tblptru	equ	0xFF8
 22608                           tblptrh	equ	0xFF7
 22609                           tblptrl	equ	0xFF6
 22610                           tablat	equ	0xFF5
 22611                           prodh	equ	0xFF4
 22612                           prodl	equ	0xFF3
 22613                           intcon	equ	0xFF2
 22614                           intcon2	equ	0xFF1
 22615                           intcon3	equ	0xFF0
 22616                           indf0	equ	0xFEF
 22617                           postinc0	equ	0xFEE
 22618                           fsr0h	equ	0xFEA
 22619                           fsr0l	equ	0xFE9
 22620                           wreg	equ	0xFE8
 22621                           postdec1	equ	0xFE5
 22622                           fsr1h	equ	0xFE2
 22623                           fsr1l	equ	0xFE1
 22624                           indf2	equ	0xFDF
 22625                           postinc2	equ	0xFDE
 22626                           postdec2	equ	0xFDD
 22627                           fsr2h	equ	0xFDA
 22628                           fsr2l	equ	0xFD9
 22629                           status	equ	0xFD8
 22630                           
 22631 ;; *************** function i2_printf *****************
 22632 ;; Defined at:
 22633 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22634 ;; Parameters:    Size  Location     Type
 22635 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22636 ;;		 -> STR_127(18), STR_126(18), STR_125(17), STR_124(17), 
 22637 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 22638 ;;		 -> STR_119(18), STR_118(18), STR_117(17), STR_116(17), 
 22639 ;;		 -> STR_115(17), STR_114(17), STR_113(17), STR_112(17), 
 22640 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 22641 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 22642 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 22643 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 22644 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 22645 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 22646 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 22647 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 22648 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 22649 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 22650 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 22651 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 22652 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 22653 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 22654 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 22655 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 22656 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 22657 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 22658 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 22659 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 22660 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 22661 ;;		 -> STR_2(14), STR_1(18), 
 22662 ;; Auto vars:     Size  Location     Type
 22663 ;;  printf          4    0        struct .
 22664 ;;  printf          2   39[COMRAM] int 
 22665 ;;  printf          2   35[COMRAM] unsigned int 
 22666 ;;  printf          2   33[COMRAM] unsigned int 
 22667 ;;  printf          2   31[COMRAM] PTR void [1]
 22668 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22669 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 22670 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 22671 ;;  printf          1   38[COMRAM] char 
 22672 ;;  printf          1   37[COMRAM] unsigned char 
 22673 ;;  printf          1   28[COMRAM] char 
 22674 ;; Return value:  Size  Location     Type
 22675 ;;                  2   12[COMRAM] int 
 22676 ;; Registers used:
 22677 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22678 ;; Tracked objects:
 22679 ;;		On entry : 0/0
 22680 ;;		On exit  : 0/0
 22681 ;;		Unchanged: 0/0
 22682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22683 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22684 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22685 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22686 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22687 ;;Total ram usage:       29 bytes
 22688 ;; Hardware stack levels used:    1
 22689 ;; Hardware stack levels required when called:    2
 22690 ;; This function calls:
 22691 ;;		i2___lwdiv
 22692 ;;		i2___lwmod
 22693 ;;		i2___wmul
 22694 ;;		i2_isdigit
 22695 ;;		i2_putch
 22696 ;; This function is called by:
 22697 ;;		_change_state_to_menu_11
 22698 ;;		_change_state_to_menu_23
 22699 ;;		_change_state_to_logs_11
 22700 ;;		_change_state_to_logs_12
 22701 ;;		_change_state_to_logs_22
 22702 ;;		_change_state_to_logs_23
 22703 ;;		_change_state_to_logs_33
 22704 ;;		_change_state_to_logs_34
 22705 ;;		_printSortTimer
 22706 ;;		i2_change_state_to_menu_start
 22707 ;;		i2_change_state_to_menu_12
 22708 ;;		i2_change_state_to_menu_22
 22709 ;;		i2_printRTC
 22710 ;; This function uses a non-reentrant model
 22711 ;;
 22712                           
 22713                           	psect	text82
 22714  001ECA                     __ptext82:
 22715                           	opt stack 0
 22716  001ECA                     i2_printf:
 22717                           	opt stack 20
 22718                           
 22719                           ;doprnt.c: 466: va_list ap;
 22720                           ;doprnt.c: 499: signed char c;
 22721                           ;doprnt.c: 501: int width;
 22722                           ;doprnt.c: 506: signed char prec;
 22723                           ;doprnt.c: 508: unsigned char flag;
 22724                           ;doprnt.c: 523: union {
 22725                           ;doprnt.c: 524: unsigned long vd;
 22726                           ;doprnt.c: 525: double integ;
 22727                           ;doprnt.c: 526: } tmpval;
 22728                           ;doprnt.c: 528: unsigned int val;
 22729                           ;doprnt.c: 529: unsigned len;
 22730                           ;doprnt.c: 530: const char * cp;
 22731                           ;doprnt.c: 533: *ap = __va_start();
 22732                           
 22733                           ;incstack = 0
 22734  001ECA  0E0F               	movlw	low (?i2_printf+2)
 22735  001ECC  6E20               	movwf	i2printf@ap,c
 22736  001ECE  0E00               	movlw	high (?i2_printf+2)
 22737  001ED0  6E21               	movwf	i2printf@ap+1,c
 22738                           
 22739                           ;doprnt.c: 536: while(c = *f++) {
 22740  001ED2  D1A4               	goto	i2l6818
 22741  001ED4                     i2l6688:
 22742                           
 22743                           ;doprnt.c: 538: if(c != '%')
 22744  001ED4  0E25               	movlw	37
 22745  001ED6  1827               	xorwf	i2printf@c,w,c
 22746  001ED8  B4D8               	btfsc	status,2,c
 22747  001EDA  D004               	goto	i2l6692
 22748                           
 22749                           ;doprnt.c: 540: {
 22750                           ;doprnt.c: 541: (putch(c) );
 22751  001EDC  5027               	movf	i2printf@c,w,c
 22752  001EDE  EC05  F02B         	call	i2_putch
 22753                           
 22754                           ;doprnt.c: 542: continue;
 22755  001EE2  D19C               	goto	i2l6818
 22756  001EE4                     i2l6692:
 22757                           
 22758                           ;doprnt.c: 543: }
 22759                           ;doprnt.c: 546: width = 0;
 22760  001EE4  0E00               	movlw	0
 22761  001EE6  6E29               	movwf	i2printf@width+1,c
 22762  001EE8  0E00               	movlw	0
 22763  001EEA  6E28               	movwf	i2printf@width,c
 22764                           
 22765                           ;doprnt.c: 548: flag = 0;
 22766  001EEC  0E00               	movlw	0
 22767  001EEE  6E26               	movwf	i2printf@flag,c
 22768                           
 22769                           ;doprnt.c: 551: switch(*f) {
 22770                           
 22771                           ;doprnt.c: 550: for(;;) {
 22772  001EF0  D003               	goto	i2l6698
 22773  001EF2                     i2l6694:
 22774                           
 22775                           ;doprnt.c: 580: flag |= 0x04;
 22776  001EF2  8426               	bsf	i2printf@flag,2,c
 22777                           
 22778                           ;doprnt.c: 581: f++;
 22779  001EF4  4A0D               	infsnz	i2printf@f,f,c
 22780  001EF6  2A0E               	incf	i2printf@f+1,f,c
 22781  001EF8                     i2l6698:
 22782  001EF8  C00D  FFF6         	movff	i2printf@f,tblptrl
 22783  001EFC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22784  001F00                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22785  001F00  6AF8               	clrf	tblptru,c
 22786  001F02                     	endif
 22787  001F02                     	if	0	;tblptru may be non-zero
 22788  001F02                     	endif
 22789  001F02  0008               	tblrd		*
 22790  001F04  50F5               	movf	tablat,w,c
 22791                           
 22792                           ; Switch size 1, requested type "space"
 22793                           ; Number of cases is 1, Range of values is 48 to 48
 22794                           ; switch strategies available:
 22795                           ; Name         Instructions Cycles
 22796                           ; simple_byte            4     3 (average)
 22797                           ;	Chosen strategy is simple_byte
 22798  001F06  0A30               	xorlw	48	; case 48
 22799  001F08  B4D8               	btfsc	status,2,c
 22800  001F0A  D7F3               	goto	i2l6694
 22801                           
 22802                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22803                           
 22804                           ;doprnt.c: 586: }
 22805                           
 22806                           ;doprnt.c: 585: break;
 22807  001F0C  C00D  FFF6         	movff	i2printf@f,tblptrl
 22808  001F10  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22809  001F14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22810  001F14  6AF8               	clrf	tblptru,c
 22811  001F16                     	endif
 22812  001F16                     	if	0	;tblptru may be non-zero
 22813  001F16                     	endif
 22814  001F16  0008               	tblrd		*
 22815  001F18  50F5               	movf	tablat,w,c
 22816  001F1A  ECA0  F02A         	call	i2_isdigit
 22817  001F1E  A0D8               	btfss	status,0,c
 22818  001F20  D0A6               	goto	i2l6746
 22819                           
 22820                           ;doprnt.c: 598: width = 0;
 22821  001F22  0E00               	movlw	0
 22822  001F24  6E29               	movwf	i2printf@width+1,c
 22823  001F26  0E00               	movlw	0
 22824  001F28  6E28               	movwf	i2printf@width,c
 22825  001F2A                     i2l6704:
 22826                           
 22827                           ;doprnt.c: 600: width *= 10;
 22828  001F2A  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22829  001F2E  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22830  001F32  0E00               	movlw	0
 22831  001F34  6E04               	movwf	i2___wmul@multiplicand+1,c
 22832  001F36  0E0A               	movlw	10
 22833  001F38  6E03               	movwf	i2___wmul@multiplicand,c
 22834  001F3A  EC46  F02A         	call	i2___wmul	;wreg free
 22835  001F3E  C001  F028         	movff	?i2___wmul,i2printf@width
 22836  001F42  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22837                           
 22838                           ;doprnt.c: 601: width += *f++ - '0';
 22839  001F46  0ED0               	movlw	208
 22840  001F48  6E19               	movwf	??i2_printf& (0+255),c
 22841  001F4A  0EFF               	movlw	255
 22842  001F4C  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22843  001F4E  C00D  FFF6         	movff	i2printf@f,tblptrl
 22844  001F52  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22845  001F56                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22846  001F56  6AF8               	clrf	tblptru,c
 22847  001F58                     	endif
 22848  001F58                     	if	0	;tblptru may be non-zero
 22849  001F58                     	endif
 22850  001F58  0008               	tblrd		*
 22851  001F5A  50F5               	movf	tablat,w,c
 22852  001F5C  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22853  001F5E  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22854  001F60  5019               	movf	??i2_printf,w,c
 22855  001F62  261B               	addwf	??i2_printf+2,f,c
 22856  001F64  501A               	movf	??i2_printf+1,w,c
 22857  001F66  221C               	addwfc	??i2_printf+3,f,c
 22858  001F68  501B               	movf	??i2_printf+2,w,c
 22859  001F6A  2628               	addwf	i2printf@width,f,c
 22860  001F6C  501C               	movf	??i2_printf+3,w,c
 22861  001F6E  2229               	addwfc	i2printf@width+1,f,c
 22862  001F70  4A0D               	infsnz	i2printf@f,f,c
 22863  001F72  2A0E               	incf	i2printf@f+1,f,c
 22864                           
 22865                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22866  001F74  C00D  FFF6         	movff	i2printf@f,tblptrl
 22867  001F78  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22868  001F7C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22869  001F7C  6AF8               	clrf	tblptru,c
 22870  001F7E                     	endif
 22871  001F7E                     	if	0	;tblptru may be non-zero
 22872  001F7E                     	endif
 22873  001F7E  0008               	tblrd		*
 22874  001F80  50F5               	movf	tablat,w,c
 22875  001F82  ECA0  F02A         	call	i2_isdigit
 22876  001F86  A0D8               	btfss	status,0,c
 22877  001F88  D072               	goto	i2l6746
 22878  001F8A  D7CF               	goto	i2l6704
 22879  001F8C                     i2l6712:
 22880                           
 22881                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22882  001F8C  C020  FFD9         	movff	i2printf@ap,fsr2l
 22883  001F90  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22884  001F94  CFDE F01E          	movff	postinc2,i2printf@cp
 22885  001F98  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22886  001F9C  0E02               	movlw	2
 22887  001F9E  2620               	addwf	i2printf@ap,f,c
 22888  001FA0  0E00               	movlw	0
 22889  001FA2  2221               	addwfc	i2printf@ap+1,f,c
 22890                           
 22891                           ;doprnt.c: 740: if(!cp)
 22892  001FA4  501E               	movf	i2printf@cp,w,c
 22893  001FA6  101F               	iorwf	i2printf@cp+1,w,c
 22894  001FA8  A4D8               	btfss	status,2,c
 22895  001FAA  D004               	goto	i2l6720
 22896                           
 22897                           ;doprnt.c: 741: cp = "(null)";
 22898  001FAC  0EB5               	movlw	low STR_128
 22899  001FAE  6E1E               	movwf	i2printf@cp,c
 22900  001FB0  0EFF               	movlw	high STR_128
 22901  001FB2  6E1F               	movwf	i2printf@cp+1,c
 22902  001FB4                     i2l6720:
 22903                           
 22904                           ;doprnt.c: 745: len = 0;
 22905  001FB4  0E00               	movlw	0
 22906  001FB6  6E23               	movwf	i2printf@len+1,c
 22907  001FB8  0E00               	movlw	0
 22908  001FBA  6E22               	movwf	i2printf@len,c
 22909                           
 22910                           ;doprnt.c: 746: while(cp[len])
 22911  001FBC  D002               	goto	i2l6724
 22912  001FBE                     i2l6722:
 22913                           
 22914                           ;doprnt.c: 747: len++;
 22915  001FBE  4A22               	infsnz	i2printf@len,f,c
 22916  001FC0  2A23               	incf	i2printf@len+1,f,c
 22917  001FC2                     i2l6724:
 22918  001FC2  5022               	movf	i2printf@len,w,c
 22919  001FC4  241E               	addwf	i2printf@cp,w,c
 22920  001FC6  6E19               	movwf	??i2_printf& (0+255),c
 22921  001FC8  5023               	movf	i2printf@len+1,w,c
 22922  001FCA  201F               	addwfc	i2printf@cp+1,w,c
 22923  001FCC  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22924  001FCE  C019  FFF6         	movff	??i2_printf,tblptrl
 22925  001FD2  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22926  001FD6  0E00               	movlw	low (__mediumconst shr (0+16))
 22927  001FD8  6EF8               	movwf	tblptru,c
 22928  001FDA  0E0F               	movlw	(high __ramtop+-1)
 22929  001FDC  64F7               	cpfsgt	tblptrh,c
 22930  001FDE  D003               	bra	i2u526_47
 22931  001FE0  0008               	tblrd		*
 22932  001FE2  50F5               	movf	tablat,w,c
 22933  001FE4  D005               	bra	i2u526_40
 22934  001FE6                     i2u526_47:
 22935  001FE6  CFF6 FFE9          	movff	tblptrl,fsr0l
 22936  001FEA  CFF7 FFEA          	movff	tblptrh,fsr0h
 22937  001FEE  50EF               	movf	indf0,w,c
 22938  001FF0                     i2u526_40:
 22939  001FF0  0900               	iorlw	0
 22940  001FF2  A4D8               	btfss	status,2,c
 22941  001FF4  D7E4               	goto	i2l6722
 22942                           
 22943                           ;doprnt.c: 757: if(width > len)
 22944  001FF6  5028               	movf	i2printf@width,w,c
 22945  001FF8  5C22               	subwf	i2printf@len,w,c
 22946  001FFA  5029               	movf	i2printf@width+1,w,c
 22947  001FFC  5823               	subwfb	i2printf@len+1,w,c
 22948  001FFE  B0D8               	btfsc	status,0,c
 22949  002000  D005               	goto	i2l6730
 22950                           
 22951                           ;doprnt.c: 758: width -= len;
 22952  002002  5022               	movf	i2printf@len,w,c
 22953  002004  5E28               	subwf	i2printf@width,f,c
 22954  002006  5023               	movf	i2printf@len+1,w,c
 22955  002008  5A29               	subwfb	i2printf@width+1,f,c
 22956  00200A  D008               	goto	i2l6734
 22957  00200C                     i2l6730:
 22958                           
 22959                           ;doprnt.c: 759: else
 22960                           ;doprnt.c: 760: width = 0;
 22961  00200C  0E00               	movlw	0
 22962  00200E  6E29               	movwf	i2printf@width+1,c
 22963  002010  0E00               	movlw	0
 22964  002012  6E28               	movwf	i2printf@width,c
 22965                           
 22966                           ;doprnt.c: 764: while(width--)
 22967  002014  D003               	goto	i2l6734
 22968  002016                     i2l6732:
 22969                           
 22970                           ;doprnt.c: 765: (putch(' ') );
 22971  002016  0E20               	movlw	32
 22972  002018  EC05  F02B         	call	i2_putch
 22973  00201C                     i2l6734:
 22974  00201C  0628               	decf	i2printf@width,f,c
 22975  00201E  A0D8               	btfss	status,0,c
 22976  002020  0629               	decf	i2printf@width+1,f,c
 22977  002022  2828               	incf	i2printf@width,w,c
 22978  002024  E1F8               	bnz	i2l6732
 22979  002026  2829               	incf	i2printf@width+1,w,c
 22980  002028  B4D8               	btfsc	status,2,c
 22981  00202A  D016               	goto	i2l6740
 22982  00202C  D7F4               	goto	i2l6732
 22983  00202E                     i2l6736:
 22984                           
 22985                           ;doprnt.c: 768: (putch(*cp++) );
 22986  00202E  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22987  002032  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22988  002036  0E00               	movlw	low (__mediumconst shr (0+16))
 22989  002038  6EF8               	movwf	tblptru,c
 22990  00203A  0E0F               	movlw	(high __ramtop+-1)
 22991  00203C  64F7               	cpfsgt	tblptrh,c
 22992  00203E  D003               	bra	i2u530_47
 22993  002040  0008               	tblrd		*
 22994  002042  50F5               	movf	tablat,w,c
 22995  002044  D005               	bra	i2u530_40
 22996  002046                     i2u530_47:
 22997  002046  CFF6 FFE9          	movff	tblptrl,fsr0l
 22998  00204A  CFF7 FFEA          	movff	tblptrh,fsr0h
 22999  00204E  50EF               	movf	indf0,w,c
 23000  002050                     i2u530_40:
 23001  002050  EC05  F02B         	call	i2_putch
 23002  002054  4A1E               	infsnz	i2printf@cp,f,c
 23003  002056  2A1F               	incf	i2printf@cp+1,f,c
 23004  002058                     i2l6740:
 23005  002058  0622               	decf	i2printf@len,f,c
 23006  00205A  A0D8               	btfss	status,0,c
 23007  00205C  0623               	decf	i2printf@len+1,f,c
 23008  00205E  2822               	incf	i2printf@len,w,c
 23009  002060  E1E6               	bnz	i2l6736
 23010  002062  2823               	incf	i2printf@len+1,w,c
 23011  002064  B4D8               	btfsc	status,2,c
 23012  002066  D0DA               	goto	i2l6818
 23013  002068  D7E2               	goto	i2l6736
 23014  00206A                     i2l6742:
 23015                           
 23016                           ;doprnt.c: 818: flag |= 0x40;
 23017  00206A  8C26               	bsf	i2printf@flag,6,c
 23018                           
 23019                           ;doprnt.c: 822: }
 23020                           
 23021                           ;doprnt.c: 819: break;
 23022  00206C  D01B               	goto	i2l1486
 23023  00206E                     i2l6746:
 23024  00206E  C00D  FFF6         	movff	i2printf@f,tblptrl
 23025  002072  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23026  002076  4A0D               	infsnz	i2printf@f,f,c
 23027  002078  2A0E               	incf	i2printf@f+1,f,c
 23028  00207A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23029  00207A  6AF8               	clrf	tblptru,c
 23030  00207C                     	endif
 23031  00207C                     	if	0	;tblptru may be non-zero
 23032  00207C                     	endif
 23033  00207C  0008               	tblrd		*
 23034  00207E  CFF5 F027          	movff	tablat,i2printf@c
 23035  002082  5027               	movf	i2printf@c,w,c
 23036                           
 23037                           ; Switch size 1, requested type "space"
 23038                           ; Number of cases is 5, Range of values is 0 to 117
 23039                           ; switch strategies available:
 23040                           ; Name         Instructions Cycles
 23041                           ; simple_byte           16     9 (average)
 23042                           ;	Chosen strategy is simple_byte
 23043  002084  0A00               	xorlw	0	; case 0
 23044  002086  B4D8               	btfsc	status,2,c
 23045  002088  0012               	return	
 23046  00208A  0A64               	xorlw	100	; case 100
 23047  00208C  B4D8               	btfsc	status,2,c
 23048  00208E  D00A               	goto	i2l1486
 23049  002090  0A0D               	xorlw	13	; case 105
 23050  002092  B4D8               	btfsc	status,2,c
 23051  002094  D007               	goto	i2l1486
 23052  002096  0A1A               	xorlw	26	; case 115
 23053  002098  B4D8               	btfsc	status,2,c
 23054  00209A  D778               	goto	i2l6712
 23055  00209C  0A06               	xorlw	6	; case 117
 23056  00209E  B4D8               	btfsc	status,2,c
 23057  0020A0  D7E4               	goto	i2l6742
 23058  0020A2  D0BC               	goto	i2l6818
 23059  0020A4                     i2l1486:
 23060                           
 23061                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 23062  0020A4  BC26               	btfsc	i2printf@flag,6,c
 23063  0020A6  D015               	goto	i2l6758
 23064                           
 23065                           ;doprnt.c: 1253: {
 23066                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 23067  0020A8  C020  FFD9         	movff	i2printf@ap,fsr2l
 23068  0020AC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23069  0020B0  CFDE F024          	movff	postinc2,i2printf@val
 23070  0020B4  CFDD F025          	movff	postdec2,i2printf@val+1
 23071  0020B8  0E02               	movlw	2
 23072  0020BA  2620               	addwf	i2printf@ap,f,c
 23073  0020BC  0E00               	movlw	0
 23074  0020BE  2221               	addwfc	i2printf@ap+1,f,c
 23075                           
 23076                           ;doprnt.c: 1261: if((int)val < 0) {
 23077  0020C0  AE25               	btfss	i2printf@val+1,7,c
 23078  0020C2  D013               	goto	i2l6762
 23079                           
 23080                           ;doprnt.c: 1262: flag |= 0x03;
 23081  0020C4  0E03               	movlw	3
 23082  0020C6  1226               	iorwf	i2printf@flag,f,c
 23083                           
 23084                           ;doprnt.c: 1263: val = -val;
 23085  0020C8  6C24               	negf	i2printf@val,c
 23086  0020CA  1E25               	comf	i2printf@val+1,f,c
 23087  0020CC  B0D8               	btfsc	status,0,c
 23088  0020CE  2A25               	incf	i2printf@val+1,f,c
 23089                           
 23090                           ;doprnt.c: 1264: }
 23091                           ;doprnt.c: 1266: }
 23092  0020D0  D00C               	goto	i2l6762
 23093  0020D2                     i2l6758:
 23094                           
 23095                           ;doprnt.c: 1268: else
 23096                           ;doprnt.c: 1273: {
 23097                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 23098  0020D2  C020  FFD9         	movff	i2printf@ap,fsr2l
 23099  0020D6  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23100  0020DA  CFDE F024          	movff	postinc2,i2printf@val
 23101  0020DE  CFDD F025          	movff	postdec2,i2printf@val+1
 23102  0020E2  0E02               	movlw	2
 23103  0020E4  2620               	addwf	i2printf@ap,f,c
 23104  0020E6  0E00               	movlw	0
 23105  0020E8  2221               	addwfc	i2printf@ap+1,f,c
 23106  0020EA                     i2l6762:
 23107                           
 23108                           ;doprnt.c: 1287: }
 23109                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23110  0020EA  0E01               	movlw	1
 23111  0020EC  6E27               	movwf	i2printf@c,c
 23112  0020EE                     i2l6764:
 23113  0020EE  0E05               	movlw	5
 23114  0020F0  1827               	xorwf	i2printf@c,w,c
 23115  0020F2  B4D8               	btfsc	status,2,c
 23116  0020F4  D015               	goto	i2l6776
 23117                           
 23118                           ;doprnt.c: 1306: if(val < dpowers[c])
 23119  0020F6  5027               	movf	i2printf@c,w,c
 23120  0020F8  0D02               	mullw	2
 23121  0020FA  0EB4               	movlw	low _dpowers
 23122  0020FC  24F3               	addwf	prodl,w,c
 23123  0020FE  6EF6               	movwf	tblptrl,c
 23124  002100  0EFA               	movlw	high _dpowers
 23125  002102  20F4               	addwfc	prodh,w,c
 23126  002104  6EF7               	movwf	tblptrh,c
 23127  002106                     	if	1	;There are 3 active tblptr bytes
 23128  002106  6AF8               	clrf	tblptru,c
 23129  002108  0E00               	movlw	low (__mediumconst shr (0+16))
 23130  00210A  22F8               	addwfc	tblptru,f,c
 23131  00210C                     	endif
 23132  00210C  0009               	tblrd		*+
 23133  00210E  50F5               	movf	tablat,w,c
 23134  002110  5C24               	subwf	i2printf@val,w,c
 23135  002112  0009               	tblrd		*+
 23136  002114  50F5               	movf	tablat,w,c
 23137  002116  5825               	subwfb	i2printf@val+1,w,c
 23138  002118  A0D8               	btfss	status,0,c
 23139  00211A  D002               	goto	i2l6776
 23140                           
 23141                           ;doprnt.c: 1307: break;
 23142  00211C  2A27               	incf	i2printf@c,f,c
 23143  00211E  D7E7               	goto	i2l6764
 23144  002120                     i2l6776:
 23145                           
 23146                           ;doprnt.c: 1345: if(width && flag & 0x03)
 23147  002120  5028               	movf	i2printf@width,w,c
 23148  002122  1029               	iorwf	i2printf@width+1,w,c
 23149  002124  B4D8               	btfsc	status,2,c
 23150  002126  D009               	goto	i2l6782
 23151  002128  C026  F019         	movff	i2printf@flag,??i2_printf
 23152  00212C  0E03               	movlw	3
 23153  00212E  1619               	andwf	??i2_printf,f,c
 23154  002130  B4D8               	btfsc	status,2,c
 23155  002132  D003               	goto	i2l6782
 23156                           
 23157                           ;doprnt.c: 1346: width--;
 23158  002134  0628               	decf	i2printf@width,f,c
 23159  002136  A0D8               	btfss	status,0,c
 23160  002138  0629               	decf	i2printf@width+1,f,c
 23161  00213A                     i2l6782:
 23162                           
 23163                           ;doprnt.c: 1381: if(width > c)
 23164  00213A  0E80               	movlw	128
 23165  00213C  BE27               	btfsc	i2printf@c,7,c
 23166  00213E  0E7F               	movlw	127
 23167  002140  6E19               	movwf	??i2_printf& (0+255),c
 23168  002142  5028               	movf	i2printf@width,w,c
 23169  002144  5C27               	subwf	i2printf@c,w,c
 23170  002146  5029               	movf	i2printf@width+1,w,c
 23171  002148  0A80               	xorlw	128
 23172  00214A  5819               	subwfb	??i2_printf& (0+255),w,c
 23173  00214C  B0D8               	btfsc	status,0,c
 23174  00214E  D007               	goto	i2l6786
 23175                           
 23176                           ;doprnt.c: 1382: width -= c;
 23177  002150  5027               	movf	i2printf@c,w,c
 23178  002152  5E28               	subwf	i2printf@width,f,c
 23179  002154  0E00               	movlw	0
 23180  002156  BE27               	btfsc	i2printf@c,7,c
 23181  002158  0EFF               	movlw	255
 23182  00215A  5A29               	subwfb	i2printf@width+1,f,c
 23183  00215C  D004               	goto	i2l6788
 23184  00215E                     i2l6786:
 23185                           
 23186                           ;doprnt.c: 1383: else
 23187                           ;doprnt.c: 1384: width = 0;
 23188  00215E  0E00               	movlw	0
 23189  002160  6E29               	movwf	i2printf@width+1,c
 23190  002162  0E00               	movlw	0
 23191  002164  6E28               	movwf	i2printf@width,c
 23192  002166                     i2l6788:
 23193                           
 23194                           ;doprnt.c: 1387: if(flag & 0x04) {
 23195  002166  A426               	btfss	i2printf@flag,2,c
 23196  002168  D014               	goto	i2l6800
 23197                           
 23198                           ;doprnt.c: 1392: if(flag & 0x03)
 23199  00216A  C026  F019         	movff	i2printf@flag,??i2_printf
 23200  00216E  0E03               	movlw	3
 23201  002170  1619               	andwf	??i2_printf,f,c
 23202  002172  B4D8               	btfsc	status,2,c
 23203  002174  D003               	goto	i2l6794
 23204                           
 23205                           ;doprnt.c: 1393: (putch('-') );
 23206  002176  0E2D               	movlw	45
 23207  002178  EC05  F02B         	call	i2_putch
 23208  00217C                     i2l6794:
 23209                           
 23210                           ;doprnt.c: 1415: if(width)
 23211  00217C  5028               	movf	i2printf@width,w,c
 23212  00217E  1029               	iorwf	i2printf@width+1,w,c
 23213  002180  B4D8               	btfsc	status,2,c
 23214  002182  D01E               	goto	i2l6810
 23215                           
 23216                           ;doprnt.c: 1417: (putch('0') );
 23217                           
 23218                           ;doprnt.c: 1416: do
 23219  002184  0E30               	movlw	48
 23220  002186  EC05  F02B         	call	i2_putch
 23221                           
 23222                           ;doprnt.c: 1418: while(--width);
 23223  00218A  0628               	decf	i2printf@width,f,c
 23224  00218C  A0D8               	btfss	status,0,c
 23225  00218E  0629               	decf	i2printf@width+1,f,c
 23226  002190  D7F5               	goto	i2l6794
 23227  002192                     i2l6800:
 23228                           
 23229                           ;doprnt.c: 1422: {
 23230                           ;doprnt.c: 1424: if(width
 23231                           ;doprnt.c: 1428: )
 23232  002192  5028               	movf	i2printf@width,w,c
 23233  002194  1029               	iorwf	i2printf@width+1,w,c
 23234  002196  B4D8               	btfsc	status,2,c
 23235  002198  D00A               	goto	i2l6806
 23236  00219A                     i2l6802:
 23237                           
 23238                           ;doprnt.c: 1430: (putch(' ') );
 23239  00219A  0E20               	movlw	32
 23240  00219C  EC05  F02B         	call	i2_putch
 23241                           
 23242                           ;doprnt.c: 1431: while(--width);
 23243  0021A0  0628               	decf	i2printf@width,f,c
 23244  0021A2  A0D8               	btfss	status,0,c
 23245  0021A4  0629               	decf	i2printf@width+1,f,c
 23246  0021A6  5028               	movf	i2printf@width,w,c
 23247  0021A8  1029               	iorwf	i2printf@width+1,w,c
 23248  0021AA  A4D8               	btfss	status,2,c
 23249  0021AC  D7F6               	goto	i2l6802
 23250  0021AE                     i2l6806:
 23251                           
 23252                           ;doprnt.c: 1438: if(flag & 0x03)
 23253  0021AE  C026  F019         	movff	i2printf@flag,??i2_printf
 23254  0021B2  0E03               	movlw	3
 23255  0021B4  1619               	andwf	??i2_printf,f,c
 23256  0021B6  B4D8               	btfsc	status,2,c
 23257  0021B8  D003               	goto	i2l6810
 23258                           
 23259                           ;doprnt.c: 1439: (putch('-') );
 23260  0021BA  0E2D               	movlw	45
 23261  0021BC  EC05  F02B         	call	i2_putch
 23262  0021C0                     i2l6810:
 23263                           
 23264                           ;doprnt.c: 1469: }
 23265                           ;doprnt.c: 1472: prec = c;
 23266  0021C0  C027  F01D         	movff	i2printf@c,i2printf@prec
 23267                           
 23268                           ;doprnt.c: 1474: while(prec--) {
 23269  0021C4  D027               	goto	i2l6816
 23270  0021C6                     i2l6812:
 23271                           
 23272                           ;doprnt.c: 1478: {
 23273                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23274  0021C6  501D               	movf	i2printf@prec,w,c
 23275  0021C8  0D02               	mullw	2
 23276  0021CA  0EB4               	movlw	low _dpowers
 23277  0021CC  24F3               	addwf	prodl,w,c
 23278  0021CE  6EF6               	movwf	tblptrl,c
 23279  0021D0  0EFA               	movlw	high _dpowers
 23280  0021D2  20F4               	addwfc	prodh,w,c
 23281  0021D4  6EF7               	movwf	tblptrh,c
 23282  0021D6                     	if	1	;There are 3 active tblptr bytes
 23283  0021D6  6AF8               	clrf	tblptru,c
 23284  0021D8  0E00               	movlw	low (__mediumconst shr (0+16))
 23285  0021DA  22F8               	addwfc	tblptru,f,c
 23286  0021DC                     	endif
 23287  0021DC  0009               	tblrd		*+
 23288  0021DE  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 23289  0021E2  000A               	tblrd		*-
 23290  0021E4  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 23291  0021E8  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 23292  0021EC  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 23293  0021F0  EC22  F027         	call	i2___lwdiv	;wreg free
 23294  0021F4  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 23295  0021F8  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 23296  0021FC  0E00               	movlw	0
 23297  0021FE  6E04               	movwf	i2___lwmod@divisor+1,c
 23298  002200  0E0A               	movlw	10
 23299  002202  6E03               	movwf	i2___lwmod@divisor,c
 23300  002204  ECE1  F027         	call	i2___lwmod	;wreg free
 23301  002208  5001               	movf	?i2___lwmod,w,c
 23302  00220A  0F30               	addlw	48
 23303  00220C  6E27               	movwf	i2printf@c,c
 23304                           
 23305                           ;doprnt.c: 1523: }
 23306                           ;doprnt.c: 1524: (putch(c) );
 23307  00220E  5027               	movf	i2printf@c,w,c
 23308  002210  EC05  F02B         	call	i2_putch
 23309  002214                     i2l6816:
 23310  002214  061D               	decf	i2printf@prec,f,c
 23311  002216  281D               	incf	i2printf@prec,w,c
 23312  002218  A4D8               	btfss	status,2,c
 23313  00221A  D7D5               	goto	i2l6812
 23314  00221C                     i2l6818:
 23315  00221C  C00D  FFF6         	movff	i2printf@f,tblptrl
 23316  002220  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23317  002224  4A0D               	infsnz	i2printf@f,f,c
 23318  002226  2A0E               	incf	i2printf@f+1,f,c
 23319  002228                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23320  002228  6AF8               	clrf	tblptru,c
 23321  00222A                     	endif
 23322  00222A                     	if	0	;tblptru may be non-zero
 23323  00222A                     	endif
 23324  00222A  0008               	tblrd		*
 23325  00222C  CFF5 F027          	movff	tablat,i2printf@c
 23326  002230  5027               	movf	i2printf@c,w,c
 23327  002232  B4D8               	btfsc	status,2,c
 23328  002234  0012               	return	
 23329  002236  D64E               	goto	i2l6688
 23330  002238                     __end_ofi2_printf:
 23331                           	opt stack 0
 23332                           pclatu	equ	0xFFB
 23333                           pclath	equ	0xFFA
 23334                           tblptru	equ	0xFF8
 23335                           tblptrh	equ	0xFF7
 23336                           tblptrl	equ	0xFF6
 23337                           tablat	equ	0xFF5
 23338                           prodh	equ	0xFF4
 23339                           prodl	equ	0xFF3
 23340                           intcon	equ	0xFF2
 23341                           intcon2	equ	0xFF1
 23342                           intcon3	equ	0xFF0
 23343                           indf0	equ	0xFEF
 23344                           postinc0	equ	0xFEE
 23345                           fsr0h	equ	0xFEA
 23346                           fsr0l	equ	0xFE9
 23347                           wreg	equ	0xFE8
 23348                           postdec1	equ	0xFE5
 23349                           fsr1h	equ	0xFE2
 23350                           fsr1l	equ	0xFE1
 23351                           indf2	equ	0xFDF
 23352                           postinc2	equ	0xFDE
 23353                           postdec2	equ	0xFDD
 23354                           fsr2h	equ	0xFDA
 23355                           fsr2l	equ	0xFD9
 23356                           status	equ	0xFD8
 23357                           
 23358 ;; *************** function i2_putch *****************
 23359 ;; Defined at:
 23360 ;;		line 20 in file "lcd.c"
 23361 ;; Parameters:    Size  Location     Type
 23362 ;;  data            1    wreg     unsigned char 
 23363 ;; Auto vars:     Size  Location     Type
 23364 ;;  data            1    2[COMRAM] unsigned char 
 23365 ;; Return value:  Size  Location     Type
 23366 ;;                  1    wreg      void 
 23367 ;; Registers used:
 23368 ;;		wreg, status,2, status,0, cstack
 23369 ;; Tracked objects:
 23370 ;;		On entry : 0/0
 23371 ;;		On exit  : 0/0
 23372 ;;		Unchanged: 0/0
 23373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23378 ;;Total ram usage:        1 bytes
 23379 ;; Hardware stack levels used:    1
 23380 ;; Hardware stack levels required when called:    1
 23381 ;; This function calls:
 23382 ;;		i2_lcdNibble
 23383 ;; This function is called by:
 23384 ;;		i2_printf
 23385 ;; This function uses a non-reentrant model
 23386 ;;
 23387                           
 23388                           	psect	text83
 23389  00560A                     __ptext83:
 23390                           	opt stack 0
 23391  00560A                     i2_putch:
 23392                           	opt stack 20
 23393                           
 23394                           ;incstack = 0
 23395                           ;i2putch@data stored from wreg
 23396  00560A  6E03               	movwf	i2putch@data,c
 23397                           
 23398                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 23399  00560C  848C               	bsf	3980,2,c	;volatile
 23400                           
 23401                           ;lcd.c: 22: lcdNibble(data);
 23402  00560E  5003               	movf	i2putch@data,w,c
 23403  005610  ECF7  F026         	call	i2_lcdNibble
 23404  005614  0012               	return		;funcret
 23405  005616                     __end_ofi2_putch:
 23406                           	opt stack 0
 23407                           pclatu	equ	0xFFB
 23408                           pclath	equ	0xFFA
 23409                           tblptru	equ	0xFF8
 23410                           tblptrh	equ	0xFF7
 23411                           tblptrl	equ	0xFF6
 23412                           tablat	equ	0xFF5
 23413                           prodh	equ	0xFF4
 23414                           prodl	equ	0xFF3
 23415                           intcon	equ	0xFF2
 23416                           intcon2	equ	0xFF1
 23417                           intcon3	equ	0xFF0
 23418                           indf0	equ	0xFEF
 23419                           postinc0	equ	0xFEE
 23420                           fsr0h	equ	0xFEA
 23421                           fsr0l	equ	0xFE9
 23422                           wreg	equ	0xFE8
 23423                           postdec1	equ	0xFE5
 23424                           fsr1h	equ	0xFE2
 23425                           fsr1l	equ	0xFE1
 23426                           indf2	equ	0xFDF
 23427                           postinc2	equ	0xFDE
 23428                           postdec2	equ	0xFDD
 23429                           fsr2h	equ	0xFDA
 23430                           fsr2l	equ	0xFD9
 23431                           status	equ	0xFD8
 23432                           
 23433 ;; *************** function i2_isdigit *****************
 23434 ;; Defined at:
 23435 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 23436 ;; Parameters:    Size  Location     Type
 23437 ;;  c               1    wreg     unsigned char 
 23438 ;; Auto vars:     Size  Location     Type
 23439 ;;  c               1    2[COMRAM] unsigned char 
 23440 ;; Return value:  Size  Location     Type
 23441 ;;		None               void
 23442 ;; Registers used:
 23443 ;;		wreg, status,2, status,0
 23444 ;; Tracked objects:
 23445 ;;		On entry : 0/0
 23446 ;;		On exit  : 0/0
 23447 ;;		Unchanged: 0/0
 23448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23452 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23453 ;;Total ram usage:        3 bytes
 23454 ;; Hardware stack levels used:    1
 23455 ;; This function calls:
 23456 ;;		Nothing
 23457 ;; This function is called by:
 23458 ;;		i2_printf
 23459 ;; This function uses a non-reentrant model
 23460 ;;
 23461                           
 23462                           	psect	text84
 23463  005540                     __ptext84:
 23464                           	opt stack 0
 23465  005540                     i2_isdigit:
 23466                           	opt stack 21
 23467                           
 23468                           ;incstack = 0
 23469                           ;i2isdigit@c stored from wreg
 23470  005540  6E03               	movwf	i2isdigit@c,c
 23471  005542  0E00               	movlw	0
 23472  005544  6E02               	movwf	i2_isdigit$2056,c
 23473  005546  0E3A               	movlw	58
 23474  005548  6003               	cpfslt	i2isdigit@c,c
 23475  00554A  D005               	goto	i2l6388
 23476  00554C  0E2F               	movlw	47
 23477  00554E  6403               	cpfsgt	i2isdigit@c,c
 23478  005550  D002               	goto	i2l6388
 23479  005552  0E01               	movlw	1
 23480  005554  6E02               	movwf	i2_isdigit$2056,c
 23481  005556                     i2l6388:
 23482  005556  C002  F001         	movff	i2_isdigit$2056,??i2_isdigit
 23483  00555A  3001               	rrcf	??i2_isdigit,w,c
 23484  00555C  0012               	return	
 23485  00555E                     __end_ofi2_isdigit:
 23486                           	opt stack 0
 23487                           pclatu	equ	0xFFB
 23488                           pclath	equ	0xFFA
 23489                           tblptru	equ	0xFF8
 23490                           tblptrh	equ	0xFF7
 23491                           tblptrl	equ	0xFF6
 23492                           tablat	equ	0xFF5
 23493                           prodh	equ	0xFF4
 23494                           prodl	equ	0xFF3
 23495                           intcon	equ	0xFF2
 23496                           intcon2	equ	0xFF1
 23497                           intcon3	equ	0xFF0
 23498                           indf0	equ	0xFEF
 23499                           postinc0	equ	0xFEE
 23500                           fsr0h	equ	0xFEA
 23501                           fsr0l	equ	0xFE9
 23502                           wreg	equ	0xFE8
 23503                           postdec1	equ	0xFE5
 23504                           fsr1h	equ	0xFE2
 23505                           fsr1l	equ	0xFE1
 23506                           indf2	equ	0xFDF
 23507                           postinc2	equ	0xFDE
 23508                           postdec2	equ	0xFDD
 23509                           fsr2h	equ	0xFDA
 23510                           fsr2l	equ	0xFD9
 23511                           status	equ	0xFD8
 23512                           
 23513 ;; *************** function i2___wmul *****************
 23514 ;; Defined at:
 23515 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 23516 ;; Parameters:    Size  Location     Type
 23517 ;;  multiplier      2    0[COMRAM] unsigned int 
 23518 ;;  multiplicand    2    2[COMRAM] unsigned int 
 23519 ;; Auto vars:     Size  Location     Type
 23520 ;;  __wmul          2    4[COMRAM] unsigned int 
 23521 ;; Return value:  Size  Location     Type
 23522 ;;                  2    0[COMRAM] unsigned int 
 23523 ;; Registers used:
 23524 ;;		wreg, status,2, status,0, prodl, prodh
 23525 ;; Tracked objects:
 23526 ;;		On entry : 0/0
 23527 ;;		On exit  : 0/0
 23528 ;;		Unchanged: 0/0
 23529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23530 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23533 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23534 ;;Total ram usage:        6 bytes
 23535 ;; Hardware stack levels used:    1
 23536 ;; This function calls:
 23537 ;;		Nothing
 23538 ;; This function is called by:
 23539 ;;		_printSortTimer
 23540 ;;		_retrieveLog
 23541 ;;		i2_printf
 23542 ;; This function uses a non-reentrant model
 23543 ;;
 23544                           
 23545                           	psect	text85
 23546  00548C                     __ptext85:
 23547                           	opt stack 0
 23548  00548C                     i2___wmul:
 23549                           	opt stack 21
 23550                           
 23551                           ;incstack = 0
 23552  00548C  5001               	movf	i2___wmul@multiplier,w,c
 23553  00548E  0203               	mulwf	i2___wmul@multiplicand,c
 23554  005490  CFF3 F005          	movff	prodl,i2___wmul@product
 23555  005494  CFF4 F006          	movff	prodh,i2___wmul@product+1
 23556  005498  5001               	movf	i2___wmul@multiplier,w,c
 23557  00549A  0204               	mulwf	i2___wmul@multiplicand+1,c
 23558  00549C  50F3               	movf	prodl,w,c
 23559  00549E  2606               	addwf	i2___wmul@product+1,f,c
 23560  0054A0  5002               	movf	i2___wmul@multiplier+1,w,c
 23561  0054A2  0203               	mulwf	i2___wmul@multiplicand,c
 23562  0054A4  50F3               	movf	prodl,w,c
 23563  0054A6  2606               	addwf	i2___wmul@product+1,f,c
 23564  0054A8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 23565  0054AC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 23566  0054B0  0012               	return	
 23567  0054B2                     __end_ofi2___wmul:
 23568                           	opt stack 0
 23569                           pclatu	equ	0xFFB
 23570                           pclath	equ	0xFFA
 23571                           tblptru	equ	0xFF8
 23572                           tblptrh	equ	0xFF7
 23573                           tblptrl	equ	0xFF6
 23574                           tablat	equ	0xFF5
 23575                           prodh	equ	0xFF4
 23576                           prodl	equ	0xFF3
 23577                           intcon	equ	0xFF2
 23578                           intcon2	equ	0xFF1
 23579                           intcon3	equ	0xFF0
 23580                           indf0	equ	0xFEF
 23581                           postinc0	equ	0xFEE
 23582                           fsr0h	equ	0xFEA
 23583                           fsr0l	equ	0xFE9
 23584                           wreg	equ	0xFE8
 23585                           postdec1	equ	0xFE5
 23586                           fsr1h	equ	0xFE2
 23587                           fsr1l	equ	0xFE1
 23588                           indf2	equ	0xFDF
 23589                           postinc2	equ	0xFDE
 23590                           postdec2	equ	0xFDD
 23591                           fsr2h	equ	0xFDA
 23592                           fsr2l	equ	0xFD9
 23593                           status	equ	0xFD8
 23594                           
 23595 ;; *************** function i2___lwmod *****************
 23596 ;; Defined at:
 23597 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23598 ;; Parameters:    Size  Location     Type
 23599 ;;  dividend        2    0[COMRAM] unsigned int 
 23600 ;;  divisor         2    2[COMRAM] unsigned int 
 23601 ;; Auto vars:     Size  Location     Type
 23602 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23603 ;; Return value:  Size  Location     Type
 23604 ;;                  2    0[COMRAM] unsigned int 
 23605 ;; Registers used:
 23606 ;;		wreg, status,2, status,0
 23607 ;; Tracked objects:
 23608 ;;		On entry : 0/0
 23609 ;;		On exit  : 0/0
 23610 ;;		Unchanged: 0/0
 23611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23612 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23615 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23616 ;;Total ram usage:        5 bytes
 23617 ;; Hardware stack levels used:    1
 23618 ;; This function calls:
 23619 ;;		Nothing
 23620 ;; This function is called by:
 23621 ;;		_printSortTimer
 23622 ;;		i2_printf
 23623 ;; This function uses a non-reentrant model
 23624 ;;
 23625                           
 23626                           	psect	text86
 23627  004FC2                     __ptext86:
 23628                           	opt stack 0
 23629  004FC2                     i2___lwmod:
 23630                           	opt stack 21
 23631                           
 23632                           ;incstack = 0
 23633  004FC2  5003               	movf	i2___lwmod@divisor,w,c
 23634  004FC4  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23635  004FC6  B4D8               	btfsc	status,2,c
 23636  004FC8  D018               	goto	i2l1943
 23637  004FCA  0E01               	movlw	1
 23638  004FCC  6E05               	movwf	i2___lwmod@counter,c
 23639  004FCE  D004               	goto	i2l6420
 23640  004FD0                     i2l6418:
 23641  004FD0  90D8               	bcf	status,0,c
 23642  004FD2  3603               	rlcf	i2___lwmod@divisor,f,c
 23643  004FD4  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23644  004FD6  2A05               	incf	i2___lwmod@counter,f,c
 23645  004FD8                     i2l6420:
 23646  004FD8  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23647  004FDA  D7FA               	goto	i2l6418
 23648  004FDC                     i2l6422:
 23649  004FDC  5003               	movf	i2___lwmod@divisor,w,c
 23650  004FDE  5C01               	subwf	i2___lwmod@dividend,w,c
 23651  004FE0  5004               	movf	i2___lwmod@divisor+1,w,c
 23652  004FE2  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23653  004FE4  A0D8               	btfss	status,0,c
 23654  004FE6  D004               	goto	i2l6426
 23655  004FE8  5003               	movf	i2___lwmod@divisor,w,c
 23656  004FEA  5E01               	subwf	i2___lwmod@dividend,f,c
 23657  004FEC  5004               	movf	i2___lwmod@divisor+1,w,c
 23658  004FEE  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23659  004FF0                     i2l6426:
 23660  004FF0  90D8               	bcf	status,0,c
 23661  004FF2  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23662  004FF4  3203               	rrcf	i2___lwmod@divisor,f,c
 23663  004FF6  2E05               	decfsz	i2___lwmod@counter,f,c
 23664  004FF8  D7F1               	goto	i2l6422
 23665  004FFA                     i2l1943:
 23666  004FFA  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23667  004FFE  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23668  005002  0012               	return		;funcret
 23669  005004                     __end_ofi2___lwmod:
 23670                           	opt stack 0
 23671                           pclatu	equ	0xFFB
 23672                           pclath	equ	0xFFA
 23673                           tblptru	equ	0xFF8
 23674                           tblptrh	equ	0xFF7
 23675                           tblptrl	equ	0xFF6
 23676                           tablat	equ	0xFF5
 23677                           prodh	equ	0xFF4
 23678                           prodl	equ	0xFF3
 23679                           intcon	equ	0xFF2
 23680                           intcon2	equ	0xFF1
 23681                           intcon3	equ	0xFF0
 23682                           indf0	equ	0xFEF
 23683                           postinc0	equ	0xFEE
 23684                           fsr0h	equ	0xFEA
 23685                           fsr0l	equ	0xFE9
 23686                           wreg	equ	0xFE8
 23687                           postdec1	equ	0xFE5
 23688                           fsr1h	equ	0xFE2
 23689                           fsr1l	equ	0xFE1
 23690                           indf2	equ	0xFDF
 23691                           postinc2	equ	0xFDE
 23692                           postdec2	equ	0xFDD
 23693                           fsr2h	equ	0xFDA
 23694                           fsr2l	equ	0xFD9
 23695                           status	equ	0xFD8
 23696                           
 23697 ;; *************** function i2___lwdiv *****************
 23698 ;; Defined at:
 23699 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23700 ;; Parameters:    Size  Location     Type
 23701 ;;  dividend        2    5[COMRAM] unsigned int 
 23702 ;;  divisor         2    7[COMRAM] unsigned int 
 23703 ;; Auto vars:     Size  Location     Type
 23704 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23705 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23706 ;; Return value:  Size  Location     Type
 23707 ;;                  2    5[COMRAM] unsigned int 
 23708 ;; Registers used:
 23709 ;;		wreg, status,2, status,0
 23710 ;; Tracked objects:
 23711 ;;		On entry : 0/0
 23712 ;;		On exit  : 0/0
 23713 ;;		Unchanged: 0/0
 23714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23716 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23718 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23719 ;;Total ram usage:        7 bytes
 23720 ;; Hardware stack levels used:    1
 23721 ;; This function calls:
 23722 ;;		Nothing
 23723 ;; This function is called by:
 23724 ;;		_printSortTimer
 23725 ;;		i2_printf
 23726 ;; This function uses a non-reentrant model
 23727 ;;
 23728                           
 23729                           	psect	text87
 23730  004E44                     __ptext87:
 23731                           	opt stack 0
 23732  004E44                     i2___lwdiv:
 23733                           	opt stack 21
 23734                           
 23735                           ;incstack = 0
 23736  004E44  0E00               	movlw	0
 23737  004E46  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23738  004E48  0E00               	movlw	0
 23739  004E4A  6E0A               	movwf	i2___lwdiv@quotient,c
 23740  004E4C  5008               	movf	i2___lwdiv@divisor,w,c
 23741  004E4E  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23742  004E50  B4D8               	btfsc	status,2,c
 23743  004E52  D01C               	goto	i2l1933
 23744  004E54  0E01               	movlw	1
 23745  004E56  6E0C               	movwf	i2___lwdiv@counter,c
 23746  004E58  D004               	goto	i2l6400
 23747  004E5A                     i2l6398:
 23748  004E5A  90D8               	bcf	status,0,c
 23749  004E5C  3608               	rlcf	i2___lwdiv@divisor,f,c
 23750  004E5E  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23751  004E60  2A0C               	incf	i2___lwdiv@counter,f,c
 23752  004E62                     i2l6400:
 23753  004E62  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23754  004E64  D7FA               	goto	i2l6398
 23755  004E66                     i2l6402:
 23756  004E66  90D8               	bcf	status,0,c
 23757  004E68  360A               	rlcf	i2___lwdiv@quotient,f,c
 23758  004E6A  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23759  004E6C  5008               	movf	i2___lwdiv@divisor,w,c
 23760  004E6E  5C06               	subwf	i2___lwdiv@dividend,w,c
 23761  004E70  5009               	movf	i2___lwdiv@divisor+1,w,c
 23762  004E72  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23763  004E74  A0D8               	btfss	status,0,c
 23764  004E76  D005               	goto	i2l6410
 23765  004E78  5008               	movf	i2___lwdiv@divisor,w,c
 23766  004E7A  5E06               	subwf	i2___lwdiv@dividend,f,c
 23767  004E7C  5009               	movf	i2___lwdiv@divisor+1,w,c
 23768  004E7E  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23769  004E80  800A               	bsf	i2___lwdiv@quotient,0,c
 23770  004E82                     i2l6410:
 23771  004E82  90D8               	bcf	status,0,c
 23772  004E84  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 23773  004E86  3208               	rrcf	i2___lwdiv@divisor,f,c
 23774  004E88  2E0C               	decfsz	i2___lwdiv@counter,f,c
 23775  004E8A  D7ED               	goto	i2l6402
 23776  004E8C                     i2l1933:
 23777  004E8C  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23778  004E90  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23779  004E94  0012               	return		;funcret
 23780  004E96                     __end_ofi2___lwdiv:
 23781                           	opt stack 0
 23782                           pclatu	equ	0xFFB
 23783                           pclath	equ	0xFFA
 23784                           tblptru	equ	0xFF8
 23785                           tblptrh	equ	0xFF7
 23786                           tblptrl	equ	0xFF6
 23787                           tablat	equ	0xFF5
 23788                           prodh	equ	0xFF4
 23789                           prodl	equ	0xFF3
 23790                           intcon	equ	0xFF2
 23791                           intcon2	equ	0xFF1
 23792                           intcon3	equ	0xFF0
 23793                           indf0	equ	0xFEF
 23794                           postinc0	equ	0xFEE
 23795                           fsr0h	equ	0xFEA
 23796                           fsr0l	equ	0xFE9
 23797                           wreg	equ	0xFE8
 23798                           postdec1	equ	0xFE5
 23799                           fsr1h	equ	0xFE2
 23800                           fsr1l	equ	0xFE1
 23801                           indf2	equ	0xFDF
 23802                           postinc2	equ	0xFDE
 23803                           postdec2	equ	0xFDD
 23804                           fsr2h	equ	0xFDA
 23805                           fsr2l	equ	0xFD9
 23806                           status	equ	0xFD8
 23807                           
 23808 ;; *************** function i2_lcdInst *****************
 23809 ;; Defined at:
 23810 ;;		line 15 in file "lcd.c"
 23811 ;; Parameters:    Size  Location     Type
 23812 ;;  data            1    wreg     unsigned char 
 23813 ;; Auto vars:     Size  Location     Type
 23814 ;;  data            1    2[COMRAM] unsigned char 
 23815 ;; Return value:  Size  Location     Type
 23816 ;;                  1    wreg      void 
 23817 ;; Registers used:
 23818 ;;		wreg, status,2, status,0, cstack
 23819 ;; Tracked objects:
 23820 ;;		On entry : 0/0
 23821 ;;		On exit  : 0/0
 23822 ;;		Unchanged: 0/0
 23823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23827 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23828 ;;Total ram usage:        1 bytes
 23829 ;; Hardware stack levels used:    1
 23830 ;; Hardware stack levels required when called:    1
 23831 ;; This function calls:
 23832 ;;		i2_lcdNibble
 23833 ;; This function is called by:
 23834 ;;		_change_state_to_menu_11
 23835 ;;		_change_state_to_menu_23
 23836 ;;		_change_state_to_logs_11
 23837 ;;		_change_state_to_logs_12
 23838 ;;		_change_state_to_logs_22
 23839 ;;		_change_state_to_logs_23
 23840 ;;		_change_state_to_logs_33
 23841 ;;		_change_state_to_logs_34
 23842 ;;		_printSortTimer
 23843 ;;		i2_change_state_to_menu_start
 23844 ;;		i2_change_state_to_menu_12
 23845 ;;		i2_change_state_to_menu_22
 23846 ;;		i2_printRTC
 23847 ;; This function uses a non-reentrant model
 23848 ;;
 23849                           
 23850                           	psect	text88
 23851  005616                     __ptext88:
 23852                           	opt stack 0
 23853  005616                     i2_lcdInst:
 23854                           	opt stack 20
 23855                           
 23856                           ;incstack = 0
 23857                           ;i2lcdInst@data stored from wreg
 23858  005616  6E03               	movwf	i2lcdInst@data,c
 23859                           
 23860                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23861  005618  948C               	bcf	3980,2,c	;volatile
 23862                           
 23863                           ;lcd.c: 17: lcdNibble(data);
 23864  00561A  5003               	movf	i2lcdInst@data,w,c
 23865  00561C  ECF7  F026         	call	i2_lcdNibble
 23866  005620  0012               	return		;funcret
 23867  005622                     __end_ofi2_lcdInst:
 23868                           	opt stack 0
 23869                           pclatu	equ	0xFFB
 23870                           pclath	equ	0xFFA
 23871                           tblptru	equ	0xFF8
 23872                           tblptrh	equ	0xFF7
 23873                           tblptrl	equ	0xFF6
 23874                           tablat	equ	0xFF5
 23875                           prodh	equ	0xFF4
 23876                           prodl	equ	0xFF3
 23877                           intcon	equ	0xFF2
 23878                           intcon2	equ	0xFF1
 23879                           intcon3	equ	0xFF0
 23880                           indf0	equ	0xFEF
 23881                           postinc0	equ	0xFEE
 23882                           fsr0h	equ	0xFEA
 23883                           fsr0l	equ	0xFE9
 23884                           wreg	equ	0xFE8
 23885                           postdec1	equ	0xFE5
 23886                           fsr1h	equ	0xFE2
 23887                           fsr1l	equ	0xFE1
 23888                           indf2	equ	0xFDF
 23889                           postinc2	equ	0xFDE
 23890                           postdec2	equ	0xFDD
 23891                           fsr2h	equ	0xFDA
 23892                           fsr2l	equ	0xFD9
 23893                           status	equ	0xFD8
 23894                           
 23895 ;; *************** function i2_lcdNibble *****************
 23896 ;; Defined at:
 23897 ;;		line 25 in file "lcd.c"
 23898 ;; Parameters:    Size  Location     Type
 23899 ;;  data            1    wreg     unsigned char 
 23900 ;; Auto vars:     Size  Location     Type
 23901 ;;  data            1    1[COMRAM] unsigned char 
 23902 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23903 ;; Return value:  Size  Location     Type
 23904 ;;                  1    wreg      void 
 23905 ;; Registers used:
 23906 ;;		wreg, status,2, status,0
 23907 ;; Tracked objects:
 23908 ;;		On entry : 0/0
 23909 ;;		On exit  : 0/0
 23910 ;;		Unchanged: 0/0
 23911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23915 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23916 ;;Total ram usage:        2 bytes
 23917 ;; Hardware stack levels used:    1
 23918 ;; This function calls:
 23919 ;;		Nothing
 23920 ;; This function is called by:
 23921 ;;		i2_lcdInst
 23922 ;;		i2_putch
 23923 ;; This function uses a non-reentrant model
 23924 ;;
 23925                           
 23926                           	psect	text89
 23927  004DEE                     __ptext89:
 23928                           	opt stack 0
 23929  004DEE                     i2_lcdNibble:
 23930                           	opt stack 20
 23931                           
 23932                           ;incstack = 0
 23933                           ;i2lcdNibble@data stored from wreg
 23934  004DEE  6E02               	movwf	i2lcdNibble@data,c
 23935                           
 23936                           ;lcd.c: 27: char temp = data & 0xF0;
 23937  004DF0  5002               	movf	i2lcdNibble@data,w,c
 23938  004DF2  0BF0               	andlw	240
 23939  004DF4  6E01               	movwf	i2lcdNibble@temp,c
 23940                           
 23941                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23942  004DF6  508C               	movf	3980,w,c	;volatile
 23943  004DF8  0B0F               	andlw	15
 23944  004DFA  6E8C               	movwf	3980,c	;volatile
 23945                           
 23946                           ;lcd.c: 29: LATD = temp | LATD;
 23947  004DFC  5001               	movf	i2lcdNibble@temp,w,c
 23948  004DFE  108C               	iorwf	3980,w,c	;volatile
 23949  004E00  6E8C               	movwf	3980,c	;volatile
 23950                           
 23951                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23952  004E02  868C               	bsf	3980,3,c	;volatile
 23953                           
 23954                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23955  004E04  0E42               	movlw	66
 23956  004E06                     i2u1070_47:
 23957  004E06  2EE8               	decfsz	wreg,f,c
 23958  004E08  D7FE               	bra	i2u1070_47
 23959  004E0A  D000               	nop2	
 23960                           
 23961                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23962  004E0C  968C               	bcf	3980,3,c	;volatile
 23963                           
 23964                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23965  004E0E  0E42               	movlw	66
 23966  004E10                     i2u1071_47:
 23967  004E10  2EE8               	decfsz	wreg,f,c
 23968  004E12  D7FE               	bra	i2u1071_47
 23969  004E14  D000               	nop2	
 23970                           
 23971                           ;lcd.c: 36: data = data << 4;
 23972  004E16  3802               	swapf	i2lcdNibble@data,w,c
 23973  004E18  0BF0               	andlw	240
 23974  004E1A  6E02               	movwf	i2lcdNibble@data,c
 23975                           
 23976                           ;lcd.c: 38: temp = data & 0xF0;
 23977  004E1C  5002               	movf	i2lcdNibble@data,w,c
 23978  004E1E  0BF0               	andlw	240
 23979  004E20  6E01               	movwf	i2lcdNibble@temp,c
 23980                           
 23981                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23982  004E22  508C               	movf	3980,w,c	;volatile
 23983  004E24  0B0F               	andlw	15
 23984  004E26  6E8C               	movwf	3980,c	;volatile
 23985                           
 23986                           ;lcd.c: 40: LATD = temp | LATD;
 23987  004E28  5001               	movf	i2lcdNibble@temp,w,c
 23988  004E2A  108C               	iorwf	3980,w,c	;volatile
 23989  004E2C  6E8C               	movwf	3980,c	;volatile
 23990                           
 23991                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23992  004E2E  868C               	bsf	3980,3,c	;volatile
 23993                           
 23994                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23995  004E30  0E42               	movlw	66
 23996  004E32                     i2u1072_47:
 23997  004E32  2EE8               	decfsz	wreg,f,c
 23998  004E34  D7FE               	bra	i2u1072_47
 23999  004E36  D000               	nop2	
 24000                           
 24001                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 24002  004E38  968C               	bcf	3980,3,c	;volatile
 24003                           
 24004                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24005  004E3A  0E42               	movlw	66
 24006  004E3C                     i2u1073_47:
 24007  004E3C  2EE8               	decfsz	wreg,f,c
 24008  004E3E  D7FE               	bra	i2u1073_47
 24009  004E40  D000               	nop2	
 24010  004E42  0012               	return		;funcret
 24011  004E44                     __end_ofi2_lcdNibble:
 24012                           	opt stack 0
 24013                           pclatu	equ	0xFFB
 24014                           pclath	equ	0xFFA
 24015                           tblptru	equ	0xFF8
 24016                           tblptrh	equ	0xFF7
 24017                           tblptrl	equ	0xFF6
 24018                           tablat	equ	0xFF5
 24019                           prodh	equ	0xFF4
 24020                           prodl	equ	0xFF3
 24021                           intcon	equ	0xFF2
 24022                           intcon2	equ	0xFF1
 24023                           intcon3	equ	0xFF0
 24024                           indf0	equ	0xFEF
 24025                           postinc0	equ	0xFEE
 24026                           fsr0h	equ	0xFEA
 24027                           fsr0l	equ	0xFE9
 24028                           wreg	equ	0xFE8
 24029                           postdec1	equ	0xFE5
 24030                           fsr1h	equ	0xFE2
 24031                           fsr1l	equ	0xFE1
 24032                           indf2	equ	0xFDF
 24033                           postinc2	equ	0xFDE
 24034                           postdec2	equ	0xFDD
 24035                           fsr2h	equ	0xFDA
 24036                           fsr2l	equ	0xFD9
 24037                           status	equ	0xFD8
 24038                           
 24039 ;; *************** function i2_getRTC *****************
 24040 ;; Defined at:
 24041 ;;		line 44 in file "RTC.c"
 24042 ;; Parameters:    Size  Location     Type
 24043 ;;		None
 24044 ;; Auto vars:     Size  Location     Type
 24045 ;;  getRTC          2    3[COMRAM] int 
 24046 ;; Return value:  Size  Location     Type
 24047 ;;                  1    wreg      void 
 24048 ;; Registers used:
 24049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24050 ;; Tracked objects:
 24051 ;;		On entry : 0/0
 24052 ;;		On exit  : 0/0
 24053 ;;		Unchanged: 0/0
 24054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24058 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24059 ;;Total ram usage:        2 bytes
 24060 ;; Hardware stack levels used:    1
 24061 ;; Hardware stack levels required when called:    2
 24062 ;; This function calls:
 24063 ;;		i2_I2C_Master_Read
 24064 ;;		i2_I2C_Master_Start
 24065 ;;		i2_I2C_Master_Stop
 24066 ;;		i2_I2C_Master_Write
 24067 ;; This function is called by:
 24068 ;;		_printSortTimer
 24069 ;;		i2_printRTC
 24070 ;; This function uses a non-reentrant model
 24071 ;;
 24072                           
 24073                           	psect	text90
 24074  004AC6                     __ptext90:
 24075                           	opt stack 0
 24076  004AC6                     i2_getRTC:
 24077                           	opt stack 19
 24078                           
 24079                           ;RTC.c: 48: I2C_Master_Start();
 24080                           
 24081                           ;incstack = 0
 24082  004AC6  EC2B  F02B         	call	i2_I2C_Master_Start	;wreg free
 24083                           
 24084                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 24085  004ACA  0E00               	movlw	0
 24086  004ACC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24087  004ACE  0ED0               	movlw	208
 24088  004AD0  6E02               	movwf	i2I2C_Master_Write@d,c
 24089  004AD2  EC16  F02B         	call	i2_I2C_Master_Write	;wreg free
 24090                           
 24091                           ;RTC.c: 50: I2C_Master_Write(0x00);
 24092  004AD6  0E00               	movlw	0
 24093  004AD8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24094  004ADA  0E00               	movlw	0
 24095  004ADC  6E02               	movwf	i2I2C_Master_Write@d,c
 24096  004ADE  EC16  F02B         	call	i2_I2C_Master_Write	;wreg free
 24097                           
 24098                           ;RTC.c: 51: I2C_Master_Stop();
 24099  004AE2  EC27  F02B         	call	i2_I2C_Master_Stop	;wreg free
 24100                           
 24101                           ;RTC.c: 54: I2C_Master_Start();
 24102  004AE6  EC2B  F02B         	call	i2_I2C_Master_Start	;wreg free
 24103                           
 24104                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 24105  004AEA  0E00               	movlw	0
 24106  004AEC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24107  004AEE  0ED1               	movlw	209
 24108  004AF0  6E02               	movwf	i2I2C_Master_Write@d,c
 24109  004AF2  EC16  F02B         	call	i2_I2C_Master_Write	;wreg free
 24110                           
 24111                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 24112  004AF6  0E00               	movlw	0
 24113  004AF8  6E05               	movwf	i2getRTC@i+1,c
 24114  004AFA  0E00               	movlw	0
 24115  004AFC  6E04               	movwf	i2getRTC@i,c
 24116  004AFE                     i2l6660:
 24117  004AFE  BE05               	btfsc	i2getRTC@i+1,7,c
 24118  004B00  D006               	goto	i2l6664
 24119  004B02  5005               	movf	i2getRTC@i+1,w,c
 24120  004B04  E111               	bnz	i2l6670
 24121  004B06  0E06               	movlw	6
 24122  004B08  5C04               	subwf	i2getRTC@i,w,c
 24123  004B0A  B0D8               	btfsc	status,0,c
 24124  004B0C  D00D               	goto	i2l6670
 24125  004B0E                     i2l6664:
 24126                           
 24127                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 24128  004B0E  0E1C               	movlw	low _time
 24129  004B10  2404               	addwf	i2getRTC@i,w,c
 24130  004B12  6ED9               	movwf	fsr2l,c
 24131  004B14  0E01               	movlw	high _time
 24132  004B16  2005               	addwfc	i2getRTC@i+1,w,c
 24133  004B18  6EDA               	movwf	fsr2h,c
 24134  004B1A  0E01               	movlw	1
 24135  004B1C  EC59  F02A         	call	i2_I2C_Master_Read
 24136  004B20  6EDF               	movwf	indf2,c
 24137  004B22  4A04               	infsnz	i2getRTC@i,f,c
 24138  004B24  2A05               	incf	i2getRTC@i+1,f,c
 24139  004B26  D7EB               	goto	i2l6660
 24140  004B28                     i2l6670:
 24141                           
 24142                           ;RTC.c: 58: }
 24143                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 24144  004B28  0E00               	movlw	0
 24145  004B2A  EC59  F02A         	call	i2_I2C_Master_Read
 24146  004B2E  0101               	movlb	1	; () banked
 24147  004B30  6F22               	movwf	(_time+6)& (0+255),b
 24148                           
 24149                           ;RTC.c: 60: I2C_Master_Stop();
 24150  004B32  EC27  F02B         	call	i2_I2C_Master_Stop	;wreg free
 24151  004B36  0012               	return		;funcret
 24152  004B38                     __end_ofi2_getRTC:
 24153                           	opt stack 0
 24154                           pclatu	equ	0xFFB
 24155                           pclath	equ	0xFFA
 24156                           tblptru	equ	0xFF8
 24157                           tblptrh	equ	0xFF7
 24158                           tblptrl	equ	0xFF6
 24159                           tablat	equ	0xFF5
 24160                           prodh	equ	0xFF4
 24161                           prodl	equ	0xFF3
 24162                           intcon	equ	0xFF2
 24163                           intcon2	equ	0xFF1
 24164                           intcon3	equ	0xFF0
 24165                           indf0	equ	0xFEF
 24166                           postinc0	equ	0xFEE
 24167                           fsr0h	equ	0xFEA
 24168                           fsr0l	equ	0xFE9
 24169                           wreg	equ	0xFE8
 24170                           postdec1	equ	0xFE5
 24171                           fsr1h	equ	0xFE2
 24172                           fsr1l	equ	0xFE1
 24173                           indf2	equ	0xFDF
 24174                           postinc2	equ	0xFDE
 24175                           postdec2	equ	0xFDD
 24176                           fsr2h	equ	0xFDA
 24177                           fsr2l	equ	0xFD9
 24178                           status	equ	0xFD8
 24179                           
 24180 ;; *************** function i2_I2C_Master_Write *****************
 24181 ;; Defined at:
 24182 ;;		line 49 in file "I2C.c"
 24183 ;; Parameters:    Size  Location     Type
 24184 ;;  d               2    1[COMRAM] unsigned int 
 24185 ;; Auto vars:     Size  Location     Type
 24186 ;;		None
 24187 ;; Return value:  Size  Location     Type
 24188 ;;                  1    wreg      void 
 24189 ;; Registers used:
 24190 ;;		wreg, status,2, status,0, cstack
 24191 ;; Tracked objects:
 24192 ;;		On entry : 0/0
 24193 ;;		On exit  : 0/0
 24194 ;;		Unchanged: 0/0
 24195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24196 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24200 ;;Total ram usage:        2 bytes
 24201 ;; Hardware stack levels used:    1
 24202 ;; Hardware stack levels required when called:    1
 24203 ;; This function calls:
 24204 ;;		i2_I2C_Master_Wait
 24205 ;; This function is called by:
 24206 ;;		i2_getRTC
 24207 ;; This function uses a non-reentrant model
 24208 ;;
 24209                           
 24210                           	psect	text91
 24211  00562C                     __ptext91:
 24212                           	opt stack 0
 24213  00562C                     i2_I2C_Master_Write:
 24214                           	opt stack 19
 24215                           
 24216                           ;I2C.c: 51: I2C_Master_Wait();
 24217                           
 24218                           ;incstack = 0
 24219  00562C  ECEC  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24220                           
 24221                           ;I2C.c: 52: SSPBUF = d;
 24222  005630  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 24223  005634  0012               	return		;funcret
 24224  005636                     __end_ofi2_I2C_Master_Write:
 24225                           	opt stack 0
 24226                           pclatu	equ	0xFFB
 24227                           pclath	equ	0xFFA
 24228                           tblptru	equ	0xFF8
 24229                           tblptrh	equ	0xFF7
 24230                           tblptrl	equ	0xFF6
 24231                           tablat	equ	0xFF5
 24232                           prodh	equ	0xFF4
 24233                           prodl	equ	0xFF3
 24234                           intcon	equ	0xFF2
 24235                           intcon2	equ	0xFF1
 24236                           intcon3	equ	0xFF0
 24237                           indf0	equ	0xFEF
 24238                           postinc0	equ	0xFEE
 24239                           fsr0h	equ	0xFEA
 24240                           fsr0l	equ	0xFE9
 24241                           wreg	equ	0xFE8
 24242                           postdec1	equ	0xFE5
 24243                           fsr1h	equ	0xFE2
 24244                           fsr1l	equ	0xFE1
 24245                           indf2	equ	0xFDF
 24246                           postinc2	equ	0xFDE
 24247                           postdec2	equ	0xFDD
 24248                           fsr2h	equ	0xFDA
 24249                           fsr2l	equ	0xFD9
 24250                           status	equ	0xFD8
 24251                           
 24252 ;; *************** function i2_I2C_Master_Stop *****************
 24253 ;; Defined at:
 24254 ;;		line 43 in file "I2C.c"
 24255 ;; Parameters:    Size  Location     Type
 24256 ;;		None
 24257 ;; Auto vars:     Size  Location     Type
 24258 ;;		None
 24259 ;; Return value:  Size  Location     Type
 24260 ;;                  1    wreg      void 
 24261 ;; Registers used:
 24262 ;;		wreg, status,2, status,0, cstack
 24263 ;; Tracked objects:
 24264 ;;		On entry : 0/0
 24265 ;;		On exit  : 0/0
 24266 ;;		Unchanged: 0/0
 24267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24272 ;;Total ram usage:        0 bytes
 24273 ;; Hardware stack levels used:    1
 24274 ;; Hardware stack levels required when called:    1
 24275 ;; This function calls:
 24276 ;;		i2_I2C_Master_Wait
 24277 ;; This function is called by:
 24278 ;;		i2_getRTC
 24279 ;; This function uses a non-reentrant model
 24280 ;;
 24281                           
 24282                           	psect	text92
 24283  00564E                     __ptext92:
 24284                           	opt stack 0
 24285  00564E                     i2_I2C_Master_Stop:
 24286                           	opt stack 19
 24287                           
 24288                           ;I2C.c: 45: I2C_Master_Wait();
 24289                           
 24290                           ;incstack = 0
 24291  00564E  ECEC  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24292                           
 24293                           ;I2C.c: 46: PEN = 1;
 24294  005652  84C5               	bsf	4037,2,c	;volatile
 24295  005654  0012               	return		;funcret
 24296  005656                     __end_ofi2_I2C_Master_Stop:
 24297                           	opt stack 0
 24298                           pclatu	equ	0xFFB
 24299                           pclath	equ	0xFFA
 24300                           tblptru	equ	0xFF8
 24301                           tblptrh	equ	0xFF7
 24302                           tblptrl	equ	0xFF6
 24303                           tablat	equ	0xFF5
 24304                           prodh	equ	0xFF4
 24305                           prodl	equ	0xFF3
 24306                           intcon	equ	0xFF2
 24307                           intcon2	equ	0xFF1
 24308                           intcon3	equ	0xFF0
 24309                           indf0	equ	0xFEF
 24310                           postinc0	equ	0xFEE
 24311                           fsr0h	equ	0xFEA
 24312                           fsr0l	equ	0xFE9
 24313                           wreg	equ	0xFE8
 24314                           postdec1	equ	0xFE5
 24315                           fsr1h	equ	0xFE2
 24316                           fsr1l	equ	0xFE1
 24317                           indf2	equ	0xFDF
 24318                           postinc2	equ	0xFDE
 24319                           postdec2	equ	0xFDD
 24320                           fsr2h	equ	0xFDA
 24321                           fsr2l	equ	0xFD9
 24322                           status	equ	0xFD8
 24323                           
 24324 ;; *************** function i2_I2C_Master_Start *****************
 24325 ;; Defined at:
 24326 ;;		line 31 in file "I2C.c"
 24327 ;; Parameters:    Size  Location     Type
 24328 ;;		None
 24329 ;; Auto vars:     Size  Location     Type
 24330 ;;		None
 24331 ;; Return value:  Size  Location     Type
 24332 ;;                  1    wreg      void 
 24333 ;; Registers used:
 24334 ;;		wreg, status,2, status,0, cstack
 24335 ;; Tracked objects:
 24336 ;;		On entry : 0/0
 24337 ;;		On exit  : 0/0
 24338 ;;		Unchanged: 0/0
 24339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24344 ;;Total ram usage:        0 bytes
 24345 ;; Hardware stack levels used:    1
 24346 ;; Hardware stack levels required when called:    1
 24347 ;; This function calls:
 24348 ;;		i2_I2C_Master_Wait
 24349 ;; This function is called by:
 24350 ;;		i2_getRTC
 24351 ;; This function uses a non-reentrant model
 24352 ;;
 24353                           
 24354                           	psect	text93
 24355  005656                     __ptext93:
 24356                           	opt stack 0
 24357  005656                     i2_I2C_Master_Start:
 24358                           	opt stack 19
 24359                           
 24360                           ;I2C.c: 33: I2C_Master_Wait();
 24361                           
 24362                           ;incstack = 0
 24363  005656  ECEC  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24364                           
 24365                           ;I2C.c: 34: SEN = 1;
 24366  00565A  80C5               	bsf	4037,0,c	;volatile
 24367  00565C  0012               	return		;funcret
 24368  00565E                     __end_ofi2_I2C_Master_Start:
 24369                           	opt stack 0
 24370                           pclatu	equ	0xFFB
 24371                           pclath	equ	0xFFA
 24372                           tblptru	equ	0xFF8
 24373                           tblptrh	equ	0xFF7
 24374                           tblptrl	equ	0xFF6
 24375                           tablat	equ	0xFF5
 24376                           prodh	equ	0xFF4
 24377                           prodl	equ	0xFF3
 24378                           intcon	equ	0xFF2
 24379                           intcon2	equ	0xFF1
 24380                           intcon3	equ	0xFF0
 24381                           indf0	equ	0xFEF
 24382                           postinc0	equ	0xFEE
 24383                           fsr0h	equ	0xFEA
 24384                           fsr0l	equ	0xFE9
 24385                           wreg	equ	0xFE8
 24386                           postdec1	equ	0xFE5
 24387                           fsr1h	equ	0xFE2
 24388                           fsr1l	equ	0xFE1
 24389                           indf2	equ	0xFDF
 24390                           postinc2	equ	0xFDE
 24391                           postdec2	equ	0xFDD
 24392                           fsr2h	equ	0xFDA
 24393                           fsr2l	equ	0xFD9
 24394                           status	equ	0xFD8
 24395                           
 24396 ;; *************** function i2_I2C_Master_Read *****************
 24397 ;; Defined at:
 24398 ;;		line 55 in file "I2C.c"
 24399 ;; Parameters:    Size  Location     Type
 24400 ;;  a               1    wreg     unsigned char 
 24401 ;; Auto vars:     Size  Location     Type
 24402 ;;  a               1    1[COMRAM] unsigned char 
 24403 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 24404 ;; Return value:  Size  Location     Type
 24405 ;;                  1    wreg      unsigned char 
 24406 ;; Registers used:
 24407 ;;		wreg, status,2, status,0, cstack
 24408 ;; Tracked objects:
 24409 ;;		On entry : 0/0
 24410 ;;		On exit  : 0/0
 24411 ;;		Unchanged: 0/0
 24412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24416 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24417 ;;Total ram usage:        2 bytes
 24418 ;; Hardware stack levels used:    1
 24419 ;; Hardware stack levels required when called:    1
 24420 ;; This function calls:
 24421 ;;		i2_I2C_Master_Wait
 24422 ;; This function is called by:
 24423 ;;		i2_getRTC
 24424 ;; This function uses a non-reentrant model
 24425 ;;
 24426                           
 24427                           	psect	text94
 24428  0054B2                     __ptext94:
 24429                           	opt stack 0
 24430  0054B2                     i2_I2C_Master_Read:
 24431                           	opt stack 19
 24432                           
 24433                           ;incstack = 0
 24434                           ;i2I2C_Master_Read@a stored from wreg
 24435  0054B2  6E02               	movwf	i2I2C_Master_Read@a,c
 24436                           
 24437                           ;I2C.c: 57: unsigned char temp;
 24438                           ;I2C.c: 58: I2C_Master_Wait();
 24439  0054B4  ECEC  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24440                           
 24441                           ;I2C.c: 59: RCEN = 1;
 24442  0054B8  86C5               	bsf	4037,3,c	;volatile
 24443                           
 24444                           ;I2C.c: 60: I2C_Master_Wait();
 24445  0054BA  ECEC  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24446                           
 24447                           ;I2C.c: 61: temp = SSPBUF;
 24448  0054BE  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 24449                           
 24450                           ;I2C.c: 62: I2C_Master_Wait();
 24451  0054C2  ECEC  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24452                           
 24453                           ;I2C.c: 63: ACKDT = (a)?0:1;
 24454  0054C6  5002               	movf	i2I2C_Master_Read@a,w,c
 24455  0054C8  A4D8               	btfss	status,2,c
 24456  0054CA  D002               	goto	i2u471_40
 24457  0054CC  8AC5               	bsf	4037,5,c	;volatile
 24458  0054CE  D001               	goto	i2l6364
 24459  0054D0                     i2u471_40:
 24460  0054D0  9AC5               	bcf	4037,5,c	;volatile
 24461  0054D2                     i2l6364:
 24462                           
 24463                           ;I2C.c: 64: ACKEN = 1;
 24464  0054D2  88C5               	bsf	4037,4,c	;volatile
 24465                           
 24466                           ;I2C.c: 65: return temp;
 24467  0054D4  5003               	movf	i2I2C_Master_Read@temp,w,c
 24468  0054D6  0012               	return	
 24469  0054D8                     __end_ofi2_I2C_Master_Read:
 24470                           	opt stack 0
 24471                           pclatu	equ	0xFFB
 24472                           pclath	equ	0xFFA
 24473                           tblptru	equ	0xFF8
 24474                           tblptrh	equ	0xFF7
 24475                           tblptrl	equ	0xFF6
 24476                           tablat	equ	0xFF5
 24477                           prodh	equ	0xFF4
 24478                           prodl	equ	0xFF3
 24479                           intcon	equ	0xFF2
 24480                           intcon2	equ	0xFF1
 24481                           intcon3	equ	0xFF0
 24482                           indf0	equ	0xFEF
 24483                           postinc0	equ	0xFEE
 24484                           fsr0h	equ	0xFEA
 24485                           fsr0l	equ	0xFE9
 24486                           wreg	equ	0xFE8
 24487                           postdec1	equ	0xFE5
 24488                           fsr1h	equ	0xFE2
 24489                           fsr1l	equ	0xFE1
 24490                           indf2	equ	0xFDF
 24491                           postinc2	equ	0xFDE
 24492                           postdec2	equ	0xFDD
 24493                           fsr2h	equ	0xFDA
 24494                           fsr2l	equ	0xFD9
 24495                           status	equ	0xFD8
 24496                           
 24497 ;; *************** function i2_I2C_Master_Wait *****************
 24498 ;; Defined at:
 24499 ;;		line 26 in file "I2C.c"
 24500 ;; Parameters:    Size  Location     Type
 24501 ;;		None
 24502 ;; Auto vars:     Size  Location     Type
 24503 ;;		None
 24504 ;; Return value:  Size  Location     Type
 24505 ;;                  1    wreg      void 
 24506 ;; Registers used:
 24507 ;;		wreg, status,2, status,0
 24508 ;; Tracked objects:
 24509 ;;		On entry : 0/0
 24510 ;;		On exit  : 0/0
 24511 ;;		Unchanged: 0/0
 24512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24517 ;;Total ram usage:        1 bytes
 24518 ;; Hardware stack levels used:    1
 24519 ;; This function calls:
 24520 ;;		Nothing
 24521 ;; This function is called by:
 24522 ;;		i2_I2C_Master_Start
 24523 ;;		i2_I2C_Master_Stop
 24524 ;;		i2_I2C_Master_Write
 24525 ;;		i2_I2C_Master_Read
 24526 ;; This function uses a non-reentrant model
 24527 ;;
 24528                           
 24529                           	psect	text95
 24530  0055D8                     __ptext95:
 24531                           	opt stack 0
 24532  0055D8                     i2_I2C_Master_Wait:
 24533                           	opt stack 19
 24534  0055D8                     i2l66:
 24535  0055D8  B4C7               	btfsc	4039,2,c	;volatile
 24536  0055DA  D7FE               	goto	i2l66
 24537  0055DC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 24538  0055E0  0E1F               	movlw	31
 24539  0055E2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 24540  0055E4  B4D8               	btfsc	status,2,c
 24541  0055E6  0012               	return	
 24542  0055E8  D7F7               	goto	i2l66
 24543  0055EA                     __end_ofi2_I2C_Master_Wait:
 24544                           	opt stack 0
 24545                           pclatu	equ	0xFFB
 24546                           pclath	equ	0xFFA
 24547                           tblptru	equ	0xFF8
 24548                           tblptrh	equ	0xFF7
 24549                           tblptrl	equ	0xFF6
 24550                           tablat	equ	0xFF5
 24551                           prodh	equ	0xFF4
 24552                           prodl	equ	0xFF3
 24553                           intcon	equ	0xFF2
 24554                           intcon2	equ	0xFF1
 24555                           intcon3	equ	0xFF0
 24556                           indf0	equ	0xFEF
 24557                           postinc0	equ	0xFEE
 24558                           fsr0h	equ	0xFEA
 24559                           fsr0l	equ	0xFE9
 24560                           wreg	equ	0xFE8
 24561                           postdec1	equ	0xFE5
 24562                           fsr1h	equ	0xFE2
 24563                           fsr1l	equ	0xFE1
 24564                           indf2	equ	0xFDF
 24565                           postinc2	equ	0xFDE
 24566                           postdec2	equ	0xFDD
 24567                           fsr2h	equ	0xFDA
 24568                           fsr2l	equ	0xFD9
 24569                           status	equ	0xFD8
 24570                           
 24571 ;; *************** function i2_delay_ms *****************
 24572 ;; Defined at:
 24573 ;;		line 632 in file "sort.c"
 24574 ;; Parameters:    Size  Location     Type
 24575 ;;  milliseconds    1    wreg     unsigned char 
 24576 ;; Auto vars:     Size  Location     Type
 24577 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24578 ;; Return value:  Size  Location     Type
 24579 ;;                  1    wreg      void 
 24580 ;; Registers used:
 24581 ;;		wreg, status,2, status,0, cstack
 24582 ;; Tracked objects:
 24583 ;;		On entry : 0/0
 24584 ;;		On exit  : 0/0
 24585 ;;		Unchanged: 0/0
 24586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24590 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24591 ;;Total ram usage:        2 bytes
 24592 ;; Hardware stack levels used:    1
 24593 ;; This function calls:
 24594 ;;		Nothing
 24595 ;; This function is called by:
 24596 ;;		_printSortTimer
 24597 ;; This function uses a non-reentrant model
 24598 ;;
 24599                           
 24600                           	psect	text96
 24601  00557A                     __ptext96:
 24602                           	opt stack 0
 24603  00557A                     i2_delay_ms:
 24604                           	opt stack 22
 24605                           
 24606                           ;incstack = 0
 24607                           ;i2delay_ms@milliseconds stored from wreg
 24608  00557A  6E02               	movwf	i2delay_ms@milliseconds,c
 24609                           
 24610                           ;sort.c: 633: while(milliseconds > 0)
 24611  00557C  D008               	goto	i2l8798
 24612  00557E                     i2l8794:
 24613                           
 24614                           ;sort.c: 634: {
 24615                           ;sort.c: 635: milliseconds--;
 24616  00557E  0602               	decf	i2delay_ms@milliseconds,f,c
 24617                           
 24618                           ;sort.c: 636: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24619  005580  0E0B               	movlw	11
 24620  005582  6E01               	movwf	??i2_delay_ms& (0+255),c
 24621  005584  0E48               	movlw	72
 24622  005586                     i2u1074_47:
 24623  005586  2EE8               	decfsz	wreg,f,c
 24624  005588  D7FE               	bra	i2u1074_47
 24625  00558A  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24626  00558C  D7FC               	bra	i2u1074_47
 24627  00558E                     i2l8798:
 24628  00558E  5002               	movf	i2delay_ms@milliseconds,w,c
 24629  005590  B4D8               	btfsc	status,2,c
 24630  005592  0012               	return	
 24631  005594  D7F4               	goto	i2l8794
 24632  005596                     __end_ofi2_delay_ms:
 24633                           	opt stack 0
 24634                           pclatu	equ	0xFFB
 24635                           pclath	equ	0xFFA
 24636                           tblptru	equ	0xFF8
 24637                           tblptrh	equ	0xFF7
 24638                           tblptrl	equ	0xFF6
 24639                           tablat	equ	0xFF5
 24640                           prodh	equ	0xFF4
 24641                           prodl	equ	0xFF3
 24642                           intcon	equ	0xFF2
 24643                           intcon2	equ	0xFF1
 24644                           intcon3	equ	0xFF0
 24645                           indf0	equ	0xFEF
 24646                           postinc0	equ	0xFEE
 24647                           fsr0h	equ	0xFEA
 24648                           fsr0l	equ	0xFE9
 24649                           wreg	equ	0xFE8
 24650                           postdec1	equ	0xFE5
 24651                           fsr1h	equ	0xFE2
 24652                           fsr1l	equ	0xFE1
 24653                           indf2	equ	0xFDF
 24654                           postinc2	equ	0xFDE
 24655                           postdec2	equ	0xFDD
 24656                           fsr2h	equ	0xFDA
 24657                           fsr2l	equ	0xFD9
 24658                           status	equ	0xFD8
 24659                           pclatu	equ	0xFFB
 24660                           pclath	equ	0xFFA
 24661                           tblptru	equ	0xFF8
 24662                           tblptrh	equ	0xFF7
 24663                           tblptrl	equ	0xFF6
 24664                           tablat	equ	0xFF5
 24665                           prodh	equ	0xFF4
 24666                           prodl	equ	0xFF3
 24667                           intcon	equ	0xFF2
 24668                           intcon2	equ	0xFF1
 24669                           intcon3	equ	0xFF0
 24670                           indf0	equ	0xFEF
 24671                           postinc0	equ	0xFEE
 24672                           fsr0h	equ	0xFEA
 24673                           fsr0l	equ	0xFE9
 24674                           wreg	equ	0xFE8
 24675                           postdec1	equ	0xFE5
 24676                           fsr1h	equ	0xFE2
 24677                           fsr1l	equ	0xFE1
 24678                           indf2	equ	0xFDF
 24679                           postinc2	equ	0xFDE
 24680                           postdec2	equ	0xFDD
 24681                           fsr2h	equ	0xFDA
 24682                           fsr2l	equ	0xFD9
 24683                           status	equ	0xFD8
 24684                           
 24685                           	psect	rparam
 24686  0000                     pclatu	equ	0xFFB
 24687                           pclath	equ	0xFFA
 24688                           tblptru	equ	0xFF8
 24689                           tblptrh	equ	0xFF7
 24690                           tblptrl	equ	0xFF6
 24691                           tablat	equ	0xFF5
 24692                           prodh	equ	0xFF4
 24693                           prodl	equ	0xFF3
 24694                           intcon	equ	0xFF2
 24695                           intcon2	equ	0xFF1
 24696                           intcon3	equ	0xFF0
 24697                           indf0	equ	0xFEF
 24698                           postinc0	equ	0xFEE
 24699                           fsr0h	equ	0xFEA
 24700                           fsr0l	equ	0xFE9
 24701                           wreg	equ	0xFE8
 24702                           postdec1	equ	0xFE5
 24703                           fsr1h	equ	0xFE2
 24704                           fsr1l	equ	0xFE1
 24705                           indf2	equ	0xFDF
 24706                           postinc2	equ	0xFDE
 24707                           postdec2	equ	0xFDD
 24708                           fsr2h	equ	0xFDA
 24709                           fsr2l	equ	0xFD9
 24710                           status	equ	0xFD8
 24711                           
 24712                           	psect	temp
 24713  00007E                     btemp:
 24714                           	opt stack 0
 24715  00007E                     	ds	1
 24716  0000                     int$flags	set	btemp
 24717                           pclatu	equ	0xFFB
 24718                           pclath	equ	0xFFA
 24719                           tblptru	equ	0xFF8
 24720                           tblptrh	equ	0xFF7
 24721                           tblptrl	equ	0xFF6
 24722                           tablat	equ	0xFF5
 24723                           prodh	equ	0xFF4
 24724                           prodl	equ	0xFF3
 24725                           intcon	equ	0xFF2
 24726                           intcon2	equ	0xFF1
 24727                           intcon3	equ	0xFF0
 24728                           indf0	equ	0xFEF
 24729                           postinc0	equ	0xFEE
 24730                           fsr0h	equ	0xFEA
 24731                           fsr0l	equ	0xFE9
 24732                           wreg	equ	0xFE8
 24733                           postdec1	equ	0xFE5
 24734                           fsr1h	equ	0xFE2
 24735                           fsr1l	equ	0xFE1
 24736                           indf2	equ	0xFDF
 24737                           postinc2	equ	0xFDE
 24738                           postdec2	equ	0xFDD
 24739                           fsr2h	equ	0xFDA
 24740                           fsr2l	equ	0xFD9
 24741                           status	equ	0xFD8


Data Sizes:
    Strings     1344
    Constant    27
    Data        8
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_127(CODE[18]), STR_126(CODE[18]), STR_125(CODE[17]), STR_124(CODE[17]), 
		 -> STR_123(CODE[18]), STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[18]), 
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[17]), STR_116(CODE[17]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[17]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  220835
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22911
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17591
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11414
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10667
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23224
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22310
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46200
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13339
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  115973
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9083
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9040
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8971
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15351
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9244
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19245
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9155
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8836
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Apr 08 16:28:15 2017

                                    _i 013D                     i2_I2C_Master_Start 5656  
                   i2_I2C_Master_Write 562C                                     l66 55C4  
                                   _ID 3026                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 503E                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 00E2  
                                  l183 00E6                                    l188 0102  
                                  l801 16AE                                    l618 25EC  
                                  l810 15D4                                    l811 15FC  
                                  l812 1624                                    l813 164E  
                                  l831 319A                                    l807 1586  
                                  l832 31B4                                    l833 31F2  
                                  l817 16FA                                    l809 15AC  
                                  l834 31D8                                    l499 439E  
                                  l838 328A                                    l774 125E  
                                  l792 141E                                    l784 1322  
                                  l890 489E                                    l795 146C  
                                  l787 1370                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3A74                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 3F62  
                                  _log 00F4                                    _sel 00FD  
                                  _var 0145                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3BF8                    _log_count_can_w_lab 0141  
                           i2_delay_ms 557A        __end_of_change_state_to_menu_11 526E  
      __end_of_change_state_to_menu_12 50AE        __end_of_change_state_to_menu_22 5076  
      __end_of_change_state_to_menu_23 523E           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 535E  
      __end_of_change_state_to_logs_12 532E        __end_of_change_state_to_logs_22 52FE  
      __end_of_change_state_to_logs_23 53BA        __end_of_change_state_to_logs_33 52CE  
      __end_of_change_state_to_logs_34 529E                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1105 3D26  
                                 l1202 3EA2                                   l1205 3EC2  
                                 l1225 4288                                   l1314 111C  
                                 l1234 2296                                   l1083 4082  
                                 l1260 0940                                   l1228 428C  
                                 l1333 4DE6                                   l1309 1046  
                                 l1237 229A                                   l1414 3B96  
                                 l1270 0A50                                   l1430 4014  
                                 l1415 3BB0                                   l1327 4DD6  
                                 l1271 0A9E                                   l1263 0944  
                                 l1272 0B04                                   l1096 55A6  
                                 l1409 3B4A                                   l1361 2D38  
                                 l1273 0B52                                   l1363 2D66  
                                 l1267 09EA                                   l1348 2D6C  
                                 l1452 4D8A                                   l1357 2CE0  
                                 l1429 4052                                   l1446 4D7A  
                                 l1438 404C                                   l1392 4934  
                                 l1385 4924                                   l1297 0EAC  
                                 ?_arm 0001                                   l1486 194E  
                                 l1933 4A4A                                   l1943 4CCC  
                                 l1880 45EA                                   l7030 4620  
                                 l6312 49FA                                   l6314 4A06  
                                 l7130 4A78                                   l7026 460A  
                                 l6324 4A3C                                   l6316 4A0C  
                                 l6340 4CBE                                   l6332 4C88  
                                 l6500 18F6                                   l7036 4696  
                                 l6334 4C94                                   l6502 190E  
                                 l6254 53FA                                   l8110 0D7C  
                                 l8102 0D5A                                   l7142 4AA2  
                                 l7126 4A62                                   l6336 4C9A  
                                 l6256 540C                                   l8200 0F3E  
                                 l8120 0DA4                                   l8112 0D82  
                                 l8032 0BF0                                   l8024 0BCE  
                                 l6600 484A                                   l7072 40EE  
                                 l7080 4110                                   l6522 19A0  
                                 l6506 1914                                   l8106 0D64  
                                 l8050 0C52                                   l8042 0C18  
                                 l8034 0BF6                                   l7234 478A  
                                 l7146 4ABA                                   l6524 19A6  
                                 l6452 172A                                   l8212 0F82  
                                 l8132 0DE8                                   l8116 0D8C  
                                 l8060 0C7A                                   l8028 0BD8  
                                 l9100 07D4                                   l9020 065C  
                                 l9012 063A                                   l7244 47CC  
                                 l7084 4126                                   l7076 40F8  
                                 l6542 1A04                                   l6518 1986  
                                 l6454 173C                                   l8302 1136  
                                 l8222 0FAA                                   l8142 0E10  
                                 l8054 0C5C                                   l8038 0C00  
                                 l6278 5384                                   l9110 07F0  
                                 l9030 0678                                   l7238 47A0  
                                 l7094 5442                                   _ADIE 007CEE  
                                 l6296 5432                                   l6560 1A7C  
                                 l6536 19E2                                   l6480 1828  
                                 l6472 17F6                                   l6464 177A  
                                 l6448 1716                                   l6624 48BC  
                                 l8312 115E                                   l8304 113C  
                                 l8216 0F9A                                   l8208 0F78  
                                 l8136 0E00                                   l8128 0DDE  
                                 l8080 0CE0                                   l8064 0C84  
                                 l9016 0644                                   l6640 4584  
                                 l7088 4130                                   l7504 1350  
                                 l6562 1A88                                   l6570 1AB6  
                                 l6554 1A60                                   l6546 1A3C  
                                 l6490 18A0                                   l6482 1834  
                                 l6458 1746                                   l6618 4882  
                                 l8322 1186                                   l8314 1164  
                                 l8242 101E                                   l8234 0FFC  
                                 l8226 0FC2                                   l8218 0FA0  
                                 l8162 0E84                                   l8154 0E62  
                                 l8146 0E28                                   l8138 0E06  
                                 l8090 0D08                                   l8058 0C74  
                                 l9114 0808                                   l9106 07E6  
                                 l9034 0690                                   l9026 066E  
                                 l7098 5458                                   l7506 135A  
                                 l7450 121C                                   l6572 1ABC  
                                 l6548 1A46                                   l6492 18AC  
                                 l6484 183A                                   l8500 2CB6  
                                 l8308 1146                                   l8244 1024  
                                 l8164 0E8A                                   l8084 0CF8  
                                 l8076 0CD6                                   l8068 0C9C  
                                 l9140 0888                                   l9132 0866  
                                 l9060 0718                                   l9052 06F6  
                                 l6636 456E                                   l7612 1664  
                                 l7620 16B6                                   l7532 1408  
                                 l7516 139E                                   l7460 1266  
                                 l6566 1AA2                                   l6494 18B2  
                                 l8318 116E                                   l8238 1006  
                                 l8190 0F16                                   l8182 0EF4  
                                 l8158 0E6C                                   l8094 0D20  
                                 l8086 0CFE                                   l6590 4814  
                                 l6582 50B8                                   l9150 08A4  
                                 l9070 0734                                   l6638 457E  
                                 l7614 169A                                   l7542 144C  
                                 l6576 1B14                                   l6496 18CA  
                                 l8504 2CCA                                   l8272 10A0  
                                 l8248 102E                                   l8192 0F1C  
                                 l8168 0E94                                   l8352 3FD6  
                                 l6584 50C4                                   l9136 0870  
                                 l9056 0700                                   l6648 45D8  
                                 l7632 16EE                                   l7544 1456  
                                 l6578 1B20                                   l8514 2D0E  
                                 l8418 495C                                   l8282 10C8  
                                 l8186 0EFE                                   l6594 482A  
                                 l6850 25F6                                   l9154 08BC  
                                 l9146 089A                                   l9074 074C  
                                 l9066 072A                                   l9410 3C58  
                                 l7706 31B8                                   l7554 149A  
                                 l7634 16FC                                   l8292 1106  
                                 l8276 10B8                                   l8268 1096  
                                 l8196 0F26                                   l8356 3FFC  
                                 l8364 401A                                   l6860 268C  
                                 l6852 2614                                   l6844 256A  
                                 l9092 07B2                                   l7732 3248  
                                 l7740 328C                                   l7708 31C2  
                                 l7476 12A2                                   l8518 2D22  
                                 l8454 2B20                                   l8286 10E0  
                                 l8278 10BE                                   l8366 4034  
                                 l8358 4006                                   l8710 44DE  
                                 l8702 44B4                                   l6870 2722  
                                 l6862 26AA                                   l6854 2632  
                                 l9158 08C8                                   l7750 4194  
                                 l7670 3116                                   l7582 1562  
                                 l7566 14FE                                   l7558 14C0  
                                 l7494 130C                                   l8640 3AE8  
                                 l8464 2BA2                                   l8368 403E  
                                 l8720 4514                                   l8712 44E4  
                                 l6872 2740                                   l6864 26C8  
                                 l6856 2650                                   l9096 07BC  
                                 l9408 3C44                                   l7752 41AE  
                                 l8466 2BA8                                   l7826 22EA  
                                 l6866 26E6                                   l6858 266E  
                                 l9434 3CE0                                   l7746 4160  
                                 l7682 314E                                   l7674 3126  
                                 l8660 3B4C                                   l8644 3B18  
                                 l8476 2C2A                                   l7940 09B4  
                                 l7844 23A2                                   l8708 44D2  
                                 l8724 4522                                   l8740 46C2  
                                 l6868 2704                                   l6876 275E  
                                 l7748 417A                                   l7756 41C8  
                                 l9700 439A                                   l8670 3B80  
                                 l8662 3B5C                                   l8494 2C8C  
                                 l7862 2434                                   l9470 3EDA  
                                 l8750 46F2                                   l6878 27BC  
                                 l8902 0254                                   l7758 41F6  
                                 l7686 315E                                   l8680 3BB2  
                                 l8496 2CA2                                   l8488 2C6C  
                                 l7944 09BE                                   l7856 23F2  
                                 l9480 3EF8                                   l9472 3EE0  
                                 l9464 3EC8                                   l9448 3E5E  
                                 l8728 4536                                   l8752 46F8  
                                 l8760 472A                                   l8744 46D2  
                                 l8920 02A0                                   l8912 027E  
                                 l8832 00FE                                   l7696 3184  
                                 l7688 3160                                   l9704 43A0  
                                 l8682 3BC2                                   l7938 09AE  
                                 l7882 24B0                                   l7874 2480  
                                 l9482 3EFE                                   l9474 3EE6  
                                 l9466 3ECE                                   l8906 026C  
                                 l8850 015C                                   l8842 013A  
                                 l8668 3B76                                   l7948 09D6  
                                 l9476 3EEC                                   l9468 3ED4  
                                 l8764 473E                                   l8756 471C  
                                 l8748 46E6                                   l8940 032E  
                                 l8916 0288                                   l8686 3BF2  
                                 l7894 24F8                                   l7886 24E6  
                                 l9478 3EF2                                   l9486 3F04  
                                 l8950 03C4                                   l8942 034C  
                                 l8870 01C8                                   l8854 016E  
                                 l8846 0144                                   l8838 0128  
                                 l9488 3F56                                   l8696 449E  
                                 l8960 045A                                   l8952 03E2  
                                 l8944 036A                                   l8936 02F2  
                                 l9680 434A                                   l7898 252E  
                                 l8970 051E                                   l8954 0400  
                                 l8946 0388                                   l8938 0310  
                                 l8874 01D2                                   l9690 437C  
                                 l9682 4360                                   l8956 041E  
                                 l8948 03A6                                   l8964 0478  
                                 l8868 01C2                                   l8884 01F8  
                                 l8974 0528                                   l8958 043C  
                                 l8966 04DC                                   l8878 01EA  
                                 l9686 4370                                   STR_1 FB69  
                                 l8992 0574                                   l8984 0552  
                                 l9688 4376                                   STR_2 FF31  
                                 STR_3 FB57                                   l8978 0540  
                                 l8898 024A                                   l9698 4394  
                                 STR_4 FE54                                   STR_5 FB57  
                                 l8988 055C                                   STR_6 FDF0  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u6120 1584  
                                 u4610 5382                                   _PEIE 007F96  
                                 u7110 402A                                   u6070 14DE  
                                 u7120 402C                                   u6400 232C  
                                 u5520 25EC                                   u6320 3254  
                                 u5505 4D06                                   u6410 232E  
                                 u4810 4F26                                   u7060 3FF2  
                                 u6340 328A                                   u6180 3080  
                                 u4820 4F28                                   _RCEN 007E2B  
                                 u7070 3FF4                                   u4830 4F72  
                                 u6190 30D6                                   u4831 4F6E  
                                 u4840 4F74                                   u6440 24D4  
                                 u6088 14E2                                   u4930 18EC  
                                 u7330 2C54                                   u7250 2B62  
                                 u6338 3258                                   u7260 2B64  
                                 u6540 09EA                                   u6188 3084  
                                 u6470 251C                                   u6198 30DA  
                                 u7600 3B6E                                   u7280 2BEA  
                                 u6560 0A9E                                   u6448 24D8  
                                 u4937 18E2                                   i2l66 55D8  
                                 u4890 1874                                   u7290 2BEC  
                                 u7380 2C9A                                   u7348 2C58  
                                 u6580 0B52                                   u7541 3B40  
                                 u9117 11AC                                   u7550 3B42  
                                 u7390 2CB2                                   u6478 2520  
                                 u5870 1228                                   u7391 2CAE  
                                 u9207 143A                                   u9127 12D0  
                                 u7480 3AAA                                   u4897 186A  
                                 u9217 1476                                   u9137 132C  
                                 u7650 3BE0                                   u7490 3B06  
                                 u5890 125E                                   u9307 15DE  
                                 u9227 1488                                   u9147 133E  
                                 u9317 15F2                                   u9237 14A8  
                                 u9157 137A                                   u7591 3B6C  
                                 u9407 3040                                   u9327 1606  
                                 u9247 1518                                   u9167 138C  
                                 u7488 3AAE                                   u5888 122C  
                                 u9417 3066                                   u9337 161A  
                                 u9257 1550                                   u9177 13AC  
                                 u7658 3BE4                                   u7498 3B0A  
                                 u8730 3D26                                   u9507 40A4  
                                 u9427 309E                                   u9347 162E  
                                 u9267 1590                                   u9187 13D6  
                                 u9517 4100                                   u9437 30BC  
                                 u9357 1642                                   u9277 15A2  
                                 u9197 1428                                   u9607 0206  
                                 u9527 4138                                   u9447 319E  
                                 u9367 1658                                   u9287 15B6  
                                 u9617 025C                                   u9537 4F84  
                                 u9457 31A8                                   u9377 16D0  
                                 u9297 15CA                                   u9707 0708  
                                 u9627 0290                                   u9547 4FB8  
                                 u9467 31DC                                   u9387 5138  
                                 u9717 073C                                   u9637 02BA  
                                 u9557 002A                                   u9477 31E6  
                                 u9397 4A80                                   u9807 228A  
                                 u9727 0766                                   u9647 0530  
                                 u9567 0114                                   u9487 320C  
                                 u9817 22AC                                   u9737 07C4  
                                 u9657 0564                                   u9577 014C  
                                 u9497 544E                                   u9907 248E  
                                 u9827 22DA                                   u9747 07F8  
                                 u9667 058E                                   u9587 0184  
                                 u9917 3F70                                   u9837 2342  
                                 u9757 0822                                   u9677 064C  
                                 u9597 01DA                                   u9927 4238  
                                 u9847 2396                                   u9767 0878  
                                 u9687 0680                                   u9937 427C  
                                 u9857 23B6                                   u9777 08AC  
                                 u9697 06AA                                   u9947 429E  
                                 u9867 23E4                                   u9787 3E6C  
                                 u9957 08F0                                   u9877 2428  
                                 u9797 2246                                   u9967 0934  
                                 u9887 2446                                   u9977 0956  
                                 u9897 2474                                   u9987 09C6  
                                 _RSEN 007E29                                   u9997 09FA  
                          _stopSignals 555E                                   _Test 3E5C  
                                 _back 005B                                   _main 4300  
                                 _down 005D                                   _keys FAA3  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 54FC                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013F                        __end_ofi2_putch 5616  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 3298                            i2_lcdNibble 4DEE  
                      __end_of_Loading 1708                   __end_of_actuatorTest 118E  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 4148  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4540  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FABE  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FE01                                  STR_15 FFD2  
                                STR_23 FF23                                  STR_31 FDDF  
                                STR_16 FFE2                                  STR_24 FD46  
                                STR_32 FD24                                  STR_40 FCE0  
                                STR_17 FFF2                                  STR_25 FE23  
                                STR_33 FD35                                  STR_41 FCCF  
                                STR_18 FFF6                                  STR_34 FDCE  
                                STR_50 FDAC                                  STR_42 FD8A  
                                STR_26 FD57                                  STR_43 FD8A  
                                STR_35 FDCE                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE12  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD68                                  STR_36 FD13  
                                STR_44 FCF1                        __end_of___awmod 4748  
                                STR_45 FCE0                                  STR_37 FD24  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE20                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEDC  
                                STR_38 FDBD                                  STR_46 FD9B  
                                STR_47 FD9B                                  STR_55 FFFA  
                                STR_63 FABE                                  STR_71 FF15  
                                STR_39 FD79                                  STR_56 FFDE  
                                STR_64 FF7B                                  STR_80 FE64  
                                STR_48 FD02                                  STR_72 FC58  
                                STR_49 FCF1                                  STR_57 FFD6  
                                STR_81 FE20                                  STR_65 FF4C  
                                STR_73 FEF9                                  STR_58 FFD2  
                                STR_74 FF59                                  STR_90 FECD  
                                STR_82 FE91                                  STR_66 FAD6  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FEEB                                  STR_75 FEBE  
                                STR_83 FE34                                  STR_84 FF86  
                                STR_76 FF07                                  STR_68 FC8B  
                                STR_92 FC69                                  STR_85 FF86  
                                STR_77 FFAD                                  STR_93 FF65  
                                STR_69 FC9C                                  STR_78 FF15  
                                STR_86 FFA4                                  STR_94 FC7A  
                                STR_87 FFA4                                  STR_95 FF70  
                                STR_79 FF3F                                  STR_88 FF90  
                                STR_96 FEAF                                  STR_89 FF15  
                                STR_97 FBD0                                  STR_98 FBBF  
                                STR_99 FB9D           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 45FC  
         i2updateServoPosition@time_us 0001                                  u10007 0A60  
                                u10017 0A7E                                  u10107 0CE8  
                                u10027 0AAE                                  u10117 0D10  
                                u10037 0B14                                  u10207 0F8A  
                                u10127 0D6C                                  u10047 0B32  
                                u10217 0FB2                                  u10137 0D94  
                                u10057 0B62                                  u10307 1176  
                                u10227 100E                                  u10147 0DF0  
                                u10067 0BE0                                  u10317 48EE  
                                u10237 1036                                  u10157 0E18  
                                u10077 0C08                                  u10407 2CFC  
                                u10327 493E                                  u10247 1058  
                                u10167 0E74                                  u10087 0C64  
                                _T0CON 000FD5                                  u10417 2D42  
                                u10337 4952                                  u10257 10A8  
                                u10177 0E9C                                  u10097 0C8C  
                                u10507 1CCC                                  u10427 2D54  
                                u10347 4D44                                  u10267 10D0  
                                u10187 0F06                        ___awdiv@divisor 0088  
                                u10517 1CFE                                  u10437 5402  
                                u10357 4DA0                                  u10277 1120  
                                u10197 0F2E                                  u10607 49C2  
                                u10527 1D4A                                  u10447 1B4E  
                                u10367 2AFE                                  u10287 112A  
                                _T1CON 000FCD                                  u10617 3A82  
                                u10537 1D96                                  u10457 1B9A  
                                u10377 2B96                                  u10297 114E  
                                u10627 3B9A                                  u10547 1DCA  
                                u10467 1BE6                                  u10387 2C1E  
                                u10637 3BA4                                  u10557 1DFC  
                                u10477 1C1A                                  u10397 2CEA  
                                u10647 4BC8                                  u10567 1E48  
                                u10487 1C4C                                  _T2CON 000FCA  
                                u10657 4BD2                                  u10577 1E7C  
                                u10497 1C98                                  u10667 4BFE  
                                u10587 1EAE                                  u10677 4C08  
                                u10597 49A6                                  _T3CON 000FB1  
                      __end_of___lwdiv 4A54                        __end_of___lwmod 4CD6  
                                i2l263 2ABC                                  i2l618 3326  
                                i2l917 503A                                  i2l890 4B6E  
                      ___awdiv@counter 008A                                  i2l869 2F4C  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1B40                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 560A                        __end_of_handler 36C0  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5412  
                      __end_of_initLCD 4FC2                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                                _getIR 4A54                        __end_of_loadRTC 47D4  
                      __end_of_readMAG 4F7C                        __end_of_dpowers FABE  
                                _first 0139                                  _enter 005F  
                                arm@on 00AC                        __end_of_isdigit 543C  
                                _input 007D                                  _putch 55EA  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 54B2                       __end_ofi2_getRTC 4B38  
                  _log_count_pop_w_tab 0067                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2238                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 517E  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1194 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4E96                           __end_of_Test 3F62  
                   __size_ofi2_lcdInst 000C                           __end_of_main 43C4  
                         __end_of_keys FAB4                           __end_of_sort 551E  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3A74  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01C8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC25                                 STR_101 FC36  
                               STR_110 FCBE                                 STR_102 FB7B  
                               STR_103 FE44                                 STR_111 FAEB  
                               STR_112 FBE1                                 STR_104 FBAE  
                               STR_120 FB45                                 STR_113 FC14  
                               STR_105 FB8C                                 STR_121 FB21  
                               STR_106 FBAE                                 STR_122 FB45  
                               STR_114 FC03                                 _ADRESH 000FC4  
                               STR_115 FC03                                 STR_123 FB45  
                               STR_107 FEA0                                 STR_124 FBF2  
                               STR_108 FE82                                 STR_116 FBF2  
                               _EEADRH 000FAA                                 STR_109 FE73  
                               STR_125 FCAD                                 STR_117 FC47  
                               STR_126 FAEB                                 STR_118 FB0F  
                               _ADRESL 000FC3                                 STR_127 FB33  
                               STR_119 FAFD                                 STR_128 FFB5  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 51DE  
            i2_change_state_to_menu_22 51AE                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1020 3684                                 i2l1009 35BC  
                               i2l1018 3664                                 i2l1096 55BC  
                               i2l1486 20A4                                 i2l1933 4E8C  
                               i2l1943 4FFA                                 i2l7006 3E44  
                               i2l6400 4E62                                 i2l7200 3388  
                               i2l6410 4E82                                 i2l6402 4E66  
                               i2l7210 33F6                                 i2l7202 339E  
                               i2l6420 4FD8                                 i2l7300 3712  
                               i2l7212 340C                                 i2l7204 33B4  
                               i2l7220 3492                                 i2l6422 4FDC  
                               i2l7310 3730                                 i2l7214 3422  
                               i2l7206 33CA                                 i2l7400 3874  
                               i2l7320 374E                                 i2l7312 3736  
                               i2l7208 33E0                                 i2l6426 4FF0  
                               i2l6418 4FD0                                 i2l7314 373C  
                               i2l7306 371C                                 i2l7218 3438  
                               i2l6364 54D2                                 i2l7316 3742  
                               i2l7324 3754                                 i2l7350 37BE  
                               i2l7318 3748                                 i2l7406 387E  
                               i2l6800 2192                                 i2l6720 1FB4  
                               i2l6712 1F8C                                 i2l6704 1F2A  
                               i2l7360 37E4                                 i2l7344 37B0  
                               i2l7336 3798                                 i2l7192 3330  
                               i2l6802 219A                                 i2l6810 21C0  
                               i2l6730 200C                                 i2l6722 1FBE  
                               i2l7370 3806                                 i2l7354 37DA  
                               i2l7194 3346                                 i2l7186 32C4  
                               i2l9210 28A8                                 i2l9202 288A  
                               i2l6660 4AFE                                 i2l6388 5556  
                               i2l6812 21C6                                 i2l6740 2058  
                               i2l6732 2016                                 i2l6724 1FC2  
                               i2l7364 37F8                                 i2l7196 335C  
                               i2l6670 4B28                                 i2l6398 4E5A  
                               i2l6806 21AE                                 i2l6742 206A  
                               i2l6734 201C                                 i2l7366 37FC  
                               i2l6822 5156                                 i2l7198 3372  
                               i2l9310 2A2E                                 i2l9302 2A12  
                               i2l9230 28EE                                 i2l9222 28D2  
                               i2l9214 28B6                                 i2l9206 2898  
                               i2l6664 4B0E                                 i2l6816 2214  
                               i2l6736 202E                                 i2l7392 3850  
                               i2l7384 382C                                 i2l7296 36FE  
                               i2l7288 36E4                                 i2l6824 515E  
                               i2l9320 2A52                                 i2l6762 20EA  
                               i2l6746 206E                                 i2l6818 221C  
                               i2l7378 381E                                 i2l7298 370E  
                               i2l9314 2A44                                 i2l9306 2A20  
                               i2l9250 2944                                 i2l9242 2920  
                               i2l9234 2904                                 i2l9226 28E0  
                               i2l9218 28C4                                 i2l6764 20EE  
                               i2l6692 1EE4                                 i2l7396 3862  
                               i2l7388 383E                                 i2l9172 2830  
                               i2l6782 213A                                 i2l6758 20D2  
                               i2l6694 1EF2                                 i2l9502 2D9A  
                               i2l9270 2992                                 i2l9262 296E  
                               i2l9254 2952                                 i2l9246 292E  
                               i2l9238 2912                                 i2l9190 286E  
                               i2l9182 2852                                 i2l9174 2836  
                               i2l6776 2120                                 i2l6688 1ED4  
                               i2l9520 2EC2                                 i2l9600 39A0  
                               i2l6794 217C                                 i2l6786 215E  
                               i2l6698 1EF8                                 i2l9290 29E0  
                               i2l9282 29C4                                 i2l9274 29A0  
                               i2l9266 2984                                 i2l9258 2960  
                               i2l9186 2860                                 i2l9178 2844  
                               i2l6788 2166                                 i2l9532 2F1A  
                               i2l9540 2F4E                                 i2l9508 2DF4  
                               i2l9612 39EC                                 i2l9294 29EE  
                               i2l9286 29D2                                 i2l9278 29AE  
                               i2l9198 287C                                 i2l9606 39C6  
                               i2l9544 2F82                                 i2l9800 3638  
                               i2l9546 2F88                                 i2l6994 3E00  
                               i2l9298 2A04                                 i2l9626 3A42  
                               i2l9570 38E0                                 i2l9722 354A  
                               i2l8780 4B56                                 i2l9572 38EA  
                               i2l9716 353A                                 i2l9732 3574  
                               i2l9662 501A                                 i2l6998 3E10  
                               i2l9566 38CA                                 i2l9822 3682  
                               i2l9718 353E                                 i2l9726 3552  
                               i2l9656 500E                                 i2l9584 3916  
                               i2l9592 3934                                 i2l9728 356A  
                               i2l8794 557E                                 i2l9498 2D8A  
                               i2l9658 5014                                 i2l8786 4B88  
                               i2l9586 392A                                 i2l9578 3900  
                               i2l9594 397E                                 i2l9746 3590  
                               i2l9596 3988                                 i2l8798 558E  
                               i2l9790 3618                                 i2l9774 35E8  
                               i2l9768 35DA                                 i2l9796 3632  
              _f_most_recent_sort_time 0137                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5464  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 54FC                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 422A  
                               ___wmul 50E4                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 511A  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 47D4                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5540  
                               _initUI 517E                                 _readIR 4EE4  
                               _logRun 3BF8                                 getIR@i 0087  
                               clear_0 4EBC                                 clear_1 4EC8  
                               clear_2 4ED4                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4D92  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1708                              ??_handler 004B  
              __size_of_initGlobalVars 00BE                           ?_retrieveLog 0007  
                               _strcpy 50AE                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 548C  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5464                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 4E96  
                     __end_of_printRTC 2800                           __mediumconst FAA2  
                    __end_ofi2___lwmod 5004                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0065                  __end_of_algorithmTest 4300  
                    __end_ofi2_lcdInst 5622                      __end_ofi2_isdigit 555E  
                           __accesstop 0080                __end_of__initialization 4EDA  
                        ?_inputHandler 002A                  _most_recent_sort_time 0069  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 55AE                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 5636                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 4AC6                            i2printRTC@i 0041  
                        _initSortTimer 45FC            __end_of_updateServoPosition 48E0  
                        __end_of_putch 55FA                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 3298  
                           __end_of_UI 08D6                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 53E6          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 53BA                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08D6                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 4BA8  
                         _EEPROM_write 4060                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3241 0147               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 4964  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 038A  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2419 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10270 3958                                i2l10280 3A6A  
                              i2l10272 3962                                i2l10274 396C  
                              i2l10292 376C                                i2l10284 2A70  
                              i2l10276 3976                                i2l10294 3788  
                              i2l10286 2A92                                i2l10278 3A5A  
                              i2l10288 2AAE                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00EA  
                              i2_putch 560A                              ?_initTime 0080  
                      _f_loadingNewCan 00F2                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4C10                                _Loading 118E  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 4482  
                              ___awmod 46A6                             _initServos 4964  
                              ___lldiv 4540                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 49DC  
                              ___lwmod 4C74                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 4E96  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 43C4                                _lcdInst 55FA  
                              _handler 0008                                __ptext0 4300  
                              __ptext1 54FC                                __ptext2 118E  
                              __ptext3 45FC                                __ptext4 43C4  
                              __ptext5 511A                                __ptext6 4A54  
                              __ptext7 4EE4                                __ptext8 3026  
                              __ptext9 543C                        __size_of_printf 0438  
                              _readADC 53E6                        __size_of_strcpy 0036  
                              _initLCD 4F7C                                _cur_can 012B  
                              _loadRTC 4748                                _readMAG 4F30  
                              _dpowers FAB4                     actuatorTest@i_1730 00AD  
                   actuatorTest@i_1740 00B0                     actuatorTest@i_1741 00B1  
                   actuatorTest@i_1750 00B7                     actuatorTest@i_1743 00B2  
                   actuatorTest@i_1760 00BD                     actuatorTest@i_1752 00B8  
                   actuatorTest@i_1744 00B3                     actuatorTest@i_1753 00B9  
                   actuatorTest@i_1737 00AE                     actuatorTest@i_1770 00C3  
                   actuatorTest@i_1762 00BE                     actuatorTest@i_1746 00B4  
                   actuatorTest@i_1738 00AF                     actuatorTest@i_1763 00BF  
                   actuatorTest@i_1747 00B5                           __size_of_arm 00FE  
                   actuatorTest@i_1756 00BA                     actuatorTest@i_1757 00BB  
                   actuatorTest@i_1749 00B6                     actuatorTest@i_1766 00C0  
                   actuatorTest@i_1767 00C1                     actuatorTest@i_1759 00BC  
                   actuatorTest@i_1769 00C2                                _isdigit 5412  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 4148  
                 PlatformTest@res_1781 00AF                         __pintcode_body 34CE  
                 end_of_initialization 4EDA                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 34CE                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1070_47 4E06                              i2u1071_47 4E10  
                            i2u1072_47 4E32                              i2u1073_47 4E3C  
                            i2u1074_47 5586                              i2u1068_47 3704  
                            i2u1069_47 2EF4              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5596                 __end_of_initGlobalVars 4482  
                           _sensorTest 2238                             _servoTimes 00DA  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 38AC                           ??_BothServos 00AB  
                __end_of_machineConfig 4C74                   __end_of_PlatformTest 2D7E  
                           _updateMenu 2800                      i2_I2C_Master_Read 54B2  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 55D8  
                    i2_I2C_Master_Stop 564E                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 4D36  
                            i2___lwdiv 4E44                              i2___lwmod 4FC2  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 34CE  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 5616  
                        Loading@i_1170 00BE                          Loading@i_1156 00B6  
                        Loading@i_1165 00B8                          Loading@i_1167 00BA  
                        Loading@i_1168 00BC                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5540  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1ECA  
                  __end_of_EEPROM_read 55AE                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 511A  
                       __end_of_getMAG 514C                         __end_of_getRTC 485A  
                 __size_ofi2_lcdNibble 0056                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 51AE                         __end_of_readIR 4F30  
                       __end_of_logRun 3D3C                       i2___wmul@product 0005  
                       __end_of_printf 1B40                           i2printf@flag 0026  
                       __end_of_strcpy 50E4              __end_ofi2_I2C_Master_Read 54D8  
            __end_ofi2_I2C_Master_Wait 55EA                           i2printf@prec 001D  
                  start_initialization 4E96              __end_ofi2_I2C_Master_Stop 5656  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 4D92  
                          __end_of_arm 4060                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1436 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 48E0                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0147                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1181 0086  
                             ID@i_1182 0088                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2551 0043  
                 __size_of_BlockerTest 0184                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2056 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                            _EEPROM_read 5596  
                     _I2C_Master_Start 5646                     __end_of_PortTestDC 4DEE  
                            _f_lastCan 00F0                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5622  
                    __size_of_initTime 0022                  i2_updateServoPosition 4B38  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAA2                              _lcdNibble 4BA8  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 02BE  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 422A  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0272  
                          __size_of_UI 08C4                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 565E             __end_ofi2_I2C_Master_Write 5636  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 36C0                            ??i2_isdigit 0001  
                         _PlatformTest 2AC0                           BlockerTest@i 00AC  
                             i2u530_40 2050                               i2u530_47 2046  
                             _PIR2bits 000FA1                               i2u526_40 1FF0  
                             i2u526_47 1FE6                               i2u471_40 54D0  
                      PlatformTest@res 00AD                               i2u571_40 3326  
                             i2u882_40 2F24                               i2u884_40 2F4C  
                             i2u883_48 2F26                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 548C                          lcdNibble@data 0081  
                             i2_getRTC 4AC6                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1ECA  
                             i2_strcpy 514C                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4EAA  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 55C4                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 057A  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 46A6                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 523E             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 5076             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 503E                _change_state_to_menu_23 520E  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 532E  
              _change_state_to_logs_12 52FE                _change_state_to_logs_22 52CE  
              _change_state_to_logs_23 538C                _change_state_to_logs_33 529E  
              _change_state_to_logs_34 526E                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 36B8  
                      _I2C_Master_Init 4CD6                       __size_of_readADC 002C  
                      _I2C_Master_Read 535E                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 55C4  
                      _I2C_Master_Stop 563E                       __size_of_isdigit 002A  
                             _delay_ms 543C                         _printSortTimer 2D7E  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3E5C                               __ptext10 4148  
                             __ptext11 4C10                               __ptext20 551E  
                             __ptext12 3BF8                               __ptext21 4F7C  
                             __ptext13 4060                               __ptext30 55C4  
                             __ptext22 0012                               __ptext14 5596  
                             __ptext31 503E                               __ptext23 2536  
                             __ptext15 517E                               __ptext40 08D6  
                             __ptext32 5076                               __ptext24 50AE  
                             __ptext16 4748                               __ptext41 48E0  
                             __ptext33 46A6                               __ptext25 47D4  
                             __ptext17 4CD6                               __ptext50 3A74  
                             __ptext42 4D36                               __ptext34 4482  
                             __ptext26 5622                               __ptext18 4540  
                             __ptext51 1708                               __ptext43 4D92  
                             __ptext35 3E5C                               __ptext27 563E  
                             __ptext19 53BA                               __ptext60 38AC  
                             __ptext52 55EA                               __ptext44 2AC0  
                             __ptext36 2238                               __ptext28 5646  
                             __ptext61 4B38                               __ptext53 5412  
                             __ptext45 555E                               __ptext37 4F30  
                             __ptext29 535E                               __ptext70 523E  
                             __ptext62 2800                               __ptext54 50E4  
                             __ptext46 53E6                               __ptext38 3F62  
                             __ptext71 526E                               __ptext63 5464  
                             __ptext55 4C74                               __ptext47 1B40  
                             __ptext39 422A                               __ptext80 5004  
                             __ptext72 529E                               __ptext64 3298  
                             __ptext56 49DC                               __ptext48 4964  
                             __ptext81 2D7E                               __ptext73 538C  
                             __ptext65 514C                               __ptext57 55FA  
                             __ptext49 485A                               __ptext90 4AC6  
                             __ptext82 1ECA                               __ptext74 52CE  
                             __ptext66 36C0                               __ptext58 4BA8  
                             __ptext91 562C                               __ptext83 560A  
                             __ptext75 52FE                               __ptext67 51AE  
                             __ptext92 564E                               __ptext84 5540  
                             __ptext76 532E                               __ptext68 51DE  
                             __ptext93 5656                               __ptext85 548C  
                             __ptext77 54D8                               __ptext69 520E  
                             __ptext94 54B2                               __ptext86 4FC2  
                             __ptext78 3D3C                               __ptext95 55D8  
                             __ptext87 4E44                               __ptext79 55AE  
                             __ptext96 557A                               __ptext88 5616  
                             __ptext89 4DEE                               _dispLogs 54D8  
                        ?_actuatorTest 0001                     PlatformTest@i_1784 00B3  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2056 0002                     __end_of_initServos 49DC  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 551E                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 485A  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 2536                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 520E  
    __end_ofi2_change_state_to_menu_22 51DE                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 3026  
                            putch@data 0082               __end_of_I2C_Master_Start 564E  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 562C  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2536  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 557A  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2AC0                __end_of_I2C_Master_Init 4D36  
              __end_of_I2C_Master_Read 538C                __end_of_I2C_Master_Wait 55D8  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5646  
                        printRTC@F3231 014B                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 3D3C  
                  __end_ofi2_lcdNibble 4E44                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 5004  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4C10  
                      ___lwmod@counter 008B                      _updateServoStates 38AC  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EE  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
