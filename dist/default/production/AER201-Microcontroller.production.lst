

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 19 18:24:17 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  004772                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3225
   150  004772  4D                 	db	77
   151  004773  4D                 	db	77
   152  004774  4D                 	db	77
   153  004775  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3216
   156  004776  4D                 	db	77
   157  004777  4D                 	db	77
   158  004778  4D                 	db	77
   159  004779  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB24                     __pmediumconst:
   163                           	opt stack 0
   164  00FB24  00                 	db	0
   165  00FB25                     _keys:
   166                           	opt stack 0
   167  00FB25  31                 	db	49
   168  00FB26  32                 	db	50
   169  00FB27  33                 	db	51
   170  00FB28  41                 	db	65
   171  00FB29  34                 	db	52
   172  00FB2A  35                 	db	53
   173  00FB2B  36                 	db	54
   174  00FB2C  42                 	db	66
   175  00FB2D  37                 	db	55
   176  00FB2E  38                 	db	56
   177  00FB2F  39                 	db	57
   178  00FB30  43                 	db	67
   179  00FB31  2A                 	db	42
   180  00FB32  30                 	db	48
   181  00FB33  23                 	db	35
   182  00FB34  44                 	db	68
   183  00FB35  00                 	db	0
   184  00FB36                     __end_of_keys:
   185                           	opt stack 0
   186  00FB36                     _dpowers:
   187                           	opt stack 0
   188  00FB36  0001               	dw	1
   189  00FB38  000A               	dw	10
   190  00FB3A  0064               	dw	100
   191  00FB3C  03E8               	dw	1000
   192  00FB3E  2710               	dw	10000
   193  00FB40                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB40                     STR_21:
   267  00FB40  25                 	db	37
   268  00FB41  30                 	db	48	;'0'
   269  00FB42  32                 	db	50	;'2'
   270  00FB43  64                 	db	100	;'d'
   271  00FB44  25                 	db	37
   272  00FB45  73                 	db	115	;'s'
   273  00FB46  20                 	db	32
   274  00FB47  7C                 	db	124
   275  00FB48  20                 	db	32
   276  00FB49  25                 	db	37
   277  00FB4A  30                 	db	48	;'0'
   278  00FB4B  32                 	db	50	;'2'
   279  00FB4C  64                 	db	100	;'d'
   280  00FB4D  3A                 	db	58	;':'
   281  00FB4E  25                 	db	37
   282  00FB4F  30                 	db	48	;'0'
   283  00FB50  32                 	db	50	;'2'
   284  00FB51  64                 	db	100	;'d'
   285  00FB52  3A                 	db	58	;':'
   286  00FB53  25                 	db	37
   287  00FB54  30                 	db	48	;'0'
   288  00FB55  32                 	db	50	;'2'
   289  00FB56  64                 	db	100	;'d'
   290  00FB57  00                 	db	0
   291  00FB58                     STR_66:
   292  00FB58  28                 	db	40
   293  00FB59  64                 	db	100	;'d'
   294  00FB5A  61                 	db	97	;'a'
   295  00FB5B  74                 	db	116	;'t'
   296  00FB5C  61                 	db	97	;'a'
   297  00FB5D  3A                 	db	58	;':'
   298  00FB5E  20                 	db	32
   299  00FB5F  25                 	db	37
   300  00FB60  75                 	db	117	;'u'
   301  00FB61  2C                 	db	44
   302  00FB62  20                 	db	32
   303  00FB63  61                 	db	97	;'a'
   304  00FB64  64                 	db	100	;'d'
   305  00FB65  64                 	db	100	;'d'
   306  00FB66  72                 	db	114	;'r'
   307  00FB67  3A                 	db	58	;':'
   308  00FB68  20                 	db	32
   309  00FB69  25                 	db	37
   310  00FB6A  75                 	db	117	;'u'
   311  00FB6B  29                 	db	41
   312  00FB6C  00                 	db	0
   313  00FB6D                     STR_111:
   314  00FB6D  44                 	db	68	;'D'
   315  00FB6E  20                 	db	32
   316  00FB6F  57                 	db	87	;'W'
   317  00FB70  49                 	db	73	;'I'
   318  00FB71  4C                 	db	76	;'L'
   319  00FB72  4C                 	db	76	;'L'
   320  00FB73  20                 	db	32
   321  00FB74  52                 	db	82	;'R'
   322  00FB75  45                 	db	69	;'E'
   323  00FB76  54                 	db	84	;'T'
   324  00FB77  55                 	db	85	;'U'
   325  00FB78  52                 	db	82	;'R'
   326  00FB79  4E                 	db	78	;'N'
   327  00FB7A  20                 	db	32
   328  00FB7B  20                 	db	32
   329  00FB7C  20                 	db	32
   330  00FB7D  20                 	db	32
   331  00FB7E  00                 	db	0
   332  00FB7F                     STR_112:
   333  00FB7F  4F                 	db	79	;'O'
   334  00FB80  54                 	db	84	;'T'
   335  00FB81  48                 	db	72	;'H'
   336  00FB82  45                 	db	69	;'E'
   337  00FB83  52                 	db	82	;'R'
   338  00FB84  20                 	db	32
   339  00FB85  53                 	db	83	;'S'
   340  00FB86  45                 	db	69	;'E'
   341  00FB87  54                 	db	84	;'T'
   342  00FB88  53                 	db	83	;'S'
   343  00FB89  20                 	db	32
   344  00FB8A  52                 	db	82	;'R'
   345  00FB8B  41                 	db	65	;'A'
   346  00FB8C  35                 	db	53	;'5'
   347  00FB8D  20                 	db	32
   348  00FB8E  20                 	db	32
   349  00FB8F  20                 	db	32
   350  00FB90  00                 	db	0
   351  00FB91                     STR_3:
   352  00FB91  2D                 	db	45
   353  00FB92  2D                 	db	45
   354  00FB93  20                 	db	32
   355  00FB94  4C                 	db	76	;'L'
   356  00FB95  4F                 	db	79	;'O'
   357  00FB96  47                 	db	71	;'G'
   358  00FB97  20                 	db	32
   359  00FB98  25                 	db	37
   360  00FB99  32                 	db	50	;'2'
   361  00FB9A  64                 	db	100	;'d'
   362  00FB9B  20                 	db	32
   363  00FB9C  48                 	db	72	;'H'
   364  00FB9D  45                 	db	69	;'E'
   365  00FB9E  52                 	db	82	;'R'
   366  00FB9F  45                 	db	69	;'E'
   367  00FBA0  2D                 	db	45
   368  00FBA1  2D                 	db	45
   369  00FBA2  00                 	db	0
   370  00FBA3                     STR_1:
   371  00FBA3  52                 	db	82	;'R'
   372  00FBA4  45                 	db	69	;'E'
   373  00FBA5  53                 	db	83	;'S'
   374  00FBA6  55                 	db	85	;'U'
   375  00FBA7  4C                 	db	76	;'L'
   376  00FBA8  54                 	db	84	;'T'
   377  00FBA9  53                 	db	83	;'S'
   378  00FBAA  20                 	db	32
   379  00FBAB  49                 	db	73	;'I'
   380  00FBAC  4E                 	db	78	;'N'
   381  00FBAD  20                 	db	32
   382  00FBAE  4C                 	db	76	;'L'
   383  00FBAF  4F                 	db	79	;'O'
   384  00FBB0  47                 	db	71	;'G'
   385  00FBB1  20                 	db	32
   386  00FBB2  25                 	db	37
   387  00FBB3  64                 	db	100	;'d'
   388  00FBB4  00                 	db	0
   389  00FBB5                     STR_102:
   390  00FBB5  4D                 	db	77	;'M'
   391  00FBB6  49                 	db	73	;'I'
   392  00FBB7  44                 	db	68	;'D'
   393  00FBB8  20                 	db	32
   394  00FBB9  2D                 	db	45
   395  00FBBA  2D                 	db	45
   396  00FBBB  20                 	db	32
   397  00FBBC  32                 	db	50	;'2'
   398  00FBBD  73                 	db	115	;'s'
   399  00FBBE  20                 	db	32
   400  00FBBF  20                 	db	32
   401  00FBC0  20                 	db	32
   402  00FBC1  20                 	db	32
   403  00FBC2  20                 	db	32
   404  00FBC3  20                 	db	32
   405  00FBC4  20                 	db	32
   406  00FBC5  00                 	db	0
   407  00FBC6                     STR_105:
   408  00FBC6  44                 	db	68	;'D'
   409  00FBC7  52                 	db	82	;'R'
   410  00FBC8  4F                 	db	79	;'O'
   411  00FBC9  50                 	db	80	;'P'
   412  00FBCA  20                 	db	32
   413  00FBCB  2D                 	db	45
   414  00FBCC  2D                 	db	45
   415  00FBCD  20                 	db	32
   416  00FBCE  32                 	db	50	;'2'
   417  00FBCF  73                 	db	115	;'s'
   418  00FBD0  20                 	db	32
   419  00FBD1  20                 	db	32
   420  00FBD2  20                 	db	32
   421  00FBD3  20                 	db	32
   422  00FBD4  20                 	db	32
   423  00FBD5  20                 	db	32
   424  00FBD6  00                 	db	0
   425  00FBD7                     STR_99:
   426  00FBD7  4C                 	db	76	;'L'
   427  00FBD8  45                 	db	69	;'E'
   428  00FBD9  46                 	db	70	;'F'
   429  00FBDA  54                 	db	84	;'T'
   430  00FBDB  20                 	db	32
   431  00FBDC  2D                 	db	45
   432  00FBDD  2D                 	db	45
   433  00FBDE  20                 	db	32
   434  00FBDF  32                 	db	50	;'2'
   435  00FBE0  73                 	db	115	;'s'
   436  00FBE1  20                 	db	32
   437  00FBE2  20                 	db	32
   438  00FBE3  20                 	db	32
   439  00FBE4  20                 	db	32
   440  00FBE5  20                 	db	32
   441  00FBE6  20                 	db	32
   442  00FBE7  00                 	db	0
   443  00FBE8                     STR_104:
   444  00FBE8  4C                 	db	76	;'L'
   445  00FBE9  45                 	db	69	;'E'
   446  00FBEA  56                 	db	86	;'V'
   447  00FBEB  45                 	db	69	;'E'
   448  00FBEC  4C                 	db	76	;'L'
   449  00FBED  20                 	db	32
   450  00FBEE  2D                 	db	45
   451  00FBEF  2D                 	db	45
   452  00FBF0  20                 	db	32
   453  00FBF1  32                 	db	50	;'2'
   454  00FBF2  73                 	db	115	;'s'
   455  00FBF3  20                 	db	32
   456  00FBF4  20                 	db	32
   457  00FBF5  20                 	db	32
   458  00FBF6  20                 	db	32
   459  00FBF7  20                 	db	32
   460  00FBF8  00                 	db	0
   461  00FBF9                     STR_98:
   462  00FBF9  52                 	db	82	;'R'
   463  00FBFA  49                 	db	73	;'I'
   464  00FBFB  47                 	db	71	;'G'
   465  00FBFC  48                 	db	72	;'H'
   466  00FBFD  54                 	db	84	;'T'
   467  00FBFE  20                 	db	32
   468  00FBFF  2D                 	db	45
   469  00FC00  2D                 	db	45
   470  00FC01  20                 	db	32
   471  00FC02  32                 	db	50	;'2'
   472  00FC03  73                 	db	115	;'s'
   473  00FC04  20                 	db	32
   474  00FC05  20                 	db	32
   475  00FC06  20                 	db	32
   476  00FC07  20                 	db	32
   477  00FC08  20                 	db	32
   478  00FC09  00                 	db	0
   479  00FC0A                     STR_97:
   480  00FC0A  4D                 	db	77	;'M'
   481  00FC0B  49                 	db	73	;'I'
   482  00FC0C  44                 	db	68	;'D'
   483  00FC0D  44                 	db	68	;'D'
   484  00FC0E  4C                 	db	76	;'L'
   485  00FC0F  45                 	db	69	;'E'
   486  00FC10  20                 	db	32
   487  00FC11  2D                 	db	45
   488  00FC12  2D                 	db	45
   489  00FC13  20                 	db	32
   490  00FC14  32                 	db	50	;'2'
   491  00FC15  73                 	db	115	;'s'
   492  00FC16  20                 	db	32
   493  00FC17  20                 	db	32
   494  00FC18  20                 	db	32
   495  00FC19  20                 	db	32
   496  00FC1A  00                 	db	0
   497  00FC1B                     STR_114:
   498  00FC1B  44                 	db	68	;'D'
   499  00FC1C  20                 	db	32
   500  00FC1D  57                 	db	87	;'W'
   501  00FC1E  49                 	db	73	;'I'
   502  00FC1F  4C                 	db	76	;'L'
   503  00FC20  4C                 	db	76	;'L'
   504  00FC21  20                 	db	32
   505  00FC22  52                 	db	82	;'R'
   506  00FC23  45                 	db	69	;'E'
   507  00FC24  54                 	db	84	;'T'
   508  00FC25  55                 	db	85	;'U'
   509  00FC26  52                 	db	82	;'R'
   510  00FC27  4E                 	db	78	;'N'
   511  00FC28  20                 	db	32
   512  00FC29  20                 	db	32
   513  00FC2A  20                 	db	32
   514  00FC2B  00                 	db	0
   515  00FC2C                     STR_100:
   516  00FC2C  4D                 	db	77	;'M'
   517  00FC2D  49                 	db	73	;'I'
   518  00FC2E  44                 	db	68	;'D'
   519  00FC2F  2D                 	db	45
   520  00FC30  4C                 	db	76	;'L'
   521  00FC31  45                 	db	69	;'E'
   522  00FC32  46                 	db	70	;'F'
   523  00FC33  54                 	db	84	;'T'
   524  00FC34  20                 	db	32
   525  00FC35  2D                 	db	45
   526  00FC36  2D                 	db	45
   527  00FC37  20                 	db	32
   528  00FC38  32                 	db	50	;'2'
   529  00FC39  73                 	db	115	;'s'
   530  00FC3A  20                 	db	32
   531  00FC3B  20                 	db	32
   532  00FC3C  00                 	db	0
   533  00FC3D                     STR_101:
   534  00FC3D  4D                 	db	77	;'M'
   535  00FC3E  49                 	db	73	;'I'
   536  00FC3F  44                 	db	68	;'D'
   537  00FC40  2D                 	db	45
   538  00FC41  52                 	db	82	;'R'
   539  00FC42  49                 	db	73	;'I'
   540  00FC43  47                 	db	71	;'G'
   541  00FC44  48                 	db	72	;'H'
   542  00FC45  54                 	db	84	;'T'
   543  00FC46  20                 	db	32
   544  00FC47  2D                 	db	45
   545  00FC48  2D                 	db	45
   546  00FC49  20                 	db	32
   547  00FC4A  32                 	db	50	;'2'
   548  00FC4B  73                 	db	115	;'s'
   549  00FC4C  20                 	db	32
   550  00FC4D  00                 	db	0
   551  00FC4E                     STR_115:
   552  00FC4E  45                 	db	69	;'E'
   553  00FC4F  4C                 	db	76	;'L'
   554  00FC50  53                 	db	83	;'S'
   555  00FC51  45                 	db	69	;'E'
   556  00FC52  20                 	db	32
   557  00FC53  54                 	db	84	;'T'
   558  00FC54  4F                 	db	79	;'O'
   559  00FC55  47                 	db	71	;'G'
   560  00FC56  47                 	db	71	;'G'
   561  00FC57  4C                 	db	76	;'L'
   562  00FC58  45                 	db	69	;'E'
   563  00FC59  53                 	db	83	;'S'
   564  00FC5A  20                 	db	32
   565  00FC5B  52                 	db	82	;'R'
   566  00FC5C  41                 	db	65	;'A'
   567  00FC5D  35                 	db	53	;'5'
   568  00FC5E  00                 	db	0
   569  00FC5F                     STR_72:
   570  00FC5F  41                 	db	65	;'A'
   571  00FC60  4C                 	db	76	;'L'
   572  00FC61  47                 	db	71	;'G'
   573  00FC62  31                 	db	49	;'1'
   574  00FC63  3A                 	db	58	;':'
   575  00FC64  20                 	db	32
   576  00FC65  39                 	db	57	;'9'
   577  00FC66  20                 	db	32
   578  00FC67  50                 	db	80	;'P'
   579  00FC68  4F                 	db	79	;'O'
   580  00FC69  50                 	db	80	;'P'
   581  00FC6A  4E                 	db	78	;'N'
   582  00FC6B  4F                 	db	79	;'O'
   583  00FC6C  54                 	db	84	;'T'
   584  00FC6D  41                 	db	65	;'A'
   585  00FC6E  42                 	db	66	;'B'
   586  00FC6F  00                 	db	0
   587  00FC70                     STR_68:
   588  00FC70  31                 	db	49	;'1'
   589  00FC71  2E                 	db	46
   590  00FC72  41                 	db	65	;'A'
   591  00FC73  4C                 	db	76	;'L'
   592  00FC74  47                 	db	71	;'G'
   593  00FC75  7C                 	db	124
   594  00FC76  32                 	db	50	;'2'
   595  00FC77  2E                 	db	46
   596  00FC78  53                 	db	83	;'S'
   597  00FC79  4E                 	db	78	;'N'
   598  00FC7A  52                 	db	82	;'R'
   599  00FC7B  7C                 	db	124
   600  00FC7C  33                 	db	51	;'3'
   601  00FC7D  2E                 	db	46
   602  00FC7E  41                 	db	65	;'A'
   603  00FC7F  43                 	db	67	;'C'
   604  00FC80  00                 	db	0
   605  00FC81                     STR_92:
   606  00FC81  54                 	db	84	;'T'
   607  00FC82  53                 	db	83	;'S'
   608  00FC83  54                 	db	84	;'T'
   609  00FC84  3A                 	db	58	;':'
   610  00FC85  20                 	db	32
   611  00FC86  43                 	db	67	;'C'
   612  00FC87  4F                 	db	79	;'O'
   613  00FC88  4E                 	db	78	;'N'
   614  00FC89  44                 	db	68	;'D'
   615  00FC8A  20                 	db	32
   616  00FC8B  53                 	db	83	;'S'
   617  00FC8C  4F                 	db	79	;'O'
   618  00FC8D  4C                 	db	76	;'L'
   619  00FC8E  4E                 	db	78	;'N'
   620  00FC8F  27                 	db	39
   621  00FC90  44                 	db	68	;'D'
   622  00FC91  00                 	db	0
   623  00FC92                     STR_94:
   624  00FC92  54                 	db	84	;'T'
   625  00FC93  53                 	db	83	;'S'
   626  00FC94  54                 	db	84	;'T'
   627  00FC95  3A                 	db	58	;':'
   628  00FC96  20                 	db	32
   629  00FC97  50                 	db	80	;'P'
   630  00FC98  55                 	db	85	;'U'
   631  00FC99  53                 	db	83	;'S'
   632  00FC9A  48                 	db	72	;'H'
   633  00FC9B  20                 	db	32
   634  00FC9C  53                 	db	83	;'S'
   635  00FC9D  4F                 	db	79	;'O'
   636  00FC9E  4C                 	db	76	;'L'
   637  00FC9F  4E                 	db	78	;'N'
   638  00FCA0  27                 	db	39
   639  00FCA1  44                 	db	68	;'D'
   640  00FCA2  00                 	db	0
   641  00FCA3                     STR_69:
   642  00FCA3  34                 	db	52	;'4'
   643  00FCA4  2E                 	db	46
   644  00FCA5  48                 	db	72	;'H'
   645  00FCA6  49                 	db	73	;'I'
   646  00FCA7  7C                 	db	124
   647  00FCA8  35                 	db	53	;'5'
   648  00FCA9  2E                 	db	46
   649  00FCAA  54                 	db	84	;'T'
   650  00FCAB  4F                 	db	79	;'O'
   651  00FCAC  47                 	db	71	;'G'
   652  00FCAD  7C                 	db	124
   653  00FCAE  36                 	db	54	;'6'
   654  00FCAF  2E                 	db	46
   655  00FCB0  45                 	db	69	;'E'
   656  00FCB1  45                 	db	69	;'E'
   657  00FCB2  50                 	db	80	;'P'
   658  00FCB3  00                 	db	0
   659  00FCB4                     STR_110:
   660  00FCB4  54                 	db	84	;'T'
   661  00FCB5  53                 	db	83	;'S'
   662  00FCB6  54                 	db	84	;'T'
   663  00FCB7  3A                 	db	58	;':'
   664  00FCB8  20                 	db	32
   665  00FCB9  42                 	db	66	;'B'
   666  00FCBA  4F                 	db	79	;'O'
   667  00FCBB  54                 	db	84	;'T'
   668  00FCBC  48                 	db	72	;'H'
   669  00FCBD  20                 	db	32
   670  00FCBE  53                 	db	83	;'S'
   671  00FCBF  45                 	db	69	;'E'
   672  00FCC0  52                 	db	82	;'R'
   673  00FCC1  56                 	db	86	;'V'
   674  00FCC2  4F                 	db	79	;'O'
   675  00FCC3  53                 	db	83	;'S'
   676  00FCC4  00                 	db	0
   677  00FCC5                     STR_41:
   678  00FCC5  4C                 	db	76	;'L'
   679  00FCC6  4F                 	db	79	;'O'
   680  00FCC7  47                 	db	71	;'G'
   681  00FCC8  20                 	db	32
   682  00FCC9  31                 	db	49	;'1'
   683  00FCCA  20                 	db	32
   684  00FCCB  20                 	db	32
   685  00FCCC  20                 	db	32
   686  00FCCD  20                 	db	32
   687  00FCCE  20                 	db	32
   688  00FCCF  20                 	db	32
   689  00FCD0  20                 	db	32
   690  00FCD1  20                 	db	32
   691  00FCD2  20                 	db	32
   692  00FCD3  20                 	db	32
   693  00FCD4  20                 	db	32
   694  00FCD5  00                 	db	0
   695  00FCD6                     STR_40:
   696  00FCD6  4C                 	db	76	;'L'
   697  00FCD7  4F                 	db	79	;'O'
   698  00FCD8  47                 	db	71	;'G'
   699  00FCD9  20                 	db	32
   700  00FCDA  32                 	db	50	;'2'
   701  00FCDB  20                 	db	32
   702  00FCDC  20                 	db	32
   703  00FCDD  20                 	db	32
   704  00FCDE  20                 	db	32
   705  00FCDF  20                 	db	32
   706  00FCE0  20                 	db	32
   707  00FCE1  20                 	db	32
   708  00FCE2  20                 	db	32
   709  00FCE3  20                 	db	32
   710  00FCE4  20                 	db	32
   711  00FCE5  20                 	db	32
   712  00FCE6  00                 	db	0
   713  00FCE7                     STR_44:
   714  00FCE7  4C                 	db	76	;'L'
   715  00FCE8  4F                 	db	79	;'O'
   716  00FCE9  47                 	db	71	;'G'
   717  00FCEA  20                 	db	32
   718  00FCEB  33                 	db	51	;'3'
   719  00FCEC  20                 	db	32
   720  00FCED  20                 	db	32
   721  00FCEE  20                 	db	32
   722  00FCEF  20                 	db	32
   723  00FCF0  20                 	db	32
   724  00FCF1  20                 	db	32
   725  00FCF2  20                 	db	32
   726  00FCF3  20                 	db	32
   727  00FCF4  20                 	db	32
   728  00FCF5  20                 	db	32
   729  00FCF6  20                 	db	32
   730  00FCF7  00                 	db	0
   731  00FCF8                     STR_48:
   732  00FCF8  4C                 	db	76	;'L'
   733  00FCF9  4F                 	db	79	;'O'
   734  00FCFA  47                 	db	71	;'G'
   735  00FCFB  20                 	db	32
   736  00FCFC  34                 	db	52	;'4'
   737  00FCFD  20                 	db	32
   738  00FCFE  20                 	db	32
   739  00FCFF  20                 	db	32
   740  00FD00  20                 	db	32
   741  00FD01  20                 	db	32
   742  00FD02  20                 	db	32
   743  00FD03  20                 	db	32
   744  00FD04  20                 	db	32
   745  00FD05  20                 	db	32
   746  00FD06  20                 	db	32
   747  00FD07  20                 	db	32
   748  00FD08  00                 	db	0
   749  00FD09                     STR_36:
   750  00FD09  33                 	db	51	;'3'
   751  00FD0A  2E                 	db	46
   752  00FD0B  20                 	db	32
   753  00FD0C  4C                 	db	76	;'L'
   754  00FD0D  4F                 	db	79	;'O'
   755  00FD0E  47                 	db	71	;'G'
   756  00FD0F  53                 	db	83	;'S'
   757  00FD10  20                 	db	32
   758  00FD11  20                 	db	32
   759  00FD12  20                 	db	32
   760  00FD13  20                 	db	32
   761  00FD14  20                 	db	32
   762  00FD15  20                 	db	32
   763  00FD16  20                 	db	32
   764  00FD17  20                 	db	32
   765  00FD18  20                 	db	32
   766  00FD19  00                 	db	0
   767  00FD1A                     STR_32:
   768  00FD1A  32                 	db	50	;'2'
   769  00FD1B  2E                 	db	46
   770  00FD1C  20                 	db	32
   771  00FD1D  53                 	db	83	;'S'
   772  00FD1E  4F                 	db	79	;'O'
   773  00FD1F  52                 	db	82	;'R'
   774  00FD20  54                 	db	84	;'T'
   775  00FD21  20                 	db	32
   776  00FD22  20                 	db	32
   777  00FD23  20                 	db	32
   778  00FD24  20                 	db	32
   779  00FD25  20                 	db	32
   780  00FD26  20                 	db	32
   781  00FD27  20                 	db	32
   782  00FD28  20                 	db	32
   783  00FD29  20                 	db	32
   784  00FD2A  00                 	db	0
   785  00FD2B                     STR_33:
   786  00FD2B  31                 	db	49	;'1'
   787  00FD2C  2E                 	db	46
   788  00FD2D  20                 	db	32
   789  00FD2E  44                 	db	68	;'D'
   790  00FD2F  41                 	db	65	;'A'
   791  00FD30  54                 	db	84	;'T'
   792  00FD31  45                 	db	69	;'E'
   793  00FD32  2F                 	db	47
   794  00FD33  54                 	db	84	;'T'
   795  00FD34  49                 	db	73	;'I'
   796  00FD35  4D                 	db	77	;'M'
   797  00FD36  45                 	db	69	;'E'
   798  00FD37  20                 	db	32
   799  00FD38  20                 	db	32
   800  00FD39  20                 	db	32
   801  00FD3A  20                 	db	32
   802  00FD3B  00                 	db	0
   803  00FD3C                     STR_24:
   804  00FD3C  20                 	db	32
   805  00FD3D  2D                 	db	45
   806  00FD3E  2D                 	db	45
   807  00FD3F  20                 	db	32
   808  00FD40  50                 	db	80	;'P'
   809  00FD41  4F                 	db	79	;'O'
   810  00FD42  50                 	db	80	;'P'
   811  00FD43  20                 	db	32
   812  00FD44  20                 	db	32
   813  00FD45  43                 	db	67	;'C'
   814  00FD46  41                 	db	65	;'A'
   815  00FD47  4E                 	db	78	;'N'
   816  00FD48  20                 	db	32
   817  00FD49  2D                 	db	45
   818  00FD4A  2D                 	db	45
   819  00FD4B  20                 	db	32
   820  00FD4C  00                 	db	0
   821  00FD4D                     STR_26:
   822  00FD4D  20                 	db	32
   823  00FD4E  2D                 	db	45
   824  00FD4F  2D                 	db	45
   825  00FD50  20                 	db	32
   826  00FD51  53                 	db	83	;'S'
   827  00FD52  4F                 	db	79	;'O'
   828  00FD53  55                 	db	85	;'U'
   829  00FD54  50                 	db	80	;'P'
   830  00FD55  20                 	db	32
   831  00FD56  43                 	db	67	;'C'
   832  00FD57  41                 	db	65	;'A'
   833  00FD58  4E                 	db	78	;'N'
   834  00FD59  20                 	db	32
   835  00FD5A  2D                 	db	45
   836  00FD5B  2D                 	db	45
   837  00FD5C  20                 	db	32
   838  00FD5D  00                 	db	0
   839  00FD5E                     STR_28:
   840  00FD5E  2D                 	db	45
   841  00FD5F  2D                 	db	45
   842  00FD60  20                 	db	32
   843  00FD61  54                 	db	84	;'T'
   844  00FD62  4F                 	db	79	;'O'
   845  00FD63  54                 	db	84	;'T'
   846  00FD64  41                 	db	65	;'A'
   847  00FD65  4C                 	db	76	;'L'
   848  00FD66  20                 	db	32
   849  00FD67  43                 	db	67	;'C'
   850  00FD68  41                 	db	65	;'A'
   851  00FD69  4E                 	db	78	;'N'
   852  00FD6A  53                 	db	83	;'S'
   853  00FD6B  20                 	db	32
   854  00FD6C  2D                 	db	45
   855  00FD6D  2D                 	db	45
   856  00FD6E  00                 	db	0
   857  00FD6F                     STR_39:
   858  00FD6F  4C                 	db	76	;'L'
   859  00FD70  4F                 	db	79	;'O'
   860  00FD71  47                 	db	71	;'G'
   861  00FD72  20                 	db	32
   862  00FD73  31                 	db	49	;'1'
   863  00FD74  20                 	db	32
   864  00FD75  20                 	db	32
   865  00FD76  20                 	db	32
   866  00FD77  20                 	db	32
   867  00FD78  20                 	db	32
   868  00FD79  20                 	db	32
   869  00FD7A  20                 	db	32
   870  00FD7B  20                 	db	32
   871  00FD7C  20                 	db	32
   872  00FD7D  20                 	db	32
   873  00FD7E  3C                 	db	60	;'<'
   874  00FD7F  00                 	db	0
   875  00FD80                     STR_42:
   876  00FD80  4C                 	db	76	;'L'
   877  00FD81  4F                 	db	79	;'O'
   878  00FD82  47                 	db	71	;'G'
   879  00FD83  20                 	db	32
   880  00FD84  32                 	db	50	;'2'
   881  00FD85  20                 	db	32
   882  00FD86  20                 	db	32
   883  00FD87  20                 	db	32
   884  00FD88  20                 	db	32
   885  00FD89  20                 	db	32
   886  00FD8A  20                 	db	32
   887  00FD8B  20                 	db	32
   888  00FD8C  20                 	db	32
   889  00FD8D  20                 	db	32
   890  00FD8E  20                 	db	32
   891  00FD8F  3C                 	db	60	;'<'
   892  00FD90  00                 	db	0
   893  00FD91                     STR_46:
   894  00FD91  4C                 	db	76	;'L'
   895  00FD92  4F                 	db	79	;'O'
   896  00FD93  47                 	db	71	;'G'
   897  00FD94  20                 	db	32
   898  00FD95  33                 	db	51	;'3'
   899  00FD96  20                 	db	32
   900  00FD97  20                 	db	32
   901  00FD98  20                 	db	32
   902  00FD99  20                 	db	32
   903  00FD9A  20                 	db	32
   904  00FD9B  20                 	db	32
   905  00FD9C  20                 	db	32
   906  00FD9D  20                 	db	32
   907  00FD9E  20                 	db	32
   908  00FD9F  20                 	db	32
   909  00FDA0  3C                 	db	60	;'<'
   910  00FDA1  00                 	db	0
   911  00FDA2                     STR_50:
   912  00FDA2  4C                 	db	76	;'L'
   913  00FDA3  4F                 	db	79	;'O'
   914  00FDA4  47                 	db	71	;'G'
   915  00FDA5  20                 	db	32
   916  00FDA6  34                 	db	52	;'4'
   917  00FDA7  20                 	db	32
   918  00FDA8  20                 	db	32
   919  00FDA9  20                 	db	32
   920  00FDAA  20                 	db	32
   921  00FDAB  20                 	db	32
   922  00FDAC  20                 	db	32
   923  00FDAD  20                 	db	32
   924  00FDAE  20                 	db	32
   925  00FDAF  20                 	db	32
   926  00FDB0  20                 	db	32
   927  00FDB1  3C                 	db	60	;'<'
   928  00FDB2  00                 	db	0
   929  00FDB3                     STR_38:
   930  00FDB3  33                 	db	51	;'3'
   931  00FDB4  2E                 	db	46
   932  00FDB5  20                 	db	32
   933  00FDB6  4C                 	db	76	;'L'
   934  00FDB7  4F                 	db	79	;'O'
   935  00FDB8  47                 	db	71	;'G'
   936  00FDB9  53                 	db	83	;'S'
   937  00FDBA  20                 	db	32
   938  00FDBB  20                 	db	32
   939  00FDBC  20                 	db	32
   940  00FDBD  20                 	db	32
   941  00FDBE  20                 	db	32
   942  00FDBF  20                 	db	32
   943  00FDC0  20                 	db	32
   944  00FDC1  20                 	db	32
   945  00FDC2  3C                 	db	60	;'<'
   946  00FDC3  00                 	db	0
   947  00FDC4                     STR_34:
   948  00FDC4  32                 	db	50	;'2'
   949  00FDC5  2E                 	db	46
   950  00FDC6  20                 	db	32
   951  00FDC7  53                 	db	83	;'S'
   952  00FDC8  4F                 	db	79	;'O'
   953  00FDC9  52                 	db	82	;'R'
   954  00FDCA  54                 	db	84	;'T'
   955  00FDCB  20                 	db	32
   956  00FDCC  20                 	db	32
   957  00FDCD  20                 	db	32
   958  00FDCE  20                 	db	32
   959  00FDCF  20                 	db	32
   960  00FDD0  20                 	db	32
   961  00FDD1  20                 	db	32
   962  00FDD2  20                 	db	32
   963  00FDD3  3C                 	db	60	;'<'
   964  00FDD4  00                 	db	0
   965  00FDD5                     STR_31:
   966  00FDD5  31                 	db	49	;'1'
   967  00FDD6  2E                 	db	46
   968  00FDD7  20                 	db	32
   969  00FDD8  44                 	db	68	;'D'
   970  00FDD9  41                 	db	65	;'A'
   971  00FDDA  54                 	db	84	;'T'
   972  00FDDB  45                 	db	69	;'E'
   973  00FDDC  2F                 	db	47
   974  00FDDD  54                 	db	84	;'T'
   975  00FDDE  49                 	db	73	;'I'
   976  00FDDF  4D                 	db	77	;'M'
   977  00FDE0  45                 	db	69	;'E'
   978  00FDE1  20                 	db	32
   979  00FDE2  20                 	db	32
   980  00FDE3  20                 	db	32
   981  00FDE4  3C                 	db	60	;'<'
   982  00FDE5  00                 	db	0
   983  00FDE6                     STR_6:
   984  00FDE6  50                 	db	80	;'P'
   985  00FDE7  41                 	db	65	;'A'
   986  00FDE8  55                 	db	85	;'U'
   987  00FDE9  53                 	db	83	;'S'
   988  00FDEA  45                 	db	69	;'E'
   989  00FDEB  20                 	db	32
   990  00FDEC  3C                 	db	60	;'<'
   991  00FDED  20                 	db	32
   992  00FDEE  7C                 	db	124
   993  00FDEF  20                 	db	32
   994  00FDF0  42                 	db	66	;'B'
   995  00FDF1  41                 	db	65	;'A'
   996  00FDF2  43                 	db	67	;'C'
   997  00FDF3  4B                 	db	75	;'K'
   998  00FDF4  20                 	db	32
   999  00FDF5  3E                 	db	62	;'>'
  1000  00FDF6  00                 	db	0
  1001  00FDF7                     STR_30:
  1002  00FDF7  50                 	db	80	;'P'
  1003  00FDF8  55                 	db	85	;'U'
  1004  00FDF9  53                 	db	83	;'S'
  1005  00FDFA  48                 	db	72	;'H'
  1006  00FDFB  20                 	db	32
  1007  00FDFC  54                 	db	84	;'T'
  1008  00FDFD  4F                 	db	79	;'O'
  1009  00FDFE  20                 	db	32
  1010  00FDFF  43                 	db	67	;'C'
  1011  00FE00  4F                 	db	79	;'O'
  1012  00FE01  4E                 	db	78	;'N'
  1013  00FE02  54                 	db	84	;'T'
  1014  00FE03  49                 	db	73	;'I'
  1015  00FE04  4E                 	db	78	;'N'
  1016  00FE05  55                 	db	85	;'U'
  1017  00FE06  45                 	db	69	;'E'
  1018  00FE07  00                 	db	0
  1019  00FE08                     STR_27:
  1020  00FE08  4E                 	db	78	;'N'
  1021  00FE09  4C                 	db	76	;'L'
  1022  00FE0A  41                 	db	65	;'A'
  1023  00FE0B  42                 	db	66	;'B'
  1024  00FE0C  3A                 	db	58	;':'
  1025  00FE0D  20                 	db	32
  1026  00FE0E  25                 	db	37
  1027  00FE0F  64                 	db	100	;'d'
  1028  00FE10  7C                 	db	124
  1029  00FE11  4C                 	db	76	;'L'
  1030  00FE12  41                 	db	65	;'A'
  1031  00FE13  42                 	db	66	;'B'
  1032  00FE14  3A                 	db	58	;':'
  1033  00FE15  20                 	db	32
  1034  00FE16  25                 	db	37
  1035  00FE17  64                 	db	100	;'d'
  1036  00FE18  00                 	db	0
  1037  00FE19                     STR_25:
  1038  00FE19  4E                 	db	78	;'N'
  1039  00FE1A  54                 	db	84	;'T'
  1040  00FE1B  41                 	db	65	;'A'
  1041  00FE1C  42                 	db	66	;'B'
  1042  00FE1D  3A                 	db	58	;':'
  1043  00FE1E  20                 	db	32
  1044  00FE1F  25                 	db	37
  1045  00FE20  64                 	db	100	;'d'
  1046  00FE21  7C                 	db	124
  1047  00FE22  54                 	db	84	;'T'
  1048  00FE23  41                 	db	65	;'A'
  1049  00FE24  42                 	db	66	;'B'
  1050  00FE25  3A                 	db	58	;':'
  1051  00FE26  20                 	db	32
  1052  00FE27  25                 	db	37
  1053  00FE28  64                 	db	100	;'d'
  1054  00FE29  00                 	db	0
  1055  00FE2A                     STR_83:
  1056  00FE2A  4D                 	db	77	;'M'
  1057  00FE2B  41                 	db	65	;'A'
  1058  00FE2C  47                 	db	71	;'G'
  1059  00FE2D  5F                 	db	95	;'_'
  1060  00FE2E  73                 	db	115	;'s'
  1061  00FE2F  69                 	db	105	;'i'
  1062  00FE30  67                 	db	103	;'g'
  1063  00FE31  6E                 	db	110	;'n'
  1064  00FE32  61                 	db	97	;'a'
  1065  00FE33  6C                 	db	108	;'l'
  1066  00FE34  3A                 	db	58	;':'
  1067  00FE35  20                 	db	32
  1068  00FE36  25                 	db	37
  1069  00FE37  64                 	db	100	;'d'
  1070  00FE38  20                 	db	32
  1071  00FE39  00                 	db	0
  1072  00FE3A                     STR_103:
  1073  00FE3A  54                 	db	84	;'T'
  1074  00FE3B  53                 	db	83	;'S'
  1075  00FE3C  54                 	db	84	;'T'
  1076  00FE3D  3A                 	db	58	;':'
  1077  00FE3E  20                 	db	32
  1078  00FE3F  54                 	db	84	;'T'
  1079  00FE40  49                 	db	73	;'I'
  1080  00FE41  4C                 	db	76	;'L'
  1081  00FE42  54                 	db	84	;'T'
  1082  00FE43  20                 	db	32
  1083  00FE44  53                 	db	83	;'S'
  1084  00FE45  45                 	db	69	;'E'
  1085  00FE46  52                 	db	82	;'R'
  1086  00FE47  56                 	db	86	;'V'
  1087  00FE48  4F                 	db	79	;'O'
  1088  00FE49  00                 	db	0
  1089  00FE4A                     STR_4:
  1090  00FE4A  44                 	db	68	;'D'
  1091  00FE4B  49                 	db	73	;'I'
  1092  00FE4C  44                 	db	68	;'D'
  1093  00FE4D  4E                 	db	78	;'N'
  1094  00FE4E  27                 	db	39
  1095  00FE4F  54                 	db	84	;'T'
  1096  00FE50  20                 	db	32
  1097  00FE51  43                 	db	67	;'C'
  1098  00FE52  4F                 	db	79	;'O'
  1099  00FE53  4D                 	db	77	;'M'
  1100  00FE54  50                 	db	80	;'P'
  1101  00FE55  4C                 	db	76	;'L'
  1102  00FE56  45                 	db	69	;'E'
  1103  00FE57  54                 	db	84	;'T'
  1104  00FE58  45                 	db	69	;'E'
  1105  00FE59  00                 	db	0
  1106  00FE5A                     STR_80:
  1107  00FE5A  49                 	db	73	;'I'
  1108  00FE5B  52                 	db	82	;'R'
  1109  00FE5C  5F                 	db	95	;'_'
  1110  00FE5D  73                 	db	115	;'s'
  1111  00FE5E  69                 	db	105	;'i'
  1112  00FE5F  67                 	db	103	;'g'
  1113  00FE60  6E                 	db	110	;'n'
  1114  00FE61  61                 	db	97	;'a'
  1115  00FE62  6C                 	db	108	;'l'
  1116  00FE63  3A                 	db	58	;':'
  1117  00FE64  20                 	db	32
  1118  00FE65  25                 	db	37
  1119  00FE66  64                 	db	100	;'d'
  1120  00FE67  20                 	db	32
  1121  00FE68  00                 	db	0
  1122  00FE69                     STR_109:
  1123  00FE69  43                 	db	67	;'C'
  1124  00FE6A  41                 	db	65	;'A'
  1125  00FE6B  4D                 	db	77	;'M'
  1126  00FE6C  20                 	db	32
  1127  00FE6D  44                 	db	68	;'D'
  1128  00FE6E  57                 	db	87	;'W'
  1129  00FE6F  4E                 	db	78	;'N'
  1130  00FE70  20                 	db	32
  1131  00FE71  7C                 	db	124
  1132  00FE72  52                 	db	82	;'R'
  1133  00FE73  43                 	db	67	;'C'
  1134  00FE74  30                 	db	48	;'0'
  1135  00FE75  3D                 	db	61	;'='
  1136  00FE76  30                 	db	48	;'0'
  1137  00FE77  00                 	db	0
  1138  00FE78                     STR_108:
  1139  00FE78  43                 	db	67	;'C'
  1140  00FE79  41                 	db	65	;'A'
  1141  00FE7A  4D                 	db	77	;'M'
  1142  00FE7B  20                 	db	32
  1143  00FE7C  55                 	db	85	;'U'
  1144  00FE7D  50                 	db	80	;'P'
  1145  00FE7E  20                 	db	32
  1146  00FE7F  20                 	db	32
  1147  00FE80  7C                 	db	124
  1148  00FE81  52                 	db	82	;'R'
  1149  00FE82  43                 	db	67	;'C'
  1150  00FE83  30                 	db	48	;'0'
  1151  00FE84  3D                 	db	61	;'='
  1152  00FE85  31                 	db	49	;'1'
  1153  00FE86  00                 	db	0
  1154  00FE87                     STR_82:
  1155  00FE87  54                 	db	84	;'T'
  1156  00FE88  53                 	db	83	;'S'
  1157  00FE89  54                 	db	84	;'T'
  1158  00FE8A  3A                 	db	58	;':'
  1159  00FE8B  20                 	db	32
  1160  00FE8C  4D                 	db	77	;'M'
  1161  00FE8D  41                 	db	65	;'A'
  1162  00FE8E  47                 	db	71	;'G'
  1163  00FE8F  4E                 	db	78	;'N'
  1164  00FE90  45                 	db	69	;'E'
  1165  00FE91  54                 	db	84	;'T'
  1166  00FE92  49                 	db	73	;'I'
  1167  00FE93  53                 	db	83	;'S'
  1168  00FE94  4D                 	db	77	;'M'
  1169  00FE95  00                 	db	0
  1170  00FE96                     STR_107:
  1171  00FE96  54                 	db	84	;'T'
  1172  00FE97  53                 	db	83	;'S'
  1173  00FE98  54                 	db	84	;'T'
  1174  00FE99  3A                 	db	58	;':'
  1175  00FE9A  20                 	db	32
  1176  00FE9B  43                 	db	67	;'C'
  1177  00FE9C  41                 	db	65	;'A'
  1178  00FE9D  4D                 	db	77	;'M'
  1179  00FE9E  20                 	db	32
  1180  00FE9F  53                 	db	83	;'S'
  1181  00FEA0  45                 	db	69	;'E'
  1182  00FEA1  52                 	db	82	;'R'
  1183  00FEA2  56                 	db	86	;'V'
  1184  00FEA3  4F                 	db	79	;'O'
  1185  00FEA4  00                 	db	0
  1186  00FEA5                     STR_96:
  1187  00FEA5  54                 	db	84	;'T'
  1188  00FEA6  53                 	db	83	;'S'
  1189  00FEA7  54                 	db	84	;'T'
  1190  00FEA8  3A                 	db	58	;':'
  1191  00FEA9  20                 	db	32
  1192  00FEAA  50                 	db	80	;'P'
  1193  00FEAB  41                 	db	65	;'A'
  1194  00FEAC  4E                 	db	78	;'N'
  1195  00FEAD  20                 	db	32
  1196  00FEAE  53                 	db	83	;'S'
  1197  00FEAF  45                 	db	69	;'E'
  1198  00FEB0  52                 	db	82	;'R'
  1199  00FEB1  56                 	db	86	;'V'
  1200  00FEB2  4F                 	db	79	;'O'
  1201  00FEB3  00                 	db	0
  1202  00FEB4                     STR_75:
  1203  00FEB4  41                 	db	65	;'A'
  1204  00FEB5  4C                 	db	76	;'L'
  1205  00FEB6  47                 	db	71	;'G'
  1206  00FEB7  34                 	db	52	;'4'
  1207  00FEB8  3A                 	db	58	;':'
  1208  00FEB9  20                 	db	32
  1209  00FEBA  41                 	db	65	;'A'
  1210  00FEBB  4C                 	db	76	;'L'
  1211  00FEBC  4C                 	db	76	;'L'
  1212  00FEBD  20                 	db	32
  1213  00FEBE  43                 	db	67	;'C'
  1214  00FEBF  41                 	db	65	;'A'
  1215  00FEC0  4E                 	db	78	;'N'
  1216  00FEC1  53                 	db	83	;'S'
  1217  00FEC2  00                 	db	0
  1218  00FEC3                     STR_90:
  1219  00FEC3  54                 	db	84	;'T'
  1220  00FEC4  53                 	db	83	;'S'
  1221  00FEC5  54                 	db	84	;'T'
  1222  00FEC6  3A                 	db	58	;':'
  1223  00FEC7  20                 	db	32
  1224  00FEC8  44                 	db	68	;'D'
  1225  00FEC9  43                 	db	67	;'C'
  1226  00FECA  20                 	db	32
  1227  00FECB  4D                 	db	77	;'M'
  1228  00FECC  4F                 	db	79	;'O'
  1229  00FECD  54                 	db	84	;'T'
  1230  00FECE  4F                 	db	79	;'O'
  1231  00FECF  52                 	db	82	;'R'
  1232  00FED0  53                 	db	83	;'S'
  1233  00FED1  00                 	db	0
  1234  00FED2                     STR_70:
  1235  00FED2  41                 	db	65	;'A'
  1236  00FED3  4C                 	db	76	;'L'
  1237  00FED4  47                 	db	71	;'G'
  1238  00FED5  4F                 	db	79	;'O'
  1239  00FED6  52                 	db	82	;'R'
  1240  00FED7  49                 	db	73	;'I'
  1241  00FED8  54                 	db	84	;'T'
  1242  00FED9  48                 	db	72	;'H'
  1243  00FEDA  4D                 	db	77	;'M'
  1244  00FEDB  20                 	db	32
  1245  00FEDC  54                 	db	84	;'T'
  1246  00FEDD  45                 	db	69	;'E'
  1247  00FEDE  53                 	db	83	;'S'
  1248  00FEDF  54                 	db	84	;'T'
  1249  00FEE0  00                 	db	0
  1250  00FEE1                     STR_91:
  1251  00FEE1  50                 	db	80	;'P'
  1252  00FEE2  49                 	db	73	;'I'
  1253  00FEE3  4E                 	db	78	;'N'
  1254  00FEE4  20                 	db	32
  1255  00FEE5  52                 	db	82	;'R'
  1256  00FEE6  41                 	db	65	;'A'
  1257  00FEE7  35                 	db	53	;'5'
  1258  00FEE8  20                 	db	32
  1259  00FEE9  48                 	db	72	;'H'
  1260  00FEEA  49                 	db	73	;'I'
  1261  00FEEB  47                 	db	71	;'G'
  1262  00FEEC  48                 	db	72	;'H'
  1263  00FEED  2E                 	db	46
  1264  00FEEE  00                 	db	0
  1265  00FEEF                     STR_73:
  1266  00FEEF  41                 	db	65	;'A'
  1267  00FEF0  4C                 	db	76	;'L'
  1268  00FEF1  47                 	db	71	;'G'
  1269  00FEF2  32                 	db	50	;'2'
  1270  00FEF3  3A                 	db	58	;':'
  1271  00FEF4  20                 	db	32
  1272  00FEF5  31                 	db	49	;'1'
  1273  00FEF6  32                 	db	50	;'2'
  1274  00FEF7  20                 	db	32
  1275  00FEF8  43                 	db	67	;'C'
  1276  00FEF9  41                 	db	65	;'A'
  1277  00FEFA  4E                 	db	78	;'N'
  1278  00FEFB  53                 	db	83	;'S'
  1279  00FEFC  00                 	db	0
  1280  00FEFD                     STR_76:
  1281  00FEFD  41                 	db	65	;'A'
  1282  00FEFE  4C                 	db	76	;'L'
  1283  00FEFF  47                 	db	71	;'G'
  1284  00FF00  35                 	db	53	;'5'
  1285  00FF01  3A                 	db	58	;':'
  1286  00FF02  20                 	db	32
  1287  00FF03  4E                 	db	78	;'N'
  1288  00FF04  4F                 	db	79	;'O'
  1289  00FF05  20                 	db	32
  1290  00FF06  43                 	db	67	;'C'
  1291  00FF07  41                 	db	65	;'A'
  1292  00FF08  4E                 	db	78	;'N'
  1293  00FF09  53                 	db	83	;'S'
  1294  00FF0A  00                 	db	0
  1295  00FF0B                     STR_71:
  1296  00FF0B  50                 	db	80	;'P'
  1297  00FF0C  55                 	db	85	;'U'
  1298  00FF0D  53                 	db	83	;'S'
  1299  00FF0E  48                 	db	72	;'H'
  1300  00FF0F  20                 	db	32
  1301  00FF10  54                 	db	84	;'T'
  1302  00FF11  4F                 	db	79	;'O'
  1303  00FF12  20                 	db	32
  1304  00FF13  53                 	db	83	;'S'
  1305  00FF14  54                 	db	84	;'T'
  1306  00FF15  41                 	db	65	;'A'
  1307  00FF16  52                 	db	82	;'R'
  1308  00FF17  54                 	db	84	;'T'
  1309  00FF18  00                 	db	0
  1310  00FF19                     STR_23:
  1311  00FF19  25                 	db	37
  1312  00FF1A  64                 	db	100	;'d'
  1313  00FF1B  20                 	db	32
  1314  00FF1C  4D                 	db	77	;'M'
  1315  00FF1D  49                 	db	73	;'I'
  1316  00FF1E  4E                 	db	78	;'N'
  1317  00FF1F  20                 	db	32
  1318  00FF20  25                 	db	37
  1319  00FF21  64                 	db	100	;'d'
  1320  00FF22  20                 	db	32
  1321  00FF23  53                 	db	83	;'S'
  1322  00FF24  45                 	db	69	;'E'
  1323  00FF25  43                 	db	67	;'C'
  1324  00FF26  00                 	db	0
  1325  00FF27                     STR_2:
  1326  00FF27  54                 	db	84	;'T'
  1327  00FF28  49                 	db	73	;'I'
  1328  00FF29  4D                 	db	77	;'M'
  1329  00FF2A  45                 	db	69	;'E'
  1330  00FF2B  3A                 	db	58	;':'
  1331  00FF2C  20                 	db	32
  1332  00FF2D  25                 	db	37
  1333  00FF2E  64                 	db	100	;'d'
  1334  00FF2F  3A                 	db	58	;':'
  1335  00FF30  25                 	db	37
  1336  00FF31  30                 	db	48	;'0'
  1337  00FF32  32                 	db	50	;'2'
  1338  00FF33  64                 	db	100	;'d'
  1339  00FF34  00                 	db	0
  1340  00FF35                     STR_79:
  1341  00FF35  54                 	db	84	;'T'
  1342  00FF36  53                 	db	83	;'S'
  1343  00FF37  54                 	db	84	;'T'
  1344  00FF38  3A                 	db	58	;':'
  1345  00FF39  20                 	db	32
  1346  00FF3A  49                 	db	73	;'I'
  1347  00FF3B  52                 	db	82	;'R'
  1348  00FF3C  20                 	db	32
  1349  00FF3D  53                 	db	83	;'S'
  1350  00FF3E  4E                 	db	78	;'N'
  1351  00FF3F  53                 	db	83	;'S'
  1352  00FF40  52                 	db	82	;'R'
  1353  00FF41  00                 	db	0
  1354  00FF42                     STR_65:
  1355  00FF42  54                 	db	84	;'T'
  1356  00FF43  49                 	db	73	;'I'
  1357  00FF44  4D                 	db	77	;'M'
  1358  00FF45  45                 	db	69	;'E'
  1359  00FF46  20                 	db	32
  1360  00FF47  25                 	db	37
  1361  00FF48  64                 	db	100	;'d'
  1362  00FF49  3A                 	db	58	;':'
  1363  00FF4A  25                 	db	37
  1364  00FF4B  30                 	db	48	;'0'
  1365  00FF4C  32                 	db	50	;'2'
  1366  00FF4D  64                 	db	100	;'d'
  1367  00FF4E  00                 	db	0
  1368  00FF4F                     STR_74:
  1369  00FF4F  41                 	db	65	;'A'
  1370  00FF50  4C                 	db	76	;'L'
  1371  00FF51  47                 	db	71	;'G'
  1372  00FF52  33                 	db	51	;'3'
  1373  00FF53  3A                 	db	58	;':'
  1374  00FF54  20                 	db	32
  1375  00FF55  31                 	db	49	;'1'
  1376  00FF56  20                 	db	32
  1377  00FF57  43                 	db	67	;'C'
  1378  00FF58  41                 	db	65	;'A'
  1379  00FF59  4E                 	db	78	;'N'
  1380  00FF5A  00                 	db	0
  1381  00FF5B                     STR_93:
  1382  00FF5B  50                 	db	80	;'P'
  1383  00FF5C  49                 	db	73	;'I'
  1384  00FF5D  4E                 	db	78	;'N'
  1385  00FF5E  20                 	db	32
  1386  00FF5F  52                 	db	82	;'R'
  1387  00FF60  41                 	db	65	;'A'
  1388  00FF61  33                 	db	51	;'3'
  1389  00FF62  2E                 	db	46
  1390  00FF63  2E                 	db	46
  1391  00FF64  2E                 	db	46
  1392  00FF65  00                 	db	0
  1393  00FF66                     STR_95:
  1394  00FF66  50                 	db	80	;'P'
  1395  00FF67  49                 	db	73	;'I'
  1396  00FF68  4E                 	db	78	;'N'
  1397  00FF69  20                 	db	32
  1398  00FF6A  52                 	db	82	;'R'
  1399  00FF6B  41                 	db	65	;'A'
  1400  00FF6C  34                 	db	52	;'4'
  1401  00FF6D  2E                 	db	46
  1402  00FF6E  2E                 	db	46
  1403  00FF6F  2E                 	db	46
  1404  00FF70  00                 	db	0
  1405  00FF71                     STR_113:
  1406  00FF71  50                 	db	80	;'P'
  1407  00FF72  55                 	db	85	;'U'
  1408  00FF73  53                 	db	83	;'S'
  1409  00FF74  48                 	db	72	;'H'
  1410  00FF75  45                 	db	69	;'E'
  1411  00FF76  52                 	db	82	;'R'
  1412  00FF77  20                 	db	32
  1413  00FF78  54                 	db	84	;'T'
  1414  00FF79  53                 	db	83	;'S'
  1415  00FF7A  54                 	db	84	;'T'
  1416  00FF7B  00                 	db	0
  1417  00FF7C                     STR_64:
  1418  00FF7C  53                 	db	83	;'S'
  1419  00FF7D  4F                 	db	79	;'O'
  1420  00FF7E  52                 	db	82	;'R'
  1421  00FF7F  54                 	db	84	;'T'
  1422  00FF80  49                 	db	73	;'I'
  1423  00FF81  4E                 	db	78	;'N'
  1424  00FF82  47                 	db	71	;'G'
  1425  00FF83  2E                 	db	46
  1426  00FF84  2E                 	db	46
  1427  00FF85  2E                 	db	46
  1428  00FF86  00                 	db	0
  1429  00FF87                     STR_84:
  1430  00FF87  54                 	db	84	;'T'
  1431  00FF88  53                 	db	83	;'S'
  1432  00FF89  54                 	db	84	;'T'
  1433  00FF8A  3A                 	db	58	;':'
  1434  00FF8B  20                 	db	32
  1435  00FF8C  43                 	db	67	;'C'
  1436  00FF8D  4F                 	db	79	;'O'
  1437  00FF8E  4E                 	db	78	;'N'
  1438  00FF8F  44                 	db	68	;'D'
  1439  00FF90  00                 	db	0
  1440  00FF91                     STR_88:
  1441  00FF91  41                 	db	65	;'A'
  1442  00FF92  43                 	db	67	;'C'
  1443  00FF93  54                 	db	84	;'T'
  1444  00FF94  55                 	db	85	;'U'
  1445  00FF95  41                 	db	65	;'A'
  1446  00FF96  54                 	db	84	;'T'
  1447  00FF97  4F                 	db	79	;'O'
  1448  00FF98  52                 	db	82	;'R'
  1449  00FF99  53                 	db	83	;'S'
  1450  00FF9A  00                 	db	0
  1451  00FF9B                     STR_22:
  1452  00FF9B  44                 	db	68	;'D'
  1453  00FF9C  55                 	db	85	;'U'
  1454  00FF9D  52                 	db	82	;'R'
  1455  00FF9E  41                 	db	65	;'A'
  1456  00FF9F  54                 	db	84	;'T'
  1457  00FFA0  49                 	db	73	;'I'
  1458  00FFA1  4F                 	db	79	;'O'
  1459  00FFA2  4E                 	db	78	;'N'
  1460  00FFA3  3A                 	db	58	;':'
  1461  00FFA4  00                 	db	0
  1462  00FFA5                     STR_86:
  1463  00FFA5  43                 	db	67	;'C'
  1464  00FFA6  4F                 	db	79	;'O'
  1465  00FFA7  4E                 	db	78	;'N'
  1466  00FFA8  44                 	db	68	;'D'
  1467  00FFA9  3A                 	db	58	;':'
  1468  00FFAA  20                 	db	32
  1469  00FFAB  25                 	db	37
  1470  00FFAC  64                 	db	100	;'d'
  1471  00FFAD  00                 	db	0
  1472  00FFAE                     STR_77:
  1473  00FFAE  53                 	db	83	;'S'
  1474  00FFAF  45                 	db	69	;'E'
  1475  00FFB0  4E                 	db	78	;'N'
  1476  00FFB1  53                 	db	83	;'S'
  1477  00FFB2  4F                 	db	79	;'O'
  1478  00FFB3  52                 	db	82	;'R'
  1479  00FFB4  53                 	db	83	;'S'
  1480  00FFB5  00                 	db	0
  1481  00FFB6                     STR_116:
  1482  00FFB6  28                 	db	40
  1483  00FFB7  6E                 	db	110	;'n'
  1484  00FFB8  75                 	db	117	;'u'
  1485  00FFB9  6C                 	db	108	;'l'
  1486  00FFBA  6C                 	db	108	;'l'
  1487  00FFBB  29                 	db	41
  1488  00FFBC  00                 	db	0
  1489  00FFBD                     STR_67:
  1490  00FFBD  46                 	db	70	;'F'
  1491  00FFBE  41                 	db	65	;'A'
  1492  00FFBF  49                 	db	73	;'I'
  1493  00FFC0  4C                 	db	76	;'L'
  1494  00FFC1  45                 	db	69	;'E'
  1495  00FFC2  44                 	db	68	;'D'
  1496  00FFC3  00                 	db	0
  1497  00FFC4                     STR_7:
  1498  00FFC4  53                 	db	83	;'S'
  1499  00FFC5  54                 	db	84	;'T'
  1500  00FFC6  41                 	db	65	;'A'
  1501  00FFC7  52                 	db	82	;'R'
  1502  00FFC8  54                 	db	84	;'T'
  1503  00FFC9  3A                 	db	58	;':'
  1504  00FFCA  00                 	db	0
  1505  00FFCB                     STR_9:
  1506  00FFCB  46                 	db	70	;'F'
  1507  00FFCC  45                 	db	69	;'E'
  1508  00FFCD  42                 	db	66	;'B'
  1509  00FFCE  00                 	db	0
  1510  00FFCF                     STR_19:
  1511  00FFCF  44                 	db	68	;'D'
  1512  00FFD0  45                 	db	69	;'E'
  1513  00FFD1  43                 	db	67	;'C'
  1514  00FFD2  00                 	db	0
  1515  00FFD3                     STR_15:
  1516  00FFD3  41                 	db	65	;'A'
  1517  00FFD4  55                 	db	85	;'U'
  1518  00FFD5  47                 	db	71	;'G'
  1519  00FFD6  00                 	db	0
  1520  00FFD7                     STR_14:
  1521  00FFD7  4A                 	db	74	;'J'
  1522  00FFD8  55                 	db	85	;'U'
  1523  00FFD9  4C                 	db	76	;'L'
  1524  00FFDA  00                 	db	0
  1525  00FFDB                     STR_8:
  1526  00FFDB  4A                 	db	74	;'J'
  1527  00FFDC  41                 	db	65	;'A'
  1528  00FFDD  4E                 	db	78	;'N'
  1529  00FFDE  00                 	db	0
  1530  00FFDF                     STR_13:
  1531  00FFDF  4A                 	db	74	;'J'
  1532  00FFE0  55                 	db	85	;'U'
  1533  00FFE1  4E                 	db	78	;'N'
  1534  00FFE2  00                 	db	0
  1535  00FFE3                     STR_16:
  1536  00FFE3  53                 	db	83	;'S'
  1537  00FFE4  45                 	db	69	;'E'
  1538  00FFE5  50                 	db	80	;'P'
  1539  00FFE6  00                 	db	0
  1540  00FFE7                     STR_10:
  1541  00FFE7  4D                 	db	77	;'M'
  1542  00FFE8  41                 	db	65	;'A'
  1543  00FFE9  52                 	db	82	;'R'
  1544  00FFEA  00                 	db	0
  1545  00FFEB                     STR_11:
  1546  00FFEB  41                 	db	65	;'A'
  1547  00FFEC  50                 	db	80	;'P'
  1548  00FFED  52                 	db	82	;'R'
  1549  00FFEE  00                 	db	0
  1550  00FFEF                     STR_20:
  1551  00FFEF  45                 	db	69	;'E'
  1552  00FFF0  52                 	db	82	;'R'
  1553  00FFF1  52                 	db	82	;'R'
  1554  00FFF2  00                 	db	0
  1555  00FFF3                     STR_17:
  1556  00FFF3  4F                 	db	79	;'O'
  1557  00FFF4  43                 	db	67	;'C'
  1558  00FFF5  54                 	db	84	;'T'
  1559  00FFF6  00                 	db	0
  1560  00FFF7                     STR_18:
  1561  00FFF7  4E                 	db	78	;'N'
  1562  00FFF8  4F                 	db	79	;'O'
  1563  00FFF9  56                 	db	86	;'V'
  1564  00FFFA  00                 	db	0
  1565  00FFFB                     STR_12:
  1566  00FFFB  4D                 	db	77	;'M'
  1567  00FFFC  41                 	db	65	;'A'
  1568  00FFFD  59                 	db	89	;'Y'
  1569  00FFFE  00                 	db	0
  1570  0000                     
  1571                           ; #config settings
  1572  00FFFF  00                 	db	0	; dummy byte at the end
  1573  0000                     
  1574                           	psect	cinit
  1575  004058                     __pcinit:
  1576                           	opt stack 0
  1577  004058                     start_initialization:
  1578                           	opt stack 0
  1579  004058                     __initialization:
  1580                           	opt stack 0
  1581                           
  1582                           ; Initialize objects allocated to BANK1 (8 bytes)
  1583                           ; load TBLPTR registers with __pidataBANK1
  1584  004058  0E72               	movlw	low __pidataBANK1
  1585  00405A  6EF6               	movwf	tblptrl,c
  1586  00405C  0E47               	movlw	high __pidataBANK1
  1587  00405E  6EF7               	movwf	tblptrh,c
  1588  004060  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1589  004062  6EF8               	movwf	tblptru,c
  1590  004064  EE01  F02F         	lfsr	0,__pdataBANK1
  1591  004068  EE10 F008          	lfsr	1,8
  1592  00406C                     copy_data0:
  1593  00406C  0009               	tblrd		*+
  1594  00406E  CFF5 FFEE          	movff	tablat,postinc0
  1595  004072  50E5               	movf	postdec1,w,c
  1596  004074  50E1               	movf	fsr1l,w,c
  1597  004076  E1FA               	bnz	copy_data0
  1598                           
  1599                           ; Clear objects allocated to BANK1 (47 bytes)
  1600  004078  EE01  F000         	lfsr	0,__pbssBANK1
  1601  00407C  0E2F               	movlw	47
  1602  00407E                     clear_0:
  1603  00407E  6AEE               	clrf	postinc0,c
  1604  004080  06E8               	decf	wreg,f,c
  1605  004082  E1FD               	bnz	clear_0
  1606                           
  1607                           ; Clear objects allocated to BANK0 (38 bytes)
  1608  004084  EE00  F0DA         	lfsr	0,__pbssBANK0
  1609  004088  0E26               	movlw	38
  1610  00408A                     clear_1:
  1611  00408A  6AEE               	clrf	postinc0,c
  1612  00408C  06E8               	decf	wreg,f,c
  1613  00408E  E1FD               	bnz	clear_1
  1614                           
  1615                           ; Clear objects allocated to COMRAM (35 bytes)
  1616  004090  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1617  004094  0E23               	movlw	35
  1618  004096                     clear_2:
  1619  004096  6AEE               	clrf	postinc0,c
  1620  004098  06E8               	decf	wreg,f,c
  1621  00409A  E1FD               	bnz	clear_2
  1622  00409C                     end_of_initialization:
  1623                           	opt stack 0
  1624  00409C                     __end_of__initialization:
  1625                           	opt stack 0
  1626  00409C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1627  00409E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1628  0040A0  0100               	movlb	0
  1629  0040A2  EF92  F01A         	goto	_main	;jump to C main() function
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1l	equ	0xFE1
  1638                           
  1639                           	psect	bssCOMRAM
  1640  00005B                     __pbssCOMRAM:
  1641                           	opt stack 0
  1642  00005B                     _back:
  1643                           	opt stack 0
  1644  00005B                     	ds	2
  1645  00005D                     _count_can_no_lab:
  1646                           	opt stack 0
  1647  00005D                     	ds	2
  1648  00005F                     _count_can_w_lab:
  1649                           	opt stack 0
  1650  00005F                     	ds	2
  1651  000061                     _count_pop_no_tab:
  1652                           	opt stack 0
  1653  000061                     	ds	2
  1654  000063                     _count_pop_w_tab:
  1655                           	opt stack 0
  1656  000063                     	ds	2
  1657  000065                     _debug:
  1658                           	opt stack 0
  1659  000065                     	ds	2
  1660  000067                     _down:
  1661                           	opt stack 0
  1662  000067                     	ds	2
  1663  000069                     _enter:
  1664                           	opt stack 0
  1665  000069                     	ds	2
  1666  00006B                     _f_ID_receive:
  1667                           	opt stack 0
  1668  00006B                     	ds	2
  1669  00006D                     _f_can_coming_to_ID:
  1670                           	opt stack 0
  1671  00006D                     	ds	2
  1672  00006F                     _f_can_coming_to_distribution:
  1673                           	opt stack 0
  1674  00006F                     	ds	2
  1675  000071                     _f_lastCan:
  1676                           	opt stack 0
  1677  000071                     	ds	2
  1678  000073                     _first:
  1679                           	opt stack 0
  1680  000073                     	ds	2
  1681  000075                     _firstboot:
  1682                           	opt stack 0
  1683  000075                     	ds	2
  1684  000077                     _up:
  1685                           	opt stack 0
  1686  000077                     	ds	2
  1687  000079                     _was_low_1:
  1688                           	opt stack 0
  1689  000079                     	ds	2
  1690  00007B                     _was_low_3:
  1691                           	opt stack 0
  1692  00007B                     	ds	2
  1693  00007D                     _input:
  1694                           	opt stack 0
  1695  00007D                     	ds	1
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           postdec1	equ	0xFE5
  1703                           fsr1l	equ	0xFE1
  1704                           
  1705                           	psect	bssBANK0
  1706  0000DA                     __pbssBANK0:
  1707                           	opt stack 0
  1708  0000DA                     _IR_signal:
  1709                           	opt stack 0
  1710  0000DA                     	ds	2
  1711  0000DC                     _MAG_signal:
  1712                           	opt stack 0
  1713  0000DC                     	ds	2
  1714  0000DE                     _RTCflag:
  1715                           	opt stack 0
  1716  0000DE                     	ds	2
  1717  0000E0                     _cur_state:
  1718                           	opt stack 0
  1719  0000E0                     	ds	2
  1720  0000E2                     _f_loadingNewCan:
  1721                           	opt stack 0
  1722  0000E2                     	ds	2
  1723  0000E4                     _i:
  1724                           	opt stack 0
  1725  0000E4                     	ds	2
  1726  0000E6                     _log:
  1727                           	opt stack 0
  1728  0000E6                     	ds	2
  1729  0000E8                     _log_completion:
  1730                           	opt stack 0
  1731  0000E8                     	ds	2
  1732  0000EA                     _log_count_can_no_lab:
  1733                           	opt stack 0
  1734  0000EA                     	ds	2
  1735  0000EC                     _log_count_can_w_lab:
  1736                           	opt stack 0
  1737  0000EC                     	ds	2
  1738  0000EE                     _log_count_pop_no_tab:
  1739                           	opt stack 0
  1740  0000EE                     	ds	2
  1741  0000F0                     _log_count_pop_w_tab:
  1742                           	opt stack 0
  1743  0000F0                     	ds	2
  1744  0000F2                     _log_count_total:
  1745                           	opt stack 0
  1746  0000F2                     	ds	2
  1747  0000F4                     _log_total_time:
  1748                           	opt stack 0
  1749  0000F4                     	ds	2
  1750  0000F6                     _logstate:
  1751                           	opt stack 0
  1752  0000F6                     	ds	2
  1753  0000F8                     _total_time:
  1754                           	opt stack 0
  1755  0000F8                     	ds	2
  1756  0000FA                     _var:
  1757                           	opt stack 0
  1758  0000FA                     	ds	2
  1759  0000FC                     _machine_state:
  1760                           	opt stack 0
  1761  0000FC                     	ds	1
  1762  0000FD                     _sel:
  1763                           	opt stack 0
  1764  0000FD                     	ds	1
  1765  0000FE                     _count_total:
  1766                           	opt stack 0
  1767  0000FE                     	ds	2
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           postdec1	equ	0xFE5
  1775                           fsr1l	equ	0xFE1
  1776                           
  1777                           	psect	bssBANK1
  1778  000100                     __pbssBANK1:
  1779                           	opt stack 0
  1780  000100                     _log_startTime:
  1781                           	opt stack 0
  1782  000100                     	ds	14
  1783  00010E                     _startTime:
  1784                           	opt stack 0
  1785  00010E                     	ds	14
  1786  00011C                     _servoTimes:
  1787                           	opt stack 0
  1788  00011C                     	ds	8
  1789  000124                     _time:
  1790                           	opt stack 0
  1791  000124                     	ds	7
  1792  00012B                     _cur_can:
  1793                           	opt stack 0
  1794  00012B                     	ds	2
  1795  00012D                     _f_can_distributed:
  1796                           	opt stack 0
  1797  00012D                     	ds	2
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           postdec1	equ	0xFE5
  1805                           fsr1l	equ	0xFE1
  1806                           
  1807                           	psect	dataBANK1
  1808  00012F                     __pdataBANK1:
  1809                           	opt stack 0
  1810  00012F                     UI@F3225:
  1811                           	opt stack 0
  1812  00012F                     	ds	4
  1813  000133                     printRTC@F3216:
  1814                           	opt stack 0
  1815  000133                     	ds	4
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postdec1	equ	0xFE5
  1823                           fsr1l	equ	0xFE1
  1824                           
  1825                           	psect	cstackBANK0
  1826  000080                     __pcstackBANK0:
  1827                           	opt stack 0
  1828  000080                     ??_PortTests:
  1829  000080                     ??_isdigit:
  1830  000080                     ??_readADC:
  1831  000080                     ??_I2C_Master_Wait:
  1832  000080                     ?___wmul:
  1833                           	opt stack 0
  1834  000080                     ?___awmod:
  1835                           	opt stack 0
  1836  000080                     ?___lwdiv:
  1837                           	opt stack 0
  1838  000080                     ?___lldiv:
  1839                           	opt stack 0
  1840  000080                     lcdNibble@temp:
  1841                           	opt stack 0
  1842  000080                     initTime@m:
  1843                           	opt stack 0
  1844  000080                     updateServoPosition@time_us:
  1845                           	opt stack 0
  1846  000080                     EEPROM_read@address:
  1847                           	opt stack 0
  1848  000080                     ___wmul@multiplier:
  1849                           	opt stack 0
  1850  000080                     ___awmod@dividend:
  1851                           	opt stack 0
  1852  000080                     ___lwdiv@dividend:
  1853                           	opt stack 0
  1854  000080                     strcpy@to:
  1855                           	opt stack 0
  1856  000080                     ___lldiv@dividend:
  1857                           	opt stack 0
  1858                           
  1859                           ; 4 bytes @ 0x0
  1860  000080                     	ds	1
  1861  000081                     readADC@channel:
  1862                           	opt stack 0
  1863  000081                     I2C_Master_Read@a:
  1864                           	opt stack 0
  1865  000081                     lcdNibble@data:
  1866                           	opt stack 0
  1867  000081                     initTime@h:
  1868                           	opt stack 0
  1869  000081                     _isdigit$1936:
  1870                           	opt stack 0
  1871  000081                     I2C_Master_Write@d:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x1
  1875  000081                     	ds	1
  1876  000082                     ??_readIR:
  1877  000082                     ??_readMAG:
  1878  000082                     I2C_Master_Read@temp:
  1879                           	opt stack 0
  1880  000082                     lcdInst@data:
  1881                           	opt stack 0
  1882  000082                     putch@data:
  1883                           	opt stack 0
  1884  000082                     initTime@w:
  1885                           	opt stack 0
  1886  000082                     isdigit@c:
  1887                           	opt stack 0
  1888  000082                     updateServoPosition@timer:
  1889                           	opt stack 0
  1890  000082                     ___wmul@multiplicand:
  1891                           	opt stack 0
  1892  000082                     ___awmod@divisor:
  1893                           	opt stack 0
  1894  000082                     ___lwdiv@divisor:
  1895                           	opt stack 0
  1896  000082                     strcpy@from:
  1897                           	opt stack 0
  1898                           
  1899                           ; 2 bytes @ 0x2
  1900  000082                     	ds	1
  1901  000083                     ??_initLCD:
  1902  000083                     initTime@DD:
  1903                           	opt stack 0
  1904  000083                     getRTC@i:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x3
  1908  000083                     	ds	1
  1909  000084                     ??_updateServoPosition:
  1910  000084                     initTime@MM:
  1911                           	opt stack 0
  1912  000084                     ___awmod@counter:
  1913                           	opt stack 0
  1914  000084                     readIR@res:
  1915                           	opt stack 0
  1916  000084                     readMAG@res:
  1917                           	opt stack 0
  1918  000084                     ___wmul@product:
  1919                           	opt stack 0
  1920  000084                     ___lwdiv@quotient:
  1921                           	opt stack 0
  1922  000084                     strcpy@cp:
  1923                           	opt stack 0
  1924  000084                     ___lldiv@divisor:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x4
  1928  000084                     	ds	1
  1929  000085                     ??_initSortTimer:
  1930  000085                     initTime@YY:
  1931                           	opt stack 0
  1932  000085                     ___awmod@sign:
  1933                           	opt stack 0
  1934                           
  1935                           ; 1 bytes @ 0x5
  1936  000085                     	ds	1
  1937  000086                     ??_getIR:
  1938  000086                     ??_getMAG:
  1939  000086                     ?___awdiv:
  1940                           	opt stack 0
  1941  000086                     initTime@s:
  1942                           	opt stack 0
  1943  000086                     ___lwdiv@counter:
  1944                           	opt stack 0
  1945  000086                     updateServoPosition@my_time:
  1946                           	opt stack 0
  1947  000086                     ___awdiv@dividend:
  1948                           	opt stack 0
  1949                           
  1950                           ; 2 bytes @ 0x6
  1951  000086                     	ds	1
  1952  000087                     ?___lwmod:
  1953                           	opt stack 0
  1954  000087                     ___lwmod@dividend:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x7
  1958  000087                     	ds	1
  1959  000088                     ??_ID:
  1960  000088                     ??_Distribution:
  1961  000088                     ??_initServos:
  1962  000088                     initSortTimer@i:
  1963                           	opt stack 0
  1964  000088                     ___awdiv@divisor:
  1965                           	opt stack 0
  1966  000088                     ___lldiv@quotient:
  1967                           	opt stack 0
  1968                           
  1969                           ; 4 bytes @ 0x8
  1970  000088                     	ds	1
  1971  000089                     ___lwmod@divisor:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x9
  1975  000089                     	ds	1
  1976  00008A                     ___awdiv@counter:
  1977                           	opt stack 0
  1978  00008A                     ID@i:
  1979                           	opt stack 0
  1980                           
  1981                           ; 2 bytes @ 0xA
  1982  00008A                     	ds	1
  1983  00008B                     ___awdiv@sign:
  1984                           	opt stack 0
  1985  00008B                     ___lwmod@counter:
  1986                           	opt stack 0
  1987                           
  1988                           ; 1 bytes @ 0xB
  1989  00008B                     	ds	1
  1990  00008C                     ___lldiv@counter:
  1991                           	opt stack 0
  1992  00008C                     ___awdiv@quotient:
  1993                           	opt stack 0
  1994  00008C                     ID@sensor_outputs:
  1995                           	opt stack 0
  1996                           
  1997                           ; 6 bytes @ 0xC
  1998  00008C                     	ds	1
  1999  00008D                     I2C_Master_Init@c:
  2000                           	opt stack 0
  2001                           
  2002                           ; 4 bytes @ 0xD
  2003  00008D                     	ds	1
  2004  00008E                     ?_printf:
  2005                           	opt stack 0
  2006  00008E                     printf@f:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0xE
  2010  00008E                     	ds	3
  2011  000091                     ??_I2C_Master_Init:
  2012                           
  2013                           ; 1 bytes @ 0x11
  2014  000091                     	ds	4
  2015  000095                     ??_loadRTC:
  2016                           
  2017                           ; 1 bytes @ 0x15
  2018  000095                     	ds	1
  2019  000096                     loadRTC@i:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0x16
  2023  000096                     	ds	4
  2024  00009A                     ??_printf:
  2025                           
  2026                           ; 1 bytes @ 0x1A
  2027  00009A                     	ds	4
  2028  00009E                     printf@prec:
  2029                           	opt stack 0
  2030                           
  2031                           ; 1 bytes @ 0x1E
  2032  00009E                     	ds	1
  2033  00009F                     printf@cp:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x1F
  2037  00009F                     	ds	2
  2038  0000A1                     printf@ap:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x21
  2042  0000A1                     	ds	2
  2043  0000A3                     printf@len:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x23
  2047  0000A3                     	ds	2
  2048  0000A5                     printf@val:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0x25
  2052  0000A5                     	ds	2
  2053  0000A7                     printf@flag:
  2054                           	opt stack 0
  2055                           
  2056                           ; 1 bytes @ 0x27
  2057  0000A7                     	ds	1
  2058  0000A8                     printf@c:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0x28
  2062  0000A8                     	ds	1
  2063  0000A9                     printf@width:
  2064                           	opt stack 0
  2065                           
  2066                           ; 2 bytes @ 0x29
  2067  0000A9                     	ds	2
  2068  0000AB                     ??_printRTC:
  2069  0000AB                     ??_algorithmTest:
  2070  0000AB                     ??_sensorTest:
  2071  0000AB                     ??_actuatorTest:
  2072  0000AB                     ??_PortTestA5:
  2073  0000AB                     ??_ToggleTestA5:
  2074  0000AB                     ??_PusherTestA5:
  2075  0000AB                     ??_BothServos:
  2076  0000AB                     EEPROM_write@address:
  2077                           	opt stack 0
  2078                           
  2079                           ; 2 bytes @ 0x2B
  2080  0000AB                     	ds	1
  2081  0000AC                     ToggleTestA5@on:
  2082                           	opt stack 0
  2083                           
  2084                           ; 2 bytes @ 0x2C
  2085  0000AC                     	ds	1
  2086  0000AD                     EEPROM_write@data:
  2087                           	opt stack 0
  2088  0000AD                     actuatorTest@i_1631:
  2089                           	opt stack 0
  2090  0000AD                     sensorTest@res:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x2D
  2094  0000AD                     	ds	1
  2095  0000AE                     ??_EEPROM_write:
  2096  0000AE                     actuatorTest@i_1638:
  2097                           	opt stack 0
  2098  0000AE                     printRTC@INT_time:
  2099                           	opt stack 0
  2100                           
  2101                           ; 14 bytes @ 0x2E
  2102  0000AE                     	ds	1
  2103  0000AF                     EEPROM_write@i:
  2104                           	opt stack 0
  2105  0000AF                     actuatorTest@i_1639:
  2106                           	opt stack 0
  2107                           
  2108                           ; 1 bytes @ 0x2F
  2109  0000AF                     	ds	1
  2110  0000B0                     EEPROM_write@i_1322:
  2111                           	opt stack 0
  2112  0000B0                     actuatorTest@i_1641:
  2113                           	opt stack 0
  2114                           
  2115                           ; 1 bytes @ 0x30
  2116  0000B0                     	ds	1
  2117  0000B1                     ??_Loading:
  2118  0000B1                     logRun@num:
  2119                           	opt stack 0
  2120  0000B1                     actuatorTest@i_1642:
  2121                           	opt stack 0
  2122                           
  2123                           ; 1 bytes @ 0x31
  2124  0000B1                     	ds	1
  2125  0000B2                     logRun@byte1:
  2126                           	opt stack 0
  2127  0000B2                     actuatorTest@i_1644:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x32
  2131  0000B2                     	ds	1
  2132  0000B3                     logRun@byte2:
  2133                           	opt stack 0
  2134  0000B3                     actuatorTest@i_1645:
  2135                           	opt stack 0
  2136  0000B3                     Loading@addr:
  2137                           	opt stack 0
  2138                           
  2139                           ; 2 bytes @ 0x33
  2140  0000B3                     	ds	1
  2141  0000B4                     logRun@byte3:
  2142                           	opt stack 0
  2143  0000B4                     actuatorTest@i_1647:
  2144                           	opt stack 0
  2145                           
  2146                           ; 1 bytes @ 0x34
  2147  0000B4                     	ds	1
  2148  0000B5                     Loading@byte1:
  2149                           	opt stack 0
  2150  0000B5                     logRun@byte_i:
  2151                           	opt stack 0
  2152  0000B5                     actuatorTest@i_1648:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x35
  2156  0000B5                     	ds	1
  2157  0000B6                     logRun@byte11:
  2158                           	opt stack 0
  2159  0000B6                     actuatorTest@i_1650:
  2160                           	opt stack 0
  2161                           
  2162                           ; 1 bytes @ 0x36
  2163  0000B6                     	ds	1
  2164  0000B7                     actuatorTest@i_1651:
  2165                           	opt stack 0
  2166  0000B7                     logRun@i:
  2167                           	opt stack 0
  2168                           
  2169                           ; 2 bytes @ 0x37
  2170  0000B7                     	ds	1
  2171  0000B8                     actuatorTest@i_1653:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0x38
  2175  0000B8                     	ds	1
  2176  0000B9                     actuatorTest@i_1654:
  2177                           	opt stack 0
  2178  0000B9                     logRun@addr:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x39
  2182  0000B9                     	ds	1
  2183  0000BA                     actuatorTest@i_1657:
  2184                           	opt stack 0
  2185                           
  2186                           ; 1 bytes @ 0x3A
  2187  0000BA                     	ds	1
  2188  0000BB                     actuatorTest@i_1658:
  2189                           	opt stack 0
  2190                           
  2191                           ; 1 bytes @ 0x3B
  2192  0000BB                     	ds	1
  2193  0000BC                     actuatorTest@i_1660:
  2194                           	opt stack 0
  2195  0000BC                     printRTC@RTC_month:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x3C
  2199  0000BC                     	ds	1
  2200  0000BD                     actuatorTest@i_1661:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x3D
  2204  0000BD                     	ds	1
  2205  0000BE                     actuatorTest@i_1663:
  2206                           	opt stack 0
  2207  0000BE                     printRTC@month:
  2208                           	opt stack 0
  2209                           
  2210                           ; 4 bytes @ 0x3E
  2211  0000BE                     	ds	1
  2212  0000BF                     actuatorTest@i_1664:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x3F
  2216  0000BF                     	ds	1
  2217  0000C0                     actuatorTest@i_1667:
  2218                           	opt stack 0
  2219                           
  2220                           ; 1 bytes @ 0x40
  2221  0000C0                     	ds	1
  2222  0000C1                     actuatorTest@i_1668:
  2223                           	opt stack 0
  2224                           
  2225                           ; 1 bytes @ 0x41
  2226  0000C1                     	ds	1
  2227  0000C2                     actuatorTest@i_1670:
  2228                           	opt stack 0
  2229  0000C2                     printRTC@i:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x42
  2233  0000C2                     	ds	1
  2234  0000C3                     actuatorTest@i_1671:
  2235                           	opt stack 0
  2236                           
  2237                           ; 1 bytes @ 0x43
  2238  0000C3                     	ds	1
  2239  0000C4                     ??_UI:
  2240  0000C4                     actuatorTest@i:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x44
  2244  0000C4                     	ds	2
  2245  0000C6                     ??_Test:
  2246  0000C6                     _UI$2292:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x46
  2250  0000C6                     	ds	2
  2251  0000C8                     UI@i:
  2252                           	opt stack 0
  2253                           
  2254                           ; 1 bytes @ 0x48
  2255  0000C8                     	ds	1
  2256  0000C9                     UI@i_409:
  2257                           	opt stack 0
  2258                           
  2259                           ; 1 bytes @ 0x49
  2260  0000C9                     	ds	1
  2261  0000CA                     UI@i_412:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x4A
  2265  0000CA                     	ds	1
  2266  0000CB                     UI@i_413:
  2267                           	opt stack 0
  2268                           
  2269                           ; 1 bytes @ 0x4B
  2270  0000CB                     	ds	1
  2271  0000CC                     UI@i_431:
  2272                           	opt stack 0
  2273                           
  2274                           ; 1 bytes @ 0x4C
  2275  0000CC                     	ds	1
  2276  0000CD                     UI@i_432:
  2277                           	opt stack 0
  2278                           
  2279                           ; 1 bytes @ 0x4D
  2280  0000CD                     	ds	1
  2281  0000CE                     UI@i_435:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x4E
  2285  0000CE                     	ds	1
  2286  0000CF                     UI@i_436:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x4F
  2290  0000CF                     	ds	1
  2291  0000D0                     UI@i_439:
  2292                           	opt stack 0
  2293                           
  2294                           ; 1 bytes @ 0x50
  2295  0000D0                     	ds	1
  2296  0000D1                     UI@i_440:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x51
  2300  0000D1                     	ds	1
  2301  0000D2                     UI@i_443:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x52
  2305  0000D2                     	ds	1
  2306  0000D3                     UI@i_444:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x53
  2310  0000D3                     	ds	1
  2311  0000D4                     UI@i_447:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x54
  2315  0000D4                     	ds	1
  2316  0000D5                     UI@i_448:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x55
  2320  0000D5                     	ds	1
  2321  0000D6                     UI@month:
  2322                           	opt stack 0
  2323                           
  2324                           ; 4 bytes @ 0x56
  2325  0000D6                     	ds	4
  2326  0000DA                     tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           postinc0	equ	0xFEE
  2331                           wreg	equ	0xFE8
  2332                           postdec1	equ	0xFE5
  2333                           fsr1l	equ	0xFE1
  2334                           
  2335                           ; 1 bytes @ 0x5A
  2336                           
  2337                           	psect	cstackCOMRAM
  2338  000001                     __pcstackCOMRAM:
  2339                           	opt stack 0
  2340  000001                     ??i2_I2C_Master_Wait:
  2341  000001                     ??i2_isdigit:
  2342  000001                     ?i2___wmul:
  2343                           	opt stack 0
  2344  000001                     ?i2___lwmod:
  2345                           	opt stack 0
  2346  000001                     i2lcdNibble@temp:
  2347                           	opt stack 0
  2348  000001                     i2EEPROM_read@address:
  2349                           	opt stack 0
  2350  000001                     i2___wmul@multiplier:
  2351                           	opt stack 0
  2352  000001                     i2___lwmod@dividend:
  2353                           	opt stack 0
  2354  000001                     i2strcpy@to:
  2355                           	opt stack 0
  2356                           
  2357                           ; 2 bytes @ 0x0
  2358  000001                     	ds	1
  2359  000002                     i2I2C_Master_Read@a:
  2360                           	opt stack 0
  2361  000002                     i2lcdNibble@data:
  2362                           	opt stack 0
  2363  000002                     i2_isdigit$1936:
  2364                           	opt stack 0
  2365  000002                     i2I2C_Master_Write@d:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x1
  2369  000002                     	ds	1
  2370  000003                     i2I2C_Master_Read@temp:
  2371                           	opt stack 0
  2372  000003                     i2lcdInst@data:
  2373                           	opt stack 0
  2374  000003                     i2putch@data:
  2375                           	opt stack 0
  2376  000003                     i2isdigit@c:
  2377                           	opt stack 0
  2378  000003                     i2___wmul@multiplicand:
  2379                           	opt stack 0
  2380  000003                     i2___lwmod@divisor:
  2381                           	opt stack 0
  2382  000003                     i2strcpy@from:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0x2
  2386  000003                     	ds	1
  2387  000004                     i2getRTC@i:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x3
  2391  000004                     	ds	1
  2392  000005                     i2___lwmod@counter:
  2393                           	opt stack 0
  2394  000005                     i2___wmul@product:
  2395                           	opt stack 0
  2396  000005                     i2strcpy@cp:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x4
  2400  000005                     	ds	1
  2401  000006                     ?i2___lwdiv:
  2402                           	opt stack 0
  2403  000006                     i2___lwdiv@dividend:
  2404                           	opt stack 0
  2405                           
  2406                           ; 2 bytes @ 0x5
  2407  000006                     	ds	1
  2408  000007                     retrieveLog@logNum:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0x6
  2412  000007                     	ds	1
  2413  000008                     i2___lwdiv@divisor:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x7
  2417  000008                     	ds	1
  2418  000009                     ??_retrieveLog:
  2419                           
  2420                           ; 1 bytes @ 0x8
  2421  000009                     	ds	1
  2422  00000A                     i2___lwdiv@quotient:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x9
  2426  00000A                     	ds	1
  2427  00000B                     retrieveLog@byte1:
  2428                           	opt stack 0
  2429                           
  2430                           ; 1 bytes @ 0xA
  2431  00000B                     	ds	1
  2432  00000C                     retrieveLog@byte2:
  2433                           	opt stack 0
  2434  00000C                     i2___lwdiv@counter:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0xB
  2438  00000C                     	ds	1
  2439  00000D                     ?i2_printf:
  2440                           	opt stack 0
  2441  00000D                     retrieveLog@byte3:
  2442                           	opt stack 0
  2443  00000D                     i2printf@f:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0xC
  2447  00000D                     	ds	1
  2448  00000E                     retrieveLog@i:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0xD
  2452  00000E                     	ds	2
  2453  000010                     retrieveLog@addr:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0xF
  2457  000010                     	ds	2
  2458  000012                     dispLogs@myLog:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0x11
  2462  000012                     	ds	2
  2463  000014                     
  2464                           ; 1 bytes @ 0x13
  2465  000014                     	ds	5
  2466  000019                     ??i2_printf:
  2467                           
  2468                           ; 1 bytes @ 0x18
  2469  000019                     	ds	4
  2470  00001D                     i2printf@prec:
  2471                           	opt stack 0
  2472                           
  2473                           ; 1 bytes @ 0x1C
  2474  00001D                     	ds	1
  2475  00001E                     i2printf@cp:
  2476                           	opt stack 0
  2477                           
  2478                           ; 2 bytes @ 0x1D
  2479  00001E                     	ds	2
  2480  000020                     i2printf@ap:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x1F
  2484  000020                     	ds	2
  2485  000022                     i2printf@len:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x21
  2489  000022                     	ds	2
  2490  000024                     i2printf@val:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x23
  2494  000024                     	ds	2
  2495  000026                     i2printf@flag:
  2496                           	opt stack 0
  2497                           
  2498                           ; 1 bytes @ 0x25
  2499  000026                     	ds	1
  2500  000027                     i2printf@c:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0x26
  2504  000027                     	ds	1
  2505  000028                     i2printf@width:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0x27
  2509  000028                     	ds	2
  2510  00002A                     ??_printSortTimer:
  2511  00002A                     ??i2_printRTC:
  2512  00002A                     ?_inputHandler:
  2513                           	opt stack 0
  2514                           
  2515                           ; 2 bytes @ 0x29
  2516  00002A                     	ds	2
  2517  00002C                     ??_inputHandler:
  2518                           
  2519                           ; 1 bytes @ 0x2B
  2520  00002C                     	ds	1
  2521  00002D                     printSortTimer@hour:
  2522                           	opt stack 0
  2523  00002D                     i2printRTC@INT_time:
  2524                           	opt stack 0
  2525                           
  2526                           ; 14 bytes @ 0x2C
  2527  00002D                     	ds	2
  2528  00002F                     printSortTimer@curTime:
  2529                           	opt stack 0
  2530                           
  2531                           ; 14 bytes @ 0x2E
  2532  00002F                     	ds	12
  2533  00003B                     i2printRTC@RTC_month:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x3A
  2537  00003B                     	ds	2
  2538  00003D                     printSortTimer@start_sec:
  2539                           	opt stack 0
  2540  00003D                     i2printRTC@month:
  2541                           	opt stack 0
  2542                           
  2543                           ; 4 bytes @ 0x3C
  2544  00003D                     	ds	2
  2545  00003F                     printSortTimer@cur_sec:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x3E
  2549  00003F                     	ds	2
  2550  000041                     printSortTimer@min:
  2551                           	opt stack 0
  2552  000041                     i2printRTC@i:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x40
  2556  000041                     	ds	2
  2557  000043                     ??_updateMenu:
  2558  000043                     printSortTimer@sec:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x42
  2562  000043                     	ds	2
  2563  000045                     _printSortTimer$2412:
  2564                           	opt stack 0
  2565                           
  2566                           ; 2 bytes @ 0x44
  2567  000045                     	ds	2
  2568  000047                     printSortTimer@timeDiff:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x46
  2572  000047                     	ds	2
  2573  000049                     printSortTimer@i:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0x48
  2577  000049                     	ds	2
  2578  00004B                     ??_handler:
  2579                           
  2580                           ; 1 bytes @ 0x4A
  2581  00004B                     	ds	16
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           postinc0	equ	0xFEE
  2587                           wreg	equ	0xFE8
  2588                           postdec1	equ	0xFE5
  2589                           fsr1l	equ	0xFE1
  2590                           
  2591 ;;
  2592 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2593 ;;
  2594 ;; *************** function _main *****************
  2595 ;; Defined at:
  2596 ;;		line 19 in file "main.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;Total ram usage:        0 bytes
  2615 ;; Hardware stack levels required when called:   13
  2616 ;; This function calls:
  2617 ;;		_I2C_Master_Init
  2618 ;;		_Test
  2619 ;;		_UI
  2620 ;;		_initLCD
  2621 ;;		_initTime
  2622 ;;		_initUI
  2623 ;;		_logRun
  2624 ;;		_machineConfig
  2625 ;;		_sort
  2626 ;;		_stopSignals
  2627 ;; This function is called by:
  2628 ;;		Startup code after reset
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text0
  2633  003524                     __ptext0:
  2634                           	opt stack 0
  2635  003524                     _main:
  2636                           	opt stack 18
  2637                           
  2638                           ;main.c: 20: machineConfig();
  2639                           
  2640                           ;incstack = 0
  2641  003524  EC28  F01F         	call	_machineConfig	;wreg free
  2642                           
  2643                           ;main.c: 21: initLCD();
  2644  003528  EC9F  F020         	call	_initLCD	;wreg free
  2645                           
  2646                           ;main.c: 24: RTCflag = 0;
  2647  00352C  0E00               	movlw	0
  2648  00352E  0100               	movlb	0	; () banked
  2649  003530  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2650  003532  0E00               	movlw	0
  2651  003534  6FDE               	movwf	_RTCflag& (0+255),b
  2652                           
  2653                           ;main.c: 25: if(RTCflag){
  2654  003536  0100               	movlb	0	; () banked
  2655  003538  51DE               	movf	_RTCflag& (0+255),w,b
  2656  00353A  0100               	movlb	0	; () banked
  2657  00353C  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2658  00353E  B4D8               	btfsc	status,2,c
  2659  003540  D016               	goto	l8043
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2663  003542  0E20               	movlw	32
  2664  003544  0100               	movlb	0	; () banked
  2665  003546  6F80               	movwf	initTime@m& (0+255),b
  2666  003548  0E15               	movlw	21
  2667  00354A  0100               	movlb	0	; () banked
  2668  00354C  6F81               	movwf	initTime@h& (0+255),b
  2669  00354E  0E04               	movlw	4
  2670  003550  0100               	movlb	0	; () banked
  2671  003552  6F82               	movwf	initTime@w& (0+255),b
  2672  003554  0E15               	movlw	21
  2673  003556  0100               	movlb	0	; () banked
  2674  003558  6F83               	movwf	initTime@DD& (0+255),b
  2675  00355A  0E03               	movlw	3
  2676  00355C  0100               	movlb	0	; () banked
  2677  00355E  6F84               	movwf	initTime@MM& (0+255),b
  2678  003560  0E17               	movlw	23
  2679  003562  0100               	movlb	0	; () banked
  2680  003564  6F85               	movwf	initTime@YY& (0+255),b
  2681  003566  0E42               	movlw	66
  2682  003568  EC3E  F023         	call	_initTime
  2683                           
  2684                           ;main.c: 27: }
  2685  00356C  D00B               	goto	l8045
  2686  00356E                     l8043:
  2687                           
  2688                           ;main.c: 28: else{
  2689                           ;main.c: 29: I2C_Master_Init(10000);
  2690  00356E  0E10               	movlw	16
  2691  003570  0100               	movlb	0	; () banked
  2692  003572  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2693  003574  0E27               	movlw	39
  2694  003576  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2695  003578  0E00               	movlw	0
  2696  00357A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2697  00357C  0E00               	movlw	0
  2698  00357E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2699  003580  ECF8  F01E         	call	_I2C_Master_Init	;wreg free
  2700  003584                     l8045:
  2701                           
  2702                           ;main.c: 30: }
  2703                           ;main.c: 32: initUI();
  2704  003584  EC5B  F022         	call	_initUI	;wreg free
  2705                           
  2706                           ;main.c: 33: first = 1;
  2707  003588  0E00               	movlw	0
  2708  00358A  6E74               	movwf	_first+1,c
  2709  00358C  0E01               	movlw	1
  2710  00358E  6E73               	movwf	_first,c
  2711                           
  2712                           ;main.c: 44: switch(machine_state){
  2713                           
  2714                           ;main.c: 43: while(1){
  2715  003590  D017               	goto	l8067
  2716  003592                     l8049:
  2717                           
  2718                           ;main.c: 46: UI();
  2719  003592  EC65  F004         	call	_UI	;wreg free
  2720                           
  2721                           ;main.c: 47: break;
  2722  003596  D014               	goto	l8067
  2723  003598                     l8051:
  2724                           
  2725                           ;main.c: 49: sort();
  2726  003598  EC2D  F023         	call	_sort	;wreg free
  2727                           
  2728                           ;main.c: 50: break;
  2729  00359C  D011               	goto	l8067
  2730  00359E                     l8053:
  2731                           
  2732                           ;main.c: 52: stopSignals();
  2733  00359E  EC6A  F023         	call	_stopSignals	;wreg free
  2734                           
  2735                           ;main.c: 53: logRun();
  2736  0035A2  EC78  F017         	call	_logRun	;wreg free
  2737                           
  2738                           ;main.c: 54: first = 1;
  2739  0035A6  0E00               	movlw	0
  2740  0035A8  6E74               	movwf	_first+1,c
  2741  0035AA  0E01               	movlw	1
  2742  0035AC  6E73               	movwf	_first,c
  2743                           
  2744                           ;main.c: 55: UI();
  2745  0035AE  EC65  F004         	call	_UI	;wreg free
  2746                           
  2747                           ;main.c: 56: break;
  2748  0035B2  D006               	goto	l8067
  2749  0035B4                     l8061:
  2750                           
  2751                           ;main.c: 58: Test();
  2752  0035B4  EC31  F019         	call	_Test	;wreg free
  2753                           
  2754                           ;main.c: 59: break;
  2755  0035B8  D003               	goto	l8067
  2756  0035BA                     l8063:
  2757                           
  2758                           ;main.c: 61: stopSignals();
  2759  0035BA  EC6A  F023         	call	_stopSignals	;wreg free
  2760  0035BE                     l487:
  2761  0035BE  D7FF               	goto	l487
  2762  0035C0                     l8067:
  2763  0035C0  0100               	movlb	0	; () banked
  2764  0035C2  51FC               	movf	_machine_state& (0+255),w,b
  2765                           
  2766                           ; Switch size 1, requested type "space"
  2767                           ; Number of cases is 5, Range of values is 0 to 4
  2768                           ; switch strategies available:
  2769                           ; Name         Instructions Cycles
  2770                           ; simple_byte           16     9 (average)
  2771                           ;	Chosen strategy is simple_byte
  2772  0035C4  0A00               	xorlw	0	; case 0
  2773  0035C6  B4D8               	btfsc	status,2,c
  2774  0035C8  D7E4               	goto	l8049
  2775  0035CA  0A01               	xorlw	1	; case 1
  2776  0035CC  B4D8               	btfsc	status,2,c
  2777  0035CE  D7E4               	goto	l8051
  2778  0035D0  0A03               	xorlw	3	; case 2
  2779  0035D2  B4D8               	btfsc	status,2,c
  2780  0035D4  D7E4               	goto	l8053
  2781  0035D6  0A01               	xorlw	1	; case 3
  2782  0035D8  B4D8               	btfsc	status,2,c
  2783  0035DA  D7EC               	goto	l8061
  2784  0035DC  0A07               	xorlw	7	; case 4
  2785  0035DE  B4D8               	btfsc	status,2,c
  2786  0035E0  D7EC               	goto	l8063
  2787                           
  2788                           ; BSR set to: 0
  2789                           
  2790                           ; BSR set to: 0
  2791  0035E2  D7EE               	goto	l8067
  2792  0035E4                     __end_of_main:
  2793                           	opt stack 0
  2794                           tblptru	equ	0xFF8
  2795                           tblptrh	equ	0xFF7
  2796                           tblptrl	equ	0xFF6
  2797                           tablat	equ	0xFF5
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           postdec1	equ	0xFE5
  2801                           fsr1l	equ	0xFE1
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function _stopSignals *****************
  2805 ;; Defined at:
  2806 ;;		line 70 in file "main.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;		None
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;		None
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;Total ram usage:        0 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    7
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_main
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text1
  2835  0046D4                     __ptext1:
  2836                           	opt stack 0
  2837  0046D4                     _stopSignals:
  2838                           	opt stack 23
  2839                           
  2840                           ;main.c: 71: LATA = 0x00;
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;incstack = 0
  2844  0046D4  0E00               	movlw	0
  2845  0046D6  6E89               	movwf	3977,c	;volatile
  2846                           
  2847                           ;main.c: 72: LATB = 0x00;
  2848  0046D8  0E00               	movlw	0
  2849  0046DA  6E8A               	movwf	3978,c	;volatile
  2850                           
  2851                           ;main.c: 73: LATC = 0x00;
  2852  0046DC  0E00               	movlw	0
  2853  0046DE  6E8B               	movwf	3979,c	;volatile
  2854                           
  2855                           ;main.c: 74: LATD = 0x00;
  2856  0046E0  0E00               	movlw	0
  2857  0046E2  6E8C               	movwf	3980,c	;volatile
  2858                           
  2859                           ;main.c: 75: LATE = 0x00;
  2860  0046E4  0E00               	movlw	0
  2861  0046E6  6E8D               	movwf	3981,c	;volatile
  2862  0046E8  0012               	return		;funcret
  2863  0046EA                     __end_of_stopSignals:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           postdec1	equ	0xFE5
  2872                           fsr1l	equ	0xFE1
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _sort *****************
  2876 ;; Defined at:
  2877 ;;		line 55 in file "sort.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;Total ram usage:        0 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:   12
  2898 ;; This function calls:
  2899 ;;		_Distribution
  2900 ;;		_ID
  2901 ;;		_Loading
  2902 ;; This function is called by:
  2903 ;;		_main
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text2
  2908  00465A                     __ptext2:
  2909                           	opt stack 0
  2910  00465A                     _sort:
  2911                           	opt stack 18
  2912                           
  2913                           ;sort.c: 56: if(machine_state == Sorting_state){
  2914                           
  2915                           ;incstack = 0
  2916  00465A  0100               	movlb	0	; () banked
  2917  00465C  05FC               	decf	_machine_state& (0+255),w,b
  2918  00465E  B4D8               	btfsc	status,2,c
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;sort.c: 57: Loading();
  2922  004660  EC16  F018         	call	_Loading	;wreg free
  2923                           
  2924                           ;sort.c: 58: }
  2925                           ;sort.c: 59: if(machine_state == Sorting_state){
  2926  004664  0100               	movlb	0	; () banked
  2927  004666  05FC               	decf	_machine_state& (0+255),w,b
  2928  004668  B4D8               	btfsc	status,2,c
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;sort.c: 60: ID();
  2932  00466A  EC17  F016         	call	_ID	;wreg free
  2933                           
  2934                           ;sort.c: 61: }
  2935                           ;sort.c: 62: if(machine_state == Sorting_state){
  2936  00466E  0100               	movlb	0	; () banked
  2937  004670  05FC               	decf	_machine_state& (0+255),w,b
  2938  004672  A4D8               	btfss	status,2,c
  2939  004674  0012               	return	
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;sort.c: 63: Distribution();
  2943  004676  ECC9  F016         	call	_Distribution	;wreg free
  2944  00467A  0012               	return	
  2945  00467C                     __end_of_sort:
  2946                           	opt stack 0
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           postdec1	equ	0xFE5
  2954                           fsr1l	equ	0xFE1
  2955                           status	equ	0xFD8
  2956                           
  2957 ;; *************** function _Loading *****************
  2958 ;; Defined at:
  2959 ;;		line 67 in file "sort.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  addr            2   51[BANK0 ] unsigned short 
  2964 ;;  byte1           1   53[BANK0 ] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;Total ram usage:        5 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:   11
  2981 ;; This function calls:
  2982 ;;		_EEPROM_read
  2983 ;;		_EEPROM_write
  2984 ;;		_getIR
  2985 ;;		_initGlobalVars
  2986 ;;		_initServos
  2987 ;;		_initSortTimer
  2988 ;;		_lcdInst
  2989 ;; This function is called by:
  2990 ;;		_sort
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text3
  2995  00302C                     __ptext3:
  2996                           	opt stack 0
  2997  00302C                     _Loading:
  2998                           	opt stack 18
  2999                           
  3000                           ;sort.c: 68: if(first){
  3001                           
  3002                           ;incstack = 0
  3003  00302C  5073               	movf	_first,w,c
  3004  00302E  1074               	iorwf	_first+1,w,c
  3005  003030  B4D8               	btfsc	status,2,c
  3006  003032  D042               	goto	l6361
  3007                           
  3008                           ;sort.c: 69: initGlobalVars();
  3009  003034  EC5F  F01E         	call	_initGlobalVars	;wreg free
  3010                           
  3011                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3012  003038  0E01               	movlw	1
  3013  00303A  EC9B  F023         	call	_lcdInst
  3014  00303E  0E68               	movlw	104
  3015  003040  0100               	movlb	0	; () banked
  3016  003042  6FB1               	movwf	??_Loading& (0+255),b
  3017  003044  0EE4               	movlw	228
  3018  003046                     u6947:
  3019  003046  2EE8               	decfsz	wreg,f,c
  3020  003048  D7FE               	bra	u6947
  3021  00304A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3022  00304C  D7FC               	bra	u6947
  3023  00304E  F000               	nop	
  3024                           
  3025                           ;sort.c: 71: initSortTimer();
  3026  003050  ECAF  F01B         	call	_initSortTimer	;wreg free
  3027                           
  3028                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3029  003054  8A8B               	bsf	3979,5,c	;volatile
  3030                           
  3031                           ;sort.c: 77: sel = EEPROM_read(0);
  3032  003056  0E00               	movlw	0
  3033  003058  0100               	movlb	0	; () banked
  3034  00305A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3035  00305C  0E00               	movlw	0
  3036  00305E  6F80               	movwf	EEPROM_read@address& (0+255),b
  3037  003060  EC5E  F023         	call	_EEPROM_read	;wreg free
  3038  003064  0100               	movlb	0	; () banked
  3039  003066  6FFD               	movwf	_sel& (0+255),b
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3043  003068  0100               	movlb	0	; () banked
  3044  00306A  51FD               	movf	_sel& (0+255),w,b
  3045  00306C  0D0B               	mullw	11
  3046  00306E  0E01               	movlw	1
  3047  003070  24F3               	addwf	prodl,w,c
  3048  003072  0100               	movlb	0	; () banked
  3049  003074  6FB3               	movwf	Loading@addr& (0+255),b
  3050  003076  0E00               	movlw	0
  3051  003078  20F4               	addwfc	prodh,w,c
  3052  00307A  0100               	movlb	0	; () banked
  3053  00307C  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3057  00307E  0E7F               	movlw	127
  3058  003080  0100               	movlb	0	; () banked
  3059  003082  6FB5               	movwf	Loading@byte1& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3063  003084  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3064  003088  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3065  00308C  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3066  003090  ECB5  F019         	call	_EEPROM_write	;wreg free
  3067                           
  3068                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3069  003094  9A89               	bcf	3977,5,c	;volatile
  3070                           
  3071                           ;sort.c: 92: initServos();
  3072  003096  EC56  F01F         	call	_initServos	;wreg free
  3073                           
  3074                           ;sort.c: 93: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3075  00309A  0ECB               	movlw	203
  3076  00309C  0100               	movlb	0	; () banked
  3077  00309E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3078  0030A0  0EEC               	movlw	236
  3079  0030A2  0100               	movlb	0	; () banked
  3080  0030A4  6FB1               	movwf	??_Loading& (0+255),b
  3081  0030A6  0E84               	movlw	132
  3082  0030A8                     u6957:
  3083  0030A8  2EE8               	decfsz	wreg,f,c
  3084  0030AA  D7FE               	bra	u6957
  3085  0030AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3086  0030AE  D7FC               	bra	u6957
  3087  0030B0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3088  0030B2  D7FA               	bra	u6957
  3089  0030B4  F000               	nop	
  3090                           
  3091                           ;sort.c: 94: }
  3092  0030B6  0012               	return	
  3093  0030B8                     l6361:
  3094                           
  3095                           ;sort.c: 95: else{
  3096                           ;sort.c: 98: if(!f_loadingNewCan){
  3097  0030B8  0100               	movlb	0	; () banked
  3098  0030BA  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3099  0030BC  0100               	movlb	0	; () banked
  3100  0030BE  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3101  0030C0  A4D8               	btfss	status,2,c
  3102  0030C2  D017               	goto	l6377
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;sort.c: 100: getIR();
  3106  0030C4  ECD9  F01F         	call	_getIR	;wreg free
  3107                           
  3108                           ;sort.c: 102: if(!f_loadingNewCan){
  3109  0030C8  0100               	movlb	0	; () banked
  3110  0030CA  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3111  0030CC  0100               	movlb	0	; () banked
  3112  0030CE  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3113  0030D0  B4D8               	btfsc	status,2,c
  3114  0030D2  0012               	return	
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;sort.c: 106: else{
  3118                           ;sort.c: 107: count_total++;
  3119                           
  3120                           ; BSR set to: 0
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;sort.c: 104: }
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;sort.c: 103: return;
  3127  0030D4  0100               	movlb	0	; () banked
  3128  0030D6  4BFE               	infsnz	_count_total& (0+255),f,b
  3129  0030D8  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;sort.c: 108: if(count_total == 12){
  3133  0030DA  0E0C               	movlw	12
  3134  0030DC  0100               	movlb	0	; () banked
  3135  0030DE  19FE               	xorwf	_count_total& (0+255),w,b
  3136  0030E0  0100               	movlb	0	; () banked
  3137  0030E2  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3138  0030E4  A4D8               	btfss	status,2,c
  3139  0030E6  0012               	return	
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;sort.c: 109: f_lastCan = 1;
  3143  0030E8  0E00               	movlw	0
  3144  0030EA  6E72               	movwf	_f_lastCan+1,c
  3145  0030EC  0E01               	movlw	1
  3146  0030EE  6E71               	movwf	_f_lastCan,c
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;sort.c: 110: }
  3150                           ;sort.c: 111: }
  3151                           ;sort.c: 112: }
  3152                           
  3153                           ; BSR set to: 0
  3154  0030F0  0012               	return	
  3155  0030F2                     l6377:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;sort.c: 115: else if(f_ID_receive){
  3159  0030F2  506B               	movf	_f_ID_receive,w,c
  3160  0030F4  106C               	iorwf	_f_ID_receive+1,w,c
  3161  0030F6  B4D8               	btfsc	status,2,c
  3162  0030F8  0012               	return	
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;sort.c: 116: f_loadingNewCan = 0;
  3166  0030FA  0E00               	movlw	0
  3167  0030FC  0100               	movlb	0	; () banked
  3168  0030FE  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3169  003100  0E00               	movlw	0
  3170  003102  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;sort.c: 117: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3174  003104  0E3D               	movlw	61
  3175  003106  0100               	movlb	0	; () banked
  3176  003108  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3177  00310A  0EE1               	movlw	225
  3178  00310C  0100               	movlb	0	; () banked
  3179  00310E  6FB1               	movwf	??_Loading& (0+255),b
  3180  003110  0E3F               	movlw	63
  3181  003112                     u6967:
  3182  003112  2EE8               	decfsz	wreg,f,c
  3183  003114  D7FE               	bra	u6967
  3184  003116  2FB1               	decfsz	??_Loading& (0+255),f,b
  3185  003118  D7FC               	bra	u6967
  3186  00311A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3187  00311C  D7FA               	bra	u6967
  3188  00311E  D000               	nop2	
  3189                           
  3190                           ;sort.c: 118: LATAbits.LATA4 = 1;
  3191  003120  8889               	bsf	3977,4,c	;volatile
  3192                           
  3193                           ;sort.c: 119: _delay((unsigned long)((100)*(32000000/4000.0)));
  3194  003122  0E05               	movlw	5
  3195  003124  0100               	movlb	0	; () banked
  3196  003126  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3197  003128  0E0F               	movlw	15
  3198  00312A  0100               	movlb	0	; () banked
  3199  00312C  6FB1               	movwf	??_Loading& (0+255),b
  3200  00312E  0EF1               	movlw	241
  3201  003130                     u6977:
  3202  003130  2EE8               	decfsz	wreg,f,c
  3203  003132  D7FE               	bra	u6977
  3204  003134  2FB1               	decfsz	??_Loading& (0+255),f,b
  3205  003136  D7FC               	bra	u6977
  3206  003138  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3207  00313A  D7FA               	bra	u6977
  3208                           
  3209                           ;sort.c: 120: LATAbits.LATA4 = 0;
  3210  00313C  9889               	bcf	3977,4,c	;volatile
  3211                           
  3212                           ;sort.c: 121: f_can_coming_to_ID = 1;
  3213  00313E  0E00               	movlw	0
  3214  003140  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3215  003142  0E01               	movlw	1
  3216  003144  6E6D               	movwf	_f_can_coming_to_ID,c
  3217  003146  0012               	return	
  3218  003148                     __end_of_Loading:
  3219                           	opt stack 0
  3220                           tblptru	equ	0xFF8
  3221                           tblptrh	equ	0xFF7
  3222                           tblptrl	equ	0xFF6
  3223                           tablat	equ	0xFF5
  3224                           prodh	equ	0xFF4
  3225                           prodl	equ	0xFF3
  3226                           postinc0	equ	0xFEE
  3227                           wreg	equ	0xFE8
  3228                           postdec1	equ	0xFE5
  3229                           fsr1l	equ	0xFE1
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function _initSortTimer *****************
  3233 ;; Defined at:
  3234 ;;		line 253 in file "sort.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;		None
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  i               2    8[BANK0 ] int 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  1    wreg      void 
  3241 ;; Registers used:
  3242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:        5 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:   10
  3255 ;; This function calls:
  3256 ;;		_getRTC
  3257 ;; This function is called by:
  3258 ;;		_Loading
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text4
  3263  00375E                     __ptext4:
  3264                           	opt stack 0
  3265  00375E                     _initSortTimer:
  3266                           	opt stack 18
  3267                           
  3268                           ;sort.c: 255: getRTC();
  3269                           
  3270                           ;incstack = 0
  3271  00375E  EC2A  F01D         	call	_getRTC	;wreg free
  3272                           
  3273                           ;sort.c: 256: for(int i = 0; i < 7; i++){
  3274  003762  0E00               	movlw	0
  3275  003764  0100               	movlb	0	; () banked
  3276  003766  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3277  003768  0E00               	movlw	0
  3278  00376A  6F88               	movwf	initSortTimer@i& (0+255),b
  3279  00376C                     l5967:
  3280                           
  3281                           ; BSR set to: 0
  3282  00376C  0100               	movlb	0	; () banked
  3283  00376E  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3284  003770  D008               	goto	l5971
  3285  003772  0100               	movlb	0	; () banked
  3286  003774  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3287  003776  E140               	bnz	l5977
  3288  003778  0E07               	movlw	7
  3289  00377A  0100               	movlb	0	; () banked
  3290  00377C  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3291  00377E  B0D8               	btfsc	status,0,c
  3292  003780  D03B               	goto	l5977
  3293  003782                     l5971:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;sort.c: 257: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3297  003782  0E24               	movlw	low _time
  3298  003784  0100               	movlb	0	; () banked
  3299  003786  2588               	addwf	initSortTimer@i& (0+255),w,b
  3300  003788  6ED9               	movwf	fsr2l,c
  3301  00378A  0E01               	movlw	high _time
  3302  00378C  0100               	movlb	0	; () banked
  3303  00378E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3304  003790  6EDA               	movwf	fsr2h,c
  3305  003792  50DF               	movf	indf2,w,c
  3306  003794  0100               	movlb	0	; () banked
  3307  003796  6F85               	movwf	??_initSortTimer& (0+255),b
  3308  003798  0100               	movlb	0	; () banked
  3309  00379A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3310  00379C  0E0F               	movlw	15
  3311  00379E  1785               	andwf	??_initSortTimer& (0+255),f,b
  3312  0037A0  0E0F               	movlw	15
  3313  0037A2  0100               	movlb	0	; () banked
  3314  0037A4  1785               	andwf	??_initSortTimer& (0+255),f,b
  3315  0037A6  0100               	movlb	0	; () banked
  3316  0037A8  5185               	movf	??_initSortTimer& (0+255),w,b
  3317  0037AA  0D0A               	mullw	10
  3318  0037AC  0E24               	movlw	low _time
  3319  0037AE  0100               	movlb	0	; () banked
  3320  0037B0  2588               	addwf	initSortTimer@i& (0+255),w,b
  3321  0037B2  6ED9               	movwf	fsr2l,c
  3322  0037B4  0E01               	movlw	high _time
  3323  0037B6  0100               	movlb	0	; () banked
  3324  0037B8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3325  0037BA  6EDA               	movwf	fsr2h,c
  3326  0037BC  50DF               	movf	indf2,w,c
  3327  0037BE  0B0F               	andlw	15
  3328  0037C0  0100               	movlb	0	; () banked
  3329  0037C2  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3330  0037C4  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3331  0037C6  50F3               	movf	prodl,w,c
  3332  0037C8  0100               	movlb	0	; () banked
  3333  0037CA  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3334  0037CC  50F4               	movf	prodh,w,c
  3335  0037CE  0100               	movlb	0	; () banked
  3336  0037D0  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3337  0037D2  90D8               	bcf	status,0,c
  3338  0037D4  0100               	movlb	0	; () banked
  3339  0037D6  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3340  0037D8  6ED9               	movwf	fsr2l,c
  3341  0037DA  0100               	movlb	0	; () banked
  3342  0037DC  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3343  0037DE  6EDA               	movwf	fsr2h,c
  3344  0037E0  0E0E               	movlw	low _startTime
  3345  0037E2  26D9               	addwf	fsr2l,f,c
  3346  0037E4  0E01               	movlw	high _startTime
  3347  0037E6  22DA               	addwfc	fsr2h,f,c
  3348  0037E8  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3349  0037EC  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3350                           
  3351                           ; BSR set to: 0
  3352  0037F0  0100               	movlb	0	; () banked
  3353  0037F2  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3354  0037F4  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3355  0037F6  D7BA               	goto	l5967
  3356  0037F8                     l5977:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;sort.c: 258: }
  3360                           ;sort.c: 260: T0CON = 0b00010111;
  3361  0037F8  0E17               	movlw	23
  3362  0037FA  6ED5               	movwf	4053,c	;volatile
  3363                           
  3364                           ;sort.c: 269: TMR0H = 0b10000101;
  3365  0037FC  0E85               	movlw	133
  3366  0037FE  6ED7               	movwf	4055,c	;volatile
  3367                           
  3368                           ;sort.c: 270: TMR0L = 0b11101110;
  3369  003800  0EEE               	movlw	238
  3370  003802  6ED6               	movwf	4054,c	;volatile
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;sort.c: 271: TMR0ON = 1;
  3374  003804  8ED5               	bsf	4053,7,c	;volatile
  3375                           
  3376                           ; BSR set to: 0
  3377  003806  0012               	return		;funcret
  3378  003808                     __end_of_initSortTimer:
  3379                           	opt stack 0
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           postinc0	equ	0xFEE
  3387                           wreg	equ	0xFE8
  3388                           postdec1	equ	0xFE5
  3389                           fsr1l	equ	0xFE1
  3390                           indf2	equ	0xFDF
  3391                           postinc2	equ	0xFDE
  3392                           postdec2	equ	0xFDD
  3393                           fsr2h	equ	0xFDA
  3394                           fsr2l	equ	0xFD9
  3395                           status	equ	0xFD8
  3396                           
  3397 ;; *************** function _initGlobalVars *****************
  3398 ;; Defined at:
  3399 ;;		line 234 in file "sort.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;Total ram usage:        0 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    7
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_Loading
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text5
  3428  003CBE                     __ptext5:
  3429                           	opt stack 0
  3430  003CBE                     _initGlobalVars:
  3431                           	opt stack 21
  3432                           
  3433                           ;sort.c: 236: first = 0;
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;incstack = 0
  3437  003CBE  0E00               	movlw	0
  3438  003CC0  6E74               	movwf	_first+1,c
  3439  003CC2  0E00               	movlw	0
  3440  003CC4  6E73               	movwf	_first,c
  3441                           
  3442                           ;sort.c: 239: f_loadingNewCan = 0;
  3443  003CC6  0E00               	movlw	0
  3444  003CC8  0100               	movlb	0	; () banked
  3445  003CCA  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3446  003CCC  0E00               	movlw	0
  3447  003CCE  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3448                           
  3449                           ;sort.c: 240: f_lastCan = 0;
  3450  003CD0  0E00               	movlw	0
  3451  003CD2  6E72               	movwf	_f_lastCan+1,c
  3452  003CD4  0E00               	movlw	0
  3453  003CD6  6E71               	movwf	_f_lastCan,c
  3454                           
  3455                           ;sort.c: 241: f_ID_receive = 1;
  3456  003CD8  0E00               	movlw	0
  3457  003CDA  6E6C               	movwf	_f_ID_receive+1,c
  3458  003CDC  0E01               	movlw	1
  3459  003CDE  6E6B               	movwf	_f_ID_receive,c
  3460                           
  3461                           ;sort.c: 242: f_can_coming_to_ID = 0;
  3462  003CE0  0E00               	movlw	0
  3463  003CE2  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3464  003CE4  0E00               	movlw	0
  3465  003CE6  6E6D               	movwf	_f_can_coming_to_ID,c
  3466                           
  3467                           ;sort.c: 243: f_can_coming_to_distribution = 0;
  3468  003CE8  0E00               	movlw	0
  3469  003CEA  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3470  003CEC  0E00               	movlw	0
  3471  003CEE  6E6F               	movwf	_f_can_coming_to_distribution,c
  3472                           
  3473                           ;sort.c: 244: f_can_distributed = 0;
  3474  003CF0  0E00               	movlw	0
  3475  003CF2  0101               	movlb	1	; () banked
  3476  003CF4  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3477  003CF6  0E00               	movlw	0
  3478  003CF8  6F2D               	movwf	_f_can_distributed& (0+255),b
  3479                           
  3480                           ;sort.c: 247: count_total = 0;
  3481  003CFA  0E00               	movlw	0
  3482  003CFC  0100               	movlb	0	; () banked
  3483  003CFE  6FFF               	movwf	(_count_total+1)& (0+255),b
  3484  003D00  0E00               	movlw	0
  3485  003D02  6FFE               	movwf	_count_total& (0+255),b
  3486                           
  3487                           ;sort.c: 248: count_pop_no_tab = 0;
  3488  003D04  0E00               	movlw	0
  3489  003D06  6E62               	movwf	_count_pop_no_tab+1,c
  3490  003D08  0E00               	movlw	0
  3491  003D0A  6E61               	movwf	_count_pop_no_tab,c
  3492                           
  3493                           ;sort.c: 249: count_pop_w_tab = 0;
  3494  003D0C  0E00               	movlw	0
  3495  003D0E  6E64               	movwf	_count_pop_w_tab+1,c
  3496  003D10  0E00               	movlw	0
  3497  003D12  6E63               	movwf	_count_pop_w_tab,c
  3498                           
  3499                           ;sort.c: 250: count_can_w_lab = 0;
  3500  003D14  0E00               	movlw	0
  3501  003D16  6E60               	movwf	_count_can_w_lab+1,c
  3502  003D18  0E00               	movlw	0
  3503  003D1A  6E5F               	movwf	_count_can_w_lab,c
  3504                           
  3505                           ;sort.c: 251: count_can_no_lab = 0;
  3506  003D1C  0E00               	movlw	0
  3507  003D1E  6E5E               	movwf	_count_can_no_lab+1,c
  3508  003D20  0E00               	movlw	0
  3509  003D22  6E5D               	movwf	_count_can_no_lab,c
  3510                           
  3511                           ; BSR set to: 0
  3512  003D24  0012               	return		;funcret
  3513  003D26                     __end_of_initGlobalVars:
  3514                           	opt stack 0
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           postinc0	equ	0xFEE
  3522                           wreg	equ	0xFE8
  3523                           postdec1	equ	0xFE5
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _getIR *****************
  3533 ;; Defined at:
  3534 ;;		line 311 in file "sort.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;		None
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;		None
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      void 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0, cstack
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;Total ram usage:        2 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    9
  3555 ;; This function calls:
  3556 ;;		_readIR
  3557 ;; This function is called by:
  3558 ;;		_Loading
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           	psect	text6
  3563  003FB2                     __ptext6:
  3564                           	opt stack 0
  3565  003FB2                     _getIR:
  3566                           	opt stack 19
  3567                           
  3568                           ;sort.c: 312: readIR();
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;incstack = 0
  3572  003FB2  EC53  F020         	call	_readIR	;wreg free
  3573                           
  3574                           ;sort.c: 314: if(IR_signal==1){
  3575  003FB6  0100               	movlb	0	; () banked
  3576  003FB8  05DA               	decf	_IR_signal& (0+255),w,b
  3577  003FBA  0100               	movlb	0	; () banked
  3578  003FBC  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3579  003FBE  A4D8               	btfss	status,2,c
  3580  003FC0  0012               	return	
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;sort.c: 315: _delay((unsigned long)((500)*(32000000/4000.0)));
  3584  003FC2  0E15               	movlw	21
  3585  003FC4  0100               	movlb	0	; () banked
  3586  003FC6  6F87               	movwf	(??_getIR+1)& (0+255),b
  3587  003FC8  0E4B               	movlw	75
  3588  003FCA  0100               	movlb	0	; () banked
  3589  003FCC  6F86               	movwf	??_getIR& (0+255),b
  3590  003FCE  0EBE               	movlw	190
  3591  003FD0                     u6987:
  3592  003FD0  2EE8               	decfsz	wreg,f,c
  3593  003FD2  D7FE               	bra	u6987
  3594  003FD4  2F86               	decfsz	??_getIR& (0+255),f,b
  3595  003FD6  D7FC               	bra	u6987
  3596  003FD8  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3597  003FDA  D7FA               	bra	u6987
  3598  003FDC  F000               	nop	
  3599                           
  3600                           ;sort.c: 316: readIR();
  3601  003FDE  EC53  F020         	call	_readIR	;wreg free
  3602                           
  3603                           ;sort.c: 317: if(IR_signal==1){
  3604  003FE2  0100               	movlb	0	; () banked
  3605  003FE4  05DA               	decf	_IR_signal& (0+255),w,b
  3606  003FE6  0100               	movlb	0	; () banked
  3607  003FE8  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3608  003FEA  A4D8               	btfss	status,2,c
  3609  003FEC  D006               	goto	l6059
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 318: f_loadingNewCan = 1;
  3613  003FEE  0E00               	movlw	0
  3614  003FF0  0100               	movlb	0	; () banked
  3615  003FF2  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3616  003FF4  0E01               	movlw	1
  3617  003FF6  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3618                           
  3619                           ;sort.c: 319: }
  3620  003FF8  0012               	return	
  3621  003FFA                     l6059:
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;sort.c: 320: else{
  3625                           ;sort.c: 321: f_loadingNewCan = 0;
  3626  003FFA  0E00               	movlw	0
  3627  003FFC  0100               	movlb	0	; () banked
  3628  003FFE  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3629  004000  0E00               	movlw	0
  3630  004002  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3631                           
  3632                           ; BSR set to: 0
  3633  004004  0012               	return	
  3634  004006                     __end_of_getIR:
  3635                           	opt stack 0
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           postinc0	equ	0xFEE
  3643                           wreg	equ	0xFE8
  3644                           postdec1	equ	0xFE5
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function _readIR *****************
  3654 ;; Defined at:
  3655 ;;		line 23 in file "ADCFunctionality.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  res             2    4[BANK0 ] int 
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      void 
  3662 ;; Registers used:
  3663 ;;		wreg, status,2, status,0, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;Total ram usage:        4 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    8
  3676 ;; This function calls:
  3677 ;;		_readADC
  3678 ;; This function is called by:
  3679 ;;		_getIR
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text7
  3684  0040A6                     __ptext7:
  3685                           	opt stack 0
  3686  0040A6                     _readIR:
  3687                           	opt stack 19
  3688                           
  3689                           ;ADCFunctionality.c: 24: readADC(0);
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;incstack = 0
  3693  0040A6  0E00               	movlw	0
  3694  0040A8  ECB6  F022         	call	_readADC
  3695                           
  3696                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3697  0040AC  50C3               	movf	4035,w,c	;volatile
  3698  0040AE  CFC4 F082          	movff	4036,??_readIR	;volatile
  3699  0040B2  0100               	movlb	0	; () banked
  3700  0040B4  6B83               	clrf	(??_readIR+1)& (0+255),b
  3701  0040B6  C082  F083         	movff	??_readIR,??_readIR+1
  3702  0040BA  0100               	movlb	0	; () banked
  3703  0040BC  6B82               	clrf	??_readIR& (0+255),b
  3704  0040BE  0100               	movlb	0	; () banked
  3705  0040C0  1182               	iorwf	??_readIR& (0+255),w,b
  3706  0040C2  0100               	movlb	0	; () banked
  3707  0040C4  6F84               	movwf	readIR@res& (0+255),b
  3708  0040C6  0100               	movlb	0	; () banked
  3709  0040C8  5183               	movf	(??_readIR+1)& (0+255),w,b
  3710  0040CA  0100               	movlb	0	; () banked
  3711  0040CC  6F85               	movwf	(readIR@res+1)& (0+255),b
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  3715  0040CE  0100               	movlb	0	; () banked
  3716  0040D0  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3717  0040D2  D00A               	goto	u3730
  3718  0040D4  0EE9               	movlw	233
  3719  0040D6  0100               	movlb	0	; () banked
  3720  0040D8  5D84               	subwf	readIR@res& (0+255),w,b
  3721  0040DA  0E03               	movlw	3
  3722  0040DC  0100               	movlb	0	; () banked
  3723  0040DE  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3724  0040E0  A0D8               	btfss	status,0,c
  3725  0040E2  D002               	goto	u3730
  3726  0040E4  0E01               	movlw	1
  3727  0040E6  D001               	goto	u3740
  3728  0040E8                     u3730:
  3729  0040E8  0E00               	movlw	0
  3730  0040EA                     u3740:
  3731  0040EA  0100               	movlb	0	; () banked
  3732  0040EC  6FDA               	movwf	_IR_signal& (0+255),b
  3733  0040EE  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3734                           
  3735                           ; BSR set to: 0
  3736  0040F0  0012               	return		;funcret
  3737  0040F2                     __end_of_readIR:
  3738                           	opt stack 0
  3739                           tblptru	equ	0xFF8
  3740                           tblptrh	equ	0xFF7
  3741                           tblptrl	equ	0xFF6
  3742                           tablat	equ	0xFF5
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           postdec1	equ	0xFE5
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function _ID *****************
  3757 ;; Defined at:
  3758 ;;		line 125 in file "sort.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  i               2   10[BANK0 ] int 
  3763 ;;  sensor_outpu    6   12[BANK0 ] int [3]
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      void 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0, cstack
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;Total ram usage:       10 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:   10
  3780 ;; This function calls:
  3781 ;;		_getMAG
  3782 ;; This function is called by:
  3783 ;;		_sort
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text8
  3788  002C2E                     __ptext8:
  3789                           	opt stack 0
  3790  002C2E                     _ID:
  3791                           	opt stack 19
  3792                           
  3793                           ;sort.c: 126: if(f_can_coming_to_ID){
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;incstack = 0
  3797  002C2E  506D               	movf	_f_can_coming_to_ID,w,c
  3798  002C30  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3799  002C32  B4D8               	btfsc	status,2,c
  3800  002C34  0012               	return	
  3801                           
  3802                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3803  002C36  0E1F               	movlw	31
  3804  002C38  0100               	movlb	0	; () banked
  3805  002C3A  6F89               	movwf	(??_ID+1)& (0+255),b
  3806  002C3C  0E71               	movlw	113
  3807  002C3E  0100               	movlb	0	; () banked
  3808  002C40  6F88               	movwf	??_ID& (0+255),b
  3809  002C42  0E1E               	movlw	30
  3810  002C44                     u6997:
  3811  002C44  2EE8               	decfsz	wreg,f,c
  3812  002C46  D7FE               	bra	u6997
  3813  002C48  2F88               	decfsz	??_ID& (0+255),f,b
  3814  002C4A  D7FC               	bra	u6997
  3815  002C4C  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  3816  002C4E  D7FA               	bra	u6997
  3817  002C50  F000               	nop	
  3818                           
  3819                           ;sort.c: 133: int sensor_outputs[3];
  3820                           ;sort.c: 137: sensor_outputs[0] = PORTAbits.RA2;
  3821  002C52  A480               	btfss	3968,2,c	;volatile
  3822  002C54  D004               	goto	u4800
  3823  002C56  0100               	movlb	0	; () banked
  3824  002C58  6B88               	clrf	??_ID& (0+255),b
  3825  002C5A  2B88               	incf	??_ID& (0+255),f,b
  3826  002C5C  D002               	goto	u4808
  3827  002C5E                     u4800:
  3828  002C5E  0100               	movlb	0	; () banked
  3829  002C60  6B88               	clrf	??_ID& (0+255),b
  3830  002C62                     u4808:
  3831  002C62  0100               	movlb	0	; () banked
  3832  002C64  5188               	movf	??_ID& (0+255),w,b
  3833  002C66  0100               	movlb	0	; () banked
  3834  002C68  6F8C               	movwf	ID@sensor_outputs& (0+255),b
  3835  002C6A  6B8D               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;sort.c: 139: if(!sensor_outputs[0]){
  3839  002C6C  0100               	movlb	0	; () banked
  3840  002C6E  518C               	movf	ID@sensor_outputs& (0+255),w,b
  3841  002C70  0100               	movlb	0	; () banked
  3842  002C72  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3843  002C74  A4D8               	btfss	status,2,c
  3844  002C76  D029               	goto	l6411
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;sort.c: 140: getMAG();
  3848  002C78  EC51  F021         	call	_getMAG	;wreg free
  3849                           
  3850                           ;sort.c: 141: sensor_outputs[1] = MAG_signal;
  3851  002C7C  C0DC  F08E         	movff	_MAG_signal,ID@sensor_outputs+2
  3852  002C80  C0DD  F08F         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3853                           
  3854                           ;sort.c: 142: if(!sensor_outputs[1]){
  3855  002C84  0100               	movlb	0	; () banked
  3856  002C86  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3857  002C88  0100               	movlb	0	; () banked
  3858  002C8A  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3859  002C8C  A4D8               	btfss	status,2,c
  3860  002C8E  D01D               	goto	l6411
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;sort.c: 143: LATAbits.LATA3 = 1;
  3864  002C90  8689               	bsf	3977,3,c	;volatile
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;sort.c: 145: _delay((unsigned long)((600)*(32000000/4000.0)));
  3868  002C92  0E19               	movlw	25
  3869  002C94  0100               	movlb	0	; () banked
  3870  002C96  6F89               	movwf	(??_ID+1)& (0+255),b
  3871  002C98  0E5A               	movlw	90
  3872  002C9A  0100               	movlb	0	; () banked
  3873  002C9C  6F88               	movwf	??_ID& (0+255),b
  3874  002C9E  0EB1               	movlw	177
  3875  002CA0                     u7007:
  3876  002CA0  2EE8               	decfsz	wreg,f,c
  3877  002CA2  D7FE               	bra	u7007
  3878  002CA4  2F88               	decfsz	??_ID& (0+255),f,b
  3879  002CA6  D7FC               	bra	u7007
  3880  002CA8  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  3881  002CAA  D7FA               	bra	u7007
  3882  002CAC  D000               	nop2	
  3883                           
  3884                           ;sort.c: 146: sensor_outputs[2] = PORTAbits.RA2;
  3885  002CAE  A480               	btfss	3968,2,c	;volatile
  3886  002CB0  D004               	goto	u4830
  3887  002CB2  0100               	movlb	0	; () banked
  3888  002CB4  6B88               	clrf	??_ID& (0+255),b
  3889  002CB6  2B88               	incf	??_ID& (0+255),f,b
  3890  002CB8  D002               	goto	u4838
  3891  002CBA                     u4830:
  3892  002CBA  0100               	movlb	0	; () banked
  3893  002CBC  6B88               	clrf	??_ID& (0+255),b
  3894  002CBE                     u4838:
  3895  002CBE  0100               	movlb	0	; () banked
  3896  002CC0  5188               	movf	??_ID& (0+255),w,b
  3897  002CC2  0100               	movlb	0	; () banked
  3898  002CC4  6F90               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3899  002CC6  6B91               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;sort.c: 147: LATAbits.LATA3 = 0;
  3903  002CC8  9689               	bcf	3977,3,c	;volatile
  3904  002CCA                     l6411:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;sort.c: 148: }
  3908                           ;sort.c: 149: }
  3909                           ;sort.c: 157: if(!sensor_outputs[0]){
  3910  002CCA  0100               	movlb	0	; () banked
  3911  002CCC  518C               	movf	ID@sensor_outputs& (0+255),w,b
  3912  002CCE  0100               	movlb	0	; () banked
  3913  002CD0  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3914  002CD2  A4D8               	btfss	status,2,c
  3915  002CD4  D021               	goto	l6429
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;sort.c: 158: if(!sensor_outputs[1]){
  3919  002CD6  0100               	movlb	0	; () banked
  3920  002CD8  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3921  002CDA  0100               	movlb	0	; () banked
  3922  002CDC  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3923  002CDE  A4D8               	btfss	status,2,c
  3924  002CE0  D014               	goto	l6425
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;sort.c: 159: if(!sensor_outputs[2]){
  3928  002CE2  0100               	movlb	0	; () banked
  3929  002CE4  5190               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3930  002CE6  0100               	movlb	0	; () banked
  3931  002CE8  1191               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3932  002CEA  A4D8               	btfss	status,2,c
  3933  002CEC  D007               	goto	l6421
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;sort.c: 160: count_pop_no_tab++;
  3937  002CEE  4A61               	infsnz	_count_pop_no_tab,f,c
  3938  002CF0  2A62               	incf	_count_pop_no_tab+1,f,c
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;sort.c: 161: cur_can = 0;
  3942  002CF2  0E00               	movlw	0
  3943  002CF4  0101               	movlb	1	; () banked
  3944  002CF6  6F2C               	movwf	(_cur_can+1)& (0+255),b
  3945  002CF8  0E00               	movlw	0
  3946  002CFA  D014               	goto	L3
  3947  002CFC                     l6421:
  3948                           
  3949                           ;sort.c: 163: else{
  3950                           ;sort.c: 164: count_pop_w_tab++;
  3951  002CFC  4A63               	infsnz	_count_pop_w_tab,f,c
  3952  002CFE  2A64               	incf	_count_pop_w_tab+1,f,c
  3953                           
  3954                           ;sort.c: 165: cur_can = 1;
  3955  002D00  0E00               	movlw	0
  3956  002D02  0101               	movlb	1	; () banked
  3957  002D04  6F2C               	movwf	(_cur_can+1)& (0+255),b
  3958  002D06  0E01               	movlw	1
  3959  002D08  D00D               	goto	L3
  3960  002D0A                     l6425:
  3961                           
  3962                           ;sort.c: 168: else{
  3963                           ;sort.c: 169: count_can_w_lab++;
  3964  002D0A  4A5F               	infsnz	_count_can_w_lab,f,c
  3965  002D0C  2A60               	incf	_count_can_w_lab+1,f,c
  3966                           
  3967                           ;sort.c: 170: cur_can = 2;
  3968  002D0E  0E00               	movlw	0
  3969  002D10  0101               	movlb	1	; () banked
  3970  002D12  6F2C               	movwf	(_cur_can+1)& (0+255),b
  3971  002D14  0E02               	movlw	2
  3972  002D16  D006               	goto	L3
  3973  002D18                     l6429:
  3974                           
  3975                           ;sort.c: 173: else{
  3976                           ;sort.c: 174: count_can_no_lab++;
  3977  002D18  4A5D               	infsnz	_count_can_no_lab,f,c
  3978  002D1A  2A5E               	incf	_count_can_no_lab+1,f,c
  3979                           
  3980                           ;sort.c: 175: cur_can = 3;
  3981  002D1C  0E00               	movlw	0
  3982  002D1E  0101               	movlb	1	; () banked
  3983  002D20  6F2C               	movwf	(_cur_can+1)& (0+255),b
  3984  002D22  0E03               	movlw	3
  3985  002D24                     L3:
  3986  002D24  6F2B               	movwf	_cur_can& (0+255),b
  3987                           
  3988                           ; BSR set to: 1
  3989                           ;sort.c: 176: }
  3990                           ;sort.c: 180: for(int i=0;i<10000;i++)
  3991                           
  3992                           ; BSR set to: 1
  3993  002D26  0E00               	movlw	0
  3994  002D28  0100               	movlb	0	; () banked
  3995  002D2A  6F8B               	movwf	(ID@i+1)& (0+255),b
  3996  002D2C  0E00               	movlw	0
  3997  002D2E  6F8A               	movwf	ID@i& (0+255),b
  3998  002D30                     l6435:
  3999                           
  4000                           ; BSR set to: 0
  4001  002D30  0100               	movlb	0	; () banked
  4002  002D32  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4003  002D34  D008               	goto	l746
  4004  002D36  0E10               	movlw	16
  4005  002D38  0100               	movlb	0	; () banked
  4006  002D3A  5D8A               	subwf	ID@i& (0+255),w,b
  4007  002D3C  0E27               	movlw	39
  4008  002D3E  0100               	movlb	0	; () banked
  4009  002D40  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4010  002D42  B0D8               	btfsc	status,0,c
  4011  002D44  D00D               	goto	l747
  4012  002D46                     l746:
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;sort.c: 181: {
  4016                           ;sort.c: 182: LATCbits.LATC0 = 1;
  4017  002D46  808B               	bsf	3979,0,c	;volatile
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;sort.c: 183: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4021  002D48  0E1A               	movlw	26
  4022  002D4A                     u7017:
  4023  002D4A  2EE8               	decfsz	wreg,f,c
  4024  002D4C  D7FE               	bra	u7017
  4025  002D4E  D000               	nop2	
  4026                           
  4027                           ;sort.c: 184: LATCbits.LATC0 = 0;
  4028  002D50  908B               	bcf	3979,0,c	;volatile
  4029                           
  4030                           ;sort.c: 185: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4031  002D52  0EF0               	movlw	240
  4032  002D54                     u7027:
  4033  002D54  2EE8               	decfsz	wreg,f,c
  4034  002D56  D7FE               	bra	u7027
  4035  002D58  0100               	movlb	0	; () banked
  4036  002D5A  4B8A               	infsnz	ID@i& (0+255),f,b
  4037  002D5C  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4038  002D5E  D7E8               	goto	l6435
  4039  002D60                     l747:
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;sort.c: 186: }
  4043                           ;sort.c: 187: LATCbits.LATC0 = 0;
  4044  002D60  908B               	bcf	3979,0,c	;volatile
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;sort.c: 189: f_can_coming_to_distribution = 1;
  4048  002D62  0E00               	movlw	0
  4049  002D64  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4050  002D66  0E01               	movlw	1
  4051  002D68  6E6F               	movwf	_f_can_coming_to_distribution,c
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;sort.c: 190: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4055  002D6A  0E3D               	movlw	61
  4056  002D6C  0100               	movlb	0	; () banked
  4057  002D6E  6F89               	movwf	(??_ID+1)& (0+255),b
  4058  002D70  0EE1               	movlw	225
  4059  002D72  0100               	movlb	0	; () banked
  4060  002D74  6F88               	movwf	??_ID& (0+255),b
  4061  002D76  0E3F               	movlw	63
  4062  002D78                     u7037:
  4063  002D78  2EE8               	decfsz	wreg,f,c
  4064  002D7A  D7FE               	bra	u7037
  4065  002D7C  2F88               	decfsz	??_ID& (0+255),f,b
  4066  002D7E  D7FC               	bra	u7037
  4067  002D80  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4068  002D82  D7FA               	bra	u7037
  4069  002D84  D000               	nop2	
  4070                           
  4071                           ;sort.c: 191: LATCbits.LATC0 = 1;
  4072  002D86  808B               	bsf	3979,0,c	;volatile
  4073                           
  4074                           ;sort.c: 193: f_can_coming_to_ID = 0;
  4075  002D88  0E00               	movlw	0
  4076  002D8A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4077  002D8C  0E00               	movlw	0
  4078  002D8E  6E6D               	movwf	_f_can_coming_to_ID,c
  4079  002D90  0012               	return	
  4080  002D92                     __end_of_ID:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _getMAG *****************
  4100 ;; Defined at:
  4101 ;;		line 325 in file "sort.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      void 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;Total ram usage:        2 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    9
  4122 ;; This function calls:
  4123 ;;		_readMAG
  4124 ;; This function is called by:
  4125 ;;		_ID
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text9
  4130  0042A2                     __ptext9:
  4131                           	opt stack 0
  4132  0042A2                     _getMAG:
  4133                           	opt stack 19
  4134                           
  4135                           ;sort.c: 326: readMAG();
  4136                           
  4137                           ;incstack = 0
  4138  0042A2  EC79  F020         	call	_readMAG	;wreg free
  4139                           
  4140                           ;sort.c: 328: if(MAG_signal==1){
  4141  0042A6  0100               	movlb	0	; () banked
  4142  0042A8  05DC               	decf	_MAG_signal& (0+255),w,b
  4143  0042AA  0100               	movlb	0	; () banked
  4144  0042AC  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4145  0042AE  A4D8               	btfss	status,2,c
  4146  0042B0  0012               	return	
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;sort.c: 329: _delay((unsigned long)((500)*(32000000/4000.0)));
  4150  0042B2  0E15               	movlw	21
  4151  0042B4  0100               	movlb	0	; () banked
  4152  0042B6  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4153  0042B8  0E4B               	movlw	75
  4154  0042BA  0100               	movlb	0	; () banked
  4155  0042BC  6F86               	movwf	??_getMAG& (0+255),b
  4156  0042BE  0EBE               	movlw	190
  4157  0042C0                     u7047:
  4158  0042C0  2EE8               	decfsz	wreg,f,c
  4159  0042C2  D7FE               	bra	u7047
  4160  0042C4  2F86               	decfsz	??_getMAG& (0+255),f,b
  4161  0042C6  D7FC               	bra	u7047
  4162  0042C8  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4163  0042CA  D7FA               	bra	u7047
  4164  0042CC  F000               	nop	
  4165                           
  4166                           ;sort.c: 330: readMAG();
  4167  0042CE  EC79  F020         	call	_readMAG	;wreg free
  4168  0042D2  0012               	return	
  4169  0042D4                     __end_of_getMAG:
  4170                           	opt stack 0
  4171                           tblptru	equ	0xFF8
  4172                           tblptrh	equ	0xFF7
  4173                           tblptrl	equ	0xFF6
  4174                           tablat	equ	0xFF5
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           postdec1	equ	0xFE5
  4180                           fsr1l	equ	0xFE1
  4181                           indf2	equ	0xFDF
  4182                           postinc2	equ	0xFDE
  4183                           postdec2	equ	0xFDD
  4184                           fsr2h	equ	0xFDA
  4185                           fsr2l	equ	0xFD9
  4186                           status	equ	0xFD8
  4187                           
  4188 ;; *************** function _Distribution *****************
  4189 ;; Defined at:
  4190 ;;		line 196 in file "sort.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;		None
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;		None
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  1    wreg      void 
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, status,0, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;Total ram usage:        2 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    8
  4211 ;; This function calls:
  4212 ;;		_updateServoPosition
  4213 ;; This function is called by:
  4214 ;;		_sort
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text10
  4219  002D92                     __ptext10:
  4220                           	opt stack 0
  4221  002D92                     _Distribution:
  4222                           	opt stack 21
  4223                           
  4224                           ;sort.c: 197: if(f_can_coming_to_distribution){
  4225                           
  4226                           ;incstack = 0
  4227  002D92  506F               	movf	_f_can_coming_to_distribution,w,c
  4228  002D94  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4229  002D96  B4D8               	btfsc	status,2,c
  4230  002D98  0012               	return	
  4231  002D9A  D034               	goto	l6467
  4232  002D9C                     l6457:
  4233                           
  4234                           ;sort.c: 202: updateServoPosition(500, 1);
  4235  002D9C  0E01               	movlw	1
  4236  002D9E  0100               	movlb	0	; () banked
  4237  002DA0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4238  002DA2  0EF4               	movlw	244
  4239  002DA4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4240  002DA6  0E00               	movlw	0
  4241  002DA8  0100               	movlb	0	; () banked
  4242  002DAA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4243  002DAC  0E01               	movlw	1
  4244  002DAE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4245  002DB0  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4246                           
  4247                           ;sort.c: 203: break;
  4248  002DB4  D03E               	goto	l6469
  4249  002DB6                     l6459:
  4250                           
  4251                           ;sort.c: 205: updateServoPosition(750, 1);
  4252  002DB6  0E02               	movlw	2
  4253  002DB8  0100               	movlb	0	; () banked
  4254  002DBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4255  002DBC  0EEE               	movlw	238
  4256  002DBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4257  002DC0  0E00               	movlw	0
  4258  002DC2  0100               	movlb	0	; () banked
  4259  002DC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4260  002DC6  0E01               	movlw	1
  4261  002DC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4262  002DCA  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4263                           
  4264                           ;sort.c: 206: break;
  4265  002DCE  D031               	goto	l6469
  4266  002DD0                     l6461:
  4267                           
  4268                           ;sort.c: 208: updateServoPosition(1700, 1);
  4269  002DD0  0E06               	movlw	6
  4270  002DD2  0100               	movlb	0	; () banked
  4271  002DD4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4272  002DD6  0EA4               	movlw	164
  4273  002DD8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4274  002DDA  0E00               	movlw	0
  4275  002DDC  0100               	movlb	0	; () banked
  4276  002DDE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4277  002DE0  0E01               	movlw	1
  4278  002DE2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4279  002DE4  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4280                           
  4281                           ;sort.c: 209: break;
  4282  002DE8  D024               	goto	l6469
  4283  002DEA                     l6463:
  4284                           
  4285                           ;sort.c: 211: updateServoPosition(2100, 1);
  4286  002DEA  0E08               	movlw	8
  4287  002DEC  0100               	movlb	0	; () banked
  4288  002DEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4289  002DF0  0E34               	movlw	52
  4290  002DF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4291  002DF4  0E00               	movlw	0
  4292  002DF6  0100               	movlb	0	; () banked
  4293  002DF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4294  002DFA  0E01               	movlw	1
  4295  002DFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4296  002DFE  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4297                           
  4298                           ;sort.c: 215: }
  4299                           
  4300                           ;sort.c: 214: break;
  4301                           
  4302                           ;sort.c: 213: default:
  4303                           
  4304                           ;sort.c: 212: break;
  4305  002E02  D017               	goto	l6469
  4306  002E04                     l6467:
  4307  002E04  C12B  F088         	movff	_cur_can,??_Distribution
  4308  002E08  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  4309                           
  4310                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4311                           ; Switch size 1, requested type "space"
  4312                           ; Number of cases is 1, Range of values is 0 to 0
  4313                           ; switch strategies available:
  4314                           ; Name         Instructions Cycles
  4315                           ; simple_byte            4     3 (average)
  4316                           ;	Chosen strategy is simple_byte
  4317  002E0C  0100               	movlb	0	; () banked
  4318  002E0E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4319  002E10  0A00               	xorlw	0	; case 0
  4320  002E12  A4D8               	btfss	status,2,c
  4321  002E14  D00E               	goto	l6469
  4322                           
  4323                           ; BSR set to: 0
  4324                           ; Switch size 1, requested type "space"
  4325                           ; Number of cases is 4, Range of values is 0 to 3
  4326                           ; switch strategies available:
  4327                           ; Name         Instructions Cycles
  4328                           ; simple_byte           13     7 (average)
  4329                           ;	Chosen strategy is simple_byte
  4330  002E16  0100               	movlb	0	; () banked
  4331  002E18  5188               	movf	??_Distribution& (0+255),w,b
  4332  002E1A  0A00               	xorlw	0	; case 0
  4333  002E1C  B4D8               	btfsc	status,2,c
  4334  002E1E  D7BE               	goto	l6457
  4335  002E20  0A01               	xorlw	1	; case 1
  4336  002E22  B4D8               	btfsc	status,2,c
  4337  002E24  D7C8               	goto	l6459
  4338  002E26  0A03               	xorlw	3	; case 2
  4339  002E28  B4D8               	btfsc	status,2,c
  4340  002E2A  D7D2               	goto	l6461
  4341  002E2C  0A01               	xorlw	1	; case 3
  4342  002E2E  B4D8               	btfsc	status,2,c
  4343  002E30  D7DC               	goto	l6463
  4344  002E32                     l6469:
  4345                           
  4346                           ;sort.c: 216: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4347  002E32  0E3D               	movlw	61
  4348  002E34  0100               	movlb	0	; () banked
  4349  002E36  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4350  002E38  0EE1               	movlw	225
  4351  002E3A  0100               	movlb	0	; () banked
  4352  002E3C  6F88               	movwf	??_Distribution& (0+255),b
  4353  002E3E  0E3F               	movlw	63
  4354  002E40                     u7057:
  4355  002E40  2EE8               	decfsz	wreg,f,c
  4356  002E42  D7FE               	bra	u7057
  4357  002E44  2F88               	decfsz	??_Distribution& (0+255),f,b
  4358  002E46  D7FC               	bra	u7057
  4359  002E48  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4360  002E4A  D7FA               	bra	u7057
  4361  002E4C  D000               	nop2	
  4362                           
  4363                           ;sort.c: 219: updateServoPosition(1350, 3);
  4364  002E4E  0E05               	movlw	5
  4365  002E50  0100               	movlb	0	; () banked
  4366  002E52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4367  002E54  0E46               	movlw	70
  4368  002E56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4369  002E58  0E00               	movlw	0
  4370  002E5A  0100               	movlb	0	; () banked
  4371  002E5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4372  002E5E  0E03               	movlw	3
  4373  002E60  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4374  002E62  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4375                           
  4376                           ;sort.c: 220: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4377  002E66  0E52               	movlw	82
  4378  002E68  0100               	movlb	0	; () banked
  4379  002E6A  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4380  002E6C  0E2B               	movlw	43
  4381  002E6E  0100               	movlb	0	; () banked
  4382  002E70  6F88               	movwf	??_Distribution& (0+255),b
  4383  002E72  0E00               	movlw	0
  4384  002E74                     u7067:
  4385  002E74  2EE8               	decfsz	wreg,f,c
  4386  002E76  D7FE               	bra	u7067
  4387  002E78  2F88               	decfsz	??_Distribution& (0+255),f,b
  4388  002E7A  D7FC               	bra	u7067
  4389  002E7C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4390  002E7E  D7FA               	bra	u7067
  4391  002E80  F000               	nop	
  4392                           
  4393                           ;sort.c: 223: updateServoPosition(1150, 3);
  4394  002E82  0E04               	movlw	4
  4395  002E84  0100               	movlb	0	; () banked
  4396  002E86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4397  002E88  0E7E               	movlw	126
  4398  002E8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4399  002E8C  0E00               	movlw	0
  4400  002E8E  0100               	movlb	0	; () banked
  4401  002E90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4402  002E92  0E03               	movlw	3
  4403  002E94  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4404  002E96  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4405                           
  4406                           ;sort.c: 224: _delay((unsigned long)((750)*(32000000/4000.0)));
  4407  002E9A  0E1F               	movlw	31
  4408  002E9C  0100               	movlb	0	; () banked
  4409  002E9E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4410  002EA0  0E71               	movlw	113
  4411  002EA2  0100               	movlb	0	; () banked
  4412  002EA4  6F88               	movwf	??_Distribution& (0+255),b
  4413  002EA6  0E1E               	movlw	30
  4414  002EA8                     u7077:
  4415  002EA8  2EE8               	decfsz	wreg,f,c
  4416  002EAA  D7FE               	bra	u7077
  4417  002EAC  2F88               	decfsz	??_Distribution& (0+255),f,b
  4418  002EAE  D7FC               	bra	u7077
  4419  002EB0  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4420  002EB2  D7FA               	bra	u7077
  4421  002EB4  F000               	nop	
  4422                           
  4423                           ;sort.c: 225: updateServoPosition(1200, 1);
  4424  002EB6  0E04               	movlw	4
  4425  002EB8  0100               	movlb	0	; () banked
  4426  002EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4427  002EBC  0EB0               	movlw	176
  4428  002EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4429  002EC0  0E00               	movlw	0
  4430  002EC2  0100               	movlb	0	; () banked
  4431  002EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4432  002EC6  0E01               	movlw	1
  4433  002EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4434  002ECA  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4435                           
  4436                           ;sort.c: 226: f_can_coming_to_distribution = 0;
  4437  002ECE  0E00               	movlw	0
  4438  002ED0  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4439  002ED2  0E00               	movlw	0
  4440  002ED4  6E6F               	movwf	_f_can_coming_to_distribution,c
  4441                           
  4442                           ;sort.c: 227: f_can_distributed = 1;
  4443  002ED6  0E00               	movlw	0
  4444  002ED8  0101               	movlb	1	; () banked
  4445  002EDA  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4446  002EDC  0E01               	movlw	1
  4447  002EDE  6F2D               	movwf	_f_can_distributed& (0+255),b
  4448                           
  4449                           ; BSR set to: 1
  4450                           ;sort.c: 228: if(f_lastCan == 1){
  4451  002EE0  0471               	decf	_f_lastCan,w,c
  4452  002EE2  1072               	iorwf	_f_lastCan+1,w,c
  4453  002EE4  A4D8               	btfss	status,2,c
  4454  002EE6  0012               	return	
  4455                           
  4456                           ; BSR set to: 1
  4457                           ;sort.c: 229: machine_state = DoneSorting_state;
  4458  002EE8  0E02               	movlw	2
  4459  002EEA  0100               	movlb	0	; () banked
  4460  002EEC  6FFC               	movwf	_machine_state& (0+255),b
  4461                           
  4462                           ; BSR set to: 0
  4463  002EEE  0012               	return	
  4464  002EF0                     __end_of_Distribution:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           postinc0	equ	0xFEE
  4473                           wreg	equ	0xFE8
  4474                           postdec1	equ	0xFE5
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _machineConfig *****************
  4484 ;; Defined at:
  4485 ;;		line 15 in file "MachineConfig.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;Total ram usage:        0 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    7
  4506 ;; This function calls:
  4507 ;;		Nothing
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text11
  4514  003E50                     __ptext11:
  4515                           	opt stack 0
  4516  003E50                     _machineConfig:
  4517                           	opt stack 23
  4518                           
  4519                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4520                           
  4521                           ;incstack = 0
  4522  003E50  0EF0               	movlw	240
  4523  003E52  6ED3               	movwf	4051,c	;volatile
  4524                           
  4525                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4526  003E54  8C9B               	bsf	3995,6,c	;volatile
  4527                           
  4528                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4529  003E56  0E07               	movlw	7
  4530  003E58  6E92               	movwf	3986,c	;volatile
  4531                           
  4532                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4533  003E5A  0EF2               	movlw	242
  4534  003E5C  6E93               	movwf	3987,c	;volatile
  4535                           
  4536                           ;MachineConfig.c: 27: TRISC = 0x00;
  4537  003E5E  0E00               	movlw	0
  4538  003E60  6E94               	movwf	3988,c	;volatile
  4539                           
  4540                           ;MachineConfig.c: 31: TRISD = 0x00;
  4541  003E62  0E00               	movlw	0
  4542  003E64  6E95               	movwf	3989,c	;volatile
  4543                           
  4544                           ;MachineConfig.c: 34: TRISE = 0x00;
  4545  003E66  0E00               	movlw	0
  4546  003E68  6E96               	movwf	3990,c	;volatile
  4547                           
  4548                           ;MachineConfig.c: 37: LATA = 0x00;
  4549  003E6A  0E00               	movlw	0
  4550  003E6C  6E89               	movwf	3977,c	;volatile
  4551                           
  4552                           ;MachineConfig.c: 38: LATB = 0x00;
  4553  003E6E  0E00               	movlw	0
  4554  003E70  6E8A               	movwf	3978,c	;volatile
  4555                           
  4556                           ;MachineConfig.c: 39: LATC = 0x00;
  4557  003E72  0E00               	movlw	0
  4558  003E74  6E8B               	movwf	3979,c	;volatile
  4559                           
  4560                           ;MachineConfig.c: 40: LATD = 0x00;
  4561  003E76  0E00               	movlw	0
  4562  003E78  6E8C               	movwf	3980,c	;volatile
  4563                           
  4564                           ;MachineConfig.c: 41: LATE = 0x00;
  4565  003E7A  0E00               	movlw	0
  4566  003E7C  6E8D               	movwf	3981,c	;volatile
  4567                           
  4568                           ;MachineConfig.c: 43: nRBPU = 0;
  4569  003E7E  9EF1               	bcf	intcon2,7,c	;volatile
  4570                           
  4571                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4572  003E80  0E00               	movlw	0
  4573  003E82  6EC2               	movwf	4034,c	;volatile
  4574                           
  4575                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4576  003E84  0E0D               	movlw	13
  4577  003E86  6EC1               	movwf	4033,c	;volatile
  4578                           
  4579                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4580  003E88  0E00               	movlw	0
  4581  003E8A  6EB5               	movwf	4021,c	;volatile
  4582                           
  4583                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4584  003E8C  96B4               	bcf	4020,3,c	;volatile
  4585                           
  4586                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4587  003E8E  0EB1               	movlw	177
  4588  003E90  6EC0               	movwf	4032,c	;volatile
  4589                           
  4590                           ;MachineConfig.c: 55: INT1IE = 1;
  4591  003E92  86F0               	bsf	intcon3,3,c	;volatile
  4592                           
  4593                           ;MachineConfig.c: 57: TMR0IE = 1;
  4594  003E94  8AF2               	bsf	intcon,5,c	;volatile
  4595                           
  4596                           ;MachineConfig.c: 58: TMR1IE = 1;
  4597  003E96  809D               	bsf	3997,0,c	;volatile
  4598                           
  4599                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4600  003E98  0EB0               	movlw	176
  4601  003E9A  6ECD               	movwf	4045,c	;volatile
  4602                           
  4603                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4604  003E9C  0EB0               	movlw	176
  4605  003E9E  6EB1               	movwf	4017,c	;volatile
  4606                           
  4607                           ;MachineConfig.c: 61: TMR2IE = 1;
  4608  003EA0  829D               	bsf	3997,1,c	;volatile
  4609                           
  4610                           ;MachineConfig.c: 62: TMR3IE = 1;
  4611  003EA2  82A0               	bsf	4000,1,c	;volatile
  4612                           
  4613                           ;MachineConfig.c: 63: PEIE = 1;
  4614  003EA4  8CF2               	bsf	intcon,6,c	;volatile
  4615                           
  4616                           ;MachineConfig.c: 64: ADIE = 0;
  4617  003EA6  9C9D               	bcf	3997,6,c	;volatile
  4618                           
  4619                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4620  003EA8  9EF2               	bcf	intcon,7,c	;volatile
  4621  003EAA  0012               	return		;funcret
  4622  003EAC                     __end_of_machineConfig:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           intcon	equ	0xFF2
  4631                           intcon2	equ	0xFF1
  4632                           intcon3	equ	0xFF0
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           postdec1	equ	0xFE5
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           fsr2h	equ	0xFDA
  4641                           fsr2l	equ	0xFD9
  4642                           status	equ	0xFD8
  4643                           
  4644 ;; *************** function _logRun *****************
  4645 ;; Defined at:
  4646 ;;		line 84 in file "EEPROM.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;		None
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4651 ;;  i               2   55[BANK0 ] int 
  4652 ;;  num             1   49[BANK0 ] unsigned char 
  4653 ;;  addr            2   57[BANK0 ] unsigned short 
  4654 ;;  byte11          1   54[BANK0 ] unsigned char 
  4655 ;;  byte3           1   52[BANK0 ] unsigned char 
  4656 ;;  byte2           1   51[BANK0 ] unsigned char 
  4657 ;;  byte1           1   50[BANK0 ] unsigned char 
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  1    wreg      void 
  4660 ;; Registers used:
  4661 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;Total ram usage:       10 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:   11
  4674 ;; This function calls:
  4675 ;;		_EEPROM_read
  4676 ;;		_EEPROM_write
  4677 ;; This function is called by:
  4678 ;;		_main
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           	psect	text12
  4683  002EF0                     __ptext12:
  4684                           	opt stack 0
  4685  002EF0                     _logRun:
  4686                           	opt stack 19
  4687                           
  4688                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4689                           
  4690                           ;incstack = 0
  4691  002EF0  0E00               	movlw	0
  4692  002EF2  0100               	movlb	0	; () banked
  4693  002EF4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4694  002EF6  0E00               	movlw	0
  4695  002EF8  6F80               	movwf	EEPROM_read@address& (0+255),b
  4696  002EFA  EC5E  F023         	call	_EEPROM_read	;wreg free
  4697  002EFE  0100               	movlb	0	; () banked
  4698  002F00  6FFD               	movwf	_sel& (0+255),b
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4702  002F02  0100               	movlb	0	; () banked
  4703  002F04  51FD               	movf	_sel& (0+255),w,b
  4704  002F06  0D0B               	mullw	11
  4705  002F08  0E01               	movlw	1
  4706  002F0A  24F3               	addwf	prodl,w,c
  4707  002F0C  0100               	movlb	0	; () banked
  4708  002F0E  6FB9               	movwf	logRun@addr& (0+255),b
  4709  002F10  0E00               	movlw	0
  4710  002F12  20F4               	addwfc	prodh,w,c
  4711  002F14  0100               	movlb	0	; () banked
  4712  002F16  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;EEPROM.c: 101: if (sel < 3){
  4716  002F18  0E03               	movlw	3
  4717  002F1A  0100               	movlb	0	; () banked
  4718  002F1C  61FD               	cpfslt	_sel& (0+255),b
  4719  002F1E  D00E               	goto	l7909
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4723  002F20  0100               	movlb	0	; () banked
  4724  002F22  29FD               	incf	_sel& (0+255),w,b
  4725  002F24  0100               	movlb	0	; () banked
  4726  002F26  6FB1               	movwf	logRun@num& (0+255),b
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4730  002F28  0E00               	movlw	0
  4731  002F2A  0100               	movlb	0	; () banked
  4732  002F2C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4733  002F2E  0E00               	movlw	0
  4734  002F30  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4735  002F32  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4736  002F36  ECB5  F019         	call	_EEPROM_write	;wreg free
  4737                           
  4738                           ;EEPROM.c: 104: }
  4739  002F3A  D00A               	goto	l7911
  4740  002F3C                     l7909:
  4741                           
  4742                           ;EEPROM.c: 105: else{
  4743                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4744  002F3C  0E00               	movlw	0
  4745  002F3E  0100               	movlb	0	; () banked
  4746  002F40  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4747  002F42  0E00               	movlw	0
  4748  002F44  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4749  002F46  0E00               	movlw	0
  4750  002F48  0100               	movlb	0	; () banked
  4751  002F4A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4752  002F4C  ECB5  F019         	call	_EEPROM_write	;wreg free
  4753  002F50                     l7911:
  4754                           
  4755                           ;EEPROM.c: 107: }
  4756                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4757  002F50  0100               	movlb	0	; () banked
  4758  002F52  51FE               	movf	_count_total& (0+255),w,b
  4759  002F54  0980               	iorlw	128
  4760  002F56  0100               	movlb	0	; () banked
  4761  002F58  6FB2               	movwf	logRun@byte1& (0+255),b
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4765  002F5A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4766  002F5E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4767  002F62  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4768  002F66  ECB5  F019         	call	_EEPROM_write	;wreg free
  4769                           
  4770                           ;EEPROM.c: 112: addr++;
  4771  002F6A  0100               	movlb	0	; () banked
  4772  002F6C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4773  002F6E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4777  002F70  3861               	swapf	_count_pop_no_tab,w,c
  4778  002F72  0BF0               	andlw	240
  4779  002F74  1063               	iorwf	_count_pop_w_tab,w,c
  4780  002F76  0100               	movlb	0	; () banked
  4781  002F78  6FB3               	movwf	logRun@byte2& (0+255),b
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4785  002F7A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4786  002F7E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4787  002F82  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4788  002F86  ECB5  F019         	call	_EEPROM_write	;wreg free
  4789                           
  4790                           ;EEPROM.c: 117: addr++;
  4791  002F8A  0100               	movlb	0	; () banked
  4792  002F8C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4793  002F8E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4797  002F90  385F               	swapf	_count_can_w_lab,w,c
  4798  002F92  0BF0               	andlw	240
  4799  002F94  105D               	iorwf	_count_can_no_lab,w,c
  4800  002F96  0100               	movlb	0	; () banked
  4801  002F98  6FB4               	movwf	logRun@byte3& (0+255),b
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4805  002F9A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4806  002F9E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4807  002FA2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4808  002FA6  ECB5  F019         	call	_EEPROM_write	;wreg free
  4809                           
  4810                           ;EEPROM.c: 120: addr++;
  4811  002FAA  0100               	movlb	0	; () banked
  4812  002FAC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4813  002FAE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4817  002FB0  0E00               	movlw	0
  4818  002FB2  0100               	movlb	0	; () banked
  4819  002FB4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4820  002FB6  0E00               	movlw	0
  4821  002FB8  6FB7               	movwf	logRun@i& (0+255),b
  4822                           
  4823                           ; BSR set to: 0
  4824  002FBA  0100               	movlb	0	; () banked
  4825  002FBC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4826  002FBE  D008               	goto	l7935
  4827  002FC0  0100               	movlb	0	; () banked
  4828  002FC2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4829  002FC4  E128               	bnz	l948
  4830  002FC6  0E07               	movlw	7
  4831  002FC8  0100               	movlb	0	; () banked
  4832  002FCA  5DB7               	subwf	logRun@i& (0+255),w,b
  4833  002FCC  B0D8               	btfsc	status,0,c
  4834  002FCE  D023               	goto	l948
  4835  002FD0                     l7935:
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4839  002FD0  90D8               	bcf	status,0,c
  4840  002FD2  0100               	movlb	0	; () banked
  4841  002FD4  35B7               	rlcf	logRun@i& (0+255),w,b
  4842  002FD6  6ED9               	movwf	fsr2l,c
  4843  002FD8  0100               	movlb	0	; () banked
  4844  002FDA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4845  002FDC  6EDA               	movwf	fsr2h,c
  4846  002FDE  0E0E               	movlw	low _startTime
  4847  002FE0  26D9               	addwf	fsr2l,f,c
  4848  002FE2  0E01               	movlw	high _startTime
  4849  002FE4  22DA               	addwfc	fsr2h,f,c
  4850  002FE6  50DF               	movf	indf2,w,c
  4851  002FE8  0100               	movlb	0	; () banked
  4852  002FEA  6FB5               	movwf	logRun@byte_i& (0+255),b
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4856  002FEC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4857  002FF0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4858  002FF4  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4859  002FF8  ECB5  F019         	call	_EEPROM_write	;wreg free
  4860                           
  4861                           ;EEPROM.c: 126: addr++;
  4862  002FFC  0100               	movlb	0	; () banked
  4863  002FFE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4864  003000  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4865                           
  4866                           ; BSR set to: 0
  4867  003002  0100               	movlb	0	; () banked
  4868  003004  4BB7               	infsnz	logRun@i& (0+255),f,b
  4869  003006  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4870                           
  4871                           ; BSR set to: 0
  4872  003008  0100               	movlb	0	; () banked
  4873  00300A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4874  00300C  D7E1               	goto	l7935
  4875  00300E  0100               	movlb	0	; () banked
  4876  003010  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4877  003012  E101               	bnz	u6760
  4878  003014  D7D8               	goto	L4
  4879  003016                     u6760:
  4880  003016                     l948:
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;EEPROM.c: 127: }
  4884                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4885  003016  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4889  00301A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4890  00301E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4891  003022  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4892  003026  ECB5  F019         	call	_EEPROM_write	;wreg free
  4893  00302A  0012               	return		;funcret
  4894  00302C                     __end_of_logRun:
  4895                           	opt stack 0
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           prodh	equ	0xFF4
  4901                           prodl	equ	0xFF3
  4902                           intcon	equ	0xFF2
  4903                           intcon2	equ	0xFF1
  4904                           intcon3	equ	0xFF0
  4905                           postinc0	equ	0xFEE
  4906                           wreg	equ	0xFE8
  4907                           postdec1	equ	0xFE5
  4908                           fsr1l	equ	0xFE1
  4909                           indf2	equ	0xFDF
  4910                           postinc2	equ	0xFDE
  4911                           postdec2	equ	0xFDD
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _EEPROM_write *****************
  4917 ;; Defined at:
  4918 ;;		line 32 in file "EEPROM.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;  address         2   43[BANK0 ] unsigned short 
  4921 ;;  data            1   45[BANK0 ] unsigned char 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;  i               1   48[BANK0 ] unsigned char 
  4924 ;;  i               1   47[BANK0 ] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4934 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;Total ram usage:        6 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:   10
  4941 ;; This function calls:
  4942 ;;		_EEPROM_read
  4943 ;;		_lcdInst
  4944 ;;		_printf
  4945 ;; This function is called by:
  4946 ;;		_Loading
  4947 ;;		_logRun
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text13
  4952  00336A                     __ptext13:
  4953                           	opt stack 0
  4954  00336A                     _EEPROM_write:
  4955                           	opt stack 18
  4956                           
  4957                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4958                           
  4959                           ;incstack = 0
  4960  00336A  84A6               	bsf	4006,2,c	;volatile
  4961                           
  4962                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4963  00336C  0100               	movlb	0	; () banked
  4964  00336E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4965  003370  6EAA               	movwf	4010,c	;volatile
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4969  003372  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;EEPROM.c: 39: EEDATA = data;
  4973  003376  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4977  00337A  9EA6               	bcf	4006,7,c	;volatile
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4981  00337C  9CA6               	bcf	4006,6,c	;volatile
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4985  00337E  9EF2               	bcf	intcon,7,c	;volatile
  4986                           
  4987                           ;EEPROM.c: 45: EECON2 = 0x55;
  4988  003380  0E55               	movlw	85
  4989  003382  6EA7               	movwf	4007,c	;volatile
  4990                           
  4991                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4992  003384  0EAA               	movlw	170
  4993  003386  6EA7               	movwf	4007,c	;volatile
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4997  003388  82A6               	bsf	4006,1,c	;volatile
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5001  00338A  8EF2               	bsf	intcon,7,c	;volatile
  5002  00338C                     l926:
  5003  00338C  A8A1               	btfss	4001,4,c	;volatile
  5004  00338E  D7FE               	goto	l926
  5005                           
  5006                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5007  003390  98A1               	bcf	4001,4,c	;volatile
  5008                           
  5009                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5010  003392  94A6               	bcf	4006,2,c	;volatile
  5011                           
  5012                           ;EEPROM.c: 57: if(debug){
  5013  003394  5065               	movf	_debug,w,c
  5014  003396  1066               	iorwf	_debug+1,w,c
  5015  003398  B4D8               	btfsc	status,2,c
  5016  00339A  0012               	return	
  5017                           
  5018                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5019  00339C  0E01               	movlw	1
  5020  00339E  EC9B  F023         	call	_lcdInst
  5021  0033A2  0E68               	movlw	104
  5022  0033A4  0100               	movlb	0	; () banked
  5023  0033A6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5024  0033A8  0EE4               	movlw	228
  5025  0033AA                     u7087:
  5026  0033AA  2EE8               	decfsz	wreg,f,c
  5027  0033AC  D7FE               	bra	u7087
  5028  0033AE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5029  0033B0  D7FC               	bra	u7087
  5030  0033B2  F000               	nop	
  5031                           
  5032                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5033  0033B4  0E80               	movlw	128
  5034  0033B6  EC9B  F023         	call	_lcdInst
  5035                           
  5036                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5037  0033BA  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5038  0033BE  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5039  0033C2  EC5E  F023         	call	_EEPROM_read	;wreg free
  5040  0033C6  0100               	movlb	0	; () banked
  5041  0033C8  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5042  0033CA  A4D8               	btfss	status,2,c
  5043  0033CC  D024               	goto	l6021
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5047  0033CE  0E58               	movlw	low STR_66
  5048  0033D0  0100               	movlb	0	; () banked
  5049  0033D2  6F8E               	movwf	printf@f& (0+255),b
  5050  0033D4  0EFB               	movlw	high STR_66
  5051  0033D6  0100               	movlb	0	; () banked
  5052  0033D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5053  0033DA  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5054  0033DE  0100               	movlb	0	; () banked
  5055  0033E0  6B91               	clrf	(?_printf+3)& (0+255),b
  5056  0033E2  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5057  0033E6  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5058  0033EA  ECB8  F008         	call	_printf	;wreg free
  5059                           
  5060                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5061  0033EE  0E00               	movlw	0
  5062  0033F0  0100               	movlb	0	; () banked
  5063  0033F2  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5064  0033F4                     l6013:
  5065                           
  5066                           ; BSR set to: 0
  5067  0033F4  0E63               	movlw	99
  5068  0033F6  0100               	movlb	0	; () banked
  5069  0033F8  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5070  0033FA  D001               	goto	l6017
  5071  0033FC  0012               	return	
  5072  0033FE                     l6017:
  5073                           
  5074                           ; BSR set to: 0
  5075  0033FE  0E68               	movlw	104
  5076  003400  0100               	movlb	0	; () banked
  5077  003402  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5078  003404  0EE4               	movlw	228
  5079  003406                     u7097:
  5080  003406  2EE8               	decfsz	wreg,f,c
  5081  003408  D7FE               	bra	u7097
  5082  00340A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5083  00340C  D7FC               	bra	u7097
  5084  00340E  F000               	nop	
  5085  003410  0100               	movlb	0	; () banked
  5086  003412  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5087  003414  D7EF               	goto	l6013
  5088  003416                     l6021:
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5092  003416  0EBD               	movlw	low STR_67
  5093  003418  0100               	movlb	0	; () banked
  5094  00341A  6F8E               	movwf	printf@f& (0+255),b
  5095  00341C  0EFF               	movlw	high STR_67
  5096  00341E  0100               	movlb	0	; () banked
  5097  003420  6F8F               	movwf	(printf@f+1)& (0+255),b
  5098  003422  ECB8  F008         	call	_printf	;wreg free
  5099  003426  0E00               	movlw	0
  5100  003428  0100               	movlb	0	; () banked
  5101  00342A  6FB0               	movwf	EEPROM_write@i_1322& (0+255),b
  5102  00342C                     l6025:
  5103                           
  5104                           ; BSR set to: 0
  5105  00342C  0E63               	movlw	99
  5106  00342E  0100               	movlb	0	; () banked
  5107  003430  65B0               	cpfsgt	EEPROM_write@i_1322& (0+255),b
  5108  003432  D001               	goto	l6029
  5109  003434  0012               	return	
  5110  003436                     l6029:
  5111                           
  5112                           ; BSR set to: 0
  5113  003436  0E68               	movlw	104
  5114  003438  0100               	movlb	0	; () banked
  5115  00343A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5116  00343C  0EE4               	movlw	228
  5117  00343E                     u7107:
  5118  00343E  2EE8               	decfsz	wreg,f,c
  5119  003440  D7FE               	bra	u7107
  5120  003442  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5121  003444  D7FC               	bra	u7107
  5122  003446  F000               	nop	
  5123  003448  0100               	movlb	0	; () banked
  5124  00344A  2BB0               	incf	EEPROM_write@i_1322& (0+255),f,b
  5125  00344C  D7EF               	goto	l6025
  5126  00344E                     __end_of_EEPROM_write:
  5127                           	opt stack 0
  5128                           tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           prodh	equ	0xFF4
  5133                           prodl	equ	0xFF3
  5134                           intcon	equ	0xFF2
  5135                           intcon2	equ	0xFF1
  5136                           intcon3	equ	0xFF0
  5137                           postinc0	equ	0xFEE
  5138                           wreg	equ	0xFE8
  5139                           postdec1	equ	0xFE5
  5140                           fsr1l	equ	0xFE1
  5141                           indf2	equ	0xFDF
  5142                           postinc2	equ	0xFDE
  5143                           postdec2	equ	0xFDD
  5144                           fsr2h	equ	0xFDA
  5145                           fsr2l	equ	0xFD9
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function _EEPROM_read *****************
  5149 ;; Defined at:
  5150 ;;		line 68 in file "EEPROM.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  address         2    0[BANK0 ] unsigned short 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;		None
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      unsigned char 
  5157 ;; Registers used:
  5158 ;;		wreg, status,2
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5164 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;Total ram usage:        2 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    7
  5171 ;; This function calls:
  5172 ;;		Nothing
  5173 ;; This function is called by:
  5174 ;;		_Loading
  5175 ;;		_EEPROM_write
  5176 ;;		_logRun
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text14
  5181  0046BC                     __ptext14:
  5182                           	opt stack 0
  5183  0046BC                     _EEPROM_read:
  5184                           	opt stack 20
  5185                           
  5186                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5187                           
  5188                           ;incstack = 0
  5189  0046BC  0100               	movlb	0	; () banked
  5190  0046BE  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5191  0046C0  6EAA               	movwf	4010,c	;volatile
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5195  0046C2  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5199  0046C6  9EA6               	bcf	4006,7,c	;volatile
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5203  0046C8  9CA6               	bcf	4006,6,c	;volatile
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5207  0046CA  80A6               	bsf	4006,0,c	;volatile
  5208  0046CC                     l939:
  5209  0046CC  B0A6               	btfsc	4006,0,c	;volatile
  5210  0046CE  D7FE               	goto	l939
  5211                           
  5212                           ;EEPROM.c: 81: return EEDATA;
  5213  0046D0  50A8               	movf	4008,w,c	;volatile
  5214  0046D2  0012               	return	
  5215  0046D4                     __end_of_EEPROM_read:
  5216                           	opt stack 0
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           intcon	equ	0xFF2
  5224                           intcon2	equ	0xFF1
  5225                           intcon3	equ	0xFF0
  5226                           postinc0	equ	0xFEE
  5227                           wreg	equ	0xFE8
  5228                           postdec1	equ	0xFE5
  5229                           fsr1l	equ	0xFE1
  5230                           indf2	equ	0xFDF
  5231                           postinc2	equ	0xFDE
  5232                           postdec2	equ	0xFDD
  5233                           fsr2h	equ	0xFDA
  5234                           fsr2l	equ	0xFD9
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _initUI *****************
  5238 ;; Defined at:
  5239 ;;		line 62 in file "UI.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;		None
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;		None
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  1    wreg      void 
  5246 ;; Registers used:
  5247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;Total ram usage:        0 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:   12
  5260 ;; This function calls:
  5261 ;;		_change_state_to_menu_start
  5262 ;;		_loadRTC
  5263 ;; This function is called by:
  5264 ;;		_main
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           	psect	text15
  5269  0044B6                     __ptext15:
  5270                           	opt stack 0
  5271  0044B6                     _initUI:
  5272                           	opt stack 18
  5273                           
  5274                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5275                           
  5276                           ;incstack = 0
  5277  0044B6  8EF2               	bsf	intcon,7,c	;volatile
  5278                           
  5279                           ;UI.c: 64: machine_state = UI_state;
  5280  0044B8  0E00               	movlw	0
  5281  0044BA  0100               	movlb	0	; () banked
  5282  0044BC  6FFC               	movwf	_machine_state& (0+255),b
  5283                           
  5284                           ;UI.c: 65: logstate = 0;
  5285  0044BE  0E00               	movlw	0
  5286  0044C0  0100               	movlb	0	; () banked
  5287  0044C2  6FF7               	movwf	(_logstate+1)& (0+255),b
  5288  0044C4  0E00               	movlw	0
  5289  0044C6  6FF6               	movwf	_logstate& (0+255),b
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;UI.c: 67: if(RTCflag){
  5293  0044C8  0100               	movlb	0	; () banked
  5294  0044CA  51DE               	movf	_RTCflag& (0+255),w,b
  5295  0044CC  0100               	movlb	0	; () banked
  5296  0044CE  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5297  0044D0  A4D8               	btfss	status,2,c
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;UI.c: 68: loadRTC();
  5301  0044D2  ECA0  F01C         	call	_loadRTC	;wreg free
  5302                           
  5303                           ;UI.c: 69: }
  5304                           ;UI.c: 71: change_state_to_menu_start();
  5305  0044D6  ECA0  F022         	call	_change_state_to_menu_start	;wreg free
  5306                           
  5307                           ;UI.c: 72: firstboot = 1;
  5308  0044DA  0E00               	movlw	0
  5309  0044DC  6E76               	movwf	_firstboot+1,c
  5310  0044DE  0E01               	movlw	1
  5311  0044E0  6E75               	movwf	_firstboot,c
  5312  0044E2  0012               	return		;funcret
  5313  0044E4                     __end_of_initUI:
  5314                           	opt stack 0
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           intcon	equ	0xFF2
  5322                           intcon2	equ	0xFF1
  5323                           intcon3	equ	0xFF0
  5324                           postinc0	equ	0xFEE
  5325                           wreg	equ	0xFE8
  5326                           postdec1	equ	0xFE5
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _loadRTC *****************
  5336 ;; Defined at:
  5337 ;;		line 28 in file "RTC.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  i               2   22[BANK0 ] int 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;Total ram usage:        3 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    9
  5358 ;; This function calls:
  5359 ;;		_I2C_Master_Init
  5360 ;;		_I2C_Master_Start
  5361 ;;		_I2C_Master_Stop
  5362 ;;		_I2C_Master_Write
  5363 ;; This function is called by:
  5364 ;;		_initUI
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text16
  5369  003940                     __ptext16:
  5370                           	opt stack 0
  5371  003940                     _loadRTC:
  5372                           	opt stack 20
  5373                           
  5374                           ;RTC.c: 30: I2C_Master_Init(10000);
  5375                           
  5376                           ;incstack = 0
  5377  003940  0E10               	movlw	16
  5378  003942  0100               	movlb	0	; () banked
  5379  003944  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5380  003946  0E27               	movlw	39
  5381  003948  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5382  00394A  0E00               	movlw	0
  5383  00394C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5384  00394E  0E00               	movlw	0
  5385  003950  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5386  003952  ECF8  F01E         	call	_I2C_Master_Init	;wreg free
  5387                           
  5388                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5389  003956  9EF2               	bcf	intcon,7,c	;volatile
  5390                           
  5391                           ;RTC.c: 34: I2C_Master_Start();
  5392  003958  ECC1  F023         	call	_I2C_Master_Start	;wreg free
  5393                           
  5394                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5395  00395C  0E00               	movlw	0
  5396  00395E  0100               	movlb	0	; () banked
  5397  003960  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5398  003962  0ED0               	movlw	208
  5399  003964  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5400  003966  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  5401                           
  5402                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5403  00396A  0E00               	movlw	0
  5404  00396C  0100               	movlb	0	; () banked
  5405  00396E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5406  003970  0E00               	movlw	0
  5407  003972  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5408  003974  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  5409                           
  5410                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5411  003978  0E00               	movlw	0
  5412  00397A  0100               	movlb	0	; () banked
  5413  00397C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5414  00397E  0E00               	movlw	0
  5415  003980  6F96               	movwf	loadRTC@i& (0+255),b
  5416  003982                     l6147:
  5417                           
  5418                           ; BSR set to: 0
  5419  003982  0100               	movlb	0	; () banked
  5420  003984  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5421  003986  D008               	goto	l6151
  5422  003988  0100               	movlb	0	; () banked
  5423  00398A  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5424  00398C  E11B               	bnz	l6157
  5425  00398E  0E07               	movlw	7
  5426  003990  0100               	movlb	0	; () banked
  5427  003992  5D96               	subwf	loadRTC@i& (0+255),w,b
  5428  003994  B0D8               	btfsc	status,0,c
  5429  003996  D016               	goto	l6157
  5430  003998                     l6151:
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5434  003998  0E24               	movlw	low _time
  5435  00399A  0100               	movlb	0	; () banked
  5436  00399C  2596               	addwf	loadRTC@i& (0+255),w,b
  5437  00399E  6ED9               	movwf	fsr2l,c
  5438  0039A0  0E01               	movlw	high _time
  5439  0039A2  0100               	movlb	0	; () banked
  5440  0039A4  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5441  0039A6  6EDA               	movwf	fsr2h,c
  5442  0039A8  50DF               	movf	indf2,w,c
  5443  0039AA  0100               	movlb	0	; () banked
  5444  0039AC  6F95               	movwf	??_loadRTC& (0+255),b
  5445  0039AE  0100               	movlb	0	; () banked
  5446  0039B0  5195               	movf	??_loadRTC& (0+255),w,b
  5447  0039B2  0100               	movlb	0	; () banked
  5448  0039B4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5449  0039B6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5450  0039B8  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  5451  0039BC  0100               	movlb	0	; () banked
  5452  0039BE  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5453  0039C0  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5454  0039C2  D7DF               	goto	l6147
  5455  0039C4                     l6157:
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;RTC.c: 39: }
  5459                           ;RTC.c: 40: I2C_Master_Stop();
  5460  0039C4  ECBD  F023         	call	_I2C_Master_Stop	;wreg free
  5461                           
  5462                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5463  0039C8  8EF2               	bsf	intcon,7,c	;volatile
  5464  0039CA  0012               	return		;funcret
  5465  0039CC                     __end_of_loadRTC:
  5466                           	opt stack 0
  5467                           tblptru	equ	0xFF8
  5468                           tblptrh	equ	0xFF7
  5469                           tblptrl	equ	0xFF6
  5470                           tablat	equ	0xFF5
  5471                           prodh	equ	0xFF4
  5472                           prodl	equ	0xFF3
  5473                           intcon	equ	0xFF2
  5474                           intcon2	equ	0xFF1
  5475                           intcon3	equ	0xFF0
  5476                           postinc0	equ	0xFEE
  5477                           wreg	equ	0xFE8
  5478                           postdec1	equ	0xFE5
  5479                           fsr1l	equ	0xFE1
  5480                           indf2	equ	0xFDF
  5481                           postinc2	equ	0xFDE
  5482                           postdec2	equ	0xFDD
  5483                           fsr2h	equ	0xFDA
  5484                           fsr2l	equ	0xFD9
  5485                           status	equ	0xFD8
  5486                           
  5487 ;; *************** function _I2C_Master_Init *****************
  5488 ;; Defined at:
  5489 ;;		line 15 in file "I2C.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  c               4   13[BANK0 ] const unsigned long 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;		None
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  1    wreg      void 
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0, cstack
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5503 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;Total ram usage:        8 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    8
  5510 ;; This function calls:
  5511 ;;		___lldiv
  5512 ;; This function is called by:
  5513 ;;		_main
  5514 ;;		_loadRTC
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           	psect	text17
  5519  003DF0                     __ptext17:
  5520                           	opt stack 0
  5521  003DF0                     _I2C_Master_Init:
  5522                           	opt stack 20
  5523                           
  5524                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5525                           
  5526                           ;incstack = 0
  5527  003DF0  0E00               	movlw	0
  5528  003DF2  6EC7               	movwf	4039,c	;volatile
  5529                           
  5530                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5531  003DF4  0E28               	movlw	40
  5532  003DF6  6EC6               	movwf	4038,c	;volatile
  5533                           
  5534                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5535  003DF8  0E00               	movlw	0
  5536  003DFA  6EC5               	movwf	4037,c	;volatile
  5537                           
  5538                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5539  003DFC  0E00               	movlw	0
  5540  003DFE  0100               	movlb	0	; () banked
  5541  003E00  6F80               	movwf	___lldiv@dividend& (0+255),b
  5542  003E02  0E48               	movlw	72
  5543  003E04  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5544  003E06  0EE8               	movlw	232
  5545  003E08  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5546  003E0A  0E01               	movlw	1
  5547  003E0C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5548  003E0E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5549  003E12  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5550  003E16  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5551  003E1A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5552  003E1E  0E02               	movlw	2
  5553  003E20                     u4425:
  5554  003E20  90D8               	bcf	status,0,c
  5555  003E22  0100               	movlb	0	; () banked
  5556  003E24  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5557  003E26  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5558  003E28  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5559  003E2A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5560  003E2C  2EE8               	decfsz	wreg,f,c
  5561  003E2E  D7F8               	goto	u4425
  5562  003E30  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5563  003E34  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5564  003E38  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5565  003E3C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5566  003E40  EC51  F01B         	call	___lldiv	;wreg free
  5567  003E44  0100               	movlb	0	; () banked
  5568  003E46  0580               	decf	?___lldiv& (0+255),w,b
  5569  003E48  6EC8               	movwf	4040,c	;volatile
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;I2C.c: 22: TRISC3 = 1;
  5573  003E4A  8694               	bsf	3988,3,c	;volatile
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;I2C.c: 23: TRISC4 = 1;
  5577  003E4C  8894               	bsf	3988,4,c	;volatile
  5578                           
  5579                           ; BSR set to: 0
  5580  003E4E  0012               	return		;funcret
  5581  003E50                     __end_of_I2C_Master_Init:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           intcon2	equ	0xFF1
  5591                           intcon3	equ	0xFF0
  5592                           postinc0	equ	0xFEE
  5593                           wreg	equ	0xFE8
  5594                           postdec1	equ	0xFE5
  5595                           fsr1l	equ	0xFE1
  5596                           indf2	equ	0xFDF
  5597                           postinc2	equ	0xFDE
  5598                           postdec2	equ	0xFDD
  5599                           fsr2h	equ	0xFDA
  5600                           fsr2l	equ	0xFD9
  5601                           status	equ	0xFD8
  5602                           
  5603 ;; *************** function ___lldiv *****************
  5604 ;; Defined at:
  5605 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;  dividend        4    0[BANK0 ] unsigned long 
  5608 ;;  divisor         4    4[BANK0 ] unsigned long 
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  quotient        4    8[BANK0 ] unsigned long 
  5611 ;;  counter         1   12[BANK0 ] unsigned char 
  5612 ;; Return value:  Size  Location     Type
  5613 ;;                  4    0[BANK0 ] unsigned long 
  5614 ;; Registers used:
  5615 ;;		wreg, status,2, status,0
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5621 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;Total ram usage:       13 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    7
  5628 ;; This function calls:
  5629 ;;		Nothing
  5630 ;; This function is called by:
  5631 ;;		_I2C_Master_Init
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text18
  5636  0036A2                     __ptext18:
  5637                           	opt stack 0
  5638  0036A2                     ___lldiv:
  5639                           	opt stack 20
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;incstack = 0
  5643  0036A2  0E00               	movlw	0
  5644  0036A4  0100               	movlb	0	; () banked
  5645  0036A6  6F88               	movwf	___lldiv@quotient& (0+255),b
  5646  0036A8  0E00               	movlw	0
  5647  0036AA  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5648  0036AC  0E00               	movlw	0
  5649  0036AE  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5650  0036B0  0E00               	movlw	0
  5651  0036B2  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5652                           
  5653                           ; BSR set to: 0
  5654  0036B4  0100               	movlb	0	; () banked
  5655  0036B6  5184               	movf	___lldiv@divisor& (0+255),w,b
  5656  0036B8  0100               	movlb	0	; () banked
  5657  0036BA  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5658  0036BC  0100               	movlb	0	; () banked
  5659  0036BE  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5660  0036C0  0100               	movlb	0	; () banked
  5661  0036C2  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5662  0036C4  B4D8               	btfsc	status,2,c
  5663  0036C6  D042               	goto	l1649
  5664                           
  5665                           ; BSR set to: 0
  5666  0036C8  0E01               	movlw	1
  5667  0036CA  0100               	movlb	0	; () banked
  5668  0036CC  6F8C               	movwf	___lldiv@counter& (0+255),b
  5669  0036CE  D008               	goto	l5591
  5670  0036D0                     l5589:
  5671                           
  5672                           ; BSR set to: 0
  5673  0036D0  0100               	movlb	0	; () banked
  5674  0036D2  90D8               	bcf	status,0,c
  5675  0036D4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5676  0036D6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5677  0036D8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5678  0036DA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5679  0036DC  0100               	movlb	0	; () banked
  5680  0036DE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5681  0036E0                     l5591:
  5682                           
  5683                           ; BSR set to: 0
  5684  0036E0  0100               	movlb	0	; () banked
  5685  0036E2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5686  0036E4  D7F5               	goto	l5589
  5687  0036E6                     l5593:
  5688                           
  5689                           ; BSR set to: 0
  5690  0036E6  0100               	movlb	0	; () banked
  5691  0036E8  90D8               	bcf	status,0,c
  5692  0036EA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5693  0036EC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5694  0036EE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5695  0036F0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5696                           
  5697                           ; BSR set to: 0
  5698  0036F2  0100               	movlb	0	; () banked
  5699  0036F4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5700  0036F6  0100               	movlb	0	; () banked
  5701  0036F8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5702  0036FA  0100               	movlb	0	; () banked
  5703  0036FC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5704  0036FE  0100               	movlb	0	; () banked
  5705  003700  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5706  003702  0100               	movlb	0	; () banked
  5707  003704  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5708  003706  0100               	movlb	0	; () banked
  5709  003708  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5710  00370A  0100               	movlb	0	; () banked
  5711  00370C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5712  00370E  0100               	movlb	0	; () banked
  5713  003710  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5714  003712  A0D8               	btfss	status,0,c
  5715  003714  D012               	goto	l5601
  5716                           
  5717                           ; BSR set to: 0
  5718  003716  0100               	movlb	0	; () banked
  5719  003718  5184               	movf	___lldiv@divisor& (0+255),w,b
  5720  00371A  0100               	movlb	0	; () banked
  5721  00371C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5722  00371E  0100               	movlb	0	; () banked
  5723  003720  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5724  003722  0100               	movlb	0	; () banked
  5725  003724  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5726  003726  0100               	movlb	0	; () banked
  5727  003728  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5728  00372A  0100               	movlb	0	; () banked
  5729  00372C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5730  00372E  0100               	movlb	0	; () banked
  5731  003730  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5732  003732  0100               	movlb	0	; () banked
  5733  003734  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5734                           
  5735                           ; BSR set to: 0
  5736  003736  0100               	movlb	0	; () banked
  5737  003738  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5738  00373A                     l5601:
  5739                           
  5740                           ; BSR set to: 0
  5741  00373A  0100               	movlb	0	; () banked
  5742  00373C  90D8               	bcf	status,0,c
  5743  00373E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5744  003740  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5745  003742  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5746  003744  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5747                           
  5748                           ; BSR set to: 0
  5749  003746  0100               	movlb	0	; () banked
  5750  003748  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5751  00374A  D7CD               	goto	l5593
  5752  00374C                     l1649:
  5753                           
  5754                           ; BSR set to: 0
  5755  00374C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5756  003750  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5757  003754  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5758  003758  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5759                           
  5760                           ; BSR set to: 0
  5761  00375C  0012               	return		;funcret
  5762  00375E                     __end_of___lldiv:
  5763                           	opt stack 0
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           intcon	equ	0xFF2
  5771                           intcon2	equ	0xFF1
  5772                           intcon3	equ	0xFF0
  5773                           postinc0	equ	0xFEE
  5774                           wreg	equ	0xFE8
  5775                           postdec1	equ	0xFE5
  5776                           fsr1l	equ	0xFE1
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           fsr2h	equ	0xFDA
  5781                           fsr2l	equ	0xFD9
  5782                           status	equ	0xFD8
  5783                           
  5784 ;; *************** function _change_state_to_menu_start *****************
  5785 ;; Defined at:
  5786 ;;		line 474 in file "UI.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;		None
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;		None
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  1    wreg      void 
  5793 ;; Registers used:
  5794 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;Total ram usage:        0 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:   11
  5807 ;; This function calls:
  5808 ;;		_lcdInst
  5809 ;;		_printRTC
  5810 ;;		_printf
  5811 ;; This function is called by:
  5812 ;;		_initUI
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text19
  5817  004540                     __ptext19:
  5818                           	opt stack 0
  5819  004540                     _change_state_to_menu_start:
  5820                           	opt stack 18
  5821                           
  5822                           ;UI.c: 475: cur_state = 0;
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;incstack = 0
  5826  004540  0E00               	movlw	0
  5827  004542  0100               	movlb	0	; () banked
  5828  004544  6FE1               	movwf	(_cur_state+1)& (0+255),b
  5829  004546  0E00               	movlw	0
  5830  004548  6FE0               	movwf	_cur_state& (0+255),b
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;UI.c: 477: lcdInst(0b10000000);;
  5834  00454A  0E80               	movlw	128
  5835  00454C  EC9B  F023         	call	_lcdInst
  5836                           
  5837                           ;UI.c: 478: printRTC();
  5838  004550  EC94  F00F         	call	_printRTC	;wreg free
  5839                           
  5840                           ;UI.c: 479: lcdInst(0b11000000);;
  5841  004554  0EC0               	movlw	192
  5842  004556  EC9B  F023         	call	_lcdInst
  5843                           
  5844                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  5845  00455A  0EF7               	movlw	low STR_30
  5846  00455C  0100               	movlb	0	; () banked
  5847  00455E  6F8E               	movwf	printf@f& (0+255),b
  5848  004560  0EFD               	movlw	high STR_30
  5849  004562  0100               	movlb	0	; () banked
  5850  004564  6F8F               	movwf	(printf@f+1)& (0+255),b
  5851  004566  ECB8  F008         	call	_printf	;wreg free
  5852  00456A  0012               	return		;funcret
  5853  00456C                     __end_of_change_state_to_menu_start:
  5854                           	opt stack 0
  5855                           tblptru	equ	0xFF8
  5856                           tblptrh	equ	0xFF7
  5857                           tblptrl	equ	0xFF6
  5858                           tablat	equ	0xFF5
  5859                           prodh	equ	0xFF4
  5860                           prodl	equ	0xFF3
  5861                           intcon	equ	0xFF2
  5862                           intcon2	equ	0xFF1
  5863                           intcon3	equ	0xFF0
  5864                           postinc0	equ	0xFEE
  5865                           wreg	equ	0xFE8
  5866                           postdec1	equ	0xFE5
  5867                           fsr1l	equ	0xFE1
  5868                           indf2	equ	0xFDF
  5869                           postinc2	equ	0xFDE
  5870                           postdec2	equ	0xFDD
  5871                           fsr2h	equ	0xFDA
  5872                           fsr2l	equ	0xFD9
  5873                           status	equ	0xFD8
  5874                           
  5875 ;; *************** function _initTime *****************
  5876 ;; Defined at:
  5877 ;;		line 17 in file "RTC.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  s               1    wreg     unsigned char 
  5880 ;;  m               1    0[BANK0 ] unsigned char 
  5881 ;;  h               1    1[BANK0 ] unsigned char 
  5882 ;;  w               1    2[BANK0 ] unsigned char 
  5883 ;;  DD              1    3[BANK0 ] unsigned char 
  5884 ;;  MM              1    4[BANK0 ] unsigned char 
  5885 ;;  YY              1    5[BANK0 ] unsigned char 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  s               1    6[BANK0 ] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5897 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;Total ram usage:        7 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:    7
  5904 ;; This function calls:
  5905 ;;		Nothing
  5906 ;; This function is called by:
  5907 ;;		_main
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	text20
  5912  00467C                     __ptext20:
  5913                           	opt stack 0
  5914  00467C                     _initTime:
  5915                           	opt stack 23
  5916                           
  5917                           ;incstack = 0
  5918                           ;initTime@s stored from wreg
  5919  00467C  0100               	movlb	0	; () banked
  5920  00467E  6F86               	movwf	initTime@s& (0+255),b
  5921                           
  5922                           ;RTC.c: 19: time[0] = s;
  5923  004680  C086  F124         	movff	initTime@s,_time
  5924                           
  5925                           ;RTC.c: 20: time[1] = m;
  5926  004684  C080  F125         	movff	initTime@m,_time+1
  5927                           
  5928                           ;RTC.c: 21: time[2] = h;
  5929  004688  C081  F126         	movff	initTime@h,_time+2
  5930                           
  5931                           ;RTC.c: 22: time[3] = w;
  5932  00468C  C082  F127         	movff	initTime@w,_time+3
  5933                           
  5934                           ;RTC.c: 23: time[4] = DD;
  5935  004690  C083  F128         	movff	initTime@DD,_time+4
  5936                           
  5937                           ;RTC.c: 24: time[5] = MM;
  5938  004694  C084  F129         	movff	initTime@MM,_time+5
  5939                           
  5940                           ;RTC.c: 25: time[6] = YY;
  5941  004698  C085  F12A         	movff	initTime@YY,_time+6
  5942  00469C  0012               	return		;funcret
  5943  00469E                     __end_of_initTime:
  5944                           	opt stack 0
  5945                           tblptru	equ	0xFF8
  5946                           tblptrh	equ	0xFF7
  5947                           tblptrl	equ	0xFF6
  5948                           tablat	equ	0xFF5
  5949                           prodh	equ	0xFF4
  5950                           prodl	equ	0xFF3
  5951                           intcon	equ	0xFF2
  5952                           intcon2	equ	0xFF1
  5953                           intcon3	equ	0xFF0
  5954                           postinc0	equ	0xFEE
  5955                           wreg	equ	0xFE8
  5956                           postdec1	equ	0xFE5
  5957                           fsr1l	equ	0xFE1
  5958                           indf2	equ	0xFDF
  5959                           postinc2	equ	0xFDE
  5960                           postdec2	equ	0xFDD
  5961                           fsr2h	equ	0xFDA
  5962                           fsr2l	equ	0xFD9
  5963                           status	equ	0xFD8
  5964                           
  5965 ;; *************** function _initLCD *****************
  5966 ;; Defined at:
  5967 ;;		line 48 in file "lcd.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;		None
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;		None
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      void 
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;Total ram usage:        1 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    9
  5988 ;; This function calls:
  5989 ;;		_lcdInst
  5990 ;; This function is called by:
  5991 ;;		_main
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           	psect	text21
  5996  00413E                     __ptext21:
  5997                           	opt stack 0
  5998  00413E                     _initLCD:
  5999                           	opt stack 21
  6000                           
  6001                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6002                           
  6003                           ;incstack = 0
  6004  00413E  0E9C               	movlw	156
  6005  004140  0100               	movlb	0	; () banked
  6006  004142  6F83               	movwf	??_initLCD& (0+255),b
  6007  004144  0ED7               	movlw	215
  6008  004146                     u7117:
  6009  004146  2EE8               	decfsz	wreg,f,c
  6010  004148  D7FE               	bra	u7117
  6011  00414A  2F83               	decfsz	??_initLCD& (0+255),f,b
  6012  00414C  D7FC               	bra	u7117
  6013                           
  6014                           ;lcd.c: 50: lcdInst(0b00110011);
  6015  00414E  0E33               	movlw	51
  6016  004150  EC9B  F023         	call	_lcdInst
  6017                           
  6018                           ;lcd.c: 51: lcdInst(0b00110010);
  6019  004154  0E32               	movlw	50
  6020  004156  EC9B  F023         	call	_lcdInst
  6021                           
  6022                           ;lcd.c: 53: lcdInst(0b00101000);
  6023  00415A  0E28               	movlw	40
  6024  00415C  EC9B  F023         	call	_lcdInst
  6025                           
  6026                           ;lcd.c: 54: lcdInst(0b00001100);
  6027  004160  0E0C               	movlw	12
  6028  004162  EC9B  F023         	call	_lcdInst
  6029                           
  6030                           ;lcd.c: 55: lcdInst(0b00000110);
  6031  004166  0E06               	movlw	6
  6032  004168  EC9B  F023         	call	_lcdInst
  6033                           
  6034                           ;lcd.c: 56: lcdInst(0b00000001);
  6035  00416C  0E01               	movlw	1
  6036  00416E  EC9B  F023         	call	_lcdInst
  6037                           
  6038                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6039  004172  0E9C               	movlw	156
  6040  004174  0100               	movlb	0	; () banked
  6041  004176  6F83               	movwf	??_initLCD& (0+255),b
  6042  004178  0ED7               	movlw	215
  6043  00417A                     u7127:
  6044  00417A  2EE8               	decfsz	wreg,f,c
  6045  00417C  D7FE               	bra	u7127
  6046  00417E  2F83               	decfsz	??_initLCD& (0+255),f,b
  6047  004180  D7FC               	bra	u7127
  6048  004182  0012               	return		;funcret
  6049  004184                     __end_of_initLCD:
  6050                           	opt stack 0
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           intcon	equ	0xFF2
  6058                           intcon2	equ	0xFF1
  6059                           intcon3	equ	0xFF0
  6060                           postinc0	equ	0xFEE
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _UI *****************
  6072 ;; Defined at:
  6073 ;;		line 76 in file "UI.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;		None
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;  i               1   73[BANK0 ] unsigned char 
  6078 ;;  i               1   85[BANK0 ] unsigned char 
  6079 ;;  i               1   84[BANK0 ] unsigned char 
  6080 ;;  i               1   83[BANK0 ] unsigned char 
  6081 ;;  i               1   82[BANK0 ] unsigned char 
  6082 ;;  i               1   81[BANK0 ] unsigned char 
  6083 ;;  i               1   80[BANK0 ] unsigned char 
  6084 ;;  i               1   79[BANK0 ] unsigned char 
  6085 ;;  i               1   78[BANK0 ] unsigned char 
  6086 ;;  i               1   77[BANK0 ] unsigned char 
  6087 ;;  i               1   76[BANK0 ] unsigned char 
  6088 ;;  i               1   75[BANK0 ] unsigned char 
  6089 ;;  i               1   74[BANK0 ] unsigned char 
  6090 ;;  month           4   86[BANK0 ] unsigned char [4]
  6091 ;;  i               1   72[BANK0 ] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  1    wreg      void 
  6094 ;; Registers used:
  6095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;Total ram usage:       22 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:   11
  6108 ;; This function calls:
  6109 ;;		___awdiv
  6110 ;;		___awmod
  6111 ;;		_change_state_to_menu_12
  6112 ;;		_change_state_to_menu_22
  6113 ;;		_lcdInst
  6114 ;;		_printRTC
  6115 ;;		_printf
  6116 ;;		_strcpy
  6117 ;; This function is called by:
  6118 ;;		_main
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text22
  6123  0008CA                     __ptext22:
  6124                           	opt stack 0
  6125  0008CA                     _UI:
  6126                           	opt stack 19
  6127                           
  6128                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6129                           
  6130                           ;incstack = 0
  6131  0008CA  0E02               	movlw	2
  6132  0008CC  0100               	movlb	0	; () banked
  6133  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6134  0008D0  A4D8               	btfss	status,2,c
  6135  0008D2  D075               	goto	l7337
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6139  0008D4  0E01               	movlw	1
  6140  0008D6  EC9B  F023         	call	_lcdInst
  6141  0008DA  0E68               	movlw	104
  6142  0008DC  0100               	movlb	0	; () banked
  6143  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6144  0008E0  0EE4               	movlw	228
  6145  0008E2                     u7137:
  6146  0008E2  2EE8               	decfsz	wreg,f,c
  6147  0008E4  D7FE               	bra	u7137
  6148  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6149  0008E8  D7FC               	bra	u7137
  6150  0008EA  F000               	nop	
  6151                           
  6152                           ;UI.c: 79: lcdInst(0b10000000);;
  6153  0008EC  0E80               	movlw	128
  6154  0008EE  EC9B  F023         	call	_lcdInst
  6155                           
  6156                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6157  0008F2  0EA3               	movlw	low STR_1
  6158  0008F4  0100               	movlb	0	; () banked
  6159  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6160  0008F8  0EFB               	movlw	high STR_1
  6161  0008FA  0100               	movlb	0	; () banked
  6162  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6163  0008FE  0E01               	movlw	1
  6164  000900  0100               	movlb	0	; () banked
  6165  000902  25FD               	addwf	_sel& (0+255),w,b
  6166  000904  0100               	movlb	0	; () banked
  6167  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6168  000908  0100               	movlb	0	; () banked
  6169  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6170  00090C  0E00               	movlw	0
  6171  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6172  000910  ECB8  F008         	call	_printf	;wreg free
  6173                           
  6174                           ;UI.c: 81: lcdInst(0b11000000);;
  6175  000914  0EC0               	movlw	192
  6176  000916  EC9B  F023         	call	_lcdInst
  6177                           
  6178                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6179  00091A  0E0E               	movlw	14
  6180  00091C  0100               	movlb	0	; () banked
  6181  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6182  000920  0E10               	movlw	16
  6183  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6184  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6185  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6186  00092C  EC04  F01C         	call	___awmod	;wreg free
  6187  000930  C080  F0C6         	movff	?___awmod,_UI$2292
  6188  000934  C081  F0C7         	movff	?___awmod+1,_UI$2292+1
  6189                           
  6190                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6191  000938  0E27               	movlw	low STR_2
  6192  00093A  0100               	movlb	0	; () banked
  6193  00093C  6F8E               	movwf	printf@f& (0+255),b
  6194  00093E  0EFF               	movlw	high STR_2
  6195  000940  0100               	movlb	0	; () banked
  6196  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6197  000944  0E0E               	movlw	14
  6198  000946  0100               	movlb	0	; () banked
  6199  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6200  00094A  0E10               	movlw	16
  6201  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6202  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6203  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6204  000956  EC04  F01C         	call	___awmod	;wreg free
  6205  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6206  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6207  000962  0E00               	movlw	0
  6208  000964  0100               	movlb	0	; () banked
  6209  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6210  000968  0E3C               	movlw	60
  6211  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6212  00096C  ECF2  F01A         	call	___awdiv	;wreg free
  6213  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6214  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6215  000978  C0C6  F080         	movff	_UI$2292,___awmod@dividend
  6216  00097C  C0C7  F081         	movff	_UI$2292+1,___awmod@dividend+1
  6217  000980  0E00               	movlw	0
  6218  000982  0100               	movlb	0	; () banked
  6219  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6220  000986  0E3C               	movlw	60
  6221  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6222  00098A  EC04  F01C         	call	___awmod	;wreg free
  6223  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6224  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6225  000996  ECB8  F008         	call	_printf	;wreg free
  6226                           
  6227                           ;UI.c: 83: machine_state = UI_state;
  6228  00099A  0E00               	movlw	0
  6229  00099C  0100               	movlb	0	; () banked
  6230  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6231  0009A0                     l180:
  6232  0009A0  A281               	btfss	3969,1,c	;volatile
  6233  0009A2  D7FE               	goto	l180
  6234                           
  6235                           ;UI.c: 86: }
  6236                           ;UI.c: 87: if(cur_state==12){
  6237  0009A4  0E0C               	movlw	12
  6238  0009A6  0100               	movlb	0	; () banked
  6239  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6240  0009AA  0100               	movlb	0	; () banked
  6241  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6242  0009AE  A4D8               	btfss	status,2,c
  6243  0009B0  D003               	goto	l7335
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;UI.c: 88: change_state_to_menu_12();
  6247  0009B2  ECFF  F020         	call	_change_state_to_menu_12	;wreg free
  6248                           
  6249                           ;UI.c: 89: }
  6250  0009B6  D3D5               	goto	l7657
  6251  0009B8                     l7335:
  6252                           
  6253                           ;UI.c: 90: else{
  6254                           ;UI.c: 91: change_state_to_menu_22();
  6255  0009B8  ECE3  F020         	call	_change_state_to_menu_22	;wreg free
  6256                           
  6257                           ;UI.c: 92: }
  6258                           ;UI.c: 93: }
  6259  0009BC  D3D2               	goto	l7657
  6260  0009BE                     l7337:
  6261                           
  6262                           ;UI.c: 94: else if(cur_state == 0){
  6263  0009BE  0100               	movlb	0	; () banked
  6264  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6265  0009C2  0100               	movlb	0	; () banked
  6266  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6267  0009C6  A4D8               	btfss	status,2,c
  6268  0009C8  D3CC               	goto	l7657
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6272  0009CA  0E00               	movlw	0
  6273  0009CC  0100               	movlb	0	; () banked
  6274  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6275  0009D0                     l7341:
  6276                           
  6277                           ; BSR set to: 0
  6278  0009D0  0E63               	movlw	99
  6279  0009D2  0100               	movlb	0	; () banked
  6280  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6281  0009D6  D001               	goto	l7345
  6282  0009D8  D00C               	goto	l7349
  6283  0009DA                     l7345:
  6284                           
  6285                           ; BSR set to: 0
  6286  0009DA  0E68               	movlw	104
  6287  0009DC  0100               	movlb	0	; () banked
  6288  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6289  0009E0  0EE4               	movlw	228
  6290  0009E2                     u7147:
  6291  0009E2  2EE8               	decfsz	wreg,f,c
  6292  0009E4  D7FE               	bra	u7147
  6293  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6294  0009E8  D7FC               	bra	u7147
  6295  0009EA  F000               	nop	
  6296  0009EC  0100               	movlb	0	; () banked
  6297  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6298  0009F0  D7EF               	goto	l7341
  6299  0009F2                     l7349:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;UI.c: 96: if(cur_state == 0){
  6303  0009F2  0100               	movlb	0	; () banked
  6304  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6305  0009F6  0100               	movlb	0	; () banked
  6306  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6307  0009FA  A4D8               	btfss	status,2,c
  6308  0009FC  D3B2               	goto	l7657
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;UI.c: 97: printRTC();
  6312  0009FE  EC94  F00F         	call	_printRTC	;wreg free
  6313                           
  6314                           ;UI.c: 98: }
  6315                           ;UI.c: 99: }
  6316                           ;UI.c: 100: while(logstate){
  6317  000A02  D3AF               	goto	l7657
  6318  000A04                     l7353:
  6319                           
  6320                           ;UI.c: 102: if(!log_completion){
  6321  000A04  0100               	movlb	0	; () banked
  6322  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6323  000A08  0100               	movlb	0	; () banked
  6324  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6325  000A0C  A4D8               	btfss	status,2,c
  6326  000A0E  D041               	goto	l7383
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6330  000A10  0E01               	movlw	1
  6331  000A12  EC9B  F023         	call	_lcdInst
  6332  000A16  0E68               	movlw	104
  6333  000A18  0100               	movlb	0	; () banked
  6334  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6335  000A1C  0EE4               	movlw	228
  6336  000A1E                     u7157:
  6337  000A1E  2EE8               	decfsz	wreg,f,c
  6338  000A20  D7FE               	bra	u7157
  6339  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6340  000A24  D7FC               	bra	u7157
  6341  000A26  F000               	nop	
  6342                           
  6343                           ;UI.c: 104: lcdInst(0b10000000);;
  6344  000A28  0E80               	movlw	128
  6345  000A2A  EC9B  F023         	call	_lcdInst
  6346                           
  6347                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6348  000A2E  0E91               	movlw	low STR_3
  6349  000A30  0100               	movlb	0	; () banked
  6350  000A32  6F8E               	movwf	printf@f& (0+255),b
  6351  000A34  0EFB               	movlw	high STR_3
  6352  000A36  0100               	movlb	0	; () banked
  6353  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6354  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6355  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6356  000A42  ECB8  F008         	call	_printf	;wreg free
  6357                           
  6358                           ;UI.c: 106: lcdInst(0b11000000);;
  6359  000A46  0EC0               	movlw	192
  6360  000A48  EC9B  F023         	call	_lcdInst
  6361                           
  6362                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6363  000A4C  0E4A               	movlw	low STR_4
  6364  000A4E  0100               	movlb	0	; () banked
  6365  000A50  6F8E               	movwf	printf@f& (0+255),b
  6366  000A52  0EFE               	movlw	high STR_4
  6367  000A54  0100               	movlb	0	; () banked
  6368  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6369  000A58  ECB8  F008         	call	_printf	;wreg free
  6370  000A5C                     l7367:
  6371  000A5C  0E00               	movlw	0
  6372  000A5E  0100               	movlb	0	; () banked
  6373  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6374  000A62                     l7369:
  6375                           
  6376                           ; BSR set to: 0
  6377  000A62  0E63               	movlw	99
  6378  000A64  0100               	movlb	0	; () banked
  6379  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6380  000A68  D001               	goto	l7373
  6381  000A6A  D00C               	goto	l7377
  6382  000A6C                     l7373:
  6383                           
  6384                           ; BSR set to: 0
  6385  000A6C  0E68               	movlw	104
  6386  000A6E  0100               	movlb	0	; () banked
  6387  000A70  6FC4               	movwf	??_UI& (0+255),b
  6388  000A72  0EE4               	movlw	228
  6389  000A74                     u7167:
  6390  000A74  2EE8               	decfsz	wreg,f,c
  6391  000A76  D7FE               	bra	u7167
  6392  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6393  000A7A  D7FC               	bra	u7167
  6394  000A7C  F000               	nop	
  6395  000A7E  0100               	movlb	0	; () banked
  6396  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6397  000A82  D7EF               	goto	l7369
  6398  000A84                     l7377:
  6399                           
  6400                           ; BSR set to: 0
  6401  000A84  0100               	movlb	0	; () banked
  6402  000A86  51F6               	movf	_logstate& (0+255),w,b
  6403  000A88  0100               	movlb	0	; () banked
  6404  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6405  000A8C  B4D8               	btfsc	status,2,c
  6406  000A8E  0012               	return	
  6407  000A90  D7E5               	goto	l7367
  6408  000A92                     l7383:
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;UI.c: 111: else{
  6412                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6413  000A92  0E01               	movlw	1
  6414  000A94  EC9B  F023         	call	_lcdInst
  6415  000A98  0E68               	movlw	104
  6416  000A9A  0100               	movlb	0	; () banked
  6417  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6418  000A9E  0EE4               	movlw	228
  6419  000AA0                     u7177:
  6420  000AA0  2EE8               	decfsz	wreg,f,c
  6421  000AA2  D7FE               	bra	u7177
  6422  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6423  000AA6  D7FC               	bra	u7177
  6424  000AA8  F000               	nop	
  6425                           
  6426                           ;UI.c: 113: lcdInst(0b10000000);;
  6427  000AAA  0E80               	movlw	128
  6428  000AAC  EC9B  F023         	call	_lcdInst
  6429                           
  6430                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6431  000AB0  0E91               	movlw	low STR_3
  6432  000AB2  0100               	movlb	0	; () banked
  6433  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6434  000AB6  0EFB               	movlw	high STR_3
  6435  000AB8  0100               	movlb	0	; () banked
  6436  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6437  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6438  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6439  000AC4  ECB8  F008         	call	_printf	;wreg free
  6440                           
  6441                           ;UI.c: 115: lcdInst(0b11000000);;
  6442  000AC8  0EC0               	movlw	192
  6443  000ACA  EC9B  F023         	call	_lcdInst
  6444                           
  6445                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6446  000ACE  0EE6               	movlw	low STR_6
  6447  000AD0  0100               	movlb	0	; () banked
  6448  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6449  000AD4  0EFD               	movlw	high STR_6
  6450  000AD6  0100               	movlb	0	; () banked
  6451  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6452  000ADA  ECB8  F008         	call	_printf	;wreg free
  6453                           
  6454                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6455  000ADE  0E00               	movlw	0
  6456  000AE0  0100               	movlb	0	; () banked
  6457  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6458  000AE4                     l7397:
  6459                           
  6460                           ; BSR set to: 0
  6461  000AE4  0E63               	movlw	99
  6462  000AE6  0100               	movlb	0	; () banked
  6463  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6464  000AEA  D001               	goto	l7401
  6465  000AEC  D00C               	goto	l7405
  6466  000AEE                     l7401:
  6467                           
  6468                           ; BSR set to: 0
  6469  000AEE  0E68               	movlw	104
  6470  000AF0  0100               	movlb	0	; () banked
  6471  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6472  000AF4  0EE4               	movlw	228
  6473  000AF6                     u7187:
  6474  000AF6  2EE8               	decfsz	wreg,f,c
  6475  000AF8  D7FE               	bra	u7187
  6476  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6477  000AFC  D7FC               	bra	u7187
  6478  000AFE  F000               	nop	
  6479  000B00  0100               	movlb	0	; () banked
  6480  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6481  000B04  D7EF               	goto	l7397
  6482  000B06                     l7405:
  6483                           
  6484                           ; BSR set to: 0
  6485  000B06  0100               	movlb	0	; () banked
  6486  000B08  51F6               	movf	_logstate& (0+255),w,b
  6487  000B0A  0100               	movlb	0	; () banked
  6488  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6489  000B0E  B4D8               	btfsc	status,2,c
  6490  000B10  0012               	return	
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6494                           
  6495                           ; BSR set to: 0
  6496                           
  6497                           ; BSR set to: 0
  6498  000B12  0E00               	movlw	0
  6499  000B14  0100               	movlb	0	; () banked
  6500  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6501  000B18                     l7411:
  6502                           
  6503                           ; BSR set to: 0
  6504  000B18  0E63               	movlw	99
  6505  000B1A  0100               	movlb	0	; () banked
  6506  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6507  000B1E  D001               	goto	l7415
  6508  000B20  D00C               	goto	l7419
  6509  000B22                     l7415:
  6510                           
  6511                           ; BSR set to: 0
  6512  000B22  0E68               	movlw	104
  6513  000B24  0100               	movlb	0	; () banked
  6514  000B26  6FC4               	movwf	??_UI& (0+255),b
  6515  000B28  0EE4               	movlw	228
  6516  000B2A                     u7197:
  6517  000B2A  2EE8               	decfsz	wreg,f,c
  6518  000B2C  D7FE               	bra	u7197
  6519  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6520  000B30  D7FC               	bra	u7197
  6521  000B32  F000               	nop	
  6522  000B34  0100               	movlb	0	; () banked
  6523  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6524  000B38  D7EF               	goto	l7411
  6525  000B3A                     l7419:
  6526                           
  6527                           ; BSR set to: 0
  6528  000B3A  0100               	movlb	0	; () banked
  6529  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6530  000B3E  0100               	movlb	0	; () banked
  6531  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6532  000B42  B4D8               	btfsc	status,2,c
  6533  000B44  0012               	return	
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6537                           
  6538                           ; BSR set to: 0
  6539                           
  6540                           ; BSR set to: 0
  6541  000B46  0E01               	movlw	1
  6542  000B48  EC9B  F023         	call	_lcdInst
  6543  000B4C  0E68               	movlw	104
  6544  000B4E  0100               	movlb	0	; () banked
  6545  000B50  6FC4               	movwf	??_UI& (0+255),b
  6546  000B52  0EE4               	movlw	228
  6547  000B54                     u7207:
  6548  000B54  2EE8               	decfsz	wreg,f,c
  6549  000B56  D7FE               	bra	u7207
  6550  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6551  000B5A  D7FC               	bra	u7207
  6552  000B5C  F000               	nop	
  6553                           
  6554                           ;UI.c: 122: lcdInst(0b10000000);;
  6555  000B5E  0E80               	movlw	128
  6556  000B60  EC9B  F023         	call	_lcdInst
  6557                           
  6558                           ;UI.c: 123: printf("START:");
  6559  000B64  0EC4               	movlw	low STR_7
  6560  000B66  0100               	movlb	0	; () banked
  6561  000B68  6F8E               	movwf	printf@f& (0+255),b
  6562  000B6A  0EFF               	movlw	high STR_7
  6563  000B6C  0100               	movlb	0	; () banked
  6564  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6565  000B70  ECB8  F008         	call	_printf	;wreg free
  6566                           
  6567                           ;UI.c: 124: lcdInst(0b11000000);;
  6568  000B74  0EC0               	movlw	192
  6569  000B76  EC9B  F023         	call	_lcdInst
  6570                           
  6571                           ;UI.c: 125: char month[] = "MMM";
  6572  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6573  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6574  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6575  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6576                           
  6577                           ;UI.c: 126: switch(log_startTime[5]){
  6578  000B8A  D0C3               	goto	l7463
  6579  000B8C                     l7435:
  6580                           
  6581                           ;UI.c: 128: strcpy(month, "JAN");
  6582  000B8C  0ED6               	movlw	low UI@month
  6583  000B8E  0100               	movlb	0	; () banked
  6584  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6585  000B92  0E00               	movlw	high UI@month
  6586  000B94  0100               	movlb	0	; () banked
  6587  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6588  000B98  0EDB               	movlw	low STR_8
  6589  000B9A  0100               	movlb	0	; () banked
  6590  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6591  000B9E  0EFF               	movlw	high STR_8
  6592  000BA0  0100               	movlb	0	; () banked
  6593  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6594  000BA4  EC1B  F021         	call	_strcpy	;wreg free
  6595                           
  6596                           ;UI.c: 129: break;
  6597  000BA8  D0E6               	goto	l7465
  6598  000BAA                     l7437:
  6599                           
  6600                           ;UI.c: 131: strcpy(month, "FEB");
  6601  000BAA  0ED6               	movlw	low UI@month
  6602  000BAC  0100               	movlb	0	; () banked
  6603  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6604  000BB0  0E00               	movlw	high UI@month
  6605  000BB2  0100               	movlb	0	; () banked
  6606  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6607  000BB6  0ECB               	movlw	low STR_9
  6608  000BB8  0100               	movlb	0	; () banked
  6609  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6610  000BBC  0EFF               	movlw	high STR_9
  6611  000BBE  0100               	movlb	0	; () banked
  6612  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6613  000BC2  EC1B  F021         	call	_strcpy	;wreg free
  6614                           
  6615                           ;UI.c: 132: break;
  6616  000BC6  D0D7               	goto	l7465
  6617  000BC8                     l7439:
  6618                           
  6619                           ;UI.c: 134: strcpy(month, "MAR");
  6620  000BC8  0ED6               	movlw	low UI@month
  6621  000BCA  0100               	movlb	0	; () banked
  6622  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6623  000BCE  0E00               	movlw	high UI@month
  6624  000BD0  0100               	movlb	0	; () banked
  6625  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6626  000BD4  0EE7               	movlw	low STR_10
  6627  000BD6  0100               	movlb	0	; () banked
  6628  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6629  000BDA  0EFF               	movlw	high STR_10
  6630  000BDC  0100               	movlb	0	; () banked
  6631  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6632  000BE0  EC1B  F021         	call	_strcpy	;wreg free
  6633                           
  6634                           ;UI.c: 135: break;
  6635  000BE4  D0C8               	goto	l7465
  6636  000BE6                     l7441:
  6637                           
  6638                           ;UI.c: 137: strcpy(month, "APR");
  6639  000BE6  0ED6               	movlw	low UI@month
  6640  000BE8  0100               	movlb	0	; () banked
  6641  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6642  000BEC  0E00               	movlw	high UI@month
  6643  000BEE  0100               	movlb	0	; () banked
  6644  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6645  000BF2  0EEB               	movlw	low STR_11
  6646  000BF4  0100               	movlb	0	; () banked
  6647  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6648  000BF8  0EFF               	movlw	high STR_11
  6649  000BFA  0100               	movlb	0	; () banked
  6650  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6651  000BFE  EC1B  F021         	call	_strcpy	;wreg free
  6652                           
  6653                           ;UI.c: 138: break;
  6654  000C02  D0B9               	goto	l7465
  6655  000C04                     l7443:
  6656                           
  6657                           ;UI.c: 140: strcpy(month, "MAY");
  6658  000C04  0ED6               	movlw	low UI@month
  6659  000C06  0100               	movlb	0	; () banked
  6660  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6661  000C0A  0E00               	movlw	high UI@month
  6662  000C0C  0100               	movlb	0	; () banked
  6663  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6664  000C10  0EFB               	movlw	low STR_12
  6665  000C12  0100               	movlb	0	; () banked
  6666  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6667  000C16  0EFF               	movlw	high STR_12
  6668  000C18  0100               	movlb	0	; () banked
  6669  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6670  000C1C  EC1B  F021         	call	_strcpy	;wreg free
  6671                           
  6672                           ;UI.c: 141: break;
  6673  000C20  D0AA               	goto	l7465
  6674  000C22                     l7445:
  6675                           
  6676                           ;UI.c: 143: strcpy(month, "JUN");
  6677  000C22  0ED6               	movlw	low UI@month
  6678  000C24  0100               	movlb	0	; () banked
  6679  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6680  000C28  0E00               	movlw	high UI@month
  6681  000C2A  0100               	movlb	0	; () banked
  6682  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6683  000C2E  0EDF               	movlw	low STR_13
  6684  000C30  0100               	movlb	0	; () banked
  6685  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6686  000C34  0EFF               	movlw	high STR_13
  6687  000C36  0100               	movlb	0	; () banked
  6688  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6689  000C3A  EC1B  F021         	call	_strcpy	;wreg free
  6690                           
  6691                           ;UI.c: 144: break;
  6692  000C3E  D09B               	goto	l7465
  6693  000C40                     l7447:
  6694                           
  6695                           ;UI.c: 146: strcpy(month, "JUL");
  6696  000C40  0ED6               	movlw	low UI@month
  6697  000C42  0100               	movlb	0	; () banked
  6698  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6699  000C46  0E00               	movlw	high UI@month
  6700  000C48  0100               	movlb	0	; () banked
  6701  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6702  000C4C  0ED7               	movlw	low STR_14
  6703  000C4E  0100               	movlb	0	; () banked
  6704  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6705  000C52  0EFF               	movlw	high STR_14
  6706  000C54  0100               	movlb	0	; () banked
  6707  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6708  000C58  EC1B  F021         	call	_strcpy	;wreg free
  6709                           
  6710                           ;UI.c: 147: break;
  6711  000C5C  D08C               	goto	l7465
  6712  000C5E                     l7449:
  6713                           
  6714                           ;UI.c: 149: strcpy(month, "AUG");
  6715  000C5E  0ED6               	movlw	low UI@month
  6716  000C60  0100               	movlb	0	; () banked
  6717  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6718  000C64  0E00               	movlw	high UI@month
  6719  000C66  0100               	movlb	0	; () banked
  6720  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6721  000C6A  0ED3               	movlw	low STR_15
  6722  000C6C  0100               	movlb	0	; () banked
  6723  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6724  000C70  0EFF               	movlw	high STR_15
  6725  000C72  0100               	movlb	0	; () banked
  6726  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6727  000C76  EC1B  F021         	call	_strcpy	;wreg free
  6728                           
  6729                           ;UI.c: 150: break;
  6730  000C7A  D07D               	goto	l7465
  6731  000C7C                     l7451:
  6732                           
  6733                           ;UI.c: 152: strcpy(month, "SEP");
  6734  000C7C  0ED6               	movlw	low UI@month
  6735  000C7E  0100               	movlb	0	; () banked
  6736  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6737  000C82  0E00               	movlw	high UI@month
  6738  000C84  0100               	movlb	0	; () banked
  6739  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6740  000C88  0EE3               	movlw	low STR_16
  6741  000C8A  0100               	movlb	0	; () banked
  6742  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6743  000C8E  0EFF               	movlw	high STR_16
  6744  000C90  0100               	movlb	0	; () banked
  6745  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6746  000C94  EC1B  F021         	call	_strcpy	;wreg free
  6747                           
  6748                           ;UI.c: 153: break;
  6749  000C98  D06E               	goto	l7465
  6750  000C9A                     l7453:
  6751                           
  6752                           ;UI.c: 155: strcpy(month, "OCT");
  6753  000C9A  0ED6               	movlw	low UI@month
  6754  000C9C  0100               	movlb	0	; () banked
  6755  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6756  000CA0  0E00               	movlw	high UI@month
  6757  000CA2  0100               	movlb	0	; () banked
  6758  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6759  000CA6  0EF3               	movlw	low STR_17
  6760  000CA8  0100               	movlb	0	; () banked
  6761  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6762  000CAC  0EFF               	movlw	high STR_17
  6763  000CAE  0100               	movlb	0	; () banked
  6764  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6765  000CB2  EC1B  F021         	call	_strcpy	;wreg free
  6766                           
  6767                           ;UI.c: 156: break;
  6768  000CB6  D05F               	goto	l7465
  6769  000CB8                     l7455:
  6770                           
  6771                           ;UI.c: 158: strcpy(month, "NOV");
  6772  000CB8  0ED6               	movlw	low UI@month
  6773  000CBA  0100               	movlb	0	; () banked
  6774  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6775  000CBE  0E00               	movlw	high UI@month
  6776  000CC0  0100               	movlb	0	; () banked
  6777  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6778  000CC4  0EF7               	movlw	low STR_18
  6779  000CC6  0100               	movlb	0	; () banked
  6780  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6781  000CCA  0EFF               	movlw	high STR_18
  6782  000CCC  0100               	movlb	0	; () banked
  6783  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6784  000CD0  EC1B  F021         	call	_strcpy	;wreg free
  6785                           
  6786                           ;UI.c: 159: break;
  6787  000CD4  D050               	goto	l7465
  6788  000CD6                     l7457:
  6789                           
  6790                           ;UI.c: 161: strcpy(month, "DEC");
  6791  000CD6  0ED6               	movlw	low UI@month
  6792  000CD8  0100               	movlb	0	; () banked
  6793  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6794  000CDC  0E00               	movlw	high UI@month
  6795  000CDE  0100               	movlb	0	; () banked
  6796  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6797  000CE2  0ECF               	movlw	low STR_19
  6798  000CE4  0100               	movlb	0	; () banked
  6799  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6800  000CE8  0EFF               	movlw	high STR_19
  6801  000CEA  0100               	movlb	0	; () banked
  6802  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6803  000CEE  EC1B  F021         	call	_strcpy	;wreg free
  6804                           
  6805                           ;UI.c: 162: break;
  6806  000CF2  D041               	goto	l7465
  6807  000CF4                     l7459:
  6808                           
  6809                           ;UI.c: 164: strcpy(month, "ERR");
  6810  000CF4  0ED6               	movlw	low UI@month
  6811  000CF6  0100               	movlb	0	; () banked
  6812  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  6813  000CFA  0E00               	movlw	high UI@month
  6814  000CFC  0100               	movlb	0	; () banked
  6815  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6816  000D00  0EEF               	movlw	low STR_20
  6817  000D02  0100               	movlb	0	; () banked
  6818  000D04  6F82               	movwf	strcpy@from& (0+255),b
  6819  000D06  0EFF               	movlw	high STR_20
  6820  000D08  0100               	movlb	0	; () banked
  6821  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6822  000D0C  EC1B  F021         	call	_strcpy	;wreg free
  6823                           
  6824                           ;UI.c: 166: }
  6825                           
  6826                           ;UI.c: 165: break;
  6827  000D10  D032               	goto	l7465
  6828  000D12                     l7463:
  6829  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  6830  000D16  CFDE F0C4          	movff	postinc2,??_UI
  6831  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  6832                           
  6833                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6834                           ; Switch size 1, requested type "space"
  6835                           ; Number of cases is 1, Range of values is 0 to 0
  6836                           ; switch strategies available:
  6837                           ; Name         Instructions Cycles
  6838                           ; simple_byte            4     3 (average)
  6839                           ;	Chosen strategy is simple_byte
  6840  000D1E  0100               	movlb	0	; () banked
  6841  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  6842  000D22  0A00               	xorlw	0	; case 0
  6843  000D24  A4D8               	btfss	status,2,c
  6844  000D26  D7E6               	goto	l7459
  6845                           
  6846                           ; BSR set to: 0
  6847                           ; Switch size 1, requested type "space"
  6848                           ; Number of cases is 12, Range of values is 1 to 12
  6849                           ; switch strategies available:
  6850                           ; Name         Instructions Cycles
  6851                           ; simple_byte           37    19 (average)
  6852                           ;	Chosen strategy is simple_byte
  6853  000D28  0100               	movlb	0	; () banked
  6854  000D2A  51C4               	movf	??_UI& (0+255),w,b
  6855  000D2C  0A01               	xorlw	1	; case 1
  6856  000D2E  B4D8               	btfsc	status,2,c
  6857  000D30  D72D               	goto	l7435
  6858  000D32  0A03               	xorlw	3	; case 2
  6859  000D34  B4D8               	btfsc	status,2,c
  6860  000D36  D739               	goto	l7437
  6861  000D38  0A01               	xorlw	1	; case 3
  6862  000D3A  B4D8               	btfsc	status,2,c
  6863  000D3C  D745               	goto	l7439
  6864  000D3E  0A07               	xorlw	7	; case 4
  6865  000D40  B4D8               	btfsc	status,2,c
  6866  000D42  D751               	goto	l7441
  6867  000D44  0A01               	xorlw	1	; case 5
  6868  000D46  B4D8               	btfsc	status,2,c
  6869  000D48  D75D               	goto	l7443
  6870  000D4A  0A03               	xorlw	3	; case 6
  6871  000D4C  B4D8               	btfsc	status,2,c
  6872  000D4E  D769               	goto	l7445
  6873  000D50  0A01               	xorlw	1	; case 7
  6874  000D52  B4D8               	btfsc	status,2,c
  6875  000D54  D775               	goto	l7447
  6876  000D56  0A0F               	xorlw	15	; case 8
  6877  000D58  B4D8               	btfsc	status,2,c
  6878  000D5A  D781               	goto	l7449
  6879  000D5C  0A01               	xorlw	1	; case 9
  6880  000D5E  B4D8               	btfsc	status,2,c
  6881  000D60  D78D               	goto	l7451
  6882  000D62  0A03               	xorlw	3	; case 10
  6883  000D64  B4D8               	btfsc	status,2,c
  6884  000D66  D799               	goto	l7453
  6885  000D68  0A01               	xorlw	1	; case 11
  6886  000D6A  B4D8               	btfsc	status,2,c
  6887  000D6C  D7A5               	goto	l7455
  6888  000D6E  0A07               	xorlw	7	; case 12
  6889  000D70  B4D8               	btfsc	status,2,c
  6890  000D72  D7B1               	goto	l7457
  6891  000D74  D7BF               	goto	l7459
  6892  000D76                     l7465:
  6893                           
  6894                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6895  000D76  0E40               	movlw	low STR_21
  6896  000D78  0100               	movlb	0	; () banked
  6897  000D7A  6F8E               	movwf	printf@f& (0+255),b
  6898  000D7C  0EFB               	movlw	high STR_21
  6899  000D7E  0100               	movlb	0	; () banked
  6900  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  6901  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  6902  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  6903  000D8A  0ED6               	movlw	low UI@month
  6904  000D8C  0100               	movlb	0	; () banked
  6905  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  6906  000D90  0E00               	movlw	high UI@month
  6907  000D92  0100               	movlb	0	; () banked
  6908  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  6909  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  6910  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  6911  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  6912  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  6913  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  6914  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  6915  000DAE  ECB8  F008         	call	_printf	;wreg free
  6916                           
  6917                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6918  000DB2  0E00               	movlw	0
  6919  000DB4  0100               	movlb	0	; () banked
  6920  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  6921  000DB8                     l7469:
  6922                           
  6923                           ; BSR set to: 0
  6924  000DB8  0E63               	movlw	99
  6925  000DBA  0100               	movlb	0	; () banked
  6926  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  6927  000DBE  D001               	goto	l7473
  6928  000DC0  D00C               	goto	l7477
  6929  000DC2                     l7473:
  6930                           
  6931                           ; BSR set to: 0
  6932  000DC2  0E68               	movlw	104
  6933  000DC4  0100               	movlb	0	; () banked
  6934  000DC6  6FC4               	movwf	??_UI& (0+255),b
  6935  000DC8  0EE4               	movlw	228
  6936  000DCA                     u7217:
  6937  000DCA  2EE8               	decfsz	wreg,f,c
  6938  000DCC  D7FE               	bra	u7217
  6939  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  6940  000DD0  D7FC               	bra	u7217
  6941  000DD2  F000               	nop	
  6942  000DD4  0100               	movlb	0	; () banked
  6943  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  6944  000DD8  D7EF               	goto	l7469
  6945  000DDA                     l7477:
  6946                           
  6947                           ; BSR set to: 0
  6948  000DDA  0100               	movlb	0	; () banked
  6949  000DDC  51F6               	movf	_logstate& (0+255),w,b
  6950  000DDE  0100               	movlb	0	; () banked
  6951  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6952  000DE2  B4D8               	btfsc	status,2,c
  6953  000DE4  0012               	return	
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6957                           
  6958                           ; BSR set to: 0
  6959                           
  6960                           ; BSR set to: 0
  6961  000DE6  0E00               	movlw	0
  6962  000DE8  0100               	movlb	0	; () banked
  6963  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  6964  000DEC                     l7483:
  6965                           
  6966                           ; BSR set to: 0
  6967  000DEC  0E63               	movlw	99
  6968  000DEE  0100               	movlb	0	; () banked
  6969  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  6970  000DF2  D001               	goto	l7487
  6971  000DF4  D00C               	goto	l7491
  6972  000DF6                     l7487:
  6973                           
  6974                           ; BSR set to: 0
  6975  000DF6  0E68               	movlw	104
  6976  000DF8  0100               	movlb	0	; () banked
  6977  000DFA  6FC4               	movwf	??_UI& (0+255),b
  6978  000DFC  0EE4               	movlw	228
  6979  000DFE                     u7227:
  6980  000DFE  2EE8               	decfsz	wreg,f,c
  6981  000E00  D7FE               	bra	u7227
  6982  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  6983  000E04  D7FC               	bra	u7227
  6984  000E06  F000               	nop	
  6985  000E08  0100               	movlb	0	; () banked
  6986  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  6987  000E0C  D7EF               	goto	l7483
  6988  000E0E                     l7491:
  6989                           
  6990                           ; BSR set to: 0
  6991  000E0E  0100               	movlb	0	; () banked
  6992  000E10  51F6               	movf	_logstate& (0+255),w,b
  6993  000E12  0100               	movlb	0	; () banked
  6994  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6995  000E16  B4D8               	btfsc	status,2,c
  6996  000E18  0012               	return	
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7000                           
  7001                           ; BSR set to: 0
  7002                           
  7003                           ; BSR set to: 0
  7004  000E1A  0E01               	movlw	1
  7005  000E1C  EC9B  F023         	call	_lcdInst
  7006  000E20  0E68               	movlw	104
  7007  000E22  0100               	movlb	0	; () banked
  7008  000E24  6FC4               	movwf	??_UI& (0+255),b
  7009  000E26  0EE4               	movlw	228
  7010  000E28                     u7237:
  7011  000E28  2EE8               	decfsz	wreg,f,c
  7012  000E2A  D7FE               	bra	u7237
  7013  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7014  000E2E  D7FC               	bra	u7237
  7015  000E30  F000               	nop	
  7016                           
  7017                           ;UI.c: 173: lcdInst(0b10000000);;
  7018  000E32  0E80               	movlw	128
  7019  000E34  EC9B  F023         	call	_lcdInst
  7020                           
  7021                           ;UI.c: 174: printf("DURATION:");
  7022  000E38  0E9B               	movlw	low STR_22
  7023  000E3A  0100               	movlb	0	; () banked
  7024  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7025  000E3E  0EFF               	movlw	high STR_22
  7026  000E40  0100               	movlb	0	; () banked
  7027  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7028  000E44  ECB8  F008         	call	_printf	;wreg free
  7029                           
  7030                           ;UI.c: 175: lcdInst(0b11000000);;
  7031  000E48  0EC0               	movlw	192
  7032  000E4A  EC9B  F023         	call	_lcdInst
  7033                           
  7034                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7035  000E4E  0E0E               	movlw	14
  7036  000E50  0100               	movlb	0	; () banked
  7037  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7038  000E54  0E10               	movlw	16
  7039  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7040  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7041  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7042  000E60  EC04  F01C         	call	___awmod	;wreg free
  7043  000E64  C080  F0C6         	movff	?___awmod,_UI$2292
  7044  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2292+1
  7045                           
  7046                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7047  000E6C  0E19               	movlw	low STR_23
  7048  000E6E  0100               	movlb	0	; () banked
  7049  000E70  6F8E               	movwf	printf@f& (0+255),b
  7050  000E72  0EFF               	movlw	high STR_23
  7051  000E74  0100               	movlb	0	; () banked
  7052  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7053  000E78  0E0E               	movlw	14
  7054  000E7A  0100               	movlb	0	; () banked
  7055  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7056  000E7E  0E10               	movlw	16
  7057  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7058  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7059  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7060  000E8A  EC04  F01C         	call	___awmod	;wreg free
  7061  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7062  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7063  000E96  0E00               	movlw	0
  7064  000E98  0100               	movlb	0	; () banked
  7065  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7066  000E9C  0E3C               	movlw	60
  7067  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7068  000EA0  ECF2  F01A         	call	___awdiv	;wreg free
  7069  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7070  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7071  000EAC  C0C6  F080         	movff	_UI$2292,___awmod@dividend
  7072  000EB0  C0C7  F081         	movff	_UI$2292+1,___awmod@dividend+1
  7073  000EB4  0E00               	movlw	0
  7074  000EB6  0100               	movlb	0	; () banked
  7075  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7076  000EBA  0E3C               	movlw	60
  7077  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7078  000EBE  EC04  F01C         	call	___awmod	;wreg free
  7079  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7080  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7081  000ECA  ECB8  F008         	call	_printf	;wreg free
  7082                           
  7083                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7084  000ECE  0E00               	movlw	0
  7085  000ED0  0100               	movlb	0	; () banked
  7086  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7087  000ED4                     l7511:
  7088                           
  7089                           ; BSR set to: 0
  7090  000ED4  0E63               	movlw	99
  7091  000ED6  0100               	movlb	0	; () banked
  7092  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7093  000EDA  D001               	goto	l7515
  7094  000EDC  D00C               	goto	l7519
  7095  000EDE                     l7515:
  7096                           
  7097                           ; BSR set to: 0
  7098  000EDE  0E68               	movlw	104
  7099  000EE0  0100               	movlb	0	; () banked
  7100  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7101  000EE4  0EE4               	movlw	228
  7102  000EE6                     u7247:
  7103  000EE6  2EE8               	decfsz	wreg,f,c
  7104  000EE8  D7FE               	bra	u7247
  7105  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7106  000EEC  D7FC               	bra	u7247
  7107  000EEE  F000               	nop	
  7108  000EF0  0100               	movlb	0	; () banked
  7109  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7110  000EF4  D7EF               	goto	l7511
  7111  000EF6                     l7519:
  7112                           
  7113                           ; BSR set to: 0
  7114  000EF6  0100               	movlb	0	; () banked
  7115  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7116  000EFA  0100               	movlb	0	; () banked
  7117  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7118  000EFE  B4D8               	btfsc	status,2,c
  7119  000F00  0012               	return	
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7123                           
  7124                           ; BSR set to: 0
  7125                           
  7126                           ; BSR set to: 0
  7127  000F02  0E00               	movlw	0
  7128  000F04  0100               	movlb	0	; () banked
  7129  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7130  000F08                     l7525:
  7131                           
  7132                           ; BSR set to: 0
  7133  000F08  0E63               	movlw	99
  7134  000F0A  0100               	movlb	0	; () banked
  7135  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7136  000F0E  D001               	goto	l7529
  7137  000F10  D00C               	goto	l7533
  7138  000F12                     l7529:
  7139                           
  7140                           ; BSR set to: 0
  7141  000F12  0E68               	movlw	104
  7142  000F14  0100               	movlb	0	; () banked
  7143  000F16  6FC4               	movwf	??_UI& (0+255),b
  7144  000F18  0EE4               	movlw	228
  7145  000F1A                     u7257:
  7146  000F1A  2EE8               	decfsz	wreg,f,c
  7147  000F1C  D7FE               	bra	u7257
  7148  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7149  000F20  D7FC               	bra	u7257
  7150  000F22  F000               	nop	
  7151  000F24  0100               	movlb	0	; () banked
  7152  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7153  000F28  D7EF               	goto	l7525
  7154  000F2A                     l7533:
  7155                           
  7156                           ; BSR set to: 0
  7157  000F2A  0100               	movlb	0	; () banked
  7158  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7159  000F2E  0100               	movlb	0	; () banked
  7160  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7161  000F32  B4D8               	btfsc	status,2,c
  7162  000F34  0012               	return	
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7166                           
  7167                           ; BSR set to: 0
  7168                           
  7169                           ; BSR set to: 0
  7170  000F36  0E01               	movlw	1
  7171  000F38  EC9B  F023         	call	_lcdInst
  7172  000F3C  0E68               	movlw	104
  7173  000F3E  0100               	movlb	0	; () banked
  7174  000F40  6FC4               	movwf	??_UI& (0+255),b
  7175  000F42  0EE4               	movlw	228
  7176  000F44                     u7267:
  7177  000F44  2EE8               	decfsz	wreg,f,c
  7178  000F46  D7FE               	bra	u7267
  7179  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7180  000F4A  D7FC               	bra	u7267
  7181  000F4C  F000               	nop	
  7182                           
  7183                           ;UI.c: 182: lcdInst(0b10000000);;
  7184  000F4E  0E80               	movlw	128
  7185  000F50  EC9B  F023         	call	_lcdInst
  7186                           
  7187                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7188  000F54  0E3C               	movlw	low STR_24
  7189  000F56  0100               	movlb	0	; () banked
  7190  000F58  6F8E               	movwf	printf@f& (0+255),b
  7191  000F5A  0EFD               	movlw	high STR_24
  7192  000F5C  0100               	movlb	0	; () banked
  7193  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7194  000F60  ECB8  F008         	call	_printf	;wreg free
  7195                           
  7196                           ;UI.c: 184: lcdInst(0b11000000);;
  7197  000F64  0EC0               	movlw	192
  7198  000F66  EC9B  F023         	call	_lcdInst
  7199                           
  7200                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7201  000F6A  0E19               	movlw	low STR_25
  7202  000F6C  0100               	movlb	0	; () banked
  7203  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7204  000F70  0EFE               	movlw	high STR_25
  7205  000F72  0100               	movlb	0	; () banked
  7206  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7207  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7208  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7209  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7210  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7211  000F86  ECB8  F008         	call	_printf	;wreg free
  7212                           
  7213                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7214  000F8A  0E00               	movlw	0
  7215  000F8C  0100               	movlb	0	; () banked
  7216  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7217  000F90                     l7551:
  7218                           
  7219                           ; BSR set to: 0
  7220  000F90  0E63               	movlw	99
  7221  000F92  0100               	movlb	0	; () banked
  7222  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7223  000F96  D001               	goto	l7555
  7224  000F98  D00C               	goto	l7559
  7225  000F9A                     l7555:
  7226                           
  7227                           ; BSR set to: 0
  7228  000F9A  0E68               	movlw	104
  7229  000F9C  0100               	movlb	0	; () banked
  7230  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7231  000FA0  0EE4               	movlw	228
  7232  000FA2                     u7277:
  7233  000FA2  2EE8               	decfsz	wreg,f,c
  7234  000FA4  D7FE               	bra	u7277
  7235  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7236  000FA8  D7FC               	bra	u7277
  7237  000FAA  F000               	nop	
  7238  000FAC  0100               	movlb	0	; () banked
  7239  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7240  000FB0  D7EF               	goto	l7551
  7241  000FB2                     l7559:
  7242                           
  7243                           ; BSR set to: 0
  7244  000FB2  0100               	movlb	0	; () banked
  7245  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7246  000FB6  0100               	movlb	0	; () banked
  7247  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7248  000FBA  B4D8               	btfsc	status,2,c
  7249  000FBC  0012               	return	
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7253                           
  7254                           ; BSR set to: 0
  7255                           
  7256                           ; BSR set to: 0
  7257  000FBE  0E00               	movlw	0
  7258  000FC0  0100               	movlb	0	; () banked
  7259  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7260  000FC4                     l7565:
  7261                           
  7262                           ; BSR set to: 0
  7263  000FC4  0E63               	movlw	99
  7264  000FC6  0100               	movlb	0	; () banked
  7265  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7266  000FCA  D001               	goto	l7569
  7267  000FCC  D00C               	goto	l7573
  7268  000FCE                     l7569:
  7269                           
  7270                           ; BSR set to: 0
  7271  000FCE  0E68               	movlw	104
  7272  000FD0  0100               	movlb	0	; () banked
  7273  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7274  000FD4  0EE4               	movlw	228
  7275  000FD6                     u7287:
  7276  000FD6  2EE8               	decfsz	wreg,f,c
  7277  000FD8  D7FE               	bra	u7287
  7278  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7279  000FDC  D7FC               	bra	u7287
  7280  000FDE  F000               	nop	
  7281  000FE0  0100               	movlb	0	; () banked
  7282  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7283  000FE4  D7EF               	goto	l7565
  7284  000FE6                     l7573:
  7285                           
  7286                           ; BSR set to: 0
  7287  000FE6  0100               	movlb	0	; () banked
  7288  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7289  000FEA  0100               	movlb	0	; () banked
  7290  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7291  000FEE  B4D8               	btfsc	status,2,c
  7292  000FF0  0012               	return	
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7296                           
  7297                           ; BSR set to: 0
  7298                           
  7299                           ; BSR set to: 0
  7300  000FF2  0E01               	movlw	1
  7301  000FF4  EC9B  F023         	call	_lcdInst
  7302  000FF8  0E68               	movlw	104
  7303  000FFA  0100               	movlb	0	; () banked
  7304  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7305  000FFE  0EE4               	movlw	228
  7306  001000                     u7297:
  7307  001000  2EE8               	decfsz	wreg,f,c
  7308  001002  D7FE               	bra	u7297
  7309  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7310  001006  D7FC               	bra	u7297
  7311  001008  F000               	nop	
  7312                           
  7313                           ;UI.c: 191: lcdInst(0b10000000);;
  7314  00100A  0E80               	movlw	128
  7315  00100C  EC9B  F023         	call	_lcdInst
  7316                           
  7317                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7318  001010  0E4D               	movlw	low STR_26
  7319  001012  0100               	movlb	0	; () banked
  7320  001014  6F8E               	movwf	printf@f& (0+255),b
  7321  001016  0EFD               	movlw	high STR_26
  7322  001018  0100               	movlb	0	; () banked
  7323  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7324  00101C  ECB8  F008         	call	_printf	;wreg free
  7325                           
  7326                           ;UI.c: 193: lcdInst(0b11000000);;
  7327  001020  0EC0               	movlw	192
  7328  001022  EC9B  F023         	call	_lcdInst
  7329                           
  7330                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7331  001026  0E08               	movlw	low STR_27
  7332  001028  0100               	movlb	0	; () banked
  7333  00102A  6F8E               	movwf	printf@f& (0+255),b
  7334  00102C  0EFE               	movlw	high STR_27
  7335  00102E  0100               	movlb	0	; () banked
  7336  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7337  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7338  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7339  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7340  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7341  001042  ECB8  F008         	call	_printf	;wreg free
  7342                           
  7343                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7344  001046  0E00               	movlw	0
  7345  001048  0100               	movlb	0	; () banked
  7346  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7347  00104C                     l7591:
  7348                           
  7349                           ; BSR set to: 0
  7350  00104C  0E63               	movlw	99
  7351  00104E  0100               	movlb	0	; () banked
  7352  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7353  001052  D001               	goto	l7595
  7354  001054  D00C               	goto	l7599
  7355  001056                     l7595:
  7356                           
  7357                           ; BSR set to: 0
  7358  001056  0E68               	movlw	104
  7359  001058  0100               	movlb	0	; () banked
  7360  00105A  6FC4               	movwf	??_UI& (0+255),b
  7361  00105C  0EE4               	movlw	228
  7362  00105E                     u7307:
  7363  00105E  2EE8               	decfsz	wreg,f,c
  7364  001060  D7FE               	bra	u7307
  7365  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7366  001064  D7FC               	bra	u7307
  7367  001066  F000               	nop	
  7368  001068  0100               	movlb	0	; () banked
  7369  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7370  00106C  D7EF               	goto	l7591
  7371  00106E                     l7599:
  7372                           
  7373                           ; BSR set to: 0
  7374  00106E  0100               	movlb	0	; () banked
  7375  001070  51F6               	movf	_logstate& (0+255),w,b
  7376  001072  0100               	movlb	0	; () banked
  7377  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7378  001076  B4D8               	btfsc	status,2,c
  7379  001078  0012               	return	
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7383                           
  7384                           ; BSR set to: 0
  7385                           
  7386                           ; BSR set to: 0
  7387  00107A  0E00               	movlw	0
  7388  00107C  0100               	movlb	0	; () banked
  7389  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7390  001080                     l7605:
  7391                           
  7392                           ; BSR set to: 0
  7393  001080  0E63               	movlw	99
  7394  001082  0100               	movlb	0	; () banked
  7395  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7396  001086  D001               	goto	l7609
  7397  001088  D00C               	goto	l7613
  7398  00108A                     l7609:
  7399                           
  7400                           ; BSR set to: 0
  7401  00108A  0E68               	movlw	104
  7402  00108C  0100               	movlb	0	; () banked
  7403  00108E  6FC4               	movwf	??_UI& (0+255),b
  7404  001090  0EE4               	movlw	228
  7405  001092                     u7317:
  7406  001092  2EE8               	decfsz	wreg,f,c
  7407  001094  D7FE               	bra	u7317
  7408  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7409  001098  D7FC               	bra	u7317
  7410  00109A  F000               	nop	
  7411  00109C  0100               	movlb	0	; () banked
  7412  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7413  0010A0  D7EF               	goto	l7605
  7414  0010A2                     l7613:
  7415                           
  7416                           ; BSR set to: 0
  7417  0010A2  0100               	movlb	0	; () banked
  7418  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7419  0010A6  0100               	movlb	0	; () banked
  7420  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7421  0010AA  B4D8               	btfsc	status,2,c
  7422  0010AC  0012               	return	
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7426                           
  7427                           ; BSR set to: 0
  7428                           
  7429                           ; BSR set to: 0
  7430  0010AE  0E01               	movlw	1
  7431  0010B0  EC9B  F023         	call	_lcdInst
  7432  0010B4  0E68               	movlw	104
  7433  0010B6  0100               	movlb	0	; () banked
  7434  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7435  0010BA  0EE4               	movlw	228
  7436  0010BC                     u7327:
  7437  0010BC  2EE8               	decfsz	wreg,f,c
  7438  0010BE  D7FE               	bra	u7327
  7439  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7440  0010C2  D7FC               	bra	u7327
  7441  0010C4  F000               	nop	
  7442                           
  7443                           ;UI.c: 200: lcdInst(0b10000000);;
  7444  0010C6  0E80               	movlw	128
  7445  0010C8  EC9B  F023         	call	_lcdInst
  7446                           
  7447                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7448  0010CC  0E5E               	movlw	low STR_28
  7449  0010CE  0100               	movlb	0	; () banked
  7450  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7451  0010D2  0EFD               	movlw	high STR_28
  7452  0010D4  0100               	movlb	0	; () banked
  7453  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7454  0010D8  ECB8  F008         	call	_printf	;wreg free
  7455                           
  7456                           ;UI.c: 202: lcdInst(0b11000000);;
  7457  0010DC  0EC0               	movlw	192
  7458  0010DE  EC9B  F023         	call	_lcdInst
  7459                           
  7460                           ;UI.c: 203: printf("%d", log_count_total);
  7461  0010E2  0E16               	movlw	low (STR_27+14)
  7462  0010E4  0100               	movlb	0	; () banked
  7463  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7464  0010E8  0EFE               	movlw	high (STR_27+14)
  7465  0010EA  0100               	movlb	0	; () banked
  7466  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7467  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7468  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7469  0010F6  ECB8  F008         	call	_printf	;wreg free
  7470                           
  7471                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7472  0010FA  0E00               	movlw	0
  7473  0010FC  0100               	movlb	0	; () banked
  7474  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7475  001100                     l7631:
  7476                           
  7477                           ; BSR set to: 0
  7478  001100  0E63               	movlw	99
  7479  001102  0100               	movlb	0	; () banked
  7480  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7481  001106  D001               	goto	l7635
  7482  001108  D00C               	goto	l7639
  7483  00110A                     l7635:
  7484                           
  7485                           ; BSR set to: 0
  7486  00110A  0E68               	movlw	104
  7487  00110C  0100               	movlb	0	; () banked
  7488  00110E  6FC4               	movwf	??_UI& (0+255),b
  7489  001110  0EE4               	movlw	228
  7490  001112                     u7337:
  7491  001112  2EE8               	decfsz	wreg,f,c
  7492  001114  D7FE               	bra	u7337
  7493  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7494  001118  D7FC               	bra	u7337
  7495  00111A  F000               	nop	
  7496  00111C  0100               	movlb	0	; () banked
  7497  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7498  001120  D7EF               	goto	l7631
  7499  001122                     l7639:
  7500                           
  7501                           ; BSR set to: 0
  7502  001122  0100               	movlb	0	; () banked
  7503  001124  51F6               	movf	_logstate& (0+255),w,b
  7504  001126  0100               	movlb	0	; () banked
  7505  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7506  00112A  B4D8               	btfsc	status,2,c
  7507  00112C  0012               	return	
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7511                           
  7512                           ; BSR set to: 0
  7513                           
  7514                           ; BSR set to: 0
  7515  00112E  0E00               	movlw	0
  7516  001130  0100               	movlb	0	; () banked
  7517  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7518  001134                     l7645:
  7519                           
  7520                           ; BSR set to: 0
  7521  001134  0E63               	movlw	99
  7522  001136  0100               	movlb	0	; () banked
  7523  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7524  00113A  D001               	goto	l7649
  7525  00113C  D00C               	goto	l7653
  7526  00113E                     l7649:
  7527                           
  7528                           ; BSR set to: 0
  7529  00113E  0E68               	movlw	104
  7530  001140  0100               	movlb	0	; () banked
  7531  001142  6FC4               	movwf	??_UI& (0+255),b
  7532  001144  0EE4               	movlw	228
  7533  001146                     u7347:
  7534  001146  2EE8               	decfsz	wreg,f,c
  7535  001148  D7FE               	bra	u7347
  7536  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7537  00114C  D7FC               	bra	u7347
  7538  00114E  F000               	nop	
  7539  001150  0100               	movlb	0	; () banked
  7540  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7541  001154  D7EF               	goto	l7645
  7542  001156                     l7653:
  7543                           
  7544                           ; BSR set to: 0
  7545  001156  0100               	movlb	0	; () banked
  7546  001158  51F6               	movf	_logstate& (0+255),w,b
  7547  00115A  0100               	movlb	0	; () banked
  7548  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7549  00115E  B4D8               	btfsc	status,2,c
  7550  001160  0012               	return	
  7551  001162                     l7657:
  7552  001162  0100               	movlb	0	; () banked
  7553  001164  51F6               	movf	_logstate& (0+255),w,b
  7554  001166  0100               	movlb	0	; () banked
  7555  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7556  00116A  B4D8               	btfsc	status,2,c
  7557  00116C  0012               	return	
  7558  00116E  D44A               	goto	l7353
  7559  001170                     __end_of_UI:
  7560                           	opt stack 0
  7561                           tblptru	equ	0xFF8
  7562                           tblptrh	equ	0xFF7
  7563                           tblptrl	equ	0xFF6
  7564                           tablat	equ	0xFF5
  7565                           prodh	equ	0xFF4
  7566                           prodl	equ	0xFF3
  7567                           intcon	equ	0xFF2
  7568                           intcon2	equ	0xFF1
  7569                           intcon3	equ	0xFF0
  7570                           postinc0	equ	0xFEE
  7571                           wreg	equ	0xFE8
  7572                           postdec1	equ	0xFE5
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8
  7580                           
  7581 ;; *************** function _printRTC *****************
  7582 ;; Defined at:
  7583 ;;		line 63 in file "RTC.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;		None
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;  i               2   66[BANK0 ] int 
  7588 ;;  INT_time       14   46[BANK0 ] int [7]
  7589 ;;  month           4   62[BANK0 ] unsigned char [4]
  7590 ;;  RTC_month       2   60[BANK0 ] int 
  7591 ;; Return value:  Size  Location     Type
  7592 ;;                  1    wreg      void 
  7593 ;; Registers used:
  7594 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;Total ram usage:       25 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:   10
  7607 ;; This function calls:
  7608 ;;		_getRTC
  7609 ;;		_lcdInst
  7610 ;;		_printf
  7611 ;;		_strcpy
  7612 ;; This function is called by:
  7613 ;;		_UI
  7614 ;;		_change_state_to_menu_start
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text23
  7619  001F28                     __ptext23:
  7620                           	opt stack 0
  7621  001F28                     _printRTC:
  7622                           	opt stack 18
  7623                           
  7624                           ;RTC.c: 64: getRTC();
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;incstack = 0
  7628  001F28  EC2A  F01D         	call	_getRTC	;wreg free
  7629                           
  7630                           ;RTC.c: 65: char month[] = "MMM";
  7631  001F2C  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7632  001F30  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7633  001F34  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7634  001F38  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7635                           
  7636                           ;RTC.c: 66: int INT_time[7];
  7637                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7638  001F3C  0E00               	movlw	0
  7639  001F3E  0100               	movlb	0	; () banked
  7640  001F40  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7641  001F42  0E00               	movlw	0
  7642  001F44  6FC2               	movwf	printRTC@i& (0+255),b
  7643                           
  7644                           ; BSR set to: 0
  7645  001F46  0100               	movlb	0	; () banked
  7646  001F48  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7647  001F4A  D008               	goto	l5797
  7648  001F4C  0100               	movlb	0	; () banked
  7649  001F4E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7650  001F50  E146               	bnz	l602
  7651  001F52  0E07               	movlw	7
  7652  001F54  0100               	movlb	0	; () banked
  7653  001F56  5DC2               	subwf	printRTC@i& (0+255),w,b
  7654  001F58  B0D8               	btfsc	status,0,c
  7655  001F5A  D041               	goto	l602
  7656  001F5C                     l5797:
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7660  001F5C  0E24               	movlw	low _time
  7661  001F5E  0100               	movlb	0	; () banked
  7662  001F60  25C2               	addwf	printRTC@i& (0+255),w,b
  7663  001F62  6ED9               	movwf	fsr2l,c
  7664  001F64  0E01               	movlw	high _time
  7665  001F66  0100               	movlb	0	; () banked
  7666  001F68  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7667  001F6A  6EDA               	movwf	fsr2h,c
  7668  001F6C  50DF               	movf	indf2,w,c
  7669  001F6E  0100               	movlb	0	; () banked
  7670  001F70  6FAB               	movwf	??_printRTC& (0+255),b
  7671  001F72  0100               	movlb	0	; () banked
  7672  001F74  3BAB               	swapf	??_printRTC& (0+255),f,b
  7673  001F76  0E0F               	movlw	15
  7674  001F78  17AB               	andwf	??_printRTC& (0+255),f,b
  7675  001F7A  0E0F               	movlw	15
  7676  001F7C  0100               	movlb	0	; () banked
  7677  001F7E  17AB               	andwf	??_printRTC& (0+255),f,b
  7678  001F80  0100               	movlb	0	; () banked
  7679  001F82  51AB               	movf	??_printRTC& (0+255),w,b
  7680  001F84  0D0A               	mullw	10
  7681  001F86  0E24               	movlw	low _time
  7682  001F88  0100               	movlb	0	; () banked
  7683  001F8A  25C2               	addwf	printRTC@i& (0+255),w,b
  7684  001F8C  6ED9               	movwf	fsr2l,c
  7685  001F8E  0E01               	movlw	high _time
  7686  001F90  0100               	movlb	0	; () banked
  7687  001F92  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7688  001F94  6EDA               	movwf	fsr2h,c
  7689  001F96  50DF               	movf	indf2,w,c
  7690  001F98  0B0F               	andlw	15
  7691  001F9A  0100               	movlb	0	; () banked
  7692  001F9C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7693  001F9E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7694  001FA0  50F3               	movf	prodl,w,c
  7695  001FA2  0100               	movlb	0	; () banked
  7696  001FA4  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7697  001FA6  50F4               	movf	prodh,w,c
  7698  001FA8  0100               	movlb	0	; () banked
  7699  001FAA  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7700  001FAC  90D8               	bcf	status,0,c
  7701  001FAE  0100               	movlb	0	; () banked
  7702  001FB0  35C2               	rlcf	printRTC@i& (0+255),w,b
  7703  001FB2  6ED9               	movwf	fsr2l,c
  7704  001FB4  0100               	movlb	0	; () banked
  7705  001FB6  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7706  001FB8  6EDA               	movwf	fsr2h,c
  7707  001FBA  0EAE               	movlw	low printRTC@INT_time
  7708  001FBC  26D9               	addwf	fsr2l,f,c
  7709  001FBE  0E00               	movlw	high printRTC@INT_time
  7710  001FC0  22DA               	addwfc	fsr2h,f,c
  7711  001FC2  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7712  001FC6  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7713                           
  7714                           ; BSR set to: 0
  7715  001FCA  0100               	movlb	0	; () banked
  7716  001FCC  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7717  001FCE  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7718                           
  7719                           ; BSR set to: 0
  7720  001FD0  0100               	movlb	0	; () banked
  7721  001FD2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7722  001FD4  D7C3               	goto	l5797
  7723  001FD6  0100               	movlb	0	; () banked
  7724  001FD8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7725  001FDA  E101               	bnz	u4440
  7726  001FDC  D7BA               	goto	L5
  7727  001FDE                     u4440:
  7728  001FDE                     l602:
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;RTC.c: 69: }
  7732                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7733  001FDE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7734  001FE2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7735                           
  7736                           ;RTC.c: 71: switch(RTC_month){
  7737  001FE6  D0B4               	goto	l5829
  7738  001FE8                     l5803:
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;RTC.c: 73: strcpy(month, "JAN");
  7742  001FE8  0EBE               	movlw	low printRTC@month
  7743  001FEA  0100               	movlb	0	; () banked
  7744  001FEC  6F80               	movwf	strcpy@to& (0+255),b
  7745  001FEE  0E00               	movlw	high printRTC@month
  7746  001FF0  0100               	movlb	0	; () banked
  7747  001FF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7748  001FF4  0EDB               	movlw	low STR_8
  7749  001FF6  0100               	movlb	0	; () banked
  7750  001FF8  6F82               	movwf	strcpy@from& (0+255),b
  7751  001FFA  0EFF               	movlw	high STR_8
  7752  001FFC  0100               	movlb	0	; () banked
  7753  001FFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7754  002000  EC1B  F021         	call	_strcpy	;wreg free
  7755                           
  7756                           ;RTC.c: 74: break;
  7757  002004  D0D4               	goto	l5831
  7758  002006                     l5805:
  7759                           
  7760                           ;RTC.c: 76: strcpy(month, "FEB");
  7761  002006  0EBE               	movlw	low printRTC@month
  7762  002008  0100               	movlb	0	; () banked
  7763  00200A  6F80               	movwf	strcpy@to& (0+255),b
  7764  00200C  0E00               	movlw	high printRTC@month
  7765  00200E  0100               	movlb	0	; () banked
  7766  002010  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7767  002012  0ECB               	movlw	low STR_9
  7768  002014  0100               	movlb	0	; () banked
  7769  002016  6F82               	movwf	strcpy@from& (0+255),b
  7770  002018  0EFF               	movlw	high STR_9
  7771  00201A  0100               	movlb	0	; () banked
  7772  00201C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7773  00201E  EC1B  F021         	call	_strcpy	;wreg free
  7774                           
  7775                           ;RTC.c: 77: break;
  7776  002022  D0C5               	goto	l5831
  7777  002024                     l5807:
  7778                           
  7779                           ;RTC.c: 79: strcpy(month, "MAR");
  7780  002024  0EBE               	movlw	low printRTC@month
  7781  002026  0100               	movlb	0	; () banked
  7782  002028  6F80               	movwf	strcpy@to& (0+255),b
  7783  00202A  0E00               	movlw	high printRTC@month
  7784  00202C  0100               	movlb	0	; () banked
  7785  00202E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7786  002030  0EE7               	movlw	low STR_10
  7787  002032  0100               	movlb	0	; () banked
  7788  002034  6F82               	movwf	strcpy@from& (0+255),b
  7789  002036  0EFF               	movlw	high STR_10
  7790  002038  0100               	movlb	0	; () banked
  7791  00203A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7792  00203C  EC1B  F021         	call	_strcpy	;wreg free
  7793                           
  7794                           ;RTC.c: 80: break;
  7795  002040  D0B6               	goto	l5831
  7796  002042                     l5809:
  7797                           
  7798                           ;RTC.c: 82: strcpy(month, "APR");
  7799  002042  0EBE               	movlw	low printRTC@month
  7800  002044  0100               	movlb	0	; () banked
  7801  002046  6F80               	movwf	strcpy@to& (0+255),b
  7802  002048  0E00               	movlw	high printRTC@month
  7803  00204A  0100               	movlb	0	; () banked
  7804  00204C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7805  00204E  0EEB               	movlw	low STR_11
  7806  002050  0100               	movlb	0	; () banked
  7807  002052  6F82               	movwf	strcpy@from& (0+255),b
  7808  002054  0EFF               	movlw	high STR_11
  7809  002056  0100               	movlb	0	; () banked
  7810  002058  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7811  00205A  EC1B  F021         	call	_strcpy	;wreg free
  7812                           
  7813                           ;RTC.c: 83: break;
  7814  00205E  D0A7               	goto	l5831
  7815  002060                     l5811:
  7816                           
  7817                           ;RTC.c: 85: strcpy(month, "MAY");
  7818  002060  0EBE               	movlw	low printRTC@month
  7819  002062  0100               	movlb	0	; () banked
  7820  002064  6F80               	movwf	strcpy@to& (0+255),b
  7821  002066  0E00               	movlw	high printRTC@month
  7822  002068  0100               	movlb	0	; () banked
  7823  00206A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7824  00206C  0EFB               	movlw	low STR_12
  7825  00206E  0100               	movlb	0	; () banked
  7826  002070  6F82               	movwf	strcpy@from& (0+255),b
  7827  002072  0EFF               	movlw	high STR_12
  7828  002074  0100               	movlb	0	; () banked
  7829  002076  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7830  002078  EC1B  F021         	call	_strcpy	;wreg free
  7831                           
  7832                           ;RTC.c: 86: break;
  7833  00207C  D098               	goto	l5831
  7834  00207E                     l5813:
  7835                           
  7836                           ;RTC.c: 88: strcpy(month, "JUN");
  7837  00207E  0EBE               	movlw	low printRTC@month
  7838  002080  0100               	movlb	0	; () banked
  7839  002082  6F80               	movwf	strcpy@to& (0+255),b
  7840  002084  0E00               	movlw	high printRTC@month
  7841  002086  0100               	movlb	0	; () banked
  7842  002088  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7843  00208A  0EDF               	movlw	low STR_13
  7844  00208C  0100               	movlb	0	; () banked
  7845  00208E  6F82               	movwf	strcpy@from& (0+255),b
  7846  002090  0EFF               	movlw	high STR_13
  7847  002092  0100               	movlb	0	; () banked
  7848  002094  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7849  002096  EC1B  F021         	call	_strcpy	;wreg free
  7850                           
  7851                           ;RTC.c: 89: break;
  7852  00209A  D089               	goto	l5831
  7853  00209C                     l5815:
  7854                           
  7855                           ;RTC.c: 91: strcpy(month, "JUL");
  7856  00209C  0EBE               	movlw	low printRTC@month
  7857  00209E  0100               	movlb	0	; () banked
  7858  0020A0  6F80               	movwf	strcpy@to& (0+255),b
  7859  0020A2  0E00               	movlw	high printRTC@month
  7860  0020A4  0100               	movlb	0	; () banked
  7861  0020A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7862  0020A8  0ED7               	movlw	low STR_14
  7863  0020AA  0100               	movlb	0	; () banked
  7864  0020AC  6F82               	movwf	strcpy@from& (0+255),b
  7865  0020AE  0EFF               	movlw	high STR_14
  7866  0020B0  0100               	movlb	0	; () banked
  7867  0020B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7868  0020B4  EC1B  F021         	call	_strcpy	;wreg free
  7869                           
  7870                           ;RTC.c: 92: break;
  7871  0020B8  D07A               	goto	l5831
  7872  0020BA                     l5817:
  7873                           
  7874                           ;RTC.c: 94: strcpy(month, "AUG");
  7875  0020BA  0EBE               	movlw	low printRTC@month
  7876  0020BC  0100               	movlb	0	; () banked
  7877  0020BE  6F80               	movwf	strcpy@to& (0+255),b
  7878  0020C0  0E00               	movlw	high printRTC@month
  7879  0020C2  0100               	movlb	0	; () banked
  7880  0020C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7881  0020C6  0ED3               	movlw	low STR_15
  7882  0020C8  0100               	movlb	0	; () banked
  7883  0020CA  6F82               	movwf	strcpy@from& (0+255),b
  7884  0020CC  0EFF               	movlw	high STR_15
  7885  0020CE  0100               	movlb	0	; () banked
  7886  0020D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7887  0020D2  EC1B  F021         	call	_strcpy	;wreg free
  7888                           
  7889                           ;RTC.c: 95: break;
  7890  0020D6  D06B               	goto	l5831
  7891  0020D8                     l5819:
  7892                           
  7893                           ;RTC.c: 97: strcpy(month, "SEP");
  7894  0020D8  0EBE               	movlw	low printRTC@month
  7895  0020DA  0100               	movlb	0	; () banked
  7896  0020DC  6F80               	movwf	strcpy@to& (0+255),b
  7897  0020DE  0E00               	movlw	high printRTC@month
  7898  0020E0  0100               	movlb	0	; () banked
  7899  0020E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7900  0020E4  0EE3               	movlw	low STR_16
  7901  0020E6  0100               	movlb	0	; () banked
  7902  0020E8  6F82               	movwf	strcpy@from& (0+255),b
  7903  0020EA  0EFF               	movlw	high STR_16
  7904  0020EC  0100               	movlb	0	; () banked
  7905  0020EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7906  0020F0  EC1B  F021         	call	_strcpy	;wreg free
  7907                           
  7908                           ;RTC.c: 98: break;
  7909  0020F4  D05C               	goto	l5831
  7910  0020F6                     l5821:
  7911                           
  7912                           ;RTC.c: 100: strcpy(month, "OCT");
  7913  0020F6  0EBE               	movlw	low printRTC@month
  7914  0020F8  0100               	movlb	0	; () banked
  7915  0020FA  6F80               	movwf	strcpy@to& (0+255),b
  7916  0020FC  0E00               	movlw	high printRTC@month
  7917  0020FE  0100               	movlb	0	; () banked
  7918  002100  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7919  002102  0EF3               	movlw	low STR_17
  7920  002104  0100               	movlb	0	; () banked
  7921  002106  6F82               	movwf	strcpy@from& (0+255),b
  7922  002108  0EFF               	movlw	high STR_17
  7923  00210A  0100               	movlb	0	; () banked
  7924  00210C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7925  00210E  EC1B  F021         	call	_strcpy	;wreg free
  7926                           
  7927                           ;RTC.c: 101: break;
  7928  002112  D04D               	goto	l5831
  7929  002114                     l5823:
  7930                           
  7931                           ;RTC.c: 103: strcpy(month, "NOV");
  7932  002114  0EBE               	movlw	low printRTC@month
  7933  002116  0100               	movlb	0	; () banked
  7934  002118  6F80               	movwf	strcpy@to& (0+255),b
  7935  00211A  0E00               	movlw	high printRTC@month
  7936  00211C  0100               	movlb	0	; () banked
  7937  00211E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7938  002120  0EF7               	movlw	low STR_18
  7939  002122  0100               	movlb	0	; () banked
  7940  002124  6F82               	movwf	strcpy@from& (0+255),b
  7941  002126  0EFF               	movlw	high STR_18
  7942  002128  0100               	movlb	0	; () banked
  7943  00212A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7944  00212C  EC1B  F021         	call	_strcpy	;wreg free
  7945                           
  7946                           ;RTC.c: 104: break;
  7947  002130  D03E               	goto	l5831
  7948  002132                     l5825:
  7949                           
  7950                           ;RTC.c: 106: strcpy(month, "DEC");
  7951  002132  0EBE               	movlw	low printRTC@month
  7952  002134  0100               	movlb	0	; () banked
  7953  002136  6F80               	movwf	strcpy@to& (0+255),b
  7954  002138  0E00               	movlw	high printRTC@month
  7955  00213A  0100               	movlb	0	; () banked
  7956  00213C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7957  00213E  0ECF               	movlw	low STR_19
  7958  002140  0100               	movlb	0	; () banked
  7959  002142  6F82               	movwf	strcpy@from& (0+255),b
  7960  002144  0EFF               	movlw	high STR_19
  7961  002146  0100               	movlb	0	; () banked
  7962  002148  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7963  00214A  EC1B  F021         	call	_strcpy	;wreg free
  7964                           
  7965                           ;RTC.c: 108: }
  7966                           
  7967                           ;RTC.c: 107: break;
  7968  00214E  D02F               	goto	l5831
  7969  002150                     l5829:
  7970  002150  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7971  002154  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7972                           
  7973                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7974                           ; Switch size 1, requested type "space"
  7975                           ; Number of cases is 1, Range of values is 0 to 0
  7976                           ; switch strategies available:
  7977                           ; Name         Instructions Cycles
  7978                           ; simple_byte            4     3 (average)
  7979                           ;	Chosen strategy is simple_byte
  7980  002158  0100               	movlb	0	; () banked
  7981  00215A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7982  00215C  0A00               	xorlw	0	; case 0
  7983  00215E  A4D8               	btfss	status,2,c
  7984  002160  D026               	goto	l5831
  7985                           
  7986                           ; BSR set to: 0
  7987                           ; Switch size 1, requested type "space"
  7988                           ; Number of cases is 12, Range of values is 1 to 12
  7989                           ; switch strategies available:
  7990                           ; Name         Instructions Cycles
  7991                           ; simple_byte           37    19 (average)
  7992                           ;	Chosen strategy is simple_byte
  7993  002162  0100               	movlb	0	; () banked
  7994  002164  51AB               	movf	??_printRTC& (0+255),w,b
  7995  002166  0A01               	xorlw	1	; case 1
  7996  002168  B4D8               	btfsc	status,2,c
  7997  00216A  D73E               	goto	l5803
  7998  00216C  0A03               	xorlw	3	; case 2
  7999  00216E  B4D8               	btfsc	status,2,c
  8000  002170  D74A               	goto	l5805
  8001  002172  0A01               	xorlw	1	; case 3
  8002  002174  B4D8               	btfsc	status,2,c
  8003  002176  D756               	goto	l5807
  8004  002178  0A07               	xorlw	7	; case 4
  8005  00217A  B4D8               	btfsc	status,2,c
  8006  00217C  D762               	goto	l5809
  8007  00217E  0A01               	xorlw	1	; case 5
  8008  002180  B4D8               	btfsc	status,2,c
  8009  002182  D76E               	goto	l5811
  8010  002184  0A03               	xorlw	3	; case 6
  8011  002186  B4D8               	btfsc	status,2,c
  8012  002188  D77A               	goto	l5813
  8013  00218A  0A01               	xorlw	1	; case 7
  8014  00218C  B4D8               	btfsc	status,2,c
  8015  00218E  D786               	goto	l5815
  8016  002190  0A0F               	xorlw	15	; case 8
  8017  002192  B4D8               	btfsc	status,2,c
  8018  002194  D792               	goto	l5817
  8019  002196  0A01               	xorlw	1	; case 9
  8020  002198  B4D8               	btfsc	status,2,c
  8021  00219A  D79E               	goto	l5819
  8022  00219C  0A03               	xorlw	3	; case 10
  8023  00219E  B4D8               	btfsc	status,2,c
  8024  0021A0  D7AA               	goto	l5821
  8025  0021A2  0A01               	xorlw	1	; case 11
  8026  0021A4  B4D8               	btfsc	status,2,c
  8027  0021A6  D7B6               	goto	l5823
  8028  0021A8  0A07               	xorlw	7	; case 12
  8029  0021AA  B4D8               	btfsc	status,2,c
  8030  0021AC  D7C2               	goto	l5825
  8031  0021AE                     l5831:
  8032                           
  8033                           ;RTC.c: 109: lcdInst(0b10000000);;
  8034  0021AE  0E80               	movlw	128
  8035  0021B0  EC9B  F023         	call	_lcdInst
  8036                           
  8037                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8038  0021B4  0E40               	movlw	low STR_21
  8039  0021B6  0100               	movlb	0	; () banked
  8040  0021B8  6F8E               	movwf	printf@f& (0+255),b
  8041  0021BA  0EFB               	movlw	high STR_21
  8042  0021BC  0100               	movlb	0	; () banked
  8043  0021BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8044  0021C0  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8045  0021C4  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8046  0021C8  0EBE               	movlw	low printRTC@month
  8047  0021CA  0100               	movlb	0	; () banked
  8048  0021CC  6F92               	movwf	(?_printf+4)& (0+255),b
  8049  0021CE  0E00               	movlw	high printRTC@month
  8050  0021D0  0100               	movlb	0	; () banked
  8051  0021D2  6F93               	movwf	(?_printf+5)& (0+255),b
  8052  0021D4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8053  0021D8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8054  0021DC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8055  0021E0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8056  0021E4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8057  0021E8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8058  0021EC  ECB8  F008         	call	_printf	;wreg free
  8059  0021F0  0012               	return		;funcret
  8060  0021F2                     __end_of_printRTC:
  8061                           	opt stack 0
  8062                           tblptru	equ	0xFF8
  8063                           tblptrh	equ	0xFF7
  8064                           tblptrl	equ	0xFF6
  8065                           tablat	equ	0xFF5
  8066                           prodh	equ	0xFF4
  8067                           prodl	equ	0xFF3
  8068                           intcon	equ	0xFF2
  8069                           intcon2	equ	0xFF1
  8070                           intcon3	equ	0xFF0
  8071                           postinc0	equ	0xFEE
  8072                           wreg	equ	0xFE8
  8073                           postdec1	equ	0xFE5
  8074                           fsr1l	equ	0xFE1
  8075                           indf2	equ	0xFDF
  8076                           postinc2	equ	0xFDE
  8077                           postdec2	equ	0xFDD
  8078                           fsr2h	equ	0xFDA
  8079                           fsr2l	equ	0xFD9
  8080                           status	equ	0xFD8
  8081                           
  8082 ;; *************** function _strcpy *****************
  8083 ;; Defined at:
  8084 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8087 ;;		 -> printRTC@month(4), UI@month(4), 
  8088 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8089 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8090 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8091 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8092 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8093 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8094 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8095 ;;		 -> STR_8(4), 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8098 ;;		 -> printRTC@month(4), UI@month(4), 
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  2    0[BANK0 ] PTR unsigned char 
  8101 ;; Registers used:
  8102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8108 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;Total ram usage:        6 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    7
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_UI
  8119 ;;		_printRTC
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           	psect	text24
  8124  004236                     __ptext24:
  8125                           	opt stack 0
  8126  004236                     _strcpy:
  8127                           	opt stack 20
  8128                           
  8129                           ;incstack = 0
  8130  004236  C080  F084         	movff	strcpy@to,strcpy@cp
  8131  00423A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8132  00423E  D006               	goto	l5541
  8133  004240                     l5539:
  8134  004240  0100               	movlb	0	; () banked
  8135  004242  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8136  004244  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8137  004246  0100               	movlb	0	; () banked
  8138  004248  4B82               	infsnz	strcpy@from& (0+255),f,b
  8139  00424A  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8140  00424C                     l5541:
  8141  00424C  C082  FFF6         	movff	strcpy@from,tblptrl
  8142  004250  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8143  004254                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8144  004254  6AF8               	clrf	tblptru,c
  8145  004256                     	endif
  8146  004256                     	if	0	;tblptru may be non-zero
  8147  004256                     	endif
  8148  004256  C084  FFD9         	movff	strcpy@cp,fsr2l
  8149  00425A  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8150  00425E  0008               	tblrd		*
  8151  004260  CFF5 FFDF          	movff	tablat,indf2
  8152  004264  50DF               	movf	indf2,w,c
  8153  004266  B4D8               	btfsc	status,2,c
  8154  004268  0012               	return	
  8155  00426A  D7EA               	goto	l5539
  8156  00426C                     __end_of_strcpy:
  8157                           	opt stack 0
  8158                           tblptru	equ	0xFF8
  8159                           tblptrh	equ	0xFF7
  8160                           tblptrl	equ	0xFF6
  8161                           tablat	equ	0xFF5
  8162                           prodh	equ	0xFF4
  8163                           prodl	equ	0xFF3
  8164                           intcon	equ	0xFF2
  8165                           intcon2	equ	0xFF1
  8166                           intcon3	equ	0xFF0
  8167                           postinc0	equ	0xFEE
  8168                           wreg	equ	0xFE8
  8169                           postdec1	equ	0xFE5
  8170                           fsr1l	equ	0xFE1
  8171                           indf2	equ	0xFDF
  8172                           postinc2	equ	0xFDE
  8173                           postdec2	equ	0xFDD
  8174                           fsr2h	equ	0xFDA
  8175                           fsr2l	equ	0xFD9
  8176                           status	equ	0xFD8
  8177                           
  8178 ;; *************** function _getRTC *****************
  8179 ;; Defined at:
  8180 ;;		line 44 in file "RTC.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;		None
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  i               2    3[BANK0 ] int 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  1    wreg      void 
  8187 ;; Registers used:
  8188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;Total ram usage:        2 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    9
  8201 ;; This function calls:
  8202 ;;		_I2C_Master_Read
  8203 ;;		_I2C_Master_Start
  8204 ;;		_I2C_Master_Stop
  8205 ;;		_I2C_Master_Write
  8206 ;; This function is called by:
  8207 ;;		_printRTC
  8208 ;;		_initSortTimer
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           	psect	text25
  8213  003A54                     __ptext25:
  8214                           	opt stack 0
  8215  003A54                     _getRTC:
  8216                           	opt stack 18
  8217                           
  8218                           ;RTC.c: 48: I2C_Master_Start();
  8219                           
  8220                           ;incstack = 0
  8221  003A54  ECC1  F023         	call	_I2C_Master_Start	;wreg free
  8222                           
  8223                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8224  003A58  0E00               	movlw	0
  8225  003A5A  0100               	movlb	0	; () banked
  8226  003A5C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8227  003A5E  0ED0               	movlw	208
  8228  003A60  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8229  003A62  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  8230                           
  8231                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8232  003A66  0E00               	movlw	0
  8233  003A68  0100               	movlb	0	; () banked
  8234  003A6A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8235  003A6C  0E00               	movlw	0
  8236  003A6E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8237  003A70  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  8238                           
  8239                           ;RTC.c: 51: I2C_Master_Stop();
  8240  003A74  ECBD  F023         	call	_I2C_Master_Stop	;wreg free
  8241                           
  8242                           ;RTC.c: 54: I2C_Master_Start();
  8243  003A78  ECC1  F023         	call	_I2C_Master_Start	;wreg free
  8244                           
  8245                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8246  003A7C  0E00               	movlw	0
  8247  003A7E  0100               	movlb	0	; () banked
  8248  003A80  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8249  003A82  0ED1               	movlw	209
  8250  003A84  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8251  003A86  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  8252                           
  8253                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8254  003A8A  0E00               	movlw	0
  8255  003A8C  0100               	movlb	0	; () banked
  8256  003A8E  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8257  003A90  0E00               	movlw	0
  8258  003A92  6F83               	movwf	getRTC@i& (0+255),b
  8259  003A94                     l5547:
  8260                           
  8261                           ; BSR set to: 0
  8262  003A94  0100               	movlb	0	; () banked
  8263  003A96  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8264  003A98  D008               	goto	l5551
  8265  003A9A  0100               	movlb	0	; () banked
  8266  003A9C  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8267  003A9E  E115               	bnz	l5557
  8268  003AA0  0E06               	movlw	6
  8269  003AA2  0100               	movlb	0	; () banked
  8270  003AA4  5D83               	subwf	getRTC@i& (0+255),w,b
  8271  003AA6  B0D8               	btfsc	status,0,c
  8272  003AA8  D010               	goto	l5557
  8273  003AAA                     l5551:
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8277  003AAA  0E24               	movlw	low _time
  8278  003AAC  0100               	movlb	0	; () banked
  8279  003AAE  2583               	addwf	getRTC@i& (0+255),w,b
  8280  003AB0  6ED9               	movwf	fsr2l,c
  8281  003AB2  0E01               	movlw	high _time
  8282  003AB4  0100               	movlb	0	; () banked
  8283  003AB6  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8284  003AB8  6EDA               	movwf	fsr2h,c
  8285  003ABA  0E01               	movlw	1
  8286  003ABC  EC72  F022         	call	_I2C_Master_Read
  8287  003AC0  6EDF               	movwf	indf2,c
  8288  003AC2  0100               	movlb	0	; () banked
  8289  003AC4  4B83               	infsnz	getRTC@i& (0+255),f,b
  8290  003AC6  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8291  003AC8  D7E5               	goto	l5547
  8292  003ACA                     l5557:
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;RTC.c: 58: }
  8296                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8297  003ACA  0E00               	movlw	0
  8298  003ACC  EC72  F022         	call	_I2C_Master_Read
  8299  003AD0  0101               	movlb	1	; () banked
  8300  003AD2  6F2A               	movwf	(_time+6)& (0+255),b
  8301                           
  8302                           ;RTC.c: 60: I2C_Master_Stop();
  8303  003AD4  ECBD  F023         	call	_I2C_Master_Stop	;wreg free
  8304  003AD8  0012               	return		;funcret
  8305  003ADA                     __end_of_getRTC:
  8306                           	opt stack 0
  8307                           tblptru	equ	0xFF8
  8308                           tblptrh	equ	0xFF7
  8309                           tblptrl	equ	0xFF6
  8310                           tablat	equ	0xFF5
  8311                           prodh	equ	0xFF4
  8312                           prodl	equ	0xFF3
  8313                           intcon	equ	0xFF2
  8314                           intcon2	equ	0xFF1
  8315                           intcon3	equ	0xFF0
  8316                           postinc0	equ	0xFEE
  8317                           wreg	equ	0xFE8
  8318                           postdec1	equ	0xFE5
  8319                           fsr1l	equ	0xFE1
  8320                           indf2	equ	0xFDF
  8321                           postinc2	equ	0xFDE
  8322                           postdec2	equ	0xFDD
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _I2C_Master_Write *****************
  8328 ;; Defined at:
  8329 ;;		line 49 in file "I2C.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  d               2    1[BANK0 ] unsigned int 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;		None
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      void 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0, cstack
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8343 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;Total ram usage:        2 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    8
  8350 ;; This function calls:
  8351 ;;		_I2C_Master_Wait
  8352 ;; This function is called by:
  8353 ;;		_loadRTC
  8354 ;;		_getRTC
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text26
  8359  00475E                     __ptext26:
  8360                           	opt stack 0
  8361  00475E                     _I2C_Master_Write:
  8362                           	opt stack 18
  8363                           
  8364                           ;I2C.c: 51: I2C_Master_Wait();
  8365                           
  8366                           ;incstack = 0
  8367  00475E  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8368                           
  8369                           ;I2C.c: 52: SSPBUF = d;
  8370  004762  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8371  004766  0012               	return		;funcret
  8372  004768                     __end_of_I2C_Master_Write:
  8373                           	opt stack 0
  8374                           tblptru	equ	0xFF8
  8375                           tblptrh	equ	0xFF7
  8376                           tblptrl	equ	0xFF6
  8377                           tablat	equ	0xFF5
  8378                           prodh	equ	0xFF4
  8379                           prodl	equ	0xFF3
  8380                           intcon	equ	0xFF2
  8381                           intcon2	equ	0xFF1
  8382                           intcon3	equ	0xFF0
  8383                           postinc0	equ	0xFEE
  8384                           wreg	equ	0xFE8
  8385                           postdec1	equ	0xFE5
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function _I2C_Master_Stop *****************
  8395 ;; Defined at:
  8396 ;;		line 43 in file "I2C.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;		None
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      void 
  8403 ;; Registers used:
  8404 ;;		wreg, status,2, status,0, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;Total ram usage:        0 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    8
  8417 ;; This function calls:
  8418 ;;		_I2C_Master_Wait
  8419 ;; This function is called by:
  8420 ;;		_loadRTC
  8421 ;;		_getRTC
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text27
  8426  00477A                     __ptext27:
  8427                           	opt stack 0
  8428  00477A                     _I2C_Master_Stop:
  8429                           	opt stack 18
  8430                           
  8431                           ;I2C.c: 45: I2C_Master_Wait();
  8432                           
  8433                           ;incstack = 0
  8434  00477A  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8435                           
  8436                           ;I2C.c: 46: PEN = 1;
  8437  00477E  84C5               	bsf	4037,2,c	;volatile
  8438  004780  0012               	return		;funcret
  8439  004782                     __end_of_I2C_Master_Stop:
  8440                           	opt stack 0
  8441                           tblptru	equ	0xFF8
  8442                           tblptrh	equ	0xFF7
  8443                           tblptrl	equ	0xFF6
  8444                           tablat	equ	0xFF5
  8445                           prodh	equ	0xFF4
  8446                           prodl	equ	0xFF3
  8447                           intcon	equ	0xFF2
  8448                           intcon2	equ	0xFF1
  8449                           intcon3	equ	0xFF0
  8450                           postinc0	equ	0xFEE
  8451                           wreg	equ	0xFE8
  8452                           postdec1	equ	0xFE5
  8453                           fsr1l	equ	0xFE1
  8454                           indf2	equ	0xFDF
  8455                           postinc2	equ	0xFDE
  8456                           postdec2	equ	0xFDD
  8457                           fsr2h	equ	0xFDA
  8458                           fsr2l	equ	0xFD9
  8459                           status	equ	0xFD8
  8460                           
  8461 ;; *************** function _I2C_Master_Start *****************
  8462 ;; Defined at:
  8463 ;;		line 31 in file "I2C.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;		None
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;Total ram usage:        0 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    8
  8484 ;; This function calls:
  8485 ;;		_I2C_Master_Wait
  8486 ;; This function is called by:
  8487 ;;		_loadRTC
  8488 ;;		_getRTC
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           	psect	text28
  8493  004782                     __ptext28:
  8494                           	opt stack 0
  8495  004782                     _I2C_Master_Start:
  8496                           	opt stack 18
  8497                           
  8498                           ;I2C.c: 33: I2C_Master_Wait();
  8499                           
  8500                           ;incstack = 0
  8501  004782  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8502                           
  8503                           ;I2C.c: 34: SEN = 1;
  8504  004786  80C5               	bsf	4037,0,c	;volatile
  8505  004788  0012               	return		;funcret
  8506  00478A                     __end_of_I2C_Master_Start:
  8507                           	opt stack 0
  8508                           tblptru	equ	0xFF8
  8509                           tblptrh	equ	0xFF7
  8510                           tblptrl	equ	0xFF6
  8511                           tablat	equ	0xFF5
  8512                           prodh	equ	0xFF4
  8513                           prodl	equ	0xFF3
  8514                           intcon	equ	0xFF2
  8515                           intcon2	equ	0xFF1
  8516                           intcon3	equ	0xFF0
  8517                           postinc0	equ	0xFEE
  8518                           wreg	equ	0xFE8
  8519                           postdec1	equ	0xFE5
  8520                           fsr1l	equ	0xFE1
  8521                           indf2	equ	0xFDF
  8522                           postinc2	equ	0xFDE
  8523                           postdec2	equ	0xFDD
  8524                           fsr2h	equ	0xFDA
  8525                           fsr2l	equ	0xFD9
  8526                           status	equ	0xFD8
  8527                           
  8528 ;; *************** function _I2C_Master_Read *****************
  8529 ;; Defined at:
  8530 ;;		line 55 in file "I2C.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;  a               1    wreg     unsigned char 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  a               1    1[BANK0 ] unsigned char 
  8535 ;;  temp            1    2[BANK0 ] unsigned char 
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  1    wreg      unsigned char 
  8538 ;; Registers used:
  8539 ;;		wreg, status,2, status,0, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;Total ram usage:        2 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:    8
  8552 ;; This function calls:
  8553 ;;		_I2C_Master_Wait
  8554 ;; This function is called by:
  8555 ;;		_getRTC
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           	psect	text29
  8560  0044E4                     __ptext29:
  8561                           	opt stack 0
  8562  0044E4                     _I2C_Master_Read:
  8563                           	opt stack 18
  8564                           
  8565                           ;incstack = 0
  8566                           ;I2C_Master_Read@a stored from wreg
  8567  0044E4  0100               	movlb	0	; () banked
  8568  0044E6  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8569                           
  8570                           ;I2C.c: 57: unsigned char temp;
  8571                           ;I2C.c: 58: I2C_Master_Wait();
  8572  0044E8  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8573                           
  8574                           ;I2C.c: 59: RCEN = 1;
  8575  0044EC  86C5               	bsf	4037,3,c	;volatile
  8576                           
  8577                           ;I2C.c: 60: I2C_Master_Wait();
  8578  0044EE  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8579                           
  8580                           ;I2C.c: 61: temp = SSPBUF;
  8581  0044F2  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8582                           
  8583                           ;I2C.c: 62: I2C_Master_Wait();
  8584  0044F6  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8585                           
  8586                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8587  0044FA  0100               	movlb	0	; () banked
  8588  0044FC  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8589  0044FE  0100               	movlb	0	; () banked
  8590  004500  A4D8               	btfss	status,2,c
  8591  004502  D002               	goto	u3530
  8592  004504  8AC5               	bsf	4037,5,c	;volatile
  8593  004506  D001               	goto	l5235
  8594  004508                     u3530:
  8595  004508  9AC5               	bcf	4037,5,c	;volatile
  8596  00450A                     l5235:
  8597                           
  8598                           ;I2C.c: 64: ACKEN = 1;
  8599  00450A  88C5               	bsf	4037,4,c	;volatile
  8600                           
  8601                           ;I2C.c: 65: return temp;
  8602  00450C  0100               	movlb	0	; () banked
  8603  00450E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8604  004510  0012               	return	
  8605  004512                     __end_of_I2C_Master_Read:
  8606                           	opt stack 0
  8607                           tblptru	equ	0xFF8
  8608                           tblptrh	equ	0xFF7
  8609                           tblptrl	equ	0xFF6
  8610                           tablat	equ	0xFF5
  8611                           prodh	equ	0xFF4
  8612                           prodl	equ	0xFF3
  8613                           intcon	equ	0xFF2
  8614                           intcon2	equ	0xFF1
  8615                           intcon3	equ	0xFF0
  8616                           postinc0	equ	0xFEE
  8617                           wreg	equ	0xFE8
  8618                           postdec1	equ	0xFE5
  8619                           fsr1l	equ	0xFE1
  8620                           indf2	equ	0xFDF
  8621                           postinc2	equ	0xFDE
  8622                           postdec2	equ	0xFDD
  8623                           fsr2h	equ	0xFDA
  8624                           fsr2l	equ	0xFD9
  8625                           status	equ	0xFD8
  8626                           
  8627 ;; *************** function _I2C_Master_Wait *****************
  8628 ;; Defined at:
  8629 ;;		line 26 in file "I2C.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;		None
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;		None
  8634 ;; Return value:  Size  Location     Type
  8635 ;;                  1    wreg      void 
  8636 ;; Registers used:
  8637 ;;		wreg, status,2, status,0
  8638 ;; Tracked objects:
  8639 ;;		On entry : 0/0
  8640 ;;		On exit  : 0/0
  8641 ;;		Unchanged: 0/0
  8642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;Total ram usage:        1 bytes
  8648 ;; Hardware stack levels used:    1
  8649 ;; Hardware stack levels required when called:    7
  8650 ;; This function calls:
  8651 ;;		Nothing
  8652 ;; This function is called by:
  8653 ;;		_I2C_Master_Start
  8654 ;;		_I2C_Master_Stop
  8655 ;;		_I2C_Master_Write
  8656 ;;		_I2C_Master_Read
  8657 ;;		_I2C_Master_RepeatedStart
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           	psect	text30
  8662  004700                     __ptext30:
  8663                           	opt stack 0
  8664  004700                     _I2C_Master_Wait:
  8665                           	opt stack 18
  8666  004700                     l66:
  8667  004700  B4C7               	btfsc	4039,2,c	;volatile
  8668  004702  D7FE               	goto	l66
  8669  004704  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8670  004708  0E1F               	movlw	31
  8671  00470A  0100               	movlb	0	; () banked
  8672  00470C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8673  00470E  B4D8               	btfsc	status,2,c
  8674  004710  0012               	return	
  8675  004712  D7F6               	goto	l66
  8676  004714                     __end_of_I2C_Master_Wait:
  8677                           	opt stack 0
  8678                           tblptru	equ	0xFF8
  8679                           tblptrh	equ	0xFF7
  8680                           tblptrl	equ	0xFF6
  8681                           tablat	equ	0xFF5
  8682                           prodh	equ	0xFF4
  8683                           prodl	equ	0xFF3
  8684                           intcon	equ	0xFF2
  8685                           intcon2	equ	0xFF1
  8686                           intcon3	equ	0xFF0
  8687                           postinc0	equ	0xFEE
  8688                           wreg	equ	0xFE8
  8689                           postdec1	equ	0xFE5
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           fsr2h	equ	0xFDA
  8695                           fsr2l	equ	0xFD9
  8696                           status	equ	0xFD8
  8697                           
  8698 ;; *************** function _change_state_to_menu_22 *****************
  8699 ;; Defined at:
  8700 ;;		line 498 in file "UI.c"
  8701 ;; Parameters:    Size  Location     Type
  8702 ;;		None
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;		None
  8705 ;; Return value:  Size  Location     Type
  8706 ;;                  1    wreg      void 
  8707 ;; Registers used:
  8708 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;Total ram usage:        0 bytes
  8719 ;; Hardware stack levels used:    1
  8720 ;; Hardware stack levels required when called:   10
  8721 ;; This function calls:
  8722 ;;		_lcdInst
  8723 ;;		_printf
  8724 ;; This function is called by:
  8725 ;;		_UI
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text31
  8730  0041C6                     __ptext31:
  8731                           	opt stack 0
  8732  0041C6                     _change_state_to_menu_22:
  8733                           	opt stack 19
  8734                           
  8735                           ;UI.c: 499: cur_state = 22;
  8736                           
  8737                           ; BSR set to: 0
  8738                           ;incstack = 0
  8739  0041C6  0E00               	movlw	0
  8740  0041C8  0100               	movlb	0	; () banked
  8741  0041CA  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8742  0041CC  0E16               	movlw	22
  8743  0041CE  6FE0               	movwf	_cur_state& (0+255),b
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;UI.c: 501: lcdInst(0b10000000);;
  8747  0041D0  0E80               	movlw	128
  8748  0041D2  EC9B  F023         	call	_lcdInst
  8749                           
  8750                           ;UI.c: 502: printf("2. SORT        <");
  8751  0041D6  0EC4               	movlw	low STR_34
  8752  0041D8  0100               	movlb	0	; () banked
  8753  0041DA  6F8E               	movwf	printf@f& (0+255),b
  8754  0041DC  0EFD               	movlw	high STR_34
  8755  0041DE  0100               	movlb	0	; () banked
  8756  0041E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8757  0041E2  ECB8  F008         	call	_printf	;wreg free
  8758                           
  8759                           ;UI.c: 503: lcdInst(0b11000000);;
  8760  0041E6  0EC0               	movlw	192
  8761  0041E8  EC9B  F023         	call	_lcdInst
  8762                           
  8763                           ;UI.c: 504: printf("3. LOGS         ");
  8764  0041EC  0E09               	movlw	low STR_36
  8765  0041EE  0100               	movlb	0	; () banked
  8766  0041F0  6F8E               	movwf	printf@f& (0+255),b
  8767  0041F2  0EFD               	movlw	high STR_36
  8768  0041F4  0100               	movlb	0	; () banked
  8769  0041F6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8770  0041F8  ECB8  F008         	call	_printf	;wreg free
  8771  0041FC  0012               	return		;funcret
  8772  0041FE                     __end_of_change_state_to_menu_22:
  8773                           	opt stack 0
  8774                           tblptru	equ	0xFF8
  8775                           tblptrh	equ	0xFF7
  8776                           tblptrl	equ	0xFF6
  8777                           tablat	equ	0xFF5
  8778                           prodh	equ	0xFF4
  8779                           prodl	equ	0xFF3
  8780                           intcon	equ	0xFF2
  8781                           intcon2	equ	0xFF1
  8782                           intcon3	equ	0xFF0
  8783                           postinc0	equ	0xFEE
  8784                           wreg	equ	0xFE8
  8785                           postdec1	equ	0xFE5
  8786                           fsr1l	equ	0xFE1
  8787                           indf2	equ	0xFDF
  8788                           postinc2	equ	0xFDE
  8789                           postdec2	equ	0xFDD
  8790                           fsr2h	equ	0xFDA
  8791                           fsr2l	equ	0xFD9
  8792                           status	equ	0xFD8
  8793                           
  8794 ;; *************** function _change_state_to_menu_12 *****************
  8795 ;; Defined at:
  8796 ;;		line 490 in file "UI.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;		None
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;		None
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  1    wreg      void 
  8803 ;; Registers used:
  8804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;Total ram usage:        0 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:   10
  8817 ;; This function calls:
  8818 ;;		_lcdInst
  8819 ;;		_printf
  8820 ;; This function is called by:
  8821 ;;		_UI
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text32
  8826  0041FE                     __ptext32:
  8827                           	opt stack 0
  8828  0041FE                     _change_state_to_menu_12:
  8829                           	opt stack 19
  8830                           
  8831                           ;UI.c: 491: cur_state = 12;
  8832                           
  8833                           ;incstack = 0
  8834  0041FE  0E00               	movlw	0
  8835  004200  0100               	movlb	0	; () banked
  8836  004202  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8837  004204  0E0C               	movlw	12
  8838  004206  6FE0               	movwf	_cur_state& (0+255),b
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;UI.c: 493: lcdInst(0b10000000);;
  8842  004208  0E80               	movlw	128
  8843  00420A  EC9B  F023         	call	_lcdInst
  8844                           
  8845                           ;UI.c: 494: printf("1. DATE/TIME    ");
  8846  00420E  0E2B               	movlw	low STR_33
  8847  004210  0100               	movlb	0	; () banked
  8848  004212  6F8E               	movwf	printf@f& (0+255),b
  8849  004214  0EFD               	movlw	high STR_33
  8850  004216  0100               	movlb	0	; () banked
  8851  004218  6F8F               	movwf	(printf@f+1)& (0+255),b
  8852  00421A  ECB8  F008         	call	_printf	;wreg free
  8853                           
  8854                           ;UI.c: 495: lcdInst(0b11000000);;
  8855  00421E  0EC0               	movlw	192
  8856  004220  EC9B  F023         	call	_lcdInst
  8857                           
  8858                           ;UI.c: 496: printf("2. SORT        <");
  8859  004224  0EC4               	movlw	low STR_34
  8860  004226  0100               	movlb	0	; () banked
  8861  004228  6F8E               	movwf	printf@f& (0+255),b
  8862  00422A  0EFD               	movlw	high STR_34
  8863  00422C  0100               	movlb	0	; () banked
  8864  00422E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8865  004230  ECB8  F008         	call	_printf	;wreg free
  8866  004234  0012               	return		;funcret
  8867  004236                     __end_of_change_state_to_menu_12:
  8868                           	opt stack 0
  8869                           tblptru	equ	0xFF8
  8870                           tblptrh	equ	0xFF7
  8871                           tblptrl	equ	0xFF6
  8872                           tablat	equ	0xFF5
  8873                           prodh	equ	0xFF4
  8874                           prodl	equ	0xFF3
  8875                           intcon	equ	0xFF2
  8876                           intcon2	equ	0xFF1
  8877                           intcon3	equ	0xFF0
  8878                           postinc0	equ	0xFEE
  8879                           wreg	equ	0xFE8
  8880                           postdec1	equ	0xFE5
  8881                           fsr1l	equ	0xFE1
  8882                           indf2	equ	0xFDF
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function ___awmod *****************
  8890 ;; Defined at:
  8891 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  dividend        2    0[BANK0 ] int 
  8894 ;;  divisor         2    2[BANK0 ] int 
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;  sign            1    5[BANK0 ] unsigned char 
  8897 ;;  counter         1    4[BANK0 ] unsigned char 
  8898 ;; Return value:  Size  Location     Type
  8899 ;;                  2    0[BANK0 ] int 
  8900 ;; Registers used:
  8901 ;;		wreg, status,2, status,0
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8907 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;Total ram usage:        6 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    7
  8914 ;; This function calls:
  8915 ;;		Nothing
  8916 ;; This function is called by:
  8917 ;;		_UI
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           	psect	text33
  8922  003808                     __ptext33:
  8923                           	opt stack 0
  8924  003808                     ___awmod:
  8925                           	opt stack 22
  8926                           
  8927                           ;incstack = 0
  8928  003808  0E00               	movlw	0
  8929  00380A  0100               	movlb	0	; () banked
  8930  00380C  6F85               	movwf	___awmod@sign& (0+255),b
  8931                           
  8932                           ; BSR set to: 0
  8933  00380E  0100               	movlb	0	; () banked
  8934  003810  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8935  003812  D008               	goto	l7263
  8936                           
  8937                           ; BSR set to: 0
  8938  003814  0100               	movlb	0	; () banked
  8939  003816  6D80               	negf	___awmod@dividend& (0+255),b
  8940  003818  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8941  00381A  B0D8               	btfsc	status,0,c
  8942  00381C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8943                           
  8944                           ; BSR set to: 0
  8945  00381E  0E01               	movlw	1
  8946  003820  0100               	movlb	0	; () banked
  8947  003822  6F85               	movwf	___awmod@sign& (0+255),b
  8948  003824                     l7263:
  8949                           
  8950                           ; BSR set to: 0
  8951  003824  0100               	movlb	0	; () banked
  8952  003826  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8953  003828  D005               	goto	l7267
  8954                           
  8955                           ; BSR set to: 0
  8956  00382A  0100               	movlb	0	; () banked
  8957  00382C  6D82               	negf	___awmod@divisor& (0+255),b
  8958  00382E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8959  003830  B0D8               	btfsc	status,0,c
  8960  003832  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8961  003834                     l7267:
  8962                           
  8963                           ; BSR set to: 0
  8964  003834  0100               	movlb	0	; () banked
  8965  003836  5182               	movf	___awmod@divisor& (0+255),w,b
  8966  003838  0100               	movlb	0	; () banked
  8967  00383A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8968  00383C  B4D8               	btfsc	status,2,c
  8969  00383E  D026               	goto	l7283
  8970                           
  8971                           ; BSR set to: 0
  8972  003840  0E01               	movlw	1
  8973  003842  0100               	movlb	0	; () banked
  8974  003844  6F84               	movwf	___awmod@counter& (0+255),b
  8975  003846  D006               	goto	l7273
  8976  003848                     l7271:
  8977                           
  8978                           ; BSR set to: 0
  8979  003848  0100               	movlb	0	; () banked
  8980  00384A  90D8               	bcf	status,0,c
  8981  00384C  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8982  00384E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8983  003850  0100               	movlb	0	; () banked
  8984  003852  2B84               	incf	___awmod@counter& (0+255),f,b
  8985  003854                     l7273:
  8986                           
  8987                           ; BSR set to: 0
  8988  003854  0100               	movlb	0	; () banked
  8989  003856  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8990  003858  D7F7               	goto	l7271
  8991  00385A                     l7275:
  8992                           
  8993                           ; BSR set to: 0
  8994  00385A  0100               	movlb	0	; () banked
  8995  00385C  5182               	movf	___awmod@divisor& (0+255),w,b
  8996  00385E  0100               	movlb	0	; () banked
  8997  003860  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8998  003862  0100               	movlb	0	; () banked
  8999  003864  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9000  003866  0100               	movlb	0	; () banked
  9001  003868  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9002  00386A  A0D8               	btfss	status,0,c
  9003  00386C  D008               	goto	l7279
  9004                           
  9005                           ; BSR set to: 0
  9006  00386E  0100               	movlb	0	; () banked
  9007  003870  5182               	movf	___awmod@divisor& (0+255),w,b
  9008  003872  0100               	movlb	0	; () banked
  9009  003874  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9010  003876  0100               	movlb	0	; () banked
  9011  003878  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9012  00387A  0100               	movlb	0	; () banked
  9013  00387C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9014  00387E                     l7279:
  9015                           
  9016                           ; BSR set to: 0
  9017  00387E  0100               	movlb	0	; () banked
  9018  003880  90D8               	bcf	status,0,c
  9019  003882  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9020  003884  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9021                           
  9022                           ; BSR set to: 0
  9023  003886  0100               	movlb	0	; () banked
  9024  003888  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9025  00388A  D7E7               	goto	l7275
  9026  00388C                     l7283:
  9027                           
  9028                           ; BSR set to: 0
  9029  00388C  0100               	movlb	0	; () banked
  9030  00388E  5185               	movf	___awmod@sign& (0+255),w,b
  9031  003890  0100               	movlb	0	; () banked
  9032  003892  B4D8               	btfsc	status,2,c
  9033  003894  D005               	goto	l7287
  9034                           
  9035                           ; BSR set to: 0
  9036  003896  0100               	movlb	0	; () banked
  9037  003898  6D80               	negf	___awmod@dividend& (0+255),b
  9038  00389A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9039  00389C  B0D8               	btfsc	status,0,c
  9040  00389E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9041  0038A0                     l7287:
  9042                           
  9043                           ; BSR set to: 0
  9044  0038A0  C080  F080         	movff	___awmod@dividend,?___awmod
  9045  0038A4  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9046  0038A8  0012               	return	
  9047  0038AA                     __end_of___awmod:
  9048                           	opt stack 0
  9049                           tblptru	equ	0xFF8
  9050                           tblptrh	equ	0xFF7
  9051                           tblptrl	equ	0xFF6
  9052                           tablat	equ	0xFF5
  9053                           prodh	equ	0xFF4
  9054                           prodl	equ	0xFF3
  9055                           intcon	equ	0xFF2
  9056                           intcon2	equ	0xFF1
  9057                           intcon3	equ	0xFF0
  9058                           postinc0	equ	0xFEE
  9059                           wreg	equ	0xFE8
  9060                           postdec1	equ	0xFE5
  9061                           fsr1l	equ	0xFE1
  9062                           indf2	equ	0xFDF
  9063                           postinc2	equ	0xFDE
  9064                           postdec2	equ	0xFDD
  9065                           fsr2h	equ	0xFDA
  9066                           fsr2l	equ	0xFD9
  9067                           status	equ	0xFD8
  9068                           
  9069 ;; *************** function ___awdiv *****************
  9070 ;; Defined at:
  9071 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;  dividend        2    6[BANK0 ] int 
  9074 ;;  divisor         2    8[BANK0 ] int 
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;  quotient        2   12[BANK0 ] int 
  9077 ;;  sign            1   11[BANK0 ] unsigned char 
  9078 ;;  counter         1   10[BANK0 ] unsigned char 
  9079 ;; Return value:  Size  Location     Type
  9080 ;;                  2    6[BANK0 ] int 
  9081 ;; Registers used:
  9082 ;;		wreg, status,2, status,0
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9088 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;Total ram usage:        8 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:    7
  9095 ;; This function calls:
  9096 ;;		Nothing
  9097 ;; This function is called by:
  9098 ;;		_UI
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           	psect	text34
  9103  0035E4                     __ptext34:
  9104                           	opt stack 0
  9105  0035E4                     ___awdiv:
  9106                           	opt stack 22
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;incstack = 0
  9110  0035E4  0E00               	movlw	0
  9111  0035E6  0100               	movlb	0	; () banked
  9112  0035E8  6F8B               	movwf	___awdiv@sign& (0+255),b
  9113                           
  9114                           ; BSR set to: 0
  9115  0035EA  0100               	movlb	0	; () banked
  9116  0035EC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9117  0035EE  D008               	goto	l7219
  9118                           
  9119                           ; BSR set to: 0
  9120  0035F0  0100               	movlb	0	; () banked
  9121  0035F2  6D88               	negf	___awdiv@divisor& (0+255),b
  9122  0035F4  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9123  0035F6  B0D8               	btfsc	status,0,c
  9124  0035F8  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9125                           
  9126                           ; BSR set to: 0
  9127  0035FA  0E01               	movlw	1
  9128  0035FC  0100               	movlb	0	; () banked
  9129  0035FE  6F8B               	movwf	___awdiv@sign& (0+255),b
  9130  003600                     l7219:
  9131                           
  9132                           ; BSR set to: 0
  9133  003600  0100               	movlb	0	; () banked
  9134  003602  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9135  003604  D008               	goto	l7225
  9136                           
  9137                           ; BSR set to: 0
  9138  003606  0100               	movlb	0	; () banked
  9139  003608  6D86               	negf	___awdiv@dividend& (0+255),b
  9140  00360A  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9141  00360C  B0D8               	btfsc	status,0,c
  9142  00360E  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9143                           
  9144                           ; BSR set to: 0
  9145  003610  0E01               	movlw	1
  9146  003612  0100               	movlb	0	; () banked
  9147  003614  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9148  003616                     l7225:
  9149                           
  9150                           ; BSR set to: 0
  9151  003616  0E00               	movlw	0
  9152  003618  0100               	movlb	0	; () banked
  9153  00361A  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9154  00361C  0E00               	movlw	0
  9155  00361E  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9156                           
  9157                           ; BSR set to: 0
  9158  003620  0100               	movlb	0	; () banked
  9159  003622  5188               	movf	___awdiv@divisor& (0+255),w,b
  9160  003624  0100               	movlb	0	; () banked
  9161  003626  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9162  003628  B4D8               	btfsc	status,2,c
  9163  00362A  D02C               	goto	l7247
  9164                           
  9165                           ; BSR set to: 0
  9166  00362C  0E01               	movlw	1
  9167  00362E  0100               	movlb	0	; () banked
  9168  003630  6F8A               	movwf	___awdiv@counter& (0+255),b
  9169  003632  D006               	goto	l7233
  9170  003634                     l7231:
  9171                           
  9172                           ; BSR set to: 0
  9173  003634  0100               	movlb	0	; () banked
  9174  003636  90D8               	bcf	status,0,c
  9175  003638  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9176  00363A  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9177  00363C  0100               	movlb	0	; () banked
  9178  00363E  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9179  003640                     l7233:
  9180                           
  9181                           ; BSR set to: 0
  9182  003640  0100               	movlb	0	; () banked
  9183  003642  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9184  003644  D7F7               	goto	l7231
  9185  003646                     l7235:
  9186                           
  9187                           ; BSR set to: 0
  9188  003646  0100               	movlb	0	; () banked
  9189  003648  90D8               	bcf	status,0,c
  9190  00364A  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9191  00364C  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9192                           
  9193                           ; BSR set to: 0
  9194  00364E  0100               	movlb	0	; () banked
  9195  003650  5188               	movf	___awdiv@divisor& (0+255),w,b
  9196  003652  0100               	movlb	0	; () banked
  9197  003654  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9198  003656  0100               	movlb	0	; () banked
  9199  003658  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9200  00365A  0100               	movlb	0	; () banked
  9201  00365C  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9202  00365E  A0D8               	btfss	status,0,c
  9203  003660  D00A               	goto	l7243
  9204                           
  9205                           ; BSR set to: 0
  9206  003662  0100               	movlb	0	; () banked
  9207  003664  5188               	movf	___awdiv@divisor& (0+255),w,b
  9208  003666  0100               	movlb	0	; () banked
  9209  003668  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9210  00366A  0100               	movlb	0	; () banked
  9211  00366C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9212  00366E  0100               	movlb	0	; () banked
  9213  003670  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9214                           
  9215                           ; BSR set to: 0
  9216  003672  0100               	movlb	0	; () banked
  9217  003674  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9218  003676                     l7243:
  9219                           
  9220                           ; BSR set to: 0
  9221  003676  0100               	movlb	0	; () banked
  9222  003678  90D8               	bcf	status,0,c
  9223  00367A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9224  00367C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9225                           
  9226                           ; BSR set to: 0
  9227  00367E  0100               	movlb	0	; () banked
  9228  003680  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9229  003682  D7E1               	goto	l7235
  9230  003684                     l7247:
  9231                           
  9232                           ; BSR set to: 0
  9233  003684  0100               	movlb	0	; () banked
  9234  003686  518B               	movf	___awdiv@sign& (0+255),w,b
  9235  003688  0100               	movlb	0	; () banked
  9236  00368A  B4D8               	btfsc	status,2,c
  9237  00368C  D005               	goto	l7251
  9238                           
  9239                           ; BSR set to: 0
  9240  00368E  0100               	movlb	0	; () banked
  9241  003690  6D8C               	negf	___awdiv@quotient& (0+255),b
  9242  003692  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9243  003694  B0D8               	btfsc	status,0,c
  9244  003696  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9245  003698                     l7251:
  9246                           
  9247                           ; BSR set to: 0
  9248  003698  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9249  00369C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9250  0036A0  0012               	return	
  9251  0036A2                     __end_of___awdiv:
  9252                           	opt stack 0
  9253                           tblptru	equ	0xFF8
  9254                           tblptrh	equ	0xFF7
  9255                           tblptrl	equ	0xFF6
  9256                           tablat	equ	0xFF5
  9257                           prodh	equ	0xFF4
  9258                           prodl	equ	0xFF3
  9259                           intcon	equ	0xFF2
  9260                           intcon2	equ	0xFF1
  9261                           intcon3	equ	0xFF0
  9262                           postinc0	equ	0xFEE
  9263                           wreg	equ	0xFE8
  9264                           postdec1	equ	0xFE5
  9265                           fsr1l	equ	0xFE1
  9266                           indf2	equ	0xFDF
  9267                           postinc2	equ	0xFDE
  9268                           postdec2	equ	0xFDD
  9269                           fsr2h	equ	0xFDA
  9270                           fsr2l	equ	0xFD9
  9271                           status	equ	0xFD8
  9272                           
  9273 ;; *************** function _Test *****************
  9274 ;; Defined at:
  9275 ;;		line 28 in file "Test.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;		None
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  1    wreg      void 
  9282 ;; Registers used:
  9283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9293 ;;Total ram usage:        2 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:   11
  9296 ;; This function calls:
  9297 ;;		_BothServos
  9298 ;;		_EEPROMTest
  9299 ;;		_PortTestA5
  9300 ;;		_PortTests
  9301 ;;		_PusherTestA5
  9302 ;;		_ToggleTestA5
  9303 ;;		_actuatorTest
  9304 ;;		_algorithmTest
  9305 ;;		_lcdInst
  9306 ;;		_printf
  9307 ;;		_sensorTest
  9308 ;; This function is called by:
  9309 ;;		_main
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           	psect	text35
  9314  003262                     __ptext35:
  9315                           	opt stack 0
  9316  003262                     _Test:
  9317                           	opt stack 19
  9318  003262                     
  9319                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9320  003262  0E01               	movlw	1
  9321  003264  EC9B  F023         	call	_lcdInst
  9322  003268  0E68               	movlw	104
  9323  00326A  0100               	movlb	0	; () banked
  9324  00326C  6FC6               	movwf	??_Test& (0+255),b
  9325  00326E  0EE4               	movlw	228
  9326  003270                     u7357:
  9327  003270  2EE8               	decfsz	wreg,f,c
  9328  003272  D7FE               	bra	u7357
  9329  003274  2FC6               	decfsz	??_Test& (0+255),f,b
  9330  003276  D7FC               	bra	u7357
  9331  003278  F000               	nop	
  9332  00327A  0E80               	movlw	128
  9333  00327C  EC9B  F023         	call	_lcdInst
  9334                           
  9335                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9336  003280  0E70               	movlw	low STR_68
  9337  003282  0100               	movlb	0	; () banked
  9338  003284  6F8E               	movwf	printf@f& (0+255),b
  9339  003286  0EFC               	movlw	high STR_68
  9340  003288  0100               	movlb	0	; () banked
  9341  00328A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9342  00328C  ECB8  F008         	call	_printf	;wreg free
  9343                           
  9344                           ;Test.c: 33: lcdInst(0b11000000);;
  9345  003290  0EC0               	movlw	192
  9346  003292  EC9B  F023         	call	_lcdInst
  9347                           
  9348                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9349  003296  0EA3               	movlw	low STR_69
  9350  003298  0100               	movlb	0	; () banked
  9351  00329A  6F8E               	movwf	printf@f& (0+255),b
  9352  00329C  0EFC               	movlw	high STR_69
  9353  00329E  0100               	movlb	0	; () banked
  9354  0032A0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9355  0032A2  ECB8  F008         	call	_printf	;wreg free
  9356                           
  9357                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9358  0032A6  0E05               	movlw	5
  9359  0032A8  0100               	movlb	0	; () banked
  9360  0032AA  6FC7               	movwf	(??_Test+1)& (0+255),b
  9361  0032AC  0E0F               	movlw	15
  9362  0032AE  0100               	movlb	0	; () banked
  9363  0032B0  6FC6               	movwf	??_Test& (0+255),b
  9364  0032B2  0EF1               	movlw	241
  9365  0032B4                     u7367:
  9366  0032B4  2EE8               	decfsz	wreg,f,c
  9367  0032B6  D7FE               	bra	u7367
  9368  0032B8  2FC6               	decfsz	??_Test& (0+255),f,b
  9369  0032BA  D7FC               	bra	u7367
  9370  0032BC  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9371  0032BE  D7FA               	bra	u7367
  9372  0032C0                     l1036:
  9373  0032C0  A281               	btfss	3969,1,c	;volatile
  9374  0032C2  D7FE               	goto	l1036
  9375                           
  9376                           ;Test.c: 37: var = PORTB >> 4;
  9377  0032C4  CF81 F0C6          	movff	3969,??_Test	;volatile
  9378  0032C8  0100               	movlb	0	; () banked
  9379  0032CA  3BC6               	swapf	??_Test& (0+255),f,b
  9380  0032CC  0E0F               	movlw	15
  9381  0032CE  17C6               	andwf	??_Test& (0+255),f,b
  9382  0032D0  0100               	movlb	0	; () banked
  9383  0032D2  51C6               	movf	??_Test& (0+255),w,b
  9384  0032D4  0100               	movlb	0	; () banked
  9385  0032D6  6FFA               	movwf	_var& (0+255),b
  9386  0032D8  6BFB               	clrf	(_var+1)& (0+255),b
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;Test.c: 38: var++;
  9390  0032DA  0100               	movlb	0	; () banked
  9391  0032DC  4BFA               	infsnz	_var& (0+255),f,b
  9392  0032DE  2BFB               	incf	(_var+1)& (0+255),f,b
  9393  0032E0                     l1039:
  9394  0032E0  A281               	btfss	3969,1,c	;volatile
  9395  0032E2  D01C               	goto	l7985
  9396  0032E4  D7FD               	goto	l1039
  9397  0032E6                     l7965:
  9398                           
  9399                           ;Test.c: 42: algorithmTest();
  9400  0032E6  EC27  F01A         	call	_algorithmTest	;wreg free
  9401                           
  9402                           ;Test.c: 43: break;
  9403  0032EA  D7BB               	goto	l7947
  9404  0032EC                     l7967:
  9405                           
  9406                           ;Test.c: 45: sensorTest();
  9407  0032EC  EC15  F00E         	call	_sensorTest	;wreg free
  9408                           
  9409                           ;Test.c: 46: break;
  9410  0032F0  D7B8               	goto	l7947
  9411  0032F2                     l7969:
  9412                           
  9413                           ;Test.c: 48: actuatorTest();
  9414  0032F2  EC09  F000         	call	_actuatorTest	;wreg free
  9415                           
  9416                           ;Test.c: 49: break;
  9417  0032F6  D7B5               	goto	l7947
  9418  0032F8                     l7971:
  9419                           
  9420                           ;Test.c: 51: PortTestA5();
  9421  0032F8  EC55  F01C         	call	_PortTestA5	;wreg free
  9422                           
  9423                           ;Test.c: 52: break;
  9424  0032FC  D7B2               	goto	l7947
  9425  0032FE                     l7973:
  9426                           
  9427                           ;Test.c: 54: ToggleTestA5();
  9428  0032FE  ECE6  F01C         	call	_ToggleTestA5	;wreg free
  9429                           
  9430                           ;Test.c: 55: break;
  9431  003302  D7AF               	goto	l7947
  9432  003304                     l7975:
  9433                           
  9434                           ;Test.c: 57: EEPROMTest();
  9435  003304  ECCD  F023         	call	_EEPROMTest	;wreg free
  9436                           
  9437                           ;Test.c: 58: break;
  9438  003308  D7AC               	goto	l7947
  9439  00330A                     l7977:
  9440                           
  9441                           ;Test.c: 60: PusherTestA5();
  9442  00330A  EC83  F01F         	call	_PusherTestA5	;wreg free
  9443                           
  9444                           ;Test.c: 61: break;
  9445  00330E  D7A9               	goto	l7947
  9446  003310                     l7979:
  9447                           
  9448                           ;Test.c: 63: PortTests();
  9449  003310  EC6D  F01D         	call	_PortTests	;wreg free
  9450                           
  9451                           ;Test.c: 64: break;
  9452  003314  D7A6               	goto	l7947
  9453  003316                     l7981:
  9454                           
  9455                           ;Test.c: 66: BothServos();
  9456  003316  EC8B  F00C         	call	_BothServos	;wreg free
  9457                           
  9458                           ;Test.c: 70: }
  9459                           
  9460                           ;Test.c: 69: break;
  9461                           
  9462                           ;Test.c: 68: default:
  9463                           
  9464                           ;Test.c: 67: break;
  9465  00331A  D7A3               	goto	l7947
  9466  00331C                     l7985:
  9467  00331C  C0FA  F0C6         	movff	_var,??_Test
  9468  003320  C0FB  F0C7         	movff	_var+1,??_Test+1
  9469                           
  9470                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9471                           ; Switch size 1, requested type "space"
  9472                           ; Number of cases is 1, Range of values is 0 to 0
  9473                           ; switch strategies available:
  9474                           ; Name         Instructions Cycles
  9475                           ; simple_byte            4     3 (average)
  9476                           ;	Chosen strategy is simple_byte
  9477  003324  0100               	movlb	0	; () banked
  9478  003326  51C7               	movf	(??_Test+1)& (0+255),w,b
  9479  003328  0A00               	xorlw	0	; case 0
  9480  00332A  A4D8               	btfss	status,2,c
  9481  00332C  D79A               	goto	l7947
  9482                           
  9483                           ; BSR set to: 0
  9484                           ; Switch size 1, requested type "space"
  9485                           ; Number of cases is 9, Range of values is 1 to 10
  9486                           ; switch strategies available:
  9487                           ; Name         Instructions Cycles
  9488                           ; simple_byte           28    15 (average)
  9489                           ;	Chosen strategy is simple_byte
  9490  00332E  0100               	movlb	0	; () banked
  9491  003330  51C6               	movf	??_Test& (0+255),w,b
  9492  003332  0A01               	xorlw	1	; case 1
  9493  003334  B4D8               	btfsc	status,2,c
  9494  003336  D7D7               	goto	l7965
  9495  003338  0A03               	xorlw	3	; case 2
  9496  00333A  B4D8               	btfsc	status,2,c
  9497  00333C  D7D7               	goto	l7967
  9498  00333E  0A01               	xorlw	1	; case 3
  9499  003340  B4D8               	btfsc	status,2,c
  9500  003342  D7D7               	goto	l7969
  9501  003344  0A06               	xorlw	6	; case 5
  9502  003346  B4D8               	btfsc	status,2,c
  9503  003348  D7D7               	goto	l7971
  9504  00334A  0A03               	xorlw	3	; case 6
  9505  00334C  B4D8               	btfsc	status,2,c
  9506  00334E  D7D7               	goto	l7973
  9507  003350  0A01               	xorlw	1	; case 7
  9508  003352  B4D8               	btfsc	status,2,c
  9509  003354  D7D7               	goto	l7975
  9510  003356  0A0F               	xorlw	15	; case 8
  9511  003358  B4D8               	btfsc	status,2,c
  9512  00335A  D7D7               	goto	l7977
  9513  00335C  0A01               	xorlw	1	; case 9
  9514  00335E  B4D8               	btfsc	status,2,c
  9515  003360  D7D7               	goto	l7979
  9516  003362  0A03               	xorlw	3	; case 10
  9517  003364  B4D8               	btfsc	status,2,c
  9518  003366  D7D7               	goto	l7981
  9519                           
  9520                           ; BSR set to: 0
  9521                           
  9522                           ; BSR set to: 0
  9523  003368  D77C               	goto	l7947
  9524  00336A                     __end_of_Test:
  9525                           	opt stack 0
  9526                           tblptru	equ	0xFF8
  9527                           tblptrh	equ	0xFF7
  9528                           tblptrl	equ	0xFF6
  9529                           tablat	equ	0xFF5
  9530                           prodh	equ	0xFF4
  9531                           prodl	equ	0xFF3
  9532                           intcon	equ	0xFF2
  9533                           intcon2	equ	0xFF1
  9534                           intcon3	equ	0xFF0
  9535                           postinc0	equ	0xFEE
  9536                           wreg	equ	0xFE8
  9537                           postdec1	equ	0xFE5
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           fsr2h	equ	0xFDA
  9543                           fsr2l	equ	0xFD9
  9544                           status	equ	0xFD8
  9545                           
  9546 ;; *************** function _sensorTest *****************
  9547 ;; Defined at:
  9548 ;;		line 118 in file "Test.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;		None
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;  res             2   45[BANK0 ] int 
  9553 ;; Return value:  Size  Location     Type
  9554 ;;                  1    wreg      void 
  9555 ;; Registers used:
  9556 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;Total ram usage:        4 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; Hardware stack levels required when called:   10
  9569 ;; This function calls:
  9570 ;;		_lcdInst
  9571 ;;		_printf
  9572 ;;		_readADC
  9573 ;;		_readMAG
  9574 ;; This function is called by:
  9575 ;;		_Test
  9576 ;; This function uses a non-reentrant model
  9577 ;;
  9578                           
  9579                           	psect	text36
  9580  001C2A                     __ptext36:
  9581                           	opt stack 0
  9582  001C2A                     _sensorTest:
  9583                           	opt stack 19
  9584                           
  9585                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;incstack = 0
  9589  001C2A  0E01               	movlw	1
  9590  001C2C  EC9B  F023         	call	_lcdInst
  9591  001C30  0E68               	movlw	104
  9592  001C32  0100               	movlb	0	; () banked
  9593  001C34  6FAB               	movwf	??_sensorTest& (0+255),b
  9594  001C36  0EE4               	movlw	228
  9595  001C38                     u7377:
  9596  001C38  2EE8               	decfsz	wreg,f,c
  9597  001C3A  D7FE               	bra	u7377
  9598  001C3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9599  001C3E  D7FC               	bra	u7377
  9600  001C40  F000               	nop	
  9601  001C42  0E80               	movlw	128
  9602  001C44  EC9B  F023         	call	_lcdInst
  9603                           
  9604                           ;Test.c: 121: printf("SENSORS");
  9605  001C48  0EAE               	movlw	low STR_77
  9606  001C4A  0100               	movlb	0	; () banked
  9607  001C4C  6F8E               	movwf	printf@f& (0+255),b
  9608  001C4E  0EFF               	movlw	high STR_77
  9609  001C50  0100               	movlb	0	; () banked
  9610  001C52  6F8F               	movwf	(printf@f+1)& (0+255),b
  9611  001C54  ECB8  F008         	call	_printf	;wreg free
  9612                           
  9613                           ;Test.c: 122: lcdInst(0b11000000);;
  9614  001C58  0EC0               	movlw	192
  9615  001C5A  EC9B  F023         	call	_lcdInst
  9616                           
  9617                           ;Test.c: 123: printf("PUSH TO START");
  9618  001C5E  0E0B               	movlw	low STR_71
  9619  001C60  0100               	movlb	0	; () banked
  9620  001C62  6F8E               	movwf	printf@f& (0+255),b
  9621  001C64  0EFF               	movlw	high STR_71
  9622  001C66  0100               	movlb	0	; () banked
  9623  001C68  6F8F               	movwf	(printf@f+1)& (0+255),b
  9624  001C6A  ECB8  F008         	call	_printf	;wreg free
  9625                           
  9626                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9627  001C6E  0E05               	movlw	5
  9628  001C70  0100               	movlb	0	; () banked
  9629  001C72  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9630  001C74  0E0F               	movlw	15
  9631  001C76  0100               	movlb	0	; () banked
  9632  001C78  6FAB               	movwf	??_sensorTest& (0+255),b
  9633  001C7A  0EF1               	movlw	241
  9634  001C7C                     u7387:
  9635  001C7C  2EE8               	decfsz	wreg,f,c
  9636  001C7E  D7FE               	bra	u7387
  9637  001C80  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9638  001C82  D7FC               	bra	u7387
  9639  001C84  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9640  001C86  D7FA               	bra	u7387
  9641  001C88                     l1068:
  9642  001C88  A281               	btfss	3969,1,c	;volatile
  9643  001C8A  D7FE               	goto	l1068
  9644  001C8C                     l1071:
  9645  001C8C  B281               	btfsc	3969,1,c	;volatile
  9646  001C8E  D7FE               	goto	l1071
  9647                           
  9648                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9649  001C90  0E01               	movlw	1
  9650  001C92  EC9B  F023         	call	_lcdInst
  9651  001C96  0E68               	movlw	104
  9652  001C98  0100               	movlb	0	; () banked
  9653  001C9A  6FAB               	movwf	??_sensorTest& (0+255),b
  9654  001C9C  0EE4               	movlw	228
  9655  001C9E                     u7397:
  9656  001C9E  2EE8               	decfsz	wreg,f,c
  9657  001CA0  D7FE               	bra	u7397
  9658  001CA2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9659  001CA4  D7FC               	bra	u7397
  9660  001CA6  F000               	nop	
  9661  001CA8  0E80               	movlw	128
  9662  001CAA  EC9B  F023         	call	_lcdInst
  9663                           
  9664                           ;Test.c: 132: printf("TST: IR SNSR");
  9665  001CAE  0E35               	movlw	low STR_79
  9666  001CB0  0100               	movlb	0	; () banked
  9667  001CB2  6F8E               	movwf	printf@f& (0+255),b
  9668  001CB4  0EFF               	movlw	high STR_79
  9669  001CB6  0100               	movlb	0	; () banked
  9670  001CB8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9671  001CBA  ECB8  F008         	call	_printf	;wreg free
  9672                           
  9673                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9674  001CBE  0E05               	movlw	5
  9675  001CC0  0100               	movlb	0	; () banked
  9676  001CC2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9677  001CC4  0E0F               	movlw	15
  9678  001CC6  0100               	movlb	0	; () banked
  9679  001CC8  6FAB               	movwf	??_sensorTest& (0+255),b
  9680  001CCA  0EF1               	movlw	241
  9681  001CCC                     u7407:
  9682  001CCC  2EE8               	decfsz	wreg,f,c
  9683  001CCE  D7FE               	bra	u7407
  9684  001CD0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9685  001CD2  D7FC               	bra	u7407
  9686  001CD4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9687  001CD6  D7FA               	bra	u7407
  9688                           
  9689                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9690  001CD8  8A8B               	bsf	3979,5,c	;volatile
  9691                           
  9692                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9693  001CDA  D05C               	goto	l6565
  9694  001CDC                     l6547:
  9695                           
  9696                           ;Test.c: 136: readADC(0);
  9697  001CDC  0E00               	movlw	0
  9698  001CDE  ECB6  F022         	call	_readADC
  9699                           
  9700                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9701  001CE2  50C3               	movf	4035,w,c	;volatile
  9702  001CE4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9703  001CE8  0100               	movlb	0	; () banked
  9704  001CEA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9705  001CEC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9706  001CF0  0100               	movlb	0	; () banked
  9707  001CF2  6BAB               	clrf	??_sensorTest& (0+255),b
  9708  001CF4  0100               	movlb	0	; () banked
  9709  001CF6  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9710  001CF8  0100               	movlb	0	; () banked
  9711  001CFA  6FAD               	movwf	sensorTest@res& (0+255),b
  9712  001CFC  0100               	movlb	0	; () banked
  9713  001CFE  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9714  001D00  0100               	movlb	0	; () banked
  9715  001D02  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9716                           
  9717                           ; BSR set to: 0
  9718                           ;Test.c: 138: IR_signal = (res > 1000) ? 1 : 0;
  9719  001D04  0100               	movlb	0	; () banked
  9720  001D06  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9721  001D08  D00A               	goto	u4950
  9722  001D0A  0EE9               	movlw	233
  9723  001D0C  0100               	movlb	0	; () banked
  9724  001D0E  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9725  001D10  0E03               	movlw	3
  9726  001D12  0100               	movlb	0	; () banked
  9727  001D14  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9728  001D16  A0D8               	btfss	status,0,c
  9729  001D18  D002               	goto	u4950
  9730  001D1A  0E01               	movlw	1
  9731  001D1C  D001               	goto	u4960
  9732  001D1E                     u4950:
  9733  001D1E  0E00               	movlw	0
  9734  001D20                     u4960:
  9735  001D20  0100               	movlb	0	; () banked
  9736  001D22  6FDA               	movwf	_IR_signal& (0+255),b
  9737  001D24  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9738                           
  9739                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9740  001D26  0E01               	movlw	1
  9741  001D28  EC9B  F023         	call	_lcdInst
  9742  001D2C  0E68               	movlw	104
  9743  001D2E  0100               	movlb	0	; () banked
  9744  001D30  6FAB               	movwf	??_sensorTest& (0+255),b
  9745  001D32  0EE4               	movlw	228
  9746  001D34                     u7417:
  9747  001D34  2EE8               	decfsz	wreg,f,c
  9748  001D36  D7FE               	bra	u7417
  9749  001D38  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9750  001D3A  D7FC               	bra	u7417
  9751  001D3C  F000               	nop	
  9752  001D3E  0E80               	movlw	128
  9753  001D40  EC9B  F023         	call	_lcdInst
  9754                           
  9755                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9756  001D44  0E5A               	movlw	low STR_80
  9757  001D46  0100               	movlb	0	; () banked
  9758  001D48  6F8E               	movwf	printf@f& (0+255),b
  9759  001D4A  0EFE               	movlw	high STR_80
  9760  001D4C  0100               	movlb	0	; () banked
  9761  001D4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9762  001D50  C0DA  F090         	movff	_IR_signal,?_printf+2
  9763  001D54  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9764  001D58  ECB8  F008         	call	_printf	;wreg free
  9765                           
  9766                           ;Test.c: 142: lcdInst(0b11000000);;
  9767  001D5C  0EC0               	movlw	192
  9768  001D5E  EC9B  F023         	call	_lcdInst
  9769                           
  9770                           ;Test.c: 143: printf("%d", res);
  9771  001D62  0E16               	movlw	low (STR_27+14)
  9772  001D64  0100               	movlb	0	; () banked
  9773  001D66  6F8E               	movwf	printf@f& (0+255),b
  9774  001D68  0EFE               	movlw	high (STR_27+14)
  9775  001D6A  0100               	movlb	0	; () banked
  9776  001D6C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9777  001D6E  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9778  001D72  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9779  001D76  ECB8  F008         	call	_printf	;wreg free
  9780                           
  9781                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9782  001D7A  0E05               	movlw	5
  9783  001D7C  0100               	movlb	0	; () banked
  9784  001D7E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9785  001D80  0E0F               	movlw	15
  9786  001D82  0100               	movlb	0	; () banked
  9787  001D84  6FAB               	movwf	??_sensorTest& (0+255),b
  9788  001D86  0EF1               	movlw	241
  9789  001D88                     u7427:
  9790  001D88  2EE8               	decfsz	wreg,f,c
  9791  001D8A  D7FE               	bra	u7427
  9792  001D8C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9793  001D8E  D7FC               	bra	u7427
  9794  001D90  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9795  001D92  D7FA               	bra	u7427
  9796  001D94                     l6565:
  9797  001D94  A281               	btfss	3969,1,c	;volatile
  9798  001D96  D7A2               	goto	l6547
  9799                           
  9800                           ;Test.c: 145: }
  9801                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9802  001D98  9A8B               	bcf	3979,5,c	;volatile
  9803                           
  9804                           ;Test.c: 153: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9805  001D9A  0E01               	movlw	1
  9806  001D9C  EC9B  F023         	call	_lcdInst
  9807  001DA0  0E68               	movlw	104
  9808  001DA2  0100               	movlb	0	; () banked
  9809  001DA4  6FAB               	movwf	??_sensorTest& (0+255),b
  9810  001DA6  0EE4               	movlw	228
  9811  001DA8                     u7437:
  9812  001DA8  2EE8               	decfsz	wreg,f,c
  9813  001DAA  D7FE               	bra	u7437
  9814  001DAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9815  001DAE  D7FC               	bra	u7437
  9816  001DB0  F000               	nop	
  9817  001DB2  0E80               	movlw	128
  9818  001DB4  EC9B  F023         	call	_lcdInst
  9819                           
  9820                           ;Test.c: 154: printf("TST: MAGNETISM");
  9821  001DB8  0E87               	movlw	low STR_82
  9822  001DBA  0100               	movlb	0	; () banked
  9823  001DBC  6F8E               	movwf	printf@f& (0+255),b
  9824  001DBE  0EFE               	movlw	high STR_82
  9825  001DC0  0100               	movlb	0	; () banked
  9826  001DC2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9827  001DC4  ECB8  F008         	call	_printf	;wreg free
  9828                           
  9829                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
  9830  001DC8  0E05               	movlw	5
  9831  001DCA  0100               	movlb	0	; () banked
  9832  001DCC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9833  001DCE  0E0F               	movlw	15
  9834  001DD0  0100               	movlb	0	; () banked
  9835  001DD2  6FAB               	movwf	??_sensorTest& (0+255),b
  9836  001DD4  0EF1               	movlw	241
  9837  001DD6                     u7447:
  9838  001DD6  2EE8               	decfsz	wreg,f,c
  9839  001DD8  D7FE               	bra	u7447
  9840  001DDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9841  001DDC  D7FC               	bra	u7447
  9842  001DDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9843  001DE0  D7FA               	bra	u7447
  9844                           
  9845                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
  9846  001DE2  D021               	goto	l6583
  9847  001DE4                     l6577:
  9848                           
  9849                           ;Test.c: 157: readMAG();
  9850  001DE4  EC79  F020         	call	_readMAG	;wreg free
  9851                           
  9852                           ;Test.c: 158: lcdInst(0b10000000);;
  9853  001DE8  0E80               	movlw	128
  9854  001DEA  EC9B  F023         	call	_lcdInst
  9855                           
  9856                           ;Test.c: 159: lcdInst(0b11000000);;
  9857  001DEE  0EC0               	movlw	192
  9858  001DF0  EC9B  F023         	call	_lcdInst
  9859                           
  9860                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
  9861  001DF4  0E2A               	movlw	low STR_83
  9862  001DF6  0100               	movlb	0	; () banked
  9863  001DF8  6F8E               	movwf	printf@f& (0+255),b
  9864  001DFA  0EFE               	movlw	high STR_83
  9865  001DFC  0100               	movlb	0	; () banked
  9866  001DFE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9867  001E00  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9868  001E04  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9869  001E08  ECB8  F008         	call	_printf	;wreg free
  9870                           
  9871                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
  9872  001E0C  0E05               	movlw	5
  9873  001E0E  0100               	movlb	0	; () banked
  9874  001E10  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9875  001E12  0E0F               	movlw	15
  9876  001E14  0100               	movlb	0	; () banked
  9877  001E16  6FAB               	movwf	??_sensorTest& (0+255),b
  9878  001E18  0EF1               	movlw	241
  9879  001E1A                     u7457:
  9880  001E1A  2EE8               	decfsz	wreg,f,c
  9881  001E1C  D7FE               	bra	u7457
  9882  001E1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9883  001E20  D7FC               	bra	u7457
  9884  001E22  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9885  001E24  D7FA               	bra	u7457
  9886  001E26                     l6583:
  9887  001E26  A281               	btfss	3969,1,c	;volatile
  9888  001E28  D7DD               	goto	l6577
  9889                           
  9890                           ;Test.c: 162: }
  9891                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9892  001E2A  0E01               	movlw	1
  9893  001E2C  EC9B  F023         	call	_lcdInst
  9894  001E30  0E68               	movlw	104
  9895  001E32  0100               	movlb	0	; () banked
  9896  001E34  6FAB               	movwf	??_sensorTest& (0+255),b
  9897  001E36  0EE4               	movlw	228
  9898  001E38                     u7467:
  9899  001E38  2EE8               	decfsz	wreg,f,c
  9900  001E3A  D7FE               	bra	u7467
  9901  001E3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9902  001E3E  D7FC               	bra	u7467
  9903  001E40  F000               	nop	
  9904  001E42  0E80               	movlw	128
  9905  001E44  EC9B  F023         	call	_lcdInst
  9906                           
  9907                           ;Test.c: 168: printf("TST: COND");
  9908  001E48  0E87               	movlw	low STR_84
  9909  001E4A  0100               	movlb	0	; () banked
  9910  001E4C  6F8E               	movwf	printf@f& (0+255),b
  9911  001E4E  0EFF               	movlw	high STR_84
  9912  001E50  0100               	movlb	0	; () banked
  9913  001E52  6F8F               	movwf	(printf@f+1)& (0+255),b
  9914  001E54  ECB8  F008         	call	_printf	;wreg free
  9915                           
  9916                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
  9917  001E58  0E05               	movlw	5
  9918  001E5A  0100               	movlb	0	; () banked
  9919  001E5C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9920  001E5E  0E0F               	movlw	15
  9921  001E60  0100               	movlb	0	; () banked
  9922  001E62  6FAB               	movwf	??_sensorTest& (0+255),b
  9923  001E64  0EF1               	movlw	241
  9924  001E66                     u7477:
  9925  001E66  2EE8               	decfsz	wreg,f,c
  9926  001E68  D7FE               	bra	u7477
  9927  001E6A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9928  001E6C  D7FC               	bra	u7477
  9929  001E6E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9930  001E70  D7FA               	bra	u7477
  9931  001E72                     l6595:
  9932                           
  9933                           ;Test.c: 171: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9934  001E72  0E01               	movlw	1
  9935  001E74  EC9B  F023         	call	_lcdInst
  9936  001E78  0E68               	movlw	104
  9937  001E7A  0100               	movlb	0	; () banked
  9938  001E7C  6FAB               	movwf	??_sensorTest& (0+255),b
  9939  001E7E  0EE4               	movlw	228
  9940  001E80                     u7487:
  9941  001E80  2EE8               	decfsz	wreg,f,c
  9942  001E82  D7FE               	bra	u7487
  9943  001E84  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9944  001E86  D7FC               	bra	u7487
  9945  001E88  F000               	nop	
  9946  001E8A  0E80               	movlw	128
  9947  001E8C  EC9B  F023         	call	_lcdInst
  9948                           
  9949                           ;Test.c: 172: printf("TST: COND");
  9950  001E90  0E87               	movlw	low STR_84
  9951  001E92  0100               	movlb	0	; () banked
  9952  001E94  6F8E               	movwf	printf@f& (0+255),b
  9953  001E96  0EFF               	movlw	high STR_84
  9954  001E98  0100               	movlb	0	; () banked
  9955  001E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9956  001E9C  ECB8  F008         	call	_printf	;wreg free
  9957                           
  9958                           ;Test.c: 173: while(PORTBbits.RB1 == 0){
  9959  001EA0  D01B               	goto	l6607
  9960  001EA2                     l6603:
  9961                           
  9962                           ;Test.c: 177: lcdInst(0b10000000);;lcdInst(0b11000000);;
  9963  001EA2  0E80               	movlw	128
  9964  001EA4  EC9B  F023         	call	_lcdInst
  9965  001EA8  0EC0               	movlw	192
  9966  001EAA  EC9B  F023         	call	_lcdInst
  9967                           
  9968                           ;Test.c: 178: printf("COND: %d", PORTAbits.RA2);
  9969  001EAE  0EA5               	movlw	low STR_86
  9970  001EB0  0100               	movlb	0	; () banked
  9971  001EB2  6F8E               	movwf	printf@f& (0+255),b
  9972  001EB4  0EFF               	movlw	high STR_86
  9973  001EB6  0100               	movlb	0	; () banked
  9974  001EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9975  001EBA  A480               	btfss	3968,2,c	;volatile
  9976  001EBC  D004               	goto	u4990
  9977  001EBE  0100               	movlb	0	; () banked
  9978  001EC0  6BAB               	clrf	??_sensorTest& (0+255),b
  9979  001EC2  2BAB               	incf	??_sensorTest& (0+255),f,b
  9980  001EC4  D002               	goto	u4998
  9981  001EC6                     u4990:
  9982  001EC6  0100               	movlb	0	; () banked
  9983  001EC8  6BAB               	clrf	??_sensorTest& (0+255),b
  9984  001ECA                     u4998:
  9985  001ECA  0100               	movlb	0	; () banked
  9986  001ECC  51AB               	movf	??_sensorTest& (0+255),w,b
  9987  001ECE  0100               	movlb	0	; () banked
  9988  001ED0  6F90               	movwf	(?_printf+2)& (0+255),b
  9989  001ED2  6B91               	clrf	(?_printf+3)& (0+255),b
  9990  001ED4  ECB8  F008         	call	_printf	;wreg free
  9991  001ED8                     l6607:
  9992  001ED8  A281               	btfss	3969,1,c	;volatile
  9993  001EDA  D7E3               	goto	l6603
  9994                           
  9995                           ;Test.c: 179: }
  9996                           ;Test.c: 180: if(PORTB >> 4 == 0b1111){
  9997  001EDC  3881               	swapf	3969,w,c	;volatile
  9998  001EDE  0B0F               	andlw	15
  9999  001EE0  0A0F               	xorlw	15
 10000  001EE2  B4D8               	btfsc	status,2,c
 10001  001EE4  0012               	return	
 10002                           
 10003                           ;Test.c: 183: else{
 10004                           ;Test.c: 184: LATAbits.LATA3 = 1;
 10005                           
 10006                           ;Test.c: 182: }
 10007                           
 10008                           ;Test.c: 181: break;
 10009  001EE6  8689               	bsf	3977,3,c	;volatile
 10010                           
 10011                           ;Test.c: 185: while(PORTBbits.RB1 == 1){
 10012  001EE8  D01B               	goto	l6619
 10013  001EEA                     l6615:
 10014                           
 10015                           ;Test.c: 187: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10016  001EEA  0E80               	movlw	128
 10017  001EEC  EC9B  F023         	call	_lcdInst
 10018  001EF0  0EC0               	movlw	192
 10019  001EF2  EC9B  F023         	call	_lcdInst
 10020                           
 10021                           ;Test.c: 188: printf("COND: %d", PORTAbits.RA2);
 10022  001EF6  0EA5               	movlw	low STR_86
 10023  001EF8  0100               	movlb	0	; () banked
 10024  001EFA  6F8E               	movwf	printf@f& (0+255),b
 10025  001EFC  0EFF               	movlw	high STR_86
 10026  001EFE  0100               	movlb	0	; () banked
 10027  001F00  6F8F               	movwf	(printf@f+1)& (0+255),b
 10028  001F02  A480               	btfss	3968,2,c	;volatile
 10029  001F04  D004               	goto	u5020
 10030  001F06  0100               	movlb	0	; () banked
 10031  001F08  6BAB               	clrf	??_sensorTest& (0+255),b
 10032  001F0A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10033  001F0C  D002               	goto	u5028
 10034  001F0E                     u5020:
 10035  001F0E  0100               	movlb	0	; () banked
 10036  001F10  6BAB               	clrf	??_sensorTest& (0+255),b
 10037  001F12                     u5028:
 10038  001F12  0100               	movlb	0	; () banked
 10039  001F14  51AB               	movf	??_sensorTest& (0+255),w,b
 10040  001F16  0100               	movlb	0	; () banked
 10041  001F18  6F90               	movwf	(?_printf+2)& (0+255),b
 10042  001F1A  6B91               	clrf	(?_printf+3)& (0+255),b
 10043  001F1C  ECB8  F008         	call	_printf	;wreg free
 10044  001F20                     l6619:
 10045  001F20  B281               	btfsc	3969,1,c	;volatile
 10046  001F22  D7E3               	goto	l6615
 10047                           
 10048                           ;Test.c: 189: }
 10049                           ;Test.c: 190: LATAbits.LATA3 = ~1;
 10050  001F24  9689               	bcf	3977,3,c	;volatile
 10051  001F26  D7A5               	goto	l6595
 10052  001F28                     __end_of_sensorTest:
 10053                           	opt stack 0
 10054                           tblptru	equ	0xFF8
 10055                           tblptrh	equ	0xFF7
 10056                           tblptrl	equ	0xFF6
 10057                           tablat	equ	0xFF5
 10058                           prodh	equ	0xFF4
 10059                           prodl	equ	0xFF3
 10060                           intcon	equ	0xFF2
 10061                           intcon2	equ	0xFF1
 10062                           intcon3	equ	0xFF0
 10063                           postinc0	equ	0xFEE
 10064                           wreg	equ	0xFE8
 10065                           postdec1	equ	0xFE5
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           
 10074 ;; *************** function _readMAG *****************
 10075 ;; Defined at:
 10076 ;;		line 29 in file "ADCFunctionality.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;		None
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;  res             2    4[BANK0 ] int 
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  1    wreg      void 
 10083 ;; Registers used:
 10084 ;;		wreg, status,2, status,0, cstack
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10091 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;Total ram usage:        4 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:    8
 10097 ;; This function calls:
 10098 ;;		_readADC
 10099 ;; This function is called by:
 10100 ;;		_getMAG
 10101 ;;		_sensorTest
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           	psect	text37
 10106  0040F2                     __ptext37:
 10107                           	opt stack 0
 10108  0040F2                     _readMAG:
 10109                           	opt stack 19
 10110                           
 10111                           ;ADCFunctionality.c: 30: readADC(1);
 10112                           
 10113                           ;incstack = 0
 10114  0040F2  0E01               	movlw	1
 10115  0040F4  ECB6  F022         	call	_readADC
 10116                           
 10117                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10118  0040F8  50C3               	movf	4035,w,c	;volatile
 10119  0040FA  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10120  0040FE  0100               	movlb	0	; () banked
 10121  004100  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10122  004102  C082  F083         	movff	??_readMAG,??_readMAG+1
 10123  004106  0100               	movlb	0	; () banked
 10124  004108  6B82               	clrf	??_readMAG& (0+255),b
 10125  00410A  0100               	movlb	0	; () banked
 10126  00410C  1182               	iorwf	??_readMAG& (0+255),w,b
 10127  00410E  0100               	movlb	0	; () banked
 10128  004110  6F84               	movwf	readMAG@res& (0+255),b
 10129  004112  0100               	movlb	0	; () banked
 10130  004114  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10131  004116  0100               	movlb	0	; () banked
 10132  004118  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10133                           
 10134                           ; BSR set to: 0
 10135                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10136  00411A  0100               	movlb	0	; () banked
 10137  00411C  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10138  00411E  D008               	goto	u3751
 10139  004120  0100               	movlb	0	; () banked
 10140  004122  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10141  004124  E107               	bnz	u3750
 10142  004126  0E96               	movlw	150
 10143  004128  0100               	movlb	0	; () banked
 10144  00412A  5D84               	subwf	readMAG@res& (0+255),w,b
 10145  00412C  B0D8               	btfsc	status,0,c
 10146  00412E  D002               	goto	u3750
 10147  004130                     u3751:
 10148  004130  0E01               	movlw	1
 10149  004132  D001               	goto	u3760
 10150  004134                     u3750:
 10151  004134  0E00               	movlw	0
 10152  004136                     u3760:
 10153  004136  0100               	movlb	0	; () banked
 10154  004138  6FDC               	movwf	_MAG_signal& (0+255),b
 10155  00413A  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10156                           
 10157                           ; BSR set to: 0
 10158  00413C  0012               	return		;funcret
 10159  00413E                     __end_of_readMAG:
 10160                           	opt stack 0
 10161                           tblptru	equ	0xFF8
 10162                           tblptrh	equ	0xFF7
 10163                           tblptrl	equ	0xFF6
 10164                           tablat	equ	0xFF5
 10165                           prodh	equ	0xFF4
 10166                           prodl	equ	0xFF3
 10167                           intcon	equ	0xFF2
 10168                           intcon2	equ	0xFF1
 10169                           intcon3	equ	0xFF0
 10170                           postinc0	equ	0xFEE
 10171                           wreg	equ	0xFE8
 10172                           postdec1	equ	0xFE5
 10173                           fsr1l	equ	0xFE1
 10174                           indf2	equ	0xFDF
 10175                           postinc2	equ	0xFDE
 10176                           postdec2	equ	0xFDD
 10177                           fsr2h	equ	0xFDA
 10178                           fsr2l	equ	0xFD9
 10179                           status	equ	0xFD8
 10180                           
 10181 ;; *************** function _readADC *****************
 10182 ;; Defined at:
 10183 ;;		line 15 in file "ADCFunctionality.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;  channel         1    wreg     unsigned char 
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;  channel         1    1[BANK0 ] unsigned char 
 10188 ;; Return value:  Size  Location     Type
 10189 ;;                  1    wreg      void 
 10190 ;; Registers used:
 10191 ;;		wreg, status,2, status,0, cstack
 10192 ;; Tracked objects:
 10193 ;;		On entry : 0/0
 10194 ;;		On exit  : 0/0
 10195 ;;		Unchanged: 0/0
 10196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10201 ;;Total ram usage:        2 bytes
 10202 ;; Hardware stack levels used:    1
 10203 ;; Hardware stack levels required when called:    7
 10204 ;; This function calls:
 10205 ;;		Nothing
 10206 ;; This function is called by:
 10207 ;;		_readIR
 10208 ;;		_readMAG
 10209 ;;		_sensorTest
 10210 ;; This function uses a non-reentrant model
 10211 ;;
 10212                           
 10213                           	psect	text38
 10214  00456C                     __ptext38:
 10215                           	opt stack 0
 10216  00456C                     _readADC:
 10217                           	opt stack 19
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;incstack = 0
 10221                           ;readADC@channel stored from wreg
 10222  00456C  0100               	movlb	0	; () banked
 10223  00456E  6F81               	movwf	readADC@channel& (0+255),b
 10224                           
 10225                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10226  004570  0100               	movlb	0	; () banked
 10227  004572  4581               	rlncf	readADC@channel& (0+255),w,b
 10228  004574  46E8               	rlncf	wreg,f,c
 10229  004576  0BFC               	andlw	252
 10230  004578  6EC2               	movwf	4034,c	;volatile
 10231                           
 10232                           ; BSR set to: 0
 10233                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10234  00457A  80C2               	bsf	4034,0,c	;volatile
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10238  00457C  82C2               	bsf	4034,1,c	;volatile
 10239                           
 10240                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10241  00457E  D009               	goto	l5213
 10242  004580                     l5211:
 10243  004580  0E34               	movlw	52
 10244  004582  0100               	movlb	0	; () banked
 10245  004584  6F80               	movwf	??_readADC& (0+255),b
 10246  004586  0EF1               	movlw	241
 10247  004588                     u7497:
 10248  004588  2EE8               	decfsz	wreg,f,c
 10249  00458A  D7FE               	bra	u7497
 10250  00458C  2F80               	decfsz	??_readADC& (0+255),f,b
 10251  00458E  D7FC               	bra	u7497
 10252  004590  D000               	nop2	
 10253  004592                     l5213:
 10254  004592  A2C2               	btfss	4034,1,c	;volatile
 10255  004594  0012               	return	
 10256  004596  D7F4               	goto	l5211
 10257  004598                     __end_of_readADC:
 10258                           	opt stack 0
 10259                           tblptru	equ	0xFF8
 10260                           tblptrh	equ	0xFF7
 10261                           tblptrl	equ	0xFF6
 10262                           tablat	equ	0xFF5
 10263                           prodh	equ	0xFF4
 10264                           prodl	equ	0xFF3
 10265                           intcon	equ	0xFF2
 10266                           intcon2	equ	0xFF1
 10267                           intcon3	equ	0xFF0
 10268                           postinc0	equ	0xFEE
 10269                           wreg	equ	0xFE8
 10270                           postdec1	equ	0xFE5
 10271                           fsr1l	equ	0xFE1
 10272                           indf2	equ	0xFDF
 10273                           postinc2	equ	0xFDE
 10274                           postdec2	equ	0xFDD
 10275                           fsr2h	equ	0xFDA
 10276                           fsr2l	equ	0xFD9
 10277                           status	equ	0xFD8
 10278                           
 10279 ;; *************** function _algorithmTest *****************
 10280 ;; Defined at:
 10281 ;;		line 74 in file "Test.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;		None
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;		None
 10286 ;; Return value:  Size  Location     Type
 10287 ;;                  1    wreg      void 
 10288 ;; Registers used:
 10289 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 0/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;Total ram usage:        2 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:   10
 10302 ;; This function calls:
 10303 ;;		_lcdInst
 10304 ;;		_printf
 10305 ;; This function is called by:
 10306 ;;		_Test
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           	psect	text39
 10311  00344E                     __ptext39:
 10312                           	opt stack 0
 10313  00344E                     _algorithmTest:
 10314                           	opt stack 19
 10315                           
 10316                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10317                           
 10318                           ;incstack = 0
 10319  00344E  0E01               	movlw	1
 10320  003450  EC9B  F023         	call	_lcdInst
 10321  003454  0E68               	movlw	104
 10322  003456  0100               	movlb	0	; () banked
 10323  003458  6FAB               	movwf	??_algorithmTest& (0+255),b
 10324  00345A  0EE4               	movlw	228
 10325  00345C                     u7507:
 10326  00345C  2EE8               	decfsz	wreg,f,c
 10327  00345E  D7FE               	bra	u7507
 10328  003460  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10329  003462  D7FC               	bra	u7507
 10330  003464  F000               	nop	
 10331  003466  0E80               	movlw	128
 10332  003468  EC9B  F023         	call	_lcdInst
 10333                           
 10334                           ;Test.c: 77: printf("ALGORITHM TEST");
 10335  00346C  0ED2               	movlw	low STR_70
 10336  00346E  0100               	movlb	0	; () banked
 10337  003470  6F8E               	movwf	printf@f& (0+255),b
 10338  003472  0EFE               	movlw	high STR_70
 10339  003474  0100               	movlb	0	; () banked
 10340  003476  6F8F               	movwf	(printf@f+1)& (0+255),b
 10341  003478  ECB8  F008         	call	_printf	;wreg free
 10342                           
 10343                           ;Test.c: 78: lcdInst(0b11000000);;
 10344  00347C  0EC0               	movlw	192
 10345  00347E  EC9B  F023         	call	_lcdInst
 10346                           
 10347                           ;Test.c: 79: printf("PUSH TO START");
 10348  003482  0E0B               	movlw	low STR_71
 10349  003484  0100               	movlb	0	; () banked
 10350  003486  6F8E               	movwf	printf@f& (0+255),b
 10351  003488  0EFF               	movlw	high STR_71
 10352  00348A  0100               	movlb	0	; () banked
 10353  00348C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10354  00348E  ECB8  F008         	call	_printf	;wreg free
 10355                           
 10356                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10357  003492  0E05               	movlw	5
 10358  003494  0100               	movlb	0	; () banked
 10359  003496  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10360  003498  0E0F               	movlw	15
 10361  00349A  0100               	movlb	0	; () banked
 10362  00349C  6FAB               	movwf	??_algorithmTest& (0+255),b
 10363  00349E  0EF1               	movlw	241
 10364  0034A0                     u7517:
 10365  0034A0  2EE8               	decfsz	wreg,f,c
 10366  0034A2  D7FE               	bra	u7517
 10367  0034A4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10368  0034A6  D7FC               	bra	u7517
 10369  0034A8  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10370  0034AA  D7FA               	bra	u7517
 10371  0034AC                     l1059:
 10372  0034AC  A281               	btfss	3969,1,c	;volatile
 10373  0034AE  D7FE               	goto	l1059
 10374  0034B0                     l1062:
 10375  0034B0  B281               	btfsc	3969,1,c	;volatile
 10376  0034B2  D7FE               	goto	l1062
 10377                           
 10378                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10379  0034B4  0E01               	movlw	1
 10380  0034B6  EC9B  F023         	call	_lcdInst
 10381  0034BA  0E68               	movlw	104
 10382  0034BC  0100               	movlb	0	; () banked
 10383  0034BE  6FAB               	movwf	??_algorithmTest& (0+255),b
 10384  0034C0  0EE4               	movlw	228
 10385  0034C2                     u7527:
 10386  0034C2  2EE8               	decfsz	wreg,f,c
 10387  0034C4  D7FE               	bra	u7527
 10388  0034C6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10389  0034C8  D7FC               	bra	u7527
 10390  0034CA  F000               	nop	
 10391  0034CC  0E80               	movlw	128
 10392  0034CE  EC9B  F023         	call	_lcdInst
 10393                           
 10394                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10395  0034D2  0E5F               	movlw	low STR_72
 10396  0034D4  0100               	movlb	0	; () banked
 10397  0034D6  6F8E               	movwf	printf@f& (0+255),b
 10398  0034D8  0EFC               	movlw	high STR_72
 10399  0034DA  0100               	movlb	0	; () banked
 10400  0034DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10401  0034DE  ECB8  F008         	call	_printf	;wreg free
 10402                           
 10403                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10404  0034E2  0EEF               	movlw	low STR_73
 10405  0034E4  0100               	movlb	0	; () banked
 10406  0034E6  6F8E               	movwf	printf@f& (0+255),b
 10407  0034E8  0EFE               	movlw	high STR_73
 10408  0034EA  0100               	movlb	0	; () banked
 10409  0034EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10410  0034EE  ECB8  F008         	call	_printf	;wreg free
 10411                           
 10412                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10413  0034F2  0E4F               	movlw	low STR_74
 10414  0034F4  0100               	movlb	0	; () banked
 10415  0034F6  6F8E               	movwf	printf@f& (0+255),b
 10416  0034F8  0EFF               	movlw	high STR_74
 10417  0034FA  0100               	movlb	0	; () banked
 10418  0034FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10419  0034FE  ECB8  F008         	call	_printf	;wreg free
 10420                           
 10421                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10422  003502  0EB4               	movlw	low STR_75
 10423  003504  0100               	movlb	0	; () banked
 10424  003506  6F8E               	movwf	printf@f& (0+255),b
 10425  003508  0EFE               	movlw	high STR_75
 10426  00350A  0100               	movlb	0	; () banked
 10427  00350C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10428  00350E  ECB8  F008         	call	_printf	;wreg free
 10429                           
 10430                           ;Test.c: 115: printf("ALG5: NO CANS");
 10431  003512  0EFD               	movlw	low STR_76
 10432  003514  0100               	movlb	0	; () banked
 10433  003516  6F8E               	movwf	printf@f& (0+255),b
 10434  003518  0EFE               	movlw	high STR_76
 10435  00351A  0100               	movlb	0	; () banked
 10436  00351C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10437  00351E  ECB8  F008         	call	_printf	;wreg free
 10438  003522  0012               	return		;funcret
 10439  003524                     __end_of_algorithmTest:
 10440                           	opt stack 0
 10441                           tblptru	equ	0xFF8
 10442                           tblptrh	equ	0xFF7
 10443                           tblptrl	equ	0xFF6
 10444                           tablat	equ	0xFF5
 10445                           prodh	equ	0xFF4
 10446                           prodl	equ	0xFF3
 10447                           intcon	equ	0xFF2
 10448                           intcon2	equ	0xFF1
 10449                           intcon3	equ	0xFF0
 10450                           postinc0	equ	0xFEE
 10451                           wreg	equ	0xFE8
 10452                           postdec1	equ	0xFE5
 10453                           fsr1l	equ	0xFE1
 10454                           indf2	equ	0xFDF
 10455                           postinc2	equ	0xFDE
 10456                           postdec2	equ	0xFDD
 10457                           fsr2h	equ	0xFDA
 10458                           fsr2l	equ	0xFD9
 10459                           status	equ	0xFD8
 10460                           
 10461 ;; *************** function _actuatorTest *****************
 10462 ;; Defined at:
 10463 ;;		line 195 in file "Test.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;		None
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;  i               1   45[BANK0 ] unsigned char 
 10468 ;;  i               1   67[BANK0 ] unsigned char 
 10469 ;;  i               1   66[BANK0 ] unsigned char 
 10470 ;;  i               1   65[BANK0 ] unsigned char 
 10471 ;;  i               1   64[BANK0 ] unsigned char 
 10472 ;;  i               1   63[BANK0 ] unsigned char 
 10473 ;;  i               1   62[BANK0 ] unsigned char 
 10474 ;;  i               1   61[BANK0 ] unsigned char 
 10475 ;;  i               1   60[BANK0 ] unsigned char 
 10476 ;;  i               1   59[BANK0 ] unsigned char 
 10477 ;;  i               1   58[BANK0 ] unsigned char 
 10478 ;;  i               1   57[BANK0 ] unsigned char 
 10479 ;;  i               1   56[BANK0 ] unsigned char 
 10480 ;;  i               1   55[BANK0 ] unsigned char 
 10481 ;;  i               1   54[BANK0 ] unsigned char 
 10482 ;;  i               1   53[BANK0 ] unsigned char 
 10483 ;;  i               1   52[BANK0 ] unsigned char 
 10484 ;;  i               1   51[BANK0 ] unsigned char 
 10485 ;;  i               1   50[BANK0 ] unsigned char 
 10486 ;;  i               1   49[BANK0 ] unsigned char 
 10487 ;;  i               1   48[BANK0 ] unsigned char 
 10488 ;;  i               1   47[BANK0 ] unsigned char 
 10489 ;;  i               1   46[BANK0 ] unsigned char 
 10490 ;;  i               2   68[BANK0 ] int 
 10491 ;; Return value:  Size  Location     Type
 10492 ;;                  1    wreg      void 
 10493 ;; Registers used:
 10494 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10495 ;; Tracked objects:
 10496 ;;		On entry : 0/0
 10497 ;;		On exit  : 0/0
 10498 ;;		Unchanged: 0/0
 10499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;Total ram usage:       27 bytes
 10505 ;; Hardware stack levels used:    1
 10506 ;; Hardware stack levels required when called:   10
 10507 ;; This function calls:
 10508 ;;		_lcdInst
 10509 ;;		_printf
 10510 ;;		_updateServoPosition
 10511 ;; This function is called by:
 10512 ;;		_Test
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           	psect	text40
 10517  000012                     __ptext40:
 10518                           	opt stack 0
 10519  000012                     _actuatorTest:
 10520                           	opt stack 19
 10521                           
 10522                           ;Test.c: 197: int i = 0;
 10523                           
 10524                           ;incstack = 0
 10525  000012  0E00               	movlw	0
 10526  000014  0100               	movlb	0	; () banked
 10527  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10528  000018  0E00               	movlw	0
 10529  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;Test.c: 199: (INTCONbits.GIE = 1);
 10533  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10537  00001E  0E01               	movlw	1
 10538  000020  EC9B  F023         	call	_lcdInst
 10539  000024  0E68               	movlw	104
 10540  000026  0100               	movlb	0	; () banked
 10541  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10542  00002A  0EE4               	movlw	228
 10543  00002C                     u7537:
 10544  00002C  2EE8               	decfsz	wreg,f,c
 10545  00002E  D7FE               	bra	u7537
 10546  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10547  000032  D7FC               	bra	u7537
 10548  000034  F000               	nop	
 10549  000036  0E80               	movlw	128
 10550  000038  EC9B  F023         	call	_lcdInst
 10551                           
 10552                           ;Test.c: 201: printf("ACTUATORS");
 10553  00003C  0E91               	movlw	low STR_88
 10554  00003E  0100               	movlb	0	; () banked
 10555  000040  6F8E               	movwf	printf@f& (0+255),b
 10556  000042  0EFF               	movlw	high STR_88
 10557  000044  0100               	movlb	0	; () banked
 10558  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10559  000048  ECB8  F008         	call	_printf	;wreg free
 10560                           
 10561                           ;Test.c: 202: lcdInst(0b11000000);;
 10562  00004C  0EC0               	movlw	192
 10563  00004E  EC9B  F023         	call	_lcdInst
 10564                           
 10565                           ;Test.c: 203: printf("PUSH TO START");
 10566  000052  0E0B               	movlw	low STR_71
 10567  000054  0100               	movlb	0	; () banked
 10568  000056  6F8E               	movwf	printf@f& (0+255),b
 10569  000058  0EFF               	movlw	high STR_71
 10570  00005A  0100               	movlb	0	; () banked
 10571  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10572  00005E  ECB8  F008         	call	_printf	;wreg free
 10573                           
 10574                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 10575  000062  0E05               	movlw	5
 10576  000064  0100               	movlb	0	; () banked
 10577  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10578  000068  0E0F               	movlw	15
 10579  00006A  0100               	movlb	0	; () banked
 10580  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10581  00006E  0EF1               	movlw	241
 10582  000070                     u7547:
 10583  000070  2EE8               	decfsz	wreg,f,c
 10584  000072  D7FE               	bra	u7547
 10585  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10586  000076  D7FC               	bra	u7547
 10587  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10588  00007A  D7FA               	bra	u7547
 10589  00007C                     l1094:
 10590  00007C  A281               	btfss	3969,1,c	;volatile
 10591  00007E  D7FE               	goto	l1094
 10592  000080                     l1097:
 10593  000080  B281               	btfsc	3969,1,c	;volatile
 10594  000082  D7FE               	goto	l1097
 10595                           
 10596                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10597  000084  0E01               	movlw	1
 10598  000086  EC9B  F023         	call	_lcdInst
 10599  00008A  0E68               	movlw	104
 10600  00008C  0100               	movlb	0	; () banked
 10601  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10602  000090  0EE4               	movlw	228
 10603  000092                     u7557:
 10604  000092  2EE8               	decfsz	wreg,f,c
 10605  000094  D7FE               	bra	u7557
 10606  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10607  000098  D7FC               	bra	u7557
 10608  00009A  F000               	nop	
 10609  00009C  0E80               	movlw	128
 10610  00009E  EC9B  F023         	call	_lcdInst
 10611                           
 10612                           ;Test.c: 212: printf("TST: DC MOTORS");
 10613  0000A2  0EC3               	movlw	low STR_90
 10614  0000A4  0100               	movlb	0	; () banked
 10615  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10616  0000A8  0EFE               	movlw	high STR_90
 10617  0000AA  0100               	movlb	0	; () banked
 10618  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10619  0000AE  ECB8  F008         	call	_printf	;wreg free
 10620                           
 10621                           ;Test.c: 213: lcdInst(0b11000000);;
 10622  0000B2  0EC0               	movlw	192
 10623  0000B4  EC9B  F023         	call	_lcdInst
 10624                           
 10625                           ;Test.c: 214: printf("PIN RA5 HIGH.");
 10626  0000B8  0EE1               	movlw	low STR_91
 10627  0000BA  0100               	movlb	0	; () banked
 10628  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10629  0000BE  0EFE               	movlw	high STR_91
 10630  0000C0  0100               	movlb	0	; () banked
 10631  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10632  0000C4  ECB8  F008         	call	_printf	;wreg free
 10633                           
 10634                           ;Test.c: 215: LATAbits.LATA5 = 1;
 10635  0000C8  8A89               	bsf	3977,5,c	;volatile
 10636                           
 10637                           ;Test.c: 216: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10638  0000CA  0E00               	movlw	0
 10639  0000CC  0100               	movlb	0	; () banked
 10640  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10641  0000D0  0E00               	movlw	0
 10642  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10643                           
 10644                           ; BSR set to: 0
 10645  0000D4  0100               	movlb	0	; () banked
 10646  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10647  0000D8  D008               	goto	l6659
 10648  0000DA  0100               	movlb	0	; () banked
 10649  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10650  0000DE  E123               	bnz	l1101
 10651  0000E0  0E05               	movlw	5
 10652  0000E2  0100               	movlb	0	; () banked
 10653  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10654  0000E6  B0D8               	btfsc	status,0,c
 10655  0000E8  D01E               	goto	l1101
 10656  0000EA                     l6659:
 10657                           
 10658                           ; BSR set to: 0
 10659  0000EA  0E00               	movlw	0
 10660  0000EC  0100               	movlb	0	; () banked
 10661  0000EE  6FAD               	movwf	actuatorTest@i_1631& (0+255),b
 10662  0000F0                     l6661:
 10663                           
 10664                           ; BSR set to: 0
 10665  0000F0  0E63               	movlw	99
 10666  0000F2  0100               	movlb	0	; () banked
 10667  0000F4  65AD               	cpfsgt	actuatorTest@i_1631& (0+255),b
 10668  0000F6  D001               	goto	l6665
 10669  0000F8  D00C               	goto	l6669
 10670  0000FA                     l6665:
 10671                           
 10672                           ; BSR set to: 0
 10673  0000FA  0E68               	movlw	104
 10674  0000FC  0100               	movlb	0	; () banked
 10675  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10676  000100  0EE4               	movlw	228
 10677  000102                     u7567:
 10678  000102  2EE8               	decfsz	wreg,f,c
 10679  000104  D7FE               	bra	u7567
 10680  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10681  000108  D7FC               	bra	u7567
 10682  00010A  F000               	nop	
 10683  00010C  0100               	movlb	0	; () banked
 10684  00010E  2BAD               	incf	actuatorTest@i_1631& (0+255),f,b
 10685  000110  D7EF               	goto	l6661
 10686  000112                     l6669:
 10687                           
 10688                           ; BSR set to: 0
 10689  000112  0100               	movlb	0	; () banked
 10690  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10691  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10692                           
 10693                           ; BSR set to: 0
 10694  000118  0100               	movlb	0	; () banked
 10695  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10696  00011C  D7E6               	goto	l6659
 10697  00011E  0100               	movlb	0	; () banked
 10698  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10699  000122  E101               	bnz	u5090
 10700  000124  D7DD               	goto	L6
 10701  000126                     u5090:
 10702  000126                     l1101:
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;Test.c: 217: LATAbits.LATA5 = 0;
 10706  000126  9A89               	bcf	3977,5,c	;volatile
 10707                           
 10708                           ; BSR set to: 0
 10709                           ;Test.c: 218: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10710  000128  0E01               	movlw	1
 10711  00012A  EC9B  F023         	call	_lcdInst
 10712  00012E  0E68               	movlw	104
 10713  000130  0100               	movlb	0	; () banked
 10714  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10715  000134  0EE4               	movlw	228
 10716  000136                     u7577:
 10717  000136  2EE8               	decfsz	wreg,f,c
 10718  000138  D7FE               	bra	u7577
 10719  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10720  00013C  D7FC               	bra	u7577
 10721  00013E  F000               	nop	
 10722  000140  0E80               	movlw	128
 10723  000142  EC9B  F023         	call	_lcdInst
 10724                           
 10725                           ;Test.c: 224: printf("TST: COND SOLN'D");
 10726  000146  0E81               	movlw	low STR_92
 10727  000148  0100               	movlb	0	; () banked
 10728  00014A  6F8E               	movwf	printf@f& (0+255),b
 10729  00014C  0EFC               	movlw	high STR_92
 10730  00014E  0100               	movlb	0	; () banked
 10731  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10732  000152  ECB8  F008         	call	_printf	;wreg free
 10733                           
 10734                           ;Test.c: 225: lcdInst(0b11000000);;
 10735  000156  0EC0               	movlw	192
 10736  000158  EC9B  F023         	call	_lcdInst
 10737                           
 10738                           ;Test.c: 226: printf("PIN RA3...");
 10739  00015C  0E5B               	movlw	low STR_93
 10740  00015E  0100               	movlb	0	; () banked
 10741  000160  6F8E               	movwf	printf@f& (0+255),b
 10742  000162  0EFF               	movlw	high STR_93
 10743  000164  0100               	movlb	0	; () banked
 10744  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10745  000168  ECB8  F008         	call	_printf	;wreg free
 10746                           
 10747                           ;Test.c: 227: for(i=0;i<5;i++){
 10748  00016C  0E00               	movlw	0
 10749  00016E  0100               	movlb	0	; () banked
 10750  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10751  000172  0E00               	movlw	0
 10752  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10753                           
 10754                           ; BSR set to: 0
 10755  000176  0100               	movlb	0	; () banked
 10756  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10757  00017A  D008               	goto	l1104
 10758  00017C  0100               	movlb	0	; () banked
 10759  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10760  000180  E12C               	bnz	l1105
 10761  000182  0E05               	movlw	5
 10762  000184  0100               	movlb	0	; () banked
 10763  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10764  000188  B0D8               	btfsc	status,0,c
 10765  00018A  D027               	goto	l1105
 10766  00018C                     l1104:
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;Test.c: 228: LATAbits.LATA3 = 1;
 10770  00018C  8689               	bsf	3977,3,c	;volatile
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;Test.c: 229: _delay((unsigned long)((300)*(32000000/4000.0)));
 10774  00018E  0E0D               	movlw	13
 10775  000190  0100               	movlb	0	; () banked
 10776  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10777  000194  0E2D               	movlw	45
 10778  000196  0100               	movlb	0	; () banked
 10779  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10780  00019A  0ED7               	movlw	215
 10781  00019C                     u7587:
 10782  00019C  2EE8               	decfsz	wreg,f,c
 10783  00019E  D7FE               	bra	u7587
 10784  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10785  0001A2  D7FC               	bra	u7587
 10786  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10787  0001A6  D7FA               	bra	u7587
 10788  0001A8  D000               	nop2	
 10789                           
 10790                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 10791  0001AA  9689               	bcf	3977,3,c	;volatile
 10792                           
 10793                           ;Test.c: 231: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10794  0001AC  0E1D               	movlw	29
 10795  0001AE  0100               	movlb	0	; () banked
 10796  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10797  0001B2  0E69               	movlw	105
 10798  0001B4  0100               	movlb	0	; () banked
 10799  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10800  0001B8  0EA5               	movlw	165
 10801  0001BA                     u7597:
 10802  0001BA  2EE8               	decfsz	wreg,f,c
 10803  0001BC  D7FE               	bra	u7597
 10804  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10805  0001C0  D7FC               	bra	u7597
 10806  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10807  0001C4  D7FA               	bra	u7597
 10808  0001C6  0100               	movlb	0	; () banked
 10809  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10810  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10811  0001CC  0100               	movlb	0	; () banked
 10812  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10813  0001D0  D7DD               	goto	l1104
 10814  0001D2  0100               	movlb	0	; () banked
 10815  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10816  0001D6  E101               	bnz	u5110
 10817  0001D8  D7D4               	goto	L7
 10818  0001DA                     u5110:
 10819  0001DA                     l1105:
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;Test.c: 232: }
 10823                           ;Test.c: 233: LATAbits.LATA3 = ~1;
 10824  0001DA  9689               	bcf	3977,3,c	;volatile
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;Test.c: 234: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10828  0001DC  0E01               	movlw	1
 10829  0001DE  EC9B  F023         	call	_lcdInst
 10830  0001E2  0E68               	movlw	104
 10831  0001E4  0100               	movlb	0	; () banked
 10832  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10833  0001E8  0EE4               	movlw	228
 10834  0001EA                     u7607:
 10835  0001EA  2EE8               	decfsz	wreg,f,c
 10836  0001EC  D7FE               	bra	u7607
 10837  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10838  0001F0  D7FC               	bra	u7607
 10839  0001F2  F000               	nop	
 10840  0001F4  0E80               	movlw	128
 10841  0001F6  EC9B  F023         	call	_lcdInst
 10842                           
 10843                           ;Test.c: 240: printf("TST: PUSH SOLN'D");
 10844  0001FA  0E92               	movlw	low STR_94
 10845  0001FC  0100               	movlb	0	; () banked
 10846  0001FE  6F8E               	movwf	printf@f& (0+255),b
 10847  000200  0EFC               	movlw	high STR_94
 10848  000202  0100               	movlb	0	; () banked
 10849  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 10850  000206  ECB8  F008         	call	_printf	;wreg free
 10851                           
 10852                           ;Test.c: 241: lcdInst(0b11000000);;
 10853  00020A  0EC0               	movlw	192
 10854  00020C  EC9B  F023         	call	_lcdInst
 10855                           
 10856                           ;Test.c: 242: printf("PIN RA4...");
 10857  000210  0E66               	movlw	low STR_95
 10858  000212  0100               	movlb	0	; () banked
 10859  000214  6F8E               	movwf	printf@f& (0+255),b
 10860  000216  0EFF               	movlw	high STR_95
 10861  000218  0100               	movlb	0	; () banked
 10862  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10863  00021C  ECB8  F008         	call	_printf	;wreg free
 10864                           
 10865                           ;Test.c: 243: for(i=0;i<5;i++){
 10866  000220  0E00               	movlw	0
 10867  000222  0100               	movlb	0	; () banked
 10868  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10869  000226  0E00               	movlw	0
 10870  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 10871                           
 10872                           ; BSR set to: 0
 10873  00022A  0100               	movlb	0	; () banked
 10874  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10875  00022E  D008               	goto	l1106
 10876  000230  0100               	movlb	0	; () banked
 10877  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10878  000234  E12C               	bnz	l1107
 10879  000236  0E05               	movlw	5
 10880  000238  0100               	movlb	0	; () banked
 10881  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10882  00023C  B0D8               	btfsc	status,0,c
 10883  00023E  D027               	goto	l1107
 10884  000240                     l1106:
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;Test.c: 244: LATAbits.LATA4 = 1;
 10888  000240  8889               	bsf	3977,4,c	;volatile
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;Test.c: 245: _delay((unsigned long)((300)*(32000000/4000.0)));
 10892  000242  0E0D               	movlw	13
 10893  000244  0100               	movlb	0	; () banked
 10894  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10895  000248  0E2D               	movlw	45
 10896  00024A  0100               	movlb	0	; () banked
 10897  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10898  00024E  0ED7               	movlw	215
 10899  000250                     u7617:
 10900  000250  2EE8               	decfsz	wreg,f,c
 10901  000252  D7FE               	bra	u7617
 10902  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10903  000256  D7FC               	bra	u7617
 10904  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10905  00025A  D7FA               	bra	u7617
 10906  00025C  D000               	nop2	
 10907                           
 10908                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 10909  00025E  9889               	bcf	3977,4,c	;volatile
 10910                           
 10911                           ;Test.c: 247: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10912  000260  0E1D               	movlw	29
 10913  000262  0100               	movlb	0	; () banked
 10914  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10915  000266  0E69               	movlw	105
 10916  000268  0100               	movlb	0	; () banked
 10917  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10918  00026C  0EA5               	movlw	165
 10919  00026E                     u7627:
 10920  00026E  2EE8               	decfsz	wreg,f,c
 10921  000270  D7FE               	bra	u7627
 10922  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10923  000274  D7FC               	bra	u7627
 10924  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10925  000278  D7FA               	bra	u7627
 10926  00027A  0100               	movlb	0	; () banked
 10927  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10928  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10929  000280  0100               	movlb	0	; () banked
 10930  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10931  000284  D7DD               	goto	l1106
 10932  000286  0100               	movlb	0	; () banked
 10933  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10934  00028A  E101               	bnz	u5130
 10935  00028C  D7D4               	goto	L8
 10936  00028E                     u5130:
 10937  00028E                     l1107:
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;Test.c: 248: }
 10941                           ;Test.c: 249: LATAbits.LATA4 = ~1;
 10942  00028E  9889               	bcf	3977,4,c	;volatile
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;Test.c: 250: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10946  000290  0E01               	movlw	1
 10947  000292  EC9B  F023         	call	_lcdInst
 10948  000296  0E68               	movlw	104
 10949  000298  0100               	movlb	0	; () banked
 10950  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10951  00029C  0EE4               	movlw	228
 10952  00029E                     u7637:
 10953  00029E  2EE8               	decfsz	wreg,f,c
 10954  0002A0  D7FE               	bra	u7637
 10955  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10956  0002A4  D7FC               	bra	u7637
 10957  0002A6  F000               	nop	
 10958  0002A8  0E80               	movlw	128
 10959  0002AA  EC9B  F023         	call	_lcdInst
 10960                           
 10961                           ;Test.c: 253: machine_state = Sorting_state;
 10962  0002AE  0E01               	movlw	1
 10963  0002B0  0100               	movlb	0	; () banked
 10964  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 10965                           
 10966                           ; BSR set to: 0
 10967                           ;Test.c: 254: was_low_1 = 0;
 10968  0002B4  0E00               	movlw	0
 10969  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 10970  0002B8  0E00               	movlw	0
 10971  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;Test.c: 255: was_low_1 = 0;
 10975  0002BC  0E00               	movlw	0
 10976  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 10977  0002C0  0E00               	movlw	0
 10978  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;Test.c: 262: printf("TST: PAN SERVO");
 10982  0002C4  0EA5               	movlw	low STR_96
 10983  0002C6  0100               	movlb	0	; () banked
 10984  0002C8  6F8E               	movwf	printf@f& (0+255),b
 10985  0002CA  0EFE               	movlw	high STR_96
 10986  0002CC  0100               	movlb	0	; () banked
 10987  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10988  0002D0  ECB8  F008         	call	_printf	;wreg free
 10989                           
 10990                           ;Test.c: 263: lcdInst(0b11000000);;
 10991  0002D4  0EC0               	movlw	192
 10992  0002D6  EC9B  F023         	call	_lcdInst
 10993                           
 10994                           ;Test.c: 264: printf("MIDDLE -- 2s    ");
 10995  0002DA  0E0A               	movlw	low STR_97
 10996  0002DC  0100               	movlb	0	; () banked
 10997  0002DE  6F8E               	movwf	printf@f& (0+255),b
 10998  0002E0  0EFC               	movlw	high STR_97
 10999  0002E2  0100               	movlb	0	; () banked
 11000  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11001  0002E6  ECB8  F008         	call	_printf	;wreg free
 11002                           
 11003                           ;Test.c: 265: updateServoPosition(1200, 1);
 11004  0002EA  0E04               	movlw	4
 11005  0002EC  0100               	movlb	0	; () banked
 11006  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11007  0002F0  0EB0               	movlw	176
 11008  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11009  0002F4  0E00               	movlw	0
 11010  0002F6  0100               	movlb	0	; () banked
 11011  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11012  0002FA  0E01               	movlw	1
 11013  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11014  0002FE  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11015                           
 11016                           ;Test.c: 266: TMR1ON = 1;
 11017  000302  80CD               	bsf	4045,0,c	;volatile
 11018                           
 11019                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11020  000304  0E00               	movlw	0
 11021  000306  0100               	movlb	0	; () banked
 11022  000308  6FAE               	movwf	actuatorTest@i_1638& (0+255),b
 11023  00030A                     l6745:
 11024                           
 11025                           ; BSR set to: 0
 11026  00030A  0E63               	movlw	99
 11027  00030C  0100               	movlb	0	; () banked
 11028  00030E  65AE               	cpfsgt	actuatorTest@i_1638& (0+255),b
 11029  000310  D001               	goto	l6749
 11030  000312  D00C               	goto	l6753
 11031  000314                     l6749:
 11032                           
 11033                           ; BSR set to: 0
 11034  000314  0E68               	movlw	104
 11035  000316  0100               	movlb	0	; () banked
 11036  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11037  00031A  0EE4               	movlw	228
 11038  00031C                     u7647:
 11039  00031C  2EE8               	decfsz	wreg,f,c
 11040  00031E  D7FE               	bra	u7647
 11041  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11042  000322  D7FC               	bra	u7647
 11043  000324  F000               	nop	
 11044  000326  0100               	movlb	0	; () banked
 11045  000328  2BAE               	incf	actuatorTest@i_1638& (0+255),f,b
 11046  00032A  D7EF               	goto	l6745
 11047  00032C                     l6753:
 11048                           
 11049                           ; BSR set to: 0
 11050  00032C  0E00               	movlw	0
 11051  00032E  0100               	movlb	0	; () banked
 11052  000330  6FAF               	movwf	actuatorTest@i_1639& (0+255),b
 11053  000332                     l6755:
 11054                           
 11055                           ; BSR set to: 0
 11056  000332  0E63               	movlw	99
 11057  000334  0100               	movlb	0	; () banked
 11058  000336  65AF               	cpfsgt	actuatorTest@i_1639& (0+255),b
 11059  000338  D001               	goto	l6759
 11060  00033A  D00C               	goto	l6763
 11061  00033C                     l6759:
 11062                           
 11063                           ; BSR set to: 0
 11064  00033C  0E68               	movlw	104
 11065  00033E  0100               	movlb	0	; () banked
 11066  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11067  000342  0EE4               	movlw	228
 11068  000344                     u7657:
 11069  000344  2EE8               	decfsz	wreg,f,c
 11070  000346  D7FE               	bra	u7657
 11071  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11072  00034A  D7FC               	bra	u7657
 11073  00034C  F000               	nop	
 11074  00034E  0100               	movlb	0	; () banked
 11075  000350  2BAF               	incf	actuatorTest@i_1639& (0+255),f,b
 11076  000352  D7EF               	goto	l6755
 11077  000354                     l6763:
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11081  000354  0E80               	movlw	128
 11082  000356  EC9B  F023         	call	_lcdInst
 11083  00035A  0EC0               	movlw	192
 11084  00035C  EC9B  F023         	call	_lcdInst
 11085                           
 11086                           ;Test.c: 270: printf("RIGHT -- 2s     ");
 11087  000360  0EF9               	movlw	low STR_98
 11088  000362  0100               	movlb	0	; () banked
 11089  000364  6F8E               	movwf	printf@f& (0+255),b
 11090  000366  0EFB               	movlw	high STR_98
 11091  000368  0100               	movlb	0	; () banked
 11092  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11093  00036C  ECB8  F008         	call	_printf	;wreg free
 11094                           
 11095                           ;Test.c: 271: updateServoPosition(500, 1);
 11096  000370  0E01               	movlw	1
 11097  000372  0100               	movlb	0	; () banked
 11098  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11099  000376  0EF4               	movlw	244
 11100  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11101  00037A  0E00               	movlw	0
 11102  00037C  0100               	movlb	0	; () banked
 11103  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11104  000380  0E01               	movlw	1
 11105  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11106  000384  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11107                           
 11108                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11109  000388  0E00               	movlw	0
 11110  00038A  0100               	movlb	0	; () banked
 11111  00038C  6FB0               	movwf	actuatorTest@i_1641& (0+255),b
 11112  00038E                     l6771:
 11113                           
 11114                           ; BSR set to: 0
 11115  00038E  0E63               	movlw	99
 11116  000390  0100               	movlb	0	; () banked
 11117  000392  65B0               	cpfsgt	actuatorTest@i_1641& (0+255),b
 11118  000394  D001               	goto	l6775
 11119  000396  D00C               	goto	l6779
 11120  000398                     l6775:
 11121                           
 11122                           ; BSR set to: 0
 11123  000398  0E68               	movlw	104
 11124  00039A  0100               	movlb	0	; () banked
 11125  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11126  00039E  0EE4               	movlw	228
 11127  0003A0                     u7667:
 11128  0003A0  2EE8               	decfsz	wreg,f,c
 11129  0003A2  D7FE               	bra	u7667
 11130  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11131  0003A6  D7FC               	bra	u7667
 11132  0003A8  F000               	nop	
 11133  0003AA  0100               	movlb	0	; () banked
 11134  0003AC  2BB0               	incf	actuatorTest@i_1641& (0+255),f,b
 11135  0003AE  D7EF               	goto	l6771
 11136  0003B0                     l6779:
 11137                           
 11138                           ; BSR set to: 0
 11139  0003B0  0E00               	movlw	0
 11140  0003B2  0100               	movlb	0	; () banked
 11141  0003B4  6FB1               	movwf	actuatorTest@i_1642& (0+255),b
 11142  0003B6                     l6781:
 11143                           
 11144                           ; BSR set to: 0
 11145  0003B6  0E63               	movlw	99
 11146  0003B8  0100               	movlb	0	; () banked
 11147  0003BA  65B1               	cpfsgt	actuatorTest@i_1642& (0+255),b
 11148  0003BC  D001               	goto	l6785
 11149  0003BE  D00C               	goto	l6789
 11150  0003C0                     l6785:
 11151                           
 11152                           ; BSR set to: 0
 11153  0003C0  0E68               	movlw	104
 11154  0003C2  0100               	movlb	0	; () banked
 11155  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11156  0003C6  0EE4               	movlw	228
 11157  0003C8                     u7677:
 11158  0003C8  2EE8               	decfsz	wreg,f,c
 11159  0003CA  D7FE               	bra	u7677
 11160  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11161  0003CE  D7FC               	bra	u7677
 11162  0003D0  F000               	nop	
 11163  0003D2  0100               	movlb	0	; () banked
 11164  0003D4  2BB1               	incf	actuatorTest@i_1642& (0+255),f,b
 11165  0003D6  D7EF               	goto	l6781
 11166  0003D8                     l6789:
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;Test.c: 274: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11170  0003D8  0E80               	movlw	128
 11171  0003DA  EC9B  F023         	call	_lcdInst
 11172  0003DE  0EC0               	movlw	192
 11173  0003E0  EC9B  F023         	call	_lcdInst
 11174                           
 11175                           ;Test.c: 275: printf("LEFT -- 2s      ");
 11176  0003E4  0ED7               	movlw	low STR_99
 11177  0003E6  0100               	movlb	0	; () banked
 11178  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11179  0003EA  0EFB               	movlw	high STR_99
 11180  0003EC  0100               	movlb	0	; () banked
 11181  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11182  0003F0  ECB8  F008         	call	_printf	;wreg free
 11183                           
 11184                           ;Test.c: 276: updateServoPosition(2100, 1);
 11185  0003F4  0E08               	movlw	8
 11186  0003F6  0100               	movlb	0	; () banked
 11187  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11188  0003FA  0E34               	movlw	52
 11189  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11190  0003FE  0E00               	movlw	0
 11191  000400  0100               	movlb	0	; () banked
 11192  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11193  000404  0E01               	movlw	1
 11194  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11195  000408  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11196                           
 11197                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11198  00040C  0E00               	movlw	0
 11199  00040E  0100               	movlb	0	; () banked
 11200  000410  6FB2               	movwf	actuatorTest@i_1644& (0+255),b
 11201  000412                     l6797:
 11202                           
 11203                           ; BSR set to: 0
 11204  000412  0E63               	movlw	99
 11205  000414  0100               	movlb	0	; () banked
 11206  000416  65B2               	cpfsgt	actuatorTest@i_1644& (0+255),b
 11207  000418  D001               	goto	l6801
 11208  00041A  D00C               	goto	l6805
 11209  00041C                     l6801:
 11210                           
 11211                           ; BSR set to: 0
 11212  00041C  0E68               	movlw	104
 11213  00041E  0100               	movlb	0	; () banked
 11214  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11215  000422  0EE4               	movlw	228
 11216  000424                     u7687:
 11217  000424  2EE8               	decfsz	wreg,f,c
 11218  000426  D7FE               	bra	u7687
 11219  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11220  00042A  D7FC               	bra	u7687
 11221  00042C  F000               	nop	
 11222  00042E  0100               	movlb	0	; () banked
 11223  000430  2BB2               	incf	actuatorTest@i_1644& (0+255),f,b
 11224  000432  D7EF               	goto	l6797
 11225  000434                     l6805:
 11226                           
 11227                           ; BSR set to: 0
 11228  000434  0E00               	movlw	0
 11229  000436  0100               	movlb	0	; () banked
 11230  000438  6FB3               	movwf	actuatorTest@i_1645& (0+255),b
 11231  00043A                     l6807:
 11232                           
 11233                           ; BSR set to: 0
 11234  00043A  0E63               	movlw	99
 11235  00043C  0100               	movlb	0	; () banked
 11236  00043E  65B3               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11237  000440  D001               	goto	l6811
 11238  000442  D00C               	goto	l6815
 11239  000444                     l6811:
 11240                           
 11241                           ; BSR set to: 0
 11242  000444  0E68               	movlw	104
 11243  000446  0100               	movlb	0	; () banked
 11244  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11245  00044A  0EE4               	movlw	228
 11246  00044C                     u7697:
 11247  00044C  2EE8               	decfsz	wreg,f,c
 11248  00044E  D7FE               	bra	u7697
 11249  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11250  000452  D7FC               	bra	u7697
 11251  000454  F000               	nop	
 11252  000456  0100               	movlb	0	; () banked
 11253  000458  2BB3               	incf	actuatorTest@i_1645& (0+255),f,b
 11254  00045A  D7EF               	goto	l6807
 11255  00045C                     l6815:
 11256                           
 11257                           ; BSR set to: 0
 11258                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11259  00045C  0E80               	movlw	128
 11260  00045E  EC9B  F023         	call	_lcdInst
 11261  000462  0EC0               	movlw	192
 11262  000464  EC9B  F023         	call	_lcdInst
 11263                           
 11264                           ;Test.c: 280: printf("MID-LEFT -- 2s  ");
 11265  000468  0E2C               	movlw	low STR_100
 11266  00046A  0100               	movlb	0	; () banked
 11267  00046C  6F8E               	movwf	printf@f& (0+255),b
 11268  00046E  0EFC               	movlw	high STR_100
 11269  000470  0100               	movlb	0	; () banked
 11270  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11271  000474  ECB8  F008         	call	_printf	;wreg free
 11272                           
 11273                           ;Test.c: 281: updateServoPosition(1700, 1);
 11274  000478  0E06               	movlw	6
 11275  00047A  0100               	movlb	0	; () banked
 11276  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11277  00047E  0EA4               	movlw	164
 11278  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11279  000482  0E00               	movlw	0
 11280  000484  0100               	movlb	0	; () banked
 11281  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11282  000488  0E01               	movlw	1
 11283  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11284  00048C  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11285                           
 11286                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11287  000490  0E00               	movlw	0
 11288  000492  0100               	movlb	0	; () banked
 11289  000494  6FB4               	movwf	actuatorTest@i_1647& (0+255),b
 11290  000496                     l6823:
 11291                           
 11292                           ; BSR set to: 0
 11293  000496  0E63               	movlw	99
 11294  000498  0100               	movlb	0	; () banked
 11295  00049A  65B4               	cpfsgt	actuatorTest@i_1647& (0+255),b
 11296  00049C  D001               	goto	l6827
 11297  00049E  D00C               	goto	l6831
 11298  0004A0                     l6827:
 11299                           
 11300                           ; BSR set to: 0
 11301  0004A0  0E68               	movlw	104
 11302  0004A2  0100               	movlb	0	; () banked
 11303  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11304  0004A6  0EE4               	movlw	228
 11305  0004A8                     u7707:
 11306  0004A8  2EE8               	decfsz	wreg,f,c
 11307  0004AA  D7FE               	bra	u7707
 11308  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11309  0004AE  D7FC               	bra	u7707
 11310  0004B0  F000               	nop	
 11311  0004B2  0100               	movlb	0	; () banked
 11312  0004B4  2BB4               	incf	actuatorTest@i_1647& (0+255),f,b
 11313  0004B6  D7EF               	goto	l6823
 11314  0004B8                     l6831:
 11315                           
 11316                           ; BSR set to: 0
 11317  0004B8  0E00               	movlw	0
 11318  0004BA  0100               	movlb	0	; () banked
 11319  0004BC  6FB5               	movwf	actuatorTest@i_1648& (0+255),b
 11320  0004BE                     l6833:
 11321                           
 11322                           ; BSR set to: 0
 11323  0004BE  0E63               	movlw	99
 11324  0004C0  0100               	movlb	0	; () banked
 11325  0004C2  65B5               	cpfsgt	actuatorTest@i_1648& (0+255),b
 11326  0004C4  D001               	goto	l6837
 11327  0004C6  D00C               	goto	l6841
 11328  0004C8                     l6837:
 11329                           
 11330                           ; BSR set to: 0
 11331  0004C8  0E68               	movlw	104
 11332  0004CA  0100               	movlb	0	; () banked
 11333  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11334  0004CE  0EE4               	movlw	228
 11335  0004D0                     u7717:
 11336  0004D0  2EE8               	decfsz	wreg,f,c
 11337  0004D2  D7FE               	bra	u7717
 11338  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11339  0004D6  D7FC               	bra	u7717
 11340  0004D8  F000               	nop	
 11341  0004DA  0100               	movlb	0	; () banked
 11342  0004DC  2BB5               	incf	actuatorTest@i_1648& (0+255),f,b
 11343  0004DE  D7EF               	goto	l6833
 11344  0004E0                     l6841:
 11345                           
 11346                           ; BSR set to: 0
 11347                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11348  0004E0  0E80               	movlw	128
 11349  0004E2  EC9B  F023         	call	_lcdInst
 11350  0004E6  0EC0               	movlw	192
 11351  0004E8  EC9B  F023         	call	_lcdInst
 11352                           
 11353                           ;Test.c: 285: printf("MID-RIGHT -- 2s ");
 11354  0004EC  0E3D               	movlw	low STR_101
 11355  0004EE  0100               	movlb	0	; () banked
 11356  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11357  0004F2  0EFC               	movlw	high STR_101
 11358  0004F4  0100               	movlb	0	; () banked
 11359  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11360  0004F8  ECB8  F008         	call	_printf	;wreg free
 11361                           
 11362                           ;Test.c: 286: updateServoPosition(750, 1);
 11363  0004FC  0E02               	movlw	2
 11364  0004FE  0100               	movlb	0	; () banked
 11365  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11366  000502  0EEE               	movlw	238
 11367  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11368  000506  0E00               	movlw	0
 11369  000508  0100               	movlb	0	; () banked
 11370  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11371  00050C  0E01               	movlw	1
 11372  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11373  000510  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11374                           
 11375                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11376  000514  0E00               	movlw	0
 11377  000516  0100               	movlb	0	; () banked
 11378  000518  6FB6               	movwf	actuatorTest@i_1650& (0+255),b
 11379  00051A                     l6849:
 11380                           
 11381                           ; BSR set to: 0
 11382  00051A  0E63               	movlw	99
 11383  00051C  0100               	movlb	0	; () banked
 11384  00051E  65B6               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11385  000520  D001               	goto	l6853
 11386  000522  D00C               	goto	l6857
 11387  000524                     l6853:
 11388                           
 11389                           ; BSR set to: 0
 11390  000524  0E68               	movlw	104
 11391  000526  0100               	movlb	0	; () banked
 11392  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11393  00052A  0EE4               	movlw	228
 11394  00052C                     u7727:
 11395  00052C  2EE8               	decfsz	wreg,f,c
 11396  00052E  D7FE               	bra	u7727
 11397  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11398  000532  D7FC               	bra	u7727
 11399  000534  F000               	nop	
 11400  000536  0100               	movlb	0	; () banked
 11401  000538  2BB6               	incf	actuatorTest@i_1650& (0+255),f,b
 11402  00053A  D7EF               	goto	l6849
 11403  00053C                     l6857:
 11404                           
 11405                           ; BSR set to: 0
 11406  00053C  0E00               	movlw	0
 11407  00053E  0100               	movlb	0	; () banked
 11408  000540  6FB7               	movwf	actuatorTest@i_1651& (0+255),b
 11409  000542                     l6859:
 11410                           
 11411                           ; BSR set to: 0
 11412  000542  0E63               	movlw	99
 11413  000544  0100               	movlb	0	; () banked
 11414  000546  65B7               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11415  000548  D001               	goto	l6863
 11416  00054A  D00C               	goto	l6867
 11417  00054C                     l6863:
 11418                           
 11419                           ; BSR set to: 0
 11420  00054C  0E68               	movlw	104
 11421  00054E  0100               	movlb	0	; () banked
 11422  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11423  000552  0EE4               	movlw	228
 11424  000554                     u7737:
 11425  000554  2EE8               	decfsz	wreg,f,c
 11426  000556  D7FE               	bra	u7737
 11427  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11428  00055A  D7FC               	bra	u7737
 11429  00055C  F000               	nop	
 11430  00055E  0100               	movlb	0	; () banked
 11431  000560  2BB7               	incf	actuatorTest@i_1651& (0+255),f,b
 11432  000562  D7EF               	goto	l6859
 11433  000564                     l6867:
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;Test.c: 289: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11437  000564  0E80               	movlw	128
 11438  000566  EC9B  F023         	call	_lcdInst
 11439  00056A  0EC0               	movlw	192
 11440  00056C  EC9B  F023         	call	_lcdInst
 11441                           
 11442                           ;Test.c: 290: printf("MID -- 2s       ");
 11443  000570  0EB5               	movlw	low STR_102
 11444  000572  0100               	movlb	0	; () banked
 11445  000574  6F8E               	movwf	printf@f& (0+255),b
 11446  000576  0EFB               	movlw	high STR_102
 11447  000578  0100               	movlb	0	; () banked
 11448  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11449  00057C  ECB8  F008         	call	_printf	;wreg free
 11450                           
 11451                           ;Test.c: 291: updateServoPosition(1200, 1);
 11452  000580  0E04               	movlw	4
 11453  000582  0100               	movlb	0	; () banked
 11454  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11455  000586  0EB0               	movlw	176
 11456  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11457  00058A  0E00               	movlw	0
 11458  00058C  0100               	movlb	0	; () banked
 11459  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11460  000590  0E01               	movlw	1
 11461  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11462  000594  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11463                           
 11464                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11465  000598  0E00               	movlw	0
 11466  00059A  0100               	movlb	0	; () banked
 11467  00059C  6FB8               	movwf	actuatorTest@i_1653& (0+255),b
 11468  00059E                     l6875:
 11469                           
 11470                           ; BSR set to: 0
 11471  00059E  0E63               	movlw	99
 11472  0005A0  0100               	movlb	0	; () banked
 11473  0005A2  65B8               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11474  0005A4  D001               	goto	l6879
 11475  0005A6  D00C               	goto	l6883
 11476  0005A8                     l6879:
 11477                           
 11478                           ; BSR set to: 0
 11479  0005A8  0E68               	movlw	104
 11480  0005AA  0100               	movlb	0	; () banked
 11481  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11482  0005AE  0EE4               	movlw	228
 11483  0005B0                     u7747:
 11484  0005B0  2EE8               	decfsz	wreg,f,c
 11485  0005B2  D7FE               	bra	u7747
 11486  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11487  0005B6  D7FC               	bra	u7747
 11488  0005B8  F000               	nop	
 11489  0005BA  0100               	movlb	0	; () banked
 11490  0005BC  2BB8               	incf	actuatorTest@i_1653& (0+255),f,b
 11491  0005BE  D7EF               	goto	l6875
 11492  0005C0                     l6883:
 11493                           
 11494                           ; BSR set to: 0
 11495  0005C0  0E00               	movlw	0
 11496  0005C2  0100               	movlb	0	; () banked
 11497  0005C4  6FB9               	movwf	actuatorTest@i_1654& (0+255),b
 11498  0005C6                     l6885:
 11499                           
 11500                           ; BSR set to: 0
 11501  0005C6  0E63               	movlw	99
 11502  0005C8  0100               	movlb	0	; () banked
 11503  0005CA  65B9               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11504  0005CC  D001               	goto	l6889
 11505  0005CE  D00C               	goto	l1131
 11506  0005D0                     l6889:
 11507                           
 11508                           ; BSR set to: 0
 11509  0005D0  0E68               	movlw	104
 11510  0005D2  0100               	movlb	0	; () banked
 11511  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11512  0005D6  0EE4               	movlw	228
 11513  0005D8                     u7757:
 11514  0005D8  2EE8               	decfsz	wreg,f,c
 11515  0005DA  D7FE               	bra	u7757
 11516  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11517  0005DE  D7FC               	bra	u7757
 11518  0005E0  F000               	nop	
 11519  0005E2  0100               	movlb	0	; () banked
 11520  0005E4  2BB9               	incf	actuatorTest@i_1654& (0+255),f,b
 11521  0005E6  D7EF               	goto	l6885
 11522  0005E8                     l1131:
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;Test.c: 293: TMR1ON = 0;
 11526  0005E8  90CD               	bcf	4045,0,c	;volatile
 11527                           
 11528                           ; BSR set to: 0
 11529                           ;Test.c: 300: printf("TST: TILT SERVO");
 11530  0005EA  0E3A               	movlw	low STR_103
 11531  0005EC  0100               	movlb	0	; () banked
 11532  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11533  0005F0  0EFE               	movlw	high STR_103
 11534  0005F2  0100               	movlb	0	; () banked
 11535  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11536  0005F6  ECB8  F008         	call	_printf	;wreg free
 11537                           
 11538                           ;Test.c: 301: lcdInst(0b11000000);;
 11539  0005FA  0EC0               	movlw	192
 11540  0005FC  EC9B  F023         	call	_lcdInst
 11541                           
 11542                           ;Test.c: 302: printf("LEVEL -- 2s     ");
 11543  000600  0EE8               	movlw	low STR_104
 11544  000602  0100               	movlb	0	; () banked
 11545  000604  6F8E               	movwf	printf@f& (0+255),b
 11546  000606  0EFB               	movlw	high STR_104
 11547  000608  0100               	movlb	0	; () banked
 11548  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11549  00060C  ECB8  F008         	call	_printf	;wreg free
 11550                           
 11551                           ;Test.c: 303: updateServoPosition(1150, 3);
 11552  000610  0E04               	movlw	4
 11553  000612  0100               	movlb	0	; () banked
 11554  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11555  000616  0E7E               	movlw	126
 11556  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11557  00061A  0E00               	movlw	0
 11558  00061C  0100               	movlb	0	; () banked
 11559  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11560  000620  0E03               	movlw	3
 11561  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11562  000624  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11563                           
 11564                           ;Test.c: 304: TMR3ON = 1;
 11565  000628  80B1               	bsf	4017,0,c	;volatile
 11566                           
 11567                           ;Test.c: 305: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11568  00062A  0E00               	movlw	0
 11569  00062C  0100               	movlb	0	; () banked
 11570  00062E  6FBA               	movwf	actuatorTest@i_1657& (0+255),b
 11571  000630                     l6903:
 11572                           
 11573                           ; BSR set to: 0
 11574  000630  0E63               	movlw	99
 11575  000632  0100               	movlb	0	; () banked
 11576  000634  65BA               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11577  000636  D001               	goto	l6907
 11578  000638  D00C               	goto	l6911
 11579  00063A                     l6907:
 11580                           
 11581                           ; BSR set to: 0
 11582  00063A  0E68               	movlw	104
 11583  00063C  0100               	movlb	0	; () banked
 11584  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11585  000640  0EE4               	movlw	228
 11586  000642                     u7767:
 11587  000642  2EE8               	decfsz	wreg,f,c
 11588  000644  D7FE               	bra	u7767
 11589  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11590  000648  D7FC               	bra	u7767
 11591  00064A  F000               	nop	
 11592  00064C  0100               	movlb	0	; () banked
 11593  00064E  2BBA               	incf	actuatorTest@i_1657& (0+255),f,b
 11594  000650  D7EF               	goto	l6903
 11595  000652                     l6911:
 11596                           
 11597                           ; BSR set to: 0
 11598  000652  0E00               	movlw	0
 11599  000654  0100               	movlb	0	; () banked
 11600  000656  6FBB               	movwf	actuatorTest@i_1658& (0+255),b
 11601  000658                     l6913:
 11602                           
 11603                           ; BSR set to: 0
 11604  000658  0E63               	movlw	99
 11605  00065A  0100               	movlb	0	; () banked
 11606  00065C  65BB               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11607  00065E  D001               	goto	l6917
 11608  000660  D00C               	goto	l6921
 11609  000662                     l6917:
 11610                           
 11611                           ; BSR set to: 0
 11612  000662  0E68               	movlw	104
 11613  000664  0100               	movlb	0	; () banked
 11614  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11615  000668  0EE4               	movlw	228
 11616  00066A                     u7777:
 11617  00066A  2EE8               	decfsz	wreg,f,c
 11618  00066C  D7FE               	bra	u7777
 11619  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11620  000670  D7FC               	bra	u7777
 11621  000672  F000               	nop	
 11622  000674  0100               	movlb	0	; () banked
 11623  000676  2BBB               	incf	actuatorTest@i_1658& (0+255),f,b
 11624  000678  D7EF               	goto	l6913
 11625  00067A                     l6921:
 11626                           
 11627                           ; BSR set to: 0
 11628                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11629  00067A  0E80               	movlw	128
 11630  00067C  EC9B  F023         	call	_lcdInst
 11631  000680  0EC0               	movlw	192
 11632  000682  EC9B  F023         	call	_lcdInst
 11633                           
 11634                           ;Test.c: 308: printf("DROP -- 2s      ");
 11635  000686  0EC6               	movlw	low STR_105
 11636  000688  0100               	movlb	0	; () banked
 11637  00068A  6F8E               	movwf	printf@f& (0+255),b
 11638  00068C  0EFB               	movlw	high STR_105
 11639  00068E  0100               	movlb	0	; () banked
 11640  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11641  000692  ECB8  F008         	call	_printf	;wreg free
 11642                           
 11643                           ;Test.c: 309: updateServoPosition(1350, 3);
 11644  000696  0E05               	movlw	5
 11645  000698  0100               	movlb	0	; () banked
 11646  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11647  00069C  0E46               	movlw	70
 11648  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11649  0006A0  0E00               	movlw	0
 11650  0006A2  0100               	movlb	0	; () banked
 11651  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11652  0006A6  0E03               	movlw	3
 11653  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11654  0006AA  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11655                           
 11656                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11657  0006AE  0E00               	movlw	0
 11658  0006B0  0100               	movlb	0	; () banked
 11659  0006B2  6FBC               	movwf	actuatorTest@i_1660& (0+255),b
 11660  0006B4                     l6929:
 11661                           
 11662                           ; BSR set to: 0
 11663  0006B4  0E63               	movlw	99
 11664  0006B6  0100               	movlb	0	; () banked
 11665  0006B8  65BC               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11666  0006BA  D001               	goto	l6933
 11667  0006BC  D00C               	goto	l6937
 11668  0006BE                     l6933:
 11669                           
 11670                           ; BSR set to: 0
 11671  0006BE  0E68               	movlw	104
 11672  0006C0  0100               	movlb	0	; () banked
 11673  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11674  0006C4  0EE4               	movlw	228
 11675  0006C6                     u7787:
 11676  0006C6  2EE8               	decfsz	wreg,f,c
 11677  0006C8  D7FE               	bra	u7787
 11678  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11679  0006CC  D7FC               	bra	u7787
 11680  0006CE  F000               	nop	
 11681  0006D0  0100               	movlb	0	; () banked
 11682  0006D2  2BBC               	incf	actuatorTest@i_1660& (0+255),f,b
 11683  0006D4  D7EF               	goto	l6929
 11684  0006D6                     l6937:
 11685                           
 11686                           ; BSR set to: 0
 11687  0006D6  0E00               	movlw	0
 11688  0006D8  0100               	movlb	0	; () banked
 11689  0006DA  6FBD               	movwf	actuatorTest@i_1661& (0+255),b
 11690  0006DC                     l6939:
 11691                           
 11692                           ; BSR set to: 0
 11693  0006DC  0E63               	movlw	99
 11694  0006DE  0100               	movlb	0	; () banked
 11695  0006E0  65BD               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11696  0006E2  D001               	goto	l6943
 11697  0006E4  D00C               	goto	l6947
 11698  0006E6                     l6943:
 11699                           
 11700                           ; BSR set to: 0
 11701  0006E6  0E68               	movlw	104
 11702  0006E8  0100               	movlb	0	; () banked
 11703  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11704  0006EC  0EE4               	movlw	228
 11705  0006EE                     u7797:
 11706  0006EE  2EE8               	decfsz	wreg,f,c
 11707  0006F0  D7FE               	bra	u7797
 11708  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11709  0006F4  D7FC               	bra	u7797
 11710  0006F6  F000               	nop	
 11711  0006F8  0100               	movlb	0	; () banked
 11712  0006FA  2BBD               	incf	actuatorTest@i_1661& (0+255),f,b
 11713  0006FC  D7EF               	goto	l6939
 11714  0006FE                     l6947:
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;Test.c: 312: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11718  0006FE  0E80               	movlw	128
 11719  000700  EC9B  F023         	call	_lcdInst
 11720  000704  0EC0               	movlw	192
 11721  000706  EC9B  F023         	call	_lcdInst
 11722                           
 11723                           ;Test.c: 313: printf("LEVEL -- 2s     ");
 11724  00070A  0EE8               	movlw	low STR_104
 11725  00070C  0100               	movlb	0	; () banked
 11726  00070E  6F8E               	movwf	printf@f& (0+255),b
 11727  000710  0EFB               	movlw	high STR_104
 11728  000712  0100               	movlb	0	; () banked
 11729  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11730  000716  ECB8  F008         	call	_printf	;wreg free
 11731                           
 11732                           ;Test.c: 314: updateServoPosition(1150, 3);
 11733  00071A  0E04               	movlw	4
 11734  00071C  0100               	movlb	0	; () banked
 11735  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11736  000720  0E7E               	movlw	126
 11737  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11738  000724  0E00               	movlw	0
 11739  000726  0100               	movlb	0	; () banked
 11740  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11741  00072A  0E03               	movlw	3
 11742  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11743  00072E  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11744                           
 11745                           ;Test.c: 315: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11746  000732  0E00               	movlw	0
 11747  000734  0100               	movlb	0	; () banked
 11748  000736  6FBE               	movwf	actuatorTest@i_1663& (0+255),b
 11749  000738                     l6955:
 11750                           
 11751                           ; BSR set to: 0
 11752  000738  0E63               	movlw	99
 11753  00073A  0100               	movlb	0	; () banked
 11754  00073C  65BE               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11755  00073E  D001               	goto	l6959
 11756  000740  D00C               	goto	l6963
 11757  000742                     l6959:
 11758                           
 11759                           ; BSR set to: 0
 11760  000742  0E68               	movlw	104
 11761  000744  0100               	movlb	0	; () banked
 11762  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11763  000748  0EE4               	movlw	228
 11764  00074A                     u7807:
 11765  00074A  2EE8               	decfsz	wreg,f,c
 11766  00074C  D7FE               	bra	u7807
 11767  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11768  000750  D7FC               	bra	u7807
 11769  000752  F000               	nop	
 11770  000754  0100               	movlb	0	; () banked
 11771  000756  2BBE               	incf	actuatorTest@i_1663& (0+255),f,b
 11772  000758  D7EF               	goto	l6955
 11773  00075A                     l6963:
 11774                           
 11775                           ; BSR set to: 0
 11776  00075A  0E00               	movlw	0
 11777  00075C  0100               	movlb	0	; () banked
 11778  00075E  6FBF               	movwf	actuatorTest@i_1664& (0+255),b
 11779  000760                     l6965:
 11780                           
 11781                           ; BSR set to: 0
 11782  000760  0E63               	movlw	99
 11783  000762  0100               	movlb	0	; () banked
 11784  000764  65BF               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11785  000766  D001               	goto	l6969
 11786  000768  D00C               	goto	l1143
 11787  00076A                     l6969:
 11788                           
 11789                           ; BSR set to: 0
 11790  00076A  0E68               	movlw	104
 11791  00076C  0100               	movlb	0	; () banked
 11792  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11793  000770  0EE4               	movlw	228
 11794  000772                     u7817:
 11795  000772  2EE8               	decfsz	wreg,f,c
 11796  000774  D7FE               	bra	u7817
 11797  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11798  000778  D7FC               	bra	u7817
 11799  00077A  F000               	nop	
 11800  00077C  0100               	movlb	0	; () banked
 11801  00077E  2BBF               	incf	actuatorTest@i_1664& (0+255),f,b
 11802  000780  D7EF               	goto	l6965
 11803  000782                     l1143:
 11804                           
 11805                           ; BSR set to: 0
 11806                           ;Test.c: 316: TMR3ON = 0;
 11807  000782  90B1               	bcf	4017,0,c	;volatile
 11808                           
 11809                           ;Test.c: 317: (INTCONbits.GIE = 0);
 11810  000784  9EF2               	bcf	intcon,7,c	;volatile
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11814  000786  0E01               	movlw	1
 11815  000788  EC9B  F023         	call	_lcdInst
 11816  00078C  0E68               	movlw	104
 11817  00078E  0100               	movlb	0	; () banked
 11818  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 11819  000792  0EE4               	movlw	228
 11820  000794                     u7827:
 11821  000794  2EE8               	decfsz	wreg,f,c
 11822  000796  D7FE               	bra	u7827
 11823  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11824  00079A  D7FC               	bra	u7827
 11825  00079C  F000               	nop	
 11826  00079E  0E80               	movlw	128
 11827  0007A0  EC9B  F023         	call	_lcdInst
 11828                           
 11829                           ;Test.c: 323: printf("TST: CAM SERVO");
 11830  0007A4  0E96               	movlw	low STR_107
 11831  0007A6  0100               	movlb	0	; () banked
 11832  0007A8  6F8E               	movwf	printf@f& (0+255),b
 11833  0007AA  0EFE               	movlw	high STR_107
 11834  0007AC  0100               	movlb	0	; () banked
 11835  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11836  0007B0  ECB8  F008         	call	_printf	;wreg free
 11837                           
 11838                           ;Test.c: 324: lcdInst(0b11000000);;
 11839  0007B4  0EC0               	movlw	192
 11840  0007B6  EC9B  F023         	call	_lcdInst
 11841                           
 11842                           ;Test.c: 325: printf("CAM UP  |RC0=1");
 11843  0007BA  0E78               	movlw	low STR_108
 11844  0007BC  0100               	movlb	0	; () banked
 11845  0007BE  6F8E               	movwf	printf@f& (0+255),b
 11846  0007C0  0EFE               	movlw	high STR_108
 11847  0007C2  0100               	movlb	0	; () banked
 11848  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11849  0007C6  ECB8  F008         	call	_printf	;wreg free
 11850                           
 11851                           ;Test.c: 326: LATCbits.LATC0 = 1;
 11852  0007CA  808B               	bsf	3979,0,c	;volatile
 11853                           
 11854                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11855  0007CC  0E00               	movlw	0
 11856  0007CE  0100               	movlb	0	; () banked
 11857  0007D0  6FC0               	movwf	actuatorTest@i_1667& (0+255),b
 11858  0007D2                     l6989:
 11859                           
 11860                           ; BSR set to: 0
 11861  0007D2  0E63               	movlw	99
 11862  0007D4  0100               	movlb	0	; () banked
 11863  0007D6  65C0               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11864  0007D8  D001               	goto	l6993
 11865  0007DA  D00C               	goto	l6997
 11866  0007DC                     l6993:
 11867                           
 11868                           ; BSR set to: 0
 11869  0007DC  0E68               	movlw	104
 11870  0007DE  0100               	movlb	0	; () banked
 11871  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 11872  0007E2  0EE4               	movlw	228
 11873  0007E4                     u7837:
 11874  0007E4  2EE8               	decfsz	wreg,f,c
 11875  0007E6  D7FE               	bra	u7837
 11876  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11877  0007EA  D7FC               	bra	u7837
 11878  0007EC  F000               	nop	
 11879  0007EE  0100               	movlb	0	; () banked
 11880  0007F0  2BC0               	incf	actuatorTest@i_1667& (0+255),f,b
 11881  0007F2  D7EF               	goto	l6989
 11882  0007F4                     l6997:
 11883                           
 11884                           ; BSR set to: 0
 11885  0007F4  0E00               	movlw	0
 11886  0007F6  0100               	movlb	0	; () banked
 11887  0007F8  6FC1               	movwf	actuatorTest@i_1668& (0+255),b
 11888  0007FA                     l6999:
 11889                           
 11890                           ; BSR set to: 0
 11891  0007FA  0E63               	movlw	99
 11892  0007FC  0100               	movlb	0	; () banked
 11893  0007FE  65C1               	cpfsgt	actuatorTest@i_1668& (0+255),b
 11894  000800  D001               	goto	l7003
 11895  000802  D00C               	goto	l7007
 11896  000804                     l7003:
 11897                           
 11898                           ; BSR set to: 0
 11899  000804  0E68               	movlw	104
 11900  000806  0100               	movlb	0	; () banked
 11901  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 11902  00080A  0EE4               	movlw	228
 11903  00080C                     u7847:
 11904  00080C  2EE8               	decfsz	wreg,f,c
 11905  00080E  D7FE               	bra	u7847
 11906  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11907  000812  D7FC               	bra	u7847
 11908  000814  F000               	nop	
 11909  000816  0100               	movlb	0	; () banked
 11910  000818  2BC1               	incf	actuatorTest@i_1668& (0+255),f,b
 11911  00081A  D7EF               	goto	l6999
 11912  00081C                     l7007:
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;Test.c: 328: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11916  00081C  0E80               	movlw	128
 11917  00081E  EC9B  F023         	call	_lcdInst
 11918  000822  0EC0               	movlw	192
 11919  000824  EC9B  F023         	call	_lcdInst
 11920                           
 11921                           ;Test.c: 329: printf("CAM DWN |RC0=0");
 11922  000828  0E69               	movlw	low STR_109
 11923  00082A  0100               	movlb	0	; () banked
 11924  00082C  6F8E               	movwf	printf@f& (0+255),b
 11925  00082E  0EFE               	movlw	high STR_109
 11926  000830  0100               	movlb	0	; () banked
 11927  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 11928  000834  ECB8  F008         	call	_printf	;wreg free
 11929                           
 11930                           ;Test.c: 332: for(i=0;i<10000;i++)
 11931  000838  0E00               	movlw	0
 11932  00083A  0100               	movlb	0	; () banked
 11933  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11934  00083E  0E00               	movlw	0
 11935  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 11936  000842                     l7013:
 11937                           
 11938                           ; BSR set to: 0
 11939  000842  0100               	movlb	0	; () banked
 11940  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11941  000846  D008               	goto	l1148
 11942  000848  0E10               	movlw	16
 11943  00084A  0100               	movlb	0	; () banked
 11944  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11945  00084E  0E27               	movlw	39
 11946  000850  0100               	movlb	0	; () banked
 11947  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 11948  000854  B0D8               	btfsc	status,0,c
 11949  000856  D00D               	goto	l7023
 11950  000858                     l1148:
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;Test.c: 333: {
 11954                           ;Test.c: 334: LATCbits.LATC0 = 1;
 11955  000858  808B               	bsf	3979,0,c	;volatile
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;Test.c: 335: _delay((unsigned long)((10)*(32000000/4000000.0)));
 11959  00085A  0E1A               	movlw	26
 11960  00085C                     u7857:
 11961  00085C  2EE8               	decfsz	wreg,f,c
 11962  00085E  D7FE               	bra	u7857
 11963  000860  D000               	nop2	
 11964                           
 11965                           ;Test.c: 336: LATCbits.LATC0 = 0;
 11966  000862  908B               	bcf	3979,0,c	;volatile
 11967                           
 11968                           ;Test.c: 337: _delay((unsigned long)((90)*(32000000/4000000.0)));
 11969  000864  0EF0               	movlw	240
 11970  000866                     u7867:
 11971  000866  2EE8               	decfsz	wreg,f,c
 11972  000868  D7FE               	bra	u7867
 11973  00086A  0100               	movlb	0	; () banked
 11974  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11975  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11976  000870  D7E8               	goto	l7013
 11977  000872                     l7023:
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;Test.c: 338: }
 11981                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11982  000872  0E00               	movlw	0
 11983  000874  0100               	movlb	0	; () banked
 11984  000876  6FC2               	movwf	actuatorTest@i_1670& (0+255),b
 11985  000878                     l7025:
 11986                           
 11987                           ; BSR set to: 0
 11988  000878  0E63               	movlw	99
 11989  00087A  0100               	movlb	0	; () banked
 11990  00087C  65C2               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11991  00087E  D001               	goto	l7029
 11992  000880  D00C               	goto	l7033
 11993  000882                     l7029:
 11994                           
 11995                           ; BSR set to: 0
 11996  000882  0E68               	movlw	104
 11997  000884  0100               	movlb	0	; () banked
 11998  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 11999  000888  0EE4               	movlw	228
 12000  00088A                     u7877:
 12001  00088A  2EE8               	decfsz	wreg,f,c
 12002  00088C  D7FE               	bra	u7877
 12003  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12004  000890  D7FC               	bra	u7877
 12005  000892  F000               	nop	
 12006  000894  0100               	movlb	0	; () banked
 12007  000896  2BC2               	incf	actuatorTest@i_1670& (0+255),f,b
 12008  000898  D7EF               	goto	l7025
 12009  00089A                     l7033:
 12010                           
 12011                           ; BSR set to: 0
 12012  00089A  0E00               	movlw	0
 12013  00089C  0100               	movlb	0	; () banked
 12014  00089E  6FC3               	movwf	actuatorTest@i_1671& (0+255),b
 12015  0008A0                     l7035:
 12016                           
 12017                           ; BSR set to: 0
 12018  0008A0  0E63               	movlw	99
 12019  0008A2  0100               	movlb	0	; () banked
 12020  0008A4  65C3               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12021  0008A6  D001               	goto	l7039
 12022  0008A8  D00C               	goto	l7043
 12023  0008AA                     l7039:
 12024                           
 12025                           ; BSR set to: 0
 12026  0008AA  0E68               	movlw	104
 12027  0008AC  0100               	movlb	0	; () banked
 12028  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12029  0008B0  0EE4               	movlw	228
 12030  0008B2                     u7887:
 12031  0008B2  2EE8               	decfsz	wreg,f,c
 12032  0008B4  D7FE               	bra	u7887
 12033  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12034  0008B8  D7FC               	bra	u7887
 12035  0008BA  F000               	nop	
 12036  0008BC  0100               	movlb	0	; () banked
 12037  0008BE  2BC3               	incf	actuatorTest@i_1671& (0+255),f,b
 12038  0008C0  D7EF               	goto	l7035
 12039  0008C2                     l7043:
 12040                           
 12041                           ; BSR set to: 0
 12042                           ;Test.c: 341: machine_state = Testing_state;
 12043  0008C2  0E03               	movlw	3
 12044  0008C4  0100               	movlb	0	; () banked
 12045  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12046                           
 12047                           ; BSR set to: 0
 12048  0008C8  0012               	return		;funcret
 12049  0008CA                     __end_of_actuatorTest:
 12050                           	opt stack 0
 12051                           tblptru	equ	0xFF8
 12052                           tblptrh	equ	0xFF7
 12053                           tblptrl	equ	0xFF6
 12054                           tablat	equ	0xFF5
 12055                           prodh	equ	0xFF4
 12056                           prodl	equ	0xFF3
 12057                           intcon	equ	0xFF2
 12058                           intcon2	equ	0xFF1
 12059                           intcon3	equ	0xFF0
 12060                           postinc0	equ	0xFEE
 12061                           wreg	equ	0xFE8
 12062                           postdec1	equ	0xFE5
 12063                           fsr1l	equ	0xFE1
 12064                           indf2	equ	0xFDF
 12065                           postinc2	equ	0xFDE
 12066                           postdec2	equ	0xFDD
 12067                           fsr2h	equ	0xFDA
 12068                           fsr2l	equ	0xFD9
 12069                           status	equ	0xFD8
 12070                           
 12071 ;; *************** function _ToggleTestA5 *****************
 12072 ;; Defined at:
 12073 ;;		line 490 in file "Test.c"
 12074 ;; Parameters:    Size  Location     Type
 12075 ;;		None
 12076 ;; Auto vars:     Size  Location     Type
 12077 ;;  on              2   44[BANK0 ] int 
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  1    wreg      void 
 12080 ;; Registers used:
 12081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12082 ;; Tracked objects:
 12083 ;;		On entry : 0/0
 12084 ;;		On exit  : 0/0
 12085 ;;		Unchanged: 0/0
 12086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;Total ram usage:        3 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:   10
 12094 ;; This function calls:
 12095 ;;		_lcdInst
 12096 ;;		_printf
 12097 ;; This function is called by:
 12098 ;;		_Test
 12099 ;; This function uses a non-reentrant model
 12100 ;;
 12101                           
 12102                           	psect	text41
 12103  0039CC                     __ptext41:
 12104                           	opt stack 0
 12105  0039CC                     _ToggleTestA5:
 12106                           	opt stack 19
 12107                           
 12108                           ;Test.c: 491: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;incstack = 0
 12112  0039CC  0E01               	movlw	1
 12113  0039CE  EC9B  F023         	call	_lcdInst
 12114  0039D2  0E68               	movlw	104
 12115  0039D4  0100               	movlb	0	; () banked
 12116  0039D6  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12117  0039D8  0EE4               	movlw	228
 12118  0039DA                     u7897:
 12119  0039DA  2EE8               	decfsz	wreg,f,c
 12120  0039DC  D7FE               	bra	u7897
 12121  0039DE  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12122  0039E0  D7FC               	bra	u7897
 12123  0039E2  F000               	nop	
 12124  0039E4  0E80               	movlw	128
 12125  0039E6  EC9B  F023         	call	_lcdInst
 12126                           
 12127                           ;Test.c: 492: printf("D WILL RETURN   ");
 12128  0039EA  0E1B               	movlw	low STR_114
 12129  0039EC  0100               	movlb	0	; () banked
 12130  0039EE  6F8E               	movwf	printf@f& (0+255),b
 12131  0039F0  0EFC               	movlw	high STR_114
 12132  0039F2  0100               	movlb	0	; () banked
 12133  0039F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12134  0039F6  ECB8  F008         	call	_printf	;wreg free
 12135                           
 12136                           ;Test.c: 493: lcdInst(0b11000000);;
 12137  0039FA  0EC0               	movlw	192
 12138  0039FC  EC9B  F023         	call	_lcdInst
 12139                           
 12140                           ;Test.c: 494: printf("ELSE TOGGLES RA5");
 12141  003A00  0E4E               	movlw	low STR_115
 12142  003A02  0100               	movlb	0	; () banked
 12143  003A04  6F8E               	movwf	printf@f& (0+255),b
 12144  003A06  0EFC               	movlw	high STR_115
 12145  003A08  0100               	movlb	0	; () banked
 12146  003A0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12147  003A0C  ECB8  F008         	call	_printf	;wreg free
 12148                           
 12149                           ;Test.c: 495: int on = 0;
 12150  003A10  0E00               	movlw	0
 12151  003A12  0100               	movlb	0	; () banked
 12152  003A14  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12153  003A16  0E00               	movlw	0
 12154  003A18  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12155  003A1A                     l1210:
 12156  003A1A  A281               	btfss	3969,1,c	;volatile
 12157  003A1C  D7FE               	goto	l1210
 12158                           
 12159                           ;Test.c: 500: }
 12160                           ;Test.c: 501: if(PORTB >> 4 == 0b1111){
 12161  003A1E  3881               	swapf	3969,w,c	;volatile
 12162  003A20  0B0F               	andlw	15
 12163  003A22  0A0F               	xorlw	15
 12164  003A24  B4D8               	btfsc	status,2,c
 12165  003A26  0012               	return	
 12166                           
 12167                           ;Test.c: 504: else{
 12168                           ;Test.c: 505: if(on == 0){
 12169                           
 12170                           ;Test.c: 503: }
 12171                           
 12172                           ;Test.c: 502: break;
 12173  003A28  0100               	movlb	0	; () banked
 12174  003A2A  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12175  003A2C  0100               	movlb	0	; () banked
 12176  003A2E  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12177  003A30  A4D8               	btfss	status,2,c
 12178  003A32  D007               	goto	l7101
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;Test.c: 506: on = 1;
 12182  003A34  0E00               	movlw	0
 12183  003A36  0100               	movlb	0	; () banked
 12184  003A38  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12185  003A3A  0E01               	movlw	1
 12186  003A3C  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;Test.c: 507: LATAbits.LATA5 = 1;
 12190  003A3E  8A89               	bsf	3977,5,c	;volatile
 12191                           
 12192                           ;Test.c: 508: }
 12193  003A40  D006               	goto	l1218
 12194  003A42                     l7101:
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;Test.c: 509: else{
 12198                           ;Test.c: 510: on = 0;
 12199  003A42  0E00               	movlw	0
 12200  003A44  0100               	movlb	0	; () banked
 12201  003A46  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12202  003A48  0E00               	movlw	0
 12203  003A4A  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12204                           
 12205                           ; BSR set to: 0
 12206                           ;Test.c: 511: LATAbits.LATA5 = 0;
 12207  003A4C  9A89               	bcf	3977,5,c	;volatile
 12208  003A4E                     l1218:
 12209  003A4E  A281               	btfss	3969,1,c	;volatile
 12210  003A50  D7E4               	goto	l1210
 12211  003A52  D7FD               	goto	l1218
 12212  003A54                     __end_of_ToggleTestA5:
 12213                           	opt stack 0
 12214                           tblptru	equ	0xFF8
 12215                           tblptrh	equ	0xFF7
 12216                           tblptrl	equ	0xFF6
 12217                           tablat	equ	0xFF5
 12218                           prodh	equ	0xFF4
 12219                           prodl	equ	0xFF3
 12220                           intcon	equ	0xFF2
 12221                           intcon2	equ	0xFF1
 12222                           intcon3	equ	0xFF0
 12223                           postinc0	equ	0xFEE
 12224                           wreg	equ	0xFE8
 12225                           postdec1	equ	0xFE5
 12226                           fsr1l	equ	0xFE1
 12227                           indf2	equ	0xFDF
 12228                           postinc2	equ	0xFDE
 12229                           postdec2	equ	0xFDD
 12230                           fsr2h	equ	0xFDA
 12231                           fsr2l	equ	0xFD9
 12232                           status	equ	0xFD8
 12233                           
 12234 ;; *************** function _PusherTestA5 *****************
 12235 ;; Defined at:
 12236 ;;		line 463 in file "Test.c"
 12237 ;; Parameters:    Size  Location     Type
 12238 ;;		None
 12239 ;; Auto vars:     Size  Location     Type
 12240 ;;		None
 12241 ;; Return value:  Size  Location     Type
 12242 ;;                  1    wreg      void 
 12243 ;; Registers used:
 12244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12245 ;; Tracked objects:
 12246 ;;		On entry : 0/0
 12247 ;;		On exit  : 0/0
 12248 ;;		Unchanged: 0/0
 12249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12253 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12254 ;;Total ram usage:        2 bytes
 12255 ;; Hardware stack levels used:    1
 12256 ;; Hardware stack levels required when called:   10
 12257 ;; This function calls:
 12258 ;;		_lcdInst
 12259 ;;		_printf
 12260 ;; This function is called by:
 12261 ;;		_Test
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           	psect	text42
 12266  003F06                     __ptext42:
 12267                           	opt stack 0
 12268  003F06                     _PusherTestA5:
 12269                           	opt stack 19
 12270                           
 12271                           ;Test.c: 464: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12272                           
 12273                           ;incstack = 0
 12274  003F06  0E01               	movlw	1
 12275  003F08  EC9B  F023         	call	_lcdInst
 12276  003F0C  0E68               	movlw	104
 12277  003F0E  0100               	movlb	0	; () banked
 12278  003F10  6FAB               	movwf	??_PusherTestA5& (0+255),b
 12279  003F12  0EE4               	movlw	228
 12280  003F14                     u7907:
 12281  003F14  2EE8               	decfsz	wreg,f,c
 12282  003F16  D7FE               	bra	u7907
 12283  003F18  2FAB               	decfsz	??_PusherTestA5& (0+255),f,b
 12284  003F1A  D7FC               	bra	u7907
 12285  003F1C  F000               	nop	
 12286  003F1E  0E80               	movlw	128
 12287  003F20  EC9B  F023         	call	_lcdInst
 12288                           
 12289                           ;Test.c: 465: printf("PUSHER TST");
 12290  003F24  0E71               	movlw	low STR_113
 12291  003F26  0100               	movlb	0	; () banked
 12292  003F28  6F8E               	movwf	printf@f& (0+255),b
 12293  003F2A  0EFF               	movlw	high STR_113
 12294  003F2C  0100               	movlb	0	; () banked
 12295  003F2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12296  003F30  ECB8  F008         	call	_printf	;wreg free
 12297  003F34                     l1198:
 12298  003F34  A281               	btfss	3969,1,c	;volatile
 12299  003F36  D7FE               	goto	l1198
 12300                           
 12301                           ;Test.c: 471: }
 12302                           ;Test.c: 482: LATAbits.LATA4 = 1;
 12303  003F38  8889               	bsf	3977,4,c	;volatile
 12304                           
 12305                           ;Test.c: 483: _delay((unsigned long)((100)*(32000000/4000.0)));
 12306  003F3A  0E05               	movlw	5
 12307  003F3C  0100               	movlb	0	; () banked
 12308  003F3E  6FAC               	movwf	(??_PusherTestA5+1)& (0+255),b
 12309  003F40  0E0F               	movlw	15
 12310  003F42  0100               	movlb	0	; () banked
 12311  003F44  6FAB               	movwf	??_PusherTestA5& (0+255),b
 12312  003F46  0EF1               	movlw	241
 12313  003F48                     u7917:
 12314  003F48  2EE8               	decfsz	wreg,f,c
 12315  003F4A  D7FE               	bra	u7917
 12316  003F4C  2FAB               	decfsz	??_PusherTestA5& (0+255),f,b
 12317  003F4E  D7FC               	bra	u7917
 12318  003F50  2FAC               	decfsz	(??_PusherTestA5+1)& (0+255),f,b
 12319  003F52  D7FA               	bra	u7917
 12320                           
 12321                           ;Test.c: 484: LATAbits.LATA4 = 0;
 12322  003F54  9889               	bcf	3977,4,c	;volatile
 12323  003F56                     l1201:
 12324  003F56  A281               	btfss	3969,1,c	;volatile
 12325  003F58  D7ED               	goto	l1198
 12326  003F5A  D7FD               	goto	l1201
 12327  003F5C                     __end_of_PusherTestA5:
 12328                           	opt stack 0
 12329                           tblptru	equ	0xFF8
 12330                           tblptrh	equ	0xFF7
 12331                           tblptrl	equ	0xFF6
 12332                           tablat	equ	0xFF5
 12333                           prodh	equ	0xFF4
 12334                           prodl	equ	0xFF3
 12335                           intcon	equ	0xFF2
 12336                           intcon2	equ	0xFF1
 12337                           intcon3	equ	0xFF0
 12338                           postinc0	equ	0xFEE
 12339                           wreg	equ	0xFE8
 12340                           postdec1	equ	0xFE5
 12341                           fsr1l	equ	0xFE1
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349 ;; *************** function _PortTests *****************
 12350 ;; Defined at:
 12351 ;;		line 395 in file "Test.c"
 12352 ;; Parameters:    Size  Location     Type
 12353 ;;		None
 12354 ;; Auto vars:     Size  Location     Type
 12355 ;;		None
 12356 ;; Return value:  Size  Location     Type
 12357 ;;                  1    wreg      void 
 12358 ;; Registers used:
 12359 ;;		wreg, status,2, status,0
 12360 ;; Tracked objects:
 12361 ;;		On entry : 0/0
 12362 ;;		On exit  : 0/0
 12363 ;;		Unchanged: 0/0
 12364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12367 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;Total ram usage:        2 bytes
 12370 ;; Hardware stack levels used:    1
 12371 ;; Hardware stack levels required when called:    7
 12372 ;; This function calls:
 12373 ;;		Nothing
 12374 ;; This function is called by:
 12375 ;;		_Test
 12376 ;; This function uses a non-reentrant model
 12377 ;;
 12378                           
 12379                           	psect	text43
 12380  003ADA                     __ptext43:
 12381                           	opt stack 0
 12382  003ADA                     _PortTests:
 12383                           	opt stack 22
 12384  003ADA                     l1161:
 12385  003ADA  A281               	btfss	3969,1,c	;volatile
 12386  003ADC  D7FE               	goto	l1161
 12387                           
 12388                           ;Test.c: 399: var = PORTB >> 4;
 12389  003ADE  CF81 F080          	movff	3969,??_PortTests	;volatile
 12390  003AE2  0100               	movlb	0	; () banked
 12391  003AE4  3B80               	swapf	??_PortTests& (0+255),f,b
 12392  003AE6  0E0F               	movlw	15
 12393  003AE8  1780               	andwf	??_PortTests& (0+255),f,b
 12394  003AEA  0100               	movlb	0	; () banked
 12395  003AEC  5180               	movf	??_PortTests& (0+255),w,b
 12396  003AEE  0100               	movlb	0	; () banked
 12397  003AF0  6FFA               	movwf	_var& (0+255),b
 12398  003AF2  6BFB               	clrf	(_var+1)& (0+255),b
 12399                           
 12400                           ;Test.c: 400: switch(var){
 12401  003AF4  D00C               	goto	l7121
 12402  003AF6                     l1165:
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;Test.c: 402: LATEbits.LATE0 = 1;
 12406  003AF6  808D               	bsf	3981,0,c	;volatile
 12407                           
 12408                           ;Test.c: 403: break;
 12409  003AF8  D027               	goto	l1173
 12410  003AFA                     l1167:
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;Test.c: 405: LATEbits.LATE1 = 1;
 12414  003AFA  828D               	bsf	3981,1,c	;volatile
 12415                           
 12416                           ;Test.c: 406: break;
 12417  003AFC  D025               	goto	l1173
 12418  003AFE                     l1168:
 12419                           
 12420                           ; BSR set to: 0
 12421                           ;Test.c: 408: LATDbits.LATD0 = 1;
 12422  003AFE  808C               	bsf	3980,0,c	;volatile
 12423                           
 12424                           ;Test.c: 409: break;
 12425  003B00  D023               	goto	l1173
 12426  003B02                     l1169:
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;Test.c: 411: LATAbits.LATA3 = 1;
 12430  003B02  8689               	bsf	3977,3,c	;volatile
 12431                           
 12432                           ;Test.c: 412: break;
 12433  003B04  D021               	goto	l1173
 12434  003B06                     l1170:
 12435                           
 12436                           ; BSR set to: 0
 12437                           ;Test.c: 414: LATAbits.LATA4 = 1;
 12438  003B06  8889               	bsf	3977,4,c	;volatile
 12439                           
 12440                           ;Test.c: 415: break;
 12441  003B08  D01F               	goto	l1173
 12442  003B0A                     l1171:
 12443                           
 12444                           ; BSR set to: 0
 12445                           ;Test.c: 417: LATAbits.LATA5 = 1;
 12446  003B0A  8A89               	bsf	3977,5,c	;volatile
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;Test.c: 421: }
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;Test.c: 420: break;
 12453                           
 12454                           ;Test.c: 419: default:
 12455                           
 12456                           ;Test.c: 418: break;
 12457  003B0C  D01D               	goto	l1173
 12458  003B0E                     l7121:
 12459                           
 12460                           ; BSR set to: 0
 12461  003B0E  C0FA  F080         	movff	_var,??_PortTests
 12462  003B12  C0FB  F081         	movff	_var+1,??_PortTests+1
 12463                           
 12464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12465                           ; Switch size 1, requested type "space"
 12466                           ; Number of cases is 1, Range of values is 0 to 0
 12467                           ; switch strategies available:
 12468                           ; Name         Instructions Cycles
 12469                           ; simple_byte            4     3 (average)
 12470                           ;	Chosen strategy is simple_byte
 12471  003B16  0100               	movlb	0	; () banked
 12472  003B18  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12473  003B1A  0A00               	xorlw	0	; case 0
 12474  003B1C  A4D8               	btfss	status,2,c
 12475  003B1E  D014               	goto	l1173
 12476                           
 12477                           ; BSR set to: 0
 12478                           ; Switch size 1, requested type "space"
 12479                           ; Number of cases is 6, Range of values is 0 to 5
 12480                           ; switch strategies available:
 12481                           ; Name         Instructions Cycles
 12482                           ; simple_byte           19    10 (average)
 12483                           ;	Chosen strategy is simple_byte
 12484  003B20  0100               	movlb	0	; () banked
 12485  003B22  5180               	movf	??_PortTests& (0+255),w,b
 12486  003B24  0A00               	xorlw	0	; case 0
 12487  003B26  B4D8               	btfsc	status,2,c
 12488  003B28  D7E6               	goto	l1165
 12489  003B2A  0A01               	xorlw	1	; case 1
 12490  003B2C  B4D8               	btfsc	status,2,c
 12491  003B2E  D7E5               	goto	l1167
 12492  003B30  0A03               	xorlw	3	; case 2
 12493  003B32  B4D8               	btfsc	status,2,c
 12494  003B34  D7E4               	goto	l1168
 12495  003B36  0A01               	xorlw	1	; case 3
 12496  003B38  B4D8               	btfsc	status,2,c
 12497  003B3A  D7E3               	goto	l1169
 12498  003B3C  0A07               	xorlw	7	; case 4
 12499  003B3E  B4D8               	btfsc	status,2,c
 12500  003B40  D7E2               	goto	l1170
 12501  003B42  0A01               	xorlw	1	; case 5
 12502  003B44  B4D8               	btfsc	status,2,c
 12503  003B46  D7E1               	goto	l1171
 12504  003B48                     l1173:
 12505  003B48  B281               	btfsc	3969,1,c	;volatile
 12506  003B4A  D7FE               	goto	l1173
 12507                           
 12508                           ;Test.c: 423: __nop();
 12509  003B4C  F000               	nop	
 12510                           
 12511                           ;Test.c: 424: __nop();
 12512  003B4E  F000               	nop	
 12513                           
 12514                           ;Test.c: 425: LATA = 0x00;
 12515  003B50  0E00               	movlw	0
 12516  003B52  6E89               	movwf	3977,c	;volatile
 12517                           
 12518                           ;Test.c: 426: LATE = 0x00;
 12519  003B54  0E00               	movlw	0
 12520  003B56  6E8D               	movwf	3981,c	;volatile
 12521                           
 12522                           ;Test.c: 427: LATD = 0x00; }
 12523  003B58  0E00               	movlw	0
 12524  003B5A  6E8C               	movwf	3980,c	;volatile
 12525  003B5C  D7BE               	goto	l1161
 12526  003B5E                     __end_of_PortTests:
 12527                           	opt stack 0
 12528                           tblptru	equ	0xFF8
 12529                           tblptrh	equ	0xFF7
 12530                           tblptrl	equ	0xFF6
 12531                           tablat	equ	0xFF5
 12532                           prodh	equ	0xFF4
 12533                           prodl	equ	0xFF3
 12534                           intcon	equ	0xFF2
 12535                           intcon2	equ	0xFF1
 12536                           intcon3	equ	0xFF0
 12537                           postinc0	equ	0xFEE
 12538                           wreg	equ	0xFE8
 12539                           postdec1	equ	0xFE5
 12540                           fsr1l	equ	0xFE1
 12541                           indf2	equ	0xFDF
 12542                           postinc2	equ	0xFDE
 12543                           postdec2	equ	0xFDD
 12544                           fsr2h	equ	0xFDA
 12545                           fsr2l	equ	0xFD9
 12546                           status	equ	0xFD8
 12547                           
 12548 ;; *************** function _PortTestA5 *****************
 12549 ;; Defined at:
 12550 ;;		line 430 in file "Test.c"
 12551 ;; Parameters:    Size  Location     Type
 12552 ;;		None
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;		None
 12555 ;; Return value:  Size  Location     Type
 12556 ;;                  1    wreg      void 
 12557 ;; Registers used:
 12558 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12567 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12568 ;;Total ram usage:        1 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:   10
 12571 ;; This function calls:
 12572 ;;		_lcdInst
 12573 ;;		_printf
 12574 ;; This function is called by:
 12575 ;;		_Test
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579                           	psect	text44
 12580  0038AA                     __ptext44:
 12581                           	opt stack 0
 12582  0038AA                     _PortTestA5:
 12583                           	opt stack 19
 12584                           
 12585                           ;Test.c: 431: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12586                           
 12587                           ;incstack = 0
 12588  0038AA  0E01               	movlw	1
 12589  0038AC  EC9B  F023         	call	_lcdInst
 12590  0038B0  0E68               	movlw	104
 12591  0038B2  0100               	movlb	0	; () banked
 12592  0038B4  6FAB               	movwf	??_PortTestA5& (0+255),b
 12593  0038B6  0EE4               	movlw	228
 12594  0038B8                     u7927:
 12595  0038B8  2EE8               	decfsz	wreg,f,c
 12596  0038BA  D7FE               	bra	u7927
 12597  0038BC  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12598  0038BE  D7FC               	bra	u7927
 12599  0038C0  F000               	nop	
 12600  0038C2  0E80               	movlw	128
 12601  0038C4  EC9B  F023         	call	_lcdInst
 12602                           
 12603                           ;Test.c: 432: printf("D WILL RETURN    ");
 12604  0038C8  0E6D               	movlw	low STR_111
 12605  0038CA  0100               	movlb	0	; () banked
 12606  0038CC  6F8E               	movwf	printf@f& (0+255),b
 12607  0038CE  0EFB               	movlw	high STR_111
 12608  0038D0  0100               	movlb	0	; () banked
 12609  0038D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12610  0038D4  ECB8  F008         	call	_printf	;wreg free
 12611                           
 12612                           ;Test.c: 433: lcdInst(0b11000000);;
 12613  0038D8  0EC0               	movlw	192
 12614  0038DA  EC9B  F023         	call	_lcdInst
 12615                           
 12616                           ;Test.c: 434: printf("OTHER SETS RA5   ");
 12617  0038DE  0E7F               	movlw	low STR_112
 12618  0038E0  0100               	movlb	0	; () banked
 12619  0038E2  6F8E               	movwf	printf@f& (0+255),b
 12620  0038E4  0EFB               	movlw	high STR_112
 12621  0038E6  0100               	movlb	0	; () banked
 12622  0038E8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12623  0038EA  ECB8  F008         	call	_printf	;wreg free
 12624  0038EE                     l1182:
 12625  0038EE  A281               	btfss	3969,1,c	;volatile
 12626  0038F0  D7FE               	goto	l1182
 12627                           
 12628                           ;Test.c: 439: }
 12629                           ;Test.c: 440: if(PORTB >> 4 == 0b1111){
 12630  0038F2  3881               	swapf	3969,w,c	;volatile
 12631  0038F4  0B0F               	andlw	15
 12632  0038F6  0A0F               	xorlw	15
 12633  0038F8  B4D8               	btfsc	status,2,c
 12634  0038FA  0012               	return	
 12635                           
 12636                           ;Test.c: 443: else{
 12637                           ;Test.c: 444: LATAbits.LATA5 = 1;
 12638                           
 12639                           ;Test.c: 442: }
 12640                           
 12641                           ;Test.c: 441: break;
 12642  0038FC  8A89               	bsf	3977,5,c	;volatile
 12643  0038FE                     l1188:
 12644  0038FE  B281               	btfsc	3969,1,c	;volatile
 12645  003900  D7FE               	goto	l1188
 12646                           
 12647                           ;Test.c: 447: }
 12648                           ;Test.c: 450: for(i=0;i<10000;i++)
 12649  003902  0E00               	movlw	0
 12650  003904  0100               	movlb	0	; () banked
 12651  003906  6FE5               	movwf	(_i+1)& (0+255),b
 12652  003908  0E00               	movlw	0
 12653  00390A  6FE4               	movwf	_i& (0+255),b
 12654  00390C                     l7065:
 12655                           
 12656                           ; BSR set to: 0
 12657  00390C  0100               	movlb	0	; () banked
 12658  00390E  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12659  003910  D008               	goto	l1191
 12660  003912  0E10               	movlw	16
 12661  003914  0100               	movlb	0	; () banked
 12662  003916  5DE4               	subwf	_i& (0+255),w,b
 12663  003918  0E27               	movlw	39
 12664  00391A  0100               	movlb	0	; () banked
 12665  00391C  59E5               	subwfb	(_i+1)& (0+255),w,b
 12666  00391E  B0D8               	btfsc	status,0,c
 12667  003920  D00D               	goto	l1192
 12668  003922                     l1191:
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;Test.c: 451: {
 12672                           ;Test.c: 452: LATAbits.LATA5 = 1;
 12673  003922  8A89               	bsf	3977,5,c	;volatile
 12674                           
 12675                           ; BSR set to: 0
 12676                           ;Test.c: 453: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12677  003924  0E1A               	movlw	26
 12678  003926                     u7937:
 12679  003926  2EE8               	decfsz	wreg,f,c
 12680  003928  D7FE               	bra	u7937
 12681  00392A  D000               	nop2	
 12682                           
 12683                           ;Test.c: 454: LATAbits.LATA5 = 0;
 12684  00392C  9A89               	bcf	3977,5,c	;volatile
 12685                           
 12686                           ;Test.c: 455: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12687  00392E  0EF0               	movlw	240
 12688  003930                     u7947:
 12689  003930  2EE8               	decfsz	wreg,f,c
 12690  003932  D7FE               	bra	u7947
 12691  003934  0100               	movlb	0	; () banked
 12692  003936  4BE4               	infsnz	_i& (0+255),f,b
 12693  003938  2BE5               	incf	(_i+1)& (0+255),f,b
 12694  00393A  D7E8               	goto	l7065
 12695  00393C                     l1192:
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;Test.c: 456: }
 12699                           ;Test.c: 458: LATAbits.LATA5 = 0;
 12700  00393C  9A89               	bcf	3977,5,c	;volatile
 12701                           
 12702                           ; BSR set to: 0
 12703                           
 12704                           ; BSR set to: 0
 12705  00393E  D7D7               	goto	l1182
 12706  003940                     __end_of_PortTestA5:
 12707                           	opt stack 0
 12708                           tblptru	equ	0xFF8
 12709                           tblptrh	equ	0xFF7
 12710                           tblptrl	equ	0xFF6
 12711                           tablat	equ	0xFF5
 12712                           prodh	equ	0xFF4
 12713                           prodl	equ	0xFF3
 12714                           intcon	equ	0xFF2
 12715                           intcon2	equ	0xFF1
 12716                           intcon3	equ	0xFF0
 12717                           postinc0	equ	0xFEE
 12718                           wreg	equ	0xFE8
 12719                           postdec1	equ	0xFE5
 12720                           fsr1l	equ	0xFE1
 12721                           indf2	equ	0xFDF
 12722                           postinc2	equ	0xFDE
 12723                           postdec2	equ	0xFDD
 12724                           fsr2h	equ	0xFDA
 12725                           fsr2l	equ	0xFD9
 12726                           status	equ	0xFD8
 12727                           
 12728 ;; *************** function _EEPROMTest *****************
 12729 ;; Defined at:
 12730 ;;		line 518 in file "Test.c"
 12731 ;; Parameters:    Size  Location     Type
 12732 ;;		None
 12733 ;; Auto vars:     Size  Location     Type
 12734 ;;		None
 12735 ;; Return value:  Size  Location     Type
 12736 ;;                  1    wreg      void 
 12737 ;; Registers used:
 12738 ;;		None
 12739 ;; Tracked objects:
 12740 ;;		On entry : 0/0
 12741 ;;		On exit  : 0/0
 12742 ;;		Unchanged: 0/0
 12743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12748 ;;Total ram usage:        0 bytes
 12749 ;; Hardware stack levels used:    1
 12750 ;; Hardware stack levels required when called:    7
 12751 ;; This function calls:
 12752 ;;		Nothing
 12753 ;; This function is called by:
 12754 ;;		_Test
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758                           	psect	text45
 12759  00479A                     __ptext45:
 12760                           	opt stack 0
 12761  00479A                     _EEPROMTest:
 12762                           	opt stack 22
 12763                           
 12764                           ;incstack = 0
 12765  00479A  0012               	return		;funcret
 12766  00479C                     __end_of_EEPROMTest:
 12767                           	opt stack 0
 12768                           tblptru	equ	0xFF8
 12769                           tblptrh	equ	0xFF7
 12770                           tblptrl	equ	0xFF6
 12771                           tablat	equ	0xFF5
 12772                           prodh	equ	0xFF4
 12773                           prodl	equ	0xFF3
 12774                           intcon	equ	0xFF2
 12775                           intcon2	equ	0xFF1
 12776                           intcon3	equ	0xFF0
 12777                           postinc0	equ	0xFEE
 12778                           wreg	equ	0xFE8
 12779                           postdec1	equ	0xFE5
 12780                           fsr1l	equ	0xFE1
 12781                           indf2	equ	0xFDF
 12782                           postinc2	equ	0xFDE
 12783                           postdec2	equ	0xFDD
 12784                           fsr2h	equ	0xFDA
 12785                           fsr2l	equ	0xFD9
 12786                           status	equ	0xFD8
 12787                           
 12788 ;; *************** function _BothServos *****************
 12789 ;; Defined at:
 12790 ;;		line 344 in file "Test.c"
 12791 ;; Parameters:    Size  Location     Type
 12792 ;;		None
 12793 ;; Auto vars:     Size  Location     Type
 12794 ;;		None
 12795 ;; Return value:  Size  Location     Type
 12796 ;;                  1    wreg      void 
 12797 ;; Registers used:
 12798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12806 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12808 ;;Total ram usage:        2 bytes
 12809 ;; Hardware stack levels used:    1
 12810 ;; Hardware stack levels required when called:   10
 12811 ;; This function calls:
 12812 ;;		_initServos
 12813 ;;		_lcdInst
 12814 ;;		_printf
 12815 ;;		_updateServoPosition
 12816 ;; This function is called by:
 12817 ;;		_Test
 12818 ;; This function uses a non-reentrant model
 12819 ;;
 12820                           
 12821                           	psect	text46
 12822  001916                     __ptext46:
 12823                           	opt stack 0
 12824  001916                     _BothServos:
 12825                           	opt stack 19
 12826                           
 12827                           ;Test.c: 345: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12828                           
 12829                           ;incstack = 0
 12830  001916  0E01               	movlw	1
 12831  001918  EC9B  F023         	call	_lcdInst
 12832  00191C  0E68               	movlw	104
 12833  00191E  0100               	movlb	0	; () banked
 12834  001920  6FAB               	movwf	??_BothServos& (0+255),b
 12835  001922  0EE4               	movlw	228
 12836  001924                     u7957:
 12837  001924  2EE8               	decfsz	wreg,f,c
 12838  001926  D7FE               	bra	u7957
 12839  001928  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12840  00192A  D7FC               	bra	u7957
 12841  00192C  F000               	nop	
 12842  00192E  0E80               	movlw	128
 12843  001930  EC9B  F023         	call	_lcdInst
 12844                           
 12845                           ;Test.c: 346: printf("TST: BOTH SERVOS");
 12846  001934  0EB4               	movlw	low STR_110
 12847  001936  0100               	movlb	0	; () banked
 12848  001938  6F8E               	movwf	printf@f& (0+255),b
 12849  00193A  0EFC               	movlw	high STR_110
 12850  00193C  0100               	movlb	0	; () banked
 12851  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12852  001940  ECB8  F008         	call	_printf	;wreg free
 12853                           
 12854                           ;Test.c: 347: TMR1ON = 1;
 12855  001944  80CD               	bsf	4045,0,c	;volatile
 12856                           
 12857                           ;Test.c: 348: TMR3ON = 1;
 12858  001946  80B1               	bsf	4017,0,c	;volatile
 12859                           
 12860                           ;Test.c: 349: machine_state = Sorting_state;
 12861  001948  0E01               	movlw	1
 12862  00194A  0100               	movlb	0	; () banked
 12863  00194C  6FFC               	movwf	_machine_state& (0+255),b
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;Test.c: 350: was_low_1 = 0;
 12867  00194E  0E00               	movlw	0
 12868  001950  6E7A               	movwf	_was_low_1+1,c	;volatile
 12869  001952  0E00               	movlw	0
 12870  001954  6E79               	movwf	_was_low_1,c	;volatile
 12871                           
 12872                           ; BSR set to: 0
 12873                           ;Test.c: 351: was_low_1 = 0;
 12874  001956  0E00               	movlw	0
 12875  001958  6E7A               	movwf	_was_low_1+1,c	;volatile
 12876  00195A  0E00               	movlw	0
 12877  00195C  6E79               	movwf	_was_low_1,c	;volatile
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;Test.c: 357: initServos();
 12881  00195E  EC56  F01F         	call	_initServos	;wreg free
 12882                           
 12883                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12884  001962  0E3D               	movlw	61
 12885  001964  0100               	movlb	0	; () banked
 12886  001966  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12887  001968  0EE1               	movlw	225
 12888  00196A  0100               	movlb	0	; () banked
 12889  00196C  6FAB               	movwf	??_BothServos& (0+255),b
 12890  00196E  0E3F               	movlw	63
 12891  001970                     u7967:
 12892  001970  2EE8               	decfsz	wreg,f,c
 12893  001972  D7FE               	bra	u7967
 12894  001974  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12895  001976  D7FC               	bra	u7967
 12896  001978  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12897  00197A  D7FA               	bra	u7967
 12898  00197C  D000               	nop2	
 12899                           
 12900                           ;Test.c: 359: updateServoPosition(500, 1);
 12901  00197E  0E01               	movlw	1
 12902  001980  0100               	movlb	0	; () banked
 12903  001982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12904  001984  0EF4               	movlw	244
 12905  001986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12906  001988  0E00               	movlw	0
 12907  00198A  0100               	movlb	0	; () banked
 12908  00198C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12909  00198E  0E01               	movlw	1
 12910  001990  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12911  001992  ECEB  F01D         	call	_updateServoPosition	;wreg free
 12912                           
 12913                           ;Test.c: 360: _delay((unsigned long)((750)*(32000000/4000.0)));
 12914  001996  0E1F               	movlw	31
 12915  001998  0100               	movlb	0	; () banked
 12916  00199A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12917  00199C  0E71               	movlw	113
 12918  00199E  0100               	movlb	0	; () banked
 12919  0019A0  6FAB               	movwf	??_BothServos& (0+255),b
 12920  0019A2  0E1E               	movlw	30
 12921  0019A4                     u7977:
 12922  0019A4  2EE8               	decfsz	wreg,f,c
 12923  0019A6  D7FE               	bra	u7977
 12924  0019A8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12925  0019AA  D7FC               	bra	u7977
 12926  0019AC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12927  0019AE  D7FA               	bra	u7977
 12928  0019B0  F000               	nop	
 12929                           
 12930                           ;Test.c: 361: updateServoPosition(1350, 3);
 12931  0019B2  0E05               	movlw	5
 12932  0019B4  0100               	movlb	0	; () banked
 12933  0019B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12934  0019B8  0E46               	movlw	70
 12935  0019BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12936  0019BC  0E00               	movlw	0
 12937  0019BE  0100               	movlb	0	; () banked
 12938  0019C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12939  0019C2  0E03               	movlw	3
 12940  0019C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12941  0019C6  ECEB  F01D         	call	_updateServoPosition	;wreg free
 12942                           
 12943                           ;Test.c: 362: _delay((unsigned long)((2000)*(32000000/4000.0)));
 12944  0019CA  0E52               	movlw	82
 12945  0019CC  0100               	movlb	0	; () banked
 12946  0019CE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12947  0019D0  0E2B               	movlw	43
 12948  0019D2  0100               	movlb	0	; () banked
 12949  0019D4  6FAB               	movwf	??_BothServos& (0+255),b
 12950  0019D6  0E00               	movlw	0
 12951  0019D8                     u7987:
 12952  0019D8  2EE8               	decfsz	wreg,f,c
 12953  0019DA  D7FE               	bra	u7987
 12954  0019DC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12955  0019DE  D7FC               	bra	u7987
 12956  0019E0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12957  0019E2  D7FA               	bra	u7987
 12958  0019E4  F000               	nop	
 12959                           
 12960                           ;Test.c: 363: updateServoPosition(1150, 3);
 12961  0019E6  0E04               	movlw	4
 12962  0019E8  0100               	movlb	0	; () banked
 12963  0019EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12964  0019EC  0E7E               	movlw	126
 12965  0019EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12966  0019F0  0E00               	movlw	0
 12967  0019F2  0100               	movlb	0	; () banked
 12968  0019F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12969  0019F6  0E03               	movlw	3
 12970  0019F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12971  0019FA  ECEB  F01D         	call	_updateServoPosition	;wreg free
 12972                           
 12973                           ;Test.c: 364: _delay((unsigned long)((750)*(32000000/4000.0)));
 12974  0019FE  0E1F               	movlw	31
 12975  001A00  0100               	movlb	0	; () banked
 12976  001A02  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12977  001A04  0E71               	movlw	113
 12978  001A06  0100               	movlb	0	; () banked
 12979  001A08  6FAB               	movwf	??_BothServos& (0+255),b
 12980  001A0A  0E1E               	movlw	30
 12981  001A0C                     u7997:
 12982  001A0C  2EE8               	decfsz	wreg,f,c
 12983  001A0E  D7FE               	bra	u7997
 12984  001A10  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12985  001A12  D7FC               	bra	u7997
 12986  001A14  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12987  001A16  D7FA               	bra	u7997
 12988  001A18  F000               	nop	
 12989                           
 12990                           ;Test.c: 366: updateServoPosition(750, 1);
 12991  001A1A  0E02               	movlw	2
 12992  001A1C  0100               	movlb	0	; () banked
 12993  001A1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12994  001A20  0EEE               	movlw	238
 12995  001A22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12996  001A24  0E00               	movlw	0
 12997  001A26  0100               	movlb	0	; () banked
 12998  001A28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12999  001A2A  0E01               	movlw	1
 13000  001A2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13001  001A2E  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13002                           
 13003                           ;Test.c: 367: _delay((unsigned long)((750)*(32000000/4000.0)));
 13004  001A32  0E1F               	movlw	31
 13005  001A34  0100               	movlb	0	; () banked
 13006  001A36  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13007  001A38  0E71               	movlw	113
 13008  001A3A  0100               	movlb	0	; () banked
 13009  001A3C  6FAB               	movwf	??_BothServos& (0+255),b
 13010  001A3E  0E1E               	movlw	30
 13011  001A40                     u8007:
 13012  001A40  2EE8               	decfsz	wreg,f,c
 13013  001A42  D7FE               	bra	u8007
 13014  001A44  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13015  001A46  D7FC               	bra	u8007
 13016  001A48  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13017  001A4A  D7FA               	bra	u8007
 13018  001A4C  F000               	nop	
 13019                           
 13020                           ;Test.c: 368: updateServoPosition(1350, 3);
 13021  001A4E  0E05               	movlw	5
 13022  001A50  0100               	movlb	0	; () banked
 13023  001A52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13024  001A54  0E46               	movlw	70
 13025  001A56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13026  001A58  0E00               	movlw	0
 13027  001A5A  0100               	movlb	0	; () banked
 13028  001A5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13029  001A5E  0E03               	movlw	3
 13030  001A60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13031  001A62  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13032                           
 13033                           ;Test.c: 369: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13034  001A66  0E52               	movlw	82
 13035  001A68  0100               	movlb	0	; () banked
 13036  001A6A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13037  001A6C  0E2B               	movlw	43
 13038  001A6E  0100               	movlb	0	; () banked
 13039  001A70  6FAB               	movwf	??_BothServos& (0+255),b
 13040  001A72  0E00               	movlw	0
 13041  001A74                     u8017:
 13042  001A74  2EE8               	decfsz	wreg,f,c
 13043  001A76  D7FE               	bra	u8017
 13044  001A78  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13045  001A7A  D7FC               	bra	u8017
 13046  001A7C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13047  001A7E  D7FA               	bra	u8017
 13048  001A80  F000               	nop	
 13049                           
 13050                           ;Test.c: 370: updateServoPosition(1150, 3);
 13051  001A82  0E04               	movlw	4
 13052  001A84  0100               	movlb	0	; () banked
 13053  001A86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13054  001A88  0E7E               	movlw	126
 13055  001A8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13056  001A8C  0E00               	movlw	0
 13057  001A8E  0100               	movlb	0	; () banked
 13058  001A90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13059  001A92  0E03               	movlw	3
 13060  001A94  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13061  001A96  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13062                           
 13063                           ;Test.c: 371: _delay((unsigned long)((750)*(32000000/4000.0)));
 13064  001A9A  0E1F               	movlw	31
 13065  001A9C  0100               	movlb	0	; () banked
 13066  001A9E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13067  001AA0  0E71               	movlw	113
 13068  001AA2  0100               	movlb	0	; () banked
 13069  001AA4  6FAB               	movwf	??_BothServos& (0+255),b
 13070  001AA6  0E1E               	movlw	30
 13071  001AA8                     u8027:
 13072  001AA8  2EE8               	decfsz	wreg,f,c
 13073  001AAA  D7FE               	bra	u8027
 13074  001AAC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13075  001AAE  D7FC               	bra	u8027
 13076  001AB0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13077  001AB2  D7FA               	bra	u8027
 13078  001AB4  F000               	nop	
 13079                           
 13080                           ;Test.c: 373: updateServoPosition(1200, 1);
 13081  001AB6  0E04               	movlw	4
 13082  001AB8  0100               	movlb	0	; () banked
 13083  001ABA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13084  001ABC  0EB0               	movlw	176
 13085  001ABE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13086  001AC0  0E00               	movlw	0
 13087  001AC2  0100               	movlb	0	; () banked
 13088  001AC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13089  001AC6  0E01               	movlw	1
 13090  001AC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13091  001ACA  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13092                           
 13093                           ;Test.c: 374: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13094  001ACE  0E3D               	movlw	61
 13095  001AD0  0100               	movlb	0	; () banked
 13096  001AD2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13097  001AD4  0EE1               	movlw	225
 13098  001AD6  0100               	movlb	0	; () banked
 13099  001AD8  6FAB               	movwf	??_BothServos& (0+255),b
 13100  001ADA  0E3F               	movlw	63
 13101  001ADC                     u8037:
 13102  001ADC  2EE8               	decfsz	wreg,f,c
 13103  001ADE  D7FE               	bra	u8037
 13104  001AE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13105  001AE2  D7FC               	bra	u8037
 13106  001AE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13107  001AE6  D7FA               	bra	u8037
 13108  001AE8  D000               	nop2	
 13109                           
 13110                           ;Test.c: 376: updateServoPosition(1700, 1);
 13111  001AEA  0E06               	movlw	6
 13112  001AEC  0100               	movlb	0	; () banked
 13113  001AEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13114  001AF0  0EA4               	movlw	164
 13115  001AF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13116  001AF4  0E00               	movlw	0
 13117  001AF6  0100               	movlb	0	; () banked
 13118  001AF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13119  001AFA  0E01               	movlw	1
 13120  001AFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13121  001AFE  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13122                           
 13123                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 13124  001B02  0E1F               	movlw	31
 13125  001B04  0100               	movlb	0	; () banked
 13126  001B06  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13127  001B08  0E71               	movlw	113
 13128  001B0A  0100               	movlb	0	; () banked
 13129  001B0C  6FAB               	movwf	??_BothServos& (0+255),b
 13130  001B0E  0E1E               	movlw	30
 13131  001B10                     u8047:
 13132  001B10  2EE8               	decfsz	wreg,f,c
 13133  001B12  D7FE               	bra	u8047
 13134  001B14  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13135  001B16  D7FC               	bra	u8047
 13136  001B18  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13137  001B1A  D7FA               	bra	u8047
 13138  001B1C  F000               	nop	
 13139                           
 13140                           ;Test.c: 378: updateServoPosition(1350, 3);
 13141  001B1E  0E05               	movlw	5
 13142  001B20  0100               	movlb	0	; () banked
 13143  001B22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13144  001B24  0E46               	movlw	70
 13145  001B26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13146  001B28  0E00               	movlw	0
 13147  001B2A  0100               	movlb	0	; () banked
 13148  001B2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13149  001B2E  0E03               	movlw	3
 13150  001B30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13151  001B32  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13152                           
 13153                           ;Test.c: 379: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13154  001B36  0E52               	movlw	82
 13155  001B38  0100               	movlb	0	; () banked
 13156  001B3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13157  001B3C  0E2B               	movlw	43
 13158  001B3E  0100               	movlb	0	; () banked
 13159  001B40  6FAB               	movwf	??_BothServos& (0+255),b
 13160  001B42  0E00               	movlw	0
 13161  001B44                     u8057:
 13162  001B44  2EE8               	decfsz	wreg,f,c
 13163  001B46  D7FE               	bra	u8057
 13164  001B48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13165  001B4A  D7FC               	bra	u8057
 13166  001B4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13167  001B4E  D7FA               	bra	u8057
 13168  001B50  F000               	nop	
 13169                           
 13170                           ;Test.c: 380: updateServoPosition(1150, 3);
 13171  001B52  0E04               	movlw	4
 13172  001B54  0100               	movlb	0	; () banked
 13173  001B56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13174  001B58  0E7E               	movlw	126
 13175  001B5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13176  001B5C  0E00               	movlw	0
 13177  001B5E  0100               	movlb	0	; () banked
 13178  001B60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13179  001B62  0E03               	movlw	3
 13180  001B64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13181  001B66  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13182                           
 13183                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 13184  001B6A  0E1F               	movlw	31
 13185  001B6C  0100               	movlb	0	; () banked
 13186  001B6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13187  001B70  0E71               	movlw	113
 13188  001B72  0100               	movlb	0	; () banked
 13189  001B74  6FAB               	movwf	??_BothServos& (0+255),b
 13190  001B76  0E1E               	movlw	30
 13191  001B78                     u8067:
 13192  001B78  2EE8               	decfsz	wreg,f,c
 13193  001B7A  D7FE               	bra	u8067
 13194  001B7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13195  001B7E  D7FC               	bra	u8067
 13196  001B80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13197  001B82  D7FA               	bra	u8067
 13198  001B84  F000               	nop	
 13199                           
 13200                           ;Test.c: 383: updateServoPosition(2100, 1);
 13201  001B86  0E08               	movlw	8
 13202  001B88  0100               	movlb	0	; () banked
 13203  001B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13204  001B8C  0E34               	movlw	52
 13205  001B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13206  001B90  0E00               	movlw	0
 13207  001B92  0100               	movlb	0	; () banked
 13208  001B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13209  001B96  0E01               	movlw	1
 13210  001B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13211  001B9A  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13212                           
 13213                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 13214  001B9E  0E1F               	movlw	31
 13215  001BA0  0100               	movlb	0	; () banked
 13216  001BA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13217  001BA4  0E71               	movlw	113
 13218  001BA6  0100               	movlb	0	; () banked
 13219  001BA8  6FAB               	movwf	??_BothServos& (0+255),b
 13220  001BAA  0E1E               	movlw	30
 13221  001BAC                     u8077:
 13222  001BAC  2EE8               	decfsz	wreg,f,c
 13223  001BAE  D7FE               	bra	u8077
 13224  001BB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13225  001BB2  D7FC               	bra	u8077
 13226  001BB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13227  001BB6  D7FA               	bra	u8077
 13228  001BB8  F000               	nop	
 13229                           
 13230                           ;Test.c: 385: updateServoPosition(1350, 3);
 13231  001BBA  0E05               	movlw	5
 13232  001BBC  0100               	movlb	0	; () banked
 13233  001BBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13234  001BC0  0E46               	movlw	70
 13235  001BC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13236  001BC4  0E00               	movlw	0
 13237  001BC6  0100               	movlb	0	; () banked
 13238  001BC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13239  001BCA  0E03               	movlw	3
 13240  001BCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13241  001BCE  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13242                           
 13243                           ;Test.c: 386: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13244  001BD2  0E52               	movlw	82
 13245  001BD4  0100               	movlb	0	; () banked
 13246  001BD6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13247  001BD8  0E2B               	movlw	43
 13248  001BDA  0100               	movlb	0	; () banked
 13249  001BDC  6FAB               	movwf	??_BothServos& (0+255),b
 13250  001BDE  0E00               	movlw	0
 13251  001BE0                     u8087:
 13252  001BE0  2EE8               	decfsz	wreg,f,c
 13253  001BE2  D7FE               	bra	u8087
 13254  001BE4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13255  001BE6  D7FC               	bra	u8087
 13256  001BE8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13257  001BEA  D7FA               	bra	u8087
 13258  001BEC  F000               	nop	
 13259                           
 13260                           ;Test.c: 387: updateServoPosition(1150, 3);
 13261  001BEE  0E04               	movlw	4
 13262  001BF0  0100               	movlb	0	; () banked
 13263  001BF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13264  001BF4  0E7E               	movlw	126
 13265  001BF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13266  001BF8  0E00               	movlw	0
 13267  001BFA  0100               	movlb	0	; () banked
 13268  001BFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13269  001BFE  0E03               	movlw	3
 13270  001C00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13271  001C02  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13272                           
 13273                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13274  001C06  0E1F               	movlw	31
 13275  001C08  0100               	movlb	0	; () banked
 13276  001C0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13277  001C0C  0E71               	movlw	113
 13278  001C0E  0100               	movlb	0	; () banked
 13279  001C10  6FAB               	movwf	??_BothServos& (0+255),b
 13280  001C12  0E1E               	movlw	30
 13281  001C14                     u8097:
 13282  001C14  2EE8               	decfsz	wreg,f,c
 13283  001C16  D7FE               	bra	u8097
 13284  001C18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13285  001C1A  D7FC               	bra	u8097
 13286  001C1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13287  001C1E  D7FA               	bra	u8097
 13288  001C20  F000               	nop	
 13289                           
 13290                           ;Test.c: 390: TMR1ON = 0;
 13291  001C22  90CD               	bcf	4045,0,c	;volatile
 13292                           
 13293                           ;Test.c: 391: TMR3ON = 0;
 13294  001C24  90B1               	bcf	4017,0,c	;volatile
 13295                           
 13296                           ;Test.c: 392: (INTCONbits.GIE = 0);
 13297  001C26  9EF2               	bcf	intcon,7,c	;volatile
 13298  001C28  0012               	return		;funcret
 13299  001C2A                     __end_of_BothServos:
 13300                           	opt stack 0
 13301                           tblptru	equ	0xFF8
 13302                           tblptrh	equ	0xFF7
 13303                           tblptrl	equ	0xFF6
 13304                           tablat	equ	0xFF5
 13305                           prodh	equ	0xFF4
 13306                           prodl	equ	0xFF3
 13307                           intcon	equ	0xFF2
 13308                           intcon2	equ	0xFF1
 13309                           intcon3	equ	0xFF0
 13310                           postinc0	equ	0xFEE
 13311                           wreg	equ	0xFE8
 13312                           postdec1	equ	0xFE5
 13313                           fsr1l	equ	0xFE1
 13314                           indf2	equ	0xFDF
 13315                           postinc2	equ	0xFDE
 13316                           postdec2	equ	0xFDD
 13317                           fsr2h	equ	0xFDA
 13318                           fsr2l	equ	0xFD9
 13319                           status	equ	0xFD8
 13320                           
 13321 ;; *************** function _printf *****************
 13322 ;; Defined at:
 13323 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13324 ;; Parameters:    Size  Location     Type
 13325 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13326 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 13327 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 13328 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 13329 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 13330 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 13331 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 13332 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 13333 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 13334 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 13335 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 13336 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 13337 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 13338 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 13339 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 13340 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 13341 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 13342 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 13343 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 13344 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 13345 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 13346 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 13347 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 13348 ;;		 -> STR_2(14), STR_1(18), 
 13349 ;; Auto vars:     Size  Location     Type
 13350 ;;  tmpval          4    0        struct .
 13351 ;;  width           2   41[BANK0 ] int 
 13352 ;;  val             2   37[BANK0 ] unsigned int 
 13353 ;;  len             2   35[BANK0 ] unsigned int 
 13354 ;;  ap              2   33[BANK0 ] PTR void [1]
 13355 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13356 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13357 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 13358 ;;  c               1   40[BANK0 ] char 
 13359 ;;  flag            1   39[BANK0 ] unsigned char 
 13360 ;;  prec            1   30[BANK0 ] char 
 13361 ;; Return value:  Size  Location     Type
 13362 ;;                  2   14[BANK0 ] int 
 13363 ;; Registers used:
 13364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13365 ;; Tracked objects:
 13366 ;;		On entry : 0/0
 13367 ;;		On exit  : 0/0
 13368 ;;		Unchanged: 0/0
 13369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13370 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13371 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13372 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13373 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13374 ;;Total ram usage:       29 bytes
 13375 ;; Hardware stack levels used:    1
 13376 ;; Hardware stack levels required when called:    9
 13377 ;; This function calls:
 13378 ;;		___lwdiv
 13379 ;;		___lwmod
 13380 ;;		___wmul
 13381 ;;		_isdigit
 13382 ;;		_putch
 13383 ;; This function is called by:
 13384 ;;		_UI
 13385 ;;		_change_state_to_menu_start
 13386 ;;		_change_state_to_menu_12
 13387 ;;		_change_state_to_menu_22
 13388 ;;		_printRTC
 13389 ;;		_EEPROM_write
 13390 ;;		_Test
 13391 ;;		_algorithmTest
 13392 ;;		_sensorTest
 13393 ;;		_actuatorTest
 13394 ;;		_BothServos
 13395 ;;		_PortTestA5
 13396 ;;		_PusherTestA5
 13397 ;;		_ToggleTestA5
 13398 ;; This function uses a non-reentrant model
 13399 ;;
 13400                           
 13401                           	psect	text47
 13402  001170                     __ptext47:
 13403                           	opt stack 0
 13404  001170                     _printf:
 13405                           	opt stack 18
 13406                           
 13407                           ;doprnt.c: 466: va_list ap;
 13408                           ;doprnt.c: 499: signed char c;
 13409                           ;doprnt.c: 501: int width;
 13410                           ;doprnt.c: 506: signed char prec;
 13411                           ;doprnt.c: 508: unsigned char flag;
 13412                           ;doprnt.c: 523: union {
 13413                           ;doprnt.c: 524: unsigned long vd;
 13414                           ;doprnt.c: 525: double integ;
 13415                           ;doprnt.c: 526: } tmpval;
 13416                           ;doprnt.c: 528: unsigned int val;
 13417                           ;doprnt.c: 529: unsigned len;
 13418                           ;doprnt.c: 530: const char * cp;
 13419                           ;doprnt.c: 533: *ap = __va_start();
 13420                           
 13421                           ;incstack = 0
 13422  001170  0E90               	movlw	low (?_printf+2)
 13423  001172  0100               	movlb	0	; () banked
 13424  001174  6FA1               	movwf	printf@ap& (0+255),b
 13425  001176  0E00               	movlw	high (?_printf+2)
 13426  001178  0100               	movlb	0	; () banked
 13427  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13428                           
 13429                           ;doprnt.c: 536: while(c = *f++) {
 13430  00117C  D205               	goto	l5535
 13431  00117E                     l5405:
 13432                           
 13433                           ; BSR set to: 0
 13434                           ;doprnt.c: 538: if(c != '%')
 13435  00117E  0E25               	movlw	37
 13436  001180  0100               	movlb	0	; () banked
 13437  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13438  001184  B4D8               	btfsc	status,2,c
 13439  001186  D005               	goto	l5409
 13440                           
 13441                           ; BSR set to: 0
 13442                           ;doprnt.c: 540: {
 13443                           ;doprnt.c: 541: (putch(c) );
 13444  001188  0100               	movlb	0	; () banked
 13445  00118A  51A8               	movf	printf@c& (0+255),w,b
 13446  00118C  EC93  F023         	call	_putch
 13447                           
 13448                           ;doprnt.c: 542: continue;
 13449  001190  D1FB               	goto	l5535
 13450  001192                     l5409:
 13451                           
 13452                           ;doprnt.c: 543: }
 13453                           ;doprnt.c: 546: width = 0;
 13454  001192  0E00               	movlw	0
 13455  001194  0100               	movlb	0	; () banked
 13456  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13457  001198  0E00               	movlw	0
 13458  00119A  6FA9               	movwf	printf@width& (0+255),b
 13459                           
 13460                           ;doprnt.c: 548: flag = 0;
 13461  00119C  0E00               	movlw	0
 13462  00119E  0100               	movlb	0	; () banked
 13463  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;doprnt.c: 551: switch(*f) {
 13467                           
 13468                           ;doprnt.c: 550: for(;;) {
 13469  0011A2  D005               	goto	l5415
 13470  0011A4                     l5411:
 13471                           
 13472                           ;doprnt.c: 580: flag |= 0x04;
 13473  0011A4  0100               	movlb	0	; () banked
 13474  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13475                           
 13476                           ;doprnt.c: 581: f++;
 13477  0011A8  0100               	movlb	0	; () banked
 13478  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13479  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13480  0011AE                     l5415:
 13481  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13482  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13483  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13484  0011B6  6AF8               	clrf	tblptru,c
 13485  0011B8                     	endif
 13486  0011B8                     	if	0	;tblptru may be non-zero
 13487  0011B8                     	endif
 13488  0011B8  0008               	tblrd		*
 13489  0011BA  50F5               	movf	tablat,w,c
 13490                           
 13491                           ; Switch size 1, requested type "space"
 13492                           ; Number of cases is 1, Range of values is 48 to 48
 13493                           ; switch strategies available:
 13494                           ; Name         Instructions Cycles
 13495                           ; simple_byte            4     3 (average)
 13496                           ;	Chosen strategy is simple_byte
 13497  0011BC  0A30               	xorlw	48	; case 48
 13498  0011BE  B4D8               	btfsc	status,2,c
 13499  0011C0  D7F1               	goto	l5411
 13500                           
 13501                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13502                           
 13503                           ;doprnt.c: 586: }
 13504                           
 13505                           ;doprnt.c: 585: break;
 13506  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13507  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13508  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13509  0011CA  6AF8               	clrf	tblptru,c
 13510  0011CC                     	endif
 13511  0011CC                     	if	0	;tblptru may be non-zero
 13512  0011CC                     	endif
 13513  0011CC  0008               	tblrd		*
 13514  0011CE  50F5               	movf	tablat,w,c
 13515  0011D0  ECCC  F022         	call	_isdigit
 13516  0011D4  A0D8               	btfss	status,0,c
 13517  0011D6  D0D2               	goto	l5463
 13518                           
 13519                           ;doprnt.c: 598: width = 0;
 13520  0011D8  0E00               	movlw	0
 13521  0011DA  0100               	movlb	0	; () banked
 13522  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13523  0011DE  0E00               	movlw	0
 13524  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13525  0011E2                     l5421:
 13526                           
 13527                           ;doprnt.c: 600: width *= 10;
 13528  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13529  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13530  0011EA  0E00               	movlw	0
 13531  0011EC  0100               	movlb	0	; () banked
 13532  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13533  0011F0  0E0A               	movlw	10
 13534  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13535  0011F4  EC36  F021         	call	___wmul	;wreg free
 13536  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13537  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13538                           
 13539                           ;doprnt.c: 601: width += *f++ - '0';
 13540  001200  0ED0               	movlw	208
 13541  001202  0100               	movlb	0	; () banked
 13542  001204  6F9A               	movwf	??_printf& (0+255),b
 13543  001206  0EFF               	movlw	255
 13544  001208  0100               	movlb	0	; () banked
 13545  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13546  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13547  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13548  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13549  001214  6AF8               	clrf	tblptru,c
 13550  001216                     	endif
 13551  001216                     	if	0	;tblptru may be non-zero
 13552  001216                     	endif
 13553  001216  0008               	tblrd		*
 13554  001218  50F5               	movf	tablat,w,c
 13555  00121A  0100               	movlb	0	; () banked
 13556  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13557  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13558  001220  0100               	movlb	0	; () banked
 13559  001222  519A               	movf	??_printf& (0+255),w,b
 13560  001224  0100               	movlb	0	; () banked
 13561  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13562  001228  0100               	movlb	0	; () banked
 13563  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13564  00122C  0100               	movlb	0	; () banked
 13565  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13566  001230  0100               	movlb	0	; () banked
 13567  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13568  001234  0100               	movlb	0	; () banked
 13569  001236  27A9               	addwf	printf@width& (0+255),f,b
 13570  001238  0100               	movlb	0	; () banked
 13571  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13572  00123C  0100               	movlb	0	; () banked
 13573  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13574                           
 13575                           ; BSR set to: 0
 13576  001240  0100               	movlb	0	; () banked
 13577  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13578  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13582  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13583  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13584  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13585  00124E  6AF8               	clrf	tblptru,c
 13586  001250                     	endif
 13587  001250                     	if	0	;tblptru may be non-zero
 13588  001250                     	endif
 13589  001250  0008               	tblrd		*
 13590  001252  50F5               	movf	tablat,w,c
 13591  001254  ECCC  F022         	call	_isdigit
 13592  001258  A0D8               	btfss	status,0,c
 13593  00125A  D090               	goto	l5463
 13594  00125C  D7C2               	goto	l5421
 13595  00125E                     l5429:
 13596                           
 13597                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13598  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13599  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13600  001266  CFDE F09F          	movff	postinc2,printf@cp
 13601  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13602  00126E  0E02               	movlw	2
 13603  001270  0100               	movlb	0	; () banked
 13604  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13605  001274  0E00               	movlw	0
 13606  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13607                           
 13608                           ; BSR set to: 0
 13609                           ;doprnt.c: 740: if(!cp)
 13610  001278  0100               	movlb	0	; () banked
 13611  00127A  519F               	movf	printf@cp& (0+255),w,b
 13612  00127C  0100               	movlb	0	; () banked
 13613  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13614  001280  A4D8               	btfss	status,2,c
 13615  001282  D006               	goto	l5437
 13616                           
 13617                           ; BSR set to: 0
 13618                           ;doprnt.c: 741: cp = "(null)";
 13619  001284  0EB6               	movlw	low STR_116
 13620  001286  0100               	movlb	0	; () banked
 13621  001288  6F9F               	movwf	printf@cp& (0+255),b
 13622  00128A  0EFF               	movlw	high STR_116
 13623  00128C  0100               	movlb	0	; () banked
 13624  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13625  001290                     l5437:
 13626                           
 13627                           ; BSR set to: 0
 13628                           ;doprnt.c: 745: len = 0;
 13629  001290  0E00               	movlw	0
 13630  001292  0100               	movlb	0	; () banked
 13631  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13632  001296  0E00               	movlw	0
 13633  001298  6FA3               	movwf	printf@len& (0+255),b
 13634                           
 13635                           ;doprnt.c: 746: while(cp[len])
 13636  00129A  D003               	goto	l5441
 13637  00129C                     l5439:
 13638                           
 13639                           ;doprnt.c: 747: len++;
 13640  00129C  0100               	movlb	0	; () banked
 13641  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13642  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13643  0012A2                     l5441:
 13644                           
 13645                           ; BSR set to: 0
 13646  0012A2  0100               	movlb	0	; () banked
 13647  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13648  0012A6  0100               	movlb	0	; () banked
 13649  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13650  0012AA  0100               	movlb	0	; () banked
 13651  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13652  0012AE  0100               	movlb	0	; () banked
 13653  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13654  0012B2  0100               	movlb	0	; () banked
 13655  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13656  0012B6  0100               	movlb	0	; () banked
 13657  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13658  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13659  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13660  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13661  0012C4  6EF8               	movwf	tblptru,c
 13662  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13663  0012C8  64F7               	cpfsgt	tblptrh,c
 13664  0012CA  D003               	bra	u3817
 13665  0012CC  0008               	tblrd		*
 13666  0012CE  50F5               	movf	tablat,w,c
 13667  0012D0  D005               	bra	u3810
 13668  0012D2                     u3817:
 13669  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13670  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13671  0012DA  50EF               	movf	indf0,w,c
 13672  0012DC                     u3810:
 13673  0012DC  0900               	iorlw	0
 13674  0012DE  A4D8               	btfss	status,2,c
 13675  0012E0  D7DD               	goto	l5439
 13676                           
 13677                           ;doprnt.c: 757: if(width > len)
 13678  0012E2  0100               	movlb	0	; () banked
 13679  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13680  0012E6  0100               	movlb	0	; () banked
 13681  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13682  0012EA  0100               	movlb	0	; () banked
 13683  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13684  0012EE  0100               	movlb	0	; () banked
 13685  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13686  0012F2  B0D8               	btfsc	status,0,c
 13687  0012F4  D009               	goto	l5447
 13688                           
 13689                           ; BSR set to: 0
 13690                           ;doprnt.c: 758: width -= len;
 13691  0012F6  0100               	movlb	0	; () banked
 13692  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13693  0012FA  0100               	movlb	0	; () banked
 13694  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13695  0012FE  0100               	movlb	0	; () banked
 13696  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13697  001302  0100               	movlb	0	; () banked
 13698  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13699  001306  D009               	goto	l5451
 13700  001308                     l5447:
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;doprnt.c: 759: else
 13704                           ;doprnt.c: 760: width = 0;
 13705  001308  0E00               	movlw	0
 13706  00130A  0100               	movlb	0	; () banked
 13707  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13708  00130E  0E00               	movlw	0
 13709  001310  6FA9               	movwf	printf@width& (0+255),b
 13710                           
 13711                           ; BSR set to: 0
 13712                           ;doprnt.c: 764: while(width--)
 13713  001312  D003               	goto	l5451
 13714  001314                     l5449:
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;doprnt.c: 765: (putch(' ') );
 13718  001314  0E20               	movlw	32
 13719  001316  EC93  F023         	call	_putch
 13720  00131A                     l5451:
 13721  00131A  0100               	movlb	0	; () banked
 13722  00131C  07A9               	decf	printf@width& (0+255),f,b
 13723  00131E  A0D8               	btfss	status,0,c
 13724  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13725  001322  0100               	movlb	0	; () banked
 13726  001324  29A9               	incf	printf@width& (0+255),w,b
 13727  001326  E1F6               	bnz	l5449
 13728  001328  0100               	movlb	0	; () banked
 13729  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13730  00132C  B4D8               	btfsc	status,2,c
 13731  00132E  D017               	goto	l5457
 13732  001330  D7F1               	goto	l5449
 13733  001332                     l5453:
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;doprnt.c: 768: (putch(*cp++) );
 13737  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13738  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13739  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13740  00133C  6EF8               	movwf	tblptru,c
 13741  00133E  0E0F               	movlw	(high __ramtop+-1)
 13742  001340  64F7               	cpfsgt	tblptrh,c
 13743  001342  D003               	bra	u3857
 13744  001344  0008               	tblrd		*
 13745  001346  50F5               	movf	tablat,w,c
 13746  001348  D005               	bra	u3850
 13747  00134A                     u3857:
 13748  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13749  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13750  001352  50EF               	movf	indf0,w,c
 13751  001354                     u3850:
 13752  001354  EC93  F023         	call	_putch
 13753  001358  0100               	movlb	0	; () banked
 13754  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13755  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13756  00135E                     l5457:
 13757                           
 13758                           ; BSR set to: 0
 13759  00135E  0100               	movlb	0	; () banked
 13760  001360  07A3               	decf	printf@len& (0+255),f,b
 13761  001362  A0D8               	btfss	status,0,c
 13762  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13763  001366  0100               	movlb	0	; () banked
 13764  001368  29A3               	incf	printf@len& (0+255),w,b
 13765  00136A  E1E3               	bnz	l5453
 13766  00136C  0100               	movlb	0	; () banked
 13767  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13768  001370  B4D8               	btfsc	status,2,c
 13769  001372  D10A               	goto	l5535
 13770  001374  D7DE               	goto	l5453
 13771  001376                     l5459:
 13772                           
 13773                           ; BSR set to: 0
 13774                           ;doprnt.c: 818: flag |= 0x40;
 13775  001376  0100               	movlb	0	; () banked
 13776  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13777                           
 13778                           ; BSR set to: 0
 13779                           ;doprnt.c: 822: }
 13780                           
 13781                           ;doprnt.c: 819: break;
 13782  00137A  D01D               	goto	l1255
 13783  00137C                     l5463:
 13784  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13785  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13786  001384  0100               	movlb	0	; () banked
 13787  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13788  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13789  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13790  00138A  6AF8               	clrf	tblptru,c
 13791  00138C                     	endif
 13792  00138C                     	if	0	;tblptru may be non-zero
 13793  00138C                     	endif
 13794  00138C  0008               	tblrd		*
 13795  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13796  001392  0100               	movlb	0	; () banked
 13797  001394  51A8               	movf	printf@c& (0+255),w,b
 13798                           
 13799                           ; Switch size 1, requested type "space"
 13800                           ; Number of cases is 5, Range of values is 0 to 117
 13801                           ; switch strategies available:
 13802                           ; Name         Instructions Cycles
 13803                           ; simple_byte           16     9 (average)
 13804                           ;	Chosen strategy is simple_byte
 13805  001396  0A00               	xorlw	0	; case 0
 13806  001398  B4D8               	btfsc	status,2,c
 13807  00139A  0012               	return	
 13808  00139C  0A64               	xorlw	100	; case 100
 13809  00139E  B4D8               	btfsc	status,2,c
 13810  0013A0  D00A               	goto	l1255
 13811  0013A2  0A0D               	xorlw	13	; case 105
 13812  0013A4  B4D8               	btfsc	status,2,c
 13813  0013A6  D007               	goto	l1255
 13814  0013A8  0A1A               	xorlw	26	; case 115
 13815  0013AA  B4D8               	btfsc	status,2,c
 13816  0013AC  D758               	goto	l5429
 13817  0013AE  0A06               	xorlw	6	; case 117
 13818  0013B0  B4D8               	btfsc	status,2,c
 13819  0013B2  D7E1               	goto	l5459
 13820  0013B4  D0E9               	goto	l5535
 13821  0013B6                     l1255:
 13822                           
 13823                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13824  0013B6  0100               	movlb	0	; () banked
 13825  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 13826  0013BA  D019               	goto	l5475
 13827                           
 13828                           ; BSR set to: 0
 13829                           ;doprnt.c: 1253: {
 13830                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13831  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 13832  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13833  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 13834  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 13835                           
 13836                           ; BSR set to: 0
 13837  0013CC  0E02               	movlw	2
 13838  0013CE  0100               	movlb	0	; () banked
 13839  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 13840  0013D2  0E00               	movlw	0
 13841  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13842                           
 13843                           ; BSR set to: 0
 13844                           ;doprnt.c: 1261: if((int)val < 0) {
 13845  0013D6  0100               	movlb	0	; () banked
 13846  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13847  0013DA  D016               	goto	l5479
 13848                           
 13849                           ; BSR set to: 0
 13850                           ;doprnt.c: 1262: flag |= 0x03;
 13851  0013DC  0E03               	movlw	3
 13852  0013DE  0100               	movlb	0	; () banked
 13853  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 13854                           
 13855                           ; BSR set to: 0
 13856                           ;doprnt.c: 1263: val = -val;
 13857  0013E2  0100               	movlb	0	; () banked
 13858  0013E4  6DA5               	negf	printf@val& (0+255),b
 13859  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13860  0013E8  B0D8               	btfsc	status,0,c
 13861  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;doprnt.c: 1264: }
 13865                           ;doprnt.c: 1266: }
 13866  0013EC  D00D               	goto	l5479
 13867  0013EE                     l5475:
 13868                           
 13869                           ; BSR set to: 0
 13870                           ;doprnt.c: 1268: else
 13871                           ;doprnt.c: 1273: {
 13872                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13873  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 13874  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13875  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 13876  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 13877                           
 13878                           ; BSR set to: 0
 13879  0013FE  0E02               	movlw	2
 13880  001400  0100               	movlb	0	; () banked
 13881  001402  27A1               	addwf	printf@ap& (0+255),f,b
 13882  001404  0E00               	movlw	0
 13883  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13884  001408                     l5479:
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;doprnt.c: 1287: }
 13888                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13889  001408  0E01               	movlw	1
 13890  00140A  0100               	movlb	0	; () banked
 13891  00140C  6FA8               	movwf	printf@c& (0+255),b
 13892  00140E                     l5481:
 13893                           
 13894                           ; BSR set to: 0
 13895  00140E  0E05               	movlw	5
 13896  001410  0100               	movlb	0	; () banked
 13897  001412  19A8               	xorwf	printf@c& (0+255),w,b
 13898  001414  B4D8               	btfsc	status,2,c
 13899  001416  D019               	goto	l5493
 13900                           
 13901                           ; BSR set to: 0
 13902                           ;doprnt.c: 1306: if(val < dpowers[c])
 13903                           
 13904                           ; BSR set to: 0
 13905                           
 13906                           ; BSR set to: 0
 13907  001418  0100               	movlb	0	; () banked
 13908  00141A  51A8               	movf	printf@c& (0+255),w,b
 13909  00141C  0D02               	mullw	2
 13910  00141E  0E36               	movlw	low _dpowers
 13911  001420  24F3               	addwf	prodl,w,c
 13912  001422  6EF6               	movwf	tblptrl,c
 13913  001424  0EFB               	movlw	high _dpowers
 13914  001426  20F4               	addwfc	prodh,w,c
 13915  001428  6EF7               	movwf	tblptrh,c
 13916  00142A                     	if	1	;There are 3 active tblptr bytes
 13917  00142A  6AF8               	clrf	tblptru,c
 13918  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 13919  00142E  22F8               	addwfc	tblptru,f,c
 13920  001430                     	endif
 13921  001430  0009               	tblrd		*+
 13922  001432  50F5               	movf	tablat,w,c
 13923  001434  0100               	movlb	0	; () banked
 13924  001436  5DA5               	subwf	printf@val& (0+255),w,b
 13925  001438  0009               	tblrd		*+
 13926  00143A  50F5               	movf	tablat,w,c
 13927  00143C  0100               	movlb	0	; () banked
 13928  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13929  001440  A0D8               	btfss	status,0,c
 13930  001442  D003               	goto	l5493
 13931                           
 13932                           ; BSR set to: 0
 13933                           
 13934                           ; BSR set to: 0
 13935                           
 13936                           ; BSR set to: 0
 13937                           ;doprnt.c: 1307: break;
 13938  001444  0100               	movlb	0	; () banked
 13939  001446  2BA8               	incf	printf@c& (0+255),f,b
 13940  001448  D7E2               	goto	l5481
 13941  00144A                     l5493:
 13942                           
 13943                           ; BSR set to: 0
 13944                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13945  00144A  0100               	movlb	0	; () banked
 13946  00144C  51A9               	movf	printf@width& (0+255),w,b
 13947  00144E  0100               	movlb	0	; () banked
 13948  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13949  001452  B4D8               	btfsc	status,2,c
 13950  001454  D00B               	goto	l5499
 13951                           
 13952                           ; BSR set to: 0
 13953  001456  C0A7  F09A         	movff	printf@flag,??_printf
 13954  00145A  0E03               	movlw	3
 13955  00145C  0100               	movlb	0	; () banked
 13956  00145E  179A               	andwf	??_printf& (0+255),f,b
 13957  001460  B4D8               	btfsc	status,2,c
 13958  001462  D004               	goto	l5499
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;doprnt.c: 1346: width--;
 13962  001464  0100               	movlb	0	; () banked
 13963  001466  07A9               	decf	printf@width& (0+255),f,b
 13964  001468  A0D8               	btfss	status,0,c
 13965  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 13966  00146C                     l5499:
 13967                           
 13968                           ; BSR set to: 0
 13969                           ;doprnt.c: 1381: if(width > c)
 13970  00146C  0E80               	movlw	128
 13971  00146E  0100               	movlb	0	; () banked
 13972  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 13973  001472  0E7F               	movlw	127
 13974  001474  0100               	movlb	0	; () banked
 13975  001476  6F9A               	movwf	??_printf& (0+255),b
 13976  001478  0100               	movlb	0	; () banked
 13977  00147A  51A9               	movf	printf@width& (0+255),w,b
 13978  00147C  0100               	movlb	0	; () banked
 13979  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 13980  001480  0100               	movlb	0	; () banked
 13981  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 13982  001484  0A80               	xorlw	128
 13983  001486  0100               	movlb	0	; () banked
 13984  001488  599A               	subwfb	??_printf& (0+255),w,b
 13985  00148A  B0D8               	btfsc	status,0,c
 13986  00148C  D00B               	goto	l5503
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;doprnt.c: 1382: width -= c;
 13990  00148E  0100               	movlb	0	; () banked
 13991  001490  51A8               	movf	printf@c& (0+255),w,b
 13992  001492  0100               	movlb	0	; () banked
 13993  001494  5FA9               	subwf	printf@width& (0+255),f,b
 13994  001496  0E00               	movlw	0
 13995  001498  0100               	movlb	0	; () banked
 13996  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 13997  00149C  0EFF               	movlw	255
 13998  00149E  0100               	movlb	0	; () banked
 13999  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14000  0014A2  D005               	goto	l5505
 14001  0014A4                     l5503:
 14002                           
 14003                           ; BSR set to: 0
 14004                           ;doprnt.c: 1383: else
 14005                           ;doprnt.c: 1384: width = 0;
 14006  0014A4  0E00               	movlw	0
 14007  0014A6  0100               	movlb	0	; () banked
 14008  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14009  0014AA  0E00               	movlw	0
 14010  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14011  0014AE                     l5505:
 14012                           
 14013                           ; BSR set to: 0
 14014                           ;doprnt.c: 1387: if(flag & 0x04) {
 14015  0014AE  0100               	movlb	0	; () banked
 14016  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14017  0014B2  D018               	goto	l5517
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;doprnt.c: 1392: if(flag & 0x03)
 14021  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14022  0014B8  0E03               	movlw	3
 14023  0014BA  0100               	movlb	0	; () banked
 14024  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14025  0014BE  B4D8               	btfsc	status,2,c
 14026  0014C0  D003               	goto	l5511
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;doprnt.c: 1393: (putch('-') );
 14030  0014C2  0E2D               	movlw	45
 14031  0014C4  EC93  F023         	call	_putch
 14032  0014C8                     l5511:
 14033                           
 14034                           ;doprnt.c: 1415: if(width)
 14035  0014C8  0100               	movlb	0	; () banked
 14036  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14037  0014CC  0100               	movlb	0	; () banked
 14038  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14039  0014D0  B4D8               	btfsc	status,2,c
 14040  0014D2  D025               	goto	l5527
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;doprnt.c: 1417: (putch('0') );
 14044                           
 14045                           ; BSR set to: 0
 14046                           
 14047                           ;doprnt.c: 1416: do
 14048  0014D4  0E30               	movlw	48
 14049  0014D6  EC93  F023         	call	_putch
 14050                           
 14051                           ;doprnt.c: 1418: while(--width);
 14052  0014DA  0100               	movlb	0	; () banked
 14053  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14054  0014DE  A0D8               	btfss	status,0,c
 14055  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14056  0014E2  D7F2               	goto	l5511
 14057  0014E4                     l5517:
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;doprnt.c: 1422: {
 14061                           ;doprnt.c: 1424: if(width
 14062                           ;doprnt.c: 1428: )
 14063  0014E4  0100               	movlb	0	; () banked
 14064  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14065  0014E8  0100               	movlb	0	; () banked
 14066  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14067  0014EC  B4D8               	btfsc	status,2,c
 14068  0014EE  D00D               	goto	l5523
 14069  0014F0                     l5519:
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;doprnt.c: 1430: (putch(' ') );
 14073  0014F0  0E20               	movlw	32
 14074  0014F2  EC93  F023         	call	_putch
 14075                           
 14076                           ;doprnt.c: 1431: while(--width);
 14077  0014F6  0100               	movlb	0	; () banked
 14078  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14079  0014FA  A0D8               	btfss	status,0,c
 14080  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14081  0014FE  0100               	movlb	0	; () banked
 14082  001500  51A9               	movf	printf@width& (0+255),w,b
 14083  001502  0100               	movlb	0	; () banked
 14084  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14085  001506  A4D8               	btfss	status,2,c
 14086  001508  D7F3               	goto	l5519
 14087  00150A                     l5523:
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;doprnt.c: 1438: if(flag & 0x03)
 14091  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14092  00150E  0E03               	movlw	3
 14093  001510  0100               	movlb	0	; () banked
 14094  001512  179A               	andwf	??_printf& (0+255),f,b
 14095  001514  B4D8               	btfsc	status,2,c
 14096  001516  D003               	goto	l5527
 14097                           
 14098                           ; BSR set to: 0
 14099                           ;doprnt.c: 1439: (putch('-') );
 14100  001518  0E2D               	movlw	45
 14101  00151A  EC93  F023         	call	_putch
 14102  00151E                     l5527:
 14103                           
 14104                           ;doprnt.c: 1469: }
 14105                           ;doprnt.c: 1472: prec = c;
 14106  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14107                           
 14108                           ;doprnt.c: 1474: while(prec--) {
 14109  001522  D02C               	goto	l5533
 14110  001524                     l5529:
 14111                           
 14112                           ;doprnt.c: 1478: {
 14113                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14114  001524  0100               	movlb	0	; () banked
 14115  001526  519E               	movf	printf@prec& (0+255),w,b
 14116  001528  0D02               	mullw	2
 14117  00152A  0E36               	movlw	low _dpowers
 14118  00152C  24F3               	addwf	prodl,w,c
 14119  00152E  6EF6               	movwf	tblptrl,c
 14120  001530  0EFB               	movlw	high _dpowers
 14121  001532  20F4               	addwfc	prodh,w,c
 14122  001534  6EF7               	movwf	tblptrh,c
 14123  001536                     	if	1	;There are 3 active tblptr bytes
 14124  001536  6AF8               	clrf	tblptru,c
 14125  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14126  00153A  22F8               	addwfc	tblptru,f,c
 14127  00153C                     	endif
 14128  00153C  0009               	tblrd		*+
 14129  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14130  001542  000A               	tblrd		*-
 14131  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14132  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14133  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14134  001550  ECAF  F01D         	call	___lwdiv	;wreg free
 14135  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14136  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14137  00155C  0E00               	movlw	0
 14138  00155E  0100               	movlb	0	; () banked
 14139  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14140  001562  0E0A               	movlw	10
 14141  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14142  001566  ECC7  F01E         	call	___lwmod	;wreg free
 14143  00156A  0100               	movlb	0	; () banked
 14144  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14145  00156E  0F30               	addlw	48
 14146  001570  0100               	movlb	0	; () banked
 14147  001572  6FA8               	movwf	printf@c& (0+255),b
 14148                           
 14149                           ; BSR set to: 0
 14150                           ;doprnt.c: 1523: }
 14151                           ;doprnt.c: 1524: (putch(c) );
 14152  001574  0100               	movlb	0	; () banked
 14153  001576  51A8               	movf	printf@c& (0+255),w,b
 14154  001578  EC93  F023         	call	_putch
 14155  00157C                     l5533:
 14156  00157C  0100               	movlb	0	; () banked
 14157  00157E  079E               	decf	printf@prec& (0+255),f,b
 14158  001580  0100               	movlb	0	; () banked
 14159  001582  299E               	incf	printf@prec& (0+255),w,b
 14160  001584  A4D8               	btfss	status,2,c
 14161  001586  D7CE               	goto	l5529
 14162  001588                     l5535:
 14163  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14164  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14165  001590  0100               	movlb	0	; () banked
 14166  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14167  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14168  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14169  001596  6AF8               	clrf	tblptru,c
 14170  001598                     	endif
 14171  001598                     	if	0	;tblptru may be non-zero
 14172  001598                     	endif
 14173  001598  0008               	tblrd		*
 14174  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14175  00159E  0100               	movlb	0	; () banked
 14176  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14177  0015A2  B4D8               	btfsc	status,2,c
 14178  0015A4  0012               	return	
 14179  0015A6  D5EB               	goto	l5405
 14180  0015A8                     __end_of_printf:
 14181                           	opt stack 0
 14182                           tblptru	equ	0xFF8
 14183                           tblptrh	equ	0xFF7
 14184                           tblptrl	equ	0xFF6
 14185                           tablat	equ	0xFF5
 14186                           prodh	equ	0xFF4
 14187                           prodl	equ	0xFF3
 14188                           intcon	equ	0xFF2
 14189                           intcon2	equ	0xFF1
 14190                           intcon3	equ	0xFF0
 14191                           indf0	equ	0xFEF
 14192                           postinc0	equ	0xFEE
 14193                           fsr0h	equ	0xFEA
 14194                           fsr0l	equ	0xFE9
 14195                           wreg	equ	0xFE8
 14196                           postdec1	equ	0xFE5
 14197                           fsr1l	equ	0xFE1
 14198                           indf2	equ	0xFDF
 14199                           postinc2	equ	0xFDE
 14200                           postdec2	equ	0xFDD
 14201                           fsr2h	equ	0xFDA
 14202                           fsr2l	equ	0xFD9
 14203                           status	equ	0xFD8
 14204                           
 14205 ;; *************** function _putch *****************
 14206 ;; Defined at:
 14207 ;;		line 20 in file "lcd.c"
 14208 ;; Parameters:    Size  Location     Type
 14209 ;;  data            1    wreg     unsigned char 
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;  data            1    2[BANK0 ] unsigned char 
 14212 ;; Return value:  Size  Location     Type
 14213 ;;                  1    wreg      void 
 14214 ;; Registers used:
 14215 ;;		wreg, status,2, status,0, cstack
 14216 ;; Tracked objects:
 14217 ;;		On entry : 0/0
 14218 ;;		On exit  : 0/0
 14219 ;;		Unchanged: 0/0
 14220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14224 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14225 ;;Total ram usage:        1 bytes
 14226 ;; Hardware stack levels used:    1
 14227 ;; Hardware stack levels required when called:    8
 14228 ;; This function calls:
 14229 ;;		_lcdNibble
 14230 ;; This function is called by:
 14231 ;;		_printf
 14232 ;; This function uses a non-reentrant model
 14233 ;;
 14234                           
 14235                           	psect	text48
 14236  004726                     __ptext48:
 14237                           	opt stack 0
 14238  004726                     _putch:
 14239                           	opt stack 18
 14240                           
 14241                           ;incstack = 0
 14242                           ;putch@data stored from wreg
 14243  004726  0100               	movlb	0	; () banked
 14244  004728  6F82               	movwf	putch@data& (0+255),b
 14245                           
 14246                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14247  00472A  848C               	bsf	3980,2,c	;volatile
 14248                           
 14249                           ;lcd.c: 22: lcdNibble(data);
 14250  00472C  0100               	movlb	0	; () banked
 14251  00472E  5182               	movf	putch@data& (0+255),w,b
 14252  004730  EC93  F01E         	call	_lcdNibble
 14253  004734  0012               	return		;funcret
 14254  004736                     __end_of_putch:
 14255                           	opt stack 0
 14256                           tblptru	equ	0xFF8
 14257                           tblptrh	equ	0xFF7
 14258                           tblptrl	equ	0xFF6
 14259                           tablat	equ	0xFF5
 14260                           prodh	equ	0xFF4
 14261                           prodl	equ	0xFF3
 14262                           intcon	equ	0xFF2
 14263                           intcon2	equ	0xFF1
 14264                           intcon3	equ	0xFF0
 14265                           indf0	equ	0xFEF
 14266                           postinc0	equ	0xFEE
 14267                           fsr0h	equ	0xFEA
 14268                           fsr0l	equ	0xFE9
 14269                           wreg	equ	0xFE8
 14270                           postdec1	equ	0xFE5
 14271                           fsr1l	equ	0xFE1
 14272                           indf2	equ	0xFDF
 14273                           postinc2	equ	0xFDE
 14274                           postdec2	equ	0xFDD
 14275                           fsr2h	equ	0xFDA
 14276                           fsr2l	equ	0xFD9
 14277                           status	equ	0xFD8
 14278                           
 14279 ;; *************** function _isdigit *****************
 14280 ;; Defined at:
 14281 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  c               1    wreg     unsigned char 
 14284 ;; Auto vars:     Size  Location     Type
 14285 ;;  c               1    2[BANK0 ] unsigned char 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;		None               void
 14288 ;; Registers used:
 14289 ;;		wreg, status,2, status,0
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14296 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14298 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14299 ;;Total ram usage:        3 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; Hardware stack levels required when called:    7
 14302 ;; This function calls:
 14303 ;;		Nothing
 14304 ;; This function is called by:
 14305 ;;		_printf
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           	psect	text49
 14310  004598                     __ptext49:
 14311                           	opt stack 0
 14312  004598                     _isdigit:
 14313                           	opt stack 19
 14314                           
 14315                           ;incstack = 0
 14316                           ;isdigit@c stored from wreg
 14317  004598  0100               	movlb	0	; () banked
 14318  00459A  6F82               	movwf	isdigit@c& (0+255),b
 14319  00459C  0E00               	movlw	0
 14320  00459E  0100               	movlb	0	; () banked
 14321  0045A0  6F81               	movwf	_isdigit$1936& (0+255),b
 14322                           
 14323                           ; BSR set to: 0
 14324  0045A2  0E3A               	movlw	58
 14325  0045A4  0100               	movlb	0	; () banked
 14326  0045A6  6182               	cpfslt	isdigit@c& (0+255),b
 14327  0045A8  D007               	goto	l5253
 14328                           
 14329                           ; BSR set to: 0
 14330  0045AA  0E2F               	movlw	47
 14331  0045AC  0100               	movlb	0	; () banked
 14332  0045AE  6582               	cpfsgt	isdigit@c& (0+255),b
 14333  0045B0  D003               	goto	l5253
 14334                           
 14335                           ; BSR set to: 0
 14336  0045B2  0E01               	movlw	1
 14337  0045B4  0100               	movlb	0	; () banked
 14338  0045B6  6F81               	movwf	_isdigit$1936& (0+255),b
 14339  0045B8                     l5253:
 14340                           
 14341                           ; BSR set to: 0
 14342  0045B8  C081  F080         	movff	_isdigit$1936,??_isdigit
 14343  0045BC  0100               	movlb	0	; () banked
 14344  0045BE  3180               	rrcf	??_isdigit& (0+255),w,b
 14345  0045C0  0012               	return	
 14346  0045C2                     __end_of_isdigit:
 14347                           	opt stack 0
 14348                           tblptru	equ	0xFF8
 14349                           tblptrh	equ	0xFF7
 14350                           tblptrl	equ	0xFF6
 14351                           tablat	equ	0xFF5
 14352                           prodh	equ	0xFF4
 14353                           prodl	equ	0xFF3
 14354                           intcon	equ	0xFF2
 14355                           intcon2	equ	0xFF1
 14356                           intcon3	equ	0xFF0
 14357                           indf0	equ	0xFEF
 14358                           postinc0	equ	0xFEE
 14359                           fsr0h	equ	0xFEA
 14360                           fsr0l	equ	0xFE9
 14361                           wreg	equ	0xFE8
 14362                           postdec1	equ	0xFE5
 14363                           fsr1l	equ	0xFE1
 14364                           indf2	equ	0xFDF
 14365                           postinc2	equ	0xFDE
 14366                           postdec2	equ	0xFDD
 14367                           fsr2h	equ	0xFDA
 14368                           fsr2l	equ	0xFD9
 14369                           status	equ	0xFD8
 14370                           
 14371 ;; *************** function ___wmul *****************
 14372 ;; Defined at:
 14373 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14374 ;; Parameters:    Size  Location     Type
 14375 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14376 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14377 ;; Auto vars:     Size  Location     Type
 14378 ;;  product         2    4[BANK0 ] unsigned int 
 14379 ;; Return value:  Size  Location     Type
 14380 ;;                  2    0[BANK0 ] unsigned int 
 14381 ;; Registers used:
 14382 ;;		wreg, status,2, status,0, prodl, prodh
 14383 ;; Tracked objects:
 14384 ;;		On entry : 0/0
 14385 ;;		On exit  : 0/0
 14386 ;;		Unchanged: 0/0
 14387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14388 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14389 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14391 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14392 ;;Total ram usage:        6 bytes
 14393 ;; Hardware stack levels used:    1
 14394 ;; Hardware stack levels required when called:    7
 14395 ;; This function calls:
 14396 ;;		Nothing
 14397 ;; This function is called by:
 14398 ;;		_printf
 14399 ;; This function uses a non-reentrant model
 14400 ;;
 14401                           
 14402                           	psect	text50
 14403  00426C                     __ptext50:
 14404                           	opt stack 0
 14405  00426C                     ___wmul:
 14406                           	opt stack 19
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;incstack = 0
 14410  00426C  0100               	movlb	0	; () banked
 14411  00426E  5180               	movf	___wmul@multiplier& (0+255),w,b
 14412  004270  0100               	movlb	0	; () banked
 14413  004272  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14414  004274  CFF3 F084          	movff	prodl,___wmul@product
 14415  004278  CFF4 F085          	movff	prodh,___wmul@product+1
 14416  00427C  0100               	movlb	0	; () banked
 14417  00427E  5180               	movf	___wmul@multiplier& (0+255),w,b
 14418  004280  0100               	movlb	0	; () banked
 14419  004282  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14420  004284  50F3               	movf	prodl,w,c
 14421  004286  0100               	movlb	0	; () banked
 14422  004288  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14423  00428A  0100               	movlb	0	; () banked
 14424  00428C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14425  00428E  0100               	movlb	0	; () banked
 14426  004290  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14427  004292  50F3               	movf	prodl,w,c
 14428  004294  0100               	movlb	0	; () banked
 14429  004296  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14430                           
 14431                           ; BSR set to: 0
 14432  004298  C084  F080         	movff	___wmul@product,?___wmul
 14433  00429C  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14434  0042A0  0012               	return	
 14435  0042A2                     __end_of___wmul:
 14436                           	opt stack 0
 14437                           tblptru	equ	0xFF8
 14438                           tblptrh	equ	0xFF7
 14439                           tblptrl	equ	0xFF6
 14440                           tablat	equ	0xFF5
 14441                           prodh	equ	0xFF4
 14442                           prodl	equ	0xFF3
 14443                           intcon	equ	0xFF2
 14444                           intcon2	equ	0xFF1
 14445                           intcon3	equ	0xFF0
 14446                           indf0	equ	0xFEF
 14447                           postinc0	equ	0xFEE
 14448                           fsr0h	equ	0xFEA
 14449                           fsr0l	equ	0xFE9
 14450                           wreg	equ	0xFE8
 14451                           postdec1	equ	0xFE5
 14452                           fsr1l	equ	0xFE1
 14453                           indf2	equ	0xFDF
 14454                           postinc2	equ	0xFDE
 14455                           postdec2	equ	0xFDD
 14456                           fsr2h	equ	0xFDA
 14457                           fsr2l	equ	0xFD9
 14458                           status	equ	0xFD8
 14459                           
 14460 ;; *************** function ___lwmod *****************
 14461 ;; Defined at:
 14462 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14463 ;; Parameters:    Size  Location     Type
 14464 ;;  dividend        2    7[BANK0 ] unsigned int 
 14465 ;;  divisor         2    9[BANK0 ] unsigned int 
 14466 ;; Auto vars:     Size  Location     Type
 14467 ;;  counter         1   11[BANK0 ] unsigned char 
 14468 ;; Return value:  Size  Location     Type
 14469 ;;                  2    7[BANK0 ] unsigned int 
 14470 ;; Registers used:
 14471 ;;		wreg, status,2, status,0
 14472 ;; Tracked objects:
 14473 ;;		On entry : 0/0
 14474 ;;		On exit  : 0/0
 14475 ;;		Unchanged: 0/0
 14476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14477 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14480 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14481 ;;Total ram usage:        5 bytes
 14482 ;; Hardware stack levels used:    1
 14483 ;; Hardware stack levels required when called:    7
 14484 ;; This function calls:
 14485 ;;		Nothing
 14486 ;; This function is called by:
 14487 ;;		_printf
 14488 ;; This function uses a non-reentrant model
 14489 ;;
 14490                           
 14491                           	psect	text51
 14492  003D8E                     __ptext51:
 14493                           	opt stack 0
 14494  003D8E                     ___lwmod:
 14495                           	opt stack 19
 14496                           
 14497                           ; BSR set to: 0
 14498                           ;incstack = 0
 14499  003D8E  0100               	movlb	0	; () banked
 14500  003D90  5189               	movf	___lwmod@divisor& (0+255),w,b
 14501  003D92  0100               	movlb	0	; () banked
 14502  003D94  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14503  003D96  B4D8               	btfsc	status,2,c
 14504  003D98  D026               	goto	l1712
 14505                           
 14506                           ; BSR set to: 0
 14507  003D9A  0E01               	movlw	1
 14508  003D9C  0100               	movlb	0	; () banked
 14509  003D9E  6F8B               	movwf	___lwmod@counter& (0+255),b
 14510  003DA0  D006               	goto	l5291
 14511  003DA2                     l5289:
 14512                           
 14513                           ; BSR set to: 0
 14514  003DA2  0100               	movlb	0	; () banked
 14515  003DA4  90D8               	bcf	status,0,c
 14516  003DA6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14517  003DA8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14518  003DAA  0100               	movlb	0	; () banked
 14519  003DAC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14520  003DAE                     l5291:
 14521                           
 14522                           ; BSR set to: 0
 14523  003DAE  0100               	movlb	0	; () banked
 14524  003DB0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14525  003DB2  D7F7               	goto	l5289
 14526  003DB4                     l5293:
 14527                           
 14528                           ; BSR set to: 0
 14529  003DB4  0100               	movlb	0	; () banked
 14530  003DB6  5189               	movf	___lwmod@divisor& (0+255),w,b
 14531  003DB8  0100               	movlb	0	; () banked
 14532  003DBA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14533  003DBC  0100               	movlb	0	; () banked
 14534  003DBE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14535  003DC0  0100               	movlb	0	; () banked
 14536  003DC2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14537  003DC4  A0D8               	btfss	status,0,c
 14538  003DC6  D008               	goto	l5297
 14539                           
 14540                           ; BSR set to: 0
 14541  003DC8  0100               	movlb	0	; () banked
 14542  003DCA  5189               	movf	___lwmod@divisor& (0+255),w,b
 14543  003DCC  0100               	movlb	0	; () banked
 14544  003DCE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14545  003DD0  0100               	movlb	0	; () banked
 14546  003DD2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14547  003DD4  0100               	movlb	0	; () banked
 14548  003DD6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14549  003DD8                     l5297:
 14550                           
 14551                           ; BSR set to: 0
 14552  003DD8  0100               	movlb	0	; () banked
 14553  003DDA  90D8               	bcf	status,0,c
 14554  003DDC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14555  003DDE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14556                           
 14557                           ; BSR set to: 0
 14558  003DE0  0100               	movlb	0	; () banked
 14559  003DE2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14560  003DE4  D7E7               	goto	l5293
 14561  003DE6                     l1712:
 14562                           
 14563                           ; BSR set to: 0
 14564  003DE6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14565  003DEA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14566                           
 14567                           ; BSR set to: 0
 14568  003DEE  0012               	return		;funcret
 14569  003DF0                     __end_of___lwmod:
 14570                           	opt stack 0
 14571                           tblptru	equ	0xFF8
 14572                           tblptrh	equ	0xFF7
 14573                           tblptrl	equ	0xFF6
 14574                           tablat	equ	0xFF5
 14575                           prodh	equ	0xFF4
 14576                           prodl	equ	0xFF3
 14577                           intcon	equ	0xFF2
 14578                           intcon2	equ	0xFF1
 14579                           intcon3	equ	0xFF0
 14580                           indf0	equ	0xFEF
 14581                           postinc0	equ	0xFEE
 14582                           fsr0h	equ	0xFEA
 14583                           fsr0l	equ	0xFE9
 14584                           wreg	equ	0xFE8
 14585                           postdec1	equ	0xFE5
 14586                           fsr1l	equ	0xFE1
 14587                           indf2	equ	0xFDF
 14588                           postinc2	equ	0xFDE
 14589                           postdec2	equ	0xFDD
 14590                           fsr2h	equ	0xFDA
 14591                           fsr2l	equ	0xFD9
 14592                           status	equ	0xFD8
 14593                           
 14594 ;; *************** function ___lwdiv *****************
 14595 ;; Defined at:
 14596 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14597 ;; Parameters:    Size  Location     Type
 14598 ;;  dividend        2    0[BANK0 ] unsigned int 
 14599 ;;  divisor         2    2[BANK0 ] unsigned int 
 14600 ;; Auto vars:     Size  Location     Type
 14601 ;;  quotient        2    4[BANK0 ] unsigned int 
 14602 ;;  counter         1    6[BANK0 ] unsigned char 
 14603 ;; Return value:  Size  Location     Type
 14604 ;;                  2    0[BANK0 ] unsigned int 
 14605 ;; Registers used:
 14606 ;;		wreg, status,2, status,0
 14607 ;; Tracked objects:
 14608 ;;		On entry : 0/0
 14609 ;;		On exit  : 0/0
 14610 ;;		Unchanged: 0/0
 14611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14612 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14613 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14615 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14616 ;;Total ram usage:        7 bytes
 14617 ;; Hardware stack levels used:    1
 14618 ;; Hardware stack levels required when called:    7
 14619 ;; This function calls:
 14620 ;;		Nothing
 14621 ;; This function is called by:
 14622 ;;		_printf
 14623 ;; This function uses a non-reentrant model
 14624 ;;
 14625                           
 14626                           	psect	text52
 14627  003B5E                     __ptext52:
 14628                           	opt stack 0
 14629  003B5E                     ___lwdiv:
 14630                           	opt stack 19
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;incstack = 0
 14634  003B5E  0E00               	movlw	0
 14635  003B60  0100               	movlb	0	; () banked
 14636  003B62  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14637  003B64  0E00               	movlw	0
 14638  003B66  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14639                           
 14640                           ; BSR set to: 0
 14641  003B68  0100               	movlb	0	; () banked
 14642  003B6A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14643  003B6C  0100               	movlb	0	; () banked
 14644  003B6E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14645  003B70  B4D8               	btfsc	status,2,c
 14646  003B72  D02C               	goto	l1702
 14647                           
 14648                           ; BSR set to: 0
 14649  003B74  0E01               	movlw	1
 14650  003B76  0100               	movlb	0	; () banked
 14651  003B78  6F86               	movwf	___lwdiv@counter& (0+255),b
 14652  003B7A  D006               	goto	l5271
 14653  003B7C                     l5269:
 14654                           
 14655                           ; BSR set to: 0
 14656  003B7C  0100               	movlb	0	; () banked
 14657  003B7E  90D8               	bcf	status,0,c
 14658  003B80  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14659  003B82  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14660  003B84  0100               	movlb	0	; () banked
 14661  003B86  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14662  003B88                     l5271:
 14663                           
 14664                           ; BSR set to: 0
 14665  003B88  0100               	movlb	0	; () banked
 14666  003B8A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14667  003B8C  D7F7               	goto	l5269
 14668  003B8E                     l5273:
 14669                           
 14670                           ; BSR set to: 0
 14671  003B8E  0100               	movlb	0	; () banked
 14672  003B90  90D8               	bcf	status,0,c
 14673  003B92  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14674  003B94  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14675                           
 14676                           ; BSR set to: 0
 14677  003B96  0100               	movlb	0	; () banked
 14678  003B98  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14679  003B9A  0100               	movlb	0	; () banked
 14680  003B9C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14681  003B9E  0100               	movlb	0	; () banked
 14682  003BA0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14683  003BA2  0100               	movlb	0	; () banked
 14684  003BA4  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14685  003BA6  A0D8               	btfss	status,0,c
 14686  003BA8  D00A               	goto	l5281
 14687                           
 14688                           ; BSR set to: 0
 14689  003BAA  0100               	movlb	0	; () banked
 14690  003BAC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14691  003BAE  0100               	movlb	0	; () banked
 14692  003BB0  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14693  003BB2  0100               	movlb	0	; () banked
 14694  003BB4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14695  003BB6  0100               	movlb	0	; () banked
 14696  003BB8  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14697                           
 14698                           ; BSR set to: 0
 14699  003BBA  0100               	movlb	0	; () banked
 14700  003BBC  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14701  003BBE                     l5281:
 14702                           
 14703                           ; BSR set to: 0
 14704  003BBE  0100               	movlb	0	; () banked
 14705  003BC0  90D8               	bcf	status,0,c
 14706  003BC2  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14707  003BC4  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14708                           
 14709                           ; BSR set to: 0
 14710  003BC6  0100               	movlb	0	; () banked
 14711  003BC8  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14712  003BCA  D7E1               	goto	l5273
 14713  003BCC                     l1702:
 14714                           
 14715                           ; BSR set to: 0
 14716  003BCC  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14717  003BD0  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14718                           
 14719                           ; BSR set to: 0
 14720  003BD4  0012               	return		;funcret
 14721  003BD6                     __end_of___lwdiv:
 14722                           	opt stack 0
 14723                           tblptru	equ	0xFF8
 14724                           tblptrh	equ	0xFF7
 14725                           tblptrl	equ	0xFF6
 14726                           tablat	equ	0xFF5
 14727                           prodh	equ	0xFF4
 14728                           prodl	equ	0xFF3
 14729                           intcon	equ	0xFF2
 14730                           intcon2	equ	0xFF1
 14731                           intcon3	equ	0xFF0
 14732                           indf0	equ	0xFEF
 14733                           postinc0	equ	0xFEE
 14734                           fsr0h	equ	0xFEA
 14735                           fsr0l	equ	0xFE9
 14736                           wreg	equ	0xFE8
 14737                           postdec1	equ	0xFE5
 14738                           fsr1l	equ	0xFE1
 14739                           indf2	equ	0xFDF
 14740                           postinc2	equ	0xFDE
 14741                           postdec2	equ	0xFDD
 14742                           fsr2h	equ	0xFDA
 14743                           fsr2l	equ	0xFD9
 14744                           status	equ	0xFD8
 14745                           
 14746 ;; *************** function _lcdInst *****************
 14747 ;; Defined at:
 14748 ;;		line 15 in file "lcd.c"
 14749 ;; Parameters:    Size  Location     Type
 14750 ;;  data            1    wreg     unsigned char 
 14751 ;; Auto vars:     Size  Location     Type
 14752 ;;  data            1    2[BANK0 ] unsigned char 
 14753 ;; Return value:  Size  Location     Type
 14754 ;;                  1    wreg      void 
 14755 ;; Registers used:
 14756 ;;		wreg, status,2, status,0, cstack
 14757 ;; Tracked objects:
 14758 ;;		On entry : 0/0
 14759 ;;		On exit  : 0/0
 14760 ;;		Unchanged: 0/0
 14761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14766 ;;Total ram usage:        1 bytes
 14767 ;; Hardware stack levels used:    1
 14768 ;; Hardware stack levels required when called:    8
 14769 ;; This function calls:
 14770 ;;		_lcdNibble
 14771 ;; This function is called by:
 14772 ;;		_UI
 14773 ;;		_change_state_to_menu_start
 14774 ;;		_change_state_to_menu_12
 14775 ;;		_change_state_to_menu_22
 14776 ;;		_initLCD
 14777 ;;		_printRTC
 14778 ;;		_Loading
 14779 ;;		_EEPROM_write
 14780 ;;		_Test
 14781 ;;		_algorithmTest
 14782 ;;		_sensorTest
 14783 ;;		_actuatorTest
 14784 ;;		_BothServos
 14785 ;;		_PortTestA5
 14786 ;;		_PusherTestA5
 14787 ;;		_ToggleTestA5
 14788 ;; This function uses a non-reentrant model
 14789 ;;
 14790                           
 14791                           	psect	text53
 14792  004736                     __ptext53:
 14793                           	opt stack 0
 14794  004736                     _lcdInst:
 14795                           	opt stack 20
 14796                           
 14797                           ; BSR set to: 0
 14798                           ;incstack = 0
 14799                           ;lcdInst@data stored from wreg
 14800  004736  0100               	movlb	0	; () banked
 14801  004738  6F82               	movwf	lcdInst@data& (0+255),b
 14802                           
 14803                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14804  00473A  948C               	bcf	3980,2,c	;volatile
 14805                           
 14806                           ;lcd.c: 17: lcdNibble(data);
 14807  00473C  0100               	movlb	0	; () banked
 14808  00473E  5182               	movf	lcdInst@data& (0+255),w,b
 14809  004740  EC93  F01E         	call	_lcdNibble
 14810  004744  0012               	return		;funcret
 14811  004746                     __end_of_lcdInst:
 14812                           	opt stack 0
 14813                           tblptru	equ	0xFF8
 14814                           tblptrh	equ	0xFF7
 14815                           tblptrl	equ	0xFF6
 14816                           tablat	equ	0xFF5
 14817                           prodh	equ	0xFF4
 14818                           prodl	equ	0xFF3
 14819                           intcon	equ	0xFF2
 14820                           intcon2	equ	0xFF1
 14821                           intcon3	equ	0xFF0
 14822                           indf0	equ	0xFEF
 14823                           postinc0	equ	0xFEE
 14824                           fsr0h	equ	0xFEA
 14825                           fsr0l	equ	0xFE9
 14826                           wreg	equ	0xFE8
 14827                           postdec1	equ	0xFE5
 14828                           fsr1l	equ	0xFE1
 14829                           indf2	equ	0xFDF
 14830                           postinc2	equ	0xFDE
 14831                           postdec2	equ	0xFDD
 14832                           fsr2h	equ	0xFDA
 14833                           fsr2l	equ	0xFD9
 14834                           status	equ	0xFD8
 14835                           
 14836 ;; *************** function _lcdNibble *****************
 14837 ;; Defined at:
 14838 ;;		line 25 in file "lcd.c"
 14839 ;; Parameters:    Size  Location     Type
 14840 ;;  data            1    wreg     unsigned char 
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;  data            1    1[BANK0 ] unsigned char 
 14843 ;;  temp            1    0[BANK0 ] unsigned char 
 14844 ;; Return value:  Size  Location     Type
 14845 ;;                  1    wreg      void 
 14846 ;; Registers used:
 14847 ;;		wreg, status,2, status,0
 14848 ;; Tracked objects:
 14849 ;;		On entry : 0/0
 14850 ;;		On exit  : 0/0
 14851 ;;		Unchanged: 0/0
 14852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14854 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14856 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14857 ;;Total ram usage:        2 bytes
 14858 ;; Hardware stack levels used:    1
 14859 ;; Hardware stack levels required when called:    7
 14860 ;; This function calls:
 14861 ;;		Nothing
 14862 ;; This function is called by:
 14863 ;;		_lcdInst
 14864 ;;		_putch
 14865 ;; This function uses a non-reentrant model
 14866 ;;
 14867                           
 14868                           	psect	text54
 14869  003D26                     __ptext54:
 14870                           	opt stack 0
 14871  003D26                     _lcdNibble:
 14872                           	opt stack 20
 14873                           
 14874                           ;incstack = 0
 14875                           ;lcdNibble@data stored from wreg
 14876  003D26  0100               	movlb	0	; () banked
 14877  003D28  6F81               	movwf	lcdNibble@data& (0+255),b
 14878                           
 14879                           ;lcd.c: 27: char temp = data & 0xF0;
 14880  003D2A  0100               	movlb	0	; () banked
 14881  003D2C  5181               	movf	lcdNibble@data& (0+255),w,b
 14882  003D2E  0BF0               	andlw	240
 14883  003D30  0100               	movlb	0	; () banked
 14884  003D32  6F80               	movwf	lcdNibble@temp& (0+255),b
 14885                           
 14886                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14887  003D34  508C               	movf	3980,w,c	;volatile
 14888  003D36  0B0F               	andlw	15
 14889  003D38  6E8C               	movwf	3980,c	;volatile
 14890                           
 14891                           ;lcd.c: 29: LATD = temp | LATD;
 14892  003D3A  0100               	movlb	0	; () banked
 14893  003D3C  5180               	movf	lcdNibble@temp& (0+255),w,b
 14894  003D3E  108C               	iorwf	3980,w,c	;volatile
 14895  003D40  6E8C               	movwf	3980,c	;volatile
 14896                           
 14897                           ; BSR set to: 0
 14898                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14899  003D42  868C               	bsf	3980,3,c	;volatile
 14900                           
 14901                           ; BSR set to: 0
 14902                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14903  003D44  0E42               	movlw	66
 14904  003D46                     u8107:
 14905  003D46  2EE8               	decfsz	wreg,f,c
 14906  003D48  D7FE               	bra	u8107
 14907  003D4A  D000               	nop2	
 14908                           
 14909                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14910  003D4C  968C               	bcf	3980,3,c	;volatile
 14911                           
 14912                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14913  003D4E  0E42               	movlw	66
 14914  003D50                     u8117:
 14915  003D50  2EE8               	decfsz	wreg,f,c
 14916  003D52  D7FE               	bra	u8117
 14917  003D54  D000               	nop2	
 14918                           
 14919                           ;lcd.c: 36: data = data << 4;
 14920  003D56  0100               	movlb	0	; () banked
 14921  003D58  3981               	swapf	lcdNibble@data& (0+255),w,b
 14922  003D5A  0BF0               	andlw	240
 14923  003D5C  0100               	movlb	0	; () banked
 14924  003D5E  6F81               	movwf	lcdNibble@data& (0+255),b
 14925                           
 14926                           ;lcd.c: 38: temp = data & 0xF0;
 14927  003D60  0100               	movlb	0	; () banked
 14928  003D62  5181               	movf	lcdNibble@data& (0+255),w,b
 14929  003D64  0BF0               	andlw	240
 14930  003D66  0100               	movlb	0	; () banked
 14931  003D68  6F80               	movwf	lcdNibble@temp& (0+255),b
 14932                           
 14933                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14934  003D6A  508C               	movf	3980,w,c	;volatile
 14935  003D6C  0B0F               	andlw	15
 14936  003D6E  6E8C               	movwf	3980,c	;volatile
 14937                           
 14938                           ;lcd.c: 40: LATD = temp | LATD;
 14939  003D70  0100               	movlb	0	; () banked
 14940  003D72  5180               	movf	lcdNibble@temp& (0+255),w,b
 14941  003D74  108C               	iorwf	3980,w,c	;volatile
 14942  003D76  6E8C               	movwf	3980,c	;volatile
 14943                           
 14944                           ; BSR set to: 0
 14945                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14946  003D78  868C               	bsf	3980,3,c	;volatile
 14947                           
 14948                           ; BSR set to: 0
 14949                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14950  003D7A  0E42               	movlw	66
 14951  003D7C                     u8127:
 14952  003D7C  2EE8               	decfsz	wreg,f,c
 14953  003D7E  D7FE               	bra	u8127
 14954  003D80  D000               	nop2	
 14955                           
 14956                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14957  003D82  968C               	bcf	3980,3,c	;volatile
 14958                           
 14959                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14960  003D84  0E42               	movlw	66
 14961  003D86                     u8137:
 14962  003D86  2EE8               	decfsz	wreg,f,c
 14963  003D88  D7FE               	bra	u8137
 14964  003D8A  D000               	nop2	
 14965  003D8C  0012               	return		;funcret
 14966  003D8E                     __end_of_lcdNibble:
 14967                           	opt stack 0
 14968                           tblptru	equ	0xFF8
 14969                           tblptrh	equ	0xFF7
 14970                           tblptrl	equ	0xFF6
 14971                           tablat	equ	0xFF5
 14972                           prodh	equ	0xFF4
 14973                           prodl	equ	0xFF3
 14974                           intcon	equ	0xFF2
 14975                           intcon2	equ	0xFF1
 14976                           intcon3	equ	0xFF0
 14977                           indf0	equ	0xFEF
 14978                           postinc0	equ	0xFEE
 14979                           fsr0h	equ	0xFEA
 14980                           fsr0l	equ	0xFE9
 14981                           wreg	equ	0xFE8
 14982                           postdec1	equ	0xFE5
 14983                           fsr1l	equ	0xFE1
 14984                           indf2	equ	0xFDF
 14985                           postinc2	equ	0xFDE
 14986                           postdec2	equ	0xFDD
 14987                           fsr2h	equ	0xFDA
 14988                           fsr2l	equ	0xFD9
 14989                           status	equ	0xFD8
 14990                           
 14991 ;; *************** function _initServos *****************
 14992 ;; Defined at:
 14993 ;;		line 273 in file "sort.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;		None
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;		None
 14998 ;; Return value:  Size  Location     Type
 14999 ;;                  1    wreg      void 
 15000 ;; Registers used:
 15001 ;;		wreg, status,2, status,0, cstack
 15002 ;; Tracked objects:
 15003 ;;		On entry : 0/0
 15004 ;;		On exit  : 0/0
 15005 ;;		Unchanged: 0/0
 15006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15010 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15011 ;;Total ram usage:        1 bytes
 15012 ;; Hardware stack levels used:    1
 15013 ;; Hardware stack levels required when called:    8
 15014 ;; This function calls:
 15015 ;;		_updateServoPosition
 15016 ;; This function is called by:
 15017 ;;		_Loading
 15018 ;;		_BothServos
 15019 ;; This function uses a non-reentrant model
 15020 ;;
 15021                           
 15022                           	psect	text55
 15023  003EAC                     __ptext55:
 15024                           	opt stack 0
 15025  003EAC                     _initServos:
 15026                           	opt stack 20
 15027                           
 15028                           ;sort.c: 274: updateServoPosition(1200, 1);
 15029                           
 15030                           ;incstack = 0
 15031  003EAC  0E04               	movlw	4
 15032  003EAE  0100               	movlb	0	; () banked
 15033  003EB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15034  003EB2  0EB0               	movlw	176
 15035  003EB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15036  003EB6  0E00               	movlw	0
 15037  003EB8  0100               	movlb	0	; () banked
 15038  003EBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15039  003EBC  0E01               	movlw	1
 15040  003EBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15041  003EC0  ECEB  F01D         	call	_updateServoPosition	;wreg free
 15042                           
 15043                           ;sort.c: 275: updateServoPosition(1150, 3);
 15044  003EC4  0E04               	movlw	4
 15045  003EC6  0100               	movlb	0	; () banked
 15046  003EC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15047  003ECA  0E7E               	movlw	126
 15048  003ECC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15049  003ECE  0E00               	movlw	0
 15050  003ED0  0100               	movlb	0	; () banked
 15051  003ED2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15052  003ED4  0E03               	movlw	3
 15053  003ED6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15054  003ED8  ECEB  F01D         	call	_updateServoPosition	;wreg free
 15055                           
 15056                           ;sort.c: 276: TMR1ON = 1;
 15057  003EDC  80CD               	bsf	4045,0,c	;volatile
 15058                           
 15059                           ;sort.c: 277: was_low_1 = 0;
 15060  003EDE  0E00               	movlw	0
 15061  003EE0  6E7A               	movwf	_was_low_1+1,c	;volatile
 15062  003EE2  0E00               	movlw	0
 15063  003EE4  6E79               	movwf	_was_low_1,c	;volatile
 15064                           
 15065                           ;sort.c: 278: _delay((unsigned long)((5)*(32000000/4000.0)));
 15066  003EE6  0E34               	movlw	52
 15067  003EE8  0100               	movlb	0	; () banked
 15068  003EEA  6F88               	movwf	??_initServos& (0+255),b
 15069  003EEC  0EF1               	movlw	241
 15070  003EEE                     u8147:
 15071  003EEE  2EE8               	decfsz	wreg,f,c
 15072  003EF0  D7FE               	bra	u8147
 15073  003EF2  2F88               	decfsz	??_initServos& (0+255),f,b
 15074  003EF4  D7FC               	bra	u8147
 15075  003EF6  D000               	nop2	
 15076                           
 15077                           ;sort.c: 279: TMR3ON = 1;
 15078  003EF8  80B1               	bsf	4017,0,c	;volatile
 15079                           
 15080                           ;sort.c: 280: was_low_3 = 0;
 15081  003EFA  0E00               	movlw	0
 15082  003EFC  6E7C               	movwf	_was_low_3+1,c	;volatile
 15083  003EFE  0E00               	movlw	0
 15084  003F00  6E7B               	movwf	_was_low_3,c	;volatile
 15085                           
 15086                           ;sort.c: 282: LATCbits.LATC0 = 1;
 15087  003F02  808B               	bsf	3979,0,c	;volatile
 15088  003F04  0012               	return		;funcret
 15089  003F06                     __end_of_initServos:
 15090                           	opt stack 0
 15091                           tblptru	equ	0xFF8
 15092                           tblptrh	equ	0xFF7
 15093                           tblptrl	equ	0xFF6
 15094                           tablat	equ	0xFF5
 15095                           prodh	equ	0xFF4
 15096                           prodl	equ	0xFF3
 15097                           intcon	equ	0xFF2
 15098                           intcon2	equ	0xFF1
 15099                           intcon3	equ	0xFF0
 15100                           indf0	equ	0xFEF
 15101                           postinc0	equ	0xFEE
 15102                           fsr0h	equ	0xFEA
 15103                           fsr0l	equ	0xFE9
 15104                           wreg	equ	0xFE8
 15105                           postdec1	equ	0xFE5
 15106                           fsr1l	equ	0xFE1
 15107                           indf2	equ	0xFDF
 15108                           postinc2	equ	0xFDE
 15109                           postdec2	equ	0xFDD
 15110                           fsr2h	equ	0xFDA
 15111                           fsr2l	equ	0xFD9
 15112                           status	equ	0xFD8
 15113                           
 15114 ;; *************** function _updateServoPosition *****************
 15115 ;; Defined at:
 15116 ;;		line 334 in file "sort.c"
 15117 ;; Parameters:    Size  Location     Type
 15118 ;;  time_us         2    0[BANK0 ] int 
 15119 ;;  timer           2    2[BANK0 ] int 
 15120 ;; Auto vars:     Size  Location     Type
 15121 ;;  my_time         2    6[BANK0 ] unsigned int 
 15122 ;; Return value:  Size  Location     Type
 15123 ;;                  1    wreg      void 
 15124 ;; Registers used:
 15125 ;;		wreg, status,2, status,0
 15126 ;; Tracked objects:
 15127 ;;		On entry : 0/0
 15128 ;;		On exit  : 0/0
 15129 ;;		Unchanged: 0/0
 15130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15131 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15133 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15134 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15135 ;;Total ram usage:        8 bytes
 15136 ;; Hardware stack levels used:    1
 15137 ;; Hardware stack levels required when called:    7
 15138 ;; This function calls:
 15139 ;;		Nothing
 15140 ;; This function is called by:
 15141 ;;		_Distribution
 15142 ;;		_initServos
 15143 ;;		_actuatorTest
 15144 ;;		_BothServos
 15145 ;; This function uses a non-reentrant model
 15146 ;;
 15147                           
 15148                           	psect	text56
 15149  003BD6                     __ptext56:
 15150                           	opt stack 0
 15151  003BD6                     _updateServoPosition:
 15152                           	opt stack 20
 15153                           
 15154                           ;sort.c: 335: unsigned int my_time = 65535 - time_us;
 15155                           
 15156                           ;incstack = 0
 15157  003BD6  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15158  003BDA  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15159  003BDE  0100               	movlb	0	; () banked
 15160  003BE0  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15161  003BE2  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15162  003BE4  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15163  003BE6  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15164  003BE8  0EFF               	movlw	255
 15165  003BEA  0100               	movlb	0	; () banked
 15166  003BEC  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15167  003BEE  0100               	movlb	0	; () banked
 15168  003BF0  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15169  003BF2  0EFF               	movlw	255
 15170  003BF4  0100               	movlb	0	; () banked
 15171  003BF6  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15172  003BF8  0100               	movlb	0	; () banked
 15173  003BFA  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15174                           
 15175                           ;sort.c: 336: switch(timer){
 15176  003BFC  D015               	goto	l5577
 15177  003BFE                     l5575:
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;sort.c: 338: servoTimes[0] = my_time >> 8;
 15181  003BFE  0100               	movlb	0	; () banked
 15182  003C00  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15183  003C02  0101               	movlb	1	; () banked
 15184  003C04  6F1C               	movwf	_servoTimes& (0+255),b
 15185  003C06  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15186                           
 15187                           ;sort.c: 339: servoTimes[1] = my_time & 0xFF;
 15188  003C08  0100               	movlb	0	; () banked
 15189  003C0A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15190  003C0C  0101               	movlb	1	; () banked
 15191  003C0E  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15192  003C10  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15193  003C12                     l792:
 15194                           
 15195                           ;sort.c: 341: servoTimes[2] = my_time >> 8;
 15196  003C12  0100               	movlb	0	; () banked
 15197  003C14  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15198  003C16  0101               	movlb	1	; () banked
 15199  003C18  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15200  003C1A  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15201                           
 15202                           ;sort.c: 342: servoTimes[3] = my_time & 0xFF;
 15203  003C1C  0100               	movlb	0	; () banked
 15204  003C1E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15205  003C20  0101               	movlb	1	; () banked
 15206  003C22  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15207  003C24  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15208                           
 15209                           ;sort.c: 343: }
 15210  003C26  0012               	return	
 15211  003C28                     l5577:
 15212  003C28  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15213  003C2C  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15214                           
 15215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15216                           ; Switch size 1, requested type "space"
 15217                           ; Number of cases is 1, Range of values is 0 to 0
 15218                           ; switch strategies available:
 15219                           ; Name         Instructions Cycles
 15220                           ; simple_byte            4     3 (average)
 15221                           ;	Chosen strategy is simple_byte
 15222  003C30  0100               	movlb	0	; () banked
 15223  003C32  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15224  003C34  0A00               	xorlw	0	; case 0
 15225  003C36  A4D8               	btfss	status,2,c
 15226  003C38  0012               	return	
 15227                           
 15228                           ; BSR set to: 0
 15229                           ; Switch size 1, requested type "space"
 15230                           ; Number of cases is 2, Range of values is 1 to 3
 15231                           ; switch strategies available:
 15232                           ; Name         Instructions Cycles
 15233                           ; simple_byte            7     4 (average)
 15234                           ;	Chosen strategy is simple_byte
 15235  003C3A  0100               	movlb	0	; () banked
 15236  003C3C  5184               	movf	??_updateServoPosition& (0+255),w,b
 15237  003C3E  0A01               	xorlw	1	; case 1
 15238  003C40  B4D8               	btfsc	status,2,c
 15239  003C42  D7DD               	goto	l5575
 15240  003C44  0A02               	xorlw	2	; case 3
 15241  003C46  A4D8               	btfss	status,2,c
 15242  003C48  0012               	return	
 15243  003C4A  D7E3               	goto	l792
 15244  003C4C                     __end_of_updateServoPosition:
 15245                           	opt stack 0
 15246                           tblptru	equ	0xFF8
 15247                           tblptrh	equ	0xFF7
 15248                           tblptrl	equ	0xFF6
 15249                           tablat	equ	0xFF5
 15250                           prodh	equ	0xFF4
 15251                           prodl	equ	0xFF3
 15252                           intcon	equ	0xFF2
 15253                           intcon2	equ	0xFF1
 15254                           intcon3	equ	0xFF0
 15255                           indf0	equ	0xFEF
 15256                           postinc0	equ	0xFEE
 15257                           fsr0h	equ	0xFEA
 15258                           fsr0l	equ	0xFE9
 15259                           wreg	equ	0xFE8
 15260                           postdec1	equ	0xFE5
 15261                           fsr1l	equ	0xFE1
 15262                           indf2	equ	0xFDF
 15263                           postinc2	equ	0xFDE
 15264                           postdec2	equ	0xFDD
 15265                           fsr2h	equ	0xFDA
 15266                           fsr2l	equ	0xFD9
 15267                           status	equ	0xFD8
 15268                           
 15269 ;; *************** function _handler *****************
 15270 ;; Defined at:
 15271 ;;		line 16 in file "interruptHandler.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;		None
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;		None
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  1    wreg      void 
 15278 ;; Registers used:
 15279 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15280 ;; Tracked objects:
 15281 ;;		On entry : 0/0
 15282 ;;		On exit  : 0/0
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15287 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15288 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15289 ;;Total ram usage:       16 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; Hardware stack levels required when called:    6
 15292 ;; This function calls:
 15293 ;;		_printSortTimer
 15294 ;;		_updateMenu
 15295 ;; This function is called by:
 15296 ;;		Interrupt level 2
 15297 ;; This function uses a non-reentrant model
 15298 ;;
 15299                           
 15300                           	psect	intcode
 15301  000008                     __pintcode:
 15302                           	opt stack 0
 15303  000008                     _handler:
 15304                           	opt stack 18
 15305                           
 15306                           ;incstack = 0
 15307  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15308  00000A  ED60  F015         	call	int_func,f	;refresh shadow registers
 15309                           tblptru	equ	0xFF8
 15310                           tblptrh	equ	0xFF7
 15311                           tblptrl	equ	0xFF6
 15312                           tablat	equ	0xFF5
 15313                           prodh	equ	0xFF4
 15314                           prodl	equ	0xFF3
 15315                           intcon	equ	0xFF2
 15316                           intcon2	equ	0xFF1
 15317                           intcon3	equ	0xFF0
 15318                           indf0	equ	0xFEF
 15319                           postinc0	equ	0xFEE
 15320                           fsr0h	equ	0xFEA
 15321                           fsr0l	equ	0xFE9
 15322                           wreg	equ	0xFE8
 15323                           postdec1	equ	0xFE5
 15324                           fsr1l	equ	0xFE1
 15325                           indf2	equ	0xFDF
 15326                           postinc2	equ	0xFDE
 15327                           postdec2	equ	0xFDD
 15328                           fsr2h	equ	0xFDA
 15329                           fsr2l	equ	0xFD9
 15330                           status	equ	0xFD8
 15331                           
 15332                           	psect	intcode_body
 15333  002AC0                     __pintcode_body:
 15334                           	opt stack 18
 15335  002AC0                     int_func:
 15336                           	opt stack 18
 15337  002AC0  0006               	pop		; remove dummy address from shadow register refresh
 15338  002AC2  CFFA F04D          	movff	pclath,??_handler+2
 15339  002AC6  CFFB F04E          	movff	pclatu,??_handler+3
 15340  002ACA  CFE9 F04F          	movff	fsr0l,??_handler+4
 15341  002ACE  CFEA F050          	movff	fsr0h,??_handler+5
 15342  002AD2  CFE1 F051          	movff	fsr1l,??_handler+6
 15343  002AD6  CFE2 F052          	movff	fsr1h,??_handler+7
 15344  002ADA  CFD9 F053          	movff	fsr2l,??_handler+8
 15345  002ADE  CFDA F054          	movff	fsr2h,??_handler+9
 15346  002AE2  CFF3 F055          	movff	prodl,??_handler+10
 15347  002AE6  CFF4 F056          	movff	prodh,??_handler+11
 15348  002AEA  CFF6 F057          	movff	tblptrl,??_handler+12
 15349  002AEE  CFF7 F058          	movff	tblptrh,??_handler+13
 15350  002AF2  CFF8 F059          	movff	tblptru,??_handler+14
 15351  002AF6  CFF5 F05A          	movff	tablat,??_handler+15
 15352                           
 15353                           ;interruptHandler.c: 18: if(INT1IF){
 15354  002AFA  A0F0               	btfss	intcon3,0,c	;volatile
 15355  002AFC  D020               	goto	i2l8083
 15356                           
 15357                           ;interruptHandler.c: 19: INT1IF = 0;
 15358  002AFE  90F0               	bcf	intcon3,0,c	;volatile
 15359                           
 15360                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15361  002B00  0100               	movlb	0	; () banked
 15362  002B02  51FC               	movf	_machine_state& (0+255),w,b
 15363  002B04  A4D8               	btfss	status,2,c
 15364  002B06  D01B               	goto	i2l8083
 15365                           
 15366                           ; BSR set to: 0
 15367                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15368  002B08  3881               	swapf	3969,w,c	;volatile
 15369  002B0A  0B0F               	andlw	15
 15370  002B0C  0B0F               	andlw	15
 15371  002B0E  6E4B               	movwf	??_handler& (0+255),c
 15372  002B10  6A4C               	clrf	(??_handler+1)& (0+255),c
 15373  002B12  0E25               	movlw	low _keys
 15374  002B14  244B               	addwf	??_handler,w,c
 15375  002B16  6EF6               	movwf	tblptrl,c
 15376  002B18  0EFB               	movlw	high _keys
 15377  002B1A  204C               	addwfc	??_handler+1,w,c
 15378  002B1C  6EF7               	movwf	tblptrh,c
 15379  002B1E                     	if	1	;There are 3 active tblptr bytes
 15380  002B1E  6AF8               	clrf	tblptru,c
 15381  002B20  0E00               	movlw	low (__mediumconst shr (0+16))
 15382  002B22  22F8               	addwfc	tblptru,f,c
 15383  002B24                     	endif
 15384  002B24  0008               	tblrd		*
 15385  002B26  CFF5 F07D          	movff	tablat,_input	;volatile
 15386                           
 15387                           ; BSR set to: 0
 15388                           ;interruptHandler.c: 23: if(input == '*'){
 15389  002B2A  0E2A               	movlw	42
 15390  002B2C  187D               	xorwf	_input,w,c	;volatile
 15391  002B2E  A4D8               	btfss	status,2,c
 15392  002B30  D004               	goto	i2l8081
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15396  002B32  0E03               	movlw	3
 15397  002B34  0100               	movlb	0	; () banked
 15398  002B36  6FFC               	movwf	_machine_state& (0+255),b
 15399                           
 15400                           ;interruptHandler.c: 25: }
 15401  002B38  D002               	goto	i2l8083
 15402  002B3A                     i2l8081:
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;interruptHandler.c: 26: else{
 15406                           ;interruptHandler.c: 27: updateMenu();
 15407  002B3A  ECF9  F010         	call	_updateMenu	;wreg free
 15408  002B3E                     i2l8083:
 15409                           
 15410                           ;interruptHandler.c: 28: }
 15411                           ;interruptHandler.c: 29: }
 15412                           ;interruptHandler.c: 30: }
 15413                           ;interruptHandler.c: 33: if(TMR0IF){
 15414  002B3E  A4F2               	btfss	intcon,2,c	;volatile
 15415  002B40  D00C               	goto	i2l8097
 15416                           
 15417                           ;interruptHandler.c: 34: TMR0IF = 0;
 15418  002B42  94F2               	bcf	intcon,2,c	;volatile
 15419                           
 15420                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15421  002B44  0100               	movlb	0	; () banked
 15422  002B46  05FC               	decf	_machine_state& (0+255),w,b
 15423  002B48  A4D8               	btfss	status,2,c
 15424  002B4A  D007               	goto	i2l8097
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;interruptHandler.c: 36: printSortTimer();
 15428  002B4C  EC74  F013         	call	_printSortTimer	;wreg free
 15429                           
 15430                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15431  002B50  0E85               	movlw	133
 15432  002B52  6ED7               	movwf	4055,c	;volatile
 15433                           
 15434                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15435  002B54  0EEE               	movlw	238
 15436  002B56  6ED6               	movwf	4054,c	;volatile
 15437                           
 15438                           ;interruptHandler.c: 40: TMR0ON = 1;
 15439  002B58  8ED5               	bsf	4053,7,c	;volatile
 15440  002B5A                     i2l8097:
 15441                           
 15442                           ;interruptHandler.c: 41: }
 15443                           ;interruptHandler.c: 42: }
 15444                           ;interruptHandler.c: 45: if(TMR1IF){
 15445  002B5A  A09E               	btfss	3998,0,c	;volatile
 15446  002B5C  D024               	goto	i2l8121
 15447                           
 15448                           ;interruptHandler.c: 46: TMR1IF = 0;
 15449  002B5E  909E               	bcf	3998,0,c	;volatile
 15450                           
 15451                           ;interruptHandler.c: 47: TMR1ON = 0;
 15452  002B60  90CD               	bcf	4045,0,c	;volatile
 15453                           
 15454                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15455  002B62  0100               	movlb	0	; () banked
 15456  002B64  05FC               	decf	_machine_state& (0+255),w,b
 15457  002B66  A4D8               	btfss	status,2,c
 15458  002B68  D01E               	goto	i2l8121
 15459                           
 15460                           ; BSR set to: 0
 15461                           ;interruptHandler.c: 49: if(was_low_1){
 15462  002B6A  5079               	movf	_was_low_1,w,c	;volatile
 15463  002B6C  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15464  002B6E  B4D8               	btfsc	status,2,c
 15465  002B70  D00A               	goto	i2l857
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15469  002B72  828B               	bsf	3979,1,c	;volatile
 15470                           
 15471                           ; BSR set to: 0
 15472                           ;interruptHandler.c: 51: was_low_1 = 0;
 15473  002B74  0E00               	movlw	0
 15474  002B76  6E7A               	movwf	_was_low_1+1,c	;volatile
 15475  002B78  0E00               	movlw	0
 15476  002B7A  6E79               	movwf	_was_low_1,c	;volatile
 15477                           
 15478                           ; BSR set to: 0
 15479                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15480  002B7C  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15484  002B80  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15485                           
 15486                           ;interruptHandler.c: 54: }
 15487  002B84  D00F               	goto	i2l8119
 15488  002B86                     i2l857:
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;interruptHandler.c: 55: else{
 15492                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15493  002B86  928B               	bcf	3979,1,c	;volatile
 15494                           
 15495                           ; BSR set to: 0
 15496                           ;interruptHandler.c: 57: was_low_1 = 1;
 15497  002B88  0E00               	movlw	0
 15498  002B8A  6E7A               	movwf	_was_low_1+1,c	;volatile
 15499  002B8C  0E01               	movlw	1
 15500  002B8E  6E79               	movwf	_was_low_1,c	;volatile
 15501                           
 15502                           ; BSR set to: 0
 15503                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15504  002B90  0101               	movlb	1	; () banked
 15505  002B92  511C               	movf	_servoTimes& (0+255),w,b
 15506  002B94  0800               	sublw	0
 15507  002B96  0F20               	addlw	32
 15508  002B98  6ECF               	movwf	4047,c	;volatile
 15509                           
 15510                           ; BSR set to: 1
 15511                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15512  002B9A  0101               	movlb	1	; () banked
 15513  002B9C  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15514  002B9E  0800               	sublw	0
 15515  002BA0  0F20               	addlw	32
 15516  002BA2  6ECE               	movwf	4046,c	;volatile
 15517  002BA4                     i2l8119:
 15518                           
 15519                           ;interruptHandler.c: 60: }
 15520                           ;interruptHandler.c: 61: TMR1ON = 1;
 15521  002BA4  80CD               	bsf	4045,0,c	;volatile
 15522  002BA6                     i2l8121:
 15523                           
 15524                           ;interruptHandler.c: 62: }
 15525                           ;interruptHandler.c: 63: }
 15526                           ;interruptHandler.c: 65: if(TMR3IF){
 15527  002BA6  A2A1               	btfss	4001,1,c	;volatile
 15528  002BA8  D024               	goto	i2l863
 15529                           
 15530                           ;interruptHandler.c: 66: TMR3IF = 0;
 15531  002BAA  92A1               	bcf	4001,1,c	;volatile
 15532                           
 15533                           ;interruptHandler.c: 67: TMR3ON = 0;
 15534  002BAC  90B1               	bcf	4017,0,c	;volatile
 15535                           
 15536                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15537  002BAE  0100               	movlb	0	; () banked
 15538  002BB0  05FC               	decf	_machine_state& (0+255),w,b
 15539  002BB2  A4D8               	btfss	status,2,c
 15540  002BB4  D01E               	goto	i2l863
 15541                           
 15542                           ; BSR set to: 0
 15543                           ;interruptHandler.c: 69: if(was_low_3){
 15544  002BB6  507B               	movf	_was_low_3,w,c	;volatile
 15545  002BB8  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15546  002BBA  B4D8               	btfsc	status,2,c
 15547  002BBC  D00A               	goto	i2l861
 15548                           
 15549                           ; BSR set to: 0
 15550                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15551  002BBE  848B               	bsf	3979,2,c	;volatile
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;interruptHandler.c: 71: was_low_3 = 0;
 15555  002BC0  0E00               	movlw	0
 15556  002BC2  6E7C               	movwf	_was_low_3+1,c	;volatile
 15557  002BC4  0E00               	movlw	0
 15558  002BC6  6E7B               	movwf	_was_low_3,c	;volatile
 15559                           
 15560                           ; BSR set to: 0
 15561                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15562  002BC8  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15566  002BCC  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15567                           
 15568                           ;interruptHandler.c: 74: }
 15569  002BD0  D00F               	goto	i2l8143
 15570  002BD2                     i2l861:
 15571                           
 15572                           ; BSR set to: 0
 15573                           ;interruptHandler.c: 75: else{
 15574                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15575  002BD2  948B               	bcf	3979,2,c	;volatile
 15576                           
 15577                           ; BSR set to: 0
 15578                           ;interruptHandler.c: 77: was_low_3 = 1;
 15579  002BD4  0E00               	movlw	0
 15580  002BD6  6E7C               	movwf	_was_low_3+1,c	;volatile
 15581  002BD8  0E01               	movlw	1
 15582  002BDA  6E7B               	movwf	_was_low_3,c	;volatile
 15583                           
 15584                           ; BSR set to: 0
 15585                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15586  002BDC  0101               	movlb	1	; () banked
 15587  002BDE  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15588  002BE0  0800               	sublw	0
 15589  002BE2  0F20               	addlw	32
 15590  002BE4  6EB3               	movwf	4019,c	;volatile
 15591                           
 15592                           ; BSR set to: 1
 15593                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15594  002BE6  0101               	movlb	1	; () banked
 15595  002BE8  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15596  002BEA  0800               	sublw	0
 15597  002BEC  0F20               	addlw	32
 15598  002BEE  6EB2               	movwf	4018,c	;volatile
 15599  002BF0                     i2l8143:
 15600                           
 15601                           ;interruptHandler.c: 80: }
 15602                           ;interruptHandler.c: 81: TMR3ON = 1;
 15603  002BF0  80B1               	bsf	4017,0,c	;volatile
 15604  002BF2                     i2l863:
 15605  002BF2  C05A  FFF5         	movff	??_handler+15,tablat
 15606  002BF6  C059  FFF8         	movff	??_handler+14,tblptru
 15607  002BFA  C058  FFF7         	movff	??_handler+13,tblptrh
 15608  002BFE  C057  FFF6         	movff	??_handler+12,tblptrl
 15609  002C02  C056  FFF4         	movff	??_handler+11,prodh
 15610  002C06  C055  FFF3         	movff	??_handler+10,prodl
 15611  002C0A  C054  FFDA         	movff	??_handler+9,fsr2h
 15612  002C0E  C053  FFD9         	movff	??_handler+8,fsr2l
 15613  002C12  C052  FFE2         	movff	??_handler+7,fsr1h
 15614  002C16  C051  FFE1         	movff	??_handler+6,fsr1l
 15615  002C1A  C050  FFEA         	movff	??_handler+5,fsr0h
 15616  002C1E  C04F  FFE9         	movff	??_handler+4,fsr0l
 15617  002C22  C04E  FFFB         	movff	??_handler+3,pclatu
 15618  002C26  C04D  FFFA         	movff	??_handler+2,pclath
 15619  002C2A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15620  002C2C  0011               	retfie		f
 15621  002C2E                     __end_of_handler:
 15622                           	opt stack 0
 15623                           pclatu	equ	0xFFB
 15624                           pclath	equ	0xFFA
 15625                           tblptru	equ	0xFF8
 15626                           tblptrh	equ	0xFF7
 15627                           tblptrl	equ	0xFF6
 15628                           tablat	equ	0xFF5
 15629                           prodh	equ	0xFF4
 15630                           prodl	equ	0xFF3
 15631                           intcon	equ	0xFF2
 15632                           intcon2	equ	0xFF1
 15633                           intcon3	equ	0xFF0
 15634                           indf0	equ	0xFEF
 15635                           postinc0	equ	0xFEE
 15636                           fsr0h	equ	0xFEA
 15637                           fsr0l	equ	0xFE9
 15638                           wreg	equ	0xFE8
 15639                           postdec1	equ	0xFE5
 15640                           fsr1h	equ	0xFE2
 15641                           fsr1l	equ	0xFE1
 15642                           indf2	equ	0xFDF
 15643                           postinc2	equ	0xFDE
 15644                           postdec2	equ	0xFDD
 15645                           fsr2h	equ	0xFDA
 15646                           fsr2l	equ	0xFD9
 15647                           status	equ	0xFD8
 15648                           
 15649 ;; *************** function _updateMenu *****************
 15650 ;; Defined at:
 15651 ;;		line 213 in file "UI.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;		None
 15654 ;; Auto vars:     Size  Location     Type
 15655 ;;		None
 15656 ;; Return value:  Size  Location     Type
 15657 ;;                  1    wreg      void 
 15658 ;; Registers used:
 15659 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15660 ;; Tracked objects:
 15661 ;;		On entry : 0/0
 15662 ;;		On exit  : 0/0
 15663 ;;		Unchanged: 0/0
 15664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15667 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15669 ;;Total ram usage:        2 bytes
 15670 ;; Hardware stack levels used:    1
 15671 ;; Hardware stack levels required when called:    5
 15672 ;; This function calls:
 15673 ;;		_change_state_to_logs_11
 15674 ;;		_change_state_to_logs_12
 15675 ;;		_change_state_to_logs_22
 15676 ;;		_change_state_to_logs_23
 15677 ;;		_change_state_to_logs_33
 15678 ;;		_change_state_to_logs_34
 15679 ;;		_change_state_to_menu_11
 15680 ;;		_change_state_to_menu_23
 15681 ;;		_dispLogs
 15682 ;;		_inputHandler
 15683 ;;		i2_change_state_to_menu_12
 15684 ;;		i2_change_state_to_menu_22
 15685 ;;		i2_change_state_to_menu_start
 15686 ;; This function is called by:
 15687 ;;		_handler
 15688 ;; This function uses a non-reentrant model
 15689 ;;
 15690                           
 15691                           	psect	text58
 15692  0021F2                     __ptext58:
 15693                           	opt stack 0
 15694  0021F2                     _updateMenu:
 15695                           	opt stack 18
 15696                           
 15697                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 15698                           
 15699                           ;incstack = 0
 15700  0021F2  0E00               	movlw	0
 15701  0021F4  6E78               	movwf	_up+1,c
 15702  0021F6  0E00               	movlw	0
 15703  0021F8  6E77               	movwf	_up,c
 15704  0021FA  0E00               	movlw	0
 15705  0021FC  6E68               	movwf	_down+1,c
 15706  0021FE  0E00               	movlw	0
 15707  002200  6E67               	movwf	_down,c
 15708  002202  0E00               	movlw	0
 15709  002204  6E6A               	movwf	_enter+1,c
 15710  002206  0E00               	movlw	0
 15711  002208  6E69               	movwf	_enter,c
 15712  00220A  0E00               	movlw	0
 15713  00220C  6E5C               	movwf	_back+1,c
 15714  00220E  0E00               	movlw	0
 15715  002210  6E5B               	movwf	_back,c
 15716                           
 15717                           ;UI.c: 215: (INTCONbits.GIE = 0);
 15718  002212  9EF2               	bcf	intcon,7,c	;volatile
 15719                           
 15720                           ;UI.c: 217: if (inputHandler()
 15721                           ;UI.c: 220: ){
 15722  002214  EC6D  F014         	call	_inputHandler	;wreg free
 15723  002218  502A               	movf	?_inputHandler,w,c
 15724  00221A  102B               	iorwf	?_inputHandler+1,w,c
 15725  00221C  A4D8               	btfss	status,2,c
 15726  00221E  D112               	goto	i2l7819
 15727  002220  D146               	goto	i2l257
 15728  002222                     i2l7671:
 15729                           
 15730                           ;UI.c: 224: change_state_to_menu_11();
 15731  002222  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 15732                           
 15733                           ;UI.c: 225: break;
 15734  002226  D143               	goto	i2l257
 15735  002228                     i2l7673:
 15736                           
 15737                           ;UI.c: 228: if(up){
 15738  002228  5077               	movf	_up,w,c
 15739  00222A  1078               	iorwf	_up+1,w,c
 15740  00222C  B4D8               	btfsc	status,2,c
 15741  00222E  D003               	goto	i2l7677
 15742                           
 15743                           ;UI.c: 229: change_state_to_menu_23();
 15744  002230  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15745                           
 15746                           ;UI.c: 230: }
 15747  002234  D13C               	goto	i2l257
 15748  002236                     i2l7677:
 15749                           
 15750                           ;UI.c: 231: else if(down){
 15751  002236  5067               	movf	_down,w,c
 15752  002238  1068               	iorwf	_down+1,w,c
 15753  00223A  B4D8               	btfsc	status,2,c
 15754  00223C  D003               	goto	i2l7681
 15755                           
 15756                           ;UI.c: 232: change_state_to_menu_12();
 15757  00223E  EC9B  F021         	call	i2_change_state_to_menu_12	;wreg free
 15758                           
 15759                           ;UI.c: 233: }
 15760  002242  D135               	goto	i2l257
 15761  002244                     i2l7681:
 15762                           
 15763                           ;UI.c: 234: else if(enter){
 15764  002244  5069               	movf	_enter,w,c
 15765  002246  106A               	iorwf	_enter+1,w,c
 15766  002248  B4D8               	btfsc	status,2,c
 15767  00224A  D131               	goto	i2l257
 15768                           
 15769                           ;UI.c: 235: change_state_to_menu_start();
 15770  00224C  ECE1  F022         	call	i2_change_state_to_menu_start	;wreg free
 15771                           
 15772                           ;UI.c: 236: }
 15773                           ;UI.c: 237: break;
 15774  002250  D12E               	goto	i2l257
 15775  002252                     i2l7685:
 15776                           
 15777                           ;UI.c: 240: if(up){
 15778  002252  5077               	movf	_up,w,c
 15779  002254  1078               	iorwf	_up+1,w,c
 15780  002256  B4D8               	btfsc	status,2,c
 15781  002258  D003               	goto	i2l7689
 15782                           
 15783                           ;UI.c: 241: change_state_to_menu_11();
 15784  00225A  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 15785                           
 15786                           ;UI.c: 242: }
 15787  00225E  D127               	goto	i2l257
 15788  002260                     i2l7689:
 15789                           
 15790                           ;UI.c: 243: else if(down){
 15791  002260  5067               	movf	_down,w,c
 15792  002262  1068               	iorwf	_down+1,w,c
 15793  002264  B4D8               	btfsc	status,2,c
 15794  002266  D011               	goto	i2l7705
 15795                           
 15796                           ;UI.c: 244: change_state_to_menu_23();
 15797  002268  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15798                           
 15799                           ;UI.c: 245: }
 15800  00226C  D120               	goto	i2l257
 15801  00226E                     i2l7697:
 15802                           
 15803                           ;UI.c: 252: if(up){
 15804  00226E  5077               	movf	_up,w,c
 15805  002270  1078               	iorwf	_up+1,w,c
 15806  002272  B4D8               	btfsc	status,2,c
 15807  002274  D003               	goto	i2l7701
 15808                           
 15809                           ;UI.c: 253: change_state_to_menu_11();
 15810  002276  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 15811                           
 15812                           ;UI.c: 254: }
 15813  00227A  D119               	goto	i2l257
 15814  00227C                     i2l7701:
 15815                           
 15816                           ;UI.c: 255: else if(down){
 15817  00227C  5067               	movf	_down,w,c
 15818  00227E  1068               	iorwf	_down+1,w,c
 15819  002280  B4D8               	btfsc	status,2,c
 15820  002282  D003               	goto	i2l7705
 15821                           
 15822                           ;UI.c: 256: change_state_to_menu_23();
 15823  002284  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15824                           
 15825                           ;UI.c: 257: }
 15826  002288  D112               	goto	i2l257
 15827  00228A                     i2l7705:
 15828                           
 15829                           ;UI.c: 258: else if(enter){
 15830  00228A  5069               	movf	_enter,w,c
 15831  00228C  106A               	iorwf	_enter+1,w,c
 15832  00228E  B4D8               	btfsc	status,2,c
 15833  002290  D10E               	goto	i2l257
 15834                           
 15835                           ;UI.c: 259: machine_state = Sorting_state;
 15836  002292  0E01               	movlw	1
 15837  002294  0100               	movlb	0	; () banked
 15838  002296  6FFC               	movwf	_machine_state& (0+255),b
 15839                           
 15840                           ; BSR set to: 0
 15841                           ;UI.c: 260: }
 15842                           ;UI.c: 261: break;
 15843                           
 15844                           ; BSR set to: 0
 15845                           
 15846                           ; BSR set to: 0
 15847  002298  D10A               	goto	i2l257
 15848  00229A                     i2l7709:
 15849                           
 15850                           ;UI.c: 264: if(up){
 15851  00229A  5077               	movf	_up,w,c
 15852  00229C  1078               	iorwf	_up+1,w,c
 15853  00229E  B4D8               	btfsc	status,2,c
 15854  0022A0  D003               	goto	i2l7713
 15855                           
 15856                           ;UI.c: 265: change_state_to_menu_22();
 15857  0022A2  EC83  F021         	call	i2_change_state_to_menu_22	;wreg free
 15858                           
 15859                           ;UI.c: 266: }
 15860  0022A6  D103               	goto	i2l257
 15861  0022A8                     i2l7713:
 15862                           
 15863                           ;UI.c: 267: else if(down){
 15864  0022A8  5067               	movf	_down,w,c
 15865  0022AA  1068               	iorwf	_down+1,w,c
 15866  0022AC  B4D8               	btfsc	status,2,c
 15867  0022AE  D003               	goto	i2l7717
 15868                           
 15869                           ;UI.c: 268: change_state_to_menu_11();
 15870  0022B0  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 15871                           
 15872                           ;UI.c: 269: }
 15873  0022B4  D0FC               	goto	i2l257
 15874  0022B6                     i2l7717:
 15875                           
 15876                           ;UI.c: 270: else if(enter){
 15877  0022B6  5069               	movf	_enter,w,c
 15878  0022B8  106A               	iorwf	_enter+1,w,c
 15879  0022BA  B4D8               	btfsc	status,2,c
 15880  0022BC  D0F8               	goto	i2l257
 15881                           
 15882                           ;UI.c: 271: change_state_to_logs_11();
 15883  0022BE  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 15884                           
 15885                           ;UI.c: 272: }
 15886                           ;UI.c: 273: break;
 15887  0022C2  D0F5               	goto	i2l257
 15888  0022C4                     i2l7721:
 15889                           
 15890                           ;UI.c: 276: if(up){
 15891  0022C4  5077               	movf	_up,w,c
 15892  0022C6  1078               	iorwf	_up+1,w,c
 15893  0022C8  B4D8               	btfsc	status,2,c
 15894  0022CA  D003               	goto	i2l7725
 15895                           
 15896                           ;UI.c: 277: change_state_to_logs_34();
 15897  0022CC  ECE3  F021         	call	_change_state_to_logs_34	;wreg free
 15898                           
 15899                           ;UI.c: 278: }
 15900  0022D0  D0EE               	goto	i2l257
 15901  0022D2                     i2l7725:
 15902                           
 15903                           ;UI.c: 279: else if(down){
 15904  0022D2  5067               	movf	_down,w,c
 15905  0022D4  1068               	iorwf	_down+1,w,c
 15906  0022D6  B4D8               	btfsc	status,2,c
 15907  0022D8  D003               	goto	i2l7729
 15908                           
 15909                           ;UI.c: 280: change_state_to_logs_12();
 15910  0022DA  EC2B  F022         	call	_change_state_to_logs_12	;wreg free
 15911                           
 15912                           ;UI.c: 281: }
 15913  0022DE  D0E7               	goto	i2l257
 15914  0022E0                     i2l7729:
 15915                           
 15916                           ;UI.c: 282: else if(enter){
 15917  0022E0  5069               	movf	_enter,w,c
 15918  0022E2  106A               	iorwf	_enter+1,w,c
 15919  0022E4  B4D8               	btfsc	status,2,c
 15920  0022E6  D007               	goto	i2l7733
 15921                           
 15922                           ;UI.c: 283: dispLogs(1);
 15923  0022E8  0E00               	movlw	0
 15924  0022EA  6E13               	movwf	dispLogs@myLog+1,c
 15925  0022EC  0E01               	movlw	1
 15926  0022EE  6E12               	movwf	dispLogs@myLog,c
 15927  0022F0  EC1B  F023         	call	_dispLogs	;wreg free
 15928                           
 15929                           ;UI.c: 284: }
 15930  0022F4  D0DC               	goto	i2l257
 15931  0022F6                     i2l7733:
 15932                           
 15933                           ;UI.c: 285: else if(back){
 15934  0022F6  505B               	movf	_back,w,c
 15935  0022F8  105C               	iorwf	_back+1,w,c
 15936  0022FA  B4D8               	btfsc	status,2,c
 15937  0022FC  D0D8               	goto	i2l257
 15938                           
 15939                           ;UI.c: 286: change_state_to_menu_23();
 15940  0022FE  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15941                           
 15942                           ;UI.c: 287: }
 15943                           ;UI.c: 288: break;
 15944  002302  D0D5               	goto	i2l257
 15945  002304                     i2l7737:
 15946                           
 15947                           ;UI.c: 291: if(up){
 15948  002304  5077               	movf	_up,w,c
 15949  002306  1078               	iorwf	_up+1,w,c
 15950  002308  B4D8               	btfsc	status,2,c
 15951  00230A  D003               	goto	i2l7741
 15952                           
 15953                           ;UI.c: 292: change_state_to_logs_11();
 15954  00230C  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 15955                           
 15956                           ;UI.c: 293: }
 15957  002310  D0CE               	goto	i2l257
 15958  002312                     i2l7741:
 15959                           
 15960                           ;UI.c: 294: else if(down){
 15961  002312  5067               	movf	_down,w,c
 15962  002314  1068               	iorwf	_down+1,w,c
 15963  002316  B4D8               	btfsc	status,2,c
 15964  002318  D003               	goto	i2l7745
 15965                           
 15966                           ;UI.c: 295: change_state_to_logs_23();
 15967  00231A  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 15968                           
 15969                           ;UI.c: 296: }
 15970  00231E  D0C7               	goto	i2l257
 15971  002320                     i2l7745:
 15972                           
 15973                           ;UI.c: 297: else if(enter){
 15974  002320  5069               	movf	_enter,w,c
 15975  002322  106A               	iorwf	_enter+1,w,c
 15976  002324  B4D8               	btfsc	status,2,c
 15977  002326  D007               	goto	i2l7749
 15978                           
 15979                           ;UI.c: 298: dispLogs(2);
 15980  002328  0E00               	movlw	0
 15981  00232A  6E13               	movwf	dispLogs@myLog+1,c
 15982  00232C  0E02               	movlw	2
 15983  00232E  6E12               	movwf	dispLogs@myLog,c
 15984  002330  EC1B  F023         	call	_dispLogs	;wreg free
 15985                           
 15986                           ;UI.c: 299: }
 15987  002334  D0BC               	goto	i2l257
 15988  002336                     i2l7749:
 15989                           
 15990                           ;UI.c: 300: else if(back){
 15991  002336  505B               	movf	_back,w,c
 15992  002338  105C               	iorwf	_back+1,w,c
 15993  00233A  B4D8               	btfsc	status,2,c
 15994  00233C  D0B8               	goto	i2l257
 15995                           
 15996                           ;UI.c: 301: change_state_to_menu_23();
 15997  00233E  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15998                           
 15999                           ;UI.c: 302: }
 16000                           ;UI.c: 303: break;
 16001  002342  D0B5               	goto	i2l257
 16002  002344                     i2l7753:
 16003                           
 16004                           ;UI.c: 306: if(up){
 16005  002344  5077               	movf	_up,w,c
 16006  002346  1078               	iorwf	_up+1,w,c
 16007  002348  B4D8               	btfsc	status,2,c
 16008  00234A  D003               	goto	i2l7757
 16009                           
 16010                           ;UI.c: 307: change_state_to_logs_11();
 16011  00234C  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 16012                           
 16013                           ;UI.c: 308: }
 16014  002350  D0AE               	goto	i2l257
 16015  002352                     i2l7757:
 16016                           
 16017                           ;UI.c: 309: else if(down){
 16018  002352  5067               	movf	_down,w,c
 16019  002354  1068               	iorwf	_down+1,w,c
 16020  002356  B4D8               	btfsc	status,2,c
 16021  002358  D003               	goto	i2l7761
 16022                           
 16023                           ;UI.c: 310: change_state_to_logs_23();
 16024  00235A  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 16025                           
 16026                           ;UI.c: 311: }
 16027  00235E  D0A7               	goto	i2l257
 16028  002360                     i2l7761:
 16029                           
 16030                           ;UI.c: 312: else if(enter){
 16031  002360  5069               	movf	_enter,w,c
 16032  002362  106A               	iorwf	_enter+1,w,c
 16033  002364  B4D8               	btfsc	status,2,c
 16034  002366  D007               	goto	i2l7765
 16035                           
 16036                           ;UI.c: 313: dispLogs(2);
 16037  002368  0E00               	movlw	0
 16038  00236A  6E13               	movwf	dispLogs@myLog+1,c
 16039  00236C  0E02               	movlw	2
 16040  00236E  6E12               	movwf	dispLogs@myLog,c
 16041  002370  EC1B  F023         	call	_dispLogs	;wreg free
 16042                           
 16043                           ;UI.c: 314: }
 16044  002374  D09C               	goto	i2l257
 16045  002376                     i2l7765:
 16046                           
 16047                           ;UI.c: 315: else if(back){
 16048  002376  505B               	movf	_back,w,c
 16049  002378  105C               	iorwf	_back+1,w,c
 16050  00237A  B4D8               	btfsc	status,2,c
 16051  00237C  D098               	goto	i2l257
 16052                           
 16053                           ;UI.c: 316: change_state_to_menu_23();
 16054  00237E  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16055                           
 16056                           ;UI.c: 317: }
 16057                           ;UI.c: 318: break;
 16058  002382  D095               	goto	i2l257
 16059  002384                     i2l7769:
 16060                           
 16061                           ;UI.c: 321: if(up){
 16062  002384  5077               	movf	_up,w,c
 16063  002386  1078               	iorwf	_up+1,w,c
 16064  002388  B4D8               	btfsc	status,2,c
 16065  00238A  D003               	goto	i2l7773
 16066                           
 16067                           ;UI.c: 322: change_state_to_logs_22();
 16068  00238C  EC13  F022         	call	_change_state_to_logs_22	;wreg free
 16069                           
 16070                           ;UI.c: 323: }
 16071  002390  D08E               	goto	i2l257
 16072  002392                     i2l7773:
 16073                           
 16074                           ;UI.c: 324: else if(down){
 16075  002392  5067               	movf	_down,w,c
 16076  002394  1068               	iorwf	_down+1,w,c
 16077  002396  B4D8               	btfsc	status,2,c
 16078  002398  D003               	goto	i2l7777
 16079                           
 16080                           ;UI.c: 325: change_state_to_logs_34();
 16081  00239A  ECE3  F021         	call	_change_state_to_logs_34	;wreg free
 16082                           
 16083                           ;UI.c: 326: }
 16084  00239E  D087               	goto	i2l257
 16085  0023A0                     i2l7777:
 16086                           
 16087                           ;UI.c: 327: else if(enter){
 16088  0023A0  5069               	movf	_enter,w,c
 16089  0023A2  106A               	iorwf	_enter+1,w,c
 16090  0023A4  B4D8               	btfsc	status,2,c
 16091  0023A6  D007               	goto	i2l7781
 16092                           
 16093                           ;UI.c: 328: dispLogs(3);
 16094  0023A8  0E00               	movlw	0
 16095  0023AA  6E13               	movwf	dispLogs@myLog+1,c
 16096  0023AC  0E03               	movlw	3
 16097  0023AE  6E12               	movwf	dispLogs@myLog,c
 16098  0023B0  EC1B  F023         	call	_dispLogs	;wreg free
 16099                           
 16100                           ;UI.c: 329: }
 16101  0023B4  D07C               	goto	i2l257
 16102  0023B6                     i2l7781:
 16103                           
 16104                           ;UI.c: 330: else if(back){
 16105  0023B6  505B               	movf	_back,w,c
 16106  0023B8  105C               	iorwf	_back+1,w,c
 16107  0023BA  B4D8               	btfsc	status,2,c
 16108  0023BC  D078               	goto	i2l257
 16109                           
 16110                           ;UI.c: 331: change_state_to_menu_23();
 16111  0023BE  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16112                           
 16113                           ;UI.c: 332: }
 16114                           ;UI.c: 333: break;
 16115  0023C2  D075               	goto	i2l257
 16116  0023C4                     i2l7785:
 16117                           
 16118                           ;UI.c: 336: if(up){
 16119  0023C4  5077               	movf	_up,w,c
 16120  0023C6  1078               	iorwf	_up+1,w,c
 16121  0023C8  B4D8               	btfsc	status,2,c
 16122  0023CA  D003               	goto	i2l7789
 16123                           
 16124                           ;UI.c: 337: change_state_to_logs_22();
 16125  0023CC  EC13  F022         	call	_change_state_to_logs_22	;wreg free
 16126                           
 16127                           ;UI.c: 338: }
 16128  0023D0  D06E               	goto	i2l257
 16129  0023D2                     i2l7789:
 16130                           
 16131                           ;UI.c: 339: else if(down){
 16132  0023D2  5067               	movf	_down,w,c
 16133  0023D4  1068               	iorwf	_down+1,w,c
 16134  0023D6  B4D8               	btfsc	status,2,c
 16135  0023D8  D003               	goto	i2l7793
 16136                           
 16137                           ;UI.c: 340: change_state_to_logs_34();
 16138  0023DA  ECE3  F021         	call	_change_state_to_logs_34	;wreg free
 16139                           
 16140                           ;UI.c: 341: }
 16141  0023DE  D067               	goto	i2l257
 16142  0023E0                     i2l7793:
 16143                           
 16144                           ;UI.c: 342: else if(enter){
 16145  0023E0  5069               	movf	_enter,w,c
 16146  0023E2  106A               	iorwf	_enter+1,w,c
 16147  0023E4  B4D8               	btfsc	status,2,c
 16148  0023E6  D007               	goto	i2l7797
 16149                           
 16150                           ;UI.c: 343: dispLogs(3);
 16151  0023E8  0E00               	movlw	0
 16152  0023EA  6E13               	movwf	dispLogs@myLog+1,c
 16153  0023EC  0E03               	movlw	3
 16154  0023EE  6E12               	movwf	dispLogs@myLog,c
 16155  0023F0  EC1B  F023         	call	_dispLogs	;wreg free
 16156                           
 16157                           ;UI.c: 344: }
 16158  0023F4  D05C               	goto	i2l257
 16159  0023F6                     i2l7797:
 16160                           
 16161                           ;UI.c: 345: else if(back){
 16162  0023F6  505B               	movf	_back,w,c
 16163  0023F8  105C               	iorwf	_back+1,w,c
 16164  0023FA  B4D8               	btfsc	status,2,c
 16165  0023FC  D058               	goto	i2l257
 16166                           
 16167                           ;UI.c: 346: change_state_to_menu_23();
 16168  0023FE  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16169                           
 16170                           ;UI.c: 347: }
 16171                           ;UI.c: 348: break;
 16172  002402  D055               	goto	i2l257
 16173  002404                     i2l7801:
 16174                           
 16175                           ;UI.c: 351: if(up){
 16176  002404  5077               	movf	_up,w,c
 16177  002406  1078               	iorwf	_up+1,w,c
 16178  002408  B4D8               	btfsc	status,2,c
 16179  00240A  D003               	goto	i2l7805
 16180                           
 16181                           ;UI.c: 352: change_state_to_logs_33();
 16182  00240C  ECFB  F021         	call	_change_state_to_logs_33	;wreg free
 16183                           
 16184                           ;UI.c: 353: }
 16185  002410  D04E               	goto	i2l257
 16186  002412                     i2l7805:
 16187                           
 16188                           ;UI.c: 354: else if(down){
 16189  002412  5067               	movf	_down,w,c
 16190  002414  1068               	iorwf	_down+1,w,c
 16191  002416  B4D8               	btfsc	status,2,c
 16192  002418  D003               	goto	i2l7809
 16193                           
 16194                           ;UI.c: 355: change_state_to_logs_11();
 16195  00241A  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 16196                           
 16197                           ;UI.c: 356: }
 16198  00241E  D047               	goto	i2l257
 16199  002420                     i2l7809:
 16200                           
 16201                           ;UI.c: 357: else if(enter){
 16202  002420  5069               	movf	_enter,w,c
 16203  002422  106A               	iorwf	_enter+1,w,c
 16204  002424  B4D8               	btfsc	status,2,c
 16205  002426  D007               	goto	i2l7813
 16206                           
 16207                           ;UI.c: 358: dispLogs(4);
 16208  002428  0E00               	movlw	0
 16209  00242A  6E13               	movwf	dispLogs@myLog+1,c
 16210  00242C  0E04               	movlw	4
 16211  00242E  6E12               	movwf	dispLogs@myLog,c
 16212  002430  EC1B  F023         	call	_dispLogs	;wreg free
 16213                           
 16214                           ;UI.c: 359: }
 16215  002434  D03C               	goto	i2l257
 16216  002436                     i2l7813:
 16217                           
 16218                           ;UI.c: 360: else if(back){
 16219  002436  505B               	movf	_back,w,c
 16220  002438  105C               	iorwf	_back+1,w,c
 16221  00243A  B4D8               	btfsc	status,2,c
 16222  00243C  D038               	goto	i2l257
 16223                           
 16224                           ;UI.c: 361: change_state_to_menu_23();
 16225  00243E  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16226                           
 16227                           ;UI.c: 367: }
 16228                           
 16229                           ;UI.c: 366: break;
 16230                           
 16231                           ;UI.c: 365: default:
 16232                           
 16233                           ;UI.c: 362: }
 16234                           ;UI.c: 363: break;
 16235  002442  D035               	goto	i2l257
 16236  002444                     i2l7819:
 16237  002444  C0E0  F043         	movff	_cur_state,??_updateMenu
 16238  002448  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16239                           
 16240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16241                           ; Switch size 1, requested type "space"
 16242                           ; Number of cases is 3, Range of values is 0 to 4
 16243                           ; switch strategies available:
 16244                           ; Name         Instructions Cycles
 16245                           ; simple_byte           10     6 (average)
 16246                           ;	Chosen strategy is simple_byte
 16247  00244C  5044               	movf	??_updateMenu+1,w,c
 16248  00244E  0A00               	xorlw	0	; case 0
 16249  002450  B4D8               	btfsc	status,2,c
 16250  002452  D007               	goto	i2l8407
 16251  002454  0A03               	xorlw	3	; case 3
 16252  002456  B4D8               	btfsc	status,2,c
 16253  002458  D015               	goto	i2l8409
 16254  00245A  0A07               	xorlw	7	; case 4
 16255  00245C  B4D8               	btfsc	status,2,c
 16256  00245E  D020               	goto	i2l8411
 16257  002460  D026               	goto	i2l257
 16258  002462                     i2l8407:
 16259                           
 16260                           ; Switch size 1, requested type "space"
 16261                           ; Number of cases is 5, Range of values is 0 to 23
 16262                           ; switch strategies available:
 16263                           ; Name         Instructions Cycles
 16264                           ; simple_byte           16     9 (average)
 16265                           ;	Chosen strategy is simple_byte
 16266  002462  5043               	movf	??_updateMenu,w,c
 16267  002464  0A00               	xorlw	0	; case 0
 16268  002466  B4D8               	btfsc	status,2,c
 16269  002468  D6DC               	goto	i2l7671
 16270  00246A  0A0B               	xorlw	11	; case 11
 16271  00246C  B4D8               	btfsc	status,2,c
 16272  00246E  D6DC               	goto	i2l7673
 16273  002470  0A07               	xorlw	7	; case 12
 16274  002472  B4D8               	btfsc	status,2,c
 16275  002474  D6EE               	goto	i2l7685
 16276  002476  0A1A               	xorlw	26	; case 22
 16277  002478  B4D8               	btfsc	status,2,c
 16278  00247A  D6F9               	goto	i2l7697
 16279  00247C  0A01               	xorlw	1	; case 23
 16280  00247E  B4D8               	btfsc	status,2,c
 16281  002480  D70C               	goto	i2l7709
 16282  002482  D015               	goto	i2l257
 16283  002484                     i2l8409:
 16284                           
 16285                           ; Switch size 1, requested type "space"
 16286                           ; Number of cases is 4, Range of values is 243 to 255
 16287                           ; switch strategies available:
 16288                           ; Name         Instructions Cycles
 16289                           ; simple_byte           13     7 (average)
 16290                           ;	Chosen strategy is simple_byte
 16291  002484  5043               	movf	??_updateMenu,w,c
 16292  002486  0AF3               	xorlw	243	; case 243
 16293  002488  B4D8               	btfsc	status,2,c
 16294  00248A  D71C               	goto	i2l7721
 16295  00248C  0A07               	xorlw	7	; case 244
 16296  00248E  B4D8               	btfsc	status,2,c
 16297  002490  D739               	goto	i2l7737
 16298  002492  0A0A               	xorlw	10	; case 254
 16299  002494  B4D8               	btfsc	status,2,c
 16300  002496  D756               	goto	i2l7753
 16301  002498  0A01               	xorlw	1	; case 255
 16302  00249A  B4D8               	btfsc	status,2,c
 16303  00249C  D773               	goto	i2l7769
 16304  00249E  D007               	goto	i2l257
 16305  0024A0                     i2l8411:
 16306                           
 16307                           ; Switch size 1, requested type "space"
 16308                           ; Number of cases is 2, Range of values is 9 to 10
 16309                           ; switch strategies available:
 16310                           ; Name         Instructions Cycles
 16311                           ; simple_byte            7     4 (average)
 16312                           ;	Chosen strategy is simple_byte
 16313  0024A0  5043               	movf	??_updateMenu,w,c
 16314  0024A2  0A09               	xorlw	9	; case 9
 16315  0024A4  B4D8               	btfsc	status,2,c
 16316  0024A6  D78E               	goto	i2l7785
 16317  0024A8  0A03               	xorlw	3	; case 10
 16318  0024AA  B4D8               	btfsc	status,2,c
 16319  0024AC  D7AB               	goto	i2l7801
 16320  0024AE                     i2l257:
 16321                           
 16322                           ;UI.c: 368: }
 16323                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16324  0024AE  8EF2               	bsf	intcon,7,c	;volatile
 16325  0024B0  0012               	return		;funcret
 16326  0024B2                     __end_of_updateMenu:
 16327                           	opt stack 0
 16328                           pclatu	equ	0xFFB
 16329                           pclath	equ	0xFFA
 16330                           tblptru	equ	0xFF8
 16331                           tblptrh	equ	0xFF7
 16332                           tblptrl	equ	0xFF6
 16333                           tablat	equ	0xFF5
 16334                           prodh	equ	0xFF4
 16335                           prodl	equ	0xFF3
 16336                           intcon	equ	0xFF2
 16337                           intcon2	equ	0xFF1
 16338                           intcon3	equ	0xFF0
 16339                           indf0	equ	0xFEF
 16340                           postinc0	equ	0xFEE
 16341                           fsr0h	equ	0xFEA
 16342                           fsr0l	equ	0xFE9
 16343                           wreg	equ	0xFE8
 16344                           postdec1	equ	0xFE5
 16345                           fsr1h	equ	0xFE2
 16346                           fsr1l	equ	0xFE1
 16347                           indf2	equ	0xFDF
 16348                           postinc2	equ	0xFDE
 16349                           postdec2	equ	0xFDD
 16350                           fsr2h	equ	0xFDA
 16351                           fsr2l	equ	0xFD9
 16352                           status	equ	0xFD8
 16353                           
 16354 ;; *************** function i2_change_state_to_menu_start *****************
 16355 ;; Defined at:
 16356 ;;		line 474 in file "UI.c"
 16357 ;; Parameters:    Size  Location     Type
 16358 ;;		None
 16359 ;; Auto vars:     Size  Location     Type
 16360 ;;		None
 16361 ;; Return value:  Size  Location     Type
 16362 ;;                  1    wreg      void 
 16363 ;; Registers used:
 16364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16365 ;; Tracked objects:
 16366 ;;		On entry : 0/0
 16367 ;;		On exit  : 0/0
 16368 ;;		Unchanged: 0/0
 16369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16374 ;;Total ram usage:        0 bytes
 16375 ;; Hardware stack levels used:    1
 16376 ;; Hardware stack levels required when called:    4
 16377 ;; This function calls:
 16378 ;;		i2_lcdInst
 16379 ;;		i2_printRTC
 16380 ;;		i2_printf
 16381 ;; This function is called by:
 16382 ;;		_updateMenu
 16383 ;; This function uses a non-reentrant model
 16384 ;;
 16385                           
 16386                           	psect	text59
 16387  0045C2                     __ptext59:
 16388                           	opt stack 0
 16389  0045C2                     i2_change_state_to_menu_start:
 16390                           	opt stack 18
 16391                           
 16392                           ;UI.c: 475: cur_state = 0;
 16393                           
 16394                           ;incstack = 0
 16395  0045C2  0E00               	movlw	0
 16396  0045C4  0100               	movlb	0	; () banked
 16397  0045C6  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16398  0045C8  0E00               	movlw	0
 16399  0045CA  6FE0               	movwf	_cur_state& (0+255),b
 16400                           
 16401                           ; BSR set to: 0
 16402                           ;UI.c: 477: lcdInst(0b10000000);;
 16403  0045CC  0E80               	movlw	128
 16404  0045CE  ECA9  F023         	call	i2_lcdInst
 16405                           
 16406                           ;UI.c: 478: printRTC();
 16407  0045D2  EC59  F012         	call	i2_printRTC	;wreg free
 16408                           
 16409                           ;UI.c: 479: lcdInst(0b11000000);;
 16410  0045D6  0EC0               	movlw	192
 16411  0045D8  ECA9  F023         	call	i2_lcdInst
 16412                           
 16413                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16414  0045DC  0EF7               	movlw	low STR_30
 16415  0045DE  6E0D               	movwf	i2printf@f,c
 16416  0045E0  0EFD               	movlw	high STR_30
 16417  0045E2  6E0E               	movwf	i2printf@f+1,c
 16418  0045E4  ECD4  F00A         	call	i2_printf	;wreg free
 16419  0045E8  0012               	return		;funcret
 16420  0045EA                     __end_ofi2_change_state_to_menu_start:
 16421                           	opt stack 0
 16422                           pclatu	equ	0xFFB
 16423                           pclath	equ	0xFFA
 16424                           tblptru	equ	0xFF8
 16425                           tblptrh	equ	0xFF7
 16426                           tblptrl	equ	0xFF6
 16427                           tablat	equ	0xFF5
 16428                           prodh	equ	0xFF4
 16429                           prodl	equ	0xFF3
 16430                           intcon	equ	0xFF2
 16431                           intcon2	equ	0xFF1
 16432                           intcon3	equ	0xFF0
 16433                           indf0	equ	0xFEF
 16434                           postinc0	equ	0xFEE
 16435                           fsr0h	equ	0xFEA
 16436                           fsr0l	equ	0xFE9
 16437                           wreg	equ	0xFE8
 16438                           postdec1	equ	0xFE5
 16439                           fsr1h	equ	0xFE2
 16440                           fsr1l	equ	0xFE1
 16441                           indf2	equ	0xFDF
 16442                           postinc2	equ	0xFDE
 16443                           postdec2	equ	0xFDD
 16444                           fsr2h	equ	0xFDA
 16445                           fsr2l	equ	0xFD9
 16446                           status	equ	0xFD8
 16447                           
 16448 ;; *************** function i2_printRTC *****************
 16449 ;; Defined at:
 16450 ;;		line 63 in file "RTC.c"
 16451 ;; Parameters:    Size  Location     Type
 16452 ;;		None
 16453 ;; Auto vars:     Size  Location     Type
 16454 ;;  printRTC       14   44[COMRAM] int [7]
 16455 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16456 ;;  printRTC        2   64[COMRAM] int 
 16457 ;;  printRTC        2   58[COMRAM] int 
 16458 ;; Return value:  Size  Location     Type
 16459 ;;                  1    wreg      void 
 16460 ;; Registers used:
 16461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16462 ;; Tracked objects:
 16463 ;;		On entry : 0/0
 16464 ;;		On exit  : 0/0
 16465 ;;		Unchanged: 0/0
 16466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16468 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16469 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16470 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16471 ;;Total ram usage:       25 bytes
 16472 ;; Hardware stack levels used:    1
 16473 ;; Hardware stack levels required when called:    3
 16474 ;; This function calls:
 16475 ;;		i2_getRTC
 16476 ;;		i2_lcdInst
 16477 ;;		i2_printf
 16478 ;;		i2_strcpy
 16479 ;; This function is called by:
 16480 ;;		i2_change_state_to_menu_start
 16481 ;; This function uses a non-reentrant model
 16482 ;;
 16483                           
 16484                           	psect	text60
 16485  0024B2                     __ptext60:
 16486                           	opt stack 0
 16487  0024B2                     i2_printRTC:
 16488                           	opt stack 18
 16489                           
 16490                           ;RTC.c: 64: getRTC();
 16491                           
 16492                           ;incstack = 0
 16493  0024B2  EC26  F01E         	call	i2_getRTC	;wreg free
 16494                           
 16495                           ;RTC.c: 65: char month[] = "MMM";
 16496  0024B6  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 16497  0024BA  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 16498  0024BE  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 16499  0024C2  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 16500                           
 16501                           ;RTC.c: 66: int INT_time[7];
 16502                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16503  0024C6  0E00               	movlw	0
 16504  0024C8  6E42               	movwf	i2printRTC@i+1,c
 16505  0024CA  0E00               	movlw	0
 16506  0024CC  6E41               	movwf	i2printRTC@i,c
 16507  0024CE  BE42               	btfsc	i2printRTC@i+1,7,c
 16508  0024D0  D006               	goto	i2l6099
 16509  0024D2  5042               	movf	i2printRTC@i+1,w,c
 16510  0024D4  E135               	bnz	i2l602
 16511  0024D6  0E07               	movlw	7
 16512  0024D8  5C41               	subwf	i2printRTC@i,w,c
 16513  0024DA  B0D8               	btfsc	status,0,c
 16514  0024DC  D031               	goto	i2l602
 16515  0024DE                     i2l6099:
 16516                           
 16517                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16518  0024DE  0E24               	movlw	low _time
 16519  0024E0  2441               	addwf	i2printRTC@i,w,c
 16520  0024E2  6ED9               	movwf	fsr2l,c
 16521  0024E4  0E01               	movlw	high _time
 16522  0024E6  2042               	addwfc	i2printRTC@i+1,w,c
 16523  0024E8  6EDA               	movwf	fsr2h,c
 16524  0024EA  50DF               	movf	indf2,w,c
 16525  0024EC  6E2A               	movwf	??i2_printRTC& (0+255),c
 16526  0024EE  3A2A               	swapf	??i2_printRTC,f,c
 16527  0024F0  0E0F               	movlw	15
 16528  0024F2  162A               	andwf	??i2_printRTC,f,c
 16529  0024F4  0E0F               	movlw	15
 16530  0024F6  162A               	andwf	??i2_printRTC,f,c
 16531  0024F8  502A               	movf	??i2_printRTC,w,c
 16532  0024FA  0D0A               	mullw	10
 16533  0024FC  0E24               	movlw	low _time
 16534  0024FE  2441               	addwf	i2printRTC@i,w,c
 16535  002500  6ED9               	movwf	fsr2l,c
 16536  002502  0E01               	movlw	high _time
 16537  002504  2042               	addwfc	i2printRTC@i+1,w,c
 16538  002506  6EDA               	movwf	fsr2h,c
 16539  002508  50DF               	movf	indf2,w,c
 16540  00250A  0B0F               	andlw	15
 16541  00250C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16542  00250E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16543  002510  50F3               	movf	prodl,w,c
 16544  002512  262B               	addwf	??i2_printRTC+1,f,c
 16545  002514  50F4               	movf	prodh,w,c
 16546  002516  222C               	addwfc	??i2_printRTC+2,f,c
 16547  002518  90D8               	bcf	status,0,c
 16548  00251A  3441               	rlcf	i2printRTC@i,w,c
 16549  00251C  6ED9               	movwf	fsr2l,c
 16550  00251E  3442               	rlcf	i2printRTC@i+1,w,c
 16551  002520  6EDA               	movwf	fsr2h,c
 16552  002522  0E2D               	movlw	low i2printRTC@INT_time
 16553  002524  26D9               	addwf	fsr2l,f,c
 16554  002526  0E00               	movlw	high i2printRTC@INT_time
 16555  002528  22DA               	addwfc	fsr2h,f,c
 16556  00252A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16557  00252E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16558  002532  4A41               	infsnz	i2printRTC@i,f,c
 16559  002534  2A42               	incf	i2printRTC@i+1,f,c
 16560  002536  BE42               	btfsc	i2printRTC@i+1,7,c
 16561  002538  D7D2               	goto	i2l6099
 16562  00253A  5042               	movf	i2printRTC@i+1,w,c
 16563  00253C  E101               	bnz	i2u460_40
 16564  00253E  D7CB               	goto	L9
 16565  002540                     i2u460_40:
 16566  002540                     i2l602:
 16567                           
 16568                           ;RTC.c: 69: }
 16569                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16570  002540  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16571  002544  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16572                           
 16573                           ;RTC.c: 71: switch(RTC_month){
 16574  002548  D084               	goto	i2l6131
 16575  00254A                     i2l6105:
 16576                           
 16577                           ;RTC.c: 73: strcpy(month, "JAN");
 16578  00254A  0E3D               	movlw	low i2printRTC@month
 16579  00254C  6E01               	movwf	i2strcpy@to,c
 16580  00254E  0E00               	movlw	high i2printRTC@month
 16581  002550  6E02               	movwf	i2strcpy@to+1,c
 16582  002552  0EDB               	movlw	low STR_8
 16583  002554  6E03               	movwf	i2strcpy@from,c
 16584  002556  0EFF               	movlw	high STR_8
 16585  002558  6E04               	movwf	i2strcpy@from+1,c
 16586  00255A  EC6A  F021         	call	i2_strcpy	;wreg free
 16587                           
 16588                           ;RTC.c: 74: break;
 16589  00255E  D0A6               	goto	i2l6133
 16590  002560                     i2l6107:
 16591                           
 16592                           ;RTC.c: 76: strcpy(month, "FEB");
 16593  002560  0E3D               	movlw	low i2printRTC@month
 16594  002562  6E01               	movwf	i2strcpy@to,c
 16595  002564  0E00               	movlw	high i2printRTC@month
 16596  002566  6E02               	movwf	i2strcpy@to+1,c
 16597  002568  0ECB               	movlw	low STR_9
 16598  00256A  6E03               	movwf	i2strcpy@from,c
 16599  00256C  0EFF               	movlw	high STR_9
 16600  00256E  6E04               	movwf	i2strcpy@from+1,c
 16601  002570  EC6A  F021         	call	i2_strcpy	;wreg free
 16602                           
 16603                           ;RTC.c: 77: break;
 16604  002574  D09B               	goto	i2l6133
 16605  002576                     i2l6109:
 16606                           
 16607                           ;RTC.c: 79: strcpy(month, "MAR");
 16608  002576  0E3D               	movlw	low i2printRTC@month
 16609  002578  6E01               	movwf	i2strcpy@to,c
 16610  00257A  0E00               	movlw	high i2printRTC@month
 16611  00257C  6E02               	movwf	i2strcpy@to+1,c
 16612  00257E  0EE7               	movlw	low STR_10
 16613  002580  6E03               	movwf	i2strcpy@from,c
 16614  002582  0EFF               	movlw	high STR_10
 16615  002584  6E04               	movwf	i2strcpy@from+1,c
 16616  002586  EC6A  F021         	call	i2_strcpy	;wreg free
 16617                           
 16618                           ;RTC.c: 80: break;
 16619  00258A  D090               	goto	i2l6133
 16620  00258C                     i2l6111:
 16621                           
 16622                           ;RTC.c: 82: strcpy(month, "APR");
 16623  00258C  0E3D               	movlw	low i2printRTC@month
 16624  00258E  6E01               	movwf	i2strcpy@to,c
 16625  002590  0E00               	movlw	high i2printRTC@month
 16626  002592  6E02               	movwf	i2strcpy@to+1,c
 16627  002594  0EEB               	movlw	low STR_11
 16628  002596  6E03               	movwf	i2strcpy@from,c
 16629  002598  0EFF               	movlw	high STR_11
 16630  00259A  6E04               	movwf	i2strcpy@from+1,c
 16631  00259C  EC6A  F021         	call	i2_strcpy	;wreg free
 16632                           
 16633                           ;RTC.c: 83: break;
 16634  0025A0  D085               	goto	i2l6133
 16635  0025A2                     i2l6113:
 16636                           
 16637                           ;RTC.c: 85: strcpy(month, "MAY");
 16638  0025A2  0E3D               	movlw	low i2printRTC@month
 16639  0025A4  6E01               	movwf	i2strcpy@to,c
 16640  0025A6  0E00               	movlw	high i2printRTC@month
 16641  0025A8  6E02               	movwf	i2strcpy@to+1,c
 16642  0025AA  0EFB               	movlw	low STR_12
 16643  0025AC  6E03               	movwf	i2strcpy@from,c
 16644  0025AE  0EFF               	movlw	high STR_12
 16645  0025B0  6E04               	movwf	i2strcpy@from+1,c
 16646  0025B2  EC6A  F021         	call	i2_strcpy	;wreg free
 16647                           
 16648                           ;RTC.c: 86: break;
 16649  0025B6  D07A               	goto	i2l6133
 16650  0025B8                     i2l6115:
 16651                           
 16652                           ;RTC.c: 88: strcpy(month, "JUN");
 16653  0025B8  0E3D               	movlw	low i2printRTC@month
 16654  0025BA  6E01               	movwf	i2strcpy@to,c
 16655  0025BC  0E00               	movlw	high i2printRTC@month
 16656  0025BE  6E02               	movwf	i2strcpy@to+1,c
 16657  0025C0  0EDF               	movlw	low STR_13
 16658  0025C2  6E03               	movwf	i2strcpy@from,c
 16659  0025C4  0EFF               	movlw	high STR_13
 16660  0025C6  6E04               	movwf	i2strcpy@from+1,c
 16661  0025C8  EC6A  F021         	call	i2_strcpy	;wreg free
 16662                           
 16663                           ;RTC.c: 89: break;
 16664  0025CC  D06F               	goto	i2l6133
 16665  0025CE                     i2l6117:
 16666                           
 16667                           ;RTC.c: 91: strcpy(month, "JUL");
 16668  0025CE  0E3D               	movlw	low i2printRTC@month
 16669  0025D0  6E01               	movwf	i2strcpy@to,c
 16670  0025D2  0E00               	movlw	high i2printRTC@month
 16671  0025D4  6E02               	movwf	i2strcpy@to+1,c
 16672  0025D6  0ED7               	movlw	low STR_14
 16673  0025D8  6E03               	movwf	i2strcpy@from,c
 16674  0025DA  0EFF               	movlw	high STR_14
 16675  0025DC  6E04               	movwf	i2strcpy@from+1,c
 16676  0025DE  EC6A  F021         	call	i2_strcpy	;wreg free
 16677                           
 16678                           ;RTC.c: 92: break;
 16679  0025E2  D064               	goto	i2l6133
 16680  0025E4                     i2l6119:
 16681                           
 16682                           ;RTC.c: 94: strcpy(month, "AUG");
 16683  0025E4  0E3D               	movlw	low i2printRTC@month
 16684  0025E6  6E01               	movwf	i2strcpy@to,c
 16685  0025E8  0E00               	movlw	high i2printRTC@month
 16686  0025EA  6E02               	movwf	i2strcpy@to+1,c
 16687  0025EC  0ED3               	movlw	low STR_15
 16688  0025EE  6E03               	movwf	i2strcpy@from,c
 16689  0025F0  0EFF               	movlw	high STR_15
 16690  0025F2  6E04               	movwf	i2strcpy@from+1,c
 16691  0025F4  EC6A  F021         	call	i2_strcpy	;wreg free
 16692                           
 16693                           ;RTC.c: 95: break;
 16694  0025F8  D059               	goto	i2l6133
 16695  0025FA                     i2l6121:
 16696                           
 16697                           ;RTC.c: 97: strcpy(month, "SEP");
 16698  0025FA  0E3D               	movlw	low i2printRTC@month
 16699  0025FC  6E01               	movwf	i2strcpy@to,c
 16700  0025FE  0E00               	movlw	high i2printRTC@month
 16701  002600  6E02               	movwf	i2strcpy@to+1,c
 16702  002602  0EE3               	movlw	low STR_16
 16703  002604  6E03               	movwf	i2strcpy@from,c
 16704  002606  0EFF               	movlw	high STR_16
 16705  002608  6E04               	movwf	i2strcpy@from+1,c
 16706  00260A  EC6A  F021         	call	i2_strcpy	;wreg free
 16707                           
 16708                           ;RTC.c: 98: break;
 16709  00260E  D04E               	goto	i2l6133
 16710  002610                     i2l6123:
 16711                           
 16712                           ;RTC.c: 100: strcpy(month, "OCT");
 16713  002610  0E3D               	movlw	low i2printRTC@month
 16714  002612  6E01               	movwf	i2strcpy@to,c
 16715  002614  0E00               	movlw	high i2printRTC@month
 16716  002616  6E02               	movwf	i2strcpy@to+1,c
 16717  002618  0EF3               	movlw	low STR_17
 16718  00261A  6E03               	movwf	i2strcpy@from,c
 16719  00261C  0EFF               	movlw	high STR_17
 16720  00261E  6E04               	movwf	i2strcpy@from+1,c
 16721  002620  EC6A  F021         	call	i2_strcpy	;wreg free
 16722                           
 16723                           ;RTC.c: 101: break;
 16724  002624  D043               	goto	i2l6133
 16725  002626                     i2l6125:
 16726                           
 16727                           ;RTC.c: 103: strcpy(month, "NOV");
 16728  002626  0E3D               	movlw	low i2printRTC@month
 16729  002628  6E01               	movwf	i2strcpy@to,c
 16730  00262A  0E00               	movlw	high i2printRTC@month
 16731  00262C  6E02               	movwf	i2strcpy@to+1,c
 16732  00262E  0EF7               	movlw	low STR_18
 16733  002630  6E03               	movwf	i2strcpy@from,c
 16734  002632  0EFF               	movlw	high STR_18
 16735  002634  6E04               	movwf	i2strcpy@from+1,c
 16736  002636  EC6A  F021         	call	i2_strcpy	;wreg free
 16737                           
 16738                           ;RTC.c: 104: break;
 16739  00263A  D038               	goto	i2l6133
 16740  00263C                     i2l6127:
 16741                           
 16742                           ;RTC.c: 106: strcpy(month, "DEC");
 16743  00263C  0E3D               	movlw	low i2printRTC@month
 16744  00263E  6E01               	movwf	i2strcpy@to,c
 16745  002640  0E00               	movlw	high i2printRTC@month
 16746  002642  6E02               	movwf	i2strcpy@to+1,c
 16747  002644  0ECF               	movlw	low STR_19
 16748  002646  6E03               	movwf	i2strcpy@from,c
 16749  002648  0EFF               	movlw	high STR_19
 16750  00264A  6E04               	movwf	i2strcpy@from+1,c
 16751  00264C  EC6A  F021         	call	i2_strcpy	;wreg free
 16752                           
 16753                           ;RTC.c: 108: }
 16754                           
 16755                           ;RTC.c: 107: break;
 16756  002650  D02D               	goto	i2l6133
 16757  002652                     i2l6131:
 16758  002652  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16759  002656  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16760                           
 16761                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16762                           ; Switch size 1, requested type "space"
 16763                           ; Number of cases is 1, Range of values is 0 to 0
 16764                           ; switch strategies available:
 16765                           ; Name         Instructions Cycles
 16766                           ; simple_byte            4     3 (average)
 16767                           ;	Chosen strategy is simple_byte
 16768  00265A  502B               	movf	??i2_printRTC+1,w,c
 16769  00265C  0A00               	xorlw	0	; case 0
 16770  00265E  A4D8               	btfss	status,2,c
 16771  002660  D025               	goto	i2l6133
 16772                           
 16773                           ; Switch size 1, requested type "space"
 16774                           ; Number of cases is 12, Range of values is 1 to 12
 16775                           ; switch strategies available:
 16776                           ; Name         Instructions Cycles
 16777                           ; simple_byte           37    19 (average)
 16778                           ;	Chosen strategy is simple_byte
 16779  002662  502A               	movf	??i2_printRTC,w,c
 16780  002664  0A01               	xorlw	1	; case 1
 16781  002666  B4D8               	btfsc	status,2,c
 16782  002668  D770               	goto	i2l6105
 16783  00266A  0A03               	xorlw	3	; case 2
 16784  00266C  B4D8               	btfsc	status,2,c
 16785  00266E  D778               	goto	i2l6107
 16786  002670  0A01               	xorlw	1	; case 3
 16787  002672  B4D8               	btfsc	status,2,c
 16788  002674  D780               	goto	i2l6109
 16789  002676  0A07               	xorlw	7	; case 4
 16790  002678  B4D8               	btfsc	status,2,c
 16791  00267A  D788               	goto	i2l6111
 16792  00267C  0A01               	xorlw	1	; case 5
 16793  00267E  B4D8               	btfsc	status,2,c
 16794  002680  D790               	goto	i2l6113
 16795  002682  0A03               	xorlw	3	; case 6
 16796  002684  B4D8               	btfsc	status,2,c
 16797  002686  D798               	goto	i2l6115
 16798  002688  0A01               	xorlw	1	; case 7
 16799  00268A  B4D8               	btfsc	status,2,c
 16800  00268C  D7A0               	goto	i2l6117
 16801  00268E  0A0F               	xorlw	15	; case 8
 16802  002690  B4D8               	btfsc	status,2,c
 16803  002692  D7A8               	goto	i2l6119
 16804  002694  0A01               	xorlw	1	; case 9
 16805  002696  B4D8               	btfsc	status,2,c
 16806  002698  D7B0               	goto	i2l6121
 16807  00269A  0A03               	xorlw	3	; case 10
 16808  00269C  B4D8               	btfsc	status,2,c
 16809  00269E  D7B8               	goto	i2l6123
 16810  0026A0  0A01               	xorlw	1	; case 11
 16811  0026A2  B4D8               	btfsc	status,2,c
 16812  0026A4  D7C0               	goto	i2l6125
 16813  0026A6  0A07               	xorlw	7	; case 12
 16814  0026A8  B4D8               	btfsc	status,2,c
 16815  0026AA  D7C8               	goto	i2l6127
 16816  0026AC                     i2l6133:
 16817                           
 16818                           ;RTC.c: 109: lcdInst(0b10000000);;
 16819  0026AC  0E80               	movlw	128
 16820  0026AE  ECA9  F023         	call	i2_lcdInst
 16821                           
 16822                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16823  0026B2  0E40               	movlw	low STR_21
 16824  0026B4  6E0D               	movwf	i2printf@f,c
 16825  0026B6  0EFB               	movlw	high STR_21
 16826  0026B8  6E0E               	movwf	i2printf@f+1,c
 16827  0026BA  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16828  0026BE  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16829  0026C2  0E3D               	movlw	low i2printRTC@month
 16830  0026C4  6E11               	movwf	?i2_printf+4,c
 16831  0026C6  0E00               	movlw	high i2printRTC@month
 16832  0026C8  6E12               	movwf	?i2_printf+5,c
 16833  0026CA  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16834  0026CE  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16835  0026D2  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16836  0026D6  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16837  0026DA  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16838  0026DE  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16839  0026E2  ECD4  F00A         	call	i2_printf	;wreg free
 16840  0026E6  0012               	return		;funcret
 16841  0026E8                     __end_ofi2_printRTC:
 16842                           	opt stack 0
 16843                           pclatu	equ	0xFFB
 16844                           pclath	equ	0xFFA
 16845                           tblptru	equ	0xFF8
 16846                           tblptrh	equ	0xFF7
 16847                           tblptrl	equ	0xFF6
 16848                           tablat	equ	0xFF5
 16849                           prodh	equ	0xFF4
 16850                           prodl	equ	0xFF3
 16851                           intcon	equ	0xFF2
 16852                           intcon2	equ	0xFF1
 16853                           intcon3	equ	0xFF0
 16854                           indf0	equ	0xFEF
 16855                           postinc0	equ	0xFEE
 16856                           fsr0h	equ	0xFEA
 16857                           fsr0l	equ	0xFE9
 16858                           wreg	equ	0xFE8
 16859                           postdec1	equ	0xFE5
 16860                           fsr1h	equ	0xFE2
 16861                           fsr1l	equ	0xFE1
 16862                           indf2	equ	0xFDF
 16863                           postinc2	equ	0xFDE
 16864                           postdec2	equ	0xFDD
 16865                           fsr2h	equ	0xFDA
 16866                           fsr2l	equ	0xFD9
 16867                           status	equ	0xFD8
 16868                           
 16869 ;; *************** function i2_strcpy *****************
 16870 ;; Defined at:
 16871 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16872 ;; Parameters:    Size  Location     Type
 16873 ;;  to              2    0[COMRAM] PTR unsigned char 
 16874 ;;		 -> printRTC@month(4), UI@month(4), 
 16875 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16876 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16877 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16878 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16879 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16880 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16881 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16882 ;;		 -> STR_8(4), 
 16883 ;; Auto vars:     Size  Location     Type
 16884 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16885 ;;		 -> printRTC@month(4), UI@month(4), 
 16886 ;; Return value:  Size  Location     Type
 16887 ;;                  2    0[COMRAM] PTR unsigned char 
 16888 ;; Registers used:
 16889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16890 ;; Tracked objects:
 16891 ;;		On entry : 0/0
 16892 ;;		On exit  : 0/0
 16893 ;;		Unchanged: 0/0
 16894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16895 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16896 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16898 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16899 ;;Total ram usage:        6 bytes
 16900 ;; Hardware stack levels used:    1
 16901 ;; This function calls:
 16902 ;;		Nothing
 16903 ;; This function is called by:
 16904 ;;		i2_printRTC
 16905 ;; This function uses a non-reentrant model
 16906 ;;
 16907                           
 16908                           	psect	text61
 16909  0042D4                     __ptext61:
 16910                           	opt stack 0
 16911  0042D4                     i2_strcpy:
 16912                           	opt stack 20
 16913                           
 16914                           ;incstack = 0
 16915  0042D4  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16916  0042D8  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16917  0042DC  D004               	goto	i2l5777
 16918  0042DE                     i2l5775:
 16919  0042DE  4A05               	infsnz	i2strcpy@cp,f,c
 16920  0042E0  2A06               	incf	i2strcpy@cp+1,f,c
 16921  0042E2  4A03               	infsnz	i2strcpy@from,f,c
 16922  0042E4  2A04               	incf	i2strcpy@from+1,f,c
 16923  0042E6                     i2l5777:
 16924  0042E6  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16925  0042EA  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16926  0042EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16927  0042EE  6AF8               	clrf	tblptru,c
 16928  0042F0                     	endif
 16929  0042F0                     	if	0	;tblptru may be non-zero
 16930  0042F0                     	endif
 16931  0042F0  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16932  0042F4  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16933  0042F8  0008               	tblrd		*
 16934  0042FA  CFF5 FFDF          	movff	tablat,indf2
 16935  0042FE  50DF               	movf	indf2,w,c
 16936  004300  B4D8               	btfsc	status,2,c
 16937  004302  0012               	return	
 16938  004304  D7EC               	goto	i2l5775
 16939  004306                     __end_ofi2_strcpy:
 16940                           	opt stack 0
 16941                           pclatu	equ	0xFFB
 16942                           pclath	equ	0xFFA
 16943                           tblptru	equ	0xFF8
 16944                           tblptrh	equ	0xFF7
 16945                           tblptrl	equ	0xFF6
 16946                           tablat	equ	0xFF5
 16947                           prodh	equ	0xFF4
 16948                           prodl	equ	0xFF3
 16949                           intcon	equ	0xFF2
 16950                           intcon2	equ	0xFF1
 16951                           intcon3	equ	0xFF0
 16952                           indf0	equ	0xFEF
 16953                           postinc0	equ	0xFEE
 16954                           fsr0h	equ	0xFEA
 16955                           fsr0l	equ	0xFE9
 16956                           wreg	equ	0xFE8
 16957                           postdec1	equ	0xFE5
 16958                           fsr1h	equ	0xFE2
 16959                           fsr1l	equ	0xFE1
 16960                           indf2	equ	0xFDF
 16961                           postinc2	equ	0xFDE
 16962                           postdec2	equ	0xFDD
 16963                           fsr2h	equ	0xFDA
 16964                           fsr2l	equ	0xFD9
 16965                           status	equ	0xFD8
 16966                           
 16967 ;; *************** function _inputHandler *****************
 16968 ;; Defined at:
 16969 ;;		line 372 in file "UI.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;		None
 16972 ;; Auto vars:     Size  Location     Type
 16973 ;;		None
 16974 ;; Return value:  Size  Location     Type
 16975 ;;                  2   41[COMRAM] int 
 16976 ;; Registers used:
 16977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16978 ;; Tracked objects:
 16979 ;;		On entry : 0/0
 16980 ;;		On exit  : 0/0
 16981 ;;		Unchanged: 0/0
 16982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16983 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16987 ;;Total ram usage:        4 bytes
 16988 ;; Hardware stack levels used:    1
 16989 ;; Hardware stack levels required when called:    4
 16990 ;; This function calls:
 16991 ;;		_change_state_to_logs_11
 16992 ;;		_change_state_to_logs_12
 16993 ;;		_change_state_to_logs_22
 16994 ;;		_change_state_to_logs_23
 16995 ;;		_change_state_to_logs_33
 16996 ;;		_change_state_to_logs_34
 16997 ;;		_change_state_to_menu_11
 16998 ;;		_change_state_to_menu_23
 16999 ;;		i2_change_state_to_menu_12
 17000 ;;		i2_change_state_to_menu_22
 17001 ;; This function is called by:
 17002 ;;		_updateMenu
 17003 ;; This function uses a non-reentrant model
 17004 ;;
 17005                           
 17006                           	psect	text62
 17007  0028DA                     __ptext62:
 17008                           	opt stack 0
 17009  0028DA                     _inputHandler:
 17010                           	opt stack 18
 17011                           
 17012                           ;UI.c: 377: if(firstboot){
 17013                           
 17014                           ;incstack = 0
 17015  0028DA  5075               	movf	_firstboot,w,c
 17016  0028DC  1076               	iorwf	_firstboot+1,w,c
 17017  0028DE  B4D8               	btfsc	status,2,c
 17018  0028E0  D00B               	goto	i2l6201
 17019                           
 17020                           ;UI.c: 378: change_state_to_menu_11();
 17021  0028E2  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 17022                           
 17023                           ;UI.c: 379: firstboot = 0;
 17024  0028E6  0E00               	movlw	0
 17025  0028E8  6E76               	movwf	_firstboot+1,c
 17026  0028EA  0E00               	movlw	0
 17027  0028EC  6E75               	movwf	_firstboot,c
 17028                           
 17029                           ;UI.c: 380: return 0;
 17030  0028EE  0E00               	movlw	0
 17031  0028F0  6E2B               	movwf	?_inputHandler+1,c
 17032  0028F2  0E00               	movlw	0
 17033  0028F4  6E2A               	movwf	?_inputHandler,c
 17034  0028F6  0012               	return	
 17035  0028F8                     i2l6201:
 17036                           
 17037                           ;UI.c: 381: }
 17038                           ;UI.c: 382: if (logstate){
 17039  0028F8  0100               	movlb	0	; () banked
 17040  0028FA  51F6               	movf	_logstate& (0+255),w,b
 17041  0028FC  0100               	movlb	0	; () banked
 17042  0028FE  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17043  002900  B4D8               	btfsc	status,2,c
 17044  002902  D0C7               	goto	i2l6319
 17045                           
 17046                           ; BSR set to: 0
 17047                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17048  002904  0E43               	movlw	67
 17049  002906  187D               	xorwf	_input,w,c	;volatile
 17050  002908  A4D8               	btfss	status,2,c
 17051  00290A  D012               	goto	i2l6219
 17052                           
 17053                           ; BSR set to: 0
 17054  00290C  B281               	btfsc	3969,1,c	;volatile
 17055  00290E  D009               	goto	i2l6211
 17056  002910  D00F               	goto	i2l6219
 17057  002912                     i2l6209:
 17058                           
 17059                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17060  002912  0E68               	movlw	104
 17061  002914  6E2C               	movwf	??_inputHandler& (0+255),c
 17062  002916  0EE4               	movlw	228
 17063  002918                     i2u815_47:
 17064  002918  2EE8               	decfsz	wreg,f,c
 17065  00291A  D7FE               	bra	i2u815_47
 17066  00291C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17067  00291E  D7FC               	bra	i2u815_47
 17068  002920  D000               	nop2	
 17069  002922                     i2l6211:
 17070  002922  B281               	btfsc	3969,1,c	;volatile
 17071  002924  D7F6               	goto	i2l6209
 17072  002926                     i2l6213:
 17073                           
 17074                           ;UI.c: 387: }
 17075                           ;UI.c: 388: return 0;
 17076  002926  0E00               	movlw	0
 17077  002928  6E2B               	movwf	?_inputHandler+1,c
 17078  00292A  0E00               	movlw	0
 17079  00292C  6E2A               	movwf	?_inputHandler,c
 17080  00292E  0012               	return	
 17081  002930                     i2l6219:
 17082                           
 17083                           ;UI.c: 390: else if (input == 'D'){
 17084  002930  0E44               	movlw	68
 17085  002932  187D               	xorwf	_input,w,c	;volatile
 17086  002934  A4D8               	btfss	status,2,c
 17087  002936  D7F7               	goto	i2l6213
 17088                           
 17089                           ;UI.c: 392: logstate = 0;
 17090  002938  0E00               	movlw	0
 17091  00293A  0100               	movlb	0	; () banked
 17092  00293C  6FF7               	movwf	(_logstate+1)& (0+255),b
 17093  00293E  0E00               	movlw	0
 17094  002940  6FF6               	movwf	_logstate& (0+255),b
 17095                           
 17096                           ;UI.c: 393: switch(cur_state){
 17097  002942  D012               	goto	i2l6237
 17098  002944                     i2l6223:
 17099                           
 17100                           ;UI.c: 395: change_state_to_logs_11();
 17101  002944  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 17102                           
 17103                           ;UI.c: 396: break;
 17104  002948  D7EE               	goto	i2l6213
 17105  00294A                     i2l6225:
 17106                           
 17107                           ;UI.c: 398: change_state_to_logs_12();
 17108  00294A  EC2B  F022         	call	_change_state_to_logs_12	;wreg free
 17109                           
 17110                           ;UI.c: 399: break;
 17111  00294E  D7EB               	goto	i2l6213
 17112  002950                     i2l6227:
 17113                           
 17114                           ;UI.c: 401: change_state_to_logs_22();
 17115  002950  EC13  F022         	call	_change_state_to_logs_22	;wreg free
 17116                           
 17117                           ;UI.c: 402: break;
 17118  002954  D7E8               	goto	i2l6213
 17119  002956                     i2l6229:
 17120                           
 17121                           ;UI.c: 404: change_state_to_logs_23();
 17122  002956  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 17123                           
 17124                           ;UI.c: 405: break;
 17125  00295A  D7E5               	goto	i2l6213
 17126  00295C                     i2l6231:
 17127                           
 17128                           ;UI.c: 407: change_state_to_logs_33();
 17129  00295C  ECFB  F021         	call	_change_state_to_logs_33	;wreg free
 17130                           
 17131                           ;UI.c: 408: break;
 17132  002960  D7E2               	goto	i2l6213
 17133  002962                     i2l6233:
 17134                           
 17135                           ;UI.c: 410: change_state_to_logs_34();
 17136  002962  ECE3  F021         	call	_change_state_to_logs_34	;wreg free
 17137                           
 17138                           ;UI.c: 412: }
 17139                           
 17140                           ;UI.c: 411: break;
 17141  002966  D7DF               	goto	i2l6213
 17142  002968                     i2l6237:
 17143  002968  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17144  00296C  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17145                           
 17146                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17147                           ; Switch size 1, requested type "space"
 17148                           ; Number of cases is 2, Range of values is 3 to 4
 17149                           ; switch strategies available:
 17150                           ; Name         Instructions Cycles
 17151                           ; simple_byte            7     4 (average)
 17152                           ;	Chosen strategy is simple_byte
 17153  002970  502D               	movf	??_inputHandler+1,w,c
 17154  002972  0A03               	xorlw	3	; case 3
 17155  002974  B4D8               	btfsc	status,2,c
 17156  002976  D004               	goto	i2l8415
 17157  002978  0A07               	xorlw	7	; case 4
 17158  00297A  B4D8               	btfsc	status,2,c
 17159  00297C  D00F               	goto	i2l8417
 17160  00297E  D7D3               	goto	i2l6213
 17161  002980                     i2l8415:
 17162                           
 17163                           ; Switch size 1, requested type "space"
 17164                           ; Number of cases is 4, Range of values is 243 to 255
 17165                           ; switch strategies available:
 17166                           ; Name         Instructions Cycles
 17167                           ; simple_byte           13     7 (average)
 17168                           ;	Chosen strategy is simple_byte
 17169  002980  502C               	movf	??_inputHandler,w,c
 17170  002982  0AF3               	xorlw	243	; case 243
 17171  002984  B4D8               	btfsc	status,2,c
 17172  002986  D7DE               	goto	i2l6223
 17173  002988  0A07               	xorlw	7	; case 244
 17174  00298A  B4D8               	btfsc	status,2,c
 17175  00298C  D7DE               	goto	i2l6225
 17176  00298E  0A0A               	xorlw	10	; case 254
 17177  002990  B4D8               	btfsc	status,2,c
 17178  002992  D7DE               	goto	i2l6227
 17179  002994  0A01               	xorlw	1	; case 255
 17180  002996  B4D8               	btfsc	status,2,c
 17181  002998  D7DE               	goto	i2l6229
 17182  00299A  D7C5               	goto	i2l6213
 17183  00299C                     i2l8417:
 17184                           
 17185                           ; Switch size 1, requested type "space"
 17186                           ; Number of cases is 2, Range of values is 9 to 10
 17187                           ; switch strategies available:
 17188                           ; Name         Instructions Cycles
 17189                           ; simple_byte            7     4 (average)
 17190                           ;	Chosen strategy is simple_byte
 17191  00299C  502C               	movf	??_inputHandler,w,c
 17192  00299E  0A09               	xorlw	9	; case 9
 17193  0029A0  B4D8               	btfsc	status,2,c
 17194  0029A2  D7DC               	goto	i2l6231
 17195  0029A4  0A03               	xorlw	3	; case 10
 17196  0029A6  B4D8               	btfsc	status,2,c
 17197  0029A8  D7DC               	goto	i2l6233
 17198  0029AA  D7BD               	goto	i2l6213
 17199  0029AC                     i2l6249:
 17200                           
 17201                           ;UI.c: 422: if(cur_state == 11){
 17202  0029AC  0E0B               	movlw	11
 17203  0029AE  0100               	movlb	0	; () banked
 17204  0029B0  19E0               	xorwf	_cur_state& (0+255),w,b
 17205  0029B2  0100               	movlb	0	; () banked
 17206  0029B4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17207  0029B6  A4D8               	btfss	status,2,c
 17208  0029B8  D005               	goto	i2l6257
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;UI.c: 423: return 0;
 17212  0029BA  0E00               	movlw	0
 17213  0029BC  6E2B               	movwf	?_inputHandler+1,c
 17214  0029BE  0E00               	movlw	0
 17215  0029C0  6E2A               	movwf	?_inputHandler,c
 17216                           
 17217                           ; BSR set to: 0
 17218  0029C2  0012               	return	
 17219  0029C4                     i2l6257:
 17220                           
 17221                           ; BSR set to: 0
 17222                           ;UI.c: 425: else{
 17223                           ;UI.c: 426: change_state_to_menu_11();
 17224  0029C4  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 17225                           
 17226                           ;UI.c: 427: }
 17227                           ;UI.c: 428: return 0;
 17228  0029C8  0E00               	movlw	0
 17229  0029CA  6E2B               	movwf	?_inputHandler+1,c
 17230  0029CC  0E00               	movlw	0
 17231  0029CE  6E2A               	movwf	?_inputHandler,c
 17232  0029D0  0012               	return	
 17233  0029D2                     i2l6263:
 17234                           
 17235                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17236  0029D2  0E16               	movlw	22
 17237  0029D4  0100               	movlb	0	; () banked
 17238  0029D6  19E0               	xorwf	_cur_state& (0+255),w,b
 17239  0029D8  0100               	movlb	0	; () banked
 17240  0029DA  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17241  0029DC  B4D8               	btfsc	status,2,c
 17242  0029DE  D007               	goto	i2l6267
 17243                           
 17244                           ; BSR set to: 0
 17245  0029E0  0E0C               	movlw	12
 17246  0029E2  0100               	movlb	0	; () banked
 17247  0029E4  19E0               	xorwf	_cur_state& (0+255),w,b
 17248  0029E6  0100               	movlb	0	; () banked
 17249  0029E8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17250  0029EA  A4D8               	btfss	status,2,c
 17251  0029EC  D005               	goto	i2l6273
 17252  0029EE                     i2l6267:
 17253                           
 17254                           ; BSR set to: 0
 17255                           ;UI.c: 431: return 0;
 17256  0029EE  0E00               	movlw	0
 17257  0029F0  6E2B               	movwf	?_inputHandler+1,c
 17258  0029F2  0E00               	movlw	0
 17259  0029F4  6E2A               	movwf	?_inputHandler,c
 17260                           
 17261                           ; BSR set to: 0
 17262  0029F6  0012               	return	
 17263  0029F8                     i2l6273:
 17264                           
 17265                           ; BSR set to: 0
 17266                           ;UI.c: 433: else if(cur_state == 23){
 17267  0029F8  0E17               	movlw	23
 17268  0029FA  0100               	movlb	0	; () banked
 17269  0029FC  19E0               	xorwf	_cur_state& (0+255),w,b
 17270  0029FE  0100               	movlb	0	; () banked
 17271  002A00  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17272  002A02  A4D8               	btfss	status,2,c
 17273  002A04  D003               	goto	i2l6277
 17274                           
 17275                           ; BSR set to: 0
 17276                           ;UI.c: 434: change_state_to_menu_22();
 17277  002A06  EC83  F021         	call	i2_change_state_to_menu_22	;wreg free
 17278                           
 17279                           ;UI.c: 435: }
 17280  002A0A  D002               	goto	i2l6279
 17281  002A0C                     i2l6277:
 17282                           
 17283                           ;UI.c: 436: else{
 17284                           ;UI.c: 437: change_state_to_menu_12();
 17285  002A0C  EC9B  F021         	call	i2_change_state_to_menu_12	;wreg free
 17286  002A10                     i2l6279:
 17287                           
 17288                           ;UI.c: 438: }
 17289                           ;UI.c: 439: return 0;
 17290  002A10  0E00               	movlw	0
 17291  002A12  6E2B               	movwf	?_inputHandler+1,c
 17292  002A14  0E00               	movlw	0
 17293  002A16  6E2A               	movwf	?_inputHandler,c
 17294  002A18  0012               	return	
 17295  002A1A                     i2l6283:
 17296                           
 17297                           ;UI.c: 441: if(cur_state == 23){
 17298  002A1A  0E17               	movlw	23
 17299  002A1C  0100               	movlb	0	; () banked
 17300  002A1E  19E0               	xorwf	_cur_state& (0+255),w,b
 17301  002A20  0100               	movlb	0	; () banked
 17302  002A22  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17303  002A24  A4D8               	btfss	status,2,c
 17304  002A26  D005               	goto	i2l6291
 17305                           
 17306                           ; BSR set to: 0
 17307                           ;UI.c: 442: return 0;
 17308  002A28  0E00               	movlw	0
 17309  002A2A  6E2B               	movwf	?_inputHandler+1,c
 17310  002A2C  0E00               	movlw	0
 17311  002A2E  6E2A               	movwf	?_inputHandler,c
 17312                           
 17313                           ; BSR set to: 0
 17314  002A30  0012               	return	
 17315  002A32                     i2l6291:
 17316                           
 17317                           ; BSR set to: 0
 17318                           ;UI.c: 444: else{
 17319                           ;UI.c: 445: change_state_to_menu_23();
 17320  002A32  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 17321                           
 17322                           ;UI.c: 446: }
 17323                           ;UI.c: 447: return 0;
 17324  002A36  0E00               	movlw	0
 17325  002A38  6E2B               	movwf	?_inputHandler+1,c
 17326  002A3A  0E00               	movlw	0
 17327  002A3C  6E2A               	movwf	?_inputHandler,c
 17328  002A3E  0012               	return	
 17329  002A40                     i2l6297:
 17330                           
 17331                           ;UI.c: 450: up = 1;
 17332  002A40  0E00               	movlw	0
 17333  002A42  6E78               	movwf	_up+1,c
 17334  002A44  0E01               	movlw	1
 17335  002A46  6E77               	movwf	_up,c
 17336                           
 17337                           ;UI.c: 451: return 1;
 17338  002A48  0E00               	movlw	0
 17339  002A4A  6E2B               	movwf	?_inputHandler+1,c
 17340  002A4C  0E01               	movlw	1
 17341  002A4E  6E2A               	movwf	?_inputHandler,c
 17342  002A50  0012               	return	
 17343  002A52                     i2l6301:
 17344                           
 17345                           ;UI.c: 453: down = 1;
 17346  002A52  0E00               	movlw	0
 17347  002A54  6E68               	movwf	_down+1,c
 17348  002A56  0E01               	movlw	1
 17349  002A58  6E67               	movwf	_down,c
 17350                           
 17351                           ;UI.c: 454: return 1;
 17352  002A5A  0E00               	movlw	0
 17353  002A5C  6E2B               	movwf	?_inputHandler+1,c
 17354  002A5E  0E01               	movlw	1
 17355  002A60  6E2A               	movwf	?_inputHandler,c
 17356  002A62  0012               	return	
 17357  002A64                     i2l6305:
 17358                           
 17359                           ;UI.c: 456: enter = 1;
 17360  002A64  0E00               	movlw	0
 17361  002A66  6E6A               	movwf	_enter+1,c
 17362  002A68  0E01               	movlw	1
 17363  002A6A  6E69               	movwf	_enter,c
 17364                           
 17365                           ;UI.c: 457: return 1;
 17366  002A6C  0E00               	movlw	0
 17367  002A6E  6E2B               	movwf	?_inputHandler+1,c
 17368  002A70  0E01               	movlw	1
 17369  002A72  6E2A               	movwf	?_inputHandler,c
 17370  002A74  0012               	return	
 17371  002A76                     i2l6309:
 17372                           
 17373                           ;UI.c: 459: back = 1;
 17374  002A76  0E00               	movlw	0
 17375  002A78  6E5C               	movwf	_back+1,c
 17376  002A7A  0E01               	movlw	1
 17377  002A7C  6E5B               	movwf	_back,c
 17378                           
 17379                           ;UI.c: 460: return 1;
 17380  002A7E  0E00               	movlw	0
 17381  002A80  6E2B               	movwf	?_inputHandler+1,c
 17382  002A82  0E01               	movlw	1
 17383  002A84  6E2A               	movwf	?_inputHandler,c
 17384  002A86  0012               	return	
 17385  002A88                     i2l6313:
 17386                           
 17387                           ;UI.c: 463: return 1;
 17388  002A88  0E00               	movlw	0
 17389  002A8A  6E2B               	movwf	?_inputHandler+1,c
 17390  002A8C  0E01               	movlw	1
 17391  002A8E  6E2A               	movwf	?_inputHandler,c
 17392                           
 17393                           ;UI.c: 464: }
 17394  002A90  0012               	return	
 17395  002A92                     i2l6319:
 17396  002A92  507D               	movf	_input,w,c	;volatile
 17397                           
 17398                           ; Switch size 1, requested type "space"
 17399                           ; Number of cases is 7, Range of values is 49 to 68
 17400                           ; switch strategies available:
 17401                           ; Name         Instructions Cycles
 17402                           ; simple_byte           22    12 (average)
 17403                           ;	Chosen strategy is simple_byte
 17404  002A94  0A31               	xorlw	49	; case 49
 17405  002A96  B4D8               	btfsc	status,2,c
 17406  002A98  D789               	goto	i2l6249
 17407  002A9A  0A03               	xorlw	3	; case 50
 17408  002A9C  B4D8               	btfsc	status,2,c
 17409  002A9E  D799               	goto	i2l6263
 17410  002AA0  0A01               	xorlw	1	; case 51
 17411  002AA2  B4D8               	btfsc	status,2,c
 17412  002AA4  D7BA               	goto	i2l6283
 17413  002AA6  0A72               	xorlw	114	; case 65
 17414  002AA8  B4D8               	btfsc	status,2,c
 17415  002AAA  D7CA               	goto	i2l6297
 17416  002AAC  0A03               	xorlw	3	; case 66
 17417  002AAE  B4D8               	btfsc	status,2,c
 17418  002AB0  D7D0               	goto	i2l6301
 17419  002AB2  0A01               	xorlw	1	; case 67
 17420  002AB4  B4D8               	btfsc	status,2,c
 17421  002AB6  D7D6               	goto	i2l6305
 17422  002AB8  0A07               	xorlw	7	; case 68
 17423  002ABA  B4D8               	btfsc	status,2,c
 17424  002ABC  D7DC               	goto	i2l6309
 17425  002ABE  D7E4               	goto	i2l6313
 17426  002AC0                     __end_of_inputHandler:
 17427                           	opt stack 0
 17428                           pclatu	equ	0xFFB
 17429                           pclath	equ	0xFFA
 17430                           tblptru	equ	0xFF8
 17431                           tblptrh	equ	0xFF7
 17432                           tblptrl	equ	0xFF6
 17433                           tablat	equ	0xFF5
 17434                           prodh	equ	0xFF4
 17435                           prodl	equ	0xFF3
 17436                           intcon	equ	0xFF2
 17437                           intcon2	equ	0xFF1
 17438                           intcon3	equ	0xFF0
 17439                           indf0	equ	0xFEF
 17440                           postinc0	equ	0xFEE
 17441                           fsr0h	equ	0xFEA
 17442                           fsr0l	equ	0xFE9
 17443                           wreg	equ	0xFE8
 17444                           postdec1	equ	0xFE5
 17445                           fsr1h	equ	0xFE2
 17446                           fsr1l	equ	0xFE1
 17447                           indf2	equ	0xFDF
 17448                           postinc2	equ	0xFDE
 17449                           postdec2	equ	0xFDD
 17450                           fsr2h	equ	0xFDA
 17451                           fsr2l	equ	0xFD9
 17452                           status	equ	0xFD8
 17453                           
 17454 ;; *************** function i2_change_state_to_menu_22 *****************
 17455 ;; Defined at:
 17456 ;;		line 498 in file "UI.c"
 17457 ;; Parameters:    Size  Location     Type
 17458 ;;		None
 17459 ;; Auto vars:     Size  Location     Type
 17460 ;;		None
 17461 ;; Return value:  Size  Location     Type
 17462 ;;                  1    wreg      void 
 17463 ;; Registers used:
 17464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17465 ;; Tracked objects:
 17466 ;;		On entry : 0/0
 17467 ;;		On exit  : 0/0
 17468 ;;		Unchanged: 0/0
 17469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17474 ;;Total ram usage:        0 bytes
 17475 ;; Hardware stack levels used:    1
 17476 ;; Hardware stack levels required when called:    3
 17477 ;; This function calls:
 17478 ;;		i2_lcdInst
 17479 ;;		i2_printf
 17480 ;; This function is called by:
 17481 ;;		_updateMenu
 17482 ;;		_inputHandler
 17483 ;; This function uses a non-reentrant model
 17484 ;;
 17485                           
 17486                           	psect	text63
 17487  004306                     __ptext63:
 17488                           	opt stack 0
 17489  004306                     i2_change_state_to_menu_22:
 17490                           	opt stack 19
 17491                           
 17492                           ;UI.c: 499: cur_state = 22;
 17493                           
 17494                           ;incstack = 0
 17495  004306  0E00               	movlw	0
 17496  004308  0100               	movlb	0	; () banked
 17497  00430A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17498  00430C  0E16               	movlw	22
 17499  00430E  6FE0               	movwf	_cur_state& (0+255),b
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;UI.c: 501: lcdInst(0b10000000);;
 17503  004310  0E80               	movlw	128
 17504  004312  ECA9  F023         	call	i2_lcdInst
 17505                           
 17506                           ;UI.c: 502: printf("2. SORT        <");
 17507  004316  0EC4               	movlw	low STR_34
 17508  004318  6E0D               	movwf	i2printf@f,c
 17509  00431A  0EFD               	movlw	high STR_34
 17510  00431C  6E0E               	movwf	i2printf@f+1,c
 17511  00431E  ECD4  F00A         	call	i2_printf	;wreg free
 17512                           
 17513                           ;UI.c: 503: lcdInst(0b11000000);;
 17514  004322  0EC0               	movlw	192
 17515  004324  ECA9  F023         	call	i2_lcdInst
 17516                           
 17517                           ;UI.c: 504: printf("3. LOGS         ");
 17518  004328  0E09               	movlw	low STR_36
 17519  00432A  6E0D               	movwf	i2printf@f,c
 17520  00432C  0EFD               	movlw	high STR_36
 17521  00432E  6E0E               	movwf	i2printf@f+1,c
 17522  004330  ECD4  F00A         	call	i2_printf	;wreg free
 17523  004334  0012               	return		;funcret
 17524  004336                     __end_ofi2_change_state_to_menu_22:
 17525                           	opt stack 0
 17526                           pclatu	equ	0xFFB
 17527                           pclath	equ	0xFFA
 17528                           tblptru	equ	0xFF8
 17529                           tblptrh	equ	0xFF7
 17530                           tblptrl	equ	0xFF6
 17531                           tablat	equ	0xFF5
 17532                           prodh	equ	0xFF4
 17533                           prodl	equ	0xFF3
 17534                           intcon	equ	0xFF2
 17535                           intcon2	equ	0xFF1
 17536                           intcon3	equ	0xFF0
 17537                           indf0	equ	0xFEF
 17538                           postinc0	equ	0xFEE
 17539                           fsr0h	equ	0xFEA
 17540                           fsr0l	equ	0xFE9
 17541                           wreg	equ	0xFE8
 17542                           postdec1	equ	0xFE5
 17543                           fsr1h	equ	0xFE2
 17544                           fsr1l	equ	0xFE1
 17545                           indf2	equ	0xFDF
 17546                           postinc2	equ	0xFDE
 17547                           postdec2	equ	0xFDD
 17548                           fsr2h	equ	0xFDA
 17549                           fsr2l	equ	0xFD9
 17550                           status	equ	0xFD8
 17551                           
 17552 ;; *************** function i2_change_state_to_menu_12 *****************
 17553 ;; Defined at:
 17554 ;;		line 490 in file "UI.c"
 17555 ;; Parameters:    Size  Location     Type
 17556 ;;		None
 17557 ;; Auto vars:     Size  Location     Type
 17558 ;;		None
 17559 ;; Return value:  Size  Location     Type
 17560 ;;                  1    wreg      void 
 17561 ;; Registers used:
 17562 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17563 ;; Tracked objects:
 17564 ;;		On entry : 0/0
 17565 ;;		On exit  : 0/0
 17566 ;;		Unchanged: 0/0
 17567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17572 ;;Total ram usage:        0 bytes
 17573 ;; Hardware stack levels used:    1
 17574 ;; Hardware stack levels required when called:    3
 17575 ;; This function calls:
 17576 ;;		i2_lcdInst
 17577 ;;		i2_printf
 17578 ;; This function is called by:
 17579 ;;		_updateMenu
 17580 ;;		_inputHandler
 17581 ;; This function uses a non-reentrant model
 17582 ;;
 17583                           
 17584                           	psect	text64
 17585  004336                     __ptext64:
 17586                           	opt stack 0
 17587  004336                     i2_change_state_to_menu_12:
 17588                           	opt stack 19
 17589                           
 17590                           ;UI.c: 491: cur_state = 12;
 17591                           
 17592                           ;incstack = 0
 17593  004336  0E00               	movlw	0
 17594  004338  0100               	movlb	0	; () banked
 17595  00433A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17596  00433C  0E0C               	movlw	12
 17597  00433E  6FE0               	movwf	_cur_state& (0+255),b
 17598                           
 17599                           ; BSR set to: 0
 17600                           ;UI.c: 493: lcdInst(0b10000000);;
 17601  004340  0E80               	movlw	128
 17602  004342  ECA9  F023         	call	i2_lcdInst
 17603                           
 17604                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17605  004346  0E2B               	movlw	low STR_33
 17606  004348  6E0D               	movwf	i2printf@f,c
 17607  00434A  0EFD               	movlw	high STR_33
 17608  00434C  6E0E               	movwf	i2printf@f+1,c
 17609  00434E  ECD4  F00A         	call	i2_printf	;wreg free
 17610                           
 17611                           ;UI.c: 495: lcdInst(0b11000000);;
 17612  004352  0EC0               	movlw	192
 17613  004354  ECA9  F023         	call	i2_lcdInst
 17614                           
 17615                           ;UI.c: 496: printf("2. SORT        <");
 17616  004358  0EC4               	movlw	low STR_34
 17617  00435A  6E0D               	movwf	i2printf@f,c
 17618  00435C  0EFD               	movlw	high STR_34
 17619  00435E  6E0E               	movwf	i2printf@f+1,c
 17620  004360  ECD4  F00A         	call	i2_printf	;wreg free
 17621  004364  0012               	return		;funcret
 17622  004366                     __end_ofi2_change_state_to_menu_12:
 17623                           	opt stack 0
 17624                           pclatu	equ	0xFFB
 17625                           pclath	equ	0xFFA
 17626                           tblptru	equ	0xFF8
 17627                           tblptrh	equ	0xFF7
 17628                           tblptrl	equ	0xFF6
 17629                           tablat	equ	0xFF5
 17630                           prodh	equ	0xFF4
 17631                           prodl	equ	0xFF3
 17632                           intcon	equ	0xFF2
 17633                           intcon2	equ	0xFF1
 17634                           intcon3	equ	0xFF0
 17635                           indf0	equ	0xFEF
 17636                           postinc0	equ	0xFEE
 17637                           fsr0h	equ	0xFEA
 17638                           fsr0l	equ	0xFE9
 17639                           wreg	equ	0xFE8
 17640                           postdec1	equ	0xFE5
 17641                           fsr1h	equ	0xFE2
 17642                           fsr1l	equ	0xFE1
 17643                           indf2	equ	0xFDF
 17644                           postinc2	equ	0xFDE
 17645                           postdec2	equ	0xFDD
 17646                           fsr2h	equ	0xFDA
 17647                           fsr2l	equ	0xFD9
 17648                           status	equ	0xFD8
 17649                           
 17650 ;; *************** function _change_state_to_menu_23 *****************
 17651 ;; Defined at:
 17652 ;;		line 506 in file "UI.c"
 17653 ;; Parameters:    Size  Location     Type
 17654 ;;		None
 17655 ;; Auto vars:     Size  Location     Type
 17656 ;;		None
 17657 ;; Return value:  Size  Location     Type
 17658 ;;                  1    wreg      void 
 17659 ;; Registers used:
 17660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17661 ;; Tracked objects:
 17662 ;;		On entry : 0/0
 17663 ;;		On exit  : 0/0
 17664 ;;		Unchanged: 0/0
 17665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17670 ;;Total ram usage:        0 bytes
 17671 ;; Hardware stack levels used:    1
 17672 ;; Hardware stack levels required when called:    3
 17673 ;; This function calls:
 17674 ;;		i2_lcdInst
 17675 ;;		i2_printf
 17676 ;; This function is called by:
 17677 ;;		_updateMenu
 17678 ;;		_inputHandler
 17679 ;; This function uses a non-reentrant model
 17680 ;;
 17681                           
 17682                           	psect	text65
 17683  004366                     __ptext65:
 17684                           	opt stack 0
 17685  004366                     _change_state_to_menu_23:
 17686                           	opt stack 18
 17687                           
 17688                           ;UI.c: 507: cur_state = 23;
 17689                           
 17690                           ;incstack = 0
 17691  004366  0E00               	movlw	0
 17692  004368  0100               	movlb	0	; () banked
 17693  00436A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17694  00436C  0E17               	movlw	23
 17695  00436E  6FE0               	movwf	_cur_state& (0+255),b
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;UI.c: 509: lcdInst(0b10000000);;
 17699  004370  0E80               	movlw	128
 17700  004372  ECA9  F023         	call	i2_lcdInst
 17701                           
 17702                           ;UI.c: 510: printf("2. SORT         ");
 17703  004376  0E1A               	movlw	low STR_32
 17704  004378  6E0D               	movwf	i2printf@f,c
 17705  00437A  0EFD               	movlw	high STR_32
 17706  00437C  6E0E               	movwf	i2printf@f+1,c
 17707  00437E  ECD4  F00A         	call	i2_printf	;wreg free
 17708                           
 17709                           ;UI.c: 511: lcdInst(0b11000000);;
 17710  004382  0EC0               	movlw	192
 17711  004384  ECA9  F023         	call	i2_lcdInst
 17712                           
 17713                           ;UI.c: 512: printf("3. LOGS        <");
 17714  004388  0EB3               	movlw	low STR_38
 17715  00438A  6E0D               	movwf	i2printf@f,c
 17716  00438C  0EFD               	movlw	high STR_38
 17717  00438E  6E0E               	movwf	i2printf@f+1,c
 17718  004390  ECD4  F00A         	call	i2_printf	;wreg free
 17719  004394  0012               	return		;funcret
 17720  004396                     __end_of_change_state_to_menu_23:
 17721                           	opt stack 0
 17722                           pclatu	equ	0xFFB
 17723                           pclath	equ	0xFFA
 17724                           tblptru	equ	0xFF8
 17725                           tblptrh	equ	0xFF7
 17726                           tblptrl	equ	0xFF6
 17727                           tablat	equ	0xFF5
 17728                           prodh	equ	0xFF4
 17729                           prodl	equ	0xFF3
 17730                           intcon	equ	0xFF2
 17731                           intcon2	equ	0xFF1
 17732                           intcon3	equ	0xFF0
 17733                           indf0	equ	0xFEF
 17734                           postinc0	equ	0xFEE
 17735                           fsr0h	equ	0xFEA
 17736                           fsr0l	equ	0xFE9
 17737                           wreg	equ	0xFE8
 17738                           postdec1	equ	0xFE5
 17739                           fsr1h	equ	0xFE2
 17740                           fsr1l	equ	0xFE1
 17741                           indf2	equ	0xFDF
 17742                           postinc2	equ	0xFDE
 17743                           postdec2	equ	0xFDD
 17744                           fsr2h	equ	0xFDA
 17745                           fsr2l	equ	0xFD9
 17746                           status	equ	0xFD8
 17747                           
 17748 ;; *************** function _change_state_to_menu_11 *****************
 17749 ;; Defined at:
 17750 ;;		line 482 in file "UI.c"
 17751 ;; Parameters:    Size  Location     Type
 17752 ;;		None
 17753 ;; Auto vars:     Size  Location     Type
 17754 ;;		None
 17755 ;; Return value:  Size  Location     Type
 17756 ;;                  1    wreg      void 
 17757 ;; Registers used:
 17758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17759 ;; Tracked objects:
 17760 ;;		On entry : 0/0
 17761 ;;		On exit  : 0/0
 17762 ;;		Unchanged: 0/0
 17763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17768 ;;Total ram usage:        0 bytes
 17769 ;; Hardware stack levels used:    1
 17770 ;; Hardware stack levels required when called:    3
 17771 ;; This function calls:
 17772 ;;		i2_lcdInst
 17773 ;;		i2_printf
 17774 ;; This function is called by:
 17775 ;;		_updateMenu
 17776 ;;		_inputHandler
 17777 ;; This function uses a non-reentrant model
 17778 ;;
 17779                           
 17780                           	psect	text66
 17781  004396                     __ptext66:
 17782                           	opt stack 0
 17783  004396                     _change_state_to_menu_11:
 17784                           	opt stack 18
 17785                           
 17786                           ;UI.c: 483: cur_state = 11;
 17787                           
 17788                           ;incstack = 0
 17789  004396  0E00               	movlw	0
 17790  004398  0100               	movlb	0	; () banked
 17791  00439A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17792  00439C  0E0B               	movlw	11
 17793  00439E  6FE0               	movwf	_cur_state& (0+255),b
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;UI.c: 485: lcdInst(0b10000000);;
 17797  0043A0  0E80               	movlw	128
 17798  0043A2  ECA9  F023         	call	i2_lcdInst
 17799                           
 17800                           ;UI.c: 486: printf("1. DATE/TIME   <");
 17801  0043A6  0ED5               	movlw	low STR_31
 17802  0043A8  6E0D               	movwf	i2printf@f,c
 17803  0043AA  0EFD               	movlw	high STR_31
 17804  0043AC  6E0E               	movwf	i2printf@f+1,c
 17805  0043AE  ECD4  F00A         	call	i2_printf	;wreg free
 17806                           
 17807                           ;UI.c: 487: lcdInst(0b11000000);;
 17808  0043B2  0EC0               	movlw	192
 17809  0043B4  ECA9  F023         	call	i2_lcdInst
 17810                           
 17811                           ;UI.c: 488: printf("2. SORT         ");
 17812  0043B8  0E1A               	movlw	low STR_32
 17813  0043BA  6E0D               	movwf	i2printf@f,c
 17814  0043BC  0EFD               	movlw	high STR_32
 17815  0043BE  6E0E               	movwf	i2printf@f+1,c
 17816  0043C0  ECD4  F00A         	call	i2_printf	;wreg free
 17817  0043C4  0012               	return		;funcret
 17818  0043C6                     __end_of_change_state_to_menu_11:
 17819                           	opt stack 0
 17820                           pclatu	equ	0xFFB
 17821                           pclath	equ	0xFFA
 17822                           tblptru	equ	0xFF8
 17823                           tblptrh	equ	0xFF7
 17824                           tblptrl	equ	0xFF6
 17825                           tablat	equ	0xFF5
 17826                           prodh	equ	0xFF4
 17827                           prodl	equ	0xFF3
 17828                           intcon	equ	0xFF2
 17829                           intcon2	equ	0xFF1
 17830                           intcon3	equ	0xFF0
 17831                           indf0	equ	0xFEF
 17832                           postinc0	equ	0xFEE
 17833                           fsr0h	equ	0xFEA
 17834                           fsr0l	equ	0xFE9
 17835                           wreg	equ	0xFE8
 17836                           postdec1	equ	0xFE5
 17837                           fsr1h	equ	0xFE2
 17838                           fsr1l	equ	0xFE1
 17839                           indf2	equ	0xFDF
 17840                           postinc2	equ	0xFDE
 17841                           postdec2	equ	0xFDD
 17842                           fsr2h	equ	0xFDA
 17843                           fsr2l	equ	0xFD9
 17844                           status	equ	0xFD8
 17845                           
 17846 ;; *************** function _change_state_to_logs_34 *****************
 17847 ;; Defined at:
 17848 ;;		line 549 in file "UI.c"
 17849 ;; Parameters:    Size  Location     Type
 17850 ;;		None
 17851 ;; Auto vars:     Size  Location     Type
 17852 ;;		None
 17853 ;; Return value:  Size  Location     Type
 17854 ;;                  1    wreg      void 
 17855 ;; Registers used:
 17856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17857 ;; Tracked objects:
 17858 ;;		On entry : 0/0
 17859 ;;		On exit  : 0/0
 17860 ;;		Unchanged: 0/0
 17861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17866 ;;Total ram usage:        0 bytes
 17867 ;; Hardware stack levels used:    1
 17868 ;; Hardware stack levels required when called:    3
 17869 ;; This function calls:
 17870 ;;		i2_lcdInst
 17871 ;;		i2_printf
 17872 ;; This function is called by:
 17873 ;;		_updateMenu
 17874 ;;		_inputHandler
 17875 ;; This function uses a non-reentrant model
 17876 ;;
 17877                           
 17878                           	psect	text67
 17879  0043C6                     __ptext67:
 17880                           	opt stack 0
 17881  0043C6                     _change_state_to_logs_34:
 17882                           	opt stack 18
 17883                           
 17884                           ;UI.c: 550: cur_state = 1034;
 17885                           
 17886                           ;incstack = 0
 17887  0043C6  0E04               	movlw	4
 17888  0043C8  0100               	movlb	0	; () banked
 17889  0043CA  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17890  0043CC  0E0A               	movlw	10
 17891  0043CE  6FE0               	movwf	_cur_state& (0+255),b
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;UI.c: 551: lcdInst(0b10000000);;
 17895  0043D0  0E80               	movlw	128
 17896  0043D2  ECA9  F023         	call	i2_lcdInst
 17897                           
 17898                           ;UI.c: 552: printf("LOG 3           ");
 17899  0043D6  0EE7               	movlw	low STR_44
 17900  0043D8  6E0D               	movwf	i2printf@f,c
 17901  0043DA  0EFC               	movlw	high STR_44
 17902  0043DC  6E0E               	movwf	i2printf@f+1,c
 17903  0043DE  ECD4  F00A         	call	i2_printf	;wreg free
 17904                           
 17905                           ;UI.c: 553: lcdInst(0b11000000);;
 17906  0043E2  0EC0               	movlw	192
 17907  0043E4  ECA9  F023         	call	i2_lcdInst
 17908                           
 17909                           ;UI.c: 554: printf("LOG 4          <");
 17910  0043E8  0EA2               	movlw	low STR_50
 17911  0043EA  6E0D               	movwf	i2printf@f,c
 17912  0043EC  0EFD               	movlw	high STR_50
 17913  0043EE  6E0E               	movwf	i2printf@f+1,c
 17914  0043F0  ECD4  F00A         	call	i2_printf	;wreg free
 17915  0043F4  0012               	return		;funcret
 17916  0043F6                     __end_of_change_state_to_logs_34:
 17917                           	opt stack 0
 17918                           pclatu	equ	0xFFB
 17919                           pclath	equ	0xFFA
 17920                           tblptru	equ	0xFF8
 17921                           tblptrh	equ	0xFF7
 17922                           tblptrl	equ	0xFF6
 17923                           tablat	equ	0xFF5
 17924                           prodh	equ	0xFF4
 17925                           prodl	equ	0xFF3
 17926                           intcon	equ	0xFF2
 17927                           intcon2	equ	0xFF1
 17928                           intcon3	equ	0xFF0
 17929                           indf0	equ	0xFEF
 17930                           postinc0	equ	0xFEE
 17931                           fsr0h	equ	0xFEA
 17932                           fsr0l	equ	0xFE9
 17933                           wreg	equ	0xFE8
 17934                           postdec1	equ	0xFE5
 17935                           fsr1h	equ	0xFE2
 17936                           fsr1l	equ	0xFE1
 17937                           indf2	equ	0xFDF
 17938                           postinc2	equ	0xFDE
 17939                           postdec2	equ	0xFDD
 17940                           fsr2h	equ	0xFDA
 17941                           fsr2l	equ	0xFD9
 17942                           status	equ	0xFD8
 17943                           
 17944 ;; *************** function _change_state_to_logs_33 *****************
 17945 ;; Defined at:
 17946 ;;		line 542 in file "UI.c"
 17947 ;; Parameters:    Size  Location     Type
 17948 ;;		None
 17949 ;; Auto vars:     Size  Location     Type
 17950 ;;		None
 17951 ;; Return value:  Size  Location     Type
 17952 ;;                  1    wreg      void 
 17953 ;; Registers used:
 17954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17955 ;; Tracked objects:
 17956 ;;		On entry : 0/0
 17957 ;;		On exit  : 0/0
 17958 ;;		Unchanged: 0/0
 17959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17964 ;;Total ram usage:        0 bytes
 17965 ;; Hardware stack levels used:    1
 17966 ;; Hardware stack levels required when called:    3
 17967 ;; This function calls:
 17968 ;;		i2_lcdInst
 17969 ;;		i2_printf
 17970 ;; This function is called by:
 17971 ;;		_updateMenu
 17972 ;;		_inputHandler
 17973 ;; This function uses a non-reentrant model
 17974 ;;
 17975                           
 17976                           	psect	text68
 17977  0043F6                     __ptext68:
 17978                           	opt stack 0
 17979  0043F6                     _change_state_to_logs_33:
 17980                           	opt stack 18
 17981                           
 17982                           ;UI.c: 543: cur_state = 1033;
 17983                           
 17984                           ;incstack = 0
 17985  0043F6  0E04               	movlw	4
 17986  0043F8  0100               	movlb	0	; () banked
 17987  0043FA  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17988  0043FC  0E09               	movlw	9
 17989  0043FE  6FE0               	movwf	_cur_state& (0+255),b
 17990                           
 17991                           ; BSR set to: 0
 17992                           ;UI.c: 544: lcdInst(0b10000000);;
 17993  004400  0E80               	movlw	128
 17994  004402  ECA9  F023         	call	i2_lcdInst
 17995                           
 17996                           ;UI.c: 545: printf("LOG 3          <");
 17997  004406  0E91               	movlw	low STR_46
 17998  004408  6E0D               	movwf	i2printf@f,c
 17999  00440A  0EFD               	movlw	high STR_46
 18000  00440C  6E0E               	movwf	i2printf@f+1,c
 18001  00440E  ECD4  F00A         	call	i2_printf	;wreg free
 18002                           
 18003                           ;UI.c: 546: lcdInst(0b11000000);;
 18004  004412  0EC0               	movlw	192
 18005  004414  ECA9  F023         	call	i2_lcdInst
 18006                           
 18007                           ;UI.c: 547: printf("LOG 4           ");
 18008  004418  0EF8               	movlw	low STR_48
 18009  00441A  6E0D               	movwf	i2printf@f,c
 18010  00441C  0EFC               	movlw	high STR_48
 18011  00441E  6E0E               	movwf	i2printf@f+1,c
 18012  004420  ECD4  F00A         	call	i2_printf	;wreg free
 18013  004424  0012               	return		;funcret
 18014  004426                     __end_of_change_state_to_logs_33:
 18015                           	opt stack 0
 18016                           pclatu	equ	0xFFB
 18017                           pclath	equ	0xFFA
 18018                           tblptru	equ	0xFF8
 18019                           tblptrh	equ	0xFF7
 18020                           tblptrl	equ	0xFF6
 18021                           tablat	equ	0xFF5
 18022                           prodh	equ	0xFF4
 18023                           prodl	equ	0xFF3
 18024                           intcon	equ	0xFF2
 18025                           intcon2	equ	0xFF1
 18026                           intcon3	equ	0xFF0
 18027                           indf0	equ	0xFEF
 18028                           postinc0	equ	0xFEE
 18029                           fsr0h	equ	0xFEA
 18030                           fsr0l	equ	0xFE9
 18031                           wreg	equ	0xFE8
 18032                           postdec1	equ	0xFE5
 18033                           fsr1h	equ	0xFE2
 18034                           fsr1l	equ	0xFE1
 18035                           indf2	equ	0xFDF
 18036                           postinc2	equ	0xFDE
 18037                           postdec2	equ	0xFDD
 18038                           fsr2h	equ	0xFDA
 18039                           fsr2l	equ	0xFD9
 18040                           status	equ	0xFD8
 18041                           
 18042 ;; *************** function _change_state_to_logs_23 *****************
 18043 ;; Defined at:
 18044 ;;		line 535 in file "UI.c"
 18045 ;; Parameters:    Size  Location     Type
 18046 ;;		None
 18047 ;; Auto vars:     Size  Location     Type
 18048 ;;		None
 18049 ;; Return value:  Size  Location     Type
 18050 ;;                  1    wreg      void 
 18051 ;; Registers used:
 18052 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18053 ;; Tracked objects:
 18054 ;;		On entry : 0/0
 18055 ;;		On exit  : 0/0
 18056 ;;		Unchanged: 0/0
 18057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18062 ;;Total ram usage:        0 bytes
 18063 ;; Hardware stack levels used:    1
 18064 ;; Hardware stack levels required when called:    3
 18065 ;; This function calls:
 18066 ;;		i2_lcdInst
 18067 ;;		i2_printf
 18068 ;; This function is called by:
 18069 ;;		_updateMenu
 18070 ;;		_inputHandler
 18071 ;; This function uses a non-reentrant model
 18072 ;;
 18073                           
 18074                           	psect	text69
 18075  004512                     __ptext69:
 18076                           	opt stack 0
 18077  004512                     _change_state_to_logs_23:
 18078                           	opt stack 18
 18079                           
 18080                           ;UI.c: 536: cur_state = 1023;
 18081                           
 18082                           ;incstack = 0
 18083  004512  0E03               	movlw	3
 18084  004514  0100               	movlb	0	; () banked
 18085  004516  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18086  004518  69E0               	setf	_cur_state& (0+255),b
 18087                           
 18088                           ; BSR set to: 0
 18089                           ;UI.c: 537: lcdInst(0b10000000);;
 18090  00451A  0E80               	movlw	128
 18091  00451C  ECA9  F023         	call	i2_lcdInst
 18092                           
 18093                           ;UI.c: 538: printf("LOG 2           ");
 18094  004520  0ED6               	movlw	low STR_40
 18095  004522  6E0D               	movwf	i2printf@f,c
 18096  004524  0EFC               	movlw	high STR_40
 18097  004526  6E0E               	movwf	i2printf@f+1,c
 18098  004528  ECD4  F00A         	call	i2_printf	;wreg free
 18099                           
 18100                           ;UI.c: 539: lcdInst(0b11000000);;
 18101  00452C  0EC0               	movlw	192
 18102  00452E  ECA9  F023         	call	i2_lcdInst
 18103                           
 18104                           ;UI.c: 540: printf("LOG 3          <");
 18105  004532  0E91               	movlw	low STR_46
 18106  004534  6E0D               	movwf	i2printf@f,c
 18107  004536  0EFD               	movlw	high STR_46
 18108  004538  6E0E               	movwf	i2printf@f+1,c
 18109  00453A  ECD4  F00A         	call	i2_printf	;wreg free
 18110  00453E  0012               	return		;funcret
 18111  004540                     __end_of_change_state_to_logs_23:
 18112                           	opt stack 0
 18113                           pclatu	equ	0xFFB
 18114                           pclath	equ	0xFFA
 18115                           tblptru	equ	0xFF8
 18116                           tblptrh	equ	0xFF7
 18117                           tblptrl	equ	0xFF6
 18118                           tablat	equ	0xFF5
 18119                           prodh	equ	0xFF4
 18120                           prodl	equ	0xFF3
 18121                           intcon	equ	0xFF2
 18122                           intcon2	equ	0xFF1
 18123                           intcon3	equ	0xFF0
 18124                           indf0	equ	0xFEF
 18125                           postinc0	equ	0xFEE
 18126                           fsr0h	equ	0xFEA
 18127                           fsr0l	equ	0xFE9
 18128                           wreg	equ	0xFE8
 18129                           postdec1	equ	0xFE5
 18130                           fsr1h	equ	0xFE2
 18131                           fsr1l	equ	0xFE1
 18132                           indf2	equ	0xFDF
 18133                           postinc2	equ	0xFDE
 18134                           postdec2	equ	0xFDD
 18135                           fsr2h	equ	0xFDA
 18136                           fsr2l	equ	0xFD9
 18137                           status	equ	0xFD8
 18138                           
 18139 ;; *************** function _change_state_to_logs_22 *****************
 18140 ;; Defined at:
 18141 ;;		line 528 in file "UI.c"
 18142 ;; Parameters:    Size  Location     Type
 18143 ;;		None
 18144 ;; Auto vars:     Size  Location     Type
 18145 ;;		None
 18146 ;; Return value:  Size  Location     Type
 18147 ;;                  1    wreg      void 
 18148 ;; Registers used:
 18149 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18150 ;; Tracked objects:
 18151 ;;		On entry : 0/0
 18152 ;;		On exit  : 0/0
 18153 ;;		Unchanged: 0/0
 18154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;Total ram usage:        0 bytes
 18160 ;; Hardware stack levels used:    1
 18161 ;; Hardware stack levels required when called:    3
 18162 ;; This function calls:
 18163 ;;		i2_lcdInst
 18164 ;;		i2_printf
 18165 ;; This function is called by:
 18166 ;;		_updateMenu
 18167 ;;		_inputHandler
 18168 ;; This function uses a non-reentrant model
 18169 ;;
 18170                           
 18171                           	psect	text70
 18172  004426                     __ptext70:
 18173                           	opt stack 0
 18174  004426                     _change_state_to_logs_22:
 18175                           	opt stack 18
 18176                           
 18177                           ;UI.c: 529: cur_state = 1022;
 18178                           
 18179                           ;incstack = 0
 18180  004426  0E03               	movlw	3
 18181  004428  0100               	movlb	0	; () banked
 18182  00442A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18183  00442C  0EFE               	movlw	254
 18184  00442E  6FE0               	movwf	_cur_state& (0+255),b
 18185                           
 18186                           ; BSR set to: 0
 18187                           ;UI.c: 530: lcdInst(0b10000000);;
 18188  004430  0E80               	movlw	128
 18189  004432  ECA9  F023         	call	i2_lcdInst
 18190                           
 18191                           ;UI.c: 531: printf("LOG 2          <");
 18192  004436  0E80               	movlw	low STR_42
 18193  004438  6E0D               	movwf	i2printf@f,c
 18194  00443A  0EFD               	movlw	high STR_42
 18195  00443C  6E0E               	movwf	i2printf@f+1,c
 18196  00443E  ECD4  F00A         	call	i2_printf	;wreg free
 18197                           
 18198                           ;UI.c: 532: lcdInst(0b11000000);;
 18199  004442  0EC0               	movlw	192
 18200  004444  ECA9  F023         	call	i2_lcdInst
 18201                           
 18202                           ;UI.c: 533: printf("LOG 3           ");
 18203  004448  0EE7               	movlw	low STR_44
 18204  00444A  6E0D               	movwf	i2printf@f,c
 18205  00444C  0EFC               	movlw	high STR_44
 18206  00444E  6E0E               	movwf	i2printf@f+1,c
 18207  004450  ECD4  F00A         	call	i2_printf	;wreg free
 18208  004454  0012               	return		;funcret
 18209  004456                     __end_of_change_state_to_logs_22:
 18210                           	opt stack 0
 18211                           pclatu	equ	0xFFB
 18212                           pclath	equ	0xFFA
 18213                           tblptru	equ	0xFF8
 18214                           tblptrh	equ	0xFF7
 18215                           tblptrl	equ	0xFF6
 18216                           tablat	equ	0xFF5
 18217                           prodh	equ	0xFF4
 18218                           prodl	equ	0xFF3
 18219                           intcon	equ	0xFF2
 18220                           intcon2	equ	0xFF1
 18221                           intcon3	equ	0xFF0
 18222                           indf0	equ	0xFEF
 18223                           postinc0	equ	0xFEE
 18224                           fsr0h	equ	0xFEA
 18225                           fsr0l	equ	0xFE9
 18226                           wreg	equ	0xFE8
 18227                           postdec1	equ	0xFE5
 18228                           fsr1h	equ	0xFE2
 18229                           fsr1l	equ	0xFE1
 18230                           indf2	equ	0xFDF
 18231                           postinc2	equ	0xFDE
 18232                           postdec2	equ	0xFDD
 18233                           fsr2h	equ	0xFDA
 18234                           fsr2l	equ	0xFD9
 18235                           status	equ	0xFD8
 18236                           
 18237 ;; *************** function _change_state_to_logs_12 *****************
 18238 ;; Defined at:
 18239 ;;		line 521 in file "UI.c"
 18240 ;; Parameters:    Size  Location     Type
 18241 ;;		None
 18242 ;; Auto vars:     Size  Location     Type
 18243 ;;		None
 18244 ;; Return value:  Size  Location     Type
 18245 ;;                  1    wreg      void 
 18246 ;; Registers used:
 18247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18248 ;; Tracked objects:
 18249 ;;		On entry : 0/0
 18250 ;;		On exit  : 0/0
 18251 ;;		Unchanged: 0/0
 18252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18257 ;;Total ram usage:        0 bytes
 18258 ;; Hardware stack levels used:    1
 18259 ;; Hardware stack levels required when called:    3
 18260 ;; This function calls:
 18261 ;;		i2_lcdInst
 18262 ;;		i2_printf
 18263 ;; This function is called by:
 18264 ;;		_updateMenu
 18265 ;;		_inputHandler
 18266 ;; This function uses a non-reentrant model
 18267 ;;
 18268                           
 18269                           	psect	text71
 18270  004456                     __ptext71:
 18271                           	opt stack 0
 18272  004456                     _change_state_to_logs_12:
 18273                           	opt stack 18
 18274                           
 18275                           ;UI.c: 522: cur_state = 1012;
 18276                           
 18277                           ;incstack = 0
 18278  004456  0E03               	movlw	3
 18279  004458  0100               	movlb	0	; () banked
 18280  00445A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18281  00445C  0EF4               	movlw	244
 18282  00445E  6FE0               	movwf	_cur_state& (0+255),b
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;UI.c: 523: lcdInst(0b10000000);;
 18286  004460  0E80               	movlw	128
 18287  004462  ECA9  F023         	call	i2_lcdInst
 18288                           
 18289                           ;UI.c: 524: printf("LOG 1           ");
 18290  004466  0EC5               	movlw	low STR_41
 18291  004468  6E0D               	movwf	i2printf@f,c
 18292  00446A  0EFC               	movlw	high STR_41
 18293  00446C  6E0E               	movwf	i2printf@f+1,c
 18294  00446E  ECD4  F00A         	call	i2_printf	;wreg free
 18295                           
 18296                           ;UI.c: 525: lcdInst(0b11000000);;
 18297  004472  0EC0               	movlw	192
 18298  004474  ECA9  F023         	call	i2_lcdInst
 18299                           
 18300                           ;UI.c: 526: printf("LOG 2          <");
 18301  004478  0E80               	movlw	low STR_42
 18302  00447A  6E0D               	movwf	i2printf@f,c
 18303  00447C  0EFD               	movlw	high STR_42
 18304  00447E  6E0E               	movwf	i2printf@f+1,c
 18305  004480  ECD4  F00A         	call	i2_printf	;wreg free
 18306  004484  0012               	return		;funcret
 18307  004486                     __end_of_change_state_to_logs_12:
 18308                           	opt stack 0
 18309                           pclatu	equ	0xFFB
 18310                           pclath	equ	0xFFA
 18311                           tblptru	equ	0xFF8
 18312                           tblptrh	equ	0xFF7
 18313                           tblptrl	equ	0xFF6
 18314                           tablat	equ	0xFF5
 18315                           prodh	equ	0xFF4
 18316                           prodl	equ	0xFF3
 18317                           intcon	equ	0xFF2
 18318                           intcon2	equ	0xFF1
 18319                           intcon3	equ	0xFF0
 18320                           indf0	equ	0xFEF
 18321                           postinc0	equ	0xFEE
 18322                           fsr0h	equ	0xFEA
 18323                           fsr0l	equ	0xFE9
 18324                           wreg	equ	0xFE8
 18325                           postdec1	equ	0xFE5
 18326                           fsr1h	equ	0xFE2
 18327                           fsr1l	equ	0xFE1
 18328                           indf2	equ	0xFDF
 18329                           postinc2	equ	0xFDE
 18330                           postdec2	equ	0xFDD
 18331                           fsr2h	equ	0xFDA
 18332                           fsr2l	equ	0xFD9
 18333                           status	equ	0xFD8
 18334                           
 18335 ;; *************** function _change_state_to_logs_11 *****************
 18336 ;; Defined at:
 18337 ;;		line 514 in file "UI.c"
 18338 ;; Parameters:    Size  Location     Type
 18339 ;;		None
 18340 ;; Auto vars:     Size  Location     Type
 18341 ;;		None
 18342 ;; Return value:  Size  Location     Type
 18343 ;;                  1    wreg      void 
 18344 ;; Registers used:
 18345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18346 ;; Tracked objects:
 18347 ;;		On entry : 0/0
 18348 ;;		On exit  : 0/0
 18349 ;;		Unchanged: 0/0
 18350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18355 ;;Total ram usage:        0 bytes
 18356 ;; Hardware stack levels used:    1
 18357 ;; Hardware stack levels required when called:    3
 18358 ;; This function calls:
 18359 ;;		i2_lcdInst
 18360 ;;		i2_printf
 18361 ;; This function is called by:
 18362 ;;		_updateMenu
 18363 ;;		_inputHandler
 18364 ;; This function uses a non-reentrant model
 18365 ;;
 18366                           
 18367                           	psect	text72
 18368  004486                     __ptext72:
 18369                           	opt stack 0
 18370  004486                     _change_state_to_logs_11:
 18371                           	opt stack 18
 18372                           
 18373                           ;UI.c: 515: cur_state = 1011;
 18374                           
 18375                           ;incstack = 0
 18376  004486  0E03               	movlw	3
 18377  004488  0100               	movlb	0	; () banked
 18378  00448A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18379  00448C  0EF3               	movlw	243
 18380  00448E  6FE0               	movwf	_cur_state& (0+255),b
 18381                           
 18382                           ; BSR set to: 0
 18383                           ;UI.c: 516: lcdInst(0b10000000);;
 18384  004490  0E80               	movlw	128
 18385  004492  ECA9  F023         	call	i2_lcdInst
 18386                           
 18387                           ;UI.c: 517: printf("LOG 1          <");
 18388  004496  0E6F               	movlw	low STR_39
 18389  004498  6E0D               	movwf	i2printf@f,c
 18390  00449A  0EFD               	movlw	high STR_39
 18391  00449C  6E0E               	movwf	i2printf@f+1,c
 18392  00449E  ECD4  F00A         	call	i2_printf	;wreg free
 18393                           
 18394                           ;UI.c: 518: lcdInst(0b11000000);;
 18395  0044A2  0EC0               	movlw	192
 18396  0044A4  ECA9  F023         	call	i2_lcdInst
 18397                           
 18398                           ;UI.c: 519: printf("LOG 2           ");
 18399  0044A8  0ED6               	movlw	low STR_40
 18400  0044AA  6E0D               	movwf	i2printf@f,c
 18401  0044AC  0EFC               	movlw	high STR_40
 18402  0044AE  6E0E               	movwf	i2printf@f+1,c
 18403  0044B0  ECD4  F00A         	call	i2_printf	;wreg free
 18404  0044B4  0012               	return		;funcret
 18405  0044B6                     __end_of_change_state_to_logs_11:
 18406                           	opt stack 0
 18407                           pclatu	equ	0xFFB
 18408                           pclath	equ	0xFFA
 18409                           tblptru	equ	0xFF8
 18410                           tblptrh	equ	0xFF7
 18411                           tblptrl	equ	0xFF6
 18412                           tablat	equ	0xFF5
 18413                           prodh	equ	0xFF4
 18414                           prodl	equ	0xFF3
 18415                           intcon	equ	0xFF2
 18416                           intcon2	equ	0xFF1
 18417                           intcon3	equ	0xFF0
 18418                           indf0	equ	0xFEF
 18419                           postinc0	equ	0xFEE
 18420                           fsr0h	equ	0xFEA
 18421                           fsr0l	equ	0xFE9
 18422                           wreg	equ	0xFE8
 18423                           postdec1	equ	0xFE5
 18424                           fsr1h	equ	0xFE2
 18425                           fsr1l	equ	0xFE1
 18426                           indf2	equ	0xFDF
 18427                           postinc2	equ	0xFDE
 18428                           postdec2	equ	0xFDD
 18429                           fsr2h	equ	0xFDA
 18430                           fsr2l	equ	0xFD9
 18431                           status	equ	0xFD8
 18432                           
 18433 ;; *************** function _dispLogs *****************
 18434 ;; Defined at:
 18435 ;;		line 467 in file "UI.c"
 18436 ;; Parameters:    Size  Location     Type
 18437 ;;  myLog           2   17[COMRAM] int 
 18438 ;; Auto vars:     Size  Location     Type
 18439 ;;		None
 18440 ;; Return value:  Size  Location     Type
 18441 ;;                  1    wreg      void 
 18442 ;; Registers used:
 18443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18444 ;; Tracked objects:
 18445 ;;		On entry : 0/0
 18446 ;;		On exit  : 0/0
 18447 ;;		Unchanged: 0/0
 18448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18449 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18452 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18453 ;;Total ram usage:        2 bytes
 18454 ;; Hardware stack levels used:    1
 18455 ;; Hardware stack levels required when called:    2
 18456 ;; This function calls:
 18457 ;;		_retrieveLog
 18458 ;; This function is called by:
 18459 ;;		_updateMenu
 18460 ;; This function uses a non-reentrant model
 18461 ;;
 18462                           
 18463                           	psect	text73
 18464  004636                     __ptext73:
 18465                           	opt stack 0
 18466  004636                     _dispLogs:
 18467                           	opt stack 20
 18468                           
 18469                           ;UI.c: 468: logstate = 1;
 18470                           
 18471                           ;incstack = 0
 18472  004636  0E00               	movlw	0
 18473  004638  0100               	movlb	0	; () banked
 18474  00463A  6FF7               	movwf	(_logstate+1)& (0+255),b
 18475  00463C  0E01               	movlw	1
 18476  00463E  6FF6               	movwf	_logstate& (0+255),b
 18477                           
 18478                           ; BSR set to: 0
 18479                           ;UI.c: 469: log = myLog;
 18480  004640  C012  F0E6         	movff	dispLogs@myLog,_log
 18481  004644  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18482                           
 18483                           ; BSR set to: 0
 18484                           ;UI.c: 470: retrieveLog(myLog - 1);
 18485  004648  0EFF               	movlw	255
 18486  00464A  2412               	addwf	dispLogs@myLog,w,c
 18487  00464C  6E07               	movwf	retrieveLog@logNum,c
 18488  00464E  0EFF               	movlw	255
 18489  004650  2013               	addwfc	dispLogs@myLog+1,w,c
 18490  004652  6E08               	movwf	retrieveLog@logNum+1,c
 18491  004654  ECA4  F018         	call	_retrieveLog	;wreg free
 18492  004658  0012               	return		;funcret
 18493  00465A                     __end_of_dispLogs:
 18494                           	opt stack 0
 18495                           pclatu	equ	0xFFB
 18496                           pclath	equ	0xFFA
 18497                           tblptru	equ	0xFF8
 18498                           tblptrh	equ	0xFF7
 18499                           tblptrl	equ	0xFF6
 18500                           tablat	equ	0xFF5
 18501                           prodh	equ	0xFF4
 18502                           prodl	equ	0xFF3
 18503                           intcon	equ	0xFF2
 18504                           intcon2	equ	0xFF1
 18505                           intcon3	equ	0xFF0
 18506                           indf0	equ	0xFEF
 18507                           postinc0	equ	0xFEE
 18508                           fsr0h	equ	0xFEA
 18509                           fsr0l	equ	0xFE9
 18510                           wreg	equ	0xFE8
 18511                           postdec1	equ	0xFE5
 18512                           fsr1h	equ	0xFE2
 18513                           fsr1l	equ	0xFE1
 18514                           indf2	equ	0xFDF
 18515                           postinc2	equ	0xFDE
 18516                           postdec2	equ	0xFDD
 18517                           fsr2h	equ	0xFDA
 18518                           fsr2l	equ	0xFD9
 18519                           status	equ	0xFD8
 18520                           
 18521 ;; *************** function _retrieveLog *****************
 18522 ;; Defined at:
 18523 ;;		line 134 in file "EEPROM.c"
 18524 ;; Parameters:    Size  Location     Type
 18525 ;;  logNum          2    6[COMRAM] int 
 18526 ;; Auto vars:     Size  Location     Type
 18527 ;;  i               2   13[COMRAM] int 
 18528 ;;  addr            2   15[COMRAM] unsigned short 
 18529 ;;  byte3           1   12[COMRAM] unsigned char 
 18530 ;;  byte2           1   11[COMRAM] unsigned char 
 18531 ;;  byte1           1   10[COMRAM] unsigned char 
 18532 ;; Return value:  Size  Location     Type
 18533 ;;                  1    wreg      void 
 18534 ;; Registers used:
 18535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18536 ;; Tracked objects:
 18537 ;;		On entry : 0/0
 18538 ;;		On exit  : 0/0
 18539 ;;		Unchanged: 0/0
 18540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18541 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18542 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18544 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18545 ;;Total ram usage:       11 bytes
 18546 ;; Hardware stack levels used:    1
 18547 ;; Hardware stack levels required when called:    1
 18548 ;; This function calls:
 18549 ;;		i2_EEPROM_read
 18550 ;;		i2___wmul
 18551 ;; This function is called by:
 18552 ;;		_dispLogs
 18553 ;; This function uses a non-reentrant model
 18554 ;;
 18555                           
 18556                           	psect	text74
 18557  003148                     __ptext74:
 18558                           	opt stack 0
 18559  003148                     _retrieveLog:
 18560                           	opt stack 20
 18561                           
 18562                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18563                           
 18564                           ;incstack = 0
 18565  003148  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18566  00314C  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18567  003150  0E00               	movlw	0
 18568  003152  6E04               	movwf	i2___wmul@multiplicand+1,c
 18569  003154  0E0B               	movlw	11
 18570  003156  6E03               	movwf	i2___wmul@multiplicand,c
 18571  003158  ECF5  F022         	call	i2___wmul	;wreg free
 18572  00315C  0E01               	movlw	1
 18573  00315E  2401               	addwf	?i2___wmul,w,c
 18574  003160  6E10               	movwf	retrieveLog@addr,c
 18575  003162  0E00               	movlw	0
 18576  003164  2002               	addwfc	?i2___wmul+1,w,c
 18577  003166  6E11               	movwf	retrieveLog@addr+1,c
 18578                           
 18579                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18580  003168  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18581  00316C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18582  003170  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18583  003174  6E0B               	movwf	retrieveLog@byte1,c
 18584                           
 18585                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18586  003176  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18587  00317A  0E80               	movlw	128
 18588  00317C  1609               	andwf	??_retrieveLog,f,c
 18589  00317E  5009               	movf	??_retrieveLog,w,c
 18590  003180  0100               	movlb	0	; () banked
 18591  003182  6FE8               	movwf	_log_completion& (0+255),b
 18592  003184  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18593                           
 18594                           ; BSR set to: 0
 18595                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18596  003186  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18597  00318A  0E0F               	movlw	15
 18598  00318C  1609               	andwf	??_retrieveLog,f,c
 18599  00318E  5009               	movf	??_retrieveLog,w,c
 18600  003190  0100               	movlb	0	; () banked
 18601  003192  6FF2               	movwf	_log_count_total& (0+255),b
 18602  003194  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18603                           
 18604                           ; BSR set to: 0
 18605                           ;EEPROM.c: 146: addr++;
 18606  003196  4A10               	infsnz	retrieveLog@addr,f,c
 18607  003198  2A11               	incf	retrieveLog@addr+1,f,c
 18608                           
 18609                           ; BSR set to: 0
 18610                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18611  00319A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18612  00319E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18613  0031A2  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18614  0031A6  6E0C               	movwf	retrieveLog@byte2,c
 18615                           
 18616                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18617  0031A8  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18618  0031AC  0EF0               	movlw	240
 18619  0031AE  1609               	andwf	??_retrieveLog,f,c
 18620  0031B0  5009               	movf	??_retrieveLog,w,c
 18621  0031B2  0100               	movlb	0	; () banked
 18622  0031B4  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18623  0031B6  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18627  0031B8  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18628  0031BC  0E0F               	movlw	15
 18629  0031BE  1609               	andwf	??_retrieveLog,f,c
 18630  0031C0  5009               	movf	??_retrieveLog,w,c
 18631  0031C2  0100               	movlb	0	; () banked
 18632  0031C4  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18633  0031C6  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18634                           
 18635                           ; BSR set to: 0
 18636                           ;EEPROM.c: 152: addr++;
 18637  0031C8  4A10               	infsnz	retrieveLog@addr,f,c
 18638  0031CA  2A11               	incf	retrieveLog@addr+1,f,c
 18639                           
 18640                           ; BSR set to: 0
 18641                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18642  0031CC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18643  0031D0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18644  0031D4  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18645  0031D8  6E0D               	movwf	retrieveLog@byte3,c
 18646                           
 18647                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18648  0031DA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18649  0031DE  0EF0               	movlw	240
 18650  0031E0  1609               	andwf	??_retrieveLog,f,c
 18651  0031E2  5009               	movf	??_retrieveLog,w,c
 18652  0031E4  0100               	movlb	0	; () banked
 18653  0031E6  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18654  0031E8  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18655                           
 18656                           ; BSR set to: 0
 18657                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18658  0031EA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18659  0031EE  0E0F               	movlw	15
 18660  0031F0  1609               	andwf	??_retrieveLog,f,c
 18661  0031F2  5009               	movf	??_retrieveLog,w,c
 18662  0031F4  0100               	movlb	0	; () banked
 18663  0031F6  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18664  0031F8  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18665                           
 18666                           ; BSR set to: 0
 18667                           ;EEPROM.c: 156: addr++;
 18668  0031FA  4A10               	infsnz	retrieveLog@addr,f,c
 18669  0031FC  2A11               	incf	retrieveLog@addr+1,f,c
 18670                           
 18671                           ; BSR set to: 0
 18672                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18673  0031FE  0E00               	movlw	0
 18674  003200  6E0F               	movwf	retrieveLog@i+1,c
 18675  003202  0E00               	movlw	0
 18676  003204  6E0E               	movwf	retrieveLog@i,c
 18677  003206                     i2l5947:
 18678                           
 18679                           ; BSR set to: 0
 18680  003206  BE0F               	btfsc	retrieveLog@i+1,7,c
 18681  003208  D006               	goto	i2l5951
 18682  00320A  500F               	movf	retrieveLog@i+1,w,c
 18683  00320C  E11E               	bnz	i2l5959
 18684  00320E  0E07               	movlw	7
 18685  003210  5C0E               	subwf	retrieveLog@i,w,c
 18686  003212  B0D8               	btfsc	status,0,c
 18687  003214  D01A               	goto	i2l5959
 18688  003216                     i2l5951:
 18689                           
 18690                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18691  003216  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18692  00321A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18693  00321E  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18694  003222  6E09               	movwf	??_retrieveLog& (0+255),c
 18695  003224  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18696  003226  90D8               	bcf	status,0,c
 18697  003228  340E               	rlcf	retrieveLog@i,w,c
 18698  00322A  6ED9               	movwf	fsr2l,c
 18699  00322C  340F               	rlcf	retrieveLog@i+1,w,c
 18700  00322E  6EDA               	movwf	fsr2h,c
 18701  003230  0E00               	movlw	low _log_startTime
 18702  003232  26D9               	addwf	fsr2l,f,c
 18703  003234  0E01               	movlw	high _log_startTime
 18704  003236  22DA               	addwfc	fsr2h,f,c
 18705  003238  C009  FFDE         	movff	??_retrieveLog,postinc2
 18706  00323C  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18707                           
 18708                           ;EEPROM.c: 161: addr++;
 18709  003240  4A10               	infsnz	retrieveLog@addr,f,c
 18710  003242  2A11               	incf	retrieveLog@addr+1,f,c
 18711  003244  4A0E               	infsnz	retrieveLog@i,f,c
 18712  003246  2A0F               	incf	retrieveLog@i+1,f,c
 18713  003248  D7DE               	goto	i2l5947
 18714  00324A                     i2l5959:
 18715                           
 18716                           ;EEPROM.c: 162: }
 18717                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18718  00324A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18719  00324E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18720  003252  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18721  003256  6E09               	movwf	??_retrieveLog& (0+255),c
 18722  003258  5009               	movf	??_retrieveLog,w,c
 18723  00325A  0100               	movlb	0	; () banked
 18724  00325C  6FF4               	movwf	_log_total_time& (0+255),b
 18725  00325E  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18726                           
 18727                           ; BSR set to: 0
 18728  003260  0012               	return		;funcret
 18729  003262                     __end_of_retrieveLog:
 18730                           	opt stack 0
 18731                           pclatu	equ	0xFFB
 18732                           pclath	equ	0xFFA
 18733                           tblptru	equ	0xFF8
 18734                           tblptrh	equ	0xFF7
 18735                           tblptrl	equ	0xFF6
 18736                           tablat	equ	0xFF5
 18737                           prodh	equ	0xFF4
 18738                           prodl	equ	0xFF3
 18739                           intcon	equ	0xFF2
 18740                           intcon2	equ	0xFF1
 18741                           intcon3	equ	0xFF0
 18742                           indf0	equ	0xFEF
 18743                           postinc0	equ	0xFEE
 18744                           fsr0h	equ	0xFEA
 18745                           fsr0l	equ	0xFE9
 18746                           wreg	equ	0xFE8
 18747                           postdec1	equ	0xFE5
 18748                           fsr1h	equ	0xFE2
 18749                           fsr1l	equ	0xFE1
 18750                           indf2	equ	0xFDF
 18751                           postinc2	equ	0xFDE
 18752                           postdec2	equ	0xFDD
 18753                           fsr2h	equ	0xFDA
 18754                           fsr2l	equ	0xFD9
 18755                           status	equ	0xFD8
 18756                           
 18757 ;; *************** function i2_EEPROM_read *****************
 18758 ;; Defined at:
 18759 ;;		line 68 in file "EEPROM.c"
 18760 ;; Parameters:    Size  Location     Type
 18761 ;;  address         2    0[COMRAM] unsigned short 
 18762 ;; Auto vars:     Size  Location     Type
 18763 ;;		None
 18764 ;; Return value:  Size  Location     Type
 18765 ;;                  1    wreg      unsigned char 
 18766 ;; Registers used:
 18767 ;;		wreg, status,2
 18768 ;; Tracked objects:
 18769 ;;		On entry : 0/0
 18770 ;;		On exit  : 0/0
 18771 ;;		Unchanged: 0/0
 18772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18773 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18776 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18777 ;;Total ram usage:        2 bytes
 18778 ;; Hardware stack levels used:    1
 18779 ;; This function calls:
 18780 ;;		Nothing
 18781 ;; This function is called by:
 18782 ;;		_retrieveLog
 18783 ;; This function uses a non-reentrant model
 18784 ;;
 18785                           
 18786                           	psect	text75
 18787  0046EA                     __ptext75:
 18788                           	opt stack 0
 18789  0046EA                     i2_EEPROM_read:
 18790                           	opt stack 20
 18791                           
 18792                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18793                           
 18794                           ; BSR set to: 0
 18795                           ;incstack = 0
 18796  0046EA  5002               	movf	i2EEPROM_read@address+1,w,c
 18797  0046EC  6EAA               	movwf	4010,c	;volatile
 18798                           
 18799                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18800  0046EE  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18801                           
 18802                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18803  0046F2  9EA6               	bcf	4006,7,c	;volatile
 18804                           
 18805                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18806  0046F4  9CA6               	bcf	4006,6,c	;volatile
 18807                           
 18808                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18809  0046F6  80A6               	bsf	4006,0,c	;volatile
 18810  0046F8                     i2l939:
 18811  0046F8  B0A6               	btfsc	4006,0,c	;volatile
 18812  0046FA  D7FE               	goto	i2l939
 18813                           
 18814                           ;EEPROM.c: 81: return EEDATA;
 18815  0046FC  50A8               	movf	4008,w,c	;volatile
 18816  0046FE  0012               	return	
 18817  004700                     __end_ofi2_EEPROM_read:
 18818                           	opt stack 0
 18819                           pclatu	equ	0xFFB
 18820                           pclath	equ	0xFFA
 18821                           tblptru	equ	0xFF8
 18822                           tblptrh	equ	0xFF7
 18823                           tblptrl	equ	0xFF6
 18824                           tablat	equ	0xFF5
 18825                           prodh	equ	0xFF4
 18826                           prodl	equ	0xFF3
 18827                           intcon	equ	0xFF2
 18828                           intcon2	equ	0xFF1
 18829                           intcon3	equ	0xFF0
 18830                           indf0	equ	0xFEF
 18831                           postinc0	equ	0xFEE
 18832                           fsr0h	equ	0xFEA
 18833                           fsr0l	equ	0xFE9
 18834                           wreg	equ	0xFE8
 18835                           postdec1	equ	0xFE5
 18836                           fsr1h	equ	0xFE2
 18837                           fsr1l	equ	0xFE1
 18838                           indf2	equ	0xFDF
 18839                           postinc2	equ	0xFDE
 18840                           postdec2	equ	0xFDD
 18841                           fsr2h	equ	0xFDA
 18842                           fsr2l	equ	0xFD9
 18843                           status	equ	0xFD8
 18844                           
 18845 ;; *************** function _printSortTimer *****************
 18846 ;; Defined at:
 18847 ;;		line 284 in file "sort.c"
 18848 ;; Parameters:    Size  Location     Type
 18849 ;;		None
 18850 ;; Auto vars:     Size  Location     Type
 18851 ;;  i               2   72[COMRAM] int 
 18852 ;;  curTime        14   46[COMRAM] int [7]
 18853 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18854 ;;  sec             2   66[COMRAM] int 
 18855 ;;  min             2   64[COMRAM] int 
 18856 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18857 ;;  start_sec       2   60[COMRAM] unsigned int 
 18858 ;;  hour            2   44[COMRAM] int 
 18859 ;; Return value:  Size  Location     Type
 18860 ;;                  1    wreg      void 
 18861 ;; Registers used:
 18862 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18863 ;; Tracked objects:
 18864 ;;		On entry : 0/0
 18865 ;;		On exit  : 0/0
 18866 ;;		Unchanged: 0/0
 18867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18869 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18870 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18871 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18872 ;;Total ram usage:       33 bytes
 18873 ;; Hardware stack levels used:    1
 18874 ;; Hardware stack levels required when called:    3
 18875 ;; This function calls:
 18876 ;;		i2___lwdiv
 18877 ;;		i2___lwmod
 18878 ;;		i2___wmul
 18879 ;;		i2_getRTC
 18880 ;;		i2_lcdInst
 18881 ;;		i2_printf
 18882 ;; This function is called by:
 18883 ;;		_handler
 18884 ;; This function uses a non-reentrant model
 18885 ;;
 18886                           
 18887                           	psect	text76
 18888  0026E8                     __ptext76:
 18889                           	opt stack 0
 18890  0026E8                     _printSortTimer:
 18891                           	opt stack 20
 18892                           
 18893                           ;sort.c: 285: getRTC();
 18894                           
 18895                           ;incstack = 0
 18896  0026E8  EC26  F01E         	call	i2_getRTC	;wreg free
 18897                           
 18898                           ;sort.c: 286: int curTime[7];
 18899                           ;sort.c: 287: for(int i = 0; i < 7; i++){
 18900  0026EC  0E00               	movlw	0
 18901  0026EE  6E4A               	movwf	printSortTimer@i+1,c
 18902  0026F0  0E00               	movlw	0
 18903  0026F2  6E49               	movwf	printSortTimer@i,c
 18904  0026F4                     i2l7995:
 18905  0026F4  BE4A               	btfsc	printSortTimer@i+1,7,c
 18906  0026F6  D006               	goto	i2l7999
 18907  0026F8  504A               	movf	printSortTimer@i+1,w,c
 18908  0026FA  E131               	bnz	i2l8005
 18909  0026FC  0E07               	movlw	7
 18910  0026FE  5C49               	subwf	printSortTimer@i,w,c
 18911  002700  B0D8               	btfsc	status,0,c
 18912  002702  D02D               	goto	i2l8005
 18913  002704                     i2l7999:
 18914                           
 18915                           ;sort.c: 288: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18916  002704  0E24               	movlw	low _time
 18917  002706  2449               	addwf	printSortTimer@i,w,c
 18918  002708  6ED9               	movwf	fsr2l,c
 18919  00270A  0E01               	movlw	high _time
 18920  00270C  204A               	addwfc	printSortTimer@i+1,w,c
 18921  00270E  6EDA               	movwf	fsr2h,c
 18922  002710  50DF               	movf	indf2,w,c
 18923  002712  6E2A               	movwf	??_printSortTimer& (0+255),c
 18924  002714  3A2A               	swapf	??_printSortTimer,f,c
 18925  002716  0E0F               	movlw	15
 18926  002718  162A               	andwf	??_printSortTimer,f,c
 18927  00271A  0E0F               	movlw	15
 18928  00271C  162A               	andwf	??_printSortTimer,f,c
 18929  00271E  502A               	movf	??_printSortTimer,w,c
 18930  002720  0D0A               	mullw	10
 18931  002722  0E24               	movlw	low _time
 18932  002724  2449               	addwf	printSortTimer@i,w,c
 18933  002726  6ED9               	movwf	fsr2l,c
 18934  002728  0E01               	movlw	high _time
 18935  00272A  204A               	addwfc	printSortTimer@i+1,w,c
 18936  00272C  6EDA               	movwf	fsr2h,c
 18937  00272E  50DF               	movf	indf2,w,c
 18938  002730  0B0F               	andlw	15
 18939  002732  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18940  002734  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18941  002736  50F3               	movf	prodl,w,c
 18942  002738  262B               	addwf	??_printSortTimer+1,f,c
 18943  00273A  50F4               	movf	prodh,w,c
 18944  00273C  222C               	addwfc	??_printSortTimer+2,f,c
 18945  00273E  90D8               	bcf	status,0,c
 18946  002740  3449               	rlcf	printSortTimer@i,w,c
 18947  002742  6ED9               	movwf	fsr2l,c
 18948  002744  344A               	rlcf	printSortTimer@i+1,w,c
 18949  002746  6EDA               	movwf	fsr2h,c
 18950  002748  0E2F               	movlw	low printSortTimer@curTime
 18951  00274A  26D9               	addwf	fsr2l,f,c
 18952  00274C  0E00               	movlw	high printSortTimer@curTime
 18953  00274E  22DA               	addwfc	fsr2h,f,c
 18954  002750  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18955  002754  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18956  002758  4A49               	infsnz	printSortTimer@i,f,c
 18957  00275A  2A4A               	incf	printSortTimer@i+1,f,c
 18958  00275C  D7CB               	goto	i2l7995
 18959  00275E                     i2l8005:
 18960                           
 18961                           ;sort.c: 289: }
 18962                           ;sort.c: 290: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18963  00275E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18964  002762  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18965  002766  0E00               	movlw	0
 18966  002768  6E04               	movwf	i2___wmul@multiplicand+1,c
 18967  00276A  0E3C               	movlw	60
 18968  00276C  6E03               	movwf	i2___wmul@multiplicand,c
 18969  00276E  ECF5  F022         	call	i2___wmul	;wreg free
 18970  002772  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18971  002776  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18972  00277A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18973  00277E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18974  002782  0E0E               	movlw	14
 18975  002784  6E04               	movwf	i2___wmul@multiplicand+1,c
 18976  002786  0E10               	movlw	16
 18977  002788  6E03               	movwf	i2___wmul@multiplicand,c
 18978  00278A  ECF5  F022         	call	i2___wmul	;wreg free
 18979  00278E  5001               	movf	?i2___wmul,w,c
 18980  002790  262A               	addwf	??_printSortTimer,f,c
 18981  002792  5002               	movf	?i2___wmul+1,w,c
 18982  002794  222B               	addwfc	??_printSortTimer+1,f,c
 18983  002796  0101               	movlb	1	; () banked
 18984  002798  510E               	movf	_startTime& (0+255),w,b
 18985  00279A  242A               	addwf	??_printSortTimer,w,c
 18986  00279C  6E3D               	movwf	printSortTimer@start_sec,c
 18987  00279E  0101               	movlb	1	; () banked
 18988  0027A0  510F               	movf	(_startTime+1)& (0+255),w,b
 18989  0027A2  202B               	addwfc	??_printSortTimer+1,w,c
 18990  0027A4  6E3E               	movwf	printSortTimer@start_sec+1,c
 18991                           
 18992                           ;sort.c: 291: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18993  0027A6  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18994  0027AA  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18995  0027AE  0E00               	movlw	0
 18996  0027B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 18997  0027B2  0E3C               	movlw	60
 18998  0027B4  6E03               	movwf	i2___wmul@multiplicand,c
 18999  0027B6  ECF5  F022         	call	i2___wmul	;wreg free
 19000  0027BA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19001  0027BE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19002  0027C2  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19003  0027C6  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19004  0027CA  0E0E               	movlw	14
 19005  0027CC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19006  0027CE  0E10               	movlw	16
 19007  0027D0  6E03               	movwf	i2___wmul@multiplicand,c
 19008  0027D2  ECF5  F022         	call	i2___wmul	;wreg free
 19009  0027D6  5001               	movf	?i2___wmul,w,c
 19010  0027D8  262A               	addwf	??_printSortTimer,f,c
 19011  0027DA  5002               	movf	?i2___wmul+1,w,c
 19012  0027DC  222B               	addwfc	??_printSortTimer+1,f,c
 19013  0027DE  502F               	movf	printSortTimer@curTime,w,c
 19014  0027E0  242A               	addwf	??_printSortTimer,w,c
 19015  0027E2  6E3F               	movwf	printSortTimer@cur_sec,c
 19016  0027E4  5030               	movf	printSortTimer@curTime+1,w,c
 19017  0027E6  202B               	addwfc	??_printSortTimer+1,w,c
 19018  0027E8  6E40               	movwf	printSortTimer@cur_sec+1,c
 19019                           
 19020                           ;sort.c: 292: unsigned int timeDiff = cur_sec - start_sec;
 19021  0027EA  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19022  0027EE  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19023  0027F2  1E2A               	comf	??_printSortTimer,f,c
 19024  0027F4  1E2B               	comf	??_printSortTimer+1,f,c
 19025  0027F6  4A2A               	infsnz	??_printSortTimer,f,c
 19026  0027F8  2A2B               	incf	??_printSortTimer+1,f,c
 19027  0027FA  503F               	movf	printSortTimer@cur_sec,w,c
 19028  0027FC  242A               	addwf	??_printSortTimer,w,c
 19029  0027FE  6E47               	movwf	printSortTimer@timeDiff,c
 19030  002800  5040               	movf	printSortTimer@cur_sec+1,w,c
 19031  002802  202B               	addwfc	??_printSortTimer+1,w,c
 19032  002804  6E48               	movwf	printSortTimer@timeDiff+1,c
 19033                           
 19034                           ;sort.c: 294: total_time = timeDiff;
 19035  002806  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19036  00280A  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19037                           
 19038                           ;sort.c: 296: if(timeDiff >= 179){
 19039  00280E  5048               	movf	printSortTimer@timeDiff+1,w,c
 19040  002810  E104               	bnz	i2u681_40
 19041  002812  0EB3               	movlw	179
 19042  002814  5C47               	subwf	printSortTimer@timeDiff,w,c
 19043  002816  A0D8               	btfss	status,0,c
 19044  002818  D003               	goto	i2l8015
 19045  00281A                     i2u681_40:
 19046                           
 19047                           ;sort.c: 297: machine_state = DoneSorting_state;
 19048  00281A  0E02               	movlw	2
 19049  00281C  0100               	movlb	0	; () banked
 19050  00281E  6FFC               	movwf	_machine_state& (0+255),b
 19051  002820                     i2l8015:
 19052                           
 19053                           ;sort.c: 299: }
 19054                           ;sort.c: 301: int hour = timeDiff / 3600;
 19055  002820  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19056  002824  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19057  002828  0E0E               	movlw	14
 19058  00282A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19059  00282C  0E10               	movlw	16
 19060  00282E  6E08               	movwf	i2___lwdiv@divisor,c
 19061  002830  EC03  F020         	call	i2___lwdiv	;wreg free
 19062  002834  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19063  002838  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19064                           
 19065                           ;sort.c: 302: int min = (timeDiff % 3600) / 60;
 19066  00283C  0E0E               	movlw	14
 19067  00283E  6E04               	movwf	i2___lwmod@divisor+1,c
 19068  002840  0E10               	movlw	16
 19069  002842  6E03               	movwf	i2___lwmod@divisor,c
 19070  002844  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19071  002848  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19072  00284C  ECC2  F020         	call	i2___lwmod	;wreg free
 19073  002850  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19074  002854  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19075  002858  0E00               	movlw	0
 19076  00285A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19077  00285C  0E3C               	movlw	60
 19078  00285E  6E08               	movwf	i2___lwdiv@divisor,c
 19079  002860  EC03  F020         	call	i2___lwdiv	;wreg free
 19080  002864  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19081  002868  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19082                           
 19083                           ;sort.c: 303: int sec = (timeDiff % 3600) % 60;
 19084  00286C  0E0E               	movlw	14
 19085  00286E  6E04               	movwf	i2___lwmod@divisor+1,c
 19086  002870  0E10               	movlw	16
 19087  002872  6E03               	movwf	i2___lwmod@divisor,c
 19088  002874  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19089  002878  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19090  00287C  ECC2  F020         	call	i2___lwmod	;wreg free
 19091  002880  C001  F045         	movff	?i2___lwmod,_printSortTimer$2412
 19092  002884  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2412+1
 19093                           
 19094                           ;sort.c: 303: int sec = (timeDiff % 3600) % 60;
 19095  002888  C045  F001         	movff	_printSortTimer$2412,i2___lwmod@dividend
 19096  00288C  C046  F002         	movff	_printSortTimer$2412+1,i2___lwmod@dividend+1
 19097  002890  0E00               	movlw	0
 19098  002892  6E04               	movwf	i2___lwmod@divisor+1,c
 19099  002894  0E3C               	movlw	60
 19100  002896  6E03               	movwf	i2___lwmod@divisor,c
 19101  002898  ECC2  F020         	call	i2___lwmod	;wreg free
 19102  00289C  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19103  0028A0  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19104                           
 19105                           ;sort.c: 305: lcdInst(0b10000000);;
 19106  0028A4  0E80               	movlw	128
 19107  0028A6  ECA9  F023         	call	i2_lcdInst
 19108                           
 19109                           ;sort.c: 306: printf("SORTING...");
 19110  0028AA  0E7C               	movlw	low STR_64
 19111  0028AC  6E0D               	movwf	i2printf@f,c
 19112  0028AE  0EFF               	movlw	high STR_64
 19113  0028B0  6E0E               	movwf	i2printf@f+1,c
 19114  0028B2  ECD4  F00A         	call	i2_printf	;wreg free
 19115                           
 19116                           ;sort.c: 307: lcdInst(0b11000000);;
 19117  0028B6  0EC0               	movlw	192
 19118  0028B8  ECA9  F023         	call	i2_lcdInst
 19119                           
 19120                           ;sort.c: 308: printf("TIME %d:%02d", min, sec);
 19121  0028BC  0E42               	movlw	low STR_65
 19122  0028BE  6E0D               	movwf	i2printf@f,c
 19123  0028C0  0EFF               	movlw	high STR_65
 19124  0028C2  6E0E               	movwf	i2printf@f+1,c
 19125  0028C4  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19126  0028C8  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19127  0028CC  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19128  0028D0  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19129  0028D4  ECD4  F00A         	call	i2_printf	;wreg free
 19130  0028D8  0012               	return		;funcret
 19131  0028DA                     __end_of_printSortTimer:
 19132                           	opt stack 0
 19133                           pclatu	equ	0xFFB
 19134                           pclath	equ	0xFFA
 19135                           tblptru	equ	0xFF8
 19136                           tblptrh	equ	0xFF7
 19137                           tblptrl	equ	0xFF6
 19138                           tablat	equ	0xFF5
 19139                           prodh	equ	0xFF4
 19140                           prodl	equ	0xFF3
 19141                           intcon	equ	0xFF2
 19142                           intcon2	equ	0xFF1
 19143                           intcon3	equ	0xFF0
 19144                           indf0	equ	0xFEF
 19145                           postinc0	equ	0xFEE
 19146                           fsr0h	equ	0xFEA
 19147                           fsr0l	equ	0xFE9
 19148                           wreg	equ	0xFE8
 19149                           postdec1	equ	0xFE5
 19150                           fsr1h	equ	0xFE2
 19151                           fsr1l	equ	0xFE1
 19152                           indf2	equ	0xFDF
 19153                           postinc2	equ	0xFDE
 19154                           postdec2	equ	0xFDD
 19155                           fsr2h	equ	0xFDA
 19156                           fsr2l	equ	0xFD9
 19157                           status	equ	0xFD8
 19158                           
 19159 ;; *************** function i2_printf *****************
 19160 ;; Defined at:
 19161 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19162 ;; Parameters:    Size  Location     Type
 19163 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19164 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19165 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19166 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19167 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19168 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19169 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19170 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19171 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19172 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19173 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19174 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19175 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19176 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19177 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19178 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19179 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19180 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19181 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19182 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19183 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 19184 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19185 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19186 ;;		 -> STR_2(14), STR_1(18), 
 19187 ;; Auto vars:     Size  Location     Type
 19188 ;;  printf          4    0        struct .
 19189 ;;  printf          2   39[COMRAM] int 
 19190 ;;  printf          2   35[COMRAM] unsigned int 
 19191 ;;  printf          2   33[COMRAM] unsigned int 
 19192 ;;  printf          2   31[COMRAM] PTR void [1]
 19193 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19194 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19195 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 19196 ;;  printf          1   38[COMRAM] char 
 19197 ;;  printf          1   37[COMRAM] unsigned char 
 19198 ;;  printf          1   28[COMRAM] char 
 19199 ;; Return value:  Size  Location     Type
 19200 ;;                  2   12[COMRAM] int 
 19201 ;; Registers used:
 19202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19203 ;; Tracked objects:
 19204 ;;		On entry : 0/0
 19205 ;;		On exit  : 0/0
 19206 ;;		Unchanged: 0/0
 19207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19208 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19209 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19210 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19211 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19212 ;;Total ram usage:       29 bytes
 19213 ;; Hardware stack levels used:    1
 19214 ;; Hardware stack levels required when called:    2
 19215 ;; This function calls:
 19216 ;;		i2___lwdiv
 19217 ;;		i2___lwmod
 19218 ;;		i2___wmul
 19219 ;;		i2_isdigit
 19220 ;;		i2_putch
 19221 ;; This function is called by:
 19222 ;;		_change_state_to_menu_11
 19223 ;;		_change_state_to_menu_23
 19224 ;;		_change_state_to_logs_11
 19225 ;;		_change_state_to_logs_12
 19226 ;;		_change_state_to_logs_22
 19227 ;;		_change_state_to_logs_23
 19228 ;;		_change_state_to_logs_33
 19229 ;;		_change_state_to_logs_34
 19230 ;;		_printSortTimer
 19231 ;;		i2_change_state_to_menu_start
 19232 ;;		i2_change_state_to_menu_12
 19233 ;;		i2_change_state_to_menu_22
 19234 ;;		i2_printRTC
 19235 ;; This function uses a non-reentrant model
 19236 ;;
 19237                           
 19238                           	psect	text77
 19239  0015A8                     __ptext77:
 19240                           	opt stack 0
 19241  0015A8                     i2_printf:
 19242                           	opt stack 19
 19243                           
 19244                           ;doprnt.c: 466: va_list ap;
 19245                           ;doprnt.c: 499: signed char c;
 19246                           ;doprnt.c: 501: int width;
 19247                           ;doprnt.c: 506: signed char prec;
 19248                           ;doprnt.c: 508: unsigned char flag;
 19249                           ;doprnt.c: 523: union {
 19250                           ;doprnt.c: 524: unsigned long vd;
 19251                           ;doprnt.c: 525: double integ;
 19252                           ;doprnt.c: 526: } tmpval;
 19253                           ;doprnt.c: 528: unsigned int val;
 19254                           ;doprnt.c: 529: unsigned len;
 19255                           ;doprnt.c: 530: const char * cp;
 19256                           ;doprnt.c: 533: *ap = __va_start();
 19257                           
 19258                           ;incstack = 0
 19259  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19260  0015AA  6E20               	movwf	i2printf@ap,c
 19261  0015AC  0E00               	movlw	high (?i2_printf+2)
 19262  0015AE  6E21               	movwf	i2printf@ap+1,c
 19263                           
 19264                           ;doprnt.c: 536: while(c = *f++) {
 19265  0015B0  D1A4               	goto	i2l5771
 19266  0015B2                     i2l5641:
 19267                           
 19268                           ;doprnt.c: 538: if(c != '%')
 19269  0015B2  0E25               	movlw	37
 19270  0015B4  1827               	xorwf	i2printf@c,w,c
 19271  0015B6  B4D8               	btfsc	status,2,c
 19272  0015B8  D004               	goto	i2l5645
 19273                           
 19274                           ;doprnt.c: 540: {
 19275                           ;doprnt.c: 541: (putch(c) );
 19276  0015BA  5027               	movf	i2printf@c,w,c
 19277  0015BC  ECA3  F023         	call	i2_putch
 19278                           
 19279                           ;doprnt.c: 542: continue;
 19280  0015C0  D19C               	goto	i2l5771
 19281  0015C2                     i2l5645:
 19282                           
 19283                           ;doprnt.c: 543: }
 19284                           ;doprnt.c: 546: width = 0;
 19285  0015C2  0E00               	movlw	0
 19286  0015C4  6E29               	movwf	i2printf@width+1,c
 19287  0015C6  0E00               	movlw	0
 19288  0015C8  6E28               	movwf	i2printf@width,c
 19289                           
 19290                           ;doprnt.c: 548: flag = 0;
 19291  0015CA  0E00               	movlw	0
 19292  0015CC  6E26               	movwf	i2printf@flag,c
 19293                           
 19294                           ;doprnt.c: 551: switch(*f) {
 19295                           
 19296                           ;doprnt.c: 550: for(;;) {
 19297  0015CE  D003               	goto	i2l5651
 19298  0015D0                     i2l5647:
 19299                           
 19300                           ;doprnt.c: 580: flag |= 0x04;
 19301  0015D0  8426               	bsf	i2printf@flag,2,c
 19302                           
 19303                           ;doprnt.c: 581: f++;
 19304  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19305  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19306  0015D6                     i2l5651:
 19307  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19308  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19309  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19310  0015DE  6AF8               	clrf	tblptru,c
 19311  0015E0                     	endif
 19312  0015E0                     	if	0	;tblptru may be non-zero
 19313  0015E0                     	endif
 19314  0015E0  0008               	tblrd		*
 19315  0015E2  50F5               	movf	tablat,w,c
 19316                           
 19317                           ; Switch size 1, requested type "space"
 19318                           ; Number of cases is 1, Range of values is 48 to 48
 19319                           ; switch strategies available:
 19320                           ; Name         Instructions Cycles
 19321                           ; simple_byte            4     3 (average)
 19322                           ;	Chosen strategy is simple_byte
 19323  0015E4  0A30               	xorlw	48	; case 48
 19324  0015E6  B4D8               	btfsc	status,2,c
 19325  0015E8  D7F3               	goto	i2l5647
 19326                           
 19327                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19328                           
 19329                           ;doprnt.c: 586: }
 19330                           
 19331                           ;doprnt.c: 585: break;
 19332  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19333  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19334  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19335  0015F2  6AF8               	clrf	tblptru,c
 19336  0015F4                     	endif
 19337  0015F4                     	if	0	;tblptru may be non-zero
 19338  0015F4                     	endif
 19339  0015F4  0008               	tblrd		*
 19340  0015F6  50F5               	movf	tablat,w,c
 19341  0015F8  EC4F  F023         	call	i2_isdigit
 19342  0015FC  A0D8               	btfss	status,0,c
 19343  0015FE  D0A6               	goto	i2l5699
 19344                           
 19345                           ;doprnt.c: 598: width = 0;
 19346  001600  0E00               	movlw	0
 19347  001602  6E29               	movwf	i2printf@width+1,c
 19348  001604  0E00               	movlw	0
 19349  001606  6E28               	movwf	i2printf@width,c
 19350  001608                     i2l5657:
 19351                           
 19352                           ;doprnt.c: 600: width *= 10;
 19353  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19354  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19355  001610  0E00               	movlw	0
 19356  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19357  001614  0E0A               	movlw	10
 19358  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19359  001618  ECF5  F022         	call	i2___wmul	;wreg free
 19360  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19361  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19362                           
 19363                           ;doprnt.c: 601: width += *f++ - '0';
 19364  001624  0ED0               	movlw	208
 19365  001626  6E19               	movwf	??i2_printf& (0+255),c
 19366  001628  0EFF               	movlw	255
 19367  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19368  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19369  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19370  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19371  001634  6AF8               	clrf	tblptru,c
 19372  001636                     	endif
 19373  001636                     	if	0	;tblptru may be non-zero
 19374  001636                     	endif
 19375  001636  0008               	tblrd		*
 19376  001638  50F5               	movf	tablat,w,c
 19377  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19378  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19379  00163E  5019               	movf	??i2_printf,w,c
 19380  001640  261B               	addwf	??i2_printf+2,f,c
 19381  001642  501A               	movf	??i2_printf+1,w,c
 19382  001644  221C               	addwfc	??i2_printf+3,f,c
 19383  001646  501B               	movf	??i2_printf+2,w,c
 19384  001648  2628               	addwf	i2printf@width,f,c
 19385  00164A  501C               	movf	??i2_printf+3,w,c
 19386  00164C  2229               	addwfc	i2printf@width+1,f,c
 19387  00164E  4A0D               	infsnz	i2printf@f,f,c
 19388  001650  2A0E               	incf	i2printf@f+1,f,c
 19389                           
 19390                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19391  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19392  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19393  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19394  00165A  6AF8               	clrf	tblptru,c
 19395  00165C                     	endif
 19396  00165C                     	if	0	;tblptru may be non-zero
 19397  00165C                     	endif
 19398  00165C  0008               	tblrd		*
 19399  00165E  50F5               	movf	tablat,w,c
 19400  001660  EC4F  F023         	call	i2_isdigit
 19401  001664  A0D8               	btfss	status,0,c
 19402  001666  D072               	goto	i2l5699
 19403  001668  D7CF               	goto	i2l5657
 19404  00166A                     i2l5665:
 19405                           
 19406                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19407  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19408  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19409  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19410  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19411  00167A  0E02               	movlw	2
 19412  00167C  2620               	addwf	i2printf@ap,f,c
 19413  00167E  0E00               	movlw	0
 19414  001680  2221               	addwfc	i2printf@ap+1,f,c
 19415                           
 19416                           ;doprnt.c: 740: if(!cp)
 19417  001682  501E               	movf	i2printf@cp,w,c
 19418  001684  101F               	iorwf	i2printf@cp+1,w,c
 19419  001686  A4D8               	btfss	status,2,c
 19420  001688  D004               	goto	i2l5673
 19421                           
 19422                           ;doprnt.c: 741: cp = "(null)";
 19423  00168A  0EB6               	movlw	low STR_116
 19424  00168C  6E1E               	movwf	i2printf@cp,c
 19425  00168E  0EFF               	movlw	high STR_116
 19426  001690  6E1F               	movwf	i2printf@cp+1,c
 19427  001692                     i2l5673:
 19428                           
 19429                           ;doprnt.c: 745: len = 0;
 19430  001692  0E00               	movlw	0
 19431  001694  6E23               	movwf	i2printf@len+1,c
 19432  001696  0E00               	movlw	0
 19433  001698  6E22               	movwf	i2printf@len,c
 19434                           
 19435                           ;doprnt.c: 746: while(cp[len])
 19436  00169A  D002               	goto	i2l5677
 19437  00169C                     i2l5675:
 19438                           
 19439                           ;doprnt.c: 747: len++;
 19440  00169C  4A22               	infsnz	i2printf@len,f,c
 19441  00169E  2A23               	incf	i2printf@len+1,f,c
 19442  0016A0                     i2l5677:
 19443  0016A0  5022               	movf	i2printf@len,w,c
 19444  0016A2  241E               	addwf	i2printf@cp,w,c
 19445  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19446  0016A6  5023               	movf	i2printf@len+1,w,c
 19447  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19448  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19449  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19450  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19451  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19452  0016B6  6EF8               	movwf	tblptru,c
 19453  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19454  0016BA  64F7               	cpfsgt	tblptrh,c
 19455  0016BC  D003               	bra	i2u418_47
 19456  0016BE  0008               	tblrd		*
 19457  0016C0  50F5               	movf	tablat,w,c
 19458  0016C2  D005               	bra	i2u418_40
 19459  0016C4                     i2u418_47:
 19460  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19461  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19462  0016CC  50EF               	movf	indf0,w,c
 19463  0016CE                     i2u418_40:
 19464  0016CE  0900               	iorlw	0
 19465  0016D0  A4D8               	btfss	status,2,c
 19466  0016D2  D7E4               	goto	i2l5675
 19467                           
 19468                           ;doprnt.c: 757: if(width > len)
 19469  0016D4  5028               	movf	i2printf@width,w,c
 19470  0016D6  5C22               	subwf	i2printf@len,w,c
 19471  0016D8  5029               	movf	i2printf@width+1,w,c
 19472  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19473  0016DC  B0D8               	btfsc	status,0,c
 19474  0016DE  D005               	goto	i2l5683
 19475                           
 19476                           ;doprnt.c: 758: width -= len;
 19477  0016E0  5022               	movf	i2printf@len,w,c
 19478  0016E2  5E28               	subwf	i2printf@width,f,c
 19479  0016E4  5023               	movf	i2printf@len+1,w,c
 19480  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19481  0016E8  D008               	goto	i2l5687
 19482  0016EA                     i2l5683:
 19483                           
 19484                           ;doprnt.c: 759: else
 19485                           ;doprnt.c: 760: width = 0;
 19486  0016EA  0E00               	movlw	0
 19487  0016EC  6E29               	movwf	i2printf@width+1,c
 19488  0016EE  0E00               	movlw	0
 19489  0016F0  6E28               	movwf	i2printf@width,c
 19490                           
 19491                           ;doprnt.c: 764: while(width--)
 19492  0016F2  D003               	goto	i2l5687
 19493  0016F4                     i2l5685:
 19494                           
 19495                           ;doprnt.c: 765: (putch(' ') );
 19496  0016F4  0E20               	movlw	32
 19497  0016F6  ECA3  F023         	call	i2_putch
 19498  0016FA                     i2l5687:
 19499  0016FA  0628               	decf	i2printf@width,f,c
 19500  0016FC  A0D8               	btfss	status,0,c
 19501  0016FE  0629               	decf	i2printf@width+1,f,c
 19502  001700  2828               	incf	i2printf@width,w,c
 19503  001702  E1F8               	bnz	i2l5685
 19504  001704  2829               	incf	i2printf@width+1,w,c
 19505  001706  B4D8               	btfsc	status,2,c
 19506  001708  D016               	goto	i2l5693
 19507  00170A  D7F4               	goto	i2l5685
 19508  00170C                     i2l5689:
 19509                           
 19510                           ;doprnt.c: 768: (putch(*cp++) );
 19511  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19512  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19513  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19514  001716  6EF8               	movwf	tblptru,c
 19515  001718  0E0F               	movlw	(high __ramtop+-1)
 19516  00171A  64F7               	cpfsgt	tblptrh,c
 19517  00171C  D003               	bra	i2u422_47
 19518  00171E  0008               	tblrd		*
 19519  001720  50F5               	movf	tablat,w,c
 19520  001722  D005               	bra	i2u422_40
 19521  001724                     i2u422_47:
 19522  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19523  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19524  00172C  50EF               	movf	indf0,w,c
 19525  00172E                     i2u422_40:
 19526  00172E  ECA3  F023         	call	i2_putch
 19527  001732  4A1E               	infsnz	i2printf@cp,f,c
 19528  001734  2A1F               	incf	i2printf@cp+1,f,c
 19529  001736                     i2l5693:
 19530  001736  0622               	decf	i2printf@len,f,c
 19531  001738  A0D8               	btfss	status,0,c
 19532  00173A  0623               	decf	i2printf@len+1,f,c
 19533  00173C  2822               	incf	i2printf@len,w,c
 19534  00173E  E1E6               	bnz	i2l5689
 19535  001740  2823               	incf	i2printf@len+1,w,c
 19536  001742  B4D8               	btfsc	status,2,c
 19537  001744  D0DA               	goto	i2l5771
 19538  001746  D7E2               	goto	i2l5689
 19539  001748                     i2l5695:
 19540                           
 19541                           ;doprnt.c: 818: flag |= 0x40;
 19542  001748  8C26               	bsf	i2printf@flag,6,c
 19543                           
 19544                           ;doprnt.c: 822: }
 19545                           
 19546                           ;doprnt.c: 819: break;
 19547  00174A  D01B               	goto	i2l1255
 19548  00174C                     i2l5699:
 19549  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19550  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19551  001754  4A0D               	infsnz	i2printf@f,f,c
 19552  001756  2A0E               	incf	i2printf@f+1,f,c
 19553  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19554  001758  6AF8               	clrf	tblptru,c
 19555  00175A                     	endif
 19556  00175A                     	if	0	;tblptru may be non-zero
 19557  00175A                     	endif
 19558  00175A  0008               	tblrd		*
 19559  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19560  001760  5027               	movf	i2printf@c,w,c
 19561                           
 19562                           ; Switch size 1, requested type "space"
 19563                           ; Number of cases is 5, Range of values is 0 to 117
 19564                           ; switch strategies available:
 19565                           ; Name         Instructions Cycles
 19566                           ; simple_byte           16     9 (average)
 19567                           ;	Chosen strategy is simple_byte
 19568  001762  0A00               	xorlw	0	; case 0
 19569  001764  B4D8               	btfsc	status,2,c
 19570  001766  0012               	return	
 19571  001768  0A64               	xorlw	100	; case 100
 19572  00176A  B4D8               	btfsc	status,2,c
 19573  00176C  D00A               	goto	i2l1255
 19574  00176E  0A0D               	xorlw	13	; case 105
 19575  001770  B4D8               	btfsc	status,2,c
 19576  001772  D007               	goto	i2l1255
 19577  001774  0A1A               	xorlw	26	; case 115
 19578  001776  B4D8               	btfsc	status,2,c
 19579  001778  D778               	goto	i2l5665
 19580  00177A  0A06               	xorlw	6	; case 117
 19581  00177C  B4D8               	btfsc	status,2,c
 19582  00177E  D7E4               	goto	i2l5695
 19583  001780  D0BC               	goto	i2l5771
 19584  001782                     i2l1255:
 19585                           
 19586                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19587  001782  BC26               	btfsc	i2printf@flag,6,c
 19588  001784  D015               	goto	i2l5711
 19589                           
 19590                           ;doprnt.c: 1253: {
 19591                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19592  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19593  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19594  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19595  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19596  001796  0E02               	movlw	2
 19597  001798  2620               	addwf	i2printf@ap,f,c
 19598  00179A  0E00               	movlw	0
 19599  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19600                           
 19601                           ;doprnt.c: 1261: if((int)val < 0) {
 19602  00179E  AE25               	btfss	i2printf@val+1,7,c
 19603  0017A0  D013               	goto	i2l5715
 19604                           
 19605                           ;doprnt.c: 1262: flag |= 0x03;
 19606  0017A2  0E03               	movlw	3
 19607  0017A4  1226               	iorwf	i2printf@flag,f,c
 19608                           
 19609                           ;doprnt.c: 1263: val = -val;
 19610  0017A6  6C24               	negf	i2printf@val,c
 19611  0017A8  1E25               	comf	i2printf@val+1,f,c
 19612  0017AA  B0D8               	btfsc	status,0,c
 19613  0017AC  2A25               	incf	i2printf@val+1,f,c
 19614                           
 19615                           ;doprnt.c: 1264: }
 19616                           ;doprnt.c: 1266: }
 19617  0017AE  D00C               	goto	i2l5715
 19618  0017B0                     i2l5711:
 19619                           
 19620                           ;doprnt.c: 1268: else
 19621                           ;doprnt.c: 1273: {
 19622                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19623  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19624  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19625  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19626  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19627  0017C0  0E02               	movlw	2
 19628  0017C2  2620               	addwf	i2printf@ap,f,c
 19629  0017C4  0E00               	movlw	0
 19630  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19631  0017C8                     i2l5715:
 19632                           
 19633                           ;doprnt.c: 1287: }
 19634                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19635  0017C8  0E01               	movlw	1
 19636  0017CA  6E27               	movwf	i2printf@c,c
 19637  0017CC                     i2l5717:
 19638  0017CC  0E05               	movlw	5
 19639  0017CE  1827               	xorwf	i2printf@c,w,c
 19640  0017D0  B4D8               	btfsc	status,2,c
 19641  0017D2  D015               	goto	i2l5729
 19642                           
 19643                           ;doprnt.c: 1306: if(val < dpowers[c])
 19644  0017D4  5027               	movf	i2printf@c,w,c
 19645  0017D6  0D02               	mullw	2
 19646  0017D8  0E36               	movlw	low _dpowers
 19647  0017DA  24F3               	addwf	prodl,w,c
 19648  0017DC  6EF6               	movwf	tblptrl,c
 19649  0017DE  0EFB               	movlw	high _dpowers
 19650  0017E0  20F4               	addwfc	prodh,w,c
 19651  0017E2  6EF7               	movwf	tblptrh,c
 19652  0017E4                     	if	1	;There are 3 active tblptr bytes
 19653  0017E4  6AF8               	clrf	tblptru,c
 19654  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19655  0017E8  22F8               	addwfc	tblptru,f,c
 19656  0017EA                     	endif
 19657  0017EA  0009               	tblrd		*+
 19658  0017EC  50F5               	movf	tablat,w,c
 19659  0017EE  5C24               	subwf	i2printf@val,w,c
 19660  0017F0  0009               	tblrd		*+
 19661  0017F2  50F5               	movf	tablat,w,c
 19662  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19663  0017F6  A0D8               	btfss	status,0,c
 19664  0017F8  D002               	goto	i2l5729
 19665                           
 19666                           ;doprnt.c: 1307: break;
 19667  0017FA  2A27               	incf	i2printf@c,f,c
 19668  0017FC  D7E7               	goto	i2l5717
 19669  0017FE                     i2l5729:
 19670                           
 19671                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19672  0017FE  5028               	movf	i2printf@width,w,c
 19673  001800  1029               	iorwf	i2printf@width+1,w,c
 19674  001802  B4D8               	btfsc	status,2,c
 19675  001804  D009               	goto	i2l5735
 19676  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19677  00180A  0E03               	movlw	3
 19678  00180C  1619               	andwf	??i2_printf,f,c
 19679  00180E  B4D8               	btfsc	status,2,c
 19680  001810  D003               	goto	i2l5735
 19681                           
 19682                           ;doprnt.c: 1346: width--;
 19683  001812  0628               	decf	i2printf@width,f,c
 19684  001814  A0D8               	btfss	status,0,c
 19685  001816  0629               	decf	i2printf@width+1,f,c
 19686  001818                     i2l5735:
 19687                           
 19688                           ;doprnt.c: 1381: if(width > c)
 19689  001818  0E80               	movlw	128
 19690  00181A  BE27               	btfsc	i2printf@c,7,c
 19691  00181C  0E7F               	movlw	127
 19692  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19693  001820  5028               	movf	i2printf@width,w,c
 19694  001822  5C27               	subwf	i2printf@c,w,c
 19695  001824  5029               	movf	i2printf@width+1,w,c
 19696  001826  0A80               	xorlw	128
 19697  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19698  00182A  B0D8               	btfsc	status,0,c
 19699  00182C  D007               	goto	i2l5739
 19700                           
 19701                           ;doprnt.c: 1382: width -= c;
 19702  00182E  5027               	movf	i2printf@c,w,c
 19703  001830  5E28               	subwf	i2printf@width,f,c
 19704  001832  0E00               	movlw	0
 19705  001834  BE27               	btfsc	i2printf@c,7,c
 19706  001836  0EFF               	movlw	255
 19707  001838  5A29               	subwfb	i2printf@width+1,f,c
 19708  00183A  D004               	goto	i2l5741
 19709  00183C                     i2l5739:
 19710                           
 19711                           ;doprnt.c: 1383: else
 19712                           ;doprnt.c: 1384: width = 0;
 19713  00183C  0E00               	movlw	0
 19714  00183E  6E29               	movwf	i2printf@width+1,c
 19715  001840  0E00               	movlw	0
 19716  001842  6E28               	movwf	i2printf@width,c
 19717  001844                     i2l5741:
 19718                           
 19719                           ;doprnt.c: 1387: if(flag & 0x04) {
 19720  001844  A426               	btfss	i2printf@flag,2,c
 19721  001846  D014               	goto	i2l5753
 19722                           
 19723                           ;doprnt.c: 1392: if(flag & 0x03)
 19724  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19725  00184C  0E03               	movlw	3
 19726  00184E  1619               	andwf	??i2_printf,f,c
 19727  001850  B4D8               	btfsc	status,2,c
 19728  001852  D003               	goto	i2l5747
 19729                           
 19730                           ;doprnt.c: 1393: (putch('-') );
 19731  001854  0E2D               	movlw	45
 19732  001856  ECA3  F023         	call	i2_putch
 19733  00185A                     i2l5747:
 19734                           
 19735                           ;doprnt.c: 1415: if(width)
 19736  00185A  5028               	movf	i2printf@width,w,c
 19737  00185C  1029               	iorwf	i2printf@width+1,w,c
 19738  00185E  B4D8               	btfsc	status,2,c
 19739  001860  D01E               	goto	i2l5763
 19740                           
 19741                           ;doprnt.c: 1417: (putch('0') );
 19742                           
 19743                           ;doprnt.c: 1416: do
 19744  001862  0E30               	movlw	48
 19745  001864  ECA3  F023         	call	i2_putch
 19746                           
 19747                           ;doprnt.c: 1418: while(--width);
 19748  001868  0628               	decf	i2printf@width,f,c
 19749  00186A  A0D8               	btfss	status,0,c
 19750  00186C  0629               	decf	i2printf@width+1,f,c
 19751  00186E  D7F5               	goto	i2l5747
 19752  001870                     i2l5753:
 19753                           
 19754                           ;doprnt.c: 1422: {
 19755                           ;doprnt.c: 1424: if(width
 19756                           ;doprnt.c: 1428: )
 19757  001870  5028               	movf	i2printf@width,w,c
 19758  001872  1029               	iorwf	i2printf@width+1,w,c
 19759  001874  B4D8               	btfsc	status,2,c
 19760  001876  D00A               	goto	i2l5759
 19761  001878                     i2l5755:
 19762                           
 19763                           ;doprnt.c: 1430: (putch(' ') );
 19764  001878  0E20               	movlw	32
 19765  00187A  ECA3  F023         	call	i2_putch
 19766                           
 19767                           ;doprnt.c: 1431: while(--width);
 19768  00187E  0628               	decf	i2printf@width,f,c
 19769  001880  A0D8               	btfss	status,0,c
 19770  001882  0629               	decf	i2printf@width+1,f,c
 19771  001884  5028               	movf	i2printf@width,w,c
 19772  001886  1029               	iorwf	i2printf@width+1,w,c
 19773  001888  A4D8               	btfss	status,2,c
 19774  00188A  D7F6               	goto	i2l5755
 19775  00188C                     i2l5759:
 19776                           
 19777                           ;doprnt.c: 1438: if(flag & 0x03)
 19778  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19779  001890  0E03               	movlw	3
 19780  001892  1619               	andwf	??i2_printf,f,c
 19781  001894  B4D8               	btfsc	status,2,c
 19782  001896  D003               	goto	i2l5763
 19783                           
 19784                           ;doprnt.c: 1439: (putch('-') );
 19785  001898  0E2D               	movlw	45
 19786  00189A  ECA3  F023         	call	i2_putch
 19787  00189E                     i2l5763:
 19788                           
 19789                           ;doprnt.c: 1469: }
 19790                           ;doprnt.c: 1472: prec = c;
 19791  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19792                           
 19793                           ;doprnt.c: 1474: while(prec--) {
 19794  0018A2  D027               	goto	i2l5769
 19795  0018A4                     i2l5765:
 19796                           
 19797                           ;doprnt.c: 1478: {
 19798                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19799  0018A4  501D               	movf	i2printf@prec,w,c
 19800  0018A6  0D02               	mullw	2
 19801  0018A8  0E36               	movlw	low _dpowers
 19802  0018AA  24F3               	addwf	prodl,w,c
 19803  0018AC  6EF6               	movwf	tblptrl,c
 19804  0018AE  0EFB               	movlw	high _dpowers
 19805  0018B0  20F4               	addwfc	prodh,w,c
 19806  0018B2  6EF7               	movwf	tblptrh,c
 19807  0018B4                     	if	1	;There are 3 active tblptr bytes
 19808  0018B4  6AF8               	clrf	tblptru,c
 19809  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 19810  0018B8  22F8               	addwfc	tblptru,f,c
 19811  0018BA                     	endif
 19812  0018BA  0009               	tblrd		*+
 19813  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19814  0018C0  000A               	tblrd		*-
 19815  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19816  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19817  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19818  0018CE  EC03  F020         	call	i2___lwdiv	;wreg free
 19819  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19820  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19821  0018DA  0E00               	movlw	0
 19822  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 19823  0018DE  0E0A               	movlw	10
 19824  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 19825  0018E2  ECC2  F020         	call	i2___lwmod	;wreg free
 19826  0018E6  5001               	movf	?i2___lwmod,w,c
 19827  0018E8  0F30               	addlw	48
 19828  0018EA  6E27               	movwf	i2printf@c,c
 19829                           
 19830                           ;doprnt.c: 1523: }
 19831                           ;doprnt.c: 1524: (putch(c) );
 19832  0018EC  5027               	movf	i2printf@c,w,c
 19833  0018EE  ECA3  F023         	call	i2_putch
 19834  0018F2                     i2l5769:
 19835  0018F2  061D               	decf	i2printf@prec,f,c
 19836  0018F4  281D               	incf	i2printf@prec,w,c
 19837  0018F6  A4D8               	btfss	status,2,c
 19838  0018F8  D7D5               	goto	i2l5765
 19839  0018FA                     i2l5771:
 19840  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19841  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19842  001902  4A0D               	infsnz	i2printf@f,f,c
 19843  001904  2A0E               	incf	i2printf@f+1,f,c
 19844  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19845  001906  6AF8               	clrf	tblptru,c
 19846  001908                     	endif
 19847  001908                     	if	0	;tblptru may be non-zero
 19848  001908                     	endif
 19849  001908  0008               	tblrd		*
 19850  00190A  CFF5 F027          	movff	tablat,i2printf@c
 19851  00190E  5027               	movf	i2printf@c,w,c
 19852  001910  B4D8               	btfsc	status,2,c
 19853  001912  0012               	return	
 19854  001914  D64E               	goto	i2l5641
 19855  001916                     __end_ofi2_printf:
 19856                           	opt stack 0
 19857                           pclatu	equ	0xFFB
 19858                           pclath	equ	0xFFA
 19859                           tblptru	equ	0xFF8
 19860                           tblptrh	equ	0xFF7
 19861                           tblptrl	equ	0xFF6
 19862                           tablat	equ	0xFF5
 19863                           prodh	equ	0xFF4
 19864                           prodl	equ	0xFF3
 19865                           intcon	equ	0xFF2
 19866                           intcon2	equ	0xFF1
 19867                           intcon3	equ	0xFF0
 19868                           indf0	equ	0xFEF
 19869                           postinc0	equ	0xFEE
 19870                           fsr0h	equ	0xFEA
 19871                           fsr0l	equ	0xFE9
 19872                           wreg	equ	0xFE8
 19873                           postdec1	equ	0xFE5
 19874                           fsr1h	equ	0xFE2
 19875                           fsr1l	equ	0xFE1
 19876                           indf2	equ	0xFDF
 19877                           postinc2	equ	0xFDE
 19878                           postdec2	equ	0xFDD
 19879                           fsr2h	equ	0xFDA
 19880                           fsr2l	equ	0xFD9
 19881                           status	equ	0xFD8
 19882                           
 19883 ;; *************** function i2_putch *****************
 19884 ;; Defined at:
 19885 ;;		line 20 in file "lcd.c"
 19886 ;; Parameters:    Size  Location     Type
 19887 ;;  data            1    wreg     unsigned char 
 19888 ;; Auto vars:     Size  Location     Type
 19889 ;;  data            1    2[COMRAM] unsigned char 
 19890 ;; Return value:  Size  Location     Type
 19891 ;;                  1    wreg      void 
 19892 ;; Registers used:
 19893 ;;		wreg, status,2, status,0, cstack
 19894 ;; Tracked objects:
 19895 ;;		On entry : 0/0
 19896 ;;		On exit  : 0/0
 19897 ;;		Unchanged: 0/0
 19898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19902 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19903 ;;Total ram usage:        1 bytes
 19904 ;; Hardware stack levels used:    1
 19905 ;; Hardware stack levels required when called:    1
 19906 ;; This function calls:
 19907 ;;		i2_lcdNibble
 19908 ;; This function is called by:
 19909 ;;		i2_printf
 19910 ;; This function uses a non-reentrant model
 19911 ;;
 19912                           
 19913                           	psect	text78
 19914  004746                     __ptext78:
 19915                           	opt stack 0
 19916  004746                     i2_putch:
 19917                           	opt stack 19
 19918                           
 19919                           ;incstack = 0
 19920                           ;i2putch@data stored from wreg
 19921  004746  6E03               	movwf	i2putch@data,c
 19922                           
 19923                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19924  004748  848C               	bsf	3980,2,c	;volatile
 19925                           
 19926                           ;lcd.c: 22: lcdNibble(data);
 19927  00474A  5003               	movf	i2putch@data,w,c
 19928  00474C  ECAE  F01F         	call	i2_lcdNibble
 19929  004750  0012               	return		;funcret
 19930  004752                     __end_ofi2_putch:
 19931                           	opt stack 0
 19932                           pclatu	equ	0xFFB
 19933                           pclath	equ	0xFFA
 19934                           tblptru	equ	0xFF8
 19935                           tblptrh	equ	0xFF7
 19936                           tblptrl	equ	0xFF6
 19937                           tablat	equ	0xFF5
 19938                           prodh	equ	0xFF4
 19939                           prodl	equ	0xFF3
 19940                           intcon	equ	0xFF2
 19941                           intcon2	equ	0xFF1
 19942                           intcon3	equ	0xFF0
 19943                           indf0	equ	0xFEF
 19944                           postinc0	equ	0xFEE
 19945                           fsr0h	equ	0xFEA
 19946                           fsr0l	equ	0xFE9
 19947                           wreg	equ	0xFE8
 19948                           postdec1	equ	0xFE5
 19949                           fsr1h	equ	0xFE2
 19950                           fsr1l	equ	0xFE1
 19951                           indf2	equ	0xFDF
 19952                           postinc2	equ	0xFDE
 19953                           postdec2	equ	0xFDD
 19954                           fsr2h	equ	0xFDA
 19955                           fsr2l	equ	0xFD9
 19956                           status	equ	0xFD8
 19957                           
 19958 ;; *************** function i2_isdigit *****************
 19959 ;; Defined at:
 19960 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19961 ;; Parameters:    Size  Location     Type
 19962 ;;  c               1    wreg     unsigned char 
 19963 ;; Auto vars:     Size  Location     Type
 19964 ;;  c               1    2[COMRAM] unsigned char 
 19965 ;; Return value:  Size  Location     Type
 19966 ;;		None               void
 19967 ;; Registers used:
 19968 ;;		wreg, status,2, status,0
 19969 ;; Tracked objects:
 19970 ;;		On entry : 0/0
 19971 ;;		On exit  : 0/0
 19972 ;;		Unchanged: 0/0
 19973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19977 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19978 ;;Total ram usage:        3 bytes
 19979 ;; Hardware stack levels used:    1
 19980 ;; This function calls:
 19981 ;;		Nothing
 19982 ;; This function is called by:
 19983 ;;		i2_printf
 19984 ;; This function uses a non-reentrant model
 19985 ;;
 19986                           
 19987                           	psect	text79
 19988  00469E                     __ptext79:
 19989                           	opt stack 0
 19990  00469E                     i2_isdigit:
 19991                           	opt stack 20
 19992                           
 19993                           ;incstack = 0
 19994                           ;i2isdigit@c stored from wreg
 19995  00469E  6E03               	movwf	i2isdigit@c,c
 19996  0046A0  0E00               	movlw	0
 19997  0046A2  6E02               	movwf	i2_isdigit$1936,c
 19998  0046A4  0E3A               	movlw	58
 19999  0046A6  6003               	cpfslt	i2isdigit@c,c
 20000  0046A8  D005               	goto	i2l5345
 20001  0046AA  0E2F               	movlw	47
 20002  0046AC  6403               	cpfsgt	i2isdigit@c,c
 20003  0046AE  D002               	goto	i2l5345
 20004  0046B0  0E01               	movlw	1
 20005  0046B2  6E02               	movwf	i2_isdigit$1936,c
 20006  0046B4                     i2l5345:
 20007  0046B4  C002  F001         	movff	i2_isdigit$1936,??i2_isdigit
 20008  0046B8  3001               	rrcf	??i2_isdigit,w,c
 20009  0046BA  0012               	return	
 20010  0046BC                     __end_ofi2_isdigit:
 20011                           	opt stack 0
 20012                           pclatu	equ	0xFFB
 20013                           pclath	equ	0xFFA
 20014                           tblptru	equ	0xFF8
 20015                           tblptrh	equ	0xFF7
 20016                           tblptrl	equ	0xFF6
 20017                           tablat	equ	0xFF5
 20018                           prodh	equ	0xFF4
 20019                           prodl	equ	0xFF3
 20020                           intcon	equ	0xFF2
 20021                           intcon2	equ	0xFF1
 20022                           intcon3	equ	0xFF0
 20023                           indf0	equ	0xFEF
 20024                           postinc0	equ	0xFEE
 20025                           fsr0h	equ	0xFEA
 20026                           fsr0l	equ	0xFE9
 20027                           wreg	equ	0xFE8
 20028                           postdec1	equ	0xFE5
 20029                           fsr1h	equ	0xFE2
 20030                           fsr1l	equ	0xFE1
 20031                           indf2	equ	0xFDF
 20032                           postinc2	equ	0xFDE
 20033                           postdec2	equ	0xFDD
 20034                           fsr2h	equ	0xFDA
 20035                           fsr2l	equ	0xFD9
 20036                           status	equ	0xFD8
 20037                           
 20038 ;; *************** function i2___wmul *****************
 20039 ;; Defined at:
 20040 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20041 ;; Parameters:    Size  Location     Type
 20042 ;;  multiplier      2    0[COMRAM] unsigned int 
 20043 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20044 ;; Auto vars:     Size  Location     Type
 20045 ;;  __wmul          2    4[COMRAM] unsigned int 
 20046 ;; Return value:  Size  Location     Type
 20047 ;;                  2    0[COMRAM] unsigned int 
 20048 ;; Registers used:
 20049 ;;		wreg, status,2, status,0, prodl, prodh
 20050 ;; Tracked objects:
 20051 ;;		On entry : 0/0
 20052 ;;		On exit  : 0/0
 20053 ;;		Unchanged: 0/0
 20054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20055 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20058 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20059 ;;Total ram usage:        6 bytes
 20060 ;; Hardware stack levels used:    1
 20061 ;; This function calls:
 20062 ;;		Nothing
 20063 ;; This function is called by:
 20064 ;;		_printSortTimer
 20065 ;;		_retrieveLog
 20066 ;;		i2_printf
 20067 ;; This function uses a non-reentrant model
 20068 ;;
 20069                           
 20070                           	psect	text80
 20071  0045EA                     __ptext80:
 20072                           	opt stack 0
 20073  0045EA                     i2___wmul:
 20074                           	opt stack 20
 20075                           
 20076                           ;incstack = 0
 20077  0045EA  5001               	movf	i2___wmul@multiplier,w,c
 20078  0045EC  0203               	mulwf	i2___wmul@multiplicand,c
 20079  0045EE  CFF3 F005          	movff	prodl,i2___wmul@product
 20080  0045F2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20081  0045F6  5001               	movf	i2___wmul@multiplier,w,c
 20082  0045F8  0204               	mulwf	i2___wmul@multiplicand+1,c
 20083  0045FA  50F3               	movf	prodl,w,c
 20084  0045FC  2606               	addwf	i2___wmul@product+1,f,c
 20085  0045FE  5002               	movf	i2___wmul@multiplier+1,w,c
 20086  004600  0203               	mulwf	i2___wmul@multiplicand,c
 20087  004602  50F3               	movf	prodl,w,c
 20088  004604  2606               	addwf	i2___wmul@product+1,f,c
 20089  004606  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20090  00460A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20091  00460E  0012               	return	
 20092  004610                     __end_ofi2___wmul:
 20093                           	opt stack 0
 20094                           pclatu	equ	0xFFB
 20095                           pclath	equ	0xFFA
 20096                           tblptru	equ	0xFF8
 20097                           tblptrh	equ	0xFF7
 20098                           tblptrl	equ	0xFF6
 20099                           tablat	equ	0xFF5
 20100                           prodh	equ	0xFF4
 20101                           prodl	equ	0xFF3
 20102                           intcon	equ	0xFF2
 20103                           intcon2	equ	0xFF1
 20104                           intcon3	equ	0xFF0
 20105                           indf0	equ	0xFEF
 20106                           postinc0	equ	0xFEE
 20107                           fsr0h	equ	0xFEA
 20108                           fsr0l	equ	0xFE9
 20109                           wreg	equ	0xFE8
 20110                           postdec1	equ	0xFE5
 20111                           fsr1h	equ	0xFE2
 20112                           fsr1l	equ	0xFE1
 20113                           indf2	equ	0xFDF
 20114                           postinc2	equ	0xFDE
 20115                           postdec2	equ	0xFDD
 20116                           fsr2h	equ	0xFDA
 20117                           fsr2l	equ	0xFD9
 20118                           status	equ	0xFD8
 20119                           
 20120 ;; *************** function i2___lwmod *****************
 20121 ;; Defined at:
 20122 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20123 ;; Parameters:    Size  Location     Type
 20124 ;;  dividend        2    0[COMRAM] unsigned int 
 20125 ;;  divisor         2    2[COMRAM] unsigned int 
 20126 ;; Auto vars:     Size  Location     Type
 20127 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20128 ;; Return value:  Size  Location     Type
 20129 ;;                  2    0[COMRAM] unsigned int 
 20130 ;; Registers used:
 20131 ;;		wreg, status,2, status,0
 20132 ;; Tracked objects:
 20133 ;;		On entry : 0/0
 20134 ;;		On exit  : 0/0
 20135 ;;		Unchanged: 0/0
 20136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20140 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20141 ;;Total ram usage:        5 bytes
 20142 ;; Hardware stack levels used:    1
 20143 ;; This function calls:
 20144 ;;		Nothing
 20145 ;; This function is called by:
 20146 ;;		_printSortTimer
 20147 ;;		i2_printf
 20148 ;; This function uses a non-reentrant model
 20149 ;;
 20150                           
 20151                           	psect	text81
 20152  004184                     __ptext81:
 20153                           	opt stack 0
 20154  004184                     i2___lwmod:
 20155                           	opt stack 20
 20156                           
 20157                           ;incstack = 0
 20158  004184  5003               	movf	i2___lwmod@divisor,w,c
 20159  004186  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20160  004188  B4D8               	btfsc	status,2,c
 20161  00418A  D018               	goto	i2l1712
 20162  00418C  0E01               	movlw	1
 20163  00418E  6E05               	movwf	i2___lwmod@counter,c
 20164  004190  D004               	goto	i2l5377
 20165  004192                     i2l5375:
 20166  004192  90D8               	bcf	status,0,c
 20167  004194  3603               	rlcf	i2___lwmod@divisor,f,c
 20168  004196  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20169  004198  2A05               	incf	i2___lwmod@counter,f,c
 20170  00419A                     i2l5377:
 20171  00419A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20172  00419C  D7FA               	goto	i2l5375
 20173  00419E                     i2l5379:
 20174  00419E  5003               	movf	i2___lwmod@divisor,w,c
 20175  0041A0  5C01               	subwf	i2___lwmod@dividend,w,c
 20176  0041A2  5004               	movf	i2___lwmod@divisor+1,w,c
 20177  0041A4  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20178  0041A6  A0D8               	btfss	status,0,c
 20179  0041A8  D004               	goto	i2l5383
 20180  0041AA  5003               	movf	i2___lwmod@divisor,w,c
 20181  0041AC  5E01               	subwf	i2___lwmod@dividend,f,c
 20182  0041AE  5004               	movf	i2___lwmod@divisor+1,w,c
 20183  0041B0  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20184  0041B2                     i2l5383:
 20185  0041B2  90D8               	bcf	status,0,c
 20186  0041B4  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20187  0041B6  3203               	rrcf	i2___lwmod@divisor,f,c
 20188  0041B8  2E05               	decfsz	i2___lwmod@counter,f,c
 20189  0041BA  D7F1               	goto	i2l5379
 20190  0041BC                     i2l1712:
 20191  0041BC  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20192  0041C0  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20193  0041C4  0012               	return		;funcret
 20194  0041C6                     __end_ofi2___lwmod:
 20195                           	opt stack 0
 20196                           pclatu	equ	0xFFB
 20197                           pclath	equ	0xFFA
 20198                           tblptru	equ	0xFF8
 20199                           tblptrh	equ	0xFF7
 20200                           tblptrl	equ	0xFF6
 20201                           tablat	equ	0xFF5
 20202                           prodh	equ	0xFF4
 20203                           prodl	equ	0xFF3
 20204                           intcon	equ	0xFF2
 20205                           intcon2	equ	0xFF1
 20206                           intcon3	equ	0xFF0
 20207                           indf0	equ	0xFEF
 20208                           postinc0	equ	0xFEE
 20209                           fsr0h	equ	0xFEA
 20210                           fsr0l	equ	0xFE9
 20211                           wreg	equ	0xFE8
 20212                           postdec1	equ	0xFE5
 20213                           fsr1h	equ	0xFE2
 20214                           fsr1l	equ	0xFE1
 20215                           indf2	equ	0xFDF
 20216                           postinc2	equ	0xFDE
 20217                           postdec2	equ	0xFDD
 20218                           fsr2h	equ	0xFDA
 20219                           fsr2l	equ	0xFD9
 20220                           status	equ	0xFD8
 20221                           
 20222 ;; *************** function i2___lwdiv *****************
 20223 ;; Defined at:
 20224 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20225 ;; Parameters:    Size  Location     Type
 20226 ;;  dividend        2    5[COMRAM] unsigned int 
 20227 ;;  divisor         2    7[COMRAM] unsigned int 
 20228 ;; Auto vars:     Size  Location     Type
 20229 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20230 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20231 ;; Return value:  Size  Location     Type
 20232 ;;                  2    5[COMRAM] unsigned int 
 20233 ;; Registers used:
 20234 ;;		wreg, status,2, status,0
 20235 ;; Tracked objects:
 20236 ;;		On entry : 0/0
 20237 ;;		On exit  : 0/0
 20238 ;;		Unchanged: 0/0
 20239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20240 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20243 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20244 ;;Total ram usage:        7 bytes
 20245 ;; Hardware stack levels used:    1
 20246 ;; This function calls:
 20247 ;;		Nothing
 20248 ;; This function is called by:
 20249 ;;		_printSortTimer
 20250 ;;		i2_printf
 20251 ;; This function uses a non-reentrant model
 20252 ;;
 20253                           
 20254                           	psect	text82
 20255  004006                     __ptext82:
 20256                           	opt stack 0
 20257  004006                     i2___lwdiv:
 20258                           	opt stack 20
 20259                           
 20260                           ;incstack = 0
 20261  004006  0E00               	movlw	0
 20262  004008  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20263  00400A  0E00               	movlw	0
 20264  00400C  6E0A               	movwf	i2___lwdiv@quotient,c
 20265  00400E  5008               	movf	i2___lwdiv@divisor,w,c
 20266  004010  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20267  004012  B4D8               	btfsc	status,2,c
 20268  004014  D01C               	goto	i2l1702
 20269  004016  0E01               	movlw	1
 20270  004018  6E0C               	movwf	i2___lwdiv@counter,c
 20271  00401A  D004               	goto	i2l5357
 20272  00401C                     i2l5355:
 20273  00401C  90D8               	bcf	status,0,c
 20274  00401E  3608               	rlcf	i2___lwdiv@divisor,f,c
 20275  004020  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20276  004022  2A0C               	incf	i2___lwdiv@counter,f,c
 20277  004024                     i2l5357:
 20278  004024  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20279  004026  D7FA               	goto	i2l5355
 20280  004028                     i2l5359:
 20281  004028  90D8               	bcf	status,0,c
 20282  00402A  360A               	rlcf	i2___lwdiv@quotient,f,c
 20283  00402C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20284  00402E  5008               	movf	i2___lwdiv@divisor,w,c
 20285  004030  5C06               	subwf	i2___lwdiv@dividend,w,c
 20286  004032  5009               	movf	i2___lwdiv@divisor+1,w,c
 20287  004034  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20288  004036  A0D8               	btfss	status,0,c
 20289  004038  D005               	goto	i2l5367
 20290  00403A  5008               	movf	i2___lwdiv@divisor,w,c
 20291  00403C  5E06               	subwf	i2___lwdiv@dividend,f,c
 20292  00403E  5009               	movf	i2___lwdiv@divisor+1,w,c
 20293  004040  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20294  004042  800A               	bsf	i2___lwdiv@quotient,0,c
 20295  004044                     i2l5367:
 20296  004044  90D8               	bcf	status,0,c
 20297  004046  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20298  004048  3208               	rrcf	i2___lwdiv@divisor,f,c
 20299  00404A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20300  00404C  D7ED               	goto	i2l5359
 20301  00404E                     i2l1702:
 20302  00404E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20303  004052  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20304  004056  0012               	return		;funcret
 20305  004058                     __end_ofi2___lwdiv:
 20306                           	opt stack 0
 20307                           pclatu	equ	0xFFB
 20308                           pclath	equ	0xFFA
 20309                           tblptru	equ	0xFF8
 20310                           tblptrh	equ	0xFF7
 20311                           tblptrl	equ	0xFF6
 20312                           tablat	equ	0xFF5
 20313                           prodh	equ	0xFF4
 20314                           prodl	equ	0xFF3
 20315                           intcon	equ	0xFF2
 20316                           intcon2	equ	0xFF1
 20317                           intcon3	equ	0xFF0
 20318                           indf0	equ	0xFEF
 20319                           postinc0	equ	0xFEE
 20320                           fsr0h	equ	0xFEA
 20321                           fsr0l	equ	0xFE9
 20322                           wreg	equ	0xFE8
 20323                           postdec1	equ	0xFE5
 20324                           fsr1h	equ	0xFE2
 20325                           fsr1l	equ	0xFE1
 20326                           indf2	equ	0xFDF
 20327                           postinc2	equ	0xFDE
 20328                           postdec2	equ	0xFDD
 20329                           fsr2h	equ	0xFDA
 20330                           fsr2l	equ	0xFD9
 20331                           status	equ	0xFD8
 20332                           
 20333 ;; *************** function i2_lcdInst *****************
 20334 ;; Defined at:
 20335 ;;		line 15 in file "lcd.c"
 20336 ;; Parameters:    Size  Location     Type
 20337 ;;  data            1    wreg     unsigned char 
 20338 ;; Auto vars:     Size  Location     Type
 20339 ;;  data            1    2[COMRAM] unsigned char 
 20340 ;; Return value:  Size  Location     Type
 20341 ;;                  1    wreg      void 
 20342 ;; Registers used:
 20343 ;;		wreg, status,2, status,0, cstack
 20344 ;; Tracked objects:
 20345 ;;		On entry : 0/0
 20346 ;;		On exit  : 0/0
 20347 ;;		Unchanged: 0/0
 20348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20350 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20353 ;;Total ram usage:        1 bytes
 20354 ;; Hardware stack levels used:    1
 20355 ;; Hardware stack levels required when called:    1
 20356 ;; This function calls:
 20357 ;;		i2_lcdNibble
 20358 ;; This function is called by:
 20359 ;;		_change_state_to_menu_11
 20360 ;;		_change_state_to_menu_23
 20361 ;;		_change_state_to_logs_11
 20362 ;;		_change_state_to_logs_12
 20363 ;;		_change_state_to_logs_22
 20364 ;;		_change_state_to_logs_23
 20365 ;;		_change_state_to_logs_33
 20366 ;;		_change_state_to_logs_34
 20367 ;;		_printSortTimer
 20368 ;;		i2_change_state_to_menu_start
 20369 ;;		i2_change_state_to_menu_12
 20370 ;;		i2_change_state_to_menu_22
 20371 ;;		i2_printRTC
 20372 ;; This function uses a non-reentrant model
 20373 ;;
 20374                           
 20375                           	psect	text83
 20376  004752                     __ptext83:
 20377                           	opt stack 0
 20378  004752                     i2_lcdInst:
 20379                           	opt stack 19
 20380                           
 20381                           ;incstack = 0
 20382                           ;i2lcdInst@data stored from wreg
 20383  004752  6E03               	movwf	i2lcdInst@data,c
 20384                           
 20385                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20386  004754  948C               	bcf	3980,2,c	;volatile
 20387                           
 20388                           ;lcd.c: 17: lcdNibble(data);
 20389  004756  5003               	movf	i2lcdInst@data,w,c
 20390  004758  ECAE  F01F         	call	i2_lcdNibble
 20391  00475C  0012               	return		;funcret
 20392  00475E                     __end_ofi2_lcdInst:
 20393                           	opt stack 0
 20394                           pclatu	equ	0xFFB
 20395                           pclath	equ	0xFFA
 20396                           tblptru	equ	0xFF8
 20397                           tblptrh	equ	0xFF7
 20398                           tblptrl	equ	0xFF6
 20399                           tablat	equ	0xFF5
 20400                           prodh	equ	0xFF4
 20401                           prodl	equ	0xFF3
 20402                           intcon	equ	0xFF2
 20403                           intcon2	equ	0xFF1
 20404                           intcon3	equ	0xFF0
 20405                           indf0	equ	0xFEF
 20406                           postinc0	equ	0xFEE
 20407                           fsr0h	equ	0xFEA
 20408                           fsr0l	equ	0xFE9
 20409                           wreg	equ	0xFE8
 20410                           postdec1	equ	0xFE5
 20411                           fsr1h	equ	0xFE2
 20412                           fsr1l	equ	0xFE1
 20413                           indf2	equ	0xFDF
 20414                           postinc2	equ	0xFDE
 20415                           postdec2	equ	0xFDD
 20416                           fsr2h	equ	0xFDA
 20417                           fsr2l	equ	0xFD9
 20418                           status	equ	0xFD8
 20419                           
 20420 ;; *************** function i2_lcdNibble *****************
 20421 ;; Defined at:
 20422 ;;		line 25 in file "lcd.c"
 20423 ;; Parameters:    Size  Location     Type
 20424 ;;  data            1    wreg     unsigned char 
 20425 ;; Auto vars:     Size  Location     Type
 20426 ;;  data            1    1[COMRAM] unsigned char 
 20427 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20428 ;; Return value:  Size  Location     Type
 20429 ;;                  1    wreg      void 
 20430 ;; Registers used:
 20431 ;;		wreg, status,2, status,0
 20432 ;; Tracked objects:
 20433 ;;		On entry : 0/0
 20434 ;;		On exit  : 0/0
 20435 ;;		Unchanged: 0/0
 20436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20441 ;;Total ram usage:        2 bytes
 20442 ;; Hardware stack levels used:    1
 20443 ;; This function calls:
 20444 ;;		Nothing
 20445 ;; This function is called by:
 20446 ;;		i2_lcdInst
 20447 ;;		i2_putch
 20448 ;; This function uses a non-reentrant model
 20449 ;;
 20450                           
 20451                           	psect	text84
 20452  003F5C                     __ptext84:
 20453                           	opt stack 0
 20454  003F5C                     i2_lcdNibble:
 20455                           	opt stack 19
 20456                           
 20457                           ;incstack = 0
 20458                           ;i2lcdNibble@data stored from wreg
 20459  003F5C  6E02               	movwf	i2lcdNibble@data,c
 20460                           
 20461                           ;lcd.c: 27: char temp = data & 0xF0;
 20462  003F5E  5002               	movf	i2lcdNibble@data,w,c
 20463  003F60  0BF0               	andlw	240
 20464  003F62  6E01               	movwf	i2lcdNibble@temp,c
 20465                           
 20466                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20467  003F64  508C               	movf	3980,w,c	;volatile
 20468  003F66  0B0F               	andlw	15
 20469  003F68  6E8C               	movwf	3980,c	;volatile
 20470                           
 20471                           ;lcd.c: 29: LATD = temp | LATD;
 20472  003F6A  5001               	movf	i2lcdNibble@temp,w,c
 20473  003F6C  108C               	iorwf	3980,w,c	;volatile
 20474  003F6E  6E8C               	movwf	3980,c	;volatile
 20475                           
 20476                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20477  003F70  868C               	bsf	3980,3,c	;volatile
 20478                           
 20479                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20480  003F72  0E42               	movlw	66
 20481  003F74                     i2u816_47:
 20482  003F74  2EE8               	decfsz	wreg,f,c
 20483  003F76  D7FE               	bra	i2u816_47
 20484  003F78  D000               	nop2	
 20485                           
 20486                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20487  003F7A  968C               	bcf	3980,3,c	;volatile
 20488                           
 20489                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20490  003F7C  0E42               	movlw	66
 20491  003F7E                     i2u817_47:
 20492  003F7E  2EE8               	decfsz	wreg,f,c
 20493  003F80  D7FE               	bra	i2u817_47
 20494  003F82  D000               	nop2	
 20495                           
 20496                           ;lcd.c: 36: data = data << 4;
 20497  003F84  3802               	swapf	i2lcdNibble@data,w,c
 20498  003F86  0BF0               	andlw	240
 20499  003F88  6E02               	movwf	i2lcdNibble@data,c
 20500                           
 20501                           ;lcd.c: 38: temp = data & 0xF0;
 20502  003F8A  5002               	movf	i2lcdNibble@data,w,c
 20503  003F8C  0BF0               	andlw	240
 20504  003F8E  6E01               	movwf	i2lcdNibble@temp,c
 20505                           
 20506                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20507  003F90  508C               	movf	3980,w,c	;volatile
 20508  003F92  0B0F               	andlw	15
 20509  003F94  6E8C               	movwf	3980,c	;volatile
 20510                           
 20511                           ;lcd.c: 40: LATD = temp | LATD;
 20512  003F96  5001               	movf	i2lcdNibble@temp,w,c
 20513  003F98  108C               	iorwf	3980,w,c	;volatile
 20514  003F9A  6E8C               	movwf	3980,c	;volatile
 20515                           
 20516                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20517  003F9C  868C               	bsf	3980,3,c	;volatile
 20518                           
 20519                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20520  003F9E  0E42               	movlw	66
 20521  003FA0                     i2u818_47:
 20522  003FA0  2EE8               	decfsz	wreg,f,c
 20523  003FA2  D7FE               	bra	i2u818_47
 20524  003FA4  D000               	nop2	
 20525                           
 20526                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20527  003FA6  968C               	bcf	3980,3,c	;volatile
 20528                           
 20529                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20530  003FA8  0E42               	movlw	66
 20531  003FAA                     i2u819_47:
 20532  003FAA  2EE8               	decfsz	wreg,f,c
 20533  003FAC  D7FE               	bra	i2u819_47
 20534  003FAE  D000               	nop2	
 20535  003FB0  0012               	return		;funcret
 20536  003FB2                     __end_ofi2_lcdNibble:
 20537                           	opt stack 0
 20538                           pclatu	equ	0xFFB
 20539                           pclath	equ	0xFFA
 20540                           tblptru	equ	0xFF8
 20541                           tblptrh	equ	0xFF7
 20542                           tblptrl	equ	0xFF6
 20543                           tablat	equ	0xFF5
 20544                           prodh	equ	0xFF4
 20545                           prodl	equ	0xFF3
 20546                           intcon	equ	0xFF2
 20547                           intcon2	equ	0xFF1
 20548                           intcon3	equ	0xFF0
 20549                           indf0	equ	0xFEF
 20550                           postinc0	equ	0xFEE
 20551                           fsr0h	equ	0xFEA
 20552                           fsr0l	equ	0xFE9
 20553                           wreg	equ	0xFE8
 20554                           postdec1	equ	0xFE5
 20555                           fsr1h	equ	0xFE2
 20556                           fsr1l	equ	0xFE1
 20557                           indf2	equ	0xFDF
 20558                           postinc2	equ	0xFDE
 20559                           postdec2	equ	0xFDD
 20560                           fsr2h	equ	0xFDA
 20561                           fsr2l	equ	0xFD9
 20562                           status	equ	0xFD8
 20563                           
 20564 ;; *************** function i2_getRTC *****************
 20565 ;; Defined at:
 20566 ;;		line 44 in file "RTC.c"
 20567 ;; Parameters:    Size  Location     Type
 20568 ;;		None
 20569 ;; Auto vars:     Size  Location     Type
 20570 ;;  getRTC          2    3[COMRAM] int 
 20571 ;; Return value:  Size  Location     Type
 20572 ;;                  1    wreg      void 
 20573 ;; Registers used:
 20574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20575 ;; Tracked objects:
 20576 ;;		On entry : 0/0
 20577 ;;		On exit  : 0/0
 20578 ;;		Unchanged: 0/0
 20579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20581 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20583 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20584 ;;Total ram usage:        2 bytes
 20585 ;; Hardware stack levels used:    1
 20586 ;; Hardware stack levels required when called:    2
 20587 ;; This function calls:
 20588 ;;		i2_I2C_Master_Read
 20589 ;;		i2_I2C_Master_Start
 20590 ;;		i2_I2C_Master_Stop
 20591 ;;		i2_I2C_Master_Write
 20592 ;; This function is called by:
 20593 ;;		_printSortTimer
 20594 ;;		i2_printRTC
 20595 ;; This function uses a non-reentrant model
 20596 ;;
 20597                           
 20598                           	psect	text85
 20599  003C4C                     __ptext85:
 20600                           	opt stack 0
 20601  003C4C                     i2_getRTC:
 20602                           	opt stack 18
 20603                           
 20604                           ;RTC.c: 48: I2C_Master_Start();
 20605                           
 20606                           ;incstack = 0
 20607  003C4C  ECC9  F023         	call	i2_I2C_Master_Start	;wreg free
 20608                           
 20609                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20610  003C50  0E00               	movlw	0
 20611  003C52  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20612  003C54  0ED0               	movlw	208
 20613  003C56  6E02               	movwf	i2I2C_Master_Write@d,c
 20614  003C58  ECB4  F023         	call	i2_I2C_Master_Write	;wreg free
 20615                           
 20616                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20617  003C5C  0E00               	movlw	0
 20618  003C5E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20619  003C60  0E00               	movlw	0
 20620  003C62  6E02               	movwf	i2I2C_Master_Write@d,c
 20621  003C64  ECB4  F023         	call	i2_I2C_Master_Write	;wreg free
 20622                           
 20623                           ;RTC.c: 51: I2C_Master_Stop();
 20624  003C68  ECC5  F023         	call	i2_I2C_Master_Stop	;wreg free
 20625                           
 20626                           ;RTC.c: 54: I2C_Master_Start();
 20627  003C6C  ECC9  F023         	call	i2_I2C_Master_Start	;wreg free
 20628                           
 20629                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20630  003C70  0E00               	movlw	0
 20631  003C72  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20632  003C74  0ED1               	movlw	209
 20633  003C76  6E02               	movwf	i2I2C_Master_Write@d,c
 20634  003C78  ECB4  F023         	call	i2_I2C_Master_Write	;wreg free
 20635                           
 20636                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20637  003C7C  0E00               	movlw	0
 20638  003C7E  6E05               	movwf	i2getRTC@i+1,c
 20639  003C80  0E00               	movlw	0
 20640  003C82  6E04               	movwf	i2getRTC@i,c
 20641  003C84                     i2l5613:
 20642  003C84  BE05               	btfsc	i2getRTC@i+1,7,c
 20643  003C86  D006               	goto	i2l5617
 20644  003C88  5005               	movf	i2getRTC@i+1,w,c
 20645  003C8A  E111               	bnz	i2l5623
 20646  003C8C  0E06               	movlw	6
 20647  003C8E  5C04               	subwf	i2getRTC@i,w,c
 20648  003C90  B0D8               	btfsc	status,0,c
 20649  003C92  D00D               	goto	i2l5623
 20650  003C94                     i2l5617:
 20651                           
 20652                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20653  003C94  0E24               	movlw	low _time
 20654  003C96  2404               	addwf	i2getRTC@i,w,c
 20655  003C98  6ED9               	movwf	fsr2l,c
 20656  003C9A  0E01               	movlw	high _time
 20657  003C9C  2005               	addwfc	i2getRTC@i+1,w,c
 20658  003C9E  6EDA               	movwf	fsr2h,c
 20659  003CA0  0E01               	movlw	1
 20660  003CA2  EC08  F023         	call	i2_I2C_Master_Read
 20661  003CA6  6EDF               	movwf	indf2,c
 20662  003CA8  4A04               	infsnz	i2getRTC@i,f,c
 20663  003CAA  2A05               	incf	i2getRTC@i+1,f,c
 20664  003CAC  D7EB               	goto	i2l5613
 20665  003CAE                     i2l5623:
 20666                           
 20667                           ;RTC.c: 58: }
 20668                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20669  003CAE  0E00               	movlw	0
 20670  003CB0  EC08  F023         	call	i2_I2C_Master_Read
 20671  003CB4  0101               	movlb	1	; () banked
 20672  003CB6  6F2A               	movwf	(_time+6)& (0+255),b
 20673                           
 20674                           ;RTC.c: 60: I2C_Master_Stop();
 20675  003CB8  ECC5  F023         	call	i2_I2C_Master_Stop	;wreg free
 20676  003CBC  0012               	return		;funcret
 20677  003CBE                     __end_ofi2_getRTC:
 20678                           	opt stack 0
 20679                           pclatu	equ	0xFFB
 20680                           pclath	equ	0xFFA
 20681                           tblptru	equ	0xFF8
 20682                           tblptrh	equ	0xFF7
 20683                           tblptrl	equ	0xFF6
 20684                           tablat	equ	0xFF5
 20685                           prodh	equ	0xFF4
 20686                           prodl	equ	0xFF3
 20687                           intcon	equ	0xFF2
 20688                           intcon2	equ	0xFF1
 20689                           intcon3	equ	0xFF0
 20690                           indf0	equ	0xFEF
 20691                           postinc0	equ	0xFEE
 20692                           fsr0h	equ	0xFEA
 20693                           fsr0l	equ	0xFE9
 20694                           wreg	equ	0xFE8
 20695                           postdec1	equ	0xFE5
 20696                           fsr1h	equ	0xFE2
 20697                           fsr1l	equ	0xFE1
 20698                           indf2	equ	0xFDF
 20699                           postinc2	equ	0xFDE
 20700                           postdec2	equ	0xFDD
 20701                           fsr2h	equ	0xFDA
 20702                           fsr2l	equ	0xFD9
 20703                           status	equ	0xFD8
 20704                           
 20705 ;; *************** function i2_I2C_Master_Write *****************
 20706 ;; Defined at:
 20707 ;;		line 49 in file "I2C.c"
 20708 ;; Parameters:    Size  Location     Type
 20709 ;;  d               2    1[COMRAM] unsigned int 
 20710 ;; Auto vars:     Size  Location     Type
 20711 ;;		None
 20712 ;; Return value:  Size  Location     Type
 20713 ;;                  1    wreg      void 
 20714 ;; Registers used:
 20715 ;;		wreg, status,2, status,0, cstack
 20716 ;; Tracked objects:
 20717 ;;		On entry : 0/0
 20718 ;;		On exit  : 0/0
 20719 ;;		Unchanged: 0/0
 20720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20725 ;;Total ram usage:        2 bytes
 20726 ;; Hardware stack levels used:    1
 20727 ;; Hardware stack levels required when called:    1
 20728 ;; This function calls:
 20729 ;;		i2_I2C_Master_Wait
 20730 ;; This function is called by:
 20731 ;;		i2_getRTC
 20732 ;; This function uses a non-reentrant model
 20733 ;;
 20734                           
 20735                           	psect	text86
 20736  004768                     __ptext86:
 20737                           	opt stack 0
 20738  004768                     i2_I2C_Master_Write:
 20739                           	opt stack 18
 20740                           
 20741                           ;I2C.c: 51: I2C_Master_Wait();
 20742                           
 20743                           ;incstack = 0
 20744  004768  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20745                           
 20746                           ;I2C.c: 52: SSPBUF = d;
 20747  00476C  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20748  004770  0012               	return		;funcret
 20749  004772                     __end_ofi2_I2C_Master_Write:
 20750                           	opt stack 0
 20751                           pclatu	equ	0xFFB
 20752                           pclath	equ	0xFFA
 20753                           tblptru	equ	0xFF8
 20754                           tblptrh	equ	0xFF7
 20755                           tblptrl	equ	0xFF6
 20756                           tablat	equ	0xFF5
 20757                           prodh	equ	0xFF4
 20758                           prodl	equ	0xFF3
 20759                           intcon	equ	0xFF2
 20760                           intcon2	equ	0xFF1
 20761                           intcon3	equ	0xFF0
 20762                           indf0	equ	0xFEF
 20763                           postinc0	equ	0xFEE
 20764                           fsr0h	equ	0xFEA
 20765                           fsr0l	equ	0xFE9
 20766                           wreg	equ	0xFE8
 20767                           postdec1	equ	0xFE5
 20768                           fsr1h	equ	0xFE2
 20769                           fsr1l	equ	0xFE1
 20770                           indf2	equ	0xFDF
 20771                           postinc2	equ	0xFDE
 20772                           postdec2	equ	0xFDD
 20773                           fsr2h	equ	0xFDA
 20774                           fsr2l	equ	0xFD9
 20775                           status	equ	0xFD8
 20776                           
 20777 ;; *************** function i2_I2C_Master_Stop *****************
 20778 ;; Defined at:
 20779 ;;		line 43 in file "I2C.c"
 20780 ;; Parameters:    Size  Location     Type
 20781 ;;		None
 20782 ;; Auto vars:     Size  Location     Type
 20783 ;;		None
 20784 ;; Return value:  Size  Location     Type
 20785 ;;                  1    wreg      void 
 20786 ;; Registers used:
 20787 ;;		wreg, status,2, status,0, cstack
 20788 ;; Tracked objects:
 20789 ;;		On entry : 0/0
 20790 ;;		On exit  : 0/0
 20791 ;;		Unchanged: 0/0
 20792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20797 ;;Total ram usage:        0 bytes
 20798 ;; Hardware stack levels used:    1
 20799 ;; Hardware stack levels required when called:    1
 20800 ;; This function calls:
 20801 ;;		i2_I2C_Master_Wait
 20802 ;; This function is called by:
 20803 ;;		i2_getRTC
 20804 ;; This function uses a non-reentrant model
 20805 ;;
 20806                           
 20807                           	psect	text87
 20808  00478A                     __ptext87:
 20809                           	opt stack 0
 20810  00478A                     i2_I2C_Master_Stop:
 20811                           	opt stack 18
 20812                           
 20813                           ;I2C.c: 45: I2C_Master_Wait();
 20814                           
 20815                           ;incstack = 0
 20816  00478A  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20817                           
 20818                           ;I2C.c: 46: PEN = 1;
 20819  00478E  84C5               	bsf	4037,2,c	;volatile
 20820  004790  0012               	return		;funcret
 20821  004792                     __end_ofi2_I2C_Master_Stop:
 20822                           	opt stack 0
 20823                           pclatu	equ	0xFFB
 20824                           pclath	equ	0xFFA
 20825                           tblptru	equ	0xFF8
 20826                           tblptrh	equ	0xFF7
 20827                           tblptrl	equ	0xFF6
 20828                           tablat	equ	0xFF5
 20829                           prodh	equ	0xFF4
 20830                           prodl	equ	0xFF3
 20831                           intcon	equ	0xFF2
 20832                           intcon2	equ	0xFF1
 20833                           intcon3	equ	0xFF0
 20834                           indf0	equ	0xFEF
 20835                           postinc0	equ	0xFEE
 20836                           fsr0h	equ	0xFEA
 20837                           fsr0l	equ	0xFE9
 20838                           wreg	equ	0xFE8
 20839                           postdec1	equ	0xFE5
 20840                           fsr1h	equ	0xFE2
 20841                           fsr1l	equ	0xFE1
 20842                           indf2	equ	0xFDF
 20843                           postinc2	equ	0xFDE
 20844                           postdec2	equ	0xFDD
 20845                           fsr2h	equ	0xFDA
 20846                           fsr2l	equ	0xFD9
 20847                           status	equ	0xFD8
 20848                           
 20849 ;; *************** function i2_I2C_Master_Start *****************
 20850 ;; Defined at:
 20851 ;;		line 31 in file "I2C.c"
 20852 ;; Parameters:    Size  Location     Type
 20853 ;;		None
 20854 ;; Auto vars:     Size  Location     Type
 20855 ;;		None
 20856 ;; Return value:  Size  Location     Type
 20857 ;;                  1    wreg      void 
 20858 ;; Registers used:
 20859 ;;		wreg, status,2, status,0, cstack
 20860 ;; Tracked objects:
 20861 ;;		On entry : 0/0
 20862 ;;		On exit  : 0/0
 20863 ;;		Unchanged: 0/0
 20864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20869 ;;Total ram usage:        0 bytes
 20870 ;; Hardware stack levels used:    1
 20871 ;; Hardware stack levels required when called:    1
 20872 ;; This function calls:
 20873 ;;		i2_I2C_Master_Wait
 20874 ;; This function is called by:
 20875 ;;		i2_getRTC
 20876 ;; This function uses a non-reentrant model
 20877 ;;
 20878                           
 20879                           	psect	text88
 20880  004792                     __ptext88:
 20881                           	opt stack 0
 20882  004792                     i2_I2C_Master_Start:
 20883                           	opt stack 18
 20884                           
 20885                           ;I2C.c: 33: I2C_Master_Wait();
 20886                           
 20887                           ;incstack = 0
 20888  004792  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20889                           
 20890                           ;I2C.c: 34: SEN = 1;
 20891  004796  80C5               	bsf	4037,0,c	;volatile
 20892  004798  0012               	return		;funcret
 20893  00479A                     __end_ofi2_I2C_Master_Start:
 20894                           	opt stack 0
 20895                           pclatu	equ	0xFFB
 20896                           pclath	equ	0xFFA
 20897                           tblptru	equ	0xFF8
 20898                           tblptrh	equ	0xFF7
 20899                           tblptrl	equ	0xFF6
 20900                           tablat	equ	0xFF5
 20901                           prodh	equ	0xFF4
 20902                           prodl	equ	0xFF3
 20903                           intcon	equ	0xFF2
 20904                           intcon2	equ	0xFF1
 20905                           intcon3	equ	0xFF0
 20906                           indf0	equ	0xFEF
 20907                           postinc0	equ	0xFEE
 20908                           fsr0h	equ	0xFEA
 20909                           fsr0l	equ	0xFE9
 20910                           wreg	equ	0xFE8
 20911                           postdec1	equ	0xFE5
 20912                           fsr1h	equ	0xFE2
 20913                           fsr1l	equ	0xFE1
 20914                           indf2	equ	0xFDF
 20915                           postinc2	equ	0xFDE
 20916                           postdec2	equ	0xFDD
 20917                           fsr2h	equ	0xFDA
 20918                           fsr2l	equ	0xFD9
 20919                           status	equ	0xFD8
 20920                           
 20921 ;; *************** function i2_I2C_Master_Read *****************
 20922 ;; Defined at:
 20923 ;;		line 55 in file "I2C.c"
 20924 ;; Parameters:    Size  Location     Type
 20925 ;;  a               1    wreg     unsigned char 
 20926 ;; Auto vars:     Size  Location     Type
 20927 ;;  a               1    1[COMRAM] unsigned char 
 20928 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20929 ;; Return value:  Size  Location     Type
 20930 ;;                  1    wreg      unsigned char 
 20931 ;; Registers used:
 20932 ;;		wreg, status,2, status,0, cstack
 20933 ;; Tracked objects:
 20934 ;;		On entry : 0/0
 20935 ;;		On exit  : 0/0
 20936 ;;		Unchanged: 0/0
 20937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20942 ;;Total ram usage:        2 bytes
 20943 ;; Hardware stack levels used:    1
 20944 ;; Hardware stack levels required when called:    1
 20945 ;; This function calls:
 20946 ;;		i2_I2C_Master_Wait
 20947 ;; This function is called by:
 20948 ;;		i2_getRTC
 20949 ;; This function uses a non-reentrant model
 20950 ;;
 20951                           
 20952                           	psect	text89
 20953  004610                     __ptext89:
 20954                           	opt stack 0
 20955  004610                     i2_I2C_Master_Read:
 20956                           	opt stack 18
 20957                           
 20958                           ;incstack = 0
 20959                           ;i2I2C_Master_Read@a stored from wreg
 20960  004610  6E02               	movwf	i2I2C_Master_Read@a,c
 20961                           
 20962                           ;I2C.c: 57: unsigned char temp;
 20963                           ;I2C.c: 58: I2C_Master_Wait();
 20964  004612  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20965                           
 20966                           ;I2C.c: 59: RCEN = 1;
 20967  004616  86C5               	bsf	4037,3,c	;volatile
 20968                           
 20969                           ;I2C.c: 60: I2C_Master_Wait();
 20970  004618  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20971                           
 20972                           ;I2C.c: 61: temp = SSPBUF;
 20973  00461C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20974                           
 20975                           ;I2C.c: 62: I2C_Master_Wait();
 20976  004620  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20977                           
 20978                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20979  004624  5002               	movf	i2I2C_Master_Read@a,w,c
 20980  004626  A4D8               	btfss	status,2,c
 20981  004628  D002               	goto	i2u363_40
 20982  00462A  8AC5               	bsf	4037,5,c	;volatile
 20983  00462C  D001               	goto	i2l5321
 20984  00462E                     i2u363_40:
 20985  00462E  9AC5               	bcf	4037,5,c	;volatile
 20986  004630                     i2l5321:
 20987                           
 20988                           ;I2C.c: 64: ACKEN = 1;
 20989  004630  88C5               	bsf	4037,4,c	;volatile
 20990                           
 20991                           ;I2C.c: 65: return temp;
 20992  004632  5003               	movf	i2I2C_Master_Read@temp,w,c
 20993  004634  0012               	return	
 20994  004636                     __end_ofi2_I2C_Master_Read:
 20995                           	opt stack 0
 20996                           pclatu	equ	0xFFB
 20997                           pclath	equ	0xFFA
 20998                           tblptru	equ	0xFF8
 20999                           tblptrh	equ	0xFF7
 21000                           tblptrl	equ	0xFF6
 21001                           tablat	equ	0xFF5
 21002                           prodh	equ	0xFF4
 21003                           prodl	equ	0xFF3
 21004                           intcon	equ	0xFF2
 21005                           intcon2	equ	0xFF1
 21006                           intcon3	equ	0xFF0
 21007                           indf0	equ	0xFEF
 21008                           postinc0	equ	0xFEE
 21009                           fsr0h	equ	0xFEA
 21010                           fsr0l	equ	0xFE9
 21011                           wreg	equ	0xFE8
 21012                           postdec1	equ	0xFE5
 21013                           fsr1h	equ	0xFE2
 21014                           fsr1l	equ	0xFE1
 21015                           indf2	equ	0xFDF
 21016                           postinc2	equ	0xFDE
 21017                           postdec2	equ	0xFDD
 21018                           fsr2h	equ	0xFDA
 21019                           fsr2l	equ	0xFD9
 21020                           status	equ	0xFD8
 21021                           
 21022 ;; *************** function i2_I2C_Master_Wait *****************
 21023 ;; Defined at:
 21024 ;;		line 26 in file "I2C.c"
 21025 ;; Parameters:    Size  Location     Type
 21026 ;;		None
 21027 ;; Auto vars:     Size  Location     Type
 21028 ;;		None
 21029 ;; Return value:  Size  Location     Type
 21030 ;;                  1    wreg      void 
 21031 ;; Registers used:
 21032 ;;		wreg, status,2, status,0
 21033 ;; Tracked objects:
 21034 ;;		On entry : 0/0
 21035 ;;		On exit  : 0/0
 21036 ;;		Unchanged: 0/0
 21037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21042 ;;Total ram usage:        1 bytes
 21043 ;; Hardware stack levels used:    1
 21044 ;; This function calls:
 21045 ;;		Nothing
 21046 ;; This function is called by:
 21047 ;;		i2_I2C_Master_Start
 21048 ;;		i2_I2C_Master_Stop
 21049 ;;		i2_I2C_Master_Write
 21050 ;;		i2_I2C_Master_Read
 21051 ;; This function uses a non-reentrant model
 21052 ;;
 21053                           
 21054                           	psect	text90
 21055  004714                     __ptext90:
 21056                           	opt stack 0
 21057  004714                     i2_I2C_Master_Wait:
 21058                           	opt stack 18
 21059  004714                     i2l66:
 21060  004714  B4C7               	btfsc	4039,2,c	;volatile
 21061  004716  D7FE               	goto	i2l66
 21062  004718  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21063  00471C  0E1F               	movlw	31
 21064  00471E  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21065  004720  B4D8               	btfsc	status,2,c
 21066  004722  0012               	return	
 21067  004724  D7F7               	goto	i2l66
 21068  004726                     __end_ofi2_I2C_Master_Wait:
 21069                           	opt stack 0
 21070                           pclatu	equ	0xFFB
 21071                           pclath	equ	0xFFA
 21072                           tblptru	equ	0xFF8
 21073                           tblptrh	equ	0xFF7
 21074                           tblptrl	equ	0xFF6
 21075                           tablat	equ	0xFF5
 21076                           prodh	equ	0xFF4
 21077                           prodl	equ	0xFF3
 21078                           intcon	equ	0xFF2
 21079                           intcon2	equ	0xFF1
 21080                           intcon3	equ	0xFF0
 21081                           indf0	equ	0xFEF
 21082                           postinc0	equ	0xFEE
 21083                           fsr0h	equ	0xFEA
 21084                           fsr0l	equ	0xFE9
 21085                           wreg	equ	0xFE8
 21086                           postdec1	equ	0xFE5
 21087                           fsr1h	equ	0xFE2
 21088                           fsr1l	equ	0xFE1
 21089                           indf2	equ	0xFDF
 21090                           postinc2	equ	0xFDE
 21091                           postdec2	equ	0xFDD
 21092                           fsr2h	equ	0xFDA
 21093                           fsr2l	equ	0xFD9
 21094                           status	equ	0xFD8
 21095                           pclatu	equ	0xFFB
 21096                           pclath	equ	0xFFA
 21097                           tblptru	equ	0xFF8
 21098                           tblptrh	equ	0xFF7
 21099                           tblptrl	equ	0xFF6
 21100                           tablat	equ	0xFF5
 21101                           prodh	equ	0xFF4
 21102                           prodl	equ	0xFF3
 21103                           intcon	equ	0xFF2
 21104                           intcon2	equ	0xFF1
 21105                           intcon3	equ	0xFF0
 21106                           indf0	equ	0xFEF
 21107                           postinc0	equ	0xFEE
 21108                           fsr0h	equ	0xFEA
 21109                           fsr0l	equ	0xFE9
 21110                           wreg	equ	0xFE8
 21111                           postdec1	equ	0xFE5
 21112                           fsr1h	equ	0xFE2
 21113                           fsr1l	equ	0xFE1
 21114                           indf2	equ	0xFDF
 21115                           postinc2	equ	0xFDE
 21116                           postdec2	equ	0xFDD
 21117                           fsr2h	equ	0xFDA
 21118                           fsr2l	equ	0xFD9
 21119                           status	equ	0xFD8
 21120                           
 21121                           	psect	rparam
 21122  0000                     pclatu	equ	0xFFB
 21123                           pclath	equ	0xFFA
 21124                           tblptru	equ	0xFF8
 21125                           tblptrh	equ	0xFF7
 21126                           tblptrl	equ	0xFF6
 21127                           tablat	equ	0xFF5
 21128                           prodh	equ	0xFF4
 21129                           prodl	equ	0xFF3
 21130                           intcon	equ	0xFF2
 21131                           intcon2	equ	0xFF1
 21132                           intcon3	equ	0xFF0
 21133                           indf0	equ	0xFEF
 21134                           postinc0	equ	0xFEE
 21135                           fsr0h	equ	0xFEA
 21136                           fsr0l	equ	0xFE9
 21137                           wreg	equ	0xFE8
 21138                           postdec1	equ	0xFE5
 21139                           fsr1h	equ	0xFE2
 21140                           fsr1l	equ	0xFE1
 21141                           indf2	equ	0xFDF
 21142                           postinc2	equ	0xFDE
 21143                           postdec2	equ	0xFDD
 21144                           fsr2h	equ	0xFDA
 21145                           fsr2l	equ	0xFD9
 21146                           status	equ	0xFD8
 21147                           
 21148                           	psect	temp
 21149  00007E                     btemp:
 21150                           	opt stack 0
 21151  00007E                     	ds	1
 21152  0000                     int$flags	set	btemp
 21153                           pclatu	equ	0xFFB
 21154                           pclath	equ	0xFFA
 21155                           tblptru	equ	0xFF8
 21156                           tblptrh	equ	0xFF7
 21157                           tblptrl	equ	0xFF6
 21158                           tablat	equ	0xFF5
 21159                           prodh	equ	0xFF4
 21160                           prodl	equ	0xFF3
 21161                           intcon	equ	0xFF2
 21162                           intcon2	equ	0xFF1
 21163                           intcon3	equ	0xFF0
 21164                           indf0	equ	0xFEF
 21165                           postinc0	equ	0xFEE
 21166                           fsr0h	equ	0xFEA
 21167                           fsr0l	equ	0xFE9
 21168                           wreg	equ	0xFE8
 21169                           postdec1	equ	0xFE5
 21170                           fsr1h	equ	0xFE2
 21171                           fsr1l	equ	0xFE1
 21172                           indf2	equ	0xFDF
 21173                           postinc2	equ	0xFDE
 21174                           postdec2	equ	0xFDD
 21175                           fsr2h	equ	0xFDA
 21176                           fsr2l	equ	0xFD9
 21177                           status	equ	0xFD8


Data Sizes:
    Strings     1215
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_116(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _PusherTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  176735
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   19713
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   15359
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              8 BANK0     10    10      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4101
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10722
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9975
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21840
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20926
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43432
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12647
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   79915
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                       _PusherTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8391
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13623
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8304
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTestA5                                         2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8279
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16481
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8144
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4101
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4101
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 19 18:24:17 2017

                                    _i 00E4                     i2_I2C_Master_Start 4792  
                   i2_I2C_Master_Write 4768                                     l66 4700  
                                   _ID 2C2E                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 1FDE                                    l487 35BE  
                                  l746 2D46                                    l747 2D60  
                                  l926 338C                                    l792 3C12  
                                  l939 46CC                                    l948 3016  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 43C6  
      __end_of_change_state_to_menu_12 4236        __end_of_change_state_to_menu_22 41FE  
      __end_of_change_state_to_menu_23 4396           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 44B6  
      __end_of_change_state_to_logs_12 4486        __end_of_change_state_to_logs_22 4456  
      __end_of_change_state_to_logs_23 4540        __end_of_change_state_to_logs_33 4426  
      __end_of_change_state_to_logs_34 43F6                                   ??_ID 0088  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1101 0126  
                                 l1104 018C                                   l1201 3F56  
                                 l1105 01DA                                   l1210 3A1A  
                                 l1106 0240                                   l1131 05E8  
                                 l1107 028E                                   l1036 32C0  
                                 l1062 34B0                                   l1143 0782  
                                 l1071 1C8C                                   l1039 32E0  
                                 l1161 3ADA                                   l1170 3B06  
                                 l1218 3A4E                                   l1171 3B0A  
                                 l1059 34AC                                   l1148 0858  
                                 l1068 1C88                                   l1173 3B48  
                                 l1165 3AF6                                   l1182 38EE  
                                 l1094 007C                                   l1255 13B6  
                                 l1191 3922                                   l1167 3AFA  
                                 l1192 393C                                   l1168 3AFE  
                                 l1169 3B02                                   l1097 0080  
                                 l1188 38FE                                   l1702 3BCC  
                                 l1198 3F34                                   l1712 3DE6  
                                 l1649 374C                                   l5211 4580  
                                 l5213 4592                                   l6013 33F4  
                                 l6021 3416                                   l6025 342C  
                                 l6017 33FE                                   l5411 11A4  
                                 l7003 0804                                   l5235 450A  
                                 l5253 45B8                                   l5421 11E2  
                                 l5405 117E                                   l7101 3A42  
                                 l7013 0842                                   l6029 3436  
                                 l5271 3B88                                   l5511 14C8  
                                 l5503 14A4                                   l5415 11AE  
                                 l7023 0872                                   l7007 081C  
                                 l6151 3998                                   l5281 3BBE  
                                 l5273 3B8E                                   l5505 14AE  
                                 l5441 12A2                                   l5409 1192  
                                 l7121 3B0E                                   l7033 089A  
                                 l7025 0878                                   l5601 373A  
                                 l5291 3DAE                                   l5523 150A  
                                 l5451 131A                                   l7043 08C2  
                                 l7035 08A0                                   l6147 3982  
                                 l6411 2CCA                                   l6059 3FFA  
                                 l5269 3B7C                                   l5293 3DB4  
                                 l5533 157C                                   l5517 14E4  
                                 l5453 1332                                   l5437 1290  
                                 l5429 125E                                   l7029 0882  
                                 l5541 424C                                   l6157 39C4  
                                 l6421 2CFC                                   l5519 14F0  
                                 l5527 151E                                   l5447 1308  
                                 l5439 129C                                   l5463 137C  
                                 l5535 1588                                   l7039 08AA  
                                 l7231 3634                                   l5551 3AAA  
                                 l5297 3DD8                                   l5289 3DA2  
                                 l5529 1524                                   l5481 140E  
                                 l5457 135E                                   l5449 1314  
                                 l7065 390C                                   l7233 3640  
                                 l7225 3616                                   l7401 0AEE  
                                 l6425 2D0A                                   l6361 30B8  
                                 l5475 13EE                                   l5459 1376  
                                 l6603 1EA2                                   l7251 3698  
                                 l7243 3676                                   l7235 3646  
                                 l7219 3600                                   l5547 3A94  
                                 l5539 4240                                   l5811 2060  
                                 l5803 1FE8                                   l7411 0B18  
                                 l6435 2D30                                   l8051 3598  
                                 l8043 356E                                   l5493 144A  
                                 l5557 3ACA                                   l5821 20F6  
                                 l5813 207E                                   l5805 2006  
                                 l7405 0B06                                   l7341 09D0  
                                 l6461 2DD0                                   l6429 2D18  
                                 l8061 35B4                                   l8053 359E  
                                 l8045 3584                                   l5575 3BFE  
                                 l5479 1408                                   l6615 1EEA  
                                 l6607 1ED8                                   l7247 3684  
                                 l7271 3848                                   l7263 3824  
                                 l5823 2114                                   l5815 209C  
                                 l5807 2024                                   l5831 21AE  
                                 l7511 0ED4                                   l7415 0B22  
                                 l7335 09B8                                   l5591 36E0  
                                 l6463 2DEA                                   l8063 35BA  
                                 _ADIE 007CEE                                   l5577 3C28  
                                 l6801 041C                                   l7273 3854  
                                 l5825 2132                                   l5817 20BA  
                                 l5809 2042                                   l7441 0BE6  
                                 l7353 0A04                                   l7345 09DA  
                                 l7337 09BE                                   l5593 36E6  
                                 l6457 2D9C                                   l6377 30F2  
                                 l8049 3592                                   l5499 146C  
                                 l6811 0444                                   l6619 1F20  
                                 l6547 1CDC                                   l7275 385A  
                                 l7283 388C                                   l7267 3834  
                                 l5819 20D8                                   l7515 0EDE  
                                 l7451 0C7C                                   l7443 0C04  
                                 l7435 0B8C                                   l7419 0B3A  
                                 l6459 2DB6                                   l6467 2E04  
                                 l8067 35C0                                   l6805 0434  
                                 l6661 00F0                                   l6565 1D94  
                                 l5829 2150                                   l7613 10A2  
                                 l7605 1080                                   l7533 0F2A  
                                 l7525 0F08                                   l7453 0C9A  
                                 l7445 0C22                                   l7437 0BAA  
                                 l7373 0A6C                                   l7349 09F2  
                                 l5589 36D0                                   l6469 2E32  
                                 l6911 0652                                   l6903 0630  
                                 l6831 04B8                                   l6823 0496  
                                 l6815 045C                                   l6807 043A  
                                 l6583 1E26                                   l7287 38A0  
                                 l7279 387E                                   l7631 1100  
                                 l7551 0F90                                   l7519 0EF6  
                                 l7455 0CB8                                   l7447 0C40  
                                 l7439 0BC8                                   l7463 0D12  
                                 l7367 0A5C                                   l7383 0A92  
                                 l6921 067A                                   l6913 0658  
                                 l6841 04E0                                   l6833 04BE  
                                 l6753 032C                                   l6745 030A  
                                 l6665 00FA                                   l6577 1DE4  
                                 l7609 108A                                   l7529 0F12  
                                 l7473 0DC2                                   l7457 0CD6  
                                 l7449 0C5E                                   l7465 0D76  
                                 l7377 0A84                                   l7369 0A62  
                                 l6907 063A                                   l6827 04A0  
                                 l6771 038E                                   l6763 0354  
                                 l6755 0332                                   l6659 00EA  
                                 l6595 1E72                                   l7635 110A  
                                 l7555 0F9A                                   l7491 0E0E  
                                 l7483 0DEC                                   l7459 0CF4  
                                 l5971 3782                                   l6933 06BE  
                                 l6917 0662                                   l6853 0524  
                                 l6837 04C8                                   l6781 03B6  
                                 l6749 0314                                   l6669 0112  
                                 l5797 1F5C                                   l7653 1156  
                                 l7645 1134                                   l7573 0FE6  
                                 l7565 0FC4                                   l7477 0DDA  
                                 l7469 0DB8                                   l7397 0AE4  
                                 l6943 06E6                                   l6863 054C  
                                 l6775 0398                                   l6759 033C  
                                 l7639 1122                                   l7591 104C  
                                 l7559 0FB2                                   l7487 0DF6  
                                 l7911 2F50                                   l5967 376C  
                                 l6937 06D6                                   l6929 06B4  
                                 l6857 053C                                   l6849 051A  
                                 l6785 03C0                                   l7649 113E  
                                 l7569 0FCE                                   l7657 1162  
                                 l5977 37F8                                   l6963 075A  
                                 l6955 0738                                   l6947 06FE  
                                 l6939 06DC                                   l6883 05C0  
                                 l6875 059E                                   l6867 0564  
                                 l6859 0542                                   l6779 03B0  
                                 l7595 1056                                   l6965 0760  
                                 l6885 05C6                                   l6797 0412  
                                 l6789 03D8                                   l7909 2F3C  
                                 l6959 0742                                   l6879 05A8  
                                 l7599 106E                                   l7935 2FD0  
                                 l6993 07DC                                   l6969 076A  
                                 l6889 05D0                                   l7971 32F8  
                                 l7947 3262                                   l6997 07F4  
                                 l6989 07D2                                   l7981 3316  
                                 l7973 32FE                                   l7965 32E6  
                                 l6999 07FA                                   l7975 3304  
                                 l7967 32EC                                   l7977 330A  
                                 l7969 32F2                                   l7985 331C  
                                 l7979 3310                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5020 1F0E  
                                 u5110 01DA                                   u5130 028E  
                                 u3530 4508                                   u5028 1F12  
                                 u4440 1FDE                                   u4425 3E20  
                                 u3810 12DC                                   u5090 0126  
                                 u3730 40E8                                   _PEIE 007F96  
                                 u3740 40EA                                   u3750 4134  
                                 u3751 4130                                   u7007 2CA0  
                                 u3760 4136                                   u4800 2C5E  
                                 u3817 12D2                                   u7017 2D4A  
                                 u3850 1354                                   u7107 343E  
                                 u7027 2D54                                   _RCEN 007E2B  
                                 u7117 4146                                   u7037 2D78  
                                 u4830 2CBA                                   u8007 1A40  
                                 u7207 0B54                                   u7127 417A  
                                 u7047 42C0                                   u4808 2C62  
                                 u3857 134A                                   u8017 1A74  
                                 u7217 0DCA                                   u7137 08E2  
                                 u7057 2E40                                   u8107 3D46  
                                 u8027 1AA8                                   u7307 105E  
                                 u7227 0DFE                                   u7147 09E2  
                                 u7067 2E74                                   u8117 3D50  
                                 u8037 1ADC                                   u7317 1092  
                                 u7237 0E28                                   u7157 0A1E  
                                 u7077 2EA8                                   u4950 1D1E  
                                 u4838 2CBE                                   u8127 3D7C  
                                 u8047 1B10                                   u7407 1CCC  
                                 u7327 10BC                                   u7247 0EE6  
                                 u7167 0A74                                   u7087 33AA  
                                 u4960 1D20                                   u8137 3D86  
                                 u8057 1B44                                   u7417 1D34  
                                 u7337 1112                                   u7257 0F1A  
                                 u7177 0AA0                                   u7097 3406  
                                 i2l66 4714                                   u8147 3EEE  
                                 u8067 1B78                                   u7507 345C  
                                 u7427 1D88                                   u7347 1146  
                                 u7267 0F44                                   u7187 0AF6  
                                 u8077 1BAC                                   u7517 34A0  
                                 u7437 1DA8                                   u7357 3270  
                                 u7277 0FA2                                   u7197 0B2A  
                                 u4990 1EC6                                   u8087 1BE0  
                                 u7607 01EA                                   u7527 34C2  
                                 u7447 1DD6                                   u7367 32B4  
                                 u7287 0FD6                                   u6760 3016  
                                 u8097 1C14                                   u7617 0250  
                                 u7537 002C                                   u7457 1E1A  
                                 u7377 1C38                                   u7297 1000  
                                 u7707 04A8                                   u7627 026E  
                                 u7547 0070                                   u7467 1E38  
                                 u7387 1C7C                                   u7717 04D0  
                                 u7637 029E                                   u7557 0092  
                                 u7477 1E66                                   u7397 1C9E  
                                 u4998 1ECA                                   u7807 074A  
                                 u7727 052C                                   u7647 031C  
                                 u7567 0102                                   u7487 1E80  
                                 u7817 0772                                   u7737 0554  
                                 u7657 0344                                   u7577 0136  
                                 u7497 4588                                   u7907 3F14  
                                 u7827 0794                                   u7747 05B0  
                                 u7667 03A0                                   u7587 019C  
                                 u6947 3046                                   u7917 3F48  
                                 u7837 07E4                                   u7757 05D8  
                                 u7677 03C8                                   u7597 01BA  
                                 u6957 30A8                                   u7927 38B8  
                                 u7847 080C                                   u7767 0642  
                                 u7687 0424                                   u6967 3112  
                                 u7937 3926                                   u7857 085C  
                                 u7777 066A                                   u7697 044C  
                                 u6977 3130                                   u7947 3930  
                                 u7867 0866                                   u7787 06C6  
                                 u6987 3FD0                                   u7957 1924  
                                 u7877 088A                                   u7797 06EE  
                                 u6997 2C44                                   u7967 1970  
                                 u7887 08B2                                   u7977 19A4  
                                 u7897 39DA                                   u7987 19D8  
                                 u7997 1A0C                                   _RSEN 007E29  
                          _stopSignals 46D4                                   _Test 3262  
                                 _back 005B                                   _main 3524  
                                 _down 0067                                   _keys FB25  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 465A                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4752  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 24B2  
                          i2_lcdNibble 3F5C                        __end_of_Loading 3148  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 344E                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 36A2                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB40  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 38AA  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB40                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB58  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FC81  
                                STR_68 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC92  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 375E                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3BD6  
                      __end_of___lwmod 3DF0                                  i2l257 24AE  
                                i2l602 2540                                  i2l861 2BD2  
                                i2l863 2BF2                                  i2l857 2B86  
                                i2l939 46F8                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1916                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4746                        __end_of_handler 2C2E  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4598  
                      __end_of_initLCD 4184                         __CFG_EBTRB$OFF 000000  
                                _debug 0065                             i2isdigit@c 0003  
                                _getIR 3FB2                        __end_of_loadRTC 39CC  
                      __end_of_readMAG 413E                        __end_of_dpowers FB40  
                                _first 0073                                  _enter 0069  
                      __end_of_isdigit 45C2                                  _input 007D  
                                _putch 4726                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4610  
                     __end_ofi2_getRTC 3CBE                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1916  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4306                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 4058                           __end_of_Test 336A  
                   __size_ofi2_lcdInst 000C                           __end_of_main 35E4  
                         __end_of_keys FB36                           __end_of_sort 467C  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B6  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC2C  
                               STR_101 FC3D                                 STR_110 FCB4  
                               STR_102 FBB5                                 STR_103 FE3A  
                               STR_111 FB6D                                 STR_104 FBE8  
                               STR_112 FB7F                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_116 FFB6                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_109 FE69  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4336              i2_change_state_to_menu_22 4306  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1255 1782  
                               i2l1702 404E                                 i2l1712 41BC  
                               i2l6111 258C                                 i2l5321 4630  
                               i2l6201 28F8                                 i2l6121 25FA  
                               i2l6113 25A2                                 i2l6105 254A  
                               i2l6211 2922                                 i2l6123 2610  
                               i2l6115 25B8                                 i2l6107 2560  
                               i2l6131 2652                                 i2l6301 2A52  
                               i2l6213 2926                                 i2l6125 2626  
                               i2l6117 25CE                                 i2l6109 2576  
                               i2l6133 26AC                                 i2l6231 295C  
                               i2l6223 2944                                 i2l6127 263C  
                               i2l6119 25E4                                 i2l5345 46B4  
                               i2l6313 2A88                                 i2l6305 2A64  
                               i2l6233 2962                                 i2l6225 294A  
                               i2l6209 2912                                 i2l5355 401C  
                               i2l6227 2950                                 i2l6219 2930  
                               i2l5613 3C84                                 i2l5357 4024  
                               i2l8005 275E                                 i2l6309 2A76  
                               i2l6229 2956                                 i2l6237 2968  
                               i2l5623 3CAE                                 i2l5367 4044  
                               i2l5359 4028                                 i2l5383 41B2  
                               i2l5375 4192                                 i2l5711 17B0  
                               i2l8015 2820                                 i2l6263 29D2  
                               i2l6319 2A92                                 i2l5617 3C94  
                               i2l5377 419A                                 i2l5641 15B2  
                               i2l6273 29F8                                 i2l6257 29C4  
                               i2l6249 29AC                                 i2l8121 2BA6  
                               i2l5379 419E                                 i2l5715 17C8  
                               i2l5651 15D6                                 i2l6291 2A32  
                               i2l6283 2A1A                                 i2l6267 29EE  
                               i2l6099 24DE                                 i2l5741 1844  
                               i2l5717 17CC                                 i2l5645 15C2  
                               i2l6277 2A0C                                 i2l5735 1818  
                               i2l5647 15D0                                 i2l6279 2A10  
                               i2l8143 2BF0                                 i2l8119 2BA4  
                               i2l5753 1870                                 i2l5729 17FE  
                               i2l5673 1692                                 i2l5665 166A  
                               i2l5657 1608                                 i2l6297 2A40  
                               i2l8081 2B3A                                 i2l5755 1878  
                               i2l5763 189E                                 i2l5747 185A  
                               i2l5739 183C                                 i2l5683 16EA  
                               i2l5675 169C                                 i2l5771 18FA  
                               i2l8411 24A0                                 i2l8083 2B3E  
                               i2l5765 18A4                                 i2l5693 1736  
                               i2l5685 16F4                                 i2l5677 16A0  
                               i2l7701 227C                                 i2l5759 188C  
                               i2l5695 1748                                 i2l5687 16FA  
                               i2l5951 3216                                 i2l8415 2980  
                               i2l5775 42DE                                 i2l8407 2462  
                               i2l5769 18F2                                 i2l5689 170C  
                               i2l8417 299C                                 i2l5777 42E6  
                               i2l8409 2484                                 i2l7801 2404  
                               i2l7721 22C4                                 i2l7713 22A8  
                               i2l7705 228A                                 i2l8097 2B5A  
                               i2l5699 174C                                 i2l5947 3206  
                               i2l7813 2436                                 i2l7805 2412  
                               i2l7741 2312                                 i2l7733 22F6  
                               i2l7725 22D2                                 i2l7717 22B6  
                               i2l7709 229A                                 i2l5959 324A  
                               i2l7671 2222                                 i2l7809 2420  
                               i2l7761 2360                                 i2l7753 2344  
                               i2l7745 2320                                 i2l7737 2304  
                               i2l7729 22E0                                 i2l7681 2244  
                               i2l7673 2228                                 i2l7819 2444  
                               i2l7781 23B6                                 i2l7773 2392  
                               i2l7765 2376                                 i2l7757 2352  
                               i2l7749 2336                                 i2l7685 2252  
                               i2l7677 2236                                 i2l7793 23E0  
                               i2l7785 23C4                                 i2l7777 23A0  
                               i2l7769 2384                                 i2l7697 226E  
                               i2l7689 2260                                 i2l7797 23F6  
                               i2l7789 23D2                                 i2l7995 26F4  
                               i2l7999 2704                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008C  
                     __end_of_dispLogs 465A                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2EF0  
                               ___wmul 426C                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 42A2  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3A54                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 469E  
                               _initUI 44B6                                 _readIR 40A6  
                               _logRun 2EF0                                 clear_0 407E  
                               clear_1 408A                                 clear_2 4096  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 38AA                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 4236  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 45EA  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 45C2                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 4058  
                     __end_of_printRTC 21F2                           __mediumconst FB24  
                    __end_ofi2___lwmod 41C6                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 3524  
                    __end_ofi2_lcdInst 475E                      __end_ofi2_isdigit 46BC  
                           __accesstop 0080                __end_of__initialization 409C  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 46EA                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 479C  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4772                          __end_of_getIR 4006  
                          i2printRTC@i 0041                          _initSortTimer 375E  
          __end_of_updateServoPosition 3C4C                          __end_of_putch 4736  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2D92                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 456C          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4540                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 336A  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3225 012F               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0314                      __end_of_PortTests 3B5E  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2292 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00DE                                i2_putch 4746  
                            ?_initTime 0080                        _f_loadingNewCan 00E2  
                      i2printRTC@month 003D                  __size_of_Distribution 015E  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3D8E  
                              _Loading 302C            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 35E4                                ___awmod 3808  
                           _initServos 3EAC                                ___lldiv 36A2  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 3B5E                                ___lwmod 3D8E  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 4058  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3CBE                                _lcdInst 4736  
                              _handler 0008                                __ptext0 3524  
                              __ptext1 46D4                                __ptext2 465A  
                              __ptext3 302C                                __ptext4 375E  
                              __ptext5 3CBE                                __ptext6 3FB2  
                              __ptext7 40A6                                __ptext8 2C2E  
                              __ptext9 42A2                        __size_of_printf 0438  
                              _readADC 456C                        __size_of_strcpy 0036  
                              _initLCD 413E                                _cur_can 012B  
                              _loadRTC 3940                                _readMAG 40F2  
                              _dpowers FB36                     actuatorTest@i_1631 00AD  
                   actuatorTest@i_1641 00B0                     actuatorTest@i_1650 00B6  
                   actuatorTest@i_1642 00B1                     actuatorTest@i_1651 00B7  
                   actuatorTest@i_1660 00BC                     actuatorTest@i_1644 00B2  
                   actuatorTest@i_1661 00BD                     actuatorTest@i_1653 00B8  
                   actuatorTest@i_1645 00B3                     actuatorTest@i_1670 00C2  
                   actuatorTest@i_1654 00B9                     actuatorTest@i_1638 00AE  
                   actuatorTest@i_1671 00C3                     actuatorTest@i_1663 00BE  
                   actuatorTest@i_1647 00B4                     actuatorTest@i_1639 00AF  
                   actuatorTest@i_1664 00BF                     actuatorTest@i_1648 00B5  
                   actuatorTest@i_1657 00BA                     actuatorTest@i_1658 00BB  
                   actuatorTest@i_1667 00C0                     actuatorTest@i_1668 00C1  
                              _isdigit 4598                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2D92  
                       __pintcode_body 2AC0                   end_of_initialization 409C  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 2AC0  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0096              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3D26                             _sensorTest 1C2A  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2AC0  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3EAC                             _updateMenu 21F2  
                        ?_PusherTestA5 0001                      i2_I2C_Master_Read 4610  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 4714  
                    i2_I2C_Master_Stop 478A                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 4006  
                            i2___lwmod 4184                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 26E8                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4752                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 469E  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1C2A  
                  __end_of_EEPROM_read 46D4                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 42A2  
                       __end_of_getMAG 42D4                         __end_of_getRTC 3ADA  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 44E4  
                       __end_of_readIR 40F2                         __end_of_logRun 302C  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 426C  
            __end_ofi2_I2C_Master_Read 4636              __end_ofi2_I2C_Master_Wait 4726  
                       ??_PusherTestA5 00AB                           i2printf@prec 001D  
                  start_initialization 4058              __end_ofi2_I2C_Master_Stop 4792  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1322 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3ADA  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2412 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1936 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 46BC                     __end_of_PortTestA5 3940  
                     _I2C_Master_Start 4782                              _f_lastCan 0071  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 475E                      __size_of_initTime 0022  
                 __end_of_ToggleTestA5 3A54                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB24                              _lcdNibble 3D26  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00E0  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0054  
                        _algorithmTest 344E                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0164                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 479A             __end_ofi2_I2C_Master_Write 4772  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 28DA                            ??i2_isdigit 0001  
                             i2u422_40 172E                               i2u422_47 1724  
                             i2u418_40 16CE                               i2u418_47 16C4  
                             i2u363_40 462E                               _PIR2bits 000FA1  
                             i2u460_40 2540                   __end_of_PusherTestA5 3F5C  
                             i2u815_47 2918                               i2u816_47 3F74  
                             i2u681_40 281A                               i2u817_47 3F7E  
                             i2u818_47 3FA0                               i2u819_47 3FAA  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 45EA                          lcdNibble@data 0081  
                             i2_getRTC 3C4C                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 15A8                               i2_strcpy 42D4  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 406C                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4700                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 011C                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 3808                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4396  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 41FE  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 41C6  
              _change_state_to_menu_23 4366                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4486                _change_state_to_logs_12 4456  
              _change_state_to_logs_22 4426                _change_state_to_logs_23 4512  
              _change_state_to_logs_33 43F6                _change_state_to_logs_34 43C6  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2C26                             _EEPROMTest 479A  
                      _I2C_Master_Init 3DF0                       __size_of_readADC 002C  
                      _I2C_Master_Read 44E4                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4700  
                      _I2C_Master_Stop 477A                       __size_of_isdigit 002A  
                       _printSortTimer 26E8                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3262  
                             __ptext10 2D92                               __ptext11 3E50  
                             __ptext20 467C                               __ptext12 2EF0  
                             __ptext21 413E                               __ptext13 336A  
                             __ptext30 4700                               __ptext22 08CA  
                             __ptext14 46BC                               __ptext31 41C6  
                             __ptext23 1F28                               __ptext15 44B6  
                             __ptext40 0012                               __ptext32 41FE  
                             __ptext24 4236                               __ptext16 3940  
                             __ptext41 39CC                               __ptext33 3808  
                             __ptext25 3A54                               __ptext17 3DF0  
                             __ptext50 426C                               __ptext42 3F06  
                             __ptext34 35E4                               __ptext26 475E  
                             __ptext18 36A2                               __ptext51 3D8E  
                             __ptext43 3ADA                               __ptext35 3262  
                             __ptext27 477A                               __ptext19 4540  
                             __ptext60 24B2                               __ptext52 3B5E  
                             __ptext44 38AA                               __ptext36 1C2A  
                             __ptext28 4782                               __ptext61 42D4  
                             __ptext53 4736                               __ptext45 479A  
                             __ptext37 40F2                               __ptext29 44E4  
                             __ptext70 4426                               __ptext62 28DA  
                             __ptext54 3D26                               __ptext46 1916  
                             __ptext38 456C                               __ptext71 4456  
                             __ptext63 4306                               __ptext55 3EAC  
                             __ptext47 1170                               __ptext39 344E  
                             __ptext80 45EA                               __ptext72 4486  
                             __ptext64 4336                               __ptext56 3BD6  
                             __ptext48 4726                               __ptext81 4184  
                             __ptext73 4636                               __ptext65 4366  
                             __ptext49 4598                               __ptext90 4714  
                             __ptext82 4006                               __ptext74 3148  
                             __ptext66 4396                               __ptext58 21F2  
                             __ptext83 4752                               __ptext75 46EA  
                             __ptext67 43C6                               __ptext59 45C2  
                             __ptext84 3F5C                               __ptext76 26E8  
                             __ptext68 43F6                               __ptext85 3C4C  
                             __ptext77 15A8                               __ptext69 4512  
                             __ptext86 4768                               __ptext78 4746  
                             __ptext87 478A                               __ptext79 469E  
                             __ptext88 4792                               __ptext89 4610  
                             _dispLogs 4636                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1936 0002  
                   __end_of_initServos 3F06                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 467C  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3BD6                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F28  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4366      __end_ofi2_change_state_to_menu_22 4336  
                             loadRTC@i 0096                 __end_of_printSortTimer 28DA  
                            putch@data 0082               __end_of_I2C_Master_Start 478A  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4768  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 39CC                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1F28  
                     ___lwmod@dividend 0087                  __size_of_PusherTestA5 0056  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 46EA              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 24B2  
              __end_of_I2C_Master_Init 3E50                __end_of_I2C_Master_Read 4512  
              __end_of_I2C_Master_Wait 4714                __end_of_I2C_Master_Stop 4782  
                          lcdInst@data 0082                          printRTC@F3216 0133  
                         retrieveLog@i 000E                            _retrieveLog 3148  
                  __end_ofi2_lcdNibble 3FB2                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012D  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3E50                        ___lwmod@counter 008B  
                         _PusherTestA5 3F06                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
